

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Thu Feb 26 22:52:28 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    15                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	text77,global,reloc=2,class=CODE,delta=1
    97                           	psect	text78,global,reloc=2,class=CODE,delta=1
    98                           	psect	text79,global,reloc=2,class=CODE,delta=1
    99                           	psect	text80,global,reloc=2,class=CODE,delta=1
   100                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   101                           	psect	text82,global,reloc=2,class=CODE,delta=1
   102                           	psect	text83,global,reloc=2,class=CODE,delta=1
   103                           	psect	text84,global,reloc=2,class=CODE,delta=1
   104                           	psect	text85,global,reloc=2,class=CODE,delta=1
   105                           	psect	text86,global,reloc=2,class=CODE,delta=1
   106                           	psect	text87,global,reloc=2,class=CODE,delta=1
   107                           	psect	text88,global,reloc=2,class=CODE,delta=1
   108                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   109                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   110                           	psect	pa_nodes,global,class=CODE,delta=1
   111  0000                     tblptru	equ	0xFF8
   112                           tblptrh	equ	0xFF7
   113                           tblptrl	equ	0xFF6
   114                           tablat	equ	0xFF5
   115                           prodh	equ	0xFF4
   116                           prodl	equ	0xFF3
   117                           intcon	equ	0xFF2
   118                           indf0	equ	0xFEF
   119                           fsr0h	equ	0xFEA
   120                           fsr0l	equ	0xFE9
   121                           wreg	equ	0xFE8
   122                           indf1	equ	0xFE7
   123                           postinc1	equ	0xFE6
   124                           postdec1	equ	0xFE5
   125                           fsr1h	equ	0xFE2
   126                           fsr1l	equ	0xFE1
   127                           indf2	equ	0xFDF
   128                           postinc2	equ	0xFDE
   129                           postdec2	equ	0xFDD
   130                           plusw2	equ	0xFDB
   131                           fsr2h	equ	0xFDA
   132                           fsr2l	equ	0xFD9
   133                           status	equ	0xFD8
   134                           
   135                           	psect	mediumconst
   136  006CB4                     __pmediumconst:
   137                           	opt stack 0
   138  006CB4                     _octpowers:
   139                           	opt stack 0
   140  006CB4  0001               	dw	1
   141  006CB6  0000               	dw	0
   142  006CB8  0008               	dw	8
   143  006CBA  0000               	dw	0
   144  006CBC  0040               	dw	64
   145  006CBE  0000               	dw	0
   146  006CC0  0200               	dw	512
   147  006CC2  0000               	dw	0
   148  006CC4  1000               	dw	4096
   149  006CC6  0000               	dw	0
   150  006CC8  8000               	dw	32768
   151  006CCA  0000               	dw	0
   152  006CCC  0000               	dw	0
   153  006CCE  0004               	dw	4
   154  006CD0  0000               	dw	0
   155  006CD2  0020               	dw	32
   156  006CD4  0000               	dw	0
   157  006CD6  0100               	dw	256
   158  006CD8  0000               	dw	0
   159  006CDA  0800               	dw	2048
   160  006CDC  0000               	dw	0
   161  006CDE  4000               	dw	16384
   162  006CE0  0000               	dw	0
   163  006CE2  0000               	dw	0
   164  006CE4                     __end_of_octpowers:
   165                           	opt stack 0
   166  006CE4                     _dpowers:
   167                           	opt stack 0
   168  006CE4  0001               	dw	1
   169  006CE6  0000               	dw	0
   170  006CE8  000A               	dw	10
   171  006CEA  0000               	dw	0
   172  006CEC  0064               	dw	100
   173  006CEE  0000               	dw	0
   174  006CF0  03E8               	dw	1000
   175  006CF2  0000               	dw	0
   176  006CF4  2710               	dw	10000
   177  006CF6  0000               	dw	0
   178  006CF8  86A0               	dw	34464
   179  006CFA  0001               	dw	1
   180  006CFC  4240               	dw	16960
   181  006CFE  000F               	dw	15
   182  006D00  9680               	dw	38528
   183  006D02  0098               	dw	152
   184  006D04  E100               	dw	57600
   185  006D06  05F5               	dw	1525
   186  006D08  CA00               	dw	51712
   187  006D0A  3B9A               	dw	15258
   188  006D0C                     __end_of_dpowers:
   189                           	opt stack 0
   190  006D0C                     _hexpowers:
   191                           	opt stack 0
   192  006D0C  0001               	dw	1
   193  006D0E  0000               	dw	0
   194  006D10  0010               	dw	16
   195  006D12  0000               	dw	0
   196  006D14  0100               	dw	256
   197  006D16  0000               	dw	0
   198  006D18  1000               	dw	4096
   199  006D1A  0000               	dw	0
   200  006D1C  0000               	dw	0
   201  006D1E  0001               	dw	1
   202  006D20  0000               	dw	0
   203  006D22  0010               	dw	16
   204  006D24  0000               	dw	0
   205  006D26  0100               	dw	256
   206  006D28  0000               	dw	0
   207  006D2A  1000               	dw	4096
   208  006D2C                     __end_of_hexpowers:
   209                           	opt stack 0
   210  0000                     _BRGCON1	set	3952
   211  0000                     _BRGCON2	set	3953
   212  0000                     _BRGCON3	set	3954
   213  0000                     _BSEL0	set	3576
   214  0000                     _CANCON	set	3951
   215  0000                     _CIOCON	set	3955
   216  0000                     _COMSTATbits	set	3956
   217  0000                     _ECANCON	set	3959
   218  0000                     _EEADR	set	4009
   219  0000                     _EECON1bits	set	4006
   220  0000                     _EECON2	set	4007
   221  0000                     _EEDATA	set	4008
   222  0000                     _INTCONbits	set	4082
   223  0000                     _MSEL0	set	3568
   224  0000                     _MSEL1	set	3569
   225  0000                     _MSEL2	set	3570
   226  0000                     _OSCCONbits	set	4051
   227  0000                     _OSCTUNEbits	set	3995
   228  0000                     _PIE1bits	set	3997
   229  0000                     _PIR1bits	set	3998
   230  0000                     _PIR2bits	set	4001
   231  0000                     _RCREG	set	4014
   232  0000                     _RCSTA	set	4011
   233  0000                     _RCSTAbits	set	4011
   234  0000                     _RXB1CONbits	set	3920
   235  0000                     _RXERRCNT	set	3957
   236  0000                     _RXF0EIDH	set	3842
   237  0000                     _RXF0EIDL	set	3843
   238  0000                     _RXF0SIDH	set	3840
   239  0000                     _RXF0SIDL	set	3841
   240  0000                     _RXF10EIDH	set	3446
   241  0000                     _RXF10EIDL	set	3447
   242  0000                     _RXF10SIDH	set	3444
   243  0000                     _RXF10SIDL	set	3445
   244  0000                     _RXF11EIDH	set	3450
   245  0000                     _RXF11EIDL	set	3451
   246  0000                     _RXF11SIDH	set	3448
   247  0000                     _RXF11SIDL	set	3449
   248  0000                     _RXF12EIDH	set	3458
   249  0000                     _RXF12EIDL	set	3459
   250  0000                     _RXF12SIDH	set	3456
   251  0000                     _RXF12SIDL	set	3457
   252  0000                     _RXF13EIDH	set	3462
   253  0000                     _RXF13EIDL	set	3463
   254  0000                     _RXF13SIDH	set	3460
   255  0000                     _RXF13SIDL	set	3461
   256  0000                     _RXF14EIDH	set	3466
   257  0000                     _RXF14EIDL	set	3467
   258  0000                     _RXF14SIDH	set	3464
   259  0000                     _RXF14SIDL	set	3465
   260  0000                     _RXF15EIDH	set	3474
   261  0000                     _RXF15EIDL	set	3475
   262  0000                     _RXF15SIDH	set	3472
   263  0000                     _RXF15SIDL	set	3473
   264  0000                     _RXF1EIDH	set	3846
   265  0000                     _RXF1EIDL	set	3847
   266  0000                     _RXF1SIDH	set	3844
   267  0000                     _RXF1SIDL	set	3845
   268  0000                     _RXF2EIDH	set	3850
   269  0000                     _RXF2EIDL	set	3851
   270  0000                     _RXF2SIDH	set	3848
   271  0000                     _RXF2SIDL	set	3849
   272  0000                     _RXF3EIDH	set	3854
   273  0000                     _RXF3EIDL	set	3855
   274  0000                     _RXF3SIDH	set	3852
   275  0000                     _RXF3SIDL	set	3853
   276  0000                     _RXF4EIDH	set	3858
   277  0000                     _RXF4EIDL	set	3859
   278  0000                     _RXF4SIDH	set	3856
   279  0000                     _RXF4SIDL	set	3857
   280  0000                     _RXF5EIDH	set	3862
   281  0000                     _RXF5EIDL	set	3863
   282  0000                     _RXF5SIDH	set	3860
   283  0000                     _RXF5SIDL	set	3861
   284  0000                     _RXF6EIDH	set	3426
   285  0000                     _RXF6EIDL	set	3427
   286  0000                     _RXF6SIDH	set	3424
   287  0000                     _RXF6SIDL	set	3425
   288  0000                     _RXF7EIDH	set	3430
   289  0000                     _RXF7EIDL	set	3431
   290  0000                     _RXF7SIDH	set	3428
   291  0000                     _RXF7SIDL	set	3429
   292  0000                     _RXF8EIDH	set	3434
   293  0000                     _RXF8EIDL	set	3435
   294  0000                     _RXF8SIDH	set	3432
   295  0000                     _RXF8SIDL	set	3433
   296  0000                     _RXF9EIDH	set	3442
   297  0000                     _RXF9EIDL	set	3443
   298  0000                     _RXF9SIDH	set	3440
   299  0000                     _RXF9SIDL	set	3441
   300  0000                     _RXFBCON0	set	3552
   301  0000                     _RXFBCON1	set	3553
   302  0000                     _RXFBCON2	set	3554
   303  0000                     _RXFBCON3	set	3555
   304  0000                     _RXFBCON4	set	3556
   305  0000                     _RXFBCON5	set	3557
   306  0000                     _RXFBCON6	set	3558
   307  0000                     _RXFBCON7	set	3559
   308  0000                     _RXFCON0	set	3540
   309  0000                     _RXFCON1	set	3541
   310  0000                     _RXM0EIDH	set	3866
   311  0000                     _RXM0EIDL	set	3867
   312  0000                     _RXM0SIDL	set	3865
   313  0000                     _RXM1EIDH	set	3870
   314  0000                     _RXM1EIDL	set	3871
   315  0000                     _RXM1SIDL	set	3869
   316  0000                     _SPBRG	set	4015
   317  0000                     _SPBRGH	set	4016
   318  0000                     _T0CON	set	4053
   319  0000                     _T0CONbits	set	4053
   320  0000                     _TMR0H	set	4055
   321  0000                     _TMR0L	set	4054
   322  0000                     _TRISBbits	set	3987
   323  0000                     _TRISCbits	set	3988
   324  0000                     _TXERRCNT	set	3958
   325  0000                     _TXREG	set	4013
   326  0000                     _TXSTA	set	4012
   327  0000                     _TXSTAbits	set	4012
   328  0000                     _B0RXFUL	set	28935
   329  0000                     _B0TXEN	set	28610
   330  0000                     _B1RXFUL	set	29063
   331  0000                     _B1TXEN	set	28611
   332  0000                     _B2RXFUL	set	29191
   333  0000                     _B2TXEN	set	28612
   334  0000                     _B3RXFUL	set	29319
   335  0000                     _B3TXEN	set	28613
   336  0000                     _B4RXFUL	set	29447
   337  0000                     _B4TXEN	set	28614
   338  0000                     _B5RXFUL	set	29575
   339  0000                     _B5TXEN	set	28615
   340  0000                     _ERRIE	set	32029
   341  0000                     _FIFOEMPTY	set	31655
   342  0000                     _IRXIF	set	32039
   343  0000                     _LATC1	set	31833
   344  0000                     _MDSEL0	set	31678
   345  0000                     _MDSEL1	set	31679
   346  0000                     _PEIE	set	32662
   347  0000                     _RCIE	set	31981
   348  0000                     _RCIF	set	31989
   349  0000                     _RCIP	set	31997
   350  0000                     _RXB0FILHIT0	set	31488
   351  0000                     _RXB0FUL	set	31495
   352  0000                     _RXB0IF	set	32032
   353  0000                     _RXB0OVFL	set	31655
   354  0000                     _RXB1IF	set	32033
   355  0000                     _RXB1OVFL	set	31654
   356  0000                     _RXBnIE	set	32025
   357  0000                     _RXBnIF	set	32033
   358  0000                     _RXM0EXIDM	set	30923
   359  0000                     _RXM1EXIDEN	set	30955
   360  0000                     _B0CON	set	3616
   361  0000                     _B1CON	set	3632
   362  0000                     _B2CON	set	3648
   363  0000                     _B3CON	set	3664
   364  0000                     _B4CON	set	3680
   365  0000                     _B5CON	set	3696
   366  0000                     _RXB0CON	set	3936
   367  0000                     _RXB1CON	set	3920
   368  0000                     _RXM0SIDH	set	3864
   369  0000                     _RXM1SIDH	set	3868
   370  0000                     _TXB0CON	set	3904
   371  0000                     _TXB1CON	set	3888
   372  0000                     _TXB2CON	set	3872
   373  006D2C                     __stringdata:
   374                           	opt stack 0
   375  006D2C                     STR_220:
   376  006D2C  20                 	db	32
   377  006D2D  20                 	db	32
   378  006D2E  20                 	db	32
   379  006D2F  20                 	db	32
   380  006D30  20                 	db	32
   381  006D31  20                 	db	32
   382  006D32  20                 	db	32
   383  006D33  20                 	db	32
   384  006D34  20                 	db	32
   385  006D35  46                 	db	70	;'F'
   386  006D36  6F                 	db	111	;'o'
   387  006D37  72                 	db	114	;'r'
   388  006D38  6D                 	db	109	;'m'
   389  006D39  61                 	db	97	;'a'
   390  006D3A  74                 	db	116	;'t'
   391  006D3B  3A                 	db	58	;':'
   392  006D3C  20                 	db	32
   393  006D3D  66                 	db	102	;'f'
   394  006D3E  69                 	db	105	;'i'
   395  006D3F  6C                 	db	108	;'l'
   396  006D40  74                 	db	116	;'t'
   397  006D41  65                 	db	101	;'e'
   398  006D42  72                 	db	114	;'r'
   399  006D43  20                 	db	32
   400  006D44  66                 	db	102	;'f'
   401  006D45  69                 	db	105	;'i'
   402  006D46  6C                 	db	108	;'l'
   403  006D47  74                 	db	116	;'t'
   404  006D48  65                 	db	101	;'e'
   405  006D49  72                 	db	114	;'r'
   406  006D4A  6E                 	db	110	;'n'
   407  006D4B  6F                 	db	111	;'o'
   408  006D4C  2C                 	db	44
   409  006D4D  70                 	db	112	;'p'
   410  006D4E  72                 	db	114	;'r'
   411  006D4F  69                 	db	105	;'i'
   412  006D50  6F                 	db	111	;'o'
   413  006D51  2C                 	db	44
   414  006D52  63                 	db	99	;'c'
   415  006D53  6C                 	db	108	;'l'
   416  006D54  61                 	db	97	;'a'
   417  006D55  73                 	db	115	;'s'
   418  006D56  73                 	db	115	;'s'
   419  006D57  2C                 	db	44
   420  006D58  74                 	db	116	;'t'
   421  006D59  79                 	db	121	;'y'
   422  006D5A  70                 	db	112	;'p'
   423  006D5B  65                 	db	101	;'e'
   424  006D5C  2C                 	db	44
   425  006D5D  6E                 	db	110	;'n'
   426  006D5E  6F                 	db	111	;'o'
   427  006D5F  64                 	db	100	;'d'
   428  006D60  65                 	db	101	;'e'
   429  006D61  69                 	db	105	;'i'
   430  006D62  64                 	db	100	;'d'
   431  006D63  20                 	db	32
   432  006D64  20                 	db	32
   433  006D65  28                 	db	40
   434  006D66  66                 	db	102	;'f'
   435  006D67  69                 	db	105	;'i'
   436  006D68  6C                 	db	108	;'l'
   437  006D69  74                 	db	116	;'t'
   438  006D6A  65                 	db	101	;'e'
   439  006D6B  72                 	db	114	;'r'
   440  006D6C  6E                 	db	110	;'n'
   441  006D6D  6F                 	db	111	;'o'
   442  006D6E  20                 	db	32
   443  006D6F  3D                 	db	61	;'='
   444  006D70  20                 	db	32
   445  006D71  30                 	db	48	;'0'
   446  006D72  2D                 	db	45
   447  006D73  31                 	db	49	;'1'
   448  006D74  35                 	db	53	;'5'
   449  006D75  29                 	db	41
   450  006D76  2E                 	db	46
   451  006D77  0D                 	db	13
   452  006D78  0A                 	db	10
   453  006D79  00                 	db	0
   454  006D7A                     STR_218:
   455  006D7A  49                 	db	73	;'I'
   456  006D7B  4E                 	db	78	;'N'
   457  006D7C  46                 	db	70	;'F'
   458  006D7D  4F                 	db	79	;'O'
   459  006D7E  20                 	db	32
   460  006D7F  2D                 	db	45
   461  006D80  20                 	db	32
   462  006D81  47                 	db	71	;'G'
   463  006D82  65                 	db	101	;'e'
   464  006D83  74                 	db	116	;'t'
   465  006D84  20                 	db	32
   466  006D85  69                 	db	105	;'i'
   467  006D86  6E                 	db	110	;'n'
   468  006D87  66                 	db	102	;'f'
   469  006D88  6F                 	db	111	;'o'
   470  006D89  20                 	db	32
   471  006D8A  61                 	db	97	;'a'
   472  006D8B  62                 	db	98	;'b'
   473  006D8C  6F                 	db	111	;'o'
   474  006D8D  75                 	db	117	;'u'
   475  006D8E  74                 	db	116	;'t'
   476  006D8F  20                 	db	32
   477  006D90  61                 	db	97	;'a'
   478  006D91  6E                 	db	110	;'n'
   479  006D92  20                 	db	32
   480  006D93  65                 	db	101	;'e'
   481  006D94  78                 	db	120	;'x'
   482  006D95  69                 	db	105	;'i'
   483  006D96  73                 	db	115	;'s'
   484  006D97  74                 	db	116	;'t'
   485  006D98  65                 	db	101	;'e'
   486  006D99  6E                 	db	110	;'n'
   487  006D9A  74                 	db	116	;'t'
   488  006D9B  20                 	db	32
   489  006D9C  6E                 	db	110	;'n'
   490  006D9D  6F                 	db	111	;'o'
   491  006D9E  64                 	db	100	;'d'
   492  006D9F  65                 	db	101	;'e'
   493  006DA0  20                 	db	32
   494  006DA1  6F                 	db	111	;'o'
   495  006DA2  6E                 	db	110	;'n'
   496  006DA3  20                 	db	32
   497  006DA4  74                 	db	116	;'t'
   498  006DA5  68                 	db	104	;'h'
   499  006DA6  65                 	db	101	;'e'
   500  006DA7  20                 	db	32
   501  006DA8  62                 	db	98	;'b'
   502  006DA9  75                 	db	117	;'u'
   503  006DAA  73                 	db	115	;'s'
   504  006DAB  20                 	db	32
   505  006DAC  28                 	db	40
   506  006DAD  46                 	db	70	;'F'
   507  006DAE  6F                 	db	111	;'o'
   508  006DAF  72                 	db	114	;'r'
   509  006DB0  6D                 	db	109	;'m'
   510  006DB1  61                 	db	97	;'a'
   511  006DB2  74                 	db	116	;'t'
   512  006DB3  3A                 	db	58	;':'
   513  006DB4  20                 	db	32
   514  006DB5  69                 	db	105	;'i'
   515  006DB6  6E                 	db	110	;'n'
   516  006DB7  66                 	db	102	;'f'
   517  006DB8  6F                 	db	111	;'o'
   518  006DB9  20                 	db	32
   519  006DBA  6E                 	db	110	;'n'
   520  006DBB  69                 	db	105	;'i'
   521  006DBC  63                 	db	99	;'c'
   522  006DBD  6B                 	db	107	;'k'
   523  006DBE  6E                 	db	110	;'n'
   524  006DBF  61                 	db	97	;'a'
   525  006DC0  6D                 	db	109	;'m'
   526  006DC1  65                 	db	101	;'e'
   527  006DC2  29                 	db	41
   528  006DC3  2E                 	db	46
   529  006DC4  0D                 	db	13
   530  006DC5  0A                 	db	10
   531  006DC6  00                 	db	0
   532  006DC7                     STR_222:
   533  006DC7  20                 	db	32
   534  006DC8  20                 	db	32
   535  006DC9  20                 	db	32
   536  006DCA  20                 	db	32
   537  006DCB  20                 	db	32
   538  006DCC  20                 	db	32
   539  006DCD  20                 	db	32
   540  006DCE  46                 	db	70	;'F'
   541  006DCF  6F                 	db	111	;'o'
   542  006DD0  72                 	db	114	;'r'
   543  006DD1  6D                 	db	109	;'m'
   544  006DD2  61                 	db	97	;'a'
   545  006DD3  74                 	db	116	;'t'
   546  006DD4  3A                 	db	58	;':'
   547  006DD5  20                 	db	32
   548  006DD6  6D                 	db	109	;'m'
   549  006DD7  61                 	db	97	;'a'
   550  006DD8  73                 	db	115	;'s'
   551  006DD9  6B                 	db	107	;'k'
   552  006DDA  20                 	db	32
   553  006DDB  6D                 	db	109	;'m'
   554  006DDC  61                 	db	97	;'a'
   555  006DDD  73                 	db	115	;'s'
   556  006DDE  6B                 	db	107	;'k'
   557  006DDF  6E                 	db	110	;'n'
   558  006DE0  6F                 	db	111	;'o'
   559  006DE1  2C                 	db	44
   560  006DE2  70                 	db	112	;'p'
   561  006DE3  72                 	db	114	;'r'
   562  006DE4  69                 	db	105	;'i'
   563  006DE5  6F                 	db	111	;'o'
   564  006DE6  2C                 	db	44
   565  006DE7  63                 	db	99	;'c'
   566  006DE8  6C                 	db	108	;'l'
   567  006DE9  61                 	db	97	;'a'
   568  006DEA  73                 	db	115	;'s'
   569  006DEB  73                 	db	115	;'s'
   570  006DEC  2C                 	db	44
   571  006DED  74                 	db	116	;'t'
   572  006DEE  79                 	db	121	;'y'
   573  006DEF  70                 	db	112	;'p'
   574  006DF0  65                 	db	101	;'e'
   575  006DF1  2C                 	db	44
   576  006DF2  6E                 	db	110	;'n'
   577  006DF3  6F                 	db	111	;'o'
   578  006DF4  64                 	db	100	;'d'
   579  006DF5  65                 	db	101	;'e'
   580  006DF6  69                 	db	105	;'i'
   581  006DF7  64                 	db	100	;'d'
   582  006DF8  20                 	db	32
   583  006DF9  28                 	db	40
   584  006DFA  6D                 	db	109	;'m'
   585  006DFB  61                 	db	97	;'a'
   586  006DFC  73                 	db	115	;'s'
   587  006DFD  6B                 	db	107	;'k'
   588  006DFE  6E                 	db	110	;'n'
   589  006DFF  6F                 	db	111	;'o'
   590  006E00  20                 	db	32
   591  006E01  3D                 	db	61	;'='
   592  006E02  20                 	db	32
   593  006E03  30                 	db	48	;'0'
   594  006E04  20                 	db	32
   595  006E05  6F                 	db	111	;'o'
   596  006E06  72                 	db	114	;'r'
   597  006E07  20                 	db	32
   598  006E08  31                 	db	49	;'1'
   599  006E09  29                 	db	41
   600  006E0A  2E                 	db	46
   601  006E0B  0D                 	db	13
   602  006E0C  0A                 	db	10
   603  006E0D  00                 	db	0
   604  006E0E                     STR_216:
   605  006E0E  52                 	db	82	;'R'
   606  006E0F  52                 	db	82	;'R'
   607  006E10  45                 	db	69	;'E'
   608  006E11  47                 	db	71	;'G'
   609  006E12  20                 	db	32
   610  006E13  2D                 	db	45
   611  006E14  20                 	db	32
   612  006E15  52                 	db	82	;'R'
   613  006E16  65                 	db	101	;'e'
   614  006E17  61                 	db	97	;'a'
   615  006E18  64                 	db	100	;'d'
   616  006E19  20                 	db	32
   617  006E1A  72                 	db	114	;'r'
   618  006E1B  65                 	db	101	;'e'
   619  006E1C  67                 	db	103	;'g'
   620  006E1D  69                 	db	105	;'i'
   621  006E1E  73                 	db	115	;'s'
   622  006E1F  74                 	db	116	;'t'
   623  006E20  65                 	db	101	;'e'
   624  006E21  72                 	db	114	;'r'
   625  006E22  28                 	db	40
   626  006E23  73                 	db	115	;'s'
   627  006E24  29                 	db	41
   628  006E25  20                 	db	32
   629  006E26  6F                 	db	111	;'o'
   630  006E27  66                 	db	102	;'f'
   631  006E28  20                 	db	32
   632  006E29  6E                 	db	110	;'n'
   633  006E2A  6F                 	db	111	;'o'
   634  006E2B  64                 	db	100	;'d'
   635  006E2C  65                 	db	101	;'e'
   636  006E2D  20                 	db	32
   637  006E2E  28                 	db	40
   638  006E2F  46                 	db	70	;'F'
   639  006E30  6F                 	db	111	;'o'
   640  006E31  72                 	db	114	;'r'
   641  006E32  6D                 	db	109	;'m'
   642  006E33  61                 	db	97	;'a'
   643  006E34  74                 	db	116	;'t'
   644  006E35  3A                 	db	58	;':'
   645  006E36  20                 	db	32
   646  006E37  72                 	db	114	;'r'
   647  006E38  72                 	db	114	;'r'
   648  006E39  65                 	db	101	;'e'
   649  006E3A  67                 	db	103	;'g'
   650  006E3B  20                 	db	32
   651  006E3C  5B                 	db	91	;'['
   652  006E3D  70                 	db	112	;'p'
   653  006E3E  61                 	db	97	;'a'
   654  006E3F  67                 	db	103	;'g'
   655  006E40  65                 	db	101	;'e'
   656  006E41  3A                 	db	58	;':'
   657  006E42  5D                 	db	93	;']'
   658  006E43  72                 	db	114	;'r'
   659  006E44  65                 	db	101	;'e'
   660  006E45  67                 	db	103	;'g'
   661  006E46  20                 	db	32
   662  006E47  5B                 	db	91	;'['
   663  006E48  63                 	db	99	;'c'
   664  006E49  6F                 	db	111	;'o'
   665  006E4A  75                 	db	117	;'u'
   666  006E4B  6E                 	db	110	;'n'
   667  006E4C  74                 	db	116	;'t'
   668  006E4D  5D                 	db	93	;']'
   669  006E4E  29                 	db	41
   670  006E4F  2E                 	db	46
   671  006E50  0D                 	db	13
   672  006E51  0A                 	db	10
   673  006E52  00                 	db	0
   674  006E53                     STR_231:
   675  006E53  2D                 	db	45
   676  006E54  2D                 	db	45
   677  006E55  2D                 	db	45
   678  006E56  2D                 	db	45
   679  006E57  2D                 	db	45
   680  006E58  2D                 	db	45
   681  006E59  2D                 	db	45
   682  006E5A  2D                 	db	45
   683  006E5B  2D                 	db	45
   684  006E5C  2D                 	db	45
   685  006E5D  2D                 	db	45
   686  006E5E  2D                 	db	45
   687  006E5F  2D                 	db	45
   688  006E60  2D                 	db	45
   689  006E61  2D                 	db	45
   690  006E62  2D                 	db	45
   691  006E63  2D                 	db	45
   692  006E64  2D                 	db	45
   693  006E65  2D                 	db	45
   694  006E66  2D                 	db	45
   695  006E67  2D                 	db	45
   696  006E68  2D                 	db	45
   697  006E69  2D                 	db	45
   698  006E6A  2D                 	db	45
   699  006E6B  2D                 	db	45
   700  006E6C  2D                 	db	45
   701  006E6D  2D                 	db	45
   702  006E6E  2D                 	db	45
   703  006E6F  2D                 	db	45
   704  006E70  2D                 	db	45
   705  006E71  2D                 	db	45
   706  006E72  2D                 	db	45
   707  006E73  2D                 	db	45
   708  006E74  2D                 	db	45
   709  006E75  2D                 	db	45
   710  006E76  2D                 	db	45
   711  006E77  2D                 	db	45
   712  006E78  2D                 	db	45
   713  006E79  2D                 	db	45
   714  006E7A  2D                 	db	45
   715  006E7B  2D                 	db	45
   716  006E7C  2D                 	db	45
   717  006E7D  2D                 	db	45
   718  006E7E  2D                 	db	45
   719  006E7F  2D                 	db	45
   720  006E80  2D                 	db	45
   721  006E81  2D                 	db	45
   722  006E82  2D                 	db	45
   723  006E83  2D                 	db	45
   724  006E84  2D                 	db	45
   725  006E85  2D                 	db	45
   726  006E86  2D                 	db	45
   727  006E87  2D                 	db	45
   728  006E88  2D                 	db	45
   729  006E89  2D                 	db	45
   730  006E8A  2D                 	db	45
   731  006E8B  2D                 	db	45
   732  006E8C  2D                 	db	45
   733  006E8D  2D                 	db	45
   734  006E8E  2D                 	db	45
   735  006E8F  2D                 	db	45
   736  006E90  2D                 	db	45
   737  006E91  2D                 	db	45
   738  006E92  2D                 	db	45
   739  006E93  0D                 	db	13
   740  006E94  0A                 	db	10
   741  006E95  00                 	db	0
   742  006E96                     STR_226:
   743  006E96  20                 	db	32
   744  006E97  20                 	db	32
   745  006E98  20                 	db	32
   746  006E99  20                 	db	32
   747  006E9A  52                 	db	82	;'R'
   748  006E9B  57                 	db	87	;'W'
   749  006E9C  54                 	db	84	;'T'
   750  006E9D  49                 	db	73	;'I'
   751  006E9E  4D                 	db	77	;'M'
   752  006E9F  45                 	db	69	;'E'
   753  006EA0  4F                 	db	79	;'O'
   754  006EA1  55                 	db	85	;'U'
   755  006EA2  54                 	db	84	;'T'
   756  006EA3  20                 	db	32
   757  006EA4  2D                 	db	45
   758  006EA5  20                 	db	32
   759  006EA6  53                 	db	83	;'S'
   760  006EA7  65                 	db	101	;'e'
   761  006EA8  74                 	db	116	;'t'
   762  006EA9  20                 	db	32
   763  006EAA  72                 	db	114	;'r'
   764  006EAB  65                 	db	101	;'e'
   765  006EAC  67                 	db	103	;'g'
   766  006EAD  69                 	db	105	;'i'
   767  006EAE  73                 	db	115	;'s'
   768  006EAF  74                 	db	116	;'t'
   769  006EB0  65                 	db	101	;'e'
   770  006EB1  72                 	db	114	;'r'
   771  006EB2  20                 	db	32
   772  006EB3  72                 	db	114	;'r'
   773  006EB4  65                 	db	101	;'e'
   774  006EB5  61                 	db	97	;'a'
   775  006EB6  64                 	db	100	;'d'
   776  006EB7  2F                 	db	47
   777  006EB8  77                 	db	119	;'w'
   778  006EB9  72                 	db	114	;'r'
   779  006EBA  69                 	db	105	;'i'
   780  006EBB  74                 	db	116	;'t'
   781  006EBC  65                 	db	101	;'e'
   782  006EBD  20                 	db	32
   783  006EBE  74                 	db	116	;'t'
   784  006EBF  69                 	db	105	;'i'
   785  006EC0  6D                 	db	109	;'m'
   786  006EC1  65                 	db	101	;'e'
   787  006EC2  6F                 	db	111	;'o'
   788  006EC3  75                 	db	117	;'u'
   789  006EC4  74                 	db	116	;'t'
   790  006EC5  2E                 	db	46
   791  006EC6  20                 	db	32
   792  006EC7  44                 	db	68	;'D'
   793  006EC8  65                 	db	101	;'e'
   794  006EC9  66                 	db	102	;'f'
   795  006ECA  61                 	db	97	;'a'
   796  006ECB  75                 	db	117	;'u'
   797  006ECC  6C                 	db	108	;'l'
   798  006ECD  74                 	db	116	;'t'
   799  006ECE  3D                 	db	61	;'='
   800  006ECF  31                 	db	49	;'1'
   801  006ED0  30                 	db	48	;'0'
   802  006ED1  20                 	db	32
   803  006ED2  6D                 	db	109	;'m'
   804  006ED3  73                 	db	115	;'s'
   805  006ED4  20                 	db	32
   806  006ED5  2E                 	db	46
   807  006ED6  0D                 	db	13
   808  006ED7  0A                 	db	10
   809  006ED8  00                 	db	0
   810  006ED9                     STR_217:
   811  006ED9  57                 	db	87	;'W'
   812  006EDA  52                 	db	82	;'R'
   813  006EDB  45                 	db	69	;'E'
   814  006EDC  47                 	db	71	;'G'
   815  006EDD  20                 	db	32
   816  006EDE  2D                 	db	45
   817  006EDF  20                 	db	32
   818  006EE0  57                 	db	87	;'W'
   819  006EE1  72                 	db	114	;'r'
   820  006EE2  69                 	db	105	;'i'
   821  006EE3  74                 	db	116	;'t'
   822  006EE4  65                 	db	101	;'e'
   823  006EE5  20                 	db	32
   824  006EE6  72                 	db	114	;'r'
   825  006EE7  65                 	db	101	;'e'
   826  006EE8  67                 	db	103	;'g'
   827  006EE9  69                 	db	105	;'i'
   828  006EEA  73                 	db	115	;'s'
   829  006EEB  74                 	db	116	;'t'
   830  006EEC  65                 	db	101	;'e'
   831  006EED  72                 	db	114	;'r'
   832  006EEE  20                 	db	32
   833  006EEF  6F                 	db	111	;'o'
   834  006EF0  66                 	db	102	;'f'
   835  006EF1  20                 	db	32
   836  006EF2  6E                 	db	110	;'n'
   837  006EF3  6F                 	db	111	;'o'
   838  006EF4  64                 	db	100	;'d'
   839  006EF5  65                 	db	101	;'e'
   840  006EF6  20                 	db	32
   841  006EF7  28                 	db	40
   842  006EF8  46                 	db	70	;'F'
   843  006EF9  6F                 	db	111	;'o'
   844  006EFA  72                 	db	114	;'r'
   845  006EFB  6D                 	db	109	;'m'
   846  006EFC  61                 	db	97	;'a'
   847  006EFD  74                 	db	116	;'t'
   848  006EFE  3A                 	db	58	;':'
   849  006EFF  20                 	db	32
   850  006F00  77                 	db	119	;'w'
   851  006F01  72                 	db	114	;'r'
   852  006F02  65                 	db	101	;'e'
   853  006F03  67                 	db	103	;'g'
   854  006F04  20                 	db	32
   855  006F05  5B                 	db	91	;'['
   856  006F06  70                 	db	112	;'p'
   857  006F07  61                 	db	97	;'a'
   858  006F08  67                 	db	103	;'g'
   859  006F09  65                 	db	101	;'e'
   860  006F0A  3A                 	db	58	;':'
   861  006F0B  5D                 	db	93	;']'
   862  006F0C  72                 	db	114	;'r'
   863  006F0D  65                 	db	101	;'e'
   864  006F0E  67                 	db	103	;'g'
   865  006F0F  20                 	db	32
   866  006F10  63                 	db	99	;'c'
   867  006F11  6F                 	db	111	;'o'
   868  006F12  6E                 	db	110	;'n'
   869  006F13  74                 	db	116	;'t'
   870  006F14  65                 	db	101	;'e'
   871  006F15  6E                 	db	110	;'n'
   872  006F16  74                 	db	116	;'t'
   873  006F17  29                 	db	41
   874  006F18  2E                 	db	46
   875  006F19  0D                 	db	13
   876  006F1A  0A                 	db	10
   877  006F1B  00                 	db	0
   878  006F1C                     STR_85:
   879  006F1C  2D                 	db	45
   880  006F1D  45                 	db	69	;'E'
   881  006F1E  52                 	db	82	;'R'
   882  006F1F  52                 	db	82	;'R'
   883  006F20  4F                 	db	79	;'O'
   884  006F21  52                 	db	82	;'R'
   885  006F22  20                 	db	32
   886  006F23  2D                 	db	45
   887  006F24  20                 	db	32
   888  006F25  46                 	db	70	;'F'
   889  006F26  69                 	db	105	;'i'
   890  006F27  6C                 	db	108	;'l'
   891  006F28  74                 	db	116	;'t'
   892  006F29  65                 	db	101	;'e'
   893  006F2A  72                 	db	114	;'r'
   894  006F2B  20                 	db	32
   895  006F2C  6E                 	db	110	;'n'
   896  006F2D  75                 	db	117	;'u'
   897  006F2E  6D                 	db	109	;'m'
   898  006F2F  62                 	db	98	;'b'
   899  006F30  65                 	db	101	;'e'
   900  006F31  72                 	db	114	;'r'
   901  006F32  20                 	db	32
   902  006F33  63                 	db	99	;'c'
   903  006F34  61                 	db	97	;'a'
   904  006F35  6E                 	db	110	;'n'
   905  006F36  20                 	db	32
   906  006F37  6F                 	db	111	;'o'
   907  006F38  6E                 	db	110	;'n'
   908  006F39  6C                 	db	108	;'l'
   909  006F3A  79                 	db	121	;'y'
   910  006F3B  20                 	db	32
   911  006F3C  62                 	db	98	;'b'
   912  006F3D  65                 	db	101	;'e'
   913  006F3E  20                 	db	32
   914  006F3F  73                 	db	115	;'s'
   915  006F40  65                 	db	101	;'e'
   916  006F41  74                 	db	116	;'t'
   917  006F42  20                 	db	32
   918  006F43  74                 	db	116	;'t'
   919  006F44  6F                 	db	111	;'o'
   920  006F45  20                 	db	32
   921  006F46  61                 	db	97	;'a'
   922  006F47  20                 	db	32
   923  006F48  76                 	db	118	;'v'
   924  006F49  61                 	db	97	;'a'
   925  006F4A  6C                 	db	108	;'l'
   926  006F4B  75                 	db	117	;'u'
   927  006F4C  65                 	db	101	;'e'
   928  006F4D  20                 	db	32
   929  006F4E  62                 	db	98	;'b'
   930  006F4F  65                 	db	101	;'e'
   931  006F50  74                 	db	116	;'t'
   932  006F51  77                 	db	119	;'w'
   933  006F52  65                 	db	101	;'e'
   934  006F53  65                 	db	101	;'e'
   935  006F54  6E                 	db	110	;'n'
   936  006F55  20                 	db	32
   937  006F56  30                 	db	48	;'0'
   938  006F57  2D                 	db	45
   939  006F58  31                 	db	49	;'1'
   940  006F59  35                 	db	53	;'5'
   941  006F5A  2E                 	db	46
   942  006F5B  0D                 	db	13
   943  006F5C  0A                 	db	10
   944  006F5D  00                 	db	0
   945  006F5E                     STR_229:
   946  006F5E  20                 	db	32
   947  006F5F  20                 	db	32
   948  006F60  20                 	db	32
   949  006F61  20                 	db	32
   950  006F62  4D                 	db	77	;'M'
   951  006F63  4F                 	db	79	;'O'
   952  006F64  44                 	db	68	;'D'
   953  006F65  45                 	db	69	;'E'
   954  006F66  20                 	db	32
   955  006F67  2D                 	db	45
   956  006F68  20                 	db	32
   957  006F69  53                 	db	83	;'S'
   958  006F6A  65                 	db	101	;'e'
   959  006F6B  74                 	db	116	;'t'
   960  006F6C  20                 	db	32
   961  006F6D  61                 	db	97	;'a'
   962  006F6E  64                 	db	100	;'d'
   963  006F6F  61                 	db	97	;'a'
   964  006F70  70                 	db	112	;'p'
   965  006F71  74                 	db	116	;'t'
   966  006F72  65                 	db	101	;'e'
   967  006F73  72                 	db	114	;'r'
   968  006F74  20                 	db	32
   969  006F75  6D                 	db	109	;'m'
   970  006F76  6F                 	db	111	;'o'
   971  006F77  64                 	db	100	;'d'
   972  006F78  65                 	db	101	;'e'
   973  006F79  20                 	db	32
   974  006F7A  74                 	db	116	;'t'
   975  006F7B  68                 	db	104	;'h'
   976  006F7C  61                 	db	97	;'a'
   977  006F7D  74                 	db	116	;'t'
   978  006F7E  20                 	db	32
   979  006F7F  73                 	db	115	;'s'
   980  006F80  68                 	db	104	;'h'
   981  006F81  6F                 	db	111	;'o'
   982  006F82  75                 	db	117	;'u'
   983  006F83  6C                 	db	108	;'l'
   984  006F84  64                 	db	100	;'d'
   985  006F85  20                 	db	32
   986  006F86  62                 	db	98	;'b'
   987  006F87  65                 	db	101	;'e'
   988  006F88  20                 	db	32
   989  006F89  75                 	db	117	;'u'
   990  006F8A  73                 	db	115	;'s'
   991  006F8B  65                 	db	101	;'e'
   992  006F8C  64                 	db	100	;'d'
   993  006F8D  20                 	db	32
   994  006F8E  6F                 	db	111	;'o'
   995  006F8F  6E                 	db	110	;'n'
   996  006F90  20                 	db	32
   997  006F91  73                 	db	115	;'s'
   998  006F92  74                 	db	116	;'t'
   999  006F93  61                 	db	97	;'a'
  1000  006F94  72                 	db	114	;'r'
  1001  006F95  74                 	db	116	;'t'
  1002  006F96  75                 	db	117	;'u'
  1003  006F97  70                 	db	112	;'p'
  1004  006F98  2E                 	db	46
  1005  006F99  0D                 	db	13
  1006  006F9A  0A                 	db	10
  1007  006F9B  00                 	db	0
  1008  006F9C                     STR_189:
  1009  006F9C  54                 	db	84	;'T'
  1010  006F9D  72                 	db	114	;'r'
  1011  006F9E  61                 	db	97	;'a'
  1012  006F9F  6E                 	db	110	;'n'
  1013  006FA0  73                 	db	115	;'s'
  1014  006FA1  6D                 	db	109	;'m'
  1015  006FA2  69                 	db	105	;'i'
  1016  006FA3  74                 	db	116	;'t'
  1017  006FA4  74                 	db	116	;'t'
  1018  006FA5  65                 	db	101	;'e'
  1019  006FA6  72                 	db	114	;'r'
  1020  006FA7  20                 	db	32
  1021  006FA8  69                 	db	105	;'i'
  1022  006FA9  6E                 	db	110	;'n'
  1023  006FAA  20                 	db	32
  1024  006FAB  45                 	db	69	;'E'
  1025  006FAC  72                 	db	114	;'r'
  1026  006FAD  72                 	db	114	;'r'
  1027  006FAE  6F                 	db	111	;'o'
  1028  006FAF  72                 	db	114	;'r'
  1029  006FB0  20                 	db	32
  1030  006FB1  53                 	db	83	;'S'
  1031  006FB2  74                 	db	116	;'t'
  1032  006FB3  61                 	db	97	;'a'
  1033  006FB4  74                 	db	116	;'t'
  1034  006FB5  65                 	db	101	;'e'
  1035  006FB6  20                 	db	32
  1036  006FB7  57                 	db	87	;'W'
  1037  006FB8  61                 	db	97	;'a'
  1038  006FB9  72                 	db	114	;'r'
  1039  006FBA  6E                 	db	110	;'n'
  1040  006FBB  69                 	db	105	;'i'
  1041  006FBC  6E                 	db	110	;'n'
  1042  006FBD  67                 	db	103	;'g'
  1043  006FBE  20                 	db	32
  1044  006FBF  28                 	db	40
  1045  006FC0  31                 	db	49	;'1'
  1046  006FC1  32                 	db	50	;'2'
  1047  006FC2  38                 	db	56	;'8'
  1048  006FC3  20                 	db	32
  1049  006FC4  3E                 	db	62	;'>'
  1050  006FC5  20                 	db	32
  1051  006FC6  54                 	db	84	;'T'
  1052  006FC7  45                 	db	69	;'E'
  1053  006FC8  52                 	db	82	;'R'
  1054  006FC9  52                 	db	82	;'R'
  1055  006FCA  43                 	db	67	;'C'
  1056  006FCB  4E                 	db	78	;'N'
  1057  006FCC  54                 	db	84	;'T'
  1058  006FCD  20                 	db	32
  1059  006FCE  3F                 	db	63	;'?'
  1060  006FCF  20                 	db	32
  1061  006FD0  39                 	db	57	;'9'
  1062  006FD1  36                 	db	54	;'6'
  1063  006FD2  29                 	db	41
  1064  006FD3  0D                 	db	13
  1065  006FD4  0A                 	db	10
  1066  006FD5  00                 	db	0
  1067  006FD6                     STR_191:
  1068  006FD6  54                 	db	84	;'T'
  1069  006FD7  72                 	db	114	;'r'
  1070  006FD8  61                 	db	97	;'a'
  1071  006FD9  6E                 	db	110	;'n'
  1072  006FDA  73                 	db	115	;'s'
  1073  006FDB  6D                 	db	109	;'m'
  1074  006FDC  69                 	db	105	;'i'
  1075  006FDD  74                 	db	116	;'t'
  1076  006FDE  74                 	db	116	;'t'
  1077  006FDF  65                 	db	101	;'e'
  1078  006FE0  72                 	db	114	;'r'
  1079  006FE1  20                 	db	32
  1080  006FE2  69                 	db	105	;'i'
  1081  006FE3  6E                 	db	110	;'n'
  1082  006FE4  20                 	db	32
  1083  006FE5  45                 	db	69	;'E'
  1084  006FE6  72                 	db	114	;'r'
  1085  006FE7  72                 	db	114	;'r'
  1086  006FE8  6F                 	db	111	;'o'
  1087  006FE9  72                 	db	114	;'r'
  1088  006FEA  20                 	db	32
  1089  006FEB  53                 	db	83	;'S'
  1090  006FEC  74                 	db	116	;'t'
  1091  006FED  61                 	db	97	;'a'
  1092  006FEE  74                 	db	116	;'t'
  1093  006FEF  65                 	db	101	;'e'
  1094  006FF0  20                 	db	32
  1095  006FF1  42                 	db	66	;'B'
  1096  006FF2  75                 	db	117	;'u'
  1097  006FF3  73                 	db	115	;'s'
  1098  006FF4  20                 	db	32
  1099  006FF5  50                 	db	80	;'P'
  1100  006FF6  61                 	db	97	;'a'
  1101  006FF7  73                 	db	115	;'s'
  1102  006FF8  73                 	db	115	;'s'
  1103  006FF9  69                 	db	105	;'i'
  1104  006FFA  76                 	db	118	;'v'
  1105  006FFB  65                 	db	101	;'e'
  1106  006FFC  20                 	db	32
  1107  006FFD  28                 	db	40
  1108  006FFE  54                 	db	84	;'T'
  1109  006FFF  45                 	db	69	;'E'
  1110  007000  52                 	db	82	;'R'
  1111  007001  52                 	db	82	;'R'
  1112  007002  43                 	db	67	;'C'
  1113  007003  4E                 	db	78	;'N'
  1114  007004  54                 	db	84	;'T'
  1115  007005  20                 	db	32
  1116  007006  3F                 	db	63	;'?'
  1117  007007  20                 	db	32
  1118  007008  31                 	db	49	;'1'
  1119  007009  32                 	db	50	;'2'
  1120  00700A  38                 	db	56	;'8'
  1121  00700B  29                 	db	41
  1122  00700C  0D                 	db	13
  1123  00700D  0A                 	db	10
  1124  00700E  00                 	db	0
  1125  00700F                     STR_210:
  1126  00700F  20                 	db	32
  1127  007010  20                 	db	32
  1128  007011  20                 	db	32
  1129  007012  20                 	db	32
  1130  007013  20                 	db	32
  1131  007014  46                 	db	70	;'F'
  1132  007015  6F                 	db	111	;'o'
  1133  007016  72                 	db	114	;'r'
  1134  007017  6D                 	db	109	;'m'
  1135  007018  61                 	db	97	;'a'
  1136  007019  74                 	db	116	;'t'
  1137  00701A  3A                 	db	58	;':'
  1138  00701B  20                 	db	32
  1139  00701C  70                 	db	112	;'p'
  1140  00701D  72                 	db	114	;'r'
  1141  00701E  69                 	db	105	;'i'
  1142  00701F  6F                 	db	111	;'o'
  1143  007020  72                 	db	114	;'r'
  1144  007021  69                 	db	105	;'i'
  1145  007022  74                 	db	116	;'t'
  1146  007023  79                 	db	121	;'y'
  1147  007024  2C                 	db	44
  1148  007025  63                 	db	99	;'c'
  1149  007026  6C                 	db	108	;'l'
  1150  007027  61                 	db	97	;'a'
  1151  007028  73                 	db	115	;'s'
  1152  007029  73                 	db	115	;'s'
  1153  00702A  2C                 	db	44
  1154  00702B  74                 	db	116	;'t'
  1155  00702C  79                 	db	121	;'y'
  1156  00702D  70                 	db	112	;'p'
  1157  00702E  65                 	db	101	;'e'
  1158  00702F  2C                 	db	44
  1159  007030  6E                 	db	110	;'n'
  1160  007031  6F                 	db	111	;'o'
  1161  007032  64                 	db	100	;'d'
  1162  007033  65                 	db	101	;'e'
  1163  007034  69                 	db	105	;'i'
  1164  007035  64                 	db	100	;'d'
  1165  007036  2C                 	db	44
  1166  007037  63                 	db	99	;'c'
  1167  007038  6F                 	db	111	;'o'
  1168  007039  75                 	db	117	;'u'
  1169  00703A  6E                 	db	110	;'n'
  1170  00703B  74                 	db	116	;'t'
  1171  00703C  2C                 	db	44
  1172  00703D  64                 	db	100	;'d'
  1173  00703E  61                 	db	97	;'a'
  1174  00703F  74                 	db	116	;'t'
  1175  007040  61                 	db	97	;'a'
  1176  007041  2C                 	db	44
  1177  007042  2C                 	db	44
  1178  007043  2C                 	db	44
  1179  007044  0D                 	db	13
  1180  007045  0A                 	db	10
  1181  007046  00                 	db	0
  1182  007047                     STR_196:
  1183  007047  52                 	db	82	;'R'
  1184  007048  65                 	db	101	;'e'
  1185  007049  63                 	db	99	;'c'
  1186  00704A  65                 	db	101	;'e'
  1187  00704B  69                 	db	105	;'i'
  1188  00704C  76                 	db	118	;'v'
  1189  00704D  65                 	db	101	;'e'
  1190  00704E  72                 	db	114	;'r'
  1191  00704F  20                 	db	32
  1192  007050  69                 	db	105	;'i'
  1193  007051  6E                 	db	110	;'n'
  1194  007052  20                 	db	32
  1195  007053  45                 	db	69	;'E'
  1196  007054  72                 	db	114	;'r'
  1197  007055  72                 	db	114	;'r'
  1198  007056  6F                 	db	111	;'o'
  1199  007057  72                 	db	114	;'r'
  1200  007058  20                 	db	32
  1201  007059  53                 	db	83	;'S'
  1202  00705A  74                 	db	116	;'t'
  1203  00705B  61                 	db	97	;'a'
  1204  00705C  74                 	db	116	;'t'
  1205  00705D  65                 	db	101	;'e'
  1206  00705E  20                 	db	32
  1207  00705F  57                 	db	87	;'W'
  1208  007060  61                 	db	97	;'a'
  1209  007061  72                 	db	114	;'r'
  1210  007062  6E                 	db	110	;'n'
  1211  007063  69                 	db	105	;'i'
  1212  007064  6E                 	db	110	;'n'
  1213  007065  67                 	db	103	;'g'
  1214  007066  20                 	db	32
  1215  007067  28                 	db	40
  1216  007068  31                 	db	49	;'1'
  1217  007069  32                 	db	50	;'2'
  1218  00706A  38                 	db	56	;'8'
  1219  00706B  20                 	db	32
  1220  00706C  3E                 	db	62	;'>'
  1221  00706D  20                 	db	32
  1222  00706E  52                 	db	82	;'R'
  1223  00706F  45                 	db	69	;'E'
  1224  007070  52                 	db	82	;'R'
  1225  007071  52                 	db	82	;'R'
  1226  007072  43                 	db	67	;'C'
  1227  007073  4E                 	db	78	;'N'
  1228  007074  54                 	db	84	;'T'
  1229  007075  20                 	db	32
  1230  007076  3F                 	db	63	;'?'
  1231  007077  20                 	db	32
  1232  007078  39                 	db	57	;'9'
  1233  007079  36                 	db	54	;'6'
  1234  00707A  29                 	db	41
  1235  00707B  0D                 	db	13
  1236  00707C  0A                 	db	10
  1237  00707D  00                 	db	0
  1238  00707E                     STR_228:
  1239  00707E  20                 	db	32
  1240  00707F  20                 	db	32
  1241  007080  20                 	db	32
  1242  007081  20                 	db	32
  1243  007082  53                 	db	83	;'S'
  1244  007083  54                 	db	84	;'T'
  1245  007084  41                 	db	65	;'A'
  1246  007085  52                 	db	82	;'R'
  1247  007086  54                 	db	84	;'T'
  1248  007087  49                 	db	73	;'I'
  1249  007088  46                 	db	70	;'F'
  1250  007089  20                 	db	32
  1251  00708A  2D                 	db	45
  1252  00708B  20                 	db	32
  1253  00708C  53                 	db	83	;'S'
  1254  00708D  65                 	db	101	;'e'
  1255  00708E  74                 	db	116	;'t'
  1256  00708F  20                 	db	32
  1257  007090  69                 	db	105	;'i'
  1258  007091  6E                 	db	110	;'n'
  1259  007092  74                 	db	116	;'t'
  1260  007093  65                 	db	101	;'e'
  1261  007094  72                 	db	114	;'r'
  1262  007095  66                 	db	102	;'f'
  1263  007096  61                 	db	97	;'a'
  1264  007097  63                 	db	99	;'c'
  1265  007098  65                 	db	101	;'e'
  1266  007099  20                 	db	32
  1267  00709A  73                 	db	115	;'s'
  1268  00709B  74                 	db	116	;'t'
  1269  00709C  61                 	db	97	;'a'
  1270  00709D  74                 	db	116	;'t'
  1271  00709E  65                 	db	101	;'e'
  1272  00709F  20                 	db	32
  1273  0070A0  74                 	db	116	;'t'
  1274  0070A1  6F                 	db	111	;'o'
  1275  0070A2  20                 	db	32
  1276  0070A3  75                 	db	117	;'u'
  1277  0070A4  73                 	db	115	;'s'
  1278  0070A5  65                 	db	101	;'e'
  1279  0070A6  20                 	db	32
  1280  0070A7  6F                 	db	111	;'o'
  1281  0070A8  6E                 	db	110	;'n'
  1282  0070A9  20                 	db	32
  1283  0070AA  73                 	db	115	;'s'
  1284  0070AB  74                 	db	116	;'t'
  1285  0070AC  61                 	db	97	;'a'
  1286  0070AD  72                 	db	114	;'r'
  1287  0070AE  74                 	db	116	;'t'
  1288  0070AF  75                 	db	117	;'u'
  1289  0070B0  70                 	db	112	;'p'
  1290  0070B1  2E                 	db	46
  1291  0070B2  0D                 	db	13
  1292  0070B3  0A                 	db	10
  1293  0070B4  00                 	db	0
  1294  0070B5  50                 	db	80	;'P'
  1295  0070B6  72                 	db	114	;'r'
  1296  0070B7  65                 	db	101	;'e'
  1297  0070B8  73                 	db	115	;'s'
  1298  0070B9  73                 	db	115	;'s'
  1299  0070BA  20                 	db	32
  1300  0070BB  27                 	db	39
  1301  0070BC  76                 	db	118	;'v'
  1302  0070BD  27                 	db	39
  1303  0070BE  20                 	db	32
  1304  0070BF  77                 	db	119	;'w'
  1305  0070C0  69                 	db	105	;'i'
  1306  0070C1  74                 	db	116	;'t'
  1307  0070C2  68                 	db	104	;'h'
  1308  0070C3  69                 	db	105	;'i'
  1309  0070C4  6E                 	db	110	;'n'
  1310  0070C5  20                 	db	32
  1311  0070C6  74                 	db	116	;'t'
  1312  0070C7  68                 	db	104	;'h'
  1313  0070C8  72                 	db	114	;'r'
  1314  0070C9  65                 	db	101	;'e'
  1315  0070CA  65                 	db	101	;'e'
  1316  0070CB  20                 	db	32
  1317  0070CC  73                 	db	115	;'s'
  1318  0070CD  65                 	db	101	;'e'
  1319  0070CE  63                 	db	99	;'c'
  1320  0070CF  6F                 	db	111	;'o'
  1321  0070D0  6E                 	db	110	;'n'
  1322  0070D1  64                 	db	100	;'d'
  1323  0070D2  73                 	db	115	;'s'
  1324  0070D3  20                 	db	32
  1325  0070D4  74                 	db	116	;'t'
  1326  0070D5  6F                 	db	111	;'o'
  1327  0070D6  20                 	db	32
  1328  0070D7  65                 	db	101	;'e'
  1329  0070D8  6E                 	db	110	;'n'
  1330  0070D9  74                 	db	116	;'t'
  1331  0070DA  65                 	db	101	;'e'
  1332  0070DB  72                 	db	114	;'r'
  1333  0070DC  20                 	db	32
  1334  0070DD  76                 	db	118	;'v'
  1335  0070DE  65                 	db	101	;'e'
  1336  0070DF  72                 	db	114	;'r'
  1337  0070E0  62                 	db	98	;'b'
  1338  0070E1  6F                 	db	111	;'o'
  1339  0070E2  73                 	db	115	;'s'
  1340  0070E3  65                 	db	101	;'e'
  1341  0070E4  20                 	db	32
  1342  0070E5  6D                 	db	109	;'m'
  1343  0070E6  6F                 	db	111	;'o'
  1344  0070E7  64                 	db	100	;'d'
  1345  0070E8  65                 	db	101	;'e'
  1346  0070E9  0D                 	db	13
  1347  0070EA  0A                 	db	10
  1348  0070EB  00                 	db	0
  1349  0070EC                     STR_197:
  1350  0070EC  52                 	db	82	;'R'
  1351  0070ED  65                 	db	101	;'e'
  1352  0070EE  63                 	db	99	;'c'
  1353  0070EF  65                 	db	101	;'e'
  1354  0070F0  69                 	db	105	;'i'
  1355  0070F1  76                 	db	118	;'v'
  1356  0070F2  65                 	db	101	;'e'
  1357  0070F3  72                 	db	114	;'r'
  1358  0070F4  20                 	db	32
  1359  0070F5  69                 	db	105	;'i'
  1360  0070F6  6E                 	db	110	;'n'
  1361  0070F7  20                 	db	32
  1362  0070F8  45                 	db	69	;'E'
  1363  0070F9  72                 	db	114	;'r'
  1364  0070FA  72                 	db	114	;'r'
  1365  0070FB  6F                 	db	111	;'o'
  1366  0070FC  72                 	db	114	;'r'
  1367  0070FD  20                 	db	32
  1368  0070FE  53                 	db	83	;'S'
  1369  0070FF  74                 	db	116	;'t'
  1370  007100  61                 	db	97	;'a'
  1371  007101  74                 	db	116	;'t'
  1372  007102  65                 	db	101	;'e'
  1373  007103  20                 	db	32
  1374  007104  42                 	db	66	;'B'
  1375  007105  75                 	db	117	;'u'
  1376  007106  73                 	db	115	;'s'
  1377  007107  20                 	db	32
  1378  007108  50                 	db	80	;'P'
  1379  007109  61                 	db	97	;'a'
  1380  00710A  73                 	db	115	;'s'
  1381  00710B  73                 	db	115	;'s'
  1382  00710C  69                 	db	105	;'i'
  1383  00710D  76                 	db	118	;'v'
  1384  00710E  65                 	db	101	;'e'
  1385  00710F  20                 	db	32
  1386  007110  28                 	db	40
  1387  007111  52                 	db	82	;'R'
  1388  007112  45                 	db	69	;'E'
  1389  007113  52                 	db	82	;'R'
  1390  007114  52                 	db	82	;'R'
  1391  007115  43                 	db	67	;'C'
  1392  007116  4E                 	db	78	;'N'
  1393  007117  54                 	db	84	;'T'
  1394  007118  20                 	db	32
  1395  007119  3F                 	db	63	;'?'
  1396  00711A  20                 	db	32
  1397  00711B  31                 	db	49	;'1'
  1398  00711C  32                 	db	50	;'2'
  1399  00711D  38                 	db	56	;'8'
  1400  00711E  29                 	db	41
  1401  00711F  0D                 	db	13
  1402  007120  0A                 	db	10
  1403  007121  00                 	db	0
  1404  007122                     STR_68:
  1405  007122  2D                 	db	45
  1406  007123  45                 	db	69	;'E'
  1407  007124  52                 	db	82	;'R'
  1408  007125  52                 	db	82	;'R'
  1409  007126  4F                 	db	79	;'O'
  1410  007127  52                 	db	82	;'R'
  1411  007128  20                 	db	32
  1412  007129  2D                 	db	45
  1413  00712A  20                 	db	32
  1414  00712B  4F                 	db	79	;'O'
  1415  00712C  6E                 	db	110	;'n'
  1416  00712D  65                 	db	101	;'e'
  1417  00712E  20                 	db	32
  1418  00712F  6F                 	db	111	;'o'
  1419  007130  72                 	db	114	;'r'
  1420  007131  20                 	db	32
  1421  007132  6D                 	db	109	;'m'
  1422  007133  6F                 	db	111	;'o'
  1423  007134  72                 	db	114	;'r'
  1424  007135  65                 	db	101	;'e'
  1425  007136  20                 	db	32
  1426  007137  72                 	db	114	;'r'
  1427  007138  65                 	db	101	;'e'
  1428  007139  67                 	db	103	;'g'
  1429  00713A  69                 	db	105	;'i'
  1430  00713B  73                 	db	115	;'s'
  1431  00713C  74                 	db	116	;'t'
  1432  00713D  65                 	db	101	;'e'
  1433  00713E  72                 	db	114	;'r'
  1434  00713F  28                 	db	40
  1435  007140  73                 	db	115	;'s'
  1436  007141  29                 	db	41
  1437  007142  20                 	db	32
  1438  007143  63                 	db	99	;'c'
  1439  007144  6F                 	db	111	;'o'
  1440  007145  75                 	db	117	;'u'
  1441  007146  6C                 	db	108	;'l'
  1442  007147  64                 	db	100	;'d'
  1443  007148  20                 	db	32
  1444  007149  6E                 	db	110	;'n'
  1445  00714A  6F                 	db	111	;'o'
  1446  00714B  74                 	db	116	;'t'
  1447  00714C  20                 	db	32
  1448  00714D  62                 	db	98	;'b'
  1449  00714E  65                 	db	101	;'e'
  1450  00714F  20                 	db	32
  1451  007150  72                 	db	114	;'r'
  1452  007151  65                 	db	101	;'e'
  1453  007152  61                 	db	97	;'a'
  1454  007153  64                 	db	100	;'d'
  1455  007154  2E                 	db	46
  1456  007155  0D                 	db	13
  1457  007156  0A                 	db	10
  1458  007157  00                 	db	0
  1459  007158                     STR_190:
  1460  007158  54                 	db	84	;'T'
  1461  007159  72                 	db	114	;'r'
  1462  00715A  61                 	db	97	;'a'
  1463  00715B  6E                 	db	110	;'n'
  1464  00715C  73                 	db	115	;'s'
  1465  00715D  6D                 	db	109	;'m'
  1466  00715E  69                 	db	105	;'i'
  1467  00715F  74                 	db	116	;'t'
  1468  007160  74                 	db	116	;'t'
  1469  007161  65                 	db	101	;'e'
  1470  007162  72                 	db	114	;'r'
  1471  007163  20                 	db	32
  1472  007164  69                 	db	105	;'i'
  1473  007165  6E                 	db	110	;'n'
  1474  007166  20                 	db	32
  1475  007167  45                 	db	69	;'E'
  1476  007168  72                 	db	114	;'r'
  1477  007169  72                 	db	114	;'r'
  1478  00716A  6F                 	db	111	;'o'
  1479  00716B  72                 	db	114	;'r'
  1480  00716C  20                 	db	32
  1481  00716D  53                 	db	83	;'S'
  1482  00716E  74                 	db	116	;'t'
  1483  00716F  61                 	db	97	;'a'
  1484  007170  74                 	db	116	;'t'
  1485  007171  65                 	db	101	;'e'
  1486  007172  20                 	db	32
  1487  007173  42                 	db	66	;'B'
  1488  007174  75                 	db	117	;'u'
  1489  007175  73                 	db	115	;'s'
  1490  007176  20                 	db	32
  1491  007177  4F                 	db	79	;'O'
  1492  007178  46                 	db	70	;'F'
  1493  007179  46                 	db	70	;'F'
  1494  00717A  20                 	db	32
  1495  00717B  28                 	db	40
  1496  00717C  54                 	db	84	;'T'
  1497  00717D  45                 	db	69	;'E'
  1498  00717E  52                 	db	82	;'R'
  1499  00717F  52                 	db	82	;'R'
  1500  007180  43                 	db	67	;'C'
  1501  007181  4E                 	db	78	;'N'
  1502  007182  54                 	db	84	;'T'
  1503  007183  20                 	db	32
  1504  007184  3F                 	db	63	;'?'
  1505  007185  20                 	db	32
  1506  007186  32                 	db	50	;'2'
  1507  007187  35                 	db	53	;'5'
  1508  007188  36                 	db	54	;'6'
  1509  007189  29                 	db	41
  1510  00718A  0D                 	db	13
  1511  00718B  0A                 	db	10
  1512  00718C  00                 	db	0
  1513  00718D                     STR_2:
  1514  00718D  43                 	db	67	;'C'
  1515  00718E  6F                 	db	111	;'o'
  1516  00718F  70                 	db	112	;'p'
  1517  007190  79                 	db	121	;'y'
  1518  007191  72                 	db	114	;'r'
  1519  007192  69                 	db	105	;'i'
  1520  007193  67                 	db	103	;'g'
  1521  007194  68                 	db	104	;'h'
  1522  007195  74                 	db	116	;'t'
  1523  007196  20                 	db	32
  1524  007197  28                 	db	40
  1525  007198  43                 	db	67	;'C'
  1526  007199  29                 	db	41
  1527  00719A  20                 	db	32
  1528  00719B  32                 	db	50	;'2'
  1529  00719C  30                 	db	48	;'0'
  1530  00719D  31                 	db	49	;'1'
  1531  00719E  34                 	db	52	;'4'
  1532  00719F  2D                 	db	45
  1533  0071A0  32                 	db	50	;'2'
  1534  0071A1  30                 	db	48	;'0'
  1535  0071A2  31                 	db	49	;'1'
  1536  0071A3  35                 	db	53	;'5'
  1537  0071A4  20                 	db	32
  1538  0071A5  47                 	db	71	;'G'
  1539  0071A6  72                 	db	114	;'r'
  1540  0071A7  6F                 	db	111	;'o'
  1541  0071A8  64                 	db	100	;'d'
  1542  0071A9  61                 	db	97	;'a'
  1543  0071AA  6E                 	db	110	;'n'
  1544  0071AB  73                 	db	115	;'s'
  1545  0071AC  20                 	db	32
  1546  0071AD  50                 	db	80	;'P'
  1547  0071AE  61                 	db	97	;'a'
  1548  0071AF  72                 	db	114	;'r'
  1549  0071B0  61                 	db	97	;'a'
  1550  0071B1  64                 	db	100	;'d'
  1551  0071B2  69                 	db	105	;'i'
  1552  0071B3  73                 	db	115	;'s'
  1553  0071B4  20                 	db	32
  1554  0071B5  41                 	db	65	;'A'
  1555  0071B6  42                 	db	66	;'B'
  1556  0071B7  2C                 	db	44
  1557  0071B8  20                 	db	32
  1558  0071B9  53                 	db	83	;'S'
  1559  0071BA  77                 	db	119	;'w'
  1560  0071BB  65                 	db	101	;'e'
  1561  0071BC  64                 	db	100	;'d'
  1562  0071BD  65                 	db	101	;'e'
  1563  0071BE  6E                 	db	110	;'n'
  1564  0071BF  0D                 	db	13
  1565  0071C0  0A                 	db	10
  1566  0071C1  00                 	db	0
  1567  0071C2                     STR_198:
  1568  0071C2  54                 	db	84	;'T'
  1569  0071C3  72                 	db	114	;'r'
  1570  0071C4  61                 	db	97	;'a'
  1571  0071C5  6E                 	db	110	;'n'
  1572  0071C6  73                 	db	115	;'s'
  1573  0071C7  6D                 	db	109	;'m'
  1574  0071C8  69                 	db	105	;'i'
  1575  0071C9  74                 	db	116	;'t'
  1576  0071CA  74                 	db	116	;'t'
  1577  0071CB  65                 	db	101	;'e'
  1578  0071CC  72                 	db	114	;'r'
  1579  0071CD  20                 	db	32
  1580  0071CE  6F                 	db	111	;'o'
  1581  0071CF  72                 	db	114	;'r'
  1582  0071D0  20                 	db	32
  1583  0071D1  52                 	db	82	;'R'
  1584  0071D2  65                 	db	101	;'e'
  1585  0071D3  63                 	db	99	;'c'
  1586  0071D4  65                 	db	101	;'e'
  1587  0071D5  69                 	db	105	;'i'
  1588  0071D6  76                 	db	118	;'v'
  1589  0071D7  65                 	db	101	;'e'
  1590  0071D8  72                 	db	114	;'r'
  1591  0071D9  20                 	db	32
  1592  0071DA  69                 	db	105	;'i'
  1593  0071DB  73                 	db	115	;'s'
  1594  0071DC  20                 	db	32
  1595  0071DD  69                 	db	105	;'i'
  1596  0071DE  6E                 	db	110	;'n'
  1597  0071DF  20                 	db	32
  1598  0071E0  45                 	db	69	;'E'
  1599  0071E1  72                 	db	114	;'r'
  1600  0071E2  72                 	db	114	;'r'
  1601  0071E3  6F                 	db	111	;'o'
  1602  0071E4  72                 	db	114	;'r'
  1603  0071E5  20                 	db	32
  1604  0071E6  53                 	db	83	;'S'
  1605  0071E7  74                 	db	116	;'t'
  1606  0071E8  61                 	db	97	;'a'
  1607  0071E9  74                 	db	116	;'t'
  1608  0071EA  65                 	db	101	;'e'
  1609  0071EB  20                 	db	32
  1610  0071EC  57                 	db	87	;'W'
  1611  0071ED  61                 	db	97	;'a'
  1612  0071EE  72                 	db	114	;'r'
  1613  0071EF  6E                 	db	110	;'n'
  1614  0071F0  69                 	db	105	;'i'
  1615  0071F1  6E                 	db	110	;'n'
  1616  0071F2  67                 	db	103	;'g'
  1617  0071F3  0D                 	db	13
  1618  0071F4  0A                 	db	10
  1619  0071F5  00                 	db	0
  1620  0071F6                     STR_204:
  1621  0071F6  4C                 	db	76	;'L'
  1622  0071F7  49                 	db	73	;'I'
  1623  0071F8  53                 	db	83	;'S'
  1624  0071F9  54                 	db	84	;'T'
  1625  0071FA  45                 	db	69	;'E'
  1626  0071FB  4E                 	db	78	;'N'
  1627  0071FC  20                 	db	32
  1628  0071FD  2D                 	db	45
  1629  0071FE  20                 	db	32
  1630  0071FF  4F                 	db	79	;'O'
  1631  007200  70                 	db	112	;'p'
  1632  007201  65                 	db	101	;'e'
  1633  007202  6E                 	db	110	;'n'
  1634  007203  20                 	db	32
  1635  007204  43                 	db	67	;'C'
  1636  007205  41                 	db	65	;'A'
  1637  007206  4E                 	db	78	;'N'
  1638  007207  20                 	db	32
  1639  007208  69                 	db	105	;'i'
  1640  007209  6E                 	db	110	;'n'
  1641  00720A  74                 	db	116	;'t'
  1642  00720B  65                 	db	101	;'e'
  1643  00720C  72                 	db	114	;'r'
  1644  00720D  66                 	db	102	;'f'
  1645  00720E  61                 	db	97	;'a'
  1646  00720F  63                 	db	99	;'c'
  1647  007210  65                 	db	101	;'e'
  1648  007211  20                 	db	32
  1649  007212  69                 	db	105	;'i'
  1650  007213  6E                 	db	110	;'n'
  1651  007214  20                 	db	32
  1652  007215  6C                 	db	108	;'l'
  1653  007216  69                 	db	105	;'i'
  1654  007217  73                 	db	115	;'s'
  1655  007218  74                 	db	116	;'t'
  1656  007219  65                 	db	101	;'e'
  1657  00721A  6E                 	db	110	;'n'
  1658  00721B  20                 	db	32
  1659  00721C  6F                 	db	111	;'o'
  1660  00721D  6E                 	db	110	;'n'
  1661  00721E  6C                 	db	108	;'l'
  1662  00721F  79                 	db	121	;'y'
  1663  007220  20                 	db	32
  1664  007221  6D                 	db	109	;'m'
  1665  007222  6F                 	db	111	;'o'
  1666  007223  64                 	db	100	;'d'
  1667  007224  65                 	db	101	;'e'
  1668  007225  2E                 	db	46
  1669  007226  0D                 	db	13
  1670  007227  0A                 	db	10
  1671  007228  00                 	db	0
  1672  007229                     STR_97:
  1673  007229  2D                 	db	45
  1674  00722A  45                 	db	69	;'E'
  1675  00722B  52                 	db	82	;'R'
  1676  00722C  52                 	db	82	;'R'
  1677  00722D  4F                 	db	79	;'O'
  1678  00722E  52                 	db	82	;'R'
  1679  00722F  20                 	db	32
  1680  007230  2D                 	db	45
  1681  007231  20                 	db	32
  1682  007232  4D                 	db	77	;'M'
  1683  007233  61                 	db	97	;'a'
  1684  007234  73                 	db	115	;'s'
  1685  007235  6B                 	db	107	;'k'
  1686  007236  20                 	db	32
  1687  007237  6E                 	db	110	;'n'
  1688  007238  75                 	db	117	;'u'
  1689  007239  6D                 	db	109	;'m'
  1690  00723A  62                 	db	98	;'b'
  1691  00723B  65                 	db	101	;'e'
  1692  00723C  72                 	db	114	;'r'
  1693  00723D  20                 	db	32
  1694  00723E  63                 	db	99	;'c'
  1695  00723F  61                 	db	97	;'a'
  1696  007240  6E                 	db	110	;'n'
  1697  007241  20                 	db	32
  1698  007242  6F                 	db	111	;'o'
  1699  007243  6E                 	db	110	;'n'
  1700  007244  6C                 	db	108	;'l'
  1701  007245  79                 	db	121	;'y'
  1702  007246  20                 	db	32
  1703  007247  62                 	db	98	;'b'
  1704  007248  65                 	db	101	;'e'
  1705  007249  20                 	db	32
  1706  00724A  73                 	db	115	;'s'
  1707  00724B  65                 	db	101	;'e'
  1708  00724C  74                 	db	116	;'t'
  1709  00724D  20                 	db	32
  1710  00724E  61                 	db	97	;'a'
  1711  00724F  73                 	db	115	;'s'
  1712  007250  20                 	db	32
  1713  007251  30                 	db	48	;'0'
  1714  007252  20                 	db	32
  1715  007253  6F                 	db	111	;'o'
  1716  007254  72                 	db	114	;'r'
  1717  007255  20                 	db	32
  1718  007256  31                 	db	49	;'1'
  1719  007257  2E                 	db	46
  1720  007258  0D                 	db	13
  1721  007259  0A                 	db	10
  1722  00725A  00                 	db	0
  1723  00725B                     STR_205:
  1724  00725B  4C                 	db	76	;'L'
  1725  00725C  4F                 	db	79	;'O'
  1726  00725D  4F                 	db	79	;'O'
  1727  00725E  50                 	db	80	;'P'
  1728  00725F  42                 	db	66	;'B'
  1729  007260  41                 	db	65	;'A'
  1730  007261  43                 	db	67	;'C'
  1731  007262  4B                 	db	75	;'K'
  1732  007263  20                 	db	32
  1733  007264  2D                 	db	45
  1734  007265  20                 	db	32
  1735  007266  4F                 	db	79	;'O'
  1736  007267  70                 	db	112	;'p'
  1737  007268  65                 	db	101	;'e'
  1738  007269  6E                 	db	110	;'n'
  1739  00726A  20                 	db	32
  1740  00726B  43                 	db	67	;'C'
  1741  00726C  41                 	db	65	;'A'
  1742  00726D  4E                 	db	78	;'N'
  1743  00726E  20                 	db	32
  1744  00726F  69                 	db	105	;'i'
  1745  007270  6E                 	db	110	;'n'
  1746  007271  74                 	db	116	;'t'
  1747  007272  65                 	db	101	;'e'
  1748  007273  72                 	db	114	;'r'
  1749  007274  66                 	db	102	;'f'
  1750  007275  61                 	db	97	;'a'
  1751  007276  63                 	db	99	;'c'
  1752  007277  65                 	db	101	;'e'
  1753  007278  20                 	db	32
  1754  007279  69                 	db	105	;'i'
  1755  00727A  6E                 	db	110	;'n'
  1756  00727B  20                 	db	32
  1757  00727C  6C                 	db	108	;'l'
  1758  00727D  6F                 	db	111	;'o'
  1759  00727E  6F                 	db	111	;'o'
  1760  00727F  70                 	db	112	;'p'
  1761  007280  62                 	db	98	;'b'
  1762  007281  61                 	db	97	;'a'
  1763  007282  63                 	db	99	;'c'
  1764  007283  6B                 	db	107	;'k'
  1765  007284  20                 	db	32
  1766  007285  6D                 	db	109	;'m'
  1767  007286  6F                 	db	111	;'o'
  1768  007287  64                 	db	100	;'d'
  1769  007288  65                 	db	101	;'e'
  1770  007289  2E                 	db	46
  1771  00728A  0D                 	db	13
  1772  00728B  0A                 	db	10
  1773  00728C  00                 	db	0
  1774  00728D                     STR_207:
  1775  00728D  56                 	db	86	;'V'
  1776  00728E  45                 	db	69	;'E'
  1777  00728F  52                 	db	82	;'R'
  1778  007290  53                 	db	83	;'S'
  1779  007291  49                 	db	73	;'I'
  1780  007292  4F                 	db	79	;'O'
  1781  007293  4E                 	db	78	;'N'
  1782  007294  20                 	db	32
  1783  007295  2D                 	db	45
  1784  007296  20                 	db	32
  1785  007297  44                 	db	68	;'D'
  1786  007298  69                 	db	105	;'i'
  1787  007299  73                 	db	115	;'s'
  1788  00729A  70                 	db	112	;'p'
  1789  00729B  6C                 	db	108	;'l'
  1790  00729C  61                 	db	97	;'a'
  1791  00729D  79                 	db	121	;'y'
  1792  00729E  20                 	db	32
  1793  00729F  66                 	db	102	;'f'
  1794  0072A0  69                 	db	105	;'i'
  1795  0072A1  72                 	db	114	;'r'
  1796  0072A2  6D                 	db	109	;'m'
  1797  0072A3  77                 	db	119	;'w'
  1798  0072A4  61                 	db	97	;'a'
  1799  0072A5  72                 	db	114	;'r'
  1800  0072A6  65                 	db	101	;'e'
  1801  0072A7  20                 	db	32
  1802  0072A8  76                 	db	118	;'v'
  1803  0072A9  65                 	db	101	;'e'
  1804  0072AA  72                 	db	114	;'r'
  1805  0072AB  73                 	db	115	;'s'
  1806  0072AC  69                 	db	105	;'i'
  1807  0072AD  6F                 	db	111	;'o'
  1808  0072AE  6E                 	db	110	;'n'
  1809  0072AF  20                 	db	32
  1810  0072B0  69                 	db	105	;'i'
  1811  0072B1  6E                 	db	110	;'n'
  1812  0072B2  66                 	db	102	;'f'
  1813  0072B3  6F                 	db	111	;'o'
  1814  0072B4  72                 	db	114	;'r'
  1815  0072B5  6D                 	db	109	;'m'
  1816  0072B6  61                 	db	97	;'a'
  1817  0072B7  74                 	db	116	;'t'
  1818  0072B8  69                 	db	105	;'i'
  1819  0072B9  6F                 	db	111	;'o'
  1820  0072BA  6E                 	db	110	;'n'
  1821  0072BB  2E                 	db	46
  1822  0072BC  0D                 	db	13
  1823  0072BD  0A                 	db	10
  1824  0072BE  00                 	db	0
  1825  0072BF                     STR_227:
  1826  0072BF  20                 	db	32
  1827  0072C0  20                 	db	32
  1828  0072C1  20                 	db	32
  1829  0072C2  20                 	db	32
  1830  0072C3  20                 	db	32
  1831  0072C4  20                 	db	32
  1832  0072C5  20                 	db	32
  1833  0072C6  20                 	db	32
  1834  0072C7  20                 	db	32
  1835  0072C8  20                 	db	32
  1836  0072C9  20                 	db	32
  1837  0072CA  20                 	db	32
  1838  0072CB  20                 	db	32
  1839  0072CC  20                 	db	32
  1840  0072CD  20                 	db	32
  1841  0072CE  20                 	db	32
  1842  0072CF  46                 	db	70	;'F'
  1843  0072D0  6F                 	db	111	;'o'
  1844  0072D1  72                 	db	114	;'r'
  1845  0072D2  6D                 	db	109	;'m'
  1846  0072D3  61                 	db	97	;'a'
  1847  0072D4  74                 	db	116	;'t'
  1848  0072D5  3A                 	db	58	;':'
  1849  0072D6  20                 	db	32
  1850  0072D7  73                 	db	115	;'s'
  1851  0072D8  65                 	db	101	;'e'
  1852  0072D9  74                 	db	116	;'t'
  1853  0072DA  20                 	db	32
  1854  0072DB  72                 	db	114	;'r'
  1855  0072DC  77                 	db	119	;'w'
  1856  0072DD  74                 	db	116	;'t'
  1857  0072DE  69                 	db	105	;'i'
  1858  0072DF  6D                 	db	109	;'m'
  1859  0072E0  65                 	db	101	;'e'
  1860  0072E1  6F                 	db	111	;'o'
  1861  0072E2  75                 	db	117	;'u'
  1862  0072E3  74                 	db	116	;'t'
  1863  0072E4  20                 	db	32
  1864  0072E5  74                 	db	116	;'t'
  1865  0072E6  69                 	db	105	;'i'
  1866  0072E7  6D                 	db	109	;'m'
  1867  0072E8  65                 	db	101	;'e'
  1868  0072E9  6F                 	db	111	;'o'
  1869  0072EA  75                 	db	117	;'u'
  1870  0072EB  74                 	db	116	;'t'
  1871  0072EC  2E                 	db	46
  1872  0072ED  0D                 	db	13
  1873  0072EE  0A                 	db	10
  1874  0072EF  00                 	db	0
  1875  0072F0                     STR_225:
  1876  0072F0  20                 	db	32
  1877  0072F1  20                 	db	32
  1878  0072F2  20                 	db	32
  1879  0072F3  20                 	db	32
  1880  0072F4  44                 	db	68	;'D'
  1881  0072F5  45                 	db	69	;'E'
  1882  0072F6  43                 	db	67	;'C'
  1883  0072F7  49                 	db	73	;'I'
  1884  0072F8  4D                 	db	77	;'M'
  1885  0072F9  41                 	db	65	;'A'
  1886  0072FA  4C                 	db	76	;'L'
  1887  0072FB  20                 	db	32
  1888  0072FC  2D                 	db	45
  1889  0072FD  20                 	db	32
  1890  0072FE  44                 	db	68	;'D'
  1891  0072FF  69                 	db	105	;'i'
  1892  007300  73                 	db	115	;'s'
  1893  007301  70                 	db	112	;'p'
  1894  007302  6C                 	db	108	;'l'
  1895  007303  61                 	db	97	;'a'
  1896  007304  79                 	db	121	;'y'
  1897  007305  20                 	db	32
  1898  007306  6E                 	db	110	;'n'
  1899  007307  75                 	db	117	;'u'
  1900  007308  6D                 	db	109	;'m'
  1901  007309  65                 	db	101	;'e'
  1902  00730A  72                 	db	114	;'r'
  1903  00730B  69                 	db	105	;'i'
  1904  00730C  63                 	db	99	;'c'
  1905  00730D  61                 	db	97	;'a'
  1906  00730E  6C                 	db	108	;'l'
  1907  00730F  73                 	db	115	;'s'
  1908  007310  20                 	db	32
  1909  007311  69                 	db	105	;'i'
  1910  007312  6E                 	db	110	;'n'
  1911  007313  20                 	db	32
  1912  007314  64                 	db	100	;'d'
  1913  007315  65                 	db	101	;'e'
  1914  007316  63                 	db	99	;'c'
  1915  007317  69                 	db	105	;'i'
  1916  007318  6D                 	db	109	;'m'
  1917  007319  61                 	db	97	;'a'
  1918  00731A  6C                 	db	108	;'l'
  1919  00731B  2E                 	db	46
  1920  00731C  0D                 	db	13
  1921  00731D  0A                 	db	10
  1922  00731E  00                 	db	0
  1923  00731F                     STR_224:
  1924  00731F  20                 	db	32
  1925  007320  20                 	db	32
  1926  007321  20                 	db	32
  1927  007322  20                 	db	32
  1928  007323  48                 	db	72	;'H'
  1929  007324  45                 	db	69	;'E'
  1930  007325  58                 	db	88	;'X'
  1931  007326  20                 	db	32
  1932  007327  2D                 	db	45
  1933  007328  20                 	db	32
  1934  007329  44                 	db	68	;'D'
  1935  00732A  69                 	db	105	;'i'
  1936  00732B  73                 	db	115	;'s'
  1937  00732C  70                 	db	112	;'p'
  1938  00732D  6C                 	db	108	;'l'
  1939  00732E  61                 	db	97	;'a'
  1940  00732F  79                 	db	121	;'y'
  1941  007330  20                 	db	32
  1942  007331  6E                 	db	110	;'n'
  1943  007332  75                 	db	117	;'u'
  1944  007333  6D                 	db	109	;'m'
  1945  007334  65                 	db	101	;'e'
  1946  007335  72                 	db	114	;'r'
  1947  007336  69                 	db	105	;'i'
  1948  007337  63                 	db	99	;'c'
  1949  007338  61                 	db	97	;'a'
  1950  007339  6C                 	db	108	;'l'
  1951  00733A  73                 	db	115	;'s'
  1952  00733B  20                 	db	32
  1953  00733C  69                 	db	105	;'i'
  1954  00733D  6E                 	db	110	;'n'
  1955  00733E  20                 	db	32
  1956  00733F  68                 	db	104	;'h'
  1957  007340  65                 	db	101	;'e'
  1958  007341  78                 	db	120	;'x'
  1959  007342  61                 	db	97	;'a'
  1960  007343  64                 	db	100	;'d'
  1961  007344  65                 	db	101	;'e'
  1962  007345  63                 	db	99	;'c'
  1963  007346  69                 	db	105	;'i'
  1964  007347  6D                 	db	109	;'m'
  1965  007348  61                 	db	97	;'a'
  1966  007349  6C                 	db	108	;'l'
  1967  00734A  2E                 	db	46
  1968  00734B  0D                 	db	13
  1969  00734C  0A                 	db	10
  1970  00734D  00                 	db	0
  1971  00734E                     STR_215:
  1972  00734E  46                 	db	70	;'F'
  1973  00734F  49                 	db	73	;'I'
  1974  007350  4E                 	db	78	;'N'
  1975  007351  44                 	db	68	;'D'
  1976  007352  20                 	db	32
  1977  007353  2D                 	db	45
  1978  007354  20                 	db	32
  1979  007355  46                 	db	70	;'F'
  1980  007356  69                 	db	105	;'i'
  1981  007357  6E                 	db	110	;'n'
  1982  007358  64                 	db	100	;'d'
  1983  007359  20                 	db	32
  1984  00735A  61                 	db	97	;'a'
  1985  00735B  76                 	db	118	;'v'
  1986  00735C  61                 	db	97	;'a'
  1987  00735D  69                 	db	105	;'i'
  1988  00735E  6C                 	db	108	;'l'
  1989  00735F  61                 	db	97	;'a'
  1990  007360  62                 	db	98	;'b'
  1991  007361  6C                 	db	108	;'l'
  1992  007362  65                 	db	101	;'e'
  1993  007363  20                 	db	32
  1994  007364  43                 	db	67	;'C'
  1995  007365  41                 	db	65	;'A'
  1996  007366  4E                 	db	78	;'N'
  1997  007367  34                 	db	52	;'4'
  1998  007368  56                 	db	86	;'V'
  1999  007369  53                 	db	83	;'S'
  2000  00736A  43                 	db	67	;'C'
  2001  00736B  50                 	db	80	;'P'
  2002  00736C  20                 	db	32
  2003  00736D  6E                 	db	110	;'n'
  2004  00736E  6F                 	db	111	;'o'
  2005  00736F  64                 	db	100	;'d'
  2006  007370  65                 	db	101	;'e'
  2007  007371  73                 	db	115	;'s'
  2008  007372  20                 	db	32
  2009  007373  6F                 	db	111	;'o'
  2010  007374  6E                 	db	110	;'n'
  2011  007375  20                 	db	32
  2012  007376  62                 	db	98	;'b'
  2013  007377  75                 	db	117	;'u'
  2014  007378  73                 	db	115	;'s'
  2015  007379  2E                 	db	46
  2016  00737A  0D                 	db	13
  2017  00737B  0A                 	db	10
  2018  00737C  00                 	db	0
  2019  00737D                     STR_203:
  2020  00737D  53                 	db	83	;'S'
  2021  00737E  49                 	db	73	;'I'
  2022  00737F  4C                 	db	76	;'L'
  2023  007380  45                 	db	69	;'E'
  2024  007381  4E                 	db	78	;'N'
  2025  007382  54                 	db	84	;'T'
  2026  007383  20                 	db	32
  2027  007384  2D                 	db	45
  2028  007385  20                 	db	32
  2029  007386  4F                 	db	79	;'O'
  2030  007387  70                 	db	112	;'p'
  2031  007388  65                 	db	101	;'e'
  2032  007389  6E                 	db	110	;'n'
  2033  00738A  20                 	db	32
  2034  00738B  43                 	db	67	;'C'
  2035  00738C  41                 	db	65	;'A'
  2036  00738D  4E                 	db	78	;'N'
  2037  00738E  20                 	db	32
  2038  00738F  69                 	db	105	;'i'
  2039  007390  6E                 	db	110	;'n'
  2040  007391  74                 	db	116	;'t'
  2041  007392  65                 	db	101	;'e'
  2042  007393  72                 	db	114	;'r'
  2043  007394  66                 	db	102	;'f'
  2044  007395  61                 	db	97	;'a'
  2045  007396  63                 	db	99	;'c'
  2046  007397  65                 	db	101	;'e'
  2047  007398  20                 	db	32
  2048  007399  69                 	db	105	;'i'
  2049  00739A  6E                 	db	110	;'n'
  2050  00739B  20                 	db	32
  2051  00739C  73                 	db	115	;'s'
  2052  00739D  69                 	db	105	;'i'
  2053  00739E  6C                 	db	108	;'l'
  2054  00739F  65                 	db	101	;'e'
  2055  0073A0  6E                 	db	110	;'n'
  2056  0073A1  74                 	db	116	;'t'
  2057  0073A2  20                 	db	32
  2058  0073A3  6D                 	db	109	;'m'
  2059  0073A4  6F                 	db	111	;'o'
  2060  0073A5  64                 	db	100	;'d'
  2061  0073A6  65                 	db	101	;'e'
  2062  0073A7  2E                 	db	46
  2063  0073A8  0D                 	db	13
  2064  0073A9  0A                 	db	10
  2065  0073AA  00                 	db	0
  2066  0073AB                     STR_208:
  2067  0073AB  49                 	db	73	;'I'
  2068  0073AC  46                 	db	70	;'F'
  2069  0073AD  4D                 	db	77	;'M'
  2070  0073AE  4F                 	db	79	;'O'
  2071  0073AF  44                 	db	68	;'D'
  2072  0073B0  45                 	db	69	;'E'
  2073  0073B1  20                 	db	32
  2074  0073B2  2D                 	db	45
  2075  0073B3  20                 	db	32
  2076  0073B4  44                 	db	68	;'D'
  2077  0073B5  69                 	db	105	;'i'
  2078  0073B6  73                 	db	115	;'s'
  2079  0073B7  70                 	db	112	;'p'
  2080  0073B8  6C                 	db	108	;'l'
  2081  0073B9  61                 	db	97	;'a'
  2082  0073BA  79                 	db	121	;'y'
  2083  0073BB  20                 	db	32
  2084  0073BC  73                 	db	115	;'s'
  2085  0073BD  65                 	db	101	;'e'
  2086  0073BE  6C                 	db	108	;'l'
  2087  0073BF  65                 	db	101	;'e'
  2088  0073C0  63                 	db	99	;'c'
  2089  0073C1  74                 	db	116	;'t'
  2090  0073C2  65                 	db	101	;'e'
  2091  0073C3  64                 	db	100	;'d'
  2092  0073C4  20                 	db	32
  2093  0073C5  69                 	db	105	;'i'
  2094  0073C6  6E                 	db	110	;'n'
  2095  0073C7  74                 	db	116	;'t'
  2096  0073C8  65                 	db	101	;'e'
  2097  0073C9  72                 	db	114	;'r'
  2098  0073CA  66                 	db	102	;'f'
  2099  0073CB  61                 	db	97	;'a'
  2100  0073CC  63                 	db	99	;'c'
  2101  0073CD  65                 	db	101	;'e'
  2102  0073CE  20                 	db	32
  2103  0073CF  6D                 	db	109	;'m'
  2104  0073D0  6F                 	db	111	;'o'
  2105  0073D1  64                 	db	100	;'d'
  2106  0073D2  65                 	db	101	;'e'
  2107  0073D3  2E                 	db	46
  2108  0073D4  0D                 	db	13
  2109  0073D5  0A                 	db	10
  2110  0073D6  00                 	db	0
  2111  0073D7                     STR_202:
  2112  0073D7  4F                 	db	79	;'O'
  2113  0073D8  50                 	db	80	;'P'
  2114  0073D9  45                 	db	69	;'E'
  2115  0073DA  4E                 	db	78	;'N'
  2116  0073DB  20                 	db	32
  2117  0073DC  2D                 	db	45
  2118  0073DD  20                 	db	32
  2119  0073DE  4F                 	db	79	;'O'
  2120  0073DF  70                 	db	112	;'p'
  2121  0073E0  65                 	db	101	;'e'
  2122  0073E1  6E                 	db	110	;'n'
  2123  0073E2  20                 	db	32
  2124  0073E3  43                 	db	67	;'C'
  2125  0073E4  41                 	db	65	;'A'
  2126  0073E5  4E                 	db	78	;'N'
  2127  0073E6  20                 	db	32
  2128  0073E7  69                 	db	105	;'i'
  2129  0073E8  6E                 	db	110	;'n'
  2130  0073E9  74                 	db	116	;'t'
  2131  0073EA  65                 	db	101	;'e'
  2132  0073EB  72                 	db	114	;'r'
  2133  0073EC  66                 	db	102	;'f'
  2134  0073ED  61                 	db	97	;'a'
  2135  0073EE  63                 	db	99	;'c'
  2136  0073EF  65                 	db	101	;'e'
  2137  0073F0  20                 	db	32
  2138  0073F1  69                 	db	105	;'i'
  2139  0073F2  6E                 	db	110	;'n'
  2140  0073F3  20                 	db	32
  2141  0073F4  6E                 	db	110	;'n'
  2142  0073F5  6F                 	db	111	;'o'
  2143  0073F6  72                 	db	114	;'r'
  2144  0073F7  6D                 	db	109	;'m'
  2145  0073F8  61                 	db	97	;'a'
  2146  0073F9  6C                 	db	108	;'l'
  2147  0073FA  20                 	db	32
  2148  0073FB  6D                 	db	109	;'m'
  2149  0073FC  6F                 	db	111	;'o'
  2150  0073FD  64                 	db	100	;'d'
  2151  0073FE  65                 	db	101	;'e'
  2152  0073FF  2E                 	db	46
  2153  007400  0D                 	db	13
  2154  007401  0A                 	db	10
  2155  007402  00                 	db	0
  2156  007403                     STR_109:
  2157  007403  2B                 	db	43
  2158  007404  4F                 	db	79	;'O'
  2159  007405  4B                 	db	75	;'K'
  2160  007406  20                 	db	32
  2161  007407  2D                 	db	45
  2162  007408  20                 	db	32
  2163  007409  4E                 	db	78	;'N'
  2164  00740A  75                 	db	117	;'u'
  2165  00740B  6D                 	db	109	;'m'
  2166  00740C  65                 	db	101	;'e'
  2167  00740D  72                 	db	114	;'r'
  2168  00740E  69                 	db	105	;'i'
  2169  00740F  63                 	db	99	;'c'
  2170  007410  61                 	db	97	;'a'
  2171  007411  6C                 	db	108	;'l'
  2172  007412  20                 	db	32
  2173  007413  6F                 	db	111	;'o'
  2174  007414  75                 	db	117	;'u'
  2175  007415  74                 	db	116	;'t'
  2176  007416  70                 	db	112	;'p'
  2177  007417  75                 	db	117	;'u'
  2178  007418  74                 	db	116	;'t'
  2179  007419  20                 	db	32
  2180  00741A  6E                 	db	110	;'n'
  2181  00741B  6F                 	db	111	;'o'
  2182  00741C  77                 	db	119	;'w'
  2183  00741D  20                 	db	32
  2184  00741E  69                 	db	105	;'i'
  2185  00741F  6E                 	db	110	;'n'
  2186  007420  20                 	db	32
  2187  007421  68                 	db	104	;'h'
  2188  007422  65                 	db	101	;'e'
  2189  007423  78                 	db	120	;'x'
  2190  007424  61                 	db	97	;'a'
  2191  007425  64                 	db	100	;'d'
  2192  007426  65                 	db	101	;'e'
  2193  007427  63                 	db	99	;'c'
  2194  007428  69                 	db	105	;'i'
  2195  007429  6D                 	db	109	;'m'
  2196  00742A  61                 	db	97	;'a'
  2197  00742B  6C                 	db	108	;'l'
  2198  00742C  0D                 	db	13
  2199  00742D  0A                 	db	10
  2200  00742E  00                 	db	0
  2201  00742F                     STR_88:
  2202  00742F  2D                 	db	45
  2203  007430  45                 	db	69	;'E'
  2204  007431  52                 	db	82	;'R'
  2205  007432  52                 	db	82	;'R'
  2206  007433  4F                 	db	79	;'O'
  2207  007434  52                 	db	82	;'R'
  2208  007435  20                 	db	32
  2209  007436  2D                 	db	45
  2210  007437  20                 	db	32
  2211  007438  66                 	db	102	;'f'
  2212  007439  69                 	db	105	;'i'
  2213  00743A  6C                 	db	108	;'l'
  2214  00743B  74                 	db	116	;'t'
  2215  00743C  65                 	db	101	;'e'
  2216  00743D  72                 	db	114	;'r'
  2217  00743E  20                 	db	32
  2218  00743F  66                 	db	102	;'f'
  2219  007440  6F                 	db	111	;'o'
  2220  007441  72                 	db	114	;'r'
  2221  007442  20                 	db	32
  2222  007443  70                 	db	112	;'p'
  2223  007444  72                 	db	114	;'r'
  2224  007445  69                 	db	105	;'i'
  2225  007446  6F                 	db	111	;'o'
  2226  007447  72                 	db	114	;'r'
  2227  007448  69                 	db	105	;'i'
  2228  007449  74                 	db	116	;'t'
  2229  00744A  79                 	db	121	;'y'
  2230  00744B  20                 	db	32
  2231  00744C  69                 	db	105	;'i'
  2232  00744D  73                 	db	115	;'s'
  2233  00744E  20                 	db	32
  2234  00744F  6D                 	db	109	;'m'
  2235  007450  69                 	db	105	;'i'
  2236  007451  73                 	db	115	;'s'
  2237  007452  73                 	db	115	;'s'
  2238  007453  69                 	db	105	;'i'
  2239  007454  6E                 	db	110	;'n'
  2240  007455  67                 	db	103	;'g'
  2241  007456  0D                 	db	13
  2242  007457  0A                 	db	10
  2243  007458  00                 	db	0
  2244  007459                     STR_94:
  2245  007459  2D                 	db	45
  2246  00745A  45                 	db	69	;'E'
  2247  00745B  52                 	db	82	;'R'
  2248  00745C  52                 	db	82	;'R'
  2249  00745D  4F                 	db	79	;'O'
  2250  00745E  52                 	db	82	;'R'
  2251  00745F  20                 	db	32
  2252  007460  2D                 	db	45
  2253  007461  20                 	db	32
  2254  007462  66                 	db	102	;'f'
  2255  007463  69                 	db	105	;'i'
  2256  007464  6C                 	db	108	;'l'
  2257  007465  74                 	db	116	;'t'
  2258  007466  65                 	db	101	;'e'
  2259  007467  72                 	db	114	;'r'
  2260  007468  20                 	db	32
  2261  007469  66                 	db	102	;'f'
  2262  00746A  6F                 	db	111	;'o'
  2263  00746B  72                 	db	114	;'r'
  2264  00746C  20                 	db	32
  2265  00746D  6E                 	db	110	;'n'
  2266  00746E  69                 	db	105	;'i'
  2267  00746F  64                 	db	100	;'d'
  2268  007470  65                 	db	101	;'e'
  2269  007471  20                 	db	32
  2270  007472  69                 	db	105	;'i'
  2271  007473  64                 	db	100	;'d'
  2272  007474  20                 	db	32
  2273  007475  69                 	db	105	;'i'
  2274  007476  73                 	db	115	;'s'
  2275  007477  20                 	db	32
  2276  007478  6D                 	db	109	;'m'
  2277  007479  69                 	db	105	;'i'
  2278  00747A  73                 	db	115	;'s'
  2279  00747B  73                 	db	115	;'s'
  2280  00747C  69                 	db	105	;'i'
  2281  00747D  6E                 	db	110	;'n'
  2282  00747E  67                 	db	103	;'g'
  2283  00747F  0D                 	db	13
  2284  007480  0A                 	db	10
  2285  007481  00                 	db	0
  2286  007482                     STR_214:
  2287  007482  48                 	db	72	;'H'
  2288  007483  45                 	db	69	;'E'
  2289  007484  4C                 	db	76	;'L'
  2290  007485  50                 	db	80	;'P'
  2291  007486  20                 	db	32
  2292  007487  2D                 	db	45
  2293  007488  20                 	db	32
  2294  007489  44                 	db	68	;'D'
  2295  00748A  69                 	db	105	;'i'
  2296  00748B  73                 	db	115	;'s'
  2297  00748C  70                 	db	112	;'p'
  2298  00748D  6C                 	db	108	;'l'
  2299  00748E  61                 	db	97	;'a'
  2300  00748F  79                 	db	121	;'y'
  2301  007490  20                 	db	32
  2302  007491  74                 	db	116	;'t'
  2303  007492  68                 	db	104	;'h'
  2304  007493  69                 	db	105	;'i'
  2305  007494  73                 	db	115	;'s'
  2306  007495  20                 	db	32
  2307  007496  68                 	db	104	;'h'
  2308  007497  65                 	db	101	;'e'
  2309  007498  6C                 	db	108	;'l'
  2310  007499  70                 	db	112	;'p'
  2311  00749A  20                 	db	32
  2312  00749B  69                 	db	105	;'i'
  2313  00749C  6E                 	db	110	;'n'
  2314  00749D  66                 	db	102	;'f'
  2315  00749E  6F                 	db	111	;'o'
  2316  00749F  72                 	db	114	;'r'
  2317  0074A0  6D                 	db	109	;'m'
  2318  0074A1  61                 	db	97	;'a'
  2319  0074A2  74                 	db	116	;'t'
  2320  0074A3  69                 	db	105	;'i'
  2321  0074A4  6F                 	db	111	;'o'
  2322  0074A5  6E                 	db	110	;'n'
  2323  0074A6  2E                 	db	46
  2324  0074A7  0D                 	db	13
  2325  0074A8  0A                 	db	10
  2326  0074A9  00                 	db	0
  2327  0074AA                     STR_100:
  2328  0074AA  2D                 	db	45
  2329  0074AB  45                 	db	69	;'E'
  2330  0074AC  52                 	db	82	;'R'
  2331  0074AD  52                 	db	82	;'R'
  2332  0074AE  4F                 	db	79	;'O'
  2333  0074AF  52                 	db	82	;'R'
  2334  0074B0  20                 	db	32
  2335  0074B1  2D                 	db	45
  2336  0074B2  20                 	db	32
  2337  0074B3  6D                 	db	109	;'m'
  2338  0074B4  61                 	db	97	;'a'
  2339  0074B5  73                 	db	115	;'s'
  2340  0074B6  6B                 	db	107	;'k'
  2341  0074B7  20                 	db	32
  2342  0074B8  66                 	db	102	;'f'
  2343  0074B9  6F                 	db	111	;'o'
  2344  0074BA  72                 	db	114	;'r'
  2345  0074BB  20                 	db	32
  2346  0074BC  70                 	db	112	;'p'
  2347  0074BD  72                 	db	114	;'r'
  2348  0074BE  69                 	db	105	;'i'
  2349  0074BF  6F                 	db	111	;'o'
  2350  0074C0  72                 	db	114	;'r'
  2351  0074C1  69                 	db	105	;'i'
  2352  0074C2  74                 	db	116	;'t'
  2353  0074C3  79                 	db	121	;'y'
  2354  0074C4  20                 	db	32
  2355  0074C5  69                 	db	105	;'i'
  2356  0074C6  73                 	db	115	;'s'
  2357  0074C7  20                 	db	32
  2358  0074C8  6D                 	db	109	;'m'
  2359  0074C9  69                 	db	105	;'i'
  2360  0074CA  73                 	db	115	;'s'
  2361  0074CB  73                 	db	115	;'s'
  2362  0074CC  69                 	db	105	;'i'
  2363  0074CD  6E                 	db	110	;'n'
  2364  0074CE  67                 	db	103	;'g'
  2365  0074CF  0D                 	db	13
  2366  0074D0  0A                 	db	10
  2367  0074D1  00                 	db	0
  2368  0074D2                     STR_111:
  2369  0074D2  2B                 	db	43
  2370  0074D3  4F                 	db	79	;'O'
  2371  0074D4  4B                 	db	75	;'K'
  2372  0074D5  20                 	db	32
  2373  0074D6  2D                 	db	45
  2374  0074D7  20                 	db	32
  2375  0074D8  4E                 	db	78	;'N'
  2376  0074D9  75                 	db	117	;'u'
  2377  0074DA  6D                 	db	109	;'m'
  2378  0074DB  65                 	db	101	;'e'
  2379  0074DC  72                 	db	114	;'r'
  2380  0074DD  69                 	db	105	;'i'
  2381  0074DE  63                 	db	99	;'c'
  2382  0074DF  61                 	db	97	;'a'
  2383  0074E0  6C                 	db	108	;'l'
  2384  0074E1  20                 	db	32
  2385  0074E2  6F                 	db	111	;'o'
  2386  0074E3  75                 	db	117	;'u'
  2387  0074E4  74                 	db	116	;'t'
  2388  0074E5  70                 	db	112	;'p'
  2389  0074E6  75                 	db	117	;'u'
  2390  0074E7  74                 	db	116	;'t'
  2391  0074E8  20                 	db	32
  2392  0074E9  6E                 	db	110	;'n'
  2393  0074EA  6F                 	db	111	;'o'
  2394  0074EB  77                 	db	119	;'w'
  2395  0074EC  20                 	db	32
  2396  0074ED  69                 	db	105	;'i'
  2397  0074EE  6E                 	db	110	;'n'
  2398  0074EF  20                 	db	32
  2399  0074F0  64                 	db	100	;'d'
  2400  0074F1  65                 	db	101	;'e'
  2401  0074F2  63                 	db	99	;'c'
  2402  0074F3  69                 	db	105	;'i'
  2403  0074F4  6D                 	db	109	;'m'
  2404  0074F5  61                 	db	97	;'a'
  2405  0074F6  6C                 	db	108	;'l'
  2406  0074F7  0D                 	db	13
  2407  0074F8  0A                 	db	10
  2408  0074F9  00                 	db	0
  2409  0074FA                     STR_86:
  2410  0074FA  2D                 	db	45
  2411  0074FB  45                 	db	69	;'E'
  2412  0074FC  52                 	db	82	;'R'
  2413  0074FD  52                 	db	82	;'R'
  2414  0074FE  4F                 	db	79	;'O'
  2415  0074FF  52                 	db	82	;'R'
  2416  007500  20                 	db	32
  2417  007501  2D                 	db	45
  2418  007502  20                 	db	32
  2419  007503  4E                 	db	78	;'N'
  2420  007504  6F                 	db	111	;'o'
  2421  007505  20                 	db	32
  2422  007506  66                 	db	102	;'f'
  2423  007507  69                 	db	105	;'i'
  2424  007508  6C                 	db	108	;'l'
  2425  007509  74                 	db	116	;'t'
  2426  00750A  65                 	db	101	;'e'
  2427  00750B  72                 	db	114	;'r'
  2428  00750C  20                 	db	32
  2429  00750D  6E                 	db	110	;'n'
  2430  00750E  75                 	db	117	;'u'
  2431  00750F  6D                 	db	109	;'m'
  2432  007510  62                 	db	98	;'b'
  2433  007511  65                 	db	101	;'e'
  2434  007512  72                 	db	114	;'r'
  2435  007513  20                 	db	32
  2436  007514  73                 	db	115	;'s'
  2437  007515  70                 	db	112	;'p'
  2438  007516  65                 	db	101	;'e'
  2439  007517  63                 	db	99	;'c'
  2440  007518  69                 	db	105	;'i'
  2441  007519  66                 	db	102	;'f'
  2442  00751A  69                 	db	105	;'i'
  2443  00751B  65                 	db	101	;'e'
  2444  00751C  64                 	db	100	;'d'
  2445  00751D  2E                 	db	46
  2446  00751E  0D                 	db	13
  2447  00751F  0A                 	db	10
  2448  007520  00                 	db	0
  2449  007521                     STR_213:
  2450  007521  45                 	db	69	;'E'
  2451  007522  52                 	db	82	;'R'
  2452  007523  52                 	db	82	;'R'
  2453  007524  20                 	db	32
  2454  007525  2D                 	db	45
  2455  007526  20                 	db	32
  2456  007527  44                 	db	68	;'D'
  2457  007528  69                 	db	105	;'i'
  2458  007529  73                 	db	115	;'s'
  2459  00752A  70                 	db	112	;'p'
  2460  00752B  6C                 	db	108	;'l'
  2461  00752C  61                 	db	97	;'a'
  2462  00752D  79                 	db	121	;'y'
  2463  00752E  20                 	db	32
  2464  00752F  43                 	db	67	;'C'
  2465  007530  41                 	db	65	;'A'
  2466  007531  4E                 	db	78	;'N'
  2467  007532  20                 	db	32
  2468  007533  65                 	db	101	;'e'
  2469  007534  72                 	db	114	;'r'
  2470  007535  72                 	db	114	;'r'
  2471  007536  6F                 	db	111	;'o'
  2472  007537  72                 	db	114	;'r'
  2473  007538  20                 	db	32
  2474  007539  69                 	db	105	;'i'
  2475  00753A  6E                 	db	110	;'n'
  2476  00753B  66                 	db	102	;'f'
  2477  00753C  6F                 	db	111	;'o'
  2478  00753D  72                 	db	114	;'r'
  2479  00753E  6D                 	db	109	;'m'
  2480  00753F  61                 	db	97	;'a'
  2481  007540  74                 	db	116	;'t'
  2482  007541  69                 	db	105	;'i'
  2483  007542  6F                 	db	111	;'o'
  2484  007543  6E                 	db	110	;'n'
  2485  007544  2E                 	db	46
  2486  007545  0D                 	db	13
  2487  007546  0A                 	db	10
  2488  007547  00                 	db	0
  2489  007548                     STR_199:
  2490  007548  48                 	db	72	;'H'
  2491  007549  65                 	db	101	;'e'
  2492  00754A  6C                 	db	108	;'l'
  2493  00754B  70                 	db	112	;'p'
  2494  00754C  20                 	db	32
  2495  00754D  66                 	db	102	;'f'
  2496  00754E  6F                 	db	111	;'o'
  2497  00754F  72                 	db	114	;'r'
  2498  007550  20                 	db	32
  2499  007551  74                 	db	116	;'t'
  2500  007552  68                 	db	104	;'h'
  2501  007553  65                 	db	101	;'e'
  2502  007554  20                 	db	32
  2503  007555  46                 	db	70	;'F'
  2504  007556  72                 	db	114	;'r'
  2505  007557  61                 	db	97	;'a'
  2506  007558  6E                 	db	110	;'n'
  2507  007559  6B                 	db	107	;'k'
  2508  00755A  66                 	db	102	;'f'
  2509  00755B  75                 	db	117	;'u'
  2510  00755C  72                 	db	114	;'r'
  2511  00755D  74                 	db	116	;'t'
  2512  00755E  20                 	db	32
  2513  00755F  52                 	db	82	;'R'
  2514  007560  53                 	db	83	;'S'
  2515  007561  2D                 	db	45
  2516  007562  32                 	db	50	;'2'
  2517  007563  33                 	db	51	;'3'
  2518  007564  32                 	db	50	;'2'
  2519  007565  20                 	db	32
  2520  007566  6D                 	db	109	;'m'
  2521  007567  6F                 	db	111	;'o'
  2522  007568  64                 	db	100	;'d'
  2523  007569  75                 	db	117	;'u'
  2524  00756A  6C                 	db	108	;'l'
  2525  00756B  65                 	db	101	;'e'
  2526  00756C  0D                 	db	13
  2527  00756D  0A                 	db	10
  2528  00756E  00                 	db	0
  2529  00756F                     STR_106:
  2530  00756F  2D                 	db	45
  2531  007570  45                 	db	69	;'E'
  2532  007571  52                 	db	82	;'R'
  2533  007572  52                 	db	82	;'R'
  2534  007573  4F                 	db	79	;'O'
  2535  007574  52                 	db	82	;'R'
  2536  007575  20                 	db	32
  2537  007576  2D                 	db	45
  2538  007577  20                 	db	32
  2539  007578  6D                 	db	109	;'m'
  2540  007579  61                 	db	97	;'a'
  2541  00757A  73                 	db	115	;'s'
  2542  00757B  6B                 	db	107	;'k'
  2543  00757C  20                 	db	32
  2544  00757D  66                 	db	102	;'f'
  2545  00757E  6F                 	db	111	;'o'
  2546  00757F  72                 	db	114	;'r'
  2547  007580  20                 	db	32
  2548  007581  6E                 	db	110	;'n'
  2549  007582  69                 	db	105	;'i'
  2550  007583  64                 	db	100	;'d'
  2551  007584  65                 	db	101	;'e'
  2552  007585  20                 	db	32
  2553  007586  69                 	db	105	;'i'
  2554  007587  64                 	db	100	;'d'
  2555  007588  20                 	db	32
  2556  007589  69                 	db	105	;'i'
  2557  00758A  73                 	db	115	;'s'
  2558  00758B  20                 	db	32
  2559  00758C  6D                 	db	109	;'m'
  2560  00758D  69                 	db	105	;'i'
  2561  00758E  73                 	db	115	;'s'
  2562  00758F  73                 	db	115	;'s'
  2563  007590  69                 	db	105	;'i'
  2564  007591  6E                 	db	110	;'n'
  2565  007592  67                 	db	103	;'g'
  2566  007593  0D                 	db	13
  2567  007594  0A                 	db	10
  2568  007595  00                 	db	0
  2569  007596                     STR_90:
  2570  007596  2D                 	db	45
  2571  007597  45                 	db	69	;'E'
  2572  007598  52                 	db	82	;'R'
  2573  007599  52                 	db	82	;'R'
  2574  00759A  4F                 	db	79	;'O'
  2575  00759B  52                 	db	82	;'R'
  2576  00759C  20                 	db	32
  2577  00759D  2D                 	db	45
  2578  00759E  20                 	db	32
  2579  00759F  66                 	db	102	;'f'
  2580  0075A0  69                 	db	105	;'i'
  2581  0075A1  6C                 	db	108	;'l'
  2582  0075A2  74                 	db	116	;'t'
  2583  0075A3  65                 	db	101	;'e'
  2584  0075A4  72                 	db	114	;'r'
  2585  0075A5  20                 	db	32
  2586  0075A6  66                 	db	102	;'f'
  2587  0075A7  6F                 	db	111	;'o'
  2588  0075A8  72                 	db	114	;'r'
  2589  0075A9  20                 	db	32
  2590  0075AA  63                 	db	99	;'c'
  2591  0075AB  6C                 	db	108	;'l'
  2592  0075AC  61                 	db	97	;'a'
  2593  0075AD  73                 	db	115	;'s'
  2594  0075AE  73                 	db	115	;'s'
  2595  0075AF  20                 	db	32
  2596  0075B0  69                 	db	105	;'i'
  2597  0075B1  73                 	db	115	;'s'
  2598  0075B2  20                 	db	32
  2599  0075B3  6D                 	db	109	;'m'
  2600  0075B4  69                 	db	105	;'i'
  2601  0075B5  73                 	db	115	;'s'
  2602  0075B6  73                 	db	115	;'s'
  2603  0075B7  69                 	db	105	;'i'
  2604  0075B8  6E                 	db	110	;'n'
  2605  0075B9  67                 	db	103	;'g'
  2606  0075BA  0D                 	db	13
  2607  0075BB  0A                 	db	10
  2608  0075BC  00                 	db	0
  2609  0075BD                     STR_230:
  2610  0075BD  20                 	db	32
  2611  0075BE  20                 	db	32
  2612  0075BF  20                 	db	32
  2613  0075C0  20                 	db	32
  2614  0075C1  20                 	db	32
  2615  0075C2  20                 	db	32
  2616  0075C3  20                 	db	32
  2617  0075C4  20                 	db	32
  2618  0075C5  20                 	db	32
  2619  0075C6  20                 	db	32
  2620  0075C7  20                 	db	32
  2621  0075C8  4D                 	db	77	;'M'
  2622  0075C9  6F                 	db	111	;'o'
  2623  0075CA  64                 	db	100	;'d'
  2624  0075CB  65                 	db	101	;'e'
  2625  0075CC  73                 	db	115	;'s'
  2626  0075CD  3A                 	db	58	;':'
  2627  0075CE  20                 	db	32
  2628  0075CF  76                 	db	118	;'v'
  2629  0075D0  65                 	db	101	;'e'
  2630  0075D1  72                 	db	114	;'r'
  2631  0075D2  62                 	db	98	;'b'
  2632  0075D3  6F                 	db	111	;'o'
  2633  0075D4  73                 	db	115	;'s'
  2634  0075D5  65                 	db	101	;'e'
  2635  0075D6  7C                 	db	124
  2636  0075D7  76                 	db	118	;'v'
  2637  0075D8  73                 	db	115	;'s'
  2638  0075D9  63                 	db	99	;'c'
  2639  0075DA  70                 	db	112	;'p'
  2640  0075DB  7C                 	db	124
  2641  0075DC  73                 	db	115	;'s'
  2642  0075DD  6C                 	db	108	;'l'
  2643  0075DE  63                 	db	99	;'c'
  2644  0075DF  61                 	db	97	;'a'
  2645  0075E0  6E                 	db	110	;'n'
  2646  0075E1  0D                 	db	13
  2647  0075E2  0A                 	db	10
  2648  0075E3  00                 	db	0
  2649  0075E4                     STR_92:
  2650  0075E4  2D                 	db	45
  2651  0075E5  45                 	db	69	;'E'
  2652  0075E6  52                 	db	82	;'R'
  2653  0075E7  52                 	db	82	;'R'
  2654  0075E8  4F                 	db	79	;'O'
  2655  0075E9  52                 	db	82	;'R'
  2656  0075EA  20                 	db	32
  2657  0075EB  2D                 	db	45
  2658  0075EC  20                 	db	32
  2659  0075ED  66                 	db	102	;'f'
  2660  0075EE  69                 	db	105	;'i'
  2661  0075EF  6C                 	db	108	;'l'
  2662  0075F0  74                 	db	116	;'t'
  2663  0075F1  65                 	db	101	;'e'
  2664  0075F2  72                 	db	114	;'r'
  2665  0075F3  20                 	db	32
  2666  0075F4  66                 	db	102	;'f'
  2667  0075F5  6F                 	db	111	;'o'
  2668  0075F6  72                 	db	114	;'r'
  2669  0075F7  20                 	db	32
  2670  0075F8  74                 	db	116	;'t'
  2671  0075F9  79                 	db	121	;'y'
  2672  0075FA  70                 	db	112	;'p'
  2673  0075FB  65                 	db	101	;'e'
  2674  0075FC  20                 	db	32
  2675  0075FD  69                 	db	105	;'i'
  2676  0075FE  73                 	db	115	;'s'
  2677  0075FF  20                 	db	32
  2678  007600  6D                 	db	109	;'m'
  2679  007601  69                 	db	105	;'i'
  2680  007602  73                 	db	115	;'s'
  2681  007603  73                 	db	115	;'s'
  2682  007604  69                 	db	105	;'i'
  2683  007605  6E                 	db	110	;'n'
  2684  007606  67                 	db	103	;'g'
  2685  007607  0D                 	db	13
  2686  007608  0A                 	db	10
  2687  007609  00                 	db	0
  2688  00760A                     STR_98:
  2689  00760A  2D                 	db	45
  2690  00760B  45                 	db	69	;'E'
  2691  00760C  52                 	db	82	;'R'
  2692  00760D  52                 	db	82	;'R'
  2693  00760E  4F                 	db	79	;'O'
  2694  00760F  52                 	db	82	;'R'
  2695  007610  20                 	db	32
  2696  007611  2D                 	db	45
  2697  007612  20                 	db	32
  2698  007613  4E                 	db	78	;'N'
  2699  007614  6F                 	db	111	;'o'
  2700  007615  20                 	db	32
  2701  007616  6D                 	db	109	;'m'
  2702  007617  61                 	db	97	;'a'
  2703  007618  73                 	db	115	;'s'
  2704  007619  6B                 	db	107	;'k'
  2705  00761A  20                 	db	32
  2706  00761B  6E                 	db	110	;'n'
  2707  00761C  75                 	db	117	;'u'
  2708  00761D  6D                 	db	109	;'m'
  2709  00761E  62                 	db	98	;'b'
  2710  00761F  65                 	db	101	;'e'
  2711  007620  72                 	db	114	;'r'
  2712  007621  20                 	db	32
  2713  007622  73                 	db	115	;'s'
  2714  007623  70                 	db	112	;'p'
  2715  007624  65                 	db	101	;'e'
  2716  007625  63                 	db	99	;'c'
  2717  007626  69                 	db	105	;'i'
  2718  007627  66                 	db	102	;'f'
  2719  007628  69                 	db	105	;'i'
  2720  007629  65                 	db	101	;'e'
  2721  00762A  64                 	db	100	;'d'
  2722  00762B  2E                 	db	46
  2723  00762C  0D                 	db	13
  2724  00762D  0A                 	db	10
  2725  00762E  00                 	db	0
  2726  00762F                     STR_1:
  2727  00762F  0D                 	db	13
  2728  007630  0A                 	db	10
  2729  007631  46                 	db	70	;'F'
  2730  007632  72                 	db	114	;'r'
  2731  007633  61                 	db	97	;'a'
  2732  007634  6E                 	db	110	;'n'
  2733  007635  6B                 	db	107	;'k'
  2734  007636  66                 	db	102	;'f'
  2735  007637  75                 	db	117	;'u'
  2736  007638  72                 	db	114	;'r'
  2737  007639  74                 	db	116	;'t'
  2738  00763A  20                 	db	32
  2739  00763B  52                 	db	82	;'R'
  2740  00763C  53                 	db	83	;'S'
  2741  00763D  2D                 	db	45
  2742  00763E  32                 	db	50	;'2'
  2743  00763F  33                 	db	51	;'3'
  2744  007640  32                 	db	50	;'2'
  2745  007641  20                 	db	32
  2746  007642  43                 	db	67	;'C'
  2747  007643  41                 	db	65	;'A'
  2748  007644  4E                 	db	78	;'N'
  2749  007645  34                 	db	52	;'4'
  2750  007646  56                 	db	86	;'V'
  2751  007647  53                 	db	83	;'S'
  2752  007648  43                 	db	67	;'C'
  2753  007649  50                 	db	80	;'P'
  2754  00764A  20                 	db	32
  2755  00764B  6D                 	db	109	;'m'
  2756  00764C  6F                 	db	111	;'o'
  2757  00764D  64                 	db	100	;'d'
  2758  00764E  75                 	db	117	;'u'
  2759  00764F  6C                 	db	108	;'l'
  2760  007650  65                 	db	101	;'e'
  2761  007651  0D                 	db	13
  2762  007652  0A                 	db	10
  2763  007653  00                 	db	0
  2764  007654                     STR_102:
  2765  007654  2D                 	db	45
  2766  007655  45                 	db	69	;'E'
  2767  007656  52                 	db	82	;'R'
  2768  007657  52                 	db	82	;'R'
  2769  007658  4F                 	db	79	;'O'
  2770  007659  52                 	db	82	;'R'
  2771  00765A  20                 	db	32
  2772  00765B  2D                 	db	45
  2773  00765C  20                 	db	32
  2774  00765D  6D                 	db	109	;'m'
  2775  00765E  61                 	db	97	;'a'
  2776  00765F  73                 	db	115	;'s'
  2777  007660  6B                 	db	107	;'k'
  2778  007661  20                 	db	32
  2779  007662  66                 	db	102	;'f'
  2780  007663  6F                 	db	111	;'o'
  2781  007664  72                 	db	114	;'r'
  2782  007665  20                 	db	32
  2783  007666  63                 	db	99	;'c'
  2784  007667  6C                 	db	108	;'l'
  2785  007668  61                 	db	97	;'a'
  2786  007669  73                 	db	115	;'s'
  2787  00766A  73                 	db	115	;'s'
  2788  00766B  20                 	db	32
  2789  00766C  69                 	db	105	;'i'
  2790  00766D  73                 	db	115	;'s'
  2791  00766E  20                 	db	32
  2792  00766F  6D                 	db	109	;'m'
  2793  007670  69                 	db	105	;'i'
  2794  007671  73                 	db	115	;'s'
  2795  007672  73                 	db	115	;'s'
  2796  007673  69                 	db	105	;'i'
  2797  007674  6E                 	db	110	;'n'
  2798  007675  67                 	db	103	;'g'
  2799  007676  0D                 	db	13
  2800  007677  0A                 	db	10
  2801  007678  00                 	db	0
  2802  007679                     STR_104:
  2803  007679  2D                 	db	45
  2804  00767A  45                 	db	69	;'E'
  2805  00767B  52                 	db	82	;'R'
  2806  00767C  52                 	db	82	;'R'
  2807  00767D  4F                 	db	79	;'O'
  2808  00767E  52                 	db	82	;'R'
  2809  00767F  20                 	db	32
  2810  007680  2D                 	db	45
  2811  007681  20                 	db	32
  2812  007682  6D                 	db	109	;'m'
  2813  007683  61                 	db	97	;'a'
  2814  007684  73                 	db	115	;'s'
  2815  007685  6B                 	db	107	;'k'
  2816  007686  20                 	db	32
  2817  007687  66                 	db	102	;'f'
  2818  007688  6F                 	db	111	;'o'
  2819  007689  72                 	db	114	;'r'
  2820  00768A  20                 	db	32
  2821  00768B  74                 	db	116	;'t'
  2822  00768C  79                 	db	121	;'y'
  2823  00768D  70                 	db	112	;'p'
  2824  00768E  65                 	db	101	;'e'
  2825  00768F  20                 	db	32
  2826  007690  69                 	db	105	;'i'
  2827  007691  73                 	db	115	;'s'
  2828  007692  20                 	db	32
  2829  007693  6D                 	db	109	;'m'
  2830  007694  69                 	db	105	;'i'
  2831  007695  73                 	db	115	;'s'
  2832  007696  73                 	db	115	;'s'
  2833  007697  69                 	db	105	;'i'
  2834  007698  6E                 	db	110	;'n'
  2835  007699  67                 	db	103	;'g'
  2836  00769A  0D                 	db	13
  2837  00769B  0A                 	db	10
  2838  00769C  00                 	db	0
  2839  00769D                     STR_3:
  2840  00769D  68                 	db	104	;'h'
  2841  00769E  74                 	db	116	;'t'
  2842  00769F  74                 	db	116	;'t'
  2843  0076A0  70                 	db	112	;'p'
  2844  0076A1  3A                 	db	58	;':'
  2845  0076A2  2F                 	db	47
  2846  0076A3  2F                 	db	47
  2847  0076A4  77                 	db	119	;'w'
  2848  0076A5  77                 	db	119	;'w'
  2849  0076A6  77                 	db	119	;'w'
  2850  0076A7  2E                 	db	46
  2851  0076A8  70                 	db	112	;'p'
  2852  0076A9  61                 	db	97	;'a'
  2853  0076AA  72                 	db	114	;'r'
  2854  0076AB  61                 	db	97	;'a'
  2855  0076AC  64                 	db	100	;'d'
  2856  0076AD  69                 	db	105	;'i'
  2857  0076AE  73                 	db	115	;'s'
  2858  0076AF  65                 	db	101	;'e'
  2859  0076B0  6F                 	db	111	;'o'
  2860  0076B1  66                 	db	102	;'f'
  2861  0076B2  74                 	db	116	;'t'
  2862  0076B3  68                 	db	104	;'h'
  2863  0076B4  65                 	db	101	;'e'
  2864  0076B5  66                 	db	102	;'f'
  2865  0076B6  72                 	db	114	;'r'
  2866  0076B7  6F                 	db	111	;'o'
  2867  0076B8  67                 	db	103	;'g'
  2868  0076B9  2E                 	db	46
  2869  0076BA  63                 	db	99	;'c'
  2870  0076BB  6F                 	db	111	;'o'
  2871  0076BC  6D                 	db	109	;'m'
  2872  0076BD  0D                 	db	13
  2873  0076BE  0A                 	db	10
  2874  0076BF  00                 	db	0
  2875  0076C0                     STR_76:
  2876  0076C0  2B                 	db	43
  2877  0076C1  4F                 	db	79	;'O'
  2878  0076C2  4B                 	db	75	;'K'
  2879  0076C3  20                 	db	32
  2880  0076C4  2D                 	db	45
  2881  0076C5  20                 	db	32
  2882  0076C6  56                 	db	86	;'V'
  2883  0076C7  61                 	db	97	;'a'
  2884  0076C8  6C                 	db	108	;'l'
  2885  0076C9  75                 	db	117	;'u'
  2886  0076CA  65                 	db	101	;'e'
  2887  0076CB  20                 	db	32
  2888  0076CC  77                 	db	119	;'w'
  2889  0076CD  72                 	db	114	;'r'
  2890  0076CE  69                 	db	105	;'i'
  2891  0076CF  74                 	db	116	;'t'
  2892  0076D0  74                 	db	116	;'t'
  2893  0076D1  65                 	db	101	;'e'
  2894  0076D2  6E                 	db	110	;'n'
  2895  0076D3  20                 	db	32
  2896  0076D4  73                 	db	115	;'s'
  2897  0076D5  75                 	db	117	;'u'
  2898  0076D6  63                 	db	99	;'c'
  2899  0076D7  63                 	db	99	;'c'
  2900  0076D8  65                 	db	101	;'e'
  2901  0076D9  73                 	db	115	;'s'
  2902  0076DA  73                 	db	115	;'s'
  2903  0076DB  66                 	db	102	;'f'
  2904  0076DC  75                 	db	117	;'u'
  2905  0076DD  6C                 	db	108	;'l'
  2906  0076DE  6C                 	db	108	;'l'
  2907  0076DF  79                 	db	121	;'y'
  2908  0076E0  0D                 	db	13
  2909  0076E1  0A                 	db	10
  2910  0076E2  00                 	db	0
  2911  0076E3                     STR_223:
  2912  0076E3  53                 	db	83	;'S'
  2913  0076E4  45                 	db	69	;'E'
  2914  0076E5  54                 	db	84	;'T'
  2915  0076E6  20                 	db	32
  2916  0076E7  2D                 	db	45
  2917  0076E8  20                 	db	32
  2918  0076E9  50                 	db	80	;'P'
  2919  0076EA  65                 	db	101	;'e'
  2920  0076EB  72                 	db	114	;'r'
  2921  0076EC  73                 	db	115	;'s'
  2922  0076ED  69                 	db	105	;'i'
  2923  0076EE  73                 	db	115	;'s'
  2924  0076EF  74                 	db	116	;'t'
  2925  0076F0  65                 	db	101	;'e'
  2926  0076F1  6E                 	db	110	;'n'
  2927  0076F2  74                 	db	116	;'t'
  2928  0076F3  20                 	db	32
  2929  0076F4  66                 	db	102	;'f'
  2930  0076F5  75                 	db	117	;'u'
  2931  0076F6  6E                 	db	110	;'n'
  2932  0076F7  63                 	db	99	;'c'
  2933  0076F8  74                 	db	116	;'t'
  2934  0076F9  69                 	db	105	;'i'
  2935  0076FA  6F                 	db	111	;'o'
  2936  0076FB  6E                 	db	110	;'n'
  2937  0076FC  61                 	db	97	;'a'
  2938  0076FD  6C                 	db	108	;'l'
  2939  0076FE  69                 	db	105	;'i'
  2940  0076FF  74                 	db	116	;'t'
  2941  007700  79                 	db	121	;'y'
  2942  007701  2E                 	db	46
  2943  007702  0D                 	db	13
  2944  007703  0A                 	db	10
  2945  007704  00                 	db	0
  2946  007705                     STR_61:
  2947  007705  2D                 	db	45
  2948  007706  45                 	db	69	;'E'
  2949  007707  52                 	db	82	;'R'
  2950  007708  52                 	db	82	;'R'
  2951  007709  4F                 	db	79	;'O'
  2952  00770A  52                 	db	82	;'R'
  2953  00770B  20                 	db	32
  2954  00770C  2D                 	db	45
  2955  00770D  20                 	db	32
  2956  00770E  55                 	db	85	;'U'
  2957  00770F  6E                 	db	110	;'n'
  2958  007710  61                 	db	97	;'a'
  2959  007711  62                 	db	98	;'b'
  2960  007712  6C                 	db	108	;'l'
  2961  007713  65                 	db	101	;'e'
  2962  007714  20                 	db	32
  2963  007715  74                 	db	116	;'t'
  2964  007716  6F                 	db	111	;'o'
  2965  007717  20                 	db	32
  2966  007718  72                 	db	114	;'r'
  2967  007719  65                 	db	101	;'e'
  2968  00771A  61                 	db	97	;'a'
  2969  00771B  64                 	db	100	;'d'
  2970  00771C  20                 	db	32
  2971  00771D  72                 	db	114	;'r'
  2972  00771E  65                 	db	101	;'e'
  2973  00771F  67                 	db	103	;'g'
  2974  007720  69                 	db	105	;'i'
  2975  007721  73                 	db	115	;'s'
  2976  007722  74                 	db	116	;'t'
  2977  007723  65                 	db	101	;'e'
  2978  007724  72                 	db	114	;'r'
  2979  007725  20                 	db	32
  2980  007726  00                 	db	0
  2981  007727                     STR_212:
  2982  007727  53                 	db	83	;'S'
  2983  007728  54                 	db	84	;'T'
  2984  007729  41                 	db	65	;'A'
  2985  00772A  54                 	db	84	;'T'
  2986  00772B  20                 	db	32
  2987  00772C  2D                 	db	45
  2988  00772D  20                 	db	32
  2989  00772E  44                 	db	68	;'D'
  2990  00772F  69                 	db	105	;'i'
  2991  007730  73                 	db	115	;'s'
  2992  007731  70                 	db	112	;'p'
  2993  007732  6C                 	db	108	;'l'
  2994  007733  61                 	db	97	;'a'
  2995  007734  79                 	db	121	;'y'
  2996  007735  20                 	db	32
  2997  007736  43                 	db	67	;'C'
  2998  007737  41                 	db	65	;'A'
  2999  007738  4E                 	db	78	;'N'
  3000  007739  20                 	db	32
  3001  00773A  73                 	db	115	;'s'
  3002  00773B  74                 	db	116	;'t'
  3003  00773C  61                 	db	97	;'a'
  3004  00773D  74                 	db	116	;'t'
  3005  00773E  69                 	db	105	;'i'
  3006  00773F  73                 	db	115	;'s'
  3007  007740  74                 	db	116	;'t'
  3008  007741  69                 	db	105	;'i'
  3009  007742  63                 	db	99	;'c'
  3010  007743  73                 	db	115	;'s'
  3011  007744  2E                 	db	46
  3012  007745  0D                 	db	13
  3013  007746  0A                 	db	10
  3014  007747  00                 	db	0
  3015  007748                     STR_37:
  3016  007748  2D                 	db	45
  3017  007749  45                 	db	69	;'E'
  3018  00774A  52                 	db	82	;'R'
  3019  00774B  52                 	db	82	;'R'
  3020  00774C  4F                 	db	79	;'O'
  3021  00774D  52                 	db	82	;'R'
  3022  00774E  20                 	db	32
  3023  00774F  2D                 	db	45
  3024  007750  20                 	db	32
  3025  007751  46                 	db	70	;'F'
  3026  007752  61                 	db	97	;'a'
  3027  007753  69                 	db	105	;'i'
  3028  007754  6C                 	db	108	;'l'
  3029  007755  65                 	db	101	;'e'
  3030  007756  64                 	db	100	;'d'
  3031  007757  20                 	db	32
  3032  007758  74                 	db	116	;'t'
  3033  007759  6F                 	db	111	;'o'
  3034  00775A  20                 	db	32
  3035  00775B  73                 	db	115	;'s'
  3036  00775C  65                 	db	101	;'e'
  3037  00775D  6E                 	db	110	;'n'
  3038  00775E  64                 	db	100	;'d'
  3039  00775F  20                 	db	32
  3040  007760  65                 	db	101	;'e'
  3041  007761  76                 	db	118	;'v'
  3042  007762  65                 	db	101	;'e'
  3043  007763  6E                 	db	110	;'n'
  3044  007764  74                 	db	116	;'t'
  3045  007765  2E                 	db	46
  3046  007766  0D                 	db	13
  3047  007767  0A                 	db	10
  3048  007768  00                 	db	0
  3049  007769                     STR_123:
  3050  007769  2D                 	db	45
  3051  00776A  45                 	db	69	;'E'
  3052  00776B  52                 	db	82	;'R'
  3053  00776C  52                 	db	82	;'R'
  3054  00776D  4F                 	db	79	;'O'
  3055  00776E  52                 	db	82	;'R'
  3056  00776F  20                 	db	32
  3057  007770  2D                 	db	45
  3058  007771  20                 	db	32
  3059  007772  55                 	db	85	;'U'
  3060  007773  6E                 	db	110	;'n'
  3061  007774  6B                 	db	107	;'k'
  3062  007775  6E                 	db	110	;'n'
  3063  007776  6F                 	db	111	;'o'
  3064  007777  77                 	db	119	;'w'
  3065  007778  6E                 	db	110	;'n'
  3066  007779  20                 	db	32
  3067  00777A  27                 	db	39
  3068  00777B  53                 	db	83	;'S'
  3069  00777C  45                 	db	69	;'E'
  3070  00777D  54                 	db	84	;'T'
  3071  00777E  27                 	db	39
  3072  00777F  20                 	db	32
  3073  007780  63                 	db	99	;'c'
  3074  007781  6F                 	db	111	;'o'
  3075  007782  6D                 	db	109	;'m'
  3076  007783  6D                 	db	109	;'m'
  3077  007784  61                 	db	97	;'a'
  3078  007785  6E                 	db	110	;'n'
  3079  007786  64                 	db	100	;'d'
  3080  007787  0D                 	db	13
  3081  007788  0A                 	db	10
  3082  007789  00                 	db	0
  3083  00778A                     STR_77:
  3084  00778A  2D                 	db	45
  3085  00778B  45                 	db	69	;'E'
  3086  00778C  52                 	db	82	;'R'
  3087  00778D  52                 	db	82	;'R'
  3088  00778E  4F                 	db	79	;'O'
  3089  00778F  52                 	db	82	;'R'
  3090  007790  20                 	db	32
  3091  007791  2D                 	db	45
  3092  007792  20                 	db	32
  3093  007793  46                 	db	70	;'F'
  3094  007794  61                 	db	97	;'a'
  3095  007795  69                 	db	105	;'i'
  3096  007796  6C                 	db	108	;'l'
  3097  007797  65                 	db	101	;'e'
  3098  007798  64                 	db	100	;'d'
  3099  007799  20                 	db	32
  3100  00779A  74                 	db	116	;'t'
  3101  00779B  6F                 	db	111	;'o'
  3102  00779C  20                 	db	32
  3103  00779D  77                 	db	119	;'w'
  3104  00779E  72                 	db	114	;'r'
  3105  00779F  69                 	db	105	;'i'
  3106  0077A0  74                 	db	116	;'t'
  3107  0077A1  65                 	db	101	;'e'
  3108  0077A2  20                 	db	32
  3109  0077A3  76                 	db	118	;'v'
  3110  0077A4  61                 	db	97	;'a'
  3111  0077A5  6C                 	db	108	;'l'
  3112  0077A6  75                 	db	117	;'u'
  3113  0077A7  65                 	db	101	;'e'
  3114  0077A8  0D                 	db	13
  3115  0077A9  0A                 	db	10
  3116  0077AA  00                 	db	0
  3117  0077AB                     STR_50:
  3118  0077AB  2D                 	db	45
  3119  0077AC  45                 	db	69	;'E'
  3120  0077AD  52                 	db	82	;'R'
  3121  0077AE  52                 	db	82	;'R'
  3122  0077AF  4F                 	db	79	;'O'
  3123  0077B0  52                 	db	82	;'R'
  3124  0077B1  20                 	db	32
  3125  0077B2  2D                 	db	45
  3126  0077B3  20                 	db	32
  3127  0077B4  4E                 	db	78	;'N'
  3128  0077B5  65                 	db	101	;'e'
  3129  0077B6  65                 	db	101	;'e'
  3130  0077B7  64                 	db	100	;'d'
  3131  0077B8  73                 	db	115	;'s'
  3132  0077B9  20                 	db	32
  3133  0077BA  5B                 	db	91	;'['
  3134  0077BB  70                 	db	112	;'p'
  3135  0077BC  61                 	db	97	;'a'
  3136  0077BD  67                 	db	103	;'g'
  3137  0077BE  65                 	db	101	;'e'
  3138  0077BF  3A                 	db	58	;':'
  3139  0077C0  5D                 	db	93	;']'
  3140  0077C1  72                 	db	114	;'r'
  3141  0077C2  65                 	db	101	;'e'
  3142  0077C3  67                 	db	103	;'g'
  3143  0077C4  69                 	db	105	;'i'
  3144  0077C5  73                 	db	115	;'s'
  3145  0077C6  74                 	db	116	;'t'
  3146  0077C7  65                 	db	101	;'e'
  3147  0077C8  72                 	db	114	;'r'
  3148  0077C9  0D                 	db	13
  3149  0077CA  0A                 	db	10
  3150  0077CB  00                 	db	0
  3151  0077CC                     STR_118:
  3152  0077CC  2B                 	db	43
  3153  0077CD  4F                 	db	79	;'O'
  3154  0077CE  4B                 	db	75	;'K'
  3155  0077CF  20                 	db	32
  3156  0077D0  2D                 	db	45
  3157  0077D1  20                 	db	32
  3158  0077D2  4D                 	db	77	;'M'
  3159  0077D3  6F                 	db	111	;'o'
  3160  0077D4  64                 	db	100	;'d'
  3161  0077D5  65                 	db	101	;'e'
  3162  0077D6  20                 	db	32
  3163  0077D7  69                 	db	105	;'i'
  3164  0077D8  73                 	db	115	;'s'
  3165  0077D9  20                 	db	32
  3166  0077DA  6E                 	db	110	;'n'
  3167  0077DB  6F                 	db	111	;'o'
  3168  0077DC  77                 	db	119	;'w'
  3169  0077DD  20                 	db	32
  3170  0077DE  56                 	db	86	;'V'
  3171  0077DF  53                 	db	83	;'S'
  3172  0077E0  43                 	db	67	;'C'
  3173  0077E1  50                 	db	80	;'P'
  3174  0077E2  20                 	db	32
  3175  0077E3  44                 	db	68	;'D'
  3176  0077E4  72                 	db	114	;'r'
  3177  0077E5  69                 	db	105	;'i'
  3178  0077E6  76                 	db	118	;'v'
  3179  0077E7  65                 	db	101	;'e'
  3180  0077E8  72                 	db	114	;'r'
  3181  0077E9  0D                 	db	13
  3182  0077EA  0A                 	db	10
  3183  0077EB  00                 	db	0
  3184  0077EC                     STR_7:
  3185  0077EC  57                 	db	87	;'W'
  3186  0077ED  69                 	db	105	;'i'
  3187  0077EE  6C                 	db	108	;'l'
  3188  0077EF  6C                 	db	108	;'l'
  3189  0077F0  20                 	db	32
  3190  0077F1  65                 	db	101	;'e'
  3191  0077F2  6E                 	db	110	;'n'
  3192  0077F3  74                 	db	116	;'t'
  3193  0077F4  65                 	db	101	;'e'
  3194  0077F5  72                 	db	114	;'r'
  3195  0077F6  20                 	db	32
  3196  0077F7  62                 	db	98	;'b'
  3197  0077F8  6F                 	db	111	;'o'
  3198  0077F9  6F                 	db	111	;'o'
  3199  0077FA  74                 	db	116	;'t'
  3200  0077FB  6C                 	db	108	;'l'
  3201  0077FC  6F                 	db	111	;'o'
  3202  0077FD  61                 	db	97	;'a'
  3203  0077FE  64                 	db	100	;'d'
  3204  0077FF  65                 	db	101	;'e'
  3205  007800  72                 	db	114	;'r'
  3206  007801  20                 	db	32
  3207  007802  6E                 	db	110	;'n'
  3208  007803  6F                 	db	111	;'o'
  3209  007804  77                 	db	119	;'w'
  3210  007805  2E                 	db	46
  3211  007806  2E                 	db	46
  3212  007807  2E                 	db	46
  3213  007808  0D                 	db	13
  3214  007809  0A                 	db	10
  3215  00780A  00                 	db	0
  3216  00780B                     STR_206:
  3217  00780B  43                 	db	67	;'C'
  3218  00780C  4C                 	db	76	;'L'
  3219  00780D  4F                 	db	79	;'O'
  3220  00780E  53                 	db	83	;'S'
  3221  00780F  45                 	db	69	;'E'
  3222  007810  20                 	db	32
  3223  007811  2D                 	db	45
  3224  007812  20                 	db	32
  3225  007813  43                 	db	67	;'C'
  3226  007814  6C                 	db	108	;'l'
  3227  007815  6F                 	db	111	;'o'
  3228  007816  73                 	db	115	;'s'
  3229  007817  65                 	db	101	;'e'
  3230  007818  20                 	db	32
  3231  007819  43                 	db	67	;'C'
  3232  00781A  41                 	db	65	;'A'
  3233  00781B  4E                 	db	78	;'N'
  3234  00781C  20                 	db	32
  3235  00781D  69                 	db	105	;'i'
  3236  00781E  6E                 	db	110	;'n'
  3237  00781F  74                 	db	116	;'t'
  3238  007820  65                 	db	101	;'e'
  3239  007821  72                 	db	114	;'r'
  3240  007822  66                 	db	102	;'f'
  3241  007823  61                 	db	97	;'a'
  3242  007824  63                 	db	99	;'c'
  3243  007825  65                 	db	101	;'e'
  3244  007826  2E                 	db	46
  3245  007827  0D                 	db	13
  3246  007828  0A                 	db	10
  3247  007829  00                 	db	0
  3248  00782A                     STR_5:
  3249  00782A  54                 	db	84	;'T'
  3250  00782B  65                 	db	101	;'e'
  3251  00782C  6D                 	db	109	;'m'
  3252  00782D  70                 	db	112	;'p'
  3253  00782E  6F                 	db	111	;'o'
  3254  00782F  72                 	db	114	;'r'
  3255  007830  61                 	db	97	;'a'
  3256  007831  72                 	db	114	;'r'
  3257  007832  79                 	db	121	;'y'
  3258  007833  20                 	db	32
  3259  007834  76                 	db	118	;'v'
  3260  007835  65                 	db	101	;'e'
  3261  007836  72                 	db	114	;'r'
  3262  007837  62                 	db	98	;'b'
  3263  007838  6F                 	db	111	;'o'
  3264  007839  73                 	db	115	;'s'
  3265  00783A  65                 	db	101	;'e'
  3266  00783B  20                 	db	32
  3267  00783C  6D                 	db	109	;'m'
  3268  00783D  6F                 	db	111	;'o'
  3269  00783E  64                 	db	100	;'d'
  3270  00783F  65                 	db	101	;'e'
  3271  007840  20                 	db	32
  3272  007841  73                 	db	115	;'s'
  3273  007842  65                 	db	101	;'e'
  3274  007843  74                 	db	116	;'t'
  3275  007844  0D                 	db	13
  3276  007845  0A                 	db	10
  3277  007846  00                 	db	0
  3278  007847                     STR_116:
  3279  007847  2B                 	db	43
  3280  007848  4F                 	db	79	;'O'
  3281  007849  4B                 	db	75	;'K'
  3282  00784A  20                 	db	32
  3283  00784B  2D                 	db	45
  3284  00784C  20                 	db	32
  3285  00784D  4D                 	db	77	;'M'
  3286  00784E  6F                 	db	111	;'o'
  3287  00784F  64                 	db	100	;'d'
  3288  007850  65                 	db	101	;'e'
  3289  007851  20                 	db	32
  3290  007852  69                 	db	105	;'i'
  3291  007853  73                 	db	115	;'s'
  3292  007854  20                 	db	32
  3293  007855  6E                 	db	110	;'n'
  3294  007856  6F                 	db	111	;'o'
  3295  007857  77                 	db	119	;'w'
  3296  007858  20                 	db	32
  3297  007859  76                 	db	118	;'v'
  3298  00785A  65                 	db	101	;'e'
  3299  00785B  72                 	db	114	;'r'
  3300  00785C  62                 	db	98	;'b'
  3301  00785D  6F                 	db	111	;'o'
  3302  00785E  73                 	db	115	;'s'
  3303  00785F  65                 	db	101	;'e'
  3304  007860  0D                 	db	13
  3305  007861  0A                 	db	10
  3306  007862  00                 	db	0
  3307  007863                     STR_201:
  3308  007863  42                 	db	66	;'B'
  3309  007864  4F                 	db	79	;'O'
  3310  007865  4F                 	db	79	;'O'
  3311  007866  54                 	db	84	;'T'
  3312  007867  20                 	db	32
  3313  007868  2D                 	db	45
  3314  007869  20                 	db	32
  3315  00786A  45                 	db	69	;'E'
  3316  00786B  6E                 	db	110	;'n'
  3317  00786C  74                 	db	116	;'t'
  3318  00786D  65                 	db	101	;'e'
  3319  00786E  72                 	db	114	;'r'
  3320  00786F  20                 	db	32
  3321  007870  62                 	db	98	;'b'
  3322  007871  6F                 	db	111	;'o'
  3323  007872  6F                 	db	111	;'o'
  3324  007873  74                 	db	116	;'t'
  3325  007874  6C                 	db	108	;'l'
  3326  007875  6F                 	db	111	;'o'
  3327  007876  61                 	db	97	;'a'
  3328  007877  64                 	db	100	;'d'
  3329  007878  65                 	db	101	;'e'
  3330  007879  72                 	db	114	;'r'
  3331  00787A  2E                 	db	46
  3332  00787B  0D                 	db	13
  3333  00787C  0A                 	db	10
  3334  00787D  00                 	db	0
  3335  00787E                     STR_125:
  3336  00787E  2D                 	db	45
  3337  00787F  45                 	db	69	;'E'
  3338  007880  52                 	db	82	;'R'
  3339  007881  52                 	db	82	;'R'
  3340  007882  4F                 	db	79	;'O'
  3341  007883  52                 	db	82	;'R'
  3342  007884  20                 	db	32
  3343  007885  2D                 	db	45
  3344  007886  20                 	db	32
  3345  007887  55                 	db	85	;'U'
  3346  007888  6E                 	db	110	;'n'
  3347  007889  6B                 	db	107	;'k'
  3348  00788A  6E                 	db	110	;'n'
  3349  00788B  6F                 	db	111	;'o'
  3350  00788C  77                 	db	119	;'w'
  3351  00788D  6E                 	db	110	;'n'
  3352  00788E  20                 	db	32
  3353  00788F  63                 	db	99	;'c'
  3354  007890  6F                 	db	111	;'o'
  3355  007891  6D                 	db	109	;'m'
  3356  007892  6D                 	db	109	;'m'
  3357  007893  61                 	db	97	;'a'
  3358  007894  6E                 	db	110	;'n'
  3359  007895  64                 	db	100	;'d'
  3360  007896  0D                 	db	13
  3361  007897  0A                 	db	10
  3362  007898  00                 	db	0
  3363  007899                     STR_232:
  3364  007899  4E                 	db	78	;'N'
  3365  00789A  6F                 	db	111	;'o'
  3366  00789B  64                 	db	100	;'d'
  3367  00789C  65                 	db	101	;'e'
  3368  00789D  20                 	db	32
  3369  00789E  66                 	db	102	;'f'
  3370  00789F  6F                 	db	111	;'o'
  3371  0078A0  75                 	db	117	;'u'
  3372  0078A1  6E                 	db	110	;'n'
  3373  0078A2  64                 	db	100	;'d'
  3374  0078A3  20                 	db	32
  3375  0078A4  77                 	db	119	;'w'
  3376  0078A5  69                 	db	105	;'i'
  3377  0078A6  74                 	db	116	;'t'
  3378  0078A7  68                 	db	104	;'h'
  3379  0078A8  20                 	db	32
  3380  0078A9  6E                 	db	110	;'n'
  3381  0078AA  6F                 	db	111	;'o'
  3382  0078AB  64                 	db	100	;'d'
  3383  0078AC  65                 	db	101	;'e'
  3384  0078AD  20                 	db	32
  3385  0078AE  69                 	db	105	;'i'
  3386  0078AF  64                 	db	100	;'d'
  3387  0078B0  20                 	db	32
  3388  0078B1  3D                 	db	61	;'='
  3389  0078B2  20                 	db	32
  3390  0078B3  00                 	db	0
  3391  0078B4                     STR_120:
  3392  0078B4  2B                 	db	43
  3393  0078B5  4F                 	db	79	;'O'
  3394  0078B6  4B                 	db	75	;'K'
  3395  0078B7  20                 	db	32
  3396  0078B8  2D                 	db	45
  3397  0078B9  20                 	db	32
  3398  0078BA  4D                 	db	77	;'M'
  3399  0078BB  6F                 	db	111	;'o'
  3400  0078BC  64                 	db	100	;'d'
  3401  0078BD  65                 	db	101	;'e'
  3402  0078BE  20                 	db	32
  3403  0078BF  69                 	db	105	;'i'
  3404  0078C0  73                 	db	115	;'s'
  3405  0078C1  20                 	db	32
  3406  0078C2  6E                 	db	110	;'n'
  3407  0078C3  6F                 	db	111	;'o'
  3408  0078C4  77                 	db	119	;'w'
  3409  0078C5  20                 	db	32
  3410  0078C6  53                 	db	83	;'S'
  3411  0078C7  4C                 	db	76	;'L'
  3412  0078C8  43                 	db	67	;'C'
  3413  0078C9  41                 	db	65	;'A'
  3414  0078CA  4E                 	db	78	;'N'
  3415  0078CB  0D                 	db	13
  3416  0078CC  0A                 	db	10
  3417  0078CD  00                 	db	0
  3418  0078CE                     STR_25:
  3419  0078CE  2B                 	db	43
  3420  0078CF  4F                 	db	79	;'O'
  3421  0078D0  4B                 	db	75	;'K'
  3422  0078D1  20                 	db	32
  3423  0078D2  2D                 	db	45
  3424  0078D3  20                 	db	32
  3425  0078D4  4C                 	db	76	;'L'
  3426  0078D5  69                 	db	105	;'i'
  3427  0078D6  73                 	db	115	;'s'
  3428  0078D7  74                 	db	116	;'t'
  3429  0078D8  65                 	db	101	;'e'
  3430  0078D9  6E                 	db	110	;'n'
  3431  0078DA  20                 	db	32
  3432  0078DB  6F                 	db	111	;'o'
  3433  0078DC  6E                 	db	110	;'n'
  3434  0078DD  6C                 	db	108	;'l'
  3435  0078DE  79                 	db	121	;'y'
  3436  0078DF  20                 	db	32
  3437  0078E0  6D                 	db	109	;'m'
  3438  0078E1  6F                 	db	111	;'o'
  3439  0078E2  64                 	db	100	;'d'
  3440  0078E3  65                 	db	101	;'e'
  3441  0078E4  0D                 	db	13
  3442  0078E5  0A                 	db	10
  3443  0078E6  00                 	db	0
  3444  0078E7                     STR_185:
  3445  0078E7  54                 	db	84	;'T'
  3446  0078E8  72                 	db	114	;'r'
  3447  0078E9  61                 	db	97	;'a'
  3448  0078EA  6E                 	db	110	;'n'
  3449  0078EB  73                 	db	115	;'s'
  3450  0078EC  6D                 	db	109	;'m'
  3451  0078ED  69                 	db	105	;'i'
  3452  0078EE  74                 	db	116	;'t'
  3453  0078EF  20                 	db	32
  3454  0078F0  45                 	db	69	;'E'
  3455  0078F1  72                 	db	114	;'r'
  3456  0078F2  72                 	db	114	;'r'
  3457  0078F3  6F                 	db	111	;'o'
  3458  0078F4  72                 	db	114	;'r'
  3459  0078F5  20                 	db	32
  3460  0078F6  43                 	db	67	;'C'
  3461  0078F7  6F                 	db	111	;'o'
  3462  0078F8  75                 	db	117	;'u'
  3463  0078F9  6E                 	db	110	;'n'
  3464  0078FA  74                 	db	116	;'t'
  3465  0078FB  65                 	db	101	;'e'
  3466  0078FC  72                 	db	114	;'r'
  3467  0078FD  3A                 	db	58	;':'
  3468  0078FE  20                 	db	32
  3469  0078FF  00                 	db	0
  3470  007900                     STR_209:
  3471  007900  54                 	db	84	;'T'
  3472  007901  58                 	db	88	;'X'
  3473  007902  20                 	db	32
  3474  007903  2D                 	db	45
  3475  007904  20                 	db	32
  3476  007905  53                 	db	83	;'S'
  3477  007906  65                 	db	101	;'e'
  3478  007907  6E                 	db	110	;'n'
  3479  007908  64                 	db	100	;'d'
  3480  007909  20                 	db	32
  3481  00790A  43                 	db	67	;'C'
  3482  00790B  41                 	db	65	;'A'
  3483  00790C  4E                 	db	78	;'N'
  3484  00790D  20                 	db	32
  3485  00790E  66                 	db	102	;'f'
  3486  00790F  72                 	db	114	;'r'
  3487  007910  61                 	db	97	;'a'
  3488  007911  6D                 	db	109	;'m'
  3489  007912  65                 	db	101	;'e'
  3490  007913  20                 	db	32
  3491  007914  2E                 	db	46
  3492  007915  0D                 	db	13
  3493  007916  0A                 	db	10
  3494  007917  00                 	db	0
  3495  007918                     STR_219:
  3496  007918  46                 	db	70	;'F'
  3497  007919  49                 	db	73	;'I'
  3498  00791A  4C                 	db	76	;'L'
  3499  00791B  54                 	db	84	;'T'
  3500  00791C  45                 	db	69	;'E'
  3501  00791D  52                 	db	82	;'R'
  3502  00791E  20                 	db	32
  3503  00791F  2D                 	db	45
  3504  007920  20                 	db	32
  3505  007921  53                 	db	83	;'S'
  3506  007922  65                 	db	101	;'e'
  3507  007923  74                 	db	116	;'t'
  3508  007924  20                 	db	32
  3509  007925  66                 	db	102	;'f'
  3510  007926  69                 	db	105	;'i'
  3511  007927  6C                 	db	108	;'l'
  3512  007928  74                 	db	116	;'t'
  3513  007929  65                 	db	101	;'e'
  3514  00792A  72                 	db	114	;'r'
  3515  00792B  20                 	db	32
  3516  00792C  2E                 	db	46
  3517  00792D  0D                 	db	13
  3518  00792E  0A                 	db	10
  3519  00792F  00                 	db	0
  3520  007930                     STR_48:
  3521  007930  2D                 	db	45
  3522  007931  45                 	db	69	;'E'
  3523  007932  52                 	db	82	;'R'
  3524  007933  52                 	db	82	;'R'
  3525  007934  4F                 	db	79	;'O'
  3526  007935  52                 	db	82	;'R'
  3527  007936  20                 	db	32
  3528  007937  2D                 	db	45
  3529  007938  20                 	db	32
  3530  007939  4E                 	db	78	;'N'
  3531  00793A  65                 	db	101	;'e'
  3532  00793B  65                 	db	101	;'e'
  3533  00793C  64                 	db	100	;'d'
  3534  00793D  73                 	db	115	;'s'
  3535  00793E  20                 	db	32
  3536  00793F  6E                 	db	110	;'n'
  3537  007940  6F                 	db	111	;'o'
  3538  007941  64                 	db	100	;'d'
  3539  007942  65                 	db	101	;'e'
  3540  007943  69                 	db	105	;'i'
  3541  007944  64                 	db	100	;'d'
  3542  007945  0D                 	db	13
  3543  007946  0A                 	db	10
  3544  007947  00                 	db	0
  3545  007948                     STR_28:
  3546  007948  2D                 	db	45
  3547  007949  45                 	db	69	;'E'
  3548  00794A  52                 	db	82	;'R'
  3549  00794B  52                 	db	82	;'R'
  3550  00794C  4F                 	db	79	;'O'
  3551  00794D  52                 	db	82	;'R'
  3552  00794E  20                 	db	32
  3553  00794F  2D                 	db	45
  3554  007950  20                 	db	32
  3555  007951  55                 	db	85	;'U'
  3556  007952  6E                 	db	110	;'n'
  3557  007953  6B                 	db	107	;'k'
  3558  007954  6E                 	db	110	;'n'
  3559  007955  6F                 	db	111	;'o'
  3560  007956  77                 	db	119	;'w'
  3561  007957  6E                 	db	110	;'n'
  3562  007958  20                 	db	32
  3563  007959  6D                 	db	109	;'m'
  3564  00795A  6F                 	db	111	;'o'
  3565  00795B  64                 	db	100	;'d'
  3566  00795C  65                 	db	101	;'e'
  3567  00795D  0D                 	db	13
  3568  00795E  0A                 	db	10
  3569  00795F  00                 	db	0
  3570  007960                     STR_75:
  3571  007960  2D                 	db	45
  3572  007961  45                 	db	69	;'E'
  3573  007962  52                 	db	82	;'R'
  3574  007963  52                 	db	82	;'R'
  3575  007964  4F                 	db	79	;'O'
  3576  007965  52                 	db	82	;'R'
  3577  007966  20                 	db	32
  3578  007967  2D                 	db	45
  3579  007968  20                 	db	32
  3580  007969  4E                 	db	78	;'N'
  3581  00796A  65                 	db	101	;'e'
  3582  00796B  65                 	db	101	;'e'
  3583  00796C  64                 	db	100	;'d'
  3584  00796D  20                 	db	32
  3585  00796E  61                 	db	97	;'a'
  3586  00796F  20                 	db	32
  3587  007970  76                 	db	118	;'v'
  3588  007971  61                 	db	97	;'a'
  3589  007972  6C                 	db	108	;'l'
  3590  007973  75                 	db	117	;'u'
  3591  007974  65                 	db	101	;'e'
  3592  007975  0D                 	db	13
  3593  007976  0A                 	db	10
  3594  007977  00                 	db	0
  3595  007978                     STR_192:
  3596  007978  52                 	db	82	;'R'
  3597  007979  65                 	db	101	;'e'
  3598  00797A  63                 	db	99	;'c'
  3599  00797B  65                 	db	101	;'e'
  3600  00797C  69                 	db	105	;'i'
  3601  00797D  76                 	db	118	;'v'
  3602  00797E  65                 	db	101	;'e'
  3603  00797F  20                 	db	32
  3604  007980  45                 	db	69	;'E'
  3605  007981  72                 	db	114	;'r'
  3606  007982  72                 	db	114	;'r'
  3607  007983  6F                 	db	111	;'o'
  3608  007984  72                 	db	114	;'r'
  3609  007985  20                 	db	32
  3610  007986  43                 	db	67	;'C'
  3611  007987  6F                 	db	111	;'o'
  3612  007988  75                 	db	117	;'u'
  3613  007989  6E                 	db	110	;'n'
  3614  00798A  74                 	db	116	;'t'
  3615  00798B  65                 	db	101	;'e'
  3616  00798C  72                 	db	114	;'r'
  3617  00798D  3A                 	db	58	;':'
  3618  00798E  20                 	db	32
  3619  00798F  00                 	db	0
  3620  007990                     STR_177:
  3621  007990  55                 	db	85	;'U'
  3622  007991  41                 	db	65	;'A'
  3623  007992  52                 	db	82	;'R'
  3624  007993  54                 	db	84	;'T'
  3625  007994  20                 	db	32
  3626  007995  52                 	db	82	;'R'
  3627  007996  65                 	db	101	;'e'
  3628  007997  63                 	db	99	;'c'
  3629  007998  65                 	db	101	;'e'
  3630  007999  69                 	db	105	;'i'
  3631  00799A  76                 	db	118	;'v'
  3632  00799B  65                 	db	101	;'e'
  3633  00799C  20                 	db	32
  3634  00799D  6F                 	db	111	;'o'
  3635  00799E  76                 	db	118	;'v'
  3636  00799F  65                 	db	101	;'e'
  3637  0079A0  72                 	db	114	;'r'
  3638  0079A1  72                 	db	114	;'r'
  3639  0079A2  75                 	db	117	;'u'
  3640  0079A3  6E                 	db	110	;'n'
  3641  0079A4  73                 	db	115	;'s'
  3642  0079A5  3A                 	db	58	;':'
  3643  0079A6  20                 	db	32
  3644  0079A7  00                 	db	0
  3645  0079A8                     STR_173:
  3646  0079A8  43                 	db	67	;'C'
  3647  0079A9  41                 	db	65	;'A'
  3648  0079AA  4E                 	db	78	;'N'
  3649  0079AB  20                 	db	32
  3650  0079AC  54                 	db	84	;'T'
  3651  0079AD  72                 	db	114	;'r'
  3652  0079AE  61                 	db	97	;'a'
  3653  0079AF  6E                 	db	110	;'n'
  3654  0079B0  73                 	db	115	;'s'
  3655  0079B1  6D                 	db	109	;'m'
  3656  0079B2  69                 	db	105	;'i'
  3657  0079B3  74                 	db	116	;'t'
  3658  0079B4  20                 	db	32
  3659  0079B5  6F                 	db	111	;'o'
  3660  0079B6  76                 	db	118	;'v'
  3661  0079B7  65                 	db	101	;'e'
  3662  0079B8  72                 	db	114	;'r'
  3663  0079B9  72                 	db	114	;'r'
  3664  0079BA  75                 	db	117	;'u'
  3665  0079BB  6E                 	db	110	;'n'
  3666  0079BC  73                 	db	115	;'s'
  3667  0079BD  3A                 	db	58	;':'
  3668  0079BE  20                 	db	32
  3669  0079BF  00                 	db	0
  3670  0079C0                     STR_211:
  3671  0079C0  52                 	db	82	;'R'
  3672  0079C1  58                 	db	88	;'X'
  3673  0079C2  20                 	db	32
  3674  0079C3  2D                 	db	45
  3675  0079C4  20                 	db	32
  3676  0079C5  52                 	db	82	;'R'
  3677  0079C6  65                 	db	101	;'e'
  3678  0079C7  61                 	db	97	;'a'
  3679  0079C8  64                 	db	100	;'d'
  3680  0079C9  20                 	db	32
  3681  0079CA  43                 	db	67	;'C'
  3682  0079CB  41                 	db	65	;'A'
  3683  0079CC  4E                 	db	78	;'N'
  3684  0079CD  20                 	db	32
  3685  0079CE  66                 	db	102	;'f'
  3686  0079CF  72                 	db	114	;'r'
  3687  0079D0  61                 	db	97	;'a'
  3688  0079D1  6D                 	db	109	;'m'
  3689  0079D2  65                 	db	101	;'e'
  3690  0079D3  2E                 	db	46
  3691  0079D4  0D                 	db	13
  3692  0079D5  0A                 	db	10
  3693  0079D6  00                 	db	0
  3694  0079D7                     STR_169:
  3695  0079D7  43                 	db	67	;'C'
  3696  0079D8  41                 	db	65	;'A'
  3697  0079D9  4E                 	db	78	;'N'
  3698  0079DA  20                 	db	32
  3699  0079DB  52                 	db	82	;'R'
  3700  0079DC  65                 	db	101	;'e'
  3701  0079DD  63                 	db	99	;'c'
  3702  0079DE  65                 	db	101	;'e'
  3703  0079DF  69                 	db	105	;'i'
  3704  0079E0  76                 	db	118	;'v'
  3705  0079E1  65                 	db	101	;'e'
  3706  0079E2  20                 	db	32
  3707  0079E3  6F                 	db	111	;'o'
  3708  0079E4  76                 	db	118	;'v'
  3709  0079E5  65                 	db	101	;'e'
  3710  0079E6  72                 	db	114	;'r'
  3711  0079E7  72                 	db	114	;'r'
  3712  0079E8  75                 	db	117	;'u'
  3713  0079E9  6E                 	db	110	;'n'
  3714  0079EA  73                 	db	115	;'s'
  3715  0079EB  3A                 	db	58	;':'
  3716  0079EC  20                 	db	32
  3717  0079ED  00                 	db	0
  3718  0079EE                     STR_254:
  3719  0079EE  55                 	db	85	;'U'
  3720  0079EF  6E                 	db	110	;'n'
  3721  0079F0  6B                 	db	107	;'k'
  3722  0079F1  6E                 	db	110	;'n'
  3723  0079F2  6F                 	db	111	;'o'
  3724  0079F3  77                 	db	119	;'w'
  3725  0079F4  6E                 	db	110	;'n'
  3726  0079F5  20                 	db	32
  3727  0079F6  28                 	db	40
  3728  0079F7  56                 	db	86	;'V'
  3729  0079F8  65                 	db	101	;'e'
  3730  0079F9  72                 	db	114	;'r'
  3731  0079FA  62                 	db	98	;'b'
  3732  0079FB  6F                 	db	111	;'o'
  3733  0079FC  73                 	db	115	;'s'
  3734  0079FD  65                 	db	101	;'e'
  3735  0079FE  20                 	db	32
  3736  0079FF  75                 	db	117	;'u'
  3737  007A00  73                 	db	115	;'s'
  3738  007A01  65                 	db	101	;'e'
  3739  007A02  64                 	db	100	;'d'
  3740  007A03  29                 	db	41
  3741  007A04  00                 	db	0
  3742  007A05                     STR_24:
  3743  007A05  2B                 	db	43
  3744  007A06  4F                 	db	79	;'O'
  3745  007A07  4B                 	db	75	;'K'
  3746  007A08  20                 	db	32
  3747  007A09  2D                 	db	45
  3748  007A0A  20                 	db	32
  3749  007A0B  4C                 	db	76	;'L'
  3750  007A0C  6F                 	db	111	;'o'
  3751  007A0D  6F                 	db	111	;'o'
  3752  007A0E  70                 	db	112	;'p'
  3753  007A0F  62                 	db	98	;'b'
  3754  007A10  61                 	db	97	;'a'
  3755  007A11  63                 	db	99	;'c'
  3756  007A12  6B                 	db	107	;'k'
  3757  007A13  20                 	db	32
  3758  007A14  6D                 	db	109	;'m'
  3759  007A15  6F                 	db	111	;'o'
  3760  007A16  64                 	db	100	;'d'
  3761  007A17  65                 	db	101	;'e'
  3762  007A18  0D                 	db	13
  3763  007A19  0A                 	db	10
  3764  007A1A  00                 	db	0
  3765  007A1B                     STR_161:
  3766  007A1B  52                 	db	82	;'R'
  3767  007A1C  65                 	db	101	;'e'
  3768  007A1D  63                 	db	99	;'c'
  3769  007A1E  65                 	db	101	;'e'
  3770  007A1F  69                 	db	105	;'i'
  3771  007A20  76                 	db	118	;'v'
  3772  007A21  65                 	db	101	;'e'
  3773  007A22  64                 	db	100	;'d'
  3774  007A23  20                 	db	32
  3775  007A24  43                 	db	67	;'C'
  3776  007A25  41                 	db	65	;'A'
  3777  007A26  4E                 	db	78	;'N'
  3778  007A27  20                 	db	32
  3779  007A28  66                 	db	102	;'f'
  3780  007A29  72                 	db	114	;'r'
  3781  007A2A  61                 	db	97	;'a'
  3782  007A2B  6D                 	db	109	;'m'
  3783  007A2C  65                 	db	101	;'e'
  3784  007A2D  73                 	db	115	;'s'
  3785  007A2E  3A                 	db	58	;':'
  3786  007A2F  20                 	db	32
  3787  007A30  00                 	db	0
  3788  007A31                     STR_165:
  3789  007A31  52                 	db	82	;'R'
  3790  007A32  65                 	db	101	;'e'
  3791  007A33  63                 	db	99	;'c'
  3792  007A34  65                 	db	101	;'e'
  3793  007A35  69                 	db	105	;'i'
  3794  007A36  76                 	db	118	;'v'
  3795  007A37  65                 	db	101	;'e'
  3796  007A38  64                 	db	100	;'d'
  3797  007A39  20                 	db	32
  3798  007A3A  43                 	db	67	;'C'
  3799  007A3B  41                 	db	65	;'A'
  3800  007A3C  4E                 	db	78	;'N'
  3801  007A3D  20                 	db	32
  3802  007A3E  62                 	db	98	;'b'
  3803  007A3F  79                 	db	121	;'y'
  3804  007A40  74                 	db	116	;'t'
  3805  007A41  65                 	db	101	;'e'
  3806  007A42  73                 	db	115	;'s'
  3807  007A43  3A                 	db	58	;':'
  3808  007A44  20                 	db	32
  3809  007A45  00                 	db	0
  3810  007A46                     STR_221:
  3811  007A46  4D                 	db	77	;'M'
  3812  007A47  41                 	db	65	;'A'
  3813  007A48  53                 	db	83	;'S'
  3814  007A49  4B                 	db	75	;'K'
  3815  007A4A  20                 	db	32
  3816  007A4B  2D                 	db	45
  3817  007A4C  20                 	db	32
  3818  007A4D  53                 	db	83	;'S'
  3819  007A4E  65                 	db	101	;'e'
  3820  007A4F  74                 	db	116	;'t'
  3821  007A50  20                 	db	32
  3822  007A51  6D                 	db	109	;'m'
  3823  007A52  61                 	db	97	;'a'
  3824  007A53  73                 	db	115	;'s'
  3825  007A54  6B                 	db	107	;'k'
  3826  007A55  20                 	db	32
  3827  007A56  2E                 	db	46
  3828  007A57  0D                 	db	13
  3829  007A58  0A                 	db	10
  3830  007A59  00                 	db	0
  3831  007A5A                     STR_126:
  3832  007A5A  4A                 	db	74	;'J'
  3833  007A5B  46                 	db	70	;'F'
  3834  007A5C  72                 	db	114	;'r'
  3835  007A5D  61                 	db	97	;'a'
  3836  007A5E  6E                 	db	110	;'n'
  3837  007A5F  6B                 	db	107	;'k'
  3838  007A60  66                 	db	102	;'f'
  3839  007A61  75                 	db	117	;'u'
  3840  007A62  72                 	db	114	;'r'
  3841  007A63  74                 	db	116	;'t'
  3842  007A64  20                 	db	32
  3843  007A65  52                 	db	82	;'R'
  3844  007A66  53                 	db	83	;'S'
  3845  007A67  2D                 	db	45
  3846  007A68  32                 	db	50	;'2'
  3847  007A69  33                 	db	51	;'3'
  3848  007A6A  32                 	db	50	;'2'
  3849  007A6B  0D                 	db	13
  3850  007A6C  0A                 	db	10
  3851  007A6D  00                 	db	0
  3852  007A6E                     STR_26:
  3853  007A6E  2B                 	db	43
  3854  007A6F  4F                 	db	79	;'O'
  3855  007A70  4B                 	db	75	;'K'
  3856  007A71  20                 	db	32
  3857  007A72  2D                 	db	45
  3858  007A73  20                 	db	32
  3859  007A74  43                 	db	67	;'C'
  3860  007A75  6C                 	db	108	;'l'
  3861  007A76  6F                 	db	111	;'o'
  3862  007A77  73                 	db	115	;'s'
  3863  007A78  65                 	db	101	;'e'
  3864  007A79  64                 	db	100	;'d'
  3865  007A7A  20                 	db	32
  3866  007A7B  6D                 	db	109	;'m'
  3867  007A7C  6F                 	db	111	;'o'
  3868  007A7D  64                 	db	100	;'d'
  3869  007A7E  65                 	db	101	;'e'
  3870  007A7F  0D                 	db	13
  3871  007A80  0A                 	db	10
  3872  007A81  00                 	db	0
  3873  007A82                     STR_21:
  3874  007A82  2B                 	db	43
  3875  007A83  4F                 	db	79	;'O'
  3876  007A84  4B                 	db	75	;'K'
  3877  007A85  20                 	db	32
  3878  007A86  2D                 	db	45
  3879  007A87  20                 	db	32
  3880  007A88  4E                 	db	78	;'N'
  3881  007A89  6F                 	db	111	;'o'
  3882  007A8A  72                 	db	114	;'r'
  3883  007A8B  6D                 	db	109	;'m'
  3884  007A8C  61                 	db	97	;'a'
  3885  007A8D  6C                 	db	108	;'l'
  3886  007A8E  20                 	db	32
  3887  007A8F  6D                 	db	109	;'m'
  3888  007A90  6F                 	db	111	;'o'
  3889  007A91  64                 	db	100	;'d'
  3890  007A92  65                 	db	101	;'e'
  3891  007A93  0D                 	db	13
  3892  007A94  0A                 	db	10
  3893  007A95  00                 	db	0
  3894  007A96                     STR_22:
  3895  007A96  2B                 	db	43
  3896  007A97  4F                 	db	79	;'O'
  3897  007A98  4B                 	db	75	;'K'
  3898  007A99  20                 	db	32
  3899  007A9A  2D                 	db	45
  3900  007A9B  20                 	db	32
  3901  007A9C  53                 	db	83	;'S'
  3902  007A9D  69                 	db	105	;'i'
  3903  007A9E  6C                 	db	108	;'l'
  3904  007A9F  65                 	db	101	;'e'
  3905  007AA0  6E                 	db	110	;'n'
  3906  007AA1  74                 	db	116	;'t'
  3907  007AA2  20                 	db	32
  3908  007AA3  6D                 	db	109	;'m'
  3909  007AA4  6F                 	db	111	;'o'
  3910  007AA5  64                 	db	100	;'d'
  3911  007AA6  65                 	db	101	;'e'
  3912  007AA7  0D                 	db	13
  3913  007AA8  0A                 	db	10
  3914  007AA9  00                 	db	0
  3915  007AAA                     STR_79:
  3916  007AAA  49                 	db	73	;'I'
  3917  007AAB  6E                 	db	110	;'n'
  3918  007AAC  66                 	db	102	;'f'
  3919  007AAD  6F                 	db	111	;'o'
  3920  007AAE  20                 	db	32
  3921  007AAF  66                 	db	102	;'f'
  3922  007AB0  6F                 	db	111	;'o'
  3923  007AB1  72                 	db	114	;'r'
  3924  007AB2  20                 	db	32
  3925  007AB3  6E                 	db	110	;'n'
  3926  007AB4  6F                 	db	111	;'o'
  3927  007AB5  64                 	db	100	;'d'
  3928  007AB6  65                 	db	101	;'e'
  3929  007AB7  20                 	db	32
  3930  007AB8  69                 	db	105	;'i'
  3931  007AB9  64                 	db	100	;'d'
  3932  007ABA  20                 	db	32
  3933  007ABB  3D                 	db	61	;'='
  3934  007ABC  20                 	db	32
  3935  007ABD  00                 	db	0
  3936  007ABE                     STR_243:
  3937  007ABE  46                 	db	70	;'F'
  3938  007ABF  69                 	db	105	;'i'
  3939  007AC0  72                 	db	114	;'r'
  3940  007AC1  6D                 	db	109	;'m'
  3941  007AC2  77                 	db	119	;'w'
  3942  007AC3  61                 	db	97	;'a'
  3943  007AC4  72                 	db	114	;'r'
  3944  007AC5  65                 	db	101	;'e'
  3945  007AC6  20                 	db	32
  3946  007AC7  76                 	db	118	;'v'
  3947  007AC8  65                 	db	101	;'e'
  3948  007AC9  72                 	db	114	;'r'
  3949  007ACA  73                 	db	115	;'s'
  3950  007ACB  69                 	db	105	;'i'
  3951  007ACC  6F                 	db	111	;'o'
  3952  007ACD  6E                 	db	110	;'n'
  3953  007ACE  20                 	db	32
  3954  007ACF  3D                 	db	61	;'='
  3955  007AD0  20                 	db	32
  3956  007AD1  00                 	db	0
  3957  007AD2                     STR_23:
  3958  007AD2  2B                 	db	43
  3959  007AD3  4F                 	db	79	;'O'
  3960  007AD4  4B                 	db	75	;'K'
  3961  007AD5  20                 	db	32
  3962  007AD6  2D                 	db	45
  3963  007AD7  20                 	db	32
  3964  007AD8  53                 	db	83	;'S'
  3965  007AD9  6C                 	db	108	;'l'
  3966  007ADA  65                 	db	101	;'e'
  3967  007ADB  65                 	db	101	;'e'
  3968  007ADC  70                 	db	112	;'p'
  3969  007ADD  20                 	db	32
  3970  007ADE  6D                 	db	109	;'m'
  3971  007ADF  6F                 	db	111	;'o'
  3972  007AE0  64                 	db	100	;'d'
  3973  007AE1  65                 	db	101	;'e'
  3974  007AE2  0D                 	db	13
  3975  007AE3  0A                 	db	10
  3976  007AE4  00                 	db	0
  3977  007AE5                     STR_27:
  3978  007AE5  2B                 	db	43
  3979  007AE6  4F                 	db	79	;'O'
  3980  007AE7  4B                 	db	75	;'K'
  3981  007AE8  20                 	db	32
  3982  007AE9  2D                 	db	45
  3983  007AEA  20                 	db	32
  3984  007AEB  42                 	db	66	;'B'
  3985  007AEC  69                 	db	105	;'i'
  3986  007AED  74                 	db	116	;'t'
  3987  007AEE  73                 	db	115	;'s'
  3988  007AEF  20                 	db	32
  3989  007AF0  6D                 	db	109	;'m'
  3990  007AF1  6F                 	db	111	;'o'
  3991  007AF2  64                 	db	100	;'d'
  3992  007AF3  65                 	db	101	;'e'
  3993  007AF4  0D                 	db	13
  3994  007AF5  0A                 	db	10
  3995  007AF6  00                 	db	0
  3996  007AF7                     STR_40:
  3997  007AF7  2B                 	db	43
  3998  007AF8  4F                 	db	79	;'O'
  3999  007AF9  4B                 	db	75	;'K'
  4000  007AFA  20                 	db	32
  4001  007AFB  2D                 	db	45
  4002  007AFC  20                 	db	32
  4003  007AFD  6E                 	db	110	;'n'
  4004  007AFE  6F                 	db	111	;'o'
  4005  007AFF  20                 	db	32
  4006  007B00  65                 	db	101	;'e'
  4007  007B01  76                 	db	118	;'v'
  4008  007B02  65                 	db	101	;'e'
  4009  007B03  6E                 	db	110	;'n'
  4010  007B04  74                 	db	116	;'t'
  4011  007B05  73                 	db	115	;'s'
  4012  007B06  0D                 	db	13
  4013  007B07  0A                 	db	10
  4014  007B08  00                 	db	0
  4015  007B09                     STR_153:
  4016  007B09  53                 	db	83	;'S'
  4017  007B0A  65                 	db	101	;'e'
  4018  007B0B  6E                 	db	110	;'n'
  4019  007B0C  74                 	db	116	;'t'
  4020  007B0D  20                 	db	32
  4021  007B0E  43                 	db	67	;'C'
  4022  007B0F  41                 	db	65	;'A'
  4023  007B10  4E                 	db	78	;'N'
  4024  007B11  20                 	db	32
  4025  007B12  66                 	db	102	;'f'
  4026  007B13  72                 	db	114	;'r'
  4027  007B14  61                 	db	97	;'a'
  4028  007B15  6D                 	db	109	;'m'
  4029  007B16  65                 	db	101	;'e'
  4030  007B17  73                 	db	115	;'s'
  4031  007B18  3A                 	db	58	;':'
  4032  007B19  20                 	db	32
  4033  007B1A  00                 	db	0
  4034  007B1B                     STR_256:
  4035  007B1B  30                 	db	48	;'0'
  4036  007B1C  31                 	db	49	;'1'
  4037  007B1D  32                 	db	50	;'2'
  4038  007B1E  33                 	db	51	;'3'
  4039  007B1F  34                 	db	52	;'4'
  4040  007B20  35                 	db	53	;'5'
  4041  007B21  36                 	db	54	;'6'
  4042  007B22  37                 	db	55	;'7'
  4043  007B23  38                 	db	56	;'8'
  4044  007B24  39                 	db	57	;'9'
  4045  007B25  41                 	db	65	;'A'
  4046  007B26  42                 	db	66	;'B'
  4047  007B27  43                 	db	67	;'C'
  4048  007B28  44                 	db	68	;'D'
  4049  007B29  45                 	db	69	;'E'
  4050  007B2A  46                 	db	70	;'F'
  4051  007B2B  00                 	db	0
  4052  007B2C                     STR_257:
  4053  007B2C  30                 	db	48	;'0'
  4054  007B2D  31                 	db	49	;'1'
  4055  007B2E  32                 	db	50	;'2'
  4056  007B2F  33                 	db	51	;'3'
  4057  007B30  34                 	db	52	;'4'
  4058  007B31  35                 	db	53	;'5'
  4059  007B32  36                 	db	54	;'6'
  4060  007B33  37                 	db	55	;'7'
  4061  007B34  38                 	db	56	;'8'
  4062  007B35  39                 	db	57	;'9'
  4063  007B36  61                 	db	97	;'a'
  4064  007B37  62                 	db	98	;'b'
  4065  007B38  63                 	db	99	;'c'
  4066  007B39  64                 	db	100	;'d'
  4067  007B3A  65                 	db	101	;'e'
  4068  007B3B  66                 	db	102	;'f'
  4069  007B3C  00                 	db	0
  4070  007B3D                     STR_157:
  4071  007B3D  53                 	db	83	;'S'
  4072  007B3E  65                 	db	101	;'e'
  4073  007B3F  6E                 	db	110	;'n'
  4074  007B40  74                 	db	116	;'t'
  4075  007B41  20                 	db	32
  4076  007B42  43                 	db	67	;'C'
  4077  007B43  41                 	db	65	;'A'
  4078  007B44  4E                 	db	78	;'N'
  4079  007B45  20                 	db	32
  4080  007B46  62                 	db	98	;'b'
  4081  007B47  79                 	db	121	;'y'
  4082  007B48  74                 	db	116	;'t'
  4083  007B49  65                 	db	101	;'e'
  4084  007B4A  73                 	db	115	;'s'
  4085  007B4B  3A                 	db	58	;':'
  4086  007B4C  20                 	db	32
  4087  007B4D  00                 	db	0
  4088  007B4E                     STR_235:
  4089  007B4E  20                 	db	32
  4090  007B4F  6E                 	db	110	;'n'
  4091  007B50  6F                 	db	111	;'o'
  4092  007B51  64                 	db	100	;'d'
  4093  007B52  65                 	db	101	;'e'
  4094  007B53  73                 	db	115	;'s'
  4095  007B54  20                 	db	32
  4096  007B55  66                 	db	102	;'f'
  4097  007B56  6F                 	db	111	;'o'
  4098  007B57  75                 	db	117	;'u'
  4099  007B58  6E                 	db	110	;'n'
  4100  007B59  64                 	db	100	;'d'
  4101  007B5A  0D                 	db	13
  4102  007B5B  0A                 	db	10
  4103  007B5C  00                 	db	0
  4104  007B5D                     STR_52:
  4105  007B5D  56                 	db	86	;'V'
  4106  007B5E  61                 	db	97	;'a'
  4107  007B5F  6C                 	db	108	;'l'
  4108  007B60  75                 	db	117	;'u'
  4109  007B61  65                 	db	101	;'e'
  4110  007B62  20                 	db	32
  4111  007B63  66                 	db	102	;'f'
  4112  007B64  6F                 	db	111	;'o'
  4113  007B65  72                 	db	114	;'r'
  4114  007B66  20                 	db	32
  4115  007B67  72                 	db	114	;'r'
  4116  007B68  65                 	db	101	;'e'
  4117  007B69  67                 	db	103	;'g'
  4118  007B6A  20                 	db	32
  4119  007B6B  00                 	db	0
  4120  007B6C                     STR_241:
  4121  007B6C  4D                 	db	77	;'M'
  4122  007B6D  44                 	db	68	;'D'
  4123  007B6E  46                 	db	70	;'F'
  4124  007B6F  20                 	db	32
  4125  007B70  3D                 	db	61	;'='
  4126  007B71  20                 	db	32
  4127  007B72  68                 	db	104	;'h'
  4128  007B73  74                 	db	116	;'t'
  4129  007B74  74                 	db	116	;'t'
  4130  007B75  70                 	db	112	;'p'
  4131  007B76  3A                 	db	58	;':'
  4132  007B77  2F                 	db	47
  4133  007B78  2F                 	db	47
  4134  007B79  00                 	db	0
  4135  007B7A                     STR_251:
  4136  007B7A  56                 	db	86	;'V'
  4137  007B7B  53                 	db	83	;'S'
  4138  007B7C  43                 	db	67	;'C'
  4139  007B7D  50                 	db	80	;'P'
  4140  007B7E  20                 	db	32
  4141  007B7F  44                 	db	68	;'D'
  4142  007B80  72                 	db	114	;'r'
  4143  007B81  69                 	db	105	;'i'
  4144  007B82  76                 	db	118	;'v'
  4145  007B83  65                 	db	101	;'e'
  4146  007B84  72                 	db	114	;'r'
  4147  007B85  00                 	db	0
  4148  007B86                     STR_112:
  4149  007B86  52                 	db	82	;'R'
  4150  007B87  57                 	db	87	;'W'
  4151  007B88  54                 	db	84	;'T'
  4152  007B89  49                 	db	73	;'I'
  4153  007B8A  4D                 	db	77	;'M'
  4154  007B8B  45                 	db	69	;'E'
  4155  007B8C  4F                 	db	79	;'O'
  4156  007B8D  55                 	db	85	;'U'
  4157  007B8E  54                 	db	84	;'T'
  4158  007B8F  20                 	db	32
  4159  007B90  00                 	db	0
  4160  007B91                     STR_151:
  4161  007B91  2C                 	db	44
  4162  007B92  44                 	db	68	;'D'
  4163  007B93  61                 	db	97	;'a'
  4164  007B94  74                 	db	116	;'t'
  4165  007B95  61                 	db	97	;'a'
  4166  007B96  3D                 	db	61	;'='
  4167  007B97  6E                 	db	110	;'n'
  4168  007B98  6F                 	db	111	;'o'
  4169  007B99  6E                 	db	110	;'n'
  4170  007B9A  65                 	db	101	;'e'
  4171  007B9B  00                 	db	0
  4172  007B9C                     STR_247:
  4173  007B9C  56                 	db	86	;'V'
  4174  007B9D  65                 	db	101	;'e'
  4175  007B9E  72                 	db	114	;'r'
  4176  007B9F  73                 	db	115	;'s'
  4177  007BA0  69                 	db	105	;'i'
  4178  007BA1  6F                 	db	111	;'o'
  4179  007BA2  6E                 	db	110	;'n'
  4180  007BA3  3A                 	db	58	;':'
  4181  007BA4  20                 	db	32
  4182  007BA5  00                 	db	0
  4183  007BA6                     STR_253:
  4184  007BA6  56                 	db	86	;'V'
  4185  007BA7  53                 	db	83	;'S'
  4186  007BA8  43                 	db	67	;'C'
  4187  007BA9  50                 	db	80	;'P'
  4188  007BAA  20                 	db	32
  4189  007BAB  4E                 	db	78	;'N'
  4190  007BAC  6F                 	db	111	;'o'
  4191  007BAD  64                 	db	100	;'d'
  4192  007BAE  65                 	db	101	;'e'
  4193  007BAF  00                 	db	0
  4194  007BB0                     STR_252:
  4195  007BB0  53                 	db	83	;'S'
  4196  007BB1  4C                 	db	76	;'L'
  4197  007BB2  20                 	db	32
  4198  007BB3  44                 	db	68	;'D'
  4199  007BB4  72                 	db	114	;'r'
  4200  007BB5  69                 	db	105	;'i'
  4201  007BB6  76                 	db	118	;'v'
  4202  007BB7  65                 	db	101	;'e'
  4203  007BB8  72                 	db	114	;'r'
  4204  007BB9  00                 	db	0
  4205  007BBA                     STR_113:
  4206  007BBA  53                 	db	83	;'S'
  4207  007BBB  54                 	db	84	;'T'
  4208  007BBC  41                 	db	65	;'A'
  4209  007BBD  52                 	db	82	;'R'
  4210  007BBE  54                 	db	84	;'T'
  4211  007BBF  49                 	db	73	;'I'
  4212  007BC0  46                 	db	70	;'F'
  4213  007BC1  20                 	db	32
  4214  007BC2  00                 	db	0
  4215  007BC3                     STR_141:
  4216  007BC3  2C                 	db	44
  4217  007BC4  6E                 	db	110	;'n'
  4218  007BC5  6F                 	db	111	;'o'
  4219  007BC6  64                 	db	100	;'d'
  4220  007BC7  65                 	db	101	;'e'
  4221  007BC8  69                 	db	105	;'i'
  4222  007BC9  64                 	db	100	;'d'
  4223  007BCA  3D                 	db	61	;'='
  4224  007BCB  00                 	db	0
  4225  007BCC                     STR_14:
  4226  007BCC  4C                 	db	76	;'L'
  4227  007BCD  4F                 	db	79	;'O'
  4228  007BCE  4F                 	db	79	;'O'
  4229  007BCF  50                 	db	80	;'P'
  4230  007BD0  42                 	db	66	;'B'
  4231  007BD1  41                 	db	65	;'A'
  4232  007BD2  43                 	db	67	;'C'
  4233  007BD3  4B                 	db	75	;'K'
  4234  007BD4  00                 	db	0
  4235  007BD5                     STR_127:
  4236  007BD5  56                 	db	86	;'V'
  4237  007BD6  31                 	db	49	;'1'
  4238  007BD7  30                 	db	48	;'0'
  4239  007BD8  31                 	db	49	;'1'
  4240  007BD9  31                 	db	49	;'1'
  4241  007BDA  0D                 	db	13
  4242  007BDB  0A                 	db	10
  4243  007BDC  00                 	db	0
  4244  007BDD                     STR_128:
  4245  007BDD  4E                 	db	78	;'N'
  4246  007BDE  31                 	db	49	;'1'
  4247  007BDF  39                 	db	57	;'9'
  4248  007BE0  37                 	db	55	;'7'
  4249  007BE1  37                 	db	55	;'7'
  4250  007BE2  0D                 	db	13
  4251  007BE3  0A                 	db	10
  4252  007BE4  00                 	db	0
  4253  007BE5                     STR_236:
  4254  007BE5  47                 	db	71	;'G'
  4255  007BE6  55                 	db	85	;'U'
  4256  007BE7  49                 	db	73	;'I'
  4257  007BE8  44                 	db	68	;'D'
  4258  007BE9  20                 	db	32
  4259  007BEA  3D                 	db	61	;'='
  4260  007BEB  20                 	db	32
  4261  007BEC  00                 	db	0
  4262  007BED                     STR_121:
  4263  007BED  46                 	db	70	;'F'
  4264  007BEE  49                 	db	73	;'I'
  4265  007BEF  4C                 	db	76	;'L'
  4266  007BF0  54                 	db	84	;'T'
  4267  007BF1  45                 	db	69	;'E'
  4268  007BF2  52                 	db	82	;'R'
  4269  007BF3  20                 	db	32
  4270  007BF4  00                 	db	0
  4271  007BF5                     STR_135:
  4272  007BF5  2C                 	db	44
  4273  007BF6  63                 	db	99	;'c'
  4274  007BF7  6C                 	db	108	;'l'
  4275  007BF8  61                 	db	97	;'a'
  4276  007BF9  73                 	db	115	;'s'
  4277  007BFA  73                 	db	115	;'s'
  4278  007BFB  3D                 	db	61	;'='
  4279  007BFC  00                 	db	0
  4280  007BFD                     STR_115:
  4281  007BFD  56                 	db	86	;'V'
  4282  007BFE  45                 	db	69	;'E'
  4283  007BFF  52                 	db	82	;'R'
  4284  007C00  42                 	db	66	;'B'
  4285  007C01  4F                 	db	79	;'O'
  4286  007C02  53                 	db	83	;'S'
  4287  007C03  45                 	db	69	;'E'
  4288  007C04  00                 	db	0
  4289  007C05                     STR_110:
  4290  007C05  44                 	db	68	;'D'
  4291  007C06  45                 	db	69	;'E'
  4292  007C07  43                 	db	67	;'C'
  4293  007C08  49                 	db	73	;'I'
  4294  007C09  4D                 	db	77	;'M'
  4295  007C0A  41                 	db	65	;'A'
  4296  007C0B  4C                 	db	76	;'L'
  4297  007C0C  00                 	db	0
  4298  007C0D                     STR_18:
  4299  007C0D  56                 	db	86	;'V'
  4300  007C0E  45                 	db	69	;'E'
  4301  007C0F  52                 	db	82	;'R'
  4302  007C10  53                 	db	83	;'S'
  4303  007C11  49                 	db	73	;'I'
  4304  007C12  4F                 	db	79	;'O'
  4305  007C13  4E                 	db	78	;'N'
  4306  007C14  00                 	db	0
  4307  007C15                     STR_170:
  4308  007C15  30                 	db	48	;'0'
  4309  007C16  78                 	db	120	;'x'
  4310  007C17  25                 	db	37
  4311  007C18  30                 	db	48	;'0'
  4312  007C19  38                 	db	56	;'8'
  4313  007C1A  6C                 	db	108	;'l'
  4314  007C1B  58                 	db	88	;'X'
  4315  007C1C  00                 	db	0
  4316  007C1D                     STR_250:
  4317  007C1D  56                 	db	86	;'V'
  4318  007C1E  65                 	db	101	;'e'
  4319  007C1F  72                 	db	114	;'r'
  4320  007C20  62                 	db	98	;'b'
  4321  007C21  6F                 	db	111	;'o'
  4322  007C22  73                 	db	115	;'s'
  4323  007C23  65                 	db	101	;'e'
  4324  007C24  00                 	db	0
  4325  007C25                     STR_249:
  4326  007C25  4D                 	db	77	;'M'
  4327  007C26  6F                 	db	111	;'o'
  4328  007C27  64                 	db	100	;'d'
  4329  007C28  65                 	db	101	;'e'
  4330  007C29  3A                 	db	58	;':'
  4331  007C2A  20                 	db	32
  4332  007C2B  00                 	db	0
  4333  007C2C                     STR_147:
  4334  007C2C  2C                 	db	44
  4335  007C2D  44                 	db	68	;'D'
  4336  007C2E  61                 	db	97	;'a'
  4337  007C2F  74                 	db	116	;'t'
  4338  007C30  61                 	db	97	;'a'
  4339  007C31  3D                 	db	61	;'='
  4340  007C32  00                 	db	0
  4341  007C33                     STR_138:
  4342  007C33  2C                 	db	44
  4343  007C34  74                 	db	116	;'t'
  4344  007C35  79                 	db	121	;'y'
  4345  007C36  70                 	db	112	;'p'
  4346  007C37  65                 	db	101	;'e'
  4347  007C38  3D                 	db	61	;'='
  4348  007C39  00                 	db	0
  4349  007C3A                     STR_144:
  4350  007C3A  2C                 	db	44
  4351  007C3B  73                 	db	115	;'s'
  4352  007C3C  69                 	db	105	;'i'
  4353  007C3D  7A                 	db	122	;'z'
  4354  007C3E  65                 	db	101	;'e'
  4355  007C3F  3D                 	db	61	;'='
  4356  007C40  00                 	db	0
  4357  007C41                     STR_132:
  4358  007C41  3C                 	db	60	;'<'
  4359  007C42  50                 	db	80	;'P'
  4360  007C43  72                 	db	114	;'r'
  4361  007C44  69                 	db	105	;'i'
  4362  007C45  6F                 	db	111	;'o'
  4363  007C46  3D                 	db	61	;'='
  4364  007C47  00                 	db	0
  4365  007C48                     STR_20:
  4366  007C48  49                 	db	73	;'I'
  4367  007C49  46                 	db	70	;'F'
  4368  007C4A  4D                 	db	77	;'M'
  4369  007C4B  4F                 	db	79	;'O'
  4370  007C4C  44                 	db	68	;'D'
  4371  007C4D  45                 	db	69	;'E'
  4372  007C4E  00                 	db	0
  4373  007C4F                     STR_16:
  4374  007C4F  4C                 	db	76	;'L'
  4375  007C50  49                 	db	73	;'I'
  4376  007C51  53                 	db	83	;'S'
  4377  007C52  54                 	db	84	;'T'
  4378  007C53  45                 	db	69	;'E'
  4379  007C54  4E                 	db	78	;'N'
  4380  007C55  00                 	db	0
  4381  007C56                     STR_83:
  4382  007C56  46                 	db	70	;'F'
  4383  007C57  49                 	db	73	;'I'
  4384  007C58  4C                 	db	76	;'L'
  4385  007C59  54                 	db	84	;'T'
  4386  007C5A  45                 	db	69	;'E'
  4387  007C5B  52                 	db	82	;'R'
  4388  007C5C  00                 	db	0
  4389  007C5D                     STR_10:
  4390  007C5D  53                 	db	83	;'S'
  4391  007C5E  49                 	db	73	;'I'
  4392  007C5F  4C                 	db	76	;'L'
  4393  007C60  45                 	db	69	;'E'
  4394  007C61  4E                 	db	78	;'N'
  4395  007C62  54                 	db	84	;'T'
  4396  007C63  00                 	db	0
  4397  007C64                     STR_53:
  4398  007C64  30                 	db	48	;'0'
  4399  007C65  78                 	db	120	;'x'
  4400  007C66  25                 	db	37
  4401  007C67  30                 	db	48	;'0'
  4402  007C68  32                 	db	50	;'2'
  4403  007C69  58                 	db	88	;'X'
  4404  007C6A  00                 	db	0
  4405  007C6B                     STR_136:
  4406  007C6B  30                 	db	48	;'0'
  4407  007C6C  78                 	db	120	;'x'
  4408  007C6D  25                 	db	37
  4409  007C6E  30                 	db	48	;'0'
  4410  007C6F  34                 	db	52	;'4'
  4411  007C70  58                 	db	88	;'X'
  4412  007C71  00                 	db	0
  4413  007C72                     STR_154:
  4414  007C72  30                 	db	48	;'0'
  4415  007C73  78                 	db	120	;'x'
  4416  007C74  25                 	db	37
  4417  007C75  30                 	db	48	;'0'
  4418  007C76  38                 	db	56	;'8'
  4419  007C77  58                 	db	88	;'X'
  4420  007C78  00                 	db	0
  4421  007C79                     STR_129:
  4422  007C79  46                 	db	70	;'F'
  4423  007C7A  30                 	db	48	;'0'
  4424  007C7B  30                 	db	48	;'0'
  4425  007C7C  0D                 	db	13
  4426  007C7D  0A                 	db	10
  4427  007C7E  00                 	db	0
  4428  007C7F                     STR_9:
  4429  007C7F  2B                 	db	43
  4430  007C80  4F                 	db	79	;'O'
  4431  007C81  4B                 	db	75	;'K'
  4432  007C82  0D                 	db	13
  4433  007C83  0A                 	db	10
  4434  007C84  00                 	db	0
  4435  007C85                     STR_114:
  4436  007C85  4D                 	db	77	;'M'
  4437  007C86  4F                 	db	79	;'O'
  4438  007C87  44                 	db	68	;'D'
  4439  007C88  45                 	db	69	;'E'
  4440  007C89  20                 	db	32
  4441  007C8A  00                 	db	0
  4442  007C8B                     STR_122:
  4443  007C8B  4D                 	db	77	;'M'
  4444  007C8C  41                 	db	65	;'A'
  4445  007C8D  53                 	db	83	;'S'
  4446  007C8E  4B                 	db	75	;'K'
  4447  007C8F  20                 	db	32
  4448  007C90  00                 	db	0
  4449  007C91                     STR_12:
  4450  007C91  43                 	db	67	;'C'
  4451  007C92  4C                 	db	76	;'L'
  4452  007C93  4F                 	db	79	;'O'
  4453  007C94  53                 	db	83	;'S'
  4454  007C95  45                 	db	69	;'E'
  4455  007C96  00                 	db	0
  4456  007C97                     STR_119:
  4457  007C97  53                 	db	83	;'S'
  4458  007C98  4C                 	db	76	;'L'
  4459  007C99  43                 	db	67	;'C'
  4460  007C9A  41                 	db	65	;'A'
  4461  007C9B  4E                 	db	78	;'N'
  4462  007C9C  00                 	db	0
  4463  007C9D                     STR_107:
  4464  007C9D  53                 	db	83	;'S'
  4465  007C9E  45                 	db	69	;'E'
  4466  007C9F  54                 	db	84	;'T'
  4467  007CA0  20                 	db	32
  4468  007CA1  00                 	db	0
  4469  007CA2                     STR_45:
  4470  007CA2  46                 	db	70	;'F'
  4471  007CA3  49                 	db	73	;'I'
  4472  007CA4  4E                 	db	78	;'N'
  4473  007CA5  44                 	db	68	;'D'
  4474  007CA6  00                 	db	0
  4475  007CA7                     STR_46:
  4476  007CA7  52                 	db	82	;'R'
  4477  007CA8  52                 	db	82	;'R'
  4478  007CA9  45                 	db	69	;'E'
  4479  007CAA  47                 	db	71	;'G'
  4480  007CAB  00                 	db	0
  4481  007CAC                     STR_69:
  4482  007CAC  57                 	db	87	;'W'
  4483  007CAD  52                 	db	82	;'R'
  4484  007CAE  45                 	db	69	;'E'
  4485  007CAF  47                 	db	71	;'G'
  4486  007CB0  00                 	db	0
  4487  007CB1                     STR_95:
  4488  007CB1  4D                 	db	77	;'M'
  4489  007CB2  41                 	db	65	;'A'
  4490  007CB3  53                 	db	83	;'S'
  4491  007CB4  4B                 	db	75	;'K'
  4492  007CB5  00                 	db	0
  4493  007CB6                     STR_8:
  4494  007CB6  4F                 	db	79	;'O'
  4495  007CB7  50                 	db	80	;'P'
  4496  007CB8  45                 	db	69	;'E'
  4497  007CB9  4E                 	db	78	;'N'
  4498  007CBA  00                 	db	0
  4499  007CBB                     STR_78:
  4500  007CBB  49                 	db	73	;'I'
  4501  007CBC  4E                 	db	78	;'N'
  4502  007CBD  46                 	db	70	;'F'
  4503  007CBE  4F                 	db	79	;'O'
  4504  007CBF  00                 	db	0
  4505  007CC0                     STR_117:
  4506  007CC0  56                 	db	86	;'V'
  4507  007CC1  53                 	db	83	;'S'
  4508  007CC2  43                 	db	67	;'C'
  4509  007CC3  50                 	db	80	;'P'
  4510  007CC4  00                 	db	0
  4511  007CC5                     STR_43:
  4512  007CC5  48                 	db	72	;'H'
  4513  007CC6  45                 	db	69	;'E'
  4514  007CC7  4C                 	db	76	;'L'
  4515  007CC8  50                 	db	80	;'P'
  4516  007CC9  00                 	db	0
  4517  007CCA                     STR_41:
  4518  007CCA  53                 	db	83	;'S'
  4519  007CCB  54                 	db	84	;'T'
  4520  007CCC  41                 	db	65	;'A'
  4521  007CCD  54                 	db	84	;'T'
  4522  007CCE  00                 	db	0
  4523  007CCF                     STR_6:
  4524  007CCF  42                 	db	66	;'B'
  4525  007CD0  4F                 	db	79	;'O'
  4526  007CD1  4F                 	db	79	;'O'
  4527  007CD2  54                 	db	84	;'T'
  4528  007CD3  00                 	db	0
  4529  007CD4                     STR_152:
  4530  007CD4  3E                 	db	62	;'>'
  4531  007CD5  0D                 	db	13
  4532  007CD6  0A                 	db	10
  4533  007CD7  00                 	db	0
  4534  007CD8                     STR_42:
  4535  007CD8  45                 	db	69	;'E'
  4536  007CD9  52                 	db	82	;'R'
  4537  007CDA  52                 	db	82	;'R'
  4538  007CDB  00                 	db	0
  4539  007CDC                     STR_108:
  4540  007CDC  48                 	db	72	;'H'
  4541  007CDD  45                 	db	69	;'E'
  4542  007CDE  58                 	db	88	;'X'
  4543  007CDF  00                 	db	0
  4544  007CE0                     STR_155:
  4545  007CE0  25                 	db	37
  4546  007CE1  6C                 	db	108	;'l'
  4547  007CE2  75                 	db	117	;'u'
  4548  007CE3  00                 	db	0
  4549  007CE4                     STR_238:
  4550  007CE4  2D                 	db	45
  4551  007CE5  2D                 	db	45
  4552  007CE6  00                 	db	0
  4553  007CE7                     STR_38:
  4554  007CE7  52                 	db	82	;'R'
  4555  007CE8  58                 	db	88	;'X'
  4556  007CE9  00                 	db	0
  4557  007CEA                     STR_29:
  4558  007CEA  54                 	db	84	;'T'
  4559  007CEB  58                 	db	88	;'X'
  4560  007CEC  00                 	db	0
  4561  007CED                     STR_54:
  4562  007CED  25                 	db	37
  4563  007CEE  64                 	db	100	;'d'
  4564  007CEF  00                 	db	0
  4565  007CF0                     STR_131:
  4566  007CF0  07                 	db	7
  4567  007CF1  00                 	db	0
  4568  007CF2                     STR_130:
  4569  007CF2  0D                 	db	13
  4570  007CF3  00                 	db	0
  4571  007CF4                     STR_30:
  4572  007CF4  2C                 	db	44
  4573  007CF5  00                 	db	0
  4574  007CF6                     STR_245:
  4575  007CF6  2E                 	db	46
  4576  007CF7  00                 	db	0
  4577  007CF8                     STR_237:
  4578  007CF8  30                 	db	48	;'0'
  4579  007CF9  00                 	db	0
  4580  007CFA                     STR_239:
  4581  007CFA  3A                 	db	58	;':'
  4582  007CFB  00                 	db	0
  4583  007CFC                     STR_244:
  4584  007CFC  3F                 	db	63	;'?'
  4585  007CFD  00                 	db	0
  4586  007CFE                     __end_of__stringdata:
  4587                           	opt stack 0
  4588                           
  4589                           ; #config settings
  4590  007CFE  00                 	db	0	; dummy byte at the end
  4591  0000                     tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           intcon	equ	0xFF2
  4598                           indf0	equ	0xFEF
  4599                           fsr0h	equ	0xFEA
  4600                           fsr0l	equ	0xFE9
  4601                           wreg	equ	0xFE8
  4602                           indf1	equ	0xFE7
  4603                           postinc1	equ	0xFE6
  4604                           postdec1	equ	0xFE5
  4605                           fsr1h	equ	0xFE2
  4606                           fsr1l	equ	0xFE1
  4607                           indf2	equ	0xFDF
  4608                           postinc2	equ	0xFDE
  4609                           postdec2	equ	0xFDD
  4610                           plusw2	equ	0xFDB
  4611                           fsr2h	equ	0xFDA
  4612                           fsr2l	equ	0xFD9
  4613                           status	equ	0xFD8
  4614                           
  4615                           	psect	nvCOMRAM
  4616  000055                     __pnvCOMRAM:
  4617                           	opt stack 0
  4618  000055                     ___DCDelay:
  4619                           	opt stack 0
  4620  000055                     	ds	1
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           intcon	equ	0xFF2
  4628                           indf0	equ	0xFEF
  4629                           fsr0h	equ	0xFEA
  4630                           fsr0l	equ	0xFE9
  4631                           wreg	equ	0xFE8
  4632                           indf1	equ	0xFE7
  4633                           postinc1	equ	0xFE6
  4634                           postdec1	equ	0xFE5
  4635                           fsr1h	equ	0xFE2
  4636                           fsr1l	equ	0xFE1
  4637                           indf2	equ	0xFDF
  4638                           postinc2	equ	0xFDE
  4639                           postdec2	equ	0xFDD
  4640                           plusw2	equ	0xFDB
  4641                           fsr2h	equ	0xFDA
  4642                           fsr2l	equ	0xFD9
  4643                           status	equ	0xFD8
  4644                           
  4645                           	psect	nvBANK0
  4646  0000F5                     __pnvBANK0:
  4647                           	opt stack 0
  4648  0000F5                     _caps:
  4649                           	opt stack 0
  4650  0000F5                     	ds	2
  4651                           tblptru	equ	0xFF8
  4652                           tblptrh	equ	0xFF7
  4653                           tblptrl	equ	0xFF6
  4654                           tablat	equ	0xFF5
  4655                           prodh	equ	0xFF4
  4656                           prodl	equ	0xFF3
  4657                           intcon	equ	0xFF2
  4658                           indf0	equ	0xFEF
  4659                           fsr0h	equ	0xFEA
  4660                           fsr0l	equ	0xFE9
  4661                           wreg	equ	0xFE8
  4662                           indf1	equ	0xFE7
  4663                           postinc1	equ	0xFE6
  4664                           postdec1	equ	0xFE5
  4665                           fsr1h	equ	0xFE2
  4666                           fsr1l	equ	0xFE1
  4667                           indf2	equ	0xFDF
  4668                           postinc2	equ	0xFDE
  4669                           postdec2	equ	0xFDD
  4670                           plusw2	equ	0xFDB
  4671                           fsr2h	equ	0xFDA
  4672                           fsr2l	equ	0xFD9
  4673                           status	equ	0xFD8
  4674                           
  4675                           	psect	cinit
  4676  001F66                     __pcinit:
  4677                           	opt stack 0
  4678  001F66                     start_initialization:
  4679                           	opt stack 0
  4680  001F66                     __initialization:
  4681                           	opt stack 0
  4682                           
  4683                           ; Clear objects allocated to BIGRAM (494 bytes)
  4684  001F66  EE04  F000         	lfsr	0,__pbssBIGRAM
  4685  001F6A  EE11 F0EE          	lfsr	1,494
  4686  001F6E                     clear_0:
  4687  001F6E  6AEE               	clrf	postinc0,c
  4688  001F70  50E5               	movf	postdec1,w,c
  4689  001F72  50E1               	movf	fsr1l,w,c
  4690  001F74  E1FC               	bnz	clear_0
  4691  001F76  50E2               	movf	fsr1h,w,c
  4692  001F78  E1FA               	bnz	clear_0
  4693                           
  4694                           ; Clear objects allocated to BANK3 (256 bytes)
  4695  001F7A  EE03  F000         	lfsr	0,__pbssBANK3
  4696  001F7E  EE11 F000          	lfsr	1,256
  4697  001F82                     clear_1:
  4698  001F82  6AEE               	clrf	postinc0,c
  4699  001F84  50E5               	movf	postdec1,w,c
  4700  001F86  50E1               	movf	fsr1l,w,c
  4701  001F88  E1FC               	bnz	clear_1
  4702  001F8A  50E2               	movf	fsr1h,w,c
  4703  001F8C  E1FA               	bnz	clear_1
  4704                           
  4705                           ; Clear objects allocated to BANK2 (128 bytes)
  4706  001F8E  EE02  F000         	lfsr	0,__pbssBANK2
  4707  001F92  0E80               	movlw	128
  4708  001F94                     clear_2:
  4709  001F94  6AEE               	clrf	postinc0,c
  4710  001F96  06E8               	decf	wreg,f,c
  4711  001F98  E1FD               	bnz	clear_2
  4712                           
  4713                           ; Clear objects allocated to BANK1 (178 bytes)
  4714  001F9A  EE01  F000         	lfsr	0,__pbssBANK1
  4715  001F9E  0EB2               	movlw	178
  4716  001FA0                     clear_3:
  4717  001FA0  6AEE               	clrf	postinc0,c
  4718  001FA2  06E8               	decf	wreg,f,c
  4719  001FA4  E1FD               	bnz	clear_3
  4720                           
  4721                           ; Clear objects allocated to BANK0 (36 bytes)
  4722  001FA6  EE00  F0D1         	lfsr	0,__pbssBANK0
  4723  001FAA  0E24               	movlw	36
  4724  001FAC                     clear_4:
  4725  001FAC  6AEE               	clrf	postinc0,c
  4726  001FAE  06E8               	decf	wreg,f,c
  4727  001FB0  E1FD               	bnz	clear_4
  4728                           
  4729                           ; Clear objects allocated to COMRAM (42 bytes)
  4730  001FB2  EE00  F001         	lfsr	0,__pbssCOMRAM
  4731  001FB6  0E2A               	movlw	42
  4732  001FB8                     clear_5:
  4733  001FB8  6AEE               	clrf	postinc0,c
  4734  001FBA  06E8               	decf	wreg,f,c
  4735  001FBC  E1FD               	bnz	clear_5
  4736  001FBE                     end_of_initialization:
  4737                           	opt stack 0
  4738  001FBE                     __end_of__initialization:
  4739                           	opt stack 0
  4740  001FBE  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4741  001FC0  6EF8               	movwf	tblptru,c
  4742  001FC2  0100               	movlb	0
  4743  001FC4  EFFF  F01C         	goto	_main	;jump to C main() function
  4744                           tblptru	equ	0xFF8
  4745                           tblptrh	equ	0xFF7
  4746                           tblptrl	equ	0xFF6
  4747                           tablat	equ	0xFF5
  4748                           prodh	equ	0xFF4
  4749                           prodl	equ	0xFF3
  4750                           intcon	equ	0xFF2
  4751                           indf0	equ	0xFEF
  4752                           postinc0	equ	0xFEE
  4753                           fsr0h	equ	0xFEA
  4754                           fsr0l	equ	0xFE9
  4755                           wreg	equ	0xFE8
  4756                           indf1	equ	0xFE7
  4757                           postinc1	equ	0xFE6
  4758                           postdec1	equ	0xFE5
  4759                           fsr1h	equ	0xFE2
  4760                           fsr1l	equ	0xFE1
  4761                           indf2	equ	0xFDF
  4762                           postinc2	equ	0xFDE
  4763                           postdec2	equ	0xFDD
  4764                           plusw2	equ	0xFDB
  4765                           fsr2h	equ	0xFDA
  4766                           fsr2l	equ	0xFD9
  4767                           status	equ	0xFD8
  4768                           
  4769                           	psect	bssCOMRAM
  4770  000001                     __pbssCOMRAM:
  4771                           	opt stack 0
  4772  000001                     _can_transmitOverruns:
  4773                           	opt stack 0
  4774  000001                     	ds	4
  4775  000005                     _uart_receiveOverruns:
  4776                           	opt stack 0
  4777  000005                     	ds	4
  4778  000009                     _uart_transmitOverruns:
  4779                           	opt stack 0
  4780  000009                     	ds	4
  4781  00000D                     _made_table:
  4782                           	opt stack 0
  4783  00000D                     	ds	2
  4784  00000F                     _status_led_cnt:
  4785                           	opt stack 0
  4786  00000F                     	ds	2
  4787  000011                     strtok@sp:
  4788                           	opt stack 0
  4789  000011                     	ds	2
  4790  000013                     _USART_Status:
  4791                           	opt stack 0
  4792  000013                     	ds	1
  4793  000014                     __ECANRxFilterHitInfo:
  4794                           	opt stack 0
  4795  000014                     	ds	1
  4796  000015                     __IT_INT_MASK:
  4797                           	opt stack 0
  4798  000015                     	ds	1
  4799  000016                     __IT_SAVE_BSR:
  4800                           	opt stack 0
  4801  000016                     	ds	1
  4802  000017                     __IT_SAVE_STATUS:
  4803                           	opt stack 0
  4804  000017                     	ds	1
  4805  000018                     __IT_SAVE_WREG:
  4806                           	opt stack 0
  4807  000018                     	ds	1
  4808  000019                     ___DCByte:
  4809                           	opt stack 0
  4810  000019                     	ds	1
  4811  00001A                     _ledFunctionality:
  4812                           	opt stack 0
  4813  00001A                     	ds	1
  4814  00001B                     _canInputFifo:
  4815                           	opt stack 0
  4816  00001B                     	ds	8
  4817  000023                     _serialInputFifo:
  4818                           	opt stack 0
  4819  000023                     	ds	8
  4820                           tblptru	equ	0xFF8
  4821                           tblptrh	equ	0xFF7
  4822                           tblptrl	equ	0xFF6
  4823                           tablat	equ	0xFF5
  4824                           prodh	equ	0xFF4
  4825                           prodl	equ	0xFF3
  4826                           intcon	equ	0xFF2
  4827                           indf0	equ	0xFEF
  4828                           postinc0	equ	0xFEE
  4829                           fsr0h	equ	0xFEA
  4830                           fsr0l	equ	0xFE9
  4831                           wreg	equ	0xFE8
  4832                           indf1	equ	0xFE7
  4833                           postinc1	equ	0xFE6
  4834                           postdec1	equ	0xFE5
  4835                           fsr1h	equ	0xFE2
  4836                           fsr1l	equ	0xFE1
  4837                           indf2	equ	0xFDF
  4838                           postinc2	equ	0xFDE
  4839                           postdec2	equ	0xFDD
  4840                           plusw2	equ	0xFDB
  4841                           fsr2h	equ	0xFDA
  4842                           fsr2l	equ	0xFD9
  4843                           status	equ	0xFD8
  4844                           
  4845                           	psect	bssBANK0
  4846  0000D1                     __pbssBANK0:
  4847                           	opt stack 0
  4848  0000D1                     _can_receiveOverruns:
  4849                           	opt stack 0
  4850  0000D1                     	ds	4
  4851  0000D5                     _cntRxBytes:
  4852                           	opt stack 0
  4853  0000D5                     	ds	4
  4854  0000D9                     _cntRxFrames:
  4855                           	opt stack 0
  4856  0000D9                     	ds	4
  4857  0000DD                     _cntTxBytes:
  4858                           	opt stack 0
  4859  0000DD                     	ds	4
  4860  0000E1                     _cntTxFrames:
  4861                           	opt stack 0
  4862  0000E1                     	ds	4
  4863  0000E5                     _timekeeper:
  4864                           	opt stack 0
  4865  0000E5                     	ds	4
  4866  0000E9                     _timer:
  4867                           	opt stack 0
  4868  0000E9                     	ds	4
  4869  0000ED                     _bDLE:
  4870                           	opt stack 0
  4871  0000ED                     	ds	1
  4872  0000EE                     _bInitiated:
  4873                           	opt stack 0
  4874  0000EE                     	ds	1
  4875  0000EF                     _bOpen:
  4876                           	opt stack 0
  4877  0000EF                     	ds	1
  4878  0000F0                     _canrxcount:
  4879                           	opt stack 0
  4880  0000F0                     	ds	1
  4881  0000F1                     _mode:
  4882                           	opt stack 0
  4883  0000F1                     	ds	1
  4884  0000F2                     _nTimeStamp:
  4885                           	opt stack 0
  4886  0000F2                     	ds	1
  4887  0000F3                     _sequencyno:
  4888                           	opt stack 0
  4889  0000F3                     	ds	1
  4890  0000F4                     _stateVscpDriver:
  4891                           	opt stack 0
  4892  0000F4                     	ds	1
  4893                           tblptru	equ	0xFF8
  4894                           tblptrh	equ	0xFF7
  4895                           tblptrl	equ	0xFF6
  4896                           tablat	equ	0xFF5
  4897                           prodh	equ	0xFF4
  4898                           prodl	equ	0xFF3
  4899                           intcon	equ	0xFF2
  4900                           indf0	equ	0xFEF
  4901                           postinc0	equ	0xFEE
  4902                           fsr0h	equ	0xFEA
  4903                           fsr0l	equ	0xFE9
  4904                           wreg	equ	0xFE8
  4905                           indf1	equ	0xFE7
  4906                           postinc1	equ	0xFE6
  4907                           postdec1	equ	0xFE5
  4908                           fsr1h	equ	0xFE2
  4909                           fsr1l	equ	0xFE1
  4910                           indf2	equ	0xFDF
  4911                           postinc2	equ	0xFDE
  4912                           postdec2	equ	0xFDD
  4913                           plusw2	equ	0xFDB
  4914                           fsr2h	equ	0xFDA
  4915                           fsr2l	equ	0xFD9
  4916                           status	equ	0xFD8
  4917                           
  4918                           	psect	bssBANK1
  4919  000100                     __pbssBANK1:
  4920                           	opt stack 0
  4921  000100                     _bHex:
  4922                           	opt stack 0
  4923  000100                     	ds	1
  4924  000101                     _bSilent:
  4925                           	opt stack 0
  4926  000101                     	ds	1
  4927  000102                     _pos:
  4928                           	opt stack 0
  4929  000102                     	ds	1
  4930  000103                     _rwtimeout:
  4931                           	opt stack 0
  4932  000103                     	ds	1
  4933  000104                     _cmdbuf:
  4934                           	opt stack 0
  4935  000104                     	ds	80
  4936  000154                     _wrkbuf:
  4937                           	opt stack 0
  4938  000154                     	ds	80
  4939  0001A4                     _vscpData:
  4940                           	opt stack 0
  4941  0001A4                     	ds	8
  4942  0001AC                     _vscpClass:
  4943                           	opt stack 0
  4944  0001AC                     	ds	2
  4945  0001AE                     _vscpNodeId:
  4946                           	opt stack 0
  4947  0001AE                     	ds	1
  4948  0001AF                     _vscpPriority:
  4949                           	opt stack 0
  4950  0001AF                     	ds	1
  4951  0001B0                     _vscpSize:
  4952                           	opt stack 0
  4953  0001B0                     	ds	1
  4954  0001B1                     _vscpType:
  4955                           	opt stack 0
  4956  0001B1                     	ds	1
  4957                           tblptru	equ	0xFF8
  4958                           tblptrh	equ	0xFF7
  4959                           tblptrl	equ	0xFF6
  4960                           tablat	equ	0xFF5
  4961                           prodh	equ	0xFF4
  4962                           prodl	equ	0xFF3
  4963                           intcon	equ	0xFF2
  4964                           indf0	equ	0xFEF
  4965                           postinc0	equ	0xFEE
  4966                           fsr0h	equ	0xFEA
  4967                           fsr0l	equ	0xFE9
  4968                           wreg	equ	0xFE8
  4969                           indf1	equ	0xFE7
  4970                           postinc1	equ	0xFE6
  4971                           postdec1	equ	0xFE5
  4972                           fsr1h	equ	0xFE2
  4973                           fsr1l	equ	0xFE1
  4974                           indf2	equ	0xFDF
  4975                           postinc2	equ	0xFDE
  4976                           postdec2	equ	0xFDD
  4977                           plusw2	equ	0xFDB
  4978                           fsr2h	equ	0xFDA
  4979                           fsr2l	equ	0xFD9
  4980                           status	equ	0xFD8
  4981                           
  4982                           	psect	bssBANK2
  4983  000200                     __pbssBANK2:
  4984                           	opt stack 0
  4985  000200                     _inputBuffer:
  4986                           	opt stack 0
  4987  000200                     	ds	128
  4988                           tblptru	equ	0xFF8
  4989                           tblptrh	equ	0xFF7
  4990                           tblptrl	equ	0xFF6
  4991                           tablat	equ	0xFF5
  4992                           prodh	equ	0xFF4
  4993                           prodl	equ	0xFF3
  4994                           intcon	equ	0xFF2
  4995                           indf0	equ	0xFEF
  4996                           postinc0	equ	0xFEE
  4997                           fsr0h	equ	0xFEA
  4998                           fsr0l	equ	0xFE9
  4999                           wreg	equ	0xFE8
  5000                           indf1	equ	0xFE7
  5001                           postinc1	equ	0xFE6
  5002                           postdec1	equ	0xFE5
  5003                           fsr1h	equ	0xFE2
  5004                           fsr1l	equ	0xFE1
  5005                           indf2	equ	0xFDF
  5006                           postinc2	equ	0xFDE
  5007                           postdec2	equ	0xFDD
  5008                           plusw2	equ	0xFDB
  5009                           fsr2h	equ	0xFDA
  5010                           fsr2l	equ	0xFD9
  5011                           status	equ	0xFD8
  5012                           
  5013                           	psect	bssBANK3
  5014  000300                     __pbssBANK3:
  5015                           	opt stack 0
  5016  000300                     _crc8_table:
  5017                           	opt stack 0
  5018  000300                     	ds	256
  5019                           tblptru	equ	0xFF8
  5020                           tblptrh	equ	0xFF7
  5021                           tblptrl	equ	0xFF6
  5022                           tablat	equ	0xFF5
  5023                           prodh	equ	0xFF4
  5024                           prodl	equ	0xFF3
  5025                           intcon	equ	0xFF2
  5026                           indf0	equ	0xFEF
  5027                           postinc0	equ	0xFEE
  5028                           fsr0h	equ	0xFEA
  5029                           fsr0l	equ	0xFE9
  5030                           wreg	equ	0xFE8
  5031                           indf1	equ	0xFE7
  5032                           postinc1	equ	0xFE6
  5033                           postdec1	equ	0xFE5
  5034                           fsr1h	equ	0xFE2
  5035                           fsr1l	equ	0xFE1
  5036                           indf2	equ	0xFDF
  5037                           postinc2	equ	0xFDE
  5038                           postdec2	equ	0xFDD
  5039                           plusw2	equ	0xFDB
  5040                           fsr2h	equ	0xFDA
  5041                           fsr2l	equ	0xFD9
  5042                           status	equ	0xFD8
  5043                           
  5044                           	psect	bssBIGRAM
  5045  000400                     __pbssBIGRAM:
  5046                           	opt stack 0
  5047  000400                     _caninputBuffer:
  5048                           	opt stack 0
  5049  000400                     	ds	494
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           intcon	equ	0xFF2
  5057                           indf0	equ	0xFEF
  5058                           postinc0	equ	0xFEE
  5059                           fsr0h	equ	0xFEA
  5060                           fsr0l	equ	0xFE9
  5061                           wreg	equ	0xFE8
  5062                           indf1	equ	0xFE7
  5063                           postinc1	equ	0xFE6
  5064                           postdec1	equ	0xFE5
  5065                           fsr1h	equ	0xFE2
  5066                           fsr1l	equ	0xFE1
  5067                           indf2	equ	0xFDF
  5068                           postinc2	equ	0xFDE
  5069                           postdec2	equ	0xFDD
  5070                           plusw2	equ	0xFDB
  5071                           fsr2h	equ	0xFDA
  5072                           fsr2l	equ	0xFD9
  5073                           status	equ	0xFD8
  5074                           
  5075                           	psect	cstackBANK2
  5076  000280                     __pcstackBANK2:
  5077                           	opt stack 0
  5078  000280                     doModeVerbose@id:
  5079                           	opt stack 0
  5080                           
  5081                           ; 4 bytes @ 0x0
  5082  000280                     	ds	4
  5083  000284                     doModeVerbose@preg:
  5084                           	opt stack 0
  5085                           
  5086                           ; 2 bytes @ 0x4
  5087  000284                     	ds	2
  5088  000286                     doModeVerbose@preg_1161:
  5089                           	opt stack 0
  5090                           
  5091                           ; 2 bytes @ 0x6
  5092  000286                     	ds	2
  5093  000288                     doModeVerbose@filter_class:
  5094                           	opt stack 0
  5095                           
  5096                           ; 2 bytes @ 0x8
  5097  000288                     	ds	2
  5098  00028A                     doModeVerbose@mask_class:
  5099                           	opt stack 0
  5100                           
  5101                           ; 2 bytes @ 0xA
  5102  00028A                     	ds	2
  5103  00028C                     doModeVerbose@nodeid:
  5104                           	opt stack 0
  5105                           
  5106                           ; 1 bytes @ 0xC
  5107  00028C                     	ds	1
  5108  00028D                     doModeVerbose@nodeid_1153:
  5109                           	opt stack 0
  5110                           
  5111                           ; 1 bytes @ 0xD
  5112  00028D                     	ds	1
  5113  00028E                     doModeVerbose@filter_priority:
  5114                           	opt stack 0
  5115                           
  5116                           ; 1 bytes @ 0xE
  5117  00028E                     	ds	1
  5118  00028F                     doModeVerbose@filter_type:
  5119                           	opt stack 0
  5120                           
  5121                           ; 1 bytes @ 0xF
  5122  00028F                     	ds	1
  5123  000290                     doModeVerbose@filter_nodeid:
  5124                           	opt stack 0
  5125                           
  5126                           ; 1 bytes @ 0x10
  5127  000290                     	ds	1
  5128  000291                     doModeVerbose@mask_priority:
  5129                           	opt stack 0
  5130                           
  5131                           ; 1 bytes @ 0x11
  5132  000291                     	ds	1
  5133  000292                     doModeVerbose@mask_type:
  5134                           	opt stack 0
  5135                           
  5136                           ; 1 bytes @ 0x12
  5137  000292                     	ds	1
  5138  000293                     doModeVerbose@mask_nodeid:
  5139                           	opt stack 0
  5140                           
  5141                           ; 1 bytes @ 0x13
  5142  000293                     	ds	1
  5143  000294                     _doModeVerbose$1121:
  5144                           	opt stack 0
  5145                           
  5146                           ; 2 bytes @ 0x14
  5147  000294                     	ds	2
  5148  000296                     _doModeVerbose$1133:
  5149                           	opt stack 0
  5150                           
  5151                           ; 2 bytes @ 0x16
  5152  000296                     	ds	2
  5153  000298                     _doModeVerbose$1138:
  5154                           	opt stack 0
  5155                           
  5156                           ; 2 bytes @ 0x18
  5157  000298                     	ds	2
  5158  00029A                     _doModeVerbose$1144:
  5159                           	opt stack 0
  5160                           
  5161                           ; 2 bytes @ 0x1A
  5162  00029A                     	ds	2
  5163  00029C                     _doModeVerbose$1148:
  5164                           	opt stack 0
  5165                           
  5166                           ; 2 bytes @ 0x1C
  5167  00029C                     	ds	2
  5168  00029E                     _doModeVerbose$1173:
  5169                           	opt stack 0
  5170                           
  5171                           ; 2 bytes @ 0x1E
  5172  00029E                     	ds	2
  5173  0002A0                     doModeVerbose@rv:
  5174                           	opt stack 0
  5175                           
  5176                           ; 1 bytes @ 0x20
  5177  0002A0                     	ds	1
  5178  0002A1                     doModeVerbose@page_1154:
  5179                           	opt stack 0
  5180                           
  5181                           ; 1 bytes @ 0x21
  5182  0002A1                     	ds	1
  5183  0002A2                     doModeVerbose@reg_1155:
  5184                           	opt stack 0
  5185                           
  5186                           ; 1 bytes @ 0x22
  5187  0002A2                     	ds	1
  5188  0002A3                     doModeVerbose@id_1212:
  5189                           	opt stack 0
  5190                           
  5191                           ; 4 bytes @ 0x23
  5192  0002A3                     	ds	4
  5193  0002A7                     doModeVerbose@filterno:
  5194                           	opt stack 0
  5195                           
  5196                           ; 1 bytes @ 0x27
  5197  0002A7                     	ds	1
  5198  0002A8                     doModeVerbose@maskno:
  5199                           	opt stack 0
  5200                           
  5201                           ; 1 bytes @ 0x28
  5202  0002A8                     	ds	1
  5203  0002A9                     doModeVerbose@value_1156:
  5204                           	opt stack 0
  5205                           
  5206                           ; 1 bytes @ 0x29
  5207  0002A9                     	ds	1
  5208  0002AA                     doModeVerbose@i:
  5209                           	opt stack 0
  5210                           
  5211                           ; 1 bytes @ 0x2A
  5212  0002AA                     	ds	1
  5213  0002AB                     doModeVerbose@count:
  5214                           	opt stack 0
  5215                           
  5216                           ; 1 bytes @ 0x2B
  5217  0002AB                     	ds	1
  5218  0002AC                     doModeVerbose@c:
  5219                           	opt stack 0
  5220                           
  5221                           ; 1 bytes @ 0x2C
  5222  0002AC                     	ds	1
  5223  0002AD                     doModeVerbose@page:
  5224                           	opt stack 0
  5225                           
  5226                           ; 1 bytes @ 0x2D
  5227  0002AD                     	ds	1
  5228  0002AE                     doModeVerbose@reg:
  5229                           	opt stack 0
  5230                           
  5231                           ; 1 bytes @ 0x2E
  5232  0002AE                     	ds	1
  5233  0002AF                     doModeVerbose@nodeid_1168:
  5234                           	opt stack 0
  5235                           
  5236                           ; 1 bytes @ 0x2F
  5237  0002AF                     	ds	1
  5238  0002B0                     doModeVerbose@i_1103:
  5239                           	opt stack 0
  5240                           
  5241                           ; 1 bytes @ 0x30
  5242  0002B0                     	ds	1
  5243  0002B1                     doModeVerbose@value:
  5244                           	opt stack 0
  5245                           
  5246                           ; 1 bytes @ 0x31
  5247  0002B1                     	ds	1
  5248  0002B2                     doModeVerbose@p_1109:
  5249                           	opt stack 0
  5250                           
  5251                           ; 2 bytes @ 0x32
  5252  0002B2                     	ds	2
  5253  0002B4                     doModeVerbose@p_1157:
  5254                           	opt stack 0
  5255                           
  5256                           ; 2 bytes @ 0x34
  5257  0002B4                     	ds	2
  5258  0002B6                     doModeVerbose@ifmode:
  5259                           	opt stack 0
  5260                           
  5261                           ; 1 bytes @ 0x36
  5262  0002B6                     	ds	1
  5263  0002B7                     doModeVerbose@p:
  5264                           	opt stack 0
  5265                           
  5266                           ; 2 bytes @ 0x37
  5267  0002B7                     	ds	2
  5268  0002B9                     doModeVerbose@p_1181:
  5269                           	opt stack 0
  5270                           
  5271                           ; 2 bytes @ 0x39
  5272  0002B9                     	ds	2
  5273  0002BB                     doModeVerbose@p_1200:
  5274                           	opt stack 0
  5275                           
  5276                           ; 2 bytes @ 0x3B
  5277  0002BB                     	ds	2
  5278                           tblptru	equ	0xFF8
  5279                           tblptrh	equ	0xFF7
  5280                           tblptrl	equ	0xFF6
  5281                           tablat	equ	0xFF5
  5282                           prodh	equ	0xFF4
  5283                           prodl	equ	0xFF3
  5284                           intcon	equ	0xFF2
  5285                           indf0	equ	0xFEF
  5286                           postinc0	equ	0xFEE
  5287                           fsr0h	equ	0xFEA
  5288                           fsr0l	equ	0xFE9
  5289                           wreg	equ	0xFE8
  5290                           indf1	equ	0xFE7
  5291                           postinc1	equ	0xFE6
  5292                           postdec1	equ	0xFE5
  5293                           fsr1h	equ	0xFE2
  5294                           fsr1l	equ	0xFE1
  5295                           indf2	equ	0xFDF
  5296                           postinc2	equ	0xFDE
  5297                           postdec2	equ	0xFDD
  5298                           plusw2	equ	0xFDB
  5299                           fsr2h	equ	0xFDA
  5300                           fsr2l	equ	0xFD9
  5301                           status	equ	0xFD8
  5302                           
  5303                           	psect	cstackBANK1
  5304  0001B2                     __pcstackBANK1:
  5305                           	opt stack 0
  5306  0001B2                     ??_doModeVerbose:
  5307                           
  5308                           ; 0 bytes @ 0x0
  5309  0001B2                     	ds	20
  5310                           tblptru	equ	0xFF8
  5311                           tblptrh	equ	0xFF7
  5312                           tblptrl	equ	0xFF6
  5313                           tablat	equ	0xFF5
  5314                           prodh	equ	0xFF4
  5315                           prodl	equ	0xFF3
  5316                           intcon	equ	0xFF2
  5317                           indf0	equ	0xFEF
  5318                           postinc0	equ	0xFEE
  5319                           fsr0h	equ	0xFEA
  5320                           fsr0l	equ	0xFE9
  5321                           wreg	equ	0xFE8
  5322                           indf1	equ	0xFE7
  5323                           postinc1	equ	0xFE6
  5324                           postdec1	equ	0xFE5
  5325                           fsr1h	equ	0xFE2
  5326                           fsr1l	equ	0xFE1
  5327                           indf2	equ	0xFDF
  5328                           postinc2	equ	0xFDE
  5329                           postdec2	equ	0xFDD
  5330                           plusw2	equ	0xFDB
  5331                           fsr2h	equ	0xFDA
  5332                           fsr2l	equ	0xFD9
  5333                           status	equ	0xFD8
  5334                           
  5335                           	psect	cstackBANK0
  5336  000060                     __pcstackBANK0:
  5337                           	opt stack 0
  5338  000060                     ?_WriteTimer0:
  5339                           	opt stack 0
  5340  000060                     ?_fifo_init:
  5341                           	opt stack 0
  5342  000060                     ?_OpenUSART:
  5343                           	opt stack 0
  5344  000060                     ?_writeEEPROM:
  5345                           	opt stack 0
  5346  000060                     ?_setFilter:
  5347                           	opt stack 0
  5348  000060                     ?__CANIDToRegs:
  5349                           	opt stack 0
  5350  000060                     ??_isdigit:
  5351  000060                     ?_readEEPROM:
  5352                           	opt stack 0
  5353  000060                     ?_fifo_read:
  5354                           	opt stack 0
  5355  000060                     ?_memset:
  5356                           	opt stack 0
  5357  000060                     ?_strcpy:
  5358                           	opt stack 0
  5359  000060                     ?_strchr:
  5360                           	opt stack 0
  5361  000060                     ?_strlen:
  5362                           	opt stack 0
  5363  000060                     ?_memcpy:
  5364                           	opt stack 0
  5365  000060                     ?_strcat:
  5366                           	opt stack 0
  5367  000060                     ?___lwdiv:
  5368                           	opt stack 0
  5369  000060                     ?___lwmod:
  5370                           	opt stack 0
  5371  000060                     ?___wmul:
  5372                           	opt stack 0
  5373  000060                     ?___lldiv:
  5374                           	opt stack 0
  5375  000060                     ECANSetOperationMode@mode:
  5376                           	opt stack 0
  5377  000060                     nibbleFromChar@c:
  5378                           	opt stack 0
  5379  000060                     OpenTimer0@config:
  5380                           	opt stack 0
  5381  000060                     WriteUSART@data:
  5382                           	opt stack 0
  5383  000060                     toupper@c:
  5384                           	opt stack 0
  5385  000060                     __CANIDToRegs@ptr:
  5386                           	opt stack 0
  5387  000060                     fifo_init@buf:
  5388                           	opt stack 0
  5389  000060                     fifo_read@buf:
  5390                           	opt stack 0
  5391  000060                     writeEEPROM@address:
  5392                           	opt stack 0
  5393  000060                     readEEPROM@address:
  5394                           	opt stack 0
  5395  000060                     _init_crc8$2075:
  5396                           	opt stack 0
  5397  000060                     WriteTimer0@timer0:
  5398                           	opt stack 0
  5399  000060                     OpenUSART@spbrg:
  5400                           	opt stack 0
  5401  000060                     ___lwdiv@dividend:
  5402                           	opt stack 0
  5403  000060                     ___lwmod@dividend:
  5404                           	opt stack 0
  5405  000060                     memcpy@d1:
  5406                           	opt stack 0
  5407  000060                     memset@p1:
  5408                           	opt stack 0
  5409  000060                     strcat@to:
  5410                           	opt stack 0
  5411  000060                     strchr@ptr:
  5412                           	opt stack 0
  5413  000060                     strcpy@to:
  5414                           	opt stack 0
  5415  000060                     strlen@s:
  5416                           	opt stack 0
  5417  000060                     ___wmul@multiplier:
  5418                           	opt stack 0
  5419  000060                     setFilter@val:
  5420                           	opt stack 0
  5421  000060                     ___lldiv@dividend:
  5422                           	opt stack 0
  5423                           
  5424                           ; 4 bytes @ 0x0
  5425  000060                     	ds	1
  5426  000061                     ?_putsUSART:
  5427                           	opt stack 0
  5428  000061                     ??_printBinary:
  5429  000061                     ?_strichr:
  5430                           	opt stack 0
  5431  000061                     _isdigit$2896:
  5432                           	opt stack 0
  5433  000061                     putsUSART@data:
  5434                           	opt stack 0
  5435  000061                     strichr@ptr:
  5436                           	opt stack 0
  5437                           
  5438                           ; 2 bytes @ 0x1
  5439  000061                     	ds	1
  5440  000062                     writeEEPROM@data:
  5441                           	opt stack 0
  5442  000062                     readEEPROM@data:
  5443                           	opt stack 0
  5444  000062                     OpenUSART@config:
  5445                           	opt stack 0
  5446  000062                     isdigit@c:
  5447                           	opt stack 0
  5448  000062                     fifo_init@size:
  5449                           	opt stack 0
  5450  000062                     fifo_read@nbytes:
  5451                           	opt stack 0
  5452  000062                     init_crc8@j:
  5453                           	opt stack 0
  5454  000062                     WriteTimer0@timer:
  5455                           	opt stack 0
  5456  000062                     ___lwdiv@divisor:
  5457                           	opt stack 0
  5458  000062                     ___lwmod@divisor:
  5459                           	opt stack 0
  5460  000062                     memcpy@s1:
  5461                           	opt stack 0
  5462  000062                     memset@c:
  5463                           	opt stack 0
  5464  000062                     strcat@from:
  5465                           	opt stack 0
  5466  000062                     strchr@chr:
  5467                           	opt stack 0
  5468  000062                     strcpy@from:
  5469                           	opt stack 0
  5470  000062                     strlen@cp:
  5471                           	opt stack 0
  5472  000062                     ___wmul@multiplicand:
  5473                           	opt stack 0
  5474  000062                     __CANIDToRegs@val:
  5475                           	opt stack 0
  5476                           
  5477                           ; 4 bytes @ 0x2
  5478  000062                     	ds	1
  5479  000063                     ??_putsUSART:
  5480  000063                     init_app_eeprom@i:
  5481                           	opt stack 0
  5482  000063                     printBinary@value:
  5483                           	opt stack 0
  5484  000063                     strichr@chr:
  5485                           	opt stack 0
  5486                           
  5487                           ; 2 bytes @ 0x3
  5488  000063                     	ds	1
  5489  000064                     ??_fifo_read:
  5490  000064                     ??_strchr:
  5491  000064                     ??_setFilter:
  5492  000064                     ?_hexStringToBytes:
  5493                           	opt stack 0
  5494  000064                     ?_strnicmp:
  5495                           	opt stack 0
  5496  000064                     fifo_init@f:
  5497                           	opt stack 0
  5498  000064                     init_crc8@crc:
  5499                           	opt stack 0
  5500  000064                     ___lwdiv@counter:
  5501                           	opt stack 0
  5502  000064                     ___lwmod@counter:
  5503                           	opt stack 0
  5504  000064                     printBinary@i:
  5505                           	opt stack 0
  5506  000064                     hexStringToBytes@buf:
  5507                           	opt stack 0
  5508  000064                     memcpy@n:
  5509                           	opt stack 0
  5510  000064                     memset@n:
  5511                           	opt stack 0
  5512  000064                     strcat@cp:
  5513                           	opt stack 0
  5514  000064                     strcpy@cp:
  5515                           	opt stack 0
  5516  000064                     strnicmp@s1:
  5517                           	opt stack 0
  5518  000064                     ___wmul@product:
  5519                           	opt stack 0
  5520  000064                     ___lldiv@divisor:
  5521                           	opt stack 0
  5522                           
  5523                           ; 4 bytes @ 0x4
  5524  000064                     	ds	1
  5525  000065                     init_crc8@i:
  5526                           	opt stack 0
  5527  000065                     ___lwdiv@quotient:
  5528                           	opt stack 0
  5529                           
  5530                           ; 2 bytes @ 0x5
  5531  000065                     	ds	1
  5532  000066                     ?_atoi:
  5533                           	opt stack 0
  5534  000066                     ?_strspn:
  5535                           	opt stack 0
  5536  000066                     ?_strcspn:
  5537                           	opt stack 0
  5538  000066                     __CANIDToRegs@type:
  5539                           	opt stack 0
  5540  000066                     hexStringToBytes@size:
  5541                           	opt stack 0
  5542  000066                     atoi@s:
  5543                           	opt stack 0
  5544  000066                     memcpy@d:
  5545                           	opt stack 0
  5546  000066                     memset@p:
  5547                           	opt stack 0
  5548  000066                     strnicmp@s2:
  5549                           	opt stack 0
  5550  000066                     strcspn@s1:
  5551                           	opt stack 0
  5552  000066                     strspn@s1:
  5553                           	opt stack 0
  5554                           
  5555                           ; 2 bytes @ 0x6
  5556  000066                     	ds	1
  5557  000067                     ??__CANIDToRegs:
  5558  000067                     ?_crc8:
  5559                           	opt stack 0
  5560  000067                     ?_utoa:
  5561                           	opt stack 0
  5562  000067                     crc8@crc:
  5563                           	opt stack 0
  5564  000067                     hexStringToBytes@inhex:
  5565                           	opt stack 0
  5566  000067                     utoa@buf:
  5567                           	opt stack 0
  5568                           
  5569                           ; 2 bytes @ 0x7
  5570  000067                     	ds	1
  5571  000068                     ??_atoi:
  5572  000068                     fifo_read@p:
  5573                           	opt stack 0
  5574  000068                     memcpy@s:
  5575                           	opt stack 0
  5576  000068                     strnicmp@len:
  5577                           	opt stack 0
  5578  000068                     strcspn@s2:
  5579                           	opt stack 0
  5580  000068                     strspn@s2:
  5581                           	opt stack 0
  5582  000068                     ___lldiv@quotient:
  5583                           	opt stack 0
  5584                           
  5585                           ; 4 bytes @ 0x8
  5586  000068                     	ds	1
  5587  000069                     ??_hexStringToBytes:
  5588  000069                     __CANIDToRegs@Value:
  5589                           	opt stack 0
  5590  000069                     crc8@m:
  5591                           	opt stack 0
  5592  000069                     utoa@val:
  5593                           	opt stack 0
  5594                           
  5595                           ; 2 bytes @ 0x9
  5596  000069                     	ds	1
  5597  00006A                     ??_crc8:
  5598  00006A                     ??_strnicmp:
  5599  00006A                     ?_ECANSendMessage:
  5600                           	opt stack 0
  5601  00006A                     setFilter@filter:
  5602                           	opt stack 0
  5603  00006A                     atoi@sign:
  5604                           	opt stack 0
  5605  00006A                     fifo_read@i:
  5606                           	opt stack 0
  5607  00006A                     strcspn@i:
  5608                           	opt stack 0
  5609  00006A                     strspn@i:
  5610                           	opt stack 0
  5611  00006A                     ECANSendMessage@id:
  5612                           	opt stack 0
  5613                           
  5614                           ; 4 bytes @ 0xA
  5615  00006A                     	ds	1
  5616  00006B                     setFilter@sidh:
  5617                           	opt stack 0
  5618  00006B                     atoi@a:
  5619                           	opt stack 0
  5620  00006B                     utoa@base:
  5621                           	opt stack 0
  5622                           
  5623                           ; 2 bytes @ 0xB
  5624  00006B                     	ds	1
  5625  00006C                     ?_sendEscapedUartData:
  5626                           	opt stack 0
  5627  00006C                     ?_calcCRC:
  5628                           	opt stack 0
  5629  00006C                     ?_strtok:
  5630                           	opt stack 0
  5631  00006C                     setFilter@sidl:
  5632                           	opt stack 0
  5633  00006C                     fifo_read@f:
  5634                           	opt stack 0
  5635  00006C                     ___lldiv@counter:
  5636                           	opt stack 0
  5637  00006C                     strnicmp@r:
  5638                           	opt stack 0
  5639  00006C                     sendEscapedUartData@pcrc:
  5640                           	opt stack 0
  5641  00006C                     calcCRC@p:
  5642                           	opt stack 0
  5643  00006C                     hexStringToBytes@len:
  5644                           	opt stack 0
  5645  00006C                     strtok@s1:
  5646                           	opt stack 0
  5647                           
  5648                           ; 2 bytes @ 0xC
  5649  00006C                     	ds	1
  5650  00006D                     ?_getCANFrame:
  5651                           	opt stack 0
  5652  00006D                     ?_stristr:
  5653                           	opt stack 0
  5654  00006D                     ?___llmod:
  5655                           	opt stack 0
  5656  00006D                     setFilter@eidh:
  5657                           	opt stack 0
  5658  00006D                     getCANFrame@pdlc:
  5659                           	opt stack 0
  5660  00006D                     utoa@v:
  5661                           	opt stack 0
  5662  00006D                     stristr@s1:
  5663                           	opt stack 0
  5664  00006D                     ___llmod@dividend:
  5665                           	opt stack 0
  5666                           
  5667                           ; 4 bytes @ 0xD
  5668  00006D                     	ds	1
  5669  00006E                     sendEscapedUartData@c:
  5670                           	opt stack 0
  5671  00006E                     calcCRC@len:
  5672                           	opt stack 0
  5673  00006E                     setFilter@eidl:
  5674                           	opt stack 0
  5675  00006E                     ECANSendMessage@data:
  5676                           	opt stack 0
  5677  00006E                     hexStringToBytes@p:
  5678                           	opt stack 0
  5679  00006E                     strtok@s2:
  5680                           	opt stack 0
  5681                           
  5682                           ; 2 bytes @ 0xE
  5683  00006E                     	ds	1
  5684  00006F                     ?_sendVSCPDriverCommandReply:
  5685                           	opt stack 0
  5686  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5687                           	opt stack 0
  5688  00006F                     sendVSCPDriverAck@crc:
  5689                           	opt stack 0
  5690  00006F                     sendVSCPDriverNack@crc:
  5691                           	opt stack 0
  5692  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5693                           	opt stack 0
  5694  00006F                     sendVSCPModeCapabilities@crc:
  5695                           	opt stack 0
  5696  00006F                     calcCRC@j:
  5697                           	opt stack 0
  5698  00006F                     utoa@c:
  5699                           	opt stack 0
  5700  00006F                     getCANFrame@pdata:
  5701                           	opt stack 0
  5702  00006F                     stristr@s2:
  5703                           	opt stack 0
  5704                           
  5705                           ; 2 bytes @ 0xF
  5706  00006F                     	ds	1
  5707  000070                     ?_itoa:
  5708                           	opt stack 0
  5709  000070                     sendVSCPDriverErrorFrame@crc:
  5710                           	opt stack 0
  5711  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5712                           	opt stack 0
  5713  000070                     calcCRC@crc:
  5714                           	opt stack 0
  5715  000070                     ECANSendMessage@dataLen:
  5716                           	opt stack 0
  5717  000070                     hexStringToBytes@i:
  5718                           	opt stack 0
  5719  000070                     itoa@buf:
  5720                           	opt stack 0
  5721                           
  5722                           ; 2 bytes @ 0x10
  5723  000070                     	ds	1
  5724  000071                     sendVSCPDriverCommandReply@crc:
  5725                           	opt stack 0
  5726  000071                     getCANFrame@pid:
  5727                           	opt stack 0
  5728  000071                     ECANSendMessage@msgFlags:
  5729                           	opt stack 0
  5730  000071                     ___llmod@divisor:
  5731                           	opt stack 0
  5732                           
  5733                           ; 4 bytes @ 0x11
  5734  000071                     	ds	1
  5735  000072                     ??_ECANSendMessage:
  5736  000072                     ?_getVSCPFrame:
  5737                           	opt stack 0
  5738  000072                     getVSCPFrame@pvscpclass:
  5739                           	opt stack 0
  5740  000072                     itoa@val:
  5741                           	opt stack 0
  5742  000072                     receiveSendEventCANAL@data:
  5743                           	opt stack 0
  5744  000072                     receiveSendMultiEventCANAL@data:
  5745                           	opt stack 0
  5746                           
  5747                           ; 8 bytes @ 0x12
  5748  000072                     	ds	1
  5749  000073                     ECANSendMessage@pb:
  5750                           	opt stack 0
  5751                           
  5752                           ; 18 bytes @ 0x13
  5753  000073                     	ds	1
  5754  000074                     getVSCPFrame@pvscptype:
  5755                           	opt stack 0
  5756  000074                     itoa@base:
  5757                           	opt stack 0
  5758                           
  5759                           ; 2 bytes @ 0x14
  5760  000074                     	ds	1
  5761  000075                     ___llmod@counter:
  5762                           	opt stack 0
  5763                           
  5764                           ; 1 bytes @ 0x15
  5765  000075                     	ds	1
  5766  000076                     ?_sprintf:
  5767                           	opt stack 0
  5768  000076                     ?_ultoa:
  5769                           	opt stack 0
  5770  000076                     getVSCPFrame@pNodeId:
  5771                           	opt stack 0
  5772  000076                     sprintf@sp:
  5773                           	opt stack 0
  5774  000076                     ultoa@buf:
  5775                           	opt stack 0
  5776                           
  5777                           ; 2 bytes @ 0x16
  5778  000076                     	ds	2
  5779  000078                     getVSCPFrame@pPriority:
  5780                           	opt stack 0
  5781  000078                     sprintf@f:
  5782                           	opt stack 0
  5783  000078                     ultoa@val:
  5784                           	opt stack 0
  5785  000078                     printFirmwareVersion@wrkbuf:
  5786                           	opt stack 0
  5787                           
  5788                           ; 20 bytes @ 0x18
  5789  000078                     	ds	2
  5790  00007A                     receiveSendEventCANAL@i:
  5791                           	opt stack 0
  5792  00007A                     receiveSendMultiEventCANAL@msgcount:
  5793                           	opt stack 0
  5794  00007A                     getVSCPFrame@pSize:
  5795                           	opt stack 0
  5796                           
  5797                           ; 2 bytes @ 0x1A
  5798  00007A                     	ds	1
  5799  00007B                     receiveSendMultiEventCANAL@i:
  5800                           	opt stack 0
  5801  00007B                     receiveSendEventCANAL@id:
  5802                           	opt stack 0
  5803                           
  5804                           ; 4 bytes @ 0x1B
  5805  00007B                     	ds	1
  5806  00007C                     receiveSendMultiEventCANAL@dlc:
  5807                           	opt stack 0
  5808  00007C                     getVSCPFrame@pData:
  5809                           	opt stack 0
  5810  00007C                     ultoa@base:
  5811                           	opt stack 0
  5812                           
  5813                           ; 2 bytes @ 0x1C
  5814  00007C                     	ds	1
  5815  00007D                     receiveSendMultiEventCANAL@id:
  5816                           	opt stack 0
  5817                           
  5818                           ; 4 bytes @ 0x1D
  5819  00007D                     	ds	1
  5820  00007E                     ??_sprintf:
  5821  00007E                     ??_getVSCPFrame:
  5822  00007E                     ultoa@v:
  5823                           	opt stack 0
  5824                           
  5825                           ; 4 bytes @ 0x1E
  5826  00007E                     	ds	1
  5827  00007F                     receiveSendEventCANAL@dlc:
  5828                           	opt stack 0
  5829                           
  5830                           ; 1 bytes @ 0x1F
  5831  00007F                     	ds	1
  5832  000080                     receiveSendEventCANAL@crc:
  5833                           	opt stack 0
  5834                           
  5835                           ; 1 bytes @ 0x20
  5836  000080                     	ds	1
  5837  000081                     receiveSendMultiEventCANAL@crc:
  5838                           	opt stack 0
  5839  000081                     sprintf@idx:
  5840                           	opt stack 0
  5841                           
  5842                           ; 1 bytes @ 0x21
  5843  000081                     	ds	1
  5844  000082                     receiveSendMultiEventCANAL@pos:
  5845                           	opt stack 0
  5846  000082                     ultoa@c:
  5847                           	opt stack 0
  5848  000082                     _sprintf$2137:
  5849                           	opt stack 0
  5850  000082                     getVSCPFrame@id:
  5851                           	opt stack 0
  5852                           
  5853                           ; 4 bytes @ 0x22
  5854  000082                     	ds	1
  5855  000083                     ??_receiveSendEventSLCAN:
  5856                           
  5857                           ; 0 bytes @ 0x23
  5858  000083                     	ds	1
  5859  000084                     _sprintf$2138:
  5860                           	opt stack 0
  5861                           
  5862                           ; 2 bytes @ 0x24
  5863  000084                     	ds	1
  5864  000085                     ECANSendMessage@mode:
  5865                           	opt stack 0
  5866                           
  5867                           ; 1 bytes @ 0x25
  5868  000085                     	ds	1
  5869  000086                     ECANSendMessage@buffers:
  5870                           	opt stack 0
  5871  000086                     _sprintf$2144:
  5872                           	opt stack 0
  5873  000086                     receiveSendEventSLCAN@id:
  5874                           	opt stack 0
  5875                           
  5876                           ; 4 bytes @ 0x26
  5877  000086                     	ds	1
  5878  000087                     ECANSendMessage@j:
  5879                           	opt stack 0
  5880                           
  5881                           ; 1 bytes @ 0x27
  5882  000087                     	ds	1
  5883  000088                     ECANSendMessage@tempBSEL0:
  5884                           	opt stack 0
  5885  000088                     sprintf@ap:
  5886                           	opt stack 0
  5887                           
  5888                           ; 1 bytes @ 0x28
  5889  000088                     	ds	1
  5890  000089                     ECANSendMessage@tempPtr:
  5891                           	opt stack 0
  5892  000089                     sprintf@prec:
  5893                           	opt stack 0
  5894                           
  5895                           ; 2 bytes @ 0x29
  5896  000089                     	ds	1
  5897  00008A                     receiveSendEventSLCAN@dlc:
  5898                           	opt stack 0
  5899                           
  5900                           ; 1 bytes @ 0x2A
  5901  00008A                     	ds	1
  5902  00008B                     ECANSendMessage@temp:
  5903                           	opt stack 0
  5904  00008B                     receiveSendEventSLCAN@i:
  5905                           	opt stack 0
  5906  00008B                     sprintf@width:
  5907                           	opt stack 0
  5908                           
  5909                           ; 2 bytes @ 0x2B
  5910  00008B                     	ds	1
  5911  00008C                     ECANSendMessage@i:
  5912                           	opt stack 0
  5913                           
  5914                           ; 1 bytes @ 0x2C
  5915  00008C                     	ds	1
  5916  00008D                     ECANSendMessage@ptr:
  5917                           	opt stack 0
  5918  00008D                     sprintf@_val:
  5919                           	opt stack 0
  5920                           
  5921                           ; 4 bytes @ 0x2D
  5922  00008D                     	ds	2
  5923  00008F                     ?_sendCANFrame:
  5924                           	opt stack 0
  5925  00008F                     sendCANFrame@id:
  5926                           	opt stack 0
  5927                           
  5928                           ; 4 bytes @ 0x2F
  5929  00008F                     	ds	2
  5930  000091                     sprintf@c:
  5931                           	opt stack 0
  5932                           
  5933                           ; 1 bytes @ 0x31
  5934  000091                     	ds	1
  5935  000092                     sprintf@flag:
  5936                           	opt stack 0
  5937                           
  5938                           ; 2 bytes @ 0x32
  5939  000092                     	ds	1
  5940  000093                     sendCANFrame@dlc:
  5941                           	opt stack 0
  5942                           
  5943                           ; 1 bytes @ 0x33
  5944  000093                     	ds	1
  5945  000094                     ??_receivePrintEventVerbose:
  5946  000094                     _printStatistics$1359:
  5947                           	opt stack 0
  5948  000094                     _printErrors$1384:
  5949                           	opt stack 0
  5950  000094                     sendCANFrame@pdata:
  5951                           	opt stack 0
  5952                           
  5953                           ; 2 bytes @ 0x34
  5954  000094                     	ds	2
  5955  000096                     ??_doModeSLCAN:
  5956  000096                     ??_receiveVSCPModeCanalMsg:
  5957  000096                     ?_sendVSCPFrame:
  5958                           	opt stack 0
  5959  000096                     _printStatistics$1365:
  5960                           	opt stack 0
  5961  000096                     _printErrors$1390:
  5962                           	opt stack 0
  5963  000096                     sendVSCPFrame@vscpclass:
  5964                           	opt stack 0
  5965                           
  5966                           ; 2 bytes @ 0x36
  5967  000096                     	ds	2
  5968  000098                     sendVSCPFrame@vscptype:
  5969                           	opt stack 0
  5970  000098                     _printStatistics$1371:
  5971                           	opt stack 0
  5972  000098                     _printErrors$1396:
  5973                           	opt stack 0
  5974                           
  5975                           ; 2 bytes @ 0x38
  5976  000098                     	ds	1
  5977  000099                     sendVSCPFrame@nodeid:
  5978                           	opt stack 0
  5979  000099                     _receivePrintEventVerbose$1266:
  5980                           	opt stack 0
  5981                           
  5982                           ; 2 bytes @ 0x39
  5983  000099                     	ds	1
  5984  00009A                     sendVSCPFrame@priority:
  5985                           	opt stack 0
  5986  00009A                     _printStatistics$1377:
  5987                           	opt stack 0
  5988  00009A                     _printErrors$1402:
  5989                           	opt stack 0
  5990                           
  5991                           ; 2 bytes @ 0x3A
  5992  00009A                     	ds	1
  5993  00009B                     sendVSCPFrame@size:
  5994                           	opt stack 0
  5995  00009B                     _receivePrintEventVerbose$1271:
  5996                           	opt stack 0
  5997                           
  5998                           ; 2 bytes @ 0x3B
  5999  00009B                     	ds	1
  6000  00009C                     _printErrors$1408:
  6001                           	opt stack 0
  6002  00009C                     sendVSCPFrame@pData:
  6003                           	opt stack 0
  6004                           
  6005                           ; 2 bytes @ 0x3C
  6006  00009C                     	ds	1
  6007  00009D                     _receivePrintEventVerbose$1276:
  6008                           	opt stack 0
  6009  00009D                     doModeSLCAN@id:
  6010                           	opt stack 0
  6011                           
  6012                           ; 4 bytes @ 0x3D
  6013  00009D                     	ds	1
  6014  00009E                     ??_sendVSCPFrame:
  6015  00009E                     _printErrors$1417:
  6016                           	opt stack 0
  6017                           
  6018                           ; 2 bytes @ 0x3E
  6019  00009E                     	ds	1
  6020  00009F                     _receivePrintEventVerbose$1281:
  6021                           	opt stack 0
  6022                           
  6023                           ; 2 bytes @ 0x3F
  6024  00009F                     	ds	2
  6025  0000A1                     doModeSLCAN@dlc:
  6026                           	opt stack 0
  6027  0000A1                     _receivePrintEventVerbose$1286:
  6028                           	opt stack 0
  6029                           
  6030                           ; 2 bytes @ 0x41
  6031  0000A1                     	ds	1
  6032  0000A2                     doModeSLCAN@c:
  6033                           	opt stack 0
  6034                           
  6035                           ; 1 bytes @ 0x42
  6036  0000A2                     	ds	1
  6037  0000A3                     doModeSLCAN@rv:
  6038                           	opt stack 0
  6039  0000A3                     _receivePrintEventVerbose$1291:
  6040                           	opt stack 0
  6041                           
  6042                           ; 2 bytes @ 0x43
  6043  0000A3                     	ds	2
  6044  0000A5                     receivePrintEventVerbose@i:
  6045                           	opt stack 0
  6046                           
  6047                           ; 1 bytes @ 0x45
  6048  0000A5                     	ds	5
  6049  0000AA                     receiveVSCPModeCanalMsg@data:
  6050                           	opt stack 0
  6051                           
  6052                           ; 8 bytes @ 0x4A
  6053  0000AA                     	ds	8
  6054  0000B2                     receiveVSCPModeCanalMsg@id:
  6055                           	opt stack 0
  6056  0000B2                     sendVSCPFrame@id:
  6057                           	opt stack 0
  6058                           
  6059                           ; 4 bytes @ 0x52
  6060  0000B2                     	ds	4
  6061  0000B6                     ?_readRegisterExtended:
  6062                           	opt stack 0
  6063  0000B6                     ?_writeRegisterExtended:
  6064                           	opt stack 0
  6065  0000B6                     ?_readRegister:
  6066                           	opt stack 0
  6067  0000B6                     receiveVSCPModeCanalMsg@dlc:
  6068                           	opt stack 0
  6069  0000B6                     readRegister@reg:
  6070                           	opt stack 0
  6071  0000B6                     readRegisterExtended@page:
  6072                           	opt stack 0
  6073  0000B6                     writeRegisterExtended@page:
  6074                           	opt stack 0
  6075                           
  6076                           ; 2 bytes @ 0x56
  6077  0000B6                     	ds	1
  6078  0000B7                     doModeVscp@c:
  6079                           	opt stack 0
  6080  0000B7                     readRegister@timeout:
  6081                           	opt stack 0
  6082                           
  6083                           ; 2 bytes @ 0x57
  6084  0000B7                     	ds	1
  6085  0000B8                     readRegisterExtended@reg:
  6086                           	opt stack 0
  6087  0000B8                     writeRegisterExtended@reg:
  6088                           	opt stack 0
  6089                           
  6090                           ; 1 bytes @ 0x58
  6091  0000B8                     	ds	1
  6092  0000B9                     readRegister@value:
  6093                           	opt stack 0
  6094  0000B9                     readRegisterExtended@timeout:
  6095                           	opt stack 0
  6096  0000B9                     writeRegisterExtended@timeout:
  6097                           	opt stack 0
  6098                           
  6099                           ; 2 bytes @ 0x59
  6100  0000B9                     	ds	1
  6101  0000BA                     ??_readRegister:
  6102                           
  6103                           ; 0 bytes @ 0x5A
  6104  0000BA                     	ds	1
  6105  0000BB                     readRegisterExtended@value:
  6106                           	opt stack 0
  6107  0000BB                     writeRegisterExtended@value:
  6108                           	opt stack 0
  6109                           
  6110                           ; 2 bytes @ 0x5B
  6111  0000BB                     	ds	2
  6112  0000BD                     ??_readRegisterExtended:
  6113  0000BD                     ??_writeRegisterExtended:
  6114                           
  6115                           ; 0 bytes @ 0x5D
  6116  0000BD                     	ds	1
  6117  0000BE                     readRegister@nodeid:
  6118                           	opt stack 0
  6119                           
  6120                           ; 1 bytes @ 0x5E
  6121  0000BE                     	ds	1
  6122  0000BF                     printGUID@nodeid:
  6123                           	opt stack 0
  6124  0000BF                     printMDF@nodeid:
  6125                           	opt stack 0
  6126  0000BF                     printNodeFirmwareVersion@nodeid:
  6127                           	opt stack 0
  6128                           
  6129                           ; 1 bytes @ 0x5F
  6130  0000BF                     	ds	1
  6131  0000C0                     printMDF@value:
  6132                           	opt stack 0
  6133  0000C0                     printGUID@buf:
  6134                           	opt stack 0
  6135  0000C0                     printNodeFirmwareVersion@buf:
  6136                           	opt stack 0
  6137                           
  6138                           ; 3 bytes @ 0x60
  6139  0000C0                     	ds	1
  6140  0000C1                     readRegisterExtended@nodeid:
  6141                           	opt stack 0
  6142  0000C1                     writeRegisterExtended@nodeid:
  6143                           	opt stack 0
  6144  0000C1                     printMDF@p:
  6145                           	opt stack 0
  6146                           
  6147                           ; 2 bytes @ 0x61
  6148  0000C1                     	ds	2
  6149  0000C3                     printGUID@value:
  6150                           	opt stack 0
  6151  0000C3                     printMDF@i:
  6152                           	opt stack 0
  6153  0000C3                     printNodeFirmwareVersion@value:
  6154                           	opt stack 0
  6155                           
  6156                           ; 1 bytes @ 0x63
  6157  0000C3                     	ds	1
  6158  0000C4                     printGUID@i:
  6159                           	opt stack 0
  6160  0000C4                     printNodeFirmwareVersion@i:
  6161                           	opt stack 0
  6162                           
  6163                           ; 1 bytes @ 0x64
  6164  0000C4                     	ds	1
  6165  0000C5                     _findNodes$1461:
  6166                           	opt stack 0
  6167                           
  6168                           ; 2 bytes @ 0x65
  6169  0000C5                     	ds	2
  6170  0000C7                     findNodes@nFound:
  6171                           	opt stack 0
  6172                           
  6173                           ; 1 bytes @ 0x67
  6174  0000C7                     	ds	1
  6175  0000C8                     findNodes@value:
  6176                           	opt stack 0
  6177                           
  6178                           ; 1 bytes @ 0x68
  6179  0000C8                     	ds	1
  6180  0000C9                     findNodes@i:
  6181                           	opt stack 0
  6182                           
  6183                           ; 1 bytes @ 0x69
  6184  0000C9                     	ds	1
  6185  0000CA                     
  6186                           ; 2 bytes @ 0x6A
  6187  0000CA                     	ds	2
  6188  0000CC                     
  6189                           ; 3 bytes @ 0x6C
  6190  0000CC                     	ds	3
  6191  0000CF                     ??_main:
  6192                           
  6193                           ; 0 bytes @ 0x6F
  6194  0000CF                     	ds	1
  6195  0000D0                     main@c:
  6196                           	opt stack 0
  6197                           
  6198                           ; 1 bytes @ 0x70
  6199  0000D0                     	ds	1
  6200                           tblptru	equ	0xFF8
  6201                           tblptrh	equ	0xFF7
  6202                           tblptrl	equ	0xFF6
  6203                           tablat	equ	0xFF5
  6204                           prodh	equ	0xFF4
  6205                           prodl	equ	0xFF3
  6206                           intcon	equ	0xFF2
  6207                           indf0	equ	0xFEF
  6208                           postinc0	equ	0xFEE
  6209                           fsr0h	equ	0xFEA
  6210                           fsr0l	equ	0xFE9
  6211                           wreg	equ	0xFE8
  6212                           indf1	equ	0xFE7
  6213                           postinc1	equ	0xFE6
  6214                           postdec1	equ	0xFE5
  6215                           fsr1h	equ	0xFE2
  6216                           fsr1l	equ	0xFE1
  6217                           indf2	equ	0xFDF
  6218                           postinc2	equ	0xFDE
  6219                           postdec2	equ	0xFDD
  6220                           plusw2	equ	0xFDB
  6221                           fsr2h	equ	0xFDA
  6222                           fsr2l	equ	0xFD9
  6223                           status	equ	0xFD8
  6224                           
  6225                           	psect	cstackCOMRAM
  6226  00002B                     __pcstackCOMRAM:
  6227                           	opt stack 0
  6228  00002B                     ?__RegsToCANID:
  6229                           	opt stack 0
  6230  00002B                     ?i1_WriteTimer0:
  6231                           	opt stack 0
  6232  00002B                     ?_fifo_write:
  6233                           	opt stack 0
  6234  00002B                     ?_fifo_getFree:
  6235                           	opt stack 0
  6236  00002B                     ?__ECANPointBuffer:
  6237                           	opt stack 0
  6238  00002B                     fifo_write@buf:
  6239                           	opt stack 0
  6240  00002B                     ReadUSART@data:
  6241                           	opt stack 0
  6242  00002B                     __RegsToCANID@ptr:
  6243                           	opt stack 0
  6244  00002B                     i1WriteTimer0@timer0:
  6245                           	opt stack 0
  6246                           
  6247                           ; 2 bytes @ 0x0
  6248  00002B                     	ds	1
  6249  00002C                     fifo_write@nbytes:
  6250                           	opt stack 0
  6251                           
  6252                           ; 4 bytes @ 0x1
  6253  00002C                     	ds	1
  6254  00002D                     ??_fifo_getFree:
  6255  00002D                     __RegsToCANID@val:
  6256                           	opt stack 0
  6257  00002D                     i1WriteTimer0@timer:
  6258                           	opt stack 0
  6259                           
  6260                           ; 2 bytes @ 0x2
  6261  00002D                     	ds	1
  6262  00002E                     __RegsToCANID@type:
  6263                           	opt stack 0
  6264  00002E                     __ECANPointBuffer@b:
  6265                           	opt stack 0
  6266                           
  6267                           ; 1 bytes @ 0x3
  6268  00002E                     	ds	1
  6269  00002F                     ??__RegsToCANID:
  6270  00002F                     __ECANPointBuffer@pt:
  6271                           	opt stack 0
  6272                           
  6273                           ; 2 bytes @ 0x4
  6274  00002F                     	ds	1
  6275  000030                     ??_fifo_write:
  6276                           
  6277                           ; 0 bytes @ 0x5
  6278  000030                     	ds	1
  6279  000031                     __RegsToCANID@Value:
  6280                           	opt stack 0
  6281                           
  6282                           ; 1 bytes @ 0x6
  6283  000031                     	ds	1
  6284  000032                     ?_ECANReceiveMessage:
  6285                           	opt stack 0
  6286  000032                     ECANReceiveMessage@data:
  6287                           	opt stack 0
  6288                           
  6289                           ; 1 bytes @ 0x7
  6290  000032                     	ds	1
  6291  000033                     ECANReceiveMessage@dataLen:
  6292                           	opt stack 0
  6293                           
  6294                           ; 1 bytes @ 0x8
  6295  000033                     	ds	1
  6296  000034                     ECANReceiveMessage@msgFlags:
  6297                           	opt stack 0
  6298  000034                     fifo_write@p:
  6299                           	opt stack 0
  6300                           
  6301                           ; 1 bytes @ 0x9
  6302  000034                     	ds	1
  6303  000035                     fifo_getFree@f:
  6304                           	opt stack 0
  6305  000035                     ECANReceiveMessage@savedPtr:
  6306                           	opt stack 0
  6307  000035                     fifo_write@i:
  6308                           	opt stack 0
  6309                           
  6310                           ; 4 bytes @ 0xA
  6311  000035                     	ds	2
  6312  000037                     ECANReceiveMessage@id:
  6313                           	opt stack 0
  6314                           
  6315                           ; 1 bytes @ 0xC
  6316  000037                     	ds	1
  6317  000038                     ECANReceiveMessage@i:
  6318                           	opt stack 0
  6319                           
  6320                           ; 1 bytes @ 0xD
  6321  000038                     	ds	1
  6322  000039                     ECANReceiveMessage@mode:
  6323                           	opt stack 0
  6324  000039                     fifo_write@f:
  6325                           	opt stack 0
  6326                           
  6327                           ; 1 bytes @ 0xE
  6328  000039                     	ds	1
  6329  00003A                     ECANReceiveMessage@temp:
  6330                           	opt stack 0
  6331                           
  6332                           ; 1 bytes @ 0xF
  6333  00003A                     	ds	1
  6334  00003B                     ECANReceiveMessage@ptr:
  6335                           	opt stack 0
  6336                           
  6337                           ; 2 bytes @ 0x10
  6338  00003B                     	ds	2
  6339  00003D                     ??_Interrupt:
  6340                           
  6341                           ; 0 bytes @ 0x12
  6342  00003D                     	ds	9
  6343  000046                     Interrupt@data:
  6344                           	opt stack 0
  6345                           
  6346                           ; 8 bytes @ 0x1B
  6347  000046                     	ds	8
  6348  00004E                     Interrupt@c:
  6349                           	opt stack 0
  6350                           
  6351                           ; 1 bytes @ 0x23
  6352  00004E                     	ds	1
  6353  00004F                     Interrupt@dlc:
  6354                           	opt stack 0
  6355                           
  6356                           ; 1 bytes @ 0x24
  6357  00004F                     	ds	1
  6358  000050                     Interrupt@id:
  6359                           	opt stack 0
  6360                           
  6361                           ; 4 bytes @ 0x25
  6362  000050                     	ds	4
  6363  000054                     Interrupt@flags:
  6364                           	opt stack 0
  6365                           
  6366                           ; 1 bytes @ 0x29
  6367  000054                     	ds	1
  6368                           tblptru	equ	0xFF8
  6369                           tblptrh	equ	0xFF7
  6370                           tblptrl	equ	0xFF6
  6371                           tablat	equ	0xFF5
  6372                           prodh	equ	0xFF4
  6373                           prodl	equ	0xFF3
  6374                           intcon	equ	0xFF2
  6375                           indf0	equ	0xFEF
  6376                           postinc0	equ	0xFEE
  6377                           fsr0h	equ	0xFEA
  6378                           fsr0l	equ	0xFE9
  6379                           wreg	equ	0xFE8
  6380                           indf1	equ	0xFE7
  6381                           postinc1	equ	0xFE6
  6382                           postdec1	equ	0xFE5
  6383                           fsr1h	equ	0xFE2
  6384                           fsr1l	equ	0xFE1
  6385                           indf2	equ	0xFDF
  6386                           postinc2	equ	0xFDE
  6387                           postdec2	equ	0xFDD
  6388                           plusw2	equ	0xFDB
  6389                           fsr2h	equ	0xFDA
  6390                           fsr2l	equ	0xFD9
  6391                           status	equ	0xFD8
  6392                           
  6393 ;;
  6394 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6395 ;;
  6396 ;; *************** function _main *****************
  6397 ;; Defined at:
  6398 ;;		line 255 in file "main.c"
  6399 ;; Parameters:    Size  Location     Type
  6400 ;;  argc            2  106[BANK0 ] int 
  6401 ;;  argv            3  108[BANK0 ] PTR PTR unsigned char 
  6402 ;; Auto vars:     Size  Location     Type
  6403 ;;  c               1  112[BANK0 ] unsigned char 
  6404 ;; Return value:  Size  Location     Type
  6405 ;;                  2  106[BANK0 ] int 
  6406 ;; Registers used:
  6407 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6408 ;; Tracked objects:
  6409 ;;		On entry : 0/0
  6410 ;;		On exit  : F/0
  6411 ;;		Unchanged: 0/0
  6412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6413 ;;      Params:         0       5       0       0       0       0       0
  6414 ;;      Locals:         0       1       0       0       0       0       0
  6415 ;;      Temps:          0       1       0       0       0       0       0
  6416 ;;      Totals:         0       7       0       0       0       0       0
  6417 ;;Total ram usage:        7 bytes
  6418 ;; Hardware stack levels required when called:   11
  6419 ;; This function calls:
  6420 ;;		_fifo_init
  6421 ;;		_init_crc8
  6422 ;;		_readEEPROM
  6423 ;;		_vscp_restoreDefaults
  6424 ;;		_init
  6425 ;;		_putsUSART
  6426 ;;		_printFirmwareVersion
  6427 ;;		_printMode
  6428 ;;		_fifo_read
  6429 ;;		_doModeVerbose
  6430 ;;		_doModeVscp
  6431 ;;		_doModeSLCAN
  6432 ;;		_doModeVscpNode
  6433 ;; This function is called by:
  6434 ;;		Startup code after reset
  6435 ;; This function uses a non-reentrant model
  6436 ;;
  6437                           
  6438                           	psect	text0
  6439  0039FE                     __ptext0:
  6440                           	opt stack 0
  6441  0039FE                     _main:
  6442                           	opt stack 19
  6443                           
  6444                           ;main.c: 257: caps.maxVscpFrames = 1;
  6445                           
  6446                           ;incstack = 0
  6447                           ;incstack = 0
  6448  0039FE  0E01               	movlw	1
  6449  003A00  0100               	movlb	0	; () banked
  6450  003A02  6FF5               	movwf	_caps& (0+255),b
  6451                           
  6452                           ;main.c: 258: caps.maxCanalFrames = 1;
  6453  003A04  6FF6               	movwf	(_caps+1)& (0+255),b
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;main.c: 263: fifo_init( &serialInputFifo, inputBuffer, sizeof ( inputBuffer));
  6457  003A06  0E02               	movlw	high _inputBuffer
  6458  003A08  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6459  003A0A  0E00               	movlw	low _inputBuffer
  6460  003A0C  6F60               	movwf	?_fifo_init& (0+255),b
  6461  003A0E  6B63               	clrf	(?_fifo_init+3)& (0+255),b
  6462  003A10  0E80               	movlw	128
  6463  003A12  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6464  003A14  0E23               	movlw	_serialInputFifo& (0+255)
  6465  003A16  EC60  F00D         	call	_fifo_init
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;main.c: 264: fifo_init( &canInputFifo, caninputBuffer, sizeof ( caninputBuffer));
  6469  003A1A  0E04               	movlw	high _caninputBuffer
  6470  003A1C  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6471  003A1E  0E00               	movlw	low _caninputBuffer
  6472  003A20  6F60               	movwf	?_fifo_init& (0+255),b
  6473  003A22  0E01               	movlw	1
  6474  003A24  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6475  003A26  0EEE               	movlw	238
  6476  003A28  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6477  003A2A  0E1B               	movlw	_canInputFifo& (0+255)
  6478  003A2C  EC60  F00D         	call	_fifo_init
  6479                           
  6480                           ; BSR set to: 0
  6481                           ;main.c: 267: init_crc8();
  6482  003A30  EC17  F010         	call	_init_crc8	;wreg free
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;main.c: 271: if ( ( 0x55 != readEEPROM(0x01) ) ||
  6486                           ;main.c: 272: ( 0xaa != readEEPROM(0x02) ) ) {
  6487  003A34  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6488  003A36  0E01               	movlw	1
  6489  003A38  6F60               	movwf	?_readEEPROM& (0+255),b
  6490  003A3A  ECDC  F00B         	call	_readEEPROM	;wreg free
  6491  003A3E  0A55               	xorlw	85
  6492  003A40  E107               	bnz	l9816
  6493                           
  6494                           ; BSR set to: 0
  6495  003A42  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6496  003A44  0E02               	movlw	2
  6497  003A46  6F60               	movwf	?_readEEPROM& (0+255),b
  6498  003A48  ECDC  F00B         	call	_readEEPROM	;wreg free
  6499  003A4C  0AAA               	xorlw	170
  6500  003A4E  A4D8               	btfss	status,2,c
  6501  003A50                     l9816:
  6502                           
  6503                           ; BSR set to: 0
  6504                           ;main.c: 273: vscp_restoreDefaults();
  6505  003A50  ECCF  F00B         	call	_vscp_restoreDefaults	;wreg free
  6506                           
  6507                           ;main.c: 274: }
  6508                           ;main.c: 277: init();
  6509  003A54  EC05  F00E         	call	_init	;wreg free
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;main.c: 281: _delay((unsigned long)((10)*(40000000/4000.0)));
  6513  003A58  0E82               	movlw	130
  6514  003A5A  6FCF               	movwf	??_main& (0+255),b
  6515  003A5C  0EDD               	movlw	221
  6516  003A5E                     u17137:
  6517  003A5E  2EE8               	decfsz	wreg,f,c
  6518  003A60  D7FE               	goto	u17137
  6519  003A62  2FCF               	decfsz	??_main& (0+255),f,b
  6520  003A64  D7FC               	goto	u17137
  6521  003A66  D000               	nop2	
  6522                           
  6523                           ;main.c: 285: putsUSART((char *) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6524  003A68  0E76               	movlw	high STR_1
  6525  003A6A  0100               	movlb	0	; () banked
  6526  003A6C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6527  003A6E  0E2F               	movlw	low STR_1
  6528  003A70  6F61               	movwf	?_putsUSART& (0+255),b
  6529  003A72  EC9B  F00E         	call	_putsUSART	;wreg free
  6530                           
  6531                           ;main.c: 286: putsUSART((char *) "Copyright (C) 2014-2015 Grodans Paradis AB, Sweden\r\n
      +                          ");
  6532  003A76  0E71               	movlw	high STR_2
  6533  003A78  0100               	movlb	0	; () banked
  6534  003A7A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6535  003A7C  0E8D               	movlw	low STR_2
  6536  003A7E  6F61               	movwf	?_putsUSART& (0+255),b
  6537  003A80  EC9B  F00E         	call	_putsUSART	;wreg free
  6538                           
  6539                           ;main.c: 287: putsUSART((char *) "http://www.paradiseofthefrog.com\r\n");
  6540  003A84  0E76               	movlw	high STR_3
  6541  003A86  0100               	movlb	0	; () banked
  6542  003A88  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6543  003A8A  0E9D               	movlw	low STR_3
  6544  003A8C  6F61               	movwf	?_putsUSART& (0+255),b
  6545  003A8E  EC9B  F00E         	call	_putsUSART	;wreg free
  6546                           
  6547                           ;main.c: 288: printFirmwareVersion();
  6548  003A92  EC3D  F012         	call	_printFirmwareVersion	;wreg free
  6549                           
  6550                           ;main.c: 289: printMode();
  6551  003A96  EC87  F010         	call	_printMode	;wreg free
  6552                           
  6553                           ;main.c: 293: if (0 && (0 != mode)) {
  6554  003A9A  D026               	goto	l9850
  6555  003A9C                     l421:
  6556                           
  6557                           ; BSR set to: 0
  6558  003A9C  0004               	clrwdt		;# 
  6559                           
  6560                           ;main.c: 303: (INTCONbits.GIE = 0);
  6561  003A9E  9EF2               	bcf	intcon,7,c	;volatile
  6562                           
  6563                           ;main.c: 304: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6564  003AA0  0100               	movlb	0	; () banked
  6565  003AA2  0E00               	movlw	high main@c
  6566  003AA4  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6567  003AA6  0ED0               	movlw	low main@c
  6568  003AA8  6F60               	movwf	?_fifo_read& (0+255),b
  6569  003AAA  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6570  003AAC  0E01               	movlw	1
  6571  003AAE  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6572  003AB0  0E23               	movlw	_serialInputFifo& (0+255)
  6573  003AB2  ECBA  F015         	call	_fifo_read
  6574  003AB6  0560               	decf	?_fifo_read& (0+255),w,b
  6575  003AB8  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6576  003ABA  E10C               	bnz	l422
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;main.c: 305: (INTCONbits.GIE = 1);
  6580  003ABC  8EF2               	bsf	intcon,7,c	;volatile
  6581                           
  6582                           ; BSR set to: 0
  6583                           ;main.c: 306: if ('v' == c) {
  6584  003ABE  51D0               	movf	main@c& (0+255),w,b
  6585  003AC0  0A76               	xorlw	118
  6586  003AC2  E108               	bnz	l422
  6587                           
  6588                           ; BSR set to: 0
  6589                           ;main.c: 307: mode = 0;
  6590  003AC4  6BF1               	clrf	_mode& (0+255),b
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;main.c: 308: putsUSART((char *) "Temporary verbose mode set\r\n");
  6594  003AC6  0E78               	movlw	high STR_5
  6595  003AC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6596  003ACA  0E2A               	movlw	low STR_5
  6597  003ACC  6F61               	movwf	?_putsUSART& (0+255),b
  6598  003ACE  EC9B  F00E         	call	_putsUSART	;wreg free
  6599                           
  6600                           ;main.c: 309: break;
  6601  003AD2  D00A               	goto	l9850
  6602  003AD4                     l422:
  6603                           
  6604                           ; BSR set to: 0
  6605                           ;main.c: 310: }
  6606                           ;main.c: 311: }
  6607                           ;main.c: 312: (INTCONbits.GIE = 1);
  6608  003AD4  8EF2               	bsf	intcon,7,c	;volatile
  6609                           
  6610                           ; BSR set to: 0
  6611  003AD6  0EB8               	movlw	184
  6612  003AD8  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
  6613  003ADA  0E0B               	movlw	11
  6614  003ADC  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6615  003ADE  0E00               	movlw	0
  6616  003AE0  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6617  003AE2  0E00               	movlw	0
  6618  003AE4  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6619  003AE6  E3DA               	bnc	l421
  6620  003AE8                     l9850:
  6621                           
  6622                           ;main.c: 313: }
  6623                           ;main.c: 314: }
  6624                           ;main.c: 316: ledFunctionality = 1;
  6625  003AE8  0E01               	movlw	1
  6626  003AEA  6E1A               	movwf	_ledFunctionality,c
  6627  003AEC                     l425:
  6628  003AEC  0004               	clrwdt		;# 
  6629                           
  6630                           ;main.c: 324: if (COMSTATbits.TXBO) {
  6631  003AEE  AA74               	btfss	3956,5,c	;volatile
  6632  003AF0  D002               	goto	l426
  6633                           
  6634                           ;main.c: 326: ledFunctionality = 6;
  6635  003AF2  0E06               	movlw	6
  6636  003AF4  D009               	goto	L1
  6637  003AF6                     l426:
  6638                           
  6639                           ;main.c: 328: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6640  003AF6  B874               	btfsc	3956,4,c	;volatile
  6641  003AF8  D002               	goto	l9858
  6642  003AFA  A674               	btfss	3956,3,c	;volatile
  6643  003AFC  D002               	goto	l428
  6644  003AFE                     l9858:
  6645                           
  6646                           ;main.c: 330: ledFunctionality = 5;
  6647  003AFE  0E05               	movlw	5
  6648  003B00  D003               	goto	L1
  6649  003B02                     l428:
  6650                           
  6651                           ;main.c: 334: ledFunctionality = 4;
  6652  003B02  0E04               	movlw	4
  6653                           
  6654                           ;main.c: 332: else if (COMSTATbits.EWARN) {
  6655  003B04  A074               	btfss	3956,0,c	;volatile
  6656                           
  6657                           ;main.c: 336: else {
  6658                           ;main.c: 338: ledFunctionality = 1;
  6659                           
  6660                           ;main.c: 335: }
  6661  003B06  0E01               	movlw	1
  6662  003B08                     L1:
  6663  003B08  6E1A               	movwf	_ledFunctionality,c
  6664                           
  6665                           ;main.c: 339: }
  6666                           ;main.c: 342: if (COMSTATbits.RXBnOVFL) {
  6667  003B0A  AC74               	btfss	3956,6,c	;volatile
  6668  003B0C  D007               	goto	l9870
  6669                           
  6670                           ;main.c: 343: can_receiveOverruns++;
  6671  003B0E  0100               	movlb	0	; () banked
  6672  003B10  2BD1               	incf	_can_receiveOverruns& (0+255),f,b
  6673  003B12  0E00               	movlw	0
  6674  003B14  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6675  003B16  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6676  003B18  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;main.c: 344: COMSTATbits.RXBnOVFL = 0;
  6680  003B1A  9C74               	bcf	3956,6,c	;volatile
  6681  003B1C                     l9870:
  6682                           
  6683                           ;main.c: 345: }
  6684                           ;main.c: 347: if (0 == mode) {
  6685  003B1C  0100               	movlb	0	; () banked
  6686  003B1E  67F1               	tstfsz	_mode& (0+255),b
  6687  003B20  D003               	goto	l9874
  6688  003B22                     l9872:
  6689                           
  6690                           ; BSR set to: 0
  6691                           ;main.c: 348: doModeVerbose();
  6692  003B22  EC89  F02C         	call	_doModeVerbose	;wreg free
  6693                           
  6694                           ;main.c: 349: }
  6695  003B26  D7E2               	goto	l425
  6696  003B28                     l9874:
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;main.c: 350: else if (1 == mode) {
  6700  003B28  05F1               	decf	_mode& (0+255),w,b
  6701  003B2A  E103               	bnz	l9878
  6702                           
  6703                           ; BSR set to: 0
  6704                           ;main.c: 351: doModeVscp();
  6705  003B2C  EC92  F021         	call	_doModeVscp	;wreg free
  6706                           
  6707                           ;main.c: 352: }
  6708  003B30  D7DD               	goto	l425
  6709  003B32                     l9878:
  6710                           
  6711                           ; BSR set to: 0
  6712                           ;main.c: 353: else if (2 == mode) {
  6713  003B32  51F1               	movf	_mode& (0+255),w,b
  6714  003B34  0A02               	xorlw	2
  6715  003B36  E103               	bnz	l9882
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;main.c: 354: doModeSLCAN();
  6719  003B38  EC32  F027         	call	_doModeSLCAN	;wreg free
  6720                           
  6721                           ;main.c: 355: }
  6722  003B3C  D7D7               	goto	l425
  6723  003B3E                     l9882:
  6724                           
  6725                           ; BSR set to: 0
  6726                           ;main.c: 356: else if (3 == mode) {
  6727  003B3E  51F1               	movf	_mode& (0+255),w,b
  6728  003B40  0A03               	xorlw	3
  6729  003B42  E1EF               	bnz	l9872
  6730                           
  6731                           ; BSR set to: 0
  6732                           ;main.c: 357: doModeVscpNode();
  6733  003B44  ECCE  F00B         	call	_doModeVscpNode	;wreg free
  6734                           
  6735                           ;main.c: 358: }
  6736  003B48  D7D1               	goto	l425
  6737  003B4A                     __end_of_main:
  6738                           	opt stack 0
  6739                           tblptru	equ	0xFF8
  6740                           tblptrh	equ	0xFF7
  6741                           tblptrl	equ	0xFF6
  6742                           tablat	equ	0xFF5
  6743                           prodh	equ	0xFF4
  6744                           prodl	equ	0xFF3
  6745                           intcon	equ	0xFF2
  6746                           indf0	equ	0xFEF
  6747                           postinc0	equ	0xFEE
  6748                           fsr0h	equ	0xFEA
  6749                           fsr0l	equ	0xFE9
  6750                           wreg	equ	0xFE8
  6751                           indf1	equ	0xFE7
  6752                           postinc1	equ	0xFE6
  6753                           postdec1	equ	0xFE5
  6754                           fsr1h	equ	0xFE2
  6755                           fsr1l	equ	0xFE1
  6756                           indf2	equ	0xFDF
  6757                           postinc2	equ	0xFDE
  6758                           postdec2	equ	0xFDD
  6759                           plusw2	equ	0xFDB
  6760                           fsr2h	equ	0xFDA
  6761                           fsr2l	equ	0xFD9
  6762                           status	equ	0xFD8
  6763                           
  6764 ;; *************** function _doModeVscpNode *****************
  6765 ;; Defined at:
  6766 ;;		line 1501 in file "main.c"
  6767 ;; Parameters:    Size  Location     Type
  6768 ;;		None
  6769 ;; Auto vars:     Size  Location     Type
  6770 ;;		None
  6771 ;; Return value:  Size  Location     Type
  6772 ;;		None               void
  6773 ;; Registers used:
  6774 ;;		None
  6775 ;; Tracked objects:
  6776 ;;		On entry : F/0
  6777 ;;		On exit  : F/0
  6778 ;;		Unchanged: F/0
  6779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6780 ;;      Params:         0       0       0       0       0       0       0
  6781 ;;      Locals:         0       0       0       0       0       0       0
  6782 ;;      Temps:          0       0       0       0       0       0       0
  6783 ;;      Totals:         0       0       0       0       0       0       0
  6784 ;;Total ram usage:        0 bytes
  6785 ;; Hardware stack levels used:    1
  6786 ;; Hardware stack levels required when called:    3
  6787 ;; This function calls:
  6788 ;;		Nothing
  6789 ;; This function is called by:
  6790 ;;		_main
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           	psect	text1
  6795  00179C                     __ptext1:
  6796                           	opt stack 0
  6797  00179C                     _doModeVscpNode:
  6798                           	opt stack 26
  6799                           
  6800                           ; BSR set to: 0
  6801                           
  6802                           ; BSR set to: 0
  6803                           ;incstack = 0
  6804                           ;incstack = 0
  6805  00179C  0012               	return	
  6806  00179E                     __end_of_doModeVscpNode:
  6807                           	opt stack 0
  6808                           tblptru	equ	0xFF8
  6809                           tblptrh	equ	0xFF7
  6810                           tblptrl	equ	0xFF6
  6811                           tablat	equ	0xFF5
  6812                           prodh	equ	0xFF4
  6813                           prodl	equ	0xFF3
  6814                           intcon	equ	0xFF2
  6815                           indf0	equ	0xFEF
  6816                           postinc0	equ	0xFEE
  6817                           fsr0h	equ	0xFEA
  6818                           fsr0l	equ	0xFE9
  6819                           wreg	equ	0xFE8
  6820                           indf1	equ	0xFE7
  6821                           postinc1	equ	0xFE6
  6822                           postdec1	equ	0xFE5
  6823                           fsr1h	equ	0xFE2
  6824                           fsr1l	equ	0xFE1
  6825                           indf2	equ	0xFDF
  6826                           postinc2	equ	0xFDE
  6827                           postdec2	equ	0xFDD
  6828                           plusw2	equ	0xFDB
  6829                           fsr2h	equ	0xFDA
  6830                           fsr2l	equ	0xFD9
  6831                           status	equ	0xFD8
  6832                           
  6833 ;; *************** function _doModeSLCAN *****************
  6834 ;; Defined at:
  6835 ;;		line 1299 in file "main.c"
  6836 ;; Parameters:    Size  Location     Type
  6837 ;;		None
  6838 ;; Auto vars:     Size  Location     Type
  6839 ;;  id              4   61[BANK0 ] unsigned long 
  6840 ;;  dlc             1   65[BANK0 ] unsigned char 
  6841 ;;  rv              1   67[BANK0 ] enum E15660
  6842 ;;  c               1   66[BANK0 ] unsigned char 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;		None               void
  6845 ;; Registers used:
  6846 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6847 ;; Tracked objects:
  6848 ;;		On entry : F/0
  6849 ;;		On exit  : E/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6852 ;;      Params:         0       0       0       0       0       0       0
  6853 ;;      Locals:         0       7       0       0       0       0       0
  6854 ;;      Temps:          0       7       0       0       0       0       0
  6855 ;;      Totals:         0      14       0       0       0       0       0
  6856 ;;Total ram usage:       14 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:    7
  6859 ;; This function calls:
  6860 ;;		_putsUSART
  6861 ;;		_fifo_read
  6862 ;;		_writeEEPROM
  6863 ;;		_ECANSetOperationMode
  6864 ;;		_memset
  6865 ;;		_receiveSendEventSLCAN
  6866 ;;		_strlen
  6867 ;;		_hexStringToBytes
  6868 ;;		_memcpy
  6869 ;;		_sendCANFrame
  6870 ;; This function is called by:
  6871 ;;		_main
  6872 ;; This function uses a non-reentrant model
  6873 ;;
  6874                           
  6875                           	psect	text2
  6876  004E64                     __ptext2:
  6877                           	opt stack 0
  6878  004E64                     _doModeSLCAN:
  6879                           	opt stack 22
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;main.c: 1300: uint8_t c;
  6883                           ;main.c: 1301: BOOL rv = 0;
  6884                           
  6885                           ; BSR set to: 0
  6886                           ;incstack = 0
  6887                           ;incstack = 0
  6888  004E64  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6889                           
  6890                           ; BSR set to: 0
  6891                           ;main.c: 1304: receiveSendEventSLCAN();
  6892  004E66  EC1A  F01F         	call	_receiveSendEventSLCAN	;wreg free
  6893                           
  6894                           ;main.c: 1307: (INTCONbits.GIE = 0);
  6895  004E6A  9EF2               	bcf	intcon,7,c	;volatile
  6896                           
  6897                           ;main.c: 1309: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6898  004E6C  0100               	movlb	0	; () banked
  6899  004E6E  0E00               	movlw	high doModeSLCAN@c
  6900  004E70  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6901  004E72  0EA2               	movlw	low doModeSLCAN@c
  6902  004E74  6F60               	movwf	?_fifo_read& (0+255),b
  6903  004E76  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6904  004E78  0E01               	movlw	1
  6905  004E7A  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6906  004E7C  0E23               	movlw	_serialInputFifo& (0+255)
  6907  004E7E  ECBA  F015         	call	_fifo_read
  6908  004E82  0560               	decf	?_fifo_read& (0+255),w,b
  6909  004E84  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6910  004E86  E001 D19C          	bnz	l10930
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;main.c: 1312: (INTCONbits.GIE = 1);
  6914  004E8A  8EF2               	bsf	intcon,7,c	;volatile
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;main.c: 1314: if (0x0d != c) {
  6918  004E8C  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  6919  004E8E  0A0D               	xorlw	13
  6920  004E90  E101 D14E          	bz	l10918
  6921                           
  6922                           ; BSR set to: 0
  6923                           ;main.c: 1315: cmdbuf[ pos ] = c;
  6924  004E94  EC6B  F022         	call	PL18	;call to abstracted procedure
  6925  004E98  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;main.c: 1316: pos++;
  6929  004E9C  2B02               	incf	_pos& (0+255),f,b
  6930  004E9E  D192               	goto	l708
  6931  004EA0                     l10812:
  6932                           
  6933                           ; BSR set to: 0
  6934                           ;main.c: 1324: if (1 == strlen(cmdbuf)) {
  6935  004EA0  0E01               	movlw	high _cmdbuf
  6936  004EA2  0100               	movlb	0	; () banked
  6937  004EA4  6F61               	movwf	(?_strlen+1)& (0+255),b
  6938  004EA6  0E04               	movlw	low _cmdbuf
  6939  004EA8  6F60               	movwf	?_strlen& (0+255),b
  6940  004EAA  EC80  F00D         	call	_strlen	;wreg free
  6941  004EAE  0560               	decf	?_strlen& (0+255),w,b
  6942  004EB0  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6943  004EB2  E001 D168          	bnz	l10920
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;main.c: 1325: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6947  004EB6  0E7A               	movlw	high STR_126
  6948  004EB8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6949  004EBA  0E5A               	movlw	low STR_126
  6950  004EBC  6F61               	movwf	?_putsUSART& (0+255),b
  6951  004EBE  EC9B  F00E         	call	_putsUSART	;wreg free
  6952  004EC2                     l10816:
  6953                           
  6954                           ;main.c: 1326: rv = 1;
  6955  004EC2  0E01               	movlw	1
  6956  004EC4  0100               	movlb	0	; () banked
  6957  004EC6  D0DE               	goto	L3
  6958  004EC8                     l10818:
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;main.c: 1332: if (1 == strlen(cmdbuf)) {
  6962  004EC8  0E01               	movlw	high _cmdbuf
  6963  004ECA  0100               	movlb	0	; () banked
  6964  004ECC  6F61               	movwf	(?_strlen+1)& (0+255),b
  6965  004ECE  0E04               	movlw	low _cmdbuf
  6966  004ED0  6F60               	movwf	?_strlen& (0+255),b
  6967  004ED2  EC80  F00D         	call	_strlen	;wreg free
  6968  004ED6  0560               	decf	?_strlen& (0+255),w,b
  6969  004ED8  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6970  004EDA  E001 D154          	bnz	l10920
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;main.c: 1333: putsUSART((char *) "V1011\r\n");
  6974  004EDE  0E7B               	movlw	high STR_127
  6975  004EE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6976  004EE2  0ED5               	movlw	low STR_127
  6977  004EE4  6F61               	movwf	?_putsUSART& (0+255),b
  6978  004EE6  EC9B  F00E         	call	_putsUSART	;wreg free
  6979  004EEA  D7EB               	goto	l10816
  6980  004EEC                     l10824:
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;main.c: 1340: if (1 == strlen(cmdbuf)) {
  6984  004EEC  0E01               	movlw	high _cmdbuf
  6985  004EEE  0100               	movlb	0	; () banked
  6986  004EF0  6F61               	movwf	(?_strlen+1)& (0+255),b
  6987  004EF2  0E04               	movlw	low _cmdbuf
  6988  004EF4  6F60               	movwf	?_strlen& (0+255),b
  6989  004EF6  EC80  F00D         	call	_strlen	;wreg free
  6990  004EFA  0560               	decf	?_strlen& (0+255),w,b
  6991  004EFC  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6992  004EFE  E001 D142          	bnz	l10920
  6993                           
  6994                           ; BSR set to: 0
  6995                           ;main.c: 1341: putsUSART((char *) "N1977\r\n");
  6996  004F02  0E7B               	movlw	high STR_128
  6997  004F04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6998  004F06  0EDD               	movlw	low STR_128
  6999  004F08  6F61               	movwf	?_putsUSART& (0+255),b
  7000  004F0A  EC9B  F00E         	call	_putsUSART	;wreg free
  7001  004F0E  D7D9               	goto	l10816
  7002  004F10                     l10830:
  7003                           
  7004                           ; BSR set to: 0
  7005                           ;main.c: 1350: bInitiated = 1;
  7006  004F10  0E01               	movlw	1
  7007  004F12  6FEE               	movwf	_bInitiated& (0+255),b
  7008                           
  7009                           ;main.c: 1351: rv = 1;
  7010  004F14  D0B7               	goto	L3
  7011  004F16                     l718:
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;main.c: 1356: if (!bOpen) {
  7015  004F16  67EF               	tstfsz	_bOpen& (0+255),b
  7016  004F18  D003               	goto	l10834
  7017                           
  7018                           ; BSR set to: 0
  7019                           ;main.c: 1357: bInitiated = 1;
  7020  004F1A  0E01               	movlw	1
  7021  004F1C  6FEE               	movwf	_bInitiated& (0+255),b
  7022                           
  7023                           ;main.c: 1358: rv = 1;
  7024  004F1E  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7025  004F20                     l10834:
  7026                           
  7027                           ; BSR set to: 0
  7028                           ;main.c: 1363: if (1 == strlen(cmdbuf)) {
  7029  004F20  0E01               	movlw	high _cmdbuf
  7030  004F22  0100               	movlb	0	; () banked
  7031  004F24  6F61               	movwf	(?_strlen+1)& (0+255),b
  7032  004F26  0E04               	movlw	low _cmdbuf
  7033  004F28  6F60               	movwf	?_strlen& (0+255),b
  7034  004F2A  EC80  F00D         	call	_strlen	;wreg free
  7035  004F2E  0560               	decf	?_strlen& (0+255),w,b
  7036  004F30  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7037  004F32  E001 D128          	bnz	l10920
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;main.c: 1364: if (!bOpen && bInitiated) {
  7041  004F36  67EF               	tstfsz	_bOpen& (0+255),b
  7042  004F38  D126               	goto	l10920
  7043                           
  7044                           ; BSR set to: 0
  7045  004F3A  51EE               	movf	_bInitiated& (0+255),w,b
  7046  004F3C  E101 D123          	bz	l10920
  7047                           
  7048                           ; BSR set to: 0
  7049                           ;main.c: 1365: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7050  004F40  0E00               	movlw	0
  7051  004F42  EC03  F00C         	call	_ECANSetOperationMode
  7052                           
  7053                           ; BSR set to: 0
  7054                           ;main.c: 1366: bOpen = 1;
  7055  004F46  0E01               	movlw	1
  7056  004F48  6FEF               	movwf	_bOpen& (0+255),b
  7057  004F4A  D7BB               	goto	l10816
  7058  004F4C                     l10846:
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;main.c: 1374: if (1 == strlen(cmdbuf)) {
  7062  004F4C  0E01               	movlw	high _cmdbuf
  7063  004F4E  0100               	movlb	0	; () banked
  7064  004F50  6F61               	movwf	(?_strlen+1)& (0+255),b
  7065  004F52  0E04               	movlw	low _cmdbuf
  7066  004F54  6F60               	movwf	?_strlen& (0+255),b
  7067  004F56  EC80  F00D         	call	_strlen	;wreg free
  7068  004F5A  0560               	decf	?_strlen& (0+255),w,b
  7069  004F5C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7070  004F5E  E001 D112          	bnz	l10920
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;main.c: 1375: if (bOpen) {
  7074  004F62  51EF               	movf	_bOpen& (0+255),w,b
  7075  004F64  E0AE               	bz	l10816
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;main.c: 1376: ECANSetOperationMode(0x20);
  7079  004F66  0E20               	movlw	32
  7080  004F68  EC03  F00C         	call	_ECANSetOperationMode
  7081                           
  7082                           ; BSR set to: 0
  7083                           ;main.c: 1377: bOpen = 0;
  7084  004F6C  6BEF               	clrf	_bOpen& (0+255),b
  7085  004F6E  D7A9               	goto	l10816
  7086  004F70                     l10856:
  7087                           
  7088                           ; BSR set to: 0
  7089                           ;main.c: 1390: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7090  004F70  51EF               	movf	_bOpen& (0+255),w,b
  7091  004F72  E101 D108          	bz	l10920
  7092                           
  7093                           ; BSR set to: 0
  7094  004F76  0E01               	movlw	high _cmdbuf
  7095  004F78  0100               	movlb	0	; () banked
  7096  004F7A  6F61               	movwf	(?_strlen+1)& (0+255),b
  7097  004F7C  0E04               	movlw	low _cmdbuf
  7098  004F7E  6F60               	movwf	?_strlen& (0+255),b
  7099  004F80  EC80  F00D         	call	_strlen	;wreg free
  7100  004F84  0E0A               	movlw	10
  7101  004F86  5D60               	subwf	?_strlen& (0+255),w,b
  7102  004F88  0E00               	movlw	0
  7103  004F8A  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7104  004F8C  E201 D0FB          	bnc	l10920
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;main.c: 1392: uint32_t id;
  7108                           ;main.c: 1393: uint8_t dlc;
  7109                           ;main.c: 1395: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7110  004F90  0E01               	movlw	high _wrkbuf
  7111  004F92  0100               	movlb	0	; () banked
  7112  004F94  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7113  004F96  0E54               	movlw	low _wrkbuf
  7114  004F98  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7115  004F9A  0E50               	movlw	80
  7116  004F9C  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7117  004F9E  0E01               	movlw	high _cmdbuf
  7118  004FA0  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7119  004FA2  0E04               	movlw	low _cmdbuf
  7120  004FA4  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7121  004FA6  EC18  F013         	call	_hexStringToBytes	;wreg free
  7122  004FAA  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7123  004FAC  0E05               	movlw	5
  7124  004FAE  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  7125  004FB0  E201 D0E9          	bnc	l10920
  7126                           
  7127                           ; BSR set to: 0
  7128                           ;main.c: 1397: }
  7129                           ;main.c: 1399: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7130  004FB4  C157  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  7131  004FB8  0E08               	movlw	8
  7132  004FBA  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7133  004FBC  C156  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7134  004FC0  0E10               	movlw	16
  7135  004FC2  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7136  004FC4  C155  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7137  004FC8  0E18               	movlw	24
  7138  004FCA  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7139  004FCC  C154  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  7140  004FD0  0100               	movlb	0	; () banked
  7141  004FD2  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7142  004FD4  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7143  004FD6  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7144  004FD8  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7145  004FDA  D001               	goto	u13520
  7146  004FDC                     u13525:
  7147  004FDC  D8F4               	call	PL88	;call to abstracted procedure
  7148  004FDE                     u13520:
  7149  004FDE  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7150  004FE0  D7FD               	goto	u13525
  7151  004FE2  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7152  004FE4  D001               	goto	u13530
  7153  004FE6                     u13535:
  7154  004FE6  D8EF               	call	PL88	;call to abstracted procedure
  7155  004FE8                     u13530:
  7156  004FE8  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7157  004FEA  D7FD               	goto	u13535
  7158  004FEC  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  7159  004FEE  D001               	goto	u13540
  7160  004FF0                     u13545:
  7161  004FF0  D8EA               	call	PL88	;call to abstracted procedure
  7162  004FF2                     u13540:
  7163  004FF2  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7164  004FF4  D7FD               	goto	u13545
  7165  004FF6  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7166  004FFA  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7167  004FFE  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7168  005002  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7169                           
  7170                           ; BSR set to: 0
  7171                           ;main.c: 1400: dlc = vscpData[4];
  7172  005006  C1A8  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7173                           
  7174                           ; BSR set to: 0
  7175                           ;main.c: 1403: if (dlc > 8) break;
  7176  00500A  0E08               	movlw	8
  7177  00500C  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7178  00500E  D001               	goto	l10872
  7179  005010  D0BA               	goto	l10920
  7180  005012                     l10872:
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;main.c: 1404: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7184  005012  90D8               	bcf	status,0,c
  7185  005014  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7186  005016  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7187  005018  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7188  00501A  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7189  00501C  0E0A               	movlw	10
  7190  00501E  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7191  005020  0E00               	movlw	0
  7192  005022  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7193  005024  0E01               	movlw	high _cmdbuf
  7194  005026  0100               	movlb	0	; () banked
  7195  005028  6F61               	movwf	(?_strlen+1)& (0+255),b
  7196  00502A  0E04               	movlw	low _cmdbuf
  7197  00502C  6F60               	movwf	?_strlen& (0+255),b
  7198  00502E  EC80  F00D         	call	_strlen	;wreg free
  7199  005032  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7200  005034  5D60               	subwf	?_strlen& (0+255),w,b
  7201  005036  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7202  005038  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7203  00503A  E201 D0A4          	bnc	l10920
  7204                           
  7205                           ; BSR set to: 0
  7206                           ;main.c: 1406: memcpy(vscpData, vscpData + 5, dlc);
  7207  00503E  0E01               	movlw	high _vscpData
  7208  005040  0100               	movlb	0	; () banked
  7209  005042  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7210  005044  0EA4               	movlw	low _vscpData
  7211  005046  6F60               	movwf	?_memcpy& (0+255),b
  7212  005048  0EA9               	movlw	low (_vscpData+5)
  7213  00504A  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7214  00504C  0E01               	movlw	high (_vscpData+5)
  7215  00504E  6F97               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7216  005050  C096  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7217  005054  C097  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7218  005058  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7219  00505C  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7220  00505E  ECA0  F00D         	call	_memcpy	;wreg free
  7221                           
  7222                           ; BSR set to: 0
  7223                           ;main.c: 1408: rv = sendCANFrame(id, dlc, vscpData);
  7224  005062  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7225  005066  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7226  00506A  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7227  00506E  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7228  005072  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7229  005076  0E01               	movlw	high _vscpData
  7230  005078  0100               	movlb	0	; () banked
  7231  00507A  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7232  00507C  0EA4               	movlw	low _vscpData
  7233  00507E  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7234  005080  ECE7  F00C         	call	_sendCANFrame	;wreg free
  7235  005084                     L3:
  7236  005084  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7237  005086  D07F               	goto	l10920
  7238  005088                     l10880:
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;main.c: 1423: if (bOpen && (strlen(cmdbuf) == 1)) {
  7242  005088  51EF               	movf	_bOpen& (0+255),w,b
  7243  00508A  E07D               	bz	l10920
  7244                           
  7245                           ; BSR set to: 0
  7246  00508C  0E01               	movlw	high _cmdbuf
  7247  00508E  0100               	movlb	0	; () banked
  7248  005090  6F61               	movwf	(?_strlen+1)& (0+255),b
  7249  005092  0E04               	movlw	low _cmdbuf
  7250  005094  6F60               	movwf	?_strlen& (0+255),b
  7251  005096  EC80  F00D         	call	_strlen	;wreg free
  7252  00509A  0560               	decf	?_strlen& (0+255),w,b
  7253  00509C  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7254  00509E  E173               	bnz	l10920
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;main.c: 1424: putsUSART((char *) "F00\r\n");
  7258  0050A0  0E7C               	movlw	high STR_129
  7259  0050A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7260  0050A4  0E79               	movlw	low STR_129
  7261  0050A6  6F61               	movwf	?_putsUSART& (0+255),b
  7262  0050A8  EC9B  F00E         	call	_putsUSART	;wreg free
  7263  0050AC  D06C               	goto	l10920
  7264  0050AE                     l10890:
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;main.c: 1440: if (2 == strlen(cmdbuf)) {
  7268  0050AE  0E01               	movlw	high _cmdbuf
  7269  0050B0  0100               	movlb	0	; () banked
  7270  0050B2  6F61               	movwf	(?_strlen+1)& (0+255),b
  7271  0050B4  0E04               	movlw	low _cmdbuf
  7272  0050B6  6F60               	movwf	?_strlen& (0+255),b
  7273  0050B8  EC80  F00D         	call	_strlen	;wreg free
  7274  0050BC  5160               	movf	?_strlen& (0+255),w,b
  7275  0050BE  0A02               	xorlw	2
  7276  0050C0  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7277  0050C2  E161               	bnz	l10920
  7278                           
  7279                           ; BSR set to: 0
  7280                           ;main.c: 1441: if (!bOpen) {
  7281  0050C4  67EF               	tstfsz	_bOpen& (0+255),b
  7282  0050C6  D05F               	goto	l10920
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;main.c: 1442: if ('0' == cmdbuf[1]) {
  7286  0050C8  0101               	movlb	1	; () banked
  7287  0050CA  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7288  0050CC  0A30               	xorlw	48
  7289  0050CE  E10A               	bnz	l10902
  7290                           
  7291                           ; BSR set to: 1
  7292                           ;main.c: 1443: nTimeStamp = 0;
  7293  0050D0  0100               	movlb	0	; () banked
  7294  0050D2  6BF2               	clrf	_nTimeStamp& (0+255),b
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;main.c: 1445: writeEEPROM(0x05, 0);
  7298  0050D4  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7299  0050D6  0E05               	movlw	5
  7300  0050D8  6F60               	movwf	?_writeEEPROM& (0+255),b
  7301  0050DA  0E00               	movlw	0
  7302  0050DC  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
  7303  0050DE  EC3E  F00C         	call	_writeEEPROM	;wreg free
  7304  0050E2  D6EF               	goto	l10816
  7305  0050E4                     l10902:
  7306                           
  7307                           ; BSR set to: 1
  7308  0050E4  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7309  0050E6  0A31               	xorlw	49
  7310  0050E8  E10B               	bnz	l743
  7311                           
  7312                           ; BSR set to: 1
  7313                           ;main.c: 1448: nTimeStamp = 1;
  7314  0050EA  0E01               	movlw	1
  7315  0050EC  0100               	movlb	0	; () banked
  7316  0050EE  6FF2               	movwf	_nTimeStamp& (0+255),b
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;main.c: 1450: writeEEPROM(0x05,
  7320                           ;main.c: 1451: 1);
  7321  0050F0  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7322  0050F2  0E05               	movlw	5
  7323  0050F4  6F60               	movwf	?_writeEEPROM& (0+255),b
  7324  0050F6  0E01               	movlw	1
  7325  0050F8  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
  7326  0050FA  EC3E  F00C         	call	_writeEEPROM	;wreg free
  7327  0050FE  D6E1               	goto	l10816
  7328  005100                     l743:
  7329                           
  7330                           ; BSR set to: 1
  7331                           ;main.c: 1454: rv = 0;
  7332  005100  0100               	movlb	0	; () banked
  7333  005102  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7334  005104  D040               	goto	l10920
  7335  005106                     l10910:
  7336                           
  7337                           ; BSR set to: 0
  7338                           ;main.c: 1462: writeEEPROM(0x01, 0xFF);
  7339  005106  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7340  005108  0E01               	movlw	1
  7341  00510A  6F60               	movwf	?_writeEEPROM& (0+255),b
  7342  00510C  0EFF               	movlw	255
  7343  00510E  6962               	setf	(?_writeEEPROM+2)& (0+255),b
  7344  005110  EC3E  F00C         	call	_writeEEPROM	;wreg free
  7345  005114  00FF               	reset		;# 
  7346                           
  7347                           ;main.c: 1464: break;
  7348  005116  D037               	goto	l10920
  7349  005118                     l10912:
  7350                           
  7351                           ; BSR set to: 0
  7352                           ;main.c: 1467: {
  7353                           ;main.c: 1469: if (0 == strlen(cmdbuf)) {
  7354  005118  0E01               	movlw	high _cmdbuf
  7355  00511A  0100               	movlb	0	; () banked
  7356  00511C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7357  00511E  0E04               	movlw	low _cmdbuf
  7358  005120  6F60               	movwf	?_strlen& (0+255),b
  7359  005122  EC80  F00D         	call	_strlen	;wreg free
  7360  005126  5161               	movf	(?_strlen+1)& (0+255),w,b
  7361  005128  1160               	iorwf	?_strlen& (0+255),w,b
  7362  00512A  E101 D6CA          	bz	l10816
  7363  00512E  D02B               	goto	l10920
  7364  005130                     l10918:
  7365                           
  7366                           ; BSR set to: 0
  7367  005130  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7368                           
  7369                           ; Switch size 1, requested type "space"
  7370                           ; Number of cases is 16, Range of values is 66 to 116
  7371                           ; switch strategies available:
  7372                           ; Name         Instructions Cycles
  7373                           ; simple_byte           49    25 (average)
  7374                           ;	Chosen strategy is simple_byte
  7375  005132  0A42               	xorlw	66	; case 66
  7376  005134  E0E8               	bz	l10910
  7377  005136  0A01               	xorlw	1	; case 67
  7378  005138  E101 D708          	bz	l10846
  7379  00513C  0A05               	xorlw	5	; case 70
  7380  00513E  E0A4               	bz	l10880
  7381  005140  0A0C               	xorlw	12	; case 74
  7382  005142  E101 D6AD          	bz	l10812
  7383  005146  0A07               	xorlw	7	; case 77
  7384  005148  E101 D6BB          	bz	l10816
  7385  00514C  0A03               	xorlw	3	; case 78
  7386  00514E  E101 D6CD          	bz	l10824
  7387  005152  0A01               	xorlw	1	; case 79
  7388  005154  E101 D6E4          	bz	l10834
  7389  005158  0A1D               	xorlw	29	; case 82
  7390  00515A  E015               	bz	l10920
  7391  00515C  0A01               	xorlw	1	; case 83
  7392  00515E  E101 D6D7          	bz	l10830
  7393  005162  0A07               	xorlw	7	; case 84
  7394  005164  E101 D704          	bz	l10856
  7395  005168  0A02               	xorlw	2	; case 86
  7396  00516A  E101 D6AD          	bz	l10818
  7397  00516E  0A0C               	xorlw	12	; case 90
  7398  005170  E09E               	bz	l10890
  7399  005172  0A37               	xorlw	55	; case 109
  7400  005174  E101 D6A5          	bz	l10816
  7401  005178  0A1F               	xorlw	31	; case 114
  7402  00517A  E005               	bz	l10920
  7403  00517C  0A01               	xorlw	1	; case 115
  7404  00517E  E101 D6CA          	bz	l718
  7405  005182  0A07               	xorlw	7	; case 116
  7406  005184  E1C9               	bnz	l10912
  7407  005186                     l10920:
  7408                           
  7409                           ;main.c: 1477: if (rv) {
  7410  005186  0100               	movlb	0	; () banked
  7411  005188  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7412  00518A  E007               	bz	l10924
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;main.c: 1479: putsUSART((char *) "\r");
  7416  00518C  0E7C               	movlw	high STR_130
  7417  00518E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7418  005190  0EF2               	movlw	low STR_130
  7419  005192  6F61               	movwf	?_putsUSART& (0+255),b
  7420  005194  EC9B  F00E         	call	_putsUSART	;wreg free
  7421                           
  7422                           ;main.c: 1480: }
  7423  005198  D006               	goto	l10926
  7424  00519A                     l10924:
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;main.c: 1481: else {
  7428                           ;main.c: 1483: putsUSART((char *) "\a");
  7429  00519A  0E7C               	movlw	high STR_131
  7430  00519C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7431  00519E  0EF0               	movlw	low STR_131
  7432  0051A0  6F61               	movwf	?_putsUSART& (0+255),b
  7433  0051A2  EC9B  F00E         	call	_putsUSART	;wreg free
  7434  0051A6                     l10926:
  7435                           
  7436                           ;main.c: 1484: }
  7437                           ;main.c: 1487: memset(cmdbuf, 0, sizeof ( cmdbuf));
  7438  0051A6  0E01               	movlw	high _cmdbuf
  7439  0051A8  0100               	movlb	0	; () banked
  7440  0051AA  6F61               	movwf	(?_memset+1)& (0+255),b
  7441  0051AC  0E04               	movlw	low _cmdbuf
  7442  0051AE  6F60               	movwf	?_memset& (0+255),b
  7443  0051B0  6B63               	clrf	(?_memset+3)& (0+255),b
  7444  0051B2  6B62               	clrf	(?_memset+2)& (0+255),b
  7445  0051B4  6B65               	clrf	(?_memset+5)& (0+255),b
  7446  0051B6  0E50               	movlw	80
  7447  0051B8  6F64               	movwf	(?_memset+4)& (0+255),b
  7448  0051BA  EC51  F00C         	call	_memset	;wreg free
  7449                           
  7450                           ; BSR set to: 0
  7451                           ;main.c: 1488: pos = 0;
  7452  0051BE  0101               	movlb	1	; () banked
  7453  0051C0  6B02               	clrf	_pos& (0+255),b
  7454  0051C2                     l10930:
  7455                           
  7456                           ;main.c: 1490: }
  7457                           ;main.c: 1493: (INTCONbits.GIE = 1);
  7458  0051C2  8EF2               	bsf	intcon,7,c	;volatile
  7459  0051C4                     l708:
  7460  0051C4  0012               	return	
  7461  0051C6                     __end_of_doModeSLCAN:
  7462                           	opt stack 0
  7463  0051C6                     PL88:
  7464                           	opt stack 22
  7465  0051C6  90D8               	bcf	status,0,c
  7466  0051C8  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7467  0051CA  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7468  0051CC  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7469  0051CE  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7470  0051D0  0012               	return	
  7471  0051D2                     __end_ofPL88:
  7472                           	opt stack 0
  7473                           tblptru	equ	0xFF8
  7474                           tblptrh	equ	0xFF7
  7475                           tblptrl	equ	0xFF6
  7476                           tablat	equ	0xFF5
  7477                           prodh	equ	0xFF4
  7478                           prodl	equ	0xFF3
  7479                           intcon	equ	0xFF2
  7480                           indf0	equ	0xFEF
  7481                           postinc0	equ	0xFEE
  7482                           fsr0h	equ	0xFEA
  7483                           fsr0l	equ	0xFE9
  7484                           wreg	equ	0xFE8
  7485                           indf1	equ	0xFE7
  7486                           postinc1	equ	0xFE6
  7487                           postdec1	equ	0xFE5
  7488                           fsr1h	equ	0xFE2
  7489                           fsr1l	equ	0xFE1
  7490                           indf2	equ	0xFDF
  7491                           postinc2	equ	0xFDE
  7492                           postdec2	equ	0xFDD
  7493                           plusw2	equ	0xFDB
  7494                           fsr2h	equ	0xFDA
  7495                           fsr2l	equ	0xFD9
  7496                           status	equ	0xFD8
  7497                           
  7498 ;; *************** function _hexStringToBytes *****************
  7499 ;; Defined at:
  7500 ;;		line 35 in file "hexutils.c"
  7501 ;; Parameters:    Size  Location     Type
  7502 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7503 ;;		 -> wrkbuf(80), 
  7504 ;;  size            1    6[BANK0 ] unsigned char 
  7505 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7506 ;;		 -> cmdbuf(80), 
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;  i               2   16[BANK0 ] int 
  7509 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7510 ;;		 -> cmdbuf(80), 
  7511 ;;  len             2   12[BANK0 ] int 
  7512 ;; Return value:  Size  Location     Type
  7513 ;;                  1    wreg      unsigned char 
  7514 ;; Registers used:
  7515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7516 ;; Tracked objects:
  7517 ;;		On entry : F/0
  7518 ;;		On exit  : F/0
  7519 ;;		Unchanged: 0/0
  7520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7521 ;;      Params:         0       5       0       0       0       0       0
  7522 ;;      Locals:         0       6       0       0       0       0       0
  7523 ;;      Temps:          0       3       0       0       0       0       0
  7524 ;;      Totals:         0      14       0       0       0       0       0
  7525 ;;Total ram usage:       14 bytes
  7526 ;; Hardware stack levels used:    1
  7527 ;; Hardware stack levels required when called:    4
  7528 ;; This function calls:
  7529 ;;		_strlen
  7530 ;;		_nibbleFromChar
  7531 ;; This function is called by:
  7532 ;;		_doModeSLCAN
  7533 ;; This function uses a non-reentrant model
  7534 ;;
  7535                           
  7536                           	psect	text3
  7537  002630                     __ptext3:
  7538                           	opt stack 0
  7539  002630                     _hexStringToBytes:
  7540                           	opt stack 24
  7541                           
  7542                           ; BSR set to: 0
  7543                           ;hexutils.c: 36: uint8_t *p;
  7544                           ;hexutils.c: 37: int len, i;
  7545                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7546                           
  7547                           ;incstack = 0
  7548                           ;incstack = 0
  7549  002630  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7550  002634  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7551  002638  EC80  F00D         	call	_strlen	;wreg free
  7552  00263C  90D8               	bcf	status,0,c
  7553  00263E  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7554  002640  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7555  002642  3160               	rrcf	?_strlen& (0+255),w,b
  7556  002644  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7557                           
  7558                           ; BSR set to: 0
  7559                           ;hexutils.c: 40: if (len > size) return 0;
  7560  002646  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7561  002648  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7562  00264A  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7563  00264C  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7564  00264E  0A80               	xorlw	128
  7565  002650  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7566  002652  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7567  002654  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7568  002656  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7569  002658  0A80               	xorlw	128
  7570  00265A  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7571  00265C  E202               	bc	l1591
  7572                           
  7573                           ; BSR set to: 0
  7574  00265E  0E00               	movlw	0
  7575  002660  D033               	goto	l1592
  7576  002662                     l1591:
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7580  002662  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7581  002664  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7582  002666  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7583  00266A  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7584  00266E  D022               	goto	l12502
  7585  002670                     l12496:
  7586                           
  7587                           ; BSR set to: 0
  7588                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7589  002670  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7590  002672  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7591  002674  6ED9               	movwf	fsr2l,c
  7592  002676  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7593  002678  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7594  00267A  6EDA               	movwf	fsr2h,c
  7595  00267C  EE10 F001          	lfsr	1,1
  7596  002680  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7597  002682  26E1               	addwf	fsr1l,f,c
  7598  002684  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7599  002686  22E2               	addwfc	fsr1h,f,c
  7600  002688  50E7               	movf	indf1,w,c
  7601  00268A  EC41  F00D         	call	_nibbleFromChar
  7602  00268E  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7603  002690  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7604  002694  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7605  002698  50E7               	movf	indf1,w,c
  7606  00269A  EC41  F00D         	call	_nibbleFromChar
  7607  00269E  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7608  0026A0  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7609  0026A2  0BF0               	andlw	240
  7610  0026A4  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7611  0026A6  6EDF               	movwf	indf2,c
  7612                           
  7613                           ; BSR set to: 0
  7614                           ;hexutils.c: 43: p += 2;
  7615  0026A8  0E02               	movlw	2
  7616  0026AA  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7617  0026AC  0E00               	movlw	0
  7618  0026AE  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7619                           
  7620                           ; BSR set to: 0
  7621  0026B0  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7622  0026B2  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7623  0026B4                     l12502:
  7624                           
  7625                           ; BSR set to: 0
  7626  0026B4  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7627  0026B6  0A80               	xorlw	128
  7628  0026B8  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7629  0026BA  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7630  0026BC  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7631  0026BE  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7632  0026C0  0A80               	xorlw	128
  7633  0026C2  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7634  0026C4  E3D5               	bnc	l12496
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;hexutils.c: 44: }
  7638                           ;hexutils.c: 46: return i;
  7639  0026C6  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7640  0026C8                     l1592:
  7641                           
  7642                           ; BSR set to: 0
  7643  0026C8  0012               	return	
  7644  0026CA                     __end_of_hexStringToBytes:
  7645                           	opt stack 0
  7646                           tblptru	equ	0xFF8
  7647                           tblptrh	equ	0xFF7
  7648                           tblptrl	equ	0xFF6
  7649                           tablat	equ	0xFF5
  7650                           prodh	equ	0xFF4
  7651                           prodl	equ	0xFF3
  7652                           intcon	equ	0xFF2
  7653                           indf0	equ	0xFEF
  7654                           postinc0	equ	0xFEE
  7655                           fsr0h	equ	0xFEA
  7656                           fsr0l	equ	0xFE9
  7657                           wreg	equ	0xFE8
  7658                           indf1	equ	0xFE7
  7659                           postinc1	equ	0xFE6
  7660                           postdec1	equ	0xFE5
  7661                           fsr1h	equ	0xFE2
  7662                           fsr1l	equ	0xFE1
  7663                           indf2	equ	0xFDF
  7664                           postinc2	equ	0xFDE
  7665                           postdec2	equ	0xFDD
  7666                           plusw2	equ	0xFDB
  7667                           fsr2h	equ	0xFDA
  7668                           fsr2l	equ	0xFD9
  7669                           status	equ	0xFD8
  7670                           
  7671 ;; *************** function _nibbleFromChar *****************
  7672 ;; Defined at:
  7673 ;;		line 20 in file "hexutils.c"
  7674 ;; Parameters:    Size  Location     Type
  7675 ;;  c               1    wreg     unsigned char 
  7676 ;; Auto vars:     Size  Location     Type
  7677 ;;  c               1    0[BANK0 ] unsigned char 
  7678 ;; Return value:  Size  Location     Type
  7679 ;;                  1    wreg      unsigned char 
  7680 ;; Registers used:
  7681 ;;		wreg, status,2, status,0
  7682 ;; Tracked objects:
  7683 ;;		On entry : F/0
  7684 ;;		On exit  : F/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7687 ;;      Params:         0       0       0       0       0       0       0
  7688 ;;      Locals:         0       1       0       0       0       0       0
  7689 ;;      Temps:          0       0       0       0       0       0       0
  7690 ;;      Totals:         0       1       0       0       0       0       0
  7691 ;;Total ram usage:        1 bytes
  7692 ;; Hardware stack levels used:    1
  7693 ;; Hardware stack levels required when called:    3
  7694 ;; This function calls:
  7695 ;;		Nothing
  7696 ;; This function is called by:
  7697 ;;		_hexStringToBytes
  7698 ;; This function uses a non-reentrant model
  7699 ;;
  7700                           
  7701                           	psect	text4
  7702  001A82                     __ptext4:
  7703                           	opt stack 0
  7704  001A82                     _nibbleFromChar:
  7705                           	opt stack 24
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;incstack = 0
  7709                           ;incstack = 0
  7710                           ;nibbleFromChar@c stored from wreg
  7711  001A82  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7712                           
  7713                           ; BSR set to: 0
  7714                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7715  001A86  0E2F               	movlw	47
  7716  001A88  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7717  001A8A  D006               	goto	l12772
  7718                           
  7719                           ; BSR set to: 0
  7720  001A8C  0E3A               	movlw	58
  7721  001A8E  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7722  001A90  D003               	goto	l12772
  7723                           
  7724                           ; BSR set to: 0
  7725  001A92  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7726  001A94  0FD0               	addlw	208
  7727  001A96  D013               	goto	l1586
  7728  001A98                     l12772:
  7729                           
  7730                           ; BSR set to: 0
  7731                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7732  001A98  0E60               	movlw	96
  7733  001A9A  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7734  001A9C  D006               	goto	l12780
  7735                           
  7736                           ; BSR set to: 0
  7737  001A9E  0E67               	movlw	103
  7738  001AA0  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7739  001AA2  D003               	goto	l12780
  7740                           
  7741                           ; BSR set to: 0
  7742  001AA4  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7743  001AA6  0FA9               	addlw	169
  7744  001AA8  D00A               	goto	l1586
  7745  001AAA                     l12780:
  7746                           
  7747                           ; BSR set to: 0
  7748                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7749  001AAA  0E40               	movlw	64
  7750  001AAC  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7751  001AAE  D006               	goto	l12788
  7752                           
  7753                           ; BSR set to: 0
  7754  001AB0  0E47               	movlw	71
  7755  001AB2  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7756  001AB4  D003               	goto	l12788
  7757                           
  7758                           ; BSR set to: 0
  7759  001AB6  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7760  001AB8  0FC9               	addlw	201
  7761  001ABA  D001               	goto	l1586
  7762  001ABC                     l12788:
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;hexutils.c: 24: return 255;
  7766  001ABC  0EFF               	movlw	255
  7767  001ABE                     l1586:
  7768                           
  7769                           ; BSR set to: 0
  7770  001ABE  0012               	return	
  7771  001AC0                     __end_of_nibbleFromChar:
  7772                           	opt stack 0
  7773                           tblptru	equ	0xFF8
  7774                           tblptrh	equ	0xFF7
  7775                           tblptrl	equ	0xFF6
  7776                           tablat	equ	0xFF5
  7777                           prodh	equ	0xFF4
  7778                           prodl	equ	0xFF3
  7779                           intcon	equ	0xFF2
  7780                           indf0	equ	0xFEF
  7781                           postinc0	equ	0xFEE
  7782                           fsr0h	equ	0xFEA
  7783                           fsr0l	equ	0xFE9
  7784                           wreg	equ	0xFE8
  7785                           indf1	equ	0xFE7
  7786                           postinc1	equ	0xFE6
  7787                           postdec1	equ	0xFE5
  7788                           fsr1h	equ	0xFE2
  7789                           fsr1l	equ	0xFE1
  7790                           indf2	equ	0xFDF
  7791                           postinc2	equ	0xFDE
  7792                           postdec2	equ	0xFDD
  7793                           plusw2	equ	0xFDB
  7794                           fsr2h	equ	0xFDA
  7795                           fsr2l	equ	0xFD9
  7796                           status	equ	0xFD8
  7797                           
  7798 ;; *************** function _receiveSendEventSLCAN *****************
  7799 ;; Defined at:
  7800 ;;		line 2090 in file "main.c"
  7801 ;; Parameters:    Size  Location     Type
  7802 ;;		None
  7803 ;; Auto vars:     Size  Location     Type
  7804 ;;  id              4   38[BANK0 ] unsigned long 
  7805 ;;  i               2   43[BANK0 ] int 
  7806 ;;  dlc             1   42[BANK0 ] unsigned char 
  7807 ;; Return value:  Size  Location     Type
  7808 ;;                  1    wreg      enum E15660
  7809 ;; Registers used:
  7810 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7811 ;; Tracked objects:
  7812 ;;		On entry : F/0
  7813 ;;		On exit  : 0/0
  7814 ;;		Unchanged: 0/0
  7815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7816 ;;      Params:         0       0       0       0       0       0       0
  7817 ;;      Locals:         0       7       0       0       0       0       0
  7818 ;;      Temps:          0       3       0       0       0       0       0
  7819 ;;      Totals:         0      10       0       0       0       0       0
  7820 ;;Total ram usage:       10 bytes
  7821 ;; Hardware stack levels used:    1
  7822 ;; Hardware stack levels required when called:    6
  7823 ;; This function calls:
  7824 ;;		_putsUSART
  7825 ;;		_WriteUSART
  7826 ;;		_strlen
  7827 ;;		_getCANFrame
  7828 ;;		_ultoa
  7829 ;;		_itoa
  7830 ;; This function is called by:
  7831 ;;		_doModeSLCAN
  7832 ;; This function uses a non-reentrant model
  7833 ;;
  7834                           
  7835                           	psect	text5
  7836  003E34                     __ptext5:
  7837                           	opt stack 0
  7838  003E34                     _receiveSendEventSLCAN:
  7839                           	opt stack 22
  7840                           
  7841                           ; BSR set to: 0
  7842                           ;main.c: 2091: int i;
  7843                           ;main.c: 2092: uint8_t dlc;
  7844                           ;main.c: 2093: uint32_t id;
  7845                           ;main.c: 2095: if (getCANFrame(&id, &dlc, vscpData)) {
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;incstack = 0
  7849                           ;incstack = 0
  7850  003E34  0E00               	movlw	high receiveSendEventSLCAN@dlc
  7851  003E36  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
  7852  003E38  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  7853  003E3A  6F6D               	movwf	?_getCANFrame& (0+255),b
  7854  003E3C  0E01               	movlw	high _vscpData
  7855  003E3E  0100               	movlb	0	; () banked
  7856  003E40  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
  7857  003E42  0EA4               	movlw	low _vscpData
  7858  003E44  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
  7859  003E46  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  7860  003E48  ECFD  F010         	call	_getCANFrame
  7861  003E4C  0900               	iorlw	0
  7862  003E4E  E101 D0AD          	bz	l1050
  7863                           
  7864                           ; BSR set to: 0
  7865                           ;main.c: 2098: cntRxFrames++;
  7866  003E52  2BD9               	incf	_cntRxFrames& (0+255),f,b
  7867  003E54  0E00               	movlw	0
  7868  003E56  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7869  003E58  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7870  003E5A  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7871                           
  7872                           ;main.c: 2099: cntRxBytes += dlc;
  7873  003E5C  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7874  003E5E  27D5               	addwf	_cntRxBytes& (0+255),f,b
  7875  003E60  0E00               	movlw	0
  7876  003E62  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7877  003E64  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7878  003E66  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7879  003E68                     l1023:
  7880                           
  7881                           ; BSR set to: 0
  7882  003E68  A2AC               	btfss	4012,1,c	;volatile
  7883  003E6A  D7FE               	goto	l1023
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;main.c: 2102: WriteUSART('T');
  7887  003E6C  0E54               	movlw	84
  7888  003E6E  ECEE  F00B         	call	_WriteUSART
  7889                           
  7890                           ;main.c: 2104: ultoa(wrkbuf, id, 16);
  7891  003E72  0E01               	movlw	high _wrkbuf
  7892  003E74  0100               	movlb	0	; () banked
  7893  003E76  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7894  003E78  0E54               	movlw	low _wrkbuf
  7895  003E7A  6F76               	movwf	?_ultoa& (0+255),b
  7896  003E7C  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  7897  003E80  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  7898  003E84  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  7899  003E88  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  7900  003E8C  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7901  003E8E  0E10               	movlw	16
  7902  003E90  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7903  003E92  ECC7  F017         	call	_ultoa	;wreg free
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;main.c: 2106: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7907  003E96  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7908  003E98  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7909  003E9A                     l1028:
  7910                           
  7911                           ; BSR set to: 0
  7912  003E9A  A2AC               	btfss	4012,1,c	;volatile
  7913  003E9C  D7FE               	goto	l1028
  7914                           
  7915                           ; BSR set to: 0
  7916                           ;main.c: 2108: WriteUSART('0');
  7917  003E9E  0E30               	movlw	48
  7918  003EA0  ECEE  F00B         	call	_WriteUSART
  7919                           
  7920                           ; BSR set to: 0
  7921  003EA4  D884               	call	PL92	;call to abstracted procedure
  7922  003EA6  B4D8               	btfsc	status,2,c
  7923  003EA8  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7924  003EAA  E3F7               	bnc	l1028
  7925                           
  7926                           ; BSR set to: 0
  7927                           ;main.c: 2109: }
  7928                           ;main.c: 2110: putsUSART(wrkbuf);
  7929  003EAC  0E01               	movlw	high _wrkbuf
  7930  003EAE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7931  003EB0  0E54               	movlw	low _wrkbuf
  7932  003EB2  6F61               	movwf	?_putsUSART& (0+255),b
  7933  003EB4  EC9B  F00E         	call	_putsUSART	;wreg free
  7934                           
  7935                           ;main.c: 2113: itoa(wrkbuf, dlc, 16);
  7936  003EB8  0E01               	movlw	high _wrkbuf
  7937  003EBA  0100               	movlb	0	; () banked
  7938  003EBC  6F71               	movwf	(?_itoa+1)& (0+255),b
  7939  003EBE  0E54               	movlw	low _wrkbuf
  7940  003EC0  6F70               	movwf	?_itoa& (0+255),b
  7941  003EC2  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  7942  003EC6  6B73               	clrf	(?_itoa+3)& (0+255),b
  7943  003EC8  6B75               	clrf	(?_itoa+5)& (0+255),b
  7944  003ECA  0E10               	movlw	16
  7945  003ECC  6F74               	movwf	(?_itoa+4)& (0+255),b
  7946  003ECE  ECCB  F00C         	call	_itoa	;wreg free
  7947  003ED2                     l1031:
  7948                           
  7949                           ; BSR set to: 0
  7950  003ED2  A2AC               	btfss	4012,1,c	;volatile
  7951  003ED4  D7FE               	goto	l1031
  7952                           
  7953                           ; BSR set to: 0
  7954                           ;main.c: 2115: WriteUSART(wrkbuf[0]);
  7955  003ED6  0101               	movlb	1	; () banked
  7956  003ED8  5154               	movf	_wrkbuf& (0+255),w,b
  7957  003EDA  ECEE  F00B         	call	_WriteUSART
  7958                           
  7959                           ;main.c: 2118: for (i = 0; i < dlc; i++) {
  7960  003EDE  0100               	movlb	0	; () banked
  7961  003EE0  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7962  003EE2  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7963  003EE4  D02D               	goto	l12454
  7964  003EE6                     l12442:
  7965                           
  7966                           ; BSR set to: 0
  7967                           ;main.c: 2119: itoa(wrkbuf, vscpData[i], 16);
  7968  003EE6  0E01               	movlw	high _wrkbuf
  7969  003EE8  0100               	movlb	0	; () banked
  7970  003EEA  6F71               	movwf	(?_itoa+1)& (0+255),b
  7971  003EEC  0E54               	movlw	low _wrkbuf
  7972  003EEE  6F70               	movwf	?_itoa& (0+255),b
  7973  003EF0  0EA4               	movlw	low _vscpData
  7974  003EF2  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  7975  003EF4  6ED9               	movwf	fsr2l,c
  7976  003EF6  0E01               	movlw	high _vscpData
  7977  003EF8  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  7978  003EFA  6EDA               	movwf	fsr2h,c
  7979  003EFC  50DF               	movf	indf2,w,c
  7980  003EFE  6F72               	movwf	(?_itoa+2)& (0+255),b
  7981  003F00  6B73               	clrf	(?_itoa+3)& (0+255),b
  7982  003F02  6B75               	clrf	(?_itoa+5)& (0+255),b
  7983  003F04  0E10               	movlw	16
  7984  003F06  6F74               	movwf	(?_itoa+4)& (0+255),b
  7985  003F08  ECCB  F00C         	call	_itoa	;wreg free
  7986                           
  7987                           ; BSR set to: 0
  7988                           ;main.c: 2121: if (2 != strlen(wrkbuf)) {
  7989  003F0C  0E01               	movlw	high _wrkbuf
  7990  003F0E  0100               	movlb	0	; () banked
  7991  003F10  6F61               	movwf	(?_strlen+1)& (0+255),b
  7992  003F12  0E54               	movlw	low _wrkbuf
  7993  003F14  6F60               	movwf	?_strlen& (0+255),b
  7994  003F16  EC80  F00D         	call	_strlen	;wreg free
  7995  003F1A  5160               	movf	?_strlen& (0+255),w,b
  7996  003F1C  0A02               	xorlw	2
  7997  003F1E  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7998  003F20  E005               	bz	l12450
  7999  003F22                     l1037:
  8000                           
  8001                           ; BSR set to: 0
  8002  003F22  A2AC               	btfss	4012,1,c	;volatile
  8003  003F24  D7FE               	goto	l1037
  8004                           
  8005                           ; BSR set to: 0
  8006                           ;main.c: 2123: WriteUSART('0');
  8007  003F26  0E30               	movlw	48
  8008  003F28  ECEE  F00B         	call	_WriteUSART
  8009  003F2C                     l12450:
  8010                           
  8011                           ;main.c: 2124: }
  8012                           ;main.c: 2126: putsUSART(wrkbuf);
  8013  003F2C  0E01               	movlw	high _wrkbuf
  8014  003F2E  0100               	movlb	0	; () banked
  8015  003F30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8016  003F32  0E54               	movlw	low _wrkbuf
  8017  003F34  6F61               	movwf	?_putsUSART& (0+255),b
  8018  003F36  EC9B  F00E         	call	_putsUSART	;wreg free
  8019  003F3A  0100               	movlb	0	; () banked
  8020  003F3C  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8021  003F3E  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8022  003F40                     l12454:
  8023                           
  8024                           ; BSR set to: 0
  8025  003F40  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8026  003F42  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8027  003F44  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8028  003F46  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8029  003F48  0A80               	xorlw	128
  8030  003F4A  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8031  003F4C  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8032  003F4E  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8033  003F50  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8034  003F52  0A80               	xorlw	128
  8035  003F54  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8036  003F56  E3C7               	bnc	l12442
  8037                           
  8038                           ; BSR set to: 0
  8039                           ;main.c: 2127: }
  8040                           ;main.c: 2130: if (nTimeStamp) {
  8041  003F58  51F2               	movf	_nTimeStamp& (0+255),w,b
  8042  003F5A  E023               	bz	l1047
  8043                           
  8044                           ; BSR set to: 0
  8045                           ;main.c: 2131: ultoa(wrkbuf, timer, 16);
  8046  003F5C  0E01               	movlw	high _wrkbuf
  8047  003F5E  0100               	movlb	0	; () banked
  8048  003F60  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8049  003F62  0E54               	movlw	low _wrkbuf
  8050  003F64  6F76               	movwf	?_ultoa& (0+255),b
  8051  003F66  C0E9  F078         	movff	_timer,?_ultoa+2	;volatile
  8052  003F6A  C0EA  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8053  003F6E  C0EB  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8054  003F72  C0EC  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8055  003F76  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8056  003F78  0E10               	movlw	16
  8057  003F7A  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8058  003F7C  ECC7  F017         	call	_ultoa	;wreg free
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;main.c: 2133: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8062  003F80  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8063  003F82  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8064  003F84                     l1044:
  8065                           
  8066                           ; BSR set to: 0
  8067  003F84  A2AC               	btfss	4012,1,c	;volatile
  8068  003F86  D7FE               	goto	l1044
  8069                           
  8070                           ; BSR set to: 0
  8071                           ;main.c: 2135: WriteUSART('0');
  8072  003F88  0E30               	movlw	48
  8073  003F8A  ECEE  F00B         	call	_WriteUSART
  8074                           
  8075                           ; BSR set to: 0
  8076  003F8E  D80F               	call	PL92	;call to abstracted procedure
  8077  003F90  B4D8               	btfsc	status,2,c
  8078  003F92  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8079  003F94  E3F7               	bnc	l1044
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;main.c: 2136: }
  8083                           ;main.c: 2137: putsUSART(wrkbuf);
  8084  003F96  0E01               	movlw	high _wrkbuf
  8085  003F98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8086  003F9A  0E54               	movlw	low _wrkbuf
  8087  003F9C  6F61               	movwf	?_putsUSART& (0+255),b
  8088  003F9E  EC9B  F00E         	call	_putsUSART	;wreg free
  8089  003FA2                     l1047:
  8090  003FA2  A2AC               	btfss	4012,1,c	;volatile
  8091  003FA4  D7FE               	goto	l1047
  8092                           
  8093                           ;main.c: 2141: WriteUSART(0x0d);
  8094  003FA6  0E0D               	movlw	13
  8095  003FA8  ECEE  F00B         	call	_WriteUSART
  8096  003FAC                     l1050:
  8097  003FAC  0012               	return	
  8098  003FAE                     __end_of_receiveSendEventSLCAN:
  8099                           	opt stack 0
  8100  003FAE                     PL92:
  8101                           	opt stack 22
  8102  003FAE  0100               	movlb	0	; () banked
  8103  003FB0  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8104  003FB2  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8105  003FB4  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8106  003FB6  0A80               	xorlw	128
  8107  003FB8  0F80               	addlw	-128
  8108  003FBA  0CB8               	retlw	184
  8109  003FBC                     __end_ofPL92:
  8110                           	opt stack 0
  8111                           tblptru	equ	0xFF8
  8112                           tblptrh	equ	0xFF7
  8113                           tblptrl	equ	0xFF6
  8114                           tablat	equ	0xFF5
  8115                           prodh	equ	0xFF4
  8116                           prodl	equ	0xFF3
  8117                           intcon	equ	0xFF2
  8118                           indf0	equ	0xFEF
  8119                           postinc0	equ	0xFEE
  8120                           fsr0h	equ	0xFEA
  8121                           fsr0l	equ	0xFE9
  8122                           wreg	equ	0xFE8
  8123                           indf1	equ	0xFE7
  8124                           postinc1	equ	0xFE6
  8125                           postdec1	equ	0xFE5
  8126                           fsr1h	equ	0xFE2
  8127                           fsr1l	equ	0xFE1
  8128                           indf2	equ	0xFDF
  8129                           postinc2	equ	0xFDE
  8130                           postdec2	equ	0xFDD
  8131                           plusw2	equ	0xFDB
  8132                           fsr2h	equ	0xFDA
  8133                           fsr2l	equ	0xFD9
  8134                           status	equ	0xFD8
  8135                           
  8136 ;; *************** function _ultoa *****************
  8137 ;; Defined at:
  8138 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8139 ;; Parameters:    Size  Location     Type
  8140 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8141 ;;		 -> wrkbuf(80), 
  8142 ;;  val             4   24[BANK0 ] unsigned long 
  8143 ;;  base            2   28[BANK0 ] int 
  8144 ;; Auto vars:     Size  Location     Type
  8145 ;;  v               4   30[BANK0 ] unsigned long 
  8146 ;;  c               1   34[BANK0 ] unsigned char 
  8147 ;; Return value:  Size  Location     Type
  8148 ;;                  2   22[BANK0 ] PTR unsigned char 
  8149 ;; Registers used:
  8150 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8151 ;; Tracked objects:
  8152 ;;		On entry : F/0
  8153 ;;		On exit  : F/0
  8154 ;;		Unchanged: 0/0
  8155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8156 ;;      Params:         0       8       0       0       0       0       0
  8157 ;;      Locals:         0       5       0       0       0       0       0
  8158 ;;      Temps:          0       0       0       0       0       0       0
  8159 ;;      Totals:         0      13       0       0       0       0       0
  8160 ;;Total ram usage:       13 bytes
  8161 ;; Hardware stack levels used:    1
  8162 ;; Hardware stack levels required when called:    4
  8163 ;; This function calls:
  8164 ;;		___lldiv
  8165 ;;		___llmod
  8166 ;; This function is called by:
  8167 ;;		_receiveSendEventSLCAN
  8168 ;; This function uses a non-reentrant model
  8169 ;;
  8170                           
  8171                           	psect	text6
  8172  002F8E                     __ptext6:
  8173                           	opt stack 0
  8174  002F8E                     _ultoa:
  8175                           	opt stack 23
  8176                           
  8177                           ; BSR set to: 0
  8178                           
  8179                           ;incstack = 0
  8180                           ;incstack = 0
  8181  002F8E  C078  F07E         	movff	ultoa@val,ultoa@v
  8182  002F92  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8183  002F96  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8184  002F9A  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8185  002F9E                     l12612:
  8186                           
  8187                           ; BSR set to: 0
  8188  002F9E  C07E  F060         	movff	ultoa@v,?___lldiv
  8189  002FA2  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8190  002FA6  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8191  002FAA  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8192  002FAE  D858               	call	PL70	;call to abstracted procedure
  8193  002FB0  ECC2  F010         	call	___lldiv	;wreg free
  8194  002FB4  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8195  002FB8  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8196  002FBC  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8197  002FC0  C060  F07E         	movff	?___lldiv,ultoa@v
  8198                           
  8199                           ; BSR set to: 0
  8200  002FC4  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8201  002FC6  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8202                           
  8203                           ; BSR set to: 0
  8204  002FC8  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8205  002FCA  117E               	iorwf	ultoa@v& (0+255),w,b
  8206  002FCC  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8207  002FCE  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8208  002FD0  E1E6               	bnz	l12612
  8209                           
  8210                           ; BSR set to: 0
  8211  002FD2  C076  FFD9         	movff	ultoa@buf,fsr2l
  8212  002FD6  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8213  002FDA  6ADF               	clrf	indf2,c
  8214                           
  8215                           ; BSR set to: 0
  8216  002FDC  0776               	decf	ultoa@buf& (0+255),f,b
  8217  002FDE  A0D8               	btfss	status,0,c
  8218  002FE0  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8219  002FE2                     l12622:
  8220                           
  8221                           ; BSR set to: 0
  8222  002FE2  C078  F06D         	movff	ultoa@val,?___llmod
  8223  002FE6  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8224  002FEA  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8225  002FEE  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8226  002FF2  C07C  F071         	movff	ultoa@base,?___llmod+4
  8227  002FF6  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8228  002FFA  0E00               	movlw	0
  8229  002FFC  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8230  002FFE  0EFF               	movlw	-1
  8231  003000  6F73               	movwf	(?___llmod+6)& (0+255),b
  8232  003002  6F74               	movwf	(?___llmod+7)& (0+255),b
  8233  003004  EC51  F00F         	call	___llmod	;wreg free
  8234  003008  516D               	movf	?___llmod& (0+255),w,b
  8235  00300A  6F82               	movwf	ultoa@c& (0+255),b
  8236                           
  8237                           ; BSR set to: 0
  8238  00300C  C078  F060         	movff	ultoa@val,?___lldiv
  8239  003010  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8240  003014  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8241  003018  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8242  00301C  D821               	call	PL70	;call to abstracted procedure
  8243  00301E  ECC2  F010         	call	___lldiv	;wreg free
  8244  003022  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8245  003026  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8246  00302A  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8247  00302E  C060  F078         	movff	?___lldiv,ultoa@val
  8248                           
  8249                           ; BSR set to: 0
  8250  003032  0E09               	movlw	9
  8251  003034  6582               	cpfsgt	ultoa@c& (0+255),b
  8252  003036  D002               	goto	l2403
  8253                           
  8254                           ; BSR set to: 0
  8255  003038  0E07               	movlw	7
  8256  00303A  2782               	addwf	ultoa@c& (0+255),f,b
  8257  00303C                     l2403:
  8258                           
  8259                           ; BSR set to: 0
  8260  00303C  0E30               	movlw	48
  8261  00303E  2782               	addwf	ultoa@c& (0+255),f,b
  8262                           
  8263                           ; BSR set to: 0
  8264  003040  C076  FFD9         	movff	ultoa@buf,fsr2l
  8265  003044  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8266  003048  C082  FFDF         	movff	ultoa@c,indf2
  8267                           
  8268                           ; BSR set to: 0
  8269  00304C  0776               	decf	ultoa@buf& (0+255),f,b
  8270  00304E  A0D8               	btfss	status,0,c
  8271  003050  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8272                           
  8273                           ; BSR set to: 0
  8274  003052  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8275  003054  1178               	iorwf	ultoa@val& (0+255),w,b
  8276  003056  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8277  003058  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8278  00305A  B4D8               	btfsc	status,2,c
  8279                           
  8280                           ; BSR set to: 0
  8281  00305C  0012               	return	
  8282  00305E  D7C1               	goto	l12622
  8283  003060                     __end_of_ultoa:
  8284                           	opt stack 0
  8285  003060                     PL70:
  8286                           	opt stack 23
  8287  003060  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8288  003064  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8289  003068  0E00               	movlw	0
  8290  00306A  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8291  00306C  0EFF               	movlw	-1
  8292  00306E  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8293  003070  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8294  003072  0012               	return	
  8295  003074                     __end_ofPL70:
  8296                           	opt stack 0
  8297                           tblptru	equ	0xFF8
  8298                           tblptrh	equ	0xFF7
  8299                           tblptrl	equ	0xFF6
  8300                           tablat	equ	0xFF5
  8301                           prodh	equ	0xFF4
  8302                           prodl	equ	0xFF3
  8303                           intcon	equ	0xFF2
  8304                           indf0	equ	0xFEF
  8305                           postinc0	equ	0xFEE
  8306                           fsr0h	equ	0xFEA
  8307                           fsr0l	equ	0xFE9
  8308                           wreg	equ	0xFE8
  8309                           indf1	equ	0xFE7
  8310                           postinc1	equ	0xFE6
  8311                           postdec1	equ	0xFE5
  8312                           fsr1h	equ	0xFE2
  8313                           fsr1l	equ	0xFE1
  8314                           indf2	equ	0xFDF
  8315                           postinc2	equ	0xFDE
  8316                           postdec2	equ	0xFDD
  8317                           plusw2	equ	0xFDB
  8318                           fsr2h	equ	0xFDA
  8319                           fsr2l	equ	0xFD9
  8320                           status	equ	0xFD8
  8321                           
  8322 ;; *************** function _doModeVscp *****************
  8323 ;; Defined at:
  8324 ;;		line 1087 in file "main.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;		None
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;  c               1   87[BANK0 ] unsigned char 
  8329 ;; Return value:  Size  Location     Type
  8330 ;;		None               void
  8331 ;; Registers used:
  8332 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8333 ;; Tracked objects:
  8334 ;;		On entry : F/0
  8335 ;;		On exit  : E/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8338 ;;      Params:         0       0       0       0       0       0       0
  8339 ;;      Locals:         0       1       0       0       0       0       0
  8340 ;;      Temps:          0       0       0       0       0       0       0
  8341 ;;      Totals:         0       1       0       0       0       0       0
  8342 ;;Total ram usage:        1 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    7
  8345 ;; This function calls:
  8346 ;;		_fifo_read
  8347 ;;		_ECANSetOperationMode
  8348 ;;		_receiveSendMultiEventCANAL
  8349 ;;		_receiveSendEventCANAL
  8350 ;;		_calcCRC
  8351 ;;		_sendVSCPDriverErrorFrame
  8352 ;;		_sendVSCPDriverAck
  8353 ;;		_receiveVSCPModeCanalMsg
  8354 ;;		_sendVSCPDriverNack
  8355 ;;		_receiveVSCPModeMultiCanalMsg
  8356 ;;		_sendVSCPModeCapabilities
  8357 ;;		_sendVSCPDriverCommandReply
  8358 ;; This function is called by:
  8359 ;;		_main
  8360 ;; This function uses a non-reentrant model
  8361 ;;
  8362                           
  8363                           	psect	text7
  8364  004324                     __ptext7:
  8365                           	opt stack 0
  8366  004324                     _doModeVscp:
  8367                           	opt stack 22
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;main.c: 1088: uint8_t c;
  8371                           ;main.c: 1091: if ( !bSilent ) {
  8372                           
  8373                           ; BSR set to: 0
  8374                           ;incstack = 0
  8375                           ;incstack = 0
  8376  004324  0101               	movlb	1	; () banked
  8377  004326  6701               	tstfsz	_bSilent& (0+255),b
  8378  004328  D00B               	goto	l10648
  8379                           
  8380                           ; BSR set to: 1
  8381                           ;main.c: 1092: if ( caps.maxCanalFrames > 1 ) {
  8382  00432A  0100               	movlb	0	; () banked
  8383  00432C  EE20  F0F6         	lfsr	2,_caps+1
  8384  004330  0E01               	movlw	1
  8385  004332  64DF               	cpfsgt	indf2,c
  8386  004334  D003               	goto	l10646
  8387                           
  8388                           ; BSR set to: 0
  8389                           ;main.c: 1095: receiveSendMultiEventCANAL();
  8390  004336  EC5C  F01E         	call	_receiveSendMultiEventCANAL	;wreg free
  8391                           
  8392                           ;main.c: 1096: }
  8393  00433A  D002               	goto	l10648
  8394  00433C                     l10646:
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;main.c: 1097: else {
  8398                           ;main.c: 1100: receiveSendEventCANAL();
  8399  00433C  EC61  F01C         	call	_receiveSendEventCANAL	;wreg free
  8400  004340                     l10648:
  8401                           
  8402                           ;main.c: 1101: }
  8403                           ;main.c: 1102: }
  8404                           ;main.c: 1105: (INTCONbits.GIE = 0);
  8405  004340  9EF2               	bcf	intcon,7,c	;volatile
  8406                           
  8407                           ;main.c: 1107: if ( 1 == fifo_read(&serialInputFifo, &c, 1 ) ) {
  8408  004342  0100               	movlb	0	; () banked
  8409  004344  0E00               	movlw	high doModeVscp@c
  8410  004346  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8411  004348  0EB7               	movlw	low doModeVscp@c
  8412  00434A  6F60               	movwf	?_fifo_read& (0+255),b
  8413  00434C  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  8414  00434E  0E01               	movlw	1
  8415  004350  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8416  004352  0E23               	movlw	_serialInputFifo& (0+255)
  8417  004354  ECBA  F015         	call	_fifo_read
  8418  004358  0560               	decf	?_fifo_read& (0+255),w,b
  8419  00435A  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8420  00435C  E001 D0B9          	bnz	l10792
  8421                           
  8422                           ; BSR set to: 0
  8423                           ;main.c: 1110: (INTCONbits.GIE = 1);
  8424  004360  8EF2               	bsf	intcon,7,c	;volatile
  8425                           
  8426                           ;main.c: 1112: if ( 0 == stateVscpDriver ) {
  8427  004362  67F4               	tstfsz	_stateVscpDriver& (0+255),b
  8428  004364  D00E               	goto	l10668
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;main.c: 1113: if ( bDLE ) {
  8432  004366  51ED               	movf	_bDLE& (0+255),w,b
  8433  004368  E009               	bz	l10664
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;main.c: 1114: bDLE = 0;
  8437  00436A  6BED               	clrf	_bDLE& (0+255),b
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;main.c: 1117: if ( 0x02 == c ) {
  8441  00436C  51B7               	movf	doModeVscp@c& (0+255),w,b
  8442  00436E  0A02               	xorlw	2
  8443  004370  E129               	bnz	l10702
  8444                           
  8445                           ; BSR set to: 0
  8446                           ;main.c: 1118: stateVscpDriver = 1;
  8447  004372  0E01               	movlw	1
  8448  004374  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8449                           
  8450                           ; BSR set to: 0
  8451                           ;main.c: 1119: pos = 0;
  8452  004376  0101               	movlb	1	; () banked
  8453  004378  6B02               	clrf	_pos& (0+255),b
  8454  00437A  D024               	goto	l10702
  8455  00437C                     l10664:
  8456                           
  8457                           ; BSR set to: 0
  8458                           ;main.c: 1122: else {
  8459                           ;main.c: 1123: bDLE = 1;
  8460  00437C  0E01               	movlw	1
  8461  00437E  6FED               	movwf	_bDLE& (0+255),b
  8462  004380  D0A9               	goto	l658
  8463  004382                     l10668:
  8464                           
  8465                           ; BSR set to: 0
  8466                           ;main.c: 1127: else if ( 1 == stateVscpDriver ) {
  8467  004382  05F4               	decf	_stateVscpDriver& (0+255),w,b
  8468  004384  E11F               	bnz	l10702
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;main.c: 1128: if (bDLE) {
  8472  004386  51ED               	movf	_bDLE& (0+255),w,b
  8473  004388  E00F               	bz	l10686
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;main.c: 1130: bDLE = 0;
  8477  00438A  6BED               	clrf	_bDLE& (0+255),b
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;main.c: 1133: if (0x03 == c) {
  8481  00438C  51B7               	movf	doModeVscp@c& (0+255),w,b
  8482  00438E  0A03               	xorlw	3
  8483  004390  E103               	bnz	l10678
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;main.c: 1134: stateVscpDriver = 2;
  8487  004392  0E02               	movlw	2
  8488  004394  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8489                           
  8490                           ;main.c: 1135: }
  8491  004396  D016               	goto	l10702
  8492  004398                     l10678:
  8493                           
  8494                           ; BSR set to: 0
  8495                           ;main.c: 1136: else if (0x10 == c) {
  8496  004398  51B7               	movf	doModeVscp@c& (0+255),w,b
  8497  00439A  0A10               	xorlw	16
  8498  00439C  E113               	bnz	l10702
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;main.c: 1138: cmdbuf[ pos++ ] = c;
  8502  00439E  D89B               	call	PL18	;call to abstracted procedure
  8503  0043A0  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8504                           
  8505                           ; BSR set to: 0
  8506  0043A4  2B02               	incf	_pos& (0+255),f,b
  8507  0043A6  D096               	goto	l658
  8508  0043A8                     l10686:
  8509                           
  8510                           ; BSR set to: 0
  8511                           ;main.c: 1142: else {
  8512                           ;main.c: 1143: if (0x10 == c) {
  8513  0043A8  51B7               	movf	doModeVscp@c& (0+255),w,b
  8514  0043AA  0A10               	xorlw	16
  8515  0043AC  E0E7               	bz	l10664
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;main.c: 1147: else {
  8519                           ;main.c: 1149: cmdbuf[ pos++ ] = c;
  8520  0043AE  D893               	call	PL18	;call to abstracted procedure
  8521  0043B0  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8522                           
  8523                           ; BSR set to: 0
  8524  0043B4  2B02               	incf	_pos& (0+255),f,b
  8525                           
  8526                           ; BSR set to: 1
  8527                           ;main.c: 1151: if (pos >= 128u) {
  8528  0043B6  0E7F               	movlw	127
  8529  0043B8  6502               	cpfsgt	_pos& (0+255),b
  8530  0043BA  D08C               	goto	l658
  8531                           
  8532                           ; BSR set to: 1
  8533                           ;main.c: 1154: pos = 0;
  8534  0043BC  6B02               	clrf	_pos& (0+255),b
  8535                           
  8536                           ;main.c: 1155: stateVscpDriver = 0;
  8537  0043BE  0100               	movlb	0	; () banked
  8538  0043C0  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8539  0043C2  D088               	goto	l658
  8540  0043C4                     l10702:
  8541                           
  8542                           ;main.c: 1159: }
  8543                           ;main.c: 1160: }
  8544                           ;main.c: 1161: }
  8545                           ;main.c: 1166: if (2 == stateVscpDriver) {
  8546  0043C4  0100               	movlb	0	; () banked
  8547  0043C6  51F4               	movf	_stateVscpDriver& (0+255),w,b
  8548  0043C8  0A02               	xorlw	2
  8549  0043CA  E001 D082          	bnz	l10792
  8550                           
  8551                           ; BSR set to: 0
  8552                           ;main.c: 1169: stateVscpDriver = 0;
  8553  0043CE  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;main.c: 1182: if (calcCRC(cmdbuf, pos)) {
  8557  0043D0  0E01               	movlw	high _cmdbuf
  8558  0043D2  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8559  0043D4  0E04               	movlw	low _cmdbuf
  8560  0043D6  6F6C               	movwf	?_calcCRC& (0+255),b
  8561  0043D8  C102  F06E         	movff	_pos,?_calcCRC+2
  8562  0043DC  EC68  F00C         	call	_calcCRC	;wreg free
  8563  0043E0  0900               	iorlw	0
  8564  0043E2  E003               	bz	l10710
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;main.c: 1183: sendVSCPDriverErrorFrame(1);
  8568  0043E4  0E01               	movlw	1
  8569  0043E6  EC5B  F015         	call	_sendVSCPDriverErrorFrame
  8570  0043EA                     l10710:
  8571                           
  8572                           ;main.c: 1184: }
  8573                           ;main.c: 1187: if (0 ==
  8574                           ;main.c: 1188: cmdbuf[ 0 ]) {
  8575  0043EA  0101               	movlb	1	; () banked
  8576  0043EC  6704               	tstfsz	_cmdbuf& (0+255),b
  8577  0043EE  D003               	goto	l10714
  8578  0043F0                     l10712:
  8579                           
  8580                           ;main.c: 1189: sendVSCPDriverAck();
  8581  0043F0  EC05  F014         	call	_sendVSCPDriverAck	;wreg free
  8582                           
  8583                           ;main.c: 1190: }
  8584  0043F4  D06A               	goto	l10788
  8585  0043F6                     l10714:
  8586                           
  8587                           ; BSR set to: 1
  8588                           ;main.c: 1192: else if (1 ==
  8589                           ;main.c: 1193: cmdbuf[ 0 ]) {
  8590  0043F6  0504               	decf	_cmdbuf& (0+255),w,b
  8591  0043F8  E068               	bz	l10788
  8592                           
  8593                           ; BSR set to: 1
  8594                           ;main.c: 1197: else if (2 ==
  8595                           ;main.c: 1198: cmdbuf[ 0 ]) {
  8596  0043FA  5104               	movf	_cmdbuf& (0+255),w,b
  8597  0043FC  0A02               	xorlw	2
  8598  0043FE  E107               	bnz	l10726
  8599                           
  8600                           ; BSR set to: 1
  8601                           ;main.c: 1199: if ( receiveVSCPModeCanalMsg() ) {
  8602  004400  EC59  F017         	call	_receiveVSCPModeCanalMsg	;wreg free
  8603  004404  0900               	iorlw	0
  8604  004406  E1F4               	bnz	l10712
  8605  004408                     l10724:
  8606                           
  8607                           ;main.c: 1202: else {
  8608                           ;main.c: 1203: sendVSCPDriverNack();
  8609  004408  EC55  F014         	call	_sendVSCPDriverNack	;wreg free
  8610  00440C  D05E               	goto	l10788
  8611  00440E                     l10726:
  8612                           
  8613                           ; BSR set to: 1
  8614                           ;main.c: 1207: else if (6 ==
  8615                           ;main.c: 1208: cmdbuf[ 0 ]) {
  8616  00440E  5104               	movf	_cmdbuf& (0+255),w,b
  8617  004410  0A06               	xorlw	6
  8618  004412  E103               	bnz	l10734
  8619                           
  8620                           ; BSR set to: 1
  8621                           ;main.c: 1209: if (receiveVSCPModeMultiCanalMsg()) {
  8622  004414  ECCD  F00B         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8623  004418  D7F5               	goto	L4
  8624  00441A                     l10734:
  8625                           
  8626                           ; BSR set to: 1
  8627                           ;main.c: 1217: else if (6 ==
  8628                           ;main.c: 1218: cmdbuf[ 0 ]) {
  8629  00441A  5104               	movf	_cmdbuf& (0+255),w,b
  8630  00441C  0A06               	xorlw	6
  8631  00441E  E0F4               	bz	l10724
  8632                           
  8633                           ; BSR set to: 1
  8634                           ;main.c: 1222: else if (3 ==
  8635                           ;main.c: 1223: cmdbuf[ 0 ]) {
  8636  004420  5104               	movf	_cmdbuf& (0+255),w,b
  8637  004422  0A03               	xorlw	3
  8638  004424  E0F1               	bz	l10724
  8639                           
  8640                           ; BSR set to: 1
  8641                           ;main.c: 1227: else if (4 ==
  8642                           ;main.c: 1228: cmdbuf[ 0 ]) {
  8643  004426  5104               	movf	_cmdbuf& (0+255),w,b
  8644  004428  0A04               	xorlw	4
  8645  00442A  E0EE               	bz	l10724
  8646                           
  8647                           ; BSR set to: 1
  8648                           ;main.c: 1232: else if (8 ==
  8649                           ;main.c: 1233: cmdbuf[ 0 ]) {
  8650  00442C  5104               	movf	_cmdbuf& (0+255),w,b
  8651  00442E  0A08               	xorlw	8
  8652  004430  E107               	bnz	l10752
  8653                           
  8654                           ; BSR set to: 1
  8655                           ;main.c: 1234: caps.maxVscpFrames = cmdbuf[ 5 ];
  8656  004432  C109  F0F5         	movff	_cmdbuf+5,_caps
  8657                           
  8658                           ;main.c: 1235: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8659  004436  C10A  F0F6         	movff	_cmdbuf+6,_caps+1
  8660                           
  8661                           ; BSR set to: 1
  8662                           ;main.c: 1236: sendVSCPModeCapabilities();
  8663  00443A  EC00  F015         	call	_sendVSCPModeCapabilities	;wreg free
  8664                           
  8665                           ;main.c: 1237: }
  8666  00443E  D045               	goto	l10788
  8667  004440                     l10752:
  8668                           
  8669                           ; BSR set to: 1
  8670                           ;main.c: 1239: else if (255 ==
  8671                           ;main.c: 1240: cmdbuf[ 0 ]) {
  8672  004440  2904               	incf	_cmdbuf& (0+255),w,b
  8673  004442  E140               	bnz	l10786
  8674                           
  8675                           ; BSR set to: 1
  8676                           ;main.c: 1242: if (cmdbuf[ 5 ] ==
  8677                           ;main.c: 1243: 0) {
  8678  004444  6709               	tstfsz	(_cmdbuf+5)& (0+255),b
  8679  004446  D006               	goto	l10758
  8680                           
  8681                           ; BSR set to: 1
  8682                           ;main.c: 1244: sendVSCPDriverCommandReply(0, 0);
  8683  004448  0E00               	movlw	0
  8684  00444A  0100               	movlb	0	; () banked
  8685  00444C  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8686  00444E  ECF0  F016         	call	_sendVSCPDriverCommandReply
  8687                           
  8688                           ;main.c: 1245: }
  8689  004452  D03B               	goto	l10788
  8690  004454                     l10758:
  8691                           
  8692                           ; BSR set to: 1
  8693                           ;main.c: 1247: else if (cmdbuf[ 5 ] ==
  8694                           ;main.c: 1248: 1) {
  8695  004454  0509               	decf	(_cmdbuf+5)& (0+255),w,b
  8696  004456  E109               	bnz	l10764
  8697                           
  8698                           ; BSR set to: 1
  8699                           ;main.c: 1249: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8700  004458  0E00               	movlw	0
  8701  00445A  EC03  F00C         	call	_ECANSetOperationMode
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;main.c: 1250: sendVSCPDriverCommandReply(0, 1);
  8705  00445E  0E01               	movlw	1
  8706  004460  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8707  004462  0E00               	movlw	0
  8708  004464  ECF0  F016         	call	_sendVSCPDriverCommandReply
  8709                           
  8710                           ;main.c: 1251: }
  8711  004468  D030               	goto	l10788
  8712  00446A                     l10764:
  8713                           
  8714                           ; BSR set to: 1
  8715                           ;main.c: 1253: else if (cmdbuf[ 5 ] ==
  8716                           ;main.c: 1254: 2) {
  8717  00446A  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8718  00446C  0A02               	xorlw	2
  8719  00446E  E109               	bnz	l10770
  8720                           
  8721                           ; BSR set to: 1
  8722                           ;main.c: 1255: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8723  004470  0E40               	movlw	64
  8724  004472  EC03  F00C         	call	_ECANSetOperationMode
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;main.c: 1256: sendVSCPDriverCommandReply(0, 2);
  8728  004476  0E02               	movlw	2
  8729  004478  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8730  00447A  0E00               	movlw	0
  8731  00447C  ECF0  F016         	call	_sendVSCPDriverCommandReply
  8732                           
  8733                           ;main.c: 1257: }
  8734  004480  D024               	goto	l10788
  8735  004482                     l10770:
  8736                           
  8737                           ; BSR set to: 1
  8738                           ;main.c: 1259: else if (cmdbuf[ 5 ] ==
  8739                           ;main.c: 1260: 3) {
  8740  004482  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8741  004484  0A03               	xorlw	3
  8742  004486  E109               	bnz	l10776
  8743                           
  8744                           ; BSR set to: 1
  8745                           ;main.c: 1261: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8746  004488  0E60               	movlw	96
  8747  00448A  EC03  F00C         	call	_ECANSetOperationMode
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;main.c: 1262: sendVSCPDriverCommandReply(0, 3);
  8751  00448E  0E03               	movlw	3
  8752  004490  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8753  004492  0E00               	movlw	0
  8754  004494  ECF0  F016         	call	_sendVSCPDriverCommandReply
  8755                           
  8756                           ;main.c: 1263: }
  8757  004498  D018               	goto	l10788
  8758  00449A                     l10776:
  8759                           
  8760                           ; BSR set to: 1
  8761                           ;main.c: 1265: else if (cmdbuf[ 5 ] ==
  8762                           ;main.c: 1266: 4) {
  8763  00449A  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8764  00449C  0A04               	xorlw	4
  8765  00449E  E109               	bnz	l10782
  8766                           
  8767                           ; BSR set to: 1
  8768                           ;main.c: 1267: ECANSetOperationMode(0x20);
  8769  0044A0  0E20               	movlw	32
  8770  0044A2  EC03  F00C         	call	_ECANSetOperationMode
  8771                           
  8772                           ; BSR set to: 0
  8773                           ;main.c: 1268: sendVSCPDriverCommandReply(0, 4);
  8774  0044A6  0E04               	movlw	4
  8775  0044A8  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8776  0044AA  0E00               	movlw	0
  8777  0044AC  ECF0  F016         	call	_sendVSCPDriverCommandReply
  8778                           
  8779                           ;main.c: 1269: }
  8780  0044B0  D00C               	goto	l10788
  8781  0044B2                     l10782:
  8782                           
  8783                           ; BSR set to: 1
  8784                           ;main.c: 1271: else if (cmdbuf[ 5 ] ==
  8785                           ;main.c: 1272: 5) {
  8786  0044B2  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8787  0044B4  0A05               	xorlw	5
  8788  0044B6  E109               	bnz	l10788
  8789                           
  8790                           ; BSR set to: 1
  8791                           ;main.c: 1273: sendVSCPDriverCommandReply(0, 0);
  8792  0044B8  0E00               	movlw	0
  8793  0044BA  0100               	movlb	0	; () banked
  8794  0044BC  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8795  0044BE  ECF0  F016         	call	_sendVSCPDriverCommandReply
  8796  0044C2  D003               	goto	l10788
  8797  0044C4                     l10786:
  8798                           
  8799                           ; BSR set to: 1
  8800                           ;main.c: 1277: else {
  8801                           ;main.c: 1279: sendVSCPDriverErrorFrame(2);
  8802  0044C4  0E02               	movlw	2
  8803  0044C6  EC5B  F015         	call	_sendVSCPDriverErrorFrame
  8804  0044CA                     l10788:
  8805                           
  8806                           ;main.c: 1280: }
  8807                           ;main.c: 1283: pos = 0;
  8808  0044CA  0101               	movlb	1	; () banked
  8809  0044CC  6B02               	clrf	_pos& (0+255),b
  8810                           
  8811                           ; BSR set to: 1
  8812                           ;main.c: 1284: stateVscpDriver = 0;
  8813  0044CE  0100               	movlb	0	; () banked
  8814  0044D0  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8815  0044D2                     l10792:
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;main.c: 1286: }
  8819                           ;main.c: 1288: }
  8820                           ;main.c: 1291: (INTCONbits.GIE = 1);
  8821  0044D2  8EF2               	bsf	intcon,7,c	;volatile
  8822  0044D4                     l658:
  8823  0044D4  0012               	return	
  8824  0044D6                     __end_of_doModeVscp:
  8825                           	opt stack 0
  8826  0044D6                     PL18:
  8827                           	opt stack 19
  8828  0044D6  0101               	movlb	1	; () banked
  8829  0044D8  0E04               	movlw	low _cmdbuf
  8830  0044DA  2502               	addwf	_pos& (0+255),w,b
  8831  0044DC  6ED9               	movwf	fsr2l,c
  8832  0044DE  6ADA               	clrf	fsr2h,c
  8833  0044E0  0E01               	movlw	high _cmdbuf
  8834  0044E2  22DA               	addwfc	fsr2h,f,c
  8835  0044E4  0012               	return	
  8836  0044E6                     __end_ofPL18:
  8837                           	opt stack 0
  8838                           tblptru	equ	0xFF8
  8839                           tblptrh	equ	0xFF7
  8840                           tblptrl	equ	0xFF6
  8841                           tablat	equ	0xFF5
  8842                           prodh	equ	0xFF4
  8843                           prodl	equ	0xFF3
  8844                           intcon	equ	0xFF2
  8845                           indf0	equ	0xFEF
  8846                           postinc0	equ	0xFEE
  8847                           fsr0h	equ	0xFEA
  8848                           fsr0l	equ	0xFE9
  8849                           wreg	equ	0xFE8
  8850                           indf1	equ	0xFE7
  8851                           postinc1	equ	0xFE6
  8852                           postdec1	equ	0xFE5
  8853                           fsr1h	equ	0xFE2
  8854                           fsr1l	equ	0xFE1
  8855                           indf2	equ	0xFDF
  8856                           postinc2	equ	0xFDE
  8857                           postdec2	equ	0xFDD
  8858                           plusw2	equ	0xFDB
  8859                           fsr2h	equ	0xFDA
  8860                           fsr2l	equ	0xFD9
  8861                           status	equ	0xFD8
  8862                           
  8863 ;; *************** function _sendVSCPDriverCommandReply *****************
  8864 ;; Defined at:
  8865 ;;		line 1673 in file "main.c"
  8866 ;; Parameters:    Size  Location     Type
  8867 ;;  cmdReplyCode    1    wreg     unsigned char 
  8868 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  8869 ;; Auto vars:     Size  Location     Type
  8870 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  8871 ;;  crc             1   17[BANK0 ] unsigned char 
  8872 ;; Return value:  Size  Location     Type
  8873 ;;		None               void
  8874 ;; Registers used:
  8875 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8876 ;; Tracked objects:
  8877 ;;		On entry : F/0
  8878 ;;		On exit  : 0/0
  8879 ;;		Unchanged: 0/0
  8880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8881 ;;      Params:         0       1       0       0       0       0       0
  8882 ;;      Locals:         0       2       0       0       0       0       0
  8883 ;;      Temps:          0       0       0       0       0       0       0
  8884 ;;      Totals:         0       3       0       0       0       0       0
  8885 ;;Total ram usage:        3 bytes
  8886 ;; Hardware stack levels used:    1
  8887 ;; Hardware stack levels required when called:    6
  8888 ;; This function calls:
  8889 ;;		_WriteUSART
  8890 ;;		_sendEscapedUartData
  8891 ;;		_crc8
  8892 ;; This function is called by:
  8893 ;;		_doModeVscp
  8894 ;; This function uses a non-reentrant model
  8895 ;;
  8896                           
  8897                           	psect	text8
  8898  002DE0                     __ptext8:
  8899                           	opt stack 0
  8900  002DE0                     _sendVSCPDriverCommandReply:
  8901                           	opt stack 22
  8902                           
  8903                           ;incstack = 0
  8904                           ;incstack = 0
  8905                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8906  002DE0  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8907                           
  8908                           ; BSR set to: 0
  8909                           ;main.c: 1674: uint8_t crc = 0;
  8910  002DE4  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  8911  002DE6                     l852:
  8912                           
  8913                           ; BSR set to: 0
  8914  002DE6  A2AC               	btfss	4012,1,c	;volatile
  8915  002DE8  D7FE               	goto	l852
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;main.c: 1678: WriteUSART(0x10);
  8919  002DEA  0E10               	movlw	16
  8920  002DEC  ECEE  F00B         	call	_WriteUSART
  8921  002DF0                     l855:
  8922  002DF0  A2AC               	btfss	4012,1,c	;volatile
  8923  002DF2  D7FE               	goto	l855
  8924                           
  8925                           ;main.c: 1680: WriteUSART(0x02);
  8926  002DF4  0E02               	movlw	2
  8927  002DF6  ECEE  F00B         	call	_WriteUSART
  8928  002DFA                     l858:
  8929  002DFA  A2AC               	btfss	4012,1,c	;volatile
  8930  002DFC  D7FE               	goto	l858
  8931                           
  8932                           ;main.c: 1684: WriteUSART(254);
  8933  002DFE  0EFE               	movlw	254
  8934  002E00  ECEE  F00B         	call	_WriteUSART
  8935                           
  8936                           ;main.c: 1685: crc8(&crc, 254);
  8937  002E04  0100               	movlb	0	; () banked
  8938  002E06  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8939  002E08  6F68               	movwf	(?_crc8+1)& (0+255),b
  8940  002E0A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8941  002E0C  6F67               	movwf	?_crc8& (0+255),b
  8942  002E0E  0EFE               	movlw	254
  8943  002E10  6F69               	movwf	(?_crc8+2)& (0+255),b
  8944  002E12  ECB0  F00C         	call	_crc8	;wreg free
  8945  002E16                     l861:
  8946                           
  8947                           ; BSR set to: 0
  8948  002E16  A2AC               	btfss	4012,1,c	;volatile
  8949  002E18  D7FE               	goto	l861
  8950                           
  8951                           ; BSR set to: 0
  8952                           ;main.c: 1689: WriteUSART(0);
  8953  002E1A  0E00               	movlw	0
  8954  002E1C  ECEE  F00B         	call	_WriteUSART
  8955                           
  8956                           ;main.c: 1690: crc8(&crc, 0);
  8957  002E20  D841               	call	PL96	;call to abstracted procedure
  8958  002E22  ECB0  F00C         	call	_crc8	;wreg free
  8959                           
  8960                           ; BSR set to: 0
  8961                           ;main.c: 1693: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  8962  002E26  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8963  002E28  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8964  002E2A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8965  002E2C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8966  002E2E  0101               	movlb	1	; () banked
  8967  002E30  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  8968  002E32  EC21  F00F         	call	_sendEscapedUartData
  8969  002E36                     l864:
  8970                           
  8971                           ; BSR set to: 0
  8972  002E36  A2AC               	btfss	4012,1,c	;volatile
  8973  002E38  D7FE               	goto	l864
  8974                           
  8975                           ; BSR set to: 0
  8976                           ;main.c: 1697: WriteUSART(0);
  8977  002E3A  0E00               	movlw	0
  8978  002E3C  ECEE  F00B         	call	_WriteUSART
  8979                           
  8980                           ;main.c: 1698: crc8(&crc, 0);
  8981  002E40  D831               	call	PL96	;call to abstracted procedure
  8982  002E42  ECB0  F00C         	call	_crc8	;wreg free
  8983  002E46                     l867:
  8984                           
  8985                           ; BSR set to: 0
  8986  002E46  A2AC               	btfss	4012,1,c	;volatile
  8987  002E48  D7FE               	goto	l867
  8988                           
  8989                           ; BSR set to: 0
  8990                           ;main.c: 1700: WriteUSART(2);
  8991  002E4A  0E02               	movlw	2
  8992  002E4C  ECEE  F00B         	call	_WriteUSART
  8993                           
  8994                           ;main.c: 1701: crc8(&crc, 2);
  8995  002E50  0100               	movlb	0	; () banked
  8996  002E52  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8997  002E54  6F68               	movwf	(?_crc8+1)& (0+255),b
  8998  002E56  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8999  002E58  6F67               	movwf	?_crc8& (0+255),b
  9000  002E5A  0E02               	movlw	2
  9001  002E5C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9002  002E5E  ECB0  F00C         	call	_crc8	;wreg free
  9003  002E62                     l870:
  9004                           
  9005                           ; BSR set to: 0
  9006  002E62  A2AC               	btfss	4012,1,c	;volatile
  9007  002E64  D7FE               	goto	l870
  9008                           
  9009                           ; BSR set to: 0
  9010                           ;main.c: 1705: sendEscapedUartData(cmdReplyCode, &crc);
  9011  002E66  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9012  002E68  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9013  002E6A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9014  002E6C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9015  002E6E  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9016  002E70  EC21  F00F         	call	_sendEscapedUartData
  9017  002E74                     l873:
  9018                           
  9019                           ; BSR set to: 0
  9020  002E74  A2AC               	btfss	4012,1,c	;volatile
  9021  002E76  D7FE               	goto	l873
  9022                           
  9023                           ; BSR set to: 0
  9024                           ;main.c: 1709: sendEscapedUartData(cmdCode, &crc);
  9025  002E78  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9026  002E7A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9027  002E7C  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9028  002E7E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9029  002E80  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9030  002E82  EC21  F00F         	call	_sendEscapedUartData
  9031                           
  9032                           ;main.c: 1712: sendEscapedUartData(crc, (0));
  9033  002E86  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9034  002E88  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9035  002E8A  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9036  002E8C  EC21  F00F         	call	_sendEscapedUartData
  9037  002E90                     l876:
  9038                           
  9039                           ; BSR set to: 0
  9040  002E90  A2AC               	btfss	4012,1,c	;volatile
  9041  002E92  D7FE               	goto	l876
  9042                           
  9043                           ; BSR set to: 0
  9044                           ;main.c: 1716: WriteUSART(0x10);
  9045  002E94  0E10               	movlw	16
  9046  002E96  ECEE  F00B         	call	_WriteUSART
  9047  002E9A                     l879:
  9048  002E9A  A2AC               	btfss	4012,1,c	;volatile
  9049  002E9C  D7FE               	goto	l879
  9050                           
  9051                           ;main.c: 1718: WriteUSART(0x03);
  9052  002E9E  0E03               	movlw	3
  9053  002EA0  EFEE  F00B         	goto	_WriteUSART
  9054  002EA4                     __end_of_sendVSCPDriverCommandReply:
  9055                           	opt stack 0
  9056  002EA4                     PL96:
  9057                           	opt stack 22
  9058  002EA4  0100               	movlb	0	; () banked
  9059  002EA6  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9060  002EA8  6F68               	movwf	(?_crc8+1)& (0+255),b
  9061  002EAA  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9062  002EAC  6F67               	movwf	?_crc8& (0+255),b
  9063  002EAE  6B69               	clrf	(?_crc8+2)& (0+255),b
  9064  002EB0  0C00               	retlw	0
  9065  002EB2                     __end_ofPL96:
  9066                           	opt stack 0
  9067                           tblptru	equ	0xFF8
  9068                           tblptrh	equ	0xFF7
  9069                           tblptrl	equ	0xFF6
  9070                           tablat	equ	0xFF5
  9071                           prodh	equ	0xFF4
  9072                           prodl	equ	0xFF3
  9073                           intcon	equ	0xFF2
  9074                           indf0	equ	0xFEF
  9075                           postinc0	equ	0xFEE
  9076                           fsr0h	equ	0xFEA
  9077                           fsr0l	equ	0xFE9
  9078                           wreg	equ	0xFE8
  9079                           indf1	equ	0xFE7
  9080                           postinc1	equ	0xFE6
  9081                           postdec1	equ	0xFE5
  9082                           fsr1h	equ	0xFE2
  9083                           fsr1l	equ	0xFE1
  9084                           indf2	equ	0xFDF
  9085                           postinc2	equ	0xFDE
  9086                           postdec2	equ	0xFDD
  9087                           plusw2	equ	0xFDB
  9088                           fsr2h	equ	0xFDA
  9089                           fsr2l	equ	0xFD9
  9090                           status	equ	0xFD8
  9091                           
  9092 ;; *************** function _sendVSCPModeCapabilities *****************
  9093 ;; Defined at:
  9094 ;;		line 2042 in file "main.c"
  9095 ;; Parameters:    Size  Location     Type
  9096 ;;		None
  9097 ;; Auto vars:     Size  Location     Type
  9098 ;;  crc             1   15[BANK0 ] unsigned char 
  9099 ;; Return value:  Size  Location     Type
  9100 ;;                  1    wreg      enum E15660
  9101 ;; Registers used:
  9102 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9103 ;; Tracked objects:
  9104 ;;		On entry : F/1
  9105 ;;		On exit  : 0/0
  9106 ;;		Unchanged: 0/0
  9107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9108 ;;      Params:         0       0       0       0       0       0       0
  9109 ;;      Locals:         0       1       0       0       0       0       0
  9110 ;;      Temps:          0       0       0       0       0       0       0
  9111 ;;      Totals:         0       1       0       0       0       0       0
  9112 ;;Total ram usage:        1 bytes
  9113 ;; Hardware stack levels used:    1
  9114 ;; Hardware stack levels required when called:    6
  9115 ;; This function calls:
  9116 ;;		_WriteUSART
  9117 ;;		_sendEscapedUartData
  9118 ;;		_crc8
  9119 ;; This function is called by:
  9120 ;;		_doModeVscp
  9121 ;; This function uses a non-reentrant model
  9122 ;;
  9123                           
  9124                           	psect	text9
  9125  002A00                     __ptext9:
  9126                           	opt stack 0
  9127  002A00                     _sendVSCPModeCapabilities:
  9128                           	opt stack 22
  9129                           
  9130                           ; BSR set to: 1
  9131                           ;main.c: 2043: uint8_t crc = 0;
  9132                           
  9133                           ;incstack = 0
  9134                           ;incstack = 0
  9135  002A00  0100               	movlb	0	; () banked
  9136  002A02  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9137  002A04                     l1001:
  9138  002A04  A2AC               	btfss	4012,1,c	;volatile
  9139  002A06  D7FE               	goto	l1001
  9140                           
  9141                           ;main.c: 2047: WriteUSART(0x10);
  9142  002A08  0E10               	movlw	16
  9143  002A0A  ECEE  F00B         	call	_WriteUSART
  9144  002A0E                     l1004:
  9145  002A0E  A2AC               	btfss	4012,1,c	;volatile
  9146  002A10  D7FE               	goto	l1004
  9147                           
  9148                           ;main.c: 2049: WriteUSART(0x02);
  9149  002A12  0E02               	movlw	2
  9150  002A14  ECEE  F00B         	call	_WriteUSART
  9151  002A18                     l1007:
  9152  002A18  A2AC               	btfss	4012,1,c	;volatile
  9153  002A1A  D7FE               	goto	l1007
  9154                           
  9155                           ;main.c: 2053: WriteUSART(9);
  9156  002A1C  0E09               	movlw	9
  9157  002A1E  ECEE  F00B         	call	_WriteUSART
  9158                           
  9159                           ;main.c: 2054: crc8(&crc, 9);
  9160  002A22  0100               	movlb	0	; () banked
  9161  002A24  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9162  002A26  6F68               	movwf	(?_crc8+1)& (0+255),b
  9163  002A28  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9164  002A2A  6F67               	movwf	?_crc8& (0+255),b
  9165  002A2C  0E09               	movlw	9
  9166  002A2E  6F69               	movwf	(?_crc8+2)& (0+255),b
  9167  002A30  ECB0  F00C         	call	_crc8	;wreg free
  9168  002A34                     l1010:
  9169  002A34  A2AC               	btfss	4012,1,c	;volatile
  9170  002A36  D7FE               	goto	l1010
  9171                           
  9172                           ;main.c: 2058: WriteUSART(0);
  9173  002A38  0E00               	movlw	0
  9174  002A3A  ECEE  F00B         	call	_WriteUSART
  9175                           
  9176                           ;main.c: 2059: crc8(&crc, 0);
  9177  002A3E  0100               	movlb	0	; () banked
  9178  002A40  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9179  002A42  6F68               	movwf	(?_crc8+1)& (0+255),b
  9180  002A44  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9181  002A46  6F67               	movwf	?_crc8& (0+255),b
  9182  002A48  0E00               	movlw	0
  9183  002A4A  6B69               	clrf	(?_crc8+2)& (0+255),b
  9184  002A4C  ECB0  F00C         	call	_crc8	;wreg free
  9185                           
  9186                           ; BSR set to: 0
  9187                           ;main.c: 2062: sendEscapedUartData(sequencyno, &crc );
  9188  002A50  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9189  002A52  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9190  002A54  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9191  002A56  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9192  002A58  51F3               	movf	_sequencyno& (0+255),w,b
  9193  002A5A  EC21  F00F         	call	_sendEscapedUartData
  9194                           
  9195                           ; BSR set to: 0
  9196                           ;main.c: 2063: sequencyno++;
  9197  002A5E  2BF3               	incf	_sequencyno& (0+255),f,b
  9198                           
  9199                           ; BSR set to: 0
  9200                           ;main.c: 2066: sendEscapedUartData( 0, &crc );
  9201  002A60  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9202  002A62  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9203  002A64  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9204  002A66  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9205  002A68  0E00               	movlw	0
  9206  002A6A  EC21  F00F         	call	_sendEscapedUartData
  9207                           
  9208                           ; BSR set to: 0
  9209                           ;main.c: 2067: sendEscapedUartData( 2, &crc );
  9210  002A6E  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9211  002A70  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9212  002A72  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9213  002A74  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9214  002A76  0E02               	movlw	2
  9215  002A78  EC21  F00F         	call	_sendEscapedUartData
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;main.c: 2070: sendEscapedUartData( 1, &crc );
  9219  002A7C  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9220  002A7E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9221  002A80  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9222  002A82  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9223  002A84  0E01               	movlw	1
  9224  002A86  EC21  F00F         	call	_sendEscapedUartData
  9225                           
  9226                           ; BSR set to: 0
  9227                           ;main.c: 2071: sendEscapedUartData( 0, &crc );
  9228  002A8A  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9229  002A8C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9230  002A8E  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9231  002A90  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9232  002A92  0E00               	movlw	0
  9233  002A94  EC21  F00F         	call	_sendEscapedUartData
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;main.c: 2074: sendEscapedUartData(crc, (0));
  9237  002A98  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9238  002A9A  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9239  002A9C  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9240  002A9E  EC21  F00F         	call	_sendEscapedUartData
  9241  002AA2                     l1013:
  9242  002AA2  A2AC               	btfss	4012,1,c	;volatile
  9243  002AA4  D7FE               	goto	l1013
  9244                           
  9245                           ;main.c: 2078: WriteUSART(0x10);
  9246  002AA6  0E10               	movlw	16
  9247  002AA8  ECEE  F00B         	call	_WriteUSART
  9248  002AAC                     l1016:
  9249  002AAC  A2AC               	btfss	4012,1,c	;volatile
  9250  002AAE  D7FE               	goto	l1016
  9251                           
  9252                           ;main.c: 2080: WriteUSART(0x03);
  9253  002AB0  0E03               	movlw	3
  9254  002AB2  EFEE  F00B         	goto	_WriteUSART
  9255  002AB6                     __end_of_sendVSCPModeCapabilities:
  9256                           	opt stack 0
  9257                           tblptru	equ	0xFF8
  9258                           tblptrh	equ	0xFF7
  9259                           tblptrl	equ	0xFF6
  9260                           tablat	equ	0xFF5
  9261                           prodh	equ	0xFF4
  9262                           prodl	equ	0xFF3
  9263                           intcon	equ	0xFF2
  9264                           indf0	equ	0xFEF
  9265                           postinc0	equ	0xFEE
  9266                           fsr0h	equ	0xFEA
  9267                           fsr0l	equ	0xFE9
  9268                           wreg	equ	0xFE8
  9269                           indf1	equ	0xFE7
  9270                           postinc1	equ	0xFE6
  9271                           postdec1	equ	0xFE5
  9272                           fsr1h	equ	0xFE2
  9273                           fsr1l	equ	0xFE1
  9274                           indf2	equ	0xFDF
  9275                           postinc2	equ	0xFDE
  9276                           postdec2	equ	0xFDD
  9277                           plusw2	equ	0xFDB
  9278                           fsr2h	equ	0xFDA
  9279                           fsr2l	equ	0xFD9
  9280                           status	equ	0xFD8
  9281                           
  9282 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9283 ;; Defined at:
  9284 ;;		line 2173 in file "main.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;		None
  9287 ;; Auto vars:     Size  Location     Type
  9288 ;;		None
  9289 ;; Return value:  Size  Location     Type
  9290 ;;                  1    wreg      enum E15660
  9291 ;; Registers used:
  9292 ;;		wreg
  9293 ;; Tracked objects:
  9294 ;;		On entry : F/1
  9295 ;;		On exit  : F/1
  9296 ;;		Unchanged: F/0
  9297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9298 ;;      Params:         0       0       0       0       0       0       0
  9299 ;;      Locals:         0       0       0       0       0       0       0
  9300 ;;      Temps:          0       0       0       0       0       0       0
  9301 ;;      Totals:         0       0       0       0       0       0       0
  9302 ;;Total ram usage:        0 bytes
  9303 ;; Hardware stack levels used:    1
  9304 ;; Hardware stack levels required when called:    3
  9305 ;; This function calls:
  9306 ;;		Nothing
  9307 ;; This function is called by:
  9308 ;;		_doModeVscp
  9309 ;; This function uses a non-reentrant model
  9310 ;;
  9311                           
  9312                           	psect	text10
  9313  00179A                     __ptext10:
  9314                           	opt stack 0
  9315  00179A                     _receiveVSCPModeMultiCanalMsg:
  9316                           	opt stack 25
  9317                           
  9318                           ; BSR set to: 1
  9319                           
  9320                           ; BSR set to: 1
  9321                           ;main.c: 2175: return 0;
  9322                           
  9323                           ;incstack = 0
  9324                           ;incstack = 0
  9325  00179A  0C00               	retlw	0
  9326  00179C                     __end_of_receiveVSCPModeMultiCanalMsg:
  9327                           	opt stack 0
  9328                           tblptru	equ	0xFF8
  9329                           tblptrh	equ	0xFF7
  9330                           tblptrl	equ	0xFF6
  9331                           tablat	equ	0xFF5
  9332                           prodh	equ	0xFF4
  9333                           prodl	equ	0xFF3
  9334                           intcon	equ	0xFF2
  9335                           indf0	equ	0xFEF
  9336                           postinc0	equ	0xFEE
  9337                           fsr0h	equ	0xFEA
  9338                           fsr0l	equ	0xFE9
  9339                           wreg	equ	0xFE8
  9340                           indf1	equ	0xFE7
  9341                           postinc1	equ	0xFE6
  9342                           postdec1	equ	0xFE5
  9343                           fsr1h	equ	0xFE2
  9344                           fsr1l	equ	0xFE1
  9345                           indf2	equ	0xFDF
  9346                           postinc2	equ	0xFDE
  9347                           postdec2	equ	0xFDD
  9348                           plusw2	equ	0xFDB
  9349                           fsr2h	equ	0xFDA
  9350                           fsr2l	equ	0xFD9
  9351                           status	equ	0xFD8
  9352                           
  9353 ;; *************** function _sendVSCPDriverNack *****************
  9354 ;; Defined at:
  9355 ;;		line 1628 in file "main.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;		None
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;  crc             1   15[BANK0 ] unsigned char 
  9360 ;; Return value:  Size  Location     Type
  9361 ;;		None               void
  9362 ;; Registers used:
  9363 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9364 ;; Tracked objects:
  9365 ;;		On entry : E/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9369 ;;      Params:         0       0       0       0       0       0       0
  9370 ;;      Locals:         0       1       0       0       0       0       0
  9371 ;;      Temps:          0       0       0       0       0       0       0
  9372 ;;      Totals:         0       1       0       0       0       0       0
  9373 ;;Total ram usage:        1 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; Hardware stack levels required when called:    6
  9376 ;; This function calls:
  9377 ;;		_WriteUSART
  9378 ;;		_sendEscapedUartData
  9379 ;;		_crc8
  9380 ;; This function is called by:
  9381 ;;		_doModeVscp
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           	psect	text11
  9386  0028AA                     __ptext11:
  9387                           	opt stack 0
  9388  0028AA                     _sendVSCPDriverNack:
  9389                           	opt stack 22
  9390                           
  9391                           ;main.c: 1629: uint8_t crc = 0;
  9392                           
  9393                           ; BSR set to: 1
  9394                           ;incstack = 0
  9395                           ;incstack = 0
  9396  0028AA  0100               	movlb	0	; () banked
  9397  0028AC  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
  9398  0028AE                     l825:
  9399  0028AE  A2AC               	btfss	4012,1,c	;volatile
  9400  0028B0  D7FE               	goto	l825
  9401                           
  9402                           ;main.c: 1633: WriteUSART(0x10);
  9403  0028B2  0E10               	movlw	16
  9404  0028B4  ECEE  F00B         	call	_WriteUSART
  9405  0028B8                     l828:
  9406  0028B8  A2AC               	btfss	4012,1,c	;volatile
  9407  0028BA  D7FE               	goto	l828
  9408                           
  9409                           ;main.c: 1635: WriteUSART(0x02);
  9410  0028BC  0E02               	movlw	2
  9411  0028BE  ECEE  F00B         	call	_WriteUSART
  9412  0028C2                     l831:
  9413  0028C2  A2AC               	btfss	4012,1,c	;volatile
  9414  0028C4  D7FE               	goto	l831
  9415                           
  9416                           ;main.c: 1639: WriteUSART(252);
  9417  0028C6  0EFC               	movlw	252
  9418  0028C8  ECEE  F00B         	call	_WriteUSART
  9419                           
  9420                           ;main.c: 1640: crc8(&crc, 252);
  9421  0028CC  0100               	movlb	0	; () banked
  9422  0028CE  0E00               	movlw	high sendVSCPDriverNack@crc
  9423  0028D0  6F68               	movwf	(?_crc8+1)& (0+255),b
  9424  0028D2  0E6F               	movlw	low sendVSCPDriverNack@crc
  9425  0028D4  6F67               	movwf	?_crc8& (0+255),b
  9426  0028D6  0EFC               	movlw	252
  9427  0028D8  6F69               	movwf	(?_crc8+2)& (0+255),b
  9428  0028DA  ECB0  F00C         	call	_crc8	;wreg free
  9429  0028DE                     l834:
  9430  0028DE  A2AC               	btfss	4012,1,c	;volatile
  9431  0028E0  D7FE               	goto	l834
  9432                           
  9433                           ;main.c: 1644: WriteUSART(0);
  9434  0028E2  0E00               	movlw	0
  9435  0028E4  ECEE  F00B         	call	_WriteUSART
  9436                           
  9437                           ;main.c: 1645: crc8(&crc, 0);
  9438  0028E8  D829               	call	PL52	;call to abstracted procedure
  9439  0028EA  ECB0  F00C         	call	_crc8	;wreg free
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;main.c: 1648: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9443  0028EE  0E00               	movlw	high sendVSCPDriverNack@crc
  9444  0028F0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9445  0028F2  0E6F               	movlw	low sendVSCPDriverNack@crc
  9446  0028F4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9447  0028F6  0101               	movlb	1	; () banked
  9448  0028F8  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9449  0028FA  EC21  F00F         	call	_sendEscapedUartData
  9450  0028FE                     l837:
  9451  0028FE  A2AC               	btfss	4012,1,c	;volatile
  9452  002900  D7FE               	goto	l837
  9453                           
  9454                           ;main.c: 1652: WriteUSART(0);
  9455  002902  0E00               	movlw	0
  9456  002904  ECEE  F00B         	call	_WriteUSART
  9457                           
  9458                           ;main.c: 1653: crc8(&crc, 0);
  9459  002908  D819               	call	PL52	;call to abstracted procedure
  9460  00290A  ECB0  F00C         	call	_crc8	;wreg free
  9461  00290E                     l840:
  9462  00290E  A2AC               	btfss	4012,1,c	;volatile
  9463  002910  D7FE               	goto	l840
  9464                           
  9465                           ;main.c: 1655: WriteUSART(0);
  9466  002912  0E00               	movlw	0
  9467  002914  ECEE  F00B         	call	_WriteUSART
  9468                           
  9469                           ;main.c: 1656: crc8(&crc, 0);
  9470  002918  D811               	call	PL52	;call to abstracted procedure
  9471  00291A  ECB0  F00C         	call	_crc8	;wreg free
  9472                           
  9473                           ; BSR set to: 0
  9474                           ;main.c: 1659: sendEscapedUartData(crc, (0));
  9475  00291E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9476  002920  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9477  002922  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
  9478  002924  EC21  F00F         	call	_sendEscapedUartData
  9479  002928                     l843:
  9480  002928  A2AC               	btfss	4012,1,c	;volatile
  9481  00292A  D7FE               	goto	l843
  9482                           
  9483                           ;main.c: 1663: WriteUSART(0x10);
  9484  00292C  0E10               	movlw	16
  9485  00292E  ECEE  F00B         	call	_WriteUSART
  9486  002932                     l846:
  9487  002932  A2AC               	btfss	4012,1,c	;volatile
  9488  002934  D7FE               	goto	l846
  9489                           
  9490                           ;main.c: 1665: WriteUSART(0x03);
  9491  002936  0E03               	movlw	3
  9492  002938  EFEE  F00B         	goto	_WriteUSART
  9493  00293C                     __end_of_sendVSCPDriverNack:
  9494                           	opt stack 0
  9495  00293C                     PL52:
  9496                           	opt stack 22
  9497  00293C  0100               	movlb	0	; () banked
  9498  00293E  0E00               	movlw	high sendVSCPDriverNack@crc
  9499  002940  6F68               	movwf	(?_crc8+1)& (0+255),b
  9500  002942  0E6F               	movlw	low sendVSCPDriverNack@crc
  9501  002944  6F67               	movwf	?_crc8& (0+255),b
  9502  002946  6B69               	clrf	(?_crc8+2)& (0+255),b
  9503  002948  0C00               	retlw	0
  9504  00294A                     __end_ofPL52:
  9505                           	opt stack 0
  9506                           tblptru	equ	0xFF8
  9507                           tblptrh	equ	0xFF7
  9508                           tblptrl	equ	0xFF6
  9509                           tablat	equ	0xFF5
  9510                           prodh	equ	0xFF4
  9511                           prodl	equ	0xFF3
  9512                           intcon	equ	0xFF2
  9513                           indf0	equ	0xFEF
  9514                           postinc0	equ	0xFEE
  9515                           fsr0h	equ	0xFEA
  9516                           fsr0l	equ	0xFE9
  9517                           wreg	equ	0xFE8
  9518                           indf1	equ	0xFE7
  9519                           postinc1	equ	0xFE6
  9520                           postdec1	equ	0xFE5
  9521                           fsr1h	equ	0xFE2
  9522                           fsr1l	equ	0xFE1
  9523                           indf2	equ	0xFDF
  9524                           postinc2	equ	0xFDE
  9525                           postdec2	equ	0xFDD
  9526                           plusw2	equ	0xFDB
  9527                           fsr2h	equ	0xFDA
  9528                           fsr2l	equ	0xFD9
  9529                           status	equ	0xFD8
  9530                           
  9531 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9532 ;; Defined at:
  9533 ;;		line 2152 in file "main.c"
  9534 ;; Parameters:    Size  Location     Type
  9535 ;;		None
  9536 ;; Auto vars:     Size  Location     Type
  9537 ;;  data            8   74[BANK0 ] unsigned char [8]
  9538 ;;  id              4   82[BANK0 ] unsigned long 
  9539 ;;  dlc             1   86[BANK0 ] unsigned char 
  9540 ;; Return value:  Size  Location     Type
  9541 ;;                  1    wreg      enum E15660
  9542 ;; Registers used:
  9543 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9544 ;; Tracked objects:
  9545 ;;		On entry : F/1
  9546 ;;		On exit  : F/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9549 ;;      Params:         0       0       0       0       0       0       0
  9550 ;;      Locals:         0      13       0       0       0       0       0
  9551 ;;      Temps:          0      20       0       0       0       0       0
  9552 ;;      Totals:         0      33       0       0       0       0       0
  9553 ;;Total ram usage:       33 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    6
  9556 ;; This function calls:
  9557 ;;		_memcpy
  9558 ;;		_sendCANFrame
  9559 ;; This function is called by:
  9560 ;;		_doModeVscp
  9561 ;; This function uses a non-reentrant model
  9562 ;;
  9563                           
  9564                           	psect	text12
  9565  002EB2                     __ptext12:
  9566                           	opt stack 0
  9567  002EB2                     _receiveVSCPModeCanalMsg:
  9568                           	opt stack 22
  9569                           
  9570                           ; BSR set to: 1
  9571                           ;main.c: 2153: uint32_t id;
  9572                           ;main.c: 2154: uint8_t dlc;
  9573                           ;main.c: 2155: uint8_t data[8];
  9574                           ;main.c: 2157: id = ((uint32_t) cmdbuf[5] << 26) |
  9575                           ;main.c: 2158: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9576                           ;main.c: 2159: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9577                           ;main.c: 2160: cmdbuf[5 + 3];
  9578                           
  9579                           ;incstack = 0
  9580                           ;incstack = 0
  9581  002EB2  C10B  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9582  002EB6  0100               	movlb	0	; () banked
  9583  002EB8  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9584  002EBA  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9585  002EBC  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9586  002EBE  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9587  002EC2  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9588  002EC6  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9589  002ECA  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9590  002ECC  C10A  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9591  002ED0  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9592  002ED2  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9593  002ED4  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9594  002ED6  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9595  002EDA  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9596  002EDE  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9597  002EE0  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9598  002EE2  C109  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9599  002EE6  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9600  002EE8  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9601  002EEA  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9602  002EEC  0E1A               	movlw	26
  9603  002EEE                     u15765:
  9604  002EEE  90D8               	bcf	status,0,c
  9605  002EF0  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9606  002EF2  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9607  002EF4  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9608  002EF6  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9609  002EF8  2EE8               	decfsz	wreg,f,c
  9610  002EFA  D7F9               	goto	u15765
  9611  002EFC  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9612  002EFE  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9613  002F00  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9614  002F02  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9615  002F04  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9616  002F06  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9617  002F08  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9618  002F0A  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9619  002F0C  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9620  002F0E  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9621  002F10  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9622  002F12  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9623  002F14  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9624  002F16  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9625  002F18  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9626  002F1A  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9627  002F1C  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9628  002F1E  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9629  002F20  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9630  002F22  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9631  002F24  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9632  002F26  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9633  002F28  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9634  002F2A  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9635  002F2C  0101               	movlb	1	; () banked
  9636  002F2E  510C               	movf	(_cmdbuf+8)& (0+255),w,b
  9637  002F30  0100               	movlb	0	; () banked
  9638  002F32  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9639  002F34  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9640  002F36  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9641  002F38  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9642  002F3A  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9643  002F3C  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9644  002F3E  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9645  002F40  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9646                           
  9647                           ;main.c: 2161: dlc = cmdbuf[4] - 4;
  9648  002F42  0101               	movlb	1	; () banked
  9649  002F44  5108               	movf	(_cmdbuf+4)& (0+255),w,b
  9650  002F46  0FFC               	addlw	252
  9651  002F48  0100               	movlb	0	; () banked
  9652  002F4A  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9653                           
  9654                           ; BSR set to: 0
  9655                           ;main.c: 2162: memcpy(data, cmdbuf + 5 + 4, dlc);
  9656  002F4C  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9657  002F4E  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9658  002F50  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9659  002F52  6F60               	movwf	?_memcpy& (0+255),b
  9660  002F54  0E0D               	movlw	low (_cmdbuf+9)
  9661  002F56  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9662  002F58  0E01               	movlw	high (_cmdbuf+9)
  9663  002F5A  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9664  002F5C  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9665  002F60  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9666  002F64  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9667  002F68  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9668  002F6A  ECA0  F00D         	call	_memcpy	;wreg free
  9669                           
  9670                           ; BSR set to: 0
  9671                           ;main.c: 2164: return sendCANFrame(id, dlc, data);
  9672  002F6E  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9673  002F72  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9674  002F76  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9675  002F7A  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9676  002F7E  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9677  002F82  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9678  002F84  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9679  002F86  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9680  002F88  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9681  002F8A  EFE7  F00C         	goto	_sendCANFrame	;wreg free
  9682  002F8E                     __end_of_receiveVSCPModeCanalMsg:
  9683                           	opt stack 0
  9684                           tblptru	equ	0xFF8
  9685                           tblptrh	equ	0xFF7
  9686                           tblptrl	equ	0xFF6
  9687                           tablat	equ	0xFF5
  9688                           prodh	equ	0xFF4
  9689                           prodl	equ	0xFF3
  9690                           intcon	equ	0xFF2
  9691                           indf0	equ	0xFEF
  9692                           postinc0	equ	0xFEE
  9693                           fsr0h	equ	0xFEA
  9694                           fsr0l	equ	0xFE9
  9695                           wreg	equ	0xFE8
  9696                           indf1	equ	0xFE7
  9697                           postinc1	equ	0xFE6
  9698                           postdec1	equ	0xFE5
  9699                           fsr1h	equ	0xFE2
  9700                           fsr1l	equ	0xFE1
  9701                           indf2	equ	0xFDF
  9702                           postinc2	equ	0xFDE
  9703                           postdec2	equ	0xFDD
  9704                           plusw2	equ	0xFDB
  9705                           fsr2h	equ	0xFDA
  9706                           fsr2l	equ	0xFD9
  9707                           status	equ	0xFD8
  9708                           
  9709 ;; *************** function _memcpy *****************
  9710 ;; Defined at:
  9711 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9712 ;; Parameters:    Size  Location     Type
  9713 ;;  d1              2    0[BANK0 ] PTR void 
  9714 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9715 ;;  s1              2    2[BANK0 ] PTR const void 
  9716 ;;		 -> vscpData(8), cmdbuf(80), 
  9717 ;;  n               2    4[BANK0 ] unsigned int 
  9718 ;; Auto vars:     Size  Location     Type
  9719 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9720 ;;		 -> vscpData(8), cmdbuf(80), 
  9721 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9722 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9723 ;; Return value:  Size  Location     Type
  9724 ;;                  2    0[BANK0 ] PTR void 
  9725 ;; Registers used:
  9726 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9727 ;; Tracked objects:
  9728 ;;		On entry : F/0
  9729 ;;		On exit  : F/0
  9730 ;;		Unchanged: 0/0
  9731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9732 ;;      Params:         0       6       0       0       0       0       0
  9733 ;;      Locals:         0       4       0       0       0       0       0
  9734 ;;      Temps:          0       0       0       0       0       0       0
  9735 ;;      Totals:         0      10       0       0       0       0       0
  9736 ;;Total ram usage:       10 bytes
  9737 ;; Hardware stack levels used:    1
  9738 ;; Hardware stack levels required when called:    3
  9739 ;; This function calls:
  9740 ;;		Nothing
  9741 ;; This function is called by:
  9742 ;;		_doModeSLCAN
  9743 ;;		_receiveVSCPModeCanalMsg
  9744 ;; This function uses a non-reentrant model
  9745 ;;
  9746                           
  9747                           	psect	text13
  9748  001B40                     __ptext13:
  9749                           	opt stack 0
  9750  001B40                     _memcpy:
  9751                           	opt stack 25
  9752                           
  9753                           ; BSR set to: 0
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;incstack = 0
  9757                           ;incstack = 0
  9758  001B40  C062  F068         	movff	memcpy@s1,memcpy@s
  9759  001B44  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9760  001B48  C060  F066         	movff	memcpy@d1,memcpy@d
  9761  001B4C  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9762  001B50  D00E               	goto	l12516
  9763  001B52                     l12510:
  9764                           
  9765                           ; BSR set to: 0
  9766  001B52  C068  FFD9         	movff	memcpy@s,fsr2l
  9767  001B56  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9768  001B5A  C066  FFE1         	movff	memcpy@d,fsr1l
  9769  001B5E  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9770  001B62  CFDF FFE7          	movff	indf2,indf1
  9771                           
  9772                           ; BSR set to: 0
  9773  001B66  4B68               	infsnz	memcpy@s& (0+255),f,b
  9774  001B68  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9775                           
  9776                           ; BSR set to: 0
  9777  001B6A  4B66               	infsnz	memcpy@d& (0+255),f,b
  9778  001B6C  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9779  001B6E                     l12516:
  9780                           
  9781                           ; BSR set to: 0
  9782  001B6E  0764               	decf	memcpy@n& (0+255),f,b
  9783  001B70  A0D8               	btfss	status,0,c
  9784  001B72  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9785  001B74  0100               	movlb	0	; () banked
  9786  001B76  2964               	incf	memcpy@n& (0+255),w,b
  9787  001B78  B4D8               	btfsc	status,2,c
  9788  001B7A  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9789  001B7C  B4D8               	btfsc	status,2,c
  9790                           
  9791                           ; BSR set to: 0
  9792  001B7E  0012               	return	
  9793  001B80  D7E8               	goto	l12510
  9794  001B82                     __end_of_memcpy:
  9795                           	opt stack 0
  9796                           tblptru	equ	0xFF8
  9797                           tblptrh	equ	0xFF7
  9798                           tblptrl	equ	0xFF6
  9799                           tablat	equ	0xFF5
  9800                           prodh	equ	0xFF4
  9801                           prodl	equ	0xFF3
  9802                           intcon	equ	0xFF2
  9803                           indf0	equ	0xFEF
  9804                           postinc0	equ	0xFEE
  9805                           fsr0h	equ	0xFEA
  9806                           fsr0l	equ	0xFE9
  9807                           wreg	equ	0xFE8
  9808                           indf1	equ	0xFE7
  9809                           postinc1	equ	0xFE6
  9810                           postdec1	equ	0xFE5
  9811                           fsr1h	equ	0xFE2
  9812                           fsr1l	equ	0xFE1
  9813                           indf2	equ	0xFDF
  9814                           postinc2	equ	0xFDE
  9815                           postdec2	equ	0xFDD
  9816                           plusw2	equ	0xFDB
  9817                           fsr2h	equ	0xFDA
  9818                           fsr2l	equ	0xFD9
  9819                           status	equ	0xFD8
  9820                           
  9821 ;; *************** function _sendVSCPDriverAck *****************
  9822 ;; Defined at:
  9823 ;;		line 1584 in file "main.c"
  9824 ;; Parameters:    Size  Location     Type
  9825 ;;		None
  9826 ;; Auto vars:     Size  Location     Type
  9827 ;;  crc             1   15[BANK0 ] unsigned char 
  9828 ;; Return value:  Size  Location     Type
  9829 ;;		None               void
  9830 ;; Registers used:
  9831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9832 ;; Tracked objects:
  9833 ;;		On entry : E/1
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9837 ;;      Params:         0       0       0       0       0       0       0
  9838 ;;      Locals:         0       1       0       0       0       0       0
  9839 ;;      Temps:          0       0       0       0       0       0       0
  9840 ;;      Totals:         0       1       0       0       0       0       0
  9841 ;;Total ram usage:        1 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    6
  9844 ;; This function calls:
  9845 ;;		_WriteUSART
  9846 ;;		_sendEscapedUartData
  9847 ;;		_crc8
  9848 ;; This function is called by:
  9849 ;;		_doModeVscp
  9850 ;; This function uses a non-reentrant model
  9851 ;;
  9852                           
  9853                           	psect	text14
  9854  00280A                     __ptext14:
  9855                           	opt stack 0
  9856  00280A                     _sendVSCPDriverAck:
  9857                           	opt stack 22
  9858                           
  9859                           ;main.c: 1585: uint8_t crc = 0;
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;incstack = 0
  9863                           ;incstack = 0
  9864  00280A  0100               	movlb	0	; () banked
  9865  00280C  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9866  00280E                     l798:
  9867  00280E  A2AC               	btfss	4012,1,c	;volatile
  9868  002810  D7FE               	goto	l798
  9869                           
  9870                           ;main.c: 1589: WriteUSART(0x10);
  9871  002812  0E10               	movlw	16
  9872  002814  ECEE  F00B         	call	_WriteUSART
  9873  002818                     l801:
  9874  002818  A2AC               	btfss	4012,1,c	;volatile
  9875  00281A  D7FE               	goto	l801
  9876                           
  9877                           ;main.c: 1591: WriteUSART(0x02);
  9878  00281C  0E02               	movlw	2
  9879  00281E  ECEE  F00B         	call	_WriteUSART
  9880  002822                     l804:
  9881  002822  A2AC               	btfss	4012,1,c	;volatile
  9882  002824  D7FE               	goto	l804
  9883                           
  9884                           ;main.c: 1595: WriteUSART(251);
  9885  002826  0EFB               	movlw	251
  9886  002828  ECEE  F00B         	call	_WriteUSART
  9887                           
  9888                           ;main.c: 1596: crc8(&crc, 251);
  9889  00282C  0100               	movlb	0	; () banked
  9890  00282E  0E00               	movlw	high sendVSCPDriverAck@crc
  9891  002830  6F68               	movwf	(?_crc8+1)& (0+255),b
  9892  002832  0E6F               	movlw	low sendVSCPDriverAck@crc
  9893  002834  6F67               	movwf	?_crc8& (0+255),b
  9894  002836  0EFB               	movlw	251
  9895  002838  6F69               	movwf	(?_crc8+2)& (0+255),b
  9896  00283A  ECB0  F00C         	call	_crc8	;wreg free
  9897  00283E                     l807:
  9898  00283E  A2AC               	btfss	4012,1,c	;volatile
  9899  002840  D7FE               	goto	l807
  9900                           
  9901                           ;main.c: 1600: WriteUSART(0);
  9902  002842  0E00               	movlw	0
  9903  002844  ECEE  F00B         	call	_WriteUSART
  9904                           
  9905                           ;main.c: 1601: crc8(&crc, 0);
  9906  002848  D829               	call	PL48	;call to abstracted procedure
  9907  00284A  ECB0  F00C         	call	_crc8	;wreg free
  9908                           
  9909                           ; BSR set to: 0
  9910                           ;main.c: 1604: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9911  00284E  0E00               	movlw	high sendVSCPDriverAck@crc
  9912  002850  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9913  002852  0E6F               	movlw	low sendVSCPDriverAck@crc
  9914  002854  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9915  002856  0101               	movlb	1	; () banked
  9916  002858  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9917  00285A  EC21  F00F         	call	_sendEscapedUartData
  9918  00285E                     l810:
  9919  00285E  A2AC               	btfss	4012,1,c	;volatile
  9920  002860  D7FE               	goto	l810
  9921                           
  9922                           ;main.c: 1608: WriteUSART(0);
  9923  002862  0E00               	movlw	0
  9924  002864  ECEE  F00B         	call	_WriteUSART
  9925                           
  9926                           ;main.c: 1609: crc8(&crc, 0);
  9927  002868  D819               	call	PL48	;call to abstracted procedure
  9928  00286A  ECB0  F00C         	call	_crc8	;wreg free
  9929  00286E                     l813:
  9930  00286E  A2AC               	btfss	4012,1,c	;volatile
  9931  002870  D7FE               	goto	l813
  9932                           
  9933                           ;main.c: 1611: WriteUSART(0);
  9934  002872  0E00               	movlw	0
  9935  002874  ECEE  F00B         	call	_WriteUSART
  9936                           
  9937                           ;main.c: 1612: crc8(&crc, 0);
  9938  002878  D811               	call	PL48	;call to abstracted procedure
  9939  00287A  ECB0  F00C         	call	_crc8	;wreg free
  9940                           
  9941                           ; BSR set to: 0
  9942                           ;main.c: 1615: sendEscapedUartData(crc, (0));
  9943  00287E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9944  002880  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9945  002882  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
  9946  002884  EC21  F00F         	call	_sendEscapedUartData
  9947  002888                     l816:
  9948  002888  A2AC               	btfss	4012,1,c	;volatile
  9949  00288A  D7FE               	goto	l816
  9950                           
  9951                           ;main.c: 1619: WriteUSART(0x10);
  9952  00288C  0E10               	movlw	16
  9953  00288E  ECEE  F00B         	call	_WriteUSART
  9954  002892                     l819:
  9955  002892  A2AC               	btfss	4012,1,c	;volatile
  9956  002894  D7FE               	goto	l819
  9957                           
  9958                           ;main.c: 1621: WriteUSART(0x03);
  9959  002896  0E03               	movlw	3
  9960  002898  EFEE  F00B         	goto	_WriteUSART
  9961  00289C                     __end_of_sendVSCPDriverAck:
  9962                           	opt stack 0
  9963  00289C                     PL48:
  9964                           	opt stack 22
  9965  00289C  0100               	movlb	0	; () banked
  9966  00289E  0E00               	movlw	high sendVSCPDriverAck@crc
  9967  0028A0  6F68               	movwf	(?_crc8+1)& (0+255),b
  9968  0028A2  0E6F               	movlw	low sendVSCPDriverAck@crc
  9969  0028A4  6F67               	movwf	?_crc8& (0+255),b
  9970  0028A6  6B69               	clrf	(?_crc8+2)& (0+255),b
  9971  0028A8  0C00               	retlw	0
  9972  0028AA                     __end_ofPL48:
  9973                           	opt stack 0
  9974                           tblptru	equ	0xFF8
  9975                           tblptrh	equ	0xFF7
  9976                           tblptrl	equ	0xFF6
  9977                           tablat	equ	0xFF5
  9978                           prodh	equ	0xFF4
  9979                           prodl	equ	0xFF3
  9980                           intcon	equ	0xFF2
  9981                           indf0	equ	0xFEF
  9982                           postinc0	equ	0xFEE
  9983                           fsr0h	equ	0xFEA
  9984                           fsr0l	equ	0xFE9
  9985                           wreg	equ	0xFE8
  9986                           indf1	equ	0xFE7
  9987                           postinc1	equ	0xFE6
  9988                           postdec1	equ	0xFE5
  9989                           fsr1h	equ	0xFE2
  9990                           fsr1l	equ	0xFE1
  9991                           indf2	equ	0xFDF
  9992                           postinc2	equ	0xFDE
  9993                           postdec2	equ	0xFDD
  9994                           plusw2	equ	0xFDB
  9995                           fsr2h	equ	0xFDA
  9996                           fsr2l	equ	0xFD9
  9997                           status	equ	0xFD8
  9998                           
  9999 ;; *************** function _sendVSCPDriverErrorFrame *****************
 10000 ;; Defined at:
 10001 ;;		line 1536 in file "main.c"
 10002 ;; Parameters:    Size  Location     Type
 10003 ;;  errorcode       1    wreg     unsigned char 
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;  errorcode       1   15[BANK0 ] unsigned char 
 10006 ;;  crc             1   16[BANK0 ] unsigned char 
 10007 ;; Return value:  Size  Location     Type
 10008 ;;		None               void
 10009 ;; Registers used:
 10010 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10011 ;; Tracked objects:
 10012 ;;		On entry : E/0
 10013 ;;		On exit  : 0/0
 10014 ;;		Unchanged: 0/0
 10015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10016 ;;      Params:         0       0       0       0       0       0       0
 10017 ;;      Locals:         0       2       0       0       0       0       0
 10018 ;;      Temps:          0       0       0       0       0       0       0
 10019 ;;      Totals:         0       2       0       0       0       0       0
 10020 ;;Total ram usage:        2 bytes
 10021 ;; Hardware stack levels used:    1
 10022 ;; Hardware stack levels required when called:    6
 10023 ;; This function calls:
 10024 ;;		_WriteUSART
 10025 ;;		_sendEscapedUartData
 10026 ;;		_crc8
 10027 ;; This function is called by:
 10028 ;;		_doModeVscp
 10029 ;; This function uses a non-reentrant model
 10030 ;;
 10031                           
 10032                           	psect	text15
 10033  002AB6                     __ptext15:
 10034                           	opt stack 0
 10035  002AB6                     _sendVSCPDriverErrorFrame:
 10036                           	opt stack 22
 10037                           
 10038                           ;incstack = 0
 10039                           ;incstack = 0
 10040                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
 10041  002AB6  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
 10042                           
 10043                           ;main.c: 1537: uint8_t crc = 0;
 10044  002ABA  0100               	movlb	0	; () banked
 10045  002ABC  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
 10046  002ABE                     l771:
 10047  002ABE  A2AC               	btfss	4012,1,c	;volatile
 10048  002AC0  D7FE               	goto	l771
 10049                           
 10050                           ;main.c: 1541: WriteUSART(0x10);
 10051  002AC2  0E10               	movlw	16
 10052  002AC4  ECEE  F00B         	call	_WriteUSART
 10053  002AC8                     l774:
 10054  002AC8  A2AC               	btfss	4012,1,c	;volatile
 10055  002ACA  D7FE               	goto	l774
 10056                           
 10057                           ;main.c: 1543: WriteUSART(0x02);
 10058  002ACC  0E02               	movlw	2
 10059  002ACE  ECEE  F00B         	call	_WriteUSART
 10060  002AD2                     l777:
 10061  002AD2  A2AC               	btfss	4012,1,c	;volatile
 10062  002AD4  D7FE               	goto	l777
 10063                           
 10064                           ;main.c: 1547: WriteUSART(253);
 10065  002AD6  0EFD               	movlw	253
 10066  002AD8  ECEE  F00B         	call	_WriteUSART
 10067                           
 10068                           ;main.c: 1548: crc8(&crc, 253);
 10069  002ADC  0100               	movlb	0	; () banked
 10070  002ADE  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10071  002AE0  6F68               	movwf	(?_crc8+1)& (0+255),b
 10072  002AE2  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10073  002AE4  6F67               	movwf	?_crc8& (0+255),b
 10074  002AE6  0EFD               	movlw	253
 10075  002AE8  6F69               	movwf	(?_crc8+2)& (0+255),b
 10076  002AEA  ECB0  F00C         	call	_crc8	;wreg free
 10077  002AEE                     l780:
 10078  002AEE  A2AC               	btfss	4012,1,c	;volatile
 10079  002AF0  D7FE               	goto	l780
 10080                           
 10081                           ;main.c: 1552: WriteUSART(0);
 10082  002AF2  0E00               	movlw	0
 10083  002AF4  ECEE  F00B         	call	_WriteUSART
 10084                           
 10085                           ;main.c: 1553: crc8(&crc, 0);
 10086  002AF8  D836               	call	PL94	;call to abstracted procedure
 10087  002AFA  ECB0  F00C         	call	_crc8	;wreg free
 10088                           
 10089                           ; BSR set to: 0
 10090                           ;main.c: 1556: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10091  002AFE  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10092  002B00  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10093  002B02  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10094  002B04  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10095  002B06  0101               	movlb	1	; () banked
 10096  002B08  5106               	movf	(_cmdbuf+2)& (0+255),w,b
 10097  002B0A  EC21  F00F         	call	_sendEscapedUartData
 10098  002B0E                     l783:
 10099  002B0E  A2AC               	btfss	4012,1,c	;volatile
 10100  002B10  D7FE               	goto	l783
 10101                           
 10102                           ;main.c: 1560: WriteUSART(0);
 10103  002B12  0E00               	movlw	0
 10104  002B14  ECEE  F00B         	call	_WriteUSART
 10105                           
 10106                           ;main.c: 1561: crc8(&crc, 0);
 10107  002B18  D826               	call	PL94	;call to abstracted procedure
 10108  002B1A  ECB0  F00C         	call	_crc8	;wreg free
 10109  002B1E                     l786:
 10110  002B1E  A2AC               	btfss	4012,1,c	;volatile
 10111  002B20  D7FE               	goto	l786
 10112                           
 10113                           ;main.c: 1563: WriteUSART(1);
 10114  002B22  0E01               	movlw	1
 10115  002B24  ECEE  F00B         	call	_WriteUSART
 10116                           
 10117                           ;main.c: 1564: crc8(&crc, 1);
 10118  002B28  0100               	movlb	0	; () banked
 10119  002B2A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10120  002B2C  6F68               	movwf	(?_crc8+1)& (0+255),b
 10121  002B2E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10122  002B30  6F67               	movwf	?_crc8& (0+255),b
 10123  002B32  0E01               	movlw	1
 10124  002B34  6F69               	movwf	(?_crc8+2)& (0+255),b
 10125  002B36  ECB0  F00C         	call	_crc8	;wreg free
 10126                           
 10127                           ; BSR set to: 0
 10128                           ;main.c: 1567: sendEscapedUartData(errorcode, &crc);
 10129  002B3A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10130  002B3C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10131  002B3E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10132  002B40  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10133  002B42  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
 10134  002B44  EC21  F00F         	call	_sendEscapedUartData
 10135                           
 10136                           ; BSR set to: 0
 10137                           ;main.c: 1570: sendEscapedUartData(crc, (0));
 10138  002B48  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10139  002B4A  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10140  002B4C  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
 10141  002B4E  EC21  F00F         	call	_sendEscapedUartData
 10142  002B52                     l789:
 10143  002B52  A2AC               	btfss	4012,1,c	;volatile
 10144  002B54  D7FE               	goto	l789
 10145                           
 10146                           ;main.c: 1574: WriteUSART(0x10);
 10147  002B56  0E10               	movlw	16
 10148  002B58  ECEE  F00B         	call	_WriteUSART
 10149  002B5C                     l792:
 10150  002B5C  A2AC               	btfss	4012,1,c	;volatile
 10151  002B5E  D7FE               	goto	l792
 10152                           
 10153                           ;main.c: 1576: WriteUSART(0x03);
 10154  002B60  0E03               	movlw	3
 10155  002B62  EFEE  F00B         	goto	_WriteUSART
 10156  002B66                     __end_of_sendVSCPDriverErrorFrame:
 10157                           	opt stack 0
 10158  002B66                     PL94:
 10159                           	opt stack 22
 10160  002B66  0100               	movlb	0	; () banked
 10161  002B68  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10162  002B6A  6F68               	movwf	(?_crc8+1)& (0+255),b
 10163  002B6C  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10164  002B6E  6F67               	movwf	?_crc8& (0+255),b
 10165  002B70  6B69               	clrf	(?_crc8+2)& (0+255),b
 10166  002B72  0C00               	retlw	0
 10167  002B74                     __end_ofPL94:
 10168                           	opt stack 0
 10169                           tblptru	equ	0xFF8
 10170                           tblptrh	equ	0xFF7
 10171                           tblptrl	equ	0xFF6
 10172                           tablat	equ	0xFF5
 10173                           prodh	equ	0xFF4
 10174                           prodl	equ	0xFF3
 10175                           intcon	equ	0xFF2
 10176                           indf0	equ	0xFEF
 10177                           postinc0	equ	0xFEE
 10178                           fsr0h	equ	0xFEA
 10179                           fsr0l	equ	0xFE9
 10180                           wreg	equ	0xFE8
 10181                           indf1	equ	0xFE7
 10182                           postinc1	equ	0xFE6
 10183                           postdec1	equ	0xFE5
 10184                           fsr1h	equ	0xFE2
 10185                           fsr1l	equ	0xFE1
 10186                           indf2	equ	0xFDF
 10187                           postinc2	equ	0xFDE
 10188                           postdec2	equ	0xFDD
 10189                           plusw2	equ	0xFDB
 10190                           fsr2h	equ	0xFDA
 10191                           fsr2l	equ	0xFD9
 10192                           status	equ	0xFD8
 10193                           
 10194 ;; *************** function _calcCRC *****************
 10195 ;; Defined at:
 10196 ;;		line 2385 in file "main.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10199 ;;		 -> cmdbuf(80), 
 10200 ;;  len             1   14[BANK0 ] unsigned char 
 10201 ;; Auto vars:     Size  Location     Type
 10202 ;;  crc             1   16[BANK0 ] unsigned char 
 10203 ;;  j               1   15[BANK0 ] unsigned char 
 10204 ;; Return value:  Size  Location     Type
 10205 ;;                  1    wreg      unsigned char 
 10206 ;; Registers used:
 10207 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10208 ;; Tracked objects:
 10209 ;;		On entry : F/0
 10210 ;;		On exit  : F/0
 10211 ;;		Unchanged: 0/0
 10212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10213 ;;      Params:         0       3       0       0       0       0       0
 10214 ;;      Locals:         0       2       0       0       0       0       0
 10215 ;;      Temps:          0       0       0       0       0       0       0
 10216 ;;      Totals:         0       5       0       0       0       0       0
 10217 ;;Total ram usage:        5 bytes
 10218 ;; Hardware stack levels used:    1
 10219 ;; Hardware stack levels required when called:    5
 10220 ;; This function calls:
 10221 ;;		_crc8
 10222 ;; This function is called by:
 10223 ;;		_doModeVscp
 10224 ;; This function uses a non-reentrant model
 10225 ;;
 10226                           
 10227                           	psect	text16
 10228  0018D0                     __ptext16:
 10229                           	opt stack 0
 10230  0018D0                     _calcCRC:
 10231                           	opt stack 23
 10232                           
 10233                           ; BSR set to: 0
 10234                           ;main.c: 2386: uint8_t j;
 10235                           ;main.c: 2387: uint8_t crc = 0;
 10236                           
 10237                           ;incstack = 0
 10238                           ;incstack = 0
 10239  0018D0  6B70               	clrf	calcCRC@crc& (0+255),b
 10240                           
 10241                           ;main.c: 2389: for (j = 0; j < len; j++) {
 10242  0018D2  6B6F               	clrf	calcCRC@j& (0+255),b
 10243  0018D4  D00F               	goto	l12238
 10244  0018D6                     l12234:
 10245                           
 10246                           ; BSR set to: 0
 10247                           ;main.c: 2390: crc8(&crc, p[j]);
 10248  0018D6  0E00               	movlw	high calcCRC@crc
 10249  0018D8  6F68               	movwf	(?_crc8+1)& (0+255),b
 10250  0018DA  0E70               	movlw	low calcCRC@crc
 10251  0018DC  6F67               	movwf	?_crc8& (0+255),b
 10252  0018DE  516F               	movf	calcCRC@j& (0+255),w,b
 10253  0018E0  256C               	addwf	calcCRC@p& (0+255),w,b
 10254  0018E2  6ED9               	movwf	fsr2l,c
 10255  0018E4  0E00               	movlw	0
 10256  0018E6  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10257  0018E8  6EDA               	movwf	fsr2h,c
 10258  0018EA  50DF               	movf	indf2,w,c
 10259  0018EC  6F69               	movwf	(?_crc8+2)& (0+255),b
 10260  0018EE  ECB0  F00C         	call	_crc8	;wreg free
 10261                           
 10262                           ; BSR set to: 0
 10263  0018F2  2B6F               	incf	calcCRC@j& (0+255),f,b
 10264  0018F4                     l12238:
 10265                           
 10266                           ; BSR set to: 0
 10267  0018F4  516E               	movf	calcCRC@len& (0+255),w,b
 10268  0018F6  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10269  0018F8  E3EE               	bnc	l12234
 10270                           
 10271                           ; BSR set to: 0
 10272                           ;main.c: 2391: }
 10273                           ;main.c: 2393: return crc;
 10274  0018FA  5170               	movf	calcCRC@crc& (0+255),w,b
 10275                           
 10276                           ; BSR set to: 0
 10277  0018FC  0012               	return	
 10278  0018FE                     __end_of_calcCRC:
 10279                           	opt stack 0
 10280                           tblptru	equ	0xFF8
 10281                           tblptrh	equ	0xFF7
 10282                           tblptrl	equ	0xFF6
 10283                           tablat	equ	0xFF5
 10284                           prodh	equ	0xFF4
 10285                           prodl	equ	0xFF3
 10286                           intcon	equ	0xFF2
 10287                           indf0	equ	0xFEF
 10288                           postinc0	equ	0xFEE
 10289                           fsr0h	equ	0xFEA
 10290                           fsr0l	equ	0xFE9
 10291                           wreg	equ	0xFE8
 10292                           indf1	equ	0xFE7
 10293                           postinc1	equ	0xFE6
 10294                           postdec1	equ	0xFE5
 10295                           fsr1h	equ	0xFE2
 10296                           fsr1l	equ	0xFE1
 10297                           indf2	equ	0xFDF
 10298                           postinc2	equ	0xFDE
 10299                           postdec2	equ	0xFDD
 10300                           plusw2	equ	0xFDB
 10301                           fsr2h	equ	0xFDA
 10302                           fsr2l	equ	0xFD9
 10303                           status	equ	0xFD8
 10304                           
 10305 ;; *************** function _receiveSendEventCANAL *****************
 10306 ;; Defined at:
 10307 ;;		line 1780 in file "main.c"
 10308 ;; Parameters:    Size  Location     Type
 10309 ;;		None
 10310 ;; Auto vars:     Size  Location     Type
 10311 ;;  crc             1   32[BANK0 ] unsigned char 
 10312 ;;  data            8   18[BANK0 ] unsigned char [8]
 10313 ;;  id              4   27[BANK0 ] unsigned long 
 10314 ;;  dlc             1   31[BANK0 ] unsigned char 
 10315 ;;  i               1   26[BANK0 ] unsigned char 
 10316 ;; Return value:  Size  Location     Type
 10317 ;;                  1    wreg      enum E15660
 10318 ;; Registers used:
 10319 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10320 ;; Tracked objects:
 10321 ;;		On entry : F/0
 10322 ;;		On exit  : 0/0
 10323 ;;		Unchanged: 0/0
 10324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10325 ;;      Params:         0       0       0       0       0       0       0
 10326 ;;      Locals:         0      15       0       0       0       0       0
 10327 ;;      Temps:          0       0       0       0       0       0       0
 10328 ;;      Totals:         0      15       0       0       0       0       0
 10329 ;;Total ram usage:       15 bytes
 10330 ;; Hardware stack levels used:    1
 10331 ;; Hardware stack levels required when called:    6
 10332 ;; This function calls:
 10333 ;;		_WriteUSART
 10334 ;;		_sendEscapedUartData
 10335 ;;		_crc8
 10336 ;;		_getCANFrame
 10337 ;; This function is called by:
 10338 ;;		_doModeVscp
 10339 ;; This function uses a non-reentrant model
 10340 ;;
 10341                           
 10342                           	psect	text17
 10343  0038C2                     __ptext17:
 10344                           	opt stack 0
 10345  0038C2                     _receiveSendEventCANAL:
 10346                           	opt stack 22
 10347                           
 10348                           ; BSR set to: 0
 10349                           ;main.c: 1781: uint8_t i;
 10350                           ;main.c: 1782: uint32_t id;
 10351                           ;main.c: 1783: uint8_t dlc;
 10352                           ;main.c: 1784: uint8_t data[8];
 10353                           ;main.c: 1786: if ( getCANFrame( &id, &dlc, &data ) ) {
 10354                           
 10355                           ; BSR set to: 0
 10356                           ;incstack = 0
 10357                           ;incstack = 0
 10358  0038C2  0E00               	movlw	high receiveSendEventCANAL@dlc
 10359  0038C4  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10360  0038C6  0E7F               	movlw	low receiveSendEventCANAL@dlc
 10361  0038C8  6F6D               	movwf	?_getCANFrame& (0+255),b
 10362  0038CA  0E00               	movlw	high receiveSendEventCANAL@data
 10363  0038CC  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10364  0038CE  0E72               	movlw	low receiveSendEventCANAL@data
 10365  0038D0  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10366  0038D2  0E7B               	movlw	receiveSendEventCANAL@id& (0+255)
 10367  0038D4  ECFD  F010         	call	_getCANFrame
 10368  0038D8  0900               	iorlw	0
 10369  0038DA  E101 D08F          	bz	l941
 10370                           
 10371                           ; BSR set to: 0
 10372                           ;main.c: 1788: uint8_t crc = 0;
 10373  0038DE  6B80               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10374                           
 10375                           ; BSR set to: 0
 10376                           ;main.c: 1791: cntRxFrames++;
 10377  0038E0  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10378  0038E2  0E00               	movlw	0
 10379  0038E4  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10380  0038E6  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10381  0038E8  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10382                           
 10383                           ;main.c: 1792: cntRxBytes += dlc;
 10384  0038EA  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10385  0038EC  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10386  0038EE  0E00               	movlw	0
 10387  0038F0  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10388  0038F2  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10389  0038F4  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10390  0038F6                     l920:
 10391                           
 10392                           ; BSR set to: 0
 10393  0038F6  A2AC               	btfss	4012,1,c	;volatile
 10394  0038F8  D7FE               	goto	l920
 10395                           
 10396                           ; BSR set to: 0
 10397                           ;main.c: 1796: WriteUSART(0x10);
 10398  0038FA  0E10               	movlw	16
 10399  0038FC  ECEE  F00B         	call	_WriteUSART
 10400  003900                     l923:
 10401  003900  A2AC               	btfss	4012,1,c	;volatile
 10402  003902  D7FE               	goto	l923
 10403                           
 10404                           ;main.c: 1798: WriteUSART(0x02);
 10405  003904  0E02               	movlw	2
 10406  003906  ECEE  F00B         	call	_WriteUSART
 10407  00390A                     l926:
 10408  00390A  A2AC               	btfss	4012,1,c	;volatile
 10409  00390C  D7FE               	goto	l926
 10410                           
 10411                           ;main.c: 1802: WriteUSART(2);
 10412  00390E  0E02               	movlw	2
 10413  003910  ECEE  F00B         	call	_WriteUSART
 10414                           
 10415                           ;main.c: 1803: crc8(&crc, 2);
 10416  003914  0100               	movlb	0	; () banked
 10417  003916  0E00               	movlw	high receiveSendEventCANAL@crc
 10418  003918  6F68               	movwf	(?_crc8+1)& (0+255),b
 10419  00391A  0E80               	movlw	low receiveSendEventCANAL@crc
 10420  00391C  6F67               	movwf	?_crc8& (0+255),b
 10421  00391E  0E02               	movlw	2
 10422  003920  6F69               	movwf	(?_crc8+2)& (0+255),b
 10423  003922  ECB0  F00C         	call	_crc8	;wreg free
 10424  003926                     l929:
 10425                           
 10426                           ; BSR set to: 0
 10427  003926  A2AC               	btfss	4012,1,c	;volatile
 10428  003928  D7FE               	goto	l929
 10429                           
 10430                           ; BSR set to: 0
 10431                           ;main.c: 1807: WriteUSART(0);
 10432  00392A  0E00               	movlw	0
 10433  00392C  ECEE  F00B         	call	_WriteUSART
 10434                           
 10435                           ;main.c: 1808: crc8(&crc, 0);
 10436  003930  0100               	movlb	0	; () banked
 10437  003932  0E00               	movlw	high receiveSendEventCANAL@crc
 10438  003934  6F68               	movwf	(?_crc8+1)& (0+255),b
 10439  003936  0E80               	movlw	low receiveSendEventCANAL@crc
 10440  003938  6F67               	movwf	?_crc8& (0+255),b
 10441  00393A  0E00               	movlw	0
 10442  00393C  6B69               	clrf	(?_crc8+2)& (0+255),b
 10443  00393E  ECB0  F00C         	call	_crc8	;wreg free
 10444                           
 10445                           ; BSR set to: 0
 10446                           ;main.c: 1811: sendEscapedUartData(sequencyno, &crc);
 10447  003942  0E00               	movlw	high receiveSendEventCANAL@crc
 10448  003944  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10449  003946  0E80               	movlw	low receiveSendEventCANAL@crc
 10450  003948  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10451  00394A  51F3               	movf	_sequencyno& (0+255),w,b
 10452  00394C  EC21  F00F         	call	_sendEscapedUartData
 10453                           
 10454                           ; BSR set to: 0
 10455                           ;main.c: 1812: sequencyno++;
 10456  003950  2BF3               	incf	_sequencyno& (0+255),f,b
 10457                           
 10458                           ; BSR set to: 0
 10459                           ;main.c: 1815: sendEscapedUartData(0, &crc);
 10460  003952  0E00               	movlw	high receiveSendEventCANAL@crc
 10461  003954  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10462  003956  0E80               	movlw	low receiveSendEventCANAL@crc
 10463  003958  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10464  00395A  0E00               	movlw	0
 10465  00395C  EC21  F00F         	call	_sendEscapedUartData
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;main.c: 1816: sendEscapedUartData(5 + dlc, &crc);
 10469  003960  0E00               	movlw	high receiveSendEventCANAL@crc
 10470  003962  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10471  003964  0E80               	movlw	low receiveSendEventCANAL@crc
 10472  003966  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10473  003968  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10474  00396A  0F05               	addlw	5
 10475  00396C  EC21  F00F         	call	_sendEscapedUartData
 10476                           
 10477                           ; BSR set to: 0
 10478                           ;main.c: 1822: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10479  003970  0E00               	movlw	high receiveSendEventCANAL@crc
 10480  003972  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10481  003974  0E80               	movlw	low receiveSendEventCANAL@crc
 10482  003976  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10483  003978  0100               	movlb	0	; () banked
 10484  00397A  517E               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10485  00397C  EC21  F00F         	call	_sendEscapedUartData
 10486                           
 10487                           ; BSR set to: 0
 10488                           ;main.c: 1823: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10489  003980  0E00               	movlw	high receiveSendEventCANAL@crc
 10490  003982  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10491  003984  0E80               	movlw	low receiveSendEventCANAL@crc
 10492  003986  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10493  003988  0100               	movlb	0	; () banked
 10494  00398A  517D               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10495  00398C  EC21  F00F         	call	_sendEscapedUartData
 10496                           
 10497                           ; BSR set to: 0
 10498                           ;main.c: 1824: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10499  003990  0E00               	movlw	high receiveSendEventCANAL@crc
 10500  003992  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10501  003994  0E80               	movlw	low receiveSendEventCANAL@crc
 10502  003996  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10503  003998  0100               	movlb	0	; () banked
 10504  00399A  517C               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10505  00399C  EC21  F00F         	call	_sendEscapedUartData
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;main.c: 1825: sendEscapedUartData((id & 0xff), &crc);
 10509  0039A0  0E00               	movlw	high receiveSendEventCANAL@crc
 10510  0039A2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10511  0039A4  0E80               	movlw	low receiveSendEventCANAL@crc
 10512  0039A6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10513  0039A8  517B               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10514  0039AA  EC21  F00F         	call	_sendEscapedUartData
 10515                           
 10516                           ; BSR set to: 0
 10517                           ;main.c: 1828: sendEscapedUartData(dlc, &crc);
 10518  0039AE  0E00               	movlw	high receiveSendEventCANAL@crc
 10519  0039B0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10520  0039B2  0E80               	movlw	low receiveSendEventCANAL@crc
 10521  0039B4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10522  0039B6  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10523  0039B8  EC21  F00F         	call	_sendEscapedUartData
 10524                           
 10525                           ; BSR set to: 0
 10526                           ;main.c: 1831: for (i = 0; i < dlc; i++) {
 10527  0039BC  6B7A               	clrf	receiveSendEventCANAL@i& (0+255),b
 10528  0039BE  D00C               	goto	l12222
 10529  0039C0                     l12218:
 10530                           
 10531                           ; BSR set to: 0
 10532                           ;main.c: 1832: sendEscapedUartData( data[ i ], &crc );
 10533  0039C0  0E00               	movlw	high receiveSendEventCANAL@crc
 10534  0039C2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10535  0039C4  0E80               	movlw	low receiveSendEventCANAL@crc
 10536  0039C6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10537  0039C8  517A               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10538  0039CA  0F72               	addlw	low receiveSendEventCANAL@data
 10539  0039CC  6ED9               	movwf	fsr2l,c
 10540  0039CE  6ADA               	clrf	fsr2h,c
 10541  0039D0  50DF               	movf	indf2,w,c
 10542  0039D2  EC21  F00F         	call	_sendEscapedUartData
 10543                           
 10544                           ; BSR set to: 0
 10545  0039D6  2B7A               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10546  0039D8                     l12222:
 10547                           
 10548                           ; BSR set to: 0
 10549  0039D8  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10550  0039DA  5D7A               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10551  0039DC  E3F1               	bnc	l12218
 10552                           
 10553                           ; BSR set to: 0
 10554                           ;main.c: 1833: }
 10555                           ;main.c: 1838: sendEscapedUartData(crc, (0));
 10556  0039DE  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10557  0039E0  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10558  0039E2  5180               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10559  0039E4  EC21  F00F         	call	_sendEscapedUartData
 10560  0039E8                     l935:
 10561                           
 10562                           ; BSR set to: 0
 10563  0039E8  A2AC               	btfss	4012,1,c	;volatile
 10564  0039EA  D7FE               	goto	l935
 10565                           
 10566                           ; BSR set to: 0
 10567                           ;main.c: 1842: WriteUSART(0x10);
 10568  0039EC  0E10               	movlw	16
 10569  0039EE  ECEE  F00B         	call	_WriteUSART
 10570  0039F2                     l938:
 10571  0039F2  A2AC               	btfss	4012,1,c	;volatile
 10572  0039F4  D7FE               	goto	l938
 10573                           
 10574                           ;main.c: 1844: WriteUSART(0x03);
 10575  0039F6  0E03               	movlw	3
 10576  0039F8  ECEE  F00B         	call	_WriteUSART
 10577  0039FC                     l941:
 10578  0039FC  0012               	return	
 10579  0039FE                     __end_of_receiveSendEventCANAL:
 10580                           	opt stack 0
 10581                           tblptru	equ	0xFF8
 10582                           tblptrh	equ	0xFF7
 10583                           tblptrl	equ	0xFF6
 10584                           tablat	equ	0xFF5
 10585                           prodh	equ	0xFF4
 10586                           prodl	equ	0xFF3
 10587                           intcon	equ	0xFF2
 10588                           indf0	equ	0xFEF
 10589                           postinc0	equ	0xFEE
 10590                           fsr0h	equ	0xFEA
 10591                           fsr0l	equ	0xFE9
 10592                           wreg	equ	0xFE8
 10593                           indf1	equ	0xFE7
 10594                           postinc1	equ	0xFE6
 10595                           postdec1	equ	0xFE5
 10596                           fsr1h	equ	0xFE2
 10597                           fsr1l	equ	0xFE1
 10598                           indf2	equ	0xFDF
 10599                           postinc2	equ	0xFDE
 10600                           postdec2	equ	0xFDD
 10601                           plusw2	equ	0xFDB
 10602                           fsr2h	equ	0xFDA
 10603                           fsr2l	equ	0xFD9
 10604                           status	equ	0xFD8
 10605                           
 10606 ;; *************** function _receiveSendMultiEventCANAL *****************
 10607 ;; Defined at:
 10608 ;;		line 1857 in file "main.c"
 10609 ;; Parameters:    Size  Location     Type
 10610 ;;		None
 10611 ;; Auto vars:     Size  Location     Type
 10612 ;;  crc             1   33[BANK0 ] unsigned char 
 10613 ;;  data            8   18[BANK0 ] unsigned char [8]
 10614 ;;  id              4   29[BANK0 ] unsigned long 
 10615 ;;  pos             1   34[BANK0 ] unsigned char 
 10616 ;;  dlc             1   28[BANK0 ] unsigned char 
 10617 ;;  i               1   27[BANK0 ] unsigned char 
 10618 ;;  msgcount        1   26[BANK0 ] unsigned char 
 10619 ;; Return value:  Size  Location     Type
 10620 ;;                  1    wreg      enum E15660
 10621 ;; Registers used:
 10622 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10623 ;; Tracked objects:
 10624 ;;		On entry : F/0
 10625 ;;		On exit  : 0/0
 10626 ;;		Unchanged: 0/0
 10627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10628 ;;      Params:         0       0       0       0       0       0       0
 10629 ;;      Locals:         0      17       0       0       0       0       0
 10630 ;;      Temps:          0       0       0       0       0       0       0
 10631 ;;      Totals:         0      17       0       0       0       0       0
 10632 ;;Total ram usage:       17 bytes
 10633 ;; Hardware stack levels used:    1
 10634 ;; Hardware stack levels required when called:    6
 10635 ;; This function calls:
 10636 ;;		_WriteUSART
 10637 ;;		_sendEscapedUartData
 10638 ;;		_crc8
 10639 ;;		_getCANFrame
 10640 ;; This function is called by:
 10641 ;;		_doModeVscp
 10642 ;; This function uses a non-reentrant model
 10643 ;;
 10644                           
 10645                           	psect	text18
 10646  003CB8                     __ptext18:
 10647                           	opt stack 0
 10648  003CB8                     _receiveSendMultiEventCANAL:
 10649                           	opt stack 22
 10650                           
 10651                           ; BSR set to: 0
 10652                           ;main.c: 1858: uint8_t i;
 10653                           ;main.c: 1859: uint8_t pos=0;
 10654                           
 10655                           ;incstack = 0
 10656                           ;incstack = 0
 10657  003CB8  6B82               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10658                           
 10659                           ;main.c: 1860: uint8_t msgcount=0;
 10660  003CBA  6B7A               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10661                           
 10662                           ; BSR set to: 0
 10663                           ;main.c: 1861: uint32_t id;
 10664                           ;main.c: 1862: uint8_t dlc;
 10665                           ;main.c: 1863: uint8_t data[8];
 10666                           ;main.c: 1865: if ( getCANFrame( &id, &dlc, &data ) ) {
 10667  003CBC  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10668  003CBE  D8B1               	call	PL84	;call to abstracted procedure
 10669  003CC0  ECFD  F010         	call	_getCANFrame
 10670  003CC4  0900               	iorlw	0
 10671  003CC6  E101 D0A3          	bz	l973
 10672                           
 10673                           ; BSR set to: 0
 10674                           ;main.c: 1867: uint8_t crc = 0;
 10675  003CCA  6B81               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10676                           
 10677                           ; BSR set to: 0
 10678                           ;main.c: 1870: cntRxFrames++;
 10679  003CCC  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10680  003CCE  0E00               	movlw	0
 10681  003CD0  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10682  003CD2  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10683  003CD4  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10684                           
 10685                           ;main.c: 1871: cntRxBytes += dlc;
 10686  003CD6  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10687  003CD8  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10688  003CDA  0E00               	movlw	0
 10689  003CDC  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10690  003CDE  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10691  003CE0  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10692  003CE2                     l945:
 10693                           
 10694                           ; BSR set to: 0
 10695  003CE2  A2AC               	btfss	4012,1,c	;volatile
 10696  003CE4  D7FE               	goto	l945
 10697                           
 10698                           ; BSR set to: 0
 10699                           ;main.c: 1875: WriteUSART(0x10);
 10700  003CE6  0E10               	movlw	16
 10701  003CE8  ECEE  F00B         	call	_WriteUSART
 10702  003CEC                     l948:
 10703  003CEC  A2AC               	btfss	4012,1,c	;volatile
 10704  003CEE  D7FE               	goto	l948
 10705                           
 10706                           ;main.c: 1877: WriteUSART(0x02);
 10707  003CF0  0E02               	movlw	2
 10708  003CF2  ECEE  F00B         	call	_WriteUSART
 10709  003CF6                     l951:
 10710  003CF6  A2AC               	btfss	4012,1,c	;volatile
 10711  003CF8  D7FE               	goto	l951
 10712                           
 10713                           ;main.c: 1881: WriteUSART(6);
 10714  003CFA  0E06               	movlw	6
 10715  003CFC  ECEE  F00B         	call	_WriteUSART
 10716                           
 10717                           ;main.c: 1882: crc8(&crc, 6);
 10718  003D00  0100               	movlb	0	; () banked
 10719  003D02  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10720  003D04  6F68               	movwf	(?_crc8+1)& (0+255),b
 10721  003D06  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10722  003D08  6F67               	movwf	?_crc8& (0+255),b
 10723  003D0A  0E06               	movlw	6
 10724  003D0C  6F69               	movwf	(?_crc8+2)& (0+255),b
 10725  003D0E  ECB0  F00C         	call	_crc8	;wreg free
 10726  003D12                     l954:
 10727                           
 10728                           ; BSR set to: 0
 10729  003D12  A2AC               	btfss	4012,1,c	;volatile
 10730  003D14  D7FE               	goto	l954
 10731                           
 10732                           ; BSR set to: 0
 10733                           ;main.c: 1886: WriteUSART(0);
 10734  003D16  0E00               	movlw	0
 10735  003D18  ECEE  F00B         	call	_WriteUSART
 10736                           
 10737                           ;main.c: 1887: crc8(&crc, 0);
 10738  003D1C  0100               	movlb	0	; () banked
 10739  003D1E  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10740  003D20  6F68               	movwf	(?_crc8+1)& (0+255),b
 10741  003D22  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10742  003D24  6F67               	movwf	?_crc8& (0+255),b
 10743  003D26  0E00               	movlw	0
 10744  003D28  6B69               	clrf	(?_crc8+2)& (0+255),b
 10745  003D2A  ECB0  F00C         	call	_crc8	;wreg free
 10746                           
 10747                           ; BSR set to: 0
 10748                           ;main.c: 1890: sendEscapedUartData(sequencyno, &crc);
 10749  003D2E  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10750  003D30  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10751  003D32  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10752  003D34  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10753  003D36  51F3               	movf	_sequencyno& (0+255),w,b
 10754  003D38  EC21  F00F         	call	_sendEscapedUartData
 10755                           
 10756                           ; BSR set to: 0
 10757                           ;main.c: 1891: sequencyno++;
 10758  003D3C  2BF3               	incf	_sequencyno& (0+255),f,b
 10759  003D3E                     l12124:
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;main.c: 1901: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10763  003D3E  0E54               	movlw	low _wrkbuf
 10764  003D40  0100               	movlb	0	; () banked
 10765  003D42  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10766  003D44  6ED9               	movwf	fsr2l,c
 10767  003D46  6ADA               	clrf	fsr2h,c
 10768  003D48  0E01               	movlw	high _wrkbuf
 10769  003D4A  22DA               	addwfc	fsr2h,f,c
 10770  003D4C  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;main.c: 1902: pos++;
 10774                           
 10775                           ; BSR set to: 0
 10776                           ;main.c: 1903: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10777  003D50  D860               	call	PL26	;call to abstracted procedure
 10778  003D52  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;main.c: 1904: pos++;
 10782                           
 10783                           ; BSR set to: 0
 10784                           ;main.c: 1905: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10785  003D56  D85D               	call	PL26	;call to abstracted procedure
 10786  003D58  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10787                           
 10788                           ; BSR set to: 0
 10789                           ;main.c: 1906: pos++;
 10790                           
 10791                           ; BSR set to: 0
 10792                           ;main.c: 1907: wrkbuf[ pos ] = id & 0xff;
 10793  003D5C  D85A               	call	PL26	;call to abstracted procedure
 10794  003D5E  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;main.c: 1908: pos++;
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;main.c: 1911: wrkbuf[ pos ] = dlc;
 10801  003D62  D857               	call	PL26	;call to abstracted procedure
 10802  003D64  C07C  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;main.c: 1912: pos++;
 10806  003D68  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;main.c: 1915: for (i = 0; i < dlc; i++) {
 10810  003D6A  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10811  003D6C  D00F               	goto	l12152
 10812  003D6E                     l12146:
 10813                           
 10814                           ; BSR set to: 0
 10815                           ;main.c: 1916: wrkbuf[ pos ] = data[ i ];
 10816  003D6E  517B               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10817  003D70  0F72               	addlw	low receiveSendMultiEventCANAL@data
 10818  003D72  6ED9               	movwf	fsr2l,c
 10819  003D74  6ADA               	clrf	fsr2h,c
 10820  003D76  0E54               	movlw	low _wrkbuf
 10821  003D78  0100               	movlb	0	; () banked
 10822  003D7A  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10823  003D7C  6EE1               	movwf	fsr1l,c
 10824  003D7E  6AE2               	clrf	fsr1h,c
 10825  003D80  0E01               	movlw	high _wrkbuf
 10826  003D82  22E2               	addwfc	fsr1h,f,c
 10827  003D84  CFDF FFE7          	movff	indf2,indf1
 10828                           
 10829                           ; BSR set to: 1
 10830                           ;main.c: 1917: pos++;
 10831  003D88  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10832                           
 10833                           ; BSR set to: 0
 10834  003D8A  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10835  003D8C                     l12152:
 10836                           
 10837                           ; BSR set to: 0
 10838  003D8C  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10839  003D8E  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10840  003D90  E3EE               	bnc	l12146
 10841                           
 10842                           ; BSR set to: 0
 10843                           ;main.c: 1918: }
 10844                           ;main.c: 1920: msgcount++;
 10845  003D92  2B7A               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 10846                           
 10847                           ; BSR set to: 0
 10848                           ;main.c: 1922: } while ( ( msgcount < caps.maxCanalFrames ) &&
 10849                           ;main.c: 1923: ( msgcount < 5 ) &&
 10850                           ;main.c: 1924: getCANFrame( &id, &dlc, &data ) );
 10851  003D94  51F6               	movf	(_caps+1)& (0+255),w,b
 10852  003D96  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10853  003D98  D009               	goto	l12162
 10854                           
 10855                           ; BSR set to: 0
 10856  003D9A  0E05               	movlw	5
 10857  003D9C  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10858  003D9E  D006               	goto	l12162
 10859                           
 10860                           ; BSR set to: 0
 10861  003DA0  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10862  003DA2  D83F               	call	PL84	;call to abstracted procedure
 10863  003DA4  ECFD  F010         	call	_getCANFrame
 10864  003DA8  0900               	iorlw	0
 10865  003DAA  E1C9               	bnz	l12124
 10866  003DAC                     l12162:
 10867                           
 10868                           ; BSR set to: 0
 10869                           ;main.c: 1929: sendEscapedUartData(0, &crc);
 10870  003DAC  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10871  003DAE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10872  003DB0  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10873  003DB2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10874  003DB4  0E00               	movlw	0
 10875  003DB6  EC21  F00F         	call	_sendEscapedUartData
 10876                           
 10877                           ;main.c: 1930: sendEscapedUartData(pos, &crc);
 10878  003DBA  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10879  003DBC  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10880  003DBE  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10881  003DC0  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10882  003DC2  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10883  003DC4  EC21  F00F         	call	_sendEscapedUartData
 10884                           
 10885                           ; BSR set to: 0
 10886                           ;main.c: 1933: for (i = 0; i < pos; i++) {
 10887  003DC8  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10888  003DCA  D010               	goto	l12170
 10889  003DCC                     l12166:
 10890                           
 10891                           ; BSR set to: 0
 10892                           ;main.c: 1934: sendEscapedUartData( wrkbuf[ i ], &crc);
 10893  003DCC  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10894  003DCE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10895  003DD0  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10896  003DD2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10897  003DD4  0E54               	movlw	low _wrkbuf
 10898  003DD6  0100               	movlb	0	; () banked
 10899  003DD8  257B               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10900  003DDA  6ED9               	movwf	fsr2l,c
 10901  003DDC  6ADA               	clrf	fsr2h,c
 10902  003DDE  0101               	movlb	1	; () banked
 10903  003DE0  0E01               	movlw	high _wrkbuf
 10904  003DE2  22DA               	addwfc	fsr2h,f,c
 10905  003DE4  50DF               	movf	indf2,w,c
 10906  003DE6  EC21  F00F         	call	_sendEscapedUartData
 10907                           
 10908                           ; BSR set to: 0
 10909  003DEA  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10910  003DEC                     l12170:
 10911                           
 10912                           ; BSR set to: 0
 10913  003DEC  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10914  003DEE  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10915  003DF0  E3ED               	bnc	l12166
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;main.c: 1935: }
 10919                           ;main.c: 1938: sendEscapedUartData(crc, (0));
 10920  003DF2  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10921  003DF4  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10922  003DF6  5181               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 10923  003DF8  EC21  F00F         	call	_sendEscapedUartData
 10924  003DFC                     l967:
 10925                           
 10926                           ; BSR set to: 0
 10927  003DFC  A2AC               	btfss	4012,1,c	;volatile
 10928  003DFE  D7FE               	goto	l967
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;main.c: 1942: WriteUSART(0x10);
 10932  003E00  0E10               	movlw	16
 10933  003E02  ECEE  F00B         	call	_WriteUSART
 10934  003E06                     l970:
 10935  003E06  A2AC               	btfss	4012,1,c	;volatile
 10936  003E08  D7FE               	goto	l970
 10937                           
 10938                           ;main.c: 1944: WriteUSART(0x03);
 10939  003E0A  0E03               	movlw	3
 10940  003E0C  ECEE  F00B         	call	_WriteUSART
 10941  003E10                     l973:
 10942  003E10  0012               	return	
 10943  003E12                     __end_of_receiveSendMultiEventCANAL:
 10944                           	opt stack 0
 10945  003E12                     PL26:
 10946                           	opt stack 22
 10947  003E12  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10948  003E14  0E54               	movlw	low _wrkbuf
 10949  003E16  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10950  003E18  6ED9               	movwf	fsr2l,c
 10951  003E1A  6ADA               	clrf	fsr2h,c
 10952  003E1C  0E01               	movlw	high _wrkbuf
 10953  003E1E  22DA               	addwfc	fsr2h,f,c
 10954  003E20  0012               	return	
 10955  003E22                     __end_ofPL26:
 10956                           	opt stack 0
 10957  003E22                     PL84:
 10958                           	opt stack 22
 10959  003E22  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10960  003E24  0E7C               	movlw	low receiveSendMultiEventCANAL@dlc
 10961  003E26  6F6D               	movwf	?_getCANFrame& (0+255),b
 10962  003E28  0E00               	movlw	high receiveSendMultiEventCANAL@data
 10963  003E2A  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10964  003E2C  0E72               	movlw	low receiveSendMultiEventCANAL@data
 10965  003E2E  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10966  003E30  0E7D               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 10967  003E32  0012               	return	
 10968  003E34                     __end_ofPL84:
 10969                           	opt stack 0
 10970                           tblptru	equ	0xFF8
 10971                           tblptrh	equ	0xFF7
 10972                           tblptrl	equ	0xFF6
 10973                           tablat	equ	0xFF5
 10974                           prodh	equ	0xFF4
 10975                           prodl	equ	0xFF3
 10976                           intcon	equ	0xFF2
 10977                           indf0	equ	0xFEF
 10978                           postinc0	equ	0xFEE
 10979                           fsr0h	equ	0xFEA
 10980                           fsr0l	equ	0xFE9
 10981                           wreg	equ	0xFE8
 10982                           indf1	equ	0xFE7
 10983                           postinc1	equ	0xFE6
 10984                           postdec1	equ	0xFE5
 10985                           fsr1h	equ	0xFE2
 10986                           fsr1l	equ	0xFE1
 10987                           indf2	equ	0xFDF
 10988                           postinc2	equ	0xFDE
 10989                           postdec2	equ	0xFDD
 10990                           plusw2	equ	0xFDB
 10991                           fsr2h	equ	0xFDA
 10992                           fsr2l	equ	0xFD9
 10993                           status	equ	0xFD8
 10994                           
 10995 ;; *************** function _sendEscapedUartData *****************
 10996 ;; Defined at:
 10997 ;;		line 1510 in file "main.c"
 10998 ;; Parameters:    Size  Location     Type
 10999 ;;  c               1    wreg     unsigned char 
 11000 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 11001 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11002 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11003 ;;		 -> NULL(0), 
 11004 ;; Auto vars:     Size  Location     Type
 11005 ;;  c               1   14[BANK0 ] unsigned char 
 11006 ;; Return value:  Size  Location     Type
 11007 ;;		None               void
 11008 ;; Registers used:
 11009 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11010 ;; Tracked objects:
 11011 ;;		On entry : E/1
 11012 ;;		On exit  : F/0
 11013 ;;		Unchanged: 0/0
 11014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11015 ;;      Params:         0       2       0       0       0       0       0
 11016 ;;      Locals:         0       1       0       0       0       0       0
 11017 ;;      Temps:          0       0       0       0       0       0       0
 11018 ;;      Totals:         0       3       0       0       0       0       0
 11019 ;;Total ram usage:        3 bytes
 11020 ;; Hardware stack levels used:    1
 11021 ;; Hardware stack levels required when called:    5
 11022 ;; This function calls:
 11023 ;;		_WriteUSART
 11024 ;;		_crc8
 11025 ;; This function is called by:
 11026 ;;		_sendVSCPDriverErrorFrame
 11027 ;;		_sendVSCPDriverAck
 11028 ;;		_sendVSCPDriverNack
 11029 ;;		_sendVSCPDriverCommandReply
 11030 ;;		_receiveSendEventCANAL
 11031 ;;		_receiveSendMultiEventCANAL
 11032 ;;		_sendVSCPModeCapabilities
 11033 ;; This function uses a non-reentrant model
 11034 ;;
 11035                           
 11036                           	psect	text19
 11037  001E42                     __ptext19:
 11038                           	opt stack 0
 11039  001E42                     _sendEscapedUartData:
 11040                           	opt stack 22
 11041                           
 11042                           ;incstack = 0
 11043                           ;incstack = 0
 11044                           ;sendEscapedUartData@c stored from wreg
 11045  001E42  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11046                           
 11047                           ;main.c: 1511: if (0x10 == c) {
 11048  001E46  0100               	movlb	0	; () banked
 11049  001E48  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11050  001E4A  0A10               	xorlw	16
 11051  001E4C  E117               	bnz	l764
 11052  001E4E                     l756:
 11053  001E4E  A2AC               	btfss	4012,1,c	;volatile
 11054  001E50  D7FE               	goto	l756
 11055                           
 11056                           ;main.c: 1514: WriteUSART(0x10);
 11057  001E52  0E10               	movlw	16
 11058  001E54  ECEE  F00B         	call	_WriteUSART
 11059  001E58                     l759:
 11060  001E58  A2AC               	btfss	4012,1,c	;volatile
 11061  001E5A  D7FE               	goto	l759
 11062                           
 11063                           ;main.c: 1518: WriteUSART(0x10);
 11064  001E5C  0E10               	movlw	16
 11065  001E5E  ECEE  F00B         	call	_WriteUSART
 11066                           
 11067                           ;main.c: 1519: if ((0) != pcrc) crc8(pcrc, 0x10);
 11068  001E62  0100               	movlb	0	; () banked
 11069  001E64  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11070  001E66  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11071  001E68  E01B               	bz	l768
 11072                           
 11073                           ; BSR set to: 0
 11074  001E6A  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11075  001E6E  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11076  001E72  0E10               	movlw	16
 11077  001E74  6F69               	movwf	(?_crc8+2)& (0+255),b
 11078  001E76  ECB0  F00C         	call	_crc8	;wreg free
 11079  001E7A  D012               	goto	l768
 11080  001E7C                     l764:
 11081  001E7C  A2AC               	btfss	4012,1,c	;volatile
 11082  001E7E  D7FE               	goto	l764
 11083                           
 11084                           ;main.c: 1525: WriteUSART(c);
 11085  001E80  0100               	movlb	0	; () banked
 11086  001E82  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11087  001E84  ECEE  F00B         	call	_WriteUSART
 11088                           
 11089                           ;main.c: 1526: if ((0) != pcrc) crc8(pcrc, c);
 11090  001E88  0100               	movlb	0	; () banked
 11091  001E8A  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11092  001E8C  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11093  001E8E  E008               	bz	l768
 11094                           
 11095                           ; BSR set to: 0
 11096  001E90  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11097  001E94  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11098  001E98  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11099  001E9C  ECB0  F00C         	call	_crc8	;wreg free
 11100  001EA0                     l768:
 11101                           
 11102                           ; BSR set to: 0
 11103  001EA0  0012               	return	
 11104  001EA2                     __end_of_sendEscapedUartData:
 11105                           	opt stack 0
 11106                           tblptru	equ	0xFF8
 11107                           tblptrh	equ	0xFF7
 11108                           tblptrl	equ	0xFF6
 11109                           tablat	equ	0xFF5
 11110                           prodh	equ	0xFF4
 11111                           prodl	equ	0xFF3
 11112                           intcon	equ	0xFF2
 11113                           indf0	equ	0xFEF
 11114                           postinc0	equ	0xFEE
 11115                           fsr0h	equ	0xFEA
 11116                           fsr0l	equ	0xFE9
 11117                           wreg	equ	0xFE8
 11118                           indf1	equ	0xFE7
 11119                           postinc1	equ	0xFE6
 11120                           postdec1	equ	0xFE5
 11121                           fsr1h	equ	0xFE2
 11122                           fsr1l	equ	0xFE1
 11123                           indf2	equ	0xFDF
 11124                           postinc2	equ	0xFDE
 11125                           postdec2	equ	0xFDD
 11126                           plusw2	equ	0xFDB
 11127                           fsr2h	equ	0xFDA
 11128                           fsr2l	equ	0xFD9
 11129                           status	equ	0xFD8
 11130                           
 11131 ;; *************** function _crc8 *****************
 11132 ;; Defined at:
 11133 ;;		line 47 in file "crc8.c"
 11134 ;; Parameters:    Size  Location     Type
 11135 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11136 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11137 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11138 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11139 ;;  m               1    9[BANK0 ] unsigned char 
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;		None
 11142 ;; Return value:  Size  Location     Type
 11143 ;;		None               void
 11144 ;; Registers used:
 11145 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11146 ;; Tracked objects:
 11147 ;;		On entry : F/0
 11148 ;;		On exit  : F/0
 11149 ;;		Unchanged: 0/0
 11150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11151 ;;      Params:         0       3       0       0       0       0       0
 11152 ;;      Locals:         0       0       0       0       0       0       0
 11153 ;;      Temps:          0       2       0       0       0       0       0
 11154 ;;      Totals:         0       5       0       0       0       0       0
 11155 ;;Total ram usage:        5 bytes
 11156 ;; Hardware stack levels used:    1
 11157 ;; Hardware stack levels required when called:    4
 11158 ;; This function calls:
 11159 ;;		_init_crc8
 11160 ;; This function is called by:
 11161 ;;		_sendEscapedUartData
 11162 ;;		_sendVSCPDriverErrorFrame
 11163 ;;		_sendVSCPDriverAck
 11164 ;;		_sendVSCPDriverNack
 11165 ;;		_sendVSCPDriverCommandReply
 11166 ;;		_receiveSendEventCANAL
 11167 ;;		_receiveSendMultiEventCANAL
 11168 ;;		_sendVSCPModeCapabilities
 11169 ;;		_calcCRC
 11170 ;; This function uses a non-reentrant model
 11171 ;;
 11172                           
 11173                           	psect	text20
 11174  001960                     __ptext20:
 11175                           	opt stack 0
 11176  001960                     _crc8:
 11177                           	opt stack 23
 11178                           
 11179                           ; BSR set to: 0
 11180                           ;crc8.c: 48: if ( !made_table ) {
 11181                           
 11182                           ; BSR set to: 0
 11183                           ;incstack = 0
 11184                           ;incstack = 0
 11185  001960  500E               	movf	_made_table+1,w,c
 11186  001962  100D               	iorwf	_made_table,w,c
 11187  001964  B4D8               	btfsc	status,2,c
 11188                           
 11189                           ; BSR set to: 0
 11190                           ;crc8.c: 49: init_crc8();
 11191  001966  EC17  F010         	call	_init_crc8	;wreg free
 11192                           
 11193                           ; BSR set to: 0
 11194                           ;crc8.c: 50: }
 11195                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11196  00196A  C067  FFD9         	movff	crc8@crc,fsr2l
 11197  00196E  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11198  001972  50DF               	movf	indf2,w,c
 11199  001974  1969               	xorwf	crc8@m& (0+255),w,b
 11200  001976  6F6A               	movwf	??_crc8& (0+255),b
 11201  001978  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11202  00197A  0E00               	movlw	low _crc8_table
 11203  00197C  0100               	movlb	0	; () banked
 11204  00197E  256A               	addwf	??_crc8& (0+255),w,b
 11205  001980  6ED9               	movwf	fsr2l,c
 11206  001982  0E03               	movlw	high _crc8_table
 11207  001984  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11208  001986  6EDA               	movwf	fsr2h,c
 11209  001988  C067  FFE1         	movff	crc8@crc,fsr1l
 11210  00198C  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11211  001990  CFDF FFE7          	movff	indf2,indf1
 11212                           
 11213                           ; BSR set to: 0
 11214  001994  0012               	return	
 11215  001996                     __end_of_crc8:
 11216                           	opt stack 0
 11217                           tblptru	equ	0xFF8
 11218                           tblptrh	equ	0xFF7
 11219                           tblptrl	equ	0xFF6
 11220                           tablat	equ	0xFF5
 11221                           prodh	equ	0xFF4
 11222                           prodl	equ	0xFF3
 11223                           intcon	equ	0xFF2
 11224                           indf0	equ	0xFEF
 11225                           postinc0	equ	0xFEE
 11226                           fsr0h	equ	0xFEA
 11227                           fsr0l	equ	0xFE9
 11228                           wreg	equ	0xFE8
 11229                           indf1	equ	0xFE7
 11230                           postinc1	equ	0xFE6
 11231                           postdec1	equ	0xFE5
 11232                           fsr1h	equ	0xFE2
 11233                           fsr1l	equ	0xFE1
 11234                           indf2	equ	0xFDF
 11235                           postinc2	equ	0xFDE
 11236                           postdec2	equ	0xFDD
 11237                           plusw2	equ	0xFDB
 11238                           fsr2h	equ	0xFDA
 11239                           fsr2l	equ	0xFD9
 11240                           status	equ	0xFD8
 11241                           
 11242 ;; *************** function _init_crc8 *****************
 11243 ;; Defined at:
 11244 ;;		line 25 in file "crc8.c"
 11245 ;; Parameters:    Size  Location     Type
 11246 ;;		None
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;  i               2    5[BANK0 ] int 
 11249 ;;  j               2    2[BANK0 ] int 
 11250 ;;  crc             1    4[BANK0 ] unsigned char 
 11251 ;; Return value:  Size  Location     Type
 11252 ;;		None               void
 11253 ;; Registers used:
 11254 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11255 ;; Tracked objects:
 11256 ;;		On entry : F/0
 11257 ;;		On exit  : F/0
 11258 ;;		Unchanged: 0/0
 11259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11260 ;;      Params:         0       0       0       0       0       0       0
 11261 ;;      Locals:         0       7       0       0       0       0       0
 11262 ;;      Temps:          0       0       0       0       0       0       0
 11263 ;;      Totals:         0       7       0       0       0       0       0
 11264 ;;Total ram usage:        7 bytes
 11265 ;; Hardware stack levels used:    1
 11266 ;; Hardware stack levels required when called:    3
 11267 ;; This function calls:
 11268 ;;		Nothing
 11269 ;; This function is called by:
 11270 ;;		_main
 11271 ;;		_crc8
 11272 ;; This function uses a non-reentrant model
 11273 ;;
 11274                           
 11275                           	psect	text21
 11276  00202E                     __ptext21:
 11277                           	opt stack 0
 11278  00202E                     _init_crc8:
 11279                           	opt stack 23
 11280                           
 11281                           ; BSR set to: 0
 11282                           ;crc8.c: 26: int i,j;
 11283                           ;crc8.c: 27: unsigned char crc;
 11284                           ;crc8.c: 29: if (!made_table) {
 11285                           
 11286                           ; BSR set to: 0
 11287                           ;incstack = 0
 11288                           ;incstack = 0
 11289  00202E  500E               	movf	_made_table+1,w,c
 11290  002030  100D               	iorwf	_made_table,w,c
 11291  002032  E131               	bnz	l1572
 11292                           
 11293                           ; BSR set to: 0
 11294                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11295  002034  6B65               	clrf	init_crc8@i& (0+255),b
 11296  002036  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11297  002038                     l1564:
 11298                           
 11299                           ; BSR set to: 0
 11300                           ;crc8.c: 31: crc = i;
 11301  002038  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11302                           
 11303                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11304  00203C  6B62               	clrf	init_crc8@j& (0+255),b
 11305  00203E  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11306  002040                     l1566:
 11307                           
 11308                           ; BSR set to: 0
 11309                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11310  002040  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11311  002042  D003               	goto	l9906
 11312                           
 11313                           ; BSR set to: 0
 11314  002044  6B60               	clrf	_init_crc8$2075& (0+255),b
 11315  002046  6B61               	clrf	(_init_crc8$2075+1)& (0+255),b
 11316  002048  D003               	goto	l9908
 11317  00204A                     l9906:
 11318                           
 11319                           ; BSR set to: 0
 11320  00204A  6B61               	clrf	(_init_crc8$2075+1)& (0+255),b
 11321  00204C  0E07               	movlw	7
 11322  00204E  6F60               	movwf	_init_crc8$2075& (0+255),b
 11323  002050                     l9908:
 11324                           
 11325                           ; BSR set to: 0
 11326  002050  5164               	movf	init_crc8@crc& (0+255),w,b
 11327  002052  2564               	addwf	init_crc8@crc& (0+255),w,b
 11328  002054  1960               	xorwf	_init_crc8$2075& (0+255),w,b
 11329  002056  6F64               	movwf	init_crc8@crc& (0+255),b
 11330                           
 11331                           ; BSR set to: 0
 11332  002058  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11333  00205A  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11334                           
 11335                           ; BSR set to: 0
 11336  00205C  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11337  00205E  0A80               	xorlw	128
 11338  002060  0F80               	addlw	-128
 11339  002062  0E08               	movlw	8
 11340  002064  B4D8               	btfsc	status,2,c
 11341  002066  5D62               	subwf	init_crc8@j& (0+255),w,b
 11342  002068  E3EB               	bnc	l1566
 11343                           
 11344                           ; BSR set to: 0
 11345                           ;crc8.c: 34: }
 11346                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11347  00206A  0E00               	movlw	low _crc8_table
 11348  00206C  0100               	movlb	0	; () banked
 11349  00206E  2565               	addwf	init_crc8@i& (0+255),w,b
 11350  002070  6ED9               	movwf	fsr2l,c
 11351  002072  0E03               	movlw	high _crc8_table
 11352  002074  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11353  002076  6EDA               	movwf	fsr2h,c
 11354  002078  C064  FFDF         	movff	init_crc8@crc,indf2
 11355                           
 11356                           ; BSR set to: 0
 11357  00207C  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11358  00207E  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11359                           
 11360                           ; BSR set to: 0
 11361  002080  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11362  002082  0A80               	xorlw	128
 11363  002084  0F7F               	addlw	-129
 11364  002086  0E00               	movlw	0
 11365  002088  B4D8               	btfsc	status,2,c
 11366  00208A  5D65               	subwf	init_crc8@i& (0+255),w,b
 11367  00208C  E3D5               	bnc	l1564
 11368                           
 11369                           ; BSR set to: 0
 11370                           ;crc8.c: 37: }
 11371                           ;crc8.c: 38: made_table=1;
 11372  00208E  0E00               	movlw	0
 11373  002090  6E0E               	movwf	_made_table+1,c
 11374  002092  0E01               	movlw	1
 11375  002094  6E0D               	movwf	_made_table,c
 11376  002096                     l1572:
 11377                           
 11378                           ; BSR set to: 0
 11379  002096  0012               	return	
 11380  002098                     __end_of_init_crc8:
 11381                           	opt stack 0
 11382                           tblptru	equ	0xFF8
 11383                           tblptrh	equ	0xFF7
 11384                           tblptrl	equ	0xFF6
 11385                           tablat	equ	0xFF5
 11386                           prodh	equ	0xFF4
 11387                           prodl	equ	0xFF3
 11388                           intcon	equ	0xFF2
 11389                           indf0	equ	0xFEF
 11390                           postinc0	equ	0xFEE
 11391                           fsr0h	equ	0xFEA
 11392                           fsr0l	equ	0xFE9
 11393                           wreg	equ	0xFE8
 11394                           indf1	equ	0xFE7
 11395                           postinc1	equ	0xFE6
 11396                           postdec1	equ	0xFE5
 11397                           fsr1h	equ	0xFE2
 11398                           fsr1l	equ	0xFE1
 11399                           indf2	equ	0xFDF
 11400                           postinc2	equ	0xFDE
 11401                           postdec2	equ	0xFDD
 11402                           plusw2	equ	0xFDB
 11403                           fsr2h	equ	0xFDA
 11404                           fsr2l	equ	0xFD9
 11405                           status	equ	0xFD8
 11406                           
 11407 ;; *************** function _doModeVerbose *****************
 11408 ;; Defined at:
 11409 ;;		line 492 in file "main.c"
 11410 ;; Parameters:    Size  Location     Type
 11411 ;;		None
 11412 ;; Auto vars:     Size  Location     Type
 11413 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11414 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 11415 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 11416 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 11417 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 11418 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11419 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11420 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11421 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 11422 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 11423 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 11424 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 11425 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11426 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11427 ;;  id              4   35[BANK2 ] unsigned long 
 11428 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11429 ;;		 -> NULL(0), cmdbuf(80), 
 11430 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11431 ;;  maskno          1   40[BANK2 ] unsigned char 
 11432 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 11433 ;;  mask_type       1   18[BANK2 ] unsigned char 
 11434 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 11435 ;;  id              4    0[BANK2 ] unsigned long 
 11436 ;;  p               2   57[BANK2 ] PTR unsigned char 
 11437 ;;		 -> NULL(0), cmdbuf(80), 
 11438 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11439 ;;  filterno        1   39[BANK2 ] unsigned char 
 11440 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 11441 ;;  filter_type     1   15[BANK2 ] unsigned char 
 11442 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 11443 ;;  nodeid          1   47[BANK2 ] unsigned char 
 11444 ;;  p               2   52[BANK2 ] PTR unsigned char 
 11445 ;;		 -> NULL(0), cmdbuf(80), 
 11446 ;;  value           1   41[BANK2 ] unsigned char 
 11447 ;;  reg             1   34[BANK2 ] unsigned char 
 11448 ;;  page            1   33[BANK2 ] unsigned char 
 11449 ;;  nodeid          1   13[BANK2 ] unsigned char 
 11450 ;;  p               2   50[BANK2 ] PTR unsigned char 
 11451 ;;		 -> NULL(0), cmdbuf(80), 
 11452 ;;  value           1   49[BANK2 ] unsigned char 
 11453 ;;  i               1   48[BANK2 ] unsigned char 
 11454 ;;  reg             1   46[BANK2 ] unsigned char 
 11455 ;;  page            1   45[BANK2 ] unsigned char 
 11456 ;;  count           1   43[BANK2 ] unsigned char 
 11457 ;;  rv              1   32[BANK2 ] enum E15660
 11458 ;;  nodeid          1   12[BANK2 ] unsigned char 
 11459 ;;  p               2   55[BANK2 ] PTR unsigned char 
 11460 ;;		 -> NULL(0), cmdbuf(80), 
 11461 ;;  ifmode          1   54[BANK2 ] enum E16371
 11462 ;;  c               1   44[BANK2 ] unsigned char 
 11463 ;;  i               1   42[BANK2 ] unsigned char 
 11464 ;; Return value:  Size  Location     Type
 11465 ;;		None               void
 11466 ;; Registers used:
 11467 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11468 ;; Tracked objects:
 11469 ;;		On entry : 0/0
 11470 ;;		On exit  : 0/0
 11471 ;;		Unchanged: 0/0
 11472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11473 ;;      Params:         0       0       0       0       0       0       0
 11474 ;;      Locals:         0       0       0      61       0       0       0
 11475 ;;      Temps:          0       0      20       0       0       0       0
 11476 ;;      Totals:         0       0      20      61       0       0       0
 11477 ;;Total ram usage:       81 bytes
 11478 ;; Hardware stack levels used:    1
 11479 ;; Hardware stack levels required when called:   10
 11480 ;; This function calls:
 11481 ;;		_putsUSART
 11482 ;;		_printFirmwareVersion
 11483 ;;		_fifo_read
 11484 ;;		_writeEEPROM
 11485 ;;		_receivePrintEventVerbose
 11486 ;;		_stristr
 11487 ;;		_ECANSetOperationMode
 11488 ;;		_strtok
 11489 ;;		_atoi
 11490 ;;		_memset
 11491 ;;		_sendVSCPFrame
 11492 ;;		_printStatistics
 11493 ;;		_printErrors
 11494 ;;		_printHelp
 11495 ;;		_findNodes
 11496 ;;		_strcpy
 11497 ;;		_strchr
 11498 ;;		_readRegisterExtended
 11499 ;;		_sprintf
 11500 ;;		_WriteUSART
 11501 ;;		_printBinary
 11502 ;;		_writeRegisterExtended
 11503 ;;		_printNodeFirmwareVersion
 11504 ;;		_printGUID
 11505 ;;		_printMDF
 11506 ;;		_setFilter
 11507 ;;		__CANIDToRegs
 11508 ;; This function is called by:
 11509 ;;		_main
 11510 ;; This function uses a non-reentrant model
 11511 ;;
 11512                           
 11513                           	psect	text22
 11514  005912                     __ptext22:
 11515                           	opt stack 0
 11516  005912                     _doModeVerbose:
 11517                           	opt stack 19
 11518                           
 11519                           ;main.c: 493: uint8_t c;
 11520                           ;main.c: 494: uint8_t i;
 11521                           ;main.c: 497: if (!bSilent) {
 11522                           
 11523                           ; BSR set to: 0
 11524                           ;incstack = 0
 11525                           ;incstack = 0
 11526  005912  0101               	movlb	1	; () banked
 11527  005914  6701               	tstfsz	_bSilent& (0+255),b
 11528  005916  D002               	goto	l10036
 11529                           
 11530                           ; BSR set to: 1
 11531                           ;main.c: 498: receivePrintEventVerbose();
 11532  005918  EC66  F024         	call	_receivePrintEventVerbose	;wreg free
 11533  00591C                     l10036:
 11534                           
 11535                           ;main.c: 499: }
 11536                           ;main.c: 502: (INTCONbits.GIE = 0);
 11537  00591C  9EF2               	bcf	intcon,7,c	;volatile
 11538                           
 11539                           ;main.c: 504: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11540  00591E  0E02               	movlw	high doModeVerbose@c
 11541  005920  0100               	movlb	0	; () banked
 11542  005922  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11543  005924  0EAC               	movlw	low doModeVerbose@c
 11544  005926  6F60               	movwf	?_fifo_read& (0+255),b
 11545  005928  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 11546  00592A  0E01               	movlw	1
 11547  00592C  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11548  00592E  0E23               	movlw	_serialInputFifo& (0+255)
 11549  005930  ECBA  F015         	call	_fifo_read
 11550  005934  0560               	decf	?_fifo_read& (0+255),w,b
 11551  005936  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11552  005938  E002 EFB0  F035    	bnz	l10638
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;main.c: 507: (INTCONbits.GIE = 1);
 11556  00593E  8EF2               	bsf	intcon,7,c	;volatile
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;main.c: 510: cmdbuf[ pos ] = c;
 11560  005940  EC6B  F022         	call	PL18	;call to abstracted procedure
 11561  005944  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 11562                           
 11563                           ; BSR set to: 2
 11564                           ;main.c: 511: pos++;
 11565  005948  2B02               	incf	_pos& (0+255),f,b
 11566                           
 11567                           ; BSR set to: 1
 11568                           ;main.c: 513: if (pos >= 128u) {
 11569  00594A  0E7F               	movlw	127
 11570  00594C  6502               	cpfsgt	_pos& (0+255),b
 11571  00594E  D001               	goto	l10050
 11572                           
 11573                           ; BSR set to: 1
 11574                           ;main.c: 517: pos = 0;
 11575  005950  6B02               	clrf	_pos& (0+255),b
 11576  005952                     l10050:
 11577                           
 11578                           ; BSR set to: 1
 11579                           ;main.c: 519: }
 11580                           ;main.c: 522: if (0x0d == c) {
 11581  005952  0102               	movlb	2	; () banked
 11582  005954  51AC               	movf	doModeVerbose@c& (0+255),w,b
 11583  005956  0A0D               	xorlw	13
 11584  005958  E002 EFB0  F035    	bnz	l10638
 11585                           
 11586                           ; BSR set to: 2
 11587                           ;main.c: 524: cmdbuf[ pos ] = 0;
 11588  00595E  EC6B  F022         	call	PL18	;call to abstracted procedure
 11589  005962  6ADF               	clrf	indf2,c
 11590                           
 11591                           ; BSR set to: 1
 11592                           ;main.c: 527: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11593  005964  0100               	movlb	0	; () banked
 11594  005966  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11595  005968  0E04               	movlw	low _cmdbuf
 11596  00596A  6F6D               	movwf	?_stristr& (0+255),b
 11597  00596C  0E7C               	movlw	high STR_6
 11598  00596E  6F70               	movwf	(?_stristr+3)& (0+255),b
 11599  005970  0ECF               	movlw	low STR_6
 11600  005972  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11601  005974  EC39  F011         	call	_stristr	;wreg free
 11602  005978  ECB2  F035         	call	PL2	;call to abstracted procedure
 11603  00597C  E104               	bnz	u12165
 11604  00597E  0100               	movlb	0	; () banked
 11605  005980  516D               	movf	?_stristr& (0+255),w,b
 11606  005982  0101               	movlb	1	; () banked
 11607  005984  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11608  005986                     u12165:
 11609  005986  E111               	bnz	l10060
 11610                           
 11611                           ; BSR set to: 1
 11612                           ;main.c: 528: putsUSART((char *) "Will enter bootloader now...\r\n");
 11613  005988  0E77               	movlw	high STR_7
 11614  00598A  0100               	movlb	0	; () banked
 11615  00598C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11616  00598E  0EEC               	movlw	low STR_7
 11617  005990  6F61               	movwf	?_putsUSART& (0+255),b
 11618  005992  EC9B  F00E         	call	_putsUSART	;wreg free
 11619                           
 11620                           ;main.c: 529: writeEEPROM(0x00, 0xFF);
 11621  005996  0100               	movlb	0	; () banked
 11622  005998  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 11623  00599A  6B60               	clrf	?_writeEEPROM& (0+255),b
 11624  00599C  0EFF               	movlw	255
 11625  00599E  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 11626  0059A0  EC3E  F00C         	call	_writeEEPROM	;wreg free
 11627  0059A4  00FF               	reset		;# 
 11628                           
 11629                           ;main.c: 531: }
 11630  0059A6  EFA2  F035         	goto	l10634
 11631  0059AA                     l10060:
 11632                           
 11633                           ; BSR set to: 1
 11634                           ;main.c: 533: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11635  0059AA  0E01               	movlw	high _cmdbuf
 11636  0059AC  0100               	movlb	0	; () banked
 11637  0059AE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11638  0059B0  0E04               	movlw	low _cmdbuf
 11639  0059B2  6F6D               	movwf	?_stristr& (0+255),b
 11640  0059B4  0E7C               	movlw	high STR_8
 11641  0059B6  6F70               	movwf	(?_stristr+3)& (0+255),b
 11642  0059B8  0EB6               	movlw	low STR_8
 11643  0059BA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11644  0059BC  EC39  F011         	call	_stristr	;wreg free
 11645  0059C0  ECB2  F035         	call	PL2	;call to abstracted procedure
 11646  0059C4  E104               	bnz	u12175
 11647  0059C6  0100               	movlb	0	; () banked
 11648  0059C8  516D               	movf	?_stristr& (0+255),w,b
 11649  0059CA  0101               	movlb	1	; () banked
 11650  0059CC  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11651  0059CE                     u12175:
 11652  0059CE  E10C               	bnz	l10068
 11653                           
 11654                           ; BSR set to: 1
 11655                           ;main.c: 534: bSilent = 0;
 11656  0059D0  6B01               	clrf	_bSilent& (0+255),b
 11657                           
 11658                           ; BSR set to: 1
 11659                           ;main.c: 535: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11660  0059D2  0E00               	movlw	0
 11661  0059D4  EC03  F00C         	call	_ECANSetOperationMode
 11662                           
 11663                           ; BSR set to: 0
 11664                           ;main.c: 536: putsUSART((char *) "+OK\r\n");
 11665  0059D8  0E7C               	movlw	high STR_9
 11666  0059DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11667  0059DC  0E7F               	movlw	low STR_9
 11668  0059DE  6F61               	movwf	?_putsUSART& (0+255),b
 11669  0059E0  EC9B  F00E         	call	_putsUSART	;wreg free
 11670                           
 11671                           ;main.c: 537: }
 11672  0059E4  EFA2  F035         	goto	l10634
 11673  0059E8                     l10068:
 11674                           
 11675                           ; BSR set to: 1
 11676                           ;main.c: 539: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11677  0059E8  0E01               	movlw	high _cmdbuf
 11678  0059EA  0100               	movlb	0	; () banked
 11679  0059EC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11680  0059EE  0E04               	movlw	low _cmdbuf
 11681  0059F0  6F6D               	movwf	?_stristr& (0+255),b
 11682  0059F2  0E7C               	movlw	high STR_10
 11683  0059F4  6F70               	movwf	(?_stristr+3)& (0+255),b
 11684  0059F6  0E5D               	movlw	low STR_10
 11685  0059F8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11686  0059FA  EC39  F011         	call	_stristr	;wreg free
 11687  0059FE  ECB2  F035         	call	PL2	;call to abstracted procedure
 11688  005A02  E104               	bnz	u12185
 11689  005A04  0100               	movlb	0	; () banked
 11690  005A06  516D               	movf	?_stristr& (0+255),w,b
 11691  005A08  0101               	movlb	1	; () banked
 11692  005A0A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11693  005A0C                     u12185:
 11694  005A0C  E10D               	bnz	l10076
 11695                           
 11696                           ; BSR set to: 1
 11697                           ;main.c: 540: bSilent = 1;
 11698  005A0E  0E01               	movlw	1
 11699  005A10  6F01               	movwf	_bSilent& (0+255),b
 11700                           
 11701                           ; BSR set to: 1
 11702                           ;main.c: 541: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11703  005A12  0E00               	movlw	0
 11704  005A14  EC03  F00C         	call	_ECANSetOperationMode
 11705                           
 11706                           ; BSR set to: 0
 11707                           ;main.c: 542: putsUSART((char *) "+OK\r\n");
 11708  005A18  0E7C               	movlw	high STR_9
 11709  005A1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11710  005A1C  0E7F               	movlw	low STR_9
 11711  005A1E  6F61               	movwf	?_putsUSART& (0+255),b
 11712  005A20  EC9B  F00E         	call	_putsUSART	;wreg free
 11713                           
 11714                           ;main.c: 543: }
 11715  005A24  EFA2  F035         	goto	l10634
 11716  005A28                     l10076:
 11717                           
 11718                           ; BSR set to: 1
 11719                           ;main.c: 545: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11720  005A28  0E01               	movlw	high _cmdbuf
 11721  005A2A  0100               	movlb	0	; () banked
 11722  005A2C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11723  005A2E  0E04               	movlw	low _cmdbuf
 11724  005A30  6F6D               	movwf	?_stristr& (0+255),b
 11725  005A32  0E7C               	movlw	high STR_12
 11726  005A34  6F70               	movwf	(?_stristr+3)& (0+255),b
 11727  005A36  0E91               	movlw	low STR_12
 11728  005A38  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11729  005A3A  EC39  F011         	call	_stristr	;wreg free
 11730  005A3E  ECB2  F035         	call	PL2	;call to abstracted procedure
 11731  005A42  E104               	bnz	u12195
 11732  005A44  0100               	movlb	0	; () banked
 11733  005A46  516D               	movf	?_stristr& (0+255),w,b
 11734  005A48  0101               	movlb	1	; () banked
 11735  005A4A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11736  005A4C                     u12195:
 11737  005A4C  E10D               	bnz	l10084
 11738                           
 11739                           ; BSR set to: 1
 11740                           ;main.c: 546: bSilent = 1;
 11741  005A4E  0E01               	movlw	1
 11742  005A50  6F01               	movwf	_bSilent& (0+255),b
 11743                           
 11744                           ; BSR set to: 1
 11745                           ;main.c: 547: ECANSetOperationMode(0x20);
 11746  005A52  0E20               	movlw	32
 11747  005A54  EC03  F00C         	call	_ECANSetOperationMode
 11748                           
 11749                           ; BSR set to: 0
 11750                           ;main.c: 548: putsUSART((char *) "+OK\r\n");
 11751  005A58  0E7C               	movlw	high STR_9
 11752  005A5A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11753  005A5C  0E7F               	movlw	low STR_9
 11754  005A5E  6F61               	movwf	?_putsUSART& (0+255),b
 11755  005A60  EC9B  F00E         	call	_putsUSART	;wreg free
 11756                           
 11757                           ;main.c: 549: }
 11758  005A64  EFA2  F035         	goto	l10634
 11759  005A68                     l10084:
 11760                           
 11761                           ; BSR set to: 1
 11762                           ;main.c: 551: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11763  005A68  0E01               	movlw	high _cmdbuf
 11764  005A6A  0100               	movlb	0	; () banked
 11765  005A6C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11766  005A6E  0E04               	movlw	low _cmdbuf
 11767  005A70  6F6D               	movwf	?_stristr& (0+255),b
 11768  005A72  0E7B               	movlw	high STR_14
 11769  005A74  6F70               	movwf	(?_stristr+3)& (0+255),b
 11770  005A76  0ECC               	movlw	low STR_14
 11771  005A78  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11772  005A7A  EC39  F011         	call	_stristr	;wreg free
 11773  005A7E  ECB2  F035         	call	PL2	;call to abstracted procedure
 11774  005A82  E104               	bnz	u12205
 11775  005A84  0100               	movlb	0	; () banked
 11776  005A86  516D               	movf	?_stristr& (0+255),w,b
 11777  005A88  0101               	movlb	1	; () banked
 11778  005A8A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11779  005A8C                     u12205:
 11780  005A8C  E10C               	bnz	l10092
 11781                           
 11782                           ; BSR set to: 1
 11783                           ;main.c: 552: bSilent = 0;
 11784  005A8E  6B01               	clrf	_bSilent& (0+255),b
 11785                           
 11786                           ; BSR set to: 1
 11787                           ;main.c: 553: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11788  005A90  0E40               	movlw	64
 11789  005A92  EC03  F00C         	call	_ECANSetOperationMode
 11790                           
 11791                           ; BSR set to: 0
 11792                           ;main.c: 554: putsUSART((char *) "+OK\r\n");
 11793  005A96  0E7C               	movlw	high STR_9
 11794  005A98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11795  005A9A  0E7F               	movlw	low STR_9
 11796  005A9C  6F61               	movwf	?_putsUSART& (0+255),b
 11797  005A9E  EC9B  F00E         	call	_putsUSART	;wreg free
 11798                           
 11799                           ;main.c: 555: }
 11800  005AA2  EFA2  F035         	goto	l10634
 11801  005AA6                     l10092:
 11802                           
 11803                           ; BSR set to: 1
 11804                           ;main.c: 557: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11805  005AA6  0E01               	movlw	high _cmdbuf
 11806  005AA8  0100               	movlb	0	; () banked
 11807  005AAA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11808  005AAC  0E04               	movlw	low _cmdbuf
 11809  005AAE  6F6D               	movwf	?_stristr& (0+255),b
 11810  005AB0  0E7C               	movlw	high STR_16
 11811  005AB2  6F70               	movwf	(?_stristr+3)& (0+255),b
 11812  005AB4  0E4F               	movlw	low STR_16
 11813  005AB6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11814  005AB8  EC39  F011         	call	_stristr	;wreg free
 11815  005ABC  ECB2  F035         	call	PL2	;call to abstracted procedure
 11816  005AC0  E104               	bnz	u12215
 11817  005AC2  0100               	movlb	0	; () banked
 11818  005AC4  516D               	movf	?_stristr& (0+255),w,b
 11819  005AC6  0101               	movlb	1	; () banked
 11820  005AC8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11821  005ACA                     u12215:
 11822  005ACA  E10C               	bnz	l10100
 11823                           
 11824                           ; BSR set to: 1
 11825                           ;main.c: 558: bSilent = 0;
 11826  005ACC  6B01               	clrf	_bSilent& (0+255),b
 11827                           
 11828                           ; BSR set to: 1
 11829                           ;main.c: 559: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11830  005ACE  0E60               	movlw	96
 11831  005AD0  EC03  F00C         	call	_ECANSetOperationMode
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;main.c: 560: putsUSART((char *) "+OK\r\n");
 11835  005AD4  0E7C               	movlw	high STR_9
 11836  005AD6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11837  005AD8  0E7F               	movlw	low STR_9
 11838  005ADA  6F61               	movwf	?_putsUSART& (0+255),b
 11839  005ADC  EC9B  F00E         	call	_putsUSART	;wreg free
 11840                           
 11841                           ;main.c: 561: }
 11842  005AE0  EFA2  F035         	goto	l10634
 11843  005AE4                     l10100:
 11844                           
 11845                           ; BSR set to: 1
 11846                           ;main.c: 563: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 11847  005AE4  0E01               	movlw	high _cmdbuf
 11848  005AE6  0100               	movlb	0	; () banked
 11849  005AE8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11850  005AEA  0E04               	movlw	low _cmdbuf
 11851  005AEC  6F6D               	movwf	?_stristr& (0+255),b
 11852  005AEE  0E7C               	movlw	high STR_18
 11853  005AF0  6F70               	movwf	(?_stristr+3)& (0+255),b
 11854  005AF2  0E0D               	movlw	low STR_18
 11855  005AF4  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11856  005AF6  EC39  F011         	call	_stristr	;wreg free
 11857  005AFA  ECB2  F035         	call	PL2	;call to abstracted procedure
 11858  005AFE  E104               	bnz	u12225
 11859  005B00  0100               	movlb	0	; () banked
 11860  005B02  516D               	movf	?_stristr& (0+255),w,b
 11861  005B04  0101               	movlb	1	; () banked
 11862  005B06  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11863  005B08                     u12225:
 11864  005B08  E10B               	bnz	l10106
 11865                           
 11866                           ; BSR set to: 1
 11867                           ;main.c: 564: printFirmwareVersion();
 11868  005B0A  EC3D  F012         	call	_printFirmwareVersion	;wreg free
 11869                           
 11870                           ;main.c: 565: putsUSART((char *) "+OK\r\n");
 11871  005B0E  0E7C               	movlw	high STR_9
 11872  005B10  0100               	movlb	0	; () banked
 11873  005B12  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11874  005B14  0E7F               	movlw	low STR_9
 11875  005B16  6F61               	movwf	?_putsUSART& (0+255),b
 11876  005B18  EC9B  F00E         	call	_putsUSART	;wreg free
 11877                           
 11878                           ;main.c: 566: }
 11879  005B1C  EFA2  F035         	goto	l10634
 11880  005B20                     l10106:
 11881                           
 11882                           ; BSR set to: 1
 11883                           ;main.c: 567: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11884  005B20  0E01               	movlw	high _cmdbuf
 11885  005B22  0100               	movlb	0	; () banked
 11886  005B24  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11887  005B26  0E04               	movlw	low _cmdbuf
 11888  005B28  6F6D               	movwf	?_stristr& (0+255),b
 11889  005B2A  0E7C               	movlw	high STR_20
 11890  005B2C  6F70               	movwf	(?_stristr+3)& (0+255),b
 11891  005B2E  0E48               	movlw	low STR_20
 11892  005B30  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11893  005B32  EC39  F011         	call	_stristr	;wreg free
 11894  005B36  ECB2  F035         	call	PL2	;call to abstracted procedure
 11895  005B3A  E104               	bnz	u12235
 11896  005B3C  0100               	movlb	0	; () banked
 11897  005B3E  516D               	movf	?_stristr& (0+255),w,b
 11898  005B40  0101               	movlb	1	; () banked
 11899  005B42  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11900  005B44                     u12235:
 11901  005B44  E169               	bnz	l10142
 11902                           
 11903                           ; BSR set to: 1
 11904                           ;main.c: 568: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 11905  005B46  506F               	movf	3951,w,c	;volatile
 11906  005B48  0BE0               	andlw	224
 11907  005B4A  0102               	movlb	2	; () banked
 11908  005B4C  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 11909                           
 11910                           ; BSR set to: 2
 11911                           ;main.c: 569: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 11912  005B4E  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 11913  005B50  D00C               	goto	l10116
 11914                           
 11915                           ; BSR set to: 2
 11916  005B52  0101               	movlb	1	; () banked
 11917  005B54  6701               	tstfsz	_bSilent& (0+255),b
 11918  005B56  D009               	goto	l10116
 11919                           
 11920                           ; BSR set to: 1
 11921                           ;main.c: 570: putsUSART((char *) "+OK - Normal mode\r\n");
 11922  005B58  0E7A               	movlw	high STR_21
 11923  005B5A  0100               	movlb	0	; () banked
 11924  005B5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11925  005B5E  0E82               	movlw	low STR_21
 11926  005B60  6F61               	movwf	?_putsUSART& (0+255),b
 11927  005B62  EC9B  F00E         	call	_putsUSART	;wreg free
 11928                           
 11929                           ;main.c: 571: }
 11930  005B66  EFA2  F035         	goto	l10634
 11931  005B6A                     l10116:
 11932                           
 11933                           ;main.c: 572: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 11934  005B6A  0102               	movlb	2	; () banked
 11935  005B6C  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11936  005B6E  0E01               	movlw	1
 11937  005B70  A4D8               	btfss	status,2,c
 11938  005B72  0E00               	movlw	0
 11939  005B74  0101               	movlb	1	; () banked
 11940  005B76  1501               	andwf	_bSilent& (0+255),w,b
 11941  005B78  E009               	bz	l10120
 11942                           
 11943                           ; BSR set to: 1
 11944                           ;main.c: 573: putsUSART((char *) "+OK - Silent mode\r\n");
 11945  005B7A  0E7A               	movlw	high STR_22
 11946  005B7C  0100               	movlb	0	; () banked
 11947  005B7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11948  005B80  0E96               	movlw	low STR_22
 11949  005B82  6F61               	movwf	?_putsUSART& (0+255),b
 11950  005B84  EC9B  F00E         	call	_putsUSART	;wreg free
 11951                           
 11952                           ;main.c: 574: }
 11953  005B88  EFA2  F035         	goto	l10634
 11954  005B8C                     l10120:
 11955                           
 11956                           ; BSR set to: 1
 11957                           ;main.c: 575: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 11958  005B8C  0102               	movlb	2	; () banked
 11959  005B8E  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11960  005B90  0A20               	xorlw	32
 11961  005B92  E109               	bnz	l10124
 11962                           
 11963                           ; BSR set to: 2
 11964                           ;main.c: 576: putsUSART((char *) "+OK - Sleep mode\r\n");
 11965  005B94  0E7A               	movlw	high STR_23
 11966  005B96  0100               	movlb	0	; () banked
 11967  005B98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11968  005B9A  0ED2               	movlw	low STR_23
 11969  005B9C  6F61               	movwf	?_putsUSART& (0+255),b
 11970  005B9E  EC9B  F00E         	call	_putsUSART	;wreg free
 11971                           
 11972                           ;main.c: 577: }
 11973  005BA2  EFA2  F035         	goto	l10634
 11974  005BA6                     l10124:
 11975                           
 11976                           ; BSR set to: 2
 11977                           ;main.c: 578: else if (ECAN_OP_MODE_LOOP == ifmode) {
 11978  005BA6  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11979  005BA8  0A40               	xorlw	64
 11980  005BAA  E109               	bnz	l10128
 11981                           
 11982                           ; BSR set to: 2
 11983                           ;main.c: 579: putsUSART((char *) "+OK - Loopback mode\r\n");
 11984  005BAC  0E7A               	movlw	high STR_24
 11985  005BAE  0100               	movlb	0	; () banked
 11986  005BB0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11987  005BB2  0E05               	movlw	low STR_24
 11988  005BB4  6F61               	movwf	?_putsUSART& (0+255),b
 11989  005BB6  EC9B  F00E         	call	_putsUSART	;wreg free
 11990                           
 11991                           ;main.c: 580: }
 11992  005BBA  EFA2  F035         	goto	l10634
 11993  005BBE                     l10128:
 11994                           
 11995                           ; BSR set to: 2
 11996                           ;main.c: 581: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 11997  005BBE  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11998  005BC0  0A60               	xorlw	96
 11999  005BC2  E109               	bnz	l10132
 12000                           
 12001                           ; BSR set to: 2
 12002                           ;main.c: 582: putsUSART((char *) "+OK - Listen only mode\r\n");
 12003  005BC4  0E78               	movlw	high STR_25
 12004  005BC6  0100               	movlb	0	; () banked
 12005  005BC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12006  005BCA  0ECE               	movlw	low STR_25
 12007  005BCC  6F61               	movwf	?_putsUSART& (0+255),b
 12008  005BCE  EC9B  F00E         	call	_putsUSART	;wreg free
 12009                           
 12010                           ;main.c: 583: }
 12011  005BD2  EFA2  F035         	goto	l10634
 12012  005BD6                     l10132:
 12013                           
 12014                           ; BSR set to: 2
 12015                           ;main.c: 584: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12016  005BD6  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12017  005BD8  0A80               	xorlw	128
 12018  005BDA  E109               	bnz	l10136
 12019                           
 12020                           ; BSR set to: 2
 12021                           ;main.c: 585: putsUSART((char *) "+OK - Closed mode\r\n");
 12022  005BDC  0E7A               	movlw	high STR_26
 12023  005BDE  0100               	movlb	0	; () banked
 12024  005BE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12025  005BE2  0E6E               	movlw	low STR_26
 12026  005BE4  6F61               	movwf	?_putsUSART& (0+255),b
 12027  005BE6  EC9B  F00E         	call	_putsUSART	;wreg free
 12028                           
 12029                           ;main.c: 586: }
 12030  005BEA  EFA2  F035         	goto	l10634
 12031  005BEE                     l10136:
 12032                           
 12033                           ; BSR set to: 2
 12034                           ;main.c: 587: else if (ECAN_OP_MODE_BITS == ifmode) {
 12035  005BEE  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12036  005BF0  0AE0               	xorlw	224
 12037  005BF2  E109               	bnz	l10140
 12038                           
 12039                           ; BSR set to: 2
 12040                           ;main.c: 588: putsUSART((char *) "+OK - Bits mode\r\n");
 12041  005BF4  0E7A               	movlw	high STR_27
 12042  005BF6  0100               	movlb	0	; () banked
 12043  005BF8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12044  005BFA  0EE5               	movlw	low STR_27
 12045  005BFC  6F61               	movwf	?_putsUSART& (0+255),b
 12046  005BFE  EC9B  F00E         	call	_putsUSART	;wreg free
 12047                           
 12048                           ;main.c: 589: }
 12049  005C02  EFA2  F035         	goto	l10634
 12050  005C06                     l10140:
 12051                           
 12052                           ; BSR set to: 2
 12053                           ;main.c: 590: else {
 12054                           ;main.c: 591: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12055  005C06  0E79               	movlw	high STR_28
 12056  005C08  0100               	movlb	0	; () banked
 12057  005C0A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12058  005C0C  0E48               	movlw	low STR_28
 12059  005C0E  6F61               	movwf	?_putsUSART& (0+255),b
 12060  005C10  EC9B  F00E         	call	_putsUSART	;wreg free
 12061  005C14  EFA2  F035         	goto	l10634
 12062  005C18                     l10142:
 12063                           
 12064                           ; BSR set to: 1
 12065                           ;main.c: 596: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12066  005C18  0E01               	movlw	high _cmdbuf
 12067  005C1A  0100               	movlb	0	; () banked
 12068  005C1C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12069  005C1E  0E04               	movlw	low _cmdbuf
 12070  005C20  6F6D               	movwf	?_stristr& (0+255),b
 12071  005C22  0E7C               	movlw	high STR_29
 12072  005C24  6F70               	movwf	(?_stristr+3)& (0+255),b
 12073  005C26  0EEA               	movlw	low STR_29
 12074  005C28  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12075  005C2A  EC39  F011         	call	_stristr	;wreg free
 12076  005C2E  ECB2  F035         	call	PL2	;call to abstracted procedure
 12077  005C32  E104               	bnz	u12335
 12078  005C34  0100               	movlb	0	; () banked
 12079  005C36  516D               	movf	?_stristr& (0+255),w,b
 12080  005C38  0101               	movlb	1	; () banked
 12081  005C3A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12082  005C3C                     u12335:
 12083  005C3C  E001 D0D9          	bnz	l10196
 12084                           
 12085                           ; BSR set to: 1
 12086                           ;main.c: 598: char *p = strtok(cmdbuf, ",");
 12087  005C40  EC15  F036         	call	PL30	;call to abstracted procedure
 12088  005C44  EC84  F012         	call	_strtok	;wreg free
 12089  005C48  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12090  005C4C  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12091                           
 12092                           ; BSR set to: 0
 12093                           ;main.c: 601: vscpPriority = 3;
 12094  005C50  0E03               	movlw	3
 12095  005C52  0101               	movlb	1	; () banked
 12096  005C54  6FAF               	movwf	_vscpPriority& (0+255),b
 12097                           
 12098                           ; BSR set to: 1
 12099                           ;main.c: 602: if ((0) != p) {
 12100  005C56  0102               	movlb	2	; () banked
 12101  005C58  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12102  005C5A  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12103  005C5C  E009               	bz	l10152
 12104                           
 12105                           ; BSR set to: 2
 12106                           ;main.c: 603: vscpPriority = atoi(p);
 12107  005C5E  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12108  005C62  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12109  005C66  ECB4  F019         	call	_atoi	;wreg free
 12110  005C6A  5166               	movf	?_atoi& (0+255),w,b
 12111  005C6C  0101               	movlb	1	; () banked
 12112  005C6E  6FAF               	movwf	_vscpPriority& (0+255),b
 12113  005C70                     l10152:
 12114                           
 12115                           ;main.c: 604: }
 12116                           ;main.c: 607: vscpClass = 0;
 12117  005C70  0101               	movlb	1	; () banked
 12118  005C72  6BAC               	clrf	_vscpClass& (0+255),b
 12119  005C74  6BAD               	clrf	(_vscpClass+1)& (0+255),b
 12120                           
 12121                           ; BSR set to: 1
 12122                           ;main.c: 608: if ((0) != (p = strtok((0), ","))) {
 12123  005C76  ECBC  F035         	call	PL4	;call to abstracted procedure
 12124  005C7A  EC84  F012         	call	_strtok	;wreg free
 12125  005C7E  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12126  005C82  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12127  005C86  0102               	movlb	2	; () banked
 12128  005C88  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12129  005C8A  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12130  005C8C  E00A               	bz	l10158
 12131                           
 12132                           ; BSR set to: 2
 12133                           ;main.c: 609: vscpClass = atoi(p);
 12134  005C8E  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12135  005C92  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12136  005C96  ECB4  F019         	call	_atoi	;wreg free
 12137  005C9A  C066  F1AC         	movff	?_atoi,_vscpClass
 12138  005C9E  C067  F1AD         	movff	?_atoi+1,_vscpClass+1
 12139  005CA2                     l10158:
 12140                           
 12141                           ;main.c: 610: }
 12142                           ;main.c: 613: vscpType = 0;
 12143  005CA2  0101               	movlb	1	; () banked
 12144  005CA4  6BB1               	clrf	_vscpType& (0+255),b
 12145                           
 12146                           ; BSR set to: 1
 12147                           ;main.c: 614: if ((0) != (p = strtok((0), ","))) {
 12148  005CA6  ECBC  F035         	call	PL4	;call to abstracted procedure
 12149  005CAA  EC84  F012         	call	_strtok	;wreg free
 12150  005CAE  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12151  005CB2  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12152  005CB6  0102               	movlb	2	; () banked
 12153  005CB8  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12154  005CBA  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12155  005CBC  E009               	bz	l10164
 12156                           
 12157                           ; BSR set to: 2
 12158                           ;main.c: 615: vscpType = atoi(p);
 12159  005CBE  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12160  005CC2  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12161  005CC6  ECB4  F019         	call	_atoi	;wreg free
 12162  005CCA  5166               	movf	?_atoi& (0+255),w,b
 12163  005CCC  0101               	movlb	1	; () banked
 12164  005CCE  6FB1               	movwf	_vscpType& (0+255),b
 12165  005CD0                     l10164:
 12166                           
 12167                           ;main.c: 616: }
 12168                           ;main.c: 619: vscpNodeId = 0;
 12169  005CD0  0101               	movlb	1	; () banked
 12170  005CD2  6BAE               	clrf	_vscpNodeId& (0+255),b
 12171                           
 12172                           ; BSR set to: 1
 12173                           ;main.c: 620: if ((0) != (p = strtok((0), ","))) {
 12174  005CD4  ECBC  F035         	call	PL4	;call to abstracted procedure
 12175  005CD8  EC84  F012         	call	_strtok	;wreg free
 12176  005CDC  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12177  005CE0  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12178  005CE4  0102               	movlb	2	; () banked
 12179  005CE6  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12180  005CE8  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12181  005CEA  E009               	bz	l10170
 12182                           
 12183                           ; BSR set to: 2
 12184                           ;main.c: 621: vscpNodeId = atoi(p);
 12185  005CEC  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12186  005CF0  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12187  005CF4  ECB4  F019         	call	_atoi	;wreg free
 12188  005CF8  5166               	movf	?_atoi& (0+255),w,b
 12189  005CFA  0101               	movlb	1	; () banked
 12190  005CFC  6FAE               	movwf	_vscpNodeId& (0+255),b
 12191  005CFE                     l10170:
 12192                           
 12193                           ;main.c: 622: }
 12194                           ;main.c: 625: vscpSize = 0;
 12195  005CFE  0101               	movlb	1	; () banked
 12196  005D00  6BB0               	clrf	_vscpSize& (0+255),b
 12197                           
 12198                           ; BSR set to: 1
 12199                           ;main.c: 626: if ((0) != (p = strtok((0), ","))) {
 12200  005D02  ECBC  F035         	call	PL4	;call to abstracted procedure
 12201  005D06  EC84  F012         	call	_strtok	;wreg free
 12202  005D0A  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12203  005D0E  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12204  005D12  0102               	movlb	2	; () banked
 12205  005D14  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12206  005D16  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12207  005D18  E009               	bz	l10176
 12208                           
 12209                           ; BSR set to: 2
 12210                           ;main.c: 627: vscpSize = atoi(p);
 12211  005D1A  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12212  005D1E  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12213  005D22  ECB4  F019         	call	_atoi	;wreg free
 12214  005D26  5166               	movf	?_atoi& (0+255),w,b
 12215  005D28  0101               	movlb	1	; () banked
 12216  005D2A  6FB0               	movwf	_vscpSize& (0+255),b
 12217  005D2C                     l10176:
 12218                           
 12219                           ;main.c: 628: }
 12220                           ;main.c: 630: memset(vscpData, 0, 8);
 12221  005D2C  0E01               	movlw	high _vscpData
 12222  005D2E  0100               	movlb	0	; () banked
 12223  005D30  6F61               	movwf	(?_memset+1)& (0+255),b
 12224  005D32  0EA4               	movlw	low _vscpData
 12225  005D34  6F60               	movwf	?_memset& (0+255),b
 12226  005D36  6B63               	clrf	(?_memset+3)& (0+255),b
 12227  005D38  6B62               	clrf	(?_memset+2)& (0+255),b
 12228  005D3A  6B65               	clrf	(?_memset+5)& (0+255),b
 12229  005D3C  0E08               	movlw	8
 12230  005D3E  6F64               	movwf	(?_memset+4)& (0+255),b
 12231  005D40  EC51  F00C         	call	_memset	;wreg free
 12232                           
 12233                           ; BSR set to: 0
 12234                           ;main.c: 631: for (i = 0; i < vscpSize; i++) {
 12235  005D44  0102               	movlb	2	; () banked
 12236  005D46  6BAA               	clrf	doModeVerbose@i& (0+255),b
 12237  005D48  D01D               	goto	l10186
 12238  005D4A                     l10180:
 12239                           
 12240                           ; BSR set to: 2
 12241                           ;main.c: 632: if ((0) != (p = strtok((0), ","))) {
 12242  005D4A  ECBC  F035         	call	PL4	;call to abstracted procedure
 12243  005D4E  EC84  F012         	call	_strtok	;wreg free
 12244  005D52  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12245  005D56  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12246  005D5A  0102               	movlb	2	; () banked
 12247  005D5C  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12248  005D5E  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12249  005D60  E016               	bz	l10188
 12250                           
 12251                           ; BSR set to: 2
 12252                           ;main.c: 633: vscpData[ i ] = atoi(p);
 12253  005D62  0EA4               	movlw	low _vscpData
 12254  005D64  25AA               	addwf	doModeVerbose@i& (0+255),w,b
 12255  005D66  6ED9               	movwf	fsr2l,c
 12256  005D68  6ADA               	clrf	fsr2h,c
 12257  005D6A  0101               	movlb	1	; () banked
 12258  005D6C  0E01               	movlw	high _vscpData
 12259  005D6E  22DA               	addwfc	fsr2h,f,c
 12260  005D70  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12261  005D74  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12262  005D78  ECB4  F019         	call	_atoi	;wreg free
 12263  005D7C  5166               	movf	?_atoi& (0+255),w,b
 12264  005D7E  6EDF               	movwf	indf2,c
 12265                           
 12266                           ; BSR set to: 0
 12267                           
 12268                           ;main.c: 634: } else {
 12269  005D80  0102               	movlb	2	; () banked
 12270  005D82  2BAA               	incf	doModeVerbose@i& (0+255),f,b
 12271  005D84                     l10186:
 12272                           
 12273                           ; BSR set to: 2
 12274  005D84  0101               	movlb	1	; () banked
 12275  005D86  51B0               	movf	_vscpSize& (0+255),w,b
 12276  005D88  0102               	movlb	2	; () banked
 12277  005D8A  5DAA               	subwf	doModeVerbose@i& (0+255),w,b
 12278  005D8C  E3DE               	bnc	l10180
 12279  005D8E                     l10188:
 12280                           
 12281                           ; BSR set to: 2
 12282                           ;main.c: 636: }
 12283                           ;main.c: 637: }
 12284                           ;main.c: 639: if ( sendVSCPFrame(vscpClass,
 12285                           ;main.c: 640: vscpType,
 12286                           ;main.c: 641: vscpNodeId,
 12287                           ;main.c: 642: vscpPriority,
 12288                           ;main.c: 643: vscpSize,
 12289                           ;main.c: 644: vscpData ) ) {
 12290  005D8E  C1AC  F096         	movff	_vscpClass,?_sendVSCPFrame
 12291  005D92  C1AD  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12292  005D96  C1B1  F098         	movff	_vscpType,?_sendVSCPFrame+2
 12293  005D9A  C1AE  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12294  005D9E  C1AF  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 12295  005DA2  C1B0  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 12296  005DA6  0E01               	movlw	high _vscpData
 12297  005DA8  0100               	movlb	0	; () banked
 12298  005DAA  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12299  005DAC  0EA4               	movlw	low _vscpData
 12300  005DAE  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12301  005DB0  ECA5  F014         	call	_sendVSCPFrame	;wreg free
 12302  005DB4  0900               	iorlw	0
 12303  005DB6  E015               	bz	l10194
 12304                           
 12305                           ; BSR set to: 0
 12306                           ;main.c: 646: cntTxFrames++;
 12307  005DB8  2BE1               	incf	_cntTxFrames& (0+255),f,b
 12308  005DBA  0E00               	movlw	0
 12309  005DBC  23E2               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12310  005DBE  23E3               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12311  005DC0  23E4               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12312                           
 12313                           ;main.c: 647: cntTxBytes += vscpSize;
 12314  005DC2  0101               	movlb	1	; () banked
 12315  005DC4  51B0               	movf	_vscpSize& (0+255),w,b
 12316  005DC6  0100               	movlb	0	; () banked
 12317  005DC8  27DD               	addwf	_cntTxBytes& (0+255),f,b
 12318  005DCA  0E00               	movlw	0
 12319  005DCC  23DE               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12320  005DCE  23DF               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12321  005DD0  23E0               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12322                           
 12323                           ; BSR set to: 0
 12324                           ;main.c: 648: putsUSART((char *) "+OK\r\n");
 12325  005DD2  0E7C               	movlw	high STR_9
 12326  005DD4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12327  005DD6  0E7F               	movlw	low STR_9
 12328  005DD8  6F61               	movwf	?_putsUSART& (0+255),b
 12329  005DDA  EC9B  F00E         	call	_putsUSART	;wreg free
 12330                           
 12331                           ;main.c: 649: }
 12332  005DDE  EFA2  F035         	goto	l10634
 12333  005DE2                     l10194:
 12334                           
 12335                           ; BSR set to: 0
 12336                           ;main.c: 650: else {
 12337                           ;main.c: 651: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12338  005DE2  0E77               	movlw	high STR_37
 12339  005DE4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12340  005DE6  0E48               	movlw	low STR_37
 12341  005DE8  6F61               	movwf	?_putsUSART& (0+255),b
 12342  005DEA  EC9B  F00E         	call	_putsUSART	;wreg free
 12343  005DEE  EFA2  F035         	goto	l10634
 12344  005DF2                     l10196:
 12345                           
 12346                           ; BSR set to: 1
 12347                           ;main.c: 655: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12348  005DF2  0E01               	movlw	high _cmdbuf
 12349  005DF4  0100               	movlb	0	; () banked
 12350  005DF6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12351  005DF8  0E04               	movlw	low _cmdbuf
 12352  005DFA  6F6D               	movwf	?_stristr& (0+255),b
 12353  005DFC  0E7C               	movlw	high STR_38
 12354  005DFE  6F70               	movwf	(?_stristr+3)& (0+255),b
 12355  005E00  0EE7               	movlw	low STR_38
 12356  005E02  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12357  005E04  EC39  F011         	call	_stristr	;wreg free
 12358  005E08  ECB2  F035         	call	PL2	;call to abstracted procedure
 12359  005E0C  E104               	bnz	u12425
 12360  005E0E  0100               	movlb	0	; () banked
 12361  005E10  516D               	movf	?_stristr& (0+255),w,b
 12362  005E12  0101               	movlb	1	; () banked
 12363  005E14  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12364  005E16                     u12425:
 12365  005E16  E116               	bnz	l10204
 12366                           
 12367                           ; BSR set to: 1
 12368                           ;main.c: 656: if (receivePrintEventVerbose()) {
 12369  005E18  EC66  F024         	call	_receivePrintEventVerbose	;wreg free
 12370  005E1C  0900               	iorlw	0
 12371  005E1E  E009               	bz	l10202
 12372                           
 12373                           ;main.c: 657: putsUSART((char *) "+OK\r\n");
 12374  005E20  0E7C               	movlw	high STR_9
 12375  005E22  0100               	movlb	0	; () banked
 12376  005E24  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12377  005E26  0E7F               	movlw	low STR_9
 12378  005E28  6F61               	movwf	?_putsUSART& (0+255),b
 12379  005E2A  EC9B  F00E         	call	_putsUSART	;wreg free
 12380                           
 12381                           ;main.c: 658: }
 12382  005E2E  EFA2  F035         	goto	l10634
 12383  005E32                     l10202:
 12384                           
 12385                           ;main.c: 659: else {
 12386                           ;main.c: 660: putsUSART((char *) "+OK - no events\r\n");
 12387  005E32  0E7A               	movlw	high STR_40
 12388  005E34  0100               	movlb	0	; () banked
 12389  005E36  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12390  005E38  0EF7               	movlw	low STR_40
 12391  005E3A  6F61               	movwf	?_putsUSART& (0+255),b
 12392  005E3C  EC9B  F00E         	call	_putsUSART	;wreg free
 12393  005E40  EFA2  F035         	goto	l10634
 12394  005E44                     l10204:
 12395                           
 12396                           ; BSR set to: 1
 12397                           ;main.c: 664: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12398  005E44  0E01               	movlw	high _cmdbuf
 12399  005E46  0100               	movlb	0	; () banked
 12400  005E48  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12401  005E4A  0E04               	movlw	low _cmdbuf
 12402  005E4C  6F6D               	movwf	?_stristr& (0+255),b
 12403  005E4E  0E7C               	movlw	high STR_41
 12404  005E50  6F70               	movwf	(?_stristr+3)& (0+255),b
 12405  005E52  0ECA               	movlw	low STR_41
 12406  005E54  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12407  005E56  EC39  F011         	call	_stristr	;wreg free
 12408  005E5A  ECB2  F035         	call	PL2	;call to abstracted procedure
 12409  005E5E  E104               	bnz	u12445
 12410  005E60  0100               	movlb	0	; () banked
 12411  005E62  516D               	movf	?_stristr& (0+255),w,b
 12412  005E64  0101               	movlb	1	; () banked
 12413  005E66  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12414  005E68                     u12445:
 12415  005E68  E104               	bnz	l10208
 12416                           
 12417                           ; BSR set to: 1
 12418                           ;main.c: 665: printStatistics();
 12419  005E6A  ECDE  F01F         	call	_printStatistics	;wreg free
 12420                           
 12421                           ;main.c: 666: }
 12422  005E6E  EFA2  F035         	goto	l10634
 12423  005E72                     l10208:
 12424                           
 12425                           ; BSR set to: 1
 12426                           ;main.c: 668: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12427  005E72  0E01               	movlw	high _cmdbuf
 12428  005E74  0100               	movlb	0	; () banked
 12429  005E76  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12430  005E78  0E04               	movlw	low _cmdbuf
 12431  005E7A  6F6D               	movwf	?_stristr& (0+255),b
 12432  005E7C  0E7C               	movlw	high STR_42
 12433  005E7E  6F70               	movwf	(?_stristr+3)& (0+255),b
 12434  005E80  0ED8               	movlw	low STR_42
 12435  005E82  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12436  005E84  EC39  F011         	call	_stristr	;wreg free
 12437  005E88  ECB2  F035         	call	PL2	;call to abstracted procedure
 12438  005E8C  E104               	bnz	u12455
 12439  005E8E  0100               	movlb	0	; () banked
 12440  005E90  516D               	movf	?_stristr& (0+255),w,b
 12441  005E92  0101               	movlb	1	; () banked
 12442  005E94  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12443  005E96                     u12455:
 12444  005E96  E104               	bnz	l10212
 12445                           
 12446                           ; BSR set to: 1
 12447                           ;main.c: 669: printErrors();
 12448  005E98  ECC7  F025         	call	_printErrors	;wreg free
 12449                           
 12450                           ;main.c: 670: }
 12451  005E9C  EFA2  F035         	goto	l10634
 12452  005EA0                     l10212:
 12453                           
 12454                           ; BSR set to: 1
 12455                           ;main.c: 672: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12456  005EA0  0E01               	movlw	high _cmdbuf
 12457  005EA2  0100               	movlb	0	; () banked
 12458  005EA4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12459  005EA6  0E04               	movlw	low _cmdbuf
 12460  005EA8  6F6D               	movwf	?_stristr& (0+255),b
 12461  005EAA  0E7C               	movlw	high STR_43
 12462  005EAC  6F70               	movwf	(?_stristr+3)& (0+255),b
 12463  005EAE  0EC5               	movlw	low STR_43
 12464  005EB0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12465  005EB2  EC39  F011         	call	_stristr	;wreg free
 12466  005EB6  ECB2  F035         	call	PL2	;call to abstracted procedure
 12467  005EBA  E104               	bnz	u12465
 12468  005EBC  0100               	movlb	0	; () banked
 12469  005EBE  516D               	movf	?_stristr& (0+255),w,b
 12470  005EC0  0101               	movlb	1	; () banked
 12471  005EC2  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12472  005EC4                     u12465:
 12473  005EC4  E10B               	bnz	l10216
 12474                           
 12475                           ; BSR set to: 1
 12476                           ;main.c: 673: printHelp();
 12477  005EC6  ECB2  F020         	call	_printHelp	;wreg free
 12478                           
 12479                           ;main.c: 674: putsUSART((char *) "+OK\r\n");
 12480  005ECA  0E7C               	movlw	high STR_9
 12481  005ECC  0100               	movlb	0	; () banked
 12482  005ECE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12483  005ED0  0E7F               	movlw	low STR_9
 12484  005ED2  6F61               	movwf	?_putsUSART& (0+255),b
 12485  005ED4  EC9B  F00E         	call	_putsUSART	;wreg free
 12486                           
 12487                           ;main.c: 675: }
 12488  005ED8  EFA2  F035         	goto	l10634
 12489  005EDC                     l10216:
 12490                           
 12491                           ; BSR set to: 1
 12492                           ;main.c: 677: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12493  005EDC  0E01               	movlw	high _cmdbuf
 12494  005EDE  0100               	movlb	0	; () banked
 12495  005EE0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12496  005EE2  0E04               	movlw	low _cmdbuf
 12497  005EE4  6F6D               	movwf	?_stristr& (0+255),b
 12498  005EE6  0E7C               	movlw	high STR_45
 12499  005EE8  6F70               	movwf	(?_stristr+3)& (0+255),b
 12500  005EEA  0EA2               	movlw	low STR_45
 12501  005EEC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12502  005EEE  EC39  F011         	call	_stristr	;wreg free
 12503  005EF2  ECB2  F035         	call	PL2	;call to abstracted procedure
 12504  005EF6  E104               	bnz	u12475
 12505  005EF8  0100               	movlb	0	; () banked
 12506  005EFA  516D               	movf	?_stristr& (0+255),w,b
 12507  005EFC  0101               	movlb	1	; () banked
 12508  005EFE  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12509  005F00                     u12475:
 12510  005F00  E104               	bnz	l10220
 12511                           
 12512                           ; BSR set to: 1
 12513                           ;main.c: 678: findNodes();
 12514  005F02  EC3A  F018         	call	_findNodes	;wreg free
 12515                           
 12516                           ;main.c: 679: }
 12517  005F06  EFA2  F035         	goto	l10634
 12518  005F0A                     l10220:
 12519                           
 12520                           ; BSR set to: 1
 12521                           ;main.c: 682: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12522  005F0A  0E01               	movlw	high _cmdbuf
 12523  005F0C  0100               	movlb	0	; () banked
 12524  005F0E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12525  005F10  0E04               	movlw	low _cmdbuf
 12526  005F12  6F6D               	movwf	?_stristr& (0+255),b
 12527  005F14  0E7C               	movlw	high STR_46
 12528  005F16  6F70               	movwf	(?_stristr+3)& (0+255),b
 12529  005F18  0EA7               	movlw	low STR_46
 12530  005F1A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12531  005F1C  EC39  F011         	call	_stristr	;wreg free
 12532  005F20  ECB2  F035         	call	PL2	;call to abstracted procedure
 12533  005F24  E104               	bnz	u12485
 12534  005F26  0100               	movlb	0	; () banked
 12535  005F28  516D               	movf	?_stristr& (0+255),w,b
 12536  005F2A  0101               	movlb	1	; () banked
 12537  005F2C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12538  005F2E                     u12485:
 12539  005F2E  E001 D1B4          	bnz	l10350
 12540                           
 12541                           ; BSR set to: 1
 12542                           ;main.c: 684: uint8_t i;
 12543                           ;main.c: 685: uint8_t nodeid;
 12544                           ;main.c: 686: uint8_t page = 0;
 12545  005F32  0102               	movlb	2	; () banked
 12546  005F34  6BAD               	clrf	doModeVerbose@page& (0+255),b
 12547                           
 12548                           ; BSR set to: 2
 12549                           ;main.c: 687: uint8_t reg;
 12550                           ;main.c: 688: uint8_t value;
 12551                           ;main.c: 689: uint8_t count = 1;
 12552  005F36  0E01               	movlw	1
 12553  005F38  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12554                           
 12555                           ; BSR set to: 2
 12556                           ;main.c: 691: strcpy(cmdbuf, cmdbuf + 5);
 12557  005F3A  ECCB  F035         	call	PL8	;call to abstracted procedure
 12558  005F3E  EC7F  F00C         	call	_strcpy	;wreg free
 12559                           
 12560                           ;main.c: 692: char *p = strtok(cmdbuf, " ");
 12561  005F42  0E01               	movlw	high _cmdbuf
 12562  005F44  EC1F  F036         	call	PL36	;call to abstracted procedure
 12563  005F48  EC84  F012         	call	_strtok	;wreg free
 12564  005F4C  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1109
 12565  005F50  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1109+1
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;main.c: 693: if ((0) != p) {
 12569  005F54  0102               	movlb	2	; () banked
 12570  005F56  51B3               	movf	(doModeVerbose@p_1109+1)& (0+255),w,b
 12571  005F58  11B2               	iorwf	doModeVerbose@p_1109& (0+255),w,b
 12572  005F5A  E00A               	bz	l10234
 12573                           
 12574                           ; BSR set to: 2
 12575                           ;main.c: 694: nodeid = atoi(p);
 12576  005F5C  C2B2  F066         	movff	doModeVerbose@p_1109,?_atoi
 12577  005F60  C2B3  F067         	movff	doModeVerbose@p_1109+1,?_atoi+1
 12578  005F64  ECB4  F019         	call	_atoi	;wreg free
 12579  005F68  5166               	movf	?_atoi& (0+255),w,b
 12580  005F6A  0102               	movlb	2	; () banked
 12581  005F6C  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 12582                           
 12583                           ;main.c: 695: } else {
 12584  005F6E  D009               	goto	l10238
 12585  005F70                     l10234:
 12586                           
 12587                           ; BSR set to: 2
 12588                           ;main.c: 696: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12589  005F70  0E79               	movlw	high STR_48
 12590  005F72  0100               	movlb	0	; () banked
 12591  005F74  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12592  005F76  0E30               	movlw	low STR_48
 12593  005F78  6F61               	movwf	?_putsUSART& (0+255),b
 12594  005F7A  EC9B  F00E         	call	_putsUSART	;wreg free
 12595  005F7E  EFB1  F035         	goto	l524
 12596  005F82                     l10238:
 12597                           
 12598                           ; BSR set to: 2
 12599                           ;main.c: 698: }
 12600                           ;main.c: 700: if ((0) != (p = strtok((0), " "))) {
 12601  005F82  EC0D  F036         	call	PL28	;call to abstracted procedure
 12602  005F86  EC84  F012         	call	_strtok	;wreg free
 12603  005F8A  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1109
 12604  005F8E  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1109+1
 12605  005F92  0102               	movlb	2	; () banked
 12606  005F94  51B3               	movf	(doModeVerbose@p_1109+1)& (0+255),w,b
 12607  005F96  11B2               	iorwf	doModeVerbose@p_1109& (0+255),w,b
 12608  005F98  E034               	bz	l10246
 12609                           
 12610                           ; BSR set to: 2
 12611                           ;main.c: 702: char *preg;
 12612                           ;main.c: 703: if (preg = strchr(p, ':')) {
 12613  005F9A  C2B2  F060         	movff	doModeVerbose@p_1109,?_strchr
 12614  005F9E  C2B3  F061         	movff	doModeVerbose@p_1109+1,?_strchr+1
 12615  005FA2  0100               	movlb	0	; () banked
 12616  005FA4  6B63               	clrf	(?_strchr+3)& (0+255),b
 12617  005FA6  0E3A               	movlw	58
 12618  005FA8  6F62               	movwf	(?_strchr+2)& (0+255),b
 12619  005FAA  EC82  F00F         	call	_strchr	;wreg free
 12620  005FAE  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12621  005FB2  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12622  005FB6  0102               	movlb	2	; () banked
 12623  005FB8  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12624  005FBA  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12625  005FBC  E018               	bz	l10244
 12626                           
 12627                           ; BSR set to: 2
 12628                           ;main.c: 704: page = atoi(p);
 12629  005FBE  C2B2  F066         	movff	doModeVerbose@p_1109,?_atoi
 12630  005FC2  C2B3  F067         	movff	doModeVerbose@p_1109+1,?_atoi+1
 12631  005FC6  ECB4  F019         	call	_atoi	;wreg free
 12632  005FCA  5166               	movf	?_atoi& (0+255),w,b
 12633  005FCC  0102               	movlb	2	; () banked
 12634  005FCE  6FAD               	movwf	doModeVerbose@page& (0+255),b
 12635                           
 12636                           ;main.c: 705: reg = atoi(preg + 1);
 12637  005FD0  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12638  005FD2  0101               	movlb	1	; () banked
 12639  005FD4  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12640  005FD6  0E00               	movlw	0
 12641  005FD8  0102               	movlb	2	; () banked
 12642  005FDA  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12643  005FDC  0101               	movlb	1	; () banked
 12644  005FDE  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12645  005FE0  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 12646  005FE4  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12647  005FE8  ECB4  F019         	call	_atoi	;wreg free
 12648  005FEC  D006               	goto	L5
 12649  005FEE                     l10244:
 12650                           
 12651                           ; BSR set to: 2
 12652                           ;main.c: 707: reg = atoi(p);
 12653  005FEE  C2B2  F066         	movff	doModeVerbose@p_1109,?_atoi
 12654  005FF2  C2B3  F067         	movff	doModeVerbose@p_1109+1,?_atoi+1
 12655  005FF6  ECB4  F019         	call	_atoi	;wreg free
 12656  005FFA                     L5:
 12657  005FFA  5166               	movf	?_atoi& (0+255),w,b
 12658  005FFC  0102               	movlb	2	; () banked
 12659  005FFE  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 12660  006000  D009               	goto	l10250
 12661  006002                     l10246:
 12662                           
 12663                           ; BSR set to: 2
 12664                           ;main.c: 712: else {
 12665                           ;main.c: 713: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12666  006002  0E77               	movlw	high STR_50
 12667  006004  0100               	movlb	0	; () banked
 12668  006006  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12669  006008  0EAB               	movlw	low STR_50
 12670  00600A  6F61               	movwf	?_putsUSART& (0+255),b
 12671  00600C  EC9B  F00E         	call	_putsUSART	;wreg free
 12672  006010  EFB1  F035         	goto	l524
 12673  006014                     l10250:
 12674                           
 12675                           ; BSR set to: 2
 12676                           ;main.c: 715: }
 12677                           ;main.c: 718: if ((0) != (p = strtok((0), " "))) {
 12678  006014  EC0D  F036         	call	PL28	;call to abstracted procedure
 12679  006018  EC84  F012         	call	_strtok	;wreg free
 12680  00601C  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1109
 12681  006020  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1109+1
 12682  006024  0102               	movlb	2	; () banked
 12683  006026  51B3               	movf	(doModeVerbose@p_1109+1)& (0+255),w,b
 12684  006028  11B2               	iorwf	doModeVerbose@p_1109& (0+255),w,b
 12685  00602A  E00D               	bz	l529
 12686                           
 12687                           ; BSR set to: 2
 12688                           ;main.c: 719: count = atoi(p);
 12689  00602C  C2B2  F066         	movff	doModeVerbose@p_1109,?_atoi
 12690  006030  C2B3  F067         	movff	doModeVerbose@p_1109+1,?_atoi+1
 12691  006034  ECB4  F019         	call	_atoi	;wreg free
 12692  006038  5166               	movf	?_atoi& (0+255),w,b
 12693  00603A  0102               	movlb	2	; () banked
 12694  00603C  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12695                           
 12696                           ; BSR set to: 2
 12697                           ;main.c: 720: if (0 == count) count = 1;
 12698  00603E  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 12699  006040  D002               	goto	l529
 12700                           
 12701                           ; BSR set to: 2
 12702  006042  0E01               	movlw	1
 12703  006044  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12704  006046                     l529:
 12705                           
 12706                           ; BSR set to: 2
 12707                           ;main.c: 721: }
 12708                           ;main.c: 723: BOOL rv = 1;
 12709  006046  0E01               	movlw	1
 12710  006048  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 12711                           
 12712                           ; BSR set to: 2
 12713                           ;main.c: 724: for (i = 0; i < count; i++) {
 12714  00604A  6BB0               	clrf	doModeVerbose@i_1103& (0+255),b
 12715  00604C  D10E               	goto	l10342
 12716  00604E                     l10260:
 12717                           
 12718                           ; BSR set to: 2
 12719                           ;main.c: 726: if (readRegisterExtended(nodeid,
 12720                           ;main.c: 727: page,
 12721                           ;main.c: 728: (reg + i) & 0xff,
 12722                           ;main.c: 729: rwtimeout,
 12723                           ;main.c: 730: &value)) {
 12724  00604E  0100               	movlb	0	; () banked
 12725  006050  C2AD  F0B6         	movff	doModeVerbose@page,?_readRegisterExtended
 12726  006054  6BB7               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12727  006056  0102               	movlb	2	; () banked
 12728  006058  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 12729  00605A  25B0               	addwf	doModeVerbose@i_1103& (0+255),w,b
 12730  00605C  0100               	movlb	0	; () banked
 12731  00605E  6FB8               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12732  006060  C103  F0B9         	movff	_rwtimeout,?_readRegisterExtended+3
 12733  006064  6BBA               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12734  006066  0E02               	movlw	high doModeVerbose@value
 12735  006068  6FBC               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12736  00606A  0EB1               	movlw	low doModeVerbose@value
 12737  00606C  6FBB               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12738  00606E  0102               	movlb	2	; () banked
 12739  006070  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 12740  006072  ECB4  F018         	call	_readRegisterExtended
 12741  006076  0900               	iorlw	0
 12742  006078  E101 D09D          	bz	l533
 12743                           
 12744                           ;main.c: 731: putsUSART((char *) "Value for reg ");
 12745  00607C  0E7B               	movlw	high STR_52
 12746  00607E  0100               	movlb	0	; () banked
 12747  006080  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12748  006082  0E5D               	movlw	low STR_52
 12749  006084  6F61               	movwf	?_putsUSART& (0+255),b
 12750  006086  EC9B  F00E         	call	_putsUSART	;wreg free
 12751                           
 12752                           ;main.c: 732: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12753  00608A  0101               	movlb	1	; () banked
 12754  00608C  6700               	tstfsz	_bHex& (0+255),b
 12755  00608E  D005               	goto	l10268
 12756                           
 12757                           ; BSR set to: 1
 12758  006090  0E7C               	movlw	high STR_54
 12759  006092  0102               	movlb	2	; () banked
 12760  006094  6F95               	movwf	(_doModeVerbose$1121+1)& (0+255),b
 12761  006096  0EED               	movlw	low STR_54
 12762  006098  D004               	goto	L6
 12763  00609A                     l10268:
 12764                           
 12765                           ; BSR set to: 1
 12766  00609A  0E7C               	movlw	high STR_53
 12767  00609C  0102               	movlb	2	; () banked
 12768  00609E  6F95               	movwf	(_doModeVerbose$1121+1)& (0+255),b
 12769  0060A0  0E64               	movlw	low STR_53
 12770  0060A2                     L6:
 12771  0060A2  6F94               	movwf	_doModeVerbose$1121& (0+255),b
 12772                           
 12773                           ; BSR set to: 2
 12774  0060A4  0E01               	movlw	high _wrkbuf
 12775  0060A6  0100               	movlb	0	; () banked
 12776  0060A8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12777  0060AA  0E54               	movlw	low _wrkbuf
 12778  0060AC  6F76               	movwf	?_sprintf& (0+255),b
 12779  0060AE  C294  F078         	movff	_doModeVerbose$1121,?_sprintf+2
 12780  0060B2  C295  F079         	movff	_doModeVerbose$1121+1,?_sprintf+3
 12781  0060B6  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12782  0060BA  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12783  0060BC  ECE9  F028         	call	_sprintf	;wreg free
 12784                           
 12785                           ; BSR set to: 0
 12786                           ;main.c: 733: putsUSART(wrkbuf);
 12787  0060C0  0E01               	movlw	high _wrkbuf
 12788  0060C2  0100               	movlb	0	; () banked
 12789  0060C4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12790  0060C6  0E54               	movlw	low _wrkbuf
 12791  0060C8  6F61               	movwf	?_putsUSART& (0+255),b
 12792  0060CA  EC9B  F00E         	call	_putsUSART	;wreg free
 12793  0060CE                     l538:
 12794  0060CE  A2AC               	btfss	4012,1,c	;volatile
 12795  0060D0  D7FE               	goto	l538
 12796                           
 12797                           ;main.c: 735: WriteUSART(':');
 12798  0060D2  0E3A               	movlw	58
 12799  0060D4  ECEE  F00B         	call	_WriteUSART
 12800                           
 12801                           ;main.c: 736: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12802  0060D8  0101               	movlb	1	; () banked
 12803  0060DA  6700               	tstfsz	_bHex& (0+255),b
 12804  0060DC  D005               	goto	l10280
 12805                           
 12806                           ; BSR set to: 1
 12807  0060DE  0E7C               	movlw	high STR_54
 12808  0060E0  0102               	movlb	2	; () banked
 12809  0060E2  6F97               	movwf	(_doModeVerbose$1133+1)& (0+255),b
 12810  0060E4  0EED               	movlw	low STR_54
 12811  0060E6  D004               	goto	L7
 12812  0060E8                     l10280:
 12813                           
 12814                           ; BSR set to: 1
 12815  0060E8  0E7C               	movlw	high STR_53
 12816  0060EA  0102               	movlb	2	; () banked
 12817  0060EC  6F97               	movwf	(_doModeVerbose$1133+1)& (0+255),b
 12818  0060EE  0E64               	movlw	low STR_53
 12819  0060F0                     L7:
 12820  0060F0  6F96               	movwf	_doModeVerbose$1133& (0+255),b
 12821                           
 12822                           ; BSR set to: 2
 12823  0060F2  0E01               	movlw	high _wrkbuf
 12824  0060F4  0100               	movlb	0	; () banked
 12825  0060F6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12826  0060F8  0E54               	movlw	low _wrkbuf
 12827  0060FA  6F76               	movwf	?_sprintf& (0+255),b
 12828  0060FC  C296  F078         	movff	_doModeVerbose$1133,?_sprintf+2
 12829  006100  C297  F079         	movff	_doModeVerbose$1133+1,?_sprintf+3
 12830  006104  EC28  F036         	call	PL40	;call to abstracted procedure
 12831  006108  ECE9  F028         	call	_sprintf	;wreg free
 12832                           
 12833                           ; BSR set to: 0
 12834                           ;main.c: 737: putsUSART(wrkbuf);
 12835  00610C  0E01               	movlw	high _wrkbuf
 12836  00610E  0100               	movlb	0	; () banked
 12837  006110  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12838  006112  0E54               	movlw	low _wrkbuf
 12839  006114  6F61               	movwf	?_putsUSART& (0+255),b
 12840  006116  EC9B  F00E         	call	_putsUSART	;wreg free
 12841                           
 12842                           ;main.c: 738: putsUSART((char *) " = ");
 12843  00611A  0E7B               	movlw	high (STR_236+4)
 12844  00611C  0100               	movlb	0	; () banked
 12845  00611E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12846  006120  0EE9               	movlw	low (STR_236+4)
 12847  006122  6F61               	movwf	?_putsUSART& (0+255),b
 12848  006124  EC9B  F00E         	call	_putsUSART	;wreg free
 12849                           
 12850                           ;main.c: 739: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 12851  006128  0101               	movlb	1	; () banked
 12852  00612A  6700               	tstfsz	_bHex& (0+255),b
 12853  00612C  D005               	goto	l10292
 12854                           
 12855                           ; BSR set to: 1
 12856  00612E  0E7C               	movlw	high STR_54
 12857  006130  0102               	movlb	2	; () banked
 12858  006132  6F99               	movwf	(_doModeVerbose$1138+1)& (0+255),b
 12859  006134  0EED               	movlw	low STR_54
 12860  006136  D004               	goto	L8
 12861  006138                     l10292:
 12862                           
 12863                           ; BSR set to: 1
 12864  006138  0E7C               	movlw	high STR_53
 12865  00613A  0102               	movlb	2	; () banked
 12866  00613C  6F99               	movwf	(_doModeVerbose$1138+1)& (0+255),b
 12867  00613E  0E64               	movlw	low STR_53
 12868  006140                     L8:
 12869  006140  6F98               	movwf	_doModeVerbose$1138& (0+255),b
 12870                           
 12871                           ; BSR set to: 2
 12872  006142  0E01               	movlw	high _wrkbuf
 12873  006144  0100               	movlb	0	; () banked
 12874  006146  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12875  006148  0E54               	movlw	low _wrkbuf
 12876  00614A  6F76               	movwf	?_sprintf& (0+255),b
 12877  00614C  C298  F078         	movff	_doModeVerbose$1138,?_sprintf+2
 12878  006150  C299  F079         	movff	_doModeVerbose$1138+1,?_sprintf+3
 12879  006154  C2B1  F07A         	movff	doModeVerbose@value,?_sprintf+4
 12880  006158  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12881  00615A  ECE9  F028         	call	_sprintf	;wreg free
 12882                           
 12883                           ; BSR set to: 0
 12884                           ;main.c: 740: putsUSART(wrkbuf);
 12885  00615E  0E01               	movlw	high _wrkbuf
 12886  006160  0100               	movlb	0	; () banked
 12887  006162  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12888  006164  0E54               	movlw	low _wrkbuf
 12889  006166  6F61               	movwf	?_putsUSART& (0+255),b
 12890  006168  EC9B  F00E         	call	_putsUSART	;wreg free
 12891  00616C                     l549:
 12892  00616C  A2AC               	btfss	4012,1,c	;volatile
 12893  00616E  D7FE               	goto	l549
 12894                           
 12895                           ;main.c: 742: WriteUSART(' ');
 12896  006170  0E20               	movlw	32
 12897  006172  ECEE  F00B         	call	_WriteUSART
 12898  006176                     l552:
 12899  006176  A2AC               	btfss	4012,1,c	;volatile
 12900  006178  D7FE               	goto	l552
 12901                           
 12902                           ;main.c: 744: if ((value > 32) && (value < 127)) {
 12903  00617A  0E20               	movlw	32
 12904  00617C  0102               	movlb	2	; () banked
 12905  00617E  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 12906  006180  D007               	goto	l10306
 12907                           
 12908                           ; BSR set to: 2
 12909  006182  0E7F               	movlw	127
 12910  006184  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 12911  006186  D004               	goto	l10306
 12912                           
 12913                           ; BSR set to: 2
 12914                           ;main.c: 745: WriteUSART(value);
 12915  006188  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12916  00618A  ECEE  F00B         	call	_WriteUSART
 12917                           
 12918                           ;main.c: 746: }
 12919  00618E  D003               	goto	l557
 12920  006190                     l10306:
 12921                           
 12922                           ; BSR set to: 2
 12923                           ;main.c: 747: else {
 12924                           ;main.c: 748: WriteUSART('.');
 12925  006190  0E2E               	movlw	46
 12926  006192  ECEE  F00B         	call	_WriteUSART
 12927  006196                     l557:
 12928  006196  A2AC               	btfss	4012,1,c	;volatile
 12929  006198  D7FE               	goto	l557
 12930                           
 12931                           ;main.c: 751: WriteUSART(' ');
 12932  00619A  0E20               	movlw	32
 12933  00619C  ECEE  F00B         	call	_WriteUSART
 12934                           
 12935                           ;main.c: 752: printBinary(value);
 12936  0061A0  0102               	movlb	2	; () banked
 12937  0061A2  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12938  0061A4  EC4F  F00E         	call	_printBinary
 12939                           
 12940                           ; BSR set to: 0
 12941                           ;main.c: 753: putsUSART((char *) "\r\n");
 12942  0061A8  0E71               	movlw	high (STR_190+50)
 12943  0061AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12944  0061AC  0E8A               	movlw	low (STR_190+50)
 12945  0061AE  6F61               	movwf	?_putsUSART& (0+255),b
 12946  0061B0  EC9B  F00E         	call	_putsUSART	;wreg free
 12947                           
 12948                           ;main.c: 754: }
 12949  0061B4  D058               	goto	l10340
 12950  0061B6                     l533:
 12951                           
 12952                           ;main.c: 755: else {
 12953                           ;main.c: 756: rv = 0;
 12954  0061B6  0102               	movlb	2	; () banked
 12955  0061B8  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 12956                           
 12957                           ; BSR set to: 2
 12958                           ;main.c: 757: putsUSART((char *) "-ERROR - Unable to read register ");
 12959  0061BA  0E77               	movlw	high STR_61
 12960  0061BC  0100               	movlb	0	; () banked
 12961  0061BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12962  0061C0  0E05               	movlw	low STR_61
 12963  0061C2  6F61               	movwf	?_putsUSART& (0+255),b
 12964  0061C4  EC9B  F00E         	call	_putsUSART	;wreg free
 12965                           
 12966                           ;main.c: 758: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12967  0061C8  0101               	movlb	1	; () banked
 12968  0061CA  6700               	tstfsz	_bHex& (0+255),b
 12969  0061CC  D005               	goto	l10320
 12970                           
 12971                           ; BSR set to: 1
 12972  0061CE  0E7C               	movlw	high STR_54
 12973  0061D0  0102               	movlb	2	; () banked
 12974  0061D2  6F9B               	movwf	(_doModeVerbose$1144+1)& (0+255),b
 12975  0061D4  0EED               	movlw	low STR_54
 12976  0061D6  D004               	goto	L9
 12977  0061D8                     l10320:
 12978                           
 12979                           ; BSR set to: 1
 12980  0061D8  0E7C               	movlw	high STR_53
 12981  0061DA  0102               	movlb	2	; () banked
 12982  0061DC  6F9B               	movwf	(_doModeVerbose$1144+1)& (0+255),b
 12983  0061DE  0E64               	movlw	low STR_53
 12984  0061E0                     L9:
 12985  0061E0  6F9A               	movwf	_doModeVerbose$1144& (0+255),b
 12986                           
 12987                           ; BSR set to: 2
 12988  0061E2  0E01               	movlw	high _wrkbuf
 12989  0061E4  0100               	movlb	0	; () banked
 12990  0061E6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12991  0061E8  0E54               	movlw	low _wrkbuf
 12992  0061EA  6F76               	movwf	?_sprintf& (0+255),b
 12993  0061EC  C29A  F078         	movff	_doModeVerbose$1144,?_sprintf+2
 12994  0061F0  C29B  F079         	movff	_doModeVerbose$1144+1,?_sprintf+3
 12995  0061F4  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12996  0061F8  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12997  0061FA  ECE9  F028         	call	_sprintf	;wreg free
 12998                           
 12999                           ; BSR set to: 0
 13000                           ;main.c: 759: putsUSART(wrkbuf);
 13001  0061FE  0E01               	movlw	high _wrkbuf
 13002  006200  0100               	movlb	0	; () banked
 13003  006202  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13004  006204  0E54               	movlw	low _wrkbuf
 13005  006206  6F61               	movwf	?_putsUSART& (0+255),b
 13006  006208  EC9B  F00E         	call	_putsUSART	;wreg free
 13007  00620C                     l565:
 13008  00620C  A2AC               	btfss	4012,1,c	;volatile
 13009  00620E  D7FE               	goto	l565
 13010                           
 13011                           ;main.c: 761: WriteUSART(':');
 13012  006210  0E3A               	movlw	58
 13013  006212  ECEE  F00B         	call	_WriteUSART
 13014                           
 13015                           ;main.c: 762: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13016  006216  0101               	movlb	1	; () banked
 13017  006218  6700               	tstfsz	_bHex& (0+255),b
 13018  00621A  D005               	goto	l10332
 13019                           
 13020                           ; BSR set to: 1
 13021  00621C  0E7C               	movlw	high STR_54
 13022  00621E  0102               	movlb	2	; () banked
 13023  006220  6F9D               	movwf	(_doModeVerbose$1148+1)& (0+255),b
 13024  006222  0EED               	movlw	low STR_54
 13025  006224  D004               	goto	L10
 13026  006226                     l10332:
 13027                           
 13028                           ; BSR set to: 1
 13029  006226  0E7C               	movlw	high STR_53
 13030  006228  0102               	movlb	2	; () banked
 13031  00622A  6F9D               	movwf	(_doModeVerbose$1148+1)& (0+255),b
 13032  00622C  0E64               	movlw	low STR_53
 13033  00622E                     L10:
 13034  00622E  6F9C               	movwf	_doModeVerbose$1148& (0+255),b
 13035                           
 13036                           ; BSR set to: 2
 13037  006230  0E01               	movlw	high _wrkbuf
 13038  006232  0100               	movlb	0	; () banked
 13039  006234  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13040  006236  0E54               	movlw	low _wrkbuf
 13041  006238  6F76               	movwf	?_sprintf& (0+255),b
 13042  00623A  C29C  F078         	movff	_doModeVerbose$1148,?_sprintf+2
 13043  00623E  C29D  F079         	movff	_doModeVerbose$1148+1,?_sprintf+3
 13044  006242  EC28  F036         	call	PL40	;call to abstracted procedure
 13045  006246  ECE9  F028         	call	_sprintf	;wreg free
 13046                           
 13047                           ; BSR set to: 0
 13048                           ;main.c: 763: putsUSART(wrkbuf);
 13049  00624A  0E01               	movlw	high _wrkbuf
 13050  00624C  0100               	movlb	0	; () banked
 13051  00624E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13052  006250  0E54               	movlw	low _wrkbuf
 13053  006252  6F61               	movwf	?_putsUSART& (0+255),b
 13054  006254  EC9B  F00E         	call	_putsUSART	;wreg free
 13055                           
 13056                           ;main.c: 764: putsUSART((char *) "\r\n");
 13057  006258  0E71               	movlw	high (STR_190+50)
 13058  00625A  0100               	movlb	0	; () banked
 13059  00625C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13060  00625E  0E8A               	movlw	low (STR_190+50)
 13061  006260  6F61               	movwf	?_putsUSART& (0+255),b
 13062  006262  EC9B  F00E         	call	_putsUSART	;wreg free
 13063  006266                     l10340:
 13064  006266  0102               	movlb	2	; () banked
 13065  006268  2BB0               	incf	doModeVerbose@i_1103& (0+255),f,b
 13066  00626A                     l10342:
 13067                           
 13068                           ; BSR set to: 2
 13069  00626A  51AB               	movf	doModeVerbose@count& (0+255),w,b
 13070  00626C  5DB0               	subwf	doModeVerbose@i_1103& (0+255),w,b
 13071  00626E  E201 D6EE          	bnc	l10260
 13072                           
 13073                           ; BSR set to: 2
 13074                           ;main.c: 765: }
 13075                           ;main.c: 766: }
 13076                           ;main.c: 768: if (rv) {
 13077  006272  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 13078  006274  E009               	bz	l10348
 13079                           
 13080                           ; BSR set to: 2
 13081                           ;main.c: 769: putsUSART((char *) "+OK\r\n");
 13082  006276  0E7C               	movlw	high STR_9
 13083  006278  0100               	movlb	0	; () banked
 13084  00627A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13085  00627C  0E7F               	movlw	low STR_9
 13086  00627E  6F61               	movwf	?_putsUSART& (0+255),b
 13087  006280  EC9B  F00E         	call	_putsUSART	;wreg free
 13088                           
 13089                           ;main.c: 770: }
 13090  006284  EFA2  F035         	goto	l10634
 13091  006288                     l10348:
 13092                           
 13093                           ; BSR set to: 2
 13094                           ;main.c: 771: else {
 13095                           ;main.c: 772: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13096  006288  0E71               	movlw	high STR_68
 13097  00628A  0100               	movlb	0	; () banked
 13098  00628C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13099  00628E  0E22               	movlw	low STR_68
 13100  006290  6F61               	movwf	?_putsUSART& (0+255),b
 13101  006292  EC9B  F00E         	call	_putsUSART	;wreg free
 13102  006296  EFA2  F035         	goto	l10634
 13103  00629A                     l10350:
 13104                           
 13105                           ; BSR set to: 1
 13106                           ;main.c: 778: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13107  00629A  0E01               	movlw	high _cmdbuf
 13108  00629C  0100               	movlb	0	; () banked
 13109  00629E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13110  0062A0  0E04               	movlw	low _cmdbuf
 13111  0062A2  6F6D               	movwf	?_stristr& (0+255),b
 13112  0062A4  0E7C               	movlw	high STR_69
 13113  0062A6  6F70               	movwf	(?_stristr+3)& (0+255),b
 13114  0062A8  0EAC               	movlw	low STR_69
 13115  0062AA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13116  0062AC  EC39  F011         	call	_stristr	;wreg free
 13117  0062B0  ECB2  F035         	call	PL2	;call to abstracted procedure
 13118  0062B4  E104               	bnz	u12695
 13119  0062B6  0100               	movlb	0	; () banked
 13120  0062B8  516D               	movf	?_stristr& (0+255),w,b
 13121  0062BA  0101               	movlb	1	; () banked
 13122  0062BC  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13123  0062BE                     u12695:
 13124  0062BE  E001 D0AF          	bnz	l10392
 13125                           
 13126                           ; BSR set to: 1
 13127                           ;main.c: 780: uint8_t nodeid;
 13128                           ;main.c: 781: uint8_t page = 0;
 13129  0062C2  0102               	movlb	2	; () banked
 13130  0062C4  6BA1               	clrf	doModeVerbose@page_1154& (0+255),b
 13131                           
 13132                           ; BSR set to: 2
 13133                           ;main.c: 782: uint8_t reg;
 13134                           ;main.c: 783: uint8_t value;
 13135                           ;main.c: 785: strcpy(cmdbuf, cmdbuf + 5);
 13136  0062C6  ECCB  F035         	call	PL8	;call to abstracted procedure
 13137  0062CA  EC7F  F00C         	call	_strcpy	;wreg free
 13138                           
 13139                           ;main.c: 786: char *p = strtok(cmdbuf, " ");
 13140  0062CE  0E01               	movlw	high _cmdbuf
 13141  0062D0  EC1F  F036         	call	PL36	;call to abstracted procedure
 13142  0062D4  EC84  F012         	call	_strtok	;wreg free
 13143  0062D8  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1157
 13144  0062DC  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1157+1
 13145                           
 13146                           ; BSR set to: 0
 13147                           ;main.c: 787: if ((0) != p) {
 13148  0062E0  0102               	movlb	2	; () banked
 13149  0062E2  51B5               	movf	(doModeVerbose@p_1157+1)& (0+255),w,b
 13150  0062E4  11B4               	iorwf	doModeVerbose@p_1157& (0+255),w,b
 13151  0062E6  E00A               	bz	l10362
 13152                           
 13153                           ; BSR set to: 2
 13154                           ;main.c: 788: nodeid = atoi(p);
 13155  0062E8  C2B4  F066         	movff	doModeVerbose@p_1157,?_atoi
 13156  0062EC  C2B5  F067         	movff	doModeVerbose@p_1157+1,?_atoi+1
 13157  0062F0  ECB4  F019         	call	_atoi	;wreg free
 13158  0062F4  5166               	movf	?_atoi& (0+255),w,b
 13159  0062F6  0102               	movlb	2	; () banked
 13160  0062F8  6F8D               	movwf	doModeVerbose@nodeid_1153& (0+255),b
 13161                           
 13162                           ;main.c: 789: }
 13163  0062FA  D009               	goto	l10366
 13164  0062FC                     l10362:
 13165                           
 13166                           ; BSR set to: 2
 13167                           ;main.c: 790: else {
 13168                           ;main.c: 791: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13169  0062FC  0E79               	movlw	high STR_48
 13170  0062FE  0100               	movlb	0	; () banked
 13171  006300  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13172  006302  0E30               	movlw	low STR_48
 13173  006304  6F61               	movwf	?_putsUSART& (0+255),b
 13174  006306  EC9B  F00E         	call	_putsUSART	;wreg free
 13175  00630A  EFB1  F035         	goto	l524
 13176  00630E                     l10366:
 13177                           
 13178                           ; BSR set to: 2
 13179                           ;main.c: 793: }
 13180                           ;main.c: 795: if ((0) != (p = strtok((0), " "))) {
 13181  00630E  EC0D  F036         	call	PL28	;call to abstracted procedure
 13182  006312  EC84  F012         	call	_strtok	;wreg free
 13183  006316  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1157
 13184  00631A  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1157+1
 13185  00631E  0102               	movlb	2	; () banked
 13186  006320  51B5               	movf	(doModeVerbose@p_1157+1)& (0+255),w,b
 13187  006322  11B4               	iorwf	doModeVerbose@p_1157& (0+255),w,b
 13188  006324  E034               	bz	l10374
 13189                           
 13190                           ; BSR set to: 2
 13191                           ;main.c: 797: char *preg;
 13192                           ;main.c: 798: if (preg = strchr(p, ':')) {
 13193  006326  C2B4  F060         	movff	doModeVerbose@p_1157,?_strchr
 13194  00632A  C2B5  F061         	movff	doModeVerbose@p_1157+1,?_strchr+1
 13195  00632E  0100               	movlb	0	; () banked
 13196  006330  6B63               	clrf	(?_strchr+3)& (0+255),b
 13197  006332  0E3A               	movlw	58
 13198  006334  6F62               	movwf	(?_strchr+2)& (0+255),b
 13199  006336  EC82  F00F         	call	_strchr	;wreg free
 13200  00633A  C060  F286         	movff	?_strchr,doModeVerbose@preg_1161
 13201  00633E  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1161+1
 13202  006342  0102               	movlb	2	; () banked
 13203  006344  5187               	movf	(doModeVerbose@preg_1161+1)& (0+255),w,b
 13204  006346  1186               	iorwf	doModeVerbose@preg_1161& (0+255),w,b
 13205  006348  E018               	bz	l10372
 13206                           
 13207                           ; BSR set to: 2
 13208                           ;main.c: 799: page = atoi(p);
 13209  00634A  C2B4  F066         	movff	doModeVerbose@p_1157,?_atoi
 13210  00634E  C2B5  F067         	movff	doModeVerbose@p_1157+1,?_atoi+1
 13211  006352  ECB4  F019         	call	_atoi	;wreg free
 13212  006356  5166               	movf	?_atoi& (0+255),w,b
 13213  006358  0102               	movlb	2	; () banked
 13214  00635A  6FA1               	movwf	doModeVerbose@page_1154& (0+255),b
 13215                           
 13216                           ;main.c: 800: reg = atoi(preg + 1);
 13217  00635C  2986               	incf	doModeVerbose@preg_1161& (0+255),w,b
 13218  00635E  0101               	movlb	1	; () banked
 13219  006360  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13220  006362  0E00               	movlw	0
 13221  006364  0102               	movlb	2	; () banked
 13222  006366  2187               	addwfc	(doModeVerbose@preg_1161+1)& (0+255),w,b
 13223  006368  0101               	movlb	1	; () banked
 13224  00636A  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13225  00636C  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 13226  006370  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13227  006374  ECB4  F019         	call	_atoi	;wreg free
 13228  006378  D006               	goto	L11
 13229  00637A                     l10372:
 13230                           
 13231                           ; BSR set to: 2
 13232                           ;main.c: 802: else {
 13233                           ;main.c: 803: reg = atoi(p);
 13234  00637A  C2B4  F066         	movff	doModeVerbose@p_1157,?_atoi
 13235  00637E  C2B5  F067         	movff	doModeVerbose@p_1157+1,?_atoi+1
 13236  006382  ECB4  F019         	call	_atoi	;wreg free
 13237  006386                     L11:
 13238  006386  5166               	movf	?_atoi& (0+255),w,b
 13239  006388  0102               	movlb	2	; () banked
 13240  00638A  6FA2               	movwf	doModeVerbose@reg_1155& (0+255),b
 13241  00638C  D008               	goto	l10378
 13242  00638E                     l10374:
 13243                           
 13244                           ; BSR set to: 2
 13245                           ;main.c: 807: else {
 13246                           ;main.c: 808: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13247  00638E  0E77               	movlw	high STR_50
 13248  006390  0100               	movlb	0	; () banked
 13249  006392  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13250  006394  0EAB               	movlw	low STR_50
 13251  006396  6F61               	movwf	?_putsUSART& (0+255),b
 13252  006398  EC9B  F00E         	call	_putsUSART	;wreg free
 13253  00639C  D3E2               	goto	l524
 13254  00639E                     l10378:
 13255                           
 13256                           ; BSR set to: 2
 13257                           ;main.c: 810: }
 13258                           ;main.c: 813: if ((0) != (p = strtok((0), " "))) {
 13259  00639E  EC0D  F036         	call	PL28	;call to abstracted procedure
 13260  0063A2  EC84  F012         	call	_strtok	;wreg free
 13261  0063A6  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1157
 13262  0063AA  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1157+1
 13263  0063AE  0102               	movlb	2	; () banked
 13264  0063B0  51B5               	movf	(doModeVerbose@p_1157+1)& (0+255),w,b
 13265  0063B2  11B4               	iorwf	doModeVerbose@p_1157& (0+255),w,b
 13266  0063B4  E00A               	bz	l10382
 13267                           
 13268                           ; BSR set to: 2
 13269                           ;main.c: 814: value = atoi(p);
 13270  0063B6  C2B4  F066         	movff	doModeVerbose@p_1157,?_atoi
 13271  0063BA  C2B5  F067         	movff	doModeVerbose@p_1157+1,?_atoi+1
 13272  0063BE  ECB4  F019         	call	_atoi	;wreg free
 13273  0063C2  5166               	movf	?_atoi& (0+255),w,b
 13274  0063C4  0102               	movlb	2	; () banked
 13275  0063C6  6FA9               	movwf	doModeVerbose@value_1156& (0+255),b
 13276                           
 13277                           ;main.c: 815: }
 13278  0063C8  D008               	goto	l10386
 13279  0063CA                     l10382:
 13280                           
 13281                           ; BSR set to: 2
 13282                           ;main.c: 816: else {
 13283                           ;main.c: 817: putsUSART((char *) "-ERROR - Need a value\r\n");
 13284  0063CA  0E79               	movlw	high STR_75
 13285  0063CC  0100               	movlb	0	; () banked
 13286  0063CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13287  0063D0  0E60               	movlw	low STR_75
 13288  0063D2  6F61               	movwf	?_putsUSART& (0+255),b
 13289  0063D4  EC9B  F00E         	call	_putsUSART	;wreg free
 13290  0063D8  D3C4               	goto	l524
 13291  0063DA                     l10386:
 13292                           
 13293                           ; BSR set to: 2
 13294                           ;main.c: 819: }
 13295                           ;main.c: 821: if (writeRegisterExtended(nodeid,
 13296                           ;main.c: 822: page,
 13297                           ;main.c: 823: reg,
 13298                           ;main.c: 824: rwtimeout,
 13299                           ;main.c: 825: &value)) {
 13300  0063DA  0100               	movlb	0	; () banked
 13301  0063DC  C2A1  F0B6         	movff	doModeVerbose@page_1154,?_writeRegisterExtended
 13302  0063E0  6BB7               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13303  0063E2  C2A2  F0B8         	movff	doModeVerbose@reg_1155,?_writeRegisterExtended+2
 13304  0063E6  C103  F0B9         	movff	_rwtimeout,?_writeRegisterExtended+3
 13305  0063EA  6BBA               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13306  0063EC  0E02               	movlw	high doModeVerbose@value_1156
 13307  0063EE  6FBC               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13308  0063F0  0EA9               	movlw	low doModeVerbose@value_1156
 13309  0063F2  6FBB               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13310  0063F4  0102               	movlb	2	; () banked
 13311  0063F6  518D               	movf	doModeVerbose@nodeid_1153& (0+255),w,b
 13312  0063F8  EC37  F01A         	call	_writeRegisterExtended
 13313  0063FC  0900               	iorlw	0
 13314  0063FE  E008               	bz	l10390
 13315                           
 13316                           ;main.c: 826: putsUSART((char *) "+OK - Value written successfully\r\n");
 13317  006400  0E76               	movlw	high STR_76
 13318  006402  0100               	movlb	0	; () banked
 13319  006404  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13320  006406  0EC0               	movlw	low STR_76
 13321  006408  6F61               	movwf	?_putsUSART& (0+255),b
 13322  00640A  EC9B  F00E         	call	_putsUSART	;wreg free
 13323                           
 13324                           ;main.c: 827: }
 13325  00640E  D39A               	goto	l10634
 13326  006410                     l10390:
 13327                           
 13328                           ;main.c: 828: else {
 13329                           ;main.c: 829: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 13330  006410  0E77               	movlw	high STR_77
 13331  006412  0100               	movlb	0	; () banked
 13332  006414  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13333  006416  0E8A               	movlw	low STR_77
 13334  006418  6F61               	movwf	?_putsUSART& (0+255),b
 13335  00641A  EC9B  F00E         	call	_putsUSART	;wreg free
 13336  00641E  D392               	goto	l10634
 13337  006420                     l10392:
 13338                           
 13339                           ; BSR set to: 1
 13340                           ;main.c: 835: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13341  006420  0E01               	movlw	high _cmdbuf
 13342  006422  0100               	movlb	0	; () banked
 13343  006424  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13344  006426  0E04               	movlw	low _cmdbuf
 13345  006428  6F6D               	movwf	?_stristr& (0+255),b
 13346  00642A  0E7C               	movlw	high STR_78
 13347  00642C  6F70               	movwf	(?_stristr+3)& (0+255),b
 13348  00642E  0EBB               	movlw	low STR_78
 13349  006430  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13350  006432  EC39  F011         	call	_stristr	;wreg free
 13351  006436  DB96               	call	PL2	;call to abstracted procedure
 13352  006438  E104               	bnz	u12755
 13353  00643A  0100               	movlb	0	; () banked
 13354  00643C  516D               	movf	?_stristr& (0+255),w,b
 13355  00643E  0101               	movlb	1	; () banked
 13356  006440  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13357  006442                     u12755:
 13358  006442  E157               	bnz	l10418
 13359                           
 13360                           ; BSR set to: 1
 13361                           ;main.c: 836: uint8_t nodeid;
 13362                           ;main.c: 838: strcpy(cmdbuf, cmdbuf + 9);
 13363  006444  0E01               	movlw	high _cmdbuf
 13364  006446  0100               	movlb	0	; () banked
 13365  006448  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13366  00644A  0E04               	movlw	low _cmdbuf
 13367  00644C  6F60               	movwf	?_strcpy& (0+255),b
 13368  00644E  0E0D               	movlw	low (_cmdbuf+9)
 13369  006450  0101               	movlb	1	; () banked
 13370  006452  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13371  006454  0E01               	movlw	high (_cmdbuf+9)
 13372  006456  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13373  006458  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13374  00645C  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13375  006460  EC7F  F00C         	call	_strcpy	;wreg free
 13376                           
 13377                           ;main.c: 839: nodeid = atoi(cmdbuf);
 13378  006464  0E01               	movlw	high _cmdbuf
 13379  006466  0100               	movlb	0	; () banked
 13380  006468  6F67               	movwf	(?_atoi+1)& (0+255),b
 13381  00646A  0E04               	movlw	low _cmdbuf
 13382  00646C  6F66               	movwf	?_atoi& (0+255),b
 13383  00646E  ECB4  F019         	call	_atoi	;wreg free
 13384  006472  5166               	movf	?_atoi& (0+255),w,b
 13385  006474  0102               	movlb	2	; () banked
 13386  006476  6FAF               	movwf	doModeVerbose@nodeid_1168& (0+255),b
 13387                           
 13388                           ; BSR set to: 2
 13389                           ;main.c: 841: putsUSART((char *) "Info for node id = ");
 13390  006478  0E7A               	movlw	high STR_79
 13391  00647A  0100               	movlb	0	; () banked
 13392  00647C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13393  00647E  0EAA               	movlw	low STR_79
 13394  006480  6F61               	movwf	?_putsUSART& (0+255),b
 13395  006482  EC9B  F00E         	call	_putsUSART	;wreg free
 13396                           
 13397                           ;main.c: 842: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13398  006486  0101               	movlb	1	; () banked
 13399  006488  6700               	tstfsz	_bHex& (0+255),b
 13400  00648A  D005               	goto	l10404
 13401                           
 13402                           ; BSR set to: 1
 13403  00648C  0E7C               	movlw	high STR_54
 13404  00648E  0102               	movlb	2	; () banked
 13405  006490  6F9F               	movwf	(_doModeVerbose$1173+1)& (0+255),b
 13406  006492  0EED               	movlw	low STR_54
 13407  006494  D004               	goto	L12
 13408  006496                     l10404:
 13409                           
 13410                           ; BSR set to: 1
 13411  006496  0E7C               	movlw	high STR_53
 13412  006498  0102               	movlb	2	; () banked
 13413  00649A  6F9F               	movwf	(_doModeVerbose$1173+1)& (0+255),b
 13414  00649C  0E64               	movlw	low STR_53
 13415  00649E                     L12:
 13416  00649E  6F9E               	movwf	_doModeVerbose$1173& (0+255),b
 13417                           
 13418                           ; BSR set to: 2
 13419  0064A0  0E01               	movlw	high _wrkbuf
 13420  0064A2  0100               	movlb	0	; () banked
 13421  0064A4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13422  0064A6  0E54               	movlw	low _wrkbuf
 13423  0064A8  6F76               	movwf	?_sprintf& (0+255),b
 13424  0064AA  C29E  F078         	movff	_doModeVerbose$1173,?_sprintf+2
 13425  0064AE  C29F  F079         	movff	_doModeVerbose$1173+1,?_sprintf+3
 13426  0064B2  C2AF  F07A         	movff	doModeVerbose@nodeid_1168,?_sprintf+4
 13427  0064B6  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13428  0064B8  ECE9  F028         	call	_sprintf	;wreg free
 13429                           
 13430                           ; BSR set to: 0
 13431                           ;main.c: 843: putsUSART(wrkbuf);
 13432  0064BC  0E01               	movlw	high _wrkbuf
 13433  0064BE  0100               	movlb	0	; () banked
 13434  0064C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13435  0064C2  0E54               	movlw	low _wrkbuf
 13436  0064C4  6F61               	movwf	?_putsUSART& (0+255),b
 13437  0064C6  EC9B  F00E         	call	_putsUSART	;wreg free
 13438                           
 13439                           ;main.c: 844: putsUSART((char *) "\r\n");
 13440  0064CA  0E71               	movlw	high (STR_190+50)
 13441  0064CC  0100               	movlb	0	; () banked
 13442  0064CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13443  0064D0  0E8A               	movlw	low (STR_190+50)
 13444  0064D2  6F61               	movwf	?_putsUSART& (0+255),b
 13445  0064D4  EC9B  F00E         	call	_putsUSART	;wreg free
 13446                           
 13447                           ;main.c: 845: printNodeFirmwareVersion(nodeid);
 13448  0064D8  0102               	movlb	2	; () banked
 13449  0064DA  51AF               	movf	doModeVerbose@nodeid_1168& (0+255),w,b
 13450  0064DC  EC88  F016         	call	_printNodeFirmwareVersion
 13451                           
 13452                           ;main.c: 846: printGUID(nodeid);
 13453  0064E0  0102               	movlb	2	; () banked
 13454  0064E2  51AF               	movf	doModeVerbose@nodeid_1168& (0+255),w,b
 13455  0064E4  EC32  F019         	call	_printGUID
 13456                           
 13457                           ;main.c: 847: printMDF(nodeid);
 13458  0064E8  0102               	movlb	2	; () banked
 13459  0064EA  51AF               	movf	doModeVerbose@nodeid_1168& (0+255),w,b
 13460  0064EC  ECCD  F012         	call	_printMDF
 13461                           
 13462                           ;main.c: 848: }
 13463  0064F0  D329               	goto	l10634
 13464  0064F2                     l10418:
 13465                           
 13466                           ; BSR set to: 1
 13467                           ;main.c: 852: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13468  0064F2  0E01               	movlw	high _cmdbuf
 13469  0064F4  0100               	movlb	0	; () banked
 13470  0064F6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13471  0064F8  0E04               	movlw	low _cmdbuf
 13472  0064FA  6F6D               	movwf	?_stristr& (0+255),b
 13473  0064FC  0E7C               	movlw	high STR_83
 13474  0064FE  6F70               	movwf	(?_stristr+3)& (0+255),b
 13475  006500  0E56               	movlw	low STR_83
 13476  006502  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13477  006504  EC39  F011         	call	_stristr	;wreg free
 13478  006508  DB2D               	call	PL2	;call to abstracted procedure
 13479  00650A  E104               	bnz	u12775
 13480  00650C  0100               	movlb	0	; () banked
 13481  00650E  516D               	movf	?_stristr& (0+255),w,b
 13482  006510  0101               	movlb	1	; () banked
 13483  006512  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13484  006514                     u12775:
 13485  006514  E001 D0CC          	bnz	l10484
 13486                           
 13487                           ; BSR set to: 1
 13488                           ;main.c: 854: uint8_t filterno;
 13489                           ;main.c: 855: uint8_t filter_priority;
 13490                           ;main.c: 856: uint16_t filter_class;
 13491                           ;main.c: 857: uint8_t filter_type;
 13492                           ;main.c: 858: uint8_t filter_nodeid;
 13493                           ;main.c: 860: strcpy(cmdbuf, cmdbuf + 8);
 13494  006518  0E01               	movlw	high _cmdbuf
 13495  00651A  DB71               	call	PL12	;call to abstracted procedure
 13496  00651C  EC7F  F00C         	call	_strcpy	;wreg free
 13497                           
 13498                           ;main.c: 861: char *p = strtok(cmdbuf, ",");
 13499  006520  DB84               	call	PL30	;call to abstracted procedure
 13500  006522  EC84  F012         	call	_strtok	;wreg free
 13501  006526  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1181
 13502  00652A  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1181+1
 13503                           
 13504                           ; BSR set to: 0
 13505                           ;main.c: 862: if ((0) != p) {
 13506  00652E  0102               	movlb	2	; () banked
 13507  006530  51BA               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 13508  006532  11B9               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 13509  006534  E014               	bz	l10434
 13510                           
 13511                           ; BSR set to: 2
 13512                           ;main.c: 863: filterno = atoi(p);
 13513  006536  C2B9  F066         	movff	doModeVerbose@p_1181,?_atoi
 13514  00653A  C2BA  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 13515  00653E  ECB4  F019         	call	_atoi	;wreg free
 13516  006542  5166               	movf	?_atoi& (0+255),w,b
 13517  006544  0102               	movlb	2	; () banked
 13518  006546  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 13519                           
 13520                           ; BSR set to: 2
 13521                           ;main.c: 864: if (filterno > 15) {
 13522  006548  0E0F               	movlw	15
 13523  00654A  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13524  00654C  D010               	goto	l10438
 13525                           
 13526                           ; BSR set to: 2
 13527                           ;main.c: 865: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13528  00654E  0E6F               	movlw	high STR_85
 13529  006550  0100               	movlb	0	; () banked
 13530  006552  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13531  006554  0E1C               	movlw	low STR_85
 13532  006556  6F61               	movwf	?_putsUSART& (0+255),b
 13533  006558  EC9B  F00E         	call	_putsUSART	;wreg free
 13534  00655C  D302               	goto	l524
 13535  00655E                     l10434:
 13536                           
 13537                           ; BSR set to: 2
 13538                           ;main.c: 869: else {
 13539                           ;main.c: 870: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13540  00655E  0E74               	movlw	high STR_86
 13541  006560  0100               	movlb	0	; () banked
 13542  006562  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13543  006564  0EFA               	movlw	low STR_86
 13544  006566  6F61               	movwf	?_putsUSART& (0+255),b
 13545  006568  EC9B  F00E         	call	_putsUSART	;wreg free
 13546  00656C  D2FA               	goto	l524
 13547  00656E                     l10438:
 13548                           
 13549                           ; BSR set to: 2
 13550                           ;main.c: 872: }
 13551                           ;main.c: 875: p = strtok((0), ",");
 13552  00656E  DB04               	call	PL4	;call to abstracted procedure
 13553  006570  EC84  F012         	call	_strtok	;wreg free
 13554  006574  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1181
 13555  006578  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1181+1
 13556                           
 13557                           ; BSR set to: 0
 13558                           ;main.c: 876: if ((0) != p) {
 13559  00657C  0102               	movlb	2	; () banked
 13560  00657E  51BA               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 13561  006580  11B9               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 13562  006582  E00A               	bz	l10444
 13563                           
 13564                           ; BSR set to: 2
 13565                           ;main.c: 877: filter_priority = atoi(p);
 13566  006584  C2B9  F066         	movff	doModeVerbose@p_1181,?_atoi
 13567  006588  C2BA  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 13568  00658C  ECB4  F019         	call	_atoi	;wreg free
 13569  006590  5166               	movf	?_atoi& (0+255),w,b
 13570  006592  0102               	movlb	2	; () banked
 13571  006594  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 13572                           
 13573                           ;main.c: 878: }
 13574  006596  D008               	goto	l10448
 13575  006598                     l10444:
 13576                           
 13577                           ; BSR set to: 2
 13578                           ;main.c: 879: else {
 13579                           ;main.c: 880: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 13580  006598  0E74               	movlw	high STR_88
 13581  00659A  0100               	movlb	0	; () banked
 13582  00659C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13583  00659E  0E2F               	movlw	low STR_88
 13584  0065A0  6F61               	movwf	?_putsUSART& (0+255),b
 13585  0065A2  EC9B  F00E         	call	_putsUSART	;wreg free
 13586  0065A6  D2DD               	goto	l524
 13587  0065A8                     l10448:
 13588                           
 13589                           ; BSR set to: 2
 13590                           ;main.c: 882: }
 13591                           ;main.c: 885: p = strtok((0), ",");
 13592  0065A8  DAE7               	call	PL4	;call to abstracted procedure
 13593  0065AA  EC84  F012         	call	_strtok	;wreg free
 13594  0065AE  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1181
 13595  0065B2  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1181+1
 13596                           
 13597                           ; BSR set to: 0
 13598                           ;main.c: 886: if ((0) != p) {
 13599  0065B6  0102               	movlb	2	; () banked
 13600  0065B8  51BA               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 13601  0065BA  11B9               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 13602  0065BC  E00B               	bz	l10454
 13603                           
 13604                           ; BSR set to: 2
 13605                           ;main.c: 887: filter_class = atoi(p);
 13606  0065BE  C2B9  F066         	movff	doModeVerbose@p_1181,?_atoi
 13607  0065C2  C2BA  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 13608  0065C6  ECB4  F019         	call	_atoi	;wreg free
 13609  0065CA  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 13610  0065CE  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 13611                           
 13612                           ;main.c: 888: }
 13613  0065D2  D008               	goto	l10458
 13614  0065D4                     l10454:
 13615                           
 13616                           ; BSR set to: 2
 13617                           ;main.c: 889: else {
 13618                           ;main.c: 890: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 13619  0065D4  0E75               	movlw	high STR_90
 13620  0065D6  0100               	movlb	0	; () banked
 13621  0065D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13622  0065DA  0E96               	movlw	low STR_90
 13623  0065DC  6F61               	movwf	?_putsUSART& (0+255),b
 13624  0065DE  EC9B  F00E         	call	_putsUSART	;wreg free
 13625  0065E2  D2BF               	goto	l524
 13626  0065E4                     l10458:
 13627                           
 13628                           ; BSR set to: 0
 13629                           ;main.c: 892: }
 13630                           ;main.c: 895: p = strtok((0), ",");
 13631  0065E4  DAD1               	call	PL6	;call to abstracted procedure
 13632  0065E6  EC84  F012         	call	_strtok	;wreg free
 13633  0065EA  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1181
 13634  0065EE  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1181+1
 13635                           
 13636                           ; BSR set to: 0
 13637                           ;main.c: 896: if ((0) != p) {
 13638  0065F2  0102               	movlb	2	; () banked
 13639  0065F4  51BA               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 13640  0065F6  11B9               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 13641  0065F8  E00A               	bz	l10464
 13642                           
 13643                           ; BSR set to: 2
 13644                           ;main.c: 897: filter_type = atoi(p);
 13645  0065FA  C2B9  F066         	movff	doModeVerbose@p_1181,?_atoi
 13646  0065FE  C2BA  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 13647  006602  ECB4  F019         	call	_atoi	;wreg free
 13648  006606  5166               	movf	?_atoi& (0+255),w,b
 13649  006608  0102               	movlb	2	; () banked
 13650  00660A  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 13651                           
 13652                           ;main.c: 898: }
 13653  00660C  D008               	goto	l10468
 13654  00660E                     l10464:
 13655                           
 13656                           ; BSR set to: 2
 13657                           ;main.c: 899: else {
 13658                           ;main.c: 900: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 13659  00660E  0E75               	movlw	high STR_92
 13660  006610  0100               	movlb	0	; () banked
 13661  006612  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13662  006614  0EE4               	movlw	low STR_92
 13663  006616  6F61               	movwf	?_putsUSART& (0+255),b
 13664  006618  EC9B  F00E         	call	_putsUSART	;wreg free
 13665  00661C  D2A2               	goto	l524
 13666  00661E                     l10468:
 13667                           
 13668                           ; BSR set to: 2
 13669                           ;main.c: 902: }
 13670                           ;main.c: 905: p = strtok((0), ",");
 13671  00661E  DAAC               	call	PL4	;call to abstracted procedure
 13672  006620  EC84  F012         	call	_strtok	;wreg free
 13673  006624  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1181
 13674  006628  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1181+1
 13675                           
 13676                           ; BSR set to: 0
 13677                           ;main.c: 906: if ((0) != p) {
 13678  00662C  0102               	movlb	2	; () banked
 13679  00662E  51BA               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 13680  006630  11B9               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 13681  006632  E00A               	bz	l10474
 13682                           
 13683                           ; BSR set to: 2
 13684                           ;main.c: 907: filter_nodeid = atoi(p);
 13685  006634  C2B9  F066         	movff	doModeVerbose@p_1181,?_atoi
 13686  006638  C2BA  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 13687  00663C  ECB4  F019         	call	_atoi	;wreg free
 13688  006640  5166               	movf	?_atoi& (0+255),w,b
 13689  006642  0102               	movlb	2	; () banked
 13690  006644  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 13691                           
 13692                           ;main.c: 908: }
 13693  006646  D008               	goto	l10478
 13694  006648                     l10474:
 13695                           
 13696                           ; BSR set to: 2
 13697                           ;main.c: 909: else {
 13698                           ;main.c: 910: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 13699  006648  0E74               	movlw	high STR_94
 13700  00664A  0100               	movlb	0	; () banked
 13701  00664C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13702  00664E  0E59               	movlw	low STR_94
 13703  006650  6F61               	movwf	?_putsUSART& (0+255),b
 13704  006652  EC9B  F00E         	call	_putsUSART	;wreg free
 13705  006656  D285               	goto	l524
 13706  006658                     l10478:
 13707                           
 13708                           ; BSR set to: 2
 13709                           ;main.c: 912: }
 13710                           ;main.c: 915: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13711  006658  0E80               	movlw	128
 13712  00665A  EC03  F00C         	call	_ECANSetOperationMode
 13713                           
 13714                           ; BSR set to: 0
 13715                           ;main.c: 917: uint32_t id = ((uint32_t) filter_priority << 26) |
 13716                           ;main.c: 918: ((uint32_t) filter_class << 16) |
 13717                           ;main.c: 919: ((uint32_t) filter_type << 8) |
 13718                           ;main.c: 920: filter_nodeid;
 13719  00665E  C28F  F1B2         	movff	doModeVerbose@filter_type,??_doModeVerbose
 13720  006662  DB04               	call	PL44	;call to abstracted procedure
 13721  006664  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 13722  006666  0101               	movlb	1	; () banked
 13723  006668  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 13724  00666A  0102               	movlb	2	; () banked
 13725  00666C  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 13726  00666E  DB17               	call	PL60	;call to abstracted procedure
 13727  006670  C28E  F1BA         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 13728  006674  DA9F               	call	PL10	;call to abstracted procedure
 13729  006676  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 13730  006678  0101               	movlb	1	; () banked
 13731  00667A  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13732  00667C  0102               	movlb	2	; () banked
 13733  00667E  6F80               	movwf	doModeVerbose@id& (0+255),b
 13734  006680  0101               	movlb	1	; () banked
 13735  006682  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13736  006684  0102               	movlb	2	; () banked
 13737  006686  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 13738  006688  0101               	movlb	1	; () banked
 13739  00668A  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13740  00668C  0102               	movlb	2	; () banked
 13741  00668E  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 13742  006690  0101               	movlb	1	; () banked
 13743  006692  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13744  006694  0102               	movlb	2	; () banked
 13745  006696  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 13746                           
 13747                           ; BSR set to: 2
 13748                           ;main.c: 921: setFilter(filterno, id);
 13749  006698  C280  F060         	movff	doModeVerbose@id,?_setFilter
 13750  00669C  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 13751  0066A0  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 13752  0066A4  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 13753  0066A8  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 13754  0066AA  EC73  F022         	call	_setFilter
 13755                           
 13756                           ;main.c: 922: }
 13757  0066AE  D24A               	goto	l10634
 13758  0066B0                     l10484:
 13759                           
 13760                           ; BSR set to: 1
 13761                           ;main.c: 926: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 13762  0066B0  0E01               	movlw	high _cmdbuf
 13763  0066B2  0100               	movlb	0	; () banked
 13764  0066B4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13765  0066B6  0E04               	movlw	low _cmdbuf
 13766  0066B8  6F6D               	movwf	?_stristr& (0+255),b
 13767  0066BA  0E7C               	movlw	high STR_95
 13768  0066BC  6F70               	movwf	(?_stristr+3)& (0+255),b
 13769  0066BE  0EB1               	movlw	low STR_95
 13770  0066C0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13771  0066C2  EC39  F011         	call	_stristr	;wreg free
 13772  0066C6  DA4E               	call	PL2	;call to abstracted procedure
 13773  0066C8  E104               	bnz	u12855
 13774  0066CA  0100               	movlb	0	; () banked
 13775  0066CC  516D               	movf	?_stristr& (0+255),w,b
 13776  0066CE  0101               	movlb	1	; () banked
 13777  0066D0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13778  0066D2                     u12855:
 13779  0066D2  E001 D0D3          	bnz	l10554
 13780                           
 13781                           ; BSR set to: 1
 13782                           ;main.c: 928: uint8_t maskno;
 13783                           ;main.c: 929: uint8_t mask_priority;
 13784                           ;main.c: 930: uint16_t mask_class;
 13785                           ;main.c: 931: uint8_t mask_type;
 13786                           ;main.c: 932: uint8_t mask_nodeid;
 13787                           ;main.c: 934: strcpy(cmdbuf, cmdbuf + 8);
 13788  0066D6  0E01               	movlw	high _cmdbuf
 13789  0066D8  DA92               	call	PL12	;call to abstracted procedure
 13790  0066DA  EC7F  F00C         	call	_strcpy	;wreg free
 13791                           
 13792                           ;main.c: 935: char *p = strtok(cmdbuf, ",");
 13793  0066DE  DAA5               	call	PL30	;call to abstracted procedure
 13794  0066E0  EC84  F012         	call	_strtok	;wreg free
 13795  0066E4  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1200
 13796  0066E8  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1200+1
 13797                           
 13798                           ; BSR set to: 0
 13799                           ;main.c: 936: if ((0) != p) {
 13800  0066EC  0102               	movlb	2	; () banked
 13801  0066EE  51BC               	movf	(doModeVerbose@p_1200+1)& (0+255),w,b
 13802  0066F0  11BB               	iorwf	doModeVerbose@p_1200& (0+255),w,b
 13803  0066F2  E014               	bz	l10500
 13804                           
 13805                           ; BSR set to: 2
 13806                           ;main.c: 937: maskno = atoi(p);
 13807  0066F4  C2BB  F066         	movff	doModeVerbose@p_1200,?_atoi
 13808  0066F8  C2BC  F067         	movff	doModeVerbose@p_1200+1,?_atoi+1
 13809  0066FC  ECB4  F019         	call	_atoi	;wreg free
 13810  006700  5166               	movf	?_atoi& (0+255),w,b
 13811  006702  0102               	movlb	2	; () banked
 13812  006704  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 13813                           
 13814                           ; BSR set to: 2
 13815                           ;main.c: 938: if (maskno > 1) {
 13816  006706  0E01               	movlw	1
 13817  006708  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 13818  00670A  D010               	goto	l10504
 13819                           
 13820                           ; BSR set to: 2
 13821                           ;main.c: 939: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 13822  00670C  0E72               	movlw	high STR_97
 13823  00670E  0100               	movlb	0	; () banked
 13824  006710  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13825  006712  0E29               	movlw	low STR_97
 13826  006714  6F61               	movwf	?_putsUSART& (0+255),b
 13827  006716  EC9B  F00E         	call	_putsUSART	;wreg free
 13828  00671A  D223               	goto	l524
 13829  00671C                     l10500:
 13830                           
 13831                           ; BSR set to: 2
 13832                           ;main.c: 943: else {
 13833                           ;main.c: 944: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 13834  00671C  0E76               	movlw	high STR_98
 13835  00671E  0100               	movlb	0	; () banked
 13836  006720  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13837  006722  0E0A               	movlw	low STR_98
 13838  006724  6F61               	movwf	?_putsUSART& (0+255),b
 13839  006726  EC9B  F00E         	call	_putsUSART	;wreg free
 13840  00672A  D21B               	goto	l524
 13841  00672C                     l10504:
 13842                           
 13843                           ; BSR set to: 2
 13844                           ;main.c: 946: }
 13845                           ;main.c: 949: p = strtok((0), ",");
 13846  00672C  DA25               	call	PL4	;call to abstracted procedure
 13847  00672E  EC84  F012         	call	_strtok	;wreg free
 13848  006732  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1200
 13849  006736  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1200+1
 13850                           
 13851                           ; BSR set to: 0
 13852                           ;main.c: 950: if ((0) != p) {
 13853  00673A  0102               	movlb	2	; () banked
 13854  00673C  51BC               	movf	(doModeVerbose@p_1200+1)& (0+255),w,b
 13855  00673E  11BB               	iorwf	doModeVerbose@p_1200& (0+255),w,b
 13856  006740  E00A               	bz	l10510
 13857                           
 13858                           ; BSR set to: 2
 13859                           ;main.c: 951: mask_priority = atoi(p);
 13860  006742  C2BB  F066         	movff	doModeVerbose@p_1200,?_atoi
 13861  006746  C2BC  F067         	movff	doModeVerbose@p_1200+1,?_atoi+1
 13862  00674A  ECB4  F019         	call	_atoi	;wreg free
 13863  00674E  5166               	movf	?_atoi& (0+255),w,b
 13864  006750  0102               	movlb	2	; () banked
 13865  006752  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 13866                           
 13867                           ;main.c: 952: }
 13868  006754  D008               	goto	l10514
 13869  006756                     l10510:
 13870                           
 13871                           ; BSR set to: 2
 13872                           ;main.c: 953: else {
 13873                           ;main.c: 954: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 13874  006756  0E74               	movlw	high STR_100
 13875  006758  0100               	movlb	0	; () banked
 13876  00675A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13877  00675C  0EAA               	movlw	low STR_100
 13878  00675E  6F61               	movwf	?_putsUSART& (0+255),b
 13879  006760  EC9B  F00E         	call	_putsUSART	;wreg free
 13880  006764  D1FE               	goto	l524
 13881  006766                     l10514:
 13882                           
 13883                           ; BSR set to: 2
 13884                           ;main.c: 956: }
 13885                           ;main.c: 959: p = strtok((0), ",");
 13886  006766  DA08               	call	PL4	;call to abstracted procedure
 13887  006768  EC84  F012         	call	_strtok	;wreg free
 13888  00676C  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1200
 13889  006770  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1200+1
 13890                           
 13891                           ; BSR set to: 0
 13892                           ;main.c: 960: if ((0) != p) {
 13893  006774  0102               	movlb	2	; () banked
 13894  006776  51BC               	movf	(doModeVerbose@p_1200+1)& (0+255),w,b
 13895  006778  11BB               	iorwf	doModeVerbose@p_1200& (0+255),w,b
 13896  00677A  E00B               	bz	l10520
 13897                           
 13898                           ; BSR set to: 2
 13899                           ;main.c: 961: mask_class = atoi(p);
 13900  00677C  C2BB  F066         	movff	doModeVerbose@p_1200,?_atoi
 13901  006780  C2BC  F067         	movff	doModeVerbose@p_1200+1,?_atoi+1
 13902  006784  ECB4  F019         	call	_atoi	;wreg free
 13903  006788  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 13904  00678C  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 13905                           
 13906                           ;main.c: 962: }
 13907  006790  D008               	goto	l10524
 13908  006792                     l10520:
 13909                           
 13910                           ; BSR set to: 2
 13911                           ;main.c: 963: else {
 13912                           ;main.c: 964: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 13913  006792  0E76               	movlw	high STR_102
 13914  006794  0100               	movlb	0	; () banked
 13915  006796  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13916  006798  0E54               	movlw	low STR_102
 13917  00679A  6F61               	movwf	?_putsUSART& (0+255),b
 13918  00679C  EC9B  F00E         	call	_putsUSART	;wreg free
 13919  0067A0  D1E0               	goto	l524
 13920  0067A2                     l10524:
 13921                           
 13922                           ; BSR set to: 0
 13923                           ;main.c: 966: }
 13924                           ;main.c: 969: p = strtok((0), ",");
 13925  0067A2  D9F2               	call	PL6	;call to abstracted procedure
 13926  0067A4  EC84  F012         	call	_strtok	;wreg free
 13927  0067A8  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1200
 13928  0067AC  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1200+1
 13929                           
 13930                           ; BSR set to: 0
 13931                           ;main.c: 970: if ((0) != p) {
 13932  0067B0  0102               	movlb	2	; () banked
 13933  0067B2  51BC               	movf	(doModeVerbose@p_1200+1)& (0+255),w,b
 13934  0067B4  11BB               	iorwf	doModeVerbose@p_1200& (0+255),w,b
 13935  0067B6  E00A               	bz	l10530
 13936                           
 13937                           ; BSR set to: 2
 13938                           ;main.c: 971: mask_type = atoi(p);
 13939  0067B8  C2BB  F066         	movff	doModeVerbose@p_1200,?_atoi
 13940  0067BC  C2BC  F067         	movff	doModeVerbose@p_1200+1,?_atoi+1
 13941  0067C0  ECB4  F019         	call	_atoi	;wreg free
 13942  0067C4  5166               	movf	?_atoi& (0+255),w,b
 13943  0067C6  0102               	movlb	2	; () banked
 13944  0067C8  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 13945                           
 13946                           ;main.c: 972: }
 13947  0067CA  D008               	goto	l10534
 13948  0067CC                     l10530:
 13949                           
 13950                           ; BSR set to: 2
 13951                           ;main.c: 973: else {
 13952                           ;main.c: 974: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 13953  0067CC  0E76               	movlw	high STR_104
 13954  0067CE  0100               	movlb	0	; () banked
 13955  0067D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13956  0067D2  0E79               	movlw	low STR_104
 13957  0067D4  6F61               	movwf	?_putsUSART& (0+255),b
 13958  0067D6  EC9B  F00E         	call	_putsUSART	;wreg free
 13959  0067DA  D1C3               	goto	l524
 13960  0067DC                     l10534:
 13961                           
 13962                           ; BSR set to: 2
 13963                           ;main.c: 976: }
 13964                           ;main.c: 979: p = strtok((0), ",");
 13965  0067DC  D9CD               	call	PL4	;call to abstracted procedure
 13966  0067DE  EC84  F012         	call	_strtok	;wreg free
 13967  0067E2  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1200
 13968  0067E6  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1200+1
 13969                           
 13970                           ; BSR set to: 0
 13971                           ;main.c: 980: if ((0) != p) {
 13972  0067EA  0102               	movlb	2	; () banked
 13973  0067EC  51BC               	movf	(doModeVerbose@p_1200+1)& (0+255),w,b
 13974  0067EE  11BB               	iorwf	doModeVerbose@p_1200& (0+255),w,b
 13975  0067F0  E00A               	bz	l10540
 13976                           
 13977                           ; BSR set to: 2
 13978                           ;main.c: 981: mask_nodeid = atoi(p);
 13979  0067F2  C2BB  F066         	movff	doModeVerbose@p_1200,?_atoi
 13980  0067F6  C2BC  F067         	movff	doModeVerbose@p_1200+1,?_atoi+1
 13981  0067FA  ECB4  F019         	call	_atoi	;wreg free
 13982  0067FE  5166               	movf	?_atoi& (0+255),w,b
 13983  006800  0102               	movlb	2	; () banked
 13984  006802  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 13985                           
 13986                           ;main.c: 982: }
 13987  006804  D008               	goto	l10544
 13988  006806                     l10540:
 13989                           
 13990                           ; BSR set to: 2
 13991                           ;main.c: 983: else {
 13992                           ;main.c: 984: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 13993  006806  0E75               	movlw	high STR_106
 13994  006808  0100               	movlb	0	; () banked
 13995  00680A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13996  00680C  0E6F               	movlw	low STR_106
 13997  00680E  6F61               	movwf	?_putsUSART& (0+255),b
 13998  006810  EC9B  F00E         	call	_putsUSART	;wreg free
 13999  006814  D1A6               	goto	l524
 14000  006816                     l10544:
 14001                           
 14002                           ; BSR set to: 2
 14003                           ;main.c: 986: }
 14004                           ;main.c: 988: uint32_t id = ((uint32_t) mask_priority << 26) |
 14005                           ;main.c: 989: ((uint32_t) mask_class << 16) |
 14006                           ;main.c: 990: ((uint32_t) mask_type << 8) |
 14007                           ;main.c: 991: mask_nodeid;
 14008  006816  C292  F1B2         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14009  00681A  DA28               	call	PL44	;call to abstracted procedure
 14010  00681C  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14011  00681E  0101               	movlb	1	; () banked
 14012  006820  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 14013  006822  0102               	movlb	2	; () banked
 14014  006824  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14015  006826  DA3B               	call	PL60	;call to abstracted procedure
 14016  006828  C291  F1BA         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14017  00682C  D9C3               	call	PL10	;call to abstracted procedure
 14018  00682E  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14019  006830  0101               	movlb	1	; () banked
 14020  006832  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14021  006834  0102               	movlb	2	; () banked
 14022  006836  6FA3               	movwf	doModeVerbose@id_1212& (0+255),b
 14023  006838  0101               	movlb	1	; () banked
 14024  00683A  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14025  00683C  0102               	movlb	2	; () banked
 14026  00683E  6FA4               	movwf	(doModeVerbose@id_1212+1)& (0+255),b
 14027  006840  0101               	movlb	1	; () banked
 14028  006842  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14029  006844  0102               	movlb	2	; () banked
 14030  006846  6FA5               	movwf	(doModeVerbose@id_1212+2)& (0+255),b
 14031  006848  0101               	movlb	1	; () banked
 14032  00684A  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14033  00684C  0102               	movlb	2	; () banked
 14034  00684E  6FA6               	movwf	(doModeVerbose@id_1212+3)& (0+255),b
 14035                           
 14036                           ; BSR set to: 2
 14037                           ;main.c: 994: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14038  006850  0E80               	movlw	128
 14039  006852  EC03  F00C         	call	_ECANSetOperationMode
 14040                           
 14041                           ; BSR set to: 0
 14042                           ;main.c: 996: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14043                           ;main.c: 997: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14044  006856  0102               	movlb	2	; () banked
 14045  006858  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 14046  00685A  E008               	bz	l10552
 14047                           
 14048                           ; BSR set to: 2
 14049  00685C  0E0F               	movlw	15	;volatile
 14050  00685E  0100               	movlb	0	; () banked
 14051  006860  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14052  006862  0E18               	movlw	24	;volatile
 14053  006864  DA10               	call	PL54	;call to abstracted procedure
 14054  006866  ECBA  F01A         	call	__CANIDToRegs	;wreg free
 14055  00686A  D16C               	goto	l10634
 14056  00686C                     l10552:
 14057                           
 14058                           ; BSR set to: 2
 14059  00686C  0E0F               	movlw	15	;volatile
 14060  00686E  0100               	movlb	0	; () banked
 14061  006870  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14062  006872  0E1C               	movlw	28	;volatile
 14063  006874  DA08               	call	PL54	;call to abstracted procedure
 14064  006876  ECBA  F01A         	call	__CANIDToRegs	;wreg free
 14065  00687A  D164               	goto	l10634
 14066  00687C                     l10554:
 14067                           
 14068                           ; BSR set to: 1
 14069                           ;main.c: 1005: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14070  00687C  0E01               	movlw	high _cmdbuf
 14071  00687E  0100               	movlb	0	; () banked
 14072  006880  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14073  006882  0E04               	movlw	low _cmdbuf
 14074  006884  6F6D               	movwf	?_stristr& (0+255),b
 14075  006886  0E7C               	movlw	high STR_107
 14076  006888  6F70               	movwf	(?_stristr+3)& (0+255),b
 14077  00688A  0E9D               	movlw	low STR_107
 14078  00688C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14079  00688E  EC39  F011         	call	_stristr	;wreg free
 14080  006892  D968               	call	PL2	;call to abstracted procedure
 14081  006894  E104               	bnz	u12945
 14082  006896  0100               	movlb	0	; () banked
 14083  006898  516D               	movf	?_stristr& (0+255),w,b
 14084  00689A  0101               	movlb	1	; () banked
 14085  00689C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14086  00689E                     u12945:
 14087  00689E  E001 D13F          	bnz	l10628
 14088                           
 14089                           ; BSR set to: 1
 14090                           ;main.c: 1008: strcpy(cmdbuf, cmdbuf + 4);
 14091  0068A2  0E01               	movlw	high _cmdbuf
 14092  0068A4  0100               	movlb	0	; () banked
 14093  0068A6  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14094  0068A8  0E04               	movlw	low _cmdbuf
 14095  0068AA  6F60               	movwf	?_strcpy& (0+255),b
 14096  0068AC  0E08               	movlw	low (_cmdbuf+4)
 14097  0068AE  0101               	movlb	1	; () banked
 14098  0068B0  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14099  0068B2  0E01               	movlw	high (_cmdbuf+4)
 14100  0068B4  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14101  0068B6  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14102  0068BA  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14103  0068BE  EC7F  F00C         	call	_strcpy	;wreg free
 14104                           
 14105                           ;main.c: 1011: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14106  0068C2  0E01               	movlw	high _cmdbuf
 14107  0068C4  0100               	movlb	0	; () banked
 14108  0068C6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14109  0068C8  0E04               	movlw	low _cmdbuf
 14110  0068CA  6F6D               	movwf	?_stristr& (0+255),b
 14111  0068CC  0E7C               	movlw	high STR_108
 14112  0068CE  6F70               	movwf	(?_stristr+3)& (0+255),b
 14113  0068D0  0EDC               	movlw	low STR_108
 14114  0068D2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14115  0068D4  EC39  F011         	call	_stristr	;wreg free
 14116  0068D8  D945               	call	PL2	;call to abstracted procedure
 14117  0068DA  E104               	bnz	u12955
 14118  0068DC  0100               	movlb	0	; () banked
 14119  0068DE  516D               	movf	?_stristr& (0+255),w,b
 14120  0068E0  0101               	movlb	1	; () banked
 14121  0068E2  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14122  0068E4                     u12955:
 14123  0068E4  E111               	bnz	l10566
 14124                           
 14125                           ; BSR set to: 1
 14126                           ;main.c: 1012: bHex = 1;
 14127  0068E6  0E01               	movlw	1
 14128  0068E8  6F00               	movwf	_bHex& (0+255),b
 14129                           
 14130                           ; BSR set to: 1
 14131                           ;main.c: 1013: writeEEPROM(0x06, 1);
 14132  0068EA  0100               	movlb	0	; () banked
 14133  0068EC  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14134  0068EE  0E06               	movlw	6
 14135  0068F0  6F60               	movwf	?_writeEEPROM& (0+255),b
 14136  0068F2  0E01               	movlw	1
 14137  0068F4  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14138  0068F6  EC3E  F00C         	call	_writeEEPROM	;wreg free
 14139                           
 14140                           ; BSR set to: 0
 14141                           ;main.c: 1014: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14142  0068FA  0E74               	movlw	high STR_109
 14143  0068FC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14144  0068FE  0E03               	movlw	low STR_109
 14145  006900  6F61               	movwf	?_putsUSART& (0+255),b
 14146  006902  EC9B  F00E         	call	_putsUSART	;wreg free
 14147                           
 14148                           ;main.c: 1015: }
 14149  006906  D11E               	goto	l10634
 14150  006908                     l10566:
 14151                           
 14152                           ; BSR set to: 1
 14153                           ;main.c: 1017: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14154  006908  0E01               	movlw	high _cmdbuf
 14155  00690A  0100               	movlb	0	; () banked
 14156  00690C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14157  00690E  0E04               	movlw	low _cmdbuf
 14158  006910  6F6D               	movwf	?_stristr& (0+255),b
 14159  006912  0E7C               	movlw	high STR_110
 14160  006914  6F70               	movwf	(?_stristr+3)& (0+255),b
 14161  006916  0E05               	movlw	low STR_110
 14162  006918  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14163  00691A  EC39  F011         	call	_stristr	;wreg free
 14164  00691E  D922               	call	PL2	;call to abstracted procedure
 14165  006920  E104               	bnz	u12965
 14166  006922  0100               	movlb	0	; () banked
 14167  006924  516D               	movf	?_stristr& (0+255),w,b
 14168  006926  0101               	movlb	1	; () banked
 14169  006928  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14170  00692A                     u12965:
 14171  00692A  E110               	bnz	l10574
 14172                           
 14173                           ; BSR set to: 1
 14174                           ;main.c: 1018: bHex = 0;
 14175  00692C  6B00               	clrf	_bHex& (0+255),b
 14176                           
 14177                           ; BSR set to: 1
 14178                           ;main.c: 1019: writeEEPROM(0x06, 0);
 14179  00692E  0100               	movlb	0	; () banked
 14180  006930  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14181  006932  0E06               	movlw	6
 14182  006934  6F60               	movwf	?_writeEEPROM& (0+255),b
 14183  006936  0E00               	movlw	0
 14184  006938  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 14185  00693A  EC3E  F00C         	call	_writeEEPROM	;wreg free
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;main.c: 1020: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14189  00693E  0E74               	movlw	high STR_111
 14190  006940  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14191  006942  0ED2               	movlw	low STR_111
 14192  006944  6F61               	movwf	?_putsUSART& (0+255),b
 14193  006946  EC9B  F00E         	call	_putsUSART	;wreg free
 14194                           
 14195                           ;main.c: 1021: }
 14196  00694A  D0FC               	goto	l10634
 14197  00694C                     l10574:
 14198                           
 14199                           ; BSR set to: 1
 14200                           ;main.c: 1022: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14201  00694C  0E01               	movlw	high _cmdbuf
 14202  00694E  0100               	movlb	0	; () banked
 14203  006950  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14204  006952  0E04               	movlw	low _cmdbuf
 14205  006954  6F6D               	movwf	?_stristr& (0+255),b
 14206  006956  0E7B               	movlw	high STR_112
 14207  006958  6F70               	movwf	(?_stristr+3)& (0+255),b
 14208  00695A  0E86               	movlw	low STR_112
 14209  00695C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14210  00695E  EC39  F011         	call	_stristr	;wreg free
 14211  006962  516E               	movf	(?_stristr+1)& (0+255),w,b
 14212  006964  116D               	iorwf	?_stristr& (0+255),w,b
 14213  006966  E027               	bz	l10586
 14214                           
 14215                           ; BSR set to: 0
 14216                           ;main.c: 1023: strcpy(cmdbuf, cmdbuf + 10);
 14217  006968  0E01               	movlw	high _cmdbuf
 14218  00696A  0100               	movlb	0	; () banked
 14219  00696C  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14220  00696E  0E04               	movlw	low _cmdbuf
 14221  006970  6F60               	movwf	?_strcpy& (0+255),b
 14222  006972  0E0E               	movlw	low (_cmdbuf+10)
 14223  006974  0101               	movlb	1	; () banked
 14224  006976  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14225  006978  0E01               	movlw	high (_cmdbuf+10)
 14226  00697A  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14227  00697C  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14228  006980  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14229  006984  EC7F  F00C         	call	_strcpy	;wreg free
 14230                           
 14231                           ;main.c: 1024: rwtimeout = atoi(cmdbuf);
 14232  006988  0E01               	movlw	high _cmdbuf
 14233  00698A  0100               	movlb	0	; () banked
 14234  00698C  6F67               	movwf	(?_atoi+1)& (0+255),b
 14235  00698E  0E04               	movlw	low _cmdbuf
 14236  006990  6F66               	movwf	?_atoi& (0+255),b
 14237  006992  ECB4  F019         	call	_atoi	;wreg free
 14238  006996  5166               	movf	?_atoi& (0+255),w,b
 14239  006998  0101               	movlb	1	; () banked
 14240  00699A  6F03               	movwf	_rwtimeout& (0+255),b
 14241                           
 14242                           ; BSR set to: 1
 14243                           ;main.c: 1025: if (rwtimeout < 10u) {
 14244  00699C  0E0A               	movlw	10
 14245  00699E  6103               	cpfslt	_rwtimeout& (0+255),b
 14246  0069A0  D001               	goto	l10584
 14247                           
 14248                           ; BSR set to: 1
 14249                           ;main.c: 1026: rwtimeout = 10u;
 14250  0069A2  6F03               	movwf	_rwtimeout& (0+255),b
 14251  0069A4                     l10584:
 14252                           
 14253                           ; BSR set to: 1
 14254                           ;main.c: 1027: }
 14255                           ;main.c: 1028: writeEEPROM(0x09, rwtimeout);
 14256  0069A4  0100               	movlb	0	; () banked
 14257  0069A6  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14258  0069A8  0E09               	movlw	9
 14259  0069AA  6F60               	movwf	?_writeEEPROM& (0+255),b
 14260  0069AC  C103  F062         	movff	_rwtimeout,?_writeEEPROM+2
 14261  0069B0  EC3E  F00C         	call	_writeEEPROM	;wreg free
 14262                           
 14263                           ;main.c: 1029: }
 14264  0069B4  D0C7               	goto	l10634
 14265  0069B6                     l10586:
 14266                           
 14267                           ; BSR set to: 0
 14268                           ;main.c: 1030: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14269  0069B6  0E01               	movlw	high _cmdbuf
 14270  0069B8  0100               	movlb	0	; () banked
 14271  0069BA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14272  0069BC  0E04               	movlw	low _cmdbuf
 14273  0069BE  6F6D               	movwf	?_stristr& (0+255),b
 14274  0069C0  0E7B               	movlw	high STR_113
 14275  0069C2  6F70               	movwf	(?_stristr+3)& (0+255),b
 14276  0069C4  0EBA               	movlw	low STR_113
 14277  0069C6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14278  0069C8  EC39  F011         	call	_stristr	;wreg free
 14279  0069CC  516E               	movf	(?_stristr+1)& (0+255),w,b
 14280  0069CE  116D               	iorwf	?_stristr& (0+255),w,b
 14281  0069D0  E005               	bz	l10590
 14282                           
 14283                           ; BSR set to: 0
 14284                           ;main.c: 1031: strcpy(cmdbuf, cmdbuf + 8);
 14285  0069D2  0E01               	movlw	high _cmdbuf
 14286  0069D4  D914               	call	PL12	;call to abstracted procedure
 14287  0069D6  EC7F  F00C         	call	_strcpy	;wreg free
 14288                           
 14289                           ;main.c: 1032: }
 14290  0069DA  D0B4               	goto	l10634
 14291  0069DC                     l10590:
 14292                           
 14293                           ; BSR set to: 0
 14294                           ;main.c: 1033: else if (0 != stristr(cmdbuf, "MODE ")) {
 14295  0069DC  0E01               	movlw	high _cmdbuf
 14296  0069DE  0100               	movlb	0	; () banked
 14297  0069E0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14298  0069E2  0E04               	movlw	low _cmdbuf
 14299  0069E4  6F6D               	movwf	?_stristr& (0+255),b
 14300  0069E6  0E7C               	movlw	high STR_114
 14301  0069E8  6F70               	movwf	(?_stristr+3)& (0+255),b
 14302  0069EA  0E85               	movlw	low STR_114
 14303  0069EC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14304  0069EE  EC39  F011         	call	_stristr	;wreg free
 14305  0069F2  516E               	movf	(?_stristr+1)& (0+255),w,b
 14306  0069F4  116D               	iorwf	?_stristr& (0+255),w,b
 14307  0069F6  E05C               	bz	l10618
 14308                           
 14309                           ; BSR set to: 0
 14310                           ;main.c: 1034: strcpy(cmdbuf, cmdbuf + 5);
 14311  0069F8  D8CE               	call	PL8	;call to abstracted procedure
 14312  0069FA  EC7F  F00C         	call	_strcpy	;wreg free
 14313                           
 14314                           ;main.c: 1035: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14315  0069FE  0E01               	movlw	high _cmdbuf
 14316  006A00  0100               	movlb	0	; () banked
 14317  006A02  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14318  006A04  0E04               	movlw	low _cmdbuf
 14319  006A06  6F6D               	movwf	?_stristr& (0+255),b
 14320  006A08  0E7B               	movlw	high STR_115
 14321  006A0A  6F70               	movwf	(?_stristr+3)& (0+255),b
 14322  006A0C  0EFD               	movlw	low STR_115
 14323  006A0E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14324  006A10  EC39  F011         	call	_stristr	;wreg free
 14325  006A14  516E               	movf	(?_stristr+1)& (0+255),w,b
 14326  006A16  116D               	iorwf	?_stristr& (0+255),w,b
 14327  006A18  E00F               	bz	l10602
 14328                           
 14329                           ; BSR set to: 0
 14330                           ;main.c: 1036: mode = 0;
 14331  006A1A  6BF1               	clrf	_mode& (0+255),b
 14332                           
 14333                           ; BSR set to: 0
 14334                           ;main.c: 1037: writeEEPROM(0x03, 0);
 14335  006A1C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14336  006A1E  0E03               	movlw	3
 14337  006A20  6F60               	movwf	?_writeEEPROM& (0+255),b
 14338  006A22  0E00               	movlw	0
 14339  006A24  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 14340  006A26  EC3E  F00C         	call	_writeEEPROM	;wreg free
 14341                           
 14342                           ; BSR set to: 0
 14343                           ;main.c: 1038: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14344  006A2A  0E78               	movlw	high STR_116
 14345  006A2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14346  006A2E  0E47               	movlw	low STR_116
 14347  006A30  6F61               	movwf	?_putsUSART& (0+255),b
 14348  006A32  EC9B  F00E         	call	_putsUSART	;wreg free
 14349                           
 14350                           ;main.c: 1039: }
 14351  006A36  D086               	goto	l10634
 14352  006A38                     l10602:
 14353                           
 14354                           ; BSR set to: 0
 14355                           ;main.c: 1040: else if (0 != stristr(cmdbuf, "VSCP")) {
 14356  006A38  0E01               	movlw	high _cmdbuf
 14357  006A3A  0100               	movlb	0	; () banked
 14358  006A3C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14359  006A3E  0E04               	movlw	low _cmdbuf
 14360  006A40  6F6D               	movwf	?_stristr& (0+255),b
 14361  006A42  0E7C               	movlw	high STR_117
 14362  006A44  6F70               	movwf	(?_stristr+3)& (0+255),b
 14363  006A46  0EC0               	movlw	low STR_117
 14364  006A48  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14365  006A4A  EC39  F011         	call	_stristr	;wreg free
 14366  006A4E  516E               	movf	(?_stristr+1)& (0+255),w,b
 14367  006A50  116D               	iorwf	?_stristr& (0+255),w,b
 14368  006A52  E010               	bz	l10610
 14369                           
 14370                           ; BSR set to: 0
 14371                           ;main.c: 1041: mode = 1;
 14372  006A54  0E01               	movlw	1
 14373  006A56  6FF1               	movwf	_mode& (0+255),b
 14374                           
 14375                           ; BSR set to: 0
 14376                           ;main.c: 1042: writeEEPROM(0x03, 1);
 14377  006A58  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14378  006A5A  0E03               	movlw	3
 14379  006A5C  6F60               	movwf	?_writeEEPROM& (0+255),b
 14380  006A5E  0E01               	movlw	1
 14381  006A60  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14382  006A62  EC3E  F00C         	call	_writeEEPROM	;wreg free
 14383                           
 14384                           ; BSR set to: 0
 14385                           ;main.c: 1043: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14386  006A66  0E77               	movlw	high STR_118
 14387  006A68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14388  006A6A  0ECC               	movlw	low STR_118
 14389  006A6C  6F61               	movwf	?_putsUSART& (0+255),b
 14390  006A6E  EC9B  F00E         	call	_putsUSART	;wreg free
 14391                           
 14392                           ;main.c: 1044: }
 14393  006A72  D068               	goto	l10634
 14394  006A74                     l10610:
 14395                           
 14396                           ; BSR set to: 0
 14397                           ;main.c: 1045: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14398  006A74  0E01               	movlw	high _cmdbuf
 14399  006A76  0100               	movlb	0	; () banked
 14400  006A78  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14401  006A7A  0E04               	movlw	low _cmdbuf
 14402  006A7C  6F6D               	movwf	?_stristr& (0+255),b
 14403  006A7E  0E7C               	movlw	high STR_119
 14404  006A80  6F70               	movwf	(?_stristr+3)& (0+255),b
 14405  006A82  0E97               	movlw	low STR_119
 14406  006A84  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14407  006A86  EC39  F011         	call	_stristr	;wreg free
 14408  006A8A  516E               	movf	(?_stristr+1)& (0+255),w,b
 14409  006A8C  116D               	iorwf	?_stristr& (0+255),w,b
 14410  006A8E  E05A               	bz	l10634
 14411                           
 14412                           ; BSR set to: 0
 14413                           ;main.c: 1046: mode = 2;
 14414  006A90  0E02               	movlw	2
 14415  006A92  6FF1               	movwf	_mode& (0+255),b
 14416                           
 14417                           ; BSR set to: 0
 14418                           ;main.c: 1047: writeEEPROM(0x03, 2);
 14419  006A94  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14420  006A96  0E03               	movlw	3
 14421  006A98  6F60               	movwf	?_writeEEPROM& (0+255),b
 14422  006A9A  0E02               	movlw	2
 14423  006A9C  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14424  006A9E  EC3E  F00C         	call	_writeEEPROM	;wreg free
 14425                           
 14426                           ; BSR set to: 0
 14427                           ;main.c: 1048: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14428  006AA2  0E78               	movlw	high STR_120
 14429  006AA4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14430  006AA6  0EB4               	movlw	low STR_120
 14431  006AA8  6F61               	movwf	?_putsUSART& (0+255),b
 14432  006AAA  EC9B  F00E         	call	_putsUSART	;wreg free
 14433  006AAE  D04A               	goto	l10634
 14434  006AB0                     l10618:
 14435                           
 14436                           ; BSR set to: 0
 14437                           ;main.c: 1052: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14438  006AB0  0E01               	movlw	high _cmdbuf
 14439  006AB2  0100               	movlb	0	; () banked
 14440  006AB4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14441  006AB6  0E04               	movlw	low _cmdbuf
 14442  006AB8  6F6D               	movwf	?_stristr& (0+255),b
 14443  006ABA  0E7B               	movlw	high STR_121
 14444  006ABC  6F70               	movwf	(?_stristr+3)& (0+255),b
 14445  006ABE  0EED               	movlw	low STR_121
 14446  006AC0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14447  006AC2  EC39  F011         	call	_stristr	;wreg free
 14448  006AC6  516E               	movf	(?_stristr+1)& (0+255),w,b
 14449  006AC8  116D               	iorwf	?_stristr& (0+255),w,b
 14450  006ACA  E011               	bz	l10622
 14451                           
 14452                           ; BSR set to: 0
 14453                           ;main.c: 1053: strcpy(cmdbuf, cmdbuf + 7);
 14454  006ACC  0E01               	movlw	high _cmdbuf
 14455  006ACE  0100               	movlb	0	; () banked
 14456  006AD0  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14457  006AD2  0E04               	movlw	low _cmdbuf
 14458  006AD4  6F60               	movwf	?_strcpy& (0+255),b
 14459  006AD6  0E0B               	movlw	low (_cmdbuf+7)
 14460  006AD8  0101               	movlb	1	; () banked
 14461  006ADA  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14462  006ADC  0E01               	movlw	high (_cmdbuf+7)
 14463  006ADE  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14464  006AE0  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14465  006AE4  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14466  006AE8  EC7F  F00C         	call	_strcpy	;wreg free
 14467                           
 14468                           ;main.c: 1054: }
 14469  006AEC  D02B               	goto	l10634
 14470  006AEE                     l10622:
 14471                           
 14472                           ; BSR set to: 0
 14473                           ;main.c: 1056: else if (0 != stristr(cmdbuf, "MASK ")) {
 14474  006AEE  0E01               	movlw	high _cmdbuf
 14475  006AF0  0100               	movlb	0	; () banked
 14476  006AF2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14477  006AF4  0E04               	movlw	low _cmdbuf
 14478  006AF6  6F6D               	movwf	?_stristr& (0+255),b
 14479  006AF8  0E7C               	movlw	high STR_122
 14480  006AFA  6F70               	movwf	(?_stristr+3)& (0+255),b
 14481  006AFC  0E8B               	movlw	low STR_122
 14482  006AFE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14483  006B00  EC39  F011         	call	_stristr	;wreg free
 14484  006B04  516E               	movf	(?_stristr+1)& (0+255),w,b
 14485  006B06  116D               	iorwf	?_stristr& (0+255),w,b
 14486  006B08  E004               	bz	l10626
 14487                           
 14488                           ; BSR set to: 0
 14489                           ;main.c: 1057: strcpy(cmdbuf, cmdbuf + 5);
 14490  006B0A  D845               	call	PL8	;call to abstracted procedure
 14491  006B0C  EC7F  F00C         	call	_strcpy	;wreg free
 14492                           
 14493                           ;main.c: 1058: }
 14494  006B10  D019               	goto	l10634
 14495  006B12                     l10626:
 14496                           
 14497                           ; BSR set to: 0
 14498                           ;main.c: 1059: else {
 14499                           ;main.c: 1060: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14500  006B12  0E77               	movlw	high STR_123
 14501  006B14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14502  006B16  0E69               	movlw	low STR_123
 14503  006B18  6F61               	movwf	?_putsUSART& (0+255),b
 14504  006B1A  EC9B  F00E         	call	_putsUSART	;wreg free
 14505  006B1E  D012               	goto	l10634
 14506  006B20                     l10628:
 14507                           
 14508                           ; BSR set to: 1
 14509                           ;main.c: 1064: else {
 14510                           ;main.c: 1065: if ( 0x0d == cmdbuf[ 0 ] ) {
 14511  006B20  5104               	movf	_cmdbuf& (0+255),w,b
 14512  006B22  0A0D               	xorlw	13
 14513  006B24  E108               	bnz	l10632
 14514                           
 14515                           ; BSR set to: 1
 14516                           ;main.c: 1066: putsUSART((char *) "+OK\r\n");
 14517  006B26  0E7C               	movlw	high STR_9
 14518  006B28  0100               	movlb	0	; () banked
 14519  006B2A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14520  006B2C  0E7F               	movlw	low STR_9
 14521  006B2E  6F61               	movwf	?_putsUSART& (0+255),b
 14522  006B30  EC9B  F00E         	call	_putsUSART	;wreg free
 14523                           
 14524                           ;main.c: 1067: }
 14525  006B34  D007               	goto	l10634
 14526  006B36                     l10632:
 14527                           
 14528                           ; BSR set to: 1
 14529                           ;main.c: 1068: else {
 14530                           ;main.c: 1069: putsUSART((char *) "-ERROR - Unknown command\r\n");
 14531  006B36  0E78               	movlw	high STR_125
 14532  006B38  0100               	movlb	0	; () banked
 14533  006B3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14534  006B3C  0E7E               	movlw	low STR_125
 14535  006B3E  6F61               	movwf	?_putsUSART& (0+255),b
 14536  006B40  EC9B  F00E         	call	_putsUSART	;wreg free
 14537  006B44                     l10634:
 14538                           
 14539                           ;main.c: 1070: }
 14540                           ;main.c: 1071: }
 14541                           ;main.c: 1073: memset(cmdbuf, 0, sizeof ( cmdbuf));
 14542  006B44  0E01               	movlw	high _cmdbuf
 14543  006B46  0100               	movlb	0	; () banked
 14544  006B48  6F61               	movwf	(?_memset+1)& (0+255),b
 14545  006B4A  0E04               	movlw	low _cmdbuf
 14546  006B4C  6F60               	movwf	?_memset& (0+255),b
 14547  006B4E  6B63               	clrf	(?_memset+3)& (0+255),b
 14548  006B50  6B62               	clrf	(?_memset+2)& (0+255),b
 14549  006B52  6B65               	clrf	(?_memset+5)& (0+255),b
 14550  006B54  0E50               	movlw	80
 14551  006B56  6F64               	movwf	(?_memset+4)& (0+255),b
 14552  006B58  EC51  F00C         	call	_memset	;wreg free
 14553                           
 14554                           ; BSR set to: 0
 14555                           ;main.c: 1074: pos = 0;
 14556  006B5C  0101               	movlb	1	; () banked
 14557  006B5E  6B02               	clrf	_pos& (0+255),b
 14558  006B60                     l10638:
 14559                           
 14560                           ;main.c: 1075: }
 14561                           ;main.c: 1076: }
 14562                           ;main.c: 1079: (INTCONbits.GIE = 1);
 14563  006B60  8EF2               	bsf	intcon,7,c	;volatile
 14564  006B62                     l524:
 14565  006B62  0012               	return	
 14566  006B64                     __end_of_doModeVerbose:
 14567                           	opt stack 0
 14568  006B64                     PL2:
 14569                           	opt stack 19
 14570  006B64  0E04               	movlw	low _cmdbuf
 14571  006B66  0101               	movlb	1	; () banked
 14572  006B68  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14573  006B6A  0E01               	movlw	high _cmdbuf
 14574  006B6C  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14575  006B6E  0100               	movlb	0	; () banked
 14576  006B70  516E               	movf	(?_stristr+1)& (0+255),w,b
 14577  006B72  0101               	movlb	1	; () banked
 14578  006B74  19B3               	xorwf	(??_doModeVerbose+1)& (0+255),w,b
 14579  006B76  0012               	return	
 14580  006B78                     __end_ofPL2:
 14581                           	opt stack 0
 14582  006B78                     PL4:
 14583                           	opt stack 19
 14584  006B78  0100               	movlb	0	; () banked
 14585  006B7A  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14586  006B7C  6B6C               	clrf	?_strtok& (0+255),b
 14587  006B7E  0E7C               	movlw	high STR_30
 14588  006B80  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14589  006B82  0EF4               	movlw	low STR_30
 14590  006B84  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14591  006B86  0012               	return	
 14592  006B88                     __end_ofPL4:
 14593                           	opt stack 0
 14594  006B88                     PL6:
 14595                           	opt stack 19
 14596  006B88  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14597  006B8A  6B6C               	clrf	?_strtok& (0+255),b
 14598  006B8C  0E7C               	movlw	high STR_30
 14599  006B8E  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14600  006B90  0EF4               	movlw	low STR_30
 14601  006B92  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14602  006B94  0012               	return	
 14603  006B96                     __end_ofPL6:
 14604                           	opt stack 0
 14605  006B96                     PL8:
 14606                           	opt stack 19
 14607  006B96  0E01               	movlw	high _cmdbuf
 14608  006B98  0100               	movlb	0	; () banked
 14609  006B9A  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14610  006B9C  0E04               	movlw	low _cmdbuf
 14611  006B9E  6F60               	movwf	?_strcpy& (0+255),b
 14612  006BA0  0E09               	movlw	low (_cmdbuf+5)
 14613  006BA2  0101               	movlb	1	; () banked
 14614  006BA4  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14615  006BA6  0E01               	movlw	high (_cmdbuf+5)
 14616  006BA8  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14617  006BAA  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14618  006BAE  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14619  006BB2  0012               	return	
 14620  006BB4                     __end_ofPL8:
 14621                           	opt stack 0
 14622  006BB4                     PL10:
 14623                           	opt stack 19
 14624  006BB4  6BBB               	clrf	(??_doModeVerbose+9)& (0+255),b
 14625  006BB6  6BBC               	clrf	(??_doModeVerbose+10)& (0+255),b
 14626  006BB8  6BBD               	clrf	(??_doModeVerbose+11)& (0+255),b
 14627  006BBA  0E1A               	movlw	26
 14628  006BBC                     u12845:
 14629  006BBC  90D8               	bcf	status,0,c
 14630  006BBE  37BA               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 14631  006BC0  37BB               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 14632  006BC2  37BC               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 14633  006BC4  37BD               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 14634  006BC6  2EE8               	decfsz	wreg,f,c
 14635  006BC8  D7F9               	goto	u12845
 14636  006BCA  51B6               	movf	(??_doModeVerbose+4)& (0+255),w,b
 14637  006BCC  11BA               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 14638  006BCE  6FBE               	movwf	(??_doModeVerbose+12)& (0+255),b
 14639  006BD0  51B7               	movf	(??_doModeVerbose+5)& (0+255),w,b
 14640  006BD2  11BB               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 14641  006BD4  6FBF               	movwf	(??_doModeVerbose+13)& (0+255),b
 14642  006BD6  51B8               	movf	(??_doModeVerbose+6)& (0+255),w,b
 14643  006BD8  11BC               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 14644  006BDA  6FC0               	movwf	(??_doModeVerbose+14)& (0+255),b
 14645  006BDC  51B9               	movf	(??_doModeVerbose+7)& (0+255),w,b
 14646  006BDE  11BD               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 14647  006BE0  6FC1               	movwf	(??_doModeVerbose+15)& (0+255),b
 14648  006BE2  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14649  006BE4  11BE               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 14650  006BE6  6FC2               	movwf	(??_doModeVerbose+16)& (0+255),b
 14651  006BE8  51B3               	movf	(??_doModeVerbose+1)& (0+255),w,b
 14652  006BEA  11BF               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 14653  006BEC  6FC3               	movwf	(??_doModeVerbose+17)& (0+255),b
 14654  006BEE  51B4               	movf	(??_doModeVerbose+2)& (0+255),w,b
 14655  006BF0  11C0               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 14656  006BF2  6FC4               	movwf	(??_doModeVerbose+18)& (0+255),b
 14657  006BF4  51B5               	movf	(??_doModeVerbose+3)& (0+255),w,b
 14658  006BF6  11C1               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 14659  006BF8  6FC5               	movwf	(??_doModeVerbose+19)& (0+255),b
 14660  006BFA  0102               	movlb	2	; () banked
 14661  006BFC  0012               	return	
 14662  006BFE                     __end_ofPL10:
 14663                           	opt stack 0
 14664  006BFE                     PL12:
 14665                           	opt stack 19
 14666  006BFE  0100               	movlb	0	; () banked
 14667  006C00  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14668  006C02  0E04               	movlw	low _cmdbuf
 14669  006C04  6F60               	movwf	?_strcpy& (0+255),b
 14670  006C06  0E0C               	movlw	low (_cmdbuf+8)
 14671  006C08  0101               	movlb	1	; () banked
 14672  006C0A  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14673  006C0C  0E01               	movlw	high (_cmdbuf+8)
 14674  006C0E  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14675  006C10  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14676  006C14  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14677  006C18  0012               	return	
 14678  006C1A                     __end_ofPL12:
 14679                           	opt stack 0
 14680  006C1A                     PL28:
 14681                           	opt stack 19
 14682  006C1A  0100               	movlb	0	; () banked
 14683  006C1C  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14684  006C1E  6B6C               	clrf	?_strtok& (0+255),b
 14685  006C20  0E7C               	movlw	high (STR_249+5)
 14686  006C22  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14687  006C24  0E2A               	movlw	low (STR_249+5)
 14688  006C26  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14689  006C28  0012               	return	
 14690  006C2A                     __end_ofPL28:
 14691                           	opt stack 0
 14692  006C2A                     PL30:
 14693                           	opt stack 19
 14694  006C2A  0E01               	movlw	high _cmdbuf
 14695  006C2C  0100               	movlb	0	; () banked
 14696  006C2E  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14697  006C30  0E04               	movlw	low _cmdbuf
 14698  006C32  6F6C               	movwf	?_strtok& (0+255),b
 14699  006C34  0E7C               	movlw	high STR_30
 14700  006C36  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14701  006C38  0EF4               	movlw	low STR_30
 14702  006C3A  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14703  006C3C  0012               	return	
 14704  006C3E                     __end_ofPL30:
 14705                           	opt stack 0
 14706  006C3E                     PL36:
 14707                           	opt stack 19
 14708  006C3E  0100               	movlb	0	; () banked
 14709  006C40  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14710  006C42  0E04               	movlw	low _cmdbuf
 14711  006C44  6F6C               	movwf	?_strtok& (0+255),b
 14712  006C46  0E7C               	movlw	high (STR_249+5)
 14713  006C48  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14714  006C4A  0E2A               	movlw	low (STR_249+5)
 14715  006C4C  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14716  006C4E  0012               	return	
 14717  006C50                     __end_ofPL36:
 14718                           	opt stack 0
 14719  006C50                     PL40:
 14720                           	opt stack 19
 14721  006C50  0102               	movlb	2	; () banked
 14722  006C52  51B0               	movf	doModeVerbose@i_1103& (0+255),w,b
 14723  006C54  C2AE  F1B2         	movff	doModeVerbose@reg,??_doModeVerbose
 14724  006C58  0101               	movlb	1	; () banked
 14725  006C5A  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14726  006C5C  27B2               	addwf	??_doModeVerbose& (0+255),f,b
 14727  006C5E  0E00               	movlw	0
 14728  006C60  23B3               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 14729  006C62  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14730  006C64  0100               	movlb	0	; () banked
 14731  006C66  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 14732  006C68  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14733  006C6A  0012               	return	
 14734  006C6C                     __end_ofPL40:
 14735                           	opt stack 0
 14736  006C6C                     PL44:
 14737                           	opt stack 19
 14738  006C6C  0101               	movlb	1	; () banked
 14739  006C6E  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14740  006C70  6BB4               	clrf	(??_doModeVerbose+2)& (0+255),b
 14741  006C72  6BB5               	clrf	(??_doModeVerbose+3)& (0+255),b
 14742  006C74  C1B4  F1B5         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 14743  006C78  C1B3  F1B4         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 14744  006C7C  C1B2  F1B3         	movff	??_doModeVerbose,??_doModeVerbose+1
 14745  006C80  6BB2               	clrf	??_doModeVerbose& (0+255),b
 14746  006C82  0102               	movlb	2	; () banked
 14747  006C84  0012               	return	
 14748  006C86                     __end_ofPL44:
 14749                           	opt stack 0
 14750  006C86                     PL54:
 14751                           	opt stack 19
 14752  006C86  6F60               	movwf	?__CANIDToRegs& (0+255),b
 14753  006C88  C2A3  F062         	movff	doModeVerbose@id_1212,?__CANIDToRegs+2
 14754  006C8C  C2A4  F063         	movff	doModeVerbose@id_1212+1,?__CANIDToRegs+3
 14755  006C90  C2A5  F064         	movff	doModeVerbose@id_1212+2,?__CANIDToRegs+4
 14756  006C94  C2A6  F065         	movff	doModeVerbose@id_1212+3,?__CANIDToRegs+5
 14757  006C98  0E01               	movlw	1
 14758  006C9A  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 14759  006C9C  0C01               	retlw	1
 14760  006C9E                     __end_ofPL54:
 14761                           	opt stack 0
 14762  006C9E                     PL60:
 14763                           	opt stack 19
 14764  006C9E  0101               	movlb	1	; () banked
 14765  006CA0  6FB7               	movwf	(??_doModeVerbose+5)& (0+255),b
 14766  006CA2  6BB8               	clrf	(??_doModeVerbose+6)& (0+255),b
 14767  006CA4  6BB9               	clrf	(??_doModeVerbose+7)& (0+255),b
 14768  006CA6  C1B7  F1B9         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 14769  006CAA  C1B6  F1B8         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 14770  006CAE  6BB7               	clrf	(??_doModeVerbose+5)& (0+255),b
 14771  006CB0  6BB6               	clrf	(??_doModeVerbose+4)& (0+255),b
 14772  006CB2  0012               	return	
 14773  006CB4                     __end_ofPL60:
 14774                           	opt stack 0
 14775                           tblptru	equ	0xFF8
 14776                           tblptrh	equ	0xFF7
 14777                           tblptrl	equ	0xFF6
 14778                           tablat	equ	0xFF5
 14779                           prodh	equ	0xFF4
 14780                           prodl	equ	0xFF3
 14781                           intcon	equ	0xFF2
 14782                           indf0	equ	0xFEF
 14783                           postinc0	equ	0xFEE
 14784                           fsr0h	equ	0xFEA
 14785                           fsr0l	equ	0xFE9
 14786                           wreg	equ	0xFE8
 14787                           indf1	equ	0xFE7
 14788                           postinc1	equ	0xFE6
 14789                           postdec1	equ	0xFE5
 14790                           fsr1h	equ	0xFE2
 14791                           fsr1l	equ	0xFE1
 14792                           indf2	equ	0xFDF
 14793                           postinc2	equ	0xFDE
 14794                           postdec2	equ	0xFDD
 14795                           plusw2	equ	0xFDB
 14796                           fsr2h	equ	0xFDA
 14797                           fsr2l	equ	0xFD9
 14798                           status	equ	0xFD8
 14799                           
 14800 ;; *************** function _setFilter *****************
 14801 ;; Defined at:
 14802 ;;		line 2771 in file "main.c"
 14803 ;; Parameters:    Size  Location     Type
 14804 ;;  filter          1    wreg     unsigned char 
 14805 ;;  val             4    0[BANK0 ] unsigned long 
 14806 ;; Auto vars:     Size  Location     Type
 14807 ;;  filter          1   10[BANK0 ] unsigned char 
 14808 ;;  eidl            1   14[BANK0 ] unsigned char 
 14809 ;;  eidh            1   13[BANK0 ] unsigned char 
 14810 ;;  sidl            1   12[BANK0 ] unsigned char 
 14811 ;;  sidh            1   11[BANK0 ] unsigned char 
 14812 ;; Return value:  Size  Location     Type
 14813 ;;		None               void
 14814 ;; Registers used:
 14815 ;;		wreg, status,2, status,0
 14816 ;; Tracked objects:
 14817 ;;		On entry : F/2
 14818 ;;		On exit  : F/0
 14819 ;;		Unchanged: 0/0
 14820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14821 ;;      Params:         0       4       0       0       0       0       0
 14822 ;;      Locals:         0       5       0       0       0       0       0
 14823 ;;      Temps:          0       6       0       0       0       0       0
 14824 ;;      Totals:         0      15       0       0       0       0       0
 14825 ;;Total ram usage:       15 bytes
 14826 ;; Hardware stack levels used:    1
 14827 ;; Hardware stack levels required when called:    3
 14828 ;; This function calls:
 14829 ;;		Nothing
 14830 ;; This function is called by:
 14831 ;;		_doModeVerbose
 14832 ;; This function uses a non-reentrant model
 14833 ;;
 14834                           
 14835                           	psect	text23
 14836  0044E6                     __ptext23:
 14837                           	opt stack 0
 14838  0044E6                     _setFilter:
 14839                           	opt stack 25
 14840                           
 14841                           ;incstack = 0
 14842                           ;incstack = 0
 14843                           ;setFilter@filter stored from wreg
 14844  0044E6  CFE8 F06A          	movff	wreg,setFilter@filter
 14845                           
 14846                           ; BSR set to: 2
 14847                           ;main.c: 2772: uint8_t sidh = (long) val >> 21L;
 14848  0044EA  0E15               	movlw	21
 14849  0044EC  0100               	movlb	0	; () banked
 14850  0044EE  6F64               	movwf	??_setFilter& (0+255),b
 14851  0044F0  C060  F065         	movff	setFilter@val,??_setFilter+1
 14852  0044F4  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 14853  0044F8  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 14854  0044FC  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 14855  004500                     u15335:
 14856  004500  6764               	tstfsz	??_setFilter& (0+255),b
 14857  004502  D001               	goto	u15336
 14858  004504  D007               	goto	u15337
 14859  004506                     u15336:
 14860  004506  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 14861  004508  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14862  00450A  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14863  00450C  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14864  00450E  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 14865  004510  2F64               	decfsz	??_setFilter& (0+255),f,b
 14866  004512  D7F6               	goto	u15335
 14867  004514                     u15337:
 14868  004514  5165               	movf	(??_setFilter+1)& (0+255),w,b
 14869  004516  6F6B               	movwf	setFilter@sidh& (0+255),b
 14870                           
 14871                           ;main.c: 2773: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 14872                           ;main.c: 2774: ((long) (val) & 0x03L) |
 14873                           ;main.c: 2775: 0x08;
 14874  004518  C060  F064         	movff	setFilter@val,??_setFilter
 14875  00451C  0E03               	movlw	3
 14876  00451E  1764               	andwf	??_setFilter& (0+255),f,b
 14877  004520  0E0D               	movlw	13
 14878  004522  6F65               	movwf	(??_setFilter+1)& (0+255),b
 14879  004524  C060  F066         	movff	setFilter@val,??_setFilter+2
 14880  004528  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 14881  00452C  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 14882  004530  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 14883  004534                     u15345:
 14884  004534  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 14885  004536  D001               	goto	u15346
 14886  004538  D007               	goto	u15347
 14887  00453A                     u15346:
 14888  00453A  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 14889  00453C  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 14890  00453E  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14891  004540  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14892  004542  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14893  004544  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 14894  004546  D7F6               	goto	u15345
 14895  004548                     u15347:
 14896  004548  5166               	movf	(??_setFilter+2)& (0+255),w,b
 14897  00454A  0BE0               	andlw	224
 14898  00454C  1164               	iorwf	??_setFilter& (0+255),w,b
 14899  00454E  0908               	iorlw	8
 14900  004550  6F6C               	movwf	setFilter@sidl& (0+255),b
 14901                           
 14902                           ; BSR set to: 0
 14903                           ;main.c: 2776: uint8_t eidh = (long) val >> 8L;
 14904  004552  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 14905                           
 14906                           ; BSR set to: 0
 14907                           ;main.c: 2777: uint8_t eidl = val;
 14908  004556  C060  F06E         	movff	setFilter@val,setFilter@eidl
 14909                           
 14910                           ;main.c: 2779: switch (filter) {
 14911  00455A  D090               	goto	l12072
 14912  00455C                     l1231:
 14913                           
 14914                           ; BSR set to: 0
 14915                           ;main.c: 2782: RXF0SIDH = sidh;
 14916  00455C  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 14917                           
 14918                           ;main.c: 2783: RXF0SIDL = sidl;
 14919  004560  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 14920                           
 14921                           ;main.c: 2784: RXF0EIDH = eidh;
 14922  004564  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 14923                           
 14924                           ;main.c: 2785: RXF0EIDL = eidl;
 14925  004568  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 14926                           
 14927                           ;main.c: 2786: break;
 14928  00456C  D0AA               	goto	l1248
 14929  00456E                     l1233:
 14930                           
 14931                           ; BSR set to: 0
 14932                           ;main.c: 2789: RXF1SIDH = sidh;
 14933  00456E  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 14934                           
 14935                           ;main.c: 2790: RXF1SIDL = sidl;
 14936  004572  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 14937                           
 14938                           ;main.c: 2791: RXF1EIDH = eidh;
 14939  004576  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 14940                           
 14941                           ;main.c: 2792: RXF1EIDL = eidl;
 14942  00457A  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 14943                           
 14944                           ;main.c: 2793: break;
 14945  00457E  D0A1               	goto	l1248
 14946  004580                     l1234:
 14947                           
 14948                           ; BSR set to: 0
 14949                           ;main.c: 2796: RXF2SIDH = sidh;
 14950  004580  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 14951                           
 14952                           ;main.c: 2797: RXF2SIDL = sidl;
 14953  004584  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 14954                           
 14955                           ;main.c: 2798: RXF2EIDH = eidh;
 14956  004588  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 14957                           
 14958                           ;main.c: 2799: RXF2EIDL = eidl;
 14959  00458C  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 14960                           
 14961                           ;main.c: 2800: break;
 14962  004590  D098               	goto	l1248
 14963  004592                     l1235:
 14964                           
 14965                           ; BSR set to: 0
 14966                           ;main.c: 2803: RXF3SIDH = sidh;
 14967  004592  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 14968                           
 14969                           ;main.c: 2804: RXF3SIDL = sidl;
 14970  004596  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 14971                           
 14972                           ;main.c: 2805: RXF3EIDH = eidh;
 14973  00459A  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 14974                           
 14975                           ;main.c: 2806: RXF3EIDL = eidl;
 14976  00459E  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 14977                           
 14978                           ;main.c: 2807: break;
 14979  0045A2  D08F               	goto	l1248
 14980  0045A4                     l1236:
 14981                           
 14982                           ; BSR set to: 0
 14983                           ;main.c: 2810: RXF4SIDH = sidh;
 14984  0045A4  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 14985                           
 14986                           ;main.c: 2811: RXF4SIDL = sidl;
 14987  0045A8  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 14988                           
 14989                           ;main.c: 2812: RXF4EIDH = eidh;
 14990  0045AC  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 14991                           
 14992                           ;main.c: 2813: RXF4EIDL = eidl;
 14993  0045B0  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 14994                           
 14995                           ;main.c: 2814: break;
 14996  0045B4  D086               	goto	l1248
 14997  0045B6                     l1237:
 14998                           
 14999                           ; BSR set to: 0
 15000                           ;main.c: 2817: RXF5SIDH = sidh;
 15001  0045B6  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 15002                           
 15003                           ;main.c: 2818: RXF5SIDL = sidl;
 15004  0045BA  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 15005                           
 15006                           ;main.c: 2819: RXF5EIDH = eidh;
 15007  0045BE  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 15008                           
 15009                           ;main.c: 2820: RXF5EIDL = eidl;
 15010  0045C2  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 15011                           
 15012                           ;main.c: 2821: break;
 15013  0045C6  D07D               	goto	l1248
 15014  0045C8                     l1238:
 15015                           
 15016                           ; BSR set to: 0
 15017                           ;main.c: 2824: RXF6SIDH = sidh;
 15018  0045C8  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 15019                           
 15020                           ;main.c: 2825: RXF6SIDL = sidl;
 15021  0045CC  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 15022                           
 15023                           ;main.c: 2826: RXF6EIDH = eidh;
 15024  0045D0  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 15025                           
 15026                           ;main.c: 2827: RXF6EIDL = eidl;
 15027  0045D4  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 15028                           
 15029                           ;main.c: 2828: break;
 15030  0045D8  D074               	goto	l1248
 15031  0045DA                     l1239:
 15032                           
 15033                           ; BSR set to: 0
 15034                           ;main.c: 2831: RXF7SIDH = sidh;
 15035  0045DA  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 15036                           
 15037                           ;main.c: 2832: RXF7SIDL = sidl;
 15038  0045DE  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 15039                           
 15040                           ;main.c: 2833: RXF7EIDH = eidh;
 15041  0045E2  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 15042                           
 15043                           ;main.c: 2834: RXF7EIDL = eidl;
 15044  0045E6  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 15045                           
 15046                           ;main.c: 2835: break;
 15047  0045EA  D06B               	goto	l1248
 15048  0045EC                     l1240:
 15049                           
 15050                           ; BSR set to: 0
 15051                           ;main.c: 2838: RXF8SIDH = sidh;
 15052  0045EC  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 15053                           
 15054                           ;main.c: 2839: RXF8SIDL = sidl;
 15055  0045F0  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 15056                           
 15057                           ;main.c: 2840: RXF8EIDH = eidh;
 15058  0045F4  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 15059                           
 15060                           ;main.c: 2841: RXF8EIDL = eidl;
 15061  0045F8  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 15062                           
 15063                           ;main.c: 2842: break;
 15064  0045FC  D062               	goto	l1248
 15065  0045FE                     l1241:
 15066                           
 15067                           ; BSR set to: 0
 15068                           ;main.c: 2845: RXF9SIDH = sidh;
 15069  0045FE  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 15070                           
 15071                           ;main.c: 2846: RXF9SIDL = sidl;
 15072  004602  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 15073                           
 15074                           ;main.c: 2847: RXF9EIDH = eidh;
 15075  004606  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 15076                           
 15077                           ;main.c: 2848: RXF9EIDL = eidl;
 15078  00460A  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 15079                           
 15080                           ;main.c: 2849: break;
 15081  00460E  D059               	goto	l1248
 15082  004610                     l1242:
 15083                           
 15084                           ; BSR set to: 0
 15085                           ;main.c: 2852: RXF10SIDH = sidh;
 15086  004610  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 15087                           
 15088                           ;main.c: 2853: RXF10SIDL = sidl;
 15089  004614  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 15090                           
 15091                           ;main.c: 2854: RXF10EIDH = eidh;
 15092  004618  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 15093                           
 15094                           ;main.c: 2855: RXF10EIDL = eidl;
 15095  00461C  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 15096                           
 15097                           ;main.c: 2856: break;
 15098  004620  D050               	goto	l1248
 15099  004622                     l1243:
 15100                           
 15101                           ; BSR set to: 0
 15102                           ;main.c: 2859: RXF11SIDH = sidh;
 15103  004622  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 15104                           
 15105                           ;main.c: 2860: RXF11SIDL = sidl;
 15106  004626  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 15107                           
 15108                           ;main.c: 2861: RXF11EIDH = eidh;
 15109  00462A  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 15110                           
 15111                           ;main.c: 2862: RXF11EIDL = eidl;
 15112  00462E  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 15113                           
 15114                           ;main.c: 2863: break;
 15115  004632  D047               	goto	l1248
 15116  004634                     l1244:
 15117                           
 15118                           ; BSR set to: 0
 15119                           ;main.c: 2866: RXF12SIDH = sidh;
 15120  004634  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 15121                           
 15122                           ;main.c: 2867: RXF12SIDL = sidl;
 15123  004638  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 15124                           
 15125                           ;main.c: 2868: RXF12EIDH = eidh;
 15126  00463C  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 15127                           
 15128                           ;main.c: 2869: RXF12EIDL = eidl;
 15129  004640  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 15130                           
 15131                           ;main.c: 2870: break;
 15132  004644  D03E               	goto	l1248
 15133  004646                     l1245:
 15134                           
 15135                           ; BSR set to: 0
 15136                           ;main.c: 2873: RXF13SIDH = sidh;
 15137  004646  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 15138                           
 15139                           ;main.c: 2874: RXF13SIDL = sidl;
 15140  00464A  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 15141                           
 15142                           ;main.c: 2875: RXF13EIDH = eidh;
 15143  00464E  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 15144                           
 15145                           ;main.c: 2876: RXF13EIDL = eidl;
 15146  004652  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 15147                           
 15148                           ;main.c: 2877: break;
 15149  004656  D035               	goto	l1248
 15150  004658                     l1246:
 15151                           
 15152                           ; BSR set to: 0
 15153                           ;main.c: 2880: RXF14SIDH = sidh;
 15154  004658  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 15155                           
 15156                           ;main.c: 2881: RXF14SIDL = sidl;
 15157  00465C  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 15158                           
 15159                           ;main.c: 2882: RXF14EIDH = eidh;
 15160  004660  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 15161                           
 15162                           ;main.c: 2883: RXF14EIDL = eidl;
 15163  004664  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 15164                           
 15165                           ;main.c: 2884: break;
 15166  004668  D02C               	goto	l1248
 15167  00466A                     l1247:
 15168                           
 15169                           ; BSR set to: 0
 15170                           ;main.c: 2887: RXF15SIDH = sidh;
 15171  00466A  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 15172                           
 15173                           ;main.c: 2888: RXF15SIDL = sidl;
 15174  00466E  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 15175                           
 15176                           ;main.c: 2889: RXF15EIDH = eidh;
 15177  004672  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 15178                           
 15179                           ;main.c: 2890: RXF15EIDL = eidl;
 15180  004676  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 15181                           
 15182                           ;main.c: 2891: break;
 15183  00467A  D023               	goto	l1248
 15184  00467C                     l12072:
 15185                           
 15186                           ; BSR set to: 0
 15187  00467C  516A               	movf	setFilter@filter& (0+255),w,b
 15188                           
 15189                           ; Switch size 1, requested type "space"
 15190                           ; Number of cases is 16, Range of values is 0 to 15
 15191                           ; switch strategies available:
 15192                           ; Name         Instructions Cycles
 15193                           ; simple_byte           49    25 (average)
 15194                           ;	Chosen strategy is simple_byte
 15195  00467E  E101 D76D          	bz	l1231
 15196  004682  0A01               	xorlw	1	; case 1
 15197  004684  E101 D773          	bz	l1233
 15198  004688  0A03               	xorlw	3	; case 2
 15199  00468A  E101 D779          	bz	l1234
 15200  00468E  0A01               	xorlw	1	; case 3
 15201  004690  E080               	bz	l1235
 15202  004692  0A07               	xorlw	7	; case 4
 15203  004694  E087               	bz	l1236
 15204  004696  0A01               	xorlw	1	; case 5
 15205  004698  E08E               	bz	l1237
 15206  00469A  0A03               	xorlw	3	; case 6
 15207  00469C  E095               	bz	l1238
 15208  00469E  0A01               	xorlw	1	; case 7
 15209  0046A0  E09C               	bz	l1239
 15210  0046A2  0A0F               	xorlw	15	; case 8
 15211  0046A4  E0A3               	bz	l1240
 15212  0046A6  0A01               	xorlw	1	; case 9
 15213  0046A8  E0AA               	bz	l1241
 15214  0046AA  0A03               	xorlw	3	; case 10
 15215  0046AC  E0B1               	bz	l1242
 15216  0046AE  0A01               	xorlw	1	; case 11
 15217  0046B0  E0B8               	bz	l1243
 15218  0046B2  0A07               	xorlw	7	; case 12
 15219  0046B4  E0BF               	bz	l1244
 15220  0046B6  0A01               	xorlw	1	; case 13
 15221  0046B8  E0C6               	bz	l1245
 15222  0046BA  0A03               	xorlw	3	; case 14
 15223  0046BC  E0CD               	bz	l1246
 15224  0046BE  0A01               	xorlw	1	; case 15
 15225  0046C0  E0D4               	bz	l1247
 15226  0046C2                     l1248:
 15227                           
 15228                           ; BSR set to: 0
 15229  0046C2  0012               	return	
 15230  0046C4                     __end_of_setFilter:
 15231                           	opt stack 0
 15232                           tblptru	equ	0xFF8
 15233                           tblptrh	equ	0xFF7
 15234                           tblptrl	equ	0xFF6
 15235                           tablat	equ	0xFF5
 15236                           prodh	equ	0xFF4
 15237                           prodl	equ	0xFF3
 15238                           intcon	equ	0xFF2
 15239                           indf0	equ	0xFEF
 15240                           postinc0	equ	0xFEE
 15241                           fsr0h	equ	0xFEA
 15242                           fsr0l	equ	0xFE9
 15243                           wreg	equ	0xFE8
 15244                           indf1	equ	0xFE7
 15245                           postinc1	equ	0xFE6
 15246                           postdec1	equ	0xFE5
 15247                           fsr1h	equ	0xFE2
 15248                           fsr1l	equ	0xFE1
 15249                           indf2	equ	0xFDF
 15250                           postinc2	equ	0xFDE
 15251                           postdec2	equ	0xFDD
 15252                           plusw2	equ	0xFDB
 15253                           fsr2h	equ	0xFDA
 15254                           fsr2l	equ	0xFD9
 15255                           status	equ	0xFD8
 15256                           
 15257 ;; *************** function _writeRegisterExtended *****************
 15258 ;; Defined at:
 15259 ;;		line 2334 in file "main.c"
 15260 ;; Parameters:    Size  Location     Type
 15261 ;;  nodeid          1    wreg     unsigned char 
 15262 ;;  page            2   86[BANK0 ] unsigned short 
 15263 ;;  reg             1   88[BANK0 ] unsigned char 
 15264 ;;  timeout         2   89[BANK0 ] unsigned short 
 15265 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15266 ;;		 -> doModeVerbose@value_1156(1), 
 15267 ;; Auto vars:     Size  Location     Type
 15268 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15269 ;; Return value:  Size  Location     Type
 15270 ;;                  1    wreg      enum E15660
 15271 ;; Registers used:
 15272 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15273 ;; Tracked objects:
 15274 ;;		On entry : F/2
 15275 ;;		On exit  : E/0
 15276 ;;		Unchanged: 0/0
 15277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15278 ;;      Params:         0       7       0       0       0       0       0
 15279 ;;      Locals:         0       1       0       0       0       0       0
 15280 ;;      Temps:          0       4       0       0       0       0       0
 15281 ;;      Totals:         0      12       0       0       0       0       0
 15282 ;;Total ram usage:       12 bytes
 15283 ;; Hardware stack levels used:    1
 15284 ;; Hardware stack levels required when called:    7
 15285 ;; This function calls:
 15286 ;;		_sendVSCPFrame
 15287 ;;		_getVSCPFrame
 15288 ;; This function is called by:
 15289 ;;		_doModeVerbose
 15290 ;; This function uses a non-reentrant model
 15291 ;;
 15292                           
 15293                           	psect	text24
 15294  00346E                     __ptext24:
 15295                           	opt stack 0
 15296  00346E                     _writeRegisterExtended:
 15297                           	opt stack 21
 15298                           
 15299                           ; BSR set to: 0
 15300                           ;incstack = 0
 15301                           ;incstack = 0
 15302                           ;writeRegisterExtended@nodeid stored from wreg
 15303  00346E  CFE8 F0C1          	movff	wreg,writeRegisterExtended@nodeid
 15304                           
 15305                           ; BSR set to: 2
 15306                           ;main.c: 2335: vscpData[ 0 ] = nodeid;
 15307  003472  C0C1  F1A4         	movff	writeRegisterExtended@nodeid,_vscpData
 15308                           
 15309                           ; BSR set to: 2
 15310                           ;main.c: 2336: vscpData[ 1 ] = page >> 8;
 15311  003476  0100               	movlb	0	; () banked
 15312  003478  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15313  00347A  0101               	movlb	1	; () banked
 15314  00347C  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15315                           
 15316                           ; BSR set to: 1
 15317                           ;main.c: 2337: vscpData[ 2 ] = page & 0xff;
 15318  00347E  C0B6  F1A6         	movff	writeRegisterExtended@page,_vscpData+2
 15319                           
 15320                           ; BSR set to: 1
 15321                           ;main.c: 2338: vscpData[ 3 ] = reg;
 15322  003482  C0B8  F1A7         	movff	writeRegisterExtended@reg,_vscpData+3
 15323                           
 15324                           ; BSR set to: 1
 15325                           ;main.c: 2339: vscpData[ 4 ] = *value;
 15326  003486  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15327  00348A  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15328  00348E  50DF               	movf	indf2,w,c
 15329  003490  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15330                           
 15331                           ; BSR set to: 1
 15332                           ;main.c: 2341: if (sendVSCPFrame(0,
 15333                           ;main.c: 2342: 38,
 15334                           ;main.c: 2343: 0,
 15335                           ;main.c: 2344: 0,
 15336                           ;main.c: 2345: 5,
 15337                           ;main.c: 2346: vscpData)) {
 15338  003492  0100               	movlb	0	; () banked
 15339  003494  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15340  003496  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15341  003498  0E26               	movlw	38
 15342  00349A  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15343  00349C  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15344  00349E  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15345  0034A0  0E05               	movlw	5
 15346  0034A2  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15347  0034A4  0E01               	movlw	high _vscpData
 15348  0034A6  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15349  0034A8  0EA4               	movlw	low _vscpData
 15350  0034AA  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15351  0034AC  ECA5  F014         	call	_sendVSCPFrame	;wreg free
 15352  0034B0  0900               	iorlw	0
 15353  0034B2  E05E               	bz	l11972
 15354                           
 15355                           ; BSR set to: 0
 15356                           ;main.c: 2348: timekeeper = 0;
 15357  0034B4  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15358  0034B6  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15359  0034B8  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15360  0034BA  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15361                           
 15362                           ;main.c: 2349: while (timekeeper < timeout) {
 15363  0034BC  D049               	goto	l11970
 15364  0034BE                     l1088:
 15365                           
 15366                           ; BSR set to: 0
 15367  0034BE  0004               	clrwdt		;# 
 15368                           
 15369                           ;main.c: 2353: if (getVSCPFrame(&vscpClass,
 15370                           ;main.c: 2354: &vscpType,
 15371                           ;main.c: 2355: &vscpNodeId,
 15372                           ;main.c: 2356: &vscpPriority,
 15373                           ;main.c: 2357: &vscpSize,
 15374                           ;main.c: 2358: vscpData)) {
 15375  0034C0  0E01               	movlw	high _vscpClass
 15376  0034C2  0100               	movlb	0	; () banked
 15377  0034C4  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15378  0034C6  0EAC               	movlw	low _vscpClass
 15379  0034C8  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15380  0034CA  0E01               	movlw	high _vscpType
 15381  0034CC  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15382  0034CE  0EB1               	movlw	low _vscpType
 15383  0034D0  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15384  0034D2  0E01               	movlw	high _vscpNodeId
 15385  0034D4  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15386  0034D6  0EAE               	movlw	low _vscpNodeId
 15387  0034D8  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15388  0034DA  0E01               	movlw	high _vscpPriority
 15389  0034DC  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15390  0034DE  0EAF               	movlw	low _vscpPriority
 15391  0034E0  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15392  0034E2  0E01               	movlw	high _vscpSize
 15393  0034E4  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15394  0034E6  0EB0               	movlw	low _vscpSize
 15395  0034E8  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15396  0034EA  0E01               	movlw	high _vscpData
 15397  0034EC  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15398  0034EE  0EA4               	movlw	low _vscpData
 15399  0034F0  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15400  0034F2  ECB5  F011         	call	_getVSCPFrame	;wreg free
 15401  0034F6  0900               	iorlw	0
 15402  0034F8  E02B               	bz	l11970
 15403                           
 15404                           ; BSR set to: 0
 15405                           ;main.c: 2360: if ((nodeid == vscpNodeId) &&
 15406                           ;main.c: 2361: (5 == vscpSize) &&
 15407                           ;main.c: 2362: (0 == vscpData[ 0 ]) &&
 15408                           ;main.c: 2363: ((page >> 8) == vscpData[ 1 ]) &&
 15409                           ;main.c: 2364: ((page & 0xff) == vscpData[ 2 ]) &&
 15410                           ;main.c: 2365: (reg == vscpData[ 3 ]) &&
 15411                           ;main.c: 2366: (*value == vscpData[ 4 ])) {
 15412  0034FA  0101               	movlb	1	; () banked
 15413  0034FC  51AE               	movf	_vscpNodeId& (0+255),w,b
 15414  0034FE  0100               	movlb	0	; () banked
 15415  003500  63C1               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15416  003502  D026               	goto	l11970
 15417                           
 15418                           ; BSR set to: 0
 15419  003504  0101               	movlb	1	; () banked
 15420  003506  51B0               	movf	_vscpSize& (0+255),w,b
 15421  003508  0A05               	xorlw	5
 15422  00350A  E122               	bnz	l11970
 15423                           
 15424                           ; BSR set to: 1
 15425  00350C  67A4               	tstfsz	_vscpData& (0+255),b
 15426  00350E  D020               	goto	l11970
 15427                           
 15428                           ; BSR set to: 1
 15429  003510  0100               	movlb	0	; () banked
 15430  003512  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15431  003514  0101               	movlb	1	; () banked
 15432  003516  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15433  003518  E11B               	bnz	l11970
 15434                           
 15435                           ; BSR set to: 1
 15436  00351A  0100               	movlb	0	; () banked
 15437  00351C  51B6               	movf	writeRegisterExtended@page& (0+255),w,b
 15438  00351E  EE21  F0A6         	lfsr	2,_vscpData+2
 15439  003522  62DF               	cpfseq	indf2,c
 15440  003524  D015               	goto	l11970
 15441                           
 15442                           ; BSR set to: 1
 15443  003526  51B8               	movf	writeRegisterExtended@reg& (0+255),w,b
 15444  003528  0101               	movlb	1	; () banked
 15445  00352A  EE21  F0A7         	lfsr	2,_vscpData+3
 15446  00352E  62DF               	cpfseq	indf2,c
 15447  003530  D00F               	goto	l11970
 15448                           
 15449                           ; BSR set to: 1
 15450  003532  51A8               	movf	(_vscpData+4)& (0+255),w,b
 15451  003534  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15452  003538  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15453  00353C  62DF               	cpfseq	indf2,c
 15454  00353E  D008               	goto	l11970
 15455                           
 15456                           ; BSR set to: 1
 15457                           ;main.c: 2367: *value = vscpData[ 1 ];
 15458  003540  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15459  003544  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15460  003548  C1A5  FFDF         	movff	_vscpData+1,indf2
 15461                           
 15462                           ; BSR set to: 1
 15463                           ;main.c: 2368: return 1;
 15464  00354C  0E01               	movlw	1
 15465  00354E  D011               	goto	l1091
 15466  003550                     l11970:
 15467  003550  0100               	movlb	0	; () banked
 15468  003552  51B9               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15469  003554  6FBD               	movwf	??_writeRegisterExtended& (0+255),b
 15470  003556  51BA               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15471  003558  6FBE               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15472  00355A  6BBF               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15473  00355C  6BC0               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15474  00355E  51BD               	movf	??_writeRegisterExtended& (0+255),w,b
 15475  003560  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15476  003562  51BE               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15477  003564  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15478  003566  51BF               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15479  003568  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15480  00356A  51C0               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15481  00356C  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15482  00356E  E3A7               	bnc	l1088
 15483  003570                     l11972:
 15484                           
 15485                           ; BSR set to: 0
 15486                           ;main.c: 2369: }
 15487                           ;main.c: 2371: }
 15488                           ;main.c: 2373: }
 15489                           ;main.c: 2375: }
 15490                           ;main.c: 2377: return 0;
 15491  003570  0E00               	movlw	0
 15492  003572                     l1091:
 15493  003572  0012               	return	
 15494  003574                     __end_of_writeRegisterExtended:
 15495                           	opt stack 0
 15496                           tblptru	equ	0xFF8
 15497                           tblptrh	equ	0xFF7
 15498                           tblptrl	equ	0xFF6
 15499                           tablat	equ	0xFF5
 15500                           prodh	equ	0xFF4
 15501                           prodl	equ	0xFF3
 15502                           intcon	equ	0xFF2
 15503                           indf0	equ	0xFEF
 15504                           postinc0	equ	0xFEE
 15505                           fsr0h	equ	0xFEA
 15506                           fsr0l	equ	0xFE9
 15507                           wreg	equ	0xFE8
 15508                           indf1	equ	0xFE7
 15509                           postinc1	equ	0xFE6
 15510                           postdec1	equ	0xFE5
 15511                           fsr1h	equ	0xFE2
 15512                           fsr1l	equ	0xFE1
 15513                           indf2	equ	0xFDF
 15514                           postinc2	equ	0xFDE
 15515                           postdec2	equ	0xFDD
 15516                           plusw2	equ	0xFDB
 15517                           fsr2h	equ	0xFDA
 15518                           fsr2l	equ	0xFD9
 15519                           status	equ	0xFD8
 15520                           
 15521 ;; *************** function _printBinary *****************
 15522 ;; Defined at:
 15523 ;;		line 2421 in file "main.c"
 15524 ;; Parameters:    Size  Location     Type
 15525 ;;  value           1    wreg     unsigned char 
 15526 ;; Auto vars:     Size  Location     Type
 15527 ;;  value           1    3[BANK0 ] unsigned char 
 15528 ;;  i               2    4[BANK0 ] int 
 15529 ;; Return value:  Size  Location     Type
 15530 ;;		None               void
 15531 ;; Registers used:
 15532 ;;		wreg, status,2, status,0, cstack
 15533 ;; Tracked objects:
 15534 ;;		On entry : F/2
 15535 ;;		On exit  : F/0
 15536 ;;		Unchanged: 0/0
 15537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15538 ;;      Params:         0       0       0       0       0       0       0
 15539 ;;      Locals:         0       3       0       0       0       0       0
 15540 ;;      Temps:          0       2       0       0       0       0       0
 15541 ;;      Totals:         0       5       0       0       0       0       0
 15542 ;;Total ram usage:        5 bytes
 15543 ;; Hardware stack levels used:    1
 15544 ;; Hardware stack levels required when called:    4
 15545 ;; This function calls:
 15546 ;;		_WriteUSART
 15547 ;; This function is called by:
 15548 ;;		_doModeVerbose
 15549 ;; This function uses a non-reentrant model
 15550 ;;
 15551                           
 15552                           	psect	text25
 15553  001C9E                     __ptext25:
 15554                           	opt stack 0
 15555  001C9E                     _printBinary:
 15556                           	opt stack 24
 15557                           
 15558                           ;incstack = 0
 15559                           ;incstack = 0
 15560                           ;printBinary@value stored from wreg
 15561  001C9E  CFE8 F063          	movff	wreg,printBinary@value
 15562                           
 15563                           ; BSR set to: 2
 15564                           ;main.c: 2422: int i;
 15565                           ;main.c: 2424: for (i = 7; i >= 0; i--) {
 15566  001CA2  0100               	movlb	0	; () banked
 15567  001CA4  6B65               	clrf	(printBinary@i+1)& (0+255),b
 15568  001CA6  0E07               	movlw	7
 15569  001CA8  6F64               	movwf	printBinary@i& (0+255),b
 15570  001CAA                     l11922:
 15571                           
 15572                           ; BSR set to: 0
 15573                           ;main.c: 2425: if (value & (1 << i)) {
 15574  001CAA  C064  F061         	movff	printBinary@i,??_printBinary
 15575  001CAE  0E01               	movlw	1
 15576  001CB0  6F62               	movwf	(??_printBinary+1)& (0+255),b
 15577  001CB2  2B61               	incf	??_printBinary& (0+255),f,b
 15578  001CB4  D002               	goto	u15094
 15579  001CB6                     u15095:
 15580  001CB6  90D8               	bcf	status,0,c
 15581  001CB8  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 15582  001CBA                     u15094:
 15583  001CBA  2F61               	decfsz	??_printBinary& (0+255),f,b
 15584  001CBC  D7FC               	goto	u15095
 15585  001CBE  5162               	movf	(??_printBinary+1)& (0+255),w,b
 15586  001CC0  1563               	andwf	printBinary@value& (0+255),w,b
 15587  001CC2  E006               	bz	l1111
 15588  001CC4                     l1107:
 15589  001CC4  A2AC               	btfss	4012,1,c	;volatile
 15590  001CC6  D7FE               	goto	l1107
 15591                           
 15592                           ;main.c: 2427: WriteUSART('1');
 15593  001CC8  0E31               	movlw	49
 15594  001CCA  ECEE  F00B         	call	_WriteUSART
 15595                           
 15596                           ;main.c: 2428: } else {
 15597  001CCE  D005               	goto	l11930
 15598  001CD0                     l1111:
 15599  001CD0  A2AC               	btfss	4012,1,c	;volatile
 15600  001CD2  D7FE               	goto	l1111
 15601                           
 15602                           ;main.c: 2430: WriteUSART('0');
 15603  001CD4  0E30               	movlw	48
 15604  001CD6  ECEE  F00B         	call	_WriteUSART
 15605  001CDA                     l11930:
 15606  001CDA  0100               	movlb	0	; () banked
 15607  001CDC  0764               	decf	printBinary@i& (0+255),f,b
 15608  001CDE  A0D8               	btfss	status,0,c
 15609  001CE0  0765               	decf	(printBinary@i+1)& (0+255),f,b
 15610                           
 15611                           ; BSR set to: 0
 15612  001CE2  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 15613                           
 15614                           ; BSR set to: 0
 15615  001CE4  0012               	return	
 15616  001CE6  D7E1               	goto	l11922
 15617  001CE8                     __end_of_printBinary:
 15618                           	opt stack 0
 15619                           tblptru	equ	0xFF8
 15620                           tblptrh	equ	0xFF7
 15621                           tblptrl	equ	0xFF6
 15622                           tablat	equ	0xFF5
 15623                           prodh	equ	0xFF4
 15624                           prodl	equ	0xFF3
 15625                           intcon	equ	0xFF2
 15626                           indf0	equ	0xFEF
 15627                           postinc0	equ	0xFEE
 15628                           fsr0h	equ	0xFEA
 15629                           fsr0l	equ	0xFE9
 15630                           wreg	equ	0xFE8
 15631                           indf1	equ	0xFE7
 15632                           postinc1	equ	0xFE6
 15633                           postdec1	equ	0xFE5
 15634                           fsr1h	equ	0xFE2
 15635                           fsr1l	equ	0xFE1
 15636                           indf2	equ	0xFDF
 15637                           postinc2	equ	0xFDE
 15638                           postdec2	equ	0xFDD
 15639                           plusw2	equ	0xFDB
 15640                           fsr2h	equ	0xFDA
 15641                           fsr2l	equ	0xFD9
 15642                           status	equ	0xFD8
 15643                           
 15644 ;; *************** function _readRegisterExtended *****************
 15645 ;; Defined at:
 15646 ;;		line 2233 in file "main.c"
 15647 ;; Parameters:    Size  Location     Type
 15648 ;;  nodeid          1    wreg     unsigned char 
 15649 ;;  page            2   86[BANK0 ] unsigned short 
 15650 ;;  reg             1   88[BANK0 ] unsigned char 
 15651 ;;  timeout         2   89[BANK0 ] unsigned short 
 15652 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15653 ;;		 -> doModeVerbose@value(1), 
 15654 ;; Auto vars:     Size  Location     Type
 15655 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15656 ;; Return value:  Size  Location     Type
 15657 ;;                  1    wreg      enum E15660
 15658 ;; Registers used:
 15659 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15660 ;; Tracked objects:
 15661 ;;		On entry : F/2
 15662 ;;		On exit  : E/0
 15663 ;;		Unchanged: 0/0
 15664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15665 ;;      Params:         0       7       0       0       0       0       0
 15666 ;;      Locals:         0       1       0       0       0       0       0
 15667 ;;      Temps:          0       4       0       0       0       0       0
 15668 ;;      Totals:         0      12       0       0       0       0       0
 15669 ;;Total ram usage:       12 bytes
 15670 ;; Hardware stack levels used:    1
 15671 ;; Hardware stack levels required when called:    7
 15672 ;; This function calls:
 15673 ;;		_sendVSCPFrame
 15674 ;;		_getVSCPFrame
 15675 ;; This function is called by:
 15676 ;;		_doModeVerbose
 15677 ;; This function uses a non-reentrant model
 15678 ;;
 15679                           
 15680                           	psect	text26
 15681  003168                     __ptext26:
 15682                           	opt stack 0
 15683  003168                     _readRegisterExtended:
 15684                           	opt stack 21
 15685                           
 15686                           ; BSR set to: 0
 15687                           ;incstack = 0
 15688                           ;incstack = 0
 15689                           ;readRegisterExtended@nodeid stored from wreg
 15690  003168  CFE8 F0C1          	movff	wreg,readRegisterExtended@nodeid
 15691                           
 15692                           ; BSR set to: 2
 15693                           ;main.c: 2234: vscpData[ 0 ] = nodeid;
 15694  00316C  C0C1  F1A4         	movff	readRegisterExtended@nodeid,_vscpData
 15695                           
 15696                           ; BSR set to: 2
 15697                           ;main.c: 2235: vscpData[ 1 ] = page >> 8;
 15698  003170  0100               	movlb	0	; () banked
 15699  003172  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15700  003174  0101               	movlb	1	; () banked
 15701  003176  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15702                           
 15703                           ; BSR set to: 1
 15704                           ;main.c: 2236: vscpData[ 2 ] = page & 0xff;
 15705  003178  C0B6  F1A6         	movff	readRegisterExtended@page,_vscpData+2
 15706                           
 15707                           ; BSR set to: 1
 15708                           ;main.c: 2237: vscpData[ 3 ] = reg;
 15709  00317C  C0B8  F1A7         	movff	readRegisterExtended@reg,_vscpData+3
 15710                           
 15711                           ; BSR set to: 1
 15712                           ;main.c: 2238: vscpData[ 4 ] = 1;
 15713  003180  0E01               	movlw	1
 15714  003182  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15715                           
 15716                           ; BSR set to: 1
 15717                           ;main.c: 2240: if (sendVSCPFrame(0,
 15718                           ;main.c: 2241: 37,
 15719                           ;main.c: 2242: 0,
 15720                           ;main.c: 2243: 0,
 15721                           ;main.c: 2244: 5,
 15722                           ;main.c: 2245: vscpData)) {
 15723  003184  0100               	movlb	0	; () banked
 15724  003186  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15725  003188  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15726  00318A  0E25               	movlw	37
 15727  00318C  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15728  00318E  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15729  003190  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15730  003192  0E05               	movlw	5
 15731  003194  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15732  003196  0E01               	movlw	high _vscpData
 15733  003198  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15734  00319A  0EA4               	movlw	low _vscpData
 15735  00319C  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15736  00319E  ECA5  F014         	call	_sendVSCPFrame	;wreg free
 15737  0031A2  0900               	iorlw	0
 15738  0031A4  E05D               	bz	l11562
 15739                           
 15740                           ; BSR set to: 0
 15741                           ;main.c: 2247: timekeeper = 0;
 15742  0031A6  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15743  0031A8  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15744  0031AA  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15745  0031AC  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15746                           
 15747                           ;main.c: 2248: while (timekeeper < timeout) {
 15748  0031AE  D048               	goto	l11560
 15749  0031B0                     l1070:
 15750                           
 15751                           ; BSR set to: 0
 15752  0031B0  0004               	clrwdt		;# 
 15753                           
 15754                           ;main.c: 2252: if (getVSCPFrame(&vscpClass,
 15755                           ;main.c: 2253: &vscpType,
 15756                           ;main.c: 2254: &vscpNodeId,
 15757                           ;main.c: 2255: &vscpPriority,
 15758                           ;main.c: 2256: &vscpSize,
 15759                           ;main.c: 2257: vscpData)) {
 15760  0031B2  0E01               	movlw	high _vscpClass
 15761  0031B4  0100               	movlb	0	; () banked
 15762  0031B6  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15763  0031B8  0EAC               	movlw	low _vscpClass
 15764  0031BA  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15765  0031BC  0E01               	movlw	high _vscpType
 15766  0031BE  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15767  0031C0  0EB1               	movlw	low _vscpType
 15768  0031C2  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15769  0031C4  0E01               	movlw	high _vscpNodeId
 15770  0031C6  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15771  0031C8  0EAE               	movlw	low _vscpNodeId
 15772  0031CA  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15773  0031CC  0E01               	movlw	high _vscpPriority
 15774  0031CE  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15775  0031D0  0EAF               	movlw	low _vscpPriority
 15776  0031D2  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15777  0031D4  0E01               	movlw	high _vscpSize
 15778  0031D6  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15779  0031D8  0EB0               	movlw	low _vscpSize
 15780  0031DA  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15781  0031DC  0E01               	movlw	high _vscpData
 15782  0031DE  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15783  0031E0  0EA4               	movlw	low _vscpData
 15784  0031E2  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15785  0031E4  ECB5  F011         	call	_getVSCPFrame	;wreg free
 15786  0031E8  0900               	iorlw	0
 15787  0031EA  E02A               	bz	l11560
 15788                           
 15789                           ; BSR set to: 0
 15790                           ;main.c: 2258: if ((nodeid == vscpNodeId) &&
 15791                           ;main.c: 2259: (0 == vscpClass) &&
 15792                           ;main.c: 2260: (39 == vscpType) &&
 15793                           ;main.c: 2261: (5 == vscpSize) &&
 15794                           ;main.c: 2262: (0 == vscpData[ 0 ]) &&
 15795                           ;main.c: 2263: ((page >> 8) == vscpData[ 1 ]) &&
 15796                           ;main.c: 2264: ((page & 0xff) == vscpData[ 2 ]) &&
 15797                           ;main.c: 2265: (reg == vscpData[ 3 ])) {
 15798  0031EC  0101               	movlb	1	; () banked
 15799  0031EE  51AE               	movf	_vscpNodeId& (0+255),w,b
 15800  0031F0  0100               	movlb	0	; () banked
 15801  0031F2  63C1               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 15802  0031F4  D025               	goto	l11560
 15803                           
 15804                           ; BSR set to: 0
 15805  0031F6  0101               	movlb	1	; () banked
 15806  0031F8  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 15807  0031FA  11AC               	iorwf	_vscpClass& (0+255),w,b
 15808  0031FC  E121               	bnz	l11560
 15809                           
 15810                           ; BSR set to: 1
 15811  0031FE  51B1               	movf	_vscpType& (0+255),w,b
 15812  003200  0A27               	xorlw	39
 15813  003202  E11E               	bnz	l11560
 15814                           
 15815                           ; BSR set to: 1
 15816  003204  51B0               	movf	_vscpSize& (0+255),w,b
 15817  003206  0A05               	xorlw	5
 15818  003208  E11B               	bnz	l11560
 15819                           
 15820                           ; BSR set to: 1
 15821  00320A  67A4               	tstfsz	_vscpData& (0+255),b
 15822  00320C  D019               	goto	l11560
 15823                           
 15824                           ; BSR set to: 1
 15825  00320E  0100               	movlb	0	; () banked
 15826  003210  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15827  003212  0101               	movlb	1	; () banked
 15828  003214  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15829  003216  E114               	bnz	l11560
 15830                           
 15831                           ; BSR set to: 1
 15832  003218  0100               	movlb	0	; () banked
 15833  00321A  51B6               	movf	readRegisterExtended@page& (0+255),w,b
 15834  00321C  EE21  F0A6         	lfsr	2,_vscpData+2
 15835  003220  62DF               	cpfseq	indf2,c
 15836  003222  D00E               	goto	l11560
 15837                           
 15838                           ; BSR set to: 1
 15839  003224  51B8               	movf	readRegisterExtended@reg& (0+255),w,b
 15840  003226  0101               	movlb	1	; () banked
 15841  003228  EE21  F0A7         	lfsr	2,_vscpData+3
 15842  00322C  62DF               	cpfseq	indf2,c
 15843  00322E  D008               	goto	l11560
 15844                           
 15845                           ; BSR set to: 1
 15846                           ;main.c: 2266: *value = vscpData[ 4 ];
 15847  003230  C0BB  FFD9         	movff	readRegisterExtended@value,fsr2l
 15848  003234  C0BC  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 15849  003238  C1A8  FFDF         	movff	_vscpData+4,indf2
 15850                           
 15851                           ; BSR set to: 1
 15852                           ;main.c: 2267: return 1;
 15853  00323C  0E01               	movlw	1
 15854  00323E  D011               	goto	l1073
 15855  003240                     l11560:
 15856  003240  0100               	movlb	0	; () banked
 15857  003242  51B9               	movf	readRegisterExtended@timeout& (0+255),w,b
 15858  003244  6FBD               	movwf	??_readRegisterExtended& (0+255),b
 15859  003246  51BA               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 15860  003248  6FBE               	movwf	(??_readRegisterExtended+1)& (0+255),b
 15861  00324A  6BBF               	clrf	(??_readRegisterExtended+2)& (0+255),b
 15862  00324C  6BC0               	clrf	(??_readRegisterExtended+3)& (0+255),b
 15863  00324E  51BD               	movf	??_readRegisterExtended& (0+255),w,b
 15864  003250  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15865  003252  51BE               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 15866  003254  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15867  003256  51BF               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 15868  003258  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15869  00325A  51C0               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 15870  00325C  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15871  00325E  E3A8               	bnc	l1070
 15872  003260                     l11562:
 15873                           
 15874                           ; BSR set to: 0
 15875                           ;main.c: 2268: }
 15876                           ;main.c: 2269: }
 15877                           ;main.c: 2270: }
 15878                           ;main.c: 2271: }
 15879                           ;main.c: 2273: return 0;
 15880  003260  0E00               	movlw	0
 15881  003262                     l1073:
 15882  003262  0012               	return	
 15883  003264                     __end_of_readRegisterExtended:
 15884                           	opt stack 0
 15885                           tblptru	equ	0xFF8
 15886                           tblptrh	equ	0xFF7
 15887                           tblptrl	equ	0xFF6
 15888                           tablat	equ	0xFF5
 15889                           prodh	equ	0xFF4
 15890                           prodl	equ	0xFF3
 15891                           intcon	equ	0xFF2
 15892                           indf0	equ	0xFEF
 15893                           postinc0	equ	0xFEE
 15894                           fsr0h	equ	0xFEA
 15895                           fsr0l	equ	0xFE9
 15896                           wreg	equ	0xFE8
 15897                           indf1	equ	0xFE7
 15898                           postinc1	equ	0xFE6
 15899                           postdec1	equ	0xFE5
 15900                           fsr1h	equ	0xFE2
 15901                           fsr1l	equ	0xFE1
 15902                           indf2	equ	0xFDF
 15903                           postinc2	equ	0xFDE
 15904                           postdec2	equ	0xFDD
 15905                           plusw2	equ	0xFDB
 15906                           fsr2h	equ	0xFDA
 15907                           fsr2l	equ	0xFD9
 15908                           status	equ	0xFD8
 15909                           
 15910 ;; *************** function _strcpy *****************
 15911 ;; Defined at:
 15912 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 15913 ;; Parameters:    Size  Location     Type
 15914 ;;  to              2    0[BANK0 ] PTR unsigned char 
 15915 ;;		 -> cmdbuf(80), 
 15916 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 15917 ;;		 -> cmdbuf(80), 
 15918 ;; Auto vars:     Size  Location     Type
 15919 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 15920 ;;		 -> cmdbuf(80), 
 15921 ;; Return value:  Size  Location     Type
 15922 ;;                  2    0[BANK0 ] PTR unsigned char 
 15923 ;; Registers used:
 15924 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15925 ;; Tracked objects:
 15926 ;;		On entry : F/1
 15927 ;;		On exit  : E/0
 15928 ;;		Unchanged: 0/0
 15929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15930 ;;      Params:         0       4       0       0       0       0       0
 15931 ;;      Locals:         0       2       0       0       0       0       0
 15932 ;;      Temps:          0       0       0       0       0       0       0
 15933 ;;      Totals:         0       6       0       0       0       0       0
 15934 ;;Total ram usage:        6 bytes
 15935 ;; Hardware stack levels used:    1
 15936 ;; Hardware stack levels required when called:    3
 15937 ;; This function calls:
 15938 ;;		Nothing
 15939 ;; This function is called by:
 15940 ;;		_doModeVerbose
 15941 ;; This function uses a non-reentrant model
 15942 ;;
 15943                           
 15944                           	psect	text27
 15945  0018FE                     __ptext27:
 15946                           	opt stack 0
 15947  0018FE                     _strcpy:
 15948                           	opt stack 25
 15949                           
 15950                           ; BSR set to: 1
 15951                           
 15952                           ;incstack = 0
 15953                           ;incstack = 0
 15954  0018FE  C060  F064         	movff	strcpy@to,strcpy@cp
 15955  001902  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 15956  001906  D005               	goto	l11514
 15957  001908                     l11512:
 15958  001908  0100               	movlb	0	; () banked
 15959  00190A  4B64               	infsnz	strcpy@cp& (0+255),f,b
 15960  00190C  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 15961  00190E  4B62               	infsnz	strcpy@from& (0+255),f,b
 15962  001910  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 15963  001912                     l11514:
 15964  001912  C062  FFD9         	movff	strcpy@from,fsr2l
 15965  001916  C063  FFDA         	movff	strcpy@from+1,fsr2h
 15966  00191A  C064  FFE1         	movff	strcpy@cp,fsr1l
 15967  00191E  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 15968  001922  CFDF FFE7          	movff	indf2,indf1
 15969  001926  50E7               	movf	indf1,w,c
 15970  001928  B4D8               	btfsc	status,2,c
 15971  00192A  0012               	return	
 15972  00192C  D7ED               	goto	l11512
 15973  00192E                     __end_of_strcpy:
 15974                           	opt stack 0
 15975                           tblptru	equ	0xFF8
 15976                           tblptrh	equ	0xFF7
 15977                           tblptrl	equ	0xFF6
 15978                           tablat	equ	0xFF5
 15979                           prodh	equ	0xFF4
 15980                           prodl	equ	0xFF3
 15981                           intcon	equ	0xFF2
 15982                           indf0	equ	0xFEF
 15983                           postinc0	equ	0xFEE
 15984                           fsr0h	equ	0xFEA
 15985                           fsr0l	equ	0xFE9
 15986                           wreg	equ	0xFE8
 15987                           indf1	equ	0xFE7
 15988                           postinc1	equ	0xFE6
 15989                           postdec1	equ	0xFE5
 15990                           fsr1h	equ	0xFE2
 15991                           fsr1l	equ	0xFE1
 15992                           indf2	equ	0xFDF
 15993                           postinc2	equ	0xFDE
 15994                           postdec2	equ	0xFDD
 15995                           plusw2	equ	0xFDB
 15996                           fsr2h	equ	0xFDA
 15997                           fsr2l	equ	0xFD9
 15998                           status	equ	0xFD8
 15999                           
 16000 ;; *************** function _findNodes *****************
 16001 ;; Defined at:
 16002 ;;		line 2572 in file "main.c"
 16003 ;; Parameters:    Size  Location     Type
 16004 ;;		None
 16005 ;; Auto vars:     Size  Location     Type
 16006 ;;  i               1  105[BANK0 ] unsigned char 
 16007 ;;  value           1  104[BANK0 ] unsigned char 
 16008 ;;  nFound          1  103[BANK0 ] unsigned char 
 16009 ;; Return value:  Size  Location     Type
 16010 ;;		None               void
 16011 ;; Registers used:
 16012 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16013 ;; Tracked objects:
 16014 ;;		On entry : F/1
 16015 ;;		On exit  : 0/0
 16016 ;;		Unchanged: 0/0
 16017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16018 ;;      Params:         0       0       0       0       0       0       0
 16019 ;;      Locals:         0       5       0       0       0       0       0
 16020 ;;      Temps:          0       0       0       0       0       0       0
 16021 ;;      Totals:         0       5       0       0       0       0       0
 16022 ;;Total ram usage:        5 bytes
 16023 ;; Hardware stack levels used:    1
 16024 ;; Hardware stack levels required when called:    9
 16025 ;; This function calls:
 16026 ;;		_putsUSART
 16027 ;;		_printNodeFirmwareVersion
 16028 ;;		_printGUID
 16029 ;;		_printMDF
 16030 ;;		_itoa
 16031 ;;		_readRegister
 16032 ;; This function is called by:
 16033 ;;		_doModeVerbose
 16034 ;; This function uses a non-reentrant model
 16035 ;;
 16036                           
 16037                           	psect	text28
 16038  003074                     __ptext28:
 16039                           	opt stack 0
 16040  003074                     _findNodes:
 16041                           	opt stack 19
 16042                           
 16043                           ; BSR set to: 1
 16044                           ;main.c: 2573: uint8_t nFound = 0;
 16045                           
 16046                           ;incstack = 0
 16047                           ;incstack = 0
 16048  003074  0100               	movlb	0	; () banked
 16049  003076  6BC7               	clrf	findNodes@nFound& (0+255),b
 16050                           
 16051                           ; BSR set to: 0
 16052                           ;main.c: 2574: uint8_t i;
 16053                           ;main.c: 2575: uint8_t value;
 16054                           ;main.c: 2577: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16055  003078  0E6E               	movlw	high STR_231
 16056  00307A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16057  00307C  0E53               	movlw	low STR_231
 16058  00307E  6F61               	movwf	?_putsUSART& (0+255),b
 16059  003080  EC9B  F00E         	call	_putsUSART	;wreg free
 16060                           
 16061                           ;main.c: 2579: for (i = 1; i != 0; i++) {
 16062  003084  0E01               	movlw	1
 16063  003086  0100               	movlb	0	; () banked
 16064  003088  6FC9               	movwf	findNodes@i& (0+255),b
 16065  00308A                     l1172:
 16066                           
 16067                           ; BSR set to: 0
 16068  00308A  0004               	clrwdt		;# 
 16069                           
 16070                           ;main.c: 2583: if (readRegister(i,
 16071                           ;main.c: 2584: 0xE0,
 16072                           ;main.c: 2585: rwtimeout,
 16073                           ;main.c: 2586: &value)) {
 16074  00308C  0EE0               	movlw	224
 16075  00308E  0100               	movlb	0	; () banked
 16076  003090  6FB6               	movwf	?_readRegister& (0+255),b
 16077  003092  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16078  003096  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16079  003098  0EC8               	movlw	low findNodes@value
 16080  00309A  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16081  00309C  51C9               	movf	findNodes@i& (0+255),w,b
 16082  00309E  EC21  F016         	call	_readRegister
 16083  0030A2  0900               	iorlw	0
 16084  0030A4  E043               	bz	l11500
 16085                           
 16086                           ;main.c: 2587: putsUSART((char *) "Node found with node id = ");
 16087  0030A6  0E78               	movlw	high STR_232
 16088  0030A8  0100               	movlb	0	; () banked
 16089  0030AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16090  0030AC  0E99               	movlw	low STR_232
 16091  0030AE  6F61               	movwf	?_putsUSART& (0+255),b
 16092  0030B0  EC9B  F00E         	call	_putsUSART	;wreg free
 16093                           
 16094                           ;main.c: 2588: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16095  0030B4  0101               	movlb	1	; () banked
 16096  0030B6  6700               	tstfsz	_bHex& (0+255),b
 16097  0030B8  D004               	goto	l11482
 16098                           
 16099                           ; BSR set to: 1
 16100  0030BA  0100               	movlb	0	; () banked
 16101  0030BC  6BC6               	clrf	(_findNodes$1461+1)& (0+255),b
 16102  0030BE  0E0A               	movlw	10
 16103  0030C0  D003               	goto	L13
 16104  0030C2                     l11482:
 16105                           
 16106                           ; BSR set to: 1
 16107  0030C2  0100               	movlb	0	; () banked
 16108  0030C4  6BC6               	clrf	(_findNodes$1461+1)& (0+255),b
 16109  0030C6  0E10               	movlw	16
 16110  0030C8                     L13:
 16111  0030C8  6FC5               	movwf	_findNodes$1461& (0+255),b
 16112                           
 16113                           ; BSR set to: 0
 16114  0030CA  0E01               	movlw	high _wrkbuf
 16115  0030CC  0100               	movlb	0	; () banked
 16116  0030CE  6F71               	movwf	(?_itoa+1)& (0+255),b
 16117  0030D0  0E54               	movlw	low _wrkbuf
 16118  0030D2  6F70               	movwf	?_itoa& (0+255),b
 16119  0030D4  C1AE  F072         	movff	_vscpNodeId,?_itoa+2
 16120  0030D8  6B73               	clrf	(?_itoa+3)& (0+255),b
 16121  0030DA  C0C5  F074         	movff	_findNodes$1461,?_itoa+4
 16122  0030DE  C0C6  F075         	movff	_findNodes$1461+1,?_itoa+5
 16123  0030E2  ECCB  F00C         	call	_itoa	;wreg free
 16124                           
 16125                           ; BSR set to: 0
 16126                           ;main.c: 2589: putsUSART(wrkbuf);
 16127  0030E6  0E01               	movlw	high _wrkbuf
 16128  0030E8  0100               	movlb	0	; () banked
 16129  0030EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16130  0030EC  0E54               	movlw	low _wrkbuf
 16131  0030EE  6F61               	movwf	?_putsUSART& (0+255),b
 16132  0030F0  EC9B  F00E         	call	_putsUSART	;wreg free
 16133                           
 16134                           ;main.c: 2590: putsUSART((char *) "\r\n");
 16135  0030F4  0E71               	movlw	high (STR_190+50)
 16136  0030F6  0100               	movlb	0	; () banked
 16137  0030F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16138  0030FA  0E8A               	movlw	low (STR_190+50)
 16139  0030FC  6F61               	movwf	?_putsUSART& (0+255),b
 16140  0030FE  EC9B  F00E         	call	_putsUSART	;wreg free
 16141                           
 16142                           ;main.c: 2591: printNodeFirmwareVersion(i);
 16143  003102  0100               	movlb	0	; () banked
 16144  003104  51C9               	movf	findNodes@i& (0+255),w,b
 16145  003106  EC88  F016         	call	_printNodeFirmwareVersion
 16146                           
 16147                           ;main.c: 2592: printGUID(i);
 16148  00310A  0100               	movlb	0	; () banked
 16149  00310C  51C9               	movf	findNodes@i& (0+255),w,b
 16150  00310E  EC32  F019         	call	_printGUID
 16151                           
 16152                           ;main.c: 2593: printMDF(i);
 16153  003112  0100               	movlb	0	; () banked
 16154  003114  51C9               	movf	findNodes@i& (0+255),w,b
 16155  003116  ECCD  F012         	call	_printMDF
 16156                           
 16157                           ;main.c: 2594: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16158  00311A  0E6E               	movlw	high STR_231
 16159  00311C  0100               	movlb	0	; () banked
 16160  00311E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16161  003120  0E53               	movlw	low STR_231
 16162  003122  6F61               	movwf	?_putsUSART& (0+255),b
 16163  003124  EC9B  F00E         	call	_putsUSART	;wreg free
 16164                           
 16165                           ;main.c: 2595: nFound++;
 16166  003128  0100               	movlb	0	; () banked
 16167  00312A  2BC7               	incf	findNodes@nFound& (0+255),f,b
 16168  00312C                     l11500:
 16169  00312C  0100               	movlb	0	; () banked
 16170  00312E  2BC9               	incf	findNodes@i& (0+255),f,b
 16171                           
 16172                           ; BSR set to: 0
 16173  003130  67C9               	tstfsz	findNodes@i& (0+255),b
 16174  003132  D7AB               	goto	l1172
 16175                           
 16176                           ; BSR set to: 0
 16177                           ;main.c: 2596: }
 16178                           ;main.c: 2598: }
 16179                           ;main.c: 2600: itoa(wrkbuf, nFound, 10);
 16180  003134  0E01               	movlw	high _wrkbuf
 16181  003136  6F71               	movwf	(?_itoa+1)& (0+255),b
 16182  003138  0E54               	movlw	low _wrkbuf
 16183  00313A  6F70               	movwf	?_itoa& (0+255),b
 16184  00313C  C0C7  F072         	movff	findNodes@nFound,?_itoa+2
 16185  003140  6B73               	clrf	(?_itoa+3)& (0+255),b
 16186  003142  6B75               	clrf	(?_itoa+5)& (0+255),b
 16187  003144  0E0A               	movlw	10
 16188  003146  6F74               	movwf	(?_itoa+4)& (0+255),b
 16189  003148  ECCB  F00C         	call	_itoa	;wreg free
 16190                           
 16191                           ; BSR set to: 0
 16192                           ;main.c: 2601: putsUSART(wrkbuf);
 16193  00314C  0E01               	movlw	high _wrkbuf
 16194  00314E  0100               	movlb	0	; () banked
 16195  003150  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16196  003152  0E54               	movlw	low _wrkbuf
 16197  003154  6F61               	movwf	?_putsUSART& (0+255),b
 16198  003156  EC9B  F00E         	call	_putsUSART	;wreg free
 16199                           
 16200                           ;main.c: 2602: putsUSART((char *) " nodes found\r\n");
 16201  00315A  0E7B               	movlw	high STR_235
 16202  00315C  0100               	movlb	0	; () banked
 16203  00315E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16204  003160  0E4E               	movlw	low STR_235
 16205  003162  6F61               	movwf	?_putsUSART& (0+255),b
 16206  003164  EF9B  F00E         	goto	_putsUSART	;wreg free
 16207  003168                     __end_of_findNodes:
 16208                           	opt stack 0
 16209                           tblptru	equ	0xFF8
 16210                           tblptrh	equ	0xFF7
 16211                           tblptrl	equ	0xFF6
 16212                           tablat	equ	0xFF5
 16213                           prodh	equ	0xFF4
 16214                           prodl	equ	0xFF3
 16215                           intcon	equ	0xFF2
 16216                           indf0	equ	0xFEF
 16217                           postinc0	equ	0xFEE
 16218                           fsr0h	equ	0xFEA
 16219                           fsr0l	equ	0xFE9
 16220                           wreg	equ	0xFE8
 16221                           indf1	equ	0xFE7
 16222                           postinc1	equ	0xFE6
 16223                           postdec1	equ	0xFE5
 16224                           fsr1h	equ	0xFE2
 16225                           fsr1l	equ	0xFE1
 16226                           indf2	equ	0xFDF
 16227                           postinc2	equ	0xFDE
 16228                           postdec2	equ	0xFDD
 16229                           plusw2	equ	0xFDB
 16230                           fsr2h	equ	0xFDA
 16231                           fsr2l	equ	0xFD9
 16232                           status	equ	0xFD8
 16233                           
 16234 ;; *************** function _printMDF *****************
 16235 ;; Defined at:
 16236 ;;		line 2653 in file "main.c"
 16237 ;; Parameters:    Size  Location     Type
 16238 ;;  nodeid          1    wreg     unsigned char 
 16239 ;; Auto vars:     Size  Location     Type
 16240 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16241 ;;  p               2   97[BANK0 ] PTR unsigned char 
 16242 ;;		 -> wrkbuf(80), 
 16243 ;;  i               1   99[BANK0 ] unsigned char 
 16244 ;;  value           1   96[BANK0 ] unsigned char 
 16245 ;; Return value:  Size  Location     Type
 16246 ;;		None               void
 16247 ;; Registers used:
 16248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16249 ;; Tracked objects:
 16250 ;;		On entry : D/2
 16251 ;;		On exit  : 0/0
 16252 ;;		Unchanged: 0/0
 16253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16254 ;;      Params:         0       0       0       0       0       0       0
 16255 ;;      Locals:         0       5       0       0       0       0       0
 16256 ;;      Temps:          0       0       0       0       0       0       0
 16257 ;;      Totals:         0       5       0       0       0       0       0
 16258 ;;Total ram usage:        5 bytes
 16259 ;; Hardware stack levels used:    1
 16260 ;; Hardware stack levels required when called:    8
 16261 ;; This function calls:
 16262 ;;		_putsUSART
 16263 ;;		_memset
 16264 ;;		_readRegister
 16265 ;; This function is called by:
 16266 ;;		_doModeVerbose
 16267 ;;		_findNodes
 16268 ;; This function uses a non-reentrant model
 16269 ;;
 16270                           
 16271                           	psect	text29
 16272  00259A                     __ptext29:
 16273                           	opt stack 0
 16274  00259A                     _printMDF:
 16275                           	opt stack 20
 16276                           
 16277                           ;incstack = 0
 16278                           ;incstack = 0
 16279                           ;printMDF@nodeid stored from wreg
 16280  00259A  CFE8 F0BF          	movff	wreg,printMDF@nodeid
 16281                           
 16282                           ;main.c: 2654: uint8_t i;
 16283                           ;main.c: 2655: uint8_t value;
 16284                           ;main.c: 2656: char *p = wrkbuf;
 16285  00259E  0E01               	movlw	high _wrkbuf
 16286  0025A0  0100               	movlb	0	; () banked
 16287  0025A2  6FC2               	movwf	(printMDF@p+1)& (0+255),b
 16288  0025A4  0E54               	movlw	low _wrkbuf
 16289  0025A6  6FC1               	movwf	printMDF@p& (0+255),b
 16290                           
 16291                           ; BSR set to: 0
 16292                           ;main.c: 2657: memset(wrkbuf, 0, sizeof (wrkbuf));
 16293  0025A8  0E01               	movlw	high _wrkbuf
 16294  0025AA  6F61               	movwf	(?_memset+1)& (0+255),b
 16295  0025AC  0E54               	movlw	low _wrkbuf
 16296  0025AE  6F60               	movwf	?_memset& (0+255),b
 16297  0025B0  6B63               	clrf	(?_memset+3)& (0+255),b
 16298  0025B2  6B62               	clrf	(?_memset+2)& (0+255),b
 16299  0025B4  6B65               	clrf	(?_memset+5)& (0+255),b
 16300  0025B6  0E50               	movlw	80
 16301  0025B8  6F64               	movwf	(?_memset+4)& (0+255),b
 16302  0025BA  EC51  F00C         	call	_memset	;wreg free
 16303                           
 16304                           ; BSR set to: 0
 16305                           ;main.c: 2658: putsUSART((char *) "MDF = http://");
 16306  0025BE  0E7B               	movlw	high STR_241
 16307  0025C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16308  0025C2  0E6C               	movlw	low STR_241
 16309  0025C4  6F61               	movwf	?_putsUSART& (0+255),b
 16310  0025C6  EC9B  F00E         	call	_putsUSART	;wreg free
 16311                           
 16312                           ;main.c: 2660: for (i = 0; i < 32; i++) {
 16313  0025CA  0100               	movlb	0	; () banked
 16314  0025CC  6BC3               	clrf	printMDF@i& (0+255),b
 16315  0025CE                     l12048:
 16316                           
 16317                           ; BSR set to: 0
 16318                           ;main.c: 2661: if (readRegister(nodeid,
 16319                           ;main.c: 2662: 0xE0 + i,
 16320                           ;main.c: 2663: rwtimeout,
 16321                           ;main.c: 2664: &value)) {
 16322  0025CE  51C3               	movf	printMDF@i& (0+255),w,b
 16323  0025D0  0FE0               	addlw	224
 16324  0025D2  6FB6               	movwf	?_readRegister& (0+255),b
 16325  0025D4  0100               	movlb	0	; () banked
 16326  0025D6  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16327  0025DA  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16328  0025DC  0EC0               	movlw	low printMDF@value
 16329  0025DE  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16330  0025E0  51BF               	movf	printMDF@nodeid& (0+255),w,b
 16331  0025E2  EC21  F016         	call	_readRegister
 16332  0025E6  0900               	iorlw	0
 16333  0025E8  E00A               	bz	l12054
 16334                           
 16335                           ;main.c: 2665: *p = value;
 16336  0025EA  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16337  0025EE  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16338  0025F2  C0C0  FFDF         	movff	printMDF@value,indf2
 16339  0025F6                     l12052:
 16340                           
 16341                           ;main.c: 2666: p++;
 16342  0025F6  0100               	movlb	0	; () banked
 16343  0025F8  4BC1               	infsnz	printMDF@p& (0+255),f,b
 16344  0025FA  2BC2               	incf	(printMDF@p+1)& (0+255),f,b
 16345                           
 16346                           ;main.c: 2668: }
 16347  0025FC  D007               	goto	l12058
 16348  0025FE                     l12054:
 16349                           
 16350                           ;main.c: 2669: else {
 16351                           ;main.c: 2670: *p = '?';
 16352  0025FE  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16353  002602  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16354  002606  0E3F               	movlw	63
 16355  002608  6EDF               	movwf	indf2,c
 16356  00260A  D7F5               	goto	l12052
 16357  00260C                     l12058:
 16358                           
 16359                           ; BSR set to: 0
 16360  00260C  2BC3               	incf	printMDF@i& (0+255),f,b
 16361                           
 16362                           ; BSR set to: 0
 16363  00260E  0E1F               	movlw	31
 16364  002610  65C3               	cpfsgt	printMDF@i& (0+255),b
 16365  002612  D7DD               	goto	l12048
 16366                           
 16367                           ; BSR set to: 0
 16368                           ;main.c: 2672: }
 16369                           ;main.c: 2673: }
 16370                           ;main.c: 2675: putsUSART(wrkbuf);
 16371  002614  0E01               	movlw	high _wrkbuf
 16372  002616  0100               	movlb	0	; () banked
 16373  002618  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16374  00261A  0E54               	movlw	low _wrkbuf
 16375  00261C  6F61               	movwf	?_putsUSART& (0+255),b
 16376  00261E  EC9B  F00E         	call	_putsUSART	;wreg free
 16377                           
 16378                           ;main.c: 2676: putsUSART((char *) "\r\n");
 16379  002622  0E71               	movlw	high (STR_190+50)
 16380  002624  0100               	movlb	0	; () banked
 16381  002626  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16382  002628  0E8A               	movlw	low (STR_190+50)
 16383  00262A  6F61               	movwf	?_putsUSART& (0+255),b
 16384  00262C  EF9B  F00E         	goto	_putsUSART	;wreg free
 16385  002630                     __end_of_printMDF:
 16386                           	opt stack 0
 16387                           tblptru	equ	0xFF8
 16388                           tblptrh	equ	0xFF7
 16389                           tblptrl	equ	0xFF6
 16390                           tablat	equ	0xFF5
 16391                           prodh	equ	0xFF4
 16392                           prodl	equ	0xFF3
 16393                           intcon	equ	0xFF2
 16394                           indf0	equ	0xFEF
 16395                           postinc0	equ	0xFEE
 16396                           fsr0h	equ	0xFEA
 16397                           fsr0l	equ	0xFE9
 16398                           wreg	equ	0xFE8
 16399                           indf1	equ	0xFE7
 16400                           postinc1	equ	0xFE6
 16401                           postdec1	equ	0xFE5
 16402                           fsr1h	equ	0xFE2
 16403                           fsr1l	equ	0xFE1
 16404                           indf2	equ	0xFDF
 16405                           postinc2	equ	0xFDE
 16406                           postdec2	equ	0xFDD
 16407                           plusw2	equ	0xFDB
 16408                           fsr2h	equ	0xFDA
 16409                           fsr2l	equ	0xFD9
 16410                           status	equ	0xFD8
 16411                           
 16412 ;; *************** function _printGUID *****************
 16413 ;; Defined at:
 16414 ;;		line 2612 in file "main.c"
 16415 ;; Parameters:    Size  Location     Type
 16416 ;;  nodeid          1    wreg     unsigned char 
 16417 ;; Auto vars:     Size  Location     Type
 16418 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16419 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16420 ;;  i               1  100[BANK0 ] unsigned char 
 16421 ;;  value           1   99[BANK0 ] unsigned char 
 16422 ;; Return value:  Size  Location     Type
 16423 ;;		None               void
 16424 ;; Registers used:
 16425 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16426 ;; Tracked objects:
 16427 ;;		On entry : D/2
 16428 ;;		On exit  : 0/0
 16429 ;;		Unchanged: 0/0
 16430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16431 ;;      Params:         0       0       0       0       0       0       0
 16432 ;;      Locals:         0       6       0       0       0       0       0
 16433 ;;      Temps:          0       0       0       0       0       0       0
 16434 ;;      Totals:         0       6       0       0       0       0       0
 16435 ;;Total ram usage:        6 bytes
 16436 ;; Hardware stack levels used:    1
 16437 ;; Hardware stack levels required when called:    8
 16438 ;; This function calls:
 16439 ;;		_putsUSART
 16440 ;;		_memset
 16441 ;;		_strlen
 16442 ;;		_itoa
 16443 ;;		_readRegister
 16444 ;;		_strcat
 16445 ;; This function is called by:
 16446 ;;		_doModeVerbose
 16447 ;;		_findNodes
 16448 ;; This function uses a non-reentrant model
 16449 ;;
 16450                           
 16451                           	psect	text30
 16452  003264                     __ptext30:
 16453                           	opt stack 0
 16454  003264                     _printGUID:
 16455                           	opt stack 20
 16456                           
 16457                           ;incstack = 0
 16458                           ;incstack = 0
 16459                           ;printGUID@nodeid stored from wreg
 16460  003264  CFE8 F0BF          	movff	wreg,printGUID@nodeid
 16461                           
 16462                           ;main.c: 2613: uint8_t i;
 16463                           ;main.c: 2614: uint8_t value;
 16464                           ;main.c: 2615: char buf[3];
 16465                           ;main.c: 2617: memset(wrkbuf, 0, sizeof (wrkbuf));
 16466  003268  0E01               	movlw	high _wrkbuf
 16467  00326A  0100               	movlb	0	; () banked
 16468  00326C  6F61               	movwf	(?_memset+1)& (0+255),b
 16469  00326E  0E54               	movlw	low _wrkbuf
 16470  003270  6F60               	movwf	?_memset& (0+255),b
 16471  003272  6B63               	clrf	(?_memset+3)& (0+255),b
 16472  003274  6B62               	clrf	(?_memset+2)& (0+255),b
 16473  003276  6B65               	clrf	(?_memset+5)& (0+255),b
 16474  003278  0E50               	movlw	80
 16475  00327A  6F64               	movwf	(?_memset+4)& (0+255),b
 16476  00327C  EC51  F00C         	call	_memset	;wreg free
 16477                           
 16478                           ; BSR set to: 0
 16479                           ;main.c: 2618: putsUSART((char *) "GUID = ");
 16480  003280  0E7B               	movlw	high STR_236
 16481  003282  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16482  003284  0EE5               	movlw	low STR_236
 16483  003286  6F61               	movwf	?_putsUSART& (0+255),b
 16484  003288  EC9B  F00E         	call	_putsUSART	;wreg free
 16485                           
 16486                           ;main.c: 2620: for (i = 0; i < 16; i++) {
 16487  00328C  0100               	movlb	0	; () banked
 16488  00328E  6BC4               	clrf	printGUID@i& (0+255),b
 16489  003290                     l12014:
 16490                           
 16491                           ; BSR set to: 0
 16492                           ;main.c: 2621: if (readRegister(nodeid,
 16493                           ;main.c: 2622: 0xD0 + i,
 16494                           ;main.c: 2623: rwtimeout,
 16495                           ;main.c: 2624: &value)) {
 16496  003290  51C4               	movf	printGUID@i& (0+255),w,b
 16497  003292  0FD0               	addlw	208
 16498  003294  6FB6               	movwf	?_readRegister& (0+255),b
 16499  003296  0100               	movlb	0	; () banked
 16500  003298  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16501  00329C  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16502  00329E  0EC3               	movlw	low printGUID@value
 16503  0032A0  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16504  0032A2  51BF               	movf	printGUID@nodeid& (0+255),w,b
 16505  0032A4  EC21  F016         	call	_readRegister
 16506  0032A8  0900               	iorlw	0
 16507  0032AA  E029               	bz	l12024
 16508                           
 16509                           ;main.c: 2625: itoa(buf, value, 16);
 16510  0032AC  0100               	movlb	0	; () banked
 16511  0032AE  0E00               	movlw	high printGUID@buf
 16512  0032B0  6F71               	movwf	(?_itoa+1)& (0+255),b
 16513  0032B2  0EC0               	movlw	low printGUID@buf
 16514  0032B4  6F70               	movwf	?_itoa& (0+255),b
 16515  0032B6  C0C3  F072         	movff	printGUID@value,?_itoa+2
 16516  0032BA  6B73               	clrf	(?_itoa+3)& (0+255),b
 16517  0032BC  6B75               	clrf	(?_itoa+5)& (0+255),b
 16518  0032BE  0E10               	movlw	16
 16519  0032C0  6F74               	movwf	(?_itoa+4)& (0+255),b
 16520  0032C2  ECCB  F00C         	call	_itoa	;wreg free
 16521                           
 16522                           ; BSR set to: 0
 16523                           ;main.c: 2626: if (1 == strlen(buf)) {
 16524  0032C6  0E00               	movlw	high printGUID@buf
 16525  0032C8  6F61               	movwf	(?_strlen+1)& (0+255),b
 16526  0032CA  0EC0               	movlw	low printGUID@buf
 16527  0032CC  6F60               	movwf	?_strlen& (0+255),b
 16528  0032CE  EC80  F00D         	call	_strlen	;wreg free
 16529  0032D2  0560               	decf	?_strlen& (0+255),w,b
 16530  0032D4  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 16531  0032D6  E10F               	bnz	l12022
 16532                           
 16533                           ; BSR set to: 0
 16534                           ;main.c: 2627: strcat(wrkbuf, "0");
 16535  0032D8  0E01               	movlw	high _wrkbuf
 16536  0032DA  0100               	movlb	0	; () banked
 16537  0032DC  6F61               	movwf	(?_strcat+1)& (0+255),b
 16538  0032DE  0E54               	movlw	low _wrkbuf
 16539  0032E0  6F60               	movwf	?_strcat& (0+255),b
 16540  0032E2  0E7C               	movlw	high STR_237
 16541  0032E4  6F63               	movwf	(?_strcat+3)& (0+255),b
 16542  0032E6  0EF8               	movlw	low STR_237
 16543  0032E8  6F62               	movwf	(?_strcat+2)& (0+255),b
 16544  0032EA  ECC7  F00E         	call	_strcat	;wreg free
 16545                           
 16546                           ;main.c: 2628: strcat(wrkbuf, buf);
 16547  0032EE  D832               	call	PL72	;call to abstracted procedure
 16548  0032F0  ECC7  F00E         	call	_strcat	;wreg free
 16549                           
 16550                           ;main.c: 2629: } else {
 16551  0032F4  D00F               	goto	l12026
 16552  0032F6                     l12022:
 16553                           
 16554                           ; BSR set to: 0
 16555                           ;main.c: 2630: strcat(wrkbuf, buf);
 16556  0032F6  D82E               	call	PL72	;call to abstracted procedure
 16557  0032F8  ECC7  F00E         	call	_strcat	;wreg free
 16558  0032FC  D00B               	goto	l12026
 16559  0032FE                     l12024:
 16560                           
 16561                           ;main.c: 2634: strcat(wrkbuf, "--");
 16562  0032FE  0E01               	movlw	high _wrkbuf
 16563  003300  0100               	movlb	0	; () banked
 16564  003302  6F61               	movwf	(?_strcat+1)& (0+255),b
 16565  003304  0E54               	movlw	low _wrkbuf
 16566  003306  6F60               	movwf	?_strcat& (0+255),b
 16567  003308  0E7C               	movlw	high STR_238
 16568  00330A  6F63               	movwf	(?_strcat+3)& (0+255),b
 16569  00330C  0EE4               	movlw	low STR_238
 16570  00330E  6F62               	movwf	(?_strcat+2)& (0+255),b
 16571  003310  ECC7  F00E         	call	_strcat	;wreg free
 16572  003314                     l12026:
 16573                           
 16574                           ;main.c: 2635: }
 16575                           ;main.c: 2637: if (i < 15) {
 16576  003314  0E0F               	movlw	15
 16577  003316  0100               	movlb	0	; () banked
 16578  003318  61C4               	cpfslt	printGUID@i& (0+255),b
 16579  00331A  D00A               	goto	l12030
 16580                           
 16581                           ; BSR set to: 0
 16582                           ;main.c: 2638: strcat(wrkbuf, ":");
 16583  00331C  0E01               	movlw	high _wrkbuf
 16584  00331E  6F61               	movwf	(?_strcat+1)& (0+255),b
 16585  003320  0E54               	movlw	low _wrkbuf
 16586  003322  6F60               	movwf	?_strcat& (0+255),b
 16587  003324  0E7C               	movlw	high STR_239
 16588  003326  6F63               	movwf	(?_strcat+3)& (0+255),b
 16589  003328  0EFA               	movlw	low STR_239
 16590  00332A  6F62               	movwf	(?_strcat+2)& (0+255),b
 16591  00332C  ECC7  F00E         	call	_strcat	;wreg free
 16592  003330                     l12030:
 16593  003330  0100               	movlb	0	; () banked
 16594  003332  2BC4               	incf	printGUID@i& (0+255),f,b
 16595                           
 16596                           ; BSR set to: 0
 16597  003334  0E0F               	movlw	15
 16598  003336  65C4               	cpfsgt	printGUID@i& (0+255),b
 16599  003338  D7AB               	goto	l12014
 16600                           
 16601                           ; BSR set to: 0
 16602                           ;main.c: 2639: }
 16603                           ;main.c: 2641: }
 16604                           ;main.c: 2643: putsUSART(wrkbuf);
 16605  00333A  0E01               	movlw	high _wrkbuf
 16606  00333C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16607  00333E  0E54               	movlw	low _wrkbuf
 16608  003340  6F61               	movwf	?_putsUSART& (0+255),b
 16609  003342  EC9B  F00E         	call	_putsUSART	;wreg free
 16610                           
 16611                           ;main.c: 2644: putsUSART((char *) "\r\n");
 16612  003346  0E71               	movlw	high (STR_190+50)
 16613  003348  0100               	movlb	0	; () banked
 16614  00334A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16615  00334C  0E8A               	movlw	low (STR_190+50)
 16616  00334E  6F61               	movwf	?_putsUSART& (0+255),b
 16617  003350  EF9B  F00E         	goto	_putsUSART	;wreg free
 16618  003354                     __end_of_printGUID:
 16619                           	opt stack 0
 16620  003354                     PL72:
 16621                           	opt stack 20
 16622  003354  0E01               	movlw	high _wrkbuf
 16623  003356  0100               	movlb	0	; () banked
 16624  003358  6F61               	movwf	(?_strcat+1)& (0+255),b
 16625  00335A  0E54               	movlw	low _wrkbuf
 16626  00335C  6F60               	movwf	?_strcat& (0+255),b
 16627  00335E  0E00               	movlw	high printGUID@buf
 16628  003360  6F63               	movwf	(?_strcat+3)& (0+255),b
 16629  003362  0EC0               	movlw	low printGUID@buf
 16630  003364  6F62               	movwf	(?_strcat+2)& (0+255),b
 16631  003366  0012               	return	
 16632  003368                     __end_ofPL72:
 16633                           	opt stack 0
 16634                           tblptru	equ	0xFF8
 16635                           tblptrh	equ	0xFF7
 16636                           tblptrl	equ	0xFF6
 16637                           tablat	equ	0xFF5
 16638                           prodh	equ	0xFF4
 16639                           prodl	equ	0xFF3
 16640                           intcon	equ	0xFF2
 16641                           indf0	equ	0xFEF
 16642                           postinc0	equ	0xFEE
 16643                           fsr0h	equ	0xFEA
 16644                           fsr0l	equ	0xFE9
 16645                           wreg	equ	0xFE8
 16646                           indf1	equ	0xFE7
 16647                           postinc1	equ	0xFE6
 16648                           postdec1	equ	0xFE5
 16649                           fsr1h	equ	0xFE2
 16650                           fsr1l	equ	0xFE1
 16651                           indf2	equ	0xFDF
 16652                           postinc2	equ	0xFDE
 16653                           postdec2	equ	0xFDD
 16654                           plusw2	equ	0xFDB
 16655                           fsr2h	equ	0xFDA
 16656                           fsr2l	equ	0xFD9
 16657                           status	equ	0xFD8
 16658                           
 16659 ;; *************** function _printNodeFirmwareVersion *****************
 16660 ;; Defined at:
 16661 ;;		line 2684 in file "main.c"
 16662 ;; Parameters:    Size  Location     Type
 16663 ;;  nodeid          1    wreg     unsigned char 
 16664 ;; Auto vars:     Size  Location     Type
 16665 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16666 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16667 ;;  i               1  100[BANK0 ] unsigned char 
 16668 ;;  value           1   99[BANK0 ] unsigned char 
 16669 ;; Return value:  Size  Location     Type
 16670 ;;		None               void
 16671 ;; Registers used:
 16672 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16673 ;; Tracked objects:
 16674 ;;		On entry : D/2
 16675 ;;		On exit  : 0/0
 16676 ;;		Unchanged: 0/0
 16677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16678 ;;      Params:         0       0       0       0       0       0       0
 16679 ;;      Locals:         0       6       0       0       0       0       0
 16680 ;;      Temps:          0       0       0       0       0       0       0
 16681 ;;      Totals:         0       6       0       0       0       0       0
 16682 ;;Total ram usage:        6 bytes
 16683 ;; Hardware stack levels used:    1
 16684 ;; Hardware stack levels required when called:    8
 16685 ;; This function calls:
 16686 ;;		_putsUSART
 16687 ;;		_memset
 16688 ;;		_itoa
 16689 ;;		_readRegister
 16690 ;;		_strcat
 16691 ;; This function is called by:
 16692 ;;		_doModeVerbose
 16693 ;;		_findNodes
 16694 ;; This function uses a non-reentrant model
 16695 ;;
 16696                           
 16697                           	psect	text31
 16698  002D10                     __ptext31:
 16699                           	opt stack 0
 16700  002D10                     _printNodeFirmwareVersion:
 16701                           	opt stack 20
 16702                           
 16703                           ;incstack = 0
 16704                           ;incstack = 0
 16705                           ;printNodeFirmwareVersion@nodeid stored from wreg
 16706  002D10  CFE8 F0BF          	movff	wreg,printNodeFirmwareVersion@nodeid
 16707                           
 16708                           ;main.c: 2685: uint8_t i;
 16709                           ;main.c: 2686: uint8_t value;
 16710                           ;main.c: 2687: char buf[3];
 16711                           ;main.c: 2689: memset(wrkbuf, 0, sizeof (wrkbuf));
 16712  002D14  0E01               	movlw	high _wrkbuf
 16713  002D16  0100               	movlb	0	; () banked
 16714  002D18  6F61               	movwf	(?_memset+1)& (0+255),b
 16715  002D1A  0E54               	movlw	low _wrkbuf
 16716  002D1C  6F60               	movwf	?_memset& (0+255),b
 16717  002D1E  6B63               	clrf	(?_memset+3)& (0+255),b
 16718  002D20  6B62               	clrf	(?_memset+2)& (0+255),b
 16719  002D22  6B65               	clrf	(?_memset+5)& (0+255),b
 16720  002D24  0E50               	movlw	80
 16721  002D26  6F64               	movwf	(?_memset+4)& (0+255),b
 16722  002D28  EC51  F00C         	call	_memset	;wreg free
 16723                           
 16724                           ; BSR set to: 0
 16725                           ;main.c: 2690: putsUSART((char *) "Firmware version = ");
 16726  002D2C  0E7A               	movlw	high STR_243
 16727  002D2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16728  002D30  0EBE               	movlw	low STR_243
 16729  002D32  6F61               	movwf	?_putsUSART& (0+255),b
 16730  002D34  EC9B  F00E         	call	_putsUSART	;wreg free
 16731                           
 16732                           ;main.c: 2692: for (i = 0; i < 3; i++) {
 16733  002D38  0100               	movlb	0	; () banked
 16734  002D3A  6BC4               	clrf	printNodeFirmwareVersion@i& (0+255),b
 16735  002D3C                     l11986:
 16736                           
 16737                           ; BSR set to: 0
 16738                           ;main.c: 2693: if (readRegister(nodeid,
 16739                           ;main.c: 2694: 0x94 + i,
 16740                           ;main.c: 2695: rwtimeout,
 16741                           ;main.c: 2696: &value)) {
 16742  002D3C  51C4               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 16743  002D3E  0F94               	addlw	148
 16744  002D40  6FB6               	movwf	?_readRegister& (0+255),b
 16745  002D42  0100               	movlb	0	; () banked
 16746  002D44  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16747  002D48  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16748  002D4A  0EC3               	movlw	low printNodeFirmwareVersion@value
 16749  002D4C  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16750  002D4E  51BF               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 16751  002D50  EC21  F016         	call	_readRegister
 16752  002D54  0900               	iorlw	0
 16753  002D56  E019               	bz	l11992
 16754                           
 16755                           ;main.c: 2697: itoa(buf, value, 16);
 16756  002D58  0100               	movlb	0	; () banked
 16757  002D5A  0E00               	movlw	high printNodeFirmwareVersion@buf
 16758  002D5C  6F71               	movwf	(?_itoa+1)& (0+255),b
 16759  002D5E  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16760  002D60  6F70               	movwf	?_itoa& (0+255),b
 16761  002D62  C0C3  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 16762  002D66  6B73               	clrf	(?_itoa+3)& (0+255),b
 16763  002D68  6B75               	clrf	(?_itoa+5)& (0+255),b
 16764  002D6A  0E10               	movlw	16
 16765  002D6C  6F74               	movwf	(?_itoa+4)& (0+255),b
 16766  002D6E  ECCB  F00C         	call	_itoa	;wreg free
 16767                           
 16768                           ; BSR set to: 0
 16769                           ;main.c: 2698: strcat(wrkbuf, buf);
 16770  002D72  0E01               	movlw	high _wrkbuf
 16771  002D74  0100               	movlb	0	; () banked
 16772  002D76  6F61               	movwf	(?_strcat+1)& (0+255),b
 16773  002D78  0E54               	movlw	low _wrkbuf
 16774  002D7A  6F60               	movwf	?_strcat& (0+255),b
 16775  002D7C  0E00               	movlw	high printNodeFirmwareVersion@buf
 16776  002D7E  6F63               	movwf	(?_strcat+3)& (0+255),b
 16777  002D80  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16778  002D82  6F62               	movwf	(?_strcat+2)& (0+255),b
 16779  002D84  ECC7  F00E         	call	_strcat	;wreg free
 16780                           
 16781                           ;main.c: 2699: }
 16782  002D88  D00B               	goto	l11994
 16783  002D8A                     l11992:
 16784                           
 16785                           ;main.c: 2700: else {
 16786                           ;main.c: 2701: strcat(wrkbuf, "?");
 16787  002D8A  0E01               	movlw	high _wrkbuf
 16788  002D8C  0100               	movlb	0	; () banked
 16789  002D8E  6F61               	movwf	(?_strcat+1)& (0+255),b
 16790  002D90  0E54               	movlw	low _wrkbuf
 16791  002D92  6F60               	movwf	?_strcat& (0+255),b
 16792  002D94  0E7C               	movlw	high STR_244
 16793  002D96  6F63               	movwf	(?_strcat+3)& (0+255),b
 16794  002D98  0EFC               	movlw	low STR_244
 16795  002D9A  6F62               	movwf	(?_strcat+2)& (0+255),b
 16796  002D9C  ECC7  F00E         	call	_strcat	;wreg free
 16797  002DA0                     l11994:
 16798                           
 16799                           ;main.c: 2702: }
 16800                           ;main.c: 2704: if (i < 2) {
 16801  002DA0  0E02               	movlw	2
 16802  002DA2  0100               	movlb	0	; () banked
 16803  002DA4  61C4               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 16804  002DA6  D00A               	goto	l11998
 16805                           
 16806                           ; BSR set to: 0
 16807                           ;main.c: 2705: strcat(wrkbuf, ".");
 16808  002DA8  0E01               	movlw	high _wrkbuf
 16809  002DAA  6F61               	movwf	(?_strcat+1)& (0+255),b
 16810  002DAC  0E54               	movlw	low _wrkbuf
 16811  002DAE  6F60               	movwf	?_strcat& (0+255),b
 16812  002DB0  0E7C               	movlw	high STR_245
 16813  002DB2  6F63               	movwf	(?_strcat+3)& (0+255),b
 16814  002DB4  0EF6               	movlw	low STR_245
 16815  002DB6  6F62               	movwf	(?_strcat+2)& (0+255),b
 16816  002DB8  ECC7  F00E         	call	_strcat	;wreg free
 16817  002DBC                     l11998:
 16818  002DBC  0100               	movlb	0	; () banked
 16819  002DBE  2BC4               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 16820                           
 16821                           ; BSR set to: 0
 16822  002DC0  0E02               	movlw	2
 16823  002DC2  65C4               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 16824  002DC4  D7BB               	goto	l11986
 16825                           
 16826                           ; BSR set to: 0
 16827                           ;main.c: 2706: }
 16828                           ;main.c: 2708: }
 16829                           ;main.c: 2710: putsUSART(wrkbuf);
 16830  002DC6  0E01               	movlw	high _wrkbuf
 16831  002DC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16832  002DCA  0E54               	movlw	low _wrkbuf
 16833  002DCC  6F61               	movwf	?_putsUSART& (0+255),b
 16834  002DCE  EC9B  F00E         	call	_putsUSART	;wreg free
 16835                           
 16836                           ;main.c: 2711: putsUSART((char *) "\r\n");
 16837  002DD2  0E71               	movlw	high (STR_190+50)
 16838  002DD4  0100               	movlb	0	; () banked
 16839  002DD6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16840  002DD8  0E8A               	movlw	low (STR_190+50)
 16841  002DDA  6F61               	movwf	?_putsUSART& (0+255),b
 16842  002DDC  EF9B  F00E         	goto	_putsUSART	;wreg free
 16843  002DE0                     __end_of_printNodeFirmwareVersion:
 16844                           	opt stack 0
 16845                           tblptru	equ	0xFF8
 16846                           tblptrh	equ	0xFF7
 16847                           tblptrl	equ	0xFF6
 16848                           tablat	equ	0xFF5
 16849                           prodh	equ	0xFF4
 16850                           prodl	equ	0xFF3
 16851                           intcon	equ	0xFF2
 16852                           indf0	equ	0xFEF
 16853                           postinc0	equ	0xFEE
 16854                           fsr0h	equ	0xFEA
 16855                           fsr0l	equ	0xFE9
 16856                           wreg	equ	0xFE8
 16857                           indf1	equ	0xFE7
 16858                           postinc1	equ	0xFE6
 16859                           postdec1	equ	0xFE5
 16860                           fsr1h	equ	0xFE2
 16861                           fsr1l	equ	0xFE1
 16862                           indf2	equ	0xFDF
 16863                           postinc2	equ	0xFDE
 16864                           postdec2	equ	0xFDD
 16865                           plusw2	equ	0xFDB
 16866                           fsr2h	equ	0xFDA
 16867                           fsr2l	equ	0xFD9
 16868                           status	equ	0xFD8
 16869                           
 16870 ;; *************** function _strcat *****************
 16871 ;; Defined at:
 16872 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 16873 ;; Parameters:    Size  Location     Type
 16874 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16875 ;;		 -> wrkbuf(80), 
 16876 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16877 ;;		 -> STR_245(2), STR_244(2), printNodeFirmwareVersion@buf(3), STR_239(2), 
 16878 ;;		 -> STR_238(3), STR_237(2), printGUID@buf(3), 
 16879 ;; Auto vars:     Size  Location     Type
 16880 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16881 ;;		 -> wrkbuf(80), 
 16882 ;; Return value:  Size  Location     Type
 16883 ;;                  2    0[BANK0 ] PTR unsigned char 
 16884 ;; Registers used:
 16885 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16886 ;; Tracked objects:
 16887 ;;		On entry : F/0
 16888 ;;		On exit  : 0/0
 16889 ;;		Unchanged: 0/0
 16890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16891 ;;      Params:         0       4       0       0       0       0       0
 16892 ;;      Locals:         0       2       0       0       0       0       0
 16893 ;;      Temps:          0       0       0       0       0       0       0
 16894 ;;      Totals:         0       6       0       0       0       0       0
 16895 ;;Total ram usage:        6 bytes
 16896 ;; Hardware stack levels used:    1
 16897 ;; Hardware stack levels required when called:    3
 16898 ;; This function calls:
 16899 ;;		Nothing
 16900 ;; This function is called by:
 16901 ;;		_printGUID
 16902 ;;		_printNodeFirmwareVersion
 16903 ;; This function uses a non-reentrant model
 16904 ;;
 16905                           
 16906                           	psect	text32
 16907  001D8E                     __ptext32:
 16908                           	opt stack 0
 16909  001D8E                     _strcat:
 16910                           	opt stack 24
 16911                           
 16912                           ; BSR set to: 0
 16913                           
 16914                           ;incstack = 0
 16915                           ;incstack = 0
 16916  001D8E  C060  F064         	movff	strcat@to,strcat@cp
 16917  001D92  C061  F065         	movff	strcat@to+1,strcat@cp+1
 16918  001D96  D002               	goto	l12684
 16919  001D98                     l12682:
 16920                           
 16921                           ; BSR set to: 0
 16922  001D98  4B64               	infsnz	strcat@cp& (0+255),f,b
 16923  001D9A  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16924  001D9C                     l12684:
 16925                           
 16926                           ; BSR set to: 0
 16927  001D9C  C064  FFD9         	movff	strcat@cp,fsr2l
 16928  001DA0  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16929  001DA4  50DF               	movf	indf2,w,c
 16930  001DA6  E006               	bz	l12688
 16931  001DA8  D7F7               	goto	l12682
 16932  001DAA                     l12686:
 16933  001DAA  0100               	movlb	0	; () banked
 16934  001DAC  4B64               	infsnz	strcat@cp& (0+255),f,b
 16935  001DAE  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16936  001DB0  4B62               	infsnz	strcat@from& (0+255),f,b
 16937  001DB2  2B63               	incf	(strcat@from+1)& (0+255),f,b
 16938  001DB4                     l12688:
 16939                           
 16940                           ; BSR set to: 0
 16941  001DB4  C062  FFF6         	movff	strcat@from,tblptrl
 16942  001DB8  C063  FFF7         	movff	strcat@from+1,tblptrh
 16943  001DBC  6AF8               	clrf	tblptru,c
 16944  001DBE  C064  FFD9         	movff	strcat@cp,fsr2l
 16945  001DC2  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16946  001DC6  0E05               	movlw	(high __ramtop+-1)
 16947  001DC8  64F7               	cpfsgt	tblptrh,c
 16948  001DCA  D003               	bra	u16457
 16949  001DCC  0008               	tblrd		*
 16950  001DCE  50F5               	movf	tablat,w,c
 16951  001DD0  D005               	bra	u16450
 16952  001DD2                     u16457:
 16953  001DD2  CFF6 FFE9          	movff	tblptrl,fsr0l
 16954  001DD6  CFF7 FFEA          	movff	tblptrh,fsr0h
 16955  001DDA  50EF               	movf	indf0,w,c
 16956  001DDC                     u16450:
 16957  001DDC  6EDF               	movwf	indf2,c
 16958  001DDE  50DF               	movf	indf2,w,c
 16959  001DE0  B4D8               	btfsc	status,2,c
 16960  001DE2  0012               	return	
 16961  001DE4  D7E2               	goto	l12686
 16962  001DE6                     __end_of_strcat:
 16963                           	opt stack 0
 16964                           tblptru	equ	0xFF8
 16965                           tblptrh	equ	0xFF7
 16966                           tblptrl	equ	0xFF6
 16967                           tablat	equ	0xFF5
 16968                           prodh	equ	0xFF4
 16969                           prodl	equ	0xFF3
 16970                           intcon	equ	0xFF2
 16971                           indf0	equ	0xFEF
 16972                           postinc0	equ	0xFEE
 16973                           fsr0h	equ	0xFEA
 16974                           fsr0l	equ	0xFE9
 16975                           wreg	equ	0xFE8
 16976                           indf1	equ	0xFE7
 16977                           postinc1	equ	0xFE6
 16978                           postdec1	equ	0xFE5
 16979                           fsr1h	equ	0xFE2
 16980                           fsr1l	equ	0xFE1
 16981                           indf2	equ	0xFDF
 16982                           postinc2	equ	0xFDE
 16983                           postdec2	equ	0xFDD
 16984                           plusw2	equ	0xFDB
 16985                           fsr2h	equ	0xFDA
 16986                           fsr2l	equ	0xFD9
 16987                           status	equ	0xFD8
 16988                           
 16989 ;; *************** function _readRegister *****************
 16990 ;; Defined at:
 16991 ;;		line 2187 in file "main.c"
 16992 ;; Parameters:    Size  Location     Type
 16993 ;;  nodeid          1    wreg     unsigned char 
 16994 ;;  reg             1   86[BANK0 ] unsigned char 
 16995 ;;  timeout         2   87[BANK0 ] unsigned short 
 16996 ;;  value           1   89[BANK0 ] PTR unsigned char 
 16997 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 16998 ;; Auto vars:     Size  Location     Type
 16999 ;;  nodeid          1   94[BANK0 ] unsigned char 
 17000 ;; Return value:  Size  Location     Type
 17001 ;;                  1    wreg      enum E15660
 17002 ;; Registers used:
 17003 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17004 ;; Tracked objects:
 17005 ;;		On entry : F/0
 17006 ;;		On exit  : E/0
 17007 ;;		Unchanged: 0/0
 17008 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17009 ;;      Params:         0       4       0       0       0       0       0
 17010 ;;      Locals:         0       1       0       0       0       0       0
 17011 ;;      Temps:          0       4       0       0       0       0       0
 17012 ;;      Totals:         0       9       0       0       0       0       0
 17013 ;;Total ram usage:        9 bytes
 17014 ;; Hardware stack levels used:    1
 17015 ;; Hardware stack levels required when called:    7
 17016 ;; This function calls:
 17017 ;;		_sendVSCPFrame
 17018 ;;		_getVSCPFrame
 17019 ;; This function is called by:
 17020 ;;		_findNodes
 17021 ;;		_printGUID
 17022 ;;		_printMDF
 17023 ;;		_printNodeFirmwareVersion
 17024 ;; This function uses a non-reentrant model
 17025 ;;
 17026                           
 17027                           	psect	text33
 17028  002C42                     __ptext33:
 17029                           	opt stack 0
 17030  002C42                     _readRegister:
 17031                           	opt stack 20
 17032                           
 17033                           ;incstack = 0
 17034                           ;incstack = 0
 17035                           ;readRegister@nodeid stored from wreg
 17036  002C42  CFE8 F0BE          	movff	wreg,readRegister@nodeid
 17037                           
 17038                           ; BSR set to: 0
 17039                           ;main.c: 2188: vscpData[ 0 ] = nodeid;
 17040  002C46  C0BE  F1A4         	movff	readRegister@nodeid,_vscpData
 17041                           
 17042                           ; BSR set to: 0
 17043                           ;main.c: 2189: vscpData[ 1 ] = reg;
 17044  002C4A  C0B6  F1A5         	movff	readRegister@reg,_vscpData+1
 17045                           
 17046                           ; BSR set to: 0
 17047                           ;main.c: 2191: if (sendVSCPFrame(0,
 17048                           ;main.c: 2192: 9,
 17049                           ;main.c: 2193: 0,
 17050                           ;main.c: 2194: 0,
 17051                           ;main.c: 2195: 2,
 17052                           ;main.c: 2196: vscpData)) {
 17053  002C4E  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17054  002C50  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 17055  002C52  0E09               	movlw	9
 17056  002C54  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17057  002C56  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17058  002C58  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17059  002C5A  0E02               	movlw	2
 17060  002C5C  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17061  002C5E  0E01               	movlw	high _vscpData
 17062  002C60  0100               	movlb	0	; () banked
 17063  002C62  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17064  002C64  0EA4               	movlw	low _vscpData
 17065  002C66  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17066  002C68  ECA5  F014         	call	_sendVSCPFrame	;wreg free
 17067  002C6C  0900               	iorlw	0
 17068  002C6E  E04E               	bz	l12676
 17069                           
 17070                           ; BSR set to: 0
 17071                           ;main.c: 2198: timekeeper = 0;
 17072  002C70  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 17073  002C72  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17074  002C74  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17075  002C76  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17076                           
 17077                           ;main.c: 2199: while (timekeeper < timeout) {
 17078  002C78  D039               	goto	l12674
 17079  002C7A                     l1061:
 17080                           
 17081                           ; BSR set to: 0
 17082  002C7A  0004               	clrwdt		;# 
 17083                           
 17084                           ;main.c: 2203: if (getVSCPFrame(&vscpClass,
 17085                           ;main.c: 2204: &vscpType,
 17086                           ;main.c: 2205: &vscpNodeId,
 17087                           ;main.c: 2206: &vscpPriority,
 17088                           ;main.c: 2207: &vscpSize,
 17089                           ;main.c: 2208: vscpData)) {
 17090  002C7C  0E01               	movlw	high _vscpClass
 17091  002C7E  0100               	movlb	0	; () banked
 17092  002C80  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17093  002C82  0EAC               	movlw	low _vscpClass
 17094  002C84  6F72               	movwf	?_getVSCPFrame& (0+255),b
 17095  002C86  0E01               	movlw	high _vscpType
 17096  002C88  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17097  002C8A  0EB1               	movlw	low _vscpType
 17098  002C8C  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17099  002C8E  0E01               	movlw	high _vscpNodeId
 17100  002C90  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17101  002C92  0EAE               	movlw	low _vscpNodeId
 17102  002C94  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17103  002C96  0E01               	movlw	high _vscpPriority
 17104  002C98  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 17105  002C9A  0EAF               	movlw	low _vscpPriority
 17106  002C9C  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 17107  002C9E  0E01               	movlw	high _vscpSize
 17108  002CA0  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 17109  002CA2  0EB0               	movlw	low _vscpSize
 17110  002CA4  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 17111  002CA6  0E01               	movlw	high _vscpData
 17112  002CA8  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 17113  002CAA  0EA4               	movlw	low _vscpData
 17114  002CAC  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 17115  002CAE  ECB5  F011         	call	_getVSCPFrame	;wreg free
 17116  002CB2  0900               	iorlw	0
 17117  002CB4  E01B               	bz	l12674
 17118                           
 17119                           ; BSR set to: 0
 17120                           ;main.c: 2209: if ((nodeid == vscpNodeId) &&
 17121                           ;main.c: 2210: (0 == vscpClass) &&
 17122                           ;main.c: 2211: (10 == vscpType) &&
 17123                           ;main.c: 2212: (2 == vscpSize) &&
 17124                           ;main.c: 2213: (reg == vscpData[ 0 ])) {
 17125  002CB6  0101               	movlb	1	; () banked
 17126  002CB8  51AE               	movf	_vscpNodeId& (0+255),w,b
 17127  002CBA  0100               	movlb	0	; () banked
 17128  002CBC  63BE               	cpfseq	readRegister@nodeid& (0+255),b
 17129  002CBE  D016               	goto	l12674
 17130                           
 17131                           ; BSR set to: 0
 17132  002CC0  0101               	movlb	1	; () banked
 17133  002CC2  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 17134  002CC4  11AC               	iorwf	_vscpClass& (0+255),w,b
 17135  002CC6  E112               	bnz	l12674
 17136                           
 17137                           ; BSR set to: 1
 17138  002CC8  51B1               	movf	_vscpType& (0+255),w,b
 17139  002CCA  0A0A               	xorlw	10
 17140  002CCC  E10F               	bnz	l12674
 17141                           
 17142                           ; BSR set to: 1
 17143  002CCE  51B0               	movf	_vscpSize& (0+255),w,b
 17144  002CD0  0A02               	xorlw	2
 17145  002CD2  E10C               	bnz	l12674
 17146                           
 17147                           ; BSR set to: 1
 17148  002CD4  51A4               	movf	_vscpData& (0+255),w,b
 17149  002CD6  0100               	movlb	0	; () banked
 17150  002CD8  63B6               	cpfseq	readRegister@reg& (0+255),b
 17151  002CDA  D008               	goto	l12674
 17152                           
 17153                           ; BSR set to: 0
 17154                           ;main.c: 2214: *value = vscpData[ 1 ];
 17155  002CDC  51B9               	movf	readRegister@value& (0+255),w,b
 17156  002CDE  6ED9               	movwf	fsr2l,c
 17157  002CE0  6ADA               	clrf	fsr2h,c
 17158  002CE2  0101               	movlb	1	; () banked
 17159  002CE4  C1A5  FFDF         	movff	_vscpData+1,indf2
 17160                           
 17161                           ; BSR set to: 1
 17162                           ;main.c: 2215: return 1;
 17163  002CE8  0E01               	movlw	1
 17164  002CEA  D011               	goto	l1064
 17165  002CEC                     l12674:
 17166  002CEC  0100               	movlb	0	; () banked
 17167  002CEE  51B7               	movf	readRegister@timeout& (0+255),w,b
 17168  002CF0  6FBA               	movwf	??_readRegister& (0+255),b
 17169  002CF2  51B8               	movf	(readRegister@timeout+1)& (0+255),w,b
 17170  002CF4  6FBB               	movwf	(??_readRegister+1)& (0+255),b
 17171  002CF6  6BBC               	clrf	(??_readRegister+2)& (0+255),b
 17172  002CF8  6BBD               	clrf	(??_readRegister+3)& (0+255),b
 17173  002CFA  51BA               	movf	??_readRegister& (0+255),w,b
 17174  002CFC  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 17175  002CFE  51BB               	movf	(??_readRegister+1)& (0+255),w,b
 17176  002D00  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17177  002D02  51BC               	movf	(??_readRegister+2)& (0+255),w,b
 17178  002D04  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17179  002D06  51BD               	movf	(??_readRegister+3)& (0+255),w,b
 17180  002D08  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17181  002D0A  E3B7               	bnc	l1061
 17182  002D0C                     l12676:
 17183                           
 17184                           ; BSR set to: 0
 17185                           ;main.c: 2216: }
 17186                           ;main.c: 2217: }
 17187                           ;main.c: 2218: }
 17188                           ;main.c: 2219: }
 17189                           ;main.c: 2221: return 0;
 17190  002D0C  0E00               	movlw	0
 17191  002D0E                     l1064:
 17192  002D0E  0012               	return	
 17193  002D10                     __end_of_readRegister:
 17194                           	opt stack 0
 17195                           tblptru	equ	0xFF8
 17196                           tblptrh	equ	0xFF7
 17197                           tblptrl	equ	0xFF6
 17198                           tablat	equ	0xFF5
 17199                           prodh	equ	0xFF4
 17200                           prodl	equ	0xFF3
 17201                           intcon	equ	0xFF2
 17202                           indf0	equ	0xFEF
 17203                           postinc0	equ	0xFEE
 17204                           fsr0h	equ	0xFEA
 17205                           fsr0l	equ	0xFE9
 17206                           wreg	equ	0xFE8
 17207                           indf1	equ	0xFE7
 17208                           postinc1	equ	0xFE6
 17209                           postdec1	equ	0xFE5
 17210                           fsr1h	equ	0xFE2
 17211                           fsr1l	equ	0xFE1
 17212                           indf2	equ	0xFDF
 17213                           postinc2	equ	0xFDE
 17214                           postdec2	equ	0xFDD
 17215                           plusw2	equ	0xFDB
 17216                           fsr2h	equ	0xFDA
 17217                           fsr2l	equ	0xFD9
 17218                           status	equ	0xFD8
 17219                           
 17220 ;; *************** function _sendVSCPFrame *****************
 17221 ;; Defined at:
 17222 ;;		line 2908 in file "main.c"
 17223 ;; Parameters:    Size  Location     Type
 17224 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 17225 ;;  vscptype        1   56[BANK0 ] unsigned char 
 17226 ;;  nodeid          1   57[BANK0 ] unsigned char 
 17227 ;;  priority        1   58[BANK0 ] unsigned char 
 17228 ;;  size            1   59[BANK0 ] unsigned char 
 17229 ;;  pData           2   60[BANK0 ] PTR unsigned char 
 17230 ;;		 -> vscpData(8), 
 17231 ;; Auto vars:     Size  Location     Type
 17232 ;;  id              4   82[BANK0 ] unsigned long 
 17233 ;; Return value:  Size  Location     Type
 17234 ;;                  1    wreg      unsigned char 
 17235 ;; Registers used:
 17236 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17237 ;; Tracked objects:
 17238 ;;		On entry : F/0
 17239 ;;		On exit  : F/0
 17240 ;;		Unchanged: 0/0
 17241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17242 ;;      Params:         0       8       0       0       0       0       0
 17243 ;;      Locals:         0       4       0       0       0       0       0
 17244 ;;      Temps:          0      20       0       0       0       0       0
 17245 ;;      Totals:         0      32       0       0       0       0       0
 17246 ;;Total ram usage:       32 bytes
 17247 ;; Hardware stack levels used:    1
 17248 ;; Hardware stack levels required when called:    6
 17249 ;; This function calls:
 17250 ;;		_sendCANFrame
 17251 ;; This function is called by:
 17252 ;;		_doModeVerbose
 17253 ;;		_readRegister
 17254 ;;		_readRegisterExtended
 17255 ;;		_writeRegisterExtended
 17256 ;; This function uses a non-reentrant model
 17257 ;;
 17258                           
 17259                           	psect	text34
 17260  00294A                     __ptext34:
 17261                           	opt stack 0
 17262  00294A                     _sendVSCPFrame:
 17263                           	opt stack 20
 17264                           
 17265                           ; BSR set to: 0
 17266                           ;main.c: 2909: uint32_t id = ((uint32_t) priority << 26) |
 17267                           ;main.c: 2910: ((uint32_t) vscpclass << 16) |
 17268                           ;main.c: 2911: ((uint32_t) vscptype << 8) |
 17269                           ;main.c: 2912: nodeid;
 17270                           
 17271                           ;incstack = 0
 17272                           ;incstack = 0
 17273  00294A  C098  F09E         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17274  00294E  6B9F               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17275  002950  6BA0               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17276  002952  6BA1               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17277  002954  C0A0  F0A1         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17278  002958  C09F  F0A0         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17279  00295C  C09E  F09F         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17280  002960  6B9E               	clrf	??_sendVSCPFrame& (0+255),b
 17281  002962  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17282  002964  6FA2               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17283  002966  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17284  002968  6FA3               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17285  00296A  6BA4               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17286  00296C  6BA5               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17287  00296E  C0A3  F0A5         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17288  002972  C0A2  F0A4         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17289  002976  6BA3               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17290  002978  6BA2               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17291  00297A  C09A  F0A6         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17292  00297E  6BA7               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17293  002980  6BA8               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17294  002982  6BA9               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17295  002984  0E1A               	movlw	26
 17296  002986                     u14105:
 17297  002986  90D8               	bcf	status,0,c
 17298  002988  37A6               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17299  00298A  37A7               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17300  00298C  37A8               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17301  00298E  37A9               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17302  002990  2EE8               	decfsz	wreg,f,c
 17303  002992  D7F9               	goto	u14105
 17304  002994  51A2               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17305  002996  11A6               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17306  002998  6FAA               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17307  00299A  51A3               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17308  00299C  11A7               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17309  00299E  6FAB               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17310  0029A0  51A4               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17311  0029A2  11A8               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17312  0029A4  6FAC               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17313  0029A6  51A5               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17314  0029A8  11A9               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17315  0029AA  6FAD               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17316  0029AC  519E               	movf	??_sendVSCPFrame& (0+255),w,b
 17317  0029AE  11AA               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17318  0029B0  6FAE               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17319  0029B2  519F               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17320  0029B4  11AB               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17321  0029B6  6FAF               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17322  0029B8  51A0               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17323  0029BA  11AC               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17324  0029BC  6FB0               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17325  0029BE  51A1               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17326  0029C0  11AD               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17327  0029C2  6FB1               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17328  0029C4  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17329  0029C6  11AE               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17330  0029C8  6FB2               	movwf	sendVSCPFrame@id& (0+255),b
 17331  0029CA  51AF               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17332  0029CC  6FB3               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17333  0029CE  51B0               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17334  0029D0  6FB4               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17335  0029D2  51B1               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17336  0029D4  6FB5               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;main.c: 2914: if (!sendCANFrame(id, size, pData)) {
 17340  0029D6  C0B2  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 17341  0029DA  C0B3  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17342  0029DE  C0B4  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17343  0029E2  C0B5  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17344  0029E6  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17345  0029EA  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17346  0029EE  C09D  F095         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17347  0029F2  ECE7  F00C         	call	_sendCANFrame	;wreg free
 17348  0029F6  0900               	iorlw	0
 17349                           
 17350                           ; BSR set to: 0
 17351                           ;main.c: 2916: return 0;
 17352  0029F8  0E00               	movlw	0
 17353  0029FA  A4D8               	btfss	status,2,c
 17354                           
 17355                           ; BSR set to: 0
 17356                           ;main.c: 2917: }
 17357                           ;main.c: 2919: return 1;
 17358  0029FC  0E01               	movlw	1
 17359                           
 17360                           ; BSR set to: 0
 17361  0029FE  0012               	return	
 17362  002A00                     __end_of_sendVSCPFrame:
 17363                           	opt stack 0
 17364                           tblptru	equ	0xFF8
 17365                           tblptrh	equ	0xFF7
 17366                           tblptrl	equ	0xFF6
 17367                           tablat	equ	0xFF5
 17368                           prodh	equ	0xFF4
 17369                           prodl	equ	0xFF3
 17370                           intcon	equ	0xFF2
 17371                           indf0	equ	0xFEF
 17372                           postinc0	equ	0xFEE
 17373                           fsr0h	equ	0xFEA
 17374                           fsr0l	equ	0xFE9
 17375                           wreg	equ	0xFE8
 17376                           indf1	equ	0xFE7
 17377                           postinc1	equ	0xFE6
 17378                           postdec1	equ	0xFE5
 17379                           fsr1h	equ	0xFE2
 17380                           fsr1l	equ	0xFE1
 17381                           indf2	equ	0xFDF
 17382                           postinc2	equ	0xFDE
 17383                           postdec2	equ	0xFDD
 17384                           plusw2	equ	0xFDB
 17385                           fsr2h	equ	0xFDA
 17386                           fsr2l	equ	0xFD9
 17387                           status	equ	0xFD8
 17388                           
 17389 ;; *************** function _sendCANFrame *****************
 17390 ;; Defined at:
 17391 ;;		line 2954 in file "main.c"
 17392 ;; Parameters:    Size  Location     Type
 17393 ;;  id              4   47[BANK0 ] unsigned long 
 17394 ;;  dlc             1   51[BANK0 ] unsigned char 
 17395 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 17396 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17397 ;; Auto vars:     Size  Location     Type
 17398 ;;		None
 17399 ;; Return value:  Size  Location     Type
 17400 ;;                  1    wreg      unsigned char 
 17401 ;; Registers used:
 17402 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17403 ;; Tracked objects:
 17404 ;;		On entry : F/0
 17405 ;;		On exit  : F/0
 17406 ;;		Unchanged: 0/0
 17407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17408 ;;      Params:         0       7       0       0       0       0       0
 17409 ;;      Locals:         0       0       0       0       0       0       0
 17410 ;;      Temps:          0       0       0       0       0       0       0
 17411 ;;      Totals:         0       7       0       0       0       0       0
 17412 ;;Total ram usage:        7 bytes
 17413 ;; Hardware stack levels used:    1
 17414 ;; Hardware stack levels required when called:    5
 17415 ;; This function calls:
 17416 ;;		_ECANSendMessage
 17417 ;; This function is called by:
 17418 ;;		_doModeSLCAN
 17419 ;;		_receiveVSCPModeCanalMsg
 17420 ;;		_sendVSCPFrame
 17421 ;; This function uses a non-reentrant model
 17422 ;;
 17423                           
 17424                           	psect	text35
 17425  0019CE                     __ptext35:
 17426                           	opt stack 0
 17427  0019CE                     _sendCANFrame:
 17428                           	opt stack 23
 17429                           
 17430                           ; BSR set to: 0
 17431                           ;main.c: 2955: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17432                           
 17433                           ; BSR set to: 0
 17434                           ;incstack = 0
 17435                           ;incstack = 0
 17436  0019CE  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 17437  0019D2  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17438  0019D6  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17439  0019DA  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17440  0019DE  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17441  0019E2  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17442  0019E6  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17443  0019EA  0E20               	movlw	32
 17444  0019EC  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17445  0019EE  ECA5  F01D         	call	_ECANSendMessage	;wreg free
 17446  0019F2  0900               	iorlw	0
 17447  0019F4  E106               	bnz	l12526
 17448                           
 17449                           ; BSR set to: 0
 17450                           ;main.c: 2957: can_transmitOverruns++;
 17451  0019F6  2A01               	incf	_can_transmitOverruns,f,c
 17452  0019F8  0E00               	movlw	0
 17453  0019FA  2202               	addwfc	_can_transmitOverruns+1,f,c
 17454  0019FC  2203               	addwfc	_can_transmitOverruns+2,f,c
 17455  0019FE  2204               	addwfc	_can_transmitOverruns+3,f,c
 17456                           
 17457                           ; BSR set to: 0
 17458                           ;main.c: 2958: return 0;
 17459  001A00  D001               	goto	l1260
 17460  001A02                     l12526:
 17461                           
 17462                           ; BSR set to: 0
 17463                           ;main.c: 2959: }
 17464                           ;main.c: 2961: return 1;
 17465  001A02  0E01               	movlw	1
 17466  001A04                     l1260:
 17467                           
 17468                           ; BSR set to: 0
 17469  001A04  0012               	return	
 17470  001A06                     __end_of_sendCANFrame:
 17471                           	opt stack 0
 17472                           tblptru	equ	0xFF8
 17473                           tblptrh	equ	0xFF7
 17474                           tblptrl	equ	0xFF6
 17475                           tablat	equ	0xFF5
 17476                           prodh	equ	0xFF4
 17477                           prodl	equ	0xFF3
 17478                           intcon	equ	0xFF2
 17479                           indf0	equ	0xFEF
 17480                           postinc0	equ	0xFEE
 17481                           fsr0h	equ	0xFEA
 17482                           fsr0l	equ	0xFE9
 17483                           wreg	equ	0xFE8
 17484                           indf1	equ	0xFE7
 17485                           postinc1	equ	0xFE6
 17486                           postdec1	equ	0xFE5
 17487                           fsr1h	equ	0xFE2
 17488                           fsr1l	equ	0xFE1
 17489                           indf2	equ	0xFDF
 17490                           postinc2	equ	0xFDE
 17491                           postdec2	equ	0xFDD
 17492                           plusw2	equ	0xFDB
 17493                           fsr2h	equ	0xFDA
 17494                           fsr2l	equ	0xFD9
 17495                           status	equ	0xFD8
 17496                           
 17497 ;; *************** function _ECANSendMessage *****************
 17498 ;; Defined at:
 17499 ;;		line 617 in file "ECAN.c"
 17500 ;; Parameters:    Size  Location     Type
 17501 ;;  id              4   10[BANK0 ] unsigned long 
 17502 ;;  data            2   14[BANK0 ] PTR unsigned char 
 17503 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17504 ;;  dataLen         1   16[BANK0 ] unsigned char 
 17505 ;;  msgFlags        1   17[BANK0 ] enum E16315
 17506 ;; Auto vars:     Size  Location     Type
 17507 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 17508 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17509 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17510 ;;		 -> B0CON(1), 
 17511 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 17512 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17513 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17514 ;;		 -> B0CON(1), 
 17515 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 17516 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17517 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17518 ;;		 -> B0CON(1), 
 17519 ;;  i               1   44[BANK0 ] unsigned char 
 17520 ;;  temp            1   43[BANK0 ] unsigned char 
 17521 ;;  tempBSEL0       1   40[BANK0 ] struct .
 17522 ;;  j               1   39[BANK0 ] unsigned char 
 17523 ;;  buffers         1   38[BANK0 ] unsigned char 
 17524 ;;  mode            1   37[BANK0 ] unsigned char 
 17525 ;; Return value:  Size  Location     Type
 17526 ;;                  1    wreg      enum E15660
 17527 ;; Registers used:
 17528 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17529 ;; Tracked objects:
 17530 ;;		On entry : F/0
 17531 ;;		On exit  : F/0
 17532 ;;		Unchanged: 0/0
 17533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17534 ;;      Params:         0       8       0       0       0       0       0
 17535 ;;      Locals:         0      28       0       0       0       0       0
 17536 ;;      Temps:          0       1       0       0       0       0       0
 17537 ;;      Totals:         0      37       0       0       0       0       0
 17538 ;;Total ram usage:       37 bytes
 17539 ;; Hardware stack levels used:    1
 17540 ;; Hardware stack levels required when called:    4
 17541 ;; This function calls:
 17542 ;;		__CANIDToRegs
 17543 ;; This function is called by:
 17544 ;;		_sendCANFrame
 17545 ;; This function uses a non-reentrant model
 17546 ;;
 17547                           
 17548                           	psect	text36
 17549  003B4A                     __ptext36:
 17550                           	opt stack 0
 17551  003B4A                     _ECANSendMessage:
 17552                           	opt stack 23
 17553                           
 17554                           ; BSR set to: 0
 17555                           ;ECAN.c: 619: BYTE mode;
 17556                           ;ECAN.c: 620: BYTE buffers;
 17557                           ;ECAN.c: 628: BYTE i,j;
 17558                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17559                           ;ECAN.c: 630: BYTE* pb[9];
 17560                           ;ECAN.c: 631: BYTE temp;
 17561                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17562                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17563                           
 17564                           ; BSR set to: 0
 17565                           ;incstack = 0
 17566                           ;incstack = 0
 17567  003B4A  0E0F               	movlw	15	;volatile
 17568  003B4C  0100               	movlb	0	; () banked
 17569  003B4E  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17570  003B50  0E40               	movlw	64	;volatile
 17571  003B52  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 17572                           
 17573                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17574  003B54  0E0F               	movlw	15	;volatile
 17575  003B56  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17576  003B58  0E30               	movlw	48	;volatile
 17577  003B5A  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17578                           
 17579                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17580  003B5C  0E0F               	movlw	15	;volatile
 17581  003B5E  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17582  003B60  0E20               	movlw	32	;volatile
 17583  003B62  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17584                           
 17585                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17586  003B64  0E0E               	movlw	14	;volatile
 17587  003B66  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17588  003B68  0E20               	movlw	32	;volatile
 17589  003B6A  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17590                           
 17591                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17592  003B6C  0E0E               	movlw	14	;volatile
 17593  003B6E  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17594  003B70  0E30               	movlw	48	;volatile
 17595  003B72  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17596                           
 17597                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17598  003B74  0E0E               	movlw	14	;volatile
 17599  003B76  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17600  003B78  0E40               	movlw	64	;volatile
 17601  003B7A  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17602                           
 17603                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17604  003B7C  0E0E               	movlw	14	;volatile
 17605  003B7E  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17606  003B80  0E50               	movlw	80	;volatile
 17607  003B82  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17608                           
 17609                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17610  003B84  0E0E               	movlw	14	;volatile
 17611  003B86  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17612  003B88  0E60               	movlw	96	;volatile
 17613  003B8A  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17614                           
 17615                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17616  003B8C  0E0E               	movlw	14	;volatile
 17617  003B8E  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17618  003B90  0E70               	movlw	112	;volatile
 17619  003B92  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17620                           
 17621                           ; BSR set to: 0
 17622                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17623  003B94  5077               	movf	3959,w,c	;volatile
 17624  003B96  0BC0               	andlw	192
 17625  003B98  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 17626                           
 17627                           ; BSR set to: 0
 17628                           ;ECAN.c: 660: if ( mode == 0x00 )
 17629  003B9A  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 17630  003B9C  D002               	goto	l12698
 17631                           
 17632                           ; BSR set to: 0
 17633                           ;ECAN.c: 661: buffers = 2;
 17634  003B9E  0E02               	movlw	2
 17635  003BA0  D001               	goto	L14
 17636  003BA2                     l12698:
 17637                           
 17638                           ; BSR set to: 0
 17639                           ;ECAN.c: 662: else
 17640                           ;ECAN.c: 663: buffers = 8;
 17641  003BA2  0E08               	movlw	8
 17642  003BA4                     L14:
 17643  003BA4  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 17644                           
 17645                           ; BSR set to: 0
 17646                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17647  003BA6  010D               	movlb	13	; () banked
 17648  003BA8  90D8               	bcf	status,0,c
 17649  003BAA  31F8               	rrcf	248,w,b	;volatile
 17650  003BAC  0100               	movlb	0	; () banked
 17651  003BAE  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17652                           
 17653                           ; BSR set to: 0
 17654                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17655  003BB0  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 17656  003BB2  D07D               	goto	l12758
 17657  003BB4                     l12704:
 17658                           
 17659                           ; BSR set to: 0
 17660                           ;ECAN.c: 688: {
 17661                           ;ECAN.c: 693: ptr = pb[i];
 17662  003BB4  518C               	movf	ECANSendMessage@i& (0+255),w,b
 17663  003BB6  0D02               	mullw	2
 17664  003BB8  50F3               	movf	prodl,w,c
 17665  003BBA  0F73               	addlw	low ECANSendMessage@pb
 17666  003BBC  6ED9               	movwf	fsr2l,c
 17667  003BBE  6ADA               	clrf	fsr2h,c
 17668  003BC0  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 17669  003BC4  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 17670                           
 17671                           ; BSR set to: 0
 17672                           ;ECAN.c: 694: tempPtr = ptr;
 17673  003BC8  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17674  003BCC  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17675                           
 17676                           ; BSR set to: 0
 17677                           ;ECAN.c: 702: if ( i > 2 )
 17678  003BD0  0E02               	movlw	2
 17679  003BD2  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 17680  003BD4  D004               	goto	l12716
 17681                           
 17682                           ; BSR set to: 0
 17683                           ;ECAN.c: 703: {
 17684                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17685  003BD6  90D8               	bcf	status,0,c
 17686  003BD8  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17687                           
 17688                           ; BSR set to: 0
 17689                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17690  003BDA  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17691  003BDC  D067               	goto	l12756
 17692  003BDE                     l12716:
 17693                           
 17694                           ; BSR set to: 0
 17695                           ;ECAN.c: 714: }
 17696                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 17697  003BDE  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17698  003BE2  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17699  003BE6  50DF               	movf	indf2,w,c
 17700  003BE8  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17701  003BEA  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 17702  003BEC  D05F               	goto	l12756
 17703                           
 17704                           ; BSR set to: 0
 17705                           ;ECAN.c: 721: {
 17706                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 17707  003BEE  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17708  003BF2  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17709  003BF6  0EFC               	movlw	252
 17710  003BF8  16DF               	andwf	indf2,f,c
 17711                           
 17712                           ; BSR set to: 0
 17713                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 17714  003BFA  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 17715  003BFE  0E03               	movlw	3
 17716  003C00  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 17717  003C02  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17718  003C06  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17719  003C0A  5172               	movf	??_ECANSendMessage& (0+255),w,b
 17720  003C0C  12DF               	iorwf	indf2,f,c
 17721                           
 17722                           ; BSR set to: 0
 17723                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 17724  003C0E  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 17725  003C10  D004               	goto	l1427
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 17729  003C12  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17730  003C14  0940               	iorlw	64
 17731  003C16  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17732  003C18  D002               	goto	l12726
 17733  003C1A                     l1427:
 17734                           
 17735                           ; BSR set to: 0
 17736                           ;ECAN.c: 729: else
 17737                           ;ECAN.c: 730: temp = dataLen;
 17738  003C1A  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 17739  003C1E                     l12726:
 17740                           
 17741                           ; BSR set to: 0
 17742                           ;ECAN.c: 732: *(ptr+5) = temp;
 17743  003C1E  EE20 F005          	lfsr	2,5
 17744  003C22  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 17745  003C24  26D9               	addwf	fsr2l,f,c
 17746  003C26  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 17747  003C28  22DA               	addwfc	fsr2h,f,c
 17748  003C2A  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 17749                           
 17750                           ; BSR set to: 0
 17751                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 17752  003C2E  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 17753  003C30  D003               	goto	l1429
 17754                           
 17755                           ; BSR set to: 0
 17756                           ;ECAN.c: 736: temp = 1;
 17757  003C32  0E01               	movlw	1
 17758  003C34  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17759  003C36  D001               	goto	l12732
 17760  003C38                     l1429:
 17761                           
 17762                           ; BSR set to: 0
 17763                           ;ECAN.c: 738: else
 17764                           ;ECAN.c: 739: temp = 0;
 17765  003C38  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 17766  003C3A                     l12732:
 17767                           
 17768                           ; BSR set to: 0
 17769                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 17770  003C3A  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 17771  003C3C  6F60               	movwf	?__CANIDToRegs& (0+255),b
 17772  003C3E  0E00               	movlw	0
 17773  003C40  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 17774  003C42  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 17775  003C44  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 17776  003C48  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 17777  003C4C  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 17778  003C50  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 17779  003C54  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 17780  003C58  ECBA  F01A         	call	__CANIDToRegs	;wreg free
 17781                           
 17782                           ; BSR set to: 0
 17783                           ;ECAN.c: 745: ptr += 6;
 17784  003C5C  0E06               	movlw	6
 17785  003C5E  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 17786  003C60  0E00               	movlw	0
 17787  003C62  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 17788                           
 17789                           ; BSR set to: 0
 17790                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 17791  003C64  6B87               	clrf	ECANSendMessage@j& (0+255),b
 17792  003C66  D00F               	goto	l12746
 17793  003C68                     l12738:
 17794                           
 17795                           ; BSR set to: 0
 17796                           ;ECAN.c: 748: *ptr++ = *data++;
 17797  003C68  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 17798  003C6C  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 17799  003C70  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 17800  003C74  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 17801  003C78  CFDF FFE7          	movff	indf2,indf1
 17802                           
 17803                           ; BSR set to: 0
 17804  003C7C  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 17805  003C7E  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 17806                           
 17807                           ; BSR set to: 0
 17808  003C80  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 17809  003C82  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 17810                           
 17811                           ; BSR set to: 0
 17812  003C84  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 17813  003C86                     l12746:
 17814                           
 17815                           ; BSR set to: 0
 17816  003C86  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17817  003C88  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 17818  003C8A  E3EE               	bnc	l12738
 17819                           
 17820                           ; BSR set to: 0
 17821                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 17822  003C8C  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17823  003C90  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17824  003C94  50DF               	movf	indf2,w,c
 17825  003C96  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17826  003C98  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 17827  003C9A  D006               	goto	l12752
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;ECAN.c: 753: *tempPtr |= 0x08;
 17831  003C9C  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17832  003CA0  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17833  003CA4  0E00               	movlw	0
 17834  003CA6  86DB               	bsf	plusw2,3,c
 17835  003CA8                     l12752:
 17836                           
 17837                           ; BSR set to: 0
 17838                           ;ECAN.c: 755: return TRUE;
 17839  003CA8  0E01               	movlw	1
 17840  003CAA  D005               	goto	l1435
 17841  003CAC                     l12756:
 17842                           
 17843                           ; BSR set to: 0
 17844  003CAC  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 17845  003CAE                     l12758:
 17846                           
 17847                           ; BSR set to: 0
 17848  003CAE  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 17849  003CB0  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 17850  003CB2  E380               	bnc	l12704
 17851                           
 17852                           ; BSR set to: 0
 17853                           ;ECAN.c: 756: }
 17854                           ;ECAN.c: 757: }
 17855                           ;ECAN.c: 760: return FALSE;
 17856  003CB4  0E00               	movlw	0
 17857  003CB6                     l1435:
 17858                           
 17859                           ; BSR set to: 0
 17860  003CB6  0012               	return	
 17861  003CB8                     __end_of_ECANSendMessage:
 17862                           	opt stack 0
 17863                           tblptru	equ	0xFF8
 17864                           tblptrh	equ	0xFF7
 17865                           tblptrl	equ	0xFF6
 17866                           tablat	equ	0xFF5
 17867                           prodh	equ	0xFF4
 17868                           prodl	equ	0xFF3
 17869                           intcon	equ	0xFF2
 17870                           indf0	equ	0xFEF
 17871                           postinc0	equ	0xFEE
 17872                           fsr0h	equ	0xFEA
 17873                           fsr0l	equ	0xFE9
 17874                           wreg	equ	0xFE8
 17875                           indf1	equ	0xFE7
 17876                           postinc1	equ	0xFE6
 17877                           postdec1	equ	0xFE5
 17878                           fsr1h	equ	0xFE2
 17879                           fsr1l	equ	0xFE1
 17880                           indf2	equ	0xFDF
 17881                           postinc2	equ	0xFDE
 17882                           postdec2	equ	0xFDD
 17883                           plusw2	equ	0xFDB
 17884                           fsr2h	equ	0xFDA
 17885                           fsr2l	equ	0xFD9
 17886                           status	equ	0xFD8
 17887                           
 17888 ;; *************** function __CANIDToRegs *****************
 17889 ;; Defined at:
 17890 ;;		line 1101 in file "ECAN.c"
 17891 ;; Parameters:    Size  Location     Type
 17892 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17893 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17894 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17895 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 17896 ;;  val             4    2[BANK0 ] unsigned long 
 17897 ;;  type            1    6[BANK0 ] unsigned char 
 17898 ;; Auto vars:     Size  Location     Type
 17899 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 17900 ;;		 -> _CANIDToRegs@val(4), 
 17901 ;; Return value:  Size  Location     Type
 17902 ;;		None               void
 17903 ;; Registers used:
 17904 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17905 ;; Tracked objects:
 17906 ;;		On entry : F/0
 17907 ;;		On exit  : F/0
 17908 ;;		Unchanged: 0/0
 17909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17910 ;;      Params:         0       7       0       0       0       0       0
 17911 ;;      Locals:         0       1       0       0       0       0       0
 17912 ;;      Temps:          0       2       0       0       0       0       0
 17913 ;;      Totals:         0      10       0       0       0       0       0
 17914 ;;Total ram usage:       10 bytes
 17915 ;; Hardware stack levels used:    1
 17916 ;; Hardware stack levels required when called:    3
 17917 ;; This function calls:
 17918 ;;		Nothing
 17919 ;; This function is called by:
 17920 ;;		_doModeVerbose
 17921 ;;		_ECANSendMessage
 17922 ;; This function uses a non-reentrant model
 17923 ;;
 17924                           
 17925                           	psect	text37
 17926  003574                     __ptext37:
 17927                           	opt stack 0
 17928  003574                     __CANIDToRegs:
 17929                           	opt stack 23
 17930                           
 17931                           ; BSR set to: 0
 17932                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 17933                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 17934                           
 17935                           ; BSR set to: 0
 17936                           ;incstack = 0
 17937                           ;incstack = 0
 17938  003574  0E62               	movlw	low __CANIDToRegs@val
 17939  003576  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 17940                           
 17941                           ; BSR set to: 0
 17942                           ;ECAN.c: 1106: if ( type == 0 )
 17943  003578  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 17944  00357A  D022               	goto	l12084
 17945                           
 17946                           ; BSR set to: 0
 17947                           ;ECAN.c: 1107: {
 17948                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 17949  00357C  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17950  00357E  6ED9               	movwf	fsr2l,c
 17951  003580  6ADA               	clrf	fsr2h,c
 17952  003582  50DF               	movf	indf2,w,c
 17953  003584  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17954  003586  90D8               	bcf	status,0,c
 17955  003588  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17956  00358A  90D8               	bcf	status,0,c
 17957  00358C  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17958  00358E  90D8               	bcf	status,0,c
 17959  003590  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 17960                           
 17961                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 17962  003592  D862               	call	PL58	;call to abstracted procedure
 17963  003594  2AD9               	incf	fsr2l,f,c
 17964  003596  6ADA               	clrf	fsr2h,c
 17965  003598  D872               	call	PL110	;call to abstracted procedure
 17966  00359A                     u15365:
 17967  00359A  90D8               	bcf	status,0,c
 17968  00359C  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17969  00359E  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17970  0035A0  D7FC               	goto	u15365
 17971  0035A2  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17972                           
 17973                           ; BSR set to: 0
 17974                           ;ECAN.c: 1111: ptr++;
 17975                           
 17976                           ; BSR set to: 0
 17977                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 17978  0035A6  D846               	call	PL32	;call to abstracted procedure
 17979  0035A8  D86A               	call	PL110	;call to abstracted procedure
 17980  0035AA                     u15375:
 17981  0035AA  90D8               	bcf	status,0,c
 17982  0035AC  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17983  0035AE  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17984  0035B0  D7FC               	goto	u15375
 17985  0035B2  5167               	movf	??__CANIDToRegs& (0+255),w,b
 17986  0035B4  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17987  0035B8  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17988  0035BC  6EDF               	movwf	indf2,c
 17989                           
 17990                           ;ECAN.c: 1113: }
 17991  0035BE  D039               	goto	l1489
 17992  0035C0                     l12084:
 17993                           
 17994                           ; BSR set to: 0
 17995                           ;ECAN.c: 1114: else
 17996                           ;ECAN.c: 1115: {
 17997                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 17998  0035C0  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17999  0035C2  D842               	call	PL50	;call to abstracted procedure
 18000  0035C4  0E05               	movlw	5
 18001  0035C6  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18002  0035C8                     u15385:
 18003  0035C8  90D8               	bcf	status,0,c
 18004  0035CA  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18005  0035CC  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18006  0035CE  D7FC               	goto	u15385
 18007  0035D0  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18008                           
 18009                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 18010  0035D2  D842               	call	PL58	;call to abstracted procedure
 18011  0035D4  0E03               	movlw	3
 18012  0035D6  D849               	call	PL74	;call to abstracted procedure
 18013  0035D8  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18014  0035DA  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18015                           
 18016                           ; BSR set to: 0
 18017                           ;ECAN.c: 1119: ptr++;
 18018                           
 18019                           ; BSR set to: 0
 18020                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 18021  0035DE  D82A               	call	PL32	;call to abstracted procedure
 18022  0035E0  0E02               	movlw	2
 18023  0035E2  D843               	call	PL74	;call to abstracted procedure
 18024  0035E4  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 18025  0035E6  0BE0               	andlw	224
 18026  0035E8  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18027  0035EC  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18028  0035F0  6EDF               	movwf	indf2,c
 18029                           
 18030                           ; BSR set to: 0
 18031                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 18032  0035F2  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18033  0035F6  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18034  0035FA  0E00               	movlw	0
 18035  0035FC  86DB               	bsf	plusw2,3,c
 18036                           
 18037                           ; BSR set to: 0
 18038                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 18039  0035FE  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18040  003600  D823               	call	PL50	;call to abstracted procedure
 18041  003602  0E03               	movlw	3
 18042  003604  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 18043  003606  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18044                           
 18045                           ;ECAN.c: 1124: ptr++;
 18046                           
 18047                           ; BSR set to: 0
 18048                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 18049  00360A  D814               	call	PL32	;call to abstracted procedure
 18050  00360C  2AD9               	incf	fsr2l,f,c
 18051  00360E  6ADA               	clrf	fsr2h,c
 18052  003610  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18053  003614  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18054  003618  CFDF FFE7          	movff	indf2,indf1
 18055                           
 18056                           ; BSR set to: 0
 18057                           ;ECAN.c: 1126: ptr++;
 18058  00361C  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18059  00361E  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18060                           
 18061                           ; BSR set to: 0
 18062                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 18063  003620  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18064  003622  6ED9               	movwf	fsr2l,c
 18065  003624  6ADA               	clrf	fsr2h,c
 18066  003626  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18067  00362A  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18068  00362E  CFDF FFE7          	movff	indf2,indf1
 18069  003632                     l1489:
 18070                           
 18071                           ; BSR set to: 0
 18072  003632  0012               	return	
 18073  003634                     __end_of__CANIDToRegs:
 18074                           	opt stack 0
 18075  003634                     PL32:
 18076                           	opt stack 23
 18077  003634  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18078  003638  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18079  00363A  12DF               	iorwf	indf2,f,c
 18080  00363C  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18081  00363E  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18082  003640  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18083  003642  6ED9               	movwf	fsr2l,c
 18084  003644  6ADA               	clrf	fsr2h,c
 18085  003646  0012               	return	
 18086  003648                     __end_ofPL32:
 18087                           	opt stack 0
 18088  003648                     PL50:
 18089                           	opt stack 23
 18090  003648  6ED9               	movwf	fsr2l,c
 18091  00364A  6ADA               	clrf	fsr2h,c
 18092  00364C  0E02               	movlw	2
 18093  00364E  26D9               	addwf	fsr2l,f,c
 18094  003650  6ADA               	clrf	fsr2h,c
 18095  003652  50DF               	movf	indf2,w,c
 18096  003654  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18097  003656  0012               	return	
 18098  003658                     __end_ofPL50:
 18099                           	opt stack 0
 18100  003658                     PL58:
 18101                           	opt stack 23
 18102  003658  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18103  00365C  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18104  003660  6EDF               	movwf	indf2,c
 18105  003662  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18106  003664  6ED9               	movwf	fsr2l,c
 18107  003666  6ADA               	clrf	fsr2h,c
 18108  003668  0012               	return	
 18109  00366A                     __end_ofPL58:
 18110                           	opt stack 0
 18111  00366A                     PL74:
 18112                           	opt stack 23
 18113  00366A  26D9               	addwf	fsr2l,f,c
 18114  00366C  6ADA               	clrf	fsr2h,c
 18115  00366E  50DF               	movf	indf2,w,c
 18116  003670  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18117  003672  90D8               	bcf	status,0,c
 18118  003674  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18119  003676  90D8               	bcf	status,0,c
 18120  003678  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18121  00367A  90D8               	bcf	status,0,c
 18122  00367C  0012               	return	
 18123  00367E                     __end_ofPL74:
 18124                           	opt stack 0
 18125  00367E                     PL110:
 18126                           	opt stack 23
 18127  00367E  50DF               	movf	indf2,w,c
 18128  003680  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18129  003682  0E05               	movlw	5
 18130  003684  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18131  003686  0C05               	retlw	5
 18132  003688                     __end_ofPL110:
 18133                           	opt stack 0
 18134                           tblptru	equ	0xFF8
 18135                           tblptrh	equ	0xFF7
 18136                           tblptrl	equ	0xFF6
 18137                           tablat	equ	0xFF5
 18138                           prodh	equ	0xFF4
 18139                           prodl	equ	0xFF3
 18140                           intcon	equ	0xFF2
 18141                           indf0	equ	0xFEF
 18142                           postinc0	equ	0xFEE
 18143                           fsr0h	equ	0xFEA
 18144                           fsr0l	equ	0xFE9
 18145                           wreg	equ	0xFE8
 18146                           indf1	equ	0xFE7
 18147                           postinc1	equ	0xFE6
 18148                           postdec1	equ	0xFE5
 18149                           fsr1h	equ	0xFE2
 18150                           fsr1l	equ	0xFE1
 18151                           indf2	equ	0xFDF
 18152                           postinc2	equ	0xFDE
 18153                           postdec2	equ	0xFDD
 18154                           plusw2	equ	0xFDB
 18155                           fsr2h	equ	0xFDA
 18156                           fsr2l	equ	0xFD9
 18157                           status	equ	0xFD8
 18158                           
 18159 ;; *************** function _memset *****************
 18160 ;; Defined at:
 18161 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18162 ;; Parameters:    Size  Location     Type
 18163 ;;  p1              2    0[BANK0 ] PTR void 
 18164 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18165 ;;  c               2    2[BANK0 ] int 
 18166 ;;  n               2    4[BANK0 ] unsigned int 
 18167 ;; Auto vars:     Size  Location     Type
 18168 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18169 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18170 ;; Return value:  Size  Location     Type
 18171 ;;                  2    0[BANK0 ] PTR void 
 18172 ;; Registers used:
 18173 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18174 ;; Tracked objects:
 18175 ;;		On entry : F/0
 18176 ;;		On exit  : F/0
 18177 ;;		Unchanged: 0/0
 18178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18179 ;;      Params:         0       6       0       0       0       0       0
 18180 ;;      Locals:         0       2       0       0       0       0       0
 18181 ;;      Temps:          0       0       0       0       0       0       0
 18182 ;;      Totals:         0       8       0       0       0       0       0
 18183 ;;Total ram usage:        8 bytes
 18184 ;; Hardware stack levels used:    1
 18185 ;; Hardware stack levels required when called:    3
 18186 ;; This function calls:
 18187 ;;		Nothing
 18188 ;; This function is called by:
 18189 ;;		_doModeVerbose
 18190 ;;		_doModeSLCAN
 18191 ;;		_printGUID
 18192 ;;		_printMDF
 18193 ;;		_printNodeFirmwareVersion
 18194 ;; This function uses a non-reentrant model
 18195 ;;
 18196                           
 18197                           	psect	text38
 18198  0018A2                     __ptext38:
 18199                           	opt stack 0
 18200  0018A2                     _memset:
 18201                           	opt stack 25
 18202                           
 18203                           ; BSR set to: 0
 18204                           
 18205                           ; BSR set to: 0
 18206                           ;incstack = 0
 18207                           ;incstack = 0
 18208  0018A2  C060  F066         	movff	memset@p1,memset@p
 18209  0018A6  C061  F067         	movff	memset@p1+1,memset@p+1
 18210  0018AA  D008               	goto	l11286
 18211  0018AC                     l11282:
 18212                           
 18213                           ; BSR set to: 0
 18214  0018AC  C066  FFD9         	movff	memset@p,fsr2l
 18215  0018B0  C067  FFDA         	movff	memset@p+1,fsr2h
 18216  0018B4  C062  FFDF         	movff	memset@c,indf2
 18217                           
 18218                           ; BSR set to: 0
 18219  0018B8  4B66               	infsnz	memset@p& (0+255),f,b
 18220  0018BA  2B67               	incf	(memset@p+1)& (0+255),f,b
 18221  0018BC                     l11286:
 18222                           
 18223                           ; BSR set to: 0
 18224  0018BC  0764               	decf	memset@n& (0+255),f,b
 18225  0018BE  A0D8               	btfss	status,0,c
 18226  0018C0  0765               	decf	(memset@n+1)& (0+255),f,b
 18227  0018C2  0100               	movlb	0	; () banked
 18228  0018C4  2964               	incf	memset@n& (0+255),w,b
 18229  0018C6  B4D8               	btfsc	status,2,c
 18230  0018C8  2965               	incf	(memset@n+1)& (0+255),w,b
 18231  0018CA  B4D8               	btfsc	status,2,c
 18232                           
 18233                           ; BSR set to: 0
 18234  0018CC  0012               	return	
 18235  0018CE  D7EE               	goto	l11282
 18236  0018D0                     __end_of_memset:
 18237                           	opt stack 0
 18238                           tblptru	equ	0xFF8
 18239                           tblptrh	equ	0xFF7
 18240                           tblptrl	equ	0xFF6
 18241                           tablat	equ	0xFF5
 18242                           prodh	equ	0xFF4
 18243                           prodl	equ	0xFF3
 18244                           intcon	equ	0xFF2
 18245                           indf0	equ	0xFEF
 18246                           postinc0	equ	0xFEE
 18247                           fsr0h	equ	0xFEA
 18248                           fsr0l	equ	0xFE9
 18249                           wreg	equ	0xFE8
 18250                           indf1	equ	0xFE7
 18251                           postinc1	equ	0xFE6
 18252                           postdec1	equ	0xFE5
 18253                           fsr1h	equ	0xFE2
 18254                           fsr1l	equ	0xFE1
 18255                           indf2	equ	0xFDF
 18256                           postinc2	equ	0xFDE
 18257                           postdec2	equ	0xFDD
 18258                           plusw2	equ	0xFDB
 18259                           fsr2h	equ	0xFDA
 18260                           fsr2l	equ	0xFD9
 18261                           status	equ	0xFD8
 18262                           
 18263 ;; *************** function _printHelp *****************
 18264 ;; Defined at:
 18265 ;;		line 2531 in file "main.c"
 18266 ;; Parameters:    Size  Location     Type
 18267 ;;		None
 18268 ;; Auto vars:     Size  Location     Type
 18269 ;;		None
 18270 ;; Return value:  Size  Location     Type
 18271 ;;		None               void
 18272 ;; Registers used:
 18273 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18274 ;; Tracked objects:
 18275 ;;		On entry : F/1
 18276 ;;		On exit  : 0/0
 18277 ;;		Unchanged: 0/0
 18278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18279 ;;      Params:         0       0       0       0       0       0       0
 18280 ;;      Locals:         0       0       0       0       0       0       0
 18281 ;;      Temps:          0       0       0       0       0       0       0
 18282 ;;      Totals:         0       0       0       0       0       0       0
 18283 ;;Total ram usage:        0 bytes
 18284 ;; Hardware stack levels used:    1
 18285 ;; Hardware stack levels required when called:    5
 18286 ;; This function calls:
 18287 ;;		_putsUSART
 18288 ;; This function is called by:
 18289 ;;		_doModeVerbose
 18290 ;; This function uses a non-reentrant model
 18291 ;;
 18292                           
 18293                           	psect	text39
 18294  004164                     __ptext39:
 18295                           	opt stack 0
 18296  004164                     _printHelp:
 18297                           	opt stack 23
 18298                           
 18299                           ; BSR set to: 1
 18300                           ;main.c: 2532: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18301                           
 18302                           ; BSR set to: 0
 18303                           ;incstack = 0
 18304                           ;incstack = 0
 18305  004164  0E75               	movlw	high STR_199
 18306  004166  0100               	movlb	0	; () banked
 18307  004168  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18308  00416A  0E48               	movlw	low STR_199
 18309  00416C  6F61               	movwf	?_putsUSART& (0+255),b
 18310  00416E  EC9B  F00E         	call	_putsUSART	;wreg free
 18311                           
 18312                           ;main.c: 2533: putsUSART((char *) "------------------------------------\r\n");
 18313  004172  0E6E               	movlw	high (STR_231+28)
 18314  004174  0100               	movlb	0	; () banked
 18315  004176  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18316  004178  0E6F               	movlw	low (STR_231+28)
 18317  00417A  6F61               	movwf	?_putsUSART& (0+255),b
 18318  00417C  EC9B  F00E         	call	_putsUSART	;wreg free
 18319                           
 18320                           ;main.c: 2534: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18321  004180  0E78               	movlw	high STR_201
 18322  004182  0100               	movlb	0	; () banked
 18323  004184  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18324  004186  0E63               	movlw	low STR_201
 18325  004188  6F61               	movwf	?_putsUSART& (0+255),b
 18326  00418A  EC9B  F00E         	call	_putsUSART	;wreg free
 18327                           
 18328                           ;main.c: 2535: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18329  00418E  0E73               	movlw	high STR_202
 18330  004190  0100               	movlb	0	; () banked
 18331  004192  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18332  004194  0ED7               	movlw	low STR_202
 18333  004196  6F61               	movwf	?_putsUSART& (0+255),b
 18334  004198  EC9B  F00E         	call	_putsUSART	;wreg free
 18335                           
 18336                           ;main.c: 2536: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18337  00419C  0E73               	movlw	high STR_203
 18338  00419E  0100               	movlb	0	; () banked
 18339  0041A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18340  0041A2  0E7D               	movlw	low STR_203
 18341  0041A4  6F61               	movwf	?_putsUSART& (0+255),b
 18342  0041A6  EC9B  F00E         	call	_putsUSART	;wreg free
 18343                           
 18344                           ;main.c: 2537: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18345  0041AA  0E71               	movlw	high STR_204
 18346  0041AC  0100               	movlb	0	; () banked
 18347  0041AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18348  0041B0  0EF6               	movlw	low STR_204
 18349  0041B2  6F61               	movwf	?_putsUSART& (0+255),b
 18350  0041B4  EC9B  F00E         	call	_putsUSART	;wreg free
 18351                           
 18352                           ;main.c: 2538: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18353  0041B8  0E72               	movlw	high STR_205
 18354  0041BA  0100               	movlb	0	; () banked
 18355  0041BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18356  0041BE  0E5B               	movlw	low STR_205
 18357  0041C0  6F61               	movwf	?_putsUSART& (0+255),b
 18358  0041C2  EC9B  F00E         	call	_putsUSART	;wreg free
 18359                           
 18360                           ;main.c: 2539: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18361  0041C6  0E78               	movlw	high STR_206
 18362  0041C8  0100               	movlb	0	; () banked
 18363  0041CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18364  0041CC  0E0B               	movlw	low STR_206
 18365  0041CE  6F61               	movwf	?_putsUSART& (0+255),b
 18366  0041D0  EC9B  F00E         	call	_putsUSART	;wreg free
 18367                           
 18368                           ;main.c: 2540: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18369  0041D4  0E72               	movlw	high STR_207
 18370  0041D6  0100               	movlb	0	; () banked
 18371  0041D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18372  0041DA  0E8D               	movlw	low STR_207
 18373  0041DC  6F61               	movwf	?_putsUSART& (0+255),b
 18374  0041DE  EC9B  F00E         	call	_putsUSART	;wreg free
 18375                           
 18376                           ;main.c: 2541: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18377  0041E2  0E73               	movlw	high STR_208
 18378  0041E4  0100               	movlb	0	; () banked
 18379  0041E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18380  0041E8  0EAB               	movlw	low STR_208
 18381  0041EA  6F61               	movwf	?_putsUSART& (0+255),b
 18382  0041EC  EC9B  F00E         	call	_putsUSART	;wreg free
 18383                           
 18384                           ;main.c: 2542: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18385  0041F0  0E79               	movlw	high STR_209
 18386  0041F2  0100               	movlb	0	; () banked
 18387  0041F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18388  0041F6  0E00               	movlw	low STR_209
 18389  0041F8  6F61               	movwf	?_putsUSART& (0+255),b
 18390  0041FA  EC9B  F00E         	call	_putsUSART	;wreg free
 18391                           
 18392                           ;main.c: 2543: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18393  0041FE  0E70               	movlw	high STR_210
 18394  004200  0100               	movlb	0	; () banked
 18395  004202  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18396  004204  0E0F               	movlw	low STR_210
 18397  004206  6F61               	movwf	?_putsUSART& (0+255),b
 18398  004208  EC9B  F00E         	call	_putsUSART	;wreg free
 18399                           
 18400                           ;main.c: 2544: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18401  00420C  0E79               	movlw	high STR_211
 18402  00420E  0100               	movlb	0	; () banked
 18403  004210  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18404  004212  0EC0               	movlw	low STR_211
 18405  004214  6F61               	movwf	?_putsUSART& (0+255),b
 18406  004216  EC9B  F00E         	call	_putsUSART	;wreg free
 18407                           
 18408                           ;main.c: 2545: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18409  00421A  0E77               	movlw	high STR_212
 18410  00421C  0100               	movlb	0	; () banked
 18411  00421E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18412  004220  0E27               	movlw	low STR_212
 18413  004222  6F61               	movwf	?_putsUSART& (0+255),b
 18414  004224  EC9B  F00E         	call	_putsUSART	;wreg free
 18415                           
 18416                           ;main.c: 2546: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18417  004228  0E75               	movlw	high STR_213
 18418  00422A  0100               	movlb	0	; () banked
 18419  00422C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18420  00422E  0E21               	movlw	low STR_213
 18421  004230  6F61               	movwf	?_putsUSART& (0+255),b
 18422  004232  EC9B  F00E         	call	_putsUSART	;wreg free
 18423                           
 18424                           ;main.c: 2547: putsUSART((char *) "HELP - Display this help information.\r\n");
 18425  004236  0E74               	movlw	high STR_214
 18426  004238  0100               	movlb	0	; () banked
 18427  00423A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18428  00423C  0E82               	movlw	low STR_214
 18429  00423E  6F61               	movwf	?_putsUSART& (0+255),b
 18430  004240  EC9B  F00E         	call	_putsUSART	;wreg free
 18431                           
 18432                           ;main.c: 2548: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18433  004244  0E73               	movlw	high STR_215
 18434  004246  0100               	movlb	0	; () banked
 18435  004248  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18436  00424A  0E4E               	movlw	low STR_215
 18437  00424C  6F61               	movwf	?_putsUSART& (0+255),b
 18438  00424E  EC9B  F00E         	call	_putsUSART	;wreg free
 18439                           
 18440                           ;main.c: 2549: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 18441  004252  0E6E               	movlw	high STR_216
 18442  004254  0100               	movlb	0	; () banked
 18443  004256  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18444  004258  0E0E               	movlw	low STR_216
 18445  00425A  6F61               	movwf	?_putsUSART& (0+255),b
 18446  00425C  EC9B  F00E         	call	_putsUSART	;wreg free
 18447                           
 18448                           ;main.c: 2550: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 18449  004260  0E6E               	movlw	high STR_217
 18450  004262  0100               	movlb	0	; () banked
 18451  004264  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18452  004266  0ED9               	movlw	low STR_217
 18453  004268  6F61               	movwf	?_putsUSART& (0+255),b
 18454  00426A  EC9B  F00E         	call	_putsUSART	;wreg free
 18455                           
 18456                           ;main.c: 2551: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18457  00426E  0E6D               	movlw	high STR_218
 18458  004270  0100               	movlb	0	; () banked
 18459  004272  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18460  004274  0E7A               	movlw	low STR_218
 18461  004276  6F61               	movwf	?_putsUSART& (0+255),b
 18462  004278  EC9B  F00E         	call	_putsUSART	;wreg free
 18463                           
 18464                           ;main.c: 2552: putsUSART((char *) "FILTER - Set filter .\r\n");
 18465  00427C  0E79               	movlw	high STR_219
 18466  00427E  0100               	movlb	0	; () banked
 18467  004280  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18468  004282  0E18               	movlw	low STR_219
 18469  004284  6F61               	movwf	?_putsUSART& (0+255),b
 18470  004286  EC9B  F00E         	call	_putsUSART	;wreg free
 18471                           
 18472                           ;main.c: 2553: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18473  00428A  0E6D               	movlw	high STR_220
 18474  00428C  0100               	movlb	0	; () banked
 18475  00428E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18476  004290  0E2C               	movlw	low STR_220
 18477  004292  6F61               	movwf	?_putsUSART& (0+255),b
 18478  004294  EC9B  F00E         	call	_putsUSART	;wreg free
 18479                           
 18480                           ;main.c: 2554: putsUSART((char *) "MASK - Set mask .\r\n");
 18481  004298  0E7A               	movlw	high STR_221
 18482  00429A  0100               	movlb	0	; () banked
 18483  00429C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18484  00429E  0E46               	movlw	low STR_221
 18485  0042A0  6F61               	movwf	?_putsUSART& (0+255),b
 18486  0042A2  EC9B  F00E         	call	_putsUSART	;wreg free
 18487                           
 18488                           ;main.c: 2555: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18489  0042A6  0E6D               	movlw	high STR_222
 18490  0042A8  0100               	movlb	0	; () banked
 18491  0042AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18492  0042AC  0EC7               	movlw	low STR_222
 18493  0042AE  6F61               	movwf	?_putsUSART& (0+255),b
 18494  0042B0  EC9B  F00E         	call	_putsUSART	;wreg free
 18495                           
 18496                           ;main.c: 2556: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18497  0042B4  0E76               	movlw	high STR_223
 18498  0042B6  0100               	movlb	0	; () banked
 18499  0042B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18500  0042BA  0EE3               	movlw	low STR_223
 18501  0042BC  6F61               	movwf	?_putsUSART& (0+255),b
 18502  0042BE  EC9B  F00E         	call	_putsUSART	;wreg free
 18503                           
 18504                           ;main.c: 2557: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18505  0042C2  0E73               	movlw	high STR_224
 18506  0042C4  0100               	movlb	0	; () banked
 18507  0042C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18508  0042C8  0E1F               	movlw	low STR_224
 18509  0042CA  6F61               	movwf	?_putsUSART& (0+255),b
 18510  0042CC  EC9B  F00E         	call	_putsUSART	;wreg free
 18511                           
 18512                           ;main.c: 2558: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18513  0042D0  0E72               	movlw	high STR_225
 18514  0042D2  0100               	movlb	0	; () banked
 18515  0042D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18516  0042D6  0EF0               	movlw	low STR_225
 18517  0042D8  6F61               	movwf	?_putsUSART& (0+255),b
 18518  0042DA  EC9B  F00E         	call	_putsUSART	;wreg free
 18519                           
 18520                           ;main.c: 2559: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 18521  0042DE  0E6E               	movlw	high STR_226
 18522  0042E0  0100               	movlb	0	; () banked
 18523  0042E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18524  0042E4  0E96               	movlw	low STR_226
 18525  0042E6  6F61               	movwf	?_putsUSART& (0+255),b
 18526  0042E8  EC9B  F00E         	call	_putsUSART	;wreg free
 18527                           
 18528                           ;main.c: 2560: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18529  0042EC  0E72               	movlw	high STR_227
 18530  0042EE  0100               	movlb	0	; () banked
 18531  0042F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18532  0042F2  0EBF               	movlw	low STR_227
 18533  0042F4  6F61               	movwf	?_putsUSART& (0+255),b
 18534  0042F6  EC9B  F00E         	call	_putsUSART	;wreg free
 18535                           
 18536                           ;main.c: 2561: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18537  0042FA  0E70               	movlw	high STR_228
 18538  0042FC  0100               	movlb	0	; () banked
 18539  0042FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18540  004300  0E7E               	movlw	low STR_228
 18541  004302  6F61               	movwf	?_putsUSART& (0+255),b
 18542  004304  EC9B  F00E         	call	_putsUSART	;wreg free
 18543                           
 18544                           ;main.c: 2562: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18545  004308  0E6F               	movlw	high STR_229
 18546  00430A  0100               	movlb	0	; () banked
 18547  00430C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18548  00430E  0E5E               	movlw	low STR_229
 18549  004310  6F61               	movwf	?_putsUSART& (0+255),b
 18550  004312  EC9B  F00E         	call	_putsUSART	;wreg free
 18551                           
 18552                           ;main.c: 2563: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18553  004316  0E75               	movlw	high STR_230
 18554  004318  0100               	movlb	0	; () banked
 18555  00431A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18556  00431C  0EBD               	movlw	low STR_230
 18557  00431E  6F61               	movwf	?_putsUSART& (0+255),b
 18558  004320  EF9B  F00E         	goto	_putsUSART	;wreg free
 18559  004324                     __end_of_printHelp:
 18560                           	opt stack 0
 18561                           tblptru	equ	0xFF8
 18562                           tblptrh	equ	0xFF7
 18563                           tblptrl	equ	0xFF6
 18564                           tablat	equ	0xFF5
 18565                           prodh	equ	0xFF4
 18566                           prodl	equ	0xFF3
 18567                           intcon	equ	0xFF2
 18568                           indf0	equ	0xFEF
 18569                           postinc0	equ	0xFEE
 18570                           fsr0h	equ	0xFEA
 18571                           fsr0l	equ	0xFE9
 18572                           wreg	equ	0xFE8
 18573                           indf1	equ	0xFE7
 18574                           postinc1	equ	0xFE6
 18575                           postdec1	equ	0xFE5
 18576                           fsr1h	equ	0xFE2
 18577                           fsr1l	equ	0xFE1
 18578                           indf2	equ	0xFDF
 18579                           postinc2	equ	0xFDE
 18580                           postdec2	equ	0xFDD
 18581                           plusw2	equ	0xFDB
 18582                           fsr2h	equ	0xFDA
 18583                           fsr2l	equ	0xFD9
 18584                           status	equ	0xFD8
 18585                           
 18586 ;; *************** function _printErrors *****************
 18587 ;; Defined at:
 18588 ;;		line 2467 in file "main.c"
 18589 ;; Parameters:    Size  Location     Type
 18590 ;;		None
 18591 ;; Auto vars:     Size  Location     Type
 18592 ;;		None
 18593 ;; Return value:  Size  Location     Type
 18594 ;;		None               void
 18595 ;; Registers used:
 18596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18597 ;; Tracked objects:
 18598 ;;		On entry : F/1
 18599 ;;		On exit  : 0/0
 18600 ;;		Unchanged: 0/0
 18601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18602 ;;      Params:         0       0       0       0       0       0       0
 18603 ;;      Locals:         0      12       0       0       0       0       0
 18604 ;;      Temps:          0       0       0       0       0       0       0
 18605 ;;      Totals:         0      12       0       0       0       0       0
 18606 ;;Total ram usage:       12 bytes
 18607 ;; Hardware stack levels used:    1
 18608 ;; Hardware stack levels required when called:    5
 18609 ;; This function calls:
 18610 ;;		_putsUSART
 18611 ;;		_sprintf
 18612 ;; This function is called by:
 18613 ;;		_doModeVerbose
 18614 ;; This function uses a non-reentrant model
 18615 ;;
 18616                           
 18617                           	psect	text40
 18618  004B8E                     __ptext40:
 18619                           	opt stack 0
 18620  004B8E                     _printErrors:
 18621                           	opt stack 23
 18622                           
 18623                           ; BSR set to: 1
 18624                           ;main.c: 2468: putsUSART((char *) "CAN Receive overruns: ");
 18625                           
 18626                           ;incstack = 0
 18627                           ;incstack = 0
 18628  004B8E  0E79               	movlw	high STR_169
 18629  004B90  0100               	movlb	0	; () banked
 18630  004B92  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18631  004B94  0ED7               	movlw	low STR_169
 18632  004B96  6F61               	movwf	?_putsUSART& (0+255),b
 18633  004B98  EC9B  F00E         	call	_putsUSART	;wreg free
 18634                           
 18635                           ;main.c: 2469: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18636  004B9C  0101               	movlb	1	; () banked
 18637  004B9E  6700               	tstfsz	_bHex& (0+255),b
 18638  004BA0  D005               	goto	l11362
 18639                           
 18640                           ; BSR set to: 1
 18641  004BA2  0E7C               	movlw	high STR_155
 18642  004BA4  0100               	movlb	0	; () banked
 18643  004BA6  6F95               	movwf	(_printErrors$1384+1)& (0+255),b
 18644  004BA8  0EE0               	movlw	low STR_155
 18645  004BAA  D004               	goto	L15
 18646  004BAC                     l11362:
 18647                           
 18648                           ; BSR set to: 1
 18649  004BAC  0E7C               	movlw	high STR_170
 18650  004BAE  0100               	movlb	0	; () banked
 18651  004BB0  6F95               	movwf	(_printErrors$1384+1)& (0+255),b
 18652  004BB2  0E15               	movlw	low STR_170
 18653  004BB4                     L15:
 18654  004BB4  6F94               	movwf	_printErrors$1384& (0+255),b
 18655                           
 18656                           ; BSR set to: 0
 18657  004BB6  0E01               	movlw	high _wrkbuf
 18658  004BB8  0100               	movlb	0	; () banked
 18659  004BBA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18660  004BBC  0E54               	movlw	low _wrkbuf
 18661  004BBE  6F76               	movwf	?_sprintf& (0+255),b
 18662  004BC0  C094  F078         	movff	_printErrors$1384,?_sprintf+2
 18663  004BC4  C095  F079         	movff	_printErrors$1384+1,?_sprintf+3
 18664  004BC8  C0D1  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 18665  004BCC  C0D2  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 18666  004BD0  C0D3  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 18667  004BD4  C0D4  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 18668  004BD8  ECE9  F028         	call	_sprintf	;wreg free
 18669                           
 18670                           ; BSR set to: 0
 18671                           ;main.c: 2470: putsUSART(wrkbuf);
 18672  004BDC  0E01               	movlw	high _wrkbuf
 18673  004BDE  0100               	movlb	0	; () banked
 18674  004BE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18675  004BE2  0E54               	movlw	low _wrkbuf
 18676  004BE4  6F61               	movwf	?_putsUSART& (0+255),b
 18677  004BE6  EC9B  F00E         	call	_putsUSART	;wreg free
 18678                           
 18679                           ;main.c: 2471: putsUSART((char *) "\r\n");
 18680  004BEA  0E71               	movlw	high (STR_190+50)
 18681  004BEC  0100               	movlb	0	; () banked
 18682  004BEE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18683  004BF0  0E8A               	movlw	low (STR_190+50)
 18684  004BF2  6F61               	movwf	?_putsUSART& (0+255),b
 18685  004BF4  EC9B  F00E         	call	_putsUSART	;wreg free
 18686                           
 18687                           ;main.c: 2473: putsUSART((char *) "CAN Transmit overruns: ");
 18688  004BF8  0E79               	movlw	high STR_173
 18689  004BFA  0100               	movlb	0	; () banked
 18690  004BFC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18691  004BFE  0EA8               	movlw	low STR_173
 18692  004C00  6F61               	movwf	?_putsUSART& (0+255),b
 18693  004C02  EC9B  F00E         	call	_putsUSART	;wreg free
 18694                           
 18695                           ;main.c: 2474: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18696  004C06  0101               	movlb	1	; () banked
 18697  004C08  6700               	tstfsz	_bHex& (0+255),b
 18698  004C0A  D005               	goto	l11376
 18699                           
 18700                           ; BSR set to: 1
 18701  004C0C  0E7C               	movlw	high STR_155
 18702  004C0E  0100               	movlb	0	; () banked
 18703  004C10  6F97               	movwf	(_printErrors$1390+1)& (0+255),b
 18704  004C12  0EE0               	movlw	low STR_155
 18705  004C14  D004               	goto	L16
 18706  004C16                     l11376:
 18707                           
 18708                           ; BSR set to: 1
 18709  004C16  0E7C               	movlw	high STR_170
 18710  004C18  0100               	movlb	0	; () banked
 18711  004C1A  6F97               	movwf	(_printErrors$1390+1)& (0+255),b
 18712  004C1C  0E15               	movlw	low STR_170
 18713  004C1E                     L16:
 18714  004C1E  6F96               	movwf	_printErrors$1390& (0+255),b
 18715                           
 18716                           ; BSR set to: 0
 18717  004C20  0E01               	movlw	high _wrkbuf
 18718  004C22  0100               	movlb	0	; () banked
 18719  004C24  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18720  004C26  0E54               	movlw	low _wrkbuf
 18721  004C28  6F76               	movwf	?_sprintf& (0+255),b
 18722  004C2A  C096  F078         	movff	_printErrors$1390,?_sprintf+2
 18723  004C2E  C097  F079         	movff	_printErrors$1390+1,?_sprintf+3
 18724  004C32  C001  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 18725  004C36  C002  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 18726  004C3A  C003  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 18727  004C3E  C004  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 18728  004C42  ECE9  F028         	call	_sprintf	;wreg free
 18729                           
 18730                           ; BSR set to: 0
 18731                           ;main.c: 2475: putsUSART(wrkbuf);
 18732  004C46  0E01               	movlw	high _wrkbuf
 18733  004C48  0100               	movlb	0	; () banked
 18734  004C4A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18735  004C4C  0E54               	movlw	low _wrkbuf
 18736  004C4E  6F61               	movwf	?_putsUSART& (0+255),b
 18737  004C50  EC9B  F00E         	call	_putsUSART	;wreg free
 18738                           
 18739                           ;main.c: 2476: putsUSART((char *) "\r\n");
 18740  004C54  0E71               	movlw	high (STR_190+50)
 18741  004C56  0100               	movlb	0	; () banked
 18742  004C58  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18743  004C5A  0E8A               	movlw	low (STR_190+50)
 18744  004C5C  6F61               	movwf	?_putsUSART& (0+255),b
 18745  004C5E  EC9B  F00E         	call	_putsUSART	;wreg free
 18746                           
 18747                           ;main.c: 2478: putsUSART((char *) "UART Receive overruns: ");
 18748  004C62  0E79               	movlw	high STR_177
 18749  004C64  0100               	movlb	0	; () banked
 18750  004C66  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18751  004C68  0E90               	movlw	low STR_177
 18752  004C6A  6F61               	movwf	?_putsUSART& (0+255),b
 18753  004C6C  EC9B  F00E         	call	_putsUSART	;wreg free
 18754                           
 18755                           ;main.c: 2479: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18756  004C70  0101               	movlb	1	; () banked
 18757  004C72  6700               	tstfsz	_bHex& (0+255),b
 18758  004C74  D005               	goto	l11390
 18759                           
 18760                           ; BSR set to: 1
 18761  004C76  0E7C               	movlw	high STR_155
 18762  004C78  0100               	movlb	0	; () banked
 18763  004C7A  6F99               	movwf	(_printErrors$1396+1)& (0+255),b
 18764  004C7C  0EE0               	movlw	low STR_155
 18765  004C7E  D004               	goto	L17
 18766  004C80                     l11390:
 18767                           
 18768                           ; BSR set to: 1
 18769  004C80  0E7C               	movlw	high STR_170
 18770  004C82  0100               	movlb	0	; () banked
 18771  004C84  6F99               	movwf	(_printErrors$1396+1)& (0+255),b
 18772  004C86  0E15               	movlw	low STR_170
 18773  004C88                     L17:
 18774  004C88  6F98               	movwf	_printErrors$1396& (0+255),b
 18775                           
 18776                           ; BSR set to: 0
 18777  004C8A  0E01               	movlw	high _wrkbuf
 18778  004C8C  0100               	movlb	0	; () banked
 18779  004C8E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18780  004C90  0E54               	movlw	low _wrkbuf
 18781  004C92  6F76               	movwf	?_sprintf& (0+255),b
 18782  004C94  C098  F078         	movff	_printErrors$1396,?_sprintf+2
 18783  004C98  C099  F079         	movff	_printErrors$1396+1,?_sprintf+3
 18784  004C9C  C005  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 18785  004CA0  C006  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18786  004CA4  C007  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18787  004CA8  C008  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18788  004CAC  ECE9  F028         	call	_sprintf	;wreg free
 18789                           
 18790                           ; BSR set to: 0
 18791                           ;main.c: 2480: putsUSART(wrkbuf);
 18792  004CB0  0E01               	movlw	high _wrkbuf
 18793  004CB2  0100               	movlb	0	; () banked
 18794  004CB4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18795  004CB6  0E54               	movlw	low _wrkbuf
 18796  004CB8  6F61               	movwf	?_putsUSART& (0+255),b
 18797  004CBA  EC9B  F00E         	call	_putsUSART	;wreg free
 18798                           
 18799                           ;main.c: 2481: putsUSART((char *) "\r\n");
 18800  004CBE  0E71               	movlw	high (STR_190+50)
 18801  004CC0  0100               	movlb	0	; () banked
 18802  004CC2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18803  004CC4  0E8A               	movlw	low (STR_190+50)
 18804  004CC6  6F61               	movwf	?_putsUSART& (0+255),b
 18805  004CC8  EC9B  F00E         	call	_putsUSART	;wreg free
 18806                           
 18807                           ;main.c: 2483: putsUSART((char *) "UART Receive overruns: ");
 18808  004CCC  0E79               	movlw	high STR_177
 18809  004CCE  0100               	movlb	0	; () banked
 18810  004CD0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18811  004CD2  0E90               	movlw	low STR_177
 18812  004CD4  6F61               	movwf	?_putsUSART& (0+255),b
 18813  004CD6  EC9B  F00E         	call	_putsUSART	;wreg free
 18814                           
 18815                           ;main.c: 2484: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18816  004CDA  0101               	movlb	1	; () banked
 18817  004CDC  6700               	tstfsz	_bHex& (0+255),b
 18818  004CDE  D005               	goto	l11404
 18819                           
 18820                           ; BSR set to: 1
 18821  004CE0  0E7C               	movlw	high STR_155
 18822  004CE2  0100               	movlb	0	; () banked
 18823  004CE4  6F9B               	movwf	(_printErrors$1402+1)& (0+255),b
 18824  004CE6  0EE0               	movlw	low STR_155
 18825  004CE8  D004               	goto	L18
 18826  004CEA                     l11404:
 18827                           
 18828                           ; BSR set to: 1
 18829  004CEA  0E7C               	movlw	high STR_170
 18830  004CEC  0100               	movlb	0	; () banked
 18831  004CEE  6F9B               	movwf	(_printErrors$1402+1)& (0+255),b
 18832  004CF0  0E15               	movlw	low STR_170
 18833  004CF2                     L18:
 18834  004CF2  6F9A               	movwf	_printErrors$1402& (0+255),b
 18835                           
 18836                           ; BSR set to: 0
 18837  004CF4  0E01               	movlw	high _wrkbuf
 18838  004CF6  0100               	movlb	0	; () banked
 18839  004CF8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18840  004CFA  0E54               	movlw	low _wrkbuf
 18841  004CFC  6F76               	movwf	?_sprintf& (0+255),b
 18842  004CFE  C09A  F078         	movff	_printErrors$1402,?_sprintf+2
 18843  004D02  C09B  F079         	movff	_printErrors$1402+1,?_sprintf+3
 18844  004D06  C009  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 18845  004D0A  C00A  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18846  004D0E  C00B  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18847  004D12  C00C  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18848  004D16  ECE9  F028         	call	_sprintf	;wreg free
 18849                           
 18850                           ; BSR set to: 0
 18851                           ;main.c: 2485: putsUSART(wrkbuf);
 18852  004D1A  0E01               	movlw	high _wrkbuf
 18853  004D1C  0100               	movlb	0	; () banked
 18854  004D1E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18855  004D20  0E54               	movlw	low _wrkbuf
 18856  004D22  6F61               	movwf	?_putsUSART& (0+255),b
 18857  004D24  EC9B  F00E         	call	_putsUSART	;wreg free
 18858                           
 18859                           ;main.c: 2486: putsUSART((char *) "\r\n");
 18860  004D28  0E71               	movlw	high (STR_190+50)
 18861  004D2A  0100               	movlb	0	; () banked
 18862  004D2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18863  004D2E  0E8A               	movlw	low (STR_190+50)
 18864  004D30  6F61               	movwf	?_putsUSART& (0+255),b
 18865  004D32  EC9B  F00E         	call	_putsUSART	;wreg free
 18866                           
 18867                           ;main.c: 2488: putsUSART((char *) "Transmit Error Counter: ");
 18868  004D36  0E78               	movlw	high STR_185
 18869  004D38  0100               	movlb	0	; () banked
 18870  004D3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18871  004D3C  0EE7               	movlw	low STR_185
 18872  004D3E  6F61               	movwf	?_putsUSART& (0+255),b
 18873  004D40  EC9B  F00E         	call	_putsUSART	;wreg free
 18874                           
 18875                           ;main.c: 2489: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18876  004D44  0101               	movlb	1	; () banked
 18877  004D46  6700               	tstfsz	_bHex& (0+255),b
 18878  004D48  D005               	goto	l11418
 18879                           
 18880                           ; BSR set to: 1
 18881  004D4A  0E7C               	movlw	high STR_54
 18882  004D4C  0100               	movlb	0	; () banked
 18883  004D4E  6F9D               	movwf	(_printErrors$1408+1)& (0+255),b
 18884  004D50  0EED               	movlw	low STR_54
 18885  004D52  D004               	goto	L19
 18886  004D54                     l11418:
 18887                           
 18888                           ; BSR set to: 1
 18889  004D54  0E7C               	movlw	high STR_53
 18890  004D56  0100               	movlb	0	; () banked
 18891  004D58  6F9D               	movwf	(_printErrors$1408+1)& (0+255),b
 18892  004D5A  0E64               	movlw	low STR_53
 18893  004D5C                     L19:
 18894  004D5C  6F9C               	movwf	_printErrors$1408& (0+255),b
 18895                           
 18896                           ; BSR set to: 0
 18897  004D5E  0E01               	movlw	high _wrkbuf
 18898  004D60  0100               	movlb	0	; () banked
 18899  004D62  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18900  004D64  0E54               	movlw	low _wrkbuf
 18901  004D66  6F76               	movwf	?_sprintf& (0+255),b
 18902  004D68  C09C  F078         	movff	_printErrors$1408,?_sprintf+2
 18903  004D6C  C09D  F079         	movff	_printErrors$1408+1,?_sprintf+3
 18904  004D70  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 18905  004D74  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18906  004D76  ECE9  F028         	call	_sprintf	;wreg free
 18907                           
 18908                           ; BSR set to: 0
 18909                           ;main.c: 2490: putsUSART(wrkbuf);
 18910  004D7A  0E01               	movlw	high _wrkbuf
 18911  004D7C  0100               	movlb	0	; () banked
 18912  004D7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18913  004D80  0E54               	movlw	low _wrkbuf
 18914  004D82  6F61               	movwf	?_putsUSART& (0+255),b
 18915  004D84  EC9B  F00E         	call	_putsUSART	;wreg free
 18916                           
 18917                           ;main.c: 2491: putsUSART((char *) "\r\n");
 18918  004D88  0E71               	movlw	high (STR_190+50)
 18919  004D8A  0100               	movlb	0	; () banked
 18920  004D8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18921  004D8E  0E8A               	movlw	low (STR_190+50)
 18922  004D90  6F61               	movwf	?_putsUSART& (0+255),b
 18923  004D92  EC9B  F00E         	call	_putsUSART	;wreg free
 18924                           
 18925                           ;main.c: 2493: if (COMSTATbits.TXWARN) {
 18926  004D96  A474               	btfss	3956,2,c	;volatile
 18927  004D98  D007               	goto	l11430
 18928                           
 18929                           ;main.c: 2494: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 18930  004D9A  0E6F               	movlw	high STR_189
 18931  004D9C  0100               	movlb	0	; () banked
 18932  004D9E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18933  004DA0  0E9C               	movlw	low STR_189
 18934  004DA2  6F61               	movwf	?_putsUSART& (0+255),b
 18935  004DA4  EC9B  F00E         	call	_putsUSART	;wreg free
 18936  004DA8                     l11430:
 18937                           
 18938                           ;main.c: 2495: }
 18939                           ;main.c: 2497: if (COMSTATbits.TXBO) {
 18940  004DA8  AA74               	btfss	3956,5,c	;volatile
 18941  004DAA  D007               	goto	l11434
 18942                           
 18943                           ;main.c: 2498: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 18944  004DAC  0E71               	movlw	high STR_190
 18945  004DAE  0100               	movlb	0	; () banked
 18946  004DB0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18947  004DB2  0E58               	movlw	low STR_190
 18948  004DB4  6F61               	movwf	?_putsUSART& (0+255),b
 18949  004DB6  EC9B  F00E         	call	_putsUSART	;wreg free
 18950  004DBA                     l11434:
 18951                           
 18952                           ;main.c: 2499: }
 18953                           ;main.c: 2501: if (COMSTATbits.TXBP) {
 18954  004DBA  A874               	btfss	3956,4,c	;volatile
 18955  004DBC  D007               	goto	l1158
 18956                           
 18957                           ;main.c: 2502: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 18958  004DBE  0E6F               	movlw	high STR_191
 18959  004DC0  0100               	movlb	0	; () banked
 18960  004DC2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18961  004DC4  0ED6               	movlw	low STR_191
 18962  004DC6  6F61               	movwf	?_putsUSART& (0+255),b
 18963  004DC8  EC9B  F00E         	call	_putsUSART	;wreg free
 18964  004DCC                     l1158:
 18965                           
 18966                           ;main.c: 2503: }
 18967                           ;main.c: 2506: putsUSART((char *) "Receive Error Counter: ");
 18968  004DCC  0E79               	movlw	high STR_192
 18969  004DCE  0100               	movlb	0	; () banked
 18970  004DD0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18971  004DD2  0E78               	movlw	low STR_192
 18972  004DD4  6F61               	movwf	?_putsUSART& (0+255),b
 18973  004DD6  EC9B  F00E         	call	_putsUSART	;wreg free
 18974                           
 18975                           ;main.c: 2507: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 18976  004DDA  0101               	movlb	1	; () banked
 18977  004DDC  6700               	tstfsz	_bHex& (0+255),b
 18978  004DDE  D005               	goto	l11442
 18979                           
 18980                           ; BSR set to: 1
 18981  004DE0  0E7C               	movlw	high STR_54
 18982  004DE2  0100               	movlb	0	; () banked
 18983  004DE4  6F9F               	movwf	(_printErrors$1417+1)& (0+255),b
 18984  004DE6  0EED               	movlw	low STR_54
 18985  004DE8  D004               	goto	L20
 18986  004DEA                     l11442:
 18987                           
 18988                           ; BSR set to: 1
 18989  004DEA  0E7C               	movlw	high STR_53
 18990  004DEC  0100               	movlb	0	; () banked
 18991  004DEE  6F9F               	movwf	(_printErrors$1417+1)& (0+255),b
 18992  004DF0  0E64               	movlw	low STR_53
 18993  004DF2                     L20:
 18994  004DF2  6F9E               	movwf	_printErrors$1417& (0+255),b
 18995                           
 18996                           ; BSR set to: 0
 18997  004DF4  0E01               	movlw	high _wrkbuf
 18998  004DF6  0100               	movlb	0	; () banked
 18999  004DF8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19000  004DFA  0E54               	movlw	low _wrkbuf
 19001  004DFC  6F76               	movwf	?_sprintf& (0+255),b
 19002  004DFE  C09E  F078         	movff	_printErrors$1417,?_sprintf+2
 19003  004E02  C09F  F079         	movff	_printErrors$1417+1,?_sprintf+3
 19004  004E06  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19005  004E0A  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19006  004E0C  ECE9  F028         	call	_sprintf	;wreg free
 19007                           
 19008                           ; BSR set to: 0
 19009                           ;main.c: 2508: putsUSART(wrkbuf);
 19010  004E10  0E01               	movlw	high _wrkbuf
 19011  004E12  0100               	movlb	0	; () banked
 19012  004E14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19013  004E16  0E54               	movlw	low _wrkbuf
 19014  004E18  6F61               	movwf	?_putsUSART& (0+255),b
 19015  004E1A  EC9B  F00E         	call	_putsUSART	;wreg free
 19016                           
 19017                           ;main.c: 2509: putsUSART((char *) "\r\n");
 19018  004E1E  0E71               	movlw	high (STR_190+50)
 19019  004E20  0100               	movlb	0	; () banked
 19020  004E22  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19021  004E24  0E8A               	movlw	low (STR_190+50)
 19022  004E26  6F61               	movwf	?_putsUSART& (0+255),b
 19023  004E28  EC9B  F00E         	call	_putsUSART	;wreg free
 19024                           
 19025                           ;main.c: 2511: if (COMSTATbits.RXWARN) {
 19026  004E2C  A274               	btfss	3956,1,c	;volatile
 19027  004E2E  D007               	goto	l11454
 19028                           
 19029                           ;main.c: 2512: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19030  004E30  0E70               	movlw	high STR_196
 19031  004E32  0100               	movlb	0	; () banked
 19032  004E34  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19033  004E36  0E47               	movlw	low STR_196
 19034  004E38  6F61               	movwf	?_putsUSART& (0+255),b
 19035  004E3A  EC9B  F00E         	call	_putsUSART	;wreg free
 19036  004E3E                     l11454:
 19037                           
 19038                           ;main.c: 2513: }
 19039                           ;main.c: 2515: if (COMSTATbits.RXBP) {
 19040  004E3E  A674               	btfss	3956,3,c	;volatile
 19041  004E40  D007               	goto	l11458
 19042                           
 19043                           ;main.c: 2516: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19044  004E42  0E70               	movlw	high STR_197
 19045  004E44  0100               	movlb	0	; () banked
 19046  004E46  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19047  004E48  0EEC               	movlw	low STR_197
 19048  004E4A  6F61               	movwf	?_putsUSART& (0+255),b
 19049  004E4C  EC9B  F00E         	call	_putsUSART	;wreg free
 19050  004E50                     l11458:
 19051                           
 19052                           ;main.c: 2517: }
 19053                           ;main.c: 2519: if (COMSTATbits.EWARN) {
 19054  004E50  A074               	btfss	3956,0,c	;volatile
 19055  004E52  D007               	goto	l1166
 19056                           
 19057                           ;main.c: 2520: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19058  004E54  0E71               	movlw	high STR_198
 19059  004E56  0100               	movlb	0	; () banked
 19060  004E58  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19061  004E5A  0EC2               	movlw	low STR_198
 19062  004E5C  6F61               	movwf	?_putsUSART& (0+255),b
 19063  004E5E  EC9B  F00E         	call	_putsUSART	;wreg free
 19064  004E62                     l1166:
 19065  004E62  0012               	return	
 19066  004E64                     __end_of_printErrors:
 19067                           	opt stack 0
 19068                           tblptru	equ	0xFF8
 19069                           tblptrh	equ	0xFF7
 19070                           tblptrl	equ	0xFF6
 19071                           tablat	equ	0xFF5
 19072                           prodh	equ	0xFF4
 19073                           prodl	equ	0xFF3
 19074                           intcon	equ	0xFF2
 19075                           indf0	equ	0xFEF
 19076                           postinc0	equ	0xFEE
 19077                           fsr0h	equ	0xFEA
 19078                           fsr0l	equ	0xFE9
 19079                           wreg	equ	0xFE8
 19080                           indf1	equ	0xFE7
 19081                           postinc1	equ	0xFE6
 19082                           postdec1	equ	0xFE5
 19083                           fsr1h	equ	0xFE2
 19084                           fsr1l	equ	0xFE1
 19085                           indf2	equ	0xFDF
 19086                           postinc2	equ	0xFDE
 19087                           postdec2	equ	0xFDD
 19088                           plusw2	equ	0xFDB
 19089                           fsr2h	equ	0xFDA
 19090                           fsr2l	equ	0xFD9
 19091                           status	equ	0xFD8
 19092                           
 19093 ;; *************** function _printStatistics *****************
 19094 ;; Defined at:
 19095 ;;		line 2440 in file "main.c"
 19096 ;; Parameters:    Size  Location     Type
 19097 ;;		None
 19098 ;; Auto vars:     Size  Location     Type
 19099 ;;		None
 19100 ;; Return value:  Size  Location     Type
 19101 ;;		None               void
 19102 ;; Registers used:
 19103 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19104 ;; Tracked objects:
 19105 ;;		On entry : F/1
 19106 ;;		On exit  : 0/0
 19107 ;;		Unchanged: 0/0
 19108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19109 ;;      Params:         0       0       0       0       0       0       0
 19110 ;;      Locals:         0       8       0       0       0       0       0
 19111 ;;      Temps:          0       0       0       0       0       0       0
 19112 ;;      Totals:         0       8       0       0       0       0       0
 19113 ;;Total ram usage:        8 bytes
 19114 ;; Hardware stack levels used:    1
 19115 ;; Hardware stack levels required when called:    5
 19116 ;; This function calls:
 19117 ;;		_putsUSART
 19118 ;;		_sprintf
 19119 ;; This function is called by:
 19120 ;;		_doModeVerbose
 19121 ;; This function uses a non-reentrant model
 19122 ;;
 19123                           
 19124                           	psect	text41
 19125  003FBC                     __ptext41:
 19126                           	opt stack 0
 19127  003FBC                     _printStatistics:
 19128                           	opt stack 23
 19129                           
 19130                           ; BSR set to: 1
 19131                           ;main.c: 2441: putsUSART((char *) "Sent CAN frames: ");
 19132                           
 19133                           ;incstack = 0
 19134                           ;incstack = 0
 19135  003FBC  0E7B               	movlw	high STR_153
 19136  003FBE  0100               	movlb	0	; () banked
 19137  003FC0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19138  003FC2  0E09               	movlw	low STR_153
 19139  003FC4  6F61               	movwf	?_putsUSART& (0+255),b
 19140  003FC6  EC9B  F00E         	call	_putsUSART	;wreg free
 19141                           
 19142                           ;main.c: 2442: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19143  003FCA  0101               	movlb	1	; () banked
 19144  003FCC  6700               	tstfsz	_bHex& (0+255),b
 19145  003FCE  D005               	goto	l11306
 19146                           
 19147                           ; BSR set to: 1
 19148  003FD0  0E7C               	movlw	high STR_155
 19149  003FD2  0100               	movlb	0	; () banked
 19150  003FD4  6F95               	movwf	(_printStatistics$1359+1)& (0+255),b
 19151  003FD6  0EE0               	movlw	low STR_155
 19152  003FD8  D004               	goto	L21
 19153  003FDA                     l11306:
 19154                           
 19155                           ; BSR set to: 1
 19156  003FDA  0E7C               	movlw	high STR_154
 19157  003FDC  0100               	movlb	0	; () banked
 19158  003FDE  6F95               	movwf	(_printStatistics$1359+1)& (0+255),b
 19159  003FE0  0E72               	movlw	low STR_154
 19160  003FE2                     L21:
 19161  003FE2  6F94               	movwf	_printStatistics$1359& (0+255),b
 19162                           
 19163                           ; BSR set to: 0
 19164  003FE4  0E01               	movlw	high _wrkbuf
 19165  003FE6  0100               	movlb	0	; () banked
 19166  003FE8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19167  003FEA  0E54               	movlw	low _wrkbuf
 19168  003FEC  6F76               	movwf	?_sprintf& (0+255),b
 19169  003FEE  C094  F078         	movff	_printStatistics$1359,?_sprintf+2
 19170  003FF2  C095  F079         	movff	_printStatistics$1359+1,?_sprintf+3
 19171  003FF6  C0E1  F07A         	movff	_cntTxFrames,?_sprintf+4
 19172  003FFA  C0E2  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19173  003FFE  C0E3  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19174  004002  C0E4  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19175  004006  ECE9  F028         	call	_sprintf	;wreg free
 19176                           
 19177                           ; BSR set to: 0
 19178                           ;main.c: 2443: putsUSART(wrkbuf);
 19179  00400A  0E01               	movlw	high _wrkbuf
 19180  00400C  0100               	movlb	0	; () banked
 19181  00400E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19182  004010  0E54               	movlw	low _wrkbuf
 19183  004012  6F61               	movwf	?_putsUSART& (0+255),b
 19184  004014  EC9B  F00E         	call	_putsUSART	;wreg free
 19185                           
 19186                           ;main.c: 2444: putsUSART((char *) "\r\n");
 19187  004018  0E71               	movlw	high (STR_190+50)
 19188  00401A  0100               	movlb	0	; () banked
 19189  00401C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19190  00401E  0E8A               	movlw	low (STR_190+50)
 19191  004020  6F61               	movwf	?_putsUSART& (0+255),b
 19192  004022  EC9B  F00E         	call	_putsUSART	;wreg free
 19193                           
 19194                           ;main.c: 2446: putsUSART((char *) "Sent CAN bytes: ");
 19195  004026  0E7B               	movlw	high STR_157
 19196  004028  0100               	movlb	0	; () banked
 19197  00402A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19198  00402C  0E3D               	movlw	low STR_157
 19199  00402E  6F61               	movwf	?_putsUSART& (0+255),b
 19200  004030  EC9B  F00E         	call	_putsUSART	;wreg free
 19201                           
 19202                           ;main.c: 2447: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19203  004034  0101               	movlb	1	; () banked
 19204  004036  6700               	tstfsz	_bHex& (0+255),b
 19205  004038  D005               	goto	l11320
 19206                           
 19207                           ; BSR set to: 1
 19208  00403A  0E7C               	movlw	high STR_155
 19209  00403C  0100               	movlb	0	; () banked
 19210  00403E  6F97               	movwf	(_printStatistics$1365+1)& (0+255),b
 19211  004040  0EE0               	movlw	low STR_155
 19212  004042  D004               	goto	L22
 19213  004044                     l11320:
 19214                           
 19215                           ; BSR set to: 1
 19216  004044  0E7C               	movlw	high STR_154
 19217  004046  0100               	movlb	0	; () banked
 19218  004048  6F97               	movwf	(_printStatistics$1365+1)& (0+255),b
 19219  00404A  0E72               	movlw	low STR_154
 19220  00404C                     L22:
 19221  00404C  6F96               	movwf	_printStatistics$1365& (0+255),b
 19222                           
 19223                           ; BSR set to: 0
 19224  00404E  0E01               	movlw	high _wrkbuf
 19225  004050  0100               	movlb	0	; () banked
 19226  004052  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19227  004054  0E54               	movlw	low _wrkbuf
 19228  004056  6F76               	movwf	?_sprintf& (0+255),b
 19229  004058  C096  F078         	movff	_printStatistics$1365,?_sprintf+2
 19230  00405C  C097  F079         	movff	_printStatistics$1365+1,?_sprintf+3
 19231  004060  C0DD  F07A         	movff	_cntTxBytes,?_sprintf+4
 19232  004064  C0DE  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19233  004068  C0DF  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19234  00406C  C0E0  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19235  004070  ECE9  F028         	call	_sprintf	;wreg free
 19236                           
 19237                           ; BSR set to: 0
 19238                           ;main.c: 2448: putsUSART(wrkbuf);
 19239  004074  0E01               	movlw	high _wrkbuf
 19240  004076  0100               	movlb	0	; () banked
 19241  004078  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19242  00407A  0E54               	movlw	low _wrkbuf
 19243  00407C  6F61               	movwf	?_putsUSART& (0+255),b
 19244  00407E  EC9B  F00E         	call	_putsUSART	;wreg free
 19245                           
 19246                           ;main.c: 2449: putsUSART((char *) "\r\n");
 19247  004082  0E71               	movlw	high (STR_190+50)
 19248  004084  0100               	movlb	0	; () banked
 19249  004086  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19250  004088  0E8A               	movlw	low (STR_190+50)
 19251  00408A  6F61               	movwf	?_putsUSART& (0+255),b
 19252  00408C  EC9B  F00E         	call	_putsUSART	;wreg free
 19253                           
 19254                           ;main.c: 2451: putsUSART((char *) "Received CAN frames: ");
 19255  004090  0E7A               	movlw	high STR_161
 19256  004092  0100               	movlb	0	; () banked
 19257  004094  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19258  004096  0E1B               	movlw	low STR_161
 19259  004098  6F61               	movwf	?_putsUSART& (0+255),b
 19260  00409A  EC9B  F00E         	call	_putsUSART	;wreg free
 19261                           
 19262                           ;main.c: 2452: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19263  00409E  0101               	movlb	1	; () banked
 19264  0040A0  6700               	tstfsz	_bHex& (0+255),b
 19265  0040A2  D005               	goto	l11334
 19266                           
 19267                           ; BSR set to: 1
 19268  0040A4  0E7C               	movlw	high STR_155
 19269  0040A6  0100               	movlb	0	; () banked
 19270  0040A8  6F99               	movwf	(_printStatistics$1371+1)& (0+255),b
 19271  0040AA  0EE0               	movlw	low STR_155
 19272  0040AC  D004               	goto	L23
 19273  0040AE                     l11334:
 19274                           
 19275                           ; BSR set to: 1
 19276  0040AE  0E7C               	movlw	high STR_154
 19277  0040B0  0100               	movlb	0	; () banked
 19278  0040B2  6F99               	movwf	(_printStatistics$1371+1)& (0+255),b
 19279  0040B4  0E72               	movlw	low STR_154
 19280  0040B6                     L23:
 19281  0040B6  6F98               	movwf	_printStatistics$1371& (0+255),b
 19282                           
 19283                           ; BSR set to: 0
 19284  0040B8  0E01               	movlw	high _wrkbuf
 19285  0040BA  0100               	movlb	0	; () banked
 19286  0040BC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19287  0040BE  0E54               	movlw	low _wrkbuf
 19288  0040C0  6F76               	movwf	?_sprintf& (0+255),b
 19289  0040C2  C098  F078         	movff	_printStatistics$1371,?_sprintf+2
 19290  0040C6  C099  F079         	movff	_printStatistics$1371+1,?_sprintf+3
 19291  0040CA  C0D9  F07A         	movff	_cntRxFrames,?_sprintf+4
 19292  0040CE  C0DA  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19293  0040D2  C0DB  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19294  0040D6  C0DC  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19295  0040DA  ECE9  F028         	call	_sprintf	;wreg free
 19296                           
 19297                           ; BSR set to: 0
 19298                           ;main.c: 2453: putsUSART(wrkbuf);
 19299  0040DE  0E01               	movlw	high _wrkbuf
 19300  0040E0  0100               	movlb	0	; () banked
 19301  0040E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19302  0040E4  0E54               	movlw	low _wrkbuf
 19303  0040E6  6F61               	movwf	?_putsUSART& (0+255),b
 19304  0040E8  EC9B  F00E         	call	_putsUSART	;wreg free
 19305                           
 19306                           ;main.c: 2454: putsUSART((char *) "\r\n");
 19307  0040EC  0E71               	movlw	high (STR_190+50)
 19308  0040EE  0100               	movlb	0	; () banked
 19309  0040F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19310  0040F2  0E8A               	movlw	low (STR_190+50)
 19311  0040F4  6F61               	movwf	?_putsUSART& (0+255),b
 19312  0040F6  EC9B  F00E         	call	_putsUSART	;wreg free
 19313                           
 19314                           ;main.c: 2456: putsUSART((char *) "Received CAN bytes: ");
 19315  0040FA  0E7A               	movlw	high STR_165
 19316  0040FC  0100               	movlb	0	; () banked
 19317  0040FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19318  004100  0E31               	movlw	low STR_165
 19319  004102  6F61               	movwf	?_putsUSART& (0+255),b
 19320  004104  EC9B  F00E         	call	_putsUSART	;wreg free
 19321                           
 19322                           ;main.c: 2457: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19323  004108  0101               	movlb	1	; () banked
 19324  00410A  6700               	tstfsz	_bHex& (0+255),b
 19325  00410C  D005               	goto	l11348
 19326                           
 19327                           ; BSR set to: 1
 19328  00410E  0E7C               	movlw	high STR_155
 19329  004110  0100               	movlb	0	; () banked
 19330  004112  6F9B               	movwf	(_printStatistics$1377+1)& (0+255),b
 19331  004114  0EE0               	movlw	low STR_155
 19332  004116  D004               	goto	L24
 19333  004118                     l11348:
 19334                           
 19335                           ; BSR set to: 1
 19336  004118  0E7C               	movlw	high STR_154
 19337  00411A  0100               	movlb	0	; () banked
 19338  00411C  6F9B               	movwf	(_printStatistics$1377+1)& (0+255),b
 19339  00411E  0E72               	movlw	low STR_154
 19340  004120                     L24:
 19341  004120  6F9A               	movwf	_printStatistics$1377& (0+255),b
 19342                           
 19343                           ; BSR set to: 0
 19344  004122  0E01               	movlw	high _wrkbuf
 19345  004124  0100               	movlb	0	; () banked
 19346  004126  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19347  004128  0E54               	movlw	low _wrkbuf
 19348  00412A  6F76               	movwf	?_sprintf& (0+255),b
 19349  00412C  C09A  F078         	movff	_printStatistics$1377,?_sprintf+2
 19350  004130  C09B  F079         	movff	_printStatistics$1377+1,?_sprintf+3
 19351  004134  C0D5  F07A         	movff	_cntRxBytes,?_sprintf+4
 19352  004138  C0D6  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19353  00413C  C0D7  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19354  004140  C0D8  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19355  004144  ECE9  F028         	call	_sprintf	;wreg free
 19356                           
 19357                           ; BSR set to: 0
 19358                           ;main.c: 2458: putsUSART(wrkbuf);
 19359  004148  0E01               	movlw	high _wrkbuf
 19360  00414A  0100               	movlb	0	; () banked
 19361  00414C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19362  00414E  0E54               	movlw	low _wrkbuf
 19363  004150  6F61               	movwf	?_putsUSART& (0+255),b
 19364  004152  EC9B  F00E         	call	_putsUSART	;wreg free
 19365                           
 19366                           ;main.c: 2459: putsUSART((char *) "\r\n");
 19367  004156  0E71               	movlw	high (STR_190+50)
 19368  004158  0100               	movlb	0	; () banked
 19369  00415A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19370  00415C  0E8A               	movlw	low (STR_190+50)
 19371  00415E  6F61               	movwf	?_putsUSART& (0+255),b
 19372  004160  EF9B  F00E         	goto	_putsUSART	;wreg free
 19373  004164                     __end_of_printStatistics:
 19374                           	opt stack 0
 19375                           tblptru	equ	0xFF8
 19376                           tblptrh	equ	0xFF7
 19377                           tblptrl	equ	0xFF6
 19378                           tablat	equ	0xFF5
 19379                           prodh	equ	0xFF4
 19380                           prodl	equ	0xFF3
 19381                           intcon	equ	0xFF2
 19382                           indf0	equ	0xFEF
 19383                           postinc0	equ	0xFEE
 19384                           fsr0h	equ	0xFEA
 19385                           fsr0l	equ	0xFE9
 19386                           wreg	equ	0xFE8
 19387                           indf1	equ	0xFE7
 19388                           postinc1	equ	0xFE6
 19389                           postdec1	equ	0xFE5
 19390                           fsr1h	equ	0xFE2
 19391                           fsr1l	equ	0xFE1
 19392                           indf2	equ	0xFDF
 19393                           postinc2	equ	0xFDE
 19394                           postdec2	equ	0xFDD
 19395                           plusw2	equ	0xFDB
 19396                           fsr2h	equ	0xFDA
 19397                           fsr2l	equ	0xFD9
 19398                           status	equ	0xFD8
 19399                           
 19400 ;; *************** function _atoi *****************
 19401 ;; Defined at:
 19402 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19403 ;; Parameters:    Size  Location     Type
 19404 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19405 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 19406 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 19407 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 19408 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 19409 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19410 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19411 ;; Auto vars:     Size  Location     Type
 19412 ;;  a               2   11[BANK0 ] int 
 19413 ;;  sign            1   10[BANK0 ] unsigned char 
 19414 ;; Return value:  Size  Location     Type
 19415 ;;                  2    6[BANK0 ] int 
 19416 ;; Registers used:
 19417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19418 ;; Tracked objects:
 19419 ;;		On entry : C/2
 19420 ;;		On exit  : F/0
 19421 ;;		Unchanged: 0/0
 19422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19423 ;;      Params:         0       2       0       0       0       0       0
 19424 ;;      Locals:         0       3       0       0       0       0       0
 19425 ;;      Temps:          0       2       0       0       0       0       0
 19426 ;;      Totals:         0       7       0       0       0       0       0
 19427 ;;Total ram usage:        7 bytes
 19428 ;; Hardware stack levels used:    1
 19429 ;; Hardware stack levels required when called:    4
 19430 ;; This function calls:
 19431 ;;		_isdigit
 19432 ;;		___wmul
 19433 ;; This function is called by:
 19434 ;;		_doModeVerbose
 19435 ;; This function uses a non-reentrant model
 19436 ;;
 19437                           
 19438                           	psect	text42
 19439  003368                     __ptext42:
 19440                           	opt stack 0
 19441  003368                     _atoi:
 19442                           	opt stack 24
 19443                           
 19444                           ;incstack = 0
 19445                           ;incstack = 0
 19446  003368  D003               	goto	l11258
 19447  00336A                     l11256:
 19448  00336A  0100               	movlb	0	; () banked
 19449  00336C  4B66               	infsnz	atoi@s& (0+255),f,b
 19450  00336E  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19451  003370                     l11258:
 19452  003370  0100               	movlb	0	; () banked
 19453  003372  D876               	call	PL22	;call to abstracted procedure
 19454  003374  64EA               	cpfsgt	fsr0h,c
 19455  003376  D003               	bra	u13977
 19456  003378  6EEA               	movwf	fsr0h,c
 19457  00337A  50EF               	movf	indf0,w,c
 19458  00337C  D003               	bra	u13970
 19459  00337E                     u13977:
 19460  00337E  6EF7               	movwf	tblptrh,c
 19461  003380  0008               	tblrd		*
 19462  003382  50F5               	movf	tablat,w,c
 19463  003384                     u13970:
 19464  003384  0A20               	xorlw	32
 19465  003386  E0F1               	bz	l11256
 19466  003388  0100               	movlb	0	; () banked
 19467  00338A  D86A               	call	PL22	;call to abstracted procedure
 19468  00338C  64EA               	cpfsgt	fsr0h,c
 19469  00338E  D003               	bra	u13997
 19470  003390  6EEA               	movwf	fsr0h,c
 19471  003392  50EF               	movf	indf0,w,c
 19472  003394  D003               	bra	u13990
 19473  003396                     u13997:
 19474  003396  6EF7               	movwf	tblptrh,c
 19475  003398  0008               	tblrd		*
 19476  00339A  50F5               	movf	tablat,w,c
 19477  00339C                     u13990:
 19478  00339C  0A09               	xorlw	9
 19479  00339E  E0E5               	bz	l11256
 19480  0033A0  0100               	movlb	0	; () banked
 19481  0033A2  6B6B               	clrf	atoi@a& (0+255),b
 19482  0033A4  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19483  0033A6  6B6A               	clrf	atoi@sign& (0+255),b
 19484                           
 19485                           ; BSR set to: 0
 19486  0033A8  D85B               	call	PL22	;call to abstracted procedure
 19487  0033AA  64EA               	cpfsgt	fsr0h,c
 19488  0033AC  D003               	bra	u14017
 19489  0033AE  6EEA               	movwf	fsr0h,c
 19490  0033B0  50EF               	movf	indf0,w,c
 19491  0033B2  D003               	bra	u14010
 19492  0033B4                     u14017:
 19493  0033B4  6EF7               	movwf	tblptrh,c
 19494  0033B6  0008               	tblrd		*
 19495  0033B8  50F5               	movf	tablat,w,c
 19496  0033BA                     u14010:
 19497  0033BA  0A2D               	xorlw	45
 19498  0033BC  E103               	bnz	l11266
 19499  0033BE  0100               	movlb	0	; () banked
 19500  0033C0  2B6A               	incf	atoi@sign& (0+255),f,b
 19501  0033C2  D00D               	goto	L25
 19502  0033C4                     l11266:
 19503  0033C4  0100               	movlb	0	; () banked
 19504  0033C6  D84C               	call	PL22	;call to abstracted procedure
 19505  0033C8  64EA               	cpfsgt	fsr0h,c
 19506  0033CA  D003               	bra	u14037
 19507  0033CC  6EEA               	movwf	fsr0h,c
 19508  0033CE  50EF               	movf	indf0,w,c
 19509  0033D0  D003               	bra	u14030
 19510  0033D2                     u14037:
 19511  0033D2  6EF7               	movwf	tblptrh,c
 19512  0033D4  0008               	tblrd		*
 19513  0033D6  50F5               	movf	tablat,w,c
 19514  0033D8                     u14030:
 19515  0033D8  0A2B               	xorlw	43
 19516  0033DA  E121               	bnz	l11274
 19517  0033DC                     l11268:
 19518  0033DC  0100               	movlb	0	; () banked
 19519  0033DE                     L25:
 19520  0033DE  4B66               	infsnz	atoi@s& (0+255),f,b
 19521  0033E0  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19522  0033E2  D01D               	goto	l11274
 19523  0033E4                     l11270:
 19524                           
 19525                           ; BSR set to: 0
 19526  0033E4  C06B  F060         	movff	atoi@a,?___wmul
 19527  0033E8  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19528  0033EC  6B63               	clrf	(?___wmul+3)& (0+255),b
 19529  0033EE  0E0A               	movlw	10
 19530  0033F0  6F62               	movwf	(?___wmul+2)& (0+255),b
 19531  0033F2  EC97  F00C         	call	___wmul	;wreg free
 19532  0033F6  D834               	call	PL22	;call to abstracted procedure
 19533  0033F8  64EA               	cpfsgt	fsr0h,c
 19534  0033FA  D003               	bra	u14057
 19535  0033FC  6EEA               	movwf	fsr0h,c
 19536  0033FE  50EF               	movf	indf0,w,c
 19537  003400  D003               	bra	u14050
 19538  003402                     u14057:
 19539  003402  6EF7               	movwf	tblptrh,c
 19540  003404  0008               	tblrd		*
 19541  003406  50F5               	movf	tablat,w,c
 19542  003408                     u14050:
 19543  003408  0100               	movlb	0	; () banked
 19544  00340A  2760               	addwf	?___wmul& (0+255),f,b
 19545  00340C  0E00               	movlw	0
 19546  00340E  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19547  003410  0ED0               	movlw	208
 19548  003412  2560               	addwf	?___wmul& (0+255),w,b
 19549  003414  6F6B               	movwf	atoi@a& (0+255),b
 19550  003416  0EFF               	movlw	255
 19551  003418  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19552  00341A  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19553  00341C  D7DF               	goto	l11268
 19554  00341E                     l11274:
 19555  00341E  0100               	movlb	0	; () banked
 19556  003420  D81F               	call	PL22	;call to abstracted procedure
 19557  003422  64EA               	cpfsgt	fsr0h,c
 19558  003424  D003               	bra	u14067
 19559  003426  6EEA               	movwf	fsr0h,c
 19560  003428  50EF               	movf	indf0,w,c
 19561  00342A  D003               	bra	u14060
 19562  00342C                     u14067:
 19563  00342C  6EF7               	movwf	tblptrh,c
 19564  00342E  0008               	tblrd		*
 19565  003430  50F5               	movf	tablat,w,c
 19566  003432                     u14060:
 19567  003432  EC2E  F00C         	call	_isdigit
 19568  003436  E2D6               	bc	l11270
 19569                           
 19570                           ; BSR set to: 0
 19571  003438  516A               	movf	atoi@sign& (0+255),w,b
 19572  00343A  E00D               	bz	l2028
 19573                           
 19574                           ; BSR set to: 0
 19575  00343C  C06B  F068         	movff	atoi@a,??_atoi
 19576  003440  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19577  003444  1F68               	comf	??_atoi& (0+255),f,b
 19578  003446  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19579  003448  4B68               	infsnz	??_atoi& (0+255),f,b
 19580  00344A  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19581  00344C  C068  F066         	movff	??_atoi,?_atoi
 19582  003450  C069  F067         	movff	??_atoi+1,?_atoi+1
 19583  003454  D004               	goto	l2029
 19584  003456                     l2028:
 19585                           
 19586                           ; BSR set to: 0
 19587  003456  C06B  F066         	movff	atoi@a,?_atoi
 19588  00345A  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19589  00345E                     l2029:
 19590                           
 19591                           ; BSR set to: 0
 19592  00345E  0012               	return	
 19593  003460                     __end_of_atoi:
 19594                           	opt stack 0
 19595  003460                     PL22:
 19596                           	opt stack 24
 19597  003460  5166               	movf	atoi@s& (0+255),w,b
 19598  003462  6EF6               	movwf	tblptrl,c
 19599  003464  6EE9               	movwf	fsr0l,c
 19600  003466  0E05               	movlw	(high __ramtop+-1)
 19601  003468  6EEA               	movwf	fsr0h,c
 19602  00346A  5167               	movf	(atoi@s+1)& (0+255),w,b
 19603  00346C  0012               	return	
 19604  00346E                     __end_ofPL22:
 19605                           	opt stack 0
 19606                           tblptru	equ	0xFF8
 19607                           tblptrh	equ	0xFF7
 19608                           tblptrl	equ	0xFF6
 19609                           tablat	equ	0xFF5
 19610                           prodh	equ	0xFF4
 19611                           prodl	equ	0xFF3
 19612                           intcon	equ	0xFF2
 19613                           indf0	equ	0xFEF
 19614                           postinc0	equ	0xFEE
 19615                           fsr0h	equ	0xFEA
 19616                           fsr0l	equ	0xFE9
 19617                           wreg	equ	0xFE8
 19618                           indf1	equ	0xFE7
 19619                           postinc1	equ	0xFE6
 19620                           postdec1	equ	0xFE5
 19621                           fsr1h	equ	0xFE2
 19622                           fsr1l	equ	0xFE1
 19623                           indf2	equ	0xFDF
 19624                           postinc2	equ	0xFDE
 19625                           postdec2	equ	0xFDD
 19626                           plusw2	equ	0xFDB
 19627                           fsr2h	equ	0xFDA
 19628                           fsr2l	equ	0xFD9
 19629                           status	equ	0xFD8
 19630                           
 19631 ;; *************** function _strtok *****************
 19632 ;; Defined at:
 19633 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19634 ;; Parameters:    Size  Location     Type
 19635 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19636 ;;		 -> NULL(0), cmdbuf(80), 
 19637 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19638 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 19639 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 19640 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 19641 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 19642 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19643 ;;		 -> STR_31(2), STR_30(2), 
 19644 ;; Auto vars:     Size  Location     Type
 19645 ;;		None
 19646 ;; Return value:  Size  Location     Type
 19647 ;;                  2   12[BANK0 ] PTR unsigned char 
 19648 ;; Registers used:
 19649 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19650 ;; Tracked objects:
 19651 ;;		On entry : F/0
 19652 ;;		On exit  : F/0
 19653 ;;		Unchanged: 0/0
 19654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19655 ;;      Params:         0       4       0       0       0       0       0
 19656 ;;      Locals:         0       0       0       0       0       0       0
 19657 ;;      Temps:          0       0       0       0       0       0       0
 19658 ;;      Totals:         0       4       0       0       0       0       0
 19659 ;;Total ram usage:        4 bytes
 19660 ;; Hardware stack levels used:    1
 19661 ;; Hardware stack levels required when called:    5
 19662 ;; This function calls:
 19663 ;;		_strspn
 19664 ;;		_strcspn
 19665 ;; This function is called by:
 19666 ;;		_doModeVerbose
 19667 ;; This function uses a non-reentrant model
 19668 ;;
 19669                           
 19670                           	psect	text43
 19671  002508                     __ptext43:
 19672                           	opt stack 0
 19673  002508                     _strtok:
 19674                           	opt stack 23
 19675                           
 19676                           ; BSR set to: 0
 19677                           
 19678                           ; BSR set to: 0
 19679                           ;incstack = 0
 19680                           ;incstack = 0
 19681  002508  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19682  00250A  116C               	iorwf	strtok@s1& (0+255),w,b
 19683  00250C  E104               	bnz	l11236
 19684                           
 19685                           ; BSR set to: 0
 19686  00250E  C011  F06C         	movff	strtok@sp,strtok@s1
 19687  002512  C012  F06D         	movff	strtok@sp+1,strtok@s1+1
 19688  002516                     l11236:
 19689                           
 19690                           ; BSR set to: 0
 19691  002516  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19692  002518  116C               	iorwf	strtok@s1& (0+255),w,b
 19693  00251A  E016               	bz	L26
 19694                           
 19695                           ; BSR set to: 0
 19696                           
 19697                           ; BSR set to: 0
 19698  00251C  C06C  F066         	movff	strtok@s1,?_strspn
 19699  002520  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 19700  002524  C06E  F068         	movff	strtok@s2,?_strspn+2
 19701  002528  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 19702  00252C  ECC1  F00D         	call	_strspn	;wreg free
 19703  002530  5166               	movf	?_strspn& (0+255),w,b
 19704  002532  276C               	addwf	strtok@s1& (0+255),f,b
 19705  002534  5167               	movf	(?_strspn+1)& (0+255),w,b
 19706  002536  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 19707                           
 19708                           ; BSR set to: 0
 19709  002538  C06C  FFD9         	movff	strtok@s1,fsr2l
 19710  00253C  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 19711  002540  50DF               	movf	indf2,w,c
 19712  002542  E105               	bnz	l11246
 19713                           
 19714                           ; BSR set to: 0
 19715  002544  6A11               	clrf	strtok@sp,c
 19716  002546  6A12               	clrf	strtok@sp+1,c
 19717  002548                     L26:
 19718  002548  6B6C               	clrf	?_strtok& (0+255),b
 19719  00254A  6B6D               	clrf	(?_strtok+1)& (0+255),b
 19720  00254C  D025               	goto	l2521
 19721  00254E                     l11246:
 19722                           
 19723                           ; BSR set to: 0
 19724  00254E  C06C  F066         	movff	strtok@s1,?_strcspn
 19725  002552  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 19726  002556  C06E  F068         	movff	strtok@s2,?_strcspn+2
 19727  00255A  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 19728  00255E  ECE3  F00D         	call	_strcspn	;wreg free
 19729  002562  5166               	movf	?_strcspn& (0+255),w,b
 19730  002564  256C               	addwf	strtok@s1& (0+255),w,b
 19731  002566  6E11               	movwf	strtok@sp,c
 19732  002568  5167               	movf	(?_strcspn+1)& (0+255),w,b
 19733  00256A  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 19734  00256C  6E12               	movwf	strtok@sp+1,c
 19735                           
 19736                           ; BSR set to: 0
 19737  00256E  C011  FFD9         	movff	strtok@sp,fsr2l
 19738  002572  C012  FFDA         	movff	strtok@sp+1,fsr2h
 19739  002576  50DF               	movf	indf2,w,c
 19740  002578  E009               	bz	l2523
 19741                           
 19742                           ; BSR set to: 0
 19743  00257A  C011  FFD9         	movff	strtok@sp,fsr2l
 19744  00257E  C012  FFDA         	movff	strtok@sp+1,fsr2h
 19745  002582  0E00               	movlw	0
 19746  002584  6EDF               	movwf	indf2,c
 19747                           
 19748                           ; BSR set to: 0
 19749  002586  4A11               	infsnz	strtok@sp,f,c
 19750  002588  2A12               	incf	strtok@sp+1,f,c
 19751  00258A  D002               	goto	l2524
 19752  00258C                     l2523:
 19753                           
 19754                           ; BSR set to: 0
 19755  00258C  6A11               	clrf	strtok@sp,c
 19756  00258E  6A12               	clrf	strtok@sp+1,c
 19757  002590                     l2524:
 19758                           
 19759                           ; BSR set to: 0
 19760  002590  C06C  F06C         	movff	strtok@s1,?_strtok
 19761  002594  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 19762  002598                     l2521:
 19763                           
 19764                           ; BSR set to: 0
 19765  002598  0012               	return	
 19766  00259A                     __end_of_strtok:
 19767                           	opt stack 0
 19768                           tblptru	equ	0xFF8
 19769                           tblptrh	equ	0xFF7
 19770                           tblptrl	equ	0xFF6
 19771                           tablat	equ	0xFF5
 19772                           prodh	equ	0xFF4
 19773                           prodl	equ	0xFF3
 19774                           intcon	equ	0xFF2
 19775                           indf0	equ	0xFEF
 19776                           postinc0	equ	0xFEE
 19777                           fsr0h	equ	0xFEA
 19778                           fsr0l	equ	0xFE9
 19779                           wreg	equ	0xFE8
 19780                           indf1	equ	0xFE7
 19781                           postinc1	equ	0xFE6
 19782                           postdec1	equ	0xFE5
 19783                           fsr1h	equ	0xFE2
 19784                           fsr1l	equ	0xFE1
 19785                           indf2	equ	0xFDF
 19786                           postinc2	equ	0xFDE
 19787                           postdec2	equ	0xFDD
 19788                           plusw2	equ	0xFDB
 19789                           fsr2h	equ	0xFDA
 19790                           fsr2l	equ	0xFD9
 19791                           status	equ	0xFD8
 19792                           
 19793 ;; *************** function _strcspn *****************
 19794 ;; Defined at:
 19795 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19796 ;; Parameters:    Size  Location     Type
 19797 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19798 ;;		 -> NULL(0), cmdbuf(80), 
 19799 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19800 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 19801 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 19802 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 19803 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 19804 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19805 ;;		 -> STR_31(2), STR_30(2), 
 19806 ;; Auto vars:     Size  Location     Type
 19807 ;;  i               2   10[BANK0 ] unsigned int 
 19808 ;; Return value:  Size  Location     Type
 19809 ;;                  2    6[BANK0 ] unsigned int 
 19810 ;; Registers used:
 19811 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19812 ;; Tracked objects:
 19813 ;;		On entry : F/0
 19814 ;;		On exit  : F/0
 19815 ;;		Unchanged: 0/0
 19816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19817 ;;      Params:         0       4       0       0       0       0       0
 19818 ;;      Locals:         0       2       0       0       0       0       0
 19819 ;;      Temps:          0       0       0       0       0       0       0
 19820 ;;      Totals:         0       6       0       0       0       0       0
 19821 ;;Total ram usage:        6 bytes
 19822 ;; Hardware stack levels used:    1
 19823 ;; Hardware stack levels required when called:    4
 19824 ;; This function calls:
 19825 ;;		_strchr
 19826 ;; This function is called by:
 19827 ;;		_strtok
 19828 ;; This function uses a non-reentrant model
 19829 ;;
 19830                           
 19831                           	psect	text44
 19832  001BC6                     __ptext44:
 19833                           	opt stack 0
 19834  001BC6                     _strcspn:
 19835                           	opt stack 23
 19836                           
 19837                           ; BSR set to: 0
 19838                           
 19839                           ; BSR set to: 0
 19840                           ;incstack = 0
 19841                           ;incstack = 0
 19842  001BC6  6B6A               	clrf	strcspn@i& (0+255),b
 19843  001BC8  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 19844  001BCA  D004               	goto	l12956
 19845  001BCC                     l12954:
 19846                           
 19847                           ; BSR set to: 0
 19848  001BCC  4B66               	infsnz	strcspn@s1& (0+255),f,b
 19849  001BCE  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 19850  001BD0  4B6A               	infsnz	strcspn@i& (0+255),f,b
 19851  001BD2  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 19852  001BD4                     l12956:
 19853                           
 19854                           ; BSR set to: 0
 19855  001BD4  C066  FFD9         	movff	strcspn@s1,fsr2l
 19856  001BD8  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19857  001BDC  50DF               	movf	indf2,w,c
 19858  001BDE  E010               	bz	l2548
 19859                           
 19860                           ; BSR set to: 0
 19861  001BE0  C068  F060         	movff	strcspn@s2,?_strchr
 19862  001BE4  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 19863  001BE8  C066  FFD9         	movff	strcspn@s1,fsr2l
 19864  001BEC  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19865  001BF0  50DF               	movf	indf2,w,c
 19866  001BF2  6F62               	movwf	(?_strchr+2)& (0+255),b
 19867  001BF4  6B63               	clrf	(?_strchr+3)& (0+255),b
 19868  001BF6  EC82  F00F         	call	_strchr	;wreg free
 19869  001BFA  5161               	movf	(?_strchr+1)& (0+255),w,b
 19870  001BFC  1160               	iorwf	?_strchr& (0+255),w,b
 19871  001BFE  E0E6               	bz	l12954
 19872  001C00                     l2548:
 19873                           
 19874                           ; BSR set to: 0
 19875  001C00  C06A  F066         	movff	strcspn@i,?_strcspn
 19876  001C04  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 19877                           
 19878                           ; BSR set to: 0
 19879  001C08  0012               	return	
 19880  001C0A                     __end_of_strcspn:
 19881                           	opt stack 0
 19882                           tblptru	equ	0xFF8
 19883                           tblptrh	equ	0xFF7
 19884                           tblptrl	equ	0xFF6
 19885                           tablat	equ	0xFF5
 19886                           prodh	equ	0xFF4
 19887                           prodl	equ	0xFF3
 19888                           intcon	equ	0xFF2
 19889                           indf0	equ	0xFEF
 19890                           postinc0	equ	0xFEE
 19891                           fsr0h	equ	0xFEA
 19892                           fsr0l	equ	0xFE9
 19893                           wreg	equ	0xFE8
 19894                           indf1	equ	0xFE7
 19895                           postinc1	equ	0xFE6
 19896                           postdec1	equ	0xFE5
 19897                           fsr1h	equ	0xFE2
 19898                           fsr1l	equ	0xFE1
 19899                           indf2	equ	0xFDF
 19900                           postinc2	equ	0xFDE
 19901                           postdec2	equ	0xFDD
 19902                           plusw2	equ	0xFDB
 19903                           fsr2h	equ	0xFDA
 19904                           fsr2l	equ	0xFD9
 19905                           status	equ	0xFD8
 19906                           
 19907 ;; *************** function _strspn *****************
 19908 ;; Defined at:
 19909 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19910 ;; Parameters:    Size  Location     Type
 19911 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19912 ;;		 -> NULL(0), cmdbuf(80), 
 19913 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19914 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 19915 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 19916 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 19917 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 19918 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19919 ;;		 -> STR_31(2), STR_30(2), 
 19920 ;; Auto vars:     Size  Location     Type
 19921 ;;  i               2   10[BANK0 ] unsigned int 
 19922 ;; Return value:  Size  Location     Type
 19923 ;;                  2    6[BANK0 ] unsigned int 
 19924 ;; Registers used:
 19925 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19926 ;; Tracked objects:
 19927 ;;		On entry : F/0
 19928 ;;		On exit  : F/0
 19929 ;;		Unchanged: 0/0
 19930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19931 ;;      Params:         0       4       0       0       0       0       0
 19932 ;;      Locals:         0       2       0       0       0       0       0
 19933 ;;      Temps:          0       0       0       0       0       0       0
 19934 ;;      Totals:         0       6       0       0       0       0       0
 19935 ;;Total ram usage:        6 bytes
 19936 ;; Hardware stack levels used:    1
 19937 ;; Hardware stack levels required when called:    4
 19938 ;; This function calls:
 19939 ;;		_strchr
 19940 ;; This function is called by:
 19941 ;;		_strtok
 19942 ;; This function uses a non-reentrant model
 19943 ;;
 19944                           
 19945                           	psect	text45
 19946  001B82                     __ptext45:
 19947                           	opt stack 0
 19948  001B82                     _strspn:
 19949                           	opt stack 23
 19950                           
 19951                           ; BSR set to: 0
 19952                           
 19953                           ; BSR set to: 0
 19954                           ;incstack = 0
 19955                           ;incstack = 0
 19956  001B82  6B6A               	clrf	strspn@i& (0+255),b
 19957  001B84  6B6B               	clrf	(strspn@i+1)& (0+255),b
 19958  001B86  D004               	goto	l12948
 19959  001B88                     l12946:
 19960                           
 19961                           ; BSR set to: 0
 19962  001B88  4B66               	infsnz	strspn@s1& (0+255),f,b
 19963  001B8A  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 19964  001B8C  4B6A               	infsnz	strspn@i& (0+255),f,b
 19965  001B8E  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 19966  001B90                     l12948:
 19967                           
 19968                           ; BSR set to: 0
 19969  001B90  C066  FFD9         	movff	strspn@s1,fsr2l
 19970  001B94  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19971  001B98  50DF               	movf	indf2,w,c
 19972  001B9A  E010               	bz	l2567
 19973                           
 19974                           ; BSR set to: 0
 19975  001B9C  C068  F060         	movff	strspn@s2,?_strchr
 19976  001BA0  C069  F061         	movff	strspn@s2+1,?_strchr+1
 19977  001BA4  C066  FFD9         	movff	strspn@s1,fsr2l
 19978  001BA8  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19979  001BAC  50DF               	movf	indf2,w,c
 19980  001BAE  6F62               	movwf	(?_strchr+2)& (0+255),b
 19981  001BB0  6B63               	clrf	(?_strchr+3)& (0+255),b
 19982  001BB2  EC82  F00F         	call	_strchr	;wreg free
 19983  001BB6  5161               	movf	(?_strchr+1)& (0+255),w,b
 19984  001BB8  1160               	iorwf	?_strchr& (0+255),w,b
 19985  001BBA  E1E6               	bnz	l12946
 19986  001BBC                     l2567:
 19987                           
 19988                           ; BSR set to: 0
 19989  001BBC  C06A  F066         	movff	strspn@i,?_strspn
 19990  001BC0  C06B  F067         	movff	strspn@i+1,?_strspn+1
 19991                           
 19992                           ; BSR set to: 0
 19993  001BC4  0012               	return	
 19994  001BC6                     __end_of_strspn:
 19995                           	opt stack 0
 19996                           tblptru	equ	0xFF8
 19997                           tblptrh	equ	0xFF7
 19998                           tblptrl	equ	0xFF6
 19999                           tablat	equ	0xFF5
 20000                           prodh	equ	0xFF4
 20001                           prodl	equ	0xFF3
 20002                           intcon	equ	0xFF2
 20003                           indf0	equ	0xFEF
 20004                           postinc0	equ	0xFEE
 20005                           fsr0h	equ	0xFEA
 20006                           fsr0l	equ	0xFE9
 20007                           wreg	equ	0xFE8
 20008                           indf1	equ	0xFE7
 20009                           postinc1	equ	0xFE6
 20010                           postdec1	equ	0xFE5
 20011                           fsr1h	equ	0xFE2
 20012                           fsr1l	equ	0xFE1
 20013                           indf2	equ	0xFDF
 20014                           postinc2	equ	0xFDE
 20015                           postdec2	equ	0xFDD
 20016                           plusw2	equ	0xFDB
 20017                           fsr2h	equ	0xFDA
 20018                           fsr2l	equ	0xFD9
 20019                           status	equ	0xFD8
 20020                           
 20021 ;; *************** function _strchr *****************
 20022 ;; Defined at:
 20023 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20024 ;; Parameters:    Size  Location     Type
 20025 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20026 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 20027 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 20028 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 20029 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 20030 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20031 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20032 ;;  chr             2    2[BANK0 ] int 
 20033 ;; Auto vars:     Size  Location     Type
 20034 ;;		None
 20035 ;; Return value:  Size  Location     Type
 20036 ;;                  2    0[BANK0 ] PTR unsigned char 
 20037 ;; Registers used:
 20038 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20039 ;; Tracked objects:
 20040 ;;		On entry : F/0
 20041 ;;		On exit  : F/0
 20042 ;;		Unchanged: 0/0
 20043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20044 ;;      Params:         0       4       0       0       0       0       0
 20045 ;;      Locals:         0       0       0       0       0       0       0
 20046 ;;      Temps:          0       2       0       0       0       0       0
 20047 ;;      Totals:         0       6       0       0       0       0       0
 20048 ;;Total ram usage:        6 bytes
 20049 ;; Hardware stack levels used:    1
 20050 ;; Hardware stack levels required when called:    3
 20051 ;; This function calls:
 20052 ;;		Nothing
 20053 ;; This function is called by:
 20054 ;;		_doModeVerbose
 20055 ;;		_strcspn
 20056 ;;		_strspn
 20057 ;; This function uses a non-reentrant model
 20058 ;;
 20059                           
 20060                           	psect	text46
 20061  001F04                     __ptext46:
 20062                           	opt stack 0
 20063  001F04                     _strchr:
 20064                           	opt stack 25
 20065  001F04                     l2469:
 20066                           
 20067                           ; BSR set to: 0
 20068  001F04  0100               	movlb	0	; () banked
 20069  001F06  5160               	movf	strchr@ptr& (0+255),w,b
 20070  001F08  6EF6               	movwf	tblptrl,c
 20071  001F0A  6EE9               	movwf	fsr0l,c
 20072  001F0C  0E05               	movlw	(high __ramtop+-1)
 20073  001F0E  6EEA               	movwf	fsr0h,c
 20074  001F10  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20075  001F12  64EA               	cpfsgt	fsr0h,c
 20076  001F14  D003               	bra	u14327
 20077  001F16  6EEA               	movwf	fsr0h,c
 20078  001F18  50EF               	movf	indf0,w,c
 20079  001F1A  D003               	bra	u14320
 20080  001F1C                     u14327:
 20081  001F1C  6EF7               	movwf	tblptrh,c
 20082  001F1E  0008               	tblrd		*
 20083  001F20  50F5               	movf	tablat,w,c
 20084  001F22                     u14320:
 20085  001F22  0100               	movlb	0	; () banked
 20086  001F24  1962               	xorwf	strchr@chr& (0+255),w,b
 20087  001F26  E105               	bnz	l11520
 20088                           
 20089                           ; BSR set to: 0
 20090  001F28  C060  F060         	movff	strchr@ptr,?_strchr
 20091  001F2C  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20092  001F30  D019               	goto	l2471
 20093  001F32                     l11520:
 20094                           
 20095                           ; BSR set to: 0
 20096  001F32  5160               	movf	strchr@ptr& (0+255),w,b
 20097  001F34  6F64               	movwf	??_strchr& (0+255),b
 20098  001F36  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20099  001F38  6F65               	movwf	(??_strchr+1)& (0+255),b
 20100  001F3A  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20101  001F3C  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20102  001F3E  5164               	movf	??_strchr& (0+255),w,b
 20103  001F40  6EF6               	movwf	tblptrl,c
 20104  001F42  6EE9               	movwf	fsr0l,c
 20105  001F44  0E05               	movlw	(high __ramtop+-1)
 20106  001F46  6EEA               	movwf	fsr0h,c
 20107  001F48  5165               	movf	(??_strchr+1)& (0+255),w,b
 20108  001F4A  64EA               	cpfsgt	fsr0h,c
 20109  001F4C  D003               	bra	u14347
 20110  001F4E  6EEA               	movwf	fsr0h,c
 20111  001F50  50EF               	movf	indf0,w,c
 20112  001F52  D003               	bra	u14340
 20113  001F54                     u14347:
 20114  001F54  6EF7               	movwf	tblptrh,c
 20115  001F56  0008               	tblrd		*
 20116  001F58  50F5               	movf	tablat,w,c
 20117  001F5A                     u14340:
 20118  001F5A  0900               	iorlw	0
 20119  001F5C  E1D3               	bnz	l2469
 20120  001F5E  0100               	movlb	0	; () banked
 20121  001F60  6B60               	clrf	?_strchr& (0+255),b
 20122  001F62  6B61               	clrf	(?_strchr+1)& (0+255),b
 20123  001F64                     l2471:
 20124                           
 20125                           ; BSR set to: 0
 20126  001F64  0012               	return	
 20127  001F66                     __end_of_strchr:
 20128                           	opt stack 0
 20129                           tblptru	equ	0xFF8
 20130                           tblptrh	equ	0xFF7
 20131                           tblptrl	equ	0xFF6
 20132                           tablat	equ	0xFF5
 20133                           prodh	equ	0xFF4
 20134                           prodl	equ	0xFF3
 20135                           intcon	equ	0xFF2
 20136                           indf0	equ	0xFEF
 20137                           postinc0	equ	0xFEE
 20138                           fsr0h	equ	0xFEA
 20139                           fsr0l	equ	0xFE9
 20140                           wreg	equ	0xFE8
 20141                           indf1	equ	0xFE7
 20142                           postinc1	equ	0xFE6
 20143                           postdec1	equ	0xFE5
 20144                           fsr1h	equ	0xFE2
 20145                           fsr1l	equ	0xFE1
 20146                           indf2	equ	0xFDF
 20147                           postinc2	equ	0xFDE
 20148                           postdec2	equ	0xFDD
 20149                           plusw2	equ	0xFDB
 20150                           fsr2h	equ	0xFDA
 20151                           fsr2l	equ	0xFD9
 20152                           status	equ	0xFD8
 20153                           
 20154 ;; *************** function _stristr *****************
 20155 ;; Defined at:
 20156 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20157 ;; Parameters:    Size  Location     Type
 20158 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20159 ;;		 -> NULL(0), cmdbuf(80), 
 20160 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20161 ;;		 -> STR_122(6), STR_121(8), STR_119(6), STR_117(5), 
 20162 ;;		 -> STR_115(8), STR_114(6), STR_113(9), STR_112(11), 
 20163 ;;		 -> STR_110(8), STR_108(4), STR_107(5), STR_95(5), 
 20164 ;;		 -> STR_83(7), STR_78(5), STR_69(5), STR_46(5), 
 20165 ;;		 -> STR_45(5), STR_43(5), STR_42(4), STR_41(5), 
 20166 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20167 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20168 ;;		 -> STR_8(5), STR_6(5), 
 20169 ;; Auto vars:     Size  Location     Type
 20170 ;;		None
 20171 ;; Return value:  Size  Location     Type
 20172 ;;                  2   13[BANK0 ] PTR unsigned char 
 20173 ;; Registers used:
 20174 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20175 ;; Tracked objects:
 20176 ;;		On entry : F/0
 20177 ;;		On exit  : F/0
 20178 ;;		Unchanged: 0/0
 20179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20180 ;;      Params:         0       4       0       0       0       0       0
 20181 ;;      Locals:         0       0       0       0       0       0       0
 20182 ;;      Temps:          0       0       0       0       0       0       0
 20183 ;;      Totals:         0       4       0       0       0       0       0
 20184 ;;Total ram usage:        4 bytes
 20185 ;; Hardware stack levels used:    1
 20186 ;; Hardware stack levels required when called:    5
 20187 ;; This function calls:
 20188 ;;		_strlen
 20189 ;;		_strnicmp
 20190 ;;		_strichr
 20191 ;; This function is called by:
 20192 ;;		_doModeVerbose
 20193 ;; This function uses a non-reentrant model
 20194 ;;
 20195                           
 20196                           	psect	text47
 20197  002272                     __ptext47:
 20198                           	opt stack 0
 20199  002272                     _stristr:
 20200                           	opt stack 23
 20201                           
 20202                           ; BSR set to: 0
 20203                           
 20204                           ; BSR set to: 0
 20205                           ;incstack = 0
 20206                           ;incstack = 0
 20207  002272  D02F               	goto	l11224
 20208  002274                     l11218:
 20209                           
 20210                           ; BSR set to: 0
 20211  002274  C06D  F064         	movff	stristr@s1,?_strnicmp
 20212  002278  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20213  00227C  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20214  002280  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20215  002284  C06F  F060         	movff	stristr@s2,?_strlen
 20216  002288  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20217  00228C  EC80  F00D         	call	_strlen	;wreg free
 20218  002290  C060  F068         	movff	?_strlen,?_strnicmp+4
 20219  002294  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20220  002298  ECE4  F00F         	call	_strnicmp	;wreg free
 20221  00229C  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20222  00229E  1164               	iorwf	?_strnicmp& (0+255),w,b
 20223  0022A0  E105               	bnz	l11222
 20224                           
 20225                           ; BSR set to: 0
 20226  0022A2  C06D  F06D         	movff	stristr@s1,?_stristr
 20227  0022A6  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20228  0022AA  D01E               	goto	l2490
 20229  0022AC                     l11222:
 20230                           
 20231                           ; BSR set to: 0
 20232  0022AC  296D               	incf	stristr@s1& (0+255),w,b
 20233  0022AE  6F61               	movwf	?_strichr& (0+255),b
 20234  0022B0  0E00               	movlw	0
 20235  0022B2  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20236  0022B4  6F62               	movwf	(?_strichr+1)& (0+255),b
 20237  0022B6  C06F  FFF6         	movff	stristr@s2,tblptrl
 20238  0022BA  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20239  0022BE  0008               	tblrd		*
 20240  0022C0  50F5               	movf	tablat,w,c
 20241  0022C2  6F63               	movwf	(?_strichr+2)& (0+255),b
 20242  0022C4  6B64               	clrf	(?_strichr+3)& (0+255),b
 20243  0022C6  EC22  F00D         	call	_strichr	;wreg free
 20244  0022CA  C061  F06D         	movff	?_strichr,stristr@s1
 20245  0022CE  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20246  0022D2                     l11224:
 20247                           
 20248                           ; BSR set to: 0
 20249  0022D2  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20250  0022D4  116D               	iorwf	stristr@s1& (0+255),w,b
 20251  0022D6  E006               	bz	l2493
 20252                           
 20253                           ; BSR set to: 0
 20254  0022D8  C06D  FFD9         	movff	stristr@s1,fsr2l
 20255  0022DC  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20256  0022E0  50DF               	movf	indf2,w,c
 20257  0022E2  E1C8               	bnz	l11218
 20258  0022E4                     l2493:
 20259                           
 20260                           ; BSR set to: 0
 20261  0022E4  6B6D               	clrf	?_stristr& (0+255),b
 20262  0022E6  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20263  0022E8                     l2490:
 20264                           
 20265                           ; BSR set to: 0
 20266  0022E8  0012               	return	
 20267  0022EA                     __end_of_stristr:
 20268                           	opt stack 0
 20269                           tblptru	equ	0xFF8
 20270                           tblptrh	equ	0xFF7
 20271                           tblptrl	equ	0xFF6
 20272                           tablat	equ	0xFF5
 20273                           prodh	equ	0xFF4
 20274                           prodl	equ	0xFF3
 20275                           intcon	equ	0xFF2
 20276                           indf0	equ	0xFEF
 20277                           postinc0	equ	0xFEE
 20278                           fsr0h	equ	0xFEA
 20279                           fsr0l	equ	0xFE9
 20280                           wreg	equ	0xFE8
 20281                           indf1	equ	0xFE7
 20282                           postinc1	equ	0xFE6
 20283                           postdec1	equ	0xFE5
 20284                           fsr1h	equ	0xFE2
 20285                           fsr1l	equ	0xFE1
 20286                           indf2	equ	0xFDF
 20287                           postinc2	equ	0xFDE
 20288                           postdec2	equ	0xFDD
 20289                           plusw2	equ	0xFDB
 20290                           fsr2h	equ	0xFDA
 20291                           fsr2l	equ	0xFD9
 20292                           status	equ	0xFD8
 20293                           
 20294 ;; *************** function _strichr *****************
 20295 ;; Defined at:
 20296 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20297 ;; Parameters:    Size  Location     Type
 20298 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20299 ;;		 -> NULL(0), cmdbuf(80), 
 20300 ;;  chr             2    3[BANK0 ] int 
 20301 ;; Auto vars:     Size  Location     Type
 20302 ;;		None
 20303 ;; Return value:  Size  Location     Type
 20304 ;;                  2    1[BANK0 ] PTR unsigned char 
 20305 ;; Registers used:
 20306 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20307 ;; Tracked objects:
 20308 ;;		On entry : F/0
 20309 ;;		On exit  : F/0
 20310 ;;		Unchanged: 0/0
 20311 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20312 ;;      Params:         0       4       0       0       0       0       0
 20313 ;;      Locals:         0       0       0       0       0       0       0
 20314 ;;      Temps:          0       0       0       0       0       0       0
 20315 ;;      Totals:         0       4       0       0       0       0       0
 20316 ;;Total ram usage:        4 bytes
 20317 ;; Hardware stack levels used:    1
 20318 ;; Hardware stack levels required when called:    4
 20319 ;; This function calls:
 20320 ;;		_toupper
 20321 ;; This function is called by:
 20322 ;;		_stristr
 20323 ;; This function uses a non-reentrant model
 20324 ;;
 20325                           
 20326                           	psect	text48
 20327  001A44                     __ptext48:
 20328                           	opt stack 0
 20329  001A44                     _strichr:
 20330                           	opt stack 23
 20331                           
 20332                           ; BSR set to: 0
 20333                           
 20334                           ; BSR set to: 0
 20335                           ;incstack = 0
 20336                           ;incstack = 0
 20337  001A44  5163               	movf	strichr@chr& (0+255),w,b
 20338  001A46  ECF8  F00B         	call	_toupper
 20339  001A4A  6F63               	movwf	strichr@chr& (0+255),b
 20340  001A4C  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20341  001A4E  D010               	goto	l12932
 20342  001A50                     l12926:
 20343                           
 20344                           ; BSR set to: 0
 20345  001A50  C061  FFD9         	movff	strichr@ptr,fsr2l
 20346  001A54  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20347  001A58  50DF               	movf	indf2,w,c
 20348  001A5A  ECF8  F00B         	call	_toupper
 20349  001A5E  1963               	xorwf	strichr@chr& (0+255),w,b
 20350  001A60  E105               	bnz	l12930
 20351                           
 20352                           ; BSR set to: 0
 20353  001A62  C061  F061         	movff	strichr@ptr,?_strichr
 20354  001A66  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20355  001A6A  D00A               	goto	l2557
 20356  001A6C                     l12930:
 20357                           
 20358                           ; BSR set to: 0
 20359  001A6C  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20360  001A6E  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20361  001A70                     l12932:
 20362                           
 20363                           ; BSR set to: 0
 20364  001A70  C061  FFD9         	movff	strichr@ptr,fsr2l
 20365  001A74  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20366  001A78  50DF               	movf	indf2,w,c
 20367  001A7A  E1EA               	bnz	l12926
 20368                           
 20369                           ; BSR set to: 0
 20370  001A7C  6B61               	clrf	?_strichr& (0+255),b
 20371  001A7E  6B62               	clrf	(?_strichr+1)& (0+255),b
 20372  001A80                     l2557:
 20373                           
 20374                           ; BSR set to: 0
 20375  001A80  0012               	return	
 20376  001A82                     __end_of_strichr:
 20377                           	opt stack 0
 20378                           tblptru	equ	0xFF8
 20379                           tblptrh	equ	0xFF7
 20380                           tblptrl	equ	0xFF6
 20381                           tablat	equ	0xFF5
 20382                           prodh	equ	0xFF4
 20383                           prodl	equ	0xFF3
 20384                           intcon	equ	0xFF2
 20385                           indf0	equ	0xFEF
 20386                           postinc0	equ	0xFEE
 20387                           fsr0h	equ	0xFEA
 20388                           fsr0l	equ	0xFE9
 20389                           wreg	equ	0xFE8
 20390                           indf1	equ	0xFE7
 20391                           postinc1	equ	0xFE6
 20392                           postdec1	equ	0xFE5
 20393                           fsr1h	equ	0xFE2
 20394                           fsr1l	equ	0xFE1
 20395                           indf2	equ	0xFDF
 20396                           postinc2	equ	0xFDE
 20397                           postdec2	equ	0xFDD
 20398                           plusw2	equ	0xFDB
 20399                           fsr2h	equ	0xFDA
 20400                           fsr2l	equ	0xFD9
 20401                           status	equ	0xFD8
 20402                           
 20403 ;; *************** function _strnicmp *****************
 20404 ;; Defined at:
 20405 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20406 ;; Parameters:    Size  Location     Type
 20407 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20408 ;;		 -> NULL(0), cmdbuf(80), 
 20409 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20410 ;;		 -> STR_122(6), STR_121(8), STR_119(6), STR_117(5), 
 20411 ;;		 -> STR_115(8), STR_114(6), STR_113(9), STR_112(11), 
 20412 ;;		 -> STR_110(8), STR_108(4), STR_107(5), STR_95(5), 
 20413 ;;		 -> STR_83(7), STR_78(5), STR_69(5), STR_46(5), 
 20414 ;;		 -> STR_45(5), STR_43(5), STR_42(4), STR_41(5), 
 20415 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20416 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20417 ;;		 -> STR_8(5), STR_6(5), 
 20418 ;;  len             2    8[BANK0 ] unsigned int 
 20419 ;; Auto vars:     Size  Location     Type
 20420 ;;  r               1   12[BANK0 ] char 
 20421 ;; Return value:  Size  Location     Type
 20422 ;;                  2    4[BANK0 ] int 
 20423 ;; Registers used:
 20424 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20425 ;; Tracked objects:
 20426 ;;		On entry : F/0
 20427 ;;		On exit  : F/0
 20428 ;;		Unchanged: 0/0
 20429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20430 ;;      Params:         0       6       0       0       0       0       0
 20431 ;;      Locals:         0       1       0       0       0       0       0
 20432 ;;      Temps:          0       2       0       0       0       0       0
 20433 ;;      Totals:         0       9       0       0       0       0       0
 20434 ;;Total ram usage:        9 bytes
 20435 ;; Hardware stack levels used:    1
 20436 ;; Hardware stack levels required when called:    4
 20437 ;; This function calls:
 20438 ;;		_toupper
 20439 ;; This function is called by:
 20440 ;;		_stristr
 20441 ;; This function uses a non-reentrant model
 20442 ;;
 20443                           
 20444                           	psect	text49
 20445  001FC8                     __ptext49:
 20446                           	opt stack 0
 20447  001FC8                     _strnicmp:
 20448                           	opt stack 23
 20449                           
 20450                           ; BSR set to: 0
 20451                           
 20452                           ; BSR set to: 0
 20453                           ;incstack = 0
 20454                           ;incstack = 0
 20455  001FC8  D027               	goto	l12922
 20456  001FCA                     l12912:
 20457                           
 20458                           ; BSR set to: 0
 20459  001FCA  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20460  001FCE  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20461  001FD2  0008               	tblrd		*
 20462  001FD4  50F5               	movf	tablat,w,c
 20463  001FD6  ECF8  F00B         	call	_toupper
 20464  001FDA  6F6A               	movwf	??_strnicmp& (0+255),b
 20465  001FDC  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20466  001FE0  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20467  001FE4  50DF               	movf	indf2,w,c
 20468  001FE6  ECF8  F00B         	call	_toupper
 20469  001FEA  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20470  001FEC  516A               	movf	??_strnicmp& (0+255),w,b
 20471  001FEE  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20472  001FF0  6F6C               	movwf	strnicmp@r& (0+255),b
 20473  001FF2  0100               	movlb	0	; () banked
 20474  001FF4  676C               	tstfsz	strnicmp@r& (0+255),b
 20475  001FF6  D006               	goto	l12916
 20476                           
 20477                           ; BSR set to: 0
 20478  001FF8  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20479  001FFC  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20480  002000  50DF               	movf	indf2,w,c
 20481  002002  E106               	bnz	l12920
 20482  002004                     l12916:
 20483                           
 20484                           ; BSR set to: 0
 20485  002004  516C               	movf	strnicmp@r& (0+255),w,b
 20486  002006  6F64               	movwf	?_strnicmp& (0+255),b
 20487  002008  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20488  00200A  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20489  00200C  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20490  00200E  D00E               	goto	l2509
 20491  002010                     l12920:
 20492                           
 20493                           ; BSR set to: 0
 20494  002010  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20495  002012  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20496  002014  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20497  002016  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20498  002018                     l12922:
 20499                           
 20500                           ; BSR set to: 0
 20501  002018  0768               	decf	strnicmp@len& (0+255),f,b
 20502  00201A  A0D8               	btfss	status,0,c
 20503  00201C  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20504  00201E  0100               	movlb	0	; () banked
 20505  002020  2968               	incf	strnicmp@len& (0+255),w,b
 20506  002022  B4D8               	btfsc	status,2,c
 20507  002024  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20508  002026  E1D1               	bnz	l12912
 20509                           
 20510                           ; BSR set to: 0
 20511  002028  6B64               	clrf	?_strnicmp& (0+255),b
 20512  00202A  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20513  00202C                     l2509:
 20514                           
 20515                           ; BSR set to: 0
 20516  00202C  0012               	return	
 20517  00202E                     __end_of_strnicmp:
 20518                           	opt stack 0
 20519                           tblptru	equ	0xFF8
 20520                           tblptrh	equ	0xFF7
 20521                           tblptrl	equ	0xFF6
 20522                           tablat	equ	0xFF5
 20523                           prodh	equ	0xFF4
 20524                           prodl	equ	0xFF3
 20525                           intcon	equ	0xFF2
 20526                           indf0	equ	0xFEF
 20527                           postinc0	equ	0xFEE
 20528                           fsr0h	equ	0xFEA
 20529                           fsr0l	equ	0xFE9
 20530                           wreg	equ	0xFE8
 20531                           indf1	equ	0xFE7
 20532                           postinc1	equ	0xFE6
 20533                           postdec1	equ	0xFE5
 20534                           fsr1h	equ	0xFE2
 20535                           fsr1l	equ	0xFE1
 20536                           indf2	equ	0xFDF
 20537                           postinc2	equ	0xFDE
 20538                           postdec2	equ	0xFDD
 20539                           plusw2	equ	0xFDB
 20540                           fsr2h	equ	0xFDA
 20541                           fsr2l	equ	0xFD9
 20542                           status	equ	0xFD8
 20543                           
 20544 ;; *************** function _toupper *****************
 20545 ;; Defined at:
 20546 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20547 ;; Parameters:    Size  Location     Type
 20548 ;;  c               1    wreg     unsigned char 
 20549 ;; Auto vars:     Size  Location     Type
 20550 ;;  c               1    0[BANK0 ] unsigned char 
 20551 ;; Return value:  Size  Location     Type
 20552 ;;                  1    wreg      unsigned char 
 20553 ;; Registers used:
 20554 ;;		wreg, status,2, status,0
 20555 ;; Tracked objects:
 20556 ;;		On entry : F/0
 20557 ;;		On exit  : F/0
 20558 ;;		Unchanged: 0/0
 20559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20560 ;;      Params:         0       0       0       0       0       0       0
 20561 ;;      Locals:         0       1       0       0       0       0       0
 20562 ;;      Temps:          0       0       0       0       0       0       0
 20563 ;;      Totals:         0       1       0       0       0       0       0
 20564 ;;Total ram usage:        1 bytes
 20565 ;; Hardware stack levels used:    1
 20566 ;; Hardware stack levels required when called:    3
 20567 ;; This function calls:
 20568 ;;		Nothing
 20569 ;; This function is called by:
 20570 ;;		_strnicmp
 20571 ;;		_strichr
 20572 ;; This function uses a non-reentrant model
 20573 ;;
 20574                           
 20575                           	psect	text50
 20576  0017F0                     __ptext50:
 20577                           	opt stack 0
 20578  0017F0                     _toupper:
 20579                           	opt stack 23
 20580                           
 20581                           ; BSR set to: 0
 20582                           ;incstack = 0
 20583                           ;incstack = 0
 20584                           ;toupper@c stored from wreg
 20585  0017F0  CFE8 F060          	movff	wreg,toupper@c
 20586                           
 20587                           ; BSR set to: 0
 20588  0017F4  0E7B               	movlw	123
 20589  0017F6  6160               	cpfslt	toupper@c& (0+255),b
 20590  0017F8  D004               	goto	l12940
 20591                           
 20592                           ; BSR set to: 0
 20593  0017FA  0E60               	movlw	96
 20594  0017FC  6560               	cpfsgt	toupper@c& (0+255),b
 20595  0017FE  D001               	goto	l12940
 20596                           
 20597                           ; BSR set to: 0
 20598  001800  9B60               	bcf	toupper@c& (0+255),5,b
 20599  001802                     l12940:
 20600                           
 20601                           ; BSR set to: 0
 20602  001802  5160               	movf	toupper@c& (0+255),w,b
 20603                           
 20604                           ; BSR set to: 0
 20605  001804  0012               	return	
 20606  001806                     __end_of_toupper:
 20607                           	opt stack 0
 20608                           tblptru	equ	0xFF8
 20609                           tblptrh	equ	0xFF7
 20610                           tblptrl	equ	0xFF6
 20611                           tablat	equ	0xFF5
 20612                           prodh	equ	0xFF4
 20613                           prodl	equ	0xFF3
 20614                           intcon	equ	0xFF2
 20615                           indf0	equ	0xFEF
 20616                           postinc0	equ	0xFEE
 20617                           fsr0h	equ	0xFEA
 20618                           fsr0l	equ	0xFE9
 20619                           wreg	equ	0xFE8
 20620                           indf1	equ	0xFE7
 20621                           postinc1	equ	0xFE6
 20622                           postdec1	equ	0xFE5
 20623                           fsr1h	equ	0xFE2
 20624                           fsr1l	equ	0xFE1
 20625                           indf2	equ	0xFDF
 20626                           postinc2	equ	0xFDE
 20627                           postdec2	equ	0xFDD
 20628                           plusw2	equ	0xFDB
 20629                           fsr2h	equ	0xFDA
 20630                           fsr2l	equ	0xFD9
 20631                           status	equ	0xFD8
 20632                           
 20633 ;; *************** function _strlen *****************
 20634 ;; Defined at:
 20635 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20636 ;; Parameters:    Size  Location     Type
 20637 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20638 ;;		 -> printGUID@buf(3), STR_122(6), STR_121(8), STR_119(6), 
 20639 ;;		 -> STR_117(5), STR_115(8), STR_114(6), STR_113(9), 
 20640 ;;		 -> STR_112(11), STR_110(8), STR_108(4), STR_107(5), 
 20641 ;;		 -> STR_95(5), STR_83(7), STR_78(5), STR_69(5), 
 20642 ;;		 -> wrkbuf(80), STR_46(5), STR_45(5), STR_43(5), 
 20643 ;;		 -> STR_42(4), STR_41(5), STR_38(3), STR_29(3), 
 20644 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20645 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20646 ;;		 -> cmdbuf(80), 
 20647 ;; Auto vars:     Size  Location     Type
 20648 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 20649 ;;		 -> printGUID@buf(3), STR_122(6), STR_121(8), STR_119(6), 
 20650 ;;		 -> STR_117(5), STR_115(8), STR_114(6), STR_113(9), 
 20651 ;;		 -> STR_112(11), STR_110(8), STR_108(4), STR_107(5), 
 20652 ;;		 -> STR_95(5), STR_83(7), STR_78(5), STR_69(5), 
 20653 ;;		 -> wrkbuf(80), STR_46(5), STR_45(5), STR_43(5), 
 20654 ;;		 -> STR_42(4), STR_41(5), STR_38(3), STR_29(3), 
 20655 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20656 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20657 ;;		 -> cmdbuf(80), 
 20658 ;; Return value:  Size  Location     Type
 20659 ;;                  2    0[BANK0 ] unsigned int 
 20660 ;; Registers used:
 20661 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20662 ;; Tracked objects:
 20663 ;;		On entry : F/0
 20664 ;;		On exit  : F/0
 20665 ;;		Unchanged: 0/0
 20666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20667 ;;      Params:         0       2       0       0       0       0       0
 20668 ;;      Locals:         0       2       0       0       0       0       0
 20669 ;;      Temps:          0       0       0       0       0       0       0
 20670 ;;      Totals:         0       4       0       0       0       0       0
 20671 ;;Total ram usage:        4 bytes
 20672 ;; Hardware stack levels used:    1
 20673 ;; Hardware stack levels required when called:    3
 20674 ;; This function calls:
 20675 ;;		Nothing
 20676 ;; This function is called by:
 20677 ;;		_doModeSLCAN
 20678 ;;		_receiveSendEventSLCAN
 20679 ;;		_printGUID
 20680 ;;		_hexStringToBytes
 20681 ;;		_stristr
 20682 ;; This function uses a non-reentrant model
 20683 ;;
 20684                           
 20685                           	psect	text51
 20686  001B00                     __ptext51:
 20687                           	opt stack 0
 20688  001B00                     _strlen:
 20689                           	opt stack 24
 20690                           
 20691                           ; BSR set to: 0
 20692                           
 20693                           ; BSR set to: 0
 20694                           ;incstack = 0
 20695                           ;incstack = 0
 20696  001B00  C060  F062         	movff	strlen@s,strlen@cp
 20697  001B04  C061  F063         	movff	strlen@s+1,strlen@cp+1
 20698  001B08  D003               	goto	l12482
 20699  001B0A                     l12480:
 20700  001B0A  0100               	movlb	0	; () banked
 20701  001B0C  4B62               	infsnz	strlen@cp& (0+255),f,b
 20702  001B0E  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 20703  001B10                     l12482:
 20704                           
 20705                           ; BSR set to: 0
 20706  001B10  5162               	movf	strlen@cp& (0+255),w,b
 20707  001B12  6EF6               	movwf	tblptrl,c
 20708  001B14  6EE9               	movwf	fsr0l,c
 20709  001B16  0E05               	movlw	(high __ramtop+-1)
 20710  001B18  6EEA               	movwf	fsr0h,c
 20711  001B1A  5163               	movf	(strlen@cp+1)& (0+255),w,b
 20712  001B1C  64EA               	cpfsgt	fsr0h,c
 20713  001B1E  D003               	bra	u16137
 20714  001B20  6EEA               	movwf	fsr0h,c
 20715  001B22  50EF               	movf	indf0,w,c
 20716  001B24  D003               	bra	u16130
 20717  001B26                     u16137:
 20718  001B26  6EF7               	movwf	tblptrh,c
 20719  001B28  0008               	tblrd		*
 20720  001B2A  50F5               	movf	tablat,w,c
 20721  001B2C                     u16130:
 20722  001B2C  0900               	iorlw	0
 20723  001B2E  E1ED               	bnz	l12480
 20724  001B30  0100               	movlb	0	; () banked
 20725  001B32  5160               	movf	strlen@s& (0+255),w,b
 20726  001B34  5D62               	subwf	strlen@cp& (0+255),w,b
 20727  001B36  6F60               	movwf	?_strlen& (0+255),b
 20728  001B38  5161               	movf	(strlen@s+1)& (0+255),w,b
 20729  001B3A  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 20730  001B3C  6F61               	movwf	(?_strlen+1)& (0+255),b
 20731                           
 20732                           ; BSR set to: 0
 20733  001B3E  0012               	return	
 20734  001B40                     __end_of_strlen:
 20735                           	opt stack 0
 20736                           tblptru	equ	0xFF8
 20737                           tblptrh	equ	0xFF7
 20738                           tblptrl	equ	0xFF6
 20739                           tablat	equ	0xFF5
 20740                           prodh	equ	0xFF4
 20741                           prodl	equ	0xFF3
 20742                           intcon	equ	0xFF2
 20743                           indf0	equ	0xFEF
 20744                           postinc0	equ	0xFEE
 20745                           fsr0h	equ	0xFEA
 20746                           fsr0l	equ	0xFE9
 20747                           wreg	equ	0xFE8
 20748                           indf1	equ	0xFE7
 20749                           postinc1	equ	0xFE6
 20750                           postdec1	equ	0xFE5
 20751                           fsr1h	equ	0xFE2
 20752                           fsr1l	equ	0xFE1
 20753                           indf2	equ	0xFDF
 20754                           postinc2	equ	0xFDE
 20755                           postdec2	equ	0xFDD
 20756                           plusw2	equ	0xFDB
 20757                           fsr2h	equ	0xFDA
 20758                           fsr2l	equ	0xFD9
 20759                           status	equ	0xFD8
 20760                           
 20761 ;; *************** function _receivePrintEventVerbose *****************
 20762 ;; Defined at:
 20763 ;;		line 1726 in file "main.c"
 20764 ;; Parameters:    Size  Location     Type
 20765 ;;		None
 20766 ;; Auto vars:     Size  Location     Type
 20767 ;;  i               1   69[BANK0 ] unsigned char 
 20768 ;; Return value:  Size  Location     Type
 20769 ;;                  1    wreg      enum E15660
 20770 ;; Registers used:
 20771 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20772 ;; Tracked objects:
 20773 ;;		On entry : F/1
 20774 ;;		On exit  : 0/0
 20775 ;;		Unchanged: 0/0
 20776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20777 ;;      Params:         0       0       0       0       0       0       0
 20778 ;;      Locals:         0      13       0       0       0       0       0
 20779 ;;      Temps:          0       5       0       0       0       0       0
 20780 ;;      Totals:         0      18       0       0       0       0       0
 20781 ;;Total ram usage:       18 bytes
 20782 ;; Hardware stack levels used:    1
 20783 ;; Hardware stack levels required when called:    6
 20784 ;; This function calls:
 20785 ;;		_putsUSART
 20786 ;;		_sprintf
 20787 ;;		_getVSCPFrame
 20788 ;; This function is called by:
 20789 ;;		_doModeVerbose
 20790 ;; This function uses a non-reentrant model
 20791 ;;
 20792                           
 20793                           	psect	text52
 20794  0048CC                     __ptext52:
 20795                           	opt stack 0
 20796  0048CC                     _receivePrintEventVerbose:
 20797                           	opt stack 22
 20798                           
 20799                           ; BSR set to: 1
 20800                           ;main.c: 1727: uint8_t i;
 20801                           ;main.c: 1729: if (getVSCPFrame(&vscpClass,
 20802                           ;main.c: 1730: &vscpType,
 20803                           ;main.c: 1731: &vscpNodeId,
 20804                           ;main.c: 1732: &vscpPriority,
 20805                           ;main.c: 1733: &vscpSize,
 20806                           ;main.c: 1734: vscpData)) {
 20807                           
 20808                           ; BSR set to: 0
 20809                           ;incstack = 0
 20810                           ;incstack = 0
 20811  0048CC  0E01               	movlw	high _vscpClass
 20812  0048CE  0100               	movlb	0	; () banked
 20813  0048D0  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20814  0048D2  0EAC               	movlw	low _vscpClass
 20815  0048D4  6F72               	movwf	?_getVSCPFrame& (0+255),b
 20816  0048D6  0E01               	movlw	high _vscpType
 20817  0048D8  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20818  0048DA  0EB1               	movlw	low _vscpType
 20819  0048DC  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20820  0048DE  0E01               	movlw	high _vscpNodeId
 20821  0048E0  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 20822  0048E2  0EAE               	movlw	low _vscpNodeId
 20823  0048E4  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20824  0048E6  0E01               	movlw	high _vscpPriority
 20825  0048E8  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 20826  0048EA  0EAF               	movlw	low _vscpPriority
 20827  0048EC  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 20828  0048EE  0E01               	movlw	high _vscpSize
 20829  0048F0  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 20830  0048F2  0EB0               	movlw	low _vscpSize
 20831  0048F4  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 20832  0048F6  0E01               	movlw	high _vscpData
 20833  0048F8  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 20834  0048FA  0EA4               	movlw	low _vscpData
 20835  0048FC  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 20836  0048FE  ECB5  F011         	call	_getVSCPFrame	;wreg free
 20837  004902  0900               	iorlw	0
 20838  004904  E101 D141          	bz	l11212
 20839                           
 20840                           ; BSR set to: 0
 20841                           ;main.c: 1737: cntRxFrames++;
 20842  004908  2BD9               	incf	_cntRxFrames& (0+255),f,b
 20843  00490A  0E00               	movlw	0
 20844  00490C  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20845  00490E  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20846  004910  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20847                           
 20848                           ;main.c: 1738: cntRxBytes += vscpSize;
 20849  004912  0101               	movlb	1	; () banked
 20850  004914  51B0               	movf	_vscpSize& (0+255),w,b
 20851  004916  0100               	movlb	0	; () banked
 20852  004918  27D5               	addwf	_cntRxBytes& (0+255),f,b
 20853  00491A  0E00               	movlw	0
 20854  00491C  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20855  00491E  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20856  004920  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20857                           
 20858                           ; BSR set to: 0
 20859                           ;main.c: 1740: putsUSART((char *) "<Prio=");
 20860  004922  0E7C               	movlw	high STR_132
 20861  004924  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20862  004926  0E41               	movlw	low STR_132
 20863  004928  6F61               	movwf	?_putsUSART& (0+255),b
 20864  00492A  EC9B  F00E         	call	_putsUSART	;wreg free
 20865                           
 20866                           ;main.c: 1741: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20867  00492E  0101               	movlb	1	; () banked
 20868  004930  6700               	tstfsz	_bHex& (0+255),b
 20869  004932  D005               	goto	l11130
 20870                           
 20871                           ; BSR set to: 1
 20872  004934  0E7C               	movlw	high STR_54
 20873  004936  0100               	movlb	0	; () banked
 20874  004938  6F9A               	movwf	(_receivePrintEventVerbose$1266+1)& (0+255),b
 20875  00493A  0EED               	movlw	low STR_54
 20876  00493C  D004               	goto	L27
 20877  00493E                     l11130:
 20878                           
 20879                           ; BSR set to: 1
 20880  00493E  0E7C               	movlw	high STR_53
 20881  004940  0100               	movlb	0	; () banked
 20882  004942  6F9A               	movwf	(_receivePrintEventVerbose$1266+1)& (0+255),b
 20883  004944  0E64               	movlw	low STR_53
 20884  004946                     L27:
 20885  004946  6F99               	movwf	_receivePrintEventVerbose$1266& (0+255),b
 20886                           
 20887                           ; BSR set to: 0
 20888  004948  0E01               	movlw	high _wrkbuf
 20889  00494A  0100               	movlb	0	; () banked
 20890  00494C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20891  00494E  0E54               	movlw	low _wrkbuf
 20892  004950  6F76               	movwf	?_sprintf& (0+255),b
 20893  004952  C099  F078         	movff	_receivePrintEventVerbose$1266,?_sprintf+2
 20894  004956  C09A  F079         	movff	_receivePrintEventVerbose$1266+1,?_sprintf+3
 20895  00495A  C1AF  F07A         	movff	_vscpPriority,?_sprintf+4
 20896  00495E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20897  004960  ECE9  F028         	call	_sprintf	;wreg free
 20898                           
 20899                           ; BSR set to: 0
 20900                           ;main.c: 1742: putsUSART(wrkbuf);
 20901  004964  0E01               	movlw	high _wrkbuf
 20902  004966  0100               	movlb	0	; () banked
 20903  004968  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20904  00496A  0E54               	movlw	low _wrkbuf
 20905  00496C  6F61               	movwf	?_putsUSART& (0+255),b
 20906  00496E  EC9B  F00E         	call	_putsUSART	;wreg free
 20907                           
 20908                           ;main.c: 1743: putsUSART((char *) ",class=");
 20909  004972  0E7B               	movlw	high STR_135
 20910  004974  0100               	movlb	0	; () banked
 20911  004976  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20912  004978  0EF5               	movlw	low STR_135
 20913  00497A  6F61               	movwf	?_putsUSART& (0+255),b
 20914  00497C  EC9B  F00E         	call	_putsUSART	;wreg free
 20915                           
 20916                           ;main.c: 1744: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20917  004980  0101               	movlb	1	; () banked
 20918  004982  6700               	tstfsz	_bHex& (0+255),b
 20919  004984  D005               	goto	l11142
 20920                           
 20921                           ; BSR set to: 1
 20922  004986  0E7C               	movlw	high STR_54
 20923  004988  0100               	movlb	0	; () banked
 20924  00498A  6F9C               	movwf	(_receivePrintEventVerbose$1271+1)& (0+255),b
 20925  00498C  0EED               	movlw	low STR_54
 20926  00498E  D004               	goto	L28
 20927  004990                     l11142:
 20928                           
 20929                           ; BSR set to: 1
 20930  004990  0E7C               	movlw	high STR_136
 20931  004992  0100               	movlb	0	; () banked
 20932  004994  6F9C               	movwf	(_receivePrintEventVerbose$1271+1)& (0+255),b
 20933  004996  0E6B               	movlw	low STR_136
 20934  004998                     L28:
 20935  004998  6F9B               	movwf	_receivePrintEventVerbose$1271& (0+255),b
 20936                           
 20937                           ; BSR set to: 0
 20938  00499A  0E01               	movlw	high _wrkbuf
 20939  00499C  0100               	movlb	0	; () banked
 20940  00499E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20941  0049A0  0E54               	movlw	low _wrkbuf
 20942  0049A2  6F76               	movwf	?_sprintf& (0+255),b
 20943  0049A4  C09B  F078         	movff	_receivePrintEventVerbose$1271,?_sprintf+2
 20944  0049A8  C09C  F079         	movff	_receivePrintEventVerbose$1271+1,?_sprintf+3
 20945  0049AC  C1AC  F07A         	movff	_vscpClass,?_sprintf+4
 20946  0049B0  C1AD  F07B         	movff	_vscpClass+1,?_sprintf+5
 20947  0049B4  ECE9  F028         	call	_sprintf	;wreg free
 20948                           
 20949                           ; BSR set to: 0
 20950                           ;main.c: 1745: putsUSART(wrkbuf);
 20951  0049B8  0E01               	movlw	high _wrkbuf
 20952  0049BA  0100               	movlb	0	; () banked
 20953  0049BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20954  0049BE  0E54               	movlw	low _wrkbuf
 20955  0049C0  6F61               	movwf	?_putsUSART& (0+255),b
 20956  0049C2  EC9B  F00E         	call	_putsUSART	;wreg free
 20957                           
 20958                           ;main.c: 1746: putsUSART((char *) ",type=");
 20959  0049C6  0E7C               	movlw	high STR_138
 20960  0049C8  0100               	movlb	0	; () banked
 20961  0049CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20962  0049CC  0E33               	movlw	low STR_138
 20963  0049CE  6F61               	movwf	?_putsUSART& (0+255),b
 20964  0049D0  EC9B  F00E         	call	_putsUSART	;wreg free
 20965                           
 20966                           ;main.c: 1747: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 20967  0049D4  0101               	movlb	1	; () banked
 20968  0049D6  6700               	tstfsz	_bHex& (0+255),b
 20969  0049D8  D005               	goto	l11154
 20970                           
 20971                           ; BSR set to: 1
 20972  0049DA  0E7C               	movlw	high STR_54
 20973  0049DC  0100               	movlb	0	; () banked
 20974  0049DE  6F9E               	movwf	(_receivePrintEventVerbose$1276+1)& (0+255),b
 20975  0049E0  0EED               	movlw	low STR_54
 20976  0049E2  D004               	goto	L29
 20977  0049E4                     l11154:
 20978                           
 20979                           ; BSR set to: 1
 20980  0049E4  0E7C               	movlw	high STR_53
 20981  0049E6  0100               	movlb	0	; () banked
 20982  0049E8  6F9E               	movwf	(_receivePrintEventVerbose$1276+1)& (0+255),b
 20983  0049EA  0E64               	movlw	low STR_53
 20984  0049EC                     L29:
 20985  0049EC  6F9D               	movwf	_receivePrintEventVerbose$1276& (0+255),b
 20986                           
 20987                           ; BSR set to: 0
 20988  0049EE  0E01               	movlw	high _wrkbuf
 20989  0049F0  0100               	movlb	0	; () banked
 20990  0049F2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20991  0049F4  0E54               	movlw	low _wrkbuf
 20992  0049F6  6F76               	movwf	?_sprintf& (0+255),b
 20993  0049F8  C09D  F078         	movff	_receivePrintEventVerbose$1276,?_sprintf+2
 20994  0049FC  C09E  F079         	movff	_receivePrintEventVerbose$1276+1,?_sprintf+3
 20995  004A00  C1B1  F07A         	movff	_vscpType,?_sprintf+4
 20996  004A04  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20997  004A06  ECE9  F028         	call	_sprintf	;wreg free
 20998                           
 20999                           ; BSR set to: 0
 21000                           ;main.c: 1748: putsUSART(wrkbuf);
 21001  004A0A  0E01               	movlw	high _wrkbuf
 21002  004A0C  0100               	movlb	0	; () banked
 21003  004A0E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21004  004A10  0E54               	movlw	low _wrkbuf
 21005  004A12  6F61               	movwf	?_putsUSART& (0+255),b
 21006  004A14  EC9B  F00E         	call	_putsUSART	;wreg free
 21007                           
 21008                           ;main.c: 1749: putsUSART((char *) ",nodeid=");
 21009  004A18  0E7B               	movlw	high STR_141
 21010  004A1A  0100               	movlb	0	; () banked
 21011  004A1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21012  004A1E  0EC3               	movlw	low STR_141
 21013  004A20  6F61               	movwf	?_putsUSART& (0+255),b
 21014  004A22  EC9B  F00E         	call	_putsUSART	;wreg free
 21015                           
 21016                           ;main.c: 1750: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21017  004A26  0101               	movlb	1	; () banked
 21018  004A28  6700               	tstfsz	_bHex& (0+255),b
 21019  004A2A  D005               	goto	l11166
 21020                           
 21021                           ; BSR set to: 1
 21022  004A2C  0E7C               	movlw	high STR_54
 21023  004A2E  0100               	movlb	0	; () banked
 21024  004A30  6FA0               	movwf	(_receivePrintEventVerbose$1281+1)& (0+255),b
 21025  004A32  0EED               	movlw	low STR_54
 21026  004A34  D004               	goto	L30
 21027  004A36                     l11166:
 21028                           
 21029                           ; BSR set to: 1
 21030  004A36  0E7C               	movlw	high STR_53
 21031  004A38  0100               	movlb	0	; () banked
 21032  004A3A  6FA0               	movwf	(_receivePrintEventVerbose$1281+1)& (0+255),b
 21033  004A3C  0E64               	movlw	low STR_53
 21034  004A3E                     L30:
 21035  004A3E  6F9F               	movwf	_receivePrintEventVerbose$1281& (0+255),b
 21036                           
 21037                           ; BSR set to: 0
 21038  004A40  0E01               	movlw	high _wrkbuf
 21039  004A42  0100               	movlb	0	; () banked
 21040  004A44  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21041  004A46  0E54               	movlw	low _wrkbuf
 21042  004A48  6F76               	movwf	?_sprintf& (0+255),b
 21043  004A4A  C09F  F078         	movff	_receivePrintEventVerbose$1281,?_sprintf+2
 21044  004A4E  C0A0  F079         	movff	_receivePrintEventVerbose$1281+1,?_sprintf+3
 21045  004A52  C1AE  F07A         	movff	_vscpNodeId,?_sprintf+4
 21046  004A56  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21047  004A58  ECE9  F028         	call	_sprintf	;wreg free
 21048                           
 21049                           ; BSR set to: 0
 21050                           ;main.c: 1751: putsUSART(wrkbuf);
 21051  004A5C  0E01               	movlw	high _wrkbuf
 21052  004A5E  0100               	movlb	0	; () banked
 21053  004A60  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21054  004A62  0E54               	movlw	low _wrkbuf
 21055  004A64  6F61               	movwf	?_putsUSART& (0+255),b
 21056  004A66  EC9B  F00E         	call	_putsUSART	;wreg free
 21057                           
 21058                           ;main.c: 1752: putsUSART((char *) ",size=");
 21059  004A6A  0E7C               	movlw	high STR_144
 21060  004A6C  0100               	movlb	0	; () banked
 21061  004A6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21062  004A70  0E3A               	movlw	low STR_144
 21063  004A72  6F61               	movwf	?_putsUSART& (0+255),b
 21064  004A74  EC9B  F00E         	call	_putsUSART	;wreg free
 21065                           
 21066                           ;main.c: 1753: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21067  004A78  0101               	movlb	1	; () banked
 21068  004A7A  6700               	tstfsz	_bHex& (0+255),b
 21069  004A7C  D005               	goto	l11178
 21070                           
 21071                           ; BSR set to: 1
 21072  004A7E  0E7C               	movlw	high STR_54
 21073  004A80  0100               	movlb	0	; () banked
 21074  004A82  6FA2               	movwf	(_receivePrintEventVerbose$1286+1)& (0+255),b
 21075  004A84  0EED               	movlw	low STR_54
 21076  004A86  D004               	goto	L31
 21077  004A88                     l11178:
 21078                           
 21079                           ; BSR set to: 1
 21080  004A88  0E7C               	movlw	high STR_53
 21081  004A8A  0100               	movlb	0	; () banked
 21082  004A8C  6FA2               	movwf	(_receivePrintEventVerbose$1286+1)& (0+255),b
 21083  004A8E  0E64               	movlw	low STR_53
 21084  004A90                     L31:
 21085  004A90  6FA1               	movwf	_receivePrintEventVerbose$1286& (0+255),b
 21086                           
 21087                           ; BSR set to: 0
 21088  004A92  0E01               	movlw	high _wrkbuf
 21089  004A94  0100               	movlb	0	; () banked
 21090  004A96  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21091  004A98  0E54               	movlw	low _wrkbuf
 21092  004A9A  6F76               	movwf	?_sprintf& (0+255),b
 21093  004A9C  C0A1  F078         	movff	_receivePrintEventVerbose$1286,?_sprintf+2
 21094  004AA0  C0A2  F079         	movff	_receivePrintEventVerbose$1286+1,?_sprintf+3
 21095  004AA4  C1B0  F07A         	movff	_vscpSize,?_sprintf+4
 21096  004AA8  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21097  004AAA  ECE9  F028         	call	_sprintf	;wreg free
 21098                           
 21099                           ; BSR set to: 0
 21100                           ;main.c: 1754: putsUSART(wrkbuf);
 21101  004AAE  0E01               	movlw	high _wrkbuf
 21102  004AB0  0100               	movlb	0	; () banked
 21103  004AB2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21104  004AB4  0E54               	movlw	low _wrkbuf
 21105  004AB6  6F61               	movwf	?_putsUSART& (0+255),b
 21106  004AB8  EC9B  F00E         	call	_putsUSART	;wreg free
 21107                           
 21108                           ;main.c: 1755: if (vscpSize > 0) {
 21109  004ABC  0101               	movlb	1	; () banked
 21110  004ABE  51B0               	movf	_vscpSize& (0+255),w,b
 21111  004AC0  E054               	bz	l11206
 21112                           
 21113                           ; BSR set to: 1
 21114                           ;main.c: 1756: putsUSART((char *) ",Data=");
 21115  004AC2  0E7C               	movlw	high STR_147
 21116  004AC4  0100               	movlb	0	; () banked
 21117  004AC6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21118  004AC8  0E2C               	movlw	low STR_147
 21119  004ACA  6F61               	movwf	?_putsUSART& (0+255),b
 21120  004ACC  EC9B  F00E         	call	_putsUSART	;wreg free
 21121                           
 21122                           ;main.c: 1757: for (i = 0; i < vscpSize; i++) {
 21123  004AD0  0100               	movlb	0	; () banked
 21124  004AD2  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21125  004AD4  D044               	goto	l11204
 21126  004AD6                     l908:
 21127                           
 21128                           ; BSR set to: 0
 21129                           ;main.c: 1759: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21130  004AD6  0101               	movlb	1	; () banked
 21131  004AD8  6700               	tstfsz	_bHex& (0+255),b
 21132  004ADA  D005               	goto	l11192
 21133                           
 21134                           ; BSR set to: 1
 21135  004ADC  0E7C               	movlw	high STR_54
 21136  004ADE  0100               	movlb	0	; () banked
 21137  004AE0  6FA4               	movwf	(_receivePrintEventVerbose$1291+1)& (0+255),b
 21138  004AE2  0EED               	movlw	low STR_54
 21139  004AE4  D004               	goto	L32
 21140  004AE6                     l11192:
 21141                           
 21142                           ; BSR set to: 1
 21143  004AE6  0E7C               	movlw	high STR_53
 21144  004AE8  0100               	movlb	0	; () banked
 21145  004AEA  6FA4               	movwf	(_receivePrintEventVerbose$1291+1)& (0+255),b
 21146  004AEC  0E64               	movlw	low STR_53
 21147  004AEE                     L32:
 21148  004AEE  6FA3               	movwf	_receivePrintEventVerbose$1291& (0+255),b
 21149                           
 21150                           ; BSR set to: 0
 21151  004AF0  0E01               	movlw	high _wrkbuf
 21152  004AF2  0100               	movlb	0	; () banked
 21153  004AF4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21154  004AF6  0E54               	movlw	low _wrkbuf
 21155  004AF8  6F76               	movwf	?_sprintf& (0+255),b
 21156  004AFA  C0A3  F078         	movff	_receivePrintEventVerbose$1291,?_sprintf+2
 21157  004AFE  C0A4  F079         	movff	_receivePrintEventVerbose$1291+1,?_sprintf+3
 21158  004B02  0EA4               	movlw	low _vscpData
 21159  004B04  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21160  004B06  6ED9               	movwf	fsr2l,c
 21161  004B08  6ADA               	clrf	fsr2h,c
 21162  004B0A  0E01               	movlw	high _vscpData
 21163  004B0C  22DA               	addwfc	fsr2h,f,c
 21164  004B0E  50DF               	movf	indf2,w,c
 21165  004B10  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21166  004B12  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21167  004B14  ECE9  F028         	call	_sprintf	;wreg free
 21168                           
 21169                           ; BSR set to: 0
 21170                           ;main.c: 1760: putsUSART(wrkbuf);
 21171  004B18  0E01               	movlw	high _wrkbuf
 21172  004B1A  0100               	movlb	0	; () banked
 21173  004B1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21174  004B1E  0E54               	movlw	low _wrkbuf
 21175  004B20  6F61               	movwf	?_putsUSART& (0+255),b
 21176  004B22  EC9B  F00E         	call	_putsUSART	;wreg free
 21177                           
 21178                           ;main.c: 1761: if (i < (vscpSize - 1)) {
 21179  004B26  0EFF               	movlw	255
 21180  004B28  0101               	movlb	1	; () banked
 21181  004B2A  25B0               	addwf	_vscpSize& (0+255),w,b
 21182  004B2C  0100               	movlb	0	; () banked
 21183  004B2E  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21184  004B30  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21185  004B32  0EFF               	movlw	255
 21186  004B34  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21187  004B36  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21188  004B38  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21189  004B3A  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21190  004B3C  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21191  004B3E  0A80               	xorlw	128
 21192  004B40  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21193  004B42  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21194  004B44  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21195  004B46  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21196  004B48  0A80               	xorlw	128
 21197  004B4A  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21198  004B4C  E206               	bc	l11202
 21199                           
 21200                           ; BSR set to: 0
 21201                           ;main.c: 1762: putsUSART((char *) ",");
 21202  004B4E  0E7C               	movlw	high STR_30
 21203  004B50  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21204  004B52  0EF4               	movlw	low STR_30
 21205  004B54  6F61               	movwf	?_putsUSART& (0+255),b
 21206  004B56  EC9B  F00E         	call	_putsUSART	;wreg free
 21207  004B5A                     l11202:
 21208  004B5A  0100               	movlb	0	; () banked
 21209  004B5C  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21210  004B5E                     l11204:
 21211                           
 21212                           ; BSR set to: 0
 21213  004B5E  0101               	movlb	1	; () banked
 21214  004B60  51B0               	movf	_vscpSize& (0+255),w,b
 21215  004B62  0100               	movlb	0	; () banked
 21216  004B64  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21217  004B66  E208               	bc	l915
 21218  004B68  D7B6               	goto	l908
 21219  004B6A                     l11206:
 21220                           
 21221                           ; BSR set to: 1
 21222                           ;main.c: 1766: putsUSART((char *) ",Data=none");
 21223  004B6A  0E7B               	movlw	high STR_151
 21224  004B6C  0100               	movlb	0	; () banked
 21225  004B6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21226  004B70  0E91               	movlw	low STR_151
 21227  004B72  6F61               	movwf	?_putsUSART& (0+255),b
 21228  004B74  EC9B  F00E         	call	_putsUSART	;wreg free
 21229  004B78                     l915:
 21230                           
 21231                           ;main.c: 1767: }
 21232                           ;main.c: 1768: putsUSART((char *) ">\r\n");
 21233  004B78  0E7C               	movlw	high STR_152
 21234  004B7A  0100               	movlb	0	; () banked
 21235  004B7C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21236  004B7E  0ED4               	movlw	low STR_152
 21237  004B80  6F61               	movwf	?_putsUSART& (0+255),b
 21238  004B82  EC9B  F00E         	call	_putsUSART	;wreg free
 21239                           
 21240                           ;main.c: 1769: return 1;
 21241  004B86  0E01               	movlw	1
 21242  004B88  D001               	goto	l916
 21243  004B8A                     l11212:
 21244                           
 21245                           ; BSR set to: 0
 21246                           ;main.c: 1770: }
 21247                           ;main.c: 1772: return 0;
 21248  004B8A  0E00               	movlw	0
 21249  004B8C                     l916:
 21250  004B8C  0012               	return	
 21251  004B8E                     __end_of_receivePrintEventVerbose:
 21252                           	opt stack 0
 21253                           tblptru	equ	0xFF8
 21254                           tblptrh	equ	0xFF7
 21255                           tblptrl	equ	0xFF6
 21256                           tablat	equ	0xFF5
 21257                           prodh	equ	0xFF4
 21258                           prodl	equ	0xFF3
 21259                           intcon	equ	0xFF2
 21260                           indf0	equ	0xFEF
 21261                           postinc0	equ	0xFEE
 21262                           fsr0h	equ	0xFEA
 21263                           fsr0l	equ	0xFE9
 21264                           wreg	equ	0xFE8
 21265                           indf1	equ	0xFE7
 21266                           postinc1	equ	0xFE6
 21267                           postdec1	equ	0xFE5
 21268                           fsr1h	equ	0xFE2
 21269                           fsr1l	equ	0xFE1
 21270                           indf2	equ	0xFDF
 21271                           postinc2	equ	0xFDE
 21272                           postdec2	equ	0xFDD
 21273                           plusw2	equ	0xFDB
 21274                           fsr2h	equ	0xFDA
 21275                           fsr2l	equ	0xFD9
 21276                           status	equ	0xFD8
 21277                           
 21278 ;; *************** function _getVSCPFrame *****************
 21279 ;; Defined at:
 21280 ;;		line 2933 in file "main.c"
 21281 ;; Parameters:    Size  Location     Type
 21282 ;;  pvscpclass      2   18[BANK0 ] PTR unsigned short 
 21283 ;;		 -> vscpClass(2), 
 21284 ;;  pvscptype       2   20[BANK0 ] PTR unsigned char 
 21285 ;;		 -> vscpType(1), 
 21286 ;;  pNodeId         2   22[BANK0 ] PTR unsigned char 
 21287 ;;		 -> vscpNodeId(1), 
 21288 ;;  pPriority       2   24[BANK0 ] PTR unsigned char 
 21289 ;;		 -> vscpPriority(1), 
 21290 ;;  pSize           2   26[BANK0 ] PTR unsigned char 
 21291 ;;		 -> vscpSize(1), 
 21292 ;;  pData           2   28[BANK0 ] PTR unsigned char 
 21293 ;;		 -> vscpData(8), 
 21294 ;; Auto vars:     Size  Location     Type
 21295 ;;  id              4   34[BANK0 ] unsigned long 
 21296 ;; Return value:  Size  Location     Type
 21297 ;;                  1    wreg      unsigned char 
 21298 ;; Registers used:
 21299 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21300 ;; Tracked objects:
 21301 ;;		On entry : F/0
 21302 ;;		On exit  : F/0
 21303 ;;		Unchanged: 0/0
 21304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21305 ;;      Params:         0      12       0       0       0       0       0
 21306 ;;      Locals:         0       4       0       0       0       0       0
 21307 ;;      Temps:          0       4       0       0       0       0       0
 21308 ;;      Totals:         0      20       0       0       0       0       0
 21309 ;;Total ram usage:       20 bytes
 21310 ;; Hardware stack levels used:    1
 21311 ;; Hardware stack levels required when called:    5
 21312 ;; This function calls:
 21313 ;;		_getCANFrame
 21314 ;; This function is called by:
 21315 ;;		_receivePrintEventVerbose
 21316 ;;		_readRegister
 21317 ;;		_readRegisterExtended
 21318 ;;		_writeRegisterExtended
 21319 ;; This function uses a non-reentrant model
 21320 ;;
 21321                           
 21322                           	psect	text53
 21323  00236A                     __ptext53:
 21324                           	opt stack 0
 21325  00236A                     _getVSCPFrame:
 21326                           	opt stack 21
 21327                           
 21328                           ; BSR set to: 0
 21329                           ;main.c: 2934: uint32_t id;
 21330                           ;main.c: 2936: if (!getCANFrame(&id, pSize, pData)) {
 21331                           
 21332                           ;incstack = 0
 21333                           ;incstack = 0
 21334  00236A  C07A  F06D         	movff	getVSCPFrame@pSize,?_getCANFrame
 21335  00236E  C07B  F06E         	movff	getVSCPFrame@pSize+1,?_getCANFrame+1
 21336  002372  C07C  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+2
 21337  002376  C07D  F070         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 21338  00237A  0E82               	movlw	getVSCPFrame@id& (0+255)
 21339  00237C  ECFD  F010         	call	_getCANFrame
 21340  002380  0900               	iorlw	0
 21341  002382  E102               	bnz	l12560
 21342                           
 21343                           ; BSR set to: 0
 21344                           ;main.c: 2937: return 0;
 21345  002384  0E00               	movlw	0
 21346  002386  D033               	goto	l1256
 21347  002388                     l12560:
 21348                           
 21349                           ; BSR set to: 0
 21350                           ;main.c: 2938: }
 21351                           ;main.c: 2940: *pNodeId = id & 0x0ff;
 21352  002388  C076  FFD9         	movff	getVSCPFrame@pNodeId,fsr2l
 21353  00238C  C077  FFDA         	movff	getVSCPFrame@pNodeId+1,fsr2h
 21354  002390  C082  FFDF         	movff	getVSCPFrame@id,indf2
 21355                           
 21356                           ;main.c: 2941: *pvscptype = (id >> 8) & 0xff;
 21357  002394  C074  FFD9         	movff	getVSCPFrame@pvscptype,fsr2l
 21358  002398  C075  FFDA         	movff	getVSCPFrame@pvscptype+1,fsr2h
 21359  00239C  C083  FFDF         	movff	getVSCPFrame@id+1,indf2
 21360                           
 21361                           ; BSR set to: 0
 21362                           ;main.c: 2942: *pvscpclass = (id >> 16) & 0x1ff;
 21363  0023A0  0100               	movlb	0	; () banked
 21364  0023A2  5184               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21365  0023A4  6F7E               	movwf	??_getVSCPFrame& (0+255),b
 21366  0023A6  0E01               	movlw	1
 21367  0023A8  1585               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21368  0023AA  6F7F               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21369  0023AC  C072  FFD9         	movff	getVSCPFrame@pvscpclass,fsr2l
 21370  0023B0  C073  FFDA         	movff	getVSCPFrame@pvscpclass+1,fsr2h
 21371  0023B4  C07E  FFDE         	movff	??_getVSCPFrame,postinc2
 21372  0023B8  C07F  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21373                           
 21374                           ; BSR set to: 0
 21375                           ;main.c: 2943: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21376  0023BC  C082  F07E         	movff	getVSCPFrame@id,??_getVSCPFrame
 21377  0023C0  C083  F07F         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21378  0023C4  C084  F080         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21379  0023C8  C085  F081         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21380  0023CC  0E1B               	movlw	27
 21381  0023CE  D005               	goto	u16270
 21382  0023D0                     u16275:
 21383  0023D0  90D8               	bcf	status,0,c
 21384  0023D2  3381               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21385  0023D4  3380               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21386  0023D6  337F               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21387  0023D8  337E               	rrcf	??_getVSCPFrame& (0+255),f,b
 21388  0023DA                     u16270:
 21389  0023DA  2EE8               	decfsz	wreg,f,c
 21390  0023DC  D7F9               	goto	u16275
 21391  0023DE  517E               	movf	??_getVSCPFrame& (0+255),w,b
 21392  0023E0  0B07               	andlw	7
 21393  0023E2  C078  FFD9         	movff	getVSCPFrame@pPriority,fsr2l
 21394  0023E6  C079  FFDA         	movff	getVSCPFrame@pPriority+1,fsr2h
 21395  0023EA  6EDF               	movwf	indf2,c
 21396                           
 21397                           ; BSR set to: 0
 21398                           ;main.c: 2945: return 1;
 21399  0023EC  0E01               	movlw	1
 21400  0023EE                     l1256:
 21401                           
 21402                           ; BSR set to: 0
 21403  0023EE  0012               	return	
 21404  0023F0                     __end_of_getVSCPFrame:
 21405                           	opt stack 0
 21406                           tblptru	equ	0xFF8
 21407                           tblptrh	equ	0xFF7
 21408                           tblptrl	equ	0xFF6
 21409                           tablat	equ	0xFF5
 21410                           prodh	equ	0xFF4
 21411                           prodl	equ	0xFF3
 21412                           intcon	equ	0xFF2
 21413                           indf0	equ	0xFEF
 21414                           postinc0	equ	0xFEE
 21415                           fsr0h	equ	0xFEA
 21416                           fsr0l	equ	0xFE9
 21417                           wreg	equ	0xFE8
 21418                           indf1	equ	0xFE7
 21419                           postinc1	equ	0xFE6
 21420                           postdec1	equ	0xFE5
 21421                           fsr1h	equ	0xFE2
 21422                           fsr1l	equ	0xFE1
 21423                           indf2	equ	0xFDF
 21424                           postinc2	equ	0xFDE
 21425                           postdec2	equ	0xFDD
 21426                           plusw2	equ	0xFDB
 21427                           fsr2h	equ	0xFDA
 21428                           fsr2l	equ	0xFD9
 21429                           status	equ	0xFD8
 21430                           
 21431 ;; *************** function _getCANFrame *****************
 21432 ;; Defined at:
 21433 ;;		line 2969 in file "main.c"
 21434 ;; Parameters:    Size  Location     Type
 21435 ;;  pid             1    wreg     PTR unsigned long 
 21436 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21437 ;;  pdlc            2   13[BANK0 ] PTR unsigned char 
 21438 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21439 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 21440 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21441 ;; Auto vars:     Size  Location     Type
 21442 ;;  pid             1   17[BANK0 ] PTR unsigned long 
 21443 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21444 ;; Return value:  Size  Location     Type
 21445 ;;                  1    wreg      unsigned char 
 21446 ;; Registers used:
 21447 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21448 ;; Tracked objects:
 21449 ;;		On entry : F/0
 21450 ;;		On exit  : F/0
 21451 ;;		Unchanged: 0/0
 21452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21453 ;;      Params:         0       4       0       0       0       0       0
 21454 ;;      Locals:         0       1       0       0       0       0       0
 21455 ;;      Temps:          0       0       0       0       0       0       0
 21456 ;;      Totals:         0       5       0       0       0       0       0
 21457 ;;Total ram usage:        5 bytes
 21458 ;; Hardware stack levels used:    1
 21459 ;; Hardware stack levels required when called:    4
 21460 ;; This function calls:
 21461 ;;		_fifo_read
 21462 ;; This function is called by:
 21463 ;;		_receiveSendEventCANAL
 21464 ;;		_receiveSendMultiEventCANAL
 21465 ;;		_receiveSendEventSLCAN
 21466 ;;		_getVSCPFrame
 21467 ;; This function uses a non-reentrant model
 21468 ;;
 21469                           
 21470                           	psect	text54
 21471  0021FA                     __ptext54:
 21472                           	opt stack 0
 21473  0021FA                     _getCANFrame:
 21474                           	opt stack 23
 21475                           
 21476                           ; BSR set to: 0
 21477                           ;incstack = 0
 21478                           ;incstack = 0
 21479                           ;getCANFrame@pid stored from wreg
 21480  0021FA  CFE8 F071          	movff	wreg,getCANFrame@pid
 21481                           
 21482                           ; BSR set to: 0
 21483                           ;main.c: 2990: if ( canrxcount ) {
 21484  0021FE  51F0               	movf	_canrxcount& (0+255),w,b	;volatile
 21485  002200  E00F               	bz	l12578
 21486                           
 21487                           ; BSR set to: 0
 21488                           ;main.c: 2992: (INTCONbits.GIE = 0);
 21489  002202  9EF2               	bcf	intcon,7,c	;volatile
 21490                           
 21491                           ; BSR set to: 0
 21492                           ;main.c: 2995: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21493  002204  C071  F060         	movff	getCANFrame@pid,?_fifo_read
 21494  002208  6B61               	clrf	(?_fifo_read+1)& (0+255),b
 21495  00220A  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21496  00220C  0E04               	movlw	4
 21497  00220E  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21498  002210  0E1B               	movlw	_canInputFifo& (0+255)
 21499  002212  ECBA  F015         	call	_fifo_read
 21500  002216  5160               	movf	?_fifo_read& (0+255),w,b
 21501  002218  0A04               	xorlw	4
 21502  00221A  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21503  00221C  E003               	bz	l12582
 21504  00221E                     l12576:
 21505                           
 21506                           ; BSR set to: 0
 21507                           ;main.c: 2996: (INTCONbits.GIE = 1);
 21508  00221E  8EF2               	bsf	intcon,7,c	;volatile
 21509  002220                     l12578:
 21510                           
 21511                           ; BSR set to: 0
 21512                           ;main.c: 2997: return 0;
 21513  002220  0E00               	movlw	0
 21514  002222  D026               	goto	l1265
 21515  002224                     l12582:
 21516                           
 21517                           ; BSR set to: 0
 21518                           ;main.c: 2998: }
 21519                           ;main.c: 3001: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21520  002224  C06D  F060         	movff	getCANFrame@pdlc,?_fifo_read
 21521  002228  C06E  F061         	movff	getCANFrame@pdlc+1,?_fifo_read+1
 21522  00222C  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21523  00222E  0E01               	movlw	1
 21524  002230  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21525  002232  0E1B               	movlw	_canInputFifo& (0+255)
 21526  002234  ECBA  F015         	call	_fifo_read
 21527  002238  0560               	decf	?_fifo_read& (0+255),w,b
 21528  00223A  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21529  00223C  E1F0               	bnz	l12576
 21530                           
 21531                           ; BSR set to: 0
 21532                           ;main.c: 3004: }
 21533                           ;main.c: 3007: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21534  00223E  C06F  F060         	movff	getCANFrame@pdata,?_fifo_read
 21535  002242  C070  F061         	movff	getCANFrame@pdata+1,?_fifo_read+1
 21536  002246  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21537  00224A  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21538  00224E  50DF               	movf	indf2,w,c
 21539  002250  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21540  002252  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21541  002254  0E1B               	movlw	_canInputFifo& (0+255)
 21542  002256  ECBA  F015         	call	_fifo_read
 21543  00225A  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21544  00225E  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21545  002262  50DF               	movf	indf2,w,c
 21546  002264  1960               	xorwf	?_fifo_read& (0+255),w,b
 21547  002266  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21548  002268  E1DA               	bnz	l12576
 21549                           
 21550                           ; BSR set to: 0
 21551                           ;main.c: 3010: }
 21552                           ;main.c: 3012: canrxcount--;
 21553  00226A  07F0               	decf	_canrxcount& (0+255),f,b	;volatile
 21554                           
 21555                           ; BSR set to: 0
 21556                           ;main.c: 3014: (INTCONbits.GIE = 1);
 21557  00226C  8EF2               	bsf	intcon,7,c	;volatile
 21558                           
 21559                           ; BSR set to: 0
 21560                           ;main.c: 3016: return 1;
 21561  00226E  0E01               	movlw	1
 21562  002270                     l1265:
 21563                           
 21564                           ; BSR set to: 0
 21565  002270  0012               	return	
 21566  002272                     __end_of_getCANFrame:
 21567                           	opt stack 0
 21568                           tblptru	equ	0xFF8
 21569                           tblptrh	equ	0xFF7
 21570                           tblptrl	equ	0xFF6
 21571                           tablat	equ	0xFF5
 21572                           prodh	equ	0xFF4
 21573                           prodl	equ	0xFF3
 21574                           intcon	equ	0xFF2
 21575                           indf0	equ	0xFEF
 21576                           postinc0	equ	0xFEE
 21577                           fsr0h	equ	0xFEA
 21578                           fsr0l	equ	0xFE9
 21579                           wreg	equ	0xFE8
 21580                           indf1	equ	0xFE7
 21581                           postinc1	equ	0xFE6
 21582                           postdec1	equ	0xFE5
 21583                           fsr1h	equ	0xFE2
 21584                           fsr1l	equ	0xFE1
 21585                           indf2	equ	0xFDF
 21586                           postinc2	equ	0xFDE
 21587                           postdec2	equ	0xFDD
 21588                           plusw2	equ	0xFDB
 21589                           fsr2h	equ	0xFDA
 21590                           fsr2l	equ	0xFD9
 21591                           status	equ	0xFD8
 21592                           
 21593 ;; *************** function _fifo_read *****************
 21594 ;; Defined at:
 21595 ;;		line 29 in file "fifo.c"
 21596 ;; Parameters:    Size  Location     Type
 21597 ;;  f               1    wreg     PTR struct .
 21598 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21599 ;;  buf             2    0[BANK0 ] PTR void 
 21600 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21601 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21602 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21603 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21604 ;;  nbytes          2    2[BANK0 ] unsigned short 
 21605 ;; Auto vars:     Size  Location     Type
 21606 ;;  f               1   12[BANK0 ] PTR struct .
 21607 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21608 ;;  i               2   10[BANK0 ] unsigned short 
 21609 ;;  p               2    8[BANK0 ] PTR unsigned char 
 21610 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21611 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21612 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21613 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21614 ;; Return value:  Size  Location     Type
 21615 ;;                  2    0[BANK0 ] unsigned short 
 21616 ;; Registers used:
 21617 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21618 ;; Tracked objects:
 21619 ;;		On entry : F/0
 21620 ;;		On exit  : F/0
 21621 ;;		Unchanged: 0/0
 21622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21623 ;;      Params:         0       4       0       0       0       0       0
 21624 ;;      Locals:         0       5       0       0       0       0       0
 21625 ;;      Temps:          0       4       0       0       0       0       0
 21626 ;;      Totals:         0      13       0       0       0       0       0
 21627 ;;Total ram usage:       13 bytes
 21628 ;; Hardware stack levels used:    1
 21629 ;; Hardware stack levels required when called:    3
 21630 ;; This function calls:
 21631 ;;		Nothing
 21632 ;; This function is called by:
 21633 ;;		_main
 21634 ;;		_doModeVerbose
 21635 ;;		_doModeVscp
 21636 ;;		_doModeSLCAN
 21637 ;;		_getCANFrame
 21638 ;; This function uses a non-reentrant model
 21639 ;;
 21640                           
 21641                           	psect	text55
 21642  002B74                     __ptext55:
 21643                           	opt stack 0
 21644  002B74                     _fifo_read:
 21645                           	opt stack 23
 21646                           
 21647                           ; BSR set to: 0
 21648                           ;incstack = 0
 21649                           ;incstack = 0
 21650                           ;fifo_read@f stored from wreg
 21651  002B74  CFE8 F06C          	movff	wreg,fifo_read@f
 21652                           
 21653                           ; BSR set to: 0
 21654                           ;fifo.c: 30: uint16_t i;
 21655                           ;fifo.c: 31: uint8_t *p;
 21656                           ;fifo.c: 32: p = buf;
 21657  002B78  C060  F068         	movff	fifo_read@buf,fifo_read@p
 21658  002B7C  C061  F069         	movff	fifo_read@buf+1,fifo_read@p+1
 21659                           
 21660                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21661  002B80  6B6A               	clrf	fifo_read@i& (0+255),b
 21662  002B82  6B6B               	clrf	(fifo_read@i+1)& (0+255),b
 21663  002B84  D03E               	goto	l10030
 21664  002B86                     l10016:
 21665                           
 21666                           ; BSR set to: 0
 21667                           ;fifo.c: 36: if (f->tail != f->head) {
 21668  002B86  516C               	movf	fifo_read@f& (0+255),w,b
 21669  002B88  6ED9               	movwf	fsr2l,c
 21670  002B8A  6ADA               	clrf	fsr2h,c
 21671  002B8C  0E02               	movlw	2
 21672  002B8E  D843               	call	PL34	;call to abstracted procedure
 21673  002B90  B4D8               	btfsc	status,2,c
 21674  002B92  18E7               	xorwf	indf1,w,c
 21675  002B94  E02F               	bz	l1515
 21676                           
 21677                           ; BSR set to: 0
 21678                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21679  002B96  D84E               	call	PL104	;call to abstracted procedure
 21680  002B98  CFDE F064          	movff	postinc2,??_fifo_read
 21681  002B9C  CFDD F065          	movff	postdec2,??_fifo_read+1
 21682  002BA0  516C               	movf	fifo_read@f& (0+255),w,b
 21683  002BA2  6ED9               	movwf	fsr2l,c
 21684  002BA4  6ADA               	clrf	fsr2h,c
 21685  002BA6  CFDE F066          	movff	postinc2,??_fifo_read+2
 21686  002BAA  CFDD F067          	movff	postdec2,??_fifo_read+3
 21687  002BAE  5164               	movf	??_fifo_read& (0+255),w,b
 21688  002BB0  2566               	addwf	(??_fifo_read+2)& (0+255),w,b
 21689  002BB2  6ED9               	movwf	fsr2l,c
 21690  002BB4  5165               	movf	(??_fifo_read+1)& (0+255),w,b
 21691  002BB6  2167               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21692  002BB8  6EDA               	movwf	fsr2h,c
 21693  002BBA  C068  FFE1         	movff	fifo_read@p,fsr1l
 21694  002BBE  C069  FFE2         	movff	fifo_read@p+1,fsr1h
 21695  002BC2  CFDF FFE7          	movff	indf2,indf1
 21696                           
 21697                           ; BSR set to: 0
 21698  002BC6  4B68               	infsnz	fifo_read@p& (0+255),f,b
 21699  002BC8  2B69               	incf	(fifo_read@p+1)& (0+255),f,b
 21700                           
 21701                           ; BSR set to: 0
 21702                           ;fifo.c: 38: f->tail++;
 21703  002BCA  516C               	movf	fifo_read@f& (0+255),w,b
 21704  002BCC  6ED9               	movwf	fsr2l,c
 21705  002BCE  6ADA               	clrf	fsr2h,c
 21706  002BD0  0E04               	movlw	4
 21707  002BD2  26D9               	addwf	fsr2l,f,c
 21708  002BD4  6ADA               	clrf	fsr2h,c
 21709  002BD6  2ADE               	incf	postinc2,f,c
 21710  002BD8  0E00               	movlw	0
 21711  002BDA  22DD               	addwfc	postdec2,f,c
 21712                           
 21713                           ; BSR set to: 0
 21714                           ;fifo.c: 39: if (f->tail == f->size) {
 21715  002BDC  516C               	movf	fifo_read@f& (0+255),w,b
 21716  002BDE  6ED9               	movwf	fsr2l,c
 21717  002BE0  6ADA               	clrf	fsr2h,c
 21718  002BE2  0E06               	movlw	6
 21719  002BE4  D818               	call	PL34	;call to abstracted procedure
 21720  002BE6  B4D8               	btfsc	status,2,c
 21721  002BE8  18E7               	xorwf	indf1,w,c
 21722  002BEA  E109               	bnz	l10028
 21723                           
 21724                           ; BSR set to: 0
 21725                           ;fifo.c: 40: f->tail = 0;
 21726  002BEC  D823               	call	PL104	;call to abstracted procedure
 21727  002BEE  6ADE               	clrf	postinc2,c
 21728  002BF0  6ADD               	clrf	postdec2,c
 21729  002BF2  D005               	goto	l10028
 21730  002BF4                     l1515:
 21731                           
 21732                           ; BSR set to: 0
 21733                           ;fifo.c: 43: else {
 21734                           ;fifo.c: 44: return i;
 21735  002BF4  C06A  F060         	movff	fifo_read@i,?_fifo_read
 21736  002BF8  C06B  F061         	movff	fifo_read@i+1,?_fifo_read+1
 21737  002BFC  D00B               	goto	l1518
 21738  002BFE                     l10028:
 21739                           
 21740                           ; BSR set to: 0
 21741  002BFE  4B6A               	infsnz	fifo_read@i& (0+255),f,b
 21742  002C00  2B6B               	incf	(fifo_read@i+1)& (0+255),f,b
 21743  002C02                     l10030:
 21744                           
 21745                           ; BSR set to: 0
 21746  002C02  5162               	movf	fifo_read@nbytes& (0+255),w,b
 21747  002C04  5D6A               	subwf	fifo_read@i& (0+255),w,b
 21748  002C06  5163               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 21749  002C08  596B               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21750  002C0A  E3BD               	bnc	l10016
 21751                           
 21752                           ; BSR set to: 0
 21753                           ;fifo.c: 45: }
 21754                           ;fifo.c: 47: }
 21755                           ;fifo.c: 49: return nbytes;
 21756  002C0C  C062  F060         	movff	fifo_read@nbytes,?_fifo_read
 21757  002C10  C063  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21758  002C14                     l1518:
 21759                           
 21760                           ; BSR set to: 0
 21761  002C14  0012               	return	
 21762  002C16                     __end_of_fifo_read:
 21763                           	opt stack 0
 21764  002C16                     PL34:
 21765                           	opt stack 23
 21766  002C16  26D9               	addwf	fsr2l,f,c
 21767  002C18  6ADA               	clrf	fsr2h,c
 21768  002C1A  516C               	movf	fifo_read@f& (0+255),w,b
 21769  002C1C  6EE1               	movwf	fsr1l,c
 21770  002C1E  6AE2               	clrf	fsr1h,c
 21771  002C20  0E04               	movlw	4
 21772  002C22  26E1               	addwf	fsr1l,f,c
 21773  002C24  6AE2               	clrf	fsr1h,c
 21774  002C26  52E6               	movf	postinc1,f,c
 21775  002C28  52DE               	movf	postinc2,f,c
 21776  002C2A  50DD               	movf	postdec2,w,c
 21777  002C2C  18E5               	xorwf	postdec1,w,c
 21778  002C2E  CFDF FFE8          	movff	indf2,wreg
 21779  002C32  0012               	return	
 21780  002C34                     __end_ofPL34:
 21781                           	opt stack 0
 21782  002C34                     PL104:
 21783                           	opt stack 23
 21784  002C34  516C               	movf	fifo_read@f& (0+255),w,b
 21785  002C36  6ED9               	movwf	fsr2l,c
 21786  002C38  6ADA               	clrf	fsr2h,c
 21787  002C3A  0E04               	movlw	4
 21788  002C3C  26D9               	addwf	fsr2l,f,c
 21789  002C3E  6ADA               	clrf	fsr2h,c
 21790  002C40  0012               	return	
 21791  002C42                     __end_ofPL104:
 21792                           	opt stack 0
 21793                           tblptru	equ	0xFF8
 21794                           tblptrh	equ	0xFF7
 21795                           tblptrl	equ	0xFF6
 21796                           tablat	equ	0xFF5
 21797                           prodh	equ	0xFF4
 21798                           prodl	equ	0xFF3
 21799                           intcon	equ	0xFF2
 21800                           indf0	equ	0xFEF
 21801                           postinc0	equ	0xFEE
 21802                           fsr0h	equ	0xFEA
 21803                           fsr0l	equ	0xFE9
 21804                           wreg	equ	0xFE8
 21805                           indf1	equ	0xFE7
 21806                           postinc1	equ	0xFE6
 21807                           postdec1	equ	0xFE5
 21808                           fsr1h	equ	0xFE2
 21809                           fsr1l	equ	0xFE1
 21810                           indf2	equ	0xFDF
 21811                           postinc2	equ	0xFDE
 21812                           postdec2	equ	0xFDD
 21813                           plusw2	equ	0xFDB
 21814                           fsr2h	equ	0xFDA
 21815                           fsr2l	equ	0xFD9
 21816                           status	equ	0xFD8
 21817                           
 21818 ;; *************** function _sprintf *****************
 21819 ;; Defined at:
 21820 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21821 ;; Parameters:    Size  Location     Type
 21822 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 21823 ;;		 -> wrkbuf(80), 
 21824 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 21825 ;;		 -> STR_194(3), STR_193(7), STR_187(3), STR_186(7), 
 21826 ;;		 -> STR_183(4), STR_182(8), STR_179(4), STR_178(8), 
 21827 ;;		 -> STR_175(4), STR_174(8), STR_171(4), STR_170(8), 
 21828 ;;		 -> STR_167(4), STR_166(7), STR_163(4), STR_162(7), 
 21829 ;;		 -> STR_159(4), STR_158(7), STR_155(4), STR_154(7), 
 21830 ;;		 -> STR_149(3), STR_148(7), STR_146(3), STR_145(7), 
 21831 ;;		 -> STR_143(3), STR_142(7), STR_140(3), STR_139(7), 
 21832 ;;		 -> STR_137(3), STR_136(7), STR_134(3), STR_133(7), 
 21833 ;;		 -> STR_81(3), STR_80(7), STR_65(3), STR_64(7), 
 21834 ;;		 -> STR_63(3), STR_62(7), STR_59(3), STR_58(7), 
 21835 ;;		 -> STR_56(3), STR_55(7), STR_54(3), STR_53(7), 
 21836 ;; Auto vars:     Size  Location     Type
 21837 ;;  idx             1   33[BANK0 ] unsigned char 
 21838 ;;  _val            4   45[BANK0 ] struct .
 21839 ;;  flag            2   50[BANK0 ] unsigned short 
 21840 ;;  width           2   43[BANK0 ] int 
 21841 ;;  prec            2   41[BANK0 ] int 
 21842 ;;  c               1   49[BANK0 ] char 
 21843 ;;  ap              1   40[BANK0 ] PTR void [1]
 21844 ;;		 -> ?_sprintf(2), 
 21845 ;; Return value:  Size  Location     Type
 21846 ;;                  2   22[BANK0 ] int 
 21847 ;; Registers used:
 21848 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21849 ;; Tracked objects:
 21850 ;;		On entry : F/0
 21851 ;;		On exit  : F/0
 21852 ;;		Unchanged: 0/0
 21853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21854 ;;      Params:         0       8       0       0       0       0       0
 21855 ;;      Locals:         0      19       0       0       0       0       0
 21856 ;;      Temps:          0       3       0       0       0       0       0
 21857 ;;      Totals:         0      30       0       0       0       0       0
 21858 ;;Total ram usage:       30 bytes
 21859 ;; Hardware stack levels used:    1
 21860 ;; Hardware stack levels required when called:    4
 21861 ;; This function calls:
 21862 ;;		_isdigit
 21863 ;;		___lldiv
 21864 ;;		___llmod
 21865 ;;		___wmul
 21866 ;; This function is called by:
 21867 ;;		_doModeVerbose
 21868 ;;		_receivePrintEventVerbose
 21869 ;;		_printStatistics
 21870 ;;		_printErrors
 21871 ;; This function uses a non-reentrant model
 21872 ;;
 21873                           
 21874                           	psect	text56
 21875  0051D2                     __ptext56:
 21876                           	opt stack 0
 21877  0051D2                     _sprintf:
 21878                           	opt stack 24
 21879                           
 21880                           ; BSR set to: 0
 21881                           ;doprnt.c: 494: va_list ap;
 21882                           ;doprnt.c: 499: signed char c;
 21883                           ;doprnt.c: 501: int width;
 21884                           ;doprnt.c: 504: int prec;
 21885                           ;doprnt.c: 508: unsigned short flag;
 21886                           ;doprnt.c: 527: union {
 21887                           ;doprnt.c: 528: unsigned long _val;
 21888                           ;doprnt.c: 529: struct {
 21889                           ;doprnt.c: 530: const char * _cp;
 21890                           ;doprnt.c: 531: unsigned _len;
 21891                           ;doprnt.c: 532: } _str;
 21892                           ;doprnt.c: 533: } _val;
 21893                           ;doprnt.c: 542: *ap = __va_start();
 21894                           
 21895                           ; BSR set to: 0
 21896                           ;incstack = 0
 21897                           ;incstack = 0
 21898  0051D2  0E7A               	movlw	low (?_sprintf+4)
 21899  0051D4  6F88               	movwf	sprintf@ap& (0+255),b
 21900                           
 21901                           ;doprnt.c: 545: while(c = *f++) {
 21902  0051D6  D32C               	goto	l11902
 21903  0051D8                     l11568:
 21904                           
 21905                           ; BSR set to: 0
 21906                           ;doprnt.c: 547: if(c != '%')
 21907  0051D8  5191               	movf	sprintf@c& (0+255),w,b
 21908  0051DA  0A25               	xorlw	37
 21909  0051DC  E009               	bz	l1623
 21910                           
 21911                           ; BSR set to: 0
 21912                           ;doprnt.c: 549: {
 21913                           ;doprnt.c: 550: ((*sp++ = (c)));
 21914  0051DE  C076  FFD9         	movff	sprintf@sp,fsr2l
 21915  0051E2  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21916  0051E6  C091  FFDF         	movff	sprintf@c,indf2
 21917                           
 21918                           ; BSR set to: 0
 21919  0051EA  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21920  0051EC  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21921                           
 21922                           ;doprnt.c: 551: continue;
 21923  0051EE  D320               	goto	l11902
 21924  0051F0                     l1623:
 21925                           
 21926                           ; BSR set to: 0
 21927                           ;doprnt.c: 552: }
 21928                           ;doprnt.c: 555: width = 0;
 21929  0051F0  6B8B               	clrf	sprintf@width& (0+255),b
 21930  0051F2  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21931                           
 21932                           ;doprnt.c: 557: flag = 0;
 21933  0051F4  6B92               	clrf	sprintf@flag& (0+255),b
 21934  0051F6  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 21935  0051F8  D009               	goto	l11584
 21936  0051FA                     l11574:
 21937                           
 21938                           ; BSR set to: 0
 21939                           ;doprnt.c: 563: flag |= 0x08;
 21940  0051FA  8792               	bsf	sprintf@flag& (0+255),3,b
 21941  0051FC  D005               	goto	L33
 21942  0051FE                     l11576:
 21943                           
 21944                           ; BSR set to: 0
 21945                           ;doprnt.c: 570: flag |= 0x01;
 21946  0051FE  8192               	bsf	sprintf@flag& (0+255),0,b
 21947  005200  D003               	goto	L33
 21948  005202                     l11578:
 21949                           
 21950                           ; BSR set to: 0
 21951                           ;doprnt.c: 583: flag |= 0x800;
 21952  005202  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 21953  005204  D001               	goto	L33
 21954  005206                     l11580:
 21955                           
 21956                           ; BSR set to: 0
 21957                           ;doprnt.c: 589: flag |= 0x04;
 21958  005206  8592               	bsf	sprintf@flag& (0+255),2,b
 21959  005208                     L33:
 21960                           
 21961                           ;doprnt.c: 590: f++;
 21962  005208  4B78               	infsnz	sprintf@f& (0+255),f,b
 21963  00520A  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21964  00520C                     l11584:
 21965                           
 21966                           ; BSR set to: 0
 21967  00520C  C078  FFF6         	movff	sprintf@f,tblptrl
 21968  005210  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21969  005214  0008               	tblrd		*
 21970  005216  50F5               	movf	tablat,w,c
 21971                           
 21972                           ; Switch size 1, requested type "space"
 21973                           ; Number of cases is 4, Range of values is 32 to 48
 21974                           ; switch strategies available:
 21975                           ; Name         Instructions Cycles
 21976                           ; simple_byte           13     7 (average)
 21977                           ;	Chosen strategy is simple_byte
 21978  005218  0A20               	xorlw	32	; case 32
 21979  00521A  E0F1               	bz	l11576
 21980  00521C  0A03               	xorlw	3	; case 35
 21981  00521E  E0F1               	bz	l11578
 21982  005220  0A0E               	xorlw	14	; case 45
 21983  005222  E0EB               	bz	l11574
 21984  005224  0A1D               	xorlw	29	; case 48
 21985  005226  E0EF               	bz	l11580
 21986                           
 21987                           ; BSR set to: 0
 21988                           ;doprnt.c: 602: if(flag & 0x08)
 21989  005228  B792               	btfsc	sprintf@flag& (0+255),3,b
 21990                           
 21991                           ; BSR set to: 0
 21992                           ;doprnt.c: 603: flag &= ~0x04;
 21993  00522A  9592               	bcf	sprintf@flag& (0+255),2,b
 21994                           
 21995                           ; BSR set to: 0
 21996                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 21997  00522C  C078  FFF6         	movff	sprintf@f,tblptrl
 21998  005230  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21999  005234  0008               	tblrd		*
 22000  005236  50F5               	movf	tablat,w,c
 22001  005238  EC2E  F00C         	call	_isdigit
 22002  00523C  E325               	bnc	l11600
 22003                           
 22004                           ; BSR set to: 0
 22005                           ;doprnt.c: 607: width = 0;
 22006  00523E  6B8B               	clrf	sprintf@width& (0+255),b
 22007  005240  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22008  005242                     l11592:
 22009                           
 22010                           ; BSR set to: 0
 22011                           ;doprnt.c: 609: width *= 10;
 22012  005242  C08B  F060         	movff	sprintf@width,?___wmul
 22013  005246  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22014  00524A  6B63               	clrf	(?___wmul+3)& (0+255),b
 22015  00524C  0E0A               	movlw	10
 22016  00524E  6F62               	movwf	(?___wmul+2)& (0+255),b
 22017  005250  EC97  F00C         	call	___wmul	;wreg free
 22018  005254  C060  F08B         	movff	?___wmul,sprintf@width
 22019  005258  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22020                           
 22021                           ; BSR set to: 0
 22022                           ;doprnt.c: 610: width += *f++ - '0';
 22023  00525C  C078  FFF6         	movff	sprintf@f,tblptrl
 22024  005260  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22025  005264  0008               	tblrd		*
 22026  005266  CFF5 F07E          	movff	tablat,??_sprintf
 22027  00526A  0ED0               	movlw	208
 22028  00526C  257E               	addwf	??_sprintf& (0+255),w,b
 22029  00526E  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22030  005270  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22031  005272  0EFF               	movlw	255
 22032  005274  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22033  005276  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22034  005278  278B               	addwf	sprintf@width& (0+255),f,b
 22035  00527A  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22036  00527C  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22037                           
 22038                           ; BSR set to: 0
 22039                           
 22040                           ; BSR set to: 0
 22041                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22042  00527E  DB36               	call	PL82	;call to abstracted procedure
 22043  005280  EC2E  F00C         	call	_isdigit
 22044  005284  E314               	bnc	l11608
 22045  005286  D7DD               	goto	l11592
 22046  005288                     l11600:
 22047                           
 22048                           ; BSR set to: 0
 22049  005288  C078  FFF6         	movff	sprintf@f,tblptrl
 22050  00528C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22051  005290  0008               	tblrd		*
 22052  005292  50F5               	movf	tablat,w,c
 22053  005294  0A2A               	xorlw	42
 22054  005296  E10B               	bnz	l11608
 22055                           
 22056                           ; BSR set to: 0
 22057                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22058  005298  5188               	movf	sprintf@ap& (0+255),w,b
 22059  00529A  6ED9               	movwf	fsr2l,c
 22060  00529C  6ADA               	clrf	fsr2h,c
 22061  00529E  CFDE F08B          	movff	postinc2,sprintf@width
 22062  0052A2  CFDD F08C          	movff	postdec2,sprintf@width+1
 22063                           
 22064                           ; BSR set to: 0
 22065  0052A6  0E02               	movlw	2
 22066  0052A8  2788               	addwf	sprintf@ap& (0+255),f,b
 22067                           
 22068                           ; BSR set to: 0
 22069                           ;doprnt.c: 615: f++;
 22070  0052AA  4B78               	infsnz	sprintf@f& (0+255),f,b
 22071  0052AC  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22072  0052AE                     l11608:
 22073                           
 22074                           ; BSR set to: 0
 22075                           ;doprnt.c: 617: }
 22076                           ;doprnt.c: 620: if(*f == '.') {
 22077  0052AE  C078  FFF6         	movff	sprintf@f,tblptrl
 22078  0052B2  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22079  0052B6  0008               	tblrd		*
 22080  0052B8  50F5               	movf	tablat,w,c
 22081  0052BA  0A2E               	xorlw	46
 22082  0052BC  E137               	bnz	l1639
 22083                           
 22084                           ; BSR set to: 0
 22085                           ;doprnt.c: 621: flag |= 0x4000;
 22086  0052BE  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22087                           
 22088                           ;doprnt.c: 622: f++;
 22089                           
 22090                           ; BSR set to: 0
 22091                           ;doprnt.c: 624: if(*f == '*') {
 22092  0052C0  DB15               	call	PL82	;call to abstracted procedure
 22093  0052C2  0A2A               	xorlw	42
 22094  0052C4  E10C               	bnz	l1640
 22095                           
 22096                           ; BSR set to: 0
 22097                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22098  0052C6  5188               	movf	sprintf@ap& (0+255),w,b
 22099  0052C8  6ED9               	movwf	fsr2l,c
 22100  0052CA  6ADA               	clrf	fsr2h,c
 22101  0052CC  CFDE F089          	movff	postinc2,sprintf@prec
 22102  0052D0  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22103                           
 22104                           ; BSR set to: 0
 22105  0052D4  0E02               	movlw	2
 22106  0052D6  2788               	addwf	sprintf@ap& (0+255),f,b
 22107                           
 22108                           ; BSR set to: 0
 22109                           ;doprnt.c: 626: f++;
 22110  0052D8  4B78               	infsnz	sprintf@f& (0+255),f,b
 22111  0052DA  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22112                           
 22113                           ;doprnt.c: 627: } else
 22114  0052DC  D088               	goto	l11678
 22115  0052DE                     l1640:
 22116                           
 22117                           ; BSR set to: 0
 22118                           ;doprnt.c: 629: {
 22119                           ;doprnt.c: 630: prec = 0;
 22120  0052DE  6B89               	clrf	sprintf@prec& (0+255),b
 22121  0052E0  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22122                           
 22123                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22124  0052E2  D01A               	goto	l11624
 22125  0052E4                     l11620:
 22126                           
 22127                           ; BSR set to: 0
 22128                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22129  0052E4  C089  F060         	movff	sprintf@prec,?___wmul
 22130  0052E8  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22131  0052EC  6B63               	clrf	(?___wmul+3)& (0+255),b
 22132  0052EE  0E0A               	movlw	10
 22133  0052F0  6F62               	movwf	(?___wmul+2)& (0+255),b
 22134  0052F2  EC97  F00C         	call	___wmul	;wreg free
 22135  0052F6  C078  FFF6         	movff	sprintf@f,tblptrl
 22136  0052FA  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22137  0052FE  0008               	tblrd		*
 22138  005300  50F5               	movf	tablat,w,c
 22139  005302  2760               	addwf	?___wmul& (0+255),f,b
 22140  005304  0E00               	movlw	0
 22141  005306  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22142  005308  0ED0               	movlw	208
 22143  00530A  2560               	addwf	?___wmul& (0+255),w,b
 22144  00530C  6F89               	movwf	sprintf@prec& (0+255),b
 22145  00530E  0EFF               	movlw	255
 22146  005310  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22147  005312  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22148                           
 22149                           ; BSR set to: 0
 22150  005314  4B78               	infsnz	sprintf@f& (0+255),f,b
 22151  005316  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22152  005318                     l11624:
 22153                           
 22154                           ; BSR set to: 0
 22155  005318  C078  FFF6         	movff	sprintf@f,tblptrl
 22156  00531C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22157  005320  0008               	tblrd		*
 22158  005322  50F5               	movf	tablat,w,c
 22159  005324  EC2E  F00C         	call	_isdigit
 22160  005328  E362               	bnc	l11678
 22161  00532A  D7DC               	goto	l11620
 22162  00532C                     l1639:
 22163                           
 22164                           ; BSR set to: 0
 22165                           ;doprnt.c: 635: prec = 0;
 22166  00532C  6B89               	clrf	sprintf@prec& (0+255),b
 22167  00532E  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22168  005330  D05E               	goto	l11678
 22169  005332                     l11626:
 22170                           
 22171                           ; BSR set to: 0
 22172                           ;doprnt.c: 652: flag |= 0x10;
 22173  005332  8992               	bsf	sprintf@flag& (0+255),4,b
 22174                           
 22175                           ;doprnt.c: 653: goto loop;
 22176  005334  D05C               	goto	l11678
 22177  005336                     l11628:
 22178                           
 22179                           ; BSR set to: 0
 22180                           ;doprnt.c: 700: flag |= 0x40;
 22181  005336  8D92               	bsf	sprintf@flag& (0+255),6,b
 22182                           
 22183                           ;doprnt.c: 702: break;
 22184  005338  D06F               	goto	l11680
 22185  00533A                     l11630:
 22186                           
 22187                           ; BSR set to: 0
 22188                           ;doprnt.c: 723: flag |= 0x20;
 22189  00533A  8B92               	bsf	sprintf@flag& (0+255),5,b
 22190  00533C                     l1656:
 22191                           
 22192                           ; BSR set to: 0
 22193                           ;doprnt.c: 730: flag |= 0x80;
 22194  00533C  8F92               	bsf	sprintf@flag& (0+255),7,b
 22195                           
 22196                           ;doprnt.c: 732: break;
 22197  00533E  D06C               	goto	l11680
 22198  005340                     l11632:
 22199                           
 22200                           ; BSR set to: 0
 22201                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22202  005340  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22203  005342  1189               	iorwf	sprintf@prec& (0+255),w,b
 22204  005344  E009               	bz	l11638
 22205                           
 22206                           ; BSR set to: 0
 22207  005346  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22208  005348  5D89               	subwf	sprintf@prec& (0+255),w,b
 22209  00534A  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22210  00534C  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22211  00534E  E204               	bc	l11638
 22212                           
 22213                           ; BSR set to: 0
 22214                           ;doprnt.c: 763: _val._str._len = prec;
 22215  005350  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22216  005354  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22217  005358                     l11638:
 22218                           
 22219                           ; BSR set to: 0
 22220                           ;doprnt.c: 766: if(width > _val._str._len)
 22221  005358  518B               	movf	sprintf@width& (0+255),w,b
 22222  00535A  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22223  00535C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22224  00535E  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22225  005360  E207               	bc	l1659
 22226                           
 22227                           ; BSR set to: 0
 22228                           ;doprnt.c: 767: width -= _val._str._len;
 22229  005362  EE20  F08E         	lfsr	2,sprintf@_val+1
 22230  005366  50DE               	movf	postinc2,w,c
 22231  005368  5F8B               	subwf	sprintf@width& (0+255),f,b
 22232  00536A  50DD               	movf	postdec2,w,c
 22233  00536C  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22234  00536E  D002               	goto	l1660
 22235  005370                     l1659:
 22236                           
 22237                           ; BSR set to: 0
 22238                           ;doprnt.c: 768: else
 22239                           ;doprnt.c: 769: width = 0;
 22240  005370  6B8B               	clrf	sprintf@width& (0+255),b
 22241  005372  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22242  005374                     l1660:
 22243                           
 22244                           ; BSR set to: 0
 22245                           ;doprnt.c: 771: if(!(flag & 0x08))
 22246  005374  A792               	btfss	sprintf@flag& (0+255),3,b
 22247  005376  D004               	goto	l11648
 22248  005378  D015               	goto	l11656
 22249  00537A                     l11644:
 22250                           
 22251                           ; BSR set to: 0
 22252                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22253  00537A  DAB1               	call	PL64	;call to abstracted procedure
 22254                           
 22255                           ; BSR set to: 0
 22256  00537C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22257  00537E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22258  005380                     l11648:
 22259                           
 22260                           ; BSR set to: 0
 22261  005380  078B               	decf	sprintf@width& (0+255),f,b
 22262  005382  DAC2               	call	PL112	;call to abstracted procedure
 22263  005384  B4D8               	btfsc	status,2,c
 22264  005386  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22265  005388  E00D               	bz	l11656
 22266  00538A  D7F7               	goto	l11644
 22267  00538C                     l11650:
 22268                           
 22269                           ; BSR set to: 0
 22270                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22271  00538C  518D               	movf	sprintf@_val& (0+255),w,b
 22272  00538E  6ED9               	movwf	fsr2l,c
 22273  005390  6ADA               	clrf	fsr2h,c
 22274  005392  C076  FFE1         	movff	sprintf@sp,fsr1l
 22275  005396  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22276  00539A  CFDF FFE7          	movff	indf2,indf1
 22277                           
 22278                           ; BSR set to: 0
 22279  00539E  2B8D               	incf	sprintf@_val& (0+255),f,b
 22280                           
 22281                           ; BSR set to: 0
 22282  0053A0  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22283  0053A2  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22284  0053A4                     l11656:
 22285                           
 22286                           ; BSR set to: 0
 22287  0053A4  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22288  0053A6  A0D8               	btfss	status,0,c
 22289  0053A8  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22290  0053AA  0100               	movlb	0	; () banked
 22291  0053AC  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22292  0053AE  B4D8               	btfsc	status,2,c
 22293  0053B0  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22294  0053B2  E1EC               	bnz	l11650
 22295                           
 22296                           ; BSR set to: 0
 22297                           ;doprnt.c: 779: if(flag & 0x08)
 22298  0053B4  B792               	btfsc	sprintf@flag& (0+255),3,b
 22299  0053B6  D004               	goto	l11664
 22300  0053B8  D23B               	goto	l11902
 22301  0053BA                     l11660:
 22302                           
 22303                           ; BSR set to: 0
 22304                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22305  0053BA  DA91               	call	PL64	;call to abstracted procedure
 22306                           
 22307                           ; BSR set to: 0
 22308  0053BC  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22309  0053BE  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22310  0053C0                     l11664:
 22311                           
 22312                           ; BSR set to: 0
 22313  0053C0  078B               	decf	sprintf@width& (0+255),f,b
 22314  0053C2  DAA2               	call	PL112	;call to abstracted procedure
 22315  0053C4  B4D8               	btfsc	status,2,c
 22316  0053C6  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22317  0053C8  E101 D232          	bz	l11902
 22318  0053CC  D7F6               	goto	l11660
 22319  0053CE                     l11666:
 22320                           
 22321                           ; BSR set to: 0
 22322                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22323  0053CE  5188               	movf	sprintf@ap& (0+255),w,b
 22324  0053D0  6ED9               	movwf	fsr2l,c
 22325  0053D2  6ADA               	clrf	fsr2h,c
 22326  0053D4  50DF               	movf	indf2,w,c
 22327  0053D6  6F91               	movwf	sprintf@c& (0+255),b
 22328                           
 22329                           ; BSR set to: 0
 22330  0053D8  0E02               	movlw	2
 22331  0053DA  2788               	addwf	sprintf@ap& (0+255),f,b
 22332  0053DC                     l11670:
 22333                           
 22334                           ; BSR set to: 0
 22335                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22336  0053DC  0E91               	movlw	low sprintf@c
 22337  0053DE  6F8D               	movwf	sprintf@_val& (0+255),b
 22338                           
 22339                           ; BSR set to: 0
 22340                           ;doprnt.c: 815: _val._str._len = 1;
 22341  0053E0  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22342  0053E2  0E01               	movlw	1
 22343  0053E4  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22344                           
 22345                           ;doprnt.c: 816: goto dostring;
 22346  0053E6  D7AC               	goto	l11632
 22347  0053E8                     l11674:
 22348                           
 22349                           ; BSR set to: 0
 22350                           ;doprnt.c: 827: flag |= 0xC0;
 22351  0053E8  0EC0               	movlw	192
 22352  0053EA  1392               	iorwf	sprintf@flag& (0+255),f,b
 22353                           
 22354                           ;doprnt.c: 828: break;
 22355  0053EC  D015               	goto	l11680
 22356  0053EE                     l11678:
 22357                           
 22358                           ; BSR set to: 0
 22359  0053EE  DA6C               	call	PL62	;call to abstracted procedure
 22360  0053F0  5191               	movf	sprintf@c& (0+255),w,b
 22361                           
 22362                           ; Switch size 1, requested type "space"
 22363                           ; Number of cases is 9, Range of values is 0 to 120
 22364                           ; switch strategies available:
 22365                           ; Name         Instructions Cycles
 22366                           ; simple_byte           28    15 (average)
 22367                           ;	Chosen strategy is simple_byte
 22368  0053F2  E101 D220          	bz	l11904
 22369  0053F6  0A58               	xorlw	88	; case 88
 22370  0053F8  E0A0               	bz	l11630
 22371  0053FA  0A3B               	xorlw	59	; case 99
 22372  0053FC  E0E8               	bz	l11666
 22373  0053FE  0A07               	xorlw	7	; case 100
 22374  005400  E00B               	bz	l11680
 22375  005402  0A0D               	xorlw	13	; case 105
 22376  005404  E009               	bz	l11680
 22377  005406  0A05               	xorlw	5	; case 108
 22378  005408  E094               	bz	l11626
 22379  00540A  0A03               	xorlw	3	; case 111
 22380  00540C  E094               	bz	l11628
 22381  00540E  0A1A               	xorlw	26	; case 117
 22382  005410  E0EB               	bz	l11674
 22383  005412  0A0D               	xorlw	13	; case 120
 22384  005414  E093               	bz	l1656
 22385  005416  D7E2               	goto	l11670
 22386  005418                     l11680:
 22387                           
 22388                           ; BSR set to: 0
 22389                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22390  005418  5192               	movf	sprintf@flag& (0+255),w,b
 22391  00541A  0BC0               	andlw	192
 22392  00541C  E120               	bnz	l1675
 22393                           
 22394                           ; BSR set to: 0
 22395                           ;doprnt.c: 1260: {
 22396                           ;doprnt.c: 1262: if(flag & 0x10)
 22397  00541E  A992               	btfss	sprintf@flag& (0+255),4,b
 22398  005420  D003               	goto	l11688
 22399                           
 22400                           ; BSR set to: 0
 22401                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22402  005422  5188               	movf	sprintf@ap& (0+255),w,b
 22403                           
 22404                           ; BSR set to: 0
 22405  005424  DA46               	call	PL56	;call to abstracted procedure
 22406  005426  D00D               	goto	L34
 22407  005428                     l11688:
 22408                           
 22409                           ; BSR set to: 0
 22410                           ;doprnt.c: 1264: else
 22411                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22412  005428  5188               	movf	sprintf@ap& (0+255),w,b
 22413  00542A  6ED9               	movwf	fsr2l,c
 22414  00542C  6ADA               	clrf	fsr2h,c
 22415  00542E  CFDE F08D          	movff	postinc2,sprintf@_val
 22416  005432  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22417  005436  0E00               	movlw	0
 22418  005438  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22419  00543A  0EFF               	movlw	-1
 22420  00543C  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22421  00543E  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22422                           
 22423                           ; BSR set to: 0
 22424  005440  0E02               	movlw	2
 22425  005442                     L34:
 22426  005442  2788               	addwf	sprintf@ap& (0+255),f,b
 22427                           
 22428                           ; BSR set to: 0
 22429                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22430  005444  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22431  005446  D01F               	goto	l11706
 22432                           
 22433                           ; BSR set to: 0
 22434                           ;doprnt.c: 1269: flag |= 0x03;
 22435  005448  0E03               	movlw	3
 22436  00544A  1392               	iorwf	sprintf@flag& (0+255),f,b
 22437                           
 22438                           ; BSR set to: 0
 22439                           ;doprnt.c: 1270: _val._val = -_val._val;
 22440  00544C  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22441  00544E  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22442  005450  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22443  005452  6D8D               	negf	sprintf@_val& (0+255),b
 22444  005454  0E00               	movlw	0
 22445  005456  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22446  005458  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22447  00545A  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22448  00545C  D014               	goto	l11706
 22449  00545E                     l1675:
 22450                           
 22451                           ; BSR set to: 0
 22452                           ;doprnt.c: 1275: else
 22453                           ;doprnt.c: 1280: {
 22454                           ;doprnt.c: 1288: if(flag & 0x10)
 22455  00545E  A992               	btfss	sprintf@flag& (0+255),4,b
 22456  005460  D003               	goto	l11702
 22457                           
 22458                           ; BSR set to: 0
 22459                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22460  005462  5188               	movf	sprintf@ap& (0+255),w,b
 22461                           
 22462                           ; BSR set to: 0
 22463  005464  DA26               	call	PL56	;call to abstracted procedure
 22464  005466  D00E               	goto	L35
 22465  005468                     l11702:
 22466                           
 22467                           ; BSR set to: 0
 22468                           ;doprnt.c: 1290: else
 22469                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22470  005468  5188               	movf	sprintf@ap& (0+255),w,b
 22471  00546A  6ED9               	movwf	fsr2l,c
 22472  00546C  6ADA               	clrf	fsr2h,c
 22473  00546E  CFDE F07E          	movff	postinc2,??_sprintf
 22474  005472  CFDD F07F          	movff	postdec2,??_sprintf+1
 22475  005476  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22476  00547A  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22477  00547E  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22478  005480  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22479                           
 22480                           ; BSR set to: 0
 22481  005482  0E02               	movlw	2
 22482  005484                     L35:
 22483  005484  2788               	addwf	sprintf@ap& (0+255),f,b
 22484  005486                     l11706:
 22485                           
 22486                           ; BSR set to: 0
 22487                           ;doprnt.c: 1294: }
 22488                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22489  005486  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22490  005488  1189               	iorwf	sprintf@prec& (0+255),w,b
 22491  00548A  E15C               	bnz	l11756
 22492                           
 22493                           ; BSR set to: 0
 22494  00548C  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22495  00548E  118D               	iorwf	sprintf@_val& (0+255),w,b
 22496  005490  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22497  005492  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22498  005494  E157               	bnz	l11756
 22499                           
 22500                           ; BSR set to: 0
 22501                           ;doprnt.c: 1298: prec++;
 22502  005496  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22503  005498  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22504  00549A  D054               	goto	l11756
 22505  00549C                     l11712:
 22506                           
 22507                           ; BSR set to: 0
 22508                           ;doprnt.c: 1309: case 0xC0:
 22509                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22510  00549C  0E01               	movlw	1
 22511  00549E  6F91               	movwf	sprintf@c& (0+255),b
 22512  0054A0                     l11714:
 22513                           
 22514                           ; BSR set to: 0
 22515  0054A0  5191               	movf	sprintf@c& (0+255),w,b
 22516  0054A2  0A0A               	xorlw	10
 22517  0054A4  E058               	bz	l11758
 22518                           
 22519                           ; BSR set to: 0
 22520                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22521  0054A6  5191               	movf	sprintf@c& (0+255),w,b
 22522  0054A8  0D04               	mullw	4
 22523  0054AA  0EE4               	movlw	low _dpowers
 22524  0054AC  24F3               	addwf	prodl,w,c
 22525  0054AE  6EF6               	movwf	tblptrl,c
 22526  0054B0  0E6C               	movlw	high _dpowers
 22527  0054B2  20F4               	addwfc	prodh,w,c
 22528  0054B4  6EF7               	movwf	tblptrh,c
 22529  0054B6  0009               	tblrd		*+
 22530  0054B8  50F5               	movf	tablat,w,c
 22531  0054BA  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22532  0054BC  0009               	tblrd		*+
 22533  0054BE  50F5               	movf	tablat,w,c
 22534  0054C0  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22535  0054C2  0009               	tblrd		*+
 22536  0054C4  50F5               	movf	tablat,w,c
 22537  0054C6  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22538  0054C8  0009               	tblrd		*+
 22539  0054CA  50F5               	movf	tablat,w,c
 22540  0054CC  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22541  0054CE  E343               	bnc	l11758
 22542                           
 22543                           ; BSR set to: 0
 22544  0054D0  2B91               	incf	sprintf@c& (0+255),f,b
 22545  0054D2  D7E6               	goto	l11714
 22546  0054D4                     l11726:
 22547                           
 22548                           ; BSR set to: 0
 22549                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22550  0054D4  0E01               	movlw	1
 22551  0054D6  6F91               	movwf	sprintf@c& (0+255),b
 22552  0054D8                     l11728:
 22553                           
 22554                           ; BSR set to: 0
 22555  0054D8  5191               	movf	sprintf@c& (0+255),w,b
 22556  0054DA  0A08               	xorlw	8
 22557  0054DC  E03C               	bz	l11758
 22558                           
 22559                           ; BSR set to: 0
 22560                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22561  0054DE  5191               	movf	sprintf@c& (0+255),w,b
 22562  0054E0  0D04               	mullw	4
 22563  0054E2  0E0C               	movlw	low _hexpowers
 22564  0054E4  24F3               	addwf	prodl,w,c
 22565  0054E6  6EF6               	movwf	tblptrl,c
 22566  0054E8  0E6D               	movlw	high _hexpowers
 22567  0054EA  20F4               	addwfc	prodh,w,c
 22568  0054EC  6EF7               	movwf	tblptrh,c
 22569  0054EE  0009               	tblrd		*+
 22570  0054F0  50F5               	movf	tablat,w,c
 22571  0054F2  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22572  0054F4  0009               	tblrd		*+
 22573  0054F6  50F5               	movf	tablat,w,c
 22574  0054F8  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22575  0054FA  0009               	tblrd		*+
 22576  0054FC  50F5               	movf	tablat,w,c
 22577  0054FE  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22578  005500  0009               	tblrd		*+
 22579  005502  50F5               	movf	tablat,w,c
 22580  005504  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22581  005506  E327               	bnc	l11758
 22582                           
 22583                           ; BSR set to: 0
 22584  005508  2B91               	incf	sprintf@c& (0+255),f,b
 22585  00550A  D7E6               	goto	l11728
 22586  00550C                     l11740:
 22587                           
 22588                           ; BSR set to: 0
 22589                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22590  00550C  0E01               	movlw	1
 22591  00550E  6F91               	movwf	sprintf@c& (0+255),b
 22592  005510                     l11742:
 22593                           
 22594                           ; BSR set to: 0
 22595  005510  5191               	movf	sprintf@c& (0+255),w,b
 22596  005512  0A0C               	xorlw	12
 22597  005514  E020               	bz	l11758
 22598                           
 22599                           ; BSR set to: 0
 22600                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22601  005516  5191               	movf	sprintf@c& (0+255),w,b
 22602  005518  0D04               	mullw	4
 22603  00551A  0EB4               	movlw	low _octpowers
 22604  00551C  24F3               	addwf	prodl,w,c
 22605  00551E  6EF6               	movwf	tblptrl,c
 22606  005520  0E6C               	movlw	high _octpowers
 22607  005522  20F4               	addwfc	prodh,w,c
 22608  005524  6EF7               	movwf	tblptrh,c
 22609  005526  0009               	tblrd		*+
 22610  005528  50F5               	movf	tablat,w,c
 22611  00552A  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22612  00552C  0009               	tblrd		*+
 22613  00552E  50F5               	movf	tablat,w,c
 22614  005530  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22615  005532  0009               	tblrd		*+
 22616  005534  50F5               	movf	tablat,w,c
 22617  005536  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22618  005538  0009               	tblrd		*+
 22619  00553A  50F5               	movf	tablat,w,c
 22620  00553C  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22621  00553E  E30B               	bnc	l11758
 22622                           
 22623                           ; BSR set to: 0
 22624  005540  2B91               	incf	sprintf@c& (0+255),f,b
 22625  005542  D7E6               	goto	l11742
 22626  005544                     l11756:
 22627                           
 22628                           ; BSR set to: 0
 22629  005544  5192               	movf	sprintf@flag& (0+255),w,b
 22630  005546  0BC0               	andlw	192
 22631                           
 22632                           ; Switch size 1, requested type "space"
 22633                           ; Number of cases is 4, Range of values is 0 to 192
 22634                           ; switch strategies available:
 22635                           ; Name         Instructions Cycles
 22636                           ; simple_byte           13     7 (average)
 22637                           ;	Chosen strategy is simple_byte
 22638  005548  E0A9               	bz	l11712
 22639  00554A  0A40               	xorlw	64	; case 64
 22640  00554C  E0DF               	bz	l11740
 22641  00554E  0AC0               	xorlw	192	; case 128
 22642  005550  E0C1               	bz	l11726
 22643  005552  0A40               	xorlw	64	; case 192
 22644  005554  E0A3               	bz	l11712
 22645  005556                     l11758:
 22646                           
 22647                           ; BSR set to: 0
 22648                           ;doprnt.c: 1346: if(c < prec)
 22649  005556  0E80               	movlw	128
 22650  005558  BF91               	btfsc	sprintf@c& (0+255),7,b
 22651  00555A  0E7F               	movlw	127
 22652  00555C  6F7E               	movwf	??_sprintf& (0+255),b
 22653  00555E  5189               	movf	sprintf@prec& (0+255),w,b
 22654  005560  5D91               	subwf	sprintf@c& (0+255),w,b
 22655  005562  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22656  005564  0A80               	xorlw	128
 22657  005566  597E               	subwfb	??_sprintf& (0+255),w,b
 22658  005568  E203               	bc	l11762
 22659                           
 22660                           ; BSR set to: 0
 22661                           ;doprnt.c: 1347: c = prec;
 22662  00556A  C089  F091         	movff	sprintf@prec,sprintf@c
 22663  00556E  D00F               	goto	l11766
 22664  005570                     l11762:
 22665                           
 22666                           ; BSR set to: 0
 22667                           ;doprnt.c: 1348: else if(prec < c)
 22668  005570  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22669  005572  0A80               	xorlw	128
 22670  005574  6F7E               	movwf	??_sprintf& (0+255),b
 22671  005576  5191               	movf	sprintf@c& (0+255),w,b
 22672  005578  5D89               	subwf	sprintf@prec& (0+255),w,b
 22673  00557A  0E80               	movlw	128
 22674  00557C  BF91               	btfsc	sprintf@c& (0+255),7,b
 22675  00557E  0E7F               	movlw	127
 22676  005580  597E               	subwfb	??_sprintf& (0+255),w,b
 22677  005582  E205               	bc	l11766
 22678                           
 22679                           ; BSR set to: 0
 22680                           ;doprnt.c: 1349: prec = c;
 22681  005584  5191               	movf	sprintf@c& (0+255),w,b
 22682  005586  6F89               	movwf	sprintf@prec& (0+255),b
 22683  005588  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22684  00558A  BF89               	btfsc	sprintf@prec& (0+255),7,b
 22685  00558C  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22686  00558E                     l11766:
 22687                           
 22688                           ; BSR set to: 0
 22689                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22690  00558E  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22691  005590  118B               	iorwf	sprintf@width& (0+255),w,b
 22692  005592  E006               	bz	l11772
 22693                           
 22694                           ; BSR set to: 0
 22695  005594  5192               	movf	sprintf@flag& (0+255),w,b
 22696  005596  0B03               	andlw	3
 22697  005598  E003               	bz	l11772
 22698                           
 22699                           ; BSR set to: 0
 22700                           ;doprnt.c: 1353: width--;
 22701  00559A  078B               	decf	sprintf@width& (0+255),f,b
 22702  00559C  A0D8               	btfss	status,0,c
 22703  00559E  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22704  0055A0                     l11772:
 22705                           
 22706                           ; BSR set to: 0
 22707                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22708  0055A0  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 22709  0055A2  D010               	goto	l11778
 22710                           
 22711                           ; BSR set to: 0
 22712                           ;doprnt.c: 1356: if(width > prec)
 22713  0055A4  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22714  0055A6  0A80               	xorlw	128
 22715  0055A8  6F7E               	movwf	??_sprintf& (0+255),b
 22716  0055AA  518B               	movf	sprintf@width& (0+255),w,b
 22717  0055AC  5D89               	subwf	sprintf@prec& (0+255),w,b
 22718  0055AE  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22719  0055B0  0A80               	xorlw	128
 22720  0055B2  597E               	subwfb	??_sprintf& (0+255),w,b
 22721  0055B4  E205               	bc	l1703
 22722                           
 22723                           ; BSR set to: 0
 22724                           ;doprnt.c: 1357: width -= prec;
 22725  0055B6  5189               	movf	sprintf@prec& (0+255),w,b
 22726  0055B8  5F8B               	subwf	sprintf@width& (0+255),f,b
 22727  0055BA  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22728  0055BC  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22729  0055BE  D002               	goto	l11778
 22730  0055C0                     l1703:
 22731                           
 22732                           ; BSR set to: 0
 22733                           ;doprnt.c: 1358: else
 22734                           ;doprnt.c: 1359: width = 0;
 22735  0055C0  6B8B               	clrf	sprintf@width& (0+255),b
 22736  0055C2  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22737  0055C4                     l11778:
 22738                           
 22739                           ; BSR set to: 0
 22740                           ;doprnt.c: 1360: }
 22741                           ;doprnt.c: 1364: if((flag & (
 22742                           ;doprnt.c: 1366: 0x04|
 22743                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22744  0055C4  0EC4               	movlw	196
 22745  0055C6  D94D               	call	PL20	;call to abstracted procedure
 22746  0055C8  0E40               	movlw	64
 22747  0055CA  B4D8               	btfsc	status,2,c
 22748  0055CC  197E               	xorwf	??_sprintf& (0+255),w,b
 22749  0055CE  E107               	bnz	l11784
 22750                           
 22751                           ; BSR set to: 0
 22752                           ;doprnt.c: 1369: if(width)
 22753  0055D0  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22754  0055D2  118B               	iorwf	sprintf@width& (0+255),w,b
 22755  0055D4  E018               	bz	l11790
 22756                           
 22757                           ; BSR set to: 0
 22758                           ;doprnt.c: 1370: width--;
 22759  0055D6  078B               	decf	sprintf@width& (0+255),f,b
 22760  0055D8  A0D8               	btfss	status,0,c
 22761  0055DA  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22762  0055DC  D014               	goto	l11790
 22763  0055DE                     l11784:
 22764                           
 22765                           ; BSR set to: 0
 22766                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22767  0055DE  0EC0               	movlw	192
 22768  0055E0  D940               	call	PL20	;call to abstracted procedure
 22769  0055E2  0E80               	movlw	128
 22770  0055E4  B4D8               	btfsc	status,2,c
 22771  0055E6  197E               	xorwf	??_sprintf& (0+255),w,b
 22772  0055E8  E10E               	bnz	l11790
 22773                           
 22774                           ; BSR set to: 0
 22775                           ;doprnt.c: 1379: if(width > 2)
 22776  0055EA  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22777  0055EC  0A80               	xorlw	128
 22778  0055EE  0F80               	addlw	-128
 22779  0055F0  0E03               	movlw	3
 22780  0055F2  B4D8               	btfsc	status,2,c
 22781  0055F4  5D8B               	subwf	sprintf@width& (0+255),w,b
 22782  0055F6  E305               	bnc	l1709
 22783                           
 22784                           ; BSR set to: 0
 22785                           ;doprnt.c: 1380: width -= 2;
 22786  0055F8  0EFE               	movlw	254
 22787  0055FA  278B               	addwf	sprintf@width& (0+255),f,b
 22788  0055FC  0EFF               	movlw	255
 22789  0055FE  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22790  005600  D002               	goto	l11790
 22791  005602                     l1709:
 22792                           
 22793                           ; BSR set to: 0
 22794                           ;doprnt.c: 1381: else
 22795                           ;doprnt.c: 1382: width = 0;
 22796  005602  6B8B               	clrf	sprintf@width& (0+255),b
 22797  005604  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22798  005606                     l11790:
 22799                           
 22800                           ; BSR set to: 0
 22801                           ;doprnt.c: 1383: }
 22802                           ;doprnt.c: 1388: if(width > c)
 22803  005606  0E80               	movlw	128
 22804  005608  BF91               	btfsc	sprintf@c& (0+255),7,b
 22805  00560A  0E7F               	movlw	127
 22806  00560C  6F7E               	movwf	??_sprintf& (0+255),b
 22807  00560E  518B               	movf	sprintf@width& (0+255),w,b
 22808  005610  5D91               	subwf	sprintf@c& (0+255),w,b
 22809  005612  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22810  005614  0A80               	xorlw	128
 22811  005616  597E               	subwfb	??_sprintf& (0+255),w,b
 22812  005618  E207               	bc	l1711
 22813                           
 22814                           ; BSR set to: 0
 22815                           ;doprnt.c: 1389: width -= c;
 22816  00561A  5191               	movf	sprintf@c& (0+255),w,b
 22817  00561C  5F8B               	subwf	sprintf@width& (0+255),f,b
 22818  00561E  0E00               	movlw	0
 22819  005620  BF91               	btfsc	sprintf@c& (0+255),7,b
 22820  005622  0EFF               	movlw	255
 22821  005624  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22822  005626  D002               	goto	l1712
 22823  005628                     l1711:
 22824                           
 22825                           ; BSR set to: 0
 22826                           ;doprnt.c: 1390: else
 22827                           ;doprnt.c: 1391: width = 0;
 22828  005628  6B8B               	clrf	sprintf@width& (0+255),b
 22829  00562A  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22830  00562C                     l1712:
 22831                           
 22832                           ; BSR set to: 0
 22833                           ;doprnt.c: 1394: if(flag & 0x04) {
 22834  00562C  A592               	btfss	sprintf@flag& (0+255),2,b
 22835  00562E  D03C               	goto	l11828
 22836                           
 22837                           ; BSR set to: 0
 22838                           ;doprnt.c: 1399: if(flag & 0x03)
 22839  005630  5192               	movf	sprintf@flag& (0+255),w,b
 22840  005632  0B03               	andlw	3
 22841  005634  E009               	bz	l1714
 22842                           
 22843                           ; BSR set to: 0
 22844                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22845  005636  C076  FFD9         	movff	sprintf@sp,fsr2l
 22846  00563A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22847  00563E  0E2D               	movlw	45
 22848  005640  6EDF               	movwf	indf2,c
 22849  005642                     l11798:
 22850                           
 22851                           ; BSR set to: 0
 22852  005642  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22853  005644  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22854  005646  D022               	goto	l11820
 22855  005648                     l1714:
 22856                           
 22857                           ; BSR set to: 0
 22858                           ;doprnt.c: 1403: else
 22859                           ;doprnt.c: 1406: if(flag & 0x01)
 22860  005648  A192               	btfss	sprintf@flag& (0+255),0,b
 22861  00564A  D006               	goto	l11804
 22862                           
 22863                           ; BSR set to: 0
 22864                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22865  00564C  C076  FFD9         	movff	sprintf@sp,fsr2l
 22866  005650  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22867  005654  0E20               	movlw	32
 22868  005656  D7F4               	goto	L36
 22869  005658                     l11804:
 22870                           
 22871                           ; BSR set to: 0
 22872                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22873  005658  0EC0               	movlw	192
 22874  00565A  D903               	call	PL20	;call to abstracted procedure
 22875  00565C  0E80               	movlw	128
 22876  00565E  B4D8               	btfsc	status,2,c
 22877  005660  197E               	xorwf	??_sprintf& (0+255),w,b
 22878  005662  E114               	bnz	l11820
 22879                           
 22880                           ; BSR set to: 0
 22881                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22882  005664  C076  FFD9         	movff	sprintf@sp,fsr2l
 22883  005668  D94A               	call	PL98	;call to abstracted procedure
 22884                           
 22885                           ; BSR set to: 0
 22886  00566A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22887  00566C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22888                           
 22889                           ; BSR set to: 0
 22890                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22891  00566E  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22892  005670  D003               	goto	l11814
 22893                           
 22894                           ; BSR set to: 0
 22895  005672  6B83               	clrf	(_sprintf$2137+1)& (0+255),b
 22896  005674  0E78               	movlw	120
 22897  005676  D002               	goto	L37
 22898  005678                     l11814:
 22899                           
 22900                           ; BSR set to: 0
 22901  005678  6B83               	clrf	(_sprintf$2137+1)& (0+255),b
 22902  00567A  0E58               	movlw	88
 22903  00567C                     L37:
 22904  00567C  6F82               	movwf	_sprintf$2137& (0+255),b
 22905                           
 22906                           ; BSR set to: 0
 22907  00567E  C076  FFD9         	movff	sprintf@sp,fsr2l
 22908  005682  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22909  005686  C082  FFDF         	movff	_sprintf$2137,indf2
 22910  00568A  D7DB               	goto	l11798
 22911  00568C                     l11820:
 22912                           
 22913                           ; BSR set to: 0
 22914                           ;doprnt.c: 1419: }
 22915                           ;doprnt.c: 1422: if(width)
 22916  00568C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22917  00568E  118B               	iorwf	sprintf@width& (0+255),w,b
 22918  005690  E101 D0B9          	bz	l11892
 22919                           
 22920                           ; BSR set to: 0
 22921                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22922  005694  C076  FFD9         	movff	sprintf@sp,fsr2l
 22923  005698  D932               	call	PL98	;call to abstracted procedure
 22924                           
 22925                           ; BSR set to: 0
 22926  00569A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22927  00569C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22928                           
 22929                           ; BSR set to: 0
 22930                           ;doprnt.c: 1425: while(--width);
 22931  00569E  078B               	decf	sprintf@width& (0+255),f,b
 22932  0056A0  A0D8               	btfss	status,0,c
 22933  0056A2  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22934  0056A4  0100               	movlb	0	; () banked
 22935  0056A6  D7F2               	goto	l11820
 22936  0056A8                     l11828:
 22937                           
 22938                           ; BSR set to: 0
 22939                           ;doprnt.c: 1429: {
 22940                           ;doprnt.c: 1431: if(width
 22941                           ;doprnt.c: 1433: && !(flag & 0x08)
 22942                           ;doprnt.c: 1435: )
 22943  0056A8  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22944  0056AA  118B               	iorwf	sprintf@width& (0+255),w,b
 22945  0056AC  A4D8               	btfss	status,2,c
 22946                           
 22947                           ; BSR set to: 0
 22948  0056AE  B792               	btfsc	sprintf@flag& (0+255),3,b
 22949  0056B0  D004               	goto	l11838
 22950  0056B2                     l11832:
 22951                           
 22952                           ; BSR set to: 0
 22953                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 22954  0056B2  C076  FFD9         	movff	sprintf@sp,fsr2l
 22955                           
 22956                           ; BSR set to: 0
 22957                           
 22958                           ; BSR set to: 0
 22959                           ;doprnt.c: 1438: while(--width);
 22960  0056B6  D8F0               	call	PL46	;call to abstracted procedure
 22961  0056B8  E1FC               	bnz	l11832
 22962  0056BA                     l11838:
 22963                           
 22964                           ; BSR set to: 0
 22965                           ;doprnt.c: 1445: if(flag & 0x03)
 22966  0056BA  5192               	movf	sprintf@flag& (0+255),w,b
 22967  0056BC  0B03               	andlw	3
 22968  0056BE  E009               	bz	l1730
 22969                           
 22970                           ; BSR set to: 0
 22971                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 22972  0056C0  C076  FFD9         	movff	sprintf@sp,fsr2l
 22973  0056C4  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22974  0056C8  0E2D               	movlw	45
 22975  0056CA  6EDF               	movwf	indf2,c
 22976                           
 22977                           ; BSR set to: 0
 22978  0056CC  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22979  0056CE  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22980  0056D0  D008               	goto	l11848
 22981  0056D2                     l1730:
 22982                           
 22983                           ; BSR set to: 0
 22984                           ;doprnt.c: 1450: else if(flag & 0x01)
 22985  0056D2  A192               	btfss	sprintf@flag& (0+255),0,b
 22986  0056D4  D006               	goto	l11848
 22987                           
 22988                           ; BSR set to: 0
 22989                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 22990  0056D6  C076  FFD9         	movff	sprintf@sp,fsr2l
 22991  0056DA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22992  0056DE  0E20               	movlw	32
 22993  0056E0  D7F4               	goto	L38
 22994  0056E2                     l11848:
 22995                           
 22996                           ; BSR set to: 0
 22997                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 22998  0056E2  0EC0               	movlw	192
 22999  0056E4  D8BE               	call	PL20	;call to abstracted procedure
 23000  0056E6  0E40               	movlw	64
 23001  0056E8  B4D8               	btfsc	status,2,c
 23002  0056EA  197E               	xorwf	??_sprintf& (0+255),w,b
 23003  0056EC  E106               	bnz	l11854
 23004                           
 23005                           ; BSR set to: 0
 23006                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23007  0056EE  C076  FFD9         	movff	sprintf@sp,fsr2l
 23008  0056F2  D905               	call	PL98	;call to abstracted procedure
 23009  0056F4                     l11852:
 23010                           
 23011                           ; BSR set to: 0
 23012  0056F4  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23013  0056F6  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23014  0056F8  D086               	goto	l11892
 23015  0056FA                     l11854:
 23016                           
 23017                           ; BSR set to: 0
 23018                           ;doprnt.c: 1457: else
 23019                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23020  0056FA  0EC0               	movlw	192
 23021  0056FC  D8B2               	call	PL20	;call to abstracted procedure
 23022  0056FE  0E80               	movlw	128
 23023  005700  B4D8               	btfsc	status,2,c
 23024  005702  197E               	xorwf	??_sprintf& (0+255),w,b
 23025  005704  E001 D07F          	bnz	l11892
 23026                           
 23027                           ; BSR set to: 0
 23028                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23029  005708  C076  FFD9         	movff	sprintf@sp,fsr2l
 23030  00570C  D8F8               	call	PL98	;call to abstracted procedure
 23031                           
 23032                           ; BSR set to: 0
 23033  00570E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23034  005710  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23035                           
 23036                           ; BSR set to: 0
 23037                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23038  005712  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23039  005714  D003               	goto	l11864
 23040                           
 23041                           ; BSR set to: 0
 23042  005716  6B85               	clrf	(_sprintf$2138+1)& (0+255),b
 23043  005718  0E78               	movlw	120
 23044  00571A  D002               	goto	L39
 23045  00571C                     l11864:
 23046                           
 23047                           ; BSR set to: 0
 23048  00571C  6B85               	clrf	(_sprintf$2138+1)& (0+255),b
 23049  00571E  0E58               	movlw	88
 23050  005720                     L39:
 23051  005720  6F84               	movwf	_sprintf$2138& (0+255),b
 23052                           
 23053                           ; BSR set to: 0
 23054  005722  C076  FFD9         	movff	sprintf@sp,fsr2l
 23055  005726  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23056  00572A  C084  FFDF         	movff	_sprintf$2138,indf2
 23057  00572E  D7E2               	goto	l11852
 23058  005730                     l11870:
 23059                           
 23060                           ; BSR set to: 0
 23061                           ;doprnt.c: 1493: case 0xC0:
 23062                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23063  005730  C089  F07E         	movff	sprintf@prec,??_sprintf
 23064  005734  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23065  005738  90D8               	bcf	status,0,c
 23066  00573A  377E               	rlcf	??_sprintf& (0+255),f,b
 23067  00573C  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23068  00573E  90D8               	bcf	status,0,c
 23069  005740  377E               	rlcf	??_sprintf& (0+255),f,b
 23070  005742  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23071  005744  0EE4               	movlw	low _dpowers
 23072  005746  257E               	addwf	??_sprintf& (0+255),w,b
 23073  005748  6EF6               	movwf	tblptrl,c
 23074  00574A  0E6C               	movlw	high _dpowers
 23075  00574C  D87B               	call	PL14	;call to abstracted procedure
 23076  00574E  C08D  F060         	movff	sprintf@_val,?___lldiv
 23077  005752  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23078  005756  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23079  00575A  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23080  00575E  ECC2  F010         	call	___lldiv	;wreg free
 23081  005762  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23082  005766  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23083  00576A  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23084  00576E  C060  F06D         	movff	?___lldiv,?___llmod
 23085  005772  0E0A               	movlw	10
 23086  005774  6F71               	movwf	(?___llmod+4)& (0+255),b
 23087  005776  0E00               	movlw	0
 23088  005778  6B72               	clrf	(?___llmod+5)& (0+255),b
 23089  00577A  6B73               	clrf	(?___llmod+6)& (0+255),b
 23090  00577C  6B74               	clrf	(?___llmod+7)& (0+255),b
 23091  00577E  EC51  F00F         	call	___llmod	;wreg free
 23092  005782  516D               	movf	?___llmod& (0+255),w,b
 23093  005784  D02D               	goto	L40
 23094  005786                     l11872:
 23095                           
 23096                           ; BSR set to: 0
 23097                           ;doprnt.c: 1506: {
 23098                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23099  005786  D875               	call	PL24	;call to abstracted procedure
 23100  005788  0E0C               	movlw	low _hexpowers
 23101  00578A  257E               	addwf	??_sprintf& (0+255),w,b
 23102  00578C  6EF6               	movwf	tblptrl,c
 23103  00578E  0E6D               	movlw	high _hexpowers
 23104  005790  D859               	call	PL14	;call to abstracted procedure
 23105  005792  ECC2  F010         	call	___lldiv	;wreg free
 23106  005796  5160               	movf	?___lldiv& (0+255),w,b
 23107  005798  0B0F               	andlw	15
 23108  00579A  6F81               	movwf	sprintf@idx& (0+255),b
 23109                           
 23110                           ; BSR set to: 0
 23111                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23112  00579C  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23113  00579E  D004               	goto	l11878
 23114                           
 23115                           ; BSR set to: 0
 23116  0057A0  0E7B               	movlw	high STR_257
 23117  0057A2  6F87               	movwf	(_sprintf$2144+1)& (0+255),b
 23118  0057A4  0E2C               	movlw	low STR_257
 23119  0057A6  D003               	goto	L41
 23120  0057A8                     l11878:
 23121                           
 23122                           ; BSR set to: 0
 23123  0057A8  0E7B               	movlw	high STR_256
 23124  0057AA  6F87               	movwf	(_sprintf$2144+1)& (0+255),b
 23125  0057AC  0E1B               	movlw	low STR_256
 23126  0057AE                     L41:
 23127  0057AE  6F86               	movwf	_sprintf$2144& (0+255),b
 23128                           
 23129                           ; BSR set to: 0
 23130  0057B0  5181               	movf	sprintf@idx& (0+255),w,b
 23131  0057B2  2586               	addwf	_sprintf$2144& (0+255),w,b
 23132  0057B4  6F7E               	movwf	??_sprintf& (0+255),b
 23133  0057B6  0E00               	movlw	0
 23134  0057B8  2187               	addwfc	(_sprintf$2144+1)& (0+255),w,b
 23135  0057BA  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23136  0057BC  C07E  FFF6         	movff	??_sprintf,tblptrl
 23137  0057C0  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23138  0057C4  0008               	tblrd		*
 23139  0057C6  CFF5 F091          	movff	tablat,sprintf@c
 23140                           
 23141                           ;doprnt.c: 1515: }
 23142                           ;doprnt.c: 1517: break;
 23143  0057CA  D016               	goto	l11888
 23144  0057CC                     l11882:
 23145                           
 23146                           ; BSR set to: 0
 23147                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23148  0057CC  D852               	call	PL24	;call to abstracted procedure
 23149  0057CE  0EB4               	movlw	low _octpowers
 23150  0057D0  257E               	addwf	??_sprintf& (0+255),w,b
 23151  0057D2  6EF6               	movwf	tblptrl,c
 23152  0057D4  0E6C               	movlw	high _octpowers
 23153  0057D6  D836               	call	PL14	;call to abstracted procedure
 23154  0057D8  ECC2  F010         	call	___lldiv	;wreg free
 23155  0057DC  5160               	movf	?___lldiv& (0+255),w,b
 23156  0057DE  0B07               	andlw	7
 23157  0057E0                     L40:
 23158  0057E0  0F30               	addlw	48
 23159  0057E2  6F91               	movwf	sprintf@c& (0+255),b
 23160                           
 23161                           ;doprnt.c: 1527: break;
 23162  0057E4  D009               	goto	l11888
 23163  0057E6                     l11886:
 23164                           
 23165                           ; BSR set to: 0
 23166  0057E6  5192               	movf	sprintf@flag& (0+255),w,b
 23167  0057E8  0BC0               	andlw	192
 23168                           
 23169                           ; Switch size 1, requested type "space"
 23170                           ; Number of cases is 4, Range of values is 0 to 192
 23171                           ; switch strategies available:
 23172                           ; Name         Instructions Cycles
 23173                           ; simple_byte           13     7 (average)
 23174                           ;	Chosen strategy is simple_byte
 23175  0057EA  E0A2               	bz	l11870
 23176  0057EC  0A40               	xorlw	64	; case 64
 23177  0057EE  E0EE               	bz	l11882
 23178  0057F0  0AC0               	xorlw	192	; case 128
 23179  0057F2  E0C9               	bz	l11872
 23180  0057F4  0A40               	xorlw	64	; case 192
 23181  0057F6  E09C               	bz	l11870
 23182  0057F8                     l11888:
 23183                           
 23184                           ; BSR set to: 0
 23185                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23186  0057F8  C076  FFD9         	movff	sprintf@sp,fsr2l
 23187  0057FC  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23188  005800  C091  FFDF         	movff	sprintf@c,indf2
 23189  005804  D777               	goto	l11852
 23190  005806                     l11892:
 23191                           
 23192                           ; BSR set to: 0
 23193  005806  0789               	decf	sprintf@prec& (0+255),f,b
 23194  005808  A0D8               	btfss	status,0,c
 23195  00580A  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23196  00580C  0100               	movlb	0	; () banked
 23197  00580E  2989               	incf	sprintf@prec& (0+255),w,b
 23198  005810  B4D8               	btfsc	status,2,c
 23199  005812  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23200  005814  E1E8               	bnz	l11886
 23201                           
 23202                           ; BSR set to: 0
 23203                           ;doprnt.c: 1532: }
 23204                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23205  005816  A792               	btfss	sprintf@flag& (0+255),3,b
 23206  005818  D00B               	goto	l11902
 23207                           
 23208                           ; BSR set to: 0
 23209  00581A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23210  00581C  0A80               	xorlw	128
 23211  00581E  0F80               	addlw	-128
 23212  005820  0E01               	movlw	1
 23213  005822  B4D8               	btfsc	status,2,c
 23214  005824  5D8B               	subwf	sprintf@width& (0+255),w,b
 23215  005826  E304               	bnc	l11902
 23216  005828                     l11896:
 23217                           
 23218                           ; BSR set to: 0
 23219                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23220  005828  C076  FFD9         	movff	sprintf@sp,fsr2l
 23221                           
 23222                           ; BSR set to: 0
 23223                           
 23224                           ; BSR set to: 0
 23225                           ;doprnt.c: 1538: while(--width);
 23226  00582C  D835               	call	PL46	;call to abstracted procedure
 23227  00582E  E1FC               	bnz	l11896
 23228  005830                     l11902:
 23229                           
 23230                           ; BSR set to: 0
 23231  005830  D84B               	call	PL62	;call to abstracted procedure
 23232  005832  6791               	tstfsz	sprintf@c& (0+255),b
 23233  005834  D4D1               	goto	l11568
 23234  005836                     l11904:
 23235                           
 23236                           ; BSR set to: 0
 23237                           ;doprnt.c: 1545: *sp = 0;
 23238  005836  C076  FFD9         	movff	sprintf@sp,fsr2l
 23239  00583A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23240  00583E  0E00               	movlw	0
 23241  005840  6EDF               	movwf	indf2,c
 23242                           
 23243                           ; BSR set to: 0
 23244  005842  0C00               	retlw	0
 23245  005844                     __end_of_sprintf:
 23246                           	opt stack 0
 23247  005844                     PL14:
 23248                           	opt stack 24
 23249  005844  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23250  005846  6EF7               	movwf	tblptrh,c
 23251  005848  0009               	tblrd		*+
 23252  00584A  CFF5 F064          	movff	tablat,?___lldiv+4
 23253  00584E  0009               	tblrd		*+
 23254  005850  CFF5 F065          	movff	tablat,?___lldiv+5
 23255  005854  0009               	tblrd		*+
 23256  005856  CFF5 F066          	movff	tablat,?___lldiv+6
 23257  00585A  000A               	tblrd		*-
 23258  00585C  CFF5 F067          	movff	tablat,?___lldiv+7
 23259  005860  0012               	return	
 23260  005862                     __end_ofPL14:
 23261                           	opt stack 0
 23262  005862                     PL20:
 23263                           	opt stack 24
 23264  005862  1592               	andwf	sprintf@flag& (0+255),w,b
 23265  005864  6F7E               	movwf	??_sprintf& (0+255),b
 23266  005866  0E08               	movlw	8
 23267  005868  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23268  00586A  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23269  00586C  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23270  00586E  0A08               	xorlw	8
 23271  005870  0012               	return	
 23272  005872                     __end_ofPL20:
 23273                           	opt stack 0
 23274  005872                     PL24:
 23275                           	opt stack 24
 23276  005872  C08D  F060         	movff	sprintf@_val,?___lldiv
 23277  005876  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23278  00587A  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23279  00587E  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23280  005882  C089  F07E         	movff	sprintf@prec,??_sprintf
 23281  005886  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23282  00588A  90D8               	bcf	status,0,c
 23283  00588C  377E               	rlcf	??_sprintf& (0+255),f,b
 23284  00588E  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23285  005890  90D8               	bcf	status,0,c
 23286  005892  377E               	rlcf	??_sprintf& (0+255),f,b
 23287  005894  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23288  005896  0012               	return	
 23289  005898                     __end_ofPL24:
 23290                           	opt stack 0
 23291  005898                     PL46:
 23292                           	opt stack 24
 23293  005898  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23294  00589C  0E20               	movlw	32
 23295  00589E  6EDF               	movwf	indf2,c
 23296  0058A0  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23297  0058A2  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23298  0058A4  078B               	decf	sprintf@width& (0+255),f,b
 23299  0058A6  A0D8               	btfss	status,0,c
 23300  0058A8  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23301  0058AA  0100               	movlb	0	; () banked
 23302  0058AC  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23303  0058AE  118B               	iorwf	sprintf@width& (0+255),w,b
 23304  0058B0  0012               	return	
 23305  0058B2                     __end_ofPL46:
 23306                           	opt stack 0
 23307  0058B2                     PL56:
 23308                           	opt stack 24
 23309  0058B2  6ED9               	movwf	fsr2l,c
 23310  0058B4  6ADA               	clrf	fsr2h,c
 23311  0058B6  CFDE F08D          	movff	postinc2,sprintf@_val
 23312  0058BA  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23313  0058BE  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23314  0058C2  CFDE F090          	movff	postinc2,sprintf@_val+3
 23315  0058C6  0C04               	retlw	4
 23316  0058C8                     __end_ofPL56:
 23317                           	opt stack 0
 23318  0058C8                     PL62:
 23319                           	opt stack 24
 23320  0058C8  C078  FFF6         	movff	sprintf@f,tblptrl
 23321  0058CC  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23322  0058D0  4B78               	infsnz	sprintf@f& (0+255),f,b
 23323  0058D2  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23324  0058D4  0008               	tblrd		*
 23325  0058D6  CFF5 F091          	movff	tablat,sprintf@c
 23326  0058DA  0100               	movlb	0	; () banked
 23327  0058DC  0012               	return	
 23328  0058DE                     __end_ofPL62:
 23329                           	opt stack 0
 23330  0058DE                     PL64:
 23331                           	opt stack 24
 23332  0058DE  C076  FFD9         	movff	sprintf@sp,fsr2l
 23333  0058E2  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23334  0058E6  0E20               	movlw	32
 23335  0058E8  6EDF               	movwf	indf2,c
 23336  0058EA  0C20               	retlw	32
 23337  0058EC                     __end_ofPL64:
 23338                           	opt stack 0
 23339  0058EC                     PL82:
 23340                           	opt stack 24
 23341  0058EC  4B78               	infsnz	sprintf@f& (0+255),f,b
 23342  0058EE  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23343  0058F0  C078  FFF6         	movff	sprintf@f,tblptrl
 23344  0058F4  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23345  0058F8  0008               	tblrd		*
 23346  0058FA  50F5               	movf	tablat,w,c
 23347  0058FC  0012               	return	
 23348  0058FE                     __end_ofPL82:
 23349                           	opt stack 0
 23350  0058FE                     PL98:
 23351                           	opt stack 24
 23352  0058FE  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23353  005902  0E30               	movlw	48
 23354  005904  6EDF               	movwf	indf2,c
 23355  005906  0C30               	retlw	48
 23356  005908                     __end_ofPL98:
 23357                           	opt stack 0
 23358  005908                     PL112:
 23359                           	opt stack 24
 23360  005908  A0D8               	btfss	status,0,c
 23361  00590A  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23362  00590C  0100               	movlb	0	; () banked
 23363  00590E  298B               	incf	sprintf@width& (0+255),w,b
 23364  005910  0012               	return	
 23365  005912                     __end_ofPL112:
 23366                           	opt stack 0
 23367                           tblptru	equ	0xFF8
 23368                           tblptrh	equ	0xFF7
 23369                           tblptrl	equ	0xFF6
 23370                           tablat	equ	0xFF5
 23371                           prodh	equ	0xFF4
 23372                           prodl	equ	0xFF3
 23373                           intcon	equ	0xFF2
 23374                           indf0	equ	0xFEF
 23375                           postinc0	equ	0xFEE
 23376                           fsr0h	equ	0xFEA
 23377                           fsr0l	equ	0xFE9
 23378                           wreg	equ	0xFE8
 23379                           indf1	equ	0xFE7
 23380                           postinc1	equ	0xFE6
 23381                           postdec1	equ	0xFE5
 23382                           fsr1h	equ	0xFE2
 23383                           fsr1l	equ	0xFE1
 23384                           indf2	equ	0xFDF
 23385                           postinc2	equ	0xFDE
 23386                           postdec2	equ	0xFDD
 23387                           plusw2	equ	0xFDB
 23388                           fsr2h	equ	0xFDA
 23389                           fsr2l	equ	0xFD9
 23390                           status	equ	0xFD8
 23391                           
 23392 ;; *************** function ___wmul *****************
 23393 ;; Defined at:
 23394 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23395 ;; Parameters:    Size  Location     Type
 23396 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23397 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23398 ;; Auto vars:     Size  Location     Type
 23399 ;;  product         2    4[BANK0 ] unsigned int 
 23400 ;; Return value:  Size  Location     Type
 23401 ;;                  2    0[BANK0 ] unsigned int 
 23402 ;; Registers used:
 23403 ;;		wreg, status,2, status,0, prodl, prodh
 23404 ;; Tracked objects:
 23405 ;;		On entry : F/0
 23406 ;;		On exit  : F/0
 23407 ;;		Unchanged: 0/0
 23408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23409 ;;      Params:         0       4       0       0       0       0       0
 23410 ;;      Locals:         0       2       0       0       0       0       0
 23411 ;;      Temps:          0       0       0       0       0       0       0
 23412 ;;      Totals:         0       6       0       0       0       0       0
 23413 ;;Total ram usage:        6 bytes
 23414 ;; Hardware stack levels used:    1
 23415 ;; Hardware stack levels required when called:    3
 23416 ;; This function calls:
 23417 ;;		Nothing
 23418 ;; This function is called by:
 23419 ;;		_sprintf
 23420 ;;		_atoi
 23421 ;; This function uses a non-reentrant model
 23422 ;;
 23423                           
 23424                           	psect	text57
 23425  00192E                     __ptext57:
 23426                           	opt stack 0
 23427  00192E                     ___wmul:
 23428                           	opt stack 24
 23429                           
 23430                           ; BSR set to: 0
 23431                           
 23432                           ; BSR set to: 0
 23433                           ;incstack = 0
 23434                           ;incstack = 0
 23435  00192E  5160               	movf	___wmul@multiplier& (0+255),w,b
 23436  001930  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23437  001932  CFF3 F064          	movff	prodl,___wmul@product
 23438  001936  CFF4 F065          	movff	prodh,___wmul@product+1
 23439  00193A  5160               	movf	___wmul@multiplier& (0+255),w,b
 23440  00193C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23441  00193E  D808               	call	PL100	;call to abstracted procedure
 23442  001940  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23443  001942  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23444  001944  D805               	call	PL100	;call to abstracted procedure
 23445                           
 23446                           ; BSR set to: 0
 23447  001946  C064  F060         	movff	___wmul@product,?___wmul
 23448  00194A  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23449                           
 23450                           ; BSR set to: 0
 23451  00194E  0012               	return	
 23452  001950                     __end_of___wmul:
 23453                           	opt stack 0
 23454  001950                     PL100:
 23455                           	opt stack 24
 23456  001950  CFF3 FFF4          	movff	prodl,prodh
 23457  001954  6AF3               	clrf	prodl,c
 23458  001956  50F3               	movf	prodl,w,c
 23459  001958  2764               	addwf	___wmul@product& (0+255),f,b
 23460  00195A  50F4               	movf	prodh,w,c
 23461  00195C  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23462  00195E  0012               	return	
 23463  001960                     __end_ofPL100:
 23464                           	opt stack 0
 23465                           tblptru	equ	0xFF8
 23466                           tblptrh	equ	0xFF7
 23467                           tblptrl	equ	0xFF6
 23468                           tablat	equ	0xFF5
 23469                           prodh	equ	0xFF4
 23470                           prodl	equ	0xFF3
 23471                           intcon	equ	0xFF2
 23472                           indf0	equ	0xFEF
 23473                           postinc0	equ	0xFEE
 23474                           fsr0h	equ	0xFEA
 23475                           fsr0l	equ	0xFE9
 23476                           wreg	equ	0xFE8
 23477                           indf1	equ	0xFE7
 23478                           postinc1	equ	0xFE6
 23479                           postdec1	equ	0xFE5
 23480                           fsr1h	equ	0xFE2
 23481                           fsr1l	equ	0xFE1
 23482                           indf2	equ	0xFDF
 23483                           postinc2	equ	0xFDE
 23484                           postdec2	equ	0xFDD
 23485                           plusw2	equ	0xFDB
 23486                           fsr2h	equ	0xFDA
 23487                           fsr2l	equ	0xFD9
 23488                           status	equ	0xFD8
 23489                           
 23490 ;; *************** function ___llmod *****************
 23491 ;; Defined at:
 23492 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23493 ;; Parameters:    Size  Location     Type
 23494 ;;  dividend        4   13[BANK0 ] unsigned long 
 23495 ;;  divisor         4   17[BANK0 ] unsigned long 
 23496 ;; Auto vars:     Size  Location     Type
 23497 ;;  counter         1   21[BANK0 ] unsigned char 
 23498 ;; Return value:  Size  Location     Type
 23499 ;;                  4   13[BANK0 ] unsigned long 
 23500 ;; Registers used:
 23501 ;;		wreg, status,2, status,0
 23502 ;; Tracked objects:
 23503 ;;		On entry : F/0
 23504 ;;		On exit  : F/0
 23505 ;;		Unchanged: 0/0
 23506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23507 ;;      Params:         0       8       0       0       0       0       0
 23508 ;;      Locals:         0       1       0       0       0       0       0
 23509 ;;      Temps:          0       0       0       0       0       0       0
 23510 ;;      Totals:         0       9       0       0       0       0       0
 23511 ;;Total ram usage:        9 bytes
 23512 ;; Hardware stack levels used:    1
 23513 ;; Hardware stack levels required when called:    3
 23514 ;; This function calls:
 23515 ;;		Nothing
 23516 ;; This function is called by:
 23517 ;;		_sprintf
 23518 ;;		_ultoa
 23519 ;; This function uses a non-reentrant model
 23520 ;;
 23521                           
 23522                           	psect	text58
 23523  001EA2                     __ptext58:
 23524                           	opt stack 0
 23525  001EA2                     ___llmod:
 23526                           	opt stack 23
 23527                           
 23528                           ; BSR set to: 0
 23529                           
 23530                           ; BSR set to: 0
 23531                           ;incstack = 0
 23532                           ;incstack = 0
 23533  001EA2  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23534  001EA4  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23535  001EA6  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23536  001EA8  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23537  001EAA  E023               	bz	l2345
 23538                           
 23539                           ; BSR set to: 0
 23540  001EAC  0E01               	movlw	1
 23541  001EAE  6F75               	movwf	___llmod@counter& (0+255),b
 23542  001EB0  D006               	goto	l12862
 23543  001EB2                     l12860:
 23544                           
 23545                           ; BSR set to: 0
 23546  001EB2  90D8               	bcf	status,0,c
 23547  001EB4  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23548  001EB6  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23549  001EB8  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23550  001EBA  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23551  001EBC  2B75               	incf	___llmod@counter& (0+255),f,b
 23552  001EBE                     l12862:
 23553                           
 23554                           ; BSR set to: 0
 23555  001EBE  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23556  001EC0  D7F8               	goto	l12860
 23557  001EC2                     l12864:
 23558                           
 23559                           ; BSR set to: 0
 23560  001EC2  5171               	movf	___llmod@divisor& (0+255),w,b
 23561  001EC4  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23562  001EC6  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23563  001EC8  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23564  001ECA  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23565  001ECC  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23566  001ECE  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23567  001ED0  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23568  001ED2  E308               	bnc	l12868
 23569                           
 23570                           ; BSR set to: 0
 23571  001ED4  5171               	movf	___llmod@divisor& (0+255),w,b
 23572  001ED6  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23573  001ED8  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23574  001EDA  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23575  001EDC  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23576  001EDE  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23577  001EE0  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23578  001EE2  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23579  001EE4                     l12868:
 23580                           
 23581                           ; BSR set to: 0
 23582  001EE4  90D8               	bcf	status,0,c
 23583  001EE6  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23584  001EE8  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23585  001EEA  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23586  001EEC  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23587                           
 23588                           ; BSR set to: 0
 23589  001EEE  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23590  001EF0  D7E8               	goto	l12864
 23591  001EF2                     l2345:
 23592                           
 23593                           ; BSR set to: 0
 23594  001EF2  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23595  001EF6  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23596  001EFA  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23597  001EFE  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23598                           
 23599                           ; BSR set to: 0
 23600  001F02  0012               	return	
 23601  001F04                     __end_of___llmod:
 23602                           	opt stack 0
 23603                           tblptru	equ	0xFF8
 23604                           tblptrh	equ	0xFF7
 23605                           tblptrl	equ	0xFF6
 23606                           tablat	equ	0xFF5
 23607                           prodh	equ	0xFF4
 23608                           prodl	equ	0xFF3
 23609                           intcon	equ	0xFF2
 23610                           indf0	equ	0xFEF
 23611                           postinc0	equ	0xFEE
 23612                           fsr0h	equ	0xFEA
 23613                           fsr0l	equ	0xFE9
 23614                           wreg	equ	0xFE8
 23615                           indf1	equ	0xFE7
 23616                           postinc1	equ	0xFE6
 23617                           postdec1	equ	0xFE5
 23618                           fsr1h	equ	0xFE2
 23619                           fsr1l	equ	0xFE1
 23620                           indf2	equ	0xFDF
 23621                           postinc2	equ	0xFDE
 23622                           postdec2	equ	0xFDD
 23623                           plusw2	equ	0xFDB
 23624                           fsr2h	equ	0xFDA
 23625                           fsr2l	equ	0xFD9
 23626                           status	equ	0xFD8
 23627                           
 23628 ;; *************** function ___lldiv *****************
 23629 ;; Defined at:
 23630 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23631 ;; Parameters:    Size  Location     Type
 23632 ;;  dividend        4    0[BANK0 ] unsigned long 
 23633 ;;  divisor         4    4[BANK0 ] unsigned long 
 23634 ;; Auto vars:     Size  Location     Type
 23635 ;;  quotient        4    8[BANK0 ] unsigned long 
 23636 ;;  counter         1   12[BANK0 ] unsigned char 
 23637 ;; Return value:  Size  Location     Type
 23638 ;;                  4    0[BANK0 ] unsigned long 
 23639 ;; Registers used:
 23640 ;;		wreg, status,2, status,0
 23641 ;; Tracked objects:
 23642 ;;		On entry : F/0
 23643 ;;		On exit  : F/0
 23644 ;;		Unchanged: 0/0
 23645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23646 ;;      Params:         0       8       0       0       0       0       0
 23647 ;;      Locals:         0       5       0       0       0       0       0
 23648 ;;      Temps:          0       0       0       0       0       0       0
 23649 ;;      Totals:         0      13       0       0       0       0       0
 23650 ;;Total ram usage:       13 bytes
 23651 ;; Hardware stack levels used:    1
 23652 ;; Hardware stack levels required when called:    3
 23653 ;; This function calls:
 23654 ;;		Nothing
 23655 ;; This function is called by:
 23656 ;;		_sprintf
 23657 ;;		_ultoa
 23658 ;; This function uses a non-reentrant model
 23659 ;;
 23660                           
 23661                           	psect	text59
 23662  002184                     __ptext59:
 23663                           	opt stack 0
 23664  002184                     ___lldiv:
 23665                           	opt stack 23
 23666                           
 23667                           ; BSR set to: 0
 23668                           
 23669                           ; BSR set to: 0
 23670                           ;incstack = 0
 23671                           ;incstack = 0
 23672  002184  6B68               	clrf	___lldiv@quotient& (0+255),b
 23673  002186  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 23674  002188  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 23675  00218A  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 23676                           
 23677                           ; BSR set to: 0
 23678  00218C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23679  00218E  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23680  002190  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23681  002192  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23682  002194  E029               	bz	l2335
 23683                           
 23684                           ; BSR set to: 0
 23685  002196  0E01               	movlw	1
 23686  002198  6F6C               	movwf	___lldiv@counter& (0+255),b
 23687  00219A  D006               	goto	l12842
 23688  00219C                     l12840:
 23689                           
 23690                           ; BSR set to: 0
 23691  00219C  90D8               	bcf	status,0,c
 23692  00219E  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23693  0021A0  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23694  0021A2  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23695  0021A4  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23696  0021A6  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23697  0021A8                     l12842:
 23698                           
 23699                           ; BSR set to: 0
 23700  0021A8  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23701  0021AA  D7F8               	goto	l12840
 23702  0021AC                     l12844:
 23703                           
 23704                           ; BSR set to: 0
 23705  0021AC  90D8               	bcf	status,0,c
 23706  0021AE  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23707  0021B0  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23708  0021B2  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23709  0021B4  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23710                           
 23711                           ; BSR set to: 0
 23712  0021B6  5164               	movf	___lldiv@divisor& (0+255),w,b
 23713  0021B8  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23714  0021BA  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23715  0021BC  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23716  0021BE  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23717  0021C0  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23718  0021C2  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23719  0021C4  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23720  0021C6  E309               	bnc	l12852
 23721                           
 23722                           ; BSR set to: 0
 23723  0021C8  5164               	movf	___lldiv@divisor& (0+255),w,b
 23724  0021CA  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23725  0021CC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23726  0021CE  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23727  0021D0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23728  0021D2  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23729  0021D4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23730  0021D6  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23731                           
 23732                           ; BSR set to: 0
 23733  0021D8  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23734  0021DA                     l12852:
 23735                           
 23736                           ; BSR set to: 0
 23737  0021DA  90D8               	bcf	status,0,c
 23738  0021DC  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23739  0021DE  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23740  0021E0  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23741  0021E2  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23742                           
 23743                           ; BSR set to: 0
 23744  0021E4  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23745  0021E6  D7E2               	goto	l12844
 23746  0021E8                     l2335:
 23747                           
 23748                           ; BSR set to: 0
 23749  0021E8  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23750  0021EC  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23751  0021F0  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23752  0021F4  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23753                           
 23754                           ; BSR set to: 0
 23755  0021F8  0012               	return	
 23756  0021FA                     __end_of___lldiv:
 23757                           	opt stack 0
 23758                           tblptru	equ	0xFF8
 23759                           tblptrh	equ	0xFF7
 23760                           tblptrl	equ	0xFF6
 23761                           tablat	equ	0xFF5
 23762                           prodh	equ	0xFF4
 23763                           prodl	equ	0xFF3
 23764                           intcon	equ	0xFF2
 23765                           indf0	equ	0xFEF
 23766                           postinc0	equ	0xFEE
 23767                           fsr0h	equ	0xFEA
 23768                           fsr0l	equ	0xFE9
 23769                           wreg	equ	0xFE8
 23770                           indf1	equ	0xFE7
 23771                           postinc1	equ	0xFE6
 23772                           postdec1	equ	0xFE5
 23773                           fsr1h	equ	0xFE2
 23774                           fsr1l	equ	0xFE1
 23775                           indf2	equ	0xFDF
 23776                           postinc2	equ	0xFDE
 23777                           postdec2	equ	0xFDD
 23778                           plusw2	equ	0xFDB
 23779                           fsr2h	equ	0xFDA
 23780                           fsr2l	equ	0xFD9
 23781                           status	equ	0xFD8
 23782                           
 23783 ;; *************** function _isdigit *****************
 23784 ;; Defined at:
 23785 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23786 ;; Parameters:    Size  Location     Type
 23787 ;;  c               1    wreg     unsigned char 
 23788 ;; Auto vars:     Size  Location     Type
 23789 ;;  c               1    2[BANK0 ] unsigned char 
 23790 ;; Return value:  Size  Location     Type
 23791 ;;		None               void
 23792 ;; Registers used:
 23793 ;;		wreg, status,2, status,0
 23794 ;; Tracked objects:
 23795 ;;		On entry : 0/0
 23796 ;;		On exit  : F/0
 23797 ;;		Unchanged: 0/0
 23798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23799 ;;      Params:         0       0       0       0       0       0       0
 23800 ;;      Locals:         0       2       0       0       0       0       0
 23801 ;;      Temps:          0       1       0       0       0       0       0
 23802 ;;      Totals:         0       3       0       0       0       0       0
 23803 ;;Total ram usage:        3 bytes
 23804 ;; Hardware stack levels used:    1
 23805 ;; Hardware stack levels required when called:    3
 23806 ;; This function calls:
 23807 ;;		Nothing
 23808 ;; This function is called by:
 23809 ;;		_sprintf
 23810 ;;		_atoi
 23811 ;; This function uses a non-reentrant model
 23812 ;;
 23813                           
 23814                           	psect	text60
 23815  00185C                     __ptext60:
 23816                           	opt stack 0
 23817  00185C                     _isdigit:
 23818                           	opt stack 24
 23819                           
 23820                           ; BSR set to: 0
 23821                           ;incstack = 0
 23822                           ;incstack = 0
 23823                           ;isdigit@c stored from wreg
 23824  00185C  CFE8 F062          	movff	wreg,isdigit@c
 23825  001860  0100               	movlb	0	; () banked
 23826  001862  6B61               	clrf	_isdigit$2896& (0+255),b
 23827                           
 23828                           ; BSR set to: 0
 23829  001864  0E3A               	movlw	58
 23830  001866  6162               	cpfslt	isdigit@c& (0+255),b
 23831  001868  D005               	goto	l12800
 23832                           
 23833                           ; BSR set to: 0
 23834  00186A  0E2F               	movlw	47
 23835  00186C  6562               	cpfsgt	isdigit@c& (0+255),b
 23836  00186E  D002               	goto	l12800
 23837                           
 23838                           ; BSR set to: 0
 23839  001870  0E01               	movlw	1
 23840  001872  6F61               	movwf	_isdigit$2896& (0+255),b
 23841  001874                     l12800:
 23842                           
 23843                           ; BSR set to: 0
 23844  001874  C061  F060         	movff	_isdigit$2896,??_isdigit
 23845  001878  3160               	rrcf	??_isdigit& (0+255),w,b
 23846                           
 23847                           ; BSR set to: 0
 23848  00187A  0012               	return	
 23849  00187C                     __end_of_isdigit:
 23850                           	opt stack 0
 23851                           tblptru	equ	0xFF8
 23852                           tblptrh	equ	0xFF7
 23853                           tblptrl	equ	0xFF6
 23854                           tablat	equ	0xFF5
 23855                           prodh	equ	0xFF4
 23856                           prodl	equ	0xFF3
 23857                           intcon	equ	0xFF2
 23858                           indf0	equ	0xFEF
 23859                           postinc0	equ	0xFEE
 23860                           fsr0h	equ	0xFEA
 23861                           fsr0l	equ	0xFE9
 23862                           wreg	equ	0xFE8
 23863                           indf1	equ	0xFE7
 23864                           postinc1	equ	0xFE6
 23865                           postdec1	equ	0xFE5
 23866                           fsr1h	equ	0xFE2
 23867                           fsr1l	equ	0xFE1
 23868                           indf2	equ	0xFDF
 23869                           postinc2	equ	0xFDE
 23870                           postdec2	equ	0xFDD
 23871                           plusw2	equ	0xFDB
 23872                           fsr2h	equ	0xFDA
 23873                           fsr2l	equ	0xFD9
 23874                           status	equ	0xFD8
 23875                           
 23876 ;; *************** function _printFirmwareVersion *****************
 23877 ;; Defined at:
 23878 ;;		line 2729 in file "main.c"
 23879 ;; Parameters:    Size  Location     Type
 23880 ;;		None
 23881 ;; Auto vars:     Size  Location     Type
 23882 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 23883 ;; Return value:  Size  Location     Type
 23884 ;;		None               void
 23885 ;; Registers used:
 23886 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 23887 ;; Tracked objects:
 23888 ;;		On entry : 0/0
 23889 ;;		On exit  : 0/0
 23890 ;;		Unchanged: 0/0
 23891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23892 ;;      Params:         0       0       0       0       0       0       0
 23893 ;;      Locals:         0      20       0       0       0       0       0
 23894 ;;      Temps:          0       0       0       0       0       0       0
 23895 ;;      Totals:         0      20       0       0       0       0       0
 23896 ;;Total ram usage:       20 bytes
 23897 ;; Hardware stack levels used:    1
 23898 ;; Hardware stack levels required when called:    6
 23899 ;; This function calls:
 23900 ;;		_putsUSART
 23901 ;;		_WriteUSART
 23902 ;;		_itoa
 23903 ;; This function is called by:
 23904 ;;		_main
 23905 ;;		_doModeVerbose
 23906 ;; This function uses a non-reentrant model
 23907 ;;
 23908                           
 23909                           	psect	text61
 23910  00247A                     __ptext61:
 23911                           	opt stack 0
 23912  00247A                     _printFirmwareVersion:
 23913                           	opt stack 22
 23914                           
 23915                           ;main.c: 2730: char wrkbuf[20];
 23916                           ;main.c: 2731: putsUSART((char *) "Version: ");
 23917                           
 23918                           ; BSR set to: 0
 23919                           ;incstack = 0
 23920                           ;incstack = 0
 23921  00247A  0E7B               	movlw	high STR_247
 23922  00247C  0100               	movlb	0	; () banked
 23923  00247E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23924  002480  0E9C               	movlw	low STR_247
 23925  002482  6F61               	movwf	?_putsUSART& (0+255),b
 23926  002484  EC9B  F00E         	call	_putsUSART	;wreg free
 23927                           
 23928                           ;main.c: 2732: itoa(wrkbuf, 1, 10);
 23929  002488  D838               	call	PL66	;call to abstracted procedure
 23930  00248A  0E01               	movlw	1
 23931  00248C  6F72               	movwf	(?_itoa+2)& (0+255),b
 23932  00248E  6B75               	clrf	(?_itoa+5)& (0+255),b
 23933  002490  0E0A               	movlw	10
 23934  002492  6F74               	movwf	(?_itoa+4)& (0+255),b
 23935  002494  ECCB  F00C         	call	_itoa	;wreg free
 23936                           
 23937                           ; BSR set to: 0
 23938                           ;main.c: 2733: putsUSART(wrkbuf);
 23939  002498  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23940  00249A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23941  00249C  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23942  00249E  6F61               	movwf	?_putsUSART& (0+255),b
 23943  0024A0  EC9B  F00E         	call	_putsUSART	;wreg free
 23944  0024A4                     l1210:
 23945  0024A4  A2AC               	btfss	4012,1,c	;volatile
 23946  0024A6  D7FE               	goto	l1210
 23947                           
 23948                           ;main.c: 2735: WriteUSART('.');
 23949  0024A8  0E2E               	movlw	46
 23950  0024AA  ECEE  F00B         	call	_WriteUSART
 23951                           
 23952                           ;main.c: 2736: itoa(wrkbuf, 0, 10);
 23953  0024AE  D825               	call	PL66	;call to abstracted procedure
 23954  0024B0  6B72               	clrf	(?_itoa+2)& (0+255),b
 23955  0024B2  6B75               	clrf	(?_itoa+5)& (0+255),b
 23956  0024B4  0E0A               	movlw	10
 23957  0024B6  6F74               	movwf	(?_itoa+4)& (0+255),b
 23958  0024B8  ECCB  F00C         	call	_itoa	;wreg free
 23959                           
 23960                           ; BSR set to: 0
 23961                           ;main.c: 2737: putsUSART(wrkbuf);
 23962  0024BC  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23963  0024BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23964  0024C0  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23965  0024C2  6F61               	movwf	?_putsUSART& (0+255),b
 23966  0024C4  EC9B  F00E         	call	_putsUSART	;wreg free
 23967  0024C8                     l1213:
 23968  0024C8  A2AC               	btfss	4012,1,c	;volatile
 23969  0024CA  D7FE               	goto	l1213
 23970                           
 23971                           ;main.c: 2739: WriteUSART('.');
 23972  0024CC  0E2E               	movlw	46
 23973  0024CE  ECEE  F00B         	call	_WriteUSART
 23974                           
 23975                           ;main.c: 2740: itoa(wrkbuf, 0, 10);
 23976  0024D2  D813               	call	PL66	;call to abstracted procedure
 23977  0024D4  6B72               	clrf	(?_itoa+2)& (0+255),b
 23978  0024D6  6B75               	clrf	(?_itoa+5)& (0+255),b
 23979  0024D8  0E0A               	movlw	10
 23980  0024DA  6F74               	movwf	(?_itoa+4)& (0+255),b
 23981  0024DC  ECCB  F00C         	call	_itoa	;wreg free
 23982                           
 23983                           ; BSR set to: 0
 23984                           ;main.c: 2741: putsUSART(wrkbuf);
 23985  0024E0  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23986  0024E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23987  0024E4  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23988  0024E6  6F61               	movwf	?_putsUSART& (0+255),b
 23989  0024E8  EC9B  F00E         	call	_putsUSART	;wreg free
 23990                           
 23991                           ;main.c: 2742: putsUSART((char *) "\r\n");
 23992  0024EC  0E71               	movlw	high (STR_190+50)
 23993  0024EE  0100               	movlb	0	; () banked
 23994  0024F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23995  0024F2  0E8A               	movlw	low (STR_190+50)
 23996  0024F4  6F61               	movwf	?_putsUSART& (0+255),b
 23997  0024F6  EF9B  F00E         	goto	_putsUSART	;wreg free
 23998  0024FA                     __end_of_printFirmwareVersion:
 23999                           	opt stack 0
 24000  0024FA                     PL66:
 24001                           	opt stack 22
 24002  0024FA  0100               	movlb	0	; () banked
 24003  0024FC  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24004  0024FE  6F71               	movwf	(?_itoa+1)& (0+255),b
 24005  002500  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24006  002502  6F70               	movwf	?_itoa& (0+255),b
 24007  002504  6B73               	clrf	(?_itoa+3)& (0+255),b
 24008  002506  0012               	return	
 24009  002508                     __end_ofPL66:
 24010                           	opt stack 0
 24011                           tblptru	equ	0xFF8
 24012                           tblptrh	equ	0xFF7
 24013                           tblptrl	equ	0xFF6
 24014                           tablat	equ	0xFF5
 24015                           prodh	equ	0xFF4
 24016                           prodl	equ	0xFF3
 24017                           intcon	equ	0xFF2
 24018                           indf0	equ	0xFEF
 24019                           postinc0	equ	0xFEE
 24020                           fsr0h	equ	0xFEA
 24021                           fsr0l	equ	0xFE9
 24022                           wreg	equ	0xFE8
 24023                           indf1	equ	0xFE7
 24024                           postinc1	equ	0xFE6
 24025                           postdec1	equ	0xFE5
 24026                           fsr1h	equ	0xFE2
 24027                           fsr1l	equ	0xFE1
 24028                           indf2	equ	0xFDF
 24029                           postinc2	equ	0xFDE
 24030                           postdec2	equ	0xFDD
 24031                           plusw2	equ	0xFDB
 24032                           fsr2h	equ	0xFDA
 24033                           fsr2l	equ	0xFD9
 24034                           status	equ	0xFD8
 24035                           
 24036 ;; *************** function _itoa *****************
 24037 ;; Defined at:
 24038 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24039 ;; Parameters:    Size  Location     Type
 24040 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24041 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24042 ;;  val             2   18[BANK0 ] int 
 24043 ;;  base            2   20[BANK0 ] int 
 24044 ;; Auto vars:     Size  Location     Type
 24045 ;;  cp              2    0        PTR unsigned char 
 24046 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24047 ;; Return value:  Size  Location     Type
 24048 ;;                  2   16[BANK0 ] PTR unsigned char 
 24049 ;; Registers used:
 24050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24051 ;; Tracked objects:
 24052 ;;		On entry : F/0
 24053 ;;		On exit  : F/0
 24054 ;;		Unchanged: 0/0
 24055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24056 ;;      Params:         0       6       0       0       0       0       0
 24057 ;;      Locals:         0       2       0       0       0       0       0
 24058 ;;      Temps:          0       0       0       0       0       0       0
 24059 ;;      Totals:         0       8       0       0       0       0       0
 24060 ;;Total ram usage:        8 bytes
 24061 ;; Hardware stack levels used:    1
 24062 ;; Hardware stack levels required when called:    5
 24063 ;; This function calls:
 24064 ;;		_utoa
 24065 ;; This function is called by:
 24066 ;;		_receiveSendEventSLCAN
 24067 ;;		_findNodes
 24068 ;;		_printGUID
 24069 ;;		_printNodeFirmwareVersion
 24070 ;;		_printFirmwareVersion
 24071 ;; This function uses a non-reentrant model
 24072 ;;
 24073                           
 24074                           	psect	text62
 24075  001996                     __ptext62:
 24076                           	opt stack 0
 24077  001996                     _itoa:
 24078                           	opt stack 22
 24079                           
 24080                           ; BSR set to: 0
 24081                           
 24082                           ;incstack = 0
 24083                           ;incstack = 0
 24084  001996  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24085  001998  D00C               	goto	l12644
 24086                           
 24087                           ; BSR set to: 0
 24088  00199A  C070  FFD9         	movff	itoa@buf,fsr2l
 24089  00199E  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24090  0019A2  0E2D               	movlw	45
 24091  0019A4  6EDF               	movwf	indf2,c
 24092                           
 24093                           ; BSR set to: 0
 24094  0019A6  4B70               	infsnz	itoa@buf& (0+255),f,b
 24095  0019A8  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24096                           
 24097                           ; BSR set to: 0
 24098  0019AA  6D72               	negf	itoa@val& (0+255),b
 24099  0019AC  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24100  0019AE  B0D8               	btfsc	status,0,c
 24101  0019B0  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24102  0019B2                     l12644:
 24103                           
 24104                           ; BSR set to: 0
 24105  0019B2  C070  F067         	movff	itoa@buf,?_utoa
 24106  0019B6  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24107  0019BA  C072  F069         	movff	itoa@val,?_utoa+2
 24108  0019BE  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24109  0019C2  C074  F06B         	movff	itoa@base,?_utoa+4
 24110  0019C6  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24111  0019CA  EFB5  F013         	goto	_utoa	;wreg free
 24112  0019CE                     __end_of_itoa:
 24113                           	opt stack 0
 24114                           tblptru	equ	0xFF8
 24115                           tblptrh	equ	0xFF7
 24116                           tblptrl	equ	0xFF6
 24117                           tablat	equ	0xFF5
 24118                           prodh	equ	0xFF4
 24119                           prodl	equ	0xFF3
 24120                           intcon	equ	0xFF2
 24121                           indf0	equ	0xFEF
 24122                           postinc0	equ	0xFEE
 24123                           fsr0h	equ	0xFEA
 24124                           fsr0l	equ	0xFE9
 24125                           wreg	equ	0xFE8
 24126                           indf1	equ	0xFE7
 24127                           postinc1	equ	0xFE6
 24128                           postdec1	equ	0xFE5
 24129                           fsr1h	equ	0xFE2
 24130                           fsr1l	equ	0xFE1
 24131                           indf2	equ	0xFDF
 24132                           postinc2	equ	0xFDE
 24133                           postdec2	equ	0xFDD
 24134                           plusw2	equ	0xFDB
 24135                           fsr2h	equ	0xFDA
 24136                           fsr2l	equ	0xFD9
 24137                           status	equ	0xFD8
 24138                           
 24139 ;; *************** function _utoa *****************
 24140 ;; Defined at:
 24141 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24142 ;; Parameters:    Size  Location     Type
 24143 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24144 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24145 ;;  val             2    9[BANK0 ] unsigned int 
 24146 ;;  base            2   11[BANK0 ] int 
 24147 ;; Auto vars:     Size  Location     Type
 24148 ;;  v               2   13[BANK0 ] unsigned int 
 24149 ;;  c               1   15[BANK0 ] unsigned char 
 24150 ;; Return value:  Size  Location     Type
 24151 ;;                  2    7[BANK0 ] PTR unsigned char 
 24152 ;; Registers used:
 24153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24154 ;; Tracked objects:
 24155 ;;		On entry : F/0
 24156 ;;		On exit  : F/0
 24157 ;;		Unchanged: 0/0
 24158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24159 ;;      Params:         0       6       0       0       0       0       0
 24160 ;;      Locals:         0       3       0       0       0       0       0
 24161 ;;      Temps:          0       0       0       0       0       0       0
 24162 ;;      Totals:         0       9       0       0       0       0       0
 24163 ;;Total ram usage:        9 bytes
 24164 ;; Hardware stack levels used:    1
 24165 ;; Hardware stack levels required when called:    4
 24166 ;; This function calls:
 24167 ;;		___lwdiv
 24168 ;;		___lwmod
 24169 ;; This function is called by:
 24170 ;;		_itoa
 24171 ;; This function uses a non-reentrant model
 24172 ;;
 24173                           
 24174                           	psect	text63
 24175  00276A                     __ptext63:
 24176                           	opt stack 0
 24177  00276A                     _utoa:
 24178                           	opt stack 22
 24179                           
 24180                           ; BSR set to: 0
 24181                           
 24182                           ; BSR set to: 0
 24183                           ;incstack = 0
 24184                           ;incstack = 0
 24185  00276A  C069  F06D         	movff	utoa@val,utoa@v
 24186  00276E  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24187  002772                     l12806:
 24188                           
 24189                           ; BSR set to: 0
 24190  002772  C06D  F060         	movff	utoa@v,?___lwdiv
 24191  002776  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24192  00277A  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24193  00277E  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24194  002782  EC2A  F00E         	call	___lwdiv	;wreg free
 24195  002786  C060  F06D         	movff	?___lwdiv,utoa@v
 24196  00278A  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24197                           
 24198                           ; BSR set to: 0
 24199  00278E  4B67               	infsnz	utoa@buf& (0+255),f,b
 24200  002790  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24201                           
 24202                           ; BSR set to: 0
 24203  002792  516E               	movf	(utoa@v+1)& (0+255),w,b
 24204  002794  116D               	iorwf	utoa@v& (0+255),w,b
 24205  002796  E1ED               	bnz	l12806
 24206                           
 24207                           ; BSR set to: 0
 24208  002798  C067  FFD9         	movff	utoa@buf,fsr2l
 24209  00279C  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24210  0027A0  0E00               	movlw	0
 24211  0027A2  6ADF               	clrf	indf2,c
 24212                           
 24213                           ; BSR set to: 0
 24214  0027A4  0767               	decf	utoa@buf& (0+255),f,b
 24215  0027A6  A0D8               	btfss	status,0,c
 24216  0027A8  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24217  0027AA                     l12816:
 24218                           
 24219                           ; BSR set to: 0
 24220  0027AA  C069  F060         	movff	utoa@val,?___lwmod
 24221  0027AE  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24222  0027B2  C06B  F062         	movff	utoa@base,?___lwmod+2
 24223  0027B6  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24224  0027BA  EC03  F00D         	call	___lwmod	;wreg free
 24225  0027BE  5160               	movf	?___lwmod& (0+255),w,b
 24226  0027C0  6F6F               	movwf	utoa@c& (0+255),b
 24227                           
 24228                           ; BSR set to: 0
 24229  0027C2  C069  F060         	movff	utoa@val,?___lwdiv
 24230  0027C6  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24231  0027CA  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24232  0027CE  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24233  0027D2  EC2A  F00E         	call	___lwdiv	;wreg free
 24234  0027D6  C060  F069         	movff	?___lwdiv,utoa@val
 24235  0027DA  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24236                           
 24237                           ; BSR set to: 0
 24238  0027DE  0E09               	movlw	9
 24239  0027E0  656F               	cpfsgt	utoa@c& (0+255),b
 24240  0027E2  D002               	goto	l2304
 24241                           
 24242                           ; BSR set to: 0
 24243  0027E4  0E07               	movlw	7
 24244  0027E6  276F               	addwf	utoa@c& (0+255),f,b
 24245  0027E8                     l2304:
 24246                           
 24247                           ; BSR set to: 0
 24248  0027E8  0E30               	movlw	48
 24249  0027EA  276F               	addwf	utoa@c& (0+255),f,b
 24250                           
 24251                           ; BSR set to: 0
 24252  0027EC  C067  FFD9         	movff	utoa@buf,fsr2l
 24253  0027F0  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24254  0027F4  C06F  FFDF         	movff	utoa@c,indf2
 24255                           
 24256                           ; BSR set to: 0
 24257  0027F8  0767               	decf	utoa@buf& (0+255),f,b
 24258  0027FA  A0D8               	btfss	status,0,c
 24259  0027FC  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24260                           
 24261                           ; BSR set to: 0
 24262  0027FE  516A               	movf	(utoa@val+1)& (0+255),w,b
 24263  002800  1169               	iorwf	utoa@val& (0+255),w,b
 24264  002802  E1D3               	bnz	l12816
 24265                           
 24266                           ; BSR set to: 0
 24267                           ;	Return value of _utoa is never used
 24268  002804  4B67               	infsnz	utoa@buf& (0+255),f,b
 24269  002806  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24270                           
 24271                           ; BSR set to: 0
 24272  002808  0012               	return	
 24273  00280A                     __end_of_utoa:
 24274                           	opt stack 0
 24275                           tblptru	equ	0xFF8
 24276                           tblptrh	equ	0xFF7
 24277                           tblptrl	equ	0xFF6
 24278                           tablat	equ	0xFF5
 24279                           prodh	equ	0xFF4
 24280                           prodl	equ	0xFF3
 24281                           intcon	equ	0xFF2
 24282                           indf0	equ	0xFEF
 24283                           postinc0	equ	0xFEE
 24284                           fsr0h	equ	0xFEA
 24285                           fsr0l	equ	0xFE9
 24286                           wreg	equ	0xFE8
 24287                           indf1	equ	0xFE7
 24288                           postinc1	equ	0xFE6
 24289                           postdec1	equ	0xFE5
 24290                           fsr1h	equ	0xFE2
 24291                           fsr1l	equ	0xFE1
 24292                           indf2	equ	0xFDF
 24293                           postinc2	equ	0xFDE
 24294                           postdec2	equ	0xFDD
 24295                           plusw2	equ	0xFDB
 24296                           fsr2h	equ	0xFDA
 24297                           fsr2l	equ	0xFD9
 24298                           status	equ	0xFD8
 24299                           
 24300 ;; *************** function ___lwmod *****************
 24301 ;; Defined at:
 24302 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24303 ;; Parameters:    Size  Location     Type
 24304 ;;  dividend        2    0[BANK0 ] unsigned int 
 24305 ;;  divisor         2    2[BANK0 ] unsigned int 
 24306 ;; Auto vars:     Size  Location     Type
 24307 ;;  counter         1    4[BANK0 ] unsigned char 
 24308 ;; Return value:  Size  Location     Type
 24309 ;;                  2    0[BANK0 ] unsigned int 
 24310 ;; Registers used:
 24311 ;;		wreg, status,2, status,0
 24312 ;; Tracked objects:
 24313 ;;		On entry : F/0
 24314 ;;		On exit  : F/0
 24315 ;;		Unchanged: 0/0
 24316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24317 ;;      Params:         0       4       0       0       0       0       0
 24318 ;;      Locals:         0       1       0       0       0       0       0
 24319 ;;      Temps:          0       0       0       0       0       0       0
 24320 ;;      Totals:         0       5       0       0       0       0       0
 24321 ;;Total ram usage:        5 bytes
 24322 ;; Hardware stack levels used:    1
 24323 ;; Hardware stack levels required when called:    3
 24324 ;; This function calls:
 24325 ;;		Nothing
 24326 ;; This function is called by:
 24327 ;;		_utoa
 24328 ;; This function uses a non-reentrant model
 24329 ;;
 24330                           
 24331                           	psect	text64
 24332  001A06                     __ptext64:
 24333                           	opt stack 0
 24334  001A06                     ___lwmod:
 24335                           	opt stack 22
 24336                           
 24337                           ; BSR set to: 0
 24338                           
 24339                           ; BSR set to: 0
 24340                           ;incstack = 0
 24341                           ;incstack = 0
 24342  001A06  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24343  001A08  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24344  001A0A  E017               	bz	l2428
 24345                           
 24346                           ; BSR set to: 0
 24347  001A0C  0E01               	movlw	1
 24348  001A0E  6F64               	movwf	___lwmod@counter& (0+255),b
 24349  001A10  D004               	goto	l12900
 24350  001A12                     l12898:
 24351                           
 24352                           ; BSR set to: 0
 24353  001A12  90D8               	bcf	status,0,c
 24354  001A14  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24355  001A16  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24356  001A18  2B64               	incf	___lwmod@counter& (0+255),f,b
 24357  001A1A                     l12900:
 24358                           
 24359                           ; BSR set to: 0
 24360  001A1A  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24361  001A1C  D7FA               	goto	l12898
 24362  001A1E                     l12902:
 24363                           
 24364                           ; BSR set to: 0
 24365  001A1E  5162               	movf	___lwmod@divisor& (0+255),w,b
 24366  001A20  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24367  001A22  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24368  001A24  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24369  001A26  E304               	bnc	l12906
 24370                           
 24371                           ; BSR set to: 0
 24372  001A28  5162               	movf	___lwmod@divisor& (0+255),w,b
 24373  001A2A  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24374  001A2C  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24375  001A2E  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24376  001A30                     l12906:
 24377                           
 24378                           ; BSR set to: 0
 24379  001A30  90D8               	bcf	status,0,c
 24380  001A32  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24381  001A34  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24382                           
 24383                           ; BSR set to: 0
 24384  001A36  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24385  001A38  D7F2               	goto	l12902
 24386  001A3A                     l2428:
 24387                           
 24388                           ; BSR set to: 0
 24389  001A3A  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24390  001A3E  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24391                           
 24392                           ; BSR set to: 0
 24393  001A42  0012               	return	
 24394  001A44                     __end_of___lwmod:
 24395                           	opt stack 0
 24396                           tblptru	equ	0xFF8
 24397                           tblptrh	equ	0xFF7
 24398                           tblptrl	equ	0xFF6
 24399                           tablat	equ	0xFF5
 24400                           prodh	equ	0xFF4
 24401                           prodl	equ	0xFF3
 24402                           intcon	equ	0xFF2
 24403                           indf0	equ	0xFEF
 24404                           postinc0	equ	0xFEE
 24405                           fsr0h	equ	0xFEA
 24406                           fsr0l	equ	0xFE9
 24407                           wreg	equ	0xFE8
 24408                           indf1	equ	0xFE7
 24409                           postinc1	equ	0xFE6
 24410                           postdec1	equ	0xFE5
 24411                           fsr1h	equ	0xFE2
 24412                           fsr1l	equ	0xFE1
 24413                           indf2	equ	0xFDF
 24414                           postinc2	equ	0xFDE
 24415                           postdec2	equ	0xFDD
 24416                           plusw2	equ	0xFDB
 24417                           fsr2h	equ	0xFDA
 24418                           fsr2l	equ	0xFD9
 24419                           status	equ	0xFD8
 24420                           
 24421 ;; *************** function ___lwdiv *****************
 24422 ;; Defined at:
 24423 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24424 ;; Parameters:    Size  Location     Type
 24425 ;;  dividend        2    0[BANK0 ] unsigned int 
 24426 ;;  divisor         2    2[BANK0 ] unsigned int 
 24427 ;; Auto vars:     Size  Location     Type
 24428 ;;  quotient        2    5[BANK0 ] unsigned int 
 24429 ;;  counter         1    4[BANK0 ] unsigned char 
 24430 ;; Return value:  Size  Location     Type
 24431 ;;                  2    0[BANK0 ] unsigned int 
 24432 ;; Registers used:
 24433 ;;		wreg, status,2, status,0
 24434 ;; Tracked objects:
 24435 ;;		On entry : F/0
 24436 ;;		On exit  : F/0
 24437 ;;		Unchanged: 0/0
 24438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24439 ;;      Params:         0       4       0       0       0       0       0
 24440 ;;      Locals:         0       3       0       0       0       0       0
 24441 ;;      Temps:          0       0       0       0       0       0       0
 24442 ;;      Totals:         0       7       0       0       0       0       0
 24443 ;;Total ram usage:        7 bytes
 24444 ;; Hardware stack levels used:    1
 24445 ;; Hardware stack levels required when called:    3
 24446 ;; This function calls:
 24447 ;;		Nothing
 24448 ;; This function is called by:
 24449 ;;		_utoa
 24450 ;; This function uses a non-reentrant model
 24451 ;;
 24452                           
 24453                           	psect	text65
 24454  001C54                     __ptext65:
 24455                           	opt stack 0
 24456  001C54                     ___lwdiv:
 24457                           	opt stack 22
 24458                           
 24459                           ; BSR set to: 0
 24460                           
 24461                           ; BSR set to: 0
 24462                           ;incstack = 0
 24463                           ;incstack = 0
 24464  001C54  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24465  001C56  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24466                           
 24467                           ; BSR set to: 0
 24468  001C58  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24469  001C5A  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24470  001C5C  E01B               	bz	l2418
 24471                           
 24472                           ; BSR set to: 0
 24473  001C5E  0E01               	movlw	1
 24474  001C60  6F64               	movwf	___lwdiv@counter& (0+255),b
 24475  001C62  D004               	goto	l12880
 24476  001C64                     l12878:
 24477                           
 24478                           ; BSR set to: 0
 24479  001C64  90D8               	bcf	status,0,c
 24480  001C66  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24481  001C68  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24482  001C6A  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24483  001C6C                     l12880:
 24484                           
 24485                           ; BSR set to: 0
 24486  001C6C  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24487  001C6E  D7FA               	goto	l12878
 24488  001C70                     l12882:
 24489                           
 24490                           ; BSR set to: 0
 24491  001C70  90D8               	bcf	status,0,c
 24492  001C72  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24493  001C74  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24494                           
 24495                           ; BSR set to: 0
 24496  001C76  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24497  001C78  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24498  001C7A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24499  001C7C  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24500  001C7E  E305               	bnc	l12890
 24501                           
 24502                           ; BSR set to: 0
 24503  001C80  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24504  001C82  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24505  001C84  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24506  001C86  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24507                           
 24508                           ; BSR set to: 0
 24509  001C88  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24510  001C8A                     l12890:
 24511                           
 24512                           ; BSR set to: 0
 24513  001C8A  90D8               	bcf	status,0,c
 24514  001C8C  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24515  001C8E  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24516                           
 24517                           ; BSR set to: 0
 24518  001C90  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24519  001C92  D7EE               	goto	l12882
 24520  001C94                     l2418:
 24521                           
 24522                           ; BSR set to: 0
 24523  001C94  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24524  001C98  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24525                           
 24526                           ; BSR set to: 0
 24527  001C9C  0012               	return	
 24528  001C9E                     __end_of___lwdiv:
 24529                           	opt stack 0
 24530                           tblptru	equ	0xFF8
 24531                           tblptrh	equ	0xFF7
 24532                           tblptrl	equ	0xFF6
 24533                           tablat	equ	0xFF5
 24534                           prodh	equ	0xFF4
 24535                           prodl	equ	0xFF3
 24536                           intcon	equ	0xFF2
 24537                           indf0	equ	0xFEF
 24538                           postinc0	equ	0xFEE
 24539                           fsr0h	equ	0xFEA
 24540                           fsr0l	equ	0xFE9
 24541                           wreg	equ	0xFE8
 24542                           indf1	equ	0xFE7
 24543                           postinc1	equ	0xFE6
 24544                           postdec1	equ	0xFE5
 24545                           fsr1h	equ	0xFE2
 24546                           fsr1l	equ	0xFE1
 24547                           indf2	equ	0xFDF
 24548                           postinc2	equ	0xFDE
 24549                           postdec2	equ	0xFDD
 24550                           plusw2	equ	0xFDB
 24551                           fsr2h	equ	0xFDA
 24552                           fsr2l	equ	0xFD9
 24553                           status	equ	0xFD8
 24554                           
 24555 ;; *************** function _printMode *****************
 24556 ;; Defined at:
 24557 ;;		line 2750 in file "main.c"
 24558 ;; Parameters:    Size  Location     Type
 24559 ;;		None
 24560 ;; Auto vars:     Size  Location     Type
 24561 ;;		None
 24562 ;; Return value:  Size  Location     Type
 24563 ;;		None               void
 24564 ;; Registers used:
 24565 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24566 ;; Tracked objects:
 24567 ;;		On entry : 0/0
 24568 ;;		On exit  : 0/0
 24569 ;;		Unchanged: 0/0
 24570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24571 ;;      Params:         0       0       0       0       0       0       0
 24572 ;;      Locals:         0       0       0       0       0       0       0
 24573 ;;      Temps:          0       0       0       0       0       0       0
 24574 ;;      Totals:         0       0       0       0       0       0       0
 24575 ;;Total ram usage:        0 bytes
 24576 ;; Hardware stack levels used:    1
 24577 ;; Hardware stack levels required when called:    5
 24578 ;; This function calls:
 24579 ;;		_putsUSART
 24580 ;; This function is called by:
 24581 ;;		_main
 24582 ;; This function uses a non-reentrant model
 24583 ;;
 24584                           
 24585                           	psect	text66
 24586  00210E                     __ptext66:
 24587                           	opt stack 0
 24588  00210E                     _printMode:
 24589                           	opt stack 24
 24590                           
 24591                           ;main.c: 2751: putsUSART((char *) "Mode: ");
 24592                           
 24593                           ; BSR set to: 0
 24594                           ;incstack = 0
 24595                           ;incstack = 0
 24596  00210E  0E7C               	movlw	high STR_249
 24597  002110  0100               	movlb	0	; () banked
 24598  002112  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24599  002114  0E25               	movlw	low STR_249
 24600  002116  6F61               	movwf	?_putsUSART& (0+255),b
 24601  002118  EC9B  F00E         	call	_putsUSART	;wreg free
 24602                           
 24603                           ;main.c: 2752: if (0 == mode) {
 24604  00211C  0100               	movlb	0	; () banked
 24605  00211E  67F1               	tstfsz	_mode& (0+255),b
 24606  002120  D007               	goto	l10000
 24607                           
 24608                           ; BSR set to: 0
 24609                           ;main.c: 2753: putsUSART((char *) "Verbose");
 24610  002122  0E7C               	movlw	high STR_250
 24611  002124  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24612  002126  0E1D               	movlw	low STR_250
 24613  002128  6F61               	movwf	?_putsUSART& (0+255),b
 24614  00212A  EC9B  F00E         	call	_putsUSART	;wreg free
 24615                           
 24616                           ;main.c: 2754: } else if (1 == mode) {
 24617  00212E  D023               	goto	l1220
 24618  002130                     l10000:
 24619                           
 24620                           ; BSR set to: 0
 24621  002130  05F1               	decf	_mode& (0+255),w,b
 24622  002132  E107               	bnz	l10004
 24623                           
 24624                           ; BSR set to: 0
 24625                           ;main.c: 2755: putsUSART((char *) "VSCP Driver");
 24626  002134  0E7B               	movlw	high STR_251
 24627  002136  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24628  002138  0E7A               	movlw	low STR_251
 24629  00213A  6F61               	movwf	?_putsUSART& (0+255),b
 24630  00213C  EC9B  F00E         	call	_putsUSART	;wreg free
 24631                           
 24632                           ;main.c: 2756: } else if (2 == mode) {
 24633  002140  D01A               	goto	l1220
 24634  002142                     l10004:
 24635                           
 24636                           ; BSR set to: 0
 24637  002142  51F1               	movf	_mode& (0+255),w,b
 24638  002144  0A02               	xorlw	2
 24639  002146  E107               	bnz	l10008
 24640                           
 24641                           ; BSR set to: 0
 24642                           ;main.c: 2757: putsUSART((char *) "SL Driver");
 24643  002148  0E7B               	movlw	high STR_252
 24644  00214A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24645  00214C  0EB0               	movlw	low STR_252
 24646  00214E  6F61               	movwf	?_putsUSART& (0+255),b
 24647  002150  EC9B  F00E         	call	_putsUSART	;wreg free
 24648                           
 24649                           ;main.c: 2758: } else if (3 == mode) {
 24650  002154  D010               	goto	l1220
 24651  002156                     l10008:
 24652                           
 24653                           ; BSR set to: 0
 24654  002156  51F1               	movf	_mode& (0+255),w,b
 24655  002158  0A03               	xorlw	3
 24656  00215A  E107               	bnz	l10012
 24657                           
 24658                           ; BSR set to: 0
 24659                           ;main.c: 2759: putsUSART((char *) "VSCP Node");
 24660  00215C  0E7B               	movlw	high STR_253
 24661  00215E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24662  002160  0EA6               	movlw	low STR_253
 24663  002162  6F61               	movwf	?_putsUSART& (0+255),b
 24664  002164  EC9B  F00E         	call	_putsUSART	;wreg free
 24665                           
 24666                           ;main.c: 2760: } else {
 24667  002168  D006               	goto	l1220
 24668  00216A                     l10012:
 24669                           
 24670                           ; BSR set to: 0
 24671                           ;main.c: 2761: putsUSART((char *) "Unknown (Verbose used)");
 24672  00216A  0E79               	movlw	high STR_254
 24673  00216C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24674  00216E  0EEE               	movlw	low STR_254
 24675  002170  6F61               	movwf	?_putsUSART& (0+255),b
 24676  002172  EC9B  F00E         	call	_putsUSART	;wreg free
 24677  002176                     l1220:
 24678                           
 24679                           ;main.c: 2762: }
 24680                           ;main.c: 2763: putsUSART((char *) "\r\n");
 24681  002176  0E71               	movlw	high (STR_190+50)
 24682  002178  0100               	movlb	0	; () banked
 24683  00217A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24684  00217C  0E8A               	movlw	low (STR_190+50)
 24685  00217E  6F61               	movwf	?_putsUSART& (0+255),b
 24686  002180  EF9B  F00E         	goto	_putsUSART	;wreg free
 24687  002184                     __end_of_printMode:
 24688                           	opt stack 0
 24689                           tblptru	equ	0xFF8
 24690                           tblptrh	equ	0xFF7
 24691                           tblptrl	equ	0xFF6
 24692                           tablat	equ	0xFF5
 24693                           prodh	equ	0xFF4
 24694                           prodl	equ	0xFF3
 24695                           intcon	equ	0xFF2
 24696                           indf0	equ	0xFEF
 24697                           postinc0	equ	0xFEE
 24698                           fsr0h	equ	0xFEA
 24699                           fsr0l	equ	0xFE9
 24700                           wreg	equ	0xFE8
 24701                           indf1	equ	0xFE7
 24702                           postinc1	equ	0xFE6
 24703                           postdec1	equ	0xFE5
 24704                           fsr1h	equ	0xFE2
 24705                           fsr1l	equ	0xFE1
 24706                           indf2	equ	0xFDF
 24707                           postinc2	equ	0xFDE
 24708                           postdec2	equ	0xFDD
 24709                           plusw2	equ	0xFDB
 24710                           fsr2h	equ	0xFDA
 24711                           fsr2l	equ	0xFD9
 24712                           status	equ	0xFD8
 24713                           
 24714 ;; *************** function _putsUSART *****************
 24715 ;; Defined at:
 24716 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 24717 ;; Parameters:    Size  Location     Type
 24718 ;;  data            2    1[BANK0 ] PTR unsigned char 
 24719 ;;		 -> STR_255(3), STR_254(23), STR_253(10), STR_252(10), 
 24720 ;;		 -> STR_251(12), STR_250(8), STR_249(7), STR_248(3), 
 24721 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_247(10), STR_246(3), STR_243(20), 
 24722 ;;		 -> STR_242(3), STR_241(14), STR_240(3), STR_236(8), 
 24723 ;;		 -> STR_235(15), STR_234(67), STR_233(3), STR_232(27), 
 24724 ;;		 -> STR_231(67), STR_230(39), STR_229(62), STR_228(55), 
 24725 ;;		 -> STR_227(49), STR_226(67), STR_225(47), STR_224(47), 
 24726 ;;		 -> STR_223(34), STR_222(71), STR_221(20), STR_220(78), 
 24727 ;;		 -> STR_219(24), STR_218(77), STR_217(67), STR_216(69), 
 24728 ;;		 -> STR_215(47), STR_214(40), STR_213(39), STR_212(33), 
 24729 ;;		 -> STR_211(23), STR_210(56), STR_209(24), STR_208(44), 
 24730 ;;		 -> STR_207(50), STR_206(31), STR_205(50), STR_204(51), 
 24731 ;;		 -> STR_203(46), STR_202(44), STR_201(27), STR_200(39), 
 24732 ;;		 -> STR_199(39), STR_198(52), STR_197(54), STR_196(55), 
 24733 ;;		 -> STR_195(3), STR_192(24), STR_191(57), STR_190(53), 
 24734 ;;		 -> STR_189(58), STR_188(3), STR_185(25), STR_184(3), 
 24735 ;;		 -> STR_181(24), STR_180(3), STR_177(24), STR_176(3), 
 24736 ;;		 -> STR_173(24), STR_172(3), STR_169(23), STR_168(3), 
 24737 ;;		 -> STR_165(21), STR_164(3), STR_161(22), STR_160(3), 
 24738 ;;		 -> STR_157(17), STR_156(3), STR_153(18), STR_152(4), 
 24739 ;;		 -> STR_151(11), STR_150(2), STR_147(7), STR_144(7), 
 24740 ;;		 -> STR_141(9), STR_138(7), STR_135(8), STR_132(7), 
 24741 ;;		 -> STR_131(2), STR_130(2), STR_129(6), STR_128(8), 
 24742 ;;		 -> STR_127(8), STR_126(20), STR_125(27), STR_124(6), 
 24743 ;;		 -> STR_123(33), STR_120(26), STR_118(32), STR_116(28), 
 24744 ;;		 -> STR_111(40), STR_109(44), STR_106(39), STR_104(36), 
 24745 ;;		 -> STR_102(37), STR_100(40), STR_98(37), STR_97(50), 
 24746 ;;		 -> STR_94(41), STR_92(38), STR_90(39), STR_88(42), 
 24747 ;;		 -> STR_86(39), STR_85(66), STR_82(3), STR_79(20), 
 24748 ;;		 -> STR_77(33), STR_76(35), STR_75(24), STR_73(33), 
 24749 ;;		 -> STR_71(24), STR_68(54), STR_67(6), STR_66(3), 
 24750 ;;		 -> STR_61(34), STR_60(3), STR_57(4), wrkbuf(80), 
 24751 ;;		 -> STR_52(15), STR_50(33), STR_48(24), STR_44(6), 
 24752 ;;		 -> STR_40(18), STR_39(6), STR_37(33), STR_36(6), 
 24753 ;;		 -> STR_28(24), STR_27(18), STR_26(20), STR_25(25), 
 24754 ;;		 -> STR_24(22), STR_23(19), STR_22(20), STR_21(20), 
 24755 ;;		 -> STR_19(6), STR_17(6), STR_15(6), STR_13(6), 
 24756 ;;		 -> STR_11(6), STR_9(6), STR_7(31), STR_5(29), 
 24757 ;;		 -> STR_4(55), STR_3(35), STR_2(53), STR_1(37), 
 24758 ;; Auto vars:     Size  Location     Type
 24759 ;;		None
 24760 ;; Return value:  Size  Location     Type
 24761 ;;		None               void
 24762 ;; Registers used:
 24763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24764 ;; Tracked objects:
 24765 ;;		On entry : F/0
 24766 ;;		On exit  : 0/0
 24767 ;;		Unchanged: 0/0
 24768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24769 ;;      Params:         0       2       0       0       0       0       0
 24770 ;;      Locals:         0       0       0       0       0       0       0
 24771 ;;      Temps:          0       2       0       0       0       0       0
 24772 ;;      Totals:         0       4       0       0       0       0       0
 24773 ;;Total ram usage:        4 bytes
 24774 ;; Hardware stack levels used:    1
 24775 ;; Hardware stack levels required when called:    4
 24776 ;; This function calls:
 24777 ;;		_WriteUSART
 24778 ;; This function is called by:
 24779 ;;		_main
 24780 ;;		_doModeVerbose
 24781 ;;		_doModeSLCAN
 24782 ;;		_receivePrintEventVerbose
 24783 ;;		_receiveSendEventSLCAN
 24784 ;;		_printStatistics
 24785 ;;		_printErrors
 24786 ;;		_printHelp
 24787 ;;		_findNodes
 24788 ;;		_printGUID
 24789 ;;		_printMDF
 24790 ;;		_printNodeFirmwareVersion
 24791 ;;		_printFirmwareVersion
 24792 ;;		_printMode
 24793 ;; This function uses a non-reentrant model
 24794 ;;
 24795                           
 24796                           	psect	text67
 24797  001D36                     __ptext67:
 24798                           	opt stack 0
 24799  001D36                     _putsUSART:
 24800                           	opt stack 23
 24801  001D36                     l1820:
 24802  001D36  A2AC               	btfss	4012,1,c	;volatile
 24803  001D38  D7FE               	goto	l1820
 24804  001D3A  0100               	movlb	0	; () banked
 24805  001D3C  5161               	movf	putsUSART@data& (0+255),w,b
 24806  001D3E  6EF6               	movwf	tblptrl,c
 24807  001D40  6EE9               	movwf	fsr0l,c
 24808  001D42  0E05               	movlw	(high __ramtop+-1)
 24809  001D44  6EEA               	movwf	fsr0h,c
 24810  001D46  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24811  001D48  64EA               	cpfsgt	fsr0h,c
 24812  001D4A  D003               	bra	u12007
 24813  001D4C  6EEA               	movwf	fsr0h,c
 24814  001D4E  50EF               	movf	indf0,w,c
 24815  001D50  D003               	bra	u12000
 24816  001D52                     u12007:
 24817  001D52  6EF7               	movwf	tblptrh,c
 24818  001D54  0008               	tblrd		*
 24819  001D56  50F5               	movf	tablat,w,c
 24820  001D58                     u12000:
 24821  001D58  ECEE  F00B         	call	_WriteUSART
 24822  001D5C  0100               	movlb	0	; () banked
 24823  001D5E  5161               	movf	putsUSART@data& (0+255),w,b
 24824  001D60  6F63               	movwf	??_putsUSART& (0+255),b
 24825  001D62  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24826  001D64  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 24827  001D66  4B61               	infsnz	putsUSART@data& (0+255),f,b
 24828  001D68  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 24829  001D6A  5163               	movf	??_putsUSART& (0+255),w,b
 24830  001D6C  6EF6               	movwf	tblptrl,c
 24831  001D6E  6EE9               	movwf	fsr0l,c
 24832  001D70  0E05               	movlw	(high __ramtop+-1)
 24833  001D72  6EEA               	movwf	fsr0h,c
 24834  001D74  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 24835  001D76  64EA               	cpfsgt	fsr0h,c
 24836  001D78  D003               	bra	u12017
 24837  001D7A  6EEA               	movwf	fsr0h,c
 24838  001D7C  50EF               	movf	indf0,w,c
 24839  001D7E  D003               	bra	u12010
 24840  001D80                     u12017:
 24841  001D80  6EF7               	movwf	tblptrh,c
 24842  001D82  0008               	tblrd		*
 24843  001D84  50F5               	movf	tablat,w,c
 24844  001D86                     u12010:
 24845  001D86  0900               	iorlw	0
 24846  001D88  B4D8               	btfsc	status,2,c
 24847  001D8A  0012               	return	
 24848  001D8C  D7D4               	goto	l1820
 24849  001D8E                     __end_of_putsUSART:
 24850                           	opt stack 0
 24851                           tblptru	equ	0xFF8
 24852                           tblptrh	equ	0xFF7
 24853                           tblptrl	equ	0xFF6
 24854                           tablat	equ	0xFF5
 24855                           prodh	equ	0xFF4
 24856                           prodl	equ	0xFF3
 24857                           intcon	equ	0xFF2
 24858                           indf0	equ	0xFEF
 24859                           postinc0	equ	0xFEE
 24860                           fsr0h	equ	0xFEA
 24861                           fsr0l	equ	0xFE9
 24862                           wreg	equ	0xFE8
 24863                           indf1	equ	0xFE7
 24864                           postinc1	equ	0xFE6
 24865                           postdec1	equ	0xFE5
 24866                           fsr1h	equ	0xFE2
 24867                           fsr1l	equ	0xFE1
 24868                           indf2	equ	0xFDF
 24869                           postinc2	equ	0xFDE
 24870                           postdec2	equ	0xFDD
 24871                           plusw2	equ	0xFDB
 24872                           fsr2h	equ	0xFDA
 24873                           fsr2l	equ	0xFD9
 24874                           status	equ	0xFD8
 24875                           
 24876 ;; *************** function _WriteUSART *****************
 24877 ;; Defined at:
 24878 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24879 ;; Parameters:    Size  Location     Type
 24880 ;;  data            1    wreg     unsigned char 
 24881 ;; Auto vars:     Size  Location     Type
 24882 ;;  data            1    0[BANK0 ] unsigned char 
 24883 ;; Return value:  Size  Location     Type
 24884 ;;		None               void
 24885 ;; Registers used:
 24886 ;;		wreg
 24887 ;; Tracked objects:
 24888 ;;		On entry : 0/0
 24889 ;;		On exit  : 0/0
 24890 ;;		Unchanged: 0/0
 24891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24892 ;;      Params:         0       0       0       0       0       0       0
 24893 ;;      Locals:         0       1       0       0       0       0       0
 24894 ;;      Temps:          0       0       0       0       0       0       0
 24895 ;;      Totals:         0       1       0       0       0       0       0
 24896 ;;Total ram usage:        1 bytes
 24897 ;; Hardware stack levels used:    1
 24898 ;; Hardware stack levels required when called:    3
 24899 ;; This function calls:
 24900 ;;		Nothing
 24901 ;; This function is called by:
 24902 ;;		_doModeVerbose
 24903 ;;		_sendEscapedUartData
 24904 ;;		_sendVSCPDriverErrorFrame
 24905 ;;		_sendVSCPDriverAck
 24906 ;;		_sendVSCPDriverNack
 24907 ;;		_sendVSCPDriverCommandReply
 24908 ;;		_receiveSendEventCANAL
 24909 ;;		_receiveSendMultiEventCANAL
 24910 ;;		_sendVSCPModeCapabilities
 24911 ;;		_receiveSendEventSLCAN
 24912 ;;		_printBinary
 24913 ;;		_printFirmwareVersion
 24914 ;;		_putsUSART
 24915 ;; This function uses a non-reentrant model
 24916 ;;
 24917                           
 24918                           	psect	text68
 24919  0017DC                     __ptext68:
 24920                           	opt stack 0
 24921  0017DC                     _WriteUSART:
 24922                           	opt stack 24
 24923                           
 24924                           ;incstack = 0
 24925                           ;incstack = 0
 24926                           ;WriteUSART@data stored from wreg
 24927  0017DC  CFE8 F060          	movff	wreg,WriteUSART@data
 24928  0017E0  ACAC               	btfss	4012,6,c	;volatile
 24929  0017E2  D003               	goto	l11914
 24930  0017E4  90AC               	bcf	4012,0,c	;volatile
 24931  0017E6  B213               	btfsc	_USART_Status,1,c
 24932  0017E8  80AC               	bsf	4012,0,c	;volatile
 24933  0017EA                     l11914:
 24934  0017EA  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 24935  0017EE  0012               	return	
 24936  0017F0                     __end_of_WriteUSART:
 24937                           	opt stack 0
 24938                           tblptru	equ	0xFF8
 24939                           tblptrh	equ	0xFF7
 24940                           tblptrl	equ	0xFF6
 24941                           tablat	equ	0xFF5
 24942                           prodh	equ	0xFF4
 24943                           prodl	equ	0xFF3
 24944                           intcon	equ	0xFF2
 24945                           indf0	equ	0xFEF
 24946                           postinc0	equ	0xFEE
 24947                           fsr0h	equ	0xFEA
 24948                           fsr0l	equ	0xFE9
 24949                           wreg	equ	0xFE8
 24950                           indf1	equ	0xFE7
 24951                           postinc1	equ	0xFE6
 24952                           postdec1	equ	0xFE5
 24953                           fsr1h	equ	0xFE2
 24954                           fsr1l	equ	0xFE1
 24955                           indf2	equ	0xFDF
 24956                           postinc2	equ	0xFDE
 24957                           postdec2	equ	0xFDD
 24958                           plusw2	equ	0xFDB
 24959                           fsr2h	equ	0xFDA
 24960                           fsr2l	equ	0xFD9
 24961                           status	equ	0xFD8
 24962                           
 24963 ;; *************** function _init *****************
 24964 ;; Defined at:
 24965 ;;		line 375 in file "main.c"
 24966 ;; Parameters:    Size  Location     Type
 24967 ;;		None
 24968 ;; Auto vars:     Size  Location     Type
 24969 ;;		None
 24970 ;; Return value:  Size  Location     Type
 24971 ;;		None               void
 24972 ;; Registers used:
 24973 ;;		wreg, status,2, status,0, cstack
 24974 ;; Tracked objects:
 24975 ;;		On entry : E/0
 24976 ;;		On exit  : F/0
 24977 ;;		Unchanged: 0/0
 24978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24979 ;;      Params:         0       0       0       0       0       0       0
 24980 ;;      Locals:         0       0       0       0       0       0       0
 24981 ;;      Temps:          0       0       0       0       0       0       0
 24982 ;;      Totals:         0       0       0       0       0       0       0
 24983 ;;Total ram usage:        0 bytes
 24984 ;; Hardware stack levels used:    1
 24985 ;; Hardware stack levels required when called:    5
 24986 ;; This function calls:
 24987 ;;		_WriteTimer0
 24988 ;;		_init_app_ram
 24989 ;;		_OpenUSART
 24990 ;;		_OpenTimer0
 24991 ;;		_ECANInitialize
 24992 ;; This function is called by:
 24993 ;;		_main
 24994 ;; This function uses a non-reentrant model
 24995 ;;
 24996                           
 24997                           	psect	text69
 24998  001C0A                     __ptext69:
 24999                           	opt stack 0
 25000  001C0A                     _init:
 25001                           	opt stack 24
 25002                           
 25003                           ;main.c: 377: init_app_ram();
 25004                           
 25005                           ;incstack = 0
 25006                           ;incstack = 0
 25007  001C0A  EC74  F00E         	call	_init_app_ram	;wreg free
 25008                           
 25009                           ; BSR set to: 1
 25010                           ;main.c: 380: OSCCONbits.IRCF0 = 1;
 25011  001C0E  88D3               	bsf	4051,4,c	;volatile
 25012                           
 25013                           ; BSR set to: 1
 25014                           ;main.c: 381: OSCCONbits.IRCF1 = 1;
 25015  001C10  8AD3               	bsf	4051,5,c	;volatile
 25016                           
 25017                           ; BSR set to: 1
 25018                           ;main.c: 382: OSCCONbits.IRCF2 = 1;
 25019  001C12  8CD3               	bsf	4051,6,c	;volatile
 25020                           
 25021                           ; BSR set to: 1
 25022                           ;main.c: 383: OSCTUNEbits.PLLEN = 1;
 25023  001C14  8C9B               	bsf	3995,6,c	;volatile
 25024                           
 25025                           ; BSR set to: 1
 25026                           ;main.c: 385: TRISBbits.RB2 = 0;
 25027  001C16  9493               	bcf	3987,2,c	;volatile
 25028                           
 25029                           ; BSR set to: 1
 25030                           ;main.c: 386: TRISBbits.RB3 = 1;
 25031  001C18  8693               	bsf	3987,3,c	;volatile
 25032                           
 25033                           ; BSR set to: 1
 25034                           ;main.c: 388: TRISCbits.RC1 = 0;
 25035  001C1A  9294               	bcf	3988,1,c	;volatile
 25036                           
 25037                           ; BSR set to: 1
 25038                           ;main.c: 389: TRISCbits.RC6 = 0;
 25039  001C1C  9C94               	bcf	3988,6,c	;volatile
 25040                           
 25041                           ; BSR set to: 1
 25042                           ;main.c: 390: TRISCbits.RC7 = 1;
 25043  001C1E  8E94               	bsf	3988,7,c	;volatile
 25044                           
 25045                           ;main.c: 394: OpenUSART( 0b01111111 &
 25046                           ;main.c: 395: 0b11111111 &
 25047                           ;main.c: 396: 0b11111110 &
 25048                           ;main.c: 397: 0b11111101 &
 25049                           ;main.c: 398: 0b11111111,
 25050                           ;main.c: 399: 21 );
 25051  001C20  0100               	movlb	0	; () banked
 25052  001C22  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25053  001C24  0E15               	movlw	21
 25054  001C26  6F60               	movwf	?_OpenUSART& (0+255),b
 25055  001C28  0E7C               	movlw	124
 25056  001C2A  ECF3  F00E         	call	_OpenUSART
 25057                           
 25058                           ; BSR set to: 0
 25059                           ;main.c: 401: RCIF = 0;
 25060  001C2E  9A9E               	bcf	3998,5,c	;volatile
 25061                           
 25062                           ; BSR set to: 0
 25063                           ;main.c: 402: RCIP = 0;
 25064  001C30  9A9F               	bcf	3999,5,c	;volatile
 25065                           
 25066                           ; BSR set to: 0
 25067                           ;main.c: 403: RCIE = 1;
 25068  001C32  8A9D               	bsf	3997,5,c	;volatile
 25069                           
 25070                           ; BSR set to: 0
 25071                           ;main.c: 404: PEIE = 1;
 25072  001C34  8CF2               	bsf	intcon,6,c	;volatile
 25073                           
 25074                           ; BSR set to: 0
 25075                           ;main.c: 407: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25076  001C36  0E92               	movlw	146
 25077  001C38  EC1F  F00C         	call	_OpenTimer0
 25078                           
 25079                           ; BSR set to: 0
 25080                           ;main.c: 408: WriteTimer0(0xfb1d);
 25081  001C3C  0EFB               	movlw	251
 25082  001C3E  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25083  001C40  0E1D               	movlw	29
 25084  001C42  6F60               	movwf	?_WriteTimer0& (0+255),b
 25085  001C44  ECE5  F00B         	call	_WriteTimer0	;wreg free
 25086                           
 25087                           ;main.c: 411: ECANInitialize();
 25088  001C48  EC75  F011         	call	_ECANInitialize	;wreg free
 25089                           
 25090                           ; BSR set to: 0
 25091                           ;main.c: 435: RXBnIE = 1;
 25092  001C4C  82A3               	bsf	4003,1,c	;volatile
 25093                           
 25094                           ; BSR set to: 0
 25095                           ;main.c: 436: ERRIE = 1;
 25096  001C4E  8AA3               	bsf	4003,5,c	;volatile
 25097                           
 25098                           ; BSR set to: 0
 25099                           ;main.c: 438: (INTCONbits.GIE = 1);
 25100  001C50  8EF2               	bsf	intcon,7,c	;volatile
 25101                           
 25102                           ; BSR set to: 0
 25103  001C52  0012               	return	
 25104  001C54                     __end_of_init:
 25105                           	opt stack 0
 25106                           tblptru	equ	0xFF8
 25107                           tblptrh	equ	0xFF7
 25108                           tblptrl	equ	0xFF6
 25109                           tablat	equ	0xFF5
 25110                           prodh	equ	0xFF4
 25111                           prodl	equ	0xFF3
 25112                           intcon	equ	0xFF2
 25113                           indf0	equ	0xFEF
 25114                           postinc0	equ	0xFEE
 25115                           fsr0h	equ	0xFEA
 25116                           fsr0l	equ	0xFE9
 25117                           wreg	equ	0xFE8
 25118                           indf1	equ	0xFE7
 25119                           postinc1	equ	0xFE6
 25120                           postdec1	equ	0xFE5
 25121                           fsr1h	equ	0xFE2
 25122                           fsr1l	equ	0xFE1
 25123                           indf2	equ	0xFDF
 25124                           postinc2	equ	0xFDE
 25125                           postdec2	equ	0xFDD
 25126                           plusw2	equ	0xFDB
 25127                           fsr2h	equ	0xFDA
 25128                           fsr2l	equ	0xFD9
 25129                           status	equ	0xFD8
 25130                           
 25131 ;; *************** function _ECANInitialize *****************
 25132 ;; Defined at:
 25133 ;;		line 168 in file "ECAN.c"
 25134 ;; Parameters:    Size  Location     Type
 25135 ;;		None
 25136 ;; Auto vars:     Size  Location     Type
 25137 ;;		None
 25138 ;; Return value:  Size  Location     Type
 25139 ;;		None               void
 25140 ;; Registers used:
 25141 ;;		wreg, status,2, status,0, cstack
 25142 ;; Tracked objects:
 25143 ;;		On entry : F/0
 25144 ;;		On exit  : F/0
 25145 ;;		Unchanged: 0/0
 25146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25147 ;;      Params:         0       0       0       0       0       0       0
 25148 ;;      Locals:         0       0       0       0       0       0       0
 25149 ;;      Temps:          0       0       0       0       0       0       0
 25150 ;;      Totals:         0       0       0       0       0       0       0
 25151 ;;Total ram usage:        0 bytes
 25152 ;; Hardware stack levels used:    1
 25153 ;; Hardware stack levels required when called:    4
 25154 ;; This function calls:
 25155 ;;		_ECANSetOperationMode
 25156 ;; This function is called by:
 25157 ;;		_init
 25158 ;; This function uses a non-reentrant model
 25159 ;;
 25160                           
 25161                           	psect	text70
 25162  0022EA                     __ptext70:
 25163                           	opt stack 0
 25164  0022EA                     _ECANInitialize:
 25165                           	opt stack 24
 25166                           
 25167                           ; BSR set to: 0
 25168                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25169                           
 25170                           ; BSR set to: 0
 25171                           ;incstack = 0
 25172                           ;incstack = 0
 25173  0022EA  0E80               	movlw	128
 25174  0022EC  EC03  F00C         	call	_ECANSetOperationMode
 25175                           
 25176                           ; BSR set to: 0
 25177                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25178  0022F0  0E09               	movlw	9
 25179  0022F2  6E70               	movwf	3952,c	;volatile
 25180                           
 25181                           ; BSR set to: 0
 25182                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25183  0022F4  0EFC               	movlw	252
 25184  0022F6  6E71               	movwf	3953,c	;volatile
 25185                           
 25186                           ; BSR set to: 0
 25187                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25188                           ;ECAN.c: 181: (0 << 6) |
 25189                           ;ECAN.c: 182: (2-1);
 25190  0022F8  0E01               	movlw	1
 25191  0022FA  6E72               	movwf	3954,c	;volatile
 25192                           
 25193                           ; BSR set to: 0
 25194                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25195  0022FC  0E20               	movlw	32
 25196  0022FE  6E73               	movwf	3955,c	;volatile
 25197                           
 25198                           ; BSR set to: 0
 25199                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25200  002300  8E77               	bsf	3959,7,c	;volatile
 25201                           
 25202                           ; BSR set to: 0
 25203                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25204  002302  9C77               	bcf	3959,6,c	;volatile
 25205                           
 25206                           ; BSR set to: 0
 25207                           ;ECAN.c: 205: RXB0CON = 0;
 25208  002304  6A60               	clrf	3936,c	;volatile
 25209                           
 25210                           ; BSR set to: 0
 25211                           ;ECAN.c: 211: RXB1CON = 0;
 25212  002306  010F               	movlb	15	; () banked
 25213  002308  6B50               	clrf	80,b	;volatile
 25214                           
 25215                           ; BSR set to: 15
 25216                           ;ECAN.c: 221: B0CON = 0;
 25217  00230A  010E               	movlb	14	; () banked
 25218  00230C  6B20               	clrf	32,b	;volatile
 25219                           
 25220                           ; BSR set to: 14
 25221                           ;ECAN.c: 231: B1CON = 0;
 25222  00230E  6B30               	clrf	48,b	;volatile
 25223                           
 25224                           ; BSR set to: 14
 25225                           ;ECAN.c: 241: B2CON = 0;
 25226  002310  6B40               	clrf	64,b	;volatile
 25227                           
 25228                           ; BSR set to: 14
 25229                           ;ECAN.c: 251: B3CON = 0;
 25230  002312  6B50               	clrf	80,b	;volatile
 25231                           
 25232                           ; BSR set to: 14
 25233                           ;ECAN.c: 261: B4CON = 0;
 25234  002314  6B60               	clrf	96,b	;volatile
 25235                           
 25236                           ; BSR set to: 14
 25237                           ;ECAN.c: 271: B5CON = 0;
 25238  002316  6B70               	clrf	112,b	;volatile
 25239                           
 25240                           ; BSR set to: 14
 25241                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25242  002318  010D               	movlb	13	; () banked
 25243  00231A  6BF8               	clrf	248,b	;volatile
 25244                           
 25245                           ; BSR set to: 13
 25246                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25247  00231C  010F               	movlb	15	; () banked
 25248  00231E  6B00               	clrf	0,b	;volatile
 25249                           
 25250                           ; BSR set to: 15
 25251  002320  0E08               	movlw	8
 25252  002322  6F01               	movwf	1,b	;volatile
 25253                           
 25254                           ; BSR set to: 15
 25255  002324  6B02               	clrf	2,b	;volatile
 25256                           
 25257                           ; BSR set to: 15
 25258  002326  6B03               	clrf	3,b	;volatile
 25259                           
 25260                           ; BSR set to: 15
 25261                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25262  002328  0E01               	movlw	1
 25263  00232A  010D               	movlb	13	; () banked
 25264  00232C  6FD4               	movwf	212,b	;volatile
 25265                           
 25266                           ; BSR set to: 13
 25267                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25268  00232E  6BD5               	clrf	213,b	;volatile
 25269                           
 25270                           ; BSR set to: 13
 25271                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25272  002330  6BE0               	clrf	224,b	;volatile
 25273                           
 25274                           ; BSR set to: 13
 25275                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25276  002332  0E11               	movlw	17
 25277  002334  6FE1               	movwf	225,b	;volatile
 25278                           
 25279                           ; BSR set to: 13
 25280                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25281  002336  6FE2               	movwf	226,b	;volatile
 25282                           
 25283                           ; BSR set to: 13
 25284                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25285  002338  6BE3               	clrf	227,b	;volatile
 25286                           
 25287                           ; BSR set to: 13
 25288                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25289  00233A  6BE4               	clrf	228,b	;volatile
 25290                           
 25291                           ; BSR set to: 13
 25292                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25293  00233C  6BE5               	clrf	229,b	;volatile
 25294                           
 25295                           ; BSR set to: 13
 25296                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25297  00233E  6BE6               	clrf	230,b	;volatile
 25298                           
 25299                           ; BSR set to: 13
 25300                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25301  002340  6BE7               	clrf	231,b	;volatile
 25302                           
 25303                           ; BSR set to: 13
 25304                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25305  002342  0E54               	movlw	84
 25306  002344  6FF0               	movwf	240,b	;volatile
 25307                           
 25308                           ; BSR set to: 13
 25309                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25310  002346  0E05               	movlw	5
 25311  002348  6FF1               	movwf	241,b	;volatile
 25312                           
 25313                           ; BSR set to: 13
 25314                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25315  00234A  6BF2               	clrf	242,b	;volatile
 25316                           
 25317                           ; BSR set to: 13
 25318                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25319  00234C  6BF2               	clrf	242,b	;volatile
 25320                           
 25321                           ; BSR set to: 13
 25322                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25323  00234E  010F               	movlb	15	; () banked
 25324  002350  6B18               	clrf	24,b	;volatile
 25325                           
 25326                           ; BSR set to: 15
 25327  002352  6B19               	clrf	25,b	;volatile
 25328                           
 25329                           ; BSR set to: 15
 25330  002354  6B1A               	clrf	26,b	;volatile
 25331                           
 25332                           ; BSR set to: 15
 25333  002356  6B1B               	clrf	27,b	;volatile
 25334                           
 25335                           ; BSR set to: 15
 25336                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25337  002358  8719               	bsf	25,3,b	;volatile
 25338                           
 25339                           ; BSR set to: 15
 25340                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25341  00235A  6B1C               	clrf	28,b	;volatile
 25342                           
 25343                           ; BSR set to: 15
 25344  00235C  6B1D               	clrf	29,b	;volatile
 25345                           
 25346                           ; BSR set to: 15
 25347  00235E  6B1E               	clrf	30,b	;volatile
 25348                           
 25349                           ; BSR set to: 15
 25350  002360  6B1F               	clrf	31,b	;volatile
 25351                           
 25352                           ; BSR set to: 15
 25353                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25354  002362  871D               	bsf	29,3,b	;volatile
 25355                           
 25356                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25357  002364  0E20               	movlw	32
 25358  002366  EF03  F00C         	goto	_ECANSetOperationMode
 25359  00236A                     __end_of_ECANInitialize:
 25360                           	opt stack 0
 25361                           tblptru	equ	0xFF8
 25362                           tblptrh	equ	0xFF7
 25363                           tblptrl	equ	0xFF6
 25364                           tablat	equ	0xFF5
 25365                           prodh	equ	0xFF4
 25366                           prodl	equ	0xFF3
 25367                           intcon	equ	0xFF2
 25368                           indf0	equ	0xFEF
 25369                           postinc0	equ	0xFEE
 25370                           fsr0h	equ	0xFEA
 25371                           fsr0l	equ	0xFE9
 25372                           wreg	equ	0xFE8
 25373                           indf1	equ	0xFE7
 25374                           postinc1	equ	0xFE6
 25375                           postdec1	equ	0xFE5
 25376                           fsr1h	equ	0xFE2
 25377                           fsr1l	equ	0xFE1
 25378                           indf2	equ	0xFDF
 25379                           postinc2	equ	0xFDE
 25380                           postdec2	equ	0xFDD
 25381                           plusw2	equ	0xFDB
 25382                           fsr2h	equ	0xFDA
 25383                           fsr2l	equ	0xFD9
 25384                           status	equ	0xFD8
 25385                           
 25386 ;; *************** function _ECANSetOperationMode *****************
 25387 ;; Defined at:
 25388 ;;		line 1014 in file "ECAN.c"
 25389 ;; Parameters:    Size  Location     Type
 25390 ;;  mode            1    wreg     enum E16346
 25391 ;; Auto vars:     Size  Location     Type
 25392 ;;  mode            1    0[BANK0 ] enum E16346
 25393 ;; Return value:  Size  Location     Type
 25394 ;;		None               void
 25395 ;; Registers used:
 25396 ;;		wreg, status,2, status,0
 25397 ;; Tracked objects:
 25398 ;;		On entry : 0/0
 25399 ;;		On exit  : F/0
 25400 ;;		Unchanged: 0/0
 25401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25402 ;;      Params:         0       0       0       0       0       0       0
 25403 ;;      Locals:         0       1       0       0       0       0       0
 25404 ;;      Temps:          0       0       0       0       0       0       0
 25405 ;;      Totals:         0       1       0       0       0       0       0
 25406 ;;Total ram usage:        1 bytes
 25407 ;; Hardware stack levels used:    1
 25408 ;; Hardware stack levels required when called:    3
 25409 ;; This function calls:
 25410 ;;		Nothing
 25411 ;; This function is called by:
 25412 ;;		_doModeVerbose
 25413 ;;		_doModeVscp
 25414 ;;		_doModeSLCAN
 25415 ;;		_ECANInitialize
 25416 ;; This function uses a non-reentrant model
 25417 ;;
 25418                           
 25419                           	psect	text71
 25420  001806                     __ptext71:
 25421                           	opt stack 0
 25422  001806                     _ECANSetOperationMode:
 25423                           	opt stack 25
 25424                           
 25425                           ; BSR set to: 0
 25426                           ;incstack = 0
 25427                           ;incstack = 0
 25428                           ;ECANSetOperationMode@mode stored from wreg
 25429  001806  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 25430                           
 25431                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25432  00180A  0E1F               	movlw	31
 25433  00180C  166F               	andwf	3951,f,c	;volatile
 25434                           
 25435                           ;ECAN.c: 1016: CANCON |= mode;
 25436  00180E  0100               	movlb	0	; () banked
 25437  001810  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 25438  001812  126F               	iorwf	3951,f,c	;volatile
 25439  001814                     l11230:
 25440                           
 25441                           ; BSR set to: 0
 25442  001814  506F               	movf	3951,w,c	;volatile
 25443  001816  0BE0               	andlw	224
 25444  001818  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 25445  00181A  B4D8               	btfsc	status,2,c
 25446                           
 25447                           ; BSR set to: 0
 25448  00181C  0012               	return	
 25449  00181E  D7FA               	goto	l11230
 25450  001820                     __end_of_ECANSetOperationMode:
 25451                           	opt stack 0
 25452                           tblptru	equ	0xFF8
 25453                           tblptrh	equ	0xFF7
 25454                           tblptrl	equ	0xFF6
 25455                           tablat	equ	0xFF5
 25456                           prodh	equ	0xFF4
 25457                           prodl	equ	0xFF3
 25458                           intcon	equ	0xFF2
 25459                           indf0	equ	0xFEF
 25460                           postinc0	equ	0xFEE
 25461                           fsr0h	equ	0xFEA
 25462                           fsr0l	equ	0xFE9
 25463                           wreg	equ	0xFE8
 25464                           indf1	equ	0xFE7
 25465                           postinc1	equ	0xFE6
 25466                           postdec1	equ	0xFE5
 25467                           fsr1h	equ	0xFE2
 25468                           fsr1l	equ	0xFE1
 25469                           indf2	equ	0xFDF
 25470                           postinc2	equ	0xFDE
 25471                           postdec2	equ	0xFDD
 25472                           plusw2	equ	0xFDB
 25473                           fsr2h	equ	0xFDA
 25474                           fsr2l	equ	0xFD9
 25475                           status	equ	0xFD8
 25476                           
 25477 ;; *************** function _OpenTimer0 *****************
 25478 ;; Defined at:
 25479 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25480 ;; Parameters:    Size  Location     Type
 25481 ;;  config          1    wreg     unsigned char 
 25482 ;; Auto vars:     Size  Location     Type
 25483 ;;  config          1    0[BANK0 ] unsigned char 
 25484 ;; Return value:  Size  Location     Type
 25485 ;;		None               void
 25486 ;; Registers used:
 25487 ;;		wreg, status,2, status,0
 25488 ;; Tracked objects:
 25489 ;;		On entry : F/0
 25490 ;;		On exit  : F/0
 25491 ;;		Unchanged: 0/0
 25492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25493 ;;      Params:         0       0       0       0       0       0       0
 25494 ;;      Locals:         0       1       0       0       0       0       0
 25495 ;;      Temps:          0       0       0       0       0       0       0
 25496 ;;      Totals:         0       1       0       0       0       0       0
 25497 ;;Total ram usage:        1 bytes
 25498 ;; Hardware stack levels used:    1
 25499 ;; Hardware stack levels required when called:    3
 25500 ;; This function calls:
 25501 ;;		Nothing
 25502 ;; This function is called by:
 25503 ;;		_init
 25504 ;; This function uses a non-reentrant model
 25505 ;;
 25506                           
 25507                           	psect	text72
 25508  00183E                     __ptext72:
 25509                           	opt stack 0
 25510  00183E                     _OpenTimer0:
 25511                           	opt stack 25
 25512                           
 25513                           ; BSR set to: 0
 25514                           ;incstack = 0
 25515                           ;incstack = 0
 25516                           ;OpenTimer0@config stored from wreg
 25517  00183E  CFE8 F060          	movff	wreg,OpenTimer0@config
 25518                           
 25519                           ; BSR set to: 0
 25520  001842  5160               	movf	OpenTimer0@config& (0+255),w,b
 25521  001844  0B7F               	andlw	127
 25522  001846  6ED5               	movwf	4053,c	;volatile
 25523                           
 25524                           ; BSR set to: 0
 25525  001848  6AD7               	clrf	4055,c	;volatile
 25526                           
 25527                           ; BSR set to: 0
 25528  00184A  6AD6               	clrf	4054,c	;volatile
 25529                           
 25530                           ; BSR set to: 0
 25531  00184C  94F2               	bcf	intcon,2,c	;volatile
 25532                           
 25533                           ; BSR set to: 0
 25534  00184E  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 25535  001850  D002               	goto	l1770
 25536                           
 25537                           ; BSR set to: 0
 25538  001852  8AF2               	bsf	intcon,5,c	;volatile
 25539  001854  D001               	goto	l1771
 25540  001856                     l1770:
 25541                           
 25542                           ; BSR set to: 0
 25543  001856  9AF2               	bcf	intcon,5,c	;volatile
 25544  001858                     l1771:
 25545                           
 25546                           ; BSR set to: 0
 25547  001858  8ED5               	bsf	4053,7,c	;volatile
 25548                           
 25549                           ; BSR set to: 0
 25550  00185A  0012               	return	
 25551  00185C                     __end_of_OpenTimer0:
 25552                           	opt stack 0
 25553                           tblptru	equ	0xFF8
 25554                           tblptrh	equ	0xFF7
 25555                           tblptrl	equ	0xFF6
 25556                           tablat	equ	0xFF5
 25557                           prodh	equ	0xFF4
 25558                           prodl	equ	0xFF3
 25559                           intcon	equ	0xFF2
 25560                           indf0	equ	0xFEF
 25561                           postinc0	equ	0xFEE
 25562                           fsr0h	equ	0xFEA
 25563                           fsr0l	equ	0xFE9
 25564                           wreg	equ	0xFE8
 25565                           indf1	equ	0xFE7
 25566                           postinc1	equ	0xFE6
 25567                           postdec1	equ	0xFE5
 25568                           fsr1h	equ	0xFE2
 25569                           fsr1l	equ	0xFE1
 25570                           indf2	equ	0xFDF
 25571                           postinc2	equ	0xFDE
 25572                           postdec2	equ	0xFDD
 25573                           plusw2	equ	0xFDB
 25574                           fsr2h	equ	0xFDA
 25575                           fsr2l	equ	0xFD9
 25576                           status	equ	0xFD8
 25577                           
 25578 ;; *************** function _OpenUSART *****************
 25579 ;; Defined at:
 25580 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25581 ;; Parameters:    Size  Location     Type
 25582 ;;  config          1    wreg     unsigned char 
 25583 ;;  spbrg           2    0[BANK0 ] unsigned int 
 25584 ;; Auto vars:     Size  Location     Type
 25585 ;;  config          1    2[BANK0 ] unsigned char 
 25586 ;; Return value:  Size  Location     Type
 25587 ;;		None               void
 25588 ;; Registers used:
 25589 ;;		wreg, status,2
 25590 ;; Tracked objects:
 25591 ;;		On entry : F/0
 25592 ;;		On exit  : F/0
 25593 ;;		Unchanged: 0/0
 25594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25595 ;;      Params:         0       2       0       0       0       0       0
 25596 ;;      Locals:         0       1       0       0       0       0       0
 25597 ;;      Temps:          0       0       0       0       0       0       0
 25598 ;;      Totals:         0       3       0       0       0       0       0
 25599 ;;Total ram usage:        3 bytes
 25600 ;; Hardware stack levels used:    1
 25601 ;; Hardware stack levels required when called:    3
 25602 ;; This function calls:
 25603 ;;		Nothing
 25604 ;; This function is called by:
 25605 ;;		_init
 25606 ;; This function uses a non-reentrant model
 25607 ;;
 25608                           
 25609                           	psect	text73
 25610  001DE6                     __ptext73:
 25611                           	opt stack 0
 25612  001DE6                     _OpenUSART:
 25613                           	opt stack 25
 25614                           
 25615                           ; BSR set to: 0
 25616                           ;incstack = 0
 25617                           ;incstack = 0
 25618                           ;OpenUSART@config stored from wreg
 25619  001DE6  CFE8 F062          	movff	wreg,OpenUSART@config
 25620                           
 25621                           ; BSR set to: 0
 25622  001DEA  6AAC               	clrf	4012,c	;volatile
 25623  001DEC  6AAB               	clrf	4011,c	;volatile
 25624                           
 25625                           ; BSR set to: 0
 25626  001DEE  B162               	btfsc	OpenUSART@config& (0+255),0,b
 25627                           
 25628                           ; BSR set to: 0
 25629  001DF0  88AC               	bsf	4012,4,c	;volatile
 25630                           
 25631                           ; BSR set to: 0
 25632  001DF2  A362               	btfss	OpenUSART@config& (0+255),1,b
 25633  001DF4  D002               	goto	l10946
 25634                           
 25635                           ; BSR set to: 0
 25636  001DF6  8CAC               	bsf	4012,6,c	;volatile
 25637  001DF8  8CAB               	bsf	4011,6,c	;volatile
 25638  001DFA                     l10946:
 25639                           
 25640                           ; BSR set to: 0
 25641  001DFA  B562               	btfsc	OpenUSART@config& (0+255),2,b
 25642                           
 25643                           ; BSR set to: 0
 25644  001DFC  8EAC               	bsf	4012,7,c	;volatile
 25645                           
 25646                           ; BSR set to: 0
 25647  001DFE  A762               	btfss	OpenUSART@config& (0+255),3,b
 25648  001E00  D002               	goto	l1803
 25649                           
 25650                           ; BSR set to: 0
 25651  001E02  88AB               	bsf	4011,4,c	;volatile
 25652  001E04  D001               	goto	l10954
 25653  001E06                     l1803:
 25654                           
 25655                           ; BSR set to: 0
 25656  001E06  8AAB               	bsf	4011,5,c	;volatile
 25657  001E08                     l10954:
 25658                           
 25659                           ; BSR set to: 0
 25660  001E08  B962               	btfsc	OpenUSART@config& (0+255),4,b
 25661                           
 25662                           ; BSR set to: 0
 25663  001E0A  84AC               	bsf	4012,2,c	;volatile
 25664                           
 25665                           ; BSR set to: 0
 25666  001E0C  989E               	bcf	3998,4,c	;volatile
 25667                           
 25668                           ; BSR set to: 0
 25669  001E0E  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 25670                           
 25671                           ; BSR set to: 0
 25672  001E10  86AB               	bsf	4011,3,c	;volatile
 25673                           
 25674                           ; BSR set to: 0
 25675  001E12  AD62               	btfss	OpenUSART@config& (0+255),6,b
 25676  001E14  D002               	goto	l1807
 25677                           
 25678                           ; BSR set to: 0
 25679  001E16  8A9D               	bsf	3997,5,c	;volatile
 25680  001E18  D001               	goto	l1808
 25681  001E1A                     l1807:
 25682                           
 25683                           ; BSR set to: 0
 25684  001E1A  9A9D               	bcf	3997,5,c	;volatile
 25685  001E1C                     l1808:
 25686                           
 25687                           ; BSR set to: 0
 25688  001E1C  9A9E               	bcf	3998,5,c	;volatile
 25689                           
 25690                           ; BSR set to: 0
 25691  001E1E  AF62               	btfss	OpenUSART@config& (0+255),7,b
 25692  001E20  D002               	goto	l1809
 25693                           
 25694                           ; BSR set to: 0
 25695  001E22  889D               	bsf	3997,4,c	;volatile
 25696  001E24  D001               	goto	l1810
 25697  001E26                     l1809:
 25698                           
 25699                           ; BSR set to: 0
 25700  001E26  989D               	bcf	3997,4,c	;volatile
 25701  001E28                     l1810:
 25702                           
 25703                           ; BSR set to: 0
 25704  001E28  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 25705                           
 25706                           ; BSR set to: 0
 25707  001E2C  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 25708  001E2E  6EB0               	movwf	4016,c	;volatile
 25709                           
 25710                           ; BSR set to: 0
 25711  001E30  8AAC               	bsf	4012,5,c	;volatile
 25712                           
 25713                           ; BSR set to: 0
 25714  001E32  8EAB               	bsf	4011,7,c	;volatile
 25715                           
 25716                           ; BSR set to: 0
 25717  001E34  9C94               	bcf	3988,6,c	;volatile
 25718                           
 25719                           ; BSR set to: 0
 25720  001E36  8E94               	bsf	3988,7,c	;volatile
 25721                           
 25722                           ; BSR set to: 0
 25723  001E38  B8AC               	btfsc	4012,4,c	;volatile
 25724                           
 25725                           ; BSR set to: 0
 25726  001E3A  BEAC               	btfsc	4012,7,c	;volatile
 25727  001E3C  D001               	goto	l1812
 25728                           
 25729                           ; BSR set to: 0
 25730  001E3E  8C94               	bsf	3988,6,c	;volatile
 25731  001E40                     l1812:
 25732                           
 25733                           ; BSR set to: 0
 25734  001E40  0012               	return	
 25735  001E42                     __end_of_OpenUSART:
 25736                           	opt stack 0
 25737                           tblptru	equ	0xFF8
 25738                           tblptrh	equ	0xFF7
 25739                           tblptrl	equ	0xFF6
 25740                           tablat	equ	0xFF5
 25741                           prodh	equ	0xFF4
 25742                           prodl	equ	0xFF3
 25743                           intcon	equ	0xFF2
 25744                           indf0	equ	0xFEF
 25745                           postinc0	equ	0xFEE
 25746                           fsr0h	equ	0xFEA
 25747                           fsr0l	equ	0xFE9
 25748                           wreg	equ	0xFE8
 25749                           indf1	equ	0xFE7
 25750                           postinc1	equ	0xFE6
 25751                           postdec1	equ	0xFE5
 25752                           fsr1h	equ	0xFE2
 25753                           fsr1l	equ	0xFE1
 25754                           indf2	equ	0xFDF
 25755                           postinc2	equ	0xFDE
 25756                           postdec2	equ	0xFDD
 25757                           plusw2	equ	0xFDB
 25758                           fsr2h	equ	0xFDA
 25759                           fsr2l	equ	0xFD9
 25760                           status	equ	0xFD8
 25761                           
 25762 ;; *************** function _WriteTimer0 *****************
 25763 ;; Defined at:
 25764 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25765 ;; Parameters:    Size  Location     Type
 25766 ;;  timer0          2    0[BANK0 ] unsigned int 
 25767 ;; Auto vars:     Size  Location     Type
 25768 ;;  timer           2    2[BANK0 ] struct Timers
 25769 ;; Return value:  Size  Location     Type
 25770 ;;		None               void
 25771 ;; Registers used:
 25772 ;;		None
 25773 ;; Tracked objects:
 25774 ;;		On entry : F/0
 25775 ;;		On exit  : F/0
 25776 ;;		Unchanged: F/0
 25777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25778 ;;      Params:         0       2       0       0       0       0       0
 25779 ;;      Locals:         0       2       0       0       0       0       0
 25780 ;;      Temps:          0       0       0       0       0       0       0
 25781 ;;      Totals:         0       4       0       0       0       0       0
 25782 ;;Total ram usage:        4 bytes
 25783 ;; Hardware stack levels used:    1
 25784 ;; Hardware stack levels required when called:    3
 25785 ;; This function calls:
 25786 ;;		Nothing
 25787 ;; This function is called by:
 25788 ;;		_init
 25789 ;; This function uses a non-reentrant model
 25790 ;;
 25791                           
 25792                           	psect	text74
 25793  0017CA                     __ptext74:
 25794                           	opt stack 0
 25795  0017CA                     _WriteTimer0:
 25796                           	opt stack 25
 25797                           
 25798                           ; BSR set to: 0
 25799                           
 25800                           ; BSR set to: 0
 25801                           ;incstack = 0
 25802                           ;incstack = 0
 25803  0017CA  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 25804  0017CE  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 25805  0017D2  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 25806  0017D6  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 25807                           
 25808                           ; BSR set to: 0
 25809  0017DA  0012               	return	
 25810  0017DC                     __end_of_WriteTimer0:
 25811                           	opt stack 0
 25812                           tblptru	equ	0xFF8
 25813                           tblptrh	equ	0xFF7
 25814                           tblptrl	equ	0xFF6
 25815                           tablat	equ	0xFF5
 25816                           prodh	equ	0xFF4
 25817                           prodl	equ	0xFF3
 25818                           intcon	equ	0xFF2
 25819                           indf0	equ	0xFEF
 25820                           postinc0	equ	0xFEE
 25821                           fsr0h	equ	0xFEA
 25822                           fsr0l	equ	0xFE9
 25823                           wreg	equ	0xFE8
 25824                           indf1	equ	0xFE7
 25825                           postinc1	equ	0xFE6
 25826                           postdec1	equ	0xFE5
 25827                           fsr1h	equ	0xFE2
 25828                           fsr1l	equ	0xFE1
 25829                           indf2	equ	0xFDF
 25830                           postinc2	equ	0xFDE
 25831                           postdec2	equ	0xFDD
 25832                           plusw2	equ	0xFDB
 25833                           fsr2h	equ	0xFDA
 25834                           fsr2l	equ	0xFD9
 25835                           status	equ	0xFD8
 25836                           
 25837 ;; *************** function _vscp_restoreDefaults *****************
 25838 ;; Defined at:
 25839 ;;		line 2719 in file "main.c"
 25840 ;; Parameters:    Size  Location     Type
 25841 ;;		None
 25842 ;; Auto vars:     Size  Location     Type
 25843 ;;		None
 25844 ;; Return value:  Size  Location     Type
 25845 ;;		None               void
 25846 ;; Registers used:
 25847 ;;		wreg, status,2, status,0, cstack
 25848 ;; Tracked objects:
 25849 ;;		On entry : F/0
 25850 ;;		On exit  : F/1
 25851 ;;		Unchanged: 0/0
 25852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25853 ;;      Params:         0       0       0       0       0       0       0
 25854 ;;      Locals:         0       0       0       0       0       0       0
 25855 ;;      Temps:          0       0       0       0       0       0       0
 25856 ;;      Totals:         0       0       0       0       0       0       0
 25857 ;;Total ram usage:        0 bytes
 25858 ;; Hardware stack levels used:    1
 25859 ;; Hardware stack levels required when called:    5
 25860 ;; This function calls:
 25861 ;;		_init_app_ram
 25862 ;;		_init_app_eeprom
 25863 ;; This function is called by:
 25864 ;;		_main
 25865 ;; This function uses a non-reentrant model
 25866 ;;
 25867                           
 25868                           	psect	text75
 25869  00179E                     __ptext75:
 25870                           	opt stack 0
 25871  00179E                     _vscp_restoreDefaults:
 25872                           	opt stack 24
 25873                           
 25874                           ; BSR set to: 0
 25875                           ;main.c: 2720: init_app_eeprom();
 25876                           
 25877                           ; BSR set to: 0
 25878                           ;incstack = 0
 25879                           ;incstack = 0
 25880  00179E  ECF8  F011         	call	_init_app_eeprom	;wreg free
 25881                           
 25882                           ; BSR set to: 0
 25883                           ;main.c: 2721: init_app_ram();
 25884  0017A2  EF74  F00E         	goto	_init_app_ram	;wreg free
 25885  0017A6                     __end_of_vscp_restoreDefaults:
 25886                           	opt stack 0
 25887                           tblptru	equ	0xFF8
 25888                           tblptrh	equ	0xFF7
 25889                           tblptrl	equ	0xFF6
 25890                           tablat	equ	0xFF5
 25891                           prodh	equ	0xFF4
 25892                           prodl	equ	0xFF3
 25893                           intcon	equ	0xFF2
 25894                           indf0	equ	0xFEF
 25895                           postinc0	equ	0xFEE
 25896                           fsr0h	equ	0xFEA
 25897                           fsr0l	equ	0xFE9
 25898                           wreg	equ	0xFE8
 25899                           indf1	equ	0xFE7
 25900                           postinc1	equ	0xFE6
 25901                           postdec1	equ	0xFE5
 25902                           fsr1h	equ	0xFE2
 25903                           fsr1l	equ	0xFE1
 25904                           indf2	equ	0xFDF
 25905                           postinc2	equ	0xFDE
 25906                           postdec2	equ	0xFDD
 25907                           plusw2	equ	0xFDB
 25908                           fsr2h	equ	0xFDA
 25909                           fsr2l	equ	0xFD9
 25910                           status	equ	0xFD8
 25911                           
 25912 ;; *************** function _init_app_eeprom *****************
 25913 ;; Defined at:
 25914 ;;		line 465 in file "main.c"
 25915 ;; Parameters:    Size  Location     Type
 25916 ;;		None
 25917 ;; Auto vars:     Size  Location     Type
 25918 ;;  i               1    3[BANK0 ] unsigned char 
 25919 ;; Return value:  Size  Location     Type
 25920 ;;		None               void
 25921 ;; Registers used:
 25922 ;;		wreg, status,2, status,0, cstack
 25923 ;; Tracked objects:
 25924 ;;		On entry : F/0
 25925 ;;		On exit  : F/0
 25926 ;;		Unchanged: 0/0
 25927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25928 ;;      Params:         0       0       0       0       0       0       0
 25929 ;;      Locals:         0       1       0       0       0       0       0
 25930 ;;      Temps:          0       0       0       0       0       0       0
 25931 ;;      Totals:         0       1       0       0       0       0       0
 25932 ;;Total ram usage:        1 bytes
 25933 ;; Hardware stack levels used:    1
 25934 ;; Hardware stack levels required when called:    4
 25935 ;; This function calls:
 25936 ;;		_writeEEPROM
 25937 ;; This function is called by:
 25938 ;;		_vscp_restoreDefaults
 25939 ;; This function uses a non-reentrant model
 25940 ;;
 25941                           
 25942                           	psect	text76
 25943  0023F0                     __ptext76:
 25944                           	opt stack 0
 25945  0023F0                     _init_app_eeprom:
 25946                           	opt stack 24
 25947                           
 25948                           ; BSR set to: 0
 25949                           ;main.c: 466: uint8_t i;
 25950                           ;main.c: 468: writeEEPROM(0x01, 0x55);
 25951                           
 25952                           ; BSR set to: 1
 25953                           ;incstack = 0
 25954                           ;incstack = 0
 25955  0023F0  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25956  0023F2  0E01               	movlw	1
 25957  0023F4  6F60               	movwf	?_writeEEPROM& (0+255),b
 25958  0023F6  0E55               	movlw	85
 25959  0023F8  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25960  0023FA  EC3E  F00C         	call	_writeEEPROM	;wreg free
 25961                           
 25962                           ;main.c: 469: writeEEPROM(0x02, 0xAA);
 25963  0023FE  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25964  002400  0E02               	movlw	2
 25965  002402  6F60               	movwf	?_writeEEPROM& (0+255),b
 25966  002404  0EAA               	movlw	170
 25967  002406  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25968  002408  EC3E  F00C         	call	_writeEEPROM	;wreg free
 25969                           
 25970                           ;main.c: 470: writeEEPROM(0x03, 0);
 25971  00240C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25972  00240E  0E03               	movlw	3
 25973  002410  6F60               	movwf	?_writeEEPROM& (0+255),b
 25974  002412  0E00               	movlw	0
 25975  002414  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25976  002416  EC3E  F00C         	call	_writeEEPROM	;wreg free
 25977                           
 25978                           ;main.c: 471: writeEEPROM(0x05, 0);
 25979  00241A  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25980  00241C  0E05               	movlw	5
 25981  00241E  6F60               	movwf	?_writeEEPROM& (0+255),b
 25982  002420  0E00               	movlw	0
 25983  002422  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25984  002424  EC3E  F00C         	call	_writeEEPROM	;wreg free
 25985                           
 25986                           ;main.c: 472: writeEEPROM(0x06, 0);
 25987  002428  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25988  00242A  0E06               	movlw	6
 25989  00242C  6F60               	movwf	?_writeEEPROM& (0+255),b
 25990  00242E  0E00               	movlw	0
 25991  002430  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25992  002432  EC3E  F00C         	call	_writeEEPROM	;wreg free
 25993                           
 25994                           ;main.c: 473: writeEEPROM(0x09, 10u);
 25995  002436  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25996  002438  0E09               	movlw	9
 25997  00243A  6F60               	movwf	?_writeEEPROM& (0+255),b
 25998  00243C  0E0A               	movlw	10
 25999  00243E  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 26000  002440  EC3E  F00C         	call	_writeEEPROM	;wreg free
 26001                           
 26002                           ; BSR set to: 0
 26003                           ;main.c: 476: for (i = 0x20; i < (0x5C + 4); i++) {
 26004  002444  0E20               	movlw	32
 26005  002446  6F63               	movwf	init_app_eeprom@i& (0+255),b
 26006  002448                     l11094:
 26007                           
 26008                           ; BSR set to: 0
 26009                           ;main.c: 477: writeEEPROM(0x01, 0xFF);
 26010  002448  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26011  00244A  0E01               	movlw	1
 26012  00244C  6F60               	movwf	?_writeEEPROM& (0+255),b
 26013  00244E  0EFF               	movlw	255
 26014  002450  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 26015  002452  EC3E  F00C         	call	_writeEEPROM	;wreg free
 26016                           
 26017                           ; BSR set to: 0
 26018  002456  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 26019                           
 26020                           ; BSR set to: 0
 26021  002458  0E5F               	movlw	95
 26022  00245A  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 26023  00245C  D7F5               	goto	l11094
 26024                           
 26025                           ; BSR set to: 0
 26026                           ;main.c: 478: }
 26027                           ;main.c: 481: for (i = 0x60; i < (0x64 + 4); i++) {
 26028  00245E  0E60               	movlw	96
 26029  002460  6F63               	movwf	init_app_eeprom@i& (0+255),b
 26030  002462                     l11106:
 26031                           
 26032                           ; BSR set to: 0
 26033                           ;main.c: 482: writeEEPROM(0x01, 0xFF);
 26034  002462  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 26035  002464  0E01               	movlw	1
 26036  002466  6F60               	movwf	?_writeEEPROM& (0+255),b
 26037  002468  0EFF               	movlw	255
 26038  00246A  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 26039  00246C  EC3E  F00C         	call	_writeEEPROM	;wreg free
 26040                           
 26041                           ; BSR set to: 0
 26042  002470  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 26043                           
 26044                           ; BSR set to: 0
 26045  002472  0E67               	movlw	103
 26046  002474  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 26047  002476  D7F5               	goto	l11106
 26048                           
 26049                           ; BSR set to: 0
 26050  002478  0C67               	retlw	103
 26051  00247A                     __end_of_init_app_eeprom:
 26052                           	opt stack 0
 26053                           tblptru	equ	0xFF8
 26054                           tblptrh	equ	0xFF7
 26055                           tblptrl	equ	0xFF6
 26056                           tablat	equ	0xFF5
 26057                           prodh	equ	0xFF4
 26058                           prodl	equ	0xFF3
 26059                           intcon	equ	0xFF2
 26060                           indf0	equ	0xFEF
 26061                           postinc0	equ	0xFEE
 26062                           fsr0h	equ	0xFEA
 26063                           fsr0l	equ	0xFE9
 26064                           wreg	equ	0xFE8
 26065                           indf1	equ	0xFE7
 26066                           postinc1	equ	0xFE6
 26067                           postdec1	equ	0xFE5
 26068                           fsr1h	equ	0xFE2
 26069                           fsr1l	equ	0xFE1
 26070                           indf2	equ	0xFDF
 26071                           postinc2	equ	0xFDE
 26072                           postdec2	equ	0xFDD
 26073                           plusw2	equ	0xFDB
 26074                           fsr2h	equ	0xFDA
 26075                           fsr2l	equ	0xFD9
 26076                           status	equ	0xFD8
 26077                           
 26078 ;; *************** function _writeEEPROM *****************
 26079 ;; Defined at:
 26080 ;;		line 23 in file "eeprom.c"
 26081 ;; Parameters:    Size  Location     Type
 26082 ;;  address         2    0[BANK0 ] unsigned short 
 26083 ;;  data            1    2[BANK0 ] unsigned char 
 26084 ;; Auto vars:     Size  Location     Type
 26085 ;;		None
 26086 ;; Return value:  Size  Location     Type
 26087 ;;		None               void
 26088 ;; Registers used:
 26089 ;;		wreg, status,2
 26090 ;; Tracked objects:
 26091 ;;		On entry : F/0
 26092 ;;		On exit  : F/0
 26093 ;;		Unchanged: F/0
 26094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26095 ;;      Params:         0       3       0       0       0       0       0
 26096 ;;      Locals:         0       0       0       0       0       0       0
 26097 ;;      Temps:          0       0       0       0       0       0       0
 26098 ;;      Totals:         0       3       0       0       0       0       0
 26099 ;;Total ram usage:        3 bytes
 26100 ;; Hardware stack levels used:    1
 26101 ;; Hardware stack levels required when called:    3
 26102 ;; This function calls:
 26103 ;;		Nothing
 26104 ;; This function is called by:
 26105 ;;		_init_app_eeprom
 26106 ;;		_doModeVerbose
 26107 ;;		_doModeSLCAN
 26108 ;; This function uses a non-reentrant model
 26109 ;;
 26110                           
 26111                           	psect	text77
 26112  00187C                     __ptext77:
 26113                           	opt stack 0
 26114  00187C                     _writeEEPROM:
 26115                           	opt stack 25
 26116                           
 26117                           ; BSR set to: 0
 26118                           ;eeprom.c: 29: EEADR = address & 0xff;
 26119                           
 26120                           ; BSR set to: 0
 26121                           ;incstack = 0
 26122                           ;incstack = 0
 26123  00187C  C060  FFA9         	movff	writeEEPROM@address,4009	;volatile
 26124                           
 26125                           ;eeprom.c: 30: EEDATA = data;
 26126  001880  C062  FFA8         	movff	writeEEPROM@data,4008	;volatile
 26127                           
 26128                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 26129  001884  9EA6               	bcf	4006,7,c	;volatile
 26130                           
 26131                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 26132  001886  9CA6               	bcf	4006,6,c	;volatile
 26133                           
 26134                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 26135  001888  84A6               	bsf	4006,2,c	;volatile
 26136                           
 26137                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 26138  00188A  9EF2               	bcf	intcon,7,c	;volatile
 26139                           
 26140                           ; BSR set to: 0
 26141                           ;eeprom.c: 37: EECON2 = 0x55;
 26142  00188C  0E55               	movlw	85
 26143  00188E  6EA7               	movwf	4007,c	;volatile
 26144                           
 26145                           ;eeprom.c: 38: EECON2 = 0xaa;
 26146  001890  0EAA               	movlw	170
 26147  001892  6EA7               	movwf	4007,c	;volatile
 26148                           
 26149                           ; BSR set to: 0
 26150                           ;eeprom.c: 39: EECON1bits.WR = 1;
 26151  001894  82A6               	bsf	4006,1,c	;volatile
 26152                           
 26153                           ; BSR set to: 0
 26154                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 26155  001896  8EF2               	bsf	intcon,7,c	;volatile
 26156  001898                     l1550:
 26157                           
 26158                           ; BSR set to: 0
 26159  001898  A8A1               	btfss	4001,4,c	;volatile
 26160  00189A  D7FE               	goto	l1550
 26161                           
 26162                           ; BSR set to: 0
 26163                           ;eeprom.c: 43: PIR2bits.EEIF = 0;
 26164  00189C  98A1               	bcf	4001,4,c	;volatile
 26165                           
 26166                           ;eeprom.c: 44: EECON1bits.WREN = 0;
 26167  00189E  94A6               	bcf	4006,2,c	;volatile
 26168                           
 26169                           ; BSR set to: 0
 26170  0018A0  0012               	return	
 26171  0018A2                     __end_of_writeEEPROM:
 26172                           	opt stack 0
 26173                           tblptru	equ	0xFF8
 26174                           tblptrh	equ	0xFF7
 26175                           tblptrl	equ	0xFF6
 26176                           tablat	equ	0xFF5
 26177                           prodh	equ	0xFF4
 26178                           prodl	equ	0xFF3
 26179                           intcon	equ	0xFF2
 26180                           indf0	equ	0xFEF
 26181                           postinc0	equ	0xFEE
 26182                           fsr0h	equ	0xFEA
 26183                           fsr0l	equ	0xFE9
 26184                           wreg	equ	0xFE8
 26185                           indf1	equ	0xFE7
 26186                           postinc1	equ	0xFE6
 26187                           postdec1	equ	0xFE5
 26188                           fsr1h	equ	0xFE2
 26189                           fsr1l	equ	0xFE1
 26190                           indf2	equ	0xFDF
 26191                           postinc2	equ	0xFDE
 26192                           postdec2	equ	0xFDD
 26193                           plusw2	equ	0xFDB
 26194                           fsr2h	equ	0xFDA
 26195                           fsr2l	equ	0xFD9
 26196                           status	equ	0xFD8
 26197                           
 26198 ;; *************** function _init_app_ram *****************
 26199 ;; Defined at:
 26200 ;;		line 447 in file "main.c"
 26201 ;; Parameters:    Size  Location     Type
 26202 ;;		None
 26203 ;; Auto vars:     Size  Location     Type
 26204 ;;		None
 26205 ;; Return value:  Size  Location     Type
 26206 ;;		None               void
 26207 ;; Registers used:
 26208 ;;		wreg, status,2, cstack
 26209 ;; Tracked objects:
 26210 ;;		On entry : E/0
 26211 ;;		On exit  : F/1
 26212 ;;		Unchanged: 0/0
 26213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26214 ;;      Params:         0       0       0       0       0       0       0
 26215 ;;      Locals:         0       0       0       0       0       0       0
 26216 ;;      Temps:          0       0       0       0       0       0       0
 26217 ;;      Totals:         0       0       0       0       0       0       0
 26218 ;;Total ram usage:        0 bytes
 26219 ;; Hardware stack levels used:    1
 26220 ;; Hardware stack levels required when called:    4
 26221 ;; This function calls:
 26222 ;;		_readEEPROM
 26223 ;; This function is called by:
 26224 ;;		_init
 26225 ;;		_vscp_restoreDefaults
 26226 ;; This function uses a non-reentrant model
 26227 ;;
 26228                           
 26229                           	psect	text78
 26230  001CE8                     __ptext78:
 26231                           	opt stack 0
 26232  001CE8                     _init_app_ram:
 26233                           	opt stack 24
 26234                           
 26235                           ;main.c: 449: can_receiveOverruns = 0;
 26236                           
 26237                           ; BSR set to: 0
 26238                           ;incstack = 0
 26239                           ;incstack = 0
 26240  001CE8  0100               	movlb	0	; () banked
 26241  001CEA  6BD1               	clrf	_can_receiveOverruns& (0+255),b
 26242  001CEC  6BD2               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26243  001CEE  6BD3               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26244  001CF0  6BD4               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26245                           
 26246                           ;main.c: 450: can_transmitOverruns = 0;
 26247  001CF2  6A01               	clrf	_can_transmitOverruns,c
 26248  001CF4  6A02               	clrf	_can_transmitOverruns+1,c
 26249  001CF6  6A03               	clrf	_can_transmitOverruns+2,c
 26250  001CF8  6A04               	clrf	_can_transmitOverruns+3,c
 26251                           
 26252                           ;main.c: 451: uart_receiveOverruns = 0;
 26253  001CFA  6A05               	clrf	_uart_receiveOverruns,c
 26254  001CFC  6A06               	clrf	_uart_receiveOverruns+1,c
 26255  001CFE  6A07               	clrf	_uart_receiveOverruns+2,c
 26256  001D00  6A08               	clrf	_uart_receiveOverruns+3,c
 26257                           
 26258                           ;main.c: 452: uart_transmitOverruns = 0;
 26259  001D02  6A09               	clrf	_uart_transmitOverruns,c
 26260  001D04  6A0A               	clrf	_uart_transmitOverruns+1,c
 26261  001D06  6A0B               	clrf	_uart_transmitOverruns+2,c
 26262  001D08  6A0C               	clrf	_uart_transmitOverruns+3,c
 26263                           
 26264                           ; BSR set to: 0
 26265                           ;main.c: 454: bHex = readEEPROM(0x06);
 26266  001D0A  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26267  001D0C  0E06               	movlw	6
 26268  001D0E  6F60               	movwf	?_readEEPROM& (0+255),b
 26269  001D10  ECDC  F00B         	call	_readEEPROM	;wreg free
 26270  001D14  0101               	movlb	1	; () banked
 26271  001D16  6F00               	movwf	_bHex& (0+255),b
 26272                           
 26273                           ;main.c: 455: mode = readEEPROM(0x03);
 26274  001D18  0100               	movlb	0	; () banked
 26275  001D1A  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26276  001D1C  0E03               	movlw	3
 26277  001D1E  6F60               	movwf	?_readEEPROM& (0+255),b
 26278  001D20  ECDC  F00B         	call	_readEEPROM	;wreg free
 26279  001D24  6FF1               	movwf	_mode& (0+255),b
 26280                           
 26281                           ;main.c: 457: rwtimeout = readEEPROM(0x09);
 26282  001D26  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26283  001D28  0E09               	movlw	9
 26284  001D2A  6F60               	movwf	?_readEEPROM& (0+255),b
 26285  001D2C  ECDC  F00B         	call	_readEEPROM	;wreg free
 26286  001D30  0101               	movlb	1	; () banked
 26287  001D32  6F03               	movwf	_rwtimeout& (0+255),b
 26288                           
 26289                           ; BSR set to: 1
 26290  001D34  0012               	return	
 26291  001D36                     __end_of_init_app_ram:
 26292                           	opt stack 0
 26293                           tblptru	equ	0xFF8
 26294                           tblptrh	equ	0xFF7
 26295                           tblptrl	equ	0xFF6
 26296                           tablat	equ	0xFF5
 26297                           prodh	equ	0xFF4
 26298                           prodl	equ	0xFF3
 26299                           intcon	equ	0xFF2
 26300                           indf0	equ	0xFEF
 26301                           postinc0	equ	0xFEE
 26302                           fsr0h	equ	0xFEA
 26303                           fsr0l	equ	0xFE9
 26304                           wreg	equ	0xFE8
 26305                           indf1	equ	0xFE7
 26306                           postinc1	equ	0xFE6
 26307                           postdec1	equ	0xFE5
 26308                           fsr1h	equ	0xFE2
 26309                           fsr1l	equ	0xFE1
 26310                           indf2	equ	0xFDF
 26311                           postinc2	equ	0xFDE
 26312                           postdec2	equ	0xFDD
 26313                           plusw2	equ	0xFDB
 26314                           fsr2h	equ	0xFDA
 26315                           fsr2l	equ	0xFD9
 26316                           status	equ	0xFD8
 26317                           
 26318 ;; *************** function _readEEPROM *****************
 26319 ;; Defined at:
 26320 ;;		line 87 in file "eeprom.c"
 26321 ;; Parameters:    Size  Location     Type
 26322 ;;  address         2    0[BANK0 ] unsigned short 
 26323 ;; Auto vars:     Size  Location     Type
 26324 ;;  data            1    2[BANK0 ] unsigned char 
 26325 ;; Return value:  Size  Location     Type
 26326 ;;                  1    wreg      unsigned char 
 26327 ;; Registers used:
 26328 ;;		wreg, status,2
 26329 ;; Tracked objects:
 26330 ;;		On entry : F/0
 26331 ;;		On exit  : F/0
 26332 ;;		Unchanged: 0/0
 26333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26334 ;;      Params:         0       2       0       0       0       0       0
 26335 ;;      Locals:         0       1       0       0       0       0       0
 26336 ;;      Temps:          0       0       0       0       0       0       0
 26337 ;;      Totals:         0       3       0       0       0       0       0
 26338 ;;Total ram usage:        3 bytes
 26339 ;; Hardware stack levels used:    1
 26340 ;; Hardware stack levels required when called:    3
 26341 ;; This function calls:
 26342 ;;		Nothing
 26343 ;; This function is called by:
 26344 ;;		_main
 26345 ;;		_init_app_ram
 26346 ;; This function uses a non-reentrant model
 26347 ;;
 26348                           
 26349                           	psect	text79
 26350  0017B8                     __ptext79:
 26351                           	opt stack 0
 26352  0017B8                     _readEEPROM:
 26353                           	opt stack 24
 26354                           
 26355                           ; BSR set to: 0
 26356                           ;eeprom.c: 88: uint8_t data;
 26357                           ;eeprom.c: 93: EEADR = address & 0xff;
 26358                           
 26359                           ; BSR set to: 1
 26360                           ;incstack = 0
 26361                           ;incstack = 0
 26362  0017B8  C060  FFA9         	movff	readEEPROM@address,4009	;volatile
 26363                           
 26364                           ;eeprom.c: 94: EECON1bits.EEPGD= 0;
 26365  0017BC  9EA6               	bcf	4006,7,c	;volatile
 26366                           
 26367                           ;eeprom.c: 95: EECON1bits.CFGS = 0;
 26368  0017BE  9CA6               	bcf	4006,6,c	;volatile
 26369                           
 26370                           ;eeprom.c: 96: EECON1bits.RD = 1;
 26371  0017C0  80A6               	bsf	4006,0,c	;volatile
 26372                           
 26373                           ;eeprom.c: 97: data = EEDATA;
 26374  0017C2  CFA8 F062          	movff	4008,readEEPROM@data	;volatile
 26375                           
 26376                           ; BSR set to: 0
 26377                           ;eeprom.c: 99: return data;
 26378  0017C6  5162               	movf	readEEPROM@data& (0+255),w,b
 26379                           
 26380                           ; BSR set to: 0
 26381  0017C8  0012               	return	
 26382  0017CA                     __end_of_readEEPROM:
 26383                           	opt stack 0
 26384                           tblptru	equ	0xFF8
 26385                           tblptrh	equ	0xFF7
 26386                           tblptrl	equ	0xFF6
 26387                           tablat	equ	0xFF5
 26388                           prodh	equ	0xFF4
 26389                           prodl	equ	0xFF3
 26390                           intcon	equ	0xFF2
 26391                           indf0	equ	0xFEF
 26392                           postinc0	equ	0xFEE
 26393                           fsr0h	equ	0xFEA
 26394                           fsr0l	equ	0xFE9
 26395                           wreg	equ	0xFE8
 26396                           indf1	equ	0xFE7
 26397                           postinc1	equ	0xFE6
 26398                           postdec1	equ	0xFE5
 26399                           fsr1h	equ	0xFE2
 26400                           fsr1l	equ	0xFE1
 26401                           indf2	equ	0xFDF
 26402                           postinc2	equ	0xFDE
 26403                           postdec2	equ	0xFDD
 26404                           plusw2	equ	0xFDB
 26405                           fsr2h	equ	0xFDA
 26406                           fsr2l	equ	0xFD9
 26407                           status	equ	0xFD8
 26408                           
 26409 ;; *************** function _fifo_init *****************
 26410 ;; Defined at:
 26411 ;;		line 14 in file "fifo.c"
 26412 ;; Parameters:    Size  Location     Type
 26413 ;;  f               1    wreg     PTR struct .
 26414 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26415 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 26416 ;;		 -> caninputBuffer(494), inputBuffer(128), 
 26417 ;;  size            2    2[BANK0 ] unsigned short 
 26418 ;; Auto vars:     Size  Location     Type
 26419 ;;  f               1    4[BANK0 ] PTR struct .
 26420 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26421 ;; Return value:  Size  Location     Type
 26422 ;;		None               void
 26423 ;; Registers used:
 26424 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26425 ;; Tracked objects:
 26426 ;;		On entry : F/0
 26427 ;;		On exit  : F/0
 26428 ;;		Unchanged: 0/0
 26429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26430 ;;      Params:         0       4       0       0       0       0       0
 26431 ;;      Locals:         0       1       0       0       0       0       0
 26432 ;;      Temps:          0       0       0       0       0       0       0
 26433 ;;      Totals:         0       5       0       0       0       0       0
 26434 ;;Total ram usage:        5 bytes
 26435 ;; Hardware stack levels used:    1
 26436 ;; Hardware stack levels required when called:    3
 26437 ;; This function calls:
 26438 ;;		Nothing
 26439 ;; This function is called by:
 26440 ;;		_main
 26441 ;; This function uses a non-reentrant model
 26442 ;;
 26443                           
 26444                           	psect	text80
 26445  001AC0                     __ptext80:
 26446                           	opt stack 0
 26447  001AC0                     _fifo_init:
 26448                           	opt stack 26
 26449                           
 26450                           ; BSR set to: 0
 26451                           ;incstack = 0
 26452                           ;incstack = 0
 26453                           ;fifo_init@f stored from wreg
 26454  001AC0  CFE8 F064          	movff	wreg,fifo_init@f
 26455                           
 26456                           ; BSR set to: 0
 26457                           ;fifo.c: 15: f->head = 0;
 26458  001AC4  5164               	movf	fifo_init@f& (0+255),w,b
 26459  001AC6  6ED9               	movwf	fsr2l,c
 26460  001AC8  6ADA               	clrf	fsr2h,c
 26461  001ACA  0E02               	movlw	2
 26462                           
 26463                           ;fifo.c: 16: f->tail = 0;
 26464  001ACC  D811               	call	PL90	;call to abstracted procedure
 26465  001ACE  0E04               	movlw	4
 26466                           
 26467                           ;fifo.c: 17: f->size = size;
 26468  001AD0  D80F               	call	PL90	;call to abstracted procedure
 26469  001AD2  0E06               	movlw	6
 26470  001AD4  26D9               	addwf	fsr2l,f,c
 26471  001AD6  6ADA               	clrf	fsr2h,c
 26472  001AD8  C062  FFDE         	movff	fifo_init@size,postinc2
 26473  001ADC  C063  FFDD         	movff	fifo_init@size+1,postdec2
 26474                           
 26475                           ; BSR set to: 0
 26476                           ;fifo.c: 18: f->buf = buf;
 26477  001AE0  5164               	movf	fifo_init@f& (0+255),w,b
 26478  001AE2  6ED9               	movwf	fsr2l,c
 26479  001AE4  6ADA               	clrf	fsr2h,c
 26480  001AE6  C060  FFDE         	movff	fifo_init@buf,postinc2
 26481  001AEA  C061  FFDD         	movff	fifo_init@buf+1,postdec2
 26482                           
 26483                           ; BSR set to: 0
 26484  001AEE  0012               	return	
 26485  001AF0                     __end_of_fifo_init:
 26486                           	opt stack 0
 26487  001AF0                     PL90:
 26488                           	opt stack 26
 26489  001AF0  26D9               	addwf	fsr2l,f,c
 26490  001AF2  6ADA               	clrf	fsr2h,c
 26491  001AF4  6ADE               	clrf	postinc2,c
 26492  001AF6  6ADD               	clrf	postdec2,c
 26493  001AF8  5164               	movf	fifo_init@f& (0+255),w,b
 26494  001AFA  6ED9               	movwf	fsr2l,c
 26495  001AFC  6ADA               	clrf	fsr2h,c
 26496  001AFE  0012               	return	
 26497  001B00                     __end_ofPL90:
 26498                           	opt stack 0
 26499                           tblptru	equ	0xFF8
 26500                           tblptrh	equ	0xFF7
 26501                           tblptrl	equ	0xFF6
 26502                           tablat	equ	0xFF5
 26503                           prodh	equ	0xFF4
 26504                           prodl	equ	0xFF3
 26505                           intcon	equ	0xFF2
 26506                           indf0	equ	0xFEF
 26507                           postinc0	equ	0xFEE
 26508                           fsr0h	equ	0xFEA
 26509                           fsr0l	equ	0xFE9
 26510                           wreg	equ	0xFE8
 26511                           indf1	equ	0xFE7
 26512                           postinc1	equ	0xFE6
 26513                           postdec1	equ	0xFE5
 26514                           fsr1h	equ	0xFE2
 26515                           fsr1l	equ	0xFE1
 26516                           indf2	equ	0xFDF
 26517                           postinc2	equ	0xFDE
 26518                           postdec2	equ	0xFDD
 26519                           plusw2	equ	0xFDB
 26520                           fsr2h	equ	0xFDA
 26521                           fsr2l	equ	0xFD9
 26522                           status	equ	0xFD8
 26523                           
 26524 ;; *************** function _Interrupt *****************
 26525 ;; Defined at:
 26526 ;;		line 137 in file "main.c"
 26527 ;; Parameters:    Size  Location     Type
 26528 ;;		None
 26529 ;; Auto vars:     Size  Location     Type
 26530 ;;  data            8   27[COMRAM] unsigned char [8]
 26531 ;;  id              4   37[COMRAM] unsigned long 
 26532 ;;  flags           1   41[COMRAM] enum E16358
 26533 ;;  dlc             1   36[COMRAM] unsigned char 
 26534 ;;  c               1   35[COMRAM] unsigned char 
 26535 ;; Return value:  Size  Location     Type
 26536 ;;		None               void
 26537 ;; Registers used:
 26538 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26539 ;; Tracked objects:
 26540 ;;		On entry : 0/0
 26541 ;;		On exit  : 0/0
 26542 ;;		Unchanged: 0/0
 26543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26544 ;;      Params:         0       0       0       0       0       0       0
 26545 ;;      Locals:        15       0       0       0       0       0       0
 26546 ;;      Temps:          9       0       0       0       0       0       0
 26547 ;;      Totals:        24       0       0       0       0       0       0
 26548 ;;Total ram usage:       24 bytes
 26549 ;; Hardware stack levels used:    1
 26550 ;; Hardware stack levels required when called:    2
 26551 ;; This function calls:
 26552 ;;		_ReadUSART
 26553 ;;		_fifo_write
 26554 ;;		_ECANReceiveMessage
 26555 ;;		_fifo_getFree
 26556 ;;		i1_WriteTimer0
 26557 ;; This function is called by:
 26558 ;;		Interrupt level 1
 26559 ;; This function uses a non-reentrant model
 26560 ;;
 26561                           
 26562                           	psect	intcodelo
 26563  000018                     __pintcodelo:
 26564                           	opt stack 0
 26565  000018                     _Interrupt:
 26566                           	opt stack 19
 26567                           
 26568                           ; BSR set to: 0
 26569                           ;incstack = 0
 26570  000018  CFD8 F03F          	movff	status,??_Interrupt+2
 26571  00001C  CFE8 F040          	movff	wreg,??_Interrupt+3
 26572  000020  CFE0 F041          	movff	bsr,??_Interrupt+4
 26573  000024  CFE1 F042          	movff	fsr1l,??_Interrupt+5
 26574  000028  CFE2 F043          	movff	fsr1h,??_Interrupt+6
 26575  00002C  CFD9 F044          	movff	fsr2l,??_Interrupt+7
 26576  000030  CFDA F045          	movff	fsr2h,??_Interrupt+8
 26577  000034                     
 26578                           ;main.c: 138: uint8_t c;
 26579                           ;main.c: 141: if ( 1 == PIR1bits.RCIF ) {
 26580  000034  AA9E               	btfss	3998,5,c	;volatile
 26581  000036  D001               	goto	i1u1690_21
 26582  000038  D001               	goto	i1u1690_20
 26583  00003A                     i1u1690_21:
 26584  00003A  D020               	goto	i1l387
 26585  00003C                     i1u1690_20:
 26586  00003C                     
 26587                           ;main.c: 143: c = ReadUSART();
 26588  00003C  EC10  F00C         	call	_ReadUSART	;wreg free
 26589  000040  6E4E               	movwf	Interrupt@c,c
 26590  000042                     
 26591                           ;main.c: 145: if (1 != fifo_write(&serialInputFifo, &c, 1)) {
 26592  000042  0E4E               	movlw	low Interrupt@c
 26593  000044  6E2B               	movwf	?_fifo_write,c
 26594  000046  0E01               	movlw	1
 26595  000048  6E2C               	movwf	?_fifo_write+1,c
 26596  00004A  0E00               	movlw	0
 26597  00004C  6E2D               	movwf	?_fifo_write+2,c
 26598  00004E  0E00               	movlw	0
 26599  000050  6E2E               	movwf	?_fifo_write+3,c
 26600  000052  0E00               	movlw	0
 26601  000054  6E2F               	movwf	?_fifo_write+4,c
 26602  000056  0E23               	movlw	_serialInputFifo& (0+255)
 26603  000058  EC44  F01B         	call	_fifo_write
 26604  00005C  042B               	decf	?_fifo_write,w,c
 26605  00005E  102C               	iorwf	?_fifo_write+1,w,c
 26606  000060  B4D8               	btfsc	status,2,c
 26607  000062  D001               	goto	i1u1691_21
 26608  000064  D001               	goto	i1u1691_20
 26609  000066                     i1u1691_21:
 26610  000066  D008               	goto	i1l12976
 26611  000068                     i1u1691_20:
 26612  000068                     
 26613                           ;main.c: 147: uart_receiveOverruns++;
 26614  000068  0E01               	movlw	1
 26615  00006A  2605               	addwf	_uart_receiveOverruns,f,c
 26616  00006C  0E00               	movlw	0
 26617  00006E  2206               	addwfc	_uart_receiveOverruns+1,f,c
 26618  000070  0E00               	movlw	0
 26619  000072  2207               	addwfc	_uart_receiveOverruns+2,f,c
 26620  000074  0E00               	movlw	0
 26621  000076  2208               	addwfc	_uart_receiveOverruns+3,f,c
 26622  000078                     i1l12976:
 26623                           
 26624                           ;main.c: 148: }
 26625                           ;main.c: 151: PIR1bits.RCIF = 0;
 26626  000078  9A9E               	bcf	3998,5,c	;volatile
 26627                           
 26628                           ;main.c: 153: }
 26629  00007A  D07D               	goto	i1l389
 26630  00007C                     i1l387:
 26631                           
 26632                           ;main.c: 155: else if (1 == INTCONbits.TMR0IF) {
 26633  00007C  A4F2               	btfss	intcon,2,c	;volatile
 26634  00007E  D001               	goto	i1u1692_21
 26635  000080  D001               	goto	i1u1692_20
 26636  000082                     i1u1692_21:
 26637  000082  D079               	goto	i1l389
 26638  000084                     i1u1692_20:
 26639  000084                     
 26640                           ;main.c: 157: WriteTimer0(0xfb1d);
 26641  000084  0EFB               	movlw	251
 26642  000086  6E2C               	movwf	?i1_WriteTimer0+1,c
 26643  000088  0E1D               	movlw	29
 26644  00008A  6E2B               	movwf	?i1_WriteTimer0,c
 26645  00008C  ECD3  F00B         	call	i1_WriteTimer0	;wreg free
 26646  000090                     
 26647                           ;main.c: 159: timer++;
 26648  000090  0E01               	movlw	1
 26649  000092  0100               	movlb	0	; () banked
 26650  000094  27E9               	addwf	_timer& (0+255),f,b	;volatile
 26651  000096  0E00               	movlw	0
 26652  000098  23EA               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 26653  00009A  0E00               	movlw	0
 26654  00009C  23EB               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 26655  00009E  0E00               	movlw	0
 26656  0000A0  23EC               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 26657  0000A2                     
 26658                           ; BSR set to: 0
 26659                           ;main.c: 160: timekeeper++;
 26660  0000A2  0E01               	movlw	1
 26661  0000A4  27E5               	addwf	_timekeeper& (0+255),f,b	;volatile
 26662  0000A6  0E00               	movlw	0
 26663  0000A8  23E6               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 26664  0000AA  0E00               	movlw	0
 26665  0000AC  23E7               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 26666  0000AE  0E00               	movlw	0
 26667  0000B0  23E8               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 26668  0000B2                     
 26669                           ; BSR set to: 0
 26670                           ;main.c: 163: status_led_cnt++;
 26671  0000B2  4A0F               	infsnz	_status_led_cnt,f,c	;volatile
 26672  0000B4  2A10               	incf	_status_led_cnt+1,f,c	;volatile
 26673  0000B6                     
 26674                           ; BSR set to: 0
 26675                           ;main.c: 164: if ((2 == ledFunctionality) &&
 26676                           ;main.c: 165: (status_led_cnt > 1000)) {
 26677  0000B6  501A               	movf	_ledFunctionality,w,c
 26678  0000B8  0A02               	xorlw	2
 26679  0000BA  A4D8               	btfss	status,2,c
 26680  0000BC  D001               	goto	i1u1693_21
 26681  0000BE  D001               	goto	i1u1693_20
 26682  0000C0                     i1u1693_21:
 26683  0000C0  D00C               	goto	i1l12992
 26684  0000C2                     i1u1693_20:
 26685  0000C2                     
 26686                           ; BSR set to: 0
 26687  0000C2  0EE9               	movlw	233
 26688  0000C4  5C0F               	subwf	_status_led_cnt,w,c	;volatile
 26689  0000C6  0E03               	movlw	3
 26690  0000C8  5810               	subwfb	_status_led_cnt+1,w,c	;volatile
 26691  0000CA  A0D8               	btfss	status,0,c
 26692  0000CC  D001               	goto	i1u1694_21
 26693  0000CE  D001               	goto	i1u1694_20
 26694  0000D0                     i1u1694_21:
 26695  0000D0  D004               	goto	i1l12992
 26696  0000D2                     i1u1694_20:
 26697  0000D2                     i1l12990:
 26698                           
 26699                           ; BSR set to: 0
 26700                           ;main.c: 166: LATC1 = ~LATC1;
 26701  0000D2  728B               	btg	3979,1,c	;volatile
 26702                           
 26703                           ;main.c: 167: status_led_cnt = 0;
 26704  0000D4  6A0F               	clrf	_status_led_cnt,c	;volatile
 26705  0000D6  6A10               	clrf	_status_led_cnt+1,c	;volatile
 26706                           
 26707                           ;main.c: 168: }
 26708  0000D8  D04D               	goto	i1l392
 26709  0000DA                     i1l12992:
 26710                           
 26711                           ; BSR set to: 0
 26712                           ;main.c: 169: else if ((3 == ledFunctionality) &&
 26713                           ;main.c: 170: (status_led_cnt > 400)) {
 26714  0000DA  501A               	movf	_ledFunctionality,w,c
 26715  0000DC  0A03               	xorlw	3
 26716  0000DE  A4D8               	btfss	status,2,c
 26717  0000E0  D001               	goto	i1u1695_21
 26718  0000E2  D001               	goto	i1u1695_20
 26719  0000E4                     i1u1695_21:
 26720  0000E4  D009               	goto	i1l12998
 26721  0000E6                     i1u1695_20:
 26722  0000E6                     
 26723                           ; BSR set to: 0
 26724  0000E6  0E91               	movlw	145
 26725  0000E8  5C0F               	subwf	_status_led_cnt,w,c	;volatile
 26726  0000EA  0E01               	movlw	1
 26727  0000EC  5810               	subwfb	_status_led_cnt+1,w,c	;volatile
 26728  0000EE  A0D8               	btfss	status,0,c
 26729  0000F0  D001               	goto	i1u1696_21
 26730  0000F2  D001               	goto	i1u1696_20
 26731  0000F4                     i1u1696_21:
 26732  0000F4  D001               	goto	i1l12998
 26733  0000F6                     i1u1696_20:
 26734  0000F6  D7ED               	goto	i1l12990
 26735  0000F8                     i1l12998:
 26736                           
 26737                           ; BSR set to: 0
 26738                           ;main.c: 174: else if ((4 == ledFunctionality) &&
 26739                           ;main.c: 175: (status_led_cnt > 100)) {
 26740  0000F8  501A               	movf	_ledFunctionality,w,c
 26741  0000FA  0A04               	xorlw	4
 26742  0000FC  A4D8               	btfss	status,2,c
 26743  0000FE  D001               	goto	i1u1697_21
 26744  000100  D001               	goto	i1u1697_20
 26745  000102                     i1u1697_21:
 26746  000102  D009               	goto	i1l13004
 26747  000104                     i1u1697_20:
 26748  000104                     
 26749                           ; BSR set to: 0
 26750  000104  0E65               	movlw	101
 26751  000106  5C0F               	subwf	_status_led_cnt,w,c	;volatile
 26752  000108  0E00               	movlw	0
 26753  00010A  5810               	subwfb	_status_led_cnt+1,w,c	;volatile
 26754  00010C  A0D8               	btfss	status,0,c
 26755  00010E  D001               	goto	i1u1698_21
 26756  000110  D001               	goto	i1u1698_20
 26757  000112                     i1u1698_21:
 26758  000112  D001               	goto	i1l13004
 26759  000114                     i1u1698_20:
 26760  000114  D7DE               	goto	i1l12990
 26761  000116                     i1l13004:
 26762                           
 26763                           ; BSR set to: 0
 26764                           ;main.c: 179: else if ((5 == ledFunctionality) &&
 26765                           ;main.c: 180: (status_led_cnt > 70)) {
 26766  000116  501A               	movf	_ledFunctionality,w,c
 26767  000118  0A05               	xorlw	5
 26768  00011A  A4D8               	btfss	status,2,c
 26769  00011C  D001               	goto	i1u1699_21
 26770  00011E  D001               	goto	i1u1699_20
 26771  000120                     i1u1699_21:
 26772  000120  D009               	goto	i1l13010
 26773  000122                     i1u1699_20:
 26774  000122                     
 26775                           ; BSR set to: 0
 26776  000122  0E47               	movlw	71
 26777  000124  5C0F               	subwf	_status_led_cnt,w,c	;volatile
 26778  000126  0E00               	movlw	0
 26779  000128  5810               	subwfb	_status_led_cnt+1,w,c	;volatile
 26780  00012A  A0D8               	btfss	status,0,c
 26781  00012C  D001               	goto	i1u1700_21
 26782  00012E  D001               	goto	i1u1700_20
 26783  000130                     i1u1700_21:
 26784  000130  D001               	goto	i1l13010
 26785  000132                     i1u1700_20:
 26786  000132  D7CF               	goto	i1l12990
 26787  000134                     i1l13010:
 26788                           
 26789                           ; BSR set to: 0
 26790                           ;main.c: 184: else if ((6 == ledFunctionality) &&
 26791                           ;main.c: 185: (status_led_cnt > 40)) {
 26792  000134  501A               	movf	_ledFunctionality,w,c
 26793  000136  0A06               	xorlw	6
 26794  000138  A4D8               	btfss	status,2,c
 26795  00013A  D001               	goto	i1u1701_21
 26796  00013C  D001               	goto	i1u1701_20
 26797  00013E                     i1u1701_21:
 26798  00013E  D009               	goto	i1l13016
 26799  000140                     i1u1701_20:
 26800  000140                     
 26801                           ; BSR set to: 0
 26802  000140  0E29               	movlw	41
 26803  000142  5C0F               	subwf	_status_led_cnt,w,c	;volatile
 26804  000144  0E00               	movlw	0
 26805  000146  5810               	subwfb	_status_led_cnt+1,w,c	;volatile
 26806  000148  A0D8               	btfss	status,0,c
 26807  00014A  D001               	goto	i1u1702_21
 26808  00014C  D001               	goto	i1u1702_20
 26809  00014E                     i1u1702_21:
 26810  00014E  D001               	goto	i1l13016
 26811  000150                     i1u1702_20:
 26812  000150  D7C0               	goto	i1l12990
 26813  000152                     i1l13016:
 26814                           
 26815                           ; BSR set to: 0
 26816                           ;main.c: 189: else if (1 == ledFunctionality) {
 26817  000152  041A               	decf	_ledFunctionality,w,c
 26818  000154  A4D8               	btfss	status,2,c
 26819  000156  D001               	goto	i1u1703_21
 26820  000158  D001               	goto	i1u1703_20
 26821  00015A                     i1u1703_21:
 26822  00015A  D004               	goto	i1l401
 26823  00015C                     i1u1703_20:
 26824  00015C                     
 26825                           ; BSR set to: 0
 26826                           ;main.c: 190: LATC1 = 1;
 26827  00015C  828B               	bsf	3979,1,c	;volatile
 26828                           
 26829                           ;main.c: 191: status_led_cnt = 0;
 26830  00015E  6A0F               	clrf	_status_led_cnt,c	;volatile
 26831  000160  6A10               	clrf	_status_led_cnt+1,c	;volatile
 26832                           
 26833                           ;main.c: 192: }
 26834  000162  D008               	goto	i1l392
 26835  000164                     i1l401:
 26836                           
 26837                           ; BSR set to: 0
 26838                           ;main.c: 193: else if (0 == ledFunctionality) {
 26839  000164  661A               	tstfsz	_ledFunctionality,c
 26840  000166  D001               	goto	i1u1704_21
 26841  000168  D001               	goto	i1u1704_20
 26842  00016A                     i1u1704_21:
 26843  00016A  D004               	goto	i1l398
 26844  00016C                     i1u1704_20:
 26845  00016C                     
 26846                           ; BSR set to: 0
 26847                           ;main.c: 194: LATC1 = 0;
 26848  00016C  928B               	bcf	3979,1,c	;volatile
 26849                           
 26850                           ;main.c: 195: status_led_cnt = 0;
 26851  00016E  6A0F               	clrf	_status_led_cnt,c	;volatile
 26852  000170  6A10               	clrf	_status_led_cnt+1,c	;volatile
 26853  000172  D000               	goto	i1l392
 26854  000174                     i1l398:
 26855  000174                     i1l392:
 26856                           
 26857                           ; BSR set to: 0
 26858                           ;main.c: 196: }
 26859                           ;main.c: 198: INTCONbits.TMR0IF = 0;
 26860  000174  94F2               	bcf	intcon,2,c	;volatile
 26861  000176                     i1l389:
 26862                           
 26863                           ;main.c: 199: }
 26864                           ;main.c: 202: if ( 1 == IRXIF ) {
 26865  000176  AEA4               	btfss	4004,7,c	;volatile
 26866  000178  D001               	goto	i1u1705_21
 26867  00017A  D001               	goto	i1u1705_20
 26868  00017C                     i1u1705_21:
 26869  00017C  D001               	goto	i1l404
 26870  00017E                     i1u1705_20:
 26871  00017E                     
 26872                           ;main.c: 204: IRXIF = 0;
 26873  00017E  9EA4               	bcf	4004,7,c	;volatile
 26874  000180                     i1l404:
 26875                           
 26876                           ;main.c: 205: }
 26877                           ;main.c: 208: if ( RXBnIF ) {
 26878  000180  A2A4               	btfss	4004,1,c	;volatile
 26879  000182  D001               	goto	i1u1706_21
 26880  000184  D001               	goto	i1u1706_20
 26881  000186                     i1u1706_21:
 26882  000186  D061               	goto	i1l413
 26883  000188                     i1u1706_20:
 26884  000188                     
 26885                           ;main.c: 210: uint32_t id;
 26886                           ;main.c: 211: uint8_t dlc;
 26887                           ;main.c: 212: uint8_t data[8];
 26888                           ;main.c: 213: ECAN_RX_MSG_FLAGS flags;
 26889                           ;main.c: 215: if ( ECANReceiveMessage((unsigned long *)&id,
 26890                           ;main.c: 216: (BYTE*)&data,
 26891                           ;main.c: 217: (BYTE*)&dlc,
 26892                           ;main.c: 218: &flags) ) {
 26893  000188  0E46               	movlw	low Interrupt@data
 26894  00018A  6E32               	movwf	?_ECANReceiveMessage,c
 26895  00018C  0E4F               	movlw	low Interrupt@dlc
 26896  00018E  6E33               	movwf	?_ECANReceiveMessage+1,c
 26897  000190  0E54               	movlw	low Interrupt@flags
 26898  000192  6E34               	movwf	?_ECANReceiveMessage+2,c
 26899  000194  0E50               	movlw	Interrupt@id& (0+255)
 26900  000196  EC62  F023         	call	_ECANReceiveMessage
 26901  00019A  0900               	iorlw	0
 26902  00019C  B4D8               	btfsc	status,2,c
 26903  00019E  D001               	goto	i1u1707_21
 26904  0001A0  D001               	goto	i1u1707_20
 26905  0001A2                     i1u1707_21:
 26906  0001A2  D052               	goto	i1l13042
 26907  0001A4                     i1u1707_20:
 26908  0001A4                     
 26909                           ;main.c: 221: if ( flags & ECAN_RX_OVERFLOW ) {
 26910  0001A4  A654               	btfss	Interrupt@flags,3,c
 26911  0001A6  D001               	goto	i1u1708_21
 26912  0001A8  D001               	goto	i1u1708_20
 26913  0001AA                     i1u1708_21:
 26914  0001AA  D00E               	goto	i1l407
 26915  0001AC                     i1u1708_20:
 26916  0001AC                     
 26917                           ;main.c: 222: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 26918  0001AC  AA54               	btfss	Interrupt@flags,5,c
 26919  0001AE  D001               	goto	i1u1709_21
 26920  0001B0  D001               	goto	i1u1709_20
 26921  0001B2                     i1u1709_21:
 26922  0001B2  D04A               	goto	i1l13042
 26923  0001B4                     i1u1709_20:
 26924  0001B4                     i1l13030:
 26925  0001B4  0E01               	movlw	1
 26926  0001B6  0100               	movlb	0	; () banked
 26927  0001B8  27D1               	addwf	_can_receiveOverruns& (0+255),f,b
 26928  0001BA  0E00               	movlw	0
 26929  0001BC  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 26930  0001BE  0E00               	movlw	0
 26931  0001C0  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 26932  0001C2  0E00               	movlw	0
 26933  0001C4  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 26934  0001C6  D040               	goto	i1l13042
 26935  0001C8                     i1l407:
 26936                           
 26937                           ;main.c: 224: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 26938                           ;main.c: 225: ( flags & ECAN_RX_XTD_FRAME ) ) {
 26939  0001C8  BC54               	btfsc	Interrupt@flags,6,c
 26940  0001CA  D001               	goto	i1u1710_21
 26941  0001CC  D001               	goto	i1u1710_20
 26942  0001CE                     i1u1710_21:
 26943  0001CE  D03C               	goto	i1l13042
 26944  0001D0                     i1u1710_20:
 26945  0001D0  AA54               	btfss	Interrupt@flags,5,c
 26946  0001D2  D001               	goto	i1u1711_21
 26947  0001D4  D001               	goto	i1u1711_20
 26948  0001D6                     i1u1711_21:
 26949  0001D6  D038               	goto	i1l13042
 26950  0001D8                     i1u1711_20:
 26951  0001D8                     
 26952                           ;main.c: 227: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 26953  0001D8  504F               	movf	Interrupt@dlc,w,c
 26954  0001DA  6E3D               	movwf	??_Interrupt& (0+255),c
 26955  0001DC  6A3E               	clrf	(??_Interrupt+1)& (0+255),c
 26956  0001DE  0E05               	movlw	5
 26957  0001E0  263D               	addwf	??_Interrupt,f,c
 26958  0001E2  0E00               	movlw	0
 26959  0001E4  223E               	addwfc	??_Interrupt+1,f,c
 26960  0001E6  0E1B               	movlw	_canInputFifo& (0+255)
 26961  0001E8  EC65  F013         	call	_fifo_getFree
 26962  0001EC  503D               	movf	??_Interrupt,w,c
 26963  0001EE  5C2B               	subwf	?_fifo_getFree,w,c
 26964  0001F0  503E               	movf	??_Interrupt+1,w,c
 26965  0001F2  582C               	subwfb	?_fifo_getFree+1,w,c
 26966  0001F4  A0D8               	btfss	status,0,c
 26967  0001F6  D001               	goto	i1u1712_21
 26968  0001F8  D001               	goto	i1u1712_20
 26969  0001FA                     i1u1712_21:
 26970  0001FA  D7DC               	goto	i1l13030
 26971  0001FC                     i1u1712_20:
 26972  0001FC                     
 26973                           ;main.c: 228: fifo_write( &canInputFifo, (uint8_t *)&id, 4 );
 26974  0001FC  0E50               	movlw	low Interrupt@id
 26975  0001FE  6E2B               	movwf	?_fifo_write,c
 26976  000200  0E04               	movlw	4
 26977  000202  6E2C               	movwf	?_fifo_write+1,c
 26978  000204  0E00               	movlw	0
 26979  000206  6E2D               	movwf	?_fifo_write+2,c
 26980  000208  0E00               	movlw	0
 26981  00020A  6E2E               	movwf	?_fifo_write+3,c
 26982  00020C  0E00               	movlw	0
 26983  00020E  6E2F               	movwf	?_fifo_write+4,c
 26984  000210  0E1B               	movlw	_canInputFifo& (0+255)
 26985  000212  EC44  F01B         	call	_fifo_write
 26986                           
 26987                           ;main.c: 229: fifo_write( &canInputFifo, &dlc, 1 );
 26988  000216  0E4F               	movlw	low Interrupt@dlc
 26989  000218  6E2B               	movwf	?_fifo_write,c
 26990  00021A  0E01               	movlw	1
 26991  00021C  6E2C               	movwf	?_fifo_write+1,c
 26992  00021E  0E00               	movlw	0
 26993  000220  6E2D               	movwf	?_fifo_write+2,c
 26994  000222  0E00               	movlw	0
 26995  000224  6E2E               	movwf	?_fifo_write+3,c
 26996  000226  0E00               	movlw	0
 26997  000228  6E2F               	movwf	?_fifo_write+4,c
 26998  00022A  0E1B               	movlw	_canInputFifo& (0+255)
 26999  00022C  EC44  F01B         	call	_fifo_write
 27000                           
 27001                           ;main.c: 230: fifo_write( &canInputFifo, (uint8_t *)&data, dlc );
 27002  000230  0E46               	movlw	low Interrupt@data
 27003  000232  6E2B               	movwf	?_fifo_write,c
 27004  000234  504F               	movf	Interrupt@dlc,w,c
 27005  000236  6E2C               	movwf	?_fifo_write+1,c
 27006  000238  6A2D               	clrf	?_fifo_write+2,c
 27007  00023A  6A2E               	clrf	?_fifo_write+3,c
 27008  00023C  6A2F               	clrf	?_fifo_write+4,c
 27009  00023E  0E1B               	movlw	_canInputFifo& (0+255)
 27010  000240  EC44  F01B         	call	_fifo_write
 27011  000244                     
 27012                           ;main.c: 232: canrxcount++;
 27013  000244  0100               	movlb	0	; () banked
 27014  000246  2BF0               	incf	_canrxcount& (0+255),f,b	;volatile
 27015  000248                     i1l13042:
 27016                           
 27017                           ;main.c: 236: }
 27018                           ;main.c: 238: }
 27019                           ;main.c: 240: }
 27020                           ;main.c: 243: RXBnIF = 0;
 27021  000248  92A4               	bcf	4004,1,c	;volatile
 27022  00024A                     i1l413:
 27023  00024A  C045  FFDA         	movff	??_Interrupt+8,fsr2h
 27024  00024E  C044  FFD9         	movff	??_Interrupt+7,fsr2l
 27025  000252  C043  FFE2         	movff	??_Interrupt+6,fsr1h
 27026  000256  C042  FFE1         	movff	??_Interrupt+5,fsr1l
 27027  00025A  C041  FFE0         	movff	??_Interrupt+4,bsr
 27028  00025E  C040  FFE8         	movff	??_Interrupt+3,wreg
 27029  000262  C03F  FFD8         	movff	??_Interrupt+2,status
 27030  000266  0010               	retfie	
 27031  000268                     __end_of_Interrupt:
 27032                           	opt stack 0
 27033                           tblptru	equ	0xFF8
 27034                           tblptrh	equ	0xFF7
 27035                           tblptrl	equ	0xFF6
 27036                           tablat	equ	0xFF5
 27037                           prodh	equ	0xFF4
 27038                           prodl	equ	0xFF3
 27039                           intcon	equ	0xFF2
 27040                           indf0	equ	0xFEF
 27041                           postinc0	equ	0xFEE
 27042                           fsr0h	equ	0xFEA
 27043                           fsr0l	equ	0xFE9
 27044                           wreg	equ	0xFE8
 27045                           indf1	equ	0xFE7
 27046                           postinc1	equ	0xFE6
 27047                           postdec1	equ	0xFE5
 27048                           fsr1h	equ	0xFE2
 27049                           fsr1l	equ	0xFE1
 27050                           bsr	equ	0xFE0
 27051                           indf2	equ	0xFDF
 27052                           postinc2	equ	0xFDE
 27053                           postdec2	equ	0xFDD
 27054                           plusw2	equ	0xFDB
 27055                           fsr2h	equ	0xFDA
 27056                           fsr2l	equ	0xFD9
 27057                           status	equ	0xFD8
 27058                           
 27059 ;; *************** function i1_WriteTimer0 *****************
 27060 ;; Defined at:
 27061 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27062 ;; Parameters:    Size  Location     Type
 27063 ;;  timer0          2    0[COMRAM] unsigned int 
 27064 ;; Auto vars:     Size  Location     Type
 27065 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 27066 ;; Return value:  Size  Location     Type
 27067 ;;		None               void
 27068 ;; Registers used:
 27069 ;;		None
 27070 ;; Tracked objects:
 27071 ;;		On entry : 0/0
 27072 ;;		On exit  : 0/0
 27073 ;;		Unchanged: 0/0
 27074 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27075 ;;      Params:         2       0       0       0       0       0       0
 27076 ;;      Locals:         2       0       0       0       0       0       0
 27077 ;;      Temps:          0       0       0       0       0       0       0
 27078 ;;      Totals:         4       0       0       0       0       0       0
 27079 ;;Total ram usage:        4 bytes
 27080 ;; Hardware stack levels used:    1
 27081 ;; This function calls:
 27082 ;;		Nothing
 27083 ;; This function is called by:
 27084 ;;		_Interrupt
 27085 ;; This function uses a non-reentrant model
 27086 ;;
 27087                           
 27088                           	psect	text82
 27089  0017A6                     __ptext82:
 27090                           	opt stack 0
 27091  0017A6                     i1_WriteTimer0:
 27092                           	opt stack 20
 27093                           
 27094                           ;incstack = 0
 27095                           ;incstack = 0
 27096  0017A6  C02B  F02D         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 27097  0017AA  C02C  F02E         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 27098  0017AE  C02E  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 27099  0017B2  C02D  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 27100  0017B6  0012               	return	
 27101  0017B8                     __end_ofi1_WriteTimer0:
 27102                           	opt stack 0
 27103                           tblptru	equ	0xFF8
 27104                           tblptrh	equ	0xFF7
 27105                           tblptrl	equ	0xFF6
 27106                           tablat	equ	0xFF5
 27107                           prodh	equ	0xFF4
 27108                           prodl	equ	0xFF3
 27109                           intcon	equ	0xFF2
 27110                           indf0	equ	0xFEF
 27111                           postinc0	equ	0xFEE
 27112                           fsr0h	equ	0xFEA
 27113                           fsr0l	equ	0xFE9
 27114                           wreg	equ	0xFE8
 27115                           indf1	equ	0xFE7
 27116                           postinc1	equ	0xFE6
 27117                           postdec1	equ	0xFE5
 27118                           fsr1h	equ	0xFE2
 27119                           fsr1l	equ	0xFE1
 27120                           bsr	equ	0xFE0
 27121                           indf2	equ	0xFDF
 27122                           postinc2	equ	0xFDE
 27123                           postdec2	equ	0xFDD
 27124                           plusw2	equ	0xFDB
 27125                           fsr2h	equ	0xFDA
 27126                           fsr2l	equ	0xFD9
 27127                           status	equ	0xFD8
 27128                           
 27129 ;; *************** function _fifo_getFree *****************
 27130 ;; Defined at:
 27131 ;;		line 96 in file "fifo.c"
 27132 ;; Parameters:    Size  Location     Type
 27133 ;;  f               1    wreg     PTR struct .
 27134 ;;		 -> canInputFifo(8), 
 27135 ;; Auto vars:     Size  Location     Type
 27136 ;;  f               1   10[COMRAM] PTR struct .
 27137 ;;		 -> canInputFifo(8), 
 27138 ;; Return value:  Size  Location     Type
 27139 ;;                  2    0[COMRAM] unsigned short 
 27140 ;; Registers used:
 27141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27142 ;; Tracked objects:
 27143 ;;		On entry : 0/0
 27144 ;;		On exit  : 0/0
 27145 ;;		Unchanged: 0/0
 27146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27147 ;;      Params:         2       0       0       0       0       0       0
 27148 ;;      Locals:         1       0       0       0       0       0       0
 27149 ;;      Temps:          8       0       0       0       0       0       0
 27150 ;;      Totals:        11       0       0       0       0       0       0
 27151 ;;Total ram usage:       11 bytes
 27152 ;; Hardware stack levels used:    1
 27153 ;; This function calls:
 27154 ;;		Nothing
 27155 ;; This function is called by:
 27156 ;;		_Interrupt
 27157 ;; This function uses a non-reentrant model
 27158 ;;
 27159                           
 27160                           	psect	text83
 27161  0026CA                     __ptext83:
 27162                           	opt stack 0
 27163  0026CA                     _fifo_getFree:
 27164                           	opt stack 20
 27165                           
 27166                           ;incstack = 0
 27167                           ;incstack = 0
 27168                           ;fifo_getFree@f stored from wreg
 27169  0026CA  CFE8 F035          	movff	wreg,fifo_getFree@f
 27170                           
 27171                           ;fifo.c: 97: if (f->head < f->tail) {
 27172  0026CE  D83F               	call	PL68	;call to abstracted procedure
 27173  0026D0  5035               	movf	fifo_getFree@f,w,c
 27174  0026D2  6EE1               	movwf	fsr1l,c
 27175  0026D4  6AE2               	clrf	fsr1h,c
 27176  0026D6  0E02               	movlw	2
 27177  0026D8  26E1               	addwf	fsr1l,f,c
 27178  0026DA  6AE2               	clrf	fsr1h,c
 27179  0026DC  52E6               	movf	postinc1,f,c
 27180  0026DE  52DE               	movf	postinc2,f,c
 27181  0026E0  50DD               	movf	postdec2,w,c
 27182  0026E2  5CE5               	subwf	postdec1,w,c
 27183  0026E4  E102               	bnz	i1u615_25
 27184  0026E6  50DF               	movf	indf2,w,c
 27185  0026E8  5CE7               	subwf	indf1,w,c
 27186  0026EA                     i1u615_25:
 27187  0026EA  E210               	bc	i1l6346
 27188                           
 27189                           ;fifo.c: 98: return (f->tail - f->head);
 27190  0026EC  D837               	call	PL108	;call to abstracted procedure
 27191  0026EE  CFDE F02D          	movff	postinc2,??_fifo_getFree
 27192  0026F2  CFDD F02E          	movff	postdec2,??_fifo_getFree+1
 27193  0026F6  D82B               	call	PL68	;call to abstracted procedure
 27194  0026F8  CFDE F02F          	movff	postinc2,??_fifo_getFree+2
 27195  0026FC  CFDD F030          	movff	postdec2,??_fifo_getFree+3
 27196  002700  502D               	movf	??_fifo_getFree,w,c
 27197  002702  5C2F               	subwf	??_fifo_getFree+2,w,c
 27198  002704  6E2B               	movwf	?_fifo_getFree,c
 27199  002706  502E               	movf	??_fifo_getFree+1,w,c
 27200  002708  5830               	subwfb	??_fifo_getFree+3,w,c
 27201  00270A  D01F               	goto	L42
 27202  00270C                     i1l6346:
 27203                           
 27204                           ;fifo.c: 100: else {
 27205                           ;fifo.c: 101: return (f->size + (f->tail - f->head));
 27206  00270C  D820               	call	PL68	;call to abstracted procedure
 27207  00270E  CFDE F02D          	movff	postinc2,??_fifo_getFree
 27208  002712  CFDD F02E          	movff	postdec2,??_fifo_getFree+1
 27209  002716  D822               	call	PL108	;call to abstracted procedure
 27210  002718  CFDE F02F          	movff	postinc2,??_fifo_getFree+2
 27211  00271C  CFDD F030          	movff	postdec2,??_fifo_getFree+3
 27212  002720  5035               	movf	fifo_getFree@f,w,c
 27213  002722  6ED9               	movwf	fsr2l,c
 27214  002724  6ADA               	clrf	fsr2h,c
 27215  002726  0E06               	movlw	6
 27216  002728  26D9               	addwf	fsr2l,f,c
 27217  00272A  6ADA               	clrf	fsr2h,c
 27218  00272C  CFDE F031          	movff	postinc2,??_fifo_getFree+4
 27219  002730  CFDD F032          	movff	postdec2,??_fifo_getFree+5
 27220  002734  502F               	movf	??_fifo_getFree+2,w,c
 27221  002736  5C31               	subwf	??_fifo_getFree+4,w,c
 27222  002738  6E33               	movwf	(??_fifo_getFree+6)& (0+255),c
 27223  00273A  5030               	movf	??_fifo_getFree+3,w,c
 27224  00273C  5832               	subwfb	??_fifo_getFree+5,w,c
 27225  00273E  6E34               	movwf	(??_fifo_getFree+7)& (0+255),c
 27226  002740  502D               	movf	??_fifo_getFree,w,c
 27227  002742  2433               	addwf	??_fifo_getFree+6,w,c
 27228  002744  6E2B               	movwf	?_fifo_getFree,c
 27229  002746  502E               	movf	??_fifo_getFree+1,w,c
 27230  002748  2034               	addwfc	??_fifo_getFree+7,w,c
 27231  00274A                     L42:
 27232  00274A  6E2C               	movwf	?_fifo_getFree+1,c
 27233  00274C  0012               	return	
 27234  00274E                     __end_of_fifo_getFree:
 27235                           	opt stack 0
 27236  00274E                     PL68:
 27237                           	opt stack 20
 27238  00274E  5035               	movf	fifo_getFree@f,w,c
 27239  002750  6ED9               	movwf	fsr2l,c
 27240  002752  6ADA               	clrf	fsr2h,c
 27241  002754  0E04               	movlw	4
 27242  002756  26D9               	addwf	fsr2l,f,c
 27243  002758  6ADA               	clrf	fsr2h,c
 27244  00275A  0012               	return	
 27245  00275C                     __end_ofPL68:
 27246                           	opt stack 0
 27247  00275C                     PL108:
 27248                           	opt stack 20
 27249  00275C  5035               	movf	fifo_getFree@f,w,c
 27250  00275E  6ED9               	movwf	fsr2l,c
 27251  002760  6ADA               	clrf	fsr2h,c
 27252  002762  0E02               	movlw	2
 27253  002764  26D9               	addwf	fsr2l,f,c
 27254  002766  6ADA               	clrf	fsr2h,c
 27255  002768  0012               	return	
 27256  00276A                     __end_ofPL108:
 27257                           	opt stack 0
 27258                           tblptru	equ	0xFF8
 27259                           tblptrh	equ	0xFF7
 27260                           tblptrl	equ	0xFF6
 27261                           tablat	equ	0xFF5
 27262                           prodh	equ	0xFF4
 27263                           prodl	equ	0xFF3
 27264                           intcon	equ	0xFF2
 27265                           indf0	equ	0xFEF
 27266                           postinc0	equ	0xFEE
 27267                           fsr0h	equ	0xFEA
 27268                           fsr0l	equ	0xFE9
 27269                           wreg	equ	0xFE8
 27270                           indf1	equ	0xFE7
 27271                           postinc1	equ	0xFE6
 27272                           postdec1	equ	0xFE5
 27273                           fsr1h	equ	0xFE2
 27274                           fsr1l	equ	0xFE1
 27275                           bsr	equ	0xFE0
 27276                           indf2	equ	0xFDF
 27277                           postinc2	equ	0xFDE
 27278                           postdec2	equ	0xFDD
 27279                           plusw2	equ	0xFDB
 27280                           fsr2h	equ	0xFDA
 27281                           fsr2l	equ	0xFD9
 27282                           status	equ	0xFD8
 27283                           
 27284 ;; *************** function _ECANReceiveMessage *****************
 27285 ;; Defined at:
 27286 ;;		line 803 in file "ECAN.c"
 27287 ;; Parameters:    Size  Location     Type
 27288 ;;  id              1    wreg     PTR unsigned long 
 27289 ;;		 -> Interrupt@id(4), 
 27290 ;;  data            1    7[COMRAM] PTR unsigned char 
 27291 ;;		 -> Interrupt@data(8), 
 27292 ;;  dataLen         1    8[COMRAM] PTR unsigned char 
 27293 ;;		 -> Interrupt@dlc(1), 
 27294 ;;  msgFlags        1    9[COMRAM] PTR enum E16333
 27295 ;;		 -> Interrupt@flags(1), 
 27296 ;; Auto vars:     Size  Location     Type
 27297 ;;  id              1   12[COMRAM] PTR unsigned long 
 27298 ;;		 -> Interrupt@id(4), 
 27299 ;;  ptr             2   16[COMRAM] PTR unsigned char 
 27300 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27301 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27302 ;;  savedPtr        2   10[COMRAM] PTR unsigned char 
 27303 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27304 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27305 ;;  temp            1   15[COMRAM] struct .
 27306 ;;  mode            1   14[COMRAM] unsigned char 
 27307 ;;  i               1   13[COMRAM] unsigned char 
 27308 ;; Return value:  Size  Location     Type
 27309 ;;                  1    wreg      enum E15660
 27310 ;; Registers used:
 27311 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27312 ;; Tracked objects:
 27313 ;;		On entry : 0/0
 27314 ;;		On exit  : 0/0
 27315 ;;		Unchanged: 0/0
 27316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27317 ;;      Params:         3       0       0       0       0       0       0
 27318 ;;      Locals:         8       0       0       0       0       0       0
 27319 ;;      Temps:          0       0       0       0       0       0       0
 27320 ;;      Totals:        11       0       0       0       0       0       0
 27321 ;;Total ram usage:       11 bytes
 27322 ;; Hardware stack levels used:    1
 27323 ;; Hardware stack levels required when called:    1
 27324 ;; This function calls:
 27325 ;;		__ECANPointBuffer
 27326 ;;		__RegsToCANID
 27327 ;; This function is called by:
 27328 ;;		_Interrupt
 27329 ;; This function uses a non-reentrant model
 27330 ;;
 27331                           
 27332                           	psect	text84
 27333  0046C4                     __ptext84:
 27334                           	opt stack 0
 27335  0046C4                     _ECANReceiveMessage:
 27336                           	opt stack 19
 27337                           
 27338                           ;incstack = 0
 27339                           ;incstack = 0
 27340                           ;ECANReceiveMessage@id stored from wreg
 27341  0046C4  CFE8 F037          	movff	wreg,ECANReceiveMessage@id
 27342                           
 27343                           ;ECAN.c: 805: BYTE mode;
 27344                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27345                           ;ECAN.c: 809: char i;
 27346                           ;ECAN.c: 810: BYTE_VAL temp;
 27347                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27348  0046C8  6A14               	clrf	__ECANRxFilterHitInfo,c
 27349                           
 27350                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27351  0046CA  5077               	movf	3959,w,c	;volatile
 27352  0046CC  0BC0               	andlw	192
 27353  0046CE  6E39               	movwf	ECANReceiveMessage@mode,c
 27354                           
 27355                           ;ECAN.c: 816: if ( mode == 0x00 )
 27356  0046D0  6639               	tstfsz	ECANReceiveMessage@mode,c
 27357  0046D2  D032               	goto	i1l9596
 27358                           
 27359                           ;ECAN.c: 822: {
 27360                           ;ECAN.c: 824: if ( RXB0FUL )
 27361  0046D4  AE60               	btfss	3936,7,c	;volatile
 27362  0046D6  D012               	goto	i1l1440
 27363                           
 27364                           ;ECAN.c: 825: {
 27365                           ;ECAN.c: 827: RXB0IF = 0;
 27366  0046D8  90A4               	bcf	4004,0,c	;volatile
 27367                           
 27368                           ;ECAN.c: 830: if ( RXB0OVFL )
 27369  0046DA  AE74               	btfss	3956,7,c	;volatile
 27370  0046DC  D006               	goto	i1l9572
 27371                           
 27372                           ;ECAN.c: 831: {
 27373                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27374  0046DE  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27375  0046E0  6ED9               	movwf	fsr2l,c
 27376  0046E2  6ADA               	clrf	fsr2h,c
 27377  0046E4  0E00               	movlw	0
 27378  0046E6  86DB               	bsf	plusw2,3,c
 27379                           
 27380                           ;ECAN.c: 833: RXB0OVFL = 0;
 27381  0046E8  9E74               	bcf	3956,7,c	;volatile
 27382  0046EA                     i1l9572:
 27383                           
 27384                           ;ECAN.c: 834: }
 27385                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27386  0046EA  A060               	btfss	3936,0,c	;volatile
 27387  0046EC  D002               	bra	i1u1132_25
 27388  0046EE  8014               	bsf	__ECANRxFilterHitInfo,0,c
 27389  0046F0  D001               	bra	i1u1132_27
 27390  0046F2                     i1u1132_25:
 27391  0046F2  9014               	bcf	__ECANRxFilterHitInfo,0,c
 27392  0046F4                     i1u1132_27:
 27393                           
 27394                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27395  0046F4  0E0F               	movlw	15	;volatile
 27396  0046F6  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27397  0046F8  0E60               	movlw	96	;volatile
 27398  0046FA  D01A               	goto	L43
 27399  0046FC                     i1l1440:
 27400                           
 27401                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27402  0046FC  010F               	movlb	15	; () banked
 27403  0046FE  AF50               	btfss	80,7,b	;volatile
 27404  004700  D019               	goto	i1l9590
 27405                           
 27406                           ; BSR set to: 15
 27407                           ;ECAN.c: 842: {
 27408                           ;ECAN.c: 844: RXB1IF = 0;
 27409  004702  92A4               	bcf	4004,1,c	;volatile
 27410                           
 27411                           ;ECAN.c: 847: if ( RXB1OVFL )
 27412  004704  AC74               	btfss	3956,6,c	;volatile
 27413  004706  D006               	goto	i1l9582
 27414                           
 27415                           ; BSR set to: 15
 27416                           ;ECAN.c: 848: {
 27417                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27418  004708  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27419  00470A  6ED9               	movwf	fsr2l,c
 27420  00470C  6ADA               	clrf	fsr2h,c
 27421  00470E  0E00               	movlw	0
 27422  004710  86DB               	bsf	plusw2,3,c
 27423                           
 27424                           ; BSR set to: 15
 27425                           ;ECAN.c: 850: RXB1OVFL = 0;
 27426  004712  9C74               	bcf	3956,6,c	;volatile
 27427  004714                     i1l9582:
 27428                           
 27429                           ; BSR set to: 15
 27430                           ;ECAN.c: 851: }
 27431                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27432  004714  5150               	movf	80,w,b	;volatile
 27433  004716  0B07               	andlw	7
 27434  004718  6E14               	movwf	__ECANRxFilterHitInfo,c
 27435                           
 27436                           ; BSR set to: 15
 27437                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27438  00471A  0E02               	movlw	2
 27439  00471C  6014               	cpfslt	__ECANRxFilterHitInfo,c
 27440  00471E  D005               	goto	i1l9588
 27441                           
 27442                           ; BSR set to: 15
 27443                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27444  004720  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27445  004722  6ED9               	movwf	fsr2l,c
 27446  004724  6ADA               	clrf	fsr2h,c
 27447  004726  0E00               	movlw	0
 27448  004728  8EDB               	bsf	plusw2,7,c
 27449  00472A                     i1l9588:
 27450                           
 27451                           ; BSR set to: 15
 27452                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27453  00472A  0E0F               	movlw	15	;volatile
 27454  00472C  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27455  00472E  0E50               	movlw	80	;volatile
 27456  004730                     L43:
 27457  004730  6E3B               	movwf	ECANReceiveMessage@ptr,c
 27458                           
 27459                           ;ECAN.c: 860: }
 27460  004732  D065               	goto	i1l9650
 27461  004734                     i1l9590:
 27462                           
 27463                           ;ECAN.c: 861: else
 27464                           ;ECAN.c: 862: return FALSE;
 27465  004734  0E00               	movlw	0
 27466  004736  D0C2               	goto	i1l1447
 27467  004738                     i1l9596:
 27468                           
 27469                           ;ECAN.c: 869: else if ( mode == 0x40 )
 27470  004738  5039               	movf	ECANReceiveMessage@mode,w,c
 27471  00473A  0A40               	xorlw	64
 27472  00473C  E146               	bnz	i1l1450
 27473                           
 27474                           ;ECAN.c: 875: {
 27475                           ;ECAN.c: 876: if ( RXB0FUL )
 27476  00473E  AE60               	btfss	3936,7,c	;volatile
 27477  004740  D004               	goto	i1l1451
 27478                           
 27479                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 27480  004742  0E0F               	movlw	15	;volatile
 27481  004744  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27482  004746  0E60               	movlw	96	;volatile
 27483  004748  D03E               	goto	L50
 27484  00474A                     i1l1451:
 27485                           
 27486                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 27487  00474A  010F               	movlb	15	; () banked
 27488  00474C  AF50               	btfss	80,7,b	;volatile
 27489  00474E  D004               	goto	i1l1453
 27490                           
 27491                           ; BSR set to: 15
 27492                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 27493  004750  0E0F               	movlw	15	;volatile
 27494  004752  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27495  004754  0E50               	movlw	80	;volatile
 27496  004756  D037               	goto	L50
 27497  004758                     i1l1453:
 27498                           
 27499                           ; BSR set to: 15
 27500                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 27501  004758  010D               	movlb	13
 27502  00475A  B5F8               	btfsc	248,2,b	;volatile
 27503  00475C  D007               	goto	i1l1455
 27504  00475E  010E               	movlb	14
 27505  004760  AF20               	btfss	32,7,b	;volatile
 27506  004762  D004               	goto	i1l1455
 27507                           
 27508                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 27509  004764  0E0E               	movlw	14	;volatile
 27510  004766  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27511  004768  0E20               	movlw	32	;volatile
 27512  00476A  D02D               	goto	L50
 27513  00476C                     i1l1455:
 27514                           
 27515                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 27516  00476C  010D               	movlb	13
 27517  00476E  B7F8               	btfsc	248,3,b	;volatile
 27518  004770  D007               	goto	i1l1457
 27519  004772  010E               	movlb	14
 27520  004774  AF30               	btfss	48,7,b	;volatile
 27521  004776  D004               	goto	i1l1457
 27522                           
 27523                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 27524  004778  0E0E               	movlw	14	;volatile
 27525  00477A  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27526  00477C  0E30               	movlw	48	;volatile
 27527  00477E  D023               	goto	L50
 27528  004780                     i1l1457:
 27529                           
 27530                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 27531  004780  010D               	movlb	13
 27532  004782  B9F8               	btfsc	248,4,b	;volatile
 27533  004784  D007               	goto	i1l1459
 27534  004786  010E               	movlb	14
 27535  004788  AF40               	btfss	64,7,b	;volatile
 27536  00478A  D004               	goto	i1l1459
 27537                           
 27538                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 27539  00478C  0E0E               	movlw	14	;volatile
 27540  00478E  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27541  004790  0E40               	movlw	64	;volatile
 27542  004792  D019               	goto	L50
 27543  004794                     i1l1459:
 27544                           
 27545                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 27546  004794  010D               	movlb	13
 27547  004796  BBF8               	btfsc	248,5,b	;volatile
 27548  004798  D005               	goto	i1l1461
 27549  00479A  010E               	movlb	14
 27550  00479C  AF50               	btfss	80,7,b	;volatile
 27551  00479E  D002               	goto	i1l1461
 27552                           
 27553                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 27554  0047A0  0E0E               	movlw	14	;volatile
 27555  0047A2  D7D7               	goto	L51
 27556  0047A4                     i1l1461:
 27557                           
 27558                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 27559  0047A4  010D               	movlb	13
 27560  0047A6  BDF8               	btfsc	248,6,b	;volatile
 27561  0047A8  D005               	goto	i1l1463
 27562  0047AA  010E               	movlb	14
 27563  0047AC  AF60               	btfss	96,7,b	;volatile
 27564  0047AE  D002               	goto	i1l1463
 27565                           
 27566                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 27567  0047B0  0E0E               	movlw	14	;volatile
 27568  0047B2  D7C8               	goto	L52
 27569  0047B4                     i1l1463:
 27570                           
 27571                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 27572  0047B4  010D               	movlb	13
 27573  0047B6  BFF8               	btfsc	248,7,b	;volatile
 27574  0047B8  D7BD               	goto	i1l9590
 27575  0047BA  010E               	movlb	14
 27576  0047BC  AF70               	btfss	112,7,b	;volatile
 27577  0047BE  D7BA               	goto	i1l9590
 27578                           
 27579                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 27580  0047C0  0E0E               	movlw	14	;volatile
 27581  0047C2  6E3C               	movwf	ECANReceiveMessage@ptr+1,c
 27582  0047C4  0E70               	movlw	112	;volatile
 27583  0047C6                     L50:
 27584  0047C6  6E3B               	movwf	ECANReceiveMessage@ptr,c
 27585  0047C8  D00A               	goto	i1l9640
 27586  0047CA                     i1l1450:
 27587                           
 27588                           ;ECAN.c: 910: else
 27589                           ;ECAN.c: 915: {
 27590                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 27591  0047CA  AE74               	btfss	3956,7,c	;volatile
 27592  0047CC  D7B3               	goto	i1l9590
 27593                           
 27594                           ;ECAN.c: 919: {
 27595                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 27596  0047CE  506F               	movf	3951,w,c	;volatile
 27597  0047D0  0B07               	andlw	7
 27598  0047D2  EC4C  F010         	call	__ECANPointBuffer
 27599  0047D6  C02B  F03B         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 27600  0047DA  C02C  F03C         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 27601  0047DE                     i1l9640:
 27602                           
 27603                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 27604  0047DE  C03B  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27605  0047E2  C03C  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27606  0047E6  50DF               	movf	indf2,w,c
 27607  0047E8  0B1F               	andlw	31
 27608  0047EA  6E14               	movwf	__ECANRxFilterHitInfo,c
 27609                           
 27610                           ;ECAN.c: 934: RXB1IF = 0;
 27611  0047EC  92A4               	bcf	4004,1,c	;volatile
 27612                           
 27613                           ;ECAN.c: 936: if ( RXB1OVFL )
 27614  0047EE  AC74               	btfss	3956,6,c	;volatile
 27615  0047F0  D006               	goto	i1l9650
 27616                           
 27617                           ;ECAN.c: 937: {
 27618                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 27619  0047F2  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27620  0047F4  6ED9               	movwf	fsr2l,c
 27621  0047F6  6ADA               	clrf	fsr2h,c
 27622  0047F8  0E00               	movlw	0
 27623  0047FA  86DB               	bsf	plusw2,3,c
 27624                           
 27625                           ;ECAN.c: 939: RXB1OVFL = 0;
 27626  0047FC  9C74               	bcf	3956,6,c	;volatile
 27627  0047FE                     i1l9650:
 27628                           
 27629                           ;ECAN.c: 944: savedPtr = ptr;
 27630  0047FE  C03B  F035         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 27631  004802  C03C  F036         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 27632                           
 27633                           ;ECAN.c: 945: *msgFlags = 0;
 27634  004806  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27635  004808  6ED9               	movwf	fsr2l,c
 27636  00480A  6ADA               	clrf	fsr2h,c
 27637  00480C  6ADF               	clrf	indf2,c
 27638                           
 27639                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 27640  00480E  EE20 F005          	lfsr	2,5
 27641  004812  D855               	call	PL106	;call to abstracted procedure
 27642                           
 27643                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 27644  004814  5033               	movf	ECANReceiveMessage@dataLen,w,c
 27645  004816  6ED9               	movwf	fsr2l,c
 27646  004818  6ADA               	clrf	fsr2h,c
 27647  00481A  503A               	movf	ECANReceiveMessage@temp,w,c
 27648  00481C  0B0F               	andlw	15
 27649  00481E  6EDF               	movwf	indf2,c
 27650                           
 27651                           ;ECAN.c: 952: if ( temp.bits.b6 )
 27652  004820  AC3A               	btfss	ECANReceiveMessage@temp,6,c
 27653  004822  D005               	goto	i1l1471
 27654                           
 27655                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 27656  004824  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27657  004826  6ED9               	movwf	fsr2l,c
 27658  004828  6ADA               	clrf	fsr2h,c
 27659  00482A  0E00               	movlw	0
 27660  00482C  8CDB               	bsf	plusw2,6,c
 27661  00482E                     i1l1471:
 27662                           
 27663                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 27664  00482E  EE20 F002          	lfsr	2,2
 27665  004832  D845               	call	PL106	;call to abstracted procedure
 27666                           
 27667                           ;ECAN.c: 957: if ( temp.bits.b3 )
 27668  004834  A63A               	btfss	ECANReceiveMessage@temp,3,c
 27669  004836  D008               	goto	i1l1472
 27670                           
 27671                           ;ECAN.c: 958: {
 27672                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 27673  004838  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27674  00483A  6ED9               	movwf	fsr2l,c
 27675  00483C  6ADA               	clrf	fsr2h,c
 27676  00483E  0E00               	movlw	0
 27677  004840  8ADB               	bsf	plusw2,5,c
 27678                           
 27679                           ;ECAN.c: 960: temp.Val = 1;
 27680  004842  0E01               	movlw	1
 27681  004844  6E3A               	movwf	ECANReceiveMessage@temp,c
 27682                           
 27683                           ;ECAN.c: 961: }
 27684  004846  D001               	goto	i1l9668
 27685  004848                     i1l1472:
 27686                           
 27687                           ;ECAN.c: 962: else
 27688                           ;ECAN.c: 963: temp.Val = 0;
 27689  004848  6A3A               	clrf	ECANReceiveMessage@temp,c
 27690  00484A                     i1l9668:
 27691                           
 27692                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 27693  00484A  283B               	incf	ECANReceiveMessage@ptr,w,c
 27694  00484C  6E2B               	movwf	?__RegsToCANID,c
 27695  00484E  0E00               	movlw	0
 27696  004850  203C               	addwfc	ECANReceiveMessage@ptr+1,w,c
 27697  004852  6E2C               	movwf	?__RegsToCANID+1,c
 27698  004854  C037  F02D         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 27699  004858  C03A  F02E         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 27700  00485C  ECD2  F01B         	call	__RegsToCANID	;wreg free
 27701                           
 27702                           ;ECAN.c: 968: ptr += 6;
 27703  004860  0E06               	movlw	6
 27704  004862  263B               	addwf	ECANReceiveMessage@ptr,f,c
 27705  004864  0E00               	movlw	0
 27706  004866  223C               	addwfc	ECANReceiveMessage@ptr+1,f,c
 27707                           
 27708                           ;ECAN.c: 969: temp.Val = *dataLen;
 27709  004868  5033               	movf	ECANReceiveMessage@dataLen,w,c
 27710  00486A  6ED9               	movwf	fsr2l,c
 27711  00486C  6ADA               	clrf	fsr2h,c
 27712  00486E  50DF               	movf	indf2,w,c
 27713  004870  6E3A               	movwf	ECANReceiveMessage@temp,c
 27714                           
 27715                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 27716  004872  6A38               	clrf	ECANReceiveMessage@i,c
 27717  004874  D00D               	goto	i1l9684
 27718  004876                     i1l9676:
 27719                           
 27720                           ;ECAN.c: 971: *data++ = *ptr++;
 27721  004876  C03B  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27722  00487A  C03C  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27723  00487E  5032               	movf	ECANReceiveMessage@data,w,c
 27724  004880  6EE1               	movwf	fsr1l,c
 27725  004882  6AE2               	clrf	fsr1h,c
 27726  004884  CFDF FFE7          	movff	indf2,indf1
 27727  004888  4A3B               	infsnz	ECANReceiveMessage@ptr,f,c
 27728  00488A  2A3C               	incf	ECANReceiveMessage@ptr+1,f,c
 27729  00488C  2A32               	incf	ECANReceiveMessage@data,f,c
 27730  00488E  2A38               	incf	ECANReceiveMessage@i,f,c
 27731  004890                     i1l9684:
 27732  004890  503A               	movf	ECANReceiveMessage@temp,w,c
 27733  004892  5C38               	subwf	ECANReceiveMessage@i,w,c
 27734  004894  E3F0               	bnc	i1l9676
 27735                           
 27736                           ;ECAN.c: 974: if ( IRXIF )
 27737  004896  AEA4               	btfss	4004,7,c	;volatile
 27738  004898  D006               	goto	i1l9690
 27739                           
 27740                           ;ECAN.c: 975: {
 27741                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 27742  00489A  5034               	movf	ECANReceiveMessage@msgFlags,w,c
 27743  00489C  6ED9               	movwf	fsr2l,c
 27744  00489E  6ADA               	clrf	fsr2h,c
 27745  0048A0  0E00               	movlw	0
 27746  0048A2  88DB               	bsf	plusw2,4,c
 27747                           
 27748                           ;ECAN.c: 977: IRXIF = 0;
 27749  0048A4  9EA4               	bcf	4004,7,c	;volatile
 27750  0048A6                     i1l9690:
 27751                           
 27752                           ;ECAN.c: 978: }
 27753                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 27754  0048A6  C035  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 27755  0048AA  C036  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 27756  0048AE  0E7F               	movlw	127
 27757  0048B0  16DF               	andwf	indf2,f,c
 27758                           
 27759                           ;ECAN.c: 985: if ( mode == 0x80 )
 27760  0048B2  5039               	movf	ECANReceiveMessage@mode,w,c
 27761  0048B4  0A80               	xorlw	128
 27762  0048B6  B4D8               	btfsc	status,2,c
 27763                           
 27764                           ;ECAN.c: 986: FIFOEMPTY = 0;
 27765  0048B8  9E74               	bcf	3956,7,c	;volatile
 27766                           
 27767                           ;ECAN.c: 992: return TRUE;
 27768  0048BA  0E01               	movlw	1
 27769  0048BC                     i1l1447:
 27770  0048BC  0012               	return	
 27771  0048BE                     __end_of_ECANReceiveMessage:
 27772                           	opt stack 0
 27773  0048BE                     PL106:
 27774                           	opt stack 19
 27775  0048BE  503B               	movf	ECANReceiveMessage@ptr,w,c
 27776  0048C0  26D9               	addwf	fsr2l,f,c
 27777  0048C2  503C               	movf	ECANReceiveMessage@ptr+1,w,c
 27778  0048C4  22DA               	addwfc	fsr2h,f,c
 27779  0048C6  50DF               	movf	indf2,w,c
 27780  0048C8  6E3A               	movwf	ECANReceiveMessage@temp,c
 27781  0048CA  0012               	return	
 27782  0048CC                     __end_ofPL106:
 27783                           	opt stack 0
 27784                           tblptru	equ	0xFF8
 27785                           tblptrh	equ	0xFF7
 27786                           tblptrl	equ	0xFF6
 27787                           tablat	equ	0xFF5
 27788                           prodh	equ	0xFF4
 27789                           prodl	equ	0xFF3
 27790                           intcon	equ	0xFF2
 27791                           indf0	equ	0xFEF
 27792                           postinc0	equ	0xFEE
 27793                           fsr0h	equ	0xFEA
 27794                           fsr0l	equ	0xFE9
 27795                           wreg	equ	0xFE8
 27796                           indf1	equ	0xFE7
 27797                           postinc1	equ	0xFE6
 27798                           postdec1	equ	0xFE5
 27799                           fsr1h	equ	0xFE2
 27800                           fsr1l	equ	0xFE1
 27801                           bsr	equ	0xFE0
 27802                           indf2	equ	0xFDF
 27803                           postinc2	equ	0xFDE
 27804                           postdec2	equ	0xFDD
 27805                           plusw2	equ	0xFDB
 27806                           fsr2h	equ	0xFDA
 27807                           fsr2l	equ	0xFD9
 27808                           status	equ	0xFD8
 27809                           
 27810 ;; *************** function __RegsToCANID *****************
 27811 ;; Defined at:
 27812 ;;		line 1158 in file "ECAN.c"
 27813 ;; Parameters:    Size  Location     Type
 27814 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 27815 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27816 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27817 ;;  val             1    2[COMRAM] PTR unsigned long 
 27818 ;;		 -> Interrupt@id(4), 
 27819 ;;  type            1    3[COMRAM] unsigned char 
 27820 ;; Auto vars:     Size  Location     Type
 27821 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 27822 ;;		 -> Interrupt@id(4), 
 27823 ;; Return value:  Size  Location     Type
 27824 ;;		None               void
 27825 ;; Registers used:
 27826 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27827 ;; Tracked objects:
 27828 ;;		On entry : 0/0
 27829 ;;		On exit  : 0/0
 27830 ;;		Unchanged: 0/0
 27831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27832 ;;      Params:         4       0       0       0       0       0       0
 27833 ;;      Locals:         1       0       0       0       0       0       0
 27834 ;;      Temps:          2       0       0       0       0       0       0
 27835 ;;      Totals:         7       0       0       0       0       0       0
 27836 ;;Total ram usage:        7 bytes
 27837 ;; Hardware stack levels used:    1
 27838 ;; This function calls:
 27839 ;;		Nothing
 27840 ;; This function is called by:
 27841 ;;		_ECANReceiveMessage
 27842 ;; This function uses a non-reentrant model
 27843 ;;
 27844                           
 27845                           	psect	text85
 27846  0037A4                     __ptext85:
 27847                           	opt stack 0
 27848  0037A4                     __RegsToCANID:
 27849                           	opt stack 19
 27850                           
 27851                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 27852                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 27853                           
 27854                           ;incstack = 0
 27855                           ;incstack = 0
 27856  0037A4  C02D  F031         	movff	__RegsToCANID@val,__RegsToCANID@Value
 27857                           
 27858                           ;ECAN.c: 1163: if ( type == 0 )
 27859  0037A8  662E               	tstfsz	__RegsToCANID@type,c
 27860  0037AA  D02B               	goto	i1l9340
 27861                           
 27862                           ;ECAN.c: 1164: {
 27863                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 27864  0037AC  5031               	movf	__RegsToCANID@Value,w,c
 27865  0037AE  6ED9               	movwf	fsr2l,c
 27866  0037B0  D86C               	call	PL78	;call to abstracted procedure
 27867  0037B2  362F               	rlcf	??__RegsToCANID,f,c
 27868  0037B4  90D8               	bcf	status,0,c
 27869  0037B6  362F               	rlcf	??__RegsToCANID,f,c
 27870  0037B8  90D8               	bcf	status,0,c
 27871  0037BA  342F               	rlcf	??__RegsToCANID,w,c
 27872  0037BC  6EDF               	movwf	indf2,c
 27873                           
 27874                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 27875  0037BE  5031               	movf	__RegsToCANID@Value,w,c
 27876  0037C0  6ED9               	movwf	fsr2l,c
 27877  0037C2  6ADA               	clrf	fsr2h,c
 27878  0037C4  2AD9               	incf	fsr2l,f,c
 27879  0037C6  6ADA               	clrf	fsr2h,c
 27880  0037C8  D873               	call	PL86	;call to abstracted procedure
 27881  0037CA                     i1u1092_25:
 27882  0037CA  90D8               	bcf	status,0,c
 27883  0037CC  322F               	rrcf	??__RegsToCANID,f,c
 27884  0037CE  2E30               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27885  0037D0  D7FC               	goto	i1u1092_25
 27886  0037D2  502F               	movf	??__RegsToCANID,w,c
 27887                           
 27888                           ;ECAN.c: 1168: ptr++;
 27889                           
 27890                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 27891  0037D4  D863               	call	PL80	;call to abstracted procedure
 27892  0037D6  0E05               	movlw	5
 27893  0037D8  6E30               	movwf	(??__RegsToCANID+1)& (0+255),c
 27894  0037DA                     i1u1093_25:
 27895  0037DA  90D8               	bcf	status,0,c
 27896  0037DC  322F               	rrcf	??__RegsToCANID,f,c
 27897  0037DE  2E30               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27898  0037E0  D7FC               	goto	i1u1093_25
 27899  0037E2  5031               	movf	__RegsToCANID@Value,w,c
 27900  0037E4  6ED9               	movwf	fsr2l,c
 27901  0037E6  6ADA               	clrf	fsr2h,c
 27902  0037E8  502F               	movf	??__RegsToCANID,w,c
 27903  0037EA  12DF               	iorwf	indf2,f,c
 27904                           
 27905                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 27906  0037EC  D83D               	call	PL38	;call to abstracted procedure
 27907  0037EE  6ADF               	clrf	indf2,c
 27908                           
 27909                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 27910  0037F0  5031               	movf	__RegsToCANID@Value,w,c
 27911  0037F2  6ED9               	movwf	fsr2l,c
 27912  0037F4  6ADA               	clrf	fsr2h,c
 27913  0037F6  0E03               	movlw	3
 27914  0037F8  26D9               	addwf	fsr2l,f,c
 27915  0037FA  6ADA               	clrf	fsr2h,c
 27916  0037FC  0E00               	movlw	0
 27917  0037FE  6EDF               	movwf	indf2,c
 27918                           
 27919                           ;ECAN.c: 1172: }
 27920  003800  D032               	goto	i1l1494
 27921  003802                     i1l9340:
 27922                           
 27923                           ;ECAN.c: 1173: else
 27924                           ;ECAN.c: 1174: {
 27925                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 27926  003802  D832               	call	PL38	;call to abstracted procedure
 27927  003804  D855               	call	PL86	;call to abstracted procedure
 27928  003806                     i1u1094_25:
 27929  003806  90D8               	bcf	status,0,c
 27930  003808  362F               	rlcf	??__RegsToCANID,f,c
 27931  00380A  2E30               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27932  00380C  D7FC               	goto	i1u1094_25
 27933  00380E  502F               	movf	??__RegsToCANID,w,c
 27934  003810  6EDF               	movwf	indf2,c
 27935                           
 27936                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 27937  003812  5031               	movf	__RegsToCANID@Value,w,c
 27938  003814  6ED9               	movwf	fsr2l,c
 27939  003816  6ADA               	clrf	fsr2h,c
 27940  003818  0E03               	movlw	3
 27941  00381A  26D9               	addwf	fsr2l,f,c
 27942  00381C  D836               	call	PL78	;call to abstracted procedure
 27943  00381E  322F               	rrcf	??__RegsToCANID,f,c
 27944  003820  90D8               	bcf	status,0,c
 27945  003822  322F               	rrcf	??__RegsToCANID,f,c
 27946  003824  90D8               	bcf	status,0,c
 27947  003826  302F               	rrcf	??__RegsToCANID,w,c
 27948                           
 27949                           ;ECAN.c: 1178: ptr++;
 27950                           
 27951                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 27952  003828  D839               	call	PL80	;call to abstracted procedure
 27953  00382A  0E03               	movlw	3
 27954  00382C  162F               	andwf	??__RegsToCANID,f,c
 27955  00382E  D81C               	call	PL38	;call to abstracted procedure
 27956  003830  502F               	movf	??__RegsToCANID,w,c
 27957  003832  12DF               	iorwf	indf2,f,c
 27958                           
 27959                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 27960  003834  C02B  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27961  003838  C02C  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27962  00383C  50DF               	movf	indf2,w,c
 27963  00383E  6E2F               	movwf	??__RegsToCANID& (0+255),c
 27964  003840  90D8               	bcf	status,0,c
 27965  003842  322F               	rrcf	??__RegsToCANID,f,c
 27966  003844  90D8               	bcf	status,0,c
 27967  003846  322F               	rrcf	??__RegsToCANID,f,c
 27968  003848  90D8               	bcf	status,0,c
 27969  00384A  322F               	rrcf	??__RegsToCANID,f,c
 27970  00384C  0E1C               	movlw	28
 27971  00384E  162F               	andwf	??__RegsToCANID,f,c
 27972  003850  D80B               	call	PL38	;call to abstracted procedure
 27973  003852  502F               	movf	??__RegsToCANID,w,c
 27974  003854  12DF               	iorwf	indf2,f,c
 27975                           
 27976                           ;ECAN.c: 1182: ptr++;
 27977                           
 27978                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 27979  003856  D80F               	call	PL76	;call to abstracted procedure
 27980  003858  2AE1               	incf	fsr1l,f,c
 27981  00385A  6AE2               	clrf	fsr1h,c
 27982  00385C  CFDF FFE7          	movff	indf2,indf1
 27983                           
 27984                           ;ECAN.c: 1184: ptr++;
 27985                           
 27986                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 27987  003860  D80A               	call	PL76	;call to abstracted procedure
 27988  003862  CFDF FFE7          	movff	indf2,indf1
 27989  003866                     i1l1494:
 27990  003866  0012               	return	
 27991  003868                     __end_of__RegsToCANID:
 27992                           	opt stack 0
 27993  003868                     PL38:
 27994                           	opt stack 19
 27995  003868  5031               	movf	__RegsToCANID@Value,w,c
 27996  00386A  6ED9               	movwf	fsr2l,c
 27997  00386C  6ADA               	clrf	fsr2h,c
 27998  00386E  0E02               	movlw	2
 27999  003870  26D9               	addwf	fsr2l,f,c
 28000  003872  6ADA               	clrf	fsr2h,c
 28001  003874  0012               	return	
 28002  003876                     __end_ofPL38:
 28003                           	opt stack 0
 28004  003876                     PL76:
 28005                           	opt stack 19
 28006  003876  4A2B               	infsnz	__RegsToCANID@ptr,f,c
 28007  003878  2A2C               	incf	__RegsToCANID@ptr+1,f,c
 28008  00387A  C02B  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28009  00387E  C02C  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28010  003882  5031               	movf	__RegsToCANID@Value,w,c
 28011  003884  6EE1               	movwf	fsr1l,c
 28012  003886  6AE2               	clrf	fsr1h,c
 28013  003888  0012               	return	
 28014  00388A                     __end_ofPL76:
 28015                           	opt stack 0
 28016  00388A                     PL78:
 28017                           	opt stack 19
 28018  00388A  6ADA               	clrf	fsr2h,c
 28019  00388C  C02B  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28020  003890  C02C  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28021  003894  50E7               	movf	indf1,w,c
 28022  003896  6E2F               	movwf	??__RegsToCANID& (0+255),c
 28023  003898  90D8               	bcf	status,0,c
 28024  00389A  0012               	return	
 28025  00389C                     __end_ofPL78:
 28026                           	opt stack 0
 28027  00389C                     PL80:
 28028                           	opt stack 19
 28029  00389C  6EDF               	movwf	indf2,c
 28030  00389E  4A2B               	infsnz	__RegsToCANID@ptr,f,c
 28031  0038A0  2A2C               	incf	__RegsToCANID@ptr+1,f,c
 28032  0038A2  C02B  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28033  0038A6  C02C  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28034  0038AA  50DF               	movf	indf2,w,c
 28035  0038AC  6E2F               	movwf	??__RegsToCANID& (0+255),c
 28036  0038AE  0012               	return	
 28037  0038B0                     __end_ofPL80:
 28038                           	opt stack 0
 28039  0038B0                     PL86:
 28040                           	opt stack 19
 28041  0038B0  C02B  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28042  0038B4  C02C  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28043  0038B8  50E7               	movf	indf1,w,c
 28044  0038BA  6E2F               	movwf	??__RegsToCANID& (0+255),c
 28045  0038BC  0E05               	movlw	5
 28046  0038BE  6E30               	movwf	(??__RegsToCANID+1)& (0+255),c
 28047  0038C0  0C05               	retlw	5
 28048  0038C2                     __end_ofPL86:
 28049                           	opt stack 0
 28050                           tblptru	equ	0xFF8
 28051                           tblptrh	equ	0xFF7
 28052                           tblptrl	equ	0xFF6
 28053                           tablat	equ	0xFF5
 28054                           prodh	equ	0xFF4
 28055                           prodl	equ	0xFF3
 28056                           intcon	equ	0xFF2
 28057                           indf0	equ	0xFEF
 28058                           postinc0	equ	0xFEE
 28059                           fsr0h	equ	0xFEA
 28060                           fsr0l	equ	0xFE9
 28061                           wreg	equ	0xFE8
 28062                           indf1	equ	0xFE7
 28063                           postinc1	equ	0xFE6
 28064                           postdec1	equ	0xFE5
 28065                           fsr1h	equ	0xFE2
 28066                           fsr1l	equ	0xFE1
 28067                           bsr	equ	0xFE0
 28068                           indf2	equ	0xFDF
 28069                           postinc2	equ	0xFDE
 28070                           postdec2	equ	0xFDD
 28071                           plusw2	equ	0xFDB
 28072                           fsr2h	equ	0xFDA
 28073                           fsr2l	equ	0xFD9
 28074                           status	equ	0xFD8
 28075                           
 28076 ;; *************** function __ECANPointBuffer *****************
 28077 ;; Defined at:
 28078 ;;		line 1209 in file "ECAN.c"
 28079 ;; Parameters:    Size  Location     Type
 28080 ;;  b               1    wreg     unsigned char 
 28081 ;; Auto vars:     Size  Location     Type
 28082 ;;  b               1    3[COMRAM] unsigned char 
 28083 ;;  pt              2    4[COMRAM] PTR unsigned char 
 28084 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28085 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28086 ;; Return value:  Size  Location     Type
 28087 ;;                  2    0[COMRAM] PTR unsigned char 
 28088 ;; Registers used:
 28089 ;;		wreg, status,2, status,0
 28090 ;; Tracked objects:
 28091 ;;		On entry : 0/0
 28092 ;;		On exit  : 0/0
 28093 ;;		Unchanged: 0/0
 28094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28095 ;;      Params:         3       0       0       0       0       0       0
 28096 ;;      Locals:         3       0       0       0       0       0       0
 28097 ;;      Temps:          0       0       0       0       0       0       0
 28098 ;;      Totals:         6       0       0       0       0       0       0
 28099 ;;Total ram usage:        6 bytes
 28100 ;; Hardware stack levels used:    1
 28101 ;; This function calls:
 28102 ;;		Nothing
 28103 ;; This function is called by:
 28104 ;;		_ECANReceiveMessage
 28105 ;; This function uses a non-reentrant model
 28106 ;;
 28107                           
 28108                           	psect	text86
 28109  002098                     __ptext86:
 28110                           	opt stack 0
 28111  002098                     __ECANPointBuffer:
 28112                           	opt stack 19
 28113                           
 28114                           ;incstack = 0
 28115                           ;incstack = 0
 28116                           ;__ECANPointBuffer@b stored from wreg
 28117  002098  CFE8 F02E          	movff	wreg,__ECANPointBuffer@b
 28118                           
 28119                           ;ECAN.c: 1210: BYTE* pt;
 28120                           ;ECAN.c: 1212: switch(b)
 28121  00209C  D024               	goto	i1l9326
 28122  00209E                     i1l9308:
 28123                           
 28124                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 28125  00209E  0E0F               	movlw	15	;volatile
 28126  0020A0  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28127  0020A2  0E60               	movlw	96	;volatile
 28128  0020A4  D01E               	goto	L59
 28129  0020A6                     i1l9310:
 28130                           
 28131                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 28132  0020A6  010F               	movlb	15	; () banked
 28133  0020A8  0E0F               	movlw	15	;volatile
 28134  0020AA  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28135  0020AC  0E50               	movlw	80	;volatile
 28136  0020AE  D019               	goto	L59
 28137  0020B0                     i1l9312:
 28138                           
 28139                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 28140  0020B0  010E               	movlb	14	; () banked
 28141  0020B2  0E0E               	movlw	14	;volatile
 28142  0020B4  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28143  0020B6  0E20               	movlw	32	;volatile
 28144  0020B8  D014               	goto	L59
 28145  0020BA                     i1l9314:
 28146                           
 28147                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 28148  0020BA  010E               	movlb	14	; () banked
 28149  0020BC  0E0E               	movlw	14	;volatile
 28150  0020BE  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28151  0020C0  0E30               	movlw	48	;volatile
 28152  0020C2  D00F               	goto	L59
 28153  0020C4                     i1l9316:
 28154                           
 28155                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28156  0020C4  010E               	movlb	14	; () banked
 28157  0020C6  0E0E               	movlw	14	;volatile
 28158  0020C8  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28159  0020CA  0E40               	movlw	64	;volatile
 28160  0020CC  D00A               	goto	L59
 28161  0020CE                     i1l9318:
 28162                           
 28163                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28164  0020CE  010E               	movlb	14	; () banked
 28165  0020D0  0E0E               	movlw	14	;volatile
 28166  0020D2  D7EB               	goto	L60
 28167  0020D4                     i1l9320:
 28168                           
 28169                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28170  0020D4  010E               	movlb	14	; () banked
 28171  0020D6  0E0E               	movlw	14	;volatile
 28172  0020D8  D7E3               	goto	L61
 28173  0020DA                     i1l9322:
 28174                           
 28175                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28176  0020DA  010E               	movlb	14	; () banked
 28177  0020DC  0E0E               	movlw	14	;volatile
 28178  0020DE  6E30               	movwf	__ECANPointBuffer@pt+1,c
 28179  0020E0  0E70               	movlw	112	;volatile
 28180  0020E2                     L59:
 28181  0020E2  6E2F               	movwf	__ECANPointBuffer@pt,c
 28182                           
 28183                           ;ECAN.c: 1237: break;
 28184  0020E4  D00F               	goto	i1l1499
 28185  0020E6                     i1l9326:
 28186  0020E6  502E               	movf	__ECANPointBuffer@b,w,c
 28187                           
 28188                           ; Switch size 1, requested type "space"
 28189                           ; Number of cases is 7, Range of values is 0 to 6
 28190                           ; switch strategies available:
 28191                           ; Name         Instructions Cycles
 28192                           ; simple_byte           22    12 (average)
 28193                           ;	Chosen strategy is simple_byte
 28194  0020E8  E0DA               	bz	i1l9308
 28195  0020EA  0A01               	xorlw	1	; case 1
 28196  0020EC  E0DC               	bz	i1l9310
 28197  0020EE  0A03               	xorlw	3	; case 2
 28198  0020F0  E0DF               	bz	i1l9312
 28199  0020F2  0A01               	xorlw	1	; case 3
 28200  0020F4  E0E2               	bz	i1l9314
 28201  0020F6  0A07               	xorlw	7	; case 4
 28202  0020F8  E0E5               	bz	i1l9316
 28203  0020FA  0A01               	xorlw	1	; case 5
 28204  0020FC  E0E8               	bz	i1l9318
 28205  0020FE  0A03               	xorlw	3	; case 6
 28206  002100  E0E9               	bz	i1l9320
 28207  002102  D7EB               	goto	i1l9322
 28208  002104                     i1l1499:
 28209                           
 28210                           ;ECAN.c: 1239: return (pt);
 28211  002104  C02F  F02B         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28212  002108  C030  F02C         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28213  00210C  0012               	return	
 28214  00210E                     __end_of__ECANPointBuffer:
 28215                           	opt stack 0
 28216                           tblptru	equ	0xFF8
 28217                           tblptrh	equ	0xFF7
 28218                           tblptrl	equ	0xFF6
 28219                           tablat	equ	0xFF5
 28220                           prodh	equ	0xFF4
 28221                           prodl	equ	0xFF3
 28222                           intcon	equ	0xFF2
 28223                           indf0	equ	0xFEF
 28224                           postinc0	equ	0xFEE
 28225                           fsr0h	equ	0xFEA
 28226                           fsr0l	equ	0xFE9
 28227                           wreg	equ	0xFE8
 28228                           indf1	equ	0xFE7
 28229                           postinc1	equ	0xFE6
 28230                           postdec1	equ	0xFE5
 28231                           fsr1h	equ	0xFE2
 28232                           fsr1l	equ	0xFE1
 28233                           bsr	equ	0xFE0
 28234                           indf2	equ	0xFDF
 28235                           postinc2	equ	0xFDE
 28236                           postdec2	equ	0xFDD
 28237                           plusw2	equ	0xFDB
 28238                           fsr2h	equ	0xFDA
 28239                           fsr2l	equ	0xFD9
 28240                           status	equ	0xFD8
 28241                           
 28242 ;; *************** function _fifo_write *****************
 28243 ;; Defined at:
 28244 ;;		line 61 in file "fifo.c"
 28245 ;; Parameters:    Size  Location     Type
 28246 ;;  f               1    wreg     PTR struct .
 28247 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28248 ;;  buf             1    0[COMRAM] PTR const void 
 28249 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28250 ;;  nbytes          4    1[COMRAM] unsigned long 
 28251 ;; Auto vars:     Size  Location     Type
 28252 ;;  f               1   14[COMRAM] PTR struct .
 28253 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28254 ;;  i               4   10[COMRAM] unsigned long 
 28255 ;;  p               1    9[COMRAM] PTR const unsigned char 
 28256 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28257 ;; Return value:  Size  Location     Type
 28258 ;;                  2    0[COMRAM] unsigned short 
 28259 ;; Registers used:
 28260 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28261 ;; Tracked objects:
 28262 ;;		On entry : 0/0
 28263 ;;		On exit  : 0/0
 28264 ;;		Unchanged: 0/0
 28265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28266 ;;      Params:         5       0       0       0       0       0       0
 28267 ;;      Locals:         6       0       0       0       0       0       0
 28268 ;;      Temps:          4       0       0       0       0       0       0
 28269 ;;      Totals:        15       0       0       0       0       0       0
 28270 ;;Total ram usage:       15 bytes
 28271 ;; Hardware stack levels used:    1
 28272 ;; This function calls:
 28273 ;;		Nothing
 28274 ;; This function is called by:
 28275 ;;		_Interrupt
 28276 ;; This function uses a non-reentrant model
 28277 ;;
 28278                           
 28279                           	psect	text87
 28280  003688                     __ptext87:
 28281                           	opt stack 0
 28282  003688                     _fifo_write:
 28283                           	opt stack 20
 28284                           
 28285                           ;incstack = 0
 28286                           ;incstack = 0
 28287                           ;fifo_write@f stored from wreg
 28288  003688  CFE8 F039          	movff	wreg,fifo_write@f
 28289                           
 28290                           ;fifo.c: 62: uint32_t i;
 28291                           ;fifo.c: 63: const uint8_t *p;
 28292                           ;fifo.c: 64: p = buf;
 28293  00368C  C02B  F034         	movff	fifo_write@buf,fifo_write@p
 28294                           
 28295                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28296  003690  6A35               	clrf	fifo_write@i,c
 28297  003692  6A36               	clrf	fifo_write@i+1,c
 28298  003694  6A37               	clrf	fifo_write@i+2,c
 28299  003696  6A38               	clrf	fifo_write@i+3,c
 28300  003698  D052               	goto	i1l6334
 28301  00369A                     i1l6314:
 28302                           
 28303                           ;fifo.c: 69: if ((f->head + 1 == f->tail) ||
 28304                           ;fifo.c: 70: ((f->head + 1 == f->size) && (f->tail == 0))) {
 28305  00369A  5039               	movf	fifo_write@f,w,c
 28306  00369C  6ED9               	movwf	fsr2l,c
 28307  00369E  6ADA               	clrf	fsr2h,c
 28308  0036A0  0E04               	movlw	4
 28309  0036A2  D85B               	call	PL16	;call to abstracted procedure
 28310  0036A4  E102               	bnz	i1u610_25
 28311  0036A6  5030               	movf	??_fifo_write,w,c
 28312  0036A8  1832               	xorwf	??_fifo_write+2,w,c
 28313  0036AA                     i1u610_25:
 28314  0036AA  E012               	bz	i1l1526
 28315  0036AC  5039               	movf	fifo_write@f,w,c
 28316  0036AE  6ED9               	movwf	fsr2l,c
 28317  0036B0  6ADA               	clrf	fsr2h,c
 28318  0036B2  0E06               	movlw	6
 28319  0036B4  D852               	call	PL16	;call to abstracted procedure
 28320  0036B6  E102               	bnz	i1u611_25
 28321  0036B8  5030               	movf	??_fifo_write,w,c
 28322  0036BA  1832               	xorwf	??_fifo_write+2,w,c
 28323  0036BC                     i1u611_25:
 28324  0036BC  E10E               	bnz	i1l6322
 28325  0036BE  5039               	movf	fifo_write@f,w,c
 28326  0036C0  6ED9               	movwf	fsr2l,c
 28327  0036C2  6ADA               	clrf	fsr2h,c
 28328  0036C4  0E04               	movlw	4
 28329  0036C6  26D9               	addwf	fsr2l,f,c
 28330  0036C8  6ADA               	clrf	fsr2h,c
 28331  0036CA  50DE               	movf	postinc2,w,c
 28332  0036CC  10DD               	iorwf	postdec2,w,c
 28333  0036CE  E105               	bnz	i1l6322
 28334  0036D0                     i1l1526:
 28335                           
 28336                           ;fifo.c: 71: return i;
 28337  0036D0  C035  F02B         	movff	fifo_write@i,?_fifo_write
 28338  0036D4  C036  F02C         	movff	fifo_write@i+1,?_fifo_write+1
 28339  0036D8  D03F               	goto	i1l1527
 28340  0036DA                     i1l6322:
 28341                           
 28342                           ;fifo.c: 73: else {
 28343                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28344  0036DA  5034               	movf	fifo_write@p,w,c
 28345  0036DC  6ED9               	movwf	fsr2l,c
 28346  0036DE  D85A               	call	PL102	;call to abstracted procedure
 28347  0036E0  CFE6 F030          	movff	postinc1,??_fifo_write
 28348  0036E4  CFE5 F031          	movff	postdec1,??_fifo_write+1
 28349  0036E8  5039               	movf	fifo_write@f,w,c
 28350  0036EA  6EE1               	movwf	fsr1l,c
 28351  0036EC  6AE2               	clrf	fsr1h,c
 28352  0036EE  CFE6 F032          	movff	postinc1,??_fifo_write+2
 28353  0036F2  CFE5 F033          	movff	postdec1,??_fifo_write+3
 28354  0036F6  5030               	movf	??_fifo_write,w,c
 28355  0036F8  2432               	addwf	??_fifo_write+2,w,c
 28356  0036FA  6EE1               	movwf	fsr1l,c
 28357  0036FC  5031               	movf	??_fifo_write+1,w,c
 28358  0036FE  2033               	addwfc	??_fifo_write+3,w,c
 28359  003700  6EE2               	movwf	fsr1h,c
 28360  003702  CFDF FFE7          	movff	indf2,indf1
 28361  003706  2A34               	incf	fifo_write@p,f,c
 28362                           
 28363                           ;fifo.c: 75: f->head++;
 28364  003708  D83E               	call	PL42	;call to abstracted procedure
 28365  00370A  2ADE               	incf	postinc2,f,c
 28366  00370C  0E00               	movlw	0
 28367  00370E  22DD               	addwfc	postdec2,f,c
 28368                           
 28369                           ;fifo.c: 76: if (f->head == f->size) {
 28370  003710  5039               	movf	fifo_write@f,w,c
 28371  003712  6ED9               	movwf	fsr2l,c
 28372  003714  6ADA               	clrf	fsr2h,c
 28373  003716  0E06               	movlw	6
 28374  003718  26D9               	addwf	fsr2l,f,c
 28375  00371A  D83C               	call	PL102	;call to abstracted procedure
 28376  00371C  52E6               	movf	postinc1,f,c
 28377  00371E  52DE               	movf	postinc2,f,c
 28378  003720  50DD               	movf	postdec2,w,c
 28379  003722  18E5               	xorwf	postdec1,w,c
 28380  003724  CFDF FFE8          	movff	indf2,wreg
 28381  003728  B4D8               	btfsc	status,2,c
 28382  00372A  18E7               	xorwf	indf1,w,c
 28383  00372C  E103               	bnz	i1l6332
 28384                           
 28385                           ;fifo.c: 77: f->head = 0;
 28386  00372E  D82B               	call	PL42	;call to abstracted procedure
 28387  003730  6ADE               	clrf	postinc2,c
 28388  003732  6ADD               	clrf	postdec2,c
 28389  003734                     i1l6332:
 28390  003734  2A35               	incf	fifo_write@i,f,c
 28391  003736  0E00               	movlw	0
 28392  003738  2236               	addwfc	fifo_write@i+1,f,c
 28393  00373A  2237               	addwfc	fifo_write@i+2,f,c
 28394  00373C  2238               	addwfc	fifo_write@i+3,f,c
 28395  00373E                     i1l6334:
 28396  00373E  502C               	movf	fifo_write@nbytes,w,c
 28397  003740  5C35               	subwf	fifo_write@i,w,c
 28398  003742  502D               	movf	fifo_write@nbytes+1,w,c
 28399  003744  5836               	subwfb	fifo_write@i+1,w,c
 28400  003746  502E               	movf	fifo_write@nbytes+2,w,c
 28401  003748  5837               	subwfb	fifo_write@i+2,w,c
 28402  00374A  502F               	movf	fifo_write@nbytes+3,w,c
 28403  00374C  5838               	subwfb	fifo_write@i+3,w,c
 28404  00374E  E3A5               	bnc	i1l6314
 28405                           
 28406                           ;fifo.c: 78: }
 28407                           ;fifo.c: 79: }
 28408                           ;fifo.c: 81: }
 28409                           ;fifo.c: 83: return nbytes;
 28410  003750  C02C  F02B         	movff	fifo_write@nbytes,?_fifo_write
 28411  003754  C02D  F02C         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28412  003758                     i1l1527:
 28413  003758  0012               	return	
 28414  00375A                     __end_of_fifo_write:
 28415                           	opt stack 0
 28416  00375A                     PL16:
 28417                           	opt stack 20
 28418  00375A  26D9               	addwf	fsr2l,f,c
 28419  00375C  6ADA               	clrf	fsr2h,c
 28420  00375E  CFDE F030          	movff	postinc2,??_fifo_write
 28421  003762  CFDD F031          	movff	postdec2,??_fifo_write+1
 28422  003766  5039               	movf	fifo_write@f,w,c
 28423  003768  6ED9               	movwf	fsr2l,c
 28424  00376A  6ADA               	clrf	fsr2h,c
 28425  00376C  0E02               	movlw	2
 28426  00376E  26D9               	addwf	fsr2l,f,c
 28427  003770  6ADA               	clrf	fsr2h,c
 28428  003772  CFDE F032          	movff	postinc2,??_fifo_write+2
 28429  003776  CFDD F033          	movff	postdec2,??_fifo_write+3
 28430  00377A  2A32               	incf	??_fifo_write+2,f,c
 28431  00377C  0E00               	movlw	0
 28432  00377E  2233               	addwfc	??_fifo_write+3,f,c
 28433  003780  5031               	movf	??_fifo_write+1,w,c
 28434  003782  1833               	xorwf	??_fifo_write+3,w,c
 28435  003784  0012               	return	
 28436  003786                     __end_ofPL16:
 28437                           	opt stack 0
 28438  003786                     PL42:
 28439                           	opt stack 20
 28440  003786  5039               	movf	fifo_write@f,w,c
 28441  003788  6ED9               	movwf	fsr2l,c
 28442  00378A  6ADA               	clrf	fsr2h,c
 28443  00378C  0E02               	movlw	2
 28444  00378E  26D9               	addwf	fsr2l,f,c
 28445  003790  6ADA               	clrf	fsr2h,c
 28446  003792  0012               	return	
 28447  003794                     __end_ofPL42:
 28448                           	opt stack 0
 28449  003794                     PL102:
 28450                           	opt stack 20
 28451  003794  6ADA               	clrf	fsr2h,c
 28452  003796  5039               	movf	fifo_write@f,w,c
 28453  003798  6EE1               	movwf	fsr1l,c
 28454  00379A  6AE2               	clrf	fsr1h,c
 28455  00379C  0E02               	movlw	2
 28456  00379E  26E1               	addwf	fsr1l,f,c
 28457  0037A0  6AE2               	clrf	fsr1h,c
 28458  0037A2  0012               	return	
 28459  0037A4                     __end_ofPL102:
 28460                           	opt stack 0
 28461                           tblptru	equ	0xFF8
 28462                           tblptrh	equ	0xFF7
 28463                           tblptrl	equ	0xFF6
 28464                           tablat	equ	0xFF5
 28465                           prodh	equ	0xFF4
 28466                           prodl	equ	0xFF3
 28467                           intcon	equ	0xFF2
 28468                           indf0	equ	0xFEF
 28469                           postinc0	equ	0xFEE
 28470                           fsr0h	equ	0xFEA
 28471                           fsr0l	equ	0xFE9
 28472                           wreg	equ	0xFE8
 28473                           indf1	equ	0xFE7
 28474                           postinc1	equ	0xFE6
 28475                           postdec1	equ	0xFE5
 28476                           fsr1h	equ	0xFE2
 28477                           fsr1l	equ	0xFE1
 28478                           bsr	equ	0xFE0
 28479                           indf2	equ	0xFDF
 28480                           postinc2	equ	0xFDE
 28481                           postdec2	equ	0xFDD
 28482                           plusw2	equ	0xFDB
 28483                           fsr2h	equ	0xFDA
 28484                           fsr2l	equ	0xFD9
 28485                           status	equ	0xFD8
 28486                           
 28487 ;; *************** function _ReadUSART *****************
 28488 ;; Defined at:
 28489 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 28490 ;; Parameters:    Size  Location     Type
 28491 ;;		None
 28492 ;; Auto vars:     Size  Location     Type
 28493 ;;  data            1    0[COMRAM] unsigned char 
 28494 ;; Return value:  Size  Location     Type
 28495 ;;                  1    wreg      unsigned char 
 28496 ;; Registers used:
 28497 ;;		wreg, status,2, status,0
 28498 ;; Tracked objects:
 28499 ;;		On entry : 0/0
 28500 ;;		On exit  : 0/0
 28501 ;;		Unchanged: 0/0
 28502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28503 ;;      Params:         0       0       0       0       0       0       0
 28504 ;;      Locals:         1       0       0       0       0       0       0
 28505 ;;      Temps:          0       0       0       0       0       0       0
 28506 ;;      Totals:         1       0       0       0       0       0       0
 28507 ;;Total ram usage:        1 bytes
 28508 ;; Hardware stack levels used:    1
 28509 ;; This function calls:
 28510 ;;		Nothing
 28511 ;; This function is called by:
 28512 ;;		_Interrupt
 28513 ;; This function uses a non-reentrant model
 28514 ;;
 28515                           
 28516                           	psect	text88
 28517  001820                     __ptext88:
 28518                           	opt stack 0
 28519  001820                     _ReadUSART:
 28520                           	opt stack 20
 28521                           
 28522                           ;incstack = 0
 28523                           ;incstack = 0
 28524  001820  0EF2               	movlw	242
 28525  001822  1613               	andwf	_USART_Status,f,c
 28526  001824  ACAB               	btfss	4011,6,c	;volatile
 28527  001826  D003               	goto	i1l1833
 28528  001828  9013               	bcf	_USART_Status,0,c
 28529  00182A  B0AB               	btfsc	4011,0,c	;volatile
 28530  00182C  8013               	bsf	_USART_Status,0,c
 28531  00182E                     i1l1833:
 28532  00182E  B4AB               	btfsc	4011,2,c	;volatile
 28533  001830  8413               	bsf	_USART_Status,2,c
 28534  001832  B2AB               	btfsc	4011,1,c	;volatile
 28535  001834  8613               	bsf	_USART_Status,3,c
 28536  001836  CFAE F02B          	movff	4014,ReadUSART@data	;volatile
 28537  00183A  502B               	movf	ReadUSART@data,w,c
 28538  00183C  0012               	return	
 28539  00183E                     __end_of_ReadUSART:
 28540                           	opt stack 0
 28541                           tblptru	equ	0xFF8
 28542                           tblptrh	equ	0xFF7
 28543                           tblptrl	equ	0xFF6
 28544                           tablat	equ	0xFF5
 28545                           prodh	equ	0xFF4
 28546                           prodl	equ	0xFF3
 28547                           intcon	equ	0xFF2
 28548                           indf0	equ	0xFEF
 28549                           postinc0	equ	0xFEE
 28550                           fsr0h	equ	0xFEA
 28551                           fsr0l	equ	0xFE9
 28552                           wreg	equ	0xFE8
 28553                           indf1	equ	0xFE7
 28554                           postinc1	equ	0xFE6
 28555                           postdec1	equ	0xFE5
 28556                           fsr1h	equ	0xFE2
 28557                           fsr1l	equ	0xFE1
 28558                           bsr	equ	0xFE0
 28559                           indf2	equ	0xFDF
 28560                           postinc2	equ	0xFDE
 28561                           postdec2	equ	0xFDD
 28562                           plusw2	equ	0xFDB
 28563                           fsr2h	equ	0xFDA
 28564                           fsr2l	equ	0xFD9
 28565                           status	equ	0xFD8
 28566                           tblptru	equ	0xFF8
 28567                           tblptrh	equ	0xFF7
 28568                           tblptrl	equ	0xFF6
 28569                           tablat	equ	0xFF5
 28570                           prodh	equ	0xFF4
 28571                           prodl	equ	0xFF3
 28572                           intcon	equ	0xFF2
 28573                           indf0	equ	0xFEF
 28574                           postinc0	equ	0xFEE
 28575                           fsr0h	equ	0xFEA
 28576                           fsr0l	equ	0xFE9
 28577                           wreg	equ	0xFE8
 28578                           indf1	equ	0xFE7
 28579                           postinc1	equ	0xFE6
 28580                           postdec1	equ	0xFE5
 28581                           fsr1h	equ	0xFE2
 28582                           fsr1l	equ	0xFE1
 28583                           bsr	equ	0xFE0
 28584                           indf2	equ	0xFDF
 28585                           postinc2	equ	0xFDE
 28586                           postdec2	equ	0xFDD
 28587                           plusw2	equ	0xFDB
 28588                           fsr2h	equ	0xFDA
 28589                           fsr2l	equ	0xFD9
 28590                           status	equ	0xFD8
 28591                           
 28592                           	psect	rparam
 28593  0000                     tblptru	equ	0xFF8
 28594                           tblptrh	equ	0xFF7
 28595                           tblptrl	equ	0xFF6
 28596                           tablat	equ	0xFF5
 28597                           prodh	equ	0xFF4
 28598                           prodl	equ	0xFF3
 28599                           intcon	equ	0xFF2
 28600                           indf0	equ	0xFEF
 28601                           postinc0	equ	0xFEE
 28602                           fsr0h	equ	0xFEA
 28603                           fsr0l	equ	0xFE9
 28604                           wreg	equ	0xFE8
 28605                           indf1	equ	0xFE7
 28606                           postinc1	equ	0xFE6
 28607                           postdec1	equ	0xFE5
 28608                           fsr1h	equ	0xFE2
 28609                           fsr1l	equ	0xFE1
 28610                           bsr	equ	0xFE0
 28611                           indf2	equ	0xFDF
 28612                           postinc2	equ	0xFDE
 28613                           postdec2	equ	0xFDD
 28614                           plusw2	equ	0xFDB
 28615                           fsr2h	equ	0xFDA
 28616                           fsr2l	equ	0xFD9
 28617                           status	equ	0xFD8
 28618                           tblptru	equ	0xFF8
 28619                           tblptrh	equ	0xFF7
 28620                           tblptrl	equ	0xFF6
 28621                           tablat	equ	0xFF5
 28622                           prodh	equ	0xFF4
 28623                           prodl	equ	0xFF3
 28624                           intcon	equ	0xFF2
 28625                           indf0	equ	0xFEF
 28626                           postinc0	equ	0xFEE
 28627                           fsr0h	equ	0xFEA
 28628                           fsr0l	equ	0xFE9
 28629                           wreg	equ	0xFE8
 28630                           indf1	equ	0xFE7
 28631                           postinc1	equ	0xFE6
 28632                           postdec1	equ	0xFE5
 28633                           fsr1h	equ	0xFE2
 28634                           fsr1l	equ	0xFE1
 28635                           bsr	equ	0xFE0
 28636                           indf2	equ	0xFDF
 28637                           postinc2	equ	0xFDE
 28638                           postdec2	equ	0xFDD
 28639                           plusw2	equ	0xFDB
 28640                           fsr2h	equ	0xFDA
 28641                           fsr2l	equ	0xFD9
 28642                           status	equ	0xFD8


Data Sizes:
    Strings     4050
    Constant    120
    Data        0
    BSS         1134
    Persistent  3
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      85
    BANK0           160    113     151
    BANK1           256     20     198
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           239      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_122(CODE[6]), STR_121(CODE[8]), STR_119(CODE[6]), 
		 -> STR_117(CODE[5]), STR_115(CODE[8]), STR_114(CODE[6]), STR_113(CODE[9]), 
		 -> STR_112(CODE[11]), STR_110(CODE[8]), STR_108(CODE[4]), STR_107(CODE[5]), 
		 -> STR_95(CODE[5]), STR_83(CODE[7]), STR_78(CODE[5]), STR_69(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_46(CODE[5]), STR_45(CODE[5]), STR_43(CODE[5]), 
		 -> STR_42(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_122(CODE[6]), STR_121(CODE[8]), STR_119(CODE[6]), STR_117(CODE[5]), 
		 -> STR_115(CODE[8]), STR_114(CODE[6]), STR_113(CODE[9]), STR_112(CODE[11]), 
		 -> STR_110(CODE[8]), STR_108(CODE[4]), STR_107(CODE[5]), STR_95(CODE[5]), 
		 -> STR_83(CODE[7]), STR_78(CODE[5]), STR_69(CODE[5]), STR_46(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[5]), STR_42(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_122(CODE[6]), STR_121(CODE[8]), STR_119(CODE[6]), 
		 -> STR_117(CODE[5]), STR_115(CODE[8]), STR_114(CODE[6]), STR_113(CODE[9]), 
		 -> STR_112(CODE[11]), STR_110(CODE[8]), STR_108(CODE[4]), STR_107(CODE[5]), 
		 -> STR_95(CODE[5]), STR_83(CODE[7]), STR_78(CODE[5]), STR_69(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_46(CODE[5]), STR_45(CODE[5]), STR_43(CODE[5]), 
		 -> STR_42(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_122(CODE[6]), STR_121(CODE[8]), STR_119(CODE[6]), 
		 -> STR_117(CODE[5]), STR_115(CODE[8]), STR_114(CODE[6]), STR_113(CODE[9]), 
		 -> STR_112(CODE[11]), STR_110(CODE[8]), STR_108(CODE[4]), STR_107(CODE[5]), 
		 -> STR_95(CODE[5]), STR_83(CODE[7]), STR_78(CODE[5]), STR_69(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_46(CODE[5]), STR_45(CODE[5]), STR_43(CODE[5]), 
		 -> STR_42(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_122(CODE[6]), STR_121(CODE[8]), STR_119(CODE[6]), STR_117(CODE[5]), 
		 -> STR_115(CODE[8]), STR_114(CODE[6]), STR_113(CODE[9]), STR_112(CODE[11]), 
		 -> STR_110(CODE[8]), STR_108(CODE[4]), STR_107(CODE[5]), STR_95(CODE[5]), 
		 -> STR_83(CODE[7]), STR_78(CODE[5]), STR_69(CODE[5]), STR_46(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[5]), STR_42(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_245(CODE[2]), STR_244(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_239(CODE[2]), 
		 -> STR_238(CODE[3]), STR_237(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_255(CODE[3]), STR_254(CODE[23]), STR_253(CODE[10]), STR_252(CODE[10]), 
		 -> STR_251(CODE[12]), STR_250(CODE[8]), STR_249(CODE[7]), STR_248(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_247(CODE[10]), STR_246(CODE[3]), STR_243(CODE[20]), 
		 -> STR_242(CODE[3]), STR_241(CODE[14]), STR_240(CODE[3]), STR_236(CODE[8]), 
		 -> STR_235(CODE[15]), STR_234(CODE[67]), STR_233(CODE[3]), STR_232(CODE[27]), 
		 -> STR_231(CODE[67]), STR_230(CODE[39]), STR_229(CODE[62]), STR_228(CODE[55]), 
		 -> STR_227(CODE[49]), STR_226(CODE[67]), STR_225(CODE[47]), STR_224(CODE[47]), 
		 -> STR_223(CODE[34]), STR_222(CODE[71]), STR_221(CODE[20]), STR_220(CODE[78]), 
		 -> STR_219(CODE[24]), STR_218(CODE[77]), STR_217(CODE[67]), STR_216(CODE[69]), 
		 -> STR_215(CODE[47]), STR_214(CODE[40]), STR_213(CODE[39]), STR_212(CODE[33]), 
		 -> STR_211(CODE[23]), STR_210(CODE[56]), STR_209(CODE[24]), STR_208(CODE[44]), 
		 -> STR_207(CODE[50]), STR_206(CODE[31]), STR_205(CODE[50]), STR_204(CODE[51]), 
		 -> STR_203(CODE[46]), STR_202(CODE[44]), STR_201(CODE[27]), STR_200(CODE[39]), 
		 -> STR_199(CODE[39]), STR_198(CODE[52]), STR_197(CODE[54]), STR_196(CODE[55]), 
		 -> STR_195(CODE[3]), STR_192(CODE[24]), STR_191(CODE[57]), STR_190(CODE[53]), 
		 -> STR_189(CODE[58]), STR_188(CODE[3]), STR_185(CODE[25]), STR_184(CODE[3]), 
		 -> STR_181(CODE[24]), STR_180(CODE[3]), STR_177(CODE[24]), STR_176(CODE[3]), 
		 -> STR_173(CODE[24]), STR_172(CODE[3]), STR_169(CODE[23]), STR_168(CODE[3]), 
		 -> STR_165(CODE[21]), STR_164(CODE[3]), STR_161(CODE[22]), STR_160(CODE[3]), 
		 -> STR_157(CODE[17]), STR_156(CODE[3]), STR_153(CODE[18]), STR_152(CODE[4]), 
		 -> STR_151(CODE[11]), STR_150(CODE[2]), STR_147(CODE[7]), STR_144(CODE[7]), 
		 -> STR_141(CODE[9]), STR_138(CODE[7]), STR_135(CODE[8]), STR_132(CODE[7]), 
		 -> STR_131(CODE[2]), STR_130(CODE[2]), STR_129(CODE[6]), STR_128(CODE[8]), 
		 -> STR_127(CODE[8]), STR_126(CODE[20]), STR_125(CODE[27]), STR_124(CODE[6]), 
		 -> STR_123(CODE[33]), STR_120(CODE[26]), STR_118(CODE[32]), STR_116(CODE[28]), 
		 -> STR_111(CODE[40]), STR_109(CODE[44]), STR_106(CODE[39]), STR_104(CODE[36]), 
		 -> STR_102(CODE[37]), STR_100(CODE[40]), STR_98(CODE[37]), STR_97(CODE[50]), 
		 -> STR_94(CODE[41]), STR_92(CODE[38]), STR_90(CODE[39]), STR_88(CODE[42]), 
		 -> STR_86(CODE[39]), STR_85(CODE[66]), STR_82(CODE[3]), STR_79(CODE[20]), 
		 -> STR_77(CODE[33]), STR_76(CODE[35]), STR_75(CODE[24]), STR_73(CODE[33]), 
		 -> STR_71(CODE[24]), STR_68(CODE[54]), STR_67(CODE[6]), STR_66(CODE[3]), 
		 -> STR_61(CODE[34]), STR_60(CODE[3]), STR_57(CODE[4]), wrkbuf(BANK1[80]), 
		 -> STR_52(CODE[15]), STR_50(CODE[33]), STR_48(CODE[24]), STR_44(CODE[6]), 
		 -> STR_40(CODE[18]), STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), 
		 -> STR_28(CODE[24]), STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), 
		 -> STR_24(CODE[22]), STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), 
		 -> STR_19(CODE[6]), STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), 
		 -> STR_11(CODE[6]), STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), 
		 -> STR_4(CODE[55]), STR_3(CODE[35]), STR_2(CODE[53]), STR_1(CODE[37]), 

    sprintf$2144	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_257(CODE[17]), STR_256(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_194(CODE[3]), STR_193(CODE[7]), STR_187(CODE[3]), STR_186(CODE[7]), 
		 -> STR_183(CODE[4]), STR_182(CODE[8]), STR_179(CODE[4]), STR_178(CODE[8]), 
		 -> STR_175(CODE[4]), STR_174(CODE[8]), STR_171(CODE[4]), STR_170(CODE[8]), 
		 -> STR_167(CODE[4]), STR_166(CODE[7]), STR_163(CODE[4]), STR_162(CODE[7]), 
		 -> STR_159(CODE[4]), STR_158(CODE[7]), STR_155(CODE[4]), STR_154(CODE[7]), 
		 -> STR_149(CODE[3]), STR_148(CODE[7]), STR_146(CODE[3]), STR_145(CODE[7]), 
		 -> STR_143(CODE[3]), STR_142(CODE[7]), STR_140(CODE[3]), STR_139(CODE[7]), 
		 -> STR_137(CODE[3]), STR_136(CODE[7]), STR_134(CODE[3]), STR_133(CODE[7]), 
		 -> STR_81(CODE[3]), STR_80(CODE[7]), STR_65(CODE[3]), STR_64(CODE[7]), 
		 -> STR_63(CODE[3]), STR_62(CODE[7]), STR_59(CODE[3]), STR_58(CODE[7]), 
		 -> STR_56(CODE[3]), STR_55(CODE[7]), STR_54(CODE[3]), STR_53(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2124$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_write@buf	PTR const void  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_read@buf	PTR void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 8
		 -> Interrupt@data(COMRAM[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> Interrupt@dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16333 size(1) Largest target is 1
		 -> Interrupt@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK1[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(2) Largest target is 1
		 -> vscpPriority(BANK1[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(2) Largest target is 2
		 -> vscpClass(BANK1[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(2) Largest target is 1
		 -> vscpType(BANK1[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(2) Largest target is 1
		 -> vscpNodeId(BANK1[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(2) Largest target is 1
		 -> vscpSize(BANK1[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1417	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_194(CODE[3]), STR_193(CODE[7]), 

    printErrors$1408	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_187(CODE[3]), STR_186(CODE[7]), 

    printErrors$1402	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_183(CODE[4]), STR_182(CODE[8]), 

    printErrors$1396	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_179(CODE[4]), STR_178(CODE[8]), 

    printErrors$1390	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_175(CODE[4]), STR_174(CODE[8]), 

    printErrors$1384	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_171(CODE[4]), STR_170(CODE[8]), 

    printStatistics$1377	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_167(CODE[4]), STR_166(CODE[7]), 

    printStatistics$1371	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_163(CODE[4]), STR_162(CODE[7]), 

    printStatistics$1365	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_159(CODE[4]), STR_158(CODE[7]), 

    printStatistics$1359	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_155(CODE[4]), STR_154(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1156(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1291	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_149(CODE[3]), STR_148(CODE[7]), 

    receivePrintEventVerbose$1286	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_146(CODE[3]), STR_145(CODE[7]), 

    receivePrintEventVerbose$1281	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_143(CODE[3]), STR_142(CODE[7]), 

    receivePrintEventVerbose$1276	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_140(CODE[3]), STR_139(CODE[7]), 

    receivePrintEventVerbose$1271	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_137(CODE[3]), STR_136(CODE[7]), 

    receivePrintEventVerbose$1266	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_134(CODE[3]), STR_133(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1200	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1181	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1173	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[3]), STR_80(CODE[7]), 

    doModeVerbose@preg_1161	PTR unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1157	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1148	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_65(CODE[3]), STR_64(CODE[7]), 

    doModeVerbose$1144	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_63(CODE[3]), STR_62(CODE[7]), 

    doModeVerbose$1138	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_59(CODE[3]), STR_58(CODE[7]), 

    doModeVerbose$1133	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_56(CODE[3]), STR_55(CODE[7]), 

    doModeVerbose$1121	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_54(CODE[3]), STR_53(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1109	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _init_app_ram->_readEEPROM

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  103692
                                            106 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _readEEPROM
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    7534
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                        _writeEEPROM
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    3319
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8     910
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   16070
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
                 _sendVSCPDriverNack
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1455
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1393
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2323
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1393
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     631
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    2585
                                             18 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    2897
                                             18 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     675
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     427
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   76457
                                              0 BANK1     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                        _writeEEPROM
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    3519
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     161
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3457
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   19230
                                            101 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    3832
                                             95 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    5359
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    5164
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3333
                                             86 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2199
                                             54 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    1979
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    5402
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    5328
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     665
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4     898
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     257
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     260
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0      96
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    6449
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        20     8     12     948
                                             18 BANK0     20     8     12
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     601
                                             13 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           13     9      4     446
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    5087
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     232
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1480
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2      93
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     603
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     263
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     198
                                              3 BANK0      1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            5     1      4     186
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           24    24      0    2582
                                             18 COMRAM    24    24      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       11     9      2     154
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 11     8      3    1180
                                              7 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         15    10      5     378
                                              0 COMRAM    15    10      5
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _readEEPROM
   _vscp_restoreDefaults
     _init_app_ram
       _readEEPROM
     _init_app_eeprom
       _writeEEPROM
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _writeEEPROM
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _writeEEPROM
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5EE      0     1EE      16       32.5%
EEDATA             100      0       0       0        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100     3D      BD       8       73.8%
BITBANK1           100      0       0       5        0.0%
BANK1              100     14      C6       6       77.3%
BITBANK5            EF      0       0      13        0.0%
BANK5               EF      0       0      14        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     71      97       4       94.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      55       1       89.5%
BITSFR_8             0      0       0      40        0.0%
SFR_8                0      0       0      40        0.0%
BITSFR_7             0      0       0      40        0.0%
SFR_7                0      0       0      40        0.0%
BITSFR_6             0      0       0      40        0.0%
SFR_6                0      0       0      40        0.0%
BITSFR_5             0      0       0      40        0.0%
SFR_5                0      0       0      40        0.0%
BITSFR_4             0      0       0      40        0.0%
SFR_4                0      0       0      40        0.0%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     36F      15        0.0%
DATA                 0      0     56B      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Feb 26 22:52:28 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 6B64  
                          printBinary@i 0064                             fifo_write@f 0039  
                           fifo_write@i 0035                             fifo_write@p 0034  
                        ??_fifo_getFree 002D                   __end_of_sendVSCPFrame 2A00  
            doModeVerbose@filter_nodeid 0290                                      PL2 6B64  
                                    PL4 6B78                                      PL6 6B88  
                                    PL8 6B96                                      bsr 000FE0  
                   ___wmul@multiplicand 0062                             __CFG_BORV$3 000000  
                __end_of_doModeVscpNode 179E                                     PL10 6BB4  
                                   PL20 5862                                     PL12 6BFE  
                                   PL30 6C2A                                     PL22 3460  
                                   PL14 5844                                     PL40 6C50  
                                   PL32 3634                                     PL24 5872  
                                   PL16 375A                                     PL50 3648  
                                   PL42 3786                                     PL34 2C16  
                                   PL26 3E12                                     PL18 44D6  
                                   PL60 6C9E                                     PL52 293C  
                                   PL44 6C6C                                     PL36 6C3E  
                                   PL28 6C1A                                     PL70 3060  
                                   PL62 58C8                                     PL54 6C86  
                                   PL46 5898                                     PL38 3868  
                                   PL80 389C                                     PL72 3354  
                                   PL64 58DE                                     PL56 58B2  
                                   PL48 289C                                     PL90 1AF0  
                                   PL82 58EC                                     PL74 366A  
                                   PL66 24FA                                     PL58 3658  
                                   PL92 3FAE                                     PL84 3E22  
                                   PL76 3876                                     PL68 274E  
                                   PL94 2B66                                     PL86 38B0  
                                   PL78 388A                                     PL96 2EA4  
                                   PL88 51C6                                     PL98 58FE  
               sendEscapedUartData@pcrc 006C                                     l421 3A9C  
                                   l422 3AD4                                     l425 3AEC  
                                   l426 3AF6                                     l524 6B62  
                                   l428 3B02                                     l533 61B6  
                                   l552 6176                                     l529 6046  
                                   l801 2818                                     l538 60CE  
                                   l810 285E                                     l804 2822  
                                   l708 51C4                                     l565 620C  
                                   l557 6196                                     l549 616C  
                                   l813 286E                                     l718 4F16  
                                   l807 283E                                     l831 28C2  
                                   l743 5100                                     l920 38F6  
                                   l816 2888                                     l840 290E  
                                   l825 28AE                                     l834 28DE  
                                   l658 44D4                                     l915 4B78  
                                   l923 3900                                     l771 2ABE  
                                   l819 2892                                     l843 2928  
                                   l916 4B8C                                     l908 4AD6  
                                   l756 1E4E                                     l764 1E7C  
                                   l780 2AEE                                     l828 28B8  
                                   l852 2DE6                                     l941 39FC  
                                   l837 28FE                                     l861 2E16  
                                   l926 390A                                     l774 2AC8  
                                   l846 2932                                     l870 2E62  
                                   l759 1E58                                     l951 3CF6  
                                   l935 39E8                                     l783 2B0E  
                                   l855 2DF0                                     l768 1EA0  
                                   l792 2B5C                                     l864 2E36  
                                   l945 3CE2                                     l929 3926  
                                   l777 2AD2                                     l873 2E74  
                                   l970 3E06                                     l954 3D12  
                                   l938 39F2                                     l786 2B1E  
                                   l858 2DFA                                     l867 2E46  
                                   l948 3CEC                                     l876 2E90  
                                   l973 3E10                                     l789 2B52  
                                   l798 280E                                     l967 3DFC  
                                   l879 2E9A                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 0082                           fifo_write@buf 002B  
                 ?_vscp_restoreDefaults 002B                    __size_of_WriteTimer0 0012  
                                   _pos 0102          __size_of_writeRegisterExtended 0106  
                                   wreg 000FE8           __end_of_writeRegisterExtended 3574  
                                  PL100 1950                                    PL110 367E  
                                  PL102 3794                                    PL112 5908  
                                  PL104 2C34                                    PL106 48BE  
                                  PL108 275C                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1001 2A04  
                                  l1010 2A34                                    l1004 2A0E  
                                  l1013 2AA2                                    l1111 1CD0  
                                  l1007 2A18                                    l1031 3ED2  
                                  l1023 3E68                                    l1016 2AAC  
                                  l1210 24A4                                    l1050 3FAC  
                                  l1107 1CC4                                    l1220 2176  
                                  l1044 3F84                                    l1028 3E9A  
                                  l1213 24C8                                    l1061 2C7A  
                                  l1037 3F22                                    l1070 31B0  
                                  l1231 455C                                    l1047 3FA2  
                                  l1064 2D0E                                    l1240 45EC  
                                  l1073 3262                                    l1241 45FE  
                                  l1233 456E                                    l1242 4610  
                                  l1234 4580                                    l1091 3572  
                                  l1243 4622                                    l1235 4592  
                                  l2028 3456                                    l1260 1A04  
                                  l1172 308A                                    l1244 4634  
                                  l1236 45A4                                    l2029 345E  
                                  l1245 4646                                    l1237 45B6  
                                  l1166 4E62                                    l1158 4DCC  
                                  l1246 4658                                    l1238 45C8  
                                  l1247 466A                                    l1239 45DA  
                                  l2304 27E8                                    l1256 23EE  
                                  l1088 34BE                                    l1248 46C2  
                                  l1265 2270                                    l1515 2BF4  
                                  l1435 3CB6                                    l1427 3C1A  
                                  l2403 303C                                    l1429 3C38  
                                  l1550 1898                                    l1518 2C14  
                                  l2335 21E8                                    l1711 5628  
                                  l1703 55C0                                    l1623 51F0  
                                  l1712 562C                                    l1640 52DE  
                                  l2345 1EF2                                    l2521 2598  
                                  l1810 1E28                                    l2418 1C94  
                                  l1730 56D2                                    l1714 5648  
                                  l1803 1E06                                    l2523 258C  
                                  l1812 1E40                                    l1820 1D36  
                                  l2428 1A3A                                    l1660 5374  
                                  l2524 2590                                    l1564 2038  
                                  l1572 2096                                    l1709 5602  
                                  l2509 202C                                    l1566 2040  
                                  l1807 1E1A                                    l1639 532C  
                                  l2471 1F64                                    l1591 2662  
                                  l1808 1E1C                                    l1656 533C  
                                  l1592 26C8                                    l1809 1E26  
                                  l1489 3632                                    l1770 1856  
                                  l2490 22E8                                    l1586 1ABE  
                                  l1771 1858                                    l1675 545E  
                                  l1659 5370                                    l2548 1C00  
                                  l2557 1A80                                    l2493 22E4  
                                  l2469 1F04                                    l2567 1BBC  
                                  l9816 3A50                                    l9906 204A  
                                  l9850 3AE8                                    l9908 2050  
                                  l9870 3B1C                                    STR_1 762F  
                                  l9872 3B22                                    STR_2 718D  
                                  STR_3 769D                                    l9882 3B3E  
                                  l9874 3B28                                    l9858 3AFE  
                                  STR_4 70B5                                    STR_5 782A  
                                  STR_6 7CCF                                    STR_7 77EC  
                                  l9878 3B32                                    STR_8 7CB6  
                                  STR_9 7C7F                                    _PEIE 007F96  
                        sendCANFrame@id 008F                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _RCIP 007CFD  
                      ??_ECANInitialize 0061                                    _bDLE 00ED  
                          __CFG_PWRT$ON 000000                                    ___IT 000101  
            __end_of_sendVSCPDriverNack 293C                                    _bHex 0100  
          doModeVerbose@filter_priority 028E                                    _crc8 1960  
                                  _caps 00F5                                    _atoi 3368  
                                  _main 39FE                                    _init 1C0A  
                                  _mode 00F1                                    _itoa 1996  
                                  fsr0h 000FEA                                    fsr1h 000FE2  
                                  indf0 000FEF                                    fsr0l 000FE9  
                                  fsr2h 000FDA                                    indf1 000FE7  
                                  fsr1l 000FE1                                    indf2 000FDF  
                                  fsr2l 000FD9                                    _utoa 276A  
                   i1WriteTimer0@timer0 002B                                    prodh 000FF4  
                                  prodl 000FF3                                    start 0268  
                          _sprintf$2144 0086                            _sprintf$2137 0082  
                          _sprintf$2138 0084            receiveSendMultiEventCANAL@id 007D  
                           _writeEEPROM 187C               ECANReceiveMessage@dataLen 0033  
    __end_of_receiveSendMultiEventCANAL 3E12              _receiveSendMultiEventCANAL 3CB8  
                    doModeVerbose@count 02AB                   getVSCPFrame@pPriority 0078  
                        _caninputBuffer 0400                      doModeVerbose@value 02B1  
                  __end_of_getVSCPFrame 23F0                        __RegsToCANID@val 002D  
                      __RegsToCANID@ptr 002B                    __size_of_getCANFrame 0078  
              ?_receiveVSCPModeCanalMsg 002B                         ?_doModeVscpNode 002B  
                                 l10000 2130                                   l10012 216A  
                                 l10004 2142                                   l10100 5AE4  
                                 l10030 2C02                                   l10008 2156  
                                 l10016 2B86                                   l10120 5B8C  
                                 l10202 5E32                                   l10106 5B20  
                                 l10050 5952                                   l10028 2BFE  
                                 l10220 5F0A                                   l10212 5EA0  
                                 l10204 5E44                                   l10140 5C06  
                                 l10132 5BD6                                   l10124 5BA6  
                                 l10116 5B6A                                   l10060 59AA  
                                 l10036 591C                                   l10142 5C18  
                                 l10320 61D8                                   l10216 5EDC  
                                 l10208 5E72                                   l10152 5C70  
                                 l10136 5BEE                                   l10128 5BBE  
                                 l11106 2462                                   l11202 4B5A  
                                 l11130 493E                                   l10306 6190  
                                 l10250 6014                                   l10234 5F70  
                                 l10170 5CFE                                   l11204 4B5E  
                                 l11212 4B8A                                   l10500 671C  
                                 l10404 6496                                   l10332 6226  
                                 l10340 6266                                   l10260 604E  
                                 l10244 5FEE                                   l10180 5D4A  
                                 l10164 5CD0                                   l10092 5AA6  
                                 l10084 5A68                                   l10076 5A28  
                                 l10068 59E8                                   l11230 1814  
                                 l11206 4B6A                                   l11142 4990  
                                 l11222 22AC                                   l12030 3330  
                                 l12022 32F6                                   l12014 3290  
                                 l10510 6756                                   l10342 626A  
                                 l10246 6002                                   l10238 5F82  
                                 l10350 629A                                   l10158 5CA2  
                                 l11224 22D2                                   l11320 4044  
                                 l12024 32FE                                   l10520 6792  
                                 l10504 672C                                   l10280 60E8  
                                 l10176 5D2C                                   _B0CON 000E20  
                                 l11154 49E4                                   l11218 2274  
                                 l11306 3FDA                                   l12026 3314  
                                 l10610 6A74                                   l10602 6A38  
                                 l10530 67CC                                   l10514 6766  
                                 l10434 655E                                   l10418 64F2  
                                 l10362 62FC                                   l10194 5DE2  
                                 l10186 5D84                                   l11236 2516  
                                 l11404 4CEA                                   l12052 25F6  
                                 l11500 312C                                   l10540 6806  
                                 l10524 67A2                                   l10444 6598  
                                 l10372 637A                                   l10348 6288  
                                 l10292 6138                                   l10268 609A  
                                 l10188 5D8E                                   l10196 5DF2  
                                 l12124 3D3E                                   l11094 2448  
                                 l11166 4A36                                   l11246 254E  
                                 l11270 33E4                                   l11334 40AE  
                                 l11430 4DA8                                   l12054 25FE  
                                 l10622 6AEE                                   l10534 67DC  
                                 l10454 65D4                                   l10438 656E  
                                 l10390 6410                                   l10382 63CA  
                                 l10374 638E                                   l10366 630E  
                                 l12222 39D8                                   l10710 43EA  
                                 l10702 43C4                                   l11600 5288  
                                 l11192 4AE6                                   l11520 1F32  
                                 l11256 336A                                   l12048 25CE  
                                 l11512 1908                                   l12072 467C  
                                 l10632 6B36                                   l10552 686C  
                                 l10544 6816                                   l10464 660E  
                                 l10448 65A8                                   l10392 6420  
                                 l12152 3D8C                                   l10712 43F0  
                                 _B1CON 000E30                                   l11178 4A88  
                                 l11274 341E                                   l11266 33C4  
                                 l11258 3370                                   l11442 4DEA  
                                 l11434 4DBA                                   l11418 4D54  
                                 l11362 4BAC                                   l11282 18AC  
                                 l12058 260C                                   l11514 1912  
                                 l10626 6B12                                   l10618 6AB0  
                                 l10554 687C                                   l10474 6648  
                                 l10458 65E4                                   l10386 63DA  
                                 l10378 639E                                   l10634 6B44  
                                 l12170 3DEC                                   l12162 3DAC  
                                 l12146 3D6E                                   l12218 39C0  
                                 l12234 18D6                                   l10714 43F6  
                                 l11620 52E4                                   l11268 33DC  
                                 l11348 4118                                   l12084 35C0  
                                 l10628 6B20                                   l10468 661E  
                                 l10484 66B0                                   l10724 4408  
                                 l10812 4EA0                                   l11702 5468  
                                 l11630 533A                                   l11454 4E3E  
                                 l11390 4C80                                   l11286 18BC  
                                 l10590 69DC                                   l10574 694C  
                                 l10566 6908                                   l10478 6658  
                                 l10638 6B60                                   l12166 3DCC  
                                 l12238 18F4                                   l12510 1B52  
                                 l10734 441A                                   l10726 440E  
                                 l10646 433C                                   l12502 26B4  
                                 l10910 5106                                   l10902 50E4  
                                 l10830 4F10                                   l11712 549C  
                                 l11632 5340                                   l11624 5318  
                                 l11608 52AE                                   l11376 4C16  
                                 l11560 3240                                   l10584 69A4  
                                 l10752 4440                                   l10664 437C  
                                 l10648 4340                                   l10912 5118  
                                 l10824 4EEC                                   l10816 4EC2  
                                 l10920 5186                                   _B2CON 000E40  
                                 l11714 54A0                                   l11706 5486  
                                 l11650 538C                                   l11626 5332  
                                 l11458 4E50                                   l11482 30C2  
                                 l11562 3260                                   l10586 69B6  
                                 l10770 4482                                   l12450 3F2C  
                                 l12442 3EE6                                   l10834 4F20  
                                 l10818 4EC8                                   l10930 51C2  
                                 l11804 5658                                   l11820 568C  
                                 l11740 550C                                   l11660 53BA  
                                 l11644 537A                                   l11628 5336  
                                 l11580 5206                                   l12516 1B6E  
                                 l10764 446A                                   l10668 4382  
                                 l12612 2F9E                                   l10924 519A  
                                 l11814 5678                                   l11742 5510  
                                 l11726 54D4                                   l11670 53DC  
                                 l11638 5358                                   l11574 51FA  
                                 l11902 5830                                   l12526 1A02  
                                 l10782 44B2                                   l10758 4454  
                                 l10678 4398                                   l10686 43A8  
                                 l12622 2FE2                                   l12454 3F40  
                                 l10926 51A6                                   l10846 4F4C  
                                 l10918 5130                                   l12800 1874  
                                 l11832 56B2                                   l11728 54D8  
                                 l11904 5836                                   l11664 53C0  
                                 l11648 5380                                   l11656 53A4  
                                 l11680 5418                                   l11592 5242  
                                 l11576 51FE                                   l11584 520C  
                                 l11568 51D8                                   l12560 2388  
                                 l12480 1B0A                                   l12704 3BB4  
                                 l10776 449A                                   l10792 44D2  
                                 l10880 5088                                   l10872 5012  
                                 l10856 4F70                                   _B3CON 000E50  
                                 l10954 1E08                                   l10946 1DFA  
                                 l11914 17EA                                   l11762 5570  
                                 l11674 53E8                                   l11666 53CE  
                                 l11578 5202                                   l12482 1B10  
                                 l11930 1CDA                                   l11922 1CAA  
                                 l10786 44C4                                   l10890 50AE  
                                 l12900 1A1A                                   l12644 19B2  
                                 l11852 56F4                                   l11828 56A8  
                                 l11772 55A0                                   l11756 5544  
                                 l12732 3C3A                                   l12716 3BDE  
                                 l10788 44CA                                   l12902 1A1E  
                                 l12806 2772                                   l11870 5730  
                                 l11854 56FA                                   l11838 56BA  
                                 l11790 5606                                   l11766 558E  
                                 l11758 5556                                   l11678 53EE  
                                 l12582 2224                                   l12726 3C1E  
                                 l12816 27AA                                   l12840 219C  
                                 l11872 5786                                   l11864 571C  
                                 l11848 56E2                                   l11784 55DE  
                                 l11688 5428                                   l12576 221E  
                                 l12920 2010                                   l12912 1FCA  
                                 l12752 3CA8                                   l12496 2670  
                                 _B4CON 000E60                                   l12906 1A30  
                                 l12842 21A8                                   l11882 57CC  
                                 l11778 55C4                                   l12578 2220  
                                 l12922 2018                                   l12930 1A6C  
                                 l12738 3C68                                   l12746 3C86  
                                 l12674 2CEC                                   l12682 1D98  
                                 l11970 3550                                   l12852 21DA  
                                 l12844 21AC                                   l12860 1EB2  
                                 l11892 5806                                   l12940 1802  
                                 l12916 2004                                   l12932 1A70  
                                 l12756 3CAC                                   l12676 2D0C  
                                 l12684 1D9C                                   l11972 3570  
                                 l12780 1AAA                                   l12772 1A98  
                                 l12862 1EBE                                   l11886 57E6  
                                 l11878 57A8                                   l11798 5642  
                                 l12926 1A50                                   l12758 3CAE  
                                 l12686 1DAA                                   l12880 1C6C  
                                 l12864 1EC2                                   l11896 5828  
                                 l11888 57F8                                   l12688 1DB4  
                                 l11992 2D8A                                   _B5CON 000E70  
                                 l12890 1C8A                                   l12882 1C70  
                                 l12946 1B88                                   l12954 1BCC  
                                 l12698 3BA2                                   l11994 2DA0  
                                 l11986 2D3C                                   l12868 1EE4  
                                 l12948 1B90                                   l12956 1BD4  
                                 l12788 1ABC                                   l12878 1C64  
                                 l11998 2DBC                                   l12898 1A12  
                                 ?_crc8 0067                    __size_of_doModeSLCAN 0362  
                    writeEEPROM@address 0060                                   ?_atoi 0066  
                                 ?_main 00CA                                   ?_init 002B  
                                 ?_itoa 0070                           i1_WriteTimer0 17A6  
                                 _EEADR 000FA9                                   STR_10 7C5D  
                                 STR_11 7C7F                                   STR_12 7C91  
                                 STR_20 7C48                                   STR_13 7C7F  
                                 STR_21 7A82                                   STR_30 7CF4  
                                 STR_14 7BCC                                   STR_22 7A96  
                                 STR_15 7C7F                                   STR_31 7CF4  
                                 STR_23 7AD2                                   STR_32 7CF4  
                                 STR_16 7C4F                                   STR_40 7AF7  
                                 STR_24 7A05                                   STR_17 7C7F  
                                 STR_33 7CF4                                   STR_41 7CCA  
                                 STR_25 78CE                                   STR_34 7CF4  
                                 STR_42 7CD8                                   STR_18 7C0D  
                                 STR_26 7A6E                                   STR_50 77AB  
                                 STR_19 7C7F                                   STR_51 7C2A  
                                 STR_35 7CF4                                   STR_43 7CC5  
                                 STR_27 7AE5                                   STR_60 718A  
                                 STR_44 7C7F                                   STR_36 7C7F  
                                 STR_52 7B5D                                   STR_28 7948  
                                 STR_29 7CEA                                   STR_45 7CA2  
                                 STR_53 7C64                                   STR_37 7748  
                                 STR_61 7705                                   STR_70 7C2A  
                                 STR_62 7C64                                   STR_54 7CED  
                                 STR_38 7CE7                                   STR_46 7CA7  
                                 STR_39 7C7F                                   STR_71 7930  
                                 STR_47 7C2A                                   STR_55 7C64  
                                 STR_63 7CED                                   STR_72 7C2A  
                                 STR_80 7C64                                   STR_64 7C64  
                                 STR_56 7CED                                   STR_48 7930  
                                 STR_73 77AB                                   STR_49 7C2A  
                                 STR_57 7BE9                                   STR_81 7CED  
                                 STR_65 7CED                                   STR_82 718A  
                                 STR_66 718A                                   STR_74 7C2A  
                                 STR_58 7C64                                   STR_90 7596  
                                 STR_67 7C7F                                   STR_91 7CF4  
                                 STR_59 7CED                                   STR_83 7C56  
                                 STR_75 7960                                   STR_84 7CF4  
                                 STR_76 76C0                                   STR_92 75E4  
                                 STR_68 7122                                   STR_93 7CF4  
                                 STR_69 7CAC                                   STR_77 778A  
                                 STR_85 6F1C                                   STR_78 7CBB  
                                 STR_86 74FA                                   STR_94 7459  
                                 STR_87 7CF4                                   STR_95 7CB1  
                                 STR_79 7AAA                                   STR_96 7CF4  
                                 STR_88 742F                                   STR_89 7CF4  
                                 STR_97 7229                                   STR_98 760A  
                                 STR_99 7CF4            __end_of_printFirmwareVersion 24FA  
                                 _BSEL0 000DF8                         __end_of___lldiv 21FA  
                                 ?_utoa 0067                                   u12000 1D58  
                                 u12010 1D86                         __end_of_calcCRC 18FE  
                                 u12007 1D52                                   _T0CON 000FD5  
                                 u12017 1D80                                   u12205 5A8C  
                                 u12215 5ACA                         __end_of___llmod 1F04  
                                 u12225 5B08                                   u14010 33BA  
                                 u12235 5B44                                   u12165 5986  
                                 u14030 33D8                                   u12335 5C3C  
                                 u12175 59CE                                   u14017 33B4  
                                 u14105 2986                                   u12425 5E16  
                                 u12185 5A0C                                   u14050 3408  
                                 u12195 5A4C                                   u14060 3432  
                                 u14037 33D2                                   u12445 5E68  
                                 u12455 5E96                                   _LATC1 007C59  
                                 u14320 1F22                                   u13520 4FDE  
                                 u14057 3402                                   u12465 5EC4  
                                 u13530 4FE8                                   u14067 342C  
                                 u12475 5F00                                   u14340 1F5A  
                                 u13540 4FF2                                   u12485 5F2E  
                                 u13525 4FDC                                   u14327 1F1C  
                                 u13535 4FE6                                   u13545 4FF0  
                                 u16130 1B2C                                   u14347 1F54  
                                 u12755 6442                                   u12845 6BBC  
                                 u15094 1CBA                                   u15095 1CB6  
                                 u15335 4500                                   u12855 66D2  
                                 u12775 6514                                   u12695 62BE  
                                 u15336 4506                                   u16137 1B26  
                                 u15345 4534                                   u15337 4514  
                                 u12945 689E                                   u15346 453A  
                                 u15347 4548                                   u12955 68E4  
                                 u15365 359A                                   u12965 692A  
                                 u16270 23DA                                   u15375 35AA  
                                 u15385 35C8                                   u17137 3A5E  
                                 u13970 3384                                   u16450 1DDC  
                                 u16275 23D0                                   u13990 339C  
                                 u13977 337E                                   u16457 1DD2  
                                 u13997 3396                                   u15765 2EEE  
                       __end_of___lwdiv 1C9E                                   _ERRIE 007D1D  
                          _vscpPriority 01AF                                   i1l401 0164  
                                 i1l404 0180                                   i1l413 024A  
                                 i1l407 01C8                         __end_of___lwmod 1A44  
                                 i1l392 0174                                   i1l387 007C  
                                 i1l389 0176                                   i1l398 0174  
                       sendCANFrame@dlc 0093                                   _MSEL0 000DF0  
                                 _MSEL1 000DF1                                   _MSEL2 000DF2  
                                 _RCREG 000FAE                                   _IRXIF 007D27  
                                 _RCSTA 000FAB                        printBinary@value 0063  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _SPBRG 000FAF                writeRegisterExtended@reg 00B8  
                                 _TXREG 000FAD                                   _TXSTA 000FAC  
                        __CFG_EBTR0$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                                 _bOpen 00EF                 readRegisterExtended@reg 00B8  
                         __CFG_WRTD$OFF 000000                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 2630                                   crc8@m 0069  
                       __end_of_dpowers 6D0C                         __end_of_isdigit 187C  
                                 _timer 00E9                                   atoi@a 006B  
                                 atoi@s 0066                                   main@c 00D0  
                                 _ultoa 2F8E                              Interrupt@c 004E  
            ??_printNodeFirmwareVersion 00BF                        _printErrors$1402 009A  
                      _printErrors$1408 009C                        _printErrors$1417 009E  
                      _printErrors$1390 0096                        _printErrors$1384 0094  
                                 tablat 000FF5                        _printErrors$1396 0098  
               ??_receiveSendEventCANAL 0072             __end_of_sendEscapedUartData 1EA2  
                                 plusw2 000FDB                                   utoa@c 006F  
                                 utoa@v 006D                                   status 000FD8  
                       __end_of_sprintf 5844                 ??_receiveSendEventSLCAN 0083  
                       __end_of_strichr 1A82                         __end_of_strcspn 1C0A  
                       __end_of_toupper 1806                         __end_of_stristr 22EA  
                          __end_ofPL100 1960                            __end_ofPL110 3688  
                          __end_ofPL102 37A4                            __end_ofPL112 5912  
                          __end_ofPL104 2C42                            __end_ofPL106 48CC  
                          __end_ofPL108 276A       __size_of_receivePrintEventVerbose 02C2  
                   doModeVerbose@i_1103 02B0               ?_receivePrintEventVerbose 002B  
                   doModeVerbose@p_1200 02BB                     doModeVerbose@p_1109 02B2  
                   doModeVerbose@p_1181 02B9                     doModeVerbose@p_1157 02B4  
                        WriteUSART@data 0060                    _ECANSetOperationMode 1806  
                          _canInputFifo 001B                         __initialization 1F66  
                doModeVerbose@page_1154 02A1           receiveSendMultiEventCANAL@dlc 007C  
                          __end_of_crc8 1996           receiveSendMultiEventCANAL@crc 0081  
                          __end_of_atoi 3460           receiveSendMultiEventCANAL@pos 0082  
                          __end_of_main 3B4A                            __end_of_init 1C54  
                          __end_of_itoa 19CE                            __end_of_utoa 280A  
                   doModeVerbose@ifmode 02B6                     doModeVerbose@maskno 02A8  
                   doModeVerbose@nodeid 028C                           doModeSLCAN@id 009D  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 00A3  
                     ??_ECANSendMessage 0072                          ?i1_WriteTimer0 002B  
            writeRegisterExtended@value 00BB                                  ??_crc8 006A  
                 getVSCPFrame@pvscptype 0074                                  ??_atoi 0068  
                ??_vscp_restoreDefaults 0064                                  ??_main 00CF  
                     readRegister@value 00B9                                  ??_init 0064  
                                ??_itoa 0076                                  ??_utoa 006D  
                doModeVerbose@mask_type 0292                           __activetblptr 000002  
                       _stateVscpDriver 00F4                       __RegsToCANID@type 002E  
                  _can_transmitOverruns 0001              ECANReceiveMessage@msgFlags 0034  
                         ?_readRegister 00B6               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1161 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00B9  
            ECANReceiveMessage@savedPtr 0035                                  _CANCON 000F6F  
                      ___llmod@dividend 006D                                  STR_100 74AA  
                                STR_101 7CF4                                  STR_110 7C05  
                                STR_102 7654                                  STR_103 7CF4  
                                STR_111 74D2                                  STR_200 6E6F  
                                STR_112 7B86                                  STR_120 78B4  
                                STR_104 7679                                  STR_105 7CF4  
                                STR_121 7BED                                  STR_113 7BBA  
                                STR_201 7863                                  STR_130 7CF2  
                                STR_122 7C8B                                  STR_114 7C85  
                                STR_106 756F                                  STR_202 73D7  
                                STR_210 700F                                  STR_131 7CF0  
                                STR_107 7C9D                                  STR_115 7BFD  
                                STR_211 79C0                                  STR_123 7769  
                                STR_203 737D                                  STR_124 7C7F  
                                STR_140 7CED                                  STR_108 7CDC  
                                STR_132 7C41                                  STR_116 7847  
                                STR_212 7727                                  STR_204 71F6  
                                STR_220 6D2C                                  STR_133 7C64  
                                STR_117 7CC0                                  STR_141 7BC3  
                                STR_221 7A46                                  STR_125 787E  
                                STR_213 7521                                  STR_109 7403  
                                STR_205 725B                                  STR_150 7CF4  
                                STR_142 7C64                                  STR_134 7CED  
                                STR_126 7A5A                                  STR_206 780B  
                                STR_118 77CC                                  STR_230 75BD  
                                STR_214 7482                                  STR_222 6DC7  
                                STR_143 7CED                                  STR_119 7C97  
                                STR_135 7BF5                                  STR_127 7BD5  
                                STR_151 7B91                                  STR_223 76E3  
                                STR_215 734E                                  STR_207 728D  
                                STR_231 6E53                                  STR_240 718A  
                                STR_160 718A                                  STR_152 7CD4  
                                STR_136 7C6B                                  STR_144 7C3A  
                                STR_128 7BDD                                  STR_232 7899  
                                STR_208 73AB                                  STR_224 731F  
                                STR_216 6E0E                                  STR_233 718A  
                                STR_145 7C64                                  STR_137 7CED  
                                STR_129 7C79                                  STR_241 7B6C  
                                STR_153 7B09                                  STR_161 7A1B  
                                STR_209 7900                                  STR_225 72F0  
                                STR_217 6ED9                                  STR_242 718A  
                                STR_234 6E53                                  STR_162 7C72  
                                STR_146 7CED                                  STR_154 7C72  
                                STR_138 7C33                                  STR_250 7C1D  
                                STR_170 7C15                                  STR_226 6E96  
                                STR_218 6D7A                                  STR_139 7C64  
                                STR_171 7CE0                                  STR_163 7CE0  
                                STR_155 7CE0                                  STR_147 7C2C  
                                STR_251 7B7A                                  STR_235 7B4E  
                                STR_243 7ABE                                  STR_219 7918  
                                STR_227 72BF                                  STR_180 718A  
                                STR_172 718A                                  STR_164 718A  
                                STR_156 718A                                  STR_148 7C64  
                                STR_244 7CFC                                  STR_236 7BE5  
                                STR_252 7BB0                                  STR_228 707E  
                                STR_181 7990                                  STR_149 7CED  
                                STR_237 7CF8                                  STR_245 7CF6  
                                STR_253 7BA6                                  STR_157 7B3D  
                                STR_165 7A31                                  STR_173 79A8  
                                STR_229 6F5E                                  _EEDATA 000FA8  
                                STR_246 718A                                  STR_166 7C72  
                                STR_158 7C72                                  STR_182 7C15  
                                STR_174 7C15                                  STR_238 7CE4  
                                STR_254 79EE                                  STR_190 7158  
                                STR_255 718A                                  STR_183 7CE0  
                                STR_175 7CE0                                  STR_167 7CE0  
                                STR_159 7CE0                                  STR_239 7CFA  
                                STR_247 7B9C                                  STR_191 6FD6  
                                STR_248 718A                                  STR_184 718A  
                                STR_176 718A                                  STR_168 718A  
                                STR_256 7B1B                                  STR_192 7978  
                                STR_193 7C64                                  STR_249 7C25  
                                STR_257 7B2C                                  STR_169 79D7  
                                STR_177 7990                                  STR_185 78E7  
                                STR_186 7C64                                  STR_178 7C15  
                                STR_194 7CED                                  STR_195 718A  
                                STR_187 7CED                                  STR_179 7CE0  
                                STR_188 718A                                  STR_196 7047  
                                STR_197 70EC                                  STR_189 6F9C  
                                STR_198 71C2                                  STR_199 7548  
                                _EECON2 000FA7            __end_of_readRegisterExtended 3264  
                                _CIOCON 000F73                                  ?_ultoa 0076  
          ??_sendVSCPDriverCommandReply 0070                    __end_of_fifo_getFree 274E  
                                i1l1440 46FC                           ?_init_app_ram 002B  
                                i1l1450 47CA                                  i1l1451 474A  
                                _MDSEL0 007BBE                                  i1l1461 47A4  
                                i1l1453 4758                                  _MDSEL1 007BBF  
                                i1l1526 36D0                                  i1l1527 3758  
                                i1l1471 482E                                  i1l1463 47B4  
                                i1l1455 476C                                  i1l1447 48BC  
                                i1l1472 4848                                  i1l1457 4780  
                                i1l1459 4794                                  i1l1494 3866  
                                i1l1833 182E                                  i1l1499 2104  
                                i1l6322 36DA                                  i1l6314 369A  
                                i1l6332 3734                                  i1l6334 373E  
                            _OpenTimer0 183E                                  i1l6346 270C  
                                i1l9310 20A6                                  i1l9320 20D4  
                                i1l9312 20B0                                  i1l9322 20DA  
                                i1l9314 20BA                                  i1l9316 20C4  
                                i1l9308 209E                                  i1l9340 3802  
                                i1l9318 20CE                                  i1l9326 20E6  
                                i1l9640 47DE                                  i1l9650 47FE  
                                i1l9572 46EA                                  i1l9582 4714  
                                i1l9590 4734                                  i1l9690 48A6  
                                i1l9676 4876                                  i1l9684 4890  
                                i1l9668 484A                                  i1l9588 472A  
                                i1l9596 4738                         _init_app_eeprom 23F0  
                    __size_of_ReadUSART 001E                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 0032                  ECANReceiveMessage@mode 0039  
                ECANReceiveMessage@temp 003A                                  _RXBnIE 007D19  
                                _RXBnIF 007D21                       getVSCPFrame@pData 007C  
            ??_sendVSCPDriverErrorFrame 006F                       getVSCPFrame@pSize 007A  
                    _doModeVerbose$1121 0294                      _doModeVerbose$1133 0296  
                    _doModeVerbose$1144 029A                      _doModeVerbose$1138 0298  
                    _doModeVerbose$1148 029C                      _doModeVerbose$1173 029E  
                 ?_ECANSetOperationMode 002B                      __CANIDToRegs@Value 0069  
                    __size_of_Interrupt 0250                readRegisterExtended@page 00B6  
                    __size_of_OpenUSART 005C                        fifo_write@nbytes 002C  
                        getCANFrame@pid 0071                                  ___wmul 192E  
                            _bInitiated 00EE                          __CFG_STVREN$ON 000000  
                             ??___lldiv 0068                               ??_calcCRC 006F  
                                _cmdbuf 0104                               ??___llmod 0075  
                      OpenTimer0@config 0060                  receiveSendEventCANAL@i 007A  
                             ??___lwdiv 0064                               ??___lwmod 0064  
         _receivePrintEventVerbose$1271 009B           _receivePrintEventVerbose$1281 009F  
         _receivePrintEventVerbose$1266 0099           _receivePrintEventVerbose$1291 00A3  
         _receivePrintEventVerbose$1276 009D           _receivePrintEventVerbose$1286 00A1  
                                _memcpy 1B40                                  _memset 18A2  
                                clear_0 1F6E                                  clear_1 1F82  
                                clear_2 1F94                                  clear_3 1FA0  
                                clear_4 1FAC                                  clear_5 1FB8  
                         ?_sendCANFrame 008F                                  _strcat 1D8E  
                                _strchr 1F04                                  _strcpy 18FE  
                                _strlen 1B00                                  _wrkbuf 0154  
                                _strtok 2508                                  _strspn 1B82  
                           Interrupt@id 0050     __size_of_sendVSCPDriverCommandReply 00C4  
                             ??_isdigit 0060                  receiveSendEventSLCAN@i 008B  
                      __end_of_printMDF 2630                            __mediumconst 6CB4  
                        ??_readRegister 00BA                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 002B                 __size_of_nibbleFromChar 003E  
                                ultoa@c 0082                                  ultoa@v 007E  
                          ?_printErrors 002B                               ??_sprintf 007E  
                             ??_strichr 0065                               ??_strcspn 006A  
                             ??_toupper 0060                          ??_init_app_ram 0063  
                             ??_stristr 0071              ??_sendVSCPModeCapabilities 006F  
            doModeVerbose@mask_priority 0291                        __end_of_strnicmp 202E  
                            __accesstop 0060                 __end_of__initialization 1FBE  
                  _printFirmwareVersion 247A                         writeEEPROM@data 0062  
                 __size_of_getVSCPFrame 0086               receiveSendEventCANAL@data 0072  
                  doModeVerbose@id_1212 02A3                              _WriteUSART 17DC  
                        __pcstackCOMRAM 002B                __size_of_printStatistics 01A8  
                  _printStatistics$1371 0098                    _printStatistics$1365 0096  
                  _printStatistics$1359 0094                    _printStatistics$1377 009A  
                 _uart_transmitOverruns 0009                         ??i1_WriteTimer0 002D  
                         __end_of_ultoa 3060                              __end_ofPL2 6B78  
                            __end_ofPL4 6B88                              __end_ofPL6 6B96  
                            __end_ofPL8 6BB4                          ??_sendCANFrame 0096  
                     __end_of_ReadUSART 183E                           ?__RegsToCANID 002B  
           __size_of_ECANReceiveMessage 01FA                      sendVSCPFrame@pData 009C  
                       readRegister@reg 00B6                    sendVSCPDriverAck@crc 006F  
                    __size_of_findNodes 00F4                          doModeSLCAN@dlc 00A1  
                    __size_of_fifo_init 0030                      __size_of_fifo_read 00A2  
                getVSCPFrame@pvscpclass 0072                 __end_of_init_app_eeprom 247A  
                     __end_of_Interrupt 0268                           ReadUSART@data 002B  
                    readRegister@nodeid 00BE                          _status_led_cnt 000F  
                    __RegsToCANID@Value 0031                              _crc8_table 0300  
                     __end_of_OpenUSART 1E42                 doModeVerbose@mask_class 028A  
             printNodeFirmwareVersion@i 00C4                         setFilter@filter 006A  
                          sprintf@width 008B        __end_of_printNodeFirmwareVersion 2DE0  
                            _doModeVscp 4324                                 ??_ultoa 007E  
                          _getVSCPFrame 236A                              __pbssBANK0 00D1  
                            __pbssBANK1 0100                              __pbssBANK2 0200  
                            __pbssBANK3 0300                             ?_OpenTimer0 002B  
                            calcCRC@crc 0070                              calcCRC@len 006E  
                            __pnvCOMRAM 0055                   ?_printFirmwareVersion 002B  
                ??_ECANSetOperationMode 0060                      __size_of_init_crc8 006A  
                          __IT_INT_MASK 0015                           setFilter@eidh 006D  
                         setFilter@eidl 006E                            __IT_SAVE_BSR 0016  
                         setFilter@sidh 006B                           setFilter@sidl 006C  
                            _canrxcount 00F0                            ?_writeEEPROM 0060  
                      ??_doModeVscpNode 0060                              _nTimeStamp 00F2  
           ?_receiveSendMultiEventCANAL 002B                __end_of_hexStringToBytes 26CA  
              ECANSetOperationMode@mode 0060                                 ?___wmul 0060  
                    __size_of_setFilter 01DE                                 _B0RXFUL 007107  
                               _B1RXFUL 007187                    __ECANRxFilterHitInfo 0014  
                               _B2RXFUL 007207                                 _B3RXFUL 007287  
                               _B4RXFUL 007307                      _sendVSCPDriverNack 28AA  
                               _B5RXFUL 007387                        WriteTimer0@timer 0062  
                         putsUSART@data 0061                    _readRegisterExtended 3168  
                               ?_memcpy 0060                                 _ECANCON 000F77  
                               ?_memset 0060                           ??_WriteTimer0 0062  
                        ??__RegsToCANID 002F                   sendVSCPFrame@priority 009A  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0060  
                               ?_strchr 0060                                 ?_strcpy 0060  
                               ?_strlen 0060                                 ?_strtok 006C  
                               ?_strspn 0066                              _cntRxBytes 00D5  
                            _cntTxBytes 00DD                                 i1l13000 0104  
                               i1l13010 0134                                 i1l13020 016C  
                               i1l13012 0140                                 i1l13004 0116  
                               i1l13030 01B4                                 i1l13022 017E  
                               i1l13006 0122                                 i1l13032 01D0  
                               i1l13024 0188                                 i1l13016 0152  
                               i1l13034 01D8                                 i1l13026 01A4  
                               i1l13042 0248                                 i1l13018 015C  
                    __size_of_printGUID 00F0                                 i1l13036 01FC  
                               i1l13028 01AC                                 i1l13038 0244  
                   ?_sendVSCPDriverNack 002B                                 i1l12970 003C  
                               i1l12980 0090                                 i1l12972 0042  
                               i1l12990 00D2                                 i1l12982 00A2  
                               i1l12974 0068                                 i1l12992 00DA  
                               i1l12984 00B2                                 i1l12976 0078  
                               i1l12968 0034                                 i1l12994 00E6  
                               i1l12986 00B6                                 i1l12978 0084  
                               i1l12988 00C2                                 i1l12998 00F8  
                            _fifo_write 3688                      __size_of_printHelp 01C0  
                    __size_of_printMode 0076                   sendVSCPFrame@vscptype 0098  
                 __size_of_fifo_getFree 0084                 doModeVerbose@value_1156 02A9  
                     sendCANFrame@pdata 0094                              _made_table 000D  
                               _RXB0CON 000F60                                 _RXB1CON 000F50  
                               _RXB0FUL 007B07                        __ECANPointBuffer 2098  
                               _TXB0CON 000F40                                 _TXB1CON 000F30  
                               _TXB2CON 000F20                      __size_of_putsUSART 0058  
    __end_of_sendVSCPDriverCommandReply 2EA4              _sendVSCPDriverCommandReply 2DE0  
                               _RXFCON0 000DD4                                 _RXFCON1 000DD5  
                 _writeRegisterExtended 346E        __size_of_receiveVSCPModeCanalMsg 00DC  
                __size_of_doModeVerbose 1252                    sendEscapedUartData@c 006E  
                __size_of_sendVSCPFrame 00B6        __end_of_sendVSCPDriverErrorFrame 2B66  
                            _readEEPROM 17B8          __size_of_receiveSendEventCANAL 013C  
         __end_of_receiveSendEventCANAL 39FE                    ??_sendVSCPDriverNack 006F  
            printFirmwareVersion@wrkbuf 0078          __size_of_receiveSendEventSLCAN 017A  
                       _ECANSendMessage 3B4A           __end_of_receiveSendEventSLCAN 3FAE  
                               __Hparam 0000                       __end_of_findNodes 3168  
                               __Lparam 0000                       __end_of_fifo_init 1AF0  
                     __end_of_fifo_read 2C16                           ??_getCANFrame 0071  
                           ?_WriteUSART 002B              receiveVSCPModeCanalMsg@dlc 00B6  
                  __end_of_readRegister 2D10                               ?_printMDF 002B  
                               _bSilent 0101               receiveVSCPModeCanalMsg@id 00B2  
                         ??_doModeSLCAN 0096                                 ___lldiv 2184  
                       __size_of___wmul 0022                                 _calcCRC 18D0  
                       getCANFrame@pdlc 006D                                 ___llmod 1EA2  
                               ___lwdiv 1C54                               _FIFOEMPTY 007BA7  
                               ___lwmod 1A06                   ?_readRegisterExtended 00B6  
           printNodeFirmwareVersion@buf 00C0                    __end_of_init_app_ram 1D36  
                          _fifo_getFree 26CA                            init_crc8@crc 0064  
                               __pcinit 1F66                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0064  
                               __ptext0 39FE                                 __ptext1 179C  
                               __ptext2 4E64                                 __ptext3 2630  
                               __ptext4 1A82                 receiveSendEventCANAL@id 007B  
                               __ptext5 3E34                                 __ptext6 2F8E  
                               __ptext7 4324                                 __ptext8 2DE0  
                               __ptext9 2A00                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C3                       ??_printStatistics 0094  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 0030  
                       __size_of_strlen 0040                       __end_of_hexpowers 6D2C  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 6CE4                       __end_of_init_crc8 2098  
                               _isdigit 185C          printNodeFirmwareVersion@nodeid 00BF  
                   __end_of_WriteTimer0 17DC                          _nibbleFromChar 1A82  
                      ?_init_app_eeprom 002B                                 _sprintf 51D2  
      __end_of_sendVSCPModeCapabilities 2AB6                       __end_of_setFilter 46C4  
                               _strichr 1A44                          doModeVerbose@c 02AC  
                        doModeVerbose@i 02AA                          doModeVerbose@p 02B7  
                               _strcspn 1BC6                                 _toupper 17F0  
                           ?_doModeVscp 002B                                 _stristr 2272  
                  __size_of_printBinary 004A                    end_of_initialization 1FBE  
                          Interrupt@dlc 004F                       __end_of_octpowers 6CE4  
                  __size_of_printErrors 02D6                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0078                                 itoa@buf 0070  
                             i1u1132_25 46F2                               i1u1132_27 46F4  
                               memset@c 0062                                 itoa@val 0072  
                               memset@n 0064                                 memset@p 0066  
                         __Lmediumconst 6CB4                               i1u1092_25 37CA  
                  __end_of_sendCANFrame 1A06                               i1u1093_25 37DA  
                             i1u1094_25 3806                               i1u1700_20 0132  
                             i1u1700_21 0130                               i1u1701_20 0140  
                             i1u1701_21 013E                               i1u1710_20 01D0  
                             i1u1702_20 0150                               i1u1710_21 01CE  
                             i1u1702_21 014E                               i1u1711_20 01D8  
                             i1u1703_20 015C                               i1u1711_21 01D6  
                             i1u1703_21 015A                               i1u1712_20 01FC  
                             i1u1704_20 016C                               i1u1712_21 01FA  
                             i1u1704_21 016A                               i1u1705_20 017E  
                             i1u1705_21 017C                               i1u1706_20 0188  
                             i1u1706_21 0186                               i1u1707_20 01A4  
                             i1u1707_21 01A2                               i1u1708_20 01AC  
                             i1u1708_21 01AA                               i1u1709_20 01B4  
                             i1u1709_21 01B2                               i1u1690_20 003C  
                             i1u1690_21 003A                               i1u1691_20 0068  
                             i1u1691_21 0066                               i1u1692_20 0084  
                             i1u1692_21 0082                               i1u1693_20 00C2  
                             i1u1693_21 00C0                               i1u1694_20 00D2  
                             i1u1694_21 00D0                               i1u1695_20 00E6  
                             i1u1695_21 00E4                               i1u1696_20 00F6  
                             i1u1696_21 00F4                               i1u1697_20 0104  
                             i1u1697_21 0102                               i1u1698_20 0114  
                             i1u1698_21 0112                               i1u1699_20 0122  
                             i1u1699_21 0120                     _can_receiveOverruns 00D1  
               receiveSendEventSLCAN@id 0086                       __end_of_printGUID 3354  
                       ___lldiv@divisor 0064                       __end_of_printHelp 4324  
                       ___lldiv@counter 006C                       __end_of_printMode 2184  
                     ECANSendMessage@id 006A                       ECANSendMessage@pb 0073  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 00BF  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 1D8E  
                    __ECANPointBuffer@b 002E                           _doModeVerbose 5912  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00D0  
                               utoa@val 0069               ?_printNodeFirmwareVersion 002B  
                         _sendVSCPFrame 294A                                 strlen@s 0060  
                            _sequencyno 00F3                              _timekeeper 00E5  
                             _RXM0EXIDM 0078CB                                 strspn@i 006A  
                            ??_strnicmp 006A                     __end_of_getCANFrame 2272  
                            findNodes@i 00C9                  __end_of_nibbleFromChar 1AC0  
                   __end_of_doModeSLCAN 51C6                             ?_fifo_write 002B  
                            fifo_init@f 0064           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 006C                              fifo_read@i 006A  
                            fifo_read@p 0068                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B6  
     sendVSCPDriverCommandReply@cmdCode 006F                     __size_of_WriteUSART 0014  
                     readEEPROM@address 0060             sendVSCPModeCapabilities@crc 006F  
               __end_of_ECANSendMessage 3CB8                    _uart_receiveOverruns 0005  
              _receivePrintEventVerbose 48CC                              _vscpNodeId 01AE  
                         ?__CANIDToRegs 0060                    __end_of__RegsToCANID 3868  
                           ?_readEEPROM 0060                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 002D                       doModeVerbose@page 02AD  
                     doModeVerbose@preg 0284                          _init_crc8$2075 0060  
                ??_readRegisterExtended 00BD                          ?_doModeVerbose 002B  
                        ?_sendVSCPFrame 0096                    __size_of_writeEEPROM 0026  
                        __end_of___wmul 1950                     __size_of_doModeVscp 01B2  
                           _WriteTimer0 17CA                          __end_of_memcpy 1B82  
                        __end_of_memset 18D0       __size_of_sendVSCPDriverErrorFrame 00B0  
             ?_sendVSCPDriverErrorFrame 002B                         ?_nibbleFromChar 002B  
                             ___DCDelay 0055                          __end_of_strcat 1DE6  
                        __end_of_strchr 1F66                          __end_of_strcpy 192E  
                        __end_of_strlen 1B40                doModeVerbose@filter_type 028F  
                        __end_of_strtok 259A                          __end_of_strspn 1BC6  
                           __end_ofPL10 6BFE                             __end_ofPL20 5872  
                           __end_ofPL12 6C1A                             __end_ofPL30 6C3E  
                           __end_ofPL22 346E                             __end_ofPL14 5862  
                           __end_ofPL40 6C6C                             __end_ofPL32 3648  
                           __end_ofPL24 5898                             __end_ofPL16 3786  
                           __end_ofPL50 3658                             __end_ofPL42 3794  
                           __end_ofPL34 2C34                             __end_ofPL26 3E22  
                           __end_ofPL18 44E6                             __end_ofPL60 6CB4  
                           __end_ofPL52 294A                             __end_ofPL44 6C86  
                           __end_ofPL36 6C50                             __end_ofPL28 6C2A  
                           __end_ofPL70 3074                             __end_ofPL62 58DE  
                           __end_ofPL54 6C9E                             __end_ofPL46 58B2  
                           __end_ofPL38 3876                             __end_ofPL80 38B0  
                           __end_ofPL72 3368                             __end_ofPL64 58EC  
                           __end_ofPL56 58C8                             __end_ofPL48 28AA  
                           __end_ofPL90 1B00                             __end_ofPL82 58FE  
                           __end_ofPL74 367E                             __end_ofPL66 2508  
                           __end_ofPL58 366A                             __end_ofPL92 3FBC  
                           __end_ofPL84 3E34                             __end_ofPL76 388A  
                           __end_ofPL68 275C                             __end_ofPL94 2B74  
                           __end_ofPL86 38C2                             __end_ofPL78 389C  
                           __end_ofPL96 2EB2                             __end_ofPL88 51D2  
                           __end_ofPL98 5908                     start_initialization 1F66  
                             _ReadUSART 1820                         findNodes@nFound 00C7  
                 doModeVerbose@reg_1155 02A2                   doModeVerbose@filterno 02A7  
               _receiveVSCPModeCanalMsg 2EB2                     __CFG_BOREN$BOACTIVE 000000  
                          doModeSLCAN@c 00A2                            ??_OpenTimer0 0060  
sendVSCPDriverCommandReply@cmdReplyCode 0070                               _Interrupt 0018  
                        ??__CANIDToRegs 0067              readRegisterExtended@nodeid 00C1  
                             _OpenUSART 1DE6                     sendVSCPFrame@nodeid 0099  
                       ___llmod@divisor 0071                   __size_of_readRegister 00CE  
                       ___llmod@counter 0075                   ECANReceiveMessage@ptr 003B  
                   __size_of_fifo_write 00D2                   __size_of_init_app_ram 004E  
                        _findNodes$1461 00C5                __end_of__ECANPointBuffer 210E  
                     __CANIDToRegs@type 0066                              init_crc8@i 0065  
                            init_crc8@j 0062                             _getCANFrame 21FA  
                              ??___wmul 0064       __size_of_sendVSCPModeCapabilities 00B6  
                     ?_hexStringToBytes 0064                             _doModeSLCAN 4E64  
             ?_sendVSCPModeCapabilities 002B              __end_of_ECANReceiveMessage 48BE  
                              ??_memcpy 0066                     readRegister@timeout 00B7  
                              ??_memset 0066                   sendVSCPDriverNack@crc 006F  
              doModeVerbose@mask_nodeid 0293                   __end_ofi1_WriteTimer0 17B8  
                    ??_hexStringToBytes 0069                                ??_strcat 0064  
                              ??_strchr 0064                                ??_strcpy 0064  
                              ??_strlen 0062                      __end_of_OpenTimer0 185C  
                              ??_strtok 0070                                ??_strspn 006A  
                   __size_of_readEEPROM 0012                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0001                              ?_ReadUSART 002B  
                       __IT_SAVE_STATUS 0017                           __pcstackBANK0 0060  
                         __pcstackBANK1 01B2                           __pcstackBANK2 0280  
                   __end_of__stringdata 7CFE                            _readRegister 2C42  
                 __size_of_sendCANFrame 0038                            _isdigit$2896 0061  
           ?_sendVSCPDriverCommandReply 006F             sendVSCPDriverErrorFrame@crc 0070  
                      ?_ECANSendMessage 006A                       sendVSCPFrame@size 009B  
                          _init_app_ram 1CE8                              ?_Interrupt 002B  
                            ?_OpenUSART 0060                             sprintf@_val 008D  
                           sprintf@flag 0092                             sprintf@prec 0089  
                             __pnvBANK0 00F5                           __IT_SAVE_WREG 0018  
                      _ledFunctionality 001A                doModeVerbose@nodeid_1153 028D  
              doModeVerbose@nodeid_1168 02AF                            setFilter@val 0060  
                      ___lwdiv@dividend 0060                         ??_doModeVerbose 01B2  
         __size_of_ECANSetOperationMode 001A                         _printStatistics 3FBC  
                          ??_WriteUSART 0060                         ??_sendVSCPFrame 009E  
                        _ECANInitialize 22EA                       _sendVSCPDriverAck 280A  
                         __pmediumconst 6CB4                                ?___lldiv 0060  
                              ?_calcCRC 006C                                ?___llmod 006D  
                             _findNodes 3074                                ?___lwdiv 0060  
                              ?___lwmod 0060                               _fifo_init 1AC0  
                             _fifo_read 2B74                      ?_sendVSCPDriverAck 002B  
                     __size_of_printMDF 0096                             __pintcodelo 0018  
                          _sendCANFrame 19CE                       WriteTimer0@timer0 0060  
                           _COMSTATbits 000F74                                ?_isdigit 002B  
             ??_receiveVSCPModeCanalMsg 0096                     ??_sendVSCPDriverAck 006F  
                     __size_of_strnicmp 0066                         printGUID@nodeid 00BF  
                   _sendEscapedUartData 1E42                               _hexpowers 6D0C  
                      ___lwdiv@quotient 0065                               _init_crc8 202E  
                 __size_of__RegsToCANID 00C4               doModeVerbose@filter_class 0288  
                              ?_sprintf 0076                                ?_strichr 0061  
                           _cntRxFrames 00D9                            ??_doModeVscp 00B7  
                              ?_strcspn 0066                                ?_toupper 002B  
                              ?_stristr 006D                      __end_of_WriteUSART 17F0  
                        __size_of_ultoa 00D2                             _cntTxFrames 00E1  
                        ___wmul@product 0064                  sendVSCPFrame@vscpclass 0096  
                             _setFilter 44E6                             strnicmp@len 0068  
                             _octpowers 6CB4                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 0092                  __end_of_ECANInitialize 236A  
             __end_of_sendVSCPDriverAck 289C                                i1u610_25 36AA  
                              i1u611_25 36BC                                i1u615_25 26EA  
                              _PIR1bits 000F9E                   _receiveSendEventCANAL 38C2  
                              _PIR2bits 000FA1                        ECANSendMessage@i 008C  
                      ECANSendMessage@j 0087                    ?_sendEscapedUartData 006C  
                 _receiveSendEventSLCAN 3E34                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
           receiveSendMultiEventCANAL@i 007B                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 0070                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 006E  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 3264                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00C4  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 002B                               _printHelp 4164  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 210E                              ?_fifo_init 0060  
                            ?_fifo_read 0060                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 44D6                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 3634                               _putsUSART 1D36  
                           __stringdata 6D2C                       ___wmul@multiplier 0060  
                          __RegsToCANID 37A4                               _vscpClass 01AC  
               ??_writeRegisterExtended 00BD                            ??_fifo_write 0030  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 0094  
                           ??_ReadUSART 002B                     getVSCPFrame@pNodeId 0076  
                         ??_printBinary 0061                        doModeVerbose@reg 02AE  
                         ??_printErrors 0094                              ?_init_crc8 002B  
                             _rwtimeout 0103               writeRegisterExtended@page 00B6  
                        Interrupt@flags 0054                                ___DCByte 0019  
  __end_of_receiveVSCPModeMultiCanalMsg 179C   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 179A                             ??_Interrupt 003D  
               __end_of_printStatistics 4164                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00B9                            ??_readEEPROM 0062  
              __size_of_init_app_eeprom 008A                              ?_setFilter 0060  
                       OpenUSART@config 0062                          findNodes@value 00C8  
          __end_of_vscp_restoreDefaults 17A6                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 0080         __end_of_receiveVSCPModeCanalMsg 2F8E  
                       ?_ECANInitialize 002B                                __Hrparam 0000  
                  ECANReceiveMessage@id 0037                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 375A                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00AA                              ?_printGUID 002B  
                           doModeVscp@c 00B7                              ?_printHelp 002B  
                            ?_printMode 002B                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 006F  
                            ?_putsUSART 0061                         fifo_read@nbytes 0062  
                            sprintf@idx 0081                      __end_of_readEEPROM 17CA  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 179A  
                              __ptext11 28AA                                __ptext20 1960  
                              __ptext12 2EB2                                __ptext21 202E  
                              __ptext13 1B40                                __ptext30 3264  
                              __ptext22 5912                                __ptext14 280A  
                              __ptext31 2D10                                __ptext23 44E6  
                              __ptext15 2AB6                                __ptext40 4B8E  
                              __ptext32 1D8E                                __ptext24 346E  
                              __ptext16 18D0                                __ptext41 3FBC  
                              __ptext33 2C42                                __ptext25 1C9E  
                              __ptext17 38C2                                __ptext50 17F0  
                              __ptext42 3368                                __ptext34 294A  
                              __ptext26 3168                                __ptext18 3CB8  
                              __ptext51 1B00                                __ptext43 2508  
                              __ptext35 19CE                                __ptext27 18FE  
                              __ptext19 1E42                                __ptext60 185C  
                              __ptext52 48CC                                __ptext44 1BC6  
                              __ptext36 3B4A                                __ptext28 3074  
                              __ptext61 247A                                __ptext53 236A  
                              __ptext45 1B82                                __ptext37 3574  
                              __ptext29 259A                                __ptext70 22EA  
                              __ptext62 1996                                __ptext54 21FA  
                              __ptext46 1F04                                __ptext38 18A2  
                              __ptext71 1806                                __ptext63 276A  
                              __ptext55 2B74                                __ptext47 2272  
                              __ptext39 4164                                __ptext80 1AC0  
                              __ptext72 183E                                __ptext64 1A06  
                              __ptext56 51D2                                __ptext48 1A44  
                              __ptext73 1DE6                                __ptext65 1C54  
                              __ptext57 192E                                __ptext49 1FC8  
                              __ptext82 17A6                                __ptext74 17CA  
                              __ptext66 210E                                __ptext58 1EA2  
                              __ptext83 26CA                                __ptext75 179E  
                              __ptext67 1D36                                __ptext59 2184  
                              __ptext84 46C4                                __ptext76 23F0  
                              __ptext68 17DC                                __ptext85 37A4  
                              __ptext77 187C                                __ptext69 1C0A  
                              __ptext86 2098                                __ptext78 1CE8  
                              __ptext87 3688                                __ptext79 17B8  
                              __ptext88 1820                receiveSendEventCANAL@dlc 007F  
              receiveSendEventCANAL@crc 0080                          printMDF@nodeid 00BF  
                         ?_getVSCPFrame 0072                              strichr@chr 0063  
                      __size_of_sprintf 0672                              strichr@ptr 0061  
                      __size_of_strichr 003E                        __size_of_strcspn 0044  
                      __size_of_toupper 0016                        __size_of_stristr 0078  
                            strcpy@from 0062                          printGUID@value 00C3  
                   __end_of_printBinary 1CE8                           __size_of_crc8 0036  
                         __size_of_atoi 00F8                           __size_of_main 014C  
                         __size_of_init 004A                           __size_of_itoa 0038  
         ?_receiveVSCPModeMultiCanalMsg 002B                     __end_of_printErrors 4E64  
                         __size_of_utoa 00A0                  ?_receiveSendEventCANAL 002B  
                            strnicmp@s1 0064                              strnicmp@s2 0066  
                           _inputBuffer 0200              __size_of_sendVSCPDriverAck 0092  
        receiveSendMultiEventCANAL@data 0072                  ?_receiveSendEventSLCAN 002B  
                         ??_writeEEPROM 0063                _printNodeFirmwareVersion 2D10  
                   ECANSendMessage@data 006E                ECANSendMessage@tempBSEL0 0088  
                              _printMDF 259A                               printMDF@i 00C3  
                             printMDF@p 00C1                            ?_getCANFrame 006D  
                   ECANSendMessage@mode 0085                     ECANSendMessage@temp 008B  
                     ?__ECANPointBuffer 002B            ??_receiveSendMultiEventCANAL 0072  
                              atoi@sign 006A                             ??_findNodes 00C5  
                          ?_doModeSLCAN 002B                             ??_fifo_init 0064  
                           ??_fifo_read 0064                                _vscpData 01A4  
         __size_of_readRegisterExtended 00FC                                main@argc 00CA  
                              main@argv 00CC                                _vscpSize 01B0  
                    ??__ECANPointBuffer 002E                                _vscpType 01B1  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 006F  
                       doModeVerbose@id 0280                         doModeVerbose@rv 02A0  
                              _strnicmp 1FC8                        init_app_eeprom@i 0063  
           writeRegisterExtended@nodeid 00C1                           Interrupt@data 0046  
                       _serialInputFifo 0023                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0060                     ECANReceiveMessage@i 0038  
                              memcpy@d1 0060                                memcpy@s1 0062  
             receivePrintEventVerbose@i 00A5                                itoa@base 0074  
                              isdigit@c 0062                      _ECANReceiveMessage 46C4  
                              memset@p1 0060                             ??_init_crc8 0060  
                             ultoa@base 007C                          ??_getVSCPFrame 007E  
             __size_of_hexStringToBytes 009A                         sendVSCPFrame@id 00B2  
                              intlevel1 0000                               sprintf@ap 0088  
                             sprintf@sp 0076                    hexStringToBytes@size 0066  
                             strchr@chr 0062                        ?_printStatistics 002B  
              receiveSendEventSLCAN@dlc 008A                        ___lwmod@dividend 0060  
                             strchr@ptr 0060                     ?_ECANReceiveMessage 0032  
                      ___lldiv@dividend 0060                             ??_setFilter 0064  
                         printMDF@value 00C0     __size_of_receiveSendMultiEventCANAL 015A  
                         fifo_getFree@f 0035                               strcspn@s1 0066  
                             strcspn@s2 0068      receiveSendMultiEventCANAL@msgcount 007A  
               ECANSendMessage@msgFlags 0071                              _OSCCONbits 000FD3  
                             strnicmp@r 006C                               stristr@s1 006D  
                             stristr@s2 006F                      ECANSendMessage@ptr 008D  
                     ??_init_app_eeprom 0063                   __size_of__CANIDToRegs 00C0  
                           ??_printGUID 00BF                          readEEPROM@data 0062  
                           ??_printHelp 0065                             ??_printMode 0065  
              _sendVSCPDriverErrorFrame 2AB6                           ?_fifo_getFree 002B  
                ECANSendMessage@dataLen 0070                     __end_of_writeEEPROM 18A2  
                   __ECANPointBuffer@pt 002F                    ??_ECANReceiveMessage 0035  
                           ??_putsUSART 0063                                utoa@base 006B  
                              ultoa@buf 0076                                ultoa@val 0078  
                         fifo_init@size 0062                                sprintf@c 0091  
                              sprintf@f 0078                     hexStringToBytes@buf 0064  
                              strcat@cp 0064                     hexStringToBytes@len 006C  
                        _doModeVscpNode 179C                                strcat@to 0060  
      __end_of_receivePrintEventVerbose 4B8E                  ECANSendMessage@buffers 0086  
                      ___lldiv@quotient 0068                         ___lwmod@divisor 0062  
          __end_of_ECANSetOperationMode 1820                    _vscp_restoreDefaults 179E  
                          printGUID@buf 00C0                                strcpy@cp 0064  
                              strlen@cp 0062                                strcpy@to 0060  
                       ___lwmod@counter 0064                                strcspn@i 006A  
                              toupper@c 0060                             _printBinary 1C9E  
                              strtok@s1 006C                                strtok@s2 006E  
                              strspn@s1 0066                                strspn@s2 0068  
                            _RXM1EXIDEN 0078EB                                strtok@sp 0011  
                ECANSendMessage@tempPtr 0089                             _printErrors 4B8E  
                          fifo_init@buf 0060                            fifo_read@buf 0060  
         sendVSCPDriverCommandReply@crc 0071                            __CANIDToRegs 3574  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 0013  
             readRegisterExtended@value 00BB                _sendVSCPModeCapabilities 2A00  
              __size_of_ECANSendMessage 016E  
