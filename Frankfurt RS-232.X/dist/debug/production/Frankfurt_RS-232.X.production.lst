

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Thu Feb 26 23:07:03 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	text33,global,reloc=2,class=CODE,delta=1
    52                           	psect	text34,global,reloc=2,class=CODE,delta=1
    53                           	psect	text35,global,reloc=2,class=CODE,delta=1
    54                           	psect	text36,global,reloc=2,class=CODE,delta=1
    55                           	psect	text37,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	text41,global,reloc=2,class=CODE,delta=1
    60                           	psect	text42,global,reloc=2,class=CODE,delta=1
    61                           	psect	text43,global,reloc=2,class=CODE,delta=1
    62                           	psect	text44,global,reloc=2,class=CODE,delta=1
    63                           	psect	text45,global,reloc=2,class=CODE,delta=1
    64                           	psect	text46,global,reloc=2,class=CODE,delta=1
    65                           	psect	text47,global,reloc=2,class=CODE,delta=1
    66                           	psect	text48,global,reloc=2,class=CODE,delta=1
    67                           	psect	text49,global,reloc=2,class=CODE,delta=1
    68                           	psect	text50,global,reloc=2,class=CODE,delta=1
    69                           	psect	text51,global,reloc=2,class=CODE,delta=1
    70                           	psect	text52,global,reloc=2,class=CODE,delta=1
    71                           	psect	text53,global,reloc=2,class=CODE,delta=1
    72                           	psect	text54,global,reloc=2,class=CODE,delta=1
    73                           	psect	text55,global,reloc=2,class=CODE,delta=1
    74                           	psect	text56,global,reloc=2,class=CODE,delta=1
    75                           	psect	text57,global,reloc=2,class=CODE,delta=1
    76                           	psect	text58,global,reloc=2,class=CODE,delta=1
    77                           	psect	text59,global,reloc=2,class=CODE,delta=1
    78                           	psect	text60,global,reloc=2,class=CODE,delta=1
    79                           	psect	text61,global,reloc=2,class=CODE,delta=1
    80                           	psect	text62,global,reloc=2,class=CODE,delta=1
    81                           	psect	text63,global,reloc=2,class=CODE,delta=1
    82                           	psect	text64,global,reloc=2,class=CODE,delta=1
    83                           	psect	text65,global,reloc=2,class=CODE,delta=1
    84                           	psect	text66,global,reloc=2,class=CODE,delta=1
    85                           	psect	text67,global,reloc=2,class=CODE,delta=1
    86                           	psect	text68,global,reloc=2,class=CODE,delta=1
    87                           	psect	text69,global,reloc=2,class=CODE,delta=1
    88                           	psect	text70,global,reloc=2,class=CODE,delta=1
    89                           	psect	text71,global,reloc=2,class=CODE,delta=1
    90                           	psect	text72,global,reloc=2,class=CODE,delta=1
    91                           	psect	text73,global,reloc=2,class=CODE,delta=1
    92                           	psect	text74,global,reloc=2,class=CODE,delta=1
    93                           	psect	text75,global,reloc=2,class=CODE,delta=1
    94                           	psect	text76,global,reloc=2,class=CODE,delta=1
    95                           	psect	text77,global,reloc=2,class=CODE,delta=1
    96                           	psect	text78,global,reloc=2,class=CODE,delta=1
    97                           	psect	text79,global,reloc=2,class=CODE,delta=1
    98                           	psect	text80,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text82,global,reloc=2,class=CODE,delta=1
   101                           	psect	text83,global,reloc=2,class=CODE,delta=1
   102                           	psect	text84,global,reloc=2,class=CODE,delta=1
   103                           	psect	text85,global,reloc=2,class=CODE,delta=1
   104                           	psect	text86,global,reloc=2,class=CODE,delta=1
   105                           	psect	text87,global,reloc=2,class=CODE,delta=1
   106                           	psect	text88,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   109                           	psect	pa_nodes,global,class=CODE,delta=1
   110  0000                     tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           intcon	equ	0xFF2
   117                           indf0	equ	0xFEF
   118                           fsr0h	equ	0xFEA
   119                           fsr0l	equ	0xFE9
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           postinc1	equ	0xFE6
   123                           postdec1	equ	0xFE5
   124                           fsr1h	equ	0xFE2
   125                           fsr1l	equ	0xFE1
   126                           indf2	equ	0xFDF
   127                           postinc2	equ	0xFDE
   128                           postdec2	equ	0xFDD
   129                           plusw2	equ	0xFDB
   130                           fsr2h	equ	0xFDA
   131                           fsr2l	equ	0xFD9
   132                           status	equ	0xFD8
   133                           
   134                           	psect	mediumconst
   135  006FB4                     __pmediumconst:
   136                           	opt stack 0
   137  006FB4                     _octpowers:
   138                           	opt stack 0
   139  006FB4  0001               	dw	1
   140  006FB6  0000               	dw	0
   141  006FB8  0008               	dw	8
   142  006FBA  0000               	dw	0
   143  006FBC  0040               	dw	64
   144  006FBE  0000               	dw	0
   145  006FC0  0200               	dw	512
   146  006FC2  0000               	dw	0
   147  006FC4  1000               	dw	4096
   148  006FC6  0000               	dw	0
   149  006FC8  8000               	dw	32768
   150  006FCA  0000               	dw	0
   151  006FCC  0000               	dw	0
   152  006FCE  0004               	dw	4
   153  006FD0  0000               	dw	0
   154  006FD2  0020               	dw	32
   155  006FD4  0000               	dw	0
   156  006FD6  0100               	dw	256
   157  006FD8  0000               	dw	0
   158  006FDA  0800               	dw	2048
   159  006FDC  0000               	dw	0
   160  006FDE  4000               	dw	16384
   161  006FE0  0000               	dw	0
   162  006FE2  0000               	dw	0
   163  006FE4                     __end_of_octpowers:
   164                           	opt stack 0
   165  006FE4                     _dpowers:
   166                           	opt stack 0
   167  006FE4  0001               	dw	1
   168  006FE6  0000               	dw	0
   169  006FE8  000A               	dw	10
   170  006FEA  0000               	dw	0
   171  006FEC  0064               	dw	100
   172  006FEE  0000               	dw	0
   173  006FF0  03E8               	dw	1000
   174  006FF2  0000               	dw	0
   175  006FF4  2710               	dw	10000
   176  006FF6  0000               	dw	0
   177  006FF8  86A0               	dw	34464
   178  006FFA  0001               	dw	1
   179  006FFC  4240               	dw	16960
   180  006FFE  000F               	dw	15
   181  007000  9680               	dw	38528
   182  007002  0098               	dw	152
   183  007004  E100               	dw	57600
   184  007006  05F5               	dw	1525
   185  007008  CA00               	dw	51712
   186  00700A  3B9A               	dw	15258
   187  00700C                     __end_of_dpowers:
   188                           	opt stack 0
   189  00700C                     _hexpowers:
   190                           	opt stack 0
   191  00700C  0001               	dw	1
   192  00700E  0000               	dw	0
   193  007010  0010               	dw	16
   194  007012  0000               	dw	0
   195  007014  0100               	dw	256
   196  007016  0000               	dw	0
   197  007018  1000               	dw	4096
   198  00701A  0000               	dw	0
   199  00701C  0000               	dw	0
   200  00701E  0001               	dw	1
   201  007020  0000               	dw	0
   202  007022  0010               	dw	16
   203  007024  0000               	dw	0
   204  007026  0100               	dw	256
   205  007028  0000               	dw	0
   206  00702A  1000               	dw	4096
   207  00702C                     __end_of_hexpowers:
   208                           	opt stack 0
   209  0000                     _BRGCON1	set	3952
   210  0000                     _BRGCON2	set	3953
   211  0000                     _BRGCON3	set	3954
   212  0000                     _BSEL0	set	3576
   213  0000                     _CANCON	set	3951
   214  0000                     _CIOCON	set	3955
   215  0000                     _COMSTATbits	set	3956
   216  0000                     _ECANCON	set	3959
   217  0000                     _EEADR	set	4009
   218  0000                     _EECON1bits	set	4006
   219  0000                     _EECON2	set	4007
   220  0000                     _EEDATA	set	4008
   221  0000                     _INTCONbits	set	4082
   222  0000                     _MSEL0	set	3568
   223  0000                     _MSEL1	set	3569
   224  0000                     _MSEL2	set	3570
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _PIR2bits	set	4001
   230  0000                     _RCREG	set	4014
   231  0000                     _RCSTA	set	4011
   232  0000                     _RCSTAbits	set	4011
   233  0000                     _RXB1CONbits	set	3920
   234  0000                     _RXERRCNT	set	3957
   235  0000                     _RXF0EIDH	set	3842
   236  0000                     _RXF0EIDL	set	3843
   237  0000                     _RXF0SIDH	set	3840
   238  0000                     _RXF0SIDL	set	3841
   239  0000                     _RXF10EIDH	set	3446
   240  0000                     _RXF10EIDL	set	3447
   241  0000                     _RXF10SIDH	set	3444
   242  0000                     _RXF10SIDL	set	3445
   243  0000                     _RXF11EIDH	set	3450
   244  0000                     _RXF11EIDL	set	3451
   245  0000                     _RXF11SIDH	set	3448
   246  0000                     _RXF11SIDL	set	3449
   247  0000                     _RXF12EIDH	set	3458
   248  0000                     _RXF12EIDL	set	3459
   249  0000                     _RXF12SIDH	set	3456
   250  0000                     _RXF12SIDL	set	3457
   251  0000                     _RXF13EIDH	set	3462
   252  0000                     _RXF13EIDL	set	3463
   253  0000                     _RXF13SIDH	set	3460
   254  0000                     _RXF13SIDL	set	3461
   255  0000                     _RXF14EIDH	set	3466
   256  0000                     _RXF14EIDL	set	3467
   257  0000                     _RXF14SIDH	set	3464
   258  0000                     _RXF14SIDL	set	3465
   259  0000                     _RXF15EIDH	set	3474
   260  0000                     _RXF15EIDL	set	3475
   261  0000                     _RXF15SIDH	set	3472
   262  0000                     _RXF15SIDL	set	3473
   263  0000                     _RXF1EIDH	set	3846
   264  0000                     _RXF1EIDL	set	3847
   265  0000                     _RXF1SIDH	set	3844
   266  0000                     _RXF1SIDL	set	3845
   267  0000                     _RXF2EIDH	set	3850
   268  0000                     _RXF2EIDL	set	3851
   269  0000                     _RXF2SIDH	set	3848
   270  0000                     _RXF2SIDL	set	3849
   271  0000                     _RXF3EIDH	set	3854
   272  0000                     _RXF3EIDL	set	3855
   273  0000                     _RXF3SIDH	set	3852
   274  0000                     _RXF3SIDL	set	3853
   275  0000                     _RXF4EIDH	set	3858
   276  0000                     _RXF4EIDL	set	3859
   277  0000                     _RXF4SIDH	set	3856
   278  0000                     _RXF4SIDL	set	3857
   279  0000                     _RXF5EIDH	set	3862
   280  0000                     _RXF5EIDL	set	3863
   281  0000                     _RXF5SIDH	set	3860
   282  0000                     _RXF5SIDL	set	3861
   283  0000                     _RXF6EIDH	set	3426
   284  0000                     _RXF6EIDL	set	3427
   285  0000                     _RXF6SIDH	set	3424
   286  0000                     _RXF6SIDL	set	3425
   287  0000                     _RXF7EIDH	set	3430
   288  0000                     _RXF7EIDL	set	3431
   289  0000                     _RXF7SIDH	set	3428
   290  0000                     _RXF7SIDL	set	3429
   291  0000                     _RXF8EIDH	set	3434
   292  0000                     _RXF8EIDL	set	3435
   293  0000                     _RXF8SIDH	set	3432
   294  0000                     _RXF8SIDL	set	3433
   295  0000                     _RXF9EIDH	set	3442
   296  0000                     _RXF9EIDL	set	3443
   297  0000                     _RXF9SIDH	set	3440
   298  0000                     _RXF9SIDL	set	3441
   299  0000                     _RXFBCON0	set	3552
   300  0000                     _RXFBCON1	set	3553
   301  0000                     _RXFBCON2	set	3554
   302  0000                     _RXFBCON3	set	3555
   303  0000                     _RXFBCON4	set	3556
   304  0000                     _RXFBCON5	set	3557
   305  0000                     _RXFBCON6	set	3558
   306  0000                     _RXFBCON7	set	3559
   307  0000                     _RXFCON0	set	3540
   308  0000                     _RXFCON1	set	3541
   309  0000                     _RXM0EIDH	set	3866
   310  0000                     _RXM0EIDL	set	3867
   311  0000                     _RXM0SIDL	set	3865
   312  0000                     _RXM1EIDH	set	3870
   313  0000                     _RXM1EIDL	set	3871
   314  0000                     _RXM1SIDL	set	3869
   315  0000                     _SPBRG	set	4015
   316  0000                     _SPBRGH	set	4016
   317  0000                     _T0CON	set	4053
   318  0000                     _T0CONbits	set	4053
   319  0000                     _TMR0H	set	4055
   320  0000                     _TMR0L	set	4054
   321  0000                     _TRISBbits	set	3987
   322  0000                     _TRISCbits	set	3988
   323  0000                     _TXERRCNT	set	3958
   324  0000                     _TXREG	set	4013
   325  0000                     _TXSTA	set	4012
   326  0000                     _TXSTAbits	set	4012
   327  0000                     _B0RXFUL	set	28935
   328  0000                     _B0TXEN	set	28610
   329  0000                     _B1RXFUL	set	29063
   330  0000                     _B1TXEN	set	28611
   331  0000                     _B2RXFUL	set	29191
   332  0000                     _B2TXEN	set	28612
   333  0000                     _B3RXFUL	set	29319
   334  0000                     _B3TXEN	set	28613
   335  0000                     _B4RXFUL	set	29447
   336  0000                     _B4TXEN	set	28614
   337  0000                     _B5RXFUL	set	29575
   338  0000                     _B5TXEN	set	28615
   339  0000                     _ERRIE	set	32029
   340  0000                     _FIFOEMPTY	set	31655
   341  0000                     _IRXIF	set	32039
   342  0000                     _LATC1	set	31833
   343  0000                     _MDSEL0	set	31678
   344  0000                     _MDSEL1	set	31679
   345  0000                     _PEIE	set	32662
   346  0000                     _RCIE	set	31981
   347  0000                     _RCIF	set	31989
   348  0000                     _RCIP	set	31997
   349  0000                     _RXB0FILHIT0	set	31488
   350  0000                     _RXB0FUL	set	31495
   351  0000                     _RXB0IF	set	32032
   352  0000                     _RXB0OVFL	set	31655
   353  0000                     _RXB1IF	set	32033
   354  0000                     _RXB1OVFL	set	31654
   355  0000                     _RXBnIE	set	32025
   356  0000                     _RXBnIF	set	32033
   357  0000                     _RXM0EXIDM	set	30923
   358  0000                     _RXM1EXIDEN	set	30955
   359  0000                     _B0CON	set	3616
   360  0000                     _B1CON	set	3632
   361  0000                     _B2CON	set	3648
   362  0000                     _B3CON	set	3664
   363  0000                     _B4CON	set	3680
   364  0000                     _B5CON	set	3696
   365  0000                     _RXB0CON	set	3936
   366  0000                     _RXB1CON	set	3920
   367  0000                     _RXM0SIDH	set	3864
   368  0000                     _RXM1SIDH	set	3868
   369  0000                     _TXB0CON	set	3904
   370  0000                     _TXB1CON	set	3888
   371  0000                     _TXB2CON	set	3872
   372  00702C                     __stringdata:
   373                           	opt stack 0
   374  00702C                     STR_220:
   375  00702C  20                 	db	32
   376  00702D  20                 	db	32
   377  00702E  20                 	db	32
   378  00702F  20                 	db	32
   379  007030  20                 	db	32
   380  007031  20                 	db	32
   381  007032  20                 	db	32
   382  007033  20                 	db	32
   383  007034  20                 	db	32
   384  007035  46                 	db	70	;'F'
   385  007036  6F                 	db	111	;'o'
   386  007037  72                 	db	114	;'r'
   387  007038  6D                 	db	109	;'m'
   388  007039  61                 	db	97	;'a'
   389  00703A  74                 	db	116	;'t'
   390  00703B  3A                 	db	58	;':'
   391  00703C  20                 	db	32
   392  00703D  66                 	db	102	;'f'
   393  00703E  69                 	db	105	;'i'
   394  00703F  6C                 	db	108	;'l'
   395  007040  74                 	db	116	;'t'
   396  007041  65                 	db	101	;'e'
   397  007042  72                 	db	114	;'r'
   398  007043  20                 	db	32
   399  007044  66                 	db	102	;'f'
   400  007045  69                 	db	105	;'i'
   401  007046  6C                 	db	108	;'l'
   402  007047  74                 	db	116	;'t'
   403  007048  65                 	db	101	;'e'
   404  007049  72                 	db	114	;'r'
   405  00704A  6E                 	db	110	;'n'
   406  00704B  6F                 	db	111	;'o'
   407  00704C  2C                 	db	44
   408  00704D  70                 	db	112	;'p'
   409  00704E  72                 	db	114	;'r'
   410  00704F  69                 	db	105	;'i'
   411  007050  6F                 	db	111	;'o'
   412  007051  2C                 	db	44
   413  007052  63                 	db	99	;'c'
   414  007053  6C                 	db	108	;'l'
   415  007054  61                 	db	97	;'a'
   416  007055  73                 	db	115	;'s'
   417  007056  73                 	db	115	;'s'
   418  007057  2C                 	db	44
   419  007058  74                 	db	116	;'t'
   420  007059  79                 	db	121	;'y'
   421  00705A  70                 	db	112	;'p'
   422  00705B  65                 	db	101	;'e'
   423  00705C  2C                 	db	44
   424  00705D  6E                 	db	110	;'n'
   425  00705E  6F                 	db	111	;'o'
   426  00705F  64                 	db	100	;'d'
   427  007060  65                 	db	101	;'e'
   428  007061  69                 	db	105	;'i'
   429  007062  64                 	db	100	;'d'
   430  007063  20                 	db	32
   431  007064  20                 	db	32
   432  007065  28                 	db	40
   433  007066  66                 	db	102	;'f'
   434  007067  69                 	db	105	;'i'
   435  007068  6C                 	db	108	;'l'
   436  007069  74                 	db	116	;'t'
   437  00706A  65                 	db	101	;'e'
   438  00706B  72                 	db	114	;'r'
   439  00706C  6E                 	db	110	;'n'
   440  00706D  6F                 	db	111	;'o'
   441  00706E  20                 	db	32
   442  00706F  3D                 	db	61	;'='
   443  007070  20                 	db	32
   444  007071  30                 	db	48	;'0'
   445  007072  2D                 	db	45
   446  007073  31                 	db	49	;'1'
   447  007074  35                 	db	53	;'5'
   448  007075  29                 	db	41
   449  007076  2E                 	db	46
   450  007077  0D                 	db	13
   451  007078  0A                 	db	10
   452  007079  00                 	db	0
   453  00707A                     STR_218:
   454  00707A  49                 	db	73	;'I'
   455  00707B  4E                 	db	78	;'N'
   456  00707C  46                 	db	70	;'F'
   457  00707D  4F                 	db	79	;'O'
   458  00707E  20                 	db	32
   459  00707F  2D                 	db	45
   460  007080  20                 	db	32
   461  007081  47                 	db	71	;'G'
   462  007082  65                 	db	101	;'e'
   463  007083  74                 	db	116	;'t'
   464  007084  20                 	db	32
   465  007085  69                 	db	105	;'i'
   466  007086  6E                 	db	110	;'n'
   467  007087  66                 	db	102	;'f'
   468  007088  6F                 	db	111	;'o'
   469  007089  20                 	db	32
   470  00708A  61                 	db	97	;'a'
   471  00708B  62                 	db	98	;'b'
   472  00708C  6F                 	db	111	;'o'
   473  00708D  75                 	db	117	;'u'
   474  00708E  74                 	db	116	;'t'
   475  00708F  20                 	db	32
   476  007090  61                 	db	97	;'a'
   477  007091  6E                 	db	110	;'n'
   478  007092  20                 	db	32
   479  007093  65                 	db	101	;'e'
   480  007094  78                 	db	120	;'x'
   481  007095  69                 	db	105	;'i'
   482  007096  73                 	db	115	;'s'
   483  007097  74                 	db	116	;'t'
   484  007098  65                 	db	101	;'e'
   485  007099  6E                 	db	110	;'n'
   486  00709A  74                 	db	116	;'t'
   487  00709B  20                 	db	32
   488  00709C  6E                 	db	110	;'n'
   489  00709D  6F                 	db	111	;'o'
   490  00709E  64                 	db	100	;'d'
   491  00709F  65                 	db	101	;'e'
   492  0070A0  20                 	db	32
   493  0070A1  6F                 	db	111	;'o'
   494  0070A2  6E                 	db	110	;'n'
   495  0070A3  20                 	db	32
   496  0070A4  74                 	db	116	;'t'
   497  0070A5  68                 	db	104	;'h'
   498  0070A6  65                 	db	101	;'e'
   499  0070A7  20                 	db	32
   500  0070A8  62                 	db	98	;'b'
   501  0070A9  75                 	db	117	;'u'
   502  0070AA  73                 	db	115	;'s'
   503  0070AB  20                 	db	32
   504  0070AC  28                 	db	40
   505  0070AD  46                 	db	70	;'F'
   506  0070AE  6F                 	db	111	;'o'
   507  0070AF  72                 	db	114	;'r'
   508  0070B0  6D                 	db	109	;'m'
   509  0070B1  61                 	db	97	;'a'
   510  0070B2  74                 	db	116	;'t'
   511  0070B3  3A                 	db	58	;':'
   512  0070B4  20                 	db	32
   513  0070B5  69                 	db	105	;'i'
   514  0070B6  6E                 	db	110	;'n'
   515  0070B7  66                 	db	102	;'f'
   516  0070B8  6F                 	db	111	;'o'
   517  0070B9  20                 	db	32
   518  0070BA  6E                 	db	110	;'n'
   519  0070BB  69                 	db	105	;'i'
   520  0070BC  63                 	db	99	;'c'
   521  0070BD  6B                 	db	107	;'k'
   522  0070BE  6E                 	db	110	;'n'
   523  0070BF  61                 	db	97	;'a'
   524  0070C0  6D                 	db	109	;'m'
   525  0070C1  65                 	db	101	;'e'
   526  0070C2  29                 	db	41
   527  0070C3  2E                 	db	46
   528  0070C4  0D                 	db	13
   529  0070C5  0A                 	db	10
   530  0070C6  00                 	db	0
   531  0070C7                     STR_222:
   532  0070C7  20                 	db	32
   533  0070C8  20                 	db	32
   534  0070C9  20                 	db	32
   535  0070CA  20                 	db	32
   536  0070CB  20                 	db	32
   537  0070CC  20                 	db	32
   538  0070CD  20                 	db	32
   539  0070CE  46                 	db	70	;'F'
   540  0070CF  6F                 	db	111	;'o'
   541  0070D0  72                 	db	114	;'r'
   542  0070D1  6D                 	db	109	;'m'
   543  0070D2  61                 	db	97	;'a'
   544  0070D3  74                 	db	116	;'t'
   545  0070D4  3A                 	db	58	;':'
   546  0070D5  20                 	db	32
   547  0070D6  6D                 	db	109	;'m'
   548  0070D7  61                 	db	97	;'a'
   549  0070D8  73                 	db	115	;'s'
   550  0070D9  6B                 	db	107	;'k'
   551  0070DA  20                 	db	32
   552  0070DB  6D                 	db	109	;'m'
   553  0070DC  61                 	db	97	;'a'
   554  0070DD  73                 	db	115	;'s'
   555  0070DE  6B                 	db	107	;'k'
   556  0070DF  6E                 	db	110	;'n'
   557  0070E0  6F                 	db	111	;'o'
   558  0070E1  2C                 	db	44
   559  0070E2  70                 	db	112	;'p'
   560  0070E3  72                 	db	114	;'r'
   561  0070E4  69                 	db	105	;'i'
   562  0070E5  6F                 	db	111	;'o'
   563  0070E6  2C                 	db	44
   564  0070E7  63                 	db	99	;'c'
   565  0070E8  6C                 	db	108	;'l'
   566  0070E9  61                 	db	97	;'a'
   567  0070EA  73                 	db	115	;'s'
   568  0070EB  73                 	db	115	;'s'
   569  0070EC  2C                 	db	44
   570  0070ED  74                 	db	116	;'t'
   571  0070EE  79                 	db	121	;'y'
   572  0070EF  70                 	db	112	;'p'
   573  0070F0  65                 	db	101	;'e'
   574  0070F1  2C                 	db	44
   575  0070F2  6E                 	db	110	;'n'
   576  0070F3  6F                 	db	111	;'o'
   577  0070F4  64                 	db	100	;'d'
   578  0070F5  65                 	db	101	;'e'
   579  0070F6  69                 	db	105	;'i'
   580  0070F7  64                 	db	100	;'d'
   581  0070F8  20                 	db	32
   582  0070F9  28                 	db	40
   583  0070FA  6D                 	db	109	;'m'
   584  0070FB  61                 	db	97	;'a'
   585  0070FC  73                 	db	115	;'s'
   586  0070FD  6B                 	db	107	;'k'
   587  0070FE  6E                 	db	110	;'n'
   588  0070FF  6F                 	db	111	;'o'
   589  007100  20                 	db	32
   590  007101  3D                 	db	61	;'='
   591  007102  20                 	db	32
   592  007103  30                 	db	48	;'0'
   593  007104  20                 	db	32
   594  007105  6F                 	db	111	;'o'
   595  007106  72                 	db	114	;'r'
   596  007107  20                 	db	32
   597  007108  31                 	db	49	;'1'
   598  007109  29                 	db	41
   599  00710A  2E                 	db	46
   600  00710B  0D                 	db	13
   601  00710C  0A                 	db	10
   602  00710D  00                 	db	0
   603  00710E                     STR_216:
   604  00710E  52                 	db	82	;'R'
   605  00710F  52                 	db	82	;'R'
   606  007110  45                 	db	69	;'E'
   607  007111  47                 	db	71	;'G'
   608  007112  20                 	db	32
   609  007113  2D                 	db	45
   610  007114  20                 	db	32
   611  007115  52                 	db	82	;'R'
   612  007116  65                 	db	101	;'e'
   613  007117  61                 	db	97	;'a'
   614  007118  64                 	db	100	;'d'
   615  007119  20                 	db	32
   616  00711A  72                 	db	114	;'r'
   617  00711B  65                 	db	101	;'e'
   618  00711C  67                 	db	103	;'g'
   619  00711D  69                 	db	105	;'i'
   620  00711E  73                 	db	115	;'s'
   621  00711F  74                 	db	116	;'t'
   622  007120  65                 	db	101	;'e'
   623  007121  72                 	db	114	;'r'
   624  007122  28                 	db	40
   625  007123  73                 	db	115	;'s'
   626  007124  29                 	db	41
   627  007125  20                 	db	32
   628  007126  6F                 	db	111	;'o'
   629  007127  66                 	db	102	;'f'
   630  007128  20                 	db	32
   631  007129  6E                 	db	110	;'n'
   632  00712A  6F                 	db	111	;'o'
   633  00712B  64                 	db	100	;'d'
   634  00712C  65                 	db	101	;'e'
   635  00712D  20                 	db	32
   636  00712E  28                 	db	40
   637  00712F  46                 	db	70	;'F'
   638  007130  6F                 	db	111	;'o'
   639  007131  72                 	db	114	;'r'
   640  007132  6D                 	db	109	;'m'
   641  007133  61                 	db	97	;'a'
   642  007134  74                 	db	116	;'t'
   643  007135  3A                 	db	58	;':'
   644  007136  20                 	db	32
   645  007137  72                 	db	114	;'r'
   646  007138  72                 	db	114	;'r'
   647  007139  65                 	db	101	;'e'
   648  00713A  67                 	db	103	;'g'
   649  00713B  20                 	db	32
   650  00713C  5B                 	db	91	;'['
   651  00713D  70                 	db	112	;'p'
   652  00713E  61                 	db	97	;'a'
   653  00713F  67                 	db	103	;'g'
   654  007140  65                 	db	101	;'e'
   655  007141  3A                 	db	58	;':'
   656  007142  5D                 	db	93	;']'
   657  007143  72                 	db	114	;'r'
   658  007144  65                 	db	101	;'e'
   659  007145  67                 	db	103	;'g'
   660  007146  20                 	db	32
   661  007147  5B                 	db	91	;'['
   662  007148  63                 	db	99	;'c'
   663  007149  6F                 	db	111	;'o'
   664  00714A  75                 	db	117	;'u'
   665  00714B  6E                 	db	110	;'n'
   666  00714C  74                 	db	116	;'t'
   667  00714D  5D                 	db	93	;']'
   668  00714E  29                 	db	41
   669  00714F  2E                 	db	46
   670  007150  0D                 	db	13
   671  007151  0A                 	db	10
   672  007152  00                 	db	0
   673  007153                     STR_231:
   674  007153  2D                 	db	45
   675  007154  2D                 	db	45
   676  007155  2D                 	db	45
   677  007156  2D                 	db	45
   678  007157  2D                 	db	45
   679  007158  2D                 	db	45
   680  007159  2D                 	db	45
   681  00715A  2D                 	db	45
   682  00715B  2D                 	db	45
   683  00715C  2D                 	db	45
   684  00715D  2D                 	db	45
   685  00715E  2D                 	db	45
   686  00715F  2D                 	db	45
   687  007160  2D                 	db	45
   688  007161  2D                 	db	45
   689  007162  2D                 	db	45
   690  007163  2D                 	db	45
   691  007164  2D                 	db	45
   692  007165  2D                 	db	45
   693  007166  2D                 	db	45
   694  007167  2D                 	db	45
   695  007168  2D                 	db	45
   696  007169  2D                 	db	45
   697  00716A  2D                 	db	45
   698  00716B  2D                 	db	45
   699  00716C  2D                 	db	45
   700  00716D  2D                 	db	45
   701  00716E  2D                 	db	45
   702  00716F  2D                 	db	45
   703  007170  2D                 	db	45
   704  007171  2D                 	db	45
   705  007172  2D                 	db	45
   706  007173  2D                 	db	45
   707  007174  2D                 	db	45
   708  007175  2D                 	db	45
   709  007176  2D                 	db	45
   710  007177  2D                 	db	45
   711  007178  2D                 	db	45
   712  007179  2D                 	db	45
   713  00717A  2D                 	db	45
   714  00717B  2D                 	db	45
   715  00717C  2D                 	db	45
   716  00717D  2D                 	db	45
   717  00717E  2D                 	db	45
   718  00717F  2D                 	db	45
   719  007180  2D                 	db	45
   720  007181  2D                 	db	45
   721  007182  2D                 	db	45
   722  007183  2D                 	db	45
   723  007184  2D                 	db	45
   724  007185  2D                 	db	45
   725  007186  2D                 	db	45
   726  007187  2D                 	db	45
   727  007188  2D                 	db	45
   728  007189  2D                 	db	45
   729  00718A  2D                 	db	45
   730  00718B  2D                 	db	45
   731  00718C  2D                 	db	45
   732  00718D  2D                 	db	45
   733  00718E  2D                 	db	45
   734  00718F  2D                 	db	45
   735  007190  2D                 	db	45
   736  007191  2D                 	db	45
   737  007192  2D                 	db	45
   738  007193  0D                 	db	13
   739  007194  0A                 	db	10
   740  007195  00                 	db	0
   741  007196                     STR_226:
   742  007196  20                 	db	32
   743  007197  20                 	db	32
   744  007198  20                 	db	32
   745  007199  20                 	db	32
   746  00719A  52                 	db	82	;'R'
   747  00719B  57                 	db	87	;'W'
   748  00719C  54                 	db	84	;'T'
   749  00719D  49                 	db	73	;'I'
   750  00719E  4D                 	db	77	;'M'
   751  00719F  45                 	db	69	;'E'
   752  0071A0  4F                 	db	79	;'O'
   753  0071A1  55                 	db	85	;'U'
   754  0071A2  54                 	db	84	;'T'
   755  0071A3  20                 	db	32
   756  0071A4  2D                 	db	45
   757  0071A5  20                 	db	32
   758  0071A6  53                 	db	83	;'S'
   759  0071A7  65                 	db	101	;'e'
   760  0071A8  74                 	db	116	;'t'
   761  0071A9  20                 	db	32
   762  0071AA  72                 	db	114	;'r'
   763  0071AB  65                 	db	101	;'e'
   764  0071AC  67                 	db	103	;'g'
   765  0071AD  69                 	db	105	;'i'
   766  0071AE  73                 	db	115	;'s'
   767  0071AF  74                 	db	116	;'t'
   768  0071B0  65                 	db	101	;'e'
   769  0071B1  72                 	db	114	;'r'
   770  0071B2  20                 	db	32
   771  0071B3  72                 	db	114	;'r'
   772  0071B4  65                 	db	101	;'e'
   773  0071B5  61                 	db	97	;'a'
   774  0071B6  64                 	db	100	;'d'
   775  0071B7  2F                 	db	47
   776  0071B8  77                 	db	119	;'w'
   777  0071B9  72                 	db	114	;'r'
   778  0071BA  69                 	db	105	;'i'
   779  0071BB  74                 	db	116	;'t'
   780  0071BC  65                 	db	101	;'e'
   781  0071BD  20                 	db	32
   782  0071BE  74                 	db	116	;'t'
   783  0071BF  69                 	db	105	;'i'
   784  0071C0  6D                 	db	109	;'m'
   785  0071C1  65                 	db	101	;'e'
   786  0071C2  6F                 	db	111	;'o'
   787  0071C3  75                 	db	117	;'u'
   788  0071C4  74                 	db	116	;'t'
   789  0071C5  2E                 	db	46
   790  0071C6  20                 	db	32
   791  0071C7  44                 	db	68	;'D'
   792  0071C8  65                 	db	101	;'e'
   793  0071C9  66                 	db	102	;'f'
   794  0071CA  61                 	db	97	;'a'
   795  0071CB  75                 	db	117	;'u'
   796  0071CC  6C                 	db	108	;'l'
   797  0071CD  74                 	db	116	;'t'
   798  0071CE  3D                 	db	61	;'='
   799  0071CF  31                 	db	49	;'1'
   800  0071D0  30                 	db	48	;'0'
   801  0071D1  20                 	db	32
   802  0071D2  6D                 	db	109	;'m'
   803  0071D3  73                 	db	115	;'s'
   804  0071D4  20                 	db	32
   805  0071D5  2E                 	db	46
   806  0071D6  0D                 	db	13
   807  0071D7  0A                 	db	10
   808  0071D8  00                 	db	0
   809  0071D9                     STR_217:
   810  0071D9  57                 	db	87	;'W'
   811  0071DA  52                 	db	82	;'R'
   812  0071DB  45                 	db	69	;'E'
   813  0071DC  47                 	db	71	;'G'
   814  0071DD  20                 	db	32
   815  0071DE  2D                 	db	45
   816  0071DF  20                 	db	32
   817  0071E0  57                 	db	87	;'W'
   818  0071E1  72                 	db	114	;'r'
   819  0071E2  69                 	db	105	;'i'
   820  0071E3  74                 	db	116	;'t'
   821  0071E4  65                 	db	101	;'e'
   822  0071E5  20                 	db	32
   823  0071E6  72                 	db	114	;'r'
   824  0071E7  65                 	db	101	;'e'
   825  0071E8  67                 	db	103	;'g'
   826  0071E9  69                 	db	105	;'i'
   827  0071EA  73                 	db	115	;'s'
   828  0071EB  74                 	db	116	;'t'
   829  0071EC  65                 	db	101	;'e'
   830  0071ED  72                 	db	114	;'r'
   831  0071EE  20                 	db	32
   832  0071EF  6F                 	db	111	;'o'
   833  0071F0  66                 	db	102	;'f'
   834  0071F1  20                 	db	32
   835  0071F2  6E                 	db	110	;'n'
   836  0071F3  6F                 	db	111	;'o'
   837  0071F4  64                 	db	100	;'d'
   838  0071F5  65                 	db	101	;'e'
   839  0071F6  20                 	db	32
   840  0071F7  28                 	db	40
   841  0071F8  46                 	db	70	;'F'
   842  0071F9  6F                 	db	111	;'o'
   843  0071FA  72                 	db	114	;'r'
   844  0071FB  6D                 	db	109	;'m'
   845  0071FC  61                 	db	97	;'a'
   846  0071FD  74                 	db	116	;'t'
   847  0071FE  3A                 	db	58	;':'
   848  0071FF  20                 	db	32
   849  007200  77                 	db	119	;'w'
   850  007201  72                 	db	114	;'r'
   851  007202  65                 	db	101	;'e'
   852  007203  67                 	db	103	;'g'
   853  007204  20                 	db	32
   854  007205  5B                 	db	91	;'['
   855  007206  70                 	db	112	;'p'
   856  007207  61                 	db	97	;'a'
   857  007208  67                 	db	103	;'g'
   858  007209  65                 	db	101	;'e'
   859  00720A  3A                 	db	58	;':'
   860  00720B  5D                 	db	93	;']'
   861  00720C  72                 	db	114	;'r'
   862  00720D  65                 	db	101	;'e'
   863  00720E  67                 	db	103	;'g'
   864  00720F  20                 	db	32
   865  007210  63                 	db	99	;'c'
   866  007211  6F                 	db	111	;'o'
   867  007212  6E                 	db	110	;'n'
   868  007213  74                 	db	116	;'t'
   869  007214  65                 	db	101	;'e'
   870  007215  6E                 	db	110	;'n'
   871  007216  74                 	db	116	;'t'
   872  007217  29                 	db	41
   873  007218  2E                 	db	46
   874  007219  0D                 	db	13
   875  00721A  0A                 	db	10
   876  00721B  00                 	db	0
   877  00721C                     STR_85:
   878  00721C  2D                 	db	45
   879  00721D  45                 	db	69	;'E'
   880  00721E  52                 	db	82	;'R'
   881  00721F  52                 	db	82	;'R'
   882  007220  4F                 	db	79	;'O'
   883  007221  52                 	db	82	;'R'
   884  007222  20                 	db	32
   885  007223  2D                 	db	45
   886  007224  20                 	db	32
   887  007225  46                 	db	70	;'F'
   888  007226  69                 	db	105	;'i'
   889  007227  6C                 	db	108	;'l'
   890  007228  74                 	db	116	;'t'
   891  007229  65                 	db	101	;'e'
   892  00722A  72                 	db	114	;'r'
   893  00722B  20                 	db	32
   894  00722C  6E                 	db	110	;'n'
   895  00722D  75                 	db	117	;'u'
   896  00722E  6D                 	db	109	;'m'
   897  00722F  62                 	db	98	;'b'
   898  007230  65                 	db	101	;'e'
   899  007231  72                 	db	114	;'r'
   900  007232  20                 	db	32
   901  007233  63                 	db	99	;'c'
   902  007234  61                 	db	97	;'a'
   903  007235  6E                 	db	110	;'n'
   904  007236  20                 	db	32
   905  007237  6F                 	db	111	;'o'
   906  007238  6E                 	db	110	;'n'
   907  007239  6C                 	db	108	;'l'
   908  00723A  79                 	db	121	;'y'
   909  00723B  20                 	db	32
   910  00723C  62                 	db	98	;'b'
   911  00723D  65                 	db	101	;'e'
   912  00723E  20                 	db	32
   913  00723F  73                 	db	115	;'s'
   914  007240  65                 	db	101	;'e'
   915  007241  74                 	db	116	;'t'
   916  007242  20                 	db	32
   917  007243  74                 	db	116	;'t'
   918  007244  6F                 	db	111	;'o'
   919  007245  20                 	db	32
   920  007246  61                 	db	97	;'a'
   921  007247  20                 	db	32
   922  007248  76                 	db	118	;'v'
   923  007249  61                 	db	97	;'a'
   924  00724A  6C                 	db	108	;'l'
   925  00724B  75                 	db	117	;'u'
   926  00724C  65                 	db	101	;'e'
   927  00724D  20                 	db	32
   928  00724E  62                 	db	98	;'b'
   929  00724F  65                 	db	101	;'e'
   930  007250  74                 	db	116	;'t'
   931  007251  77                 	db	119	;'w'
   932  007252  65                 	db	101	;'e'
   933  007253  65                 	db	101	;'e'
   934  007254  6E                 	db	110	;'n'
   935  007255  20                 	db	32
   936  007256  30                 	db	48	;'0'
   937  007257  2D                 	db	45
   938  007258  31                 	db	49	;'1'
   939  007259  35                 	db	53	;'5'
   940  00725A  2E                 	db	46
   941  00725B  0D                 	db	13
   942  00725C  0A                 	db	10
   943  00725D  00                 	db	0
   944  00725E                     STR_229:
   945  00725E  20                 	db	32
   946  00725F  20                 	db	32
   947  007260  20                 	db	32
   948  007261  20                 	db	32
   949  007262  4D                 	db	77	;'M'
   950  007263  4F                 	db	79	;'O'
   951  007264  44                 	db	68	;'D'
   952  007265  45                 	db	69	;'E'
   953  007266  20                 	db	32
   954  007267  2D                 	db	45
   955  007268  20                 	db	32
   956  007269  53                 	db	83	;'S'
   957  00726A  65                 	db	101	;'e'
   958  00726B  74                 	db	116	;'t'
   959  00726C  20                 	db	32
   960  00726D  61                 	db	97	;'a'
   961  00726E  64                 	db	100	;'d'
   962  00726F  61                 	db	97	;'a'
   963  007270  70                 	db	112	;'p'
   964  007271  74                 	db	116	;'t'
   965  007272  65                 	db	101	;'e'
   966  007273  72                 	db	114	;'r'
   967  007274  20                 	db	32
   968  007275  6D                 	db	109	;'m'
   969  007276  6F                 	db	111	;'o'
   970  007277  64                 	db	100	;'d'
   971  007278  65                 	db	101	;'e'
   972  007279  20                 	db	32
   973  00727A  74                 	db	116	;'t'
   974  00727B  68                 	db	104	;'h'
   975  00727C  61                 	db	97	;'a'
   976  00727D  74                 	db	116	;'t'
   977  00727E  20                 	db	32
   978  00727F  73                 	db	115	;'s'
   979  007280  68                 	db	104	;'h'
   980  007281  6F                 	db	111	;'o'
   981  007282  75                 	db	117	;'u'
   982  007283  6C                 	db	108	;'l'
   983  007284  64                 	db	100	;'d'
   984  007285  20                 	db	32
   985  007286  62                 	db	98	;'b'
   986  007287  65                 	db	101	;'e'
   987  007288  20                 	db	32
   988  007289  75                 	db	117	;'u'
   989  00728A  73                 	db	115	;'s'
   990  00728B  65                 	db	101	;'e'
   991  00728C  64                 	db	100	;'d'
   992  00728D  20                 	db	32
   993  00728E  6F                 	db	111	;'o'
   994  00728F  6E                 	db	110	;'n'
   995  007290  20                 	db	32
   996  007291  73                 	db	115	;'s'
   997  007292  74                 	db	116	;'t'
   998  007293  61                 	db	97	;'a'
   999  007294  72                 	db	114	;'r'
  1000  007295  74                 	db	116	;'t'
  1001  007296  75                 	db	117	;'u'
  1002  007297  70                 	db	112	;'p'
  1003  007298  2E                 	db	46
  1004  007299  0D                 	db	13
  1005  00729A  0A                 	db	10
  1006  00729B  00                 	db	0
  1007  00729C                     STR_189:
  1008  00729C  54                 	db	84	;'T'
  1009  00729D  72                 	db	114	;'r'
  1010  00729E  61                 	db	97	;'a'
  1011  00729F  6E                 	db	110	;'n'
  1012  0072A0  73                 	db	115	;'s'
  1013  0072A1  6D                 	db	109	;'m'
  1014  0072A2  69                 	db	105	;'i'
  1015  0072A3  74                 	db	116	;'t'
  1016  0072A4  74                 	db	116	;'t'
  1017  0072A5  65                 	db	101	;'e'
  1018  0072A6  72                 	db	114	;'r'
  1019  0072A7  20                 	db	32
  1020  0072A8  69                 	db	105	;'i'
  1021  0072A9  6E                 	db	110	;'n'
  1022  0072AA  20                 	db	32
  1023  0072AB  45                 	db	69	;'E'
  1024  0072AC  72                 	db	114	;'r'
  1025  0072AD  72                 	db	114	;'r'
  1026  0072AE  6F                 	db	111	;'o'
  1027  0072AF  72                 	db	114	;'r'
  1028  0072B0  20                 	db	32
  1029  0072B1  53                 	db	83	;'S'
  1030  0072B2  74                 	db	116	;'t'
  1031  0072B3  61                 	db	97	;'a'
  1032  0072B4  74                 	db	116	;'t'
  1033  0072B5  65                 	db	101	;'e'
  1034  0072B6  20                 	db	32
  1035  0072B7  57                 	db	87	;'W'
  1036  0072B8  61                 	db	97	;'a'
  1037  0072B9  72                 	db	114	;'r'
  1038  0072BA  6E                 	db	110	;'n'
  1039  0072BB  69                 	db	105	;'i'
  1040  0072BC  6E                 	db	110	;'n'
  1041  0072BD  67                 	db	103	;'g'
  1042  0072BE  20                 	db	32
  1043  0072BF  28                 	db	40
  1044  0072C0  31                 	db	49	;'1'
  1045  0072C1  32                 	db	50	;'2'
  1046  0072C2  38                 	db	56	;'8'
  1047  0072C3  20                 	db	32
  1048  0072C4  3E                 	db	62	;'>'
  1049  0072C5  20                 	db	32
  1050  0072C6  54                 	db	84	;'T'
  1051  0072C7  45                 	db	69	;'E'
  1052  0072C8  52                 	db	82	;'R'
  1053  0072C9  52                 	db	82	;'R'
  1054  0072CA  43                 	db	67	;'C'
  1055  0072CB  4E                 	db	78	;'N'
  1056  0072CC  54                 	db	84	;'T'
  1057  0072CD  20                 	db	32
  1058  0072CE  3F                 	db	63	;'?'
  1059  0072CF  20                 	db	32
  1060  0072D0  39                 	db	57	;'9'
  1061  0072D1  36                 	db	54	;'6'
  1062  0072D2  29                 	db	41
  1063  0072D3  0D                 	db	13
  1064  0072D4  0A                 	db	10
  1065  0072D5  00                 	db	0
  1066  0072D6                     STR_191:
  1067  0072D6  54                 	db	84	;'T'
  1068  0072D7  72                 	db	114	;'r'
  1069  0072D8  61                 	db	97	;'a'
  1070  0072D9  6E                 	db	110	;'n'
  1071  0072DA  73                 	db	115	;'s'
  1072  0072DB  6D                 	db	109	;'m'
  1073  0072DC  69                 	db	105	;'i'
  1074  0072DD  74                 	db	116	;'t'
  1075  0072DE  74                 	db	116	;'t'
  1076  0072DF  65                 	db	101	;'e'
  1077  0072E0  72                 	db	114	;'r'
  1078  0072E1  20                 	db	32
  1079  0072E2  69                 	db	105	;'i'
  1080  0072E3  6E                 	db	110	;'n'
  1081  0072E4  20                 	db	32
  1082  0072E5  45                 	db	69	;'E'
  1083  0072E6  72                 	db	114	;'r'
  1084  0072E7  72                 	db	114	;'r'
  1085  0072E8  6F                 	db	111	;'o'
  1086  0072E9  72                 	db	114	;'r'
  1087  0072EA  20                 	db	32
  1088  0072EB  53                 	db	83	;'S'
  1089  0072EC  74                 	db	116	;'t'
  1090  0072ED  61                 	db	97	;'a'
  1091  0072EE  74                 	db	116	;'t'
  1092  0072EF  65                 	db	101	;'e'
  1093  0072F0  20                 	db	32
  1094  0072F1  42                 	db	66	;'B'
  1095  0072F2  75                 	db	117	;'u'
  1096  0072F3  73                 	db	115	;'s'
  1097  0072F4  20                 	db	32
  1098  0072F5  50                 	db	80	;'P'
  1099  0072F6  61                 	db	97	;'a'
  1100  0072F7  73                 	db	115	;'s'
  1101  0072F8  73                 	db	115	;'s'
  1102  0072F9  69                 	db	105	;'i'
  1103  0072FA  76                 	db	118	;'v'
  1104  0072FB  65                 	db	101	;'e'
  1105  0072FC  20                 	db	32
  1106  0072FD  28                 	db	40
  1107  0072FE  54                 	db	84	;'T'
  1108  0072FF  45                 	db	69	;'E'
  1109  007300  52                 	db	82	;'R'
  1110  007301  52                 	db	82	;'R'
  1111  007302  43                 	db	67	;'C'
  1112  007303  4E                 	db	78	;'N'
  1113  007304  54                 	db	84	;'T'
  1114  007305  20                 	db	32
  1115  007306  3F                 	db	63	;'?'
  1116  007307  20                 	db	32
  1117  007308  31                 	db	49	;'1'
  1118  007309  32                 	db	50	;'2'
  1119  00730A  38                 	db	56	;'8'
  1120  00730B  29                 	db	41
  1121  00730C  0D                 	db	13
  1122  00730D  0A                 	db	10
  1123  00730E  00                 	db	0
  1124  00730F                     STR_210:
  1125  00730F  20                 	db	32
  1126  007310  20                 	db	32
  1127  007311  20                 	db	32
  1128  007312  20                 	db	32
  1129  007313  20                 	db	32
  1130  007314  46                 	db	70	;'F'
  1131  007315  6F                 	db	111	;'o'
  1132  007316  72                 	db	114	;'r'
  1133  007317  6D                 	db	109	;'m'
  1134  007318  61                 	db	97	;'a'
  1135  007319  74                 	db	116	;'t'
  1136  00731A  3A                 	db	58	;':'
  1137  00731B  20                 	db	32
  1138  00731C  70                 	db	112	;'p'
  1139  00731D  72                 	db	114	;'r'
  1140  00731E  69                 	db	105	;'i'
  1141  00731F  6F                 	db	111	;'o'
  1142  007320  72                 	db	114	;'r'
  1143  007321  69                 	db	105	;'i'
  1144  007322  74                 	db	116	;'t'
  1145  007323  79                 	db	121	;'y'
  1146  007324  2C                 	db	44
  1147  007325  63                 	db	99	;'c'
  1148  007326  6C                 	db	108	;'l'
  1149  007327  61                 	db	97	;'a'
  1150  007328  73                 	db	115	;'s'
  1151  007329  73                 	db	115	;'s'
  1152  00732A  2C                 	db	44
  1153  00732B  74                 	db	116	;'t'
  1154  00732C  79                 	db	121	;'y'
  1155  00732D  70                 	db	112	;'p'
  1156  00732E  65                 	db	101	;'e'
  1157  00732F  2C                 	db	44
  1158  007330  6E                 	db	110	;'n'
  1159  007331  6F                 	db	111	;'o'
  1160  007332  64                 	db	100	;'d'
  1161  007333  65                 	db	101	;'e'
  1162  007334  69                 	db	105	;'i'
  1163  007335  64                 	db	100	;'d'
  1164  007336  2C                 	db	44
  1165  007337  63                 	db	99	;'c'
  1166  007338  6F                 	db	111	;'o'
  1167  007339  75                 	db	117	;'u'
  1168  00733A  6E                 	db	110	;'n'
  1169  00733B  74                 	db	116	;'t'
  1170  00733C  2C                 	db	44
  1171  00733D  64                 	db	100	;'d'
  1172  00733E  61                 	db	97	;'a'
  1173  00733F  74                 	db	116	;'t'
  1174  007340  61                 	db	97	;'a'
  1175  007341  2C                 	db	44
  1176  007342  2C                 	db	44
  1177  007343  2C                 	db	44
  1178  007344  0D                 	db	13
  1179  007345  0A                 	db	10
  1180  007346  00                 	db	0
  1181  007347                     STR_196:
  1182  007347  52                 	db	82	;'R'
  1183  007348  65                 	db	101	;'e'
  1184  007349  63                 	db	99	;'c'
  1185  00734A  65                 	db	101	;'e'
  1186  00734B  69                 	db	105	;'i'
  1187  00734C  76                 	db	118	;'v'
  1188  00734D  65                 	db	101	;'e'
  1189  00734E  72                 	db	114	;'r'
  1190  00734F  20                 	db	32
  1191  007350  69                 	db	105	;'i'
  1192  007351  6E                 	db	110	;'n'
  1193  007352  20                 	db	32
  1194  007353  45                 	db	69	;'E'
  1195  007354  72                 	db	114	;'r'
  1196  007355  72                 	db	114	;'r'
  1197  007356  6F                 	db	111	;'o'
  1198  007357  72                 	db	114	;'r'
  1199  007358  20                 	db	32
  1200  007359  53                 	db	83	;'S'
  1201  00735A  74                 	db	116	;'t'
  1202  00735B  61                 	db	97	;'a'
  1203  00735C  74                 	db	116	;'t'
  1204  00735D  65                 	db	101	;'e'
  1205  00735E  20                 	db	32
  1206  00735F  57                 	db	87	;'W'
  1207  007360  61                 	db	97	;'a'
  1208  007361  72                 	db	114	;'r'
  1209  007362  6E                 	db	110	;'n'
  1210  007363  69                 	db	105	;'i'
  1211  007364  6E                 	db	110	;'n'
  1212  007365  67                 	db	103	;'g'
  1213  007366  20                 	db	32
  1214  007367  28                 	db	40
  1215  007368  31                 	db	49	;'1'
  1216  007369  32                 	db	50	;'2'
  1217  00736A  38                 	db	56	;'8'
  1218  00736B  20                 	db	32
  1219  00736C  3E                 	db	62	;'>'
  1220  00736D  20                 	db	32
  1221  00736E  52                 	db	82	;'R'
  1222  00736F  45                 	db	69	;'E'
  1223  007370  52                 	db	82	;'R'
  1224  007371  52                 	db	82	;'R'
  1225  007372  43                 	db	67	;'C'
  1226  007373  4E                 	db	78	;'N'
  1227  007374  54                 	db	84	;'T'
  1228  007375  20                 	db	32
  1229  007376  3F                 	db	63	;'?'
  1230  007377  20                 	db	32
  1231  007378  39                 	db	57	;'9'
  1232  007379  36                 	db	54	;'6'
  1233  00737A  29                 	db	41
  1234  00737B  0D                 	db	13
  1235  00737C  0A                 	db	10
  1236  00737D  00                 	db	0
  1237  00737E                     STR_228:
  1238  00737E  20                 	db	32
  1239  00737F  20                 	db	32
  1240  007380  20                 	db	32
  1241  007381  20                 	db	32
  1242  007382  53                 	db	83	;'S'
  1243  007383  54                 	db	84	;'T'
  1244  007384  41                 	db	65	;'A'
  1245  007385  52                 	db	82	;'R'
  1246  007386  54                 	db	84	;'T'
  1247  007387  49                 	db	73	;'I'
  1248  007388  46                 	db	70	;'F'
  1249  007389  20                 	db	32
  1250  00738A  2D                 	db	45
  1251  00738B  20                 	db	32
  1252  00738C  53                 	db	83	;'S'
  1253  00738D  65                 	db	101	;'e'
  1254  00738E  74                 	db	116	;'t'
  1255  00738F  20                 	db	32
  1256  007390  69                 	db	105	;'i'
  1257  007391  6E                 	db	110	;'n'
  1258  007392  74                 	db	116	;'t'
  1259  007393  65                 	db	101	;'e'
  1260  007394  72                 	db	114	;'r'
  1261  007395  66                 	db	102	;'f'
  1262  007396  61                 	db	97	;'a'
  1263  007397  63                 	db	99	;'c'
  1264  007398  65                 	db	101	;'e'
  1265  007399  20                 	db	32
  1266  00739A  73                 	db	115	;'s'
  1267  00739B  74                 	db	116	;'t'
  1268  00739C  61                 	db	97	;'a'
  1269  00739D  74                 	db	116	;'t'
  1270  00739E  65                 	db	101	;'e'
  1271  00739F  20                 	db	32
  1272  0073A0  74                 	db	116	;'t'
  1273  0073A1  6F                 	db	111	;'o'
  1274  0073A2  20                 	db	32
  1275  0073A3  75                 	db	117	;'u'
  1276  0073A4  73                 	db	115	;'s'
  1277  0073A5  65                 	db	101	;'e'
  1278  0073A6  20                 	db	32
  1279  0073A7  6F                 	db	111	;'o'
  1280  0073A8  6E                 	db	110	;'n'
  1281  0073A9  20                 	db	32
  1282  0073AA  73                 	db	115	;'s'
  1283  0073AB  74                 	db	116	;'t'
  1284  0073AC  61                 	db	97	;'a'
  1285  0073AD  72                 	db	114	;'r'
  1286  0073AE  74                 	db	116	;'t'
  1287  0073AF  75                 	db	117	;'u'
  1288  0073B0  70                 	db	112	;'p'
  1289  0073B1  2E                 	db	46
  1290  0073B2  0D                 	db	13
  1291  0073B3  0A                 	db	10
  1292  0073B4  00                 	db	0
  1293  0073B5  50                 	db	80	;'P'
  1294  0073B6  72                 	db	114	;'r'
  1295  0073B7  65                 	db	101	;'e'
  1296  0073B8  73                 	db	115	;'s'
  1297  0073B9  73                 	db	115	;'s'
  1298  0073BA  20                 	db	32
  1299  0073BB  27                 	db	39
  1300  0073BC  76                 	db	118	;'v'
  1301  0073BD  27                 	db	39
  1302  0073BE  20                 	db	32
  1303  0073BF  77                 	db	119	;'w'
  1304  0073C0  69                 	db	105	;'i'
  1305  0073C1  74                 	db	116	;'t'
  1306  0073C2  68                 	db	104	;'h'
  1307  0073C3  69                 	db	105	;'i'
  1308  0073C4  6E                 	db	110	;'n'
  1309  0073C5  20                 	db	32
  1310  0073C6  74                 	db	116	;'t'
  1311  0073C7  68                 	db	104	;'h'
  1312  0073C8  72                 	db	114	;'r'
  1313  0073C9  65                 	db	101	;'e'
  1314  0073CA  65                 	db	101	;'e'
  1315  0073CB  20                 	db	32
  1316  0073CC  73                 	db	115	;'s'
  1317  0073CD  65                 	db	101	;'e'
  1318  0073CE  63                 	db	99	;'c'
  1319  0073CF  6F                 	db	111	;'o'
  1320  0073D0  6E                 	db	110	;'n'
  1321  0073D1  64                 	db	100	;'d'
  1322  0073D2  73                 	db	115	;'s'
  1323  0073D3  20                 	db	32
  1324  0073D4  74                 	db	116	;'t'
  1325  0073D5  6F                 	db	111	;'o'
  1326  0073D6  20                 	db	32
  1327  0073D7  65                 	db	101	;'e'
  1328  0073D8  6E                 	db	110	;'n'
  1329  0073D9  74                 	db	116	;'t'
  1330  0073DA  65                 	db	101	;'e'
  1331  0073DB  72                 	db	114	;'r'
  1332  0073DC  20                 	db	32
  1333  0073DD  76                 	db	118	;'v'
  1334  0073DE  65                 	db	101	;'e'
  1335  0073DF  72                 	db	114	;'r'
  1336  0073E0  62                 	db	98	;'b'
  1337  0073E1  6F                 	db	111	;'o'
  1338  0073E2  73                 	db	115	;'s'
  1339  0073E3  65                 	db	101	;'e'
  1340  0073E4  20                 	db	32
  1341  0073E5  6D                 	db	109	;'m'
  1342  0073E6  6F                 	db	111	;'o'
  1343  0073E7  64                 	db	100	;'d'
  1344  0073E8  65                 	db	101	;'e'
  1345  0073E9  0D                 	db	13
  1346  0073EA  0A                 	db	10
  1347  0073EB  00                 	db	0
  1348  0073EC                     STR_197:
  1349  0073EC  52                 	db	82	;'R'
  1350  0073ED  65                 	db	101	;'e'
  1351  0073EE  63                 	db	99	;'c'
  1352  0073EF  65                 	db	101	;'e'
  1353  0073F0  69                 	db	105	;'i'
  1354  0073F1  76                 	db	118	;'v'
  1355  0073F2  65                 	db	101	;'e'
  1356  0073F3  72                 	db	114	;'r'
  1357  0073F4  20                 	db	32
  1358  0073F5  69                 	db	105	;'i'
  1359  0073F6  6E                 	db	110	;'n'
  1360  0073F7  20                 	db	32
  1361  0073F8  45                 	db	69	;'E'
  1362  0073F9  72                 	db	114	;'r'
  1363  0073FA  72                 	db	114	;'r'
  1364  0073FB  6F                 	db	111	;'o'
  1365  0073FC  72                 	db	114	;'r'
  1366  0073FD  20                 	db	32
  1367  0073FE  53                 	db	83	;'S'
  1368  0073FF  74                 	db	116	;'t'
  1369  007400  61                 	db	97	;'a'
  1370  007401  74                 	db	116	;'t'
  1371  007402  65                 	db	101	;'e'
  1372  007403  20                 	db	32
  1373  007404  42                 	db	66	;'B'
  1374  007405  75                 	db	117	;'u'
  1375  007406  73                 	db	115	;'s'
  1376  007407  20                 	db	32
  1377  007408  50                 	db	80	;'P'
  1378  007409  61                 	db	97	;'a'
  1379  00740A  73                 	db	115	;'s'
  1380  00740B  73                 	db	115	;'s'
  1381  00740C  69                 	db	105	;'i'
  1382  00740D  76                 	db	118	;'v'
  1383  00740E  65                 	db	101	;'e'
  1384  00740F  20                 	db	32
  1385  007410  28                 	db	40
  1386  007411  52                 	db	82	;'R'
  1387  007412  45                 	db	69	;'E'
  1388  007413  52                 	db	82	;'R'
  1389  007414  52                 	db	82	;'R'
  1390  007415  43                 	db	67	;'C'
  1391  007416  4E                 	db	78	;'N'
  1392  007417  54                 	db	84	;'T'
  1393  007418  20                 	db	32
  1394  007419  3F                 	db	63	;'?'
  1395  00741A  20                 	db	32
  1396  00741B  31                 	db	49	;'1'
  1397  00741C  32                 	db	50	;'2'
  1398  00741D  38                 	db	56	;'8'
  1399  00741E  29                 	db	41
  1400  00741F  0D                 	db	13
  1401  007420  0A                 	db	10
  1402  007421  00                 	db	0
  1403  007422                     STR_68:
  1404  007422  2D                 	db	45
  1405  007423  45                 	db	69	;'E'
  1406  007424  52                 	db	82	;'R'
  1407  007425  52                 	db	82	;'R'
  1408  007426  4F                 	db	79	;'O'
  1409  007427  52                 	db	82	;'R'
  1410  007428  20                 	db	32
  1411  007429  2D                 	db	45
  1412  00742A  20                 	db	32
  1413  00742B  4F                 	db	79	;'O'
  1414  00742C  6E                 	db	110	;'n'
  1415  00742D  65                 	db	101	;'e'
  1416  00742E  20                 	db	32
  1417  00742F  6F                 	db	111	;'o'
  1418  007430  72                 	db	114	;'r'
  1419  007431  20                 	db	32
  1420  007432  6D                 	db	109	;'m'
  1421  007433  6F                 	db	111	;'o'
  1422  007434  72                 	db	114	;'r'
  1423  007435  65                 	db	101	;'e'
  1424  007436  20                 	db	32
  1425  007437  72                 	db	114	;'r'
  1426  007438  65                 	db	101	;'e'
  1427  007439  67                 	db	103	;'g'
  1428  00743A  69                 	db	105	;'i'
  1429  00743B  73                 	db	115	;'s'
  1430  00743C  74                 	db	116	;'t'
  1431  00743D  65                 	db	101	;'e'
  1432  00743E  72                 	db	114	;'r'
  1433  00743F  28                 	db	40
  1434  007440  73                 	db	115	;'s'
  1435  007441  29                 	db	41
  1436  007442  20                 	db	32
  1437  007443  63                 	db	99	;'c'
  1438  007444  6F                 	db	111	;'o'
  1439  007445  75                 	db	117	;'u'
  1440  007446  6C                 	db	108	;'l'
  1441  007447  64                 	db	100	;'d'
  1442  007448  20                 	db	32
  1443  007449  6E                 	db	110	;'n'
  1444  00744A  6F                 	db	111	;'o'
  1445  00744B  74                 	db	116	;'t'
  1446  00744C  20                 	db	32
  1447  00744D  62                 	db	98	;'b'
  1448  00744E  65                 	db	101	;'e'
  1449  00744F  20                 	db	32
  1450  007450  72                 	db	114	;'r'
  1451  007451  65                 	db	101	;'e'
  1452  007452  61                 	db	97	;'a'
  1453  007453  64                 	db	100	;'d'
  1454  007454  2E                 	db	46
  1455  007455  0D                 	db	13
  1456  007456  0A                 	db	10
  1457  007457  00                 	db	0
  1458  007458                     STR_190:
  1459  007458  54                 	db	84	;'T'
  1460  007459  72                 	db	114	;'r'
  1461  00745A  61                 	db	97	;'a'
  1462  00745B  6E                 	db	110	;'n'
  1463  00745C  73                 	db	115	;'s'
  1464  00745D  6D                 	db	109	;'m'
  1465  00745E  69                 	db	105	;'i'
  1466  00745F  74                 	db	116	;'t'
  1467  007460  74                 	db	116	;'t'
  1468  007461  65                 	db	101	;'e'
  1469  007462  72                 	db	114	;'r'
  1470  007463  20                 	db	32
  1471  007464  69                 	db	105	;'i'
  1472  007465  6E                 	db	110	;'n'
  1473  007466  20                 	db	32
  1474  007467  45                 	db	69	;'E'
  1475  007468  72                 	db	114	;'r'
  1476  007469  72                 	db	114	;'r'
  1477  00746A  6F                 	db	111	;'o'
  1478  00746B  72                 	db	114	;'r'
  1479  00746C  20                 	db	32
  1480  00746D  53                 	db	83	;'S'
  1481  00746E  74                 	db	116	;'t'
  1482  00746F  61                 	db	97	;'a'
  1483  007470  74                 	db	116	;'t'
  1484  007471  65                 	db	101	;'e'
  1485  007472  20                 	db	32
  1486  007473  42                 	db	66	;'B'
  1487  007474  75                 	db	117	;'u'
  1488  007475  73                 	db	115	;'s'
  1489  007476  20                 	db	32
  1490  007477  4F                 	db	79	;'O'
  1491  007478  46                 	db	70	;'F'
  1492  007479  46                 	db	70	;'F'
  1493  00747A  20                 	db	32
  1494  00747B  28                 	db	40
  1495  00747C  54                 	db	84	;'T'
  1496  00747D  45                 	db	69	;'E'
  1497  00747E  52                 	db	82	;'R'
  1498  00747F  52                 	db	82	;'R'
  1499  007480  43                 	db	67	;'C'
  1500  007481  4E                 	db	78	;'N'
  1501  007482  54                 	db	84	;'T'
  1502  007483  20                 	db	32
  1503  007484  3F                 	db	63	;'?'
  1504  007485  20                 	db	32
  1505  007486  32                 	db	50	;'2'
  1506  007487  35                 	db	53	;'5'
  1507  007488  36                 	db	54	;'6'
  1508  007489  29                 	db	41
  1509  00748A  0D                 	db	13
  1510  00748B  0A                 	db	10
  1511  00748C  00                 	db	0
  1512  00748D                     STR_2:
  1513  00748D  43                 	db	67	;'C'
  1514  00748E  6F                 	db	111	;'o'
  1515  00748F  70                 	db	112	;'p'
  1516  007490  79                 	db	121	;'y'
  1517  007491  72                 	db	114	;'r'
  1518  007492  69                 	db	105	;'i'
  1519  007493  67                 	db	103	;'g'
  1520  007494  68                 	db	104	;'h'
  1521  007495  74                 	db	116	;'t'
  1522  007496  20                 	db	32
  1523  007497  28                 	db	40
  1524  007498  43                 	db	67	;'C'
  1525  007499  29                 	db	41
  1526  00749A  20                 	db	32
  1527  00749B  32                 	db	50	;'2'
  1528  00749C  30                 	db	48	;'0'
  1529  00749D  31                 	db	49	;'1'
  1530  00749E  34                 	db	52	;'4'
  1531  00749F  2D                 	db	45
  1532  0074A0  32                 	db	50	;'2'
  1533  0074A1  30                 	db	48	;'0'
  1534  0074A2  31                 	db	49	;'1'
  1535  0074A3  35                 	db	53	;'5'
  1536  0074A4  20                 	db	32
  1537  0074A5  47                 	db	71	;'G'
  1538  0074A6  72                 	db	114	;'r'
  1539  0074A7  6F                 	db	111	;'o'
  1540  0074A8  64                 	db	100	;'d'
  1541  0074A9  61                 	db	97	;'a'
  1542  0074AA  6E                 	db	110	;'n'
  1543  0074AB  73                 	db	115	;'s'
  1544  0074AC  20                 	db	32
  1545  0074AD  50                 	db	80	;'P'
  1546  0074AE  61                 	db	97	;'a'
  1547  0074AF  72                 	db	114	;'r'
  1548  0074B0  61                 	db	97	;'a'
  1549  0074B1  64                 	db	100	;'d'
  1550  0074B2  69                 	db	105	;'i'
  1551  0074B3  73                 	db	115	;'s'
  1552  0074B4  20                 	db	32
  1553  0074B5  41                 	db	65	;'A'
  1554  0074B6  42                 	db	66	;'B'
  1555  0074B7  2C                 	db	44
  1556  0074B8  20                 	db	32
  1557  0074B9  53                 	db	83	;'S'
  1558  0074BA  77                 	db	119	;'w'
  1559  0074BB  65                 	db	101	;'e'
  1560  0074BC  64                 	db	100	;'d'
  1561  0074BD  65                 	db	101	;'e'
  1562  0074BE  6E                 	db	110	;'n'
  1563  0074BF  0D                 	db	13
  1564  0074C0  0A                 	db	10
  1565  0074C1  00                 	db	0
  1566  0074C2                     STR_198:
  1567  0074C2  54                 	db	84	;'T'
  1568  0074C3  72                 	db	114	;'r'
  1569  0074C4  61                 	db	97	;'a'
  1570  0074C5  6E                 	db	110	;'n'
  1571  0074C6  73                 	db	115	;'s'
  1572  0074C7  6D                 	db	109	;'m'
  1573  0074C8  69                 	db	105	;'i'
  1574  0074C9  74                 	db	116	;'t'
  1575  0074CA  74                 	db	116	;'t'
  1576  0074CB  65                 	db	101	;'e'
  1577  0074CC  72                 	db	114	;'r'
  1578  0074CD  20                 	db	32
  1579  0074CE  6F                 	db	111	;'o'
  1580  0074CF  72                 	db	114	;'r'
  1581  0074D0  20                 	db	32
  1582  0074D1  52                 	db	82	;'R'
  1583  0074D2  65                 	db	101	;'e'
  1584  0074D3  63                 	db	99	;'c'
  1585  0074D4  65                 	db	101	;'e'
  1586  0074D5  69                 	db	105	;'i'
  1587  0074D6  76                 	db	118	;'v'
  1588  0074D7  65                 	db	101	;'e'
  1589  0074D8  72                 	db	114	;'r'
  1590  0074D9  20                 	db	32
  1591  0074DA  69                 	db	105	;'i'
  1592  0074DB  73                 	db	115	;'s'
  1593  0074DC  20                 	db	32
  1594  0074DD  69                 	db	105	;'i'
  1595  0074DE  6E                 	db	110	;'n'
  1596  0074DF  20                 	db	32
  1597  0074E0  45                 	db	69	;'E'
  1598  0074E1  72                 	db	114	;'r'
  1599  0074E2  72                 	db	114	;'r'
  1600  0074E3  6F                 	db	111	;'o'
  1601  0074E4  72                 	db	114	;'r'
  1602  0074E5  20                 	db	32
  1603  0074E6  53                 	db	83	;'S'
  1604  0074E7  74                 	db	116	;'t'
  1605  0074E8  61                 	db	97	;'a'
  1606  0074E9  74                 	db	116	;'t'
  1607  0074EA  65                 	db	101	;'e'
  1608  0074EB  20                 	db	32
  1609  0074EC  57                 	db	87	;'W'
  1610  0074ED  61                 	db	97	;'a'
  1611  0074EE  72                 	db	114	;'r'
  1612  0074EF  6E                 	db	110	;'n'
  1613  0074F0  69                 	db	105	;'i'
  1614  0074F1  6E                 	db	110	;'n'
  1615  0074F2  67                 	db	103	;'g'
  1616  0074F3  0D                 	db	13
  1617  0074F4  0A                 	db	10
  1618  0074F5  00                 	db	0
  1619  0074F6                     STR_204:
  1620  0074F6  4C                 	db	76	;'L'
  1621  0074F7  49                 	db	73	;'I'
  1622  0074F8  53                 	db	83	;'S'
  1623  0074F9  54                 	db	84	;'T'
  1624  0074FA  45                 	db	69	;'E'
  1625  0074FB  4E                 	db	78	;'N'
  1626  0074FC  20                 	db	32
  1627  0074FD  2D                 	db	45
  1628  0074FE  20                 	db	32
  1629  0074FF  4F                 	db	79	;'O'
  1630  007500  70                 	db	112	;'p'
  1631  007501  65                 	db	101	;'e'
  1632  007502  6E                 	db	110	;'n'
  1633  007503  20                 	db	32
  1634  007504  43                 	db	67	;'C'
  1635  007505  41                 	db	65	;'A'
  1636  007506  4E                 	db	78	;'N'
  1637  007507  20                 	db	32
  1638  007508  69                 	db	105	;'i'
  1639  007509  6E                 	db	110	;'n'
  1640  00750A  74                 	db	116	;'t'
  1641  00750B  65                 	db	101	;'e'
  1642  00750C  72                 	db	114	;'r'
  1643  00750D  66                 	db	102	;'f'
  1644  00750E  61                 	db	97	;'a'
  1645  00750F  63                 	db	99	;'c'
  1646  007510  65                 	db	101	;'e'
  1647  007511  20                 	db	32
  1648  007512  69                 	db	105	;'i'
  1649  007513  6E                 	db	110	;'n'
  1650  007514  20                 	db	32
  1651  007515  6C                 	db	108	;'l'
  1652  007516  69                 	db	105	;'i'
  1653  007517  73                 	db	115	;'s'
  1654  007518  74                 	db	116	;'t'
  1655  007519  65                 	db	101	;'e'
  1656  00751A  6E                 	db	110	;'n'
  1657  00751B  20                 	db	32
  1658  00751C  6F                 	db	111	;'o'
  1659  00751D  6E                 	db	110	;'n'
  1660  00751E  6C                 	db	108	;'l'
  1661  00751F  79                 	db	121	;'y'
  1662  007520  20                 	db	32
  1663  007521  6D                 	db	109	;'m'
  1664  007522  6F                 	db	111	;'o'
  1665  007523  64                 	db	100	;'d'
  1666  007524  65                 	db	101	;'e'
  1667  007525  2E                 	db	46
  1668  007526  0D                 	db	13
  1669  007527  0A                 	db	10
  1670  007528  00                 	db	0
  1671  007529                     STR_97:
  1672  007529  2D                 	db	45
  1673  00752A  45                 	db	69	;'E'
  1674  00752B  52                 	db	82	;'R'
  1675  00752C  52                 	db	82	;'R'
  1676  00752D  4F                 	db	79	;'O'
  1677  00752E  52                 	db	82	;'R'
  1678  00752F  20                 	db	32
  1679  007530  2D                 	db	45
  1680  007531  20                 	db	32
  1681  007532  4D                 	db	77	;'M'
  1682  007533  61                 	db	97	;'a'
  1683  007534  73                 	db	115	;'s'
  1684  007535  6B                 	db	107	;'k'
  1685  007536  20                 	db	32
  1686  007537  6E                 	db	110	;'n'
  1687  007538  75                 	db	117	;'u'
  1688  007539  6D                 	db	109	;'m'
  1689  00753A  62                 	db	98	;'b'
  1690  00753B  65                 	db	101	;'e'
  1691  00753C  72                 	db	114	;'r'
  1692  00753D  20                 	db	32
  1693  00753E  63                 	db	99	;'c'
  1694  00753F  61                 	db	97	;'a'
  1695  007540  6E                 	db	110	;'n'
  1696  007541  20                 	db	32
  1697  007542  6F                 	db	111	;'o'
  1698  007543  6E                 	db	110	;'n'
  1699  007544  6C                 	db	108	;'l'
  1700  007545  79                 	db	121	;'y'
  1701  007546  20                 	db	32
  1702  007547  62                 	db	98	;'b'
  1703  007548  65                 	db	101	;'e'
  1704  007549  20                 	db	32
  1705  00754A  73                 	db	115	;'s'
  1706  00754B  65                 	db	101	;'e'
  1707  00754C  74                 	db	116	;'t'
  1708  00754D  20                 	db	32
  1709  00754E  61                 	db	97	;'a'
  1710  00754F  73                 	db	115	;'s'
  1711  007550  20                 	db	32
  1712  007551  30                 	db	48	;'0'
  1713  007552  20                 	db	32
  1714  007553  6F                 	db	111	;'o'
  1715  007554  72                 	db	114	;'r'
  1716  007555  20                 	db	32
  1717  007556  31                 	db	49	;'1'
  1718  007557  2E                 	db	46
  1719  007558  0D                 	db	13
  1720  007559  0A                 	db	10
  1721  00755A  00                 	db	0
  1722  00755B                     STR_205:
  1723  00755B  4C                 	db	76	;'L'
  1724  00755C  4F                 	db	79	;'O'
  1725  00755D  4F                 	db	79	;'O'
  1726  00755E  50                 	db	80	;'P'
  1727  00755F  42                 	db	66	;'B'
  1728  007560  41                 	db	65	;'A'
  1729  007561  43                 	db	67	;'C'
  1730  007562  4B                 	db	75	;'K'
  1731  007563  20                 	db	32
  1732  007564  2D                 	db	45
  1733  007565  20                 	db	32
  1734  007566  4F                 	db	79	;'O'
  1735  007567  70                 	db	112	;'p'
  1736  007568  65                 	db	101	;'e'
  1737  007569  6E                 	db	110	;'n'
  1738  00756A  20                 	db	32
  1739  00756B  43                 	db	67	;'C'
  1740  00756C  41                 	db	65	;'A'
  1741  00756D  4E                 	db	78	;'N'
  1742  00756E  20                 	db	32
  1743  00756F  69                 	db	105	;'i'
  1744  007570  6E                 	db	110	;'n'
  1745  007571  74                 	db	116	;'t'
  1746  007572  65                 	db	101	;'e'
  1747  007573  72                 	db	114	;'r'
  1748  007574  66                 	db	102	;'f'
  1749  007575  61                 	db	97	;'a'
  1750  007576  63                 	db	99	;'c'
  1751  007577  65                 	db	101	;'e'
  1752  007578  20                 	db	32
  1753  007579  69                 	db	105	;'i'
  1754  00757A  6E                 	db	110	;'n'
  1755  00757B  20                 	db	32
  1756  00757C  6C                 	db	108	;'l'
  1757  00757D  6F                 	db	111	;'o'
  1758  00757E  6F                 	db	111	;'o'
  1759  00757F  70                 	db	112	;'p'
  1760  007580  62                 	db	98	;'b'
  1761  007581  61                 	db	97	;'a'
  1762  007582  63                 	db	99	;'c'
  1763  007583  6B                 	db	107	;'k'
  1764  007584  20                 	db	32
  1765  007585  6D                 	db	109	;'m'
  1766  007586  6F                 	db	111	;'o'
  1767  007587  64                 	db	100	;'d'
  1768  007588  65                 	db	101	;'e'
  1769  007589  2E                 	db	46
  1770  00758A  0D                 	db	13
  1771  00758B  0A                 	db	10
  1772  00758C  00                 	db	0
  1773  00758D                     STR_207:
  1774  00758D  56                 	db	86	;'V'
  1775  00758E  45                 	db	69	;'E'
  1776  00758F  52                 	db	82	;'R'
  1777  007590  53                 	db	83	;'S'
  1778  007591  49                 	db	73	;'I'
  1779  007592  4F                 	db	79	;'O'
  1780  007593  4E                 	db	78	;'N'
  1781  007594  20                 	db	32
  1782  007595  2D                 	db	45
  1783  007596  20                 	db	32
  1784  007597  44                 	db	68	;'D'
  1785  007598  69                 	db	105	;'i'
  1786  007599  73                 	db	115	;'s'
  1787  00759A  70                 	db	112	;'p'
  1788  00759B  6C                 	db	108	;'l'
  1789  00759C  61                 	db	97	;'a'
  1790  00759D  79                 	db	121	;'y'
  1791  00759E  20                 	db	32
  1792  00759F  66                 	db	102	;'f'
  1793  0075A0  69                 	db	105	;'i'
  1794  0075A1  72                 	db	114	;'r'
  1795  0075A2  6D                 	db	109	;'m'
  1796  0075A3  77                 	db	119	;'w'
  1797  0075A4  61                 	db	97	;'a'
  1798  0075A5  72                 	db	114	;'r'
  1799  0075A6  65                 	db	101	;'e'
  1800  0075A7  20                 	db	32
  1801  0075A8  76                 	db	118	;'v'
  1802  0075A9  65                 	db	101	;'e'
  1803  0075AA  72                 	db	114	;'r'
  1804  0075AB  73                 	db	115	;'s'
  1805  0075AC  69                 	db	105	;'i'
  1806  0075AD  6F                 	db	111	;'o'
  1807  0075AE  6E                 	db	110	;'n'
  1808  0075AF  20                 	db	32
  1809  0075B0  69                 	db	105	;'i'
  1810  0075B1  6E                 	db	110	;'n'
  1811  0075B2  66                 	db	102	;'f'
  1812  0075B3  6F                 	db	111	;'o'
  1813  0075B4  72                 	db	114	;'r'
  1814  0075B5  6D                 	db	109	;'m'
  1815  0075B6  61                 	db	97	;'a'
  1816  0075B7  74                 	db	116	;'t'
  1817  0075B8  69                 	db	105	;'i'
  1818  0075B9  6F                 	db	111	;'o'
  1819  0075BA  6E                 	db	110	;'n'
  1820  0075BB  2E                 	db	46
  1821  0075BC  0D                 	db	13
  1822  0075BD  0A                 	db	10
  1823  0075BE  00                 	db	0
  1824  0075BF                     STR_227:
  1825  0075BF  20                 	db	32
  1826  0075C0  20                 	db	32
  1827  0075C1  20                 	db	32
  1828  0075C2  20                 	db	32
  1829  0075C3  20                 	db	32
  1830  0075C4  20                 	db	32
  1831  0075C5  20                 	db	32
  1832  0075C6  20                 	db	32
  1833  0075C7  20                 	db	32
  1834  0075C8  20                 	db	32
  1835  0075C9  20                 	db	32
  1836  0075CA  20                 	db	32
  1837  0075CB  20                 	db	32
  1838  0075CC  20                 	db	32
  1839  0075CD  20                 	db	32
  1840  0075CE  20                 	db	32
  1841  0075CF  46                 	db	70	;'F'
  1842  0075D0  6F                 	db	111	;'o'
  1843  0075D1  72                 	db	114	;'r'
  1844  0075D2  6D                 	db	109	;'m'
  1845  0075D3  61                 	db	97	;'a'
  1846  0075D4  74                 	db	116	;'t'
  1847  0075D5  3A                 	db	58	;':'
  1848  0075D6  20                 	db	32
  1849  0075D7  73                 	db	115	;'s'
  1850  0075D8  65                 	db	101	;'e'
  1851  0075D9  74                 	db	116	;'t'
  1852  0075DA  20                 	db	32
  1853  0075DB  72                 	db	114	;'r'
  1854  0075DC  77                 	db	119	;'w'
  1855  0075DD  74                 	db	116	;'t'
  1856  0075DE  69                 	db	105	;'i'
  1857  0075DF  6D                 	db	109	;'m'
  1858  0075E0  65                 	db	101	;'e'
  1859  0075E1  6F                 	db	111	;'o'
  1860  0075E2  75                 	db	117	;'u'
  1861  0075E3  74                 	db	116	;'t'
  1862  0075E4  20                 	db	32
  1863  0075E5  74                 	db	116	;'t'
  1864  0075E6  69                 	db	105	;'i'
  1865  0075E7  6D                 	db	109	;'m'
  1866  0075E8  65                 	db	101	;'e'
  1867  0075E9  6F                 	db	111	;'o'
  1868  0075EA  75                 	db	117	;'u'
  1869  0075EB  74                 	db	116	;'t'
  1870  0075EC  2E                 	db	46
  1871  0075ED  0D                 	db	13
  1872  0075EE  0A                 	db	10
  1873  0075EF  00                 	db	0
  1874  0075F0                     STR_225:
  1875  0075F0  20                 	db	32
  1876  0075F1  20                 	db	32
  1877  0075F2  20                 	db	32
  1878  0075F3  20                 	db	32
  1879  0075F4  44                 	db	68	;'D'
  1880  0075F5  45                 	db	69	;'E'
  1881  0075F6  43                 	db	67	;'C'
  1882  0075F7  49                 	db	73	;'I'
  1883  0075F8  4D                 	db	77	;'M'
  1884  0075F9  41                 	db	65	;'A'
  1885  0075FA  4C                 	db	76	;'L'
  1886  0075FB  20                 	db	32
  1887  0075FC  2D                 	db	45
  1888  0075FD  20                 	db	32
  1889  0075FE  44                 	db	68	;'D'
  1890  0075FF  69                 	db	105	;'i'
  1891  007600  73                 	db	115	;'s'
  1892  007601  70                 	db	112	;'p'
  1893  007602  6C                 	db	108	;'l'
  1894  007603  61                 	db	97	;'a'
  1895  007604  79                 	db	121	;'y'
  1896  007605  20                 	db	32
  1897  007606  6E                 	db	110	;'n'
  1898  007607  75                 	db	117	;'u'
  1899  007608  6D                 	db	109	;'m'
  1900  007609  65                 	db	101	;'e'
  1901  00760A  72                 	db	114	;'r'
  1902  00760B  69                 	db	105	;'i'
  1903  00760C  63                 	db	99	;'c'
  1904  00760D  61                 	db	97	;'a'
  1905  00760E  6C                 	db	108	;'l'
  1906  00760F  73                 	db	115	;'s'
  1907  007610  20                 	db	32
  1908  007611  69                 	db	105	;'i'
  1909  007612  6E                 	db	110	;'n'
  1910  007613  20                 	db	32
  1911  007614  64                 	db	100	;'d'
  1912  007615  65                 	db	101	;'e'
  1913  007616  63                 	db	99	;'c'
  1914  007617  69                 	db	105	;'i'
  1915  007618  6D                 	db	109	;'m'
  1916  007619  61                 	db	97	;'a'
  1917  00761A  6C                 	db	108	;'l'
  1918  00761B  2E                 	db	46
  1919  00761C  0D                 	db	13
  1920  00761D  0A                 	db	10
  1921  00761E  00                 	db	0
  1922  00761F                     STR_224:
  1923  00761F  20                 	db	32
  1924  007620  20                 	db	32
  1925  007621  20                 	db	32
  1926  007622  20                 	db	32
  1927  007623  48                 	db	72	;'H'
  1928  007624  45                 	db	69	;'E'
  1929  007625  58                 	db	88	;'X'
  1930  007626  20                 	db	32
  1931  007627  2D                 	db	45
  1932  007628  20                 	db	32
  1933  007629  44                 	db	68	;'D'
  1934  00762A  69                 	db	105	;'i'
  1935  00762B  73                 	db	115	;'s'
  1936  00762C  70                 	db	112	;'p'
  1937  00762D  6C                 	db	108	;'l'
  1938  00762E  61                 	db	97	;'a'
  1939  00762F  79                 	db	121	;'y'
  1940  007630  20                 	db	32
  1941  007631  6E                 	db	110	;'n'
  1942  007632  75                 	db	117	;'u'
  1943  007633  6D                 	db	109	;'m'
  1944  007634  65                 	db	101	;'e'
  1945  007635  72                 	db	114	;'r'
  1946  007636  69                 	db	105	;'i'
  1947  007637  63                 	db	99	;'c'
  1948  007638  61                 	db	97	;'a'
  1949  007639  6C                 	db	108	;'l'
  1950  00763A  73                 	db	115	;'s'
  1951  00763B  20                 	db	32
  1952  00763C  69                 	db	105	;'i'
  1953  00763D  6E                 	db	110	;'n'
  1954  00763E  20                 	db	32
  1955  00763F  68                 	db	104	;'h'
  1956  007640  65                 	db	101	;'e'
  1957  007641  78                 	db	120	;'x'
  1958  007642  61                 	db	97	;'a'
  1959  007643  64                 	db	100	;'d'
  1960  007644  65                 	db	101	;'e'
  1961  007645  63                 	db	99	;'c'
  1962  007646  69                 	db	105	;'i'
  1963  007647  6D                 	db	109	;'m'
  1964  007648  61                 	db	97	;'a'
  1965  007649  6C                 	db	108	;'l'
  1966  00764A  2E                 	db	46
  1967  00764B  0D                 	db	13
  1968  00764C  0A                 	db	10
  1969  00764D  00                 	db	0
  1970  00764E                     STR_215:
  1971  00764E  46                 	db	70	;'F'
  1972  00764F  49                 	db	73	;'I'
  1973  007650  4E                 	db	78	;'N'
  1974  007651  44                 	db	68	;'D'
  1975  007652  20                 	db	32
  1976  007653  2D                 	db	45
  1977  007654  20                 	db	32
  1978  007655  46                 	db	70	;'F'
  1979  007656  69                 	db	105	;'i'
  1980  007657  6E                 	db	110	;'n'
  1981  007658  64                 	db	100	;'d'
  1982  007659  20                 	db	32
  1983  00765A  61                 	db	97	;'a'
  1984  00765B  76                 	db	118	;'v'
  1985  00765C  61                 	db	97	;'a'
  1986  00765D  69                 	db	105	;'i'
  1987  00765E  6C                 	db	108	;'l'
  1988  00765F  61                 	db	97	;'a'
  1989  007660  62                 	db	98	;'b'
  1990  007661  6C                 	db	108	;'l'
  1991  007662  65                 	db	101	;'e'
  1992  007663  20                 	db	32
  1993  007664  43                 	db	67	;'C'
  1994  007665  41                 	db	65	;'A'
  1995  007666  4E                 	db	78	;'N'
  1996  007667  34                 	db	52	;'4'
  1997  007668  56                 	db	86	;'V'
  1998  007669  53                 	db	83	;'S'
  1999  00766A  43                 	db	67	;'C'
  2000  00766B  50                 	db	80	;'P'
  2001  00766C  20                 	db	32
  2002  00766D  6E                 	db	110	;'n'
  2003  00766E  6F                 	db	111	;'o'
  2004  00766F  64                 	db	100	;'d'
  2005  007670  65                 	db	101	;'e'
  2006  007671  73                 	db	115	;'s'
  2007  007672  20                 	db	32
  2008  007673  6F                 	db	111	;'o'
  2009  007674  6E                 	db	110	;'n'
  2010  007675  20                 	db	32
  2011  007676  62                 	db	98	;'b'
  2012  007677  75                 	db	117	;'u'
  2013  007678  73                 	db	115	;'s'
  2014  007679  2E                 	db	46
  2015  00767A  0D                 	db	13
  2016  00767B  0A                 	db	10
  2017  00767C  00                 	db	0
  2018  00767D                     STR_203:
  2019  00767D  53                 	db	83	;'S'
  2020  00767E  49                 	db	73	;'I'
  2021  00767F  4C                 	db	76	;'L'
  2022  007680  45                 	db	69	;'E'
  2023  007681  4E                 	db	78	;'N'
  2024  007682  54                 	db	84	;'T'
  2025  007683  20                 	db	32
  2026  007684  2D                 	db	45
  2027  007685  20                 	db	32
  2028  007686  4F                 	db	79	;'O'
  2029  007687  70                 	db	112	;'p'
  2030  007688  65                 	db	101	;'e'
  2031  007689  6E                 	db	110	;'n'
  2032  00768A  20                 	db	32
  2033  00768B  43                 	db	67	;'C'
  2034  00768C  41                 	db	65	;'A'
  2035  00768D  4E                 	db	78	;'N'
  2036  00768E  20                 	db	32
  2037  00768F  69                 	db	105	;'i'
  2038  007690  6E                 	db	110	;'n'
  2039  007691  74                 	db	116	;'t'
  2040  007692  65                 	db	101	;'e'
  2041  007693  72                 	db	114	;'r'
  2042  007694  66                 	db	102	;'f'
  2043  007695  61                 	db	97	;'a'
  2044  007696  63                 	db	99	;'c'
  2045  007697  65                 	db	101	;'e'
  2046  007698  20                 	db	32
  2047  007699  69                 	db	105	;'i'
  2048  00769A  6E                 	db	110	;'n'
  2049  00769B  20                 	db	32
  2050  00769C  73                 	db	115	;'s'
  2051  00769D  69                 	db	105	;'i'
  2052  00769E  6C                 	db	108	;'l'
  2053  00769F  65                 	db	101	;'e'
  2054  0076A0  6E                 	db	110	;'n'
  2055  0076A1  74                 	db	116	;'t'
  2056  0076A2  20                 	db	32
  2057  0076A3  6D                 	db	109	;'m'
  2058  0076A4  6F                 	db	111	;'o'
  2059  0076A5  64                 	db	100	;'d'
  2060  0076A6  65                 	db	101	;'e'
  2061  0076A7  2E                 	db	46
  2062  0076A8  0D                 	db	13
  2063  0076A9  0A                 	db	10
  2064  0076AA  00                 	db	0
  2065  0076AB                     STR_208:
  2066  0076AB  49                 	db	73	;'I'
  2067  0076AC  46                 	db	70	;'F'
  2068  0076AD  4D                 	db	77	;'M'
  2069  0076AE  4F                 	db	79	;'O'
  2070  0076AF  44                 	db	68	;'D'
  2071  0076B0  45                 	db	69	;'E'
  2072  0076B1  20                 	db	32
  2073  0076B2  2D                 	db	45
  2074  0076B3  20                 	db	32
  2075  0076B4  44                 	db	68	;'D'
  2076  0076B5  69                 	db	105	;'i'
  2077  0076B6  73                 	db	115	;'s'
  2078  0076B7  70                 	db	112	;'p'
  2079  0076B8  6C                 	db	108	;'l'
  2080  0076B9  61                 	db	97	;'a'
  2081  0076BA  79                 	db	121	;'y'
  2082  0076BB  20                 	db	32
  2083  0076BC  73                 	db	115	;'s'
  2084  0076BD  65                 	db	101	;'e'
  2085  0076BE  6C                 	db	108	;'l'
  2086  0076BF  65                 	db	101	;'e'
  2087  0076C0  63                 	db	99	;'c'
  2088  0076C1  74                 	db	116	;'t'
  2089  0076C2  65                 	db	101	;'e'
  2090  0076C3  64                 	db	100	;'d'
  2091  0076C4  20                 	db	32
  2092  0076C5  69                 	db	105	;'i'
  2093  0076C6  6E                 	db	110	;'n'
  2094  0076C7  74                 	db	116	;'t'
  2095  0076C8  65                 	db	101	;'e'
  2096  0076C9  72                 	db	114	;'r'
  2097  0076CA  66                 	db	102	;'f'
  2098  0076CB  61                 	db	97	;'a'
  2099  0076CC  63                 	db	99	;'c'
  2100  0076CD  65                 	db	101	;'e'
  2101  0076CE  20                 	db	32
  2102  0076CF  6D                 	db	109	;'m'
  2103  0076D0  6F                 	db	111	;'o'
  2104  0076D1  64                 	db	100	;'d'
  2105  0076D2  65                 	db	101	;'e'
  2106  0076D3  2E                 	db	46
  2107  0076D4  0D                 	db	13
  2108  0076D5  0A                 	db	10
  2109  0076D6  00                 	db	0
  2110  0076D7                     STR_202:
  2111  0076D7  4F                 	db	79	;'O'
  2112  0076D8  50                 	db	80	;'P'
  2113  0076D9  45                 	db	69	;'E'
  2114  0076DA  4E                 	db	78	;'N'
  2115  0076DB  20                 	db	32
  2116  0076DC  2D                 	db	45
  2117  0076DD  20                 	db	32
  2118  0076DE  4F                 	db	79	;'O'
  2119  0076DF  70                 	db	112	;'p'
  2120  0076E0  65                 	db	101	;'e'
  2121  0076E1  6E                 	db	110	;'n'
  2122  0076E2  20                 	db	32
  2123  0076E3  43                 	db	67	;'C'
  2124  0076E4  41                 	db	65	;'A'
  2125  0076E5  4E                 	db	78	;'N'
  2126  0076E6  20                 	db	32
  2127  0076E7  69                 	db	105	;'i'
  2128  0076E8  6E                 	db	110	;'n'
  2129  0076E9  74                 	db	116	;'t'
  2130  0076EA  65                 	db	101	;'e'
  2131  0076EB  72                 	db	114	;'r'
  2132  0076EC  66                 	db	102	;'f'
  2133  0076ED  61                 	db	97	;'a'
  2134  0076EE  63                 	db	99	;'c'
  2135  0076EF  65                 	db	101	;'e'
  2136  0076F0  20                 	db	32
  2137  0076F1  69                 	db	105	;'i'
  2138  0076F2  6E                 	db	110	;'n'
  2139  0076F3  20                 	db	32
  2140  0076F4  6E                 	db	110	;'n'
  2141  0076F5  6F                 	db	111	;'o'
  2142  0076F6  72                 	db	114	;'r'
  2143  0076F7  6D                 	db	109	;'m'
  2144  0076F8  61                 	db	97	;'a'
  2145  0076F9  6C                 	db	108	;'l'
  2146  0076FA  20                 	db	32
  2147  0076FB  6D                 	db	109	;'m'
  2148  0076FC  6F                 	db	111	;'o'
  2149  0076FD  64                 	db	100	;'d'
  2150  0076FE  65                 	db	101	;'e'
  2151  0076FF  2E                 	db	46
  2152  007700  0D                 	db	13
  2153  007701  0A                 	db	10
  2154  007702  00                 	db	0
  2155  007703                     STR_109:
  2156  007703  2B                 	db	43
  2157  007704  4F                 	db	79	;'O'
  2158  007705  4B                 	db	75	;'K'
  2159  007706  20                 	db	32
  2160  007707  2D                 	db	45
  2161  007708  20                 	db	32
  2162  007709  4E                 	db	78	;'N'
  2163  00770A  75                 	db	117	;'u'
  2164  00770B  6D                 	db	109	;'m'
  2165  00770C  65                 	db	101	;'e'
  2166  00770D  72                 	db	114	;'r'
  2167  00770E  69                 	db	105	;'i'
  2168  00770F  63                 	db	99	;'c'
  2169  007710  61                 	db	97	;'a'
  2170  007711  6C                 	db	108	;'l'
  2171  007712  20                 	db	32
  2172  007713  6F                 	db	111	;'o'
  2173  007714  75                 	db	117	;'u'
  2174  007715  74                 	db	116	;'t'
  2175  007716  70                 	db	112	;'p'
  2176  007717  75                 	db	117	;'u'
  2177  007718  74                 	db	116	;'t'
  2178  007719  20                 	db	32
  2179  00771A  6E                 	db	110	;'n'
  2180  00771B  6F                 	db	111	;'o'
  2181  00771C  77                 	db	119	;'w'
  2182  00771D  20                 	db	32
  2183  00771E  69                 	db	105	;'i'
  2184  00771F  6E                 	db	110	;'n'
  2185  007720  20                 	db	32
  2186  007721  68                 	db	104	;'h'
  2187  007722  65                 	db	101	;'e'
  2188  007723  78                 	db	120	;'x'
  2189  007724  61                 	db	97	;'a'
  2190  007725  64                 	db	100	;'d'
  2191  007726  65                 	db	101	;'e'
  2192  007727  63                 	db	99	;'c'
  2193  007728  69                 	db	105	;'i'
  2194  007729  6D                 	db	109	;'m'
  2195  00772A  61                 	db	97	;'a'
  2196  00772B  6C                 	db	108	;'l'
  2197  00772C  0D                 	db	13
  2198  00772D  0A                 	db	10
  2199  00772E  00                 	db	0
  2200  00772F                     STR_88:
  2201  00772F  2D                 	db	45
  2202  007730  45                 	db	69	;'E'
  2203  007731  52                 	db	82	;'R'
  2204  007732  52                 	db	82	;'R'
  2205  007733  4F                 	db	79	;'O'
  2206  007734  52                 	db	82	;'R'
  2207  007735  20                 	db	32
  2208  007736  2D                 	db	45
  2209  007737  20                 	db	32
  2210  007738  66                 	db	102	;'f'
  2211  007739  69                 	db	105	;'i'
  2212  00773A  6C                 	db	108	;'l'
  2213  00773B  74                 	db	116	;'t'
  2214  00773C  65                 	db	101	;'e'
  2215  00773D  72                 	db	114	;'r'
  2216  00773E  20                 	db	32
  2217  00773F  66                 	db	102	;'f'
  2218  007740  6F                 	db	111	;'o'
  2219  007741  72                 	db	114	;'r'
  2220  007742  20                 	db	32
  2221  007743  70                 	db	112	;'p'
  2222  007744  72                 	db	114	;'r'
  2223  007745  69                 	db	105	;'i'
  2224  007746  6F                 	db	111	;'o'
  2225  007747  72                 	db	114	;'r'
  2226  007748  69                 	db	105	;'i'
  2227  007749  74                 	db	116	;'t'
  2228  00774A  79                 	db	121	;'y'
  2229  00774B  20                 	db	32
  2230  00774C  69                 	db	105	;'i'
  2231  00774D  73                 	db	115	;'s'
  2232  00774E  20                 	db	32
  2233  00774F  6D                 	db	109	;'m'
  2234  007750  69                 	db	105	;'i'
  2235  007751  73                 	db	115	;'s'
  2236  007752  73                 	db	115	;'s'
  2237  007753  69                 	db	105	;'i'
  2238  007754  6E                 	db	110	;'n'
  2239  007755  67                 	db	103	;'g'
  2240  007756  0D                 	db	13
  2241  007757  0A                 	db	10
  2242  007758  00                 	db	0
  2243  007759                     STR_94:
  2244  007759  2D                 	db	45
  2245  00775A  45                 	db	69	;'E'
  2246  00775B  52                 	db	82	;'R'
  2247  00775C  52                 	db	82	;'R'
  2248  00775D  4F                 	db	79	;'O'
  2249  00775E  52                 	db	82	;'R'
  2250  00775F  20                 	db	32
  2251  007760  2D                 	db	45
  2252  007761  20                 	db	32
  2253  007762  66                 	db	102	;'f'
  2254  007763  69                 	db	105	;'i'
  2255  007764  6C                 	db	108	;'l'
  2256  007765  74                 	db	116	;'t'
  2257  007766  65                 	db	101	;'e'
  2258  007767  72                 	db	114	;'r'
  2259  007768  20                 	db	32
  2260  007769  66                 	db	102	;'f'
  2261  00776A  6F                 	db	111	;'o'
  2262  00776B  72                 	db	114	;'r'
  2263  00776C  20                 	db	32
  2264  00776D  6E                 	db	110	;'n'
  2265  00776E  69                 	db	105	;'i'
  2266  00776F  64                 	db	100	;'d'
  2267  007770  65                 	db	101	;'e'
  2268  007771  20                 	db	32
  2269  007772  69                 	db	105	;'i'
  2270  007773  64                 	db	100	;'d'
  2271  007774  20                 	db	32
  2272  007775  69                 	db	105	;'i'
  2273  007776  73                 	db	115	;'s'
  2274  007777  20                 	db	32
  2275  007778  6D                 	db	109	;'m'
  2276  007779  69                 	db	105	;'i'
  2277  00777A  73                 	db	115	;'s'
  2278  00777B  73                 	db	115	;'s'
  2279  00777C  69                 	db	105	;'i'
  2280  00777D  6E                 	db	110	;'n'
  2281  00777E  67                 	db	103	;'g'
  2282  00777F  0D                 	db	13
  2283  007780  0A                 	db	10
  2284  007781  00                 	db	0
  2285  007782                     STR_214:
  2286  007782  48                 	db	72	;'H'
  2287  007783  45                 	db	69	;'E'
  2288  007784  4C                 	db	76	;'L'
  2289  007785  50                 	db	80	;'P'
  2290  007786  20                 	db	32
  2291  007787  2D                 	db	45
  2292  007788  20                 	db	32
  2293  007789  44                 	db	68	;'D'
  2294  00778A  69                 	db	105	;'i'
  2295  00778B  73                 	db	115	;'s'
  2296  00778C  70                 	db	112	;'p'
  2297  00778D  6C                 	db	108	;'l'
  2298  00778E  61                 	db	97	;'a'
  2299  00778F  79                 	db	121	;'y'
  2300  007790  20                 	db	32
  2301  007791  74                 	db	116	;'t'
  2302  007792  68                 	db	104	;'h'
  2303  007793  69                 	db	105	;'i'
  2304  007794  73                 	db	115	;'s'
  2305  007795  20                 	db	32
  2306  007796  68                 	db	104	;'h'
  2307  007797  65                 	db	101	;'e'
  2308  007798  6C                 	db	108	;'l'
  2309  007799  70                 	db	112	;'p'
  2310  00779A  20                 	db	32
  2311  00779B  69                 	db	105	;'i'
  2312  00779C  6E                 	db	110	;'n'
  2313  00779D  66                 	db	102	;'f'
  2314  00779E  6F                 	db	111	;'o'
  2315  00779F  72                 	db	114	;'r'
  2316  0077A0  6D                 	db	109	;'m'
  2317  0077A1  61                 	db	97	;'a'
  2318  0077A2  74                 	db	116	;'t'
  2319  0077A3  69                 	db	105	;'i'
  2320  0077A4  6F                 	db	111	;'o'
  2321  0077A5  6E                 	db	110	;'n'
  2322  0077A6  2E                 	db	46
  2323  0077A7  0D                 	db	13
  2324  0077A8  0A                 	db	10
  2325  0077A9  00                 	db	0
  2326  0077AA                     STR_100:
  2327  0077AA  2D                 	db	45
  2328  0077AB  45                 	db	69	;'E'
  2329  0077AC  52                 	db	82	;'R'
  2330  0077AD  52                 	db	82	;'R'
  2331  0077AE  4F                 	db	79	;'O'
  2332  0077AF  52                 	db	82	;'R'
  2333  0077B0  20                 	db	32
  2334  0077B1  2D                 	db	45
  2335  0077B2  20                 	db	32
  2336  0077B3  6D                 	db	109	;'m'
  2337  0077B4  61                 	db	97	;'a'
  2338  0077B5  73                 	db	115	;'s'
  2339  0077B6  6B                 	db	107	;'k'
  2340  0077B7  20                 	db	32
  2341  0077B8  66                 	db	102	;'f'
  2342  0077B9  6F                 	db	111	;'o'
  2343  0077BA  72                 	db	114	;'r'
  2344  0077BB  20                 	db	32
  2345  0077BC  70                 	db	112	;'p'
  2346  0077BD  72                 	db	114	;'r'
  2347  0077BE  69                 	db	105	;'i'
  2348  0077BF  6F                 	db	111	;'o'
  2349  0077C0  72                 	db	114	;'r'
  2350  0077C1  69                 	db	105	;'i'
  2351  0077C2  74                 	db	116	;'t'
  2352  0077C3  79                 	db	121	;'y'
  2353  0077C4  20                 	db	32
  2354  0077C5  69                 	db	105	;'i'
  2355  0077C6  73                 	db	115	;'s'
  2356  0077C7  20                 	db	32
  2357  0077C8  6D                 	db	109	;'m'
  2358  0077C9  69                 	db	105	;'i'
  2359  0077CA  73                 	db	115	;'s'
  2360  0077CB  73                 	db	115	;'s'
  2361  0077CC  69                 	db	105	;'i'
  2362  0077CD  6E                 	db	110	;'n'
  2363  0077CE  67                 	db	103	;'g'
  2364  0077CF  0D                 	db	13
  2365  0077D0  0A                 	db	10
  2366  0077D1  00                 	db	0
  2367  0077D2                     STR_111:
  2368  0077D2  2B                 	db	43
  2369  0077D3  4F                 	db	79	;'O'
  2370  0077D4  4B                 	db	75	;'K'
  2371  0077D5  20                 	db	32
  2372  0077D6  2D                 	db	45
  2373  0077D7  20                 	db	32
  2374  0077D8  4E                 	db	78	;'N'
  2375  0077D9  75                 	db	117	;'u'
  2376  0077DA  6D                 	db	109	;'m'
  2377  0077DB  65                 	db	101	;'e'
  2378  0077DC  72                 	db	114	;'r'
  2379  0077DD  69                 	db	105	;'i'
  2380  0077DE  63                 	db	99	;'c'
  2381  0077DF  61                 	db	97	;'a'
  2382  0077E0  6C                 	db	108	;'l'
  2383  0077E1  20                 	db	32
  2384  0077E2  6F                 	db	111	;'o'
  2385  0077E3  75                 	db	117	;'u'
  2386  0077E4  74                 	db	116	;'t'
  2387  0077E5  70                 	db	112	;'p'
  2388  0077E6  75                 	db	117	;'u'
  2389  0077E7  74                 	db	116	;'t'
  2390  0077E8  20                 	db	32
  2391  0077E9  6E                 	db	110	;'n'
  2392  0077EA  6F                 	db	111	;'o'
  2393  0077EB  77                 	db	119	;'w'
  2394  0077EC  20                 	db	32
  2395  0077ED  69                 	db	105	;'i'
  2396  0077EE  6E                 	db	110	;'n'
  2397  0077EF  20                 	db	32
  2398  0077F0  64                 	db	100	;'d'
  2399  0077F1  65                 	db	101	;'e'
  2400  0077F2  63                 	db	99	;'c'
  2401  0077F3  69                 	db	105	;'i'
  2402  0077F4  6D                 	db	109	;'m'
  2403  0077F5  61                 	db	97	;'a'
  2404  0077F6  6C                 	db	108	;'l'
  2405  0077F7  0D                 	db	13
  2406  0077F8  0A                 	db	10
  2407  0077F9  00                 	db	0
  2408  0077FA                     STR_86:
  2409  0077FA  2D                 	db	45
  2410  0077FB  45                 	db	69	;'E'
  2411  0077FC  52                 	db	82	;'R'
  2412  0077FD  52                 	db	82	;'R'
  2413  0077FE  4F                 	db	79	;'O'
  2414  0077FF  52                 	db	82	;'R'
  2415  007800  20                 	db	32
  2416  007801  2D                 	db	45
  2417  007802  20                 	db	32
  2418  007803  4E                 	db	78	;'N'
  2419  007804  6F                 	db	111	;'o'
  2420  007805  20                 	db	32
  2421  007806  66                 	db	102	;'f'
  2422  007807  69                 	db	105	;'i'
  2423  007808  6C                 	db	108	;'l'
  2424  007809  74                 	db	116	;'t'
  2425  00780A  65                 	db	101	;'e'
  2426  00780B  72                 	db	114	;'r'
  2427  00780C  20                 	db	32
  2428  00780D  6E                 	db	110	;'n'
  2429  00780E  75                 	db	117	;'u'
  2430  00780F  6D                 	db	109	;'m'
  2431  007810  62                 	db	98	;'b'
  2432  007811  65                 	db	101	;'e'
  2433  007812  72                 	db	114	;'r'
  2434  007813  20                 	db	32
  2435  007814  73                 	db	115	;'s'
  2436  007815  70                 	db	112	;'p'
  2437  007816  65                 	db	101	;'e'
  2438  007817  63                 	db	99	;'c'
  2439  007818  69                 	db	105	;'i'
  2440  007819  66                 	db	102	;'f'
  2441  00781A  69                 	db	105	;'i'
  2442  00781B  65                 	db	101	;'e'
  2443  00781C  64                 	db	100	;'d'
  2444  00781D  2E                 	db	46
  2445  00781E  0D                 	db	13
  2446  00781F  0A                 	db	10
  2447  007820  00                 	db	0
  2448  007821                     STR_213:
  2449  007821  45                 	db	69	;'E'
  2450  007822  52                 	db	82	;'R'
  2451  007823  52                 	db	82	;'R'
  2452  007824  20                 	db	32
  2453  007825  2D                 	db	45
  2454  007826  20                 	db	32
  2455  007827  44                 	db	68	;'D'
  2456  007828  69                 	db	105	;'i'
  2457  007829  73                 	db	115	;'s'
  2458  00782A  70                 	db	112	;'p'
  2459  00782B  6C                 	db	108	;'l'
  2460  00782C  61                 	db	97	;'a'
  2461  00782D  79                 	db	121	;'y'
  2462  00782E  20                 	db	32
  2463  00782F  43                 	db	67	;'C'
  2464  007830  41                 	db	65	;'A'
  2465  007831  4E                 	db	78	;'N'
  2466  007832  20                 	db	32
  2467  007833  65                 	db	101	;'e'
  2468  007834  72                 	db	114	;'r'
  2469  007835  72                 	db	114	;'r'
  2470  007836  6F                 	db	111	;'o'
  2471  007837  72                 	db	114	;'r'
  2472  007838  20                 	db	32
  2473  007839  69                 	db	105	;'i'
  2474  00783A  6E                 	db	110	;'n'
  2475  00783B  66                 	db	102	;'f'
  2476  00783C  6F                 	db	111	;'o'
  2477  00783D  72                 	db	114	;'r'
  2478  00783E  6D                 	db	109	;'m'
  2479  00783F  61                 	db	97	;'a'
  2480  007840  74                 	db	116	;'t'
  2481  007841  69                 	db	105	;'i'
  2482  007842  6F                 	db	111	;'o'
  2483  007843  6E                 	db	110	;'n'
  2484  007844  2E                 	db	46
  2485  007845  0D                 	db	13
  2486  007846  0A                 	db	10
  2487  007847  00                 	db	0
  2488  007848                     STR_199:
  2489  007848  48                 	db	72	;'H'
  2490  007849  65                 	db	101	;'e'
  2491  00784A  6C                 	db	108	;'l'
  2492  00784B  70                 	db	112	;'p'
  2493  00784C  20                 	db	32
  2494  00784D  66                 	db	102	;'f'
  2495  00784E  6F                 	db	111	;'o'
  2496  00784F  72                 	db	114	;'r'
  2497  007850  20                 	db	32
  2498  007851  74                 	db	116	;'t'
  2499  007852  68                 	db	104	;'h'
  2500  007853  65                 	db	101	;'e'
  2501  007854  20                 	db	32
  2502  007855  46                 	db	70	;'F'
  2503  007856  72                 	db	114	;'r'
  2504  007857  61                 	db	97	;'a'
  2505  007858  6E                 	db	110	;'n'
  2506  007859  6B                 	db	107	;'k'
  2507  00785A  66                 	db	102	;'f'
  2508  00785B  75                 	db	117	;'u'
  2509  00785C  72                 	db	114	;'r'
  2510  00785D  74                 	db	116	;'t'
  2511  00785E  20                 	db	32
  2512  00785F  52                 	db	82	;'R'
  2513  007860  53                 	db	83	;'S'
  2514  007861  2D                 	db	45
  2515  007862  32                 	db	50	;'2'
  2516  007863  33                 	db	51	;'3'
  2517  007864  32                 	db	50	;'2'
  2518  007865  20                 	db	32
  2519  007866  6D                 	db	109	;'m'
  2520  007867  6F                 	db	111	;'o'
  2521  007868  64                 	db	100	;'d'
  2522  007869  75                 	db	117	;'u'
  2523  00786A  6C                 	db	108	;'l'
  2524  00786B  65                 	db	101	;'e'
  2525  00786C  0D                 	db	13
  2526  00786D  0A                 	db	10
  2527  00786E  00                 	db	0
  2528  00786F                     STR_106:
  2529  00786F  2D                 	db	45
  2530  007870  45                 	db	69	;'E'
  2531  007871  52                 	db	82	;'R'
  2532  007872  52                 	db	82	;'R'
  2533  007873  4F                 	db	79	;'O'
  2534  007874  52                 	db	82	;'R'
  2535  007875  20                 	db	32
  2536  007876  2D                 	db	45
  2537  007877  20                 	db	32
  2538  007878  6D                 	db	109	;'m'
  2539  007879  61                 	db	97	;'a'
  2540  00787A  73                 	db	115	;'s'
  2541  00787B  6B                 	db	107	;'k'
  2542  00787C  20                 	db	32
  2543  00787D  66                 	db	102	;'f'
  2544  00787E  6F                 	db	111	;'o'
  2545  00787F  72                 	db	114	;'r'
  2546  007880  20                 	db	32
  2547  007881  6E                 	db	110	;'n'
  2548  007882  69                 	db	105	;'i'
  2549  007883  64                 	db	100	;'d'
  2550  007884  65                 	db	101	;'e'
  2551  007885  20                 	db	32
  2552  007886  69                 	db	105	;'i'
  2553  007887  64                 	db	100	;'d'
  2554  007888  20                 	db	32
  2555  007889  69                 	db	105	;'i'
  2556  00788A  73                 	db	115	;'s'
  2557  00788B  20                 	db	32
  2558  00788C  6D                 	db	109	;'m'
  2559  00788D  69                 	db	105	;'i'
  2560  00788E  73                 	db	115	;'s'
  2561  00788F  73                 	db	115	;'s'
  2562  007890  69                 	db	105	;'i'
  2563  007891  6E                 	db	110	;'n'
  2564  007892  67                 	db	103	;'g'
  2565  007893  0D                 	db	13
  2566  007894  0A                 	db	10
  2567  007895  00                 	db	0
  2568  007896                     STR_90:
  2569  007896  2D                 	db	45
  2570  007897  45                 	db	69	;'E'
  2571  007898  52                 	db	82	;'R'
  2572  007899  52                 	db	82	;'R'
  2573  00789A  4F                 	db	79	;'O'
  2574  00789B  52                 	db	82	;'R'
  2575  00789C  20                 	db	32
  2576  00789D  2D                 	db	45
  2577  00789E  20                 	db	32
  2578  00789F  66                 	db	102	;'f'
  2579  0078A0  69                 	db	105	;'i'
  2580  0078A1  6C                 	db	108	;'l'
  2581  0078A2  74                 	db	116	;'t'
  2582  0078A3  65                 	db	101	;'e'
  2583  0078A4  72                 	db	114	;'r'
  2584  0078A5  20                 	db	32
  2585  0078A6  66                 	db	102	;'f'
  2586  0078A7  6F                 	db	111	;'o'
  2587  0078A8  72                 	db	114	;'r'
  2588  0078A9  20                 	db	32
  2589  0078AA  63                 	db	99	;'c'
  2590  0078AB  6C                 	db	108	;'l'
  2591  0078AC  61                 	db	97	;'a'
  2592  0078AD  73                 	db	115	;'s'
  2593  0078AE  73                 	db	115	;'s'
  2594  0078AF  20                 	db	32
  2595  0078B0  69                 	db	105	;'i'
  2596  0078B1  73                 	db	115	;'s'
  2597  0078B2  20                 	db	32
  2598  0078B3  6D                 	db	109	;'m'
  2599  0078B4  69                 	db	105	;'i'
  2600  0078B5  73                 	db	115	;'s'
  2601  0078B6  73                 	db	115	;'s'
  2602  0078B7  69                 	db	105	;'i'
  2603  0078B8  6E                 	db	110	;'n'
  2604  0078B9  67                 	db	103	;'g'
  2605  0078BA  0D                 	db	13
  2606  0078BB  0A                 	db	10
  2607  0078BC  00                 	db	0
  2608  0078BD                     STR_230:
  2609  0078BD  20                 	db	32
  2610  0078BE  20                 	db	32
  2611  0078BF  20                 	db	32
  2612  0078C0  20                 	db	32
  2613  0078C1  20                 	db	32
  2614  0078C2  20                 	db	32
  2615  0078C3  20                 	db	32
  2616  0078C4  20                 	db	32
  2617  0078C5  20                 	db	32
  2618  0078C6  20                 	db	32
  2619  0078C7  20                 	db	32
  2620  0078C8  4D                 	db	77	;'M'
  2621  0078C9  6F                 	db	111	;'o'
  2622  0078CA  64                 	db	100	;'d'
  2623  0078CB  65                 	db	101	;'e'
  2624  0078CC  73                 	db	115	;'s'
  2625  0078CD  3A                 	db	58	;':'
  2626  0078CE  20                 	db	32
  2627  0078CF  76                 	db	118	;'v'
  2628  0078D0  65                 	db	101	;'e'
  2629  0078D1  72                 	db	114	;'r'
  2630  0078D2  62                 	db	98	;'b'
  2631  0078D3  6F                 	db	111	;'o'
  2632  0078D4  73                 	db	115	;'s'
  2633  0078D5  65                 	db	101	;'e'
  2634  0078D6  7C                 	db	124
  2635  0078D7  76                 	db	118	;'v'
  2636  0078D8  73                 	db	115	;'s'
  2637  0078D9  63                 	db	99	;'c'
  2638  0078DA  70                 	db	112	;'p'
  2639  0078DB  7C                 	db	124
  2640  0078DC  73                 	db	115	;'s'
  2641  0078DD  6C                 	db	108	;'l'
  2642  0078DE  63                 	db	99	;'c'
  2643  0078DF  61                 	db	97	;'a'
  2644  0078E0  6E                 	db	110	;'n'
  2645  0078E1  0D                 	db	13
  2646  0078E2  0A                 	db	10
  2647  0078E3  00                 	db	0
  2648  0078E4                     STR_92:
  2649  0078E4  2D                 	db	45
  2650  0078E5  45                 	db	69	;'E'
  2651  0078E6  52                 	db	82	;'R'
  2652  0078E7  52                 	db	82	;'R'
  2653  0078E8  4F                 	db	79	;'O'
  2654  0078E9  52                 	db	82	;'R'
  2655  0078EA  20                 	db	32
  2656  0078EB  2D                 	db	45
  2657  0078EC  20                 	db	32
  2658  0078ED  66                 	db	102	;'f'
  2659  0078EE  69                 	db	105	;'i'
  2660  0078EF  6C                 	db	108	;'l'
  2661  0078F0  74                 	db	116	;'t'
  2662  0078F1  65                 	db	101	;'e'
  2663  0078F2  72                 	db	114	;'r'
  2664  0078F3  20                 	db	32
  2665  0078F4  66                 	db	102	;'f'
  2666  0078F5  6F                 	db	111	;'o'
  2667  0078F6  72                 	db	114	;'r'
  2668  0078F7  20                 	db	32
  2669  0078F8  74                 	db	116	;'t'
  2670  0078F9  79                 	db	121	;'y'
  2671  0078FA  70                 	db	112	;'p'
  2672  0078FB  65                 	db	101	;'e'
  2673  0078FC  20                 	db	32
  2674  0078FD  69                 	db	105	;'i'
  2675  0078FE  73                 	db	115	;'s'
  2676  0078FF  20                 	db	32
  2677  007900  6D                 	db	109	;'m'
  2678  007901  69                 	db	105	;'i'
  2679  007902  73                 	db	115	;'s'
  2680  007903  73                 	db	115	;'s'
  2681  007904  69                 	db	105	;'i'
  2682  007905  6E                 	db	110	;'n'
  2683  007906  67                 	db	103	;'g'
  2684  007907  0D                 	db	13
  2685  007908  0A                 	db	10
  2686  007909  00                 	db	0
  2687  00790A                     STR_98:
  2688  00790A  2D                 	db	45
  2689  00790B  45                 	db	69	;'E'
  2690  00790C  52                 	db	82	;'R'
  2691  00790D  52                 	db	82	;'R'
  2692  00790E  4F                 	db	79	;'O'
  2693  00790F  52                 	db	82	;'R'
  2694  007910  20                 	db	32
  2695  007911  2D                 	db	45
  2696  007912  20                 	db	32
  2697  007913  4E                 	db	78	;'N'
  2698  007914  6F                 	db	111	;'o'
  2699  007915  20                 	db	32
  2700  007916  6D                 	db	109	;'m'
  2701  007917  61                 	db	97	;'a'
  2702  007918  73                 	db	115	;'s'
  2703  007919  6B                 	db	107	;'k'
  2704  00791A  20                 	db	32
  2705  00791B  6E                 	db	110	;'n'
  2706  00791C  75                 	db	117	;'u'
  2707  00791D  6D                 	db	109	;'m'
  2708  00791E  62                 	db	98	;'b'
  2709  00791F  65                 	db	101	;'e'
  2710  007920  72                 	db	114	;'r'
  2711  007921  20                 	db	32
  2712  007922  73                 	db	115	;'s'
  2713  007923  70                 	db	112	;'p'
  2714  007924  65                 	db	101	;'e'
  2715  007925  63                 	db	99	;'c'
  2716  007926  69                 	db	105	;'i'
  2717  007927  66                 	db	102	;'f'
  2718  007928  69                 	db	105	;'i'
  2719  007929  65                 	db	101	;'e'
  2720  00792A  64                 	db	100	;'d'
  2721  00792B  2E                 	db	46
  2722  00792C  0D                 	db	13
  2723  00792D  0A                 	db	10
  2724  00792E  00                 	db	0
  2725  00792F                     STR_1:
  2726  00792F  0D                 	db	13
  2727  007930  0A                 	db	10
  2728  007931  46                 	db	70	;'F'
  2729  007932  72                 	db	114	;'r'
  2730  007933  61                 	db	97	;'a'
  2731  007934  6E                 	db	110	;'n'
  2732  007935  6B                 	db	107	;'k'
  2733  007936  66                 	db	102	;'f'
  2734  007937  75                 	db	117	;'u'
  2735  007938  72                 	db	114	;'r'
  2736  007939  74                 	db	116	;'t'
  2737  00793A  20                 	db	32
  2738  00793B  52                 	db	82	;'R'
  2739  00793C  53                 	db	83	;'S'
  2740  00793D  2D                 	db	45
  2741  00793E  32                 	db	50	;'2'
  2742  00793F  33                 	db	51	;'3'
  2743  007940  32                 	db	50	;'2'
  2744  007941  20                 	db	32
  2745  007942  43                 	db	67	;'C'
  2746  007943  41                 	db	65	;'A'
  2747  007944  4E                 	db	78	;'N'
  2748  007945  34                 	db	52	;'4'
  2749  007946  56                 	db	86	;'V'
  2750  007947  53                 	db	83	;'S'
  2751  007948  43                 	db	67	;'C'
  2752  007949  50                 	db	80	;'P'
  2753  00794A  20                 	db	32
  2754  00794B  6D                 	db	109	;'m'
  2755  00794C  6F                 	db	111	;'o'
  2756  00794D  64                 	db	100	;'d'
  2757  00794E  75                 	db	117	;'u'
  2758  00794F  6C                 	db	108	;'l'
  2759  007950  65                 	db	101	;'e'
  2760  007951  0D                 	db	13
  2761  007952  0A                 	db	10
  2762  007953  00                 	db	0
  2763  007954                     STR_102:
  2764  007954  2D                 	db	45
  2765  007955  45                 	db	69	;'E'
  2766  007956  52                 	db	82	;'R'
  2767  007957  52                 	db	82	;'R'
  2768  007958  4F                 	db	79	;'O'
  2769  007959  52                 	db	82	;'R'
  2770  00795A  20                 	db	32
  2771  00795B  2D                 	db	45
  2772  00795C  20                 	db	32
  2773  00795D  6D                 	db	109	;'m'
  2774  00795E  61                 	db	97	;'a'
  2775  00795F  73                 	db	115	;'s'
  2776  007960  6B                 	db	107	;'k'
  2777  007961  20                 	db	32
  2778  007962  66                 	db	102	;'f'
  2779  007963  6F                 	db	111	;'o'
  2780  007964  72                 	db	114	;'r'
  2781  007965  20                 	db	32
  2782  007966  63                 	db	99	;'c'
  2783  007967  6C                 	db	108	;'l'
  2784  007968  61                 	db	97	;'a'
  2785  007969  73                 	db	115	;'s'
  2786  00796A  73                 	db	115	;'s'
  2787  00796B  20                 	db	32
  2788  00796C  69                 	db	105	;'i'
  2789  00796D  73                 	db	115	;'s'
  2790  00796E  20                 	db	32
  2791  00796F  6D                 	db	109	;'m'
  2792  007970  69                 	db	105	;'i'
  2793  007971  73                 	db	115	;'s'
  2794  007972  73                 	db	115	;'s'
  2795  007973  69                 	db	105	;'i'
  2796  007974  6E                 	db	110	;'n'
  2797  007975  67                 	db	103	;'g'
  2798  007976  0D                 	db	13
  2799  007977  0A                 	db	10
  2800  007978  00                 	db	0
  2801  007979                     STR_104:
  2802  007979  2D                 	db	45
  2803  00797A  45                 	db	69	;'E'
  2804  00797B  52                 	db	82	;'R'
  2805  00797C  52                 	db	82	;'R'
  2806  00797D  4F                 	db	79	;'O'
  2807  00797E  52                 	db	82	;'R'
  2808  00797F  20                 	db	32
  2809  007980  2D                 	db	45
  2810  007981  20                 	db	32
  2811  007982  6D                 	db	109	;'m'
  2812  007983  61                 	db	97	;'a'
  2813  007984  73                 	db	115	;'s'
  2814  007985  6B                 	db	107	;'k'
  2815  007986  20                 	db	32
  2816  007987  66                 	db	102	;'f'
  2817  007988  6F                 	db	111	;'o'
  2818  007989  72                 	db	114	;'r'
  2819  00798A  20                 	db	32
  2820  00798B  74                 	db	116	;'t'
  2821  00798C  79                 	db	121	;'y'
  2822  00798D  70                 	db	112	;'p'
  2823  00798E  65                 	db	101	;'e'
  2824  00798F  20                 	db	32
  2825  007990  69                 	db	105	;'i'
  2826  007991  73                 	db	115	;'s'
  2827  007992  20                 	db	32
  2828  007993  6D                 	db	109	;'m'
  2829  007994  69                 	db	105	;'i'
  2830  007995  73                 	db	115	;'s'
  2831  007996  73                 	db	115	;'s'
  2832  007997  69                 	db	105	;'i'
  2833  007998  6E                 	db	110	;'n'
  2834  007999  67                 	db	103	;'g'
  2835  00799A  0D                 	db	13
  2836  00799B  0A                 	db	10
  2837  00799C  00                 	db	0
  2838  00799D                     STR_3:
  2839  00799D  68                 	db	104	;'h'
  2840  00799E  74                 	db	116	;'t'
  2841  00799F  74                 	db	116	;'t'
  2842  0079A0  70                 	db	112	;'p'
  2843  0079A1  3A                 	db	58	;':'
  2844  0079A2  2F                 	db	47
  2845  0079A3  2F                 	db	47
  2846  0079A4  77                 	db	119	;'w'
  2847  0079A5  77                 	db	119	;'w'
  2848  0079A6  77                 	db	119	;'w'
  2849  0079A7  2E                 	db	46
  2850  0079A8  70                 	db	112	;'p'
  2851  0079A9  61                 	db	97	;'a'
  2852  0079AA  72                 	db	114	;'r'
  2853  0079AB  61                 	db	97	;'a'
  2854  0079AC  64                 	db	100	;'d'
  2855  0079AD  69                 	db	105	;'i'
  2856  0079AE  73                 	db	115	;'s'
  2857  0079AF  65                 	db	101	;'e'
  2858  0079B0  6F                 	db	111	;'o'
  2859  0079B1  66                 	db	102	;'f'
  2860  0079B2  74                 	db	116	;'t'
  2861  0079B3  68                 	db	104	;'h'
  2862  0079B4  65                 	db	101	;'e'
  2863  0079B5  66                 	db	102	;'f'
  2864  0079B6  72                 	db	114	;'r'
  2865  0079B7  6F                 	db	111	;'o'
  2866  0079B8  67                 	db	103	;'g'
  2867  0079B9  2E                 	db	46
  2868  0079BA  63                 	db	99	;'c'
  2869  0079BB  6F                 	db	111	;'o'
  2870  0079BC  6D                 	db	109	;'m'
  2871  0079BD  0D                 	db	13
  2872  0079BE  0A                 	db	10
  2873  0079BF  00                 	db	0
  2874  0079C0                     STR_76:
  2875  0079C0  2B                 	db	43
  2876  0079C1  4F                 	db	79	;'O'
  2877  0079C2  4B                 	db	75	;'K'
  2878  0079C3  20                 	db	32
  2879  0079C4  2D                 	db	45
  2880  0079C5  20                 	db	32
  2881  0079C6  56                 	db	86	;'V'
  2882  0079C7  61                 	db	97	;'a'
  2883  0079C8  6C                 	db	108	;'l'
  2884  0079C9  75                 	db	117	;'u'
  2885  0079CA  65                 	db	101	;'e'
  2886  0079CB  20                 	db	32
  2887  0079CC  77                 	db	119	;'w'
  2888  0079CD  72                 	db	114	;'r'
  2889  0079CE  69                 	db	105	;'i'
  2890  0079CF  74                 	db	116	;'t'
  2891  0079D0  74                 	db	116	;'t'
  2892  0079D1  65                 	db	101	;'e'
  2893  0079D2  6E                 	db	110	;'n'
  2894  0079D3  20                 	db	32
  2895  0079D4  73                 	db	115	;'s'
  2896  0079D5  75                 	db	117	;'u'
  2897  0079D6  63                 	db	99	;'c'
  2898  0079D7  63                 	db	99	;'c'
  2899  0079D8  65                 	db	101	;'e'
  2900  0079D9  73                 	db	115	;'s'
  2901  0079DA  73                 	db	115	;'s'
  2902  0079DB  66                 	db	102	;'f'
  2903  0079DC  75                 	db	117	;'u'
  2904  0079DD  6C                 	db	108	;'l'
  2905  0079DE  6C                 	db	108	;'l'
  2906  0079DF  79                 	db	121	;'y'
  2907  0079E0  0D                 	db	13
  2908  0079E1  0A                 	db	10
  2909  0079E2  00                 	db	0
  2910  0079E3                     STR_223:
  2911  0079E3  53                 	db	83	;'S'
  2912  0079E4  45                 	db	69	;'E'
  2913  0079E5  54                 	db	84	;'T'
  2914  0079E6  20                 	db	32
  2915  0079E7  2D                 	db	45
  2916  0079E8  20                 	db	32
  2917  0079E9  50                 	db	80	;'P'
  2918  0079EA  65                 	db	101	;'e'
  2919  0079EB  72                 	db	114	;'r'
  2920  0079EC  73                 	db	115	;'s'
  2921  0079ED  69                 	db	105	;'i'
  2922  0079EE  73                 	db	115	;'s'
  2923  0079EF  74                 	db	116	;'t'
  2924  0079F0  65                 	db	101	;'e'
  2925  0079F1  6E                 	db	110	;'n'
  2926  0079F2  74                 	db	116	;'t'
  2927  0079F3  20                 	db	32
  2928  0079F4  66                 	db	102	;'f'
  2929  0079F5  75                 	db	117	;'u'
  2930  0079F6  6E                 	db	110	;'n'
  2931  0079F7  63                 	db	99	;'c'
  2932  0079F8  74                 	db	116	;'t'
  2933  0079F9  69                 	db	105	;'i'
  2934  0079FA  6F                 	db	111	;'o'
  2935  0079FB  6E                 	db	110	;'n'
  2936  0079FC  61                 	db	97	;'a'
  2937  0079FD  6C                 	db	108	;'l'
  2938  0079FE  69                 	db	105	;'i'
  2939  0079FF  74                 	db	116	;'t'
  2940  007A00  79                 	db	121	;'y'
  2941  007A01  2E                 	db	46
  2942  007A02  0D                 	db	13
  2943  007A03  0A                 	db	10
  2944  007A04  00                 	db	0
  2945  007A05                     STR_61:
  2946  007A05  2D                 	db	45
  2947  007A06  45                 	db	69	;'E'
  2948  007A07  52                 	db	82	;'R'
  2949  007A08  52                 	db	82	;'R'
  2950  007A09  4F                 	db	79	;'O'
  2951  007A0A  52                 	db	82	;'R'
  2952  007A0B  20                 	db	32
  2953  007A0C  2D                 	db	45
  2954  007A0D  20                 	db	32
  2955  007A0E  55                 	db	85	;'U'
  2956  007A0F  6E                 	db	110	;'n'
  2957  007A10  61                 	db	97	;'a'
  2958  007A11  62                 	db	98	;'b'
  2959  007A12  6C                 	db	108	;'l'
  2960  007A13  65                 	db	101	;'e'
  2961  007A14  20                 	db	32
  2962  007A15  74                 	db	116	;'t'
  2963  007A16  6F                 	db	111	;'o'
  2964  007A17  20                 	db	32
  2965  007A18  72                 	db	114	;'r'
  2966  007A19  65                 	db	101	;'e'
  2967  007A1A  61                 	db	97	;'a'
  2968  007A1B  64                 	db	100	;'d'
  2969  007A1C  20                 	db	32
  2970  007A1D  72                 	db	114	;'r'
  2971  007A1E  65                 	db	101	;'e'
  2972  007A1F  67                 	db	103	;'g'
  2973  007A20  69                 	db	105	;'i'
  2974  007A21  73                 	db	115	;'s'
  2975  007A22  74                 	db	116	;'t'
  2976  007A23  65                 	db	101	;'e'
  2977  007A24  72                 	db	114	;'r'
  2978  007A25  20                 	db	32
  2979  007A26  00                 	db	0
  2980  007A27                     STR_212:
  2981  007A27  53                 	db	83	;'S'
  2982  007A28  54                 	db	84	;'T'
  2983  007A29  41                 	db	65	;'A'
  2984  007A2A  54                 	db	84	;'T'
  2985  007A2B  20                 	db	32
  2986  007A2C  2D                 	db	45
  2987  007A2D  20                 	db	32
  2988  007A2E  44                 	db	68	;'D'
  2989  007A2F  69                 	db	105	;'i'
  2990  007A30  73                 	db	115	;'s'
  2991  007A31  70                 	db	112	;'p'
  2992  007A32  6C                 	db	108	;'l'
  2993  007A33  61                 	db	97	;'a'
  2994  007A34  79                 	db	121	;'y'
  2995  007A35  20                 	db	32
  2996  007A36  43                 	db	67	;'C'
  2997  007A37  41                 	db	65	;'A'
  2998  007A38  4E                 	db	78	;'N'
  2999  007A39  20                 	db	32
  3000  007A3A  73                 	db	115	;'s'
  3001  007A3B  74                 	db	116	;'t'
  3002  007A3C  61                 	db	97	;'a'
  3003  007A3D  74                 	db	116	;'t'
  3004  007A3E  69                 	db	105	;'i'
  3005  007A3F  73                 	db	115	;'s'
  3006  007A40  74                 	db	116	;'t'
  3007  007A41  69                 	db	105	;'i'
  3008  007A42  63                 	db	99	;'c'
  3009  007A43  73                 	db	115	;'s'
  3010  007A44  2E                 	db	46
  3011  007A45  0D                 	db	13
  3012  007A46  0A                 	db	10
  3013  007A47  00                 	db	0
  3014  007A48                     STR_37:
  3015  007A48  2D                 	db	45
  3016  007A49  45                 	db	69	;'E'
  3017  007A4A  52                 	db	82	;'R'
  3018  007A4B  52                 	db	82	;'R'
  3019  007A4C  4F                 	db	79	;'O'
  3020  007A4D  52                 	db	82	;'R'
  3021  007A4E  20                 	db	32
  3022  007A4F  2D                 	db	45
  3023  007A50  20                 	db	32
  3024  007A51  46                 	db	70	;'F'
  3025  007A52  61                 	db	97	;'a'
  3026  007A53  69                 	db	105	;'i'
  3027  007A54  6C                 	db	108	;'l'
  3028  007A55  65                 	db	101	;'e'
  3029  007A56  64                 	db	100	;'d'
  3030  007A57  20                 	db	32
  3031  007A58  74                 	db	116	;'t'
  3032  007A59  6F                 	db	111	;'o'
  3033  007A5A  20                 	db	32
  3034  007A5B  73                 	db	115	;'s'
  3035  007A5C  65                 	db	101	;'e'
  3036  007A5D  6E                 	db	110	;'n'
  3037  007A5E  64                 	db	100	;'d'
  3038  007A5F  20                 	db	32
  3039  007A60  65                 	db	101	;'e'
  3040  007A61  76                 	db	118	;'v'
  3041  007A62  65                 	db	101	;'e'
  3042  007A63  6E                 	db	110	;'n'
  3043  007A64  74                 	db	116	;'t'
  3044  007A65  2E                 	db	46
  3045  007A66  0D                 	db	13
  3046  007A67  0A                 	db	10
  3047  007A68  00                 	db	0
  3048  007A69                     STR_123:
  3049  007A69  2D                 	db	45
  3050  007A6A  45                 	db	69	;'E'
  3051  007A6B  52                 	db	82	;'R'
  3052  007A6C  52                 	db	82	;'R'
  3053  007A6D  4F                 	db	79	;'O'
  3054  007A6E  52                 	db	82	;'R'
  3055  007A6F  20                 	db	32
  3056  007A70  2D                 	db	45
  3057  007A71  20                 	db	32
  3058  007A72  55                 	db	85	;'U'
  3059  007A73  6E                 	db	110	;'n'
  3060  007A74  6B                 	db	107	;'k'
  3061  007A75  6E                 	db	110	;'n'
  3062  007A76  6F                 	db	111	;'o'
  3063  007A77  77                 	db	119	;'w'
  3064  007A78  6E                 	db	110	;'n'
  3065  007A79  20                 	db	32
  3066  007A7A  27                 	db	39
  3067  007A7B  53                 	db	83	;'S'
  3068  007A7C  45                 	db	69	;'E'
  3069  007A7D  54                 	db	84	;'T'
  3070  007A7E  27                 	db	39
  3071  007A7F  20                 	db	32
  3072  007A80  63                 	db	99	;'c'
  3073  007A81  6F                 	db	111	;'o'
  3074  007A82  6D                 	db	109	;'m'
  3075  007A83  6D                 	db	109	;'m'
  3076  007A84  61                 	db	97	;'a'
  3077  007A85  6E                 	db	110	;'n'
  3078  007A86  64                 	db	100	;'d'
  3079  007A87  0D                 	db	13
  3080  007A88  0A                 	db	10
  3081  007A89  00                 	db	0
  3082  007A8A                     STR_77:
  3083  007A8A  2D                 	db	45
  3084  007A8B  45                 	db	69	;'E'
  3085  007A8C  52                 	db	82	;'R'
  3086  007A8D  52                 	db	82	;'R'
  3087  007A8E  4F                 	db	79	;'O'
  3088  007A8F  52                 	db	82	;'R'
  3089  007A90  20                 	db	32
  3090  007A91  2D                 	db	45
  3091  007A92  20                 	db	32
  3092  007A93  46                 	db	70	;'F'
  3093  007A94  61                 	db	97	;'a'
  3094  007A95  69                 	db	105	;'i'
  3095  007A96  6C                 	db	108	;'l'
  3096  007A97  65                 	db	101	;'e'
  3097  007A98  64                 	db	100	;'d'
  3098  007A99  20                 	db	32
  3099  007A9A  74                 	db	116	;'t'
  3100  007A9B  6F                 	db	111	;'o'
  3101  007A9C  20                 	db	32
  3102  007A9D  77                 	db	119	;'w'
  3103  007A9E  72                 	db	114	;'r'
  3104  007A9F  69                 	db	105	;'i'
  3105  007AA0  74                 	db	116	;'t'
  3106  007AA1  65                 	db	101	;'e'
  3107  007AA2  20                 	db	32
  3108  007AA3  76                 	db	118	;'v'
  3109  007AA4  61                 	db	97	;'a'
  3110  007AA5  6C                 	db	108	;'l'
  3111  007AA6  75                 	db	117	;'u'
  3112  007AA7  65                 	db	101	;'e'
  3113  007AA8  0D                 	db	13
  3114  007AA9  0A                 	db	10
  3115  007AAA  00                 	db	0
  3116  007AAB                     STR_50:
  3117  007AAB  2D                 	db	45
  3118  007AAC  45                 	db	69	;'E'
  3119  007AAD  52                 	db	82	;'R'
  3120  007AAE  52                 	db	82	;'R'
  3121  007AAF  4F                 	db	79	;'O'
  3122  007AB0  52                 	db	82	;'R'
  3123  007AB1  20                 	db	32
  3124  007AB2  2D                 	db	45
  3125  007AB3  20                 	db	32
  3126  007AB4  4E                 	db	78	;'N'
  3127  007AB5  65                 	db	101	;'e'
  3128  007AB6  65                 	db	101	;'e'
  3129  007AB7  64                 	db	100	;'d'
  3130  007AB8  73                 	db	115	;'s'
  3131  007AB9  20                 	db	32
  3132  007ABA  5B                 	db	91	;'['
  3133  007ABB  70                 	db	112	;'p'
  3134  007ABC  61                 	db	97	;'a'
  3135  007ABD  67                 	db	103	;'g'
  3136  007ABE  65                 	db	101	;'e'
  3137  007ABF  3A                 	db	58	;':'
  3138  007AC0  5D                 	db	93	;']'
  3139  007AC1  72                 	db	114	;'r'
  3140  007AC2  65                 	db	101	;'e'
  3141  007AC3  67                 	db	103	;'g'
  3142  007AC4  69                 	db	105	;'i'
  3143  007AC5  73                 	db	115	;'s'
  3144  007AC6  74                 	db	116	;'t'
  3145  007AC7  65                 	db	101	;'e'
  3146  007AC8  72                 	db	114	;'r'
  3147  007AC9  0D                 	db	13
  3148  007ACA  0A                 	db	10
  3149  007ACB  00                 	db	0
  3150  007ACC                     STR_118:
  3151  007ACC  2B                 	db	43
  3152  007ACD  4F                 	db	79	;'O'
  3153  007ACE  4B                 	db	75	;'K'
  3154  007ACF  20                 	db	32
  3155  007AD0  2D                 	db	45
  3156  007AD1  20                 	db	32
  3157  007AD2  4D                 	db	77	;'M'
  3158  007AD3  6F                 	db	111	;'o'
  3159  007AD4  64                 	db	100	;'d'
  3160  007AD5  65                 	db	101	;'e'
  3161  007AD6  20                 	db	32
  3162  007AD7  69                 	db	105	;'i'
  3163  007AD8  73                 	db	115	;'s'
  3164  007AD9  20                 	db	32
  3165  007ADA  6E                 	db	110	;'n'
  3166  007ADB  6F                 	db	111	;'o'
  3167  007ADC  77                 	db	119	;'w'
  3168  007ADD  20                 	db	32
  3169  007ADE  56                 	db	86	;'V'
  3170  007ADF  53                 	db	83	;'S'
  3171  007AE0  43                 	db	67	;'C'
  3172  007AE1  50                 	db	80	;'P'
  3173  007AE2  20                 	db	32
  3174  007AE3  44                 	db	68	;'D'
  3175  007AE4  72                 	db	114	;'r'
  3176  007AE5  69                 	db	105	;'i'
  3177  007AE6  76                 	db	118	;'v'
  3178  007AE7  65                 	db	101	;'e'
  3179  007AE8  72                 	db	114	;'r'
  3180  007AE9  0D                 	db	13
  3181  007AEA  0A                 	db	10
  3182  007AEB  00                 	db	0
  3183  007AEC                     STR_7:
  3184  007AEC  57                 	db	87	;'W'
  3185  007AED  69                 	db	105	;'i'
  3186  007AEE  6C                 	db	108	;'l'
  3187  007AEF  6C                 	db	108	;'l'
  3188  007AF0  20                 	db	32
  3189  007AF1  65                 	db	101	;'e'
  3190  007AF2  6E                 	db	110	;'n'
  3191  007AF3  74                 	db	116	;'t'
  3192  007AF4  65                 	db	101	;'e'
  3193  007AF5  72                 	db	114	;'r'
  3194  007AF6  20                 	db	32
  3195  007AF7  62                 	db	98	;'b'
  3196  007AF8  6F                 	db	111	;'o'
  3197  007AF9  6F                 	db	111	;'o'
  3198  007AFA  74                 	db	116	;'t'
  3199  007AFB  6C                 	db	108	;'l'
  3200  007AFC  6F                 	db	111	;'o'
  3201  007AFD  61                 	db	97	;'a'
  3202  007AFE  64                 	db	100	;'d'
  3203  007AFF  65                 	db	101	;'e'
  3204  007B00  72                 	db	114	;'r'
  3205  007B01  20                 	db	32
  3206  007B02  6E                 	db	110	;'n'
  3207  007B03  6F                 	db	111	;'o'
  3208  007B04  77                 	db	119	;'w'
  3209  007B05  2E                 	db	46
  3210  007B06  2E                 	db	46
  3211  007B07  2E                 	db	46
  3212  007B08  0D                 	db	13
  3213  007B09  0A                 	db	10
  3214  007B0A  00                 	db	0
  3215  007B0B                     STR_206:
  3216  007B0B  43                 	db	67	;'C'
  3217  007B0C  4C                 	db	76	;'L'
  3218  007B0D  4F                 	db	79	;'O'
  3219  007B0E  53                 	db	83	;'S'
  3220  007B0F  45                 	db	69	;'E'
  3221  007B10  20                 	db	32
  3222  007B11  2D                 	db	45
  3223  007B12  20                 	db	32
  3224  007B13  43                 	db	67	;'C'
  3225  007B14  6C                 	db	108	;'l'
  3226  007B15  6F                 	db	111	;'o'
  3227  007B16  73                 	db	115	;'s'
  3228  007B17  65                 	db	101	;'e'
  3229  007B18  20                 	db	32
  3230  007B19  43                 	db	67	;'C'
  3231  007B1A  41                 	db	65	;'A'
  3232  007B1B  4E                 	db	78	;'N'
  3233  007B1C  20                 	db	32
  3234  007B1D  69                 	db	105	;'i'
  3235  007B1E  6E                 	db	110	;'n'
  3236  007B1F  74                 	db	116	;'t'
  3237  007B20  65                 	db	101	;'e'
  3238  007B21  72                 	db	114	;'r'
  3239  007B22  66                 	db	102	;'f'
  3240  007B23  61                 	db	97	;'a'
  3241  007B24  63                 	db	99	;'c'
  3242  007B25  65                 	db	101	;'e'
  3243  007B26  2E                 	db	46
  3244  007B27  0D                 	db	13
  3245  007B28  0A                 	db	10
  3246  007B29  00                 	db	0
  3247  007B2A                     STR_5:
  3248  007B2A  54                 	db	84	;'T'
  3249  007B2B  65                 	db	101	;'e'
  3250  007B2C  6D                 	db	109	;'m'
  3251  007B2D  70                 	db	112	;'p'
  3252  007B2E  6F                 	db	111	;'o'
  3253  007B2F  72                 	db	114	;'r'
  3254  007B30  61                 	db	97	;'a'
  3255  007B31  72                 	db	114	;'r'
  3256  007B32  79                 	db	121	;'y'
  3257  007B33  20                 	db	32
  3258  007B34  76                 	db	118	;'v'
  3259  007B35  65                 	db	101	;'e'
  3260  007B36  72                 	db	114	;'r'
  3261  007B37  62                 	db	98	;'b'
  3262  007B38  6F                 	db	111	;'o'
  3263  007B39  73                 	db	115	;'s'
  3264  007B3A  65                 	db	101	;'e'
  3265  007B3B  20                 	db	32
  3266  007B3C  6D                 	db	109	;'m'
  3267  007B3D  6F                 	db	111	;'o'
  3268  007B3E  64                 	db	100	;'d'
  3269  007B3F  65                 	db	101	;'e'
  3270  007B40  20                 	db	32
  3271  007B41  73                 	db	115	;'s'
  3272  007B42  65                 	db	101	;'e'
  3273  007B43  74                 	db	116	;'t'
  3274  007B44  0D                 	db	13
  3275  007B45  0A                 	db	10
  3276  007B46  00                 	db	0
  3277  007B47                     STR_116:
  3278  007B47  2B                 	db	43
  3279  007B48  4F                 	db	79	;'O'
  3280  007B49  4B                 	db	75	;'K'
  3281  007B4A  20                 	db	32
  3282  007B4B  2D                 	db	45
  3283  007B4C  20                 	db	32
  3284  007B4D  4D                 	db	77	;'M'
  3285  007B4E  6F                 	db	111	;'o'
  3286  007B4F  64                 	db	100	;'d'
  3287  007B50  65                 	db	101	;'e'
  3288  007B51  20                 	db	32
  3289  007B52  69                 	db	105	;'i'
  3290  007B53  73                 	db	115	;'s'
  3291  007B54  20                 	db	32
  3292  007B55  6E                 	db	110	;'n'
  3293  007B56  6F                 	db	111	;'o'
  3294  007B57  77                 	db	119	;'w'
  3295  007B58  20                 	db	32
  3296  007B59  76                 	db	118	;'v'
  3297  007B5A  65                 	db	101	;'e'
  3298  007B5B  72                 	db	114	;'r'
  3299  007B5C  62                 	db	98	;'b'
  3300  007B5D  6F                 	db	111	;'o'
  3301  007B5E  73                 	db	115	;'s'
  3302  007B5F  65                 	db	101	;'e'
  3303  007B60  0D                 	db	13
  3304  007B61  0A                 	db	10
  3305  007B62  00                 	db	0
  3306  007B63                     STR_201:
  3307  007B63  42                 	db	66	;'B'
  3308  007B64  4F                 	db	79	;'O'
  3309  007B65  4F                 	db	79	;'O'
  3310  007B66  54                 	db	84	;'T'
  3311  007B67  20                 	db	32
  3312  007B68  2D                 	db	45
  3313  007B69  20                 	db	32
  3314  007B6A  45                 	db	69	;'E'
  3315  007B6B  6E                 	db	110	;'n'
  3316  007B6C  74                 	db	116	;'t'
  3317  007B6D  65                 	db	101	;'e'
  3318  007B6E  72                 	db	114	;'r'
  3319  007B6F  20                 	db	32
  3320  007B70  62                 	db	98	;'b'
  3321  007B71  6F                 	db	111	;'o'
  3322  007B72  6F                 	db	111	;'o'
  3323  007B73  74                 	db	116	;'t'
  3324  007B74  6C                 	db	108	;'l'
  3325  007B75  6F                 	db	111	;'o'
  3326  007B76  61                 	db	97	;'a'
  3327  007B77  64                 	db	100	;'d'
  3328  007B78  65                 	db	101	;'e'
  3329  007B79  72                 	db	114	;'r'
  3330  007B7A  2E                 	db	46
  3331  007B7B  0D                 	db	13
  3332  007B7C  0A                 	db	10
  3333  007B7D  00                 	db	0
  3334  007B7E                     STR_125:
  3335  007B7E  2D                 	db	45
  3336  007B7F  45                 	db	69	;'E'
  3337  007B80  52                 	db	82	;'R'
  3338  007B81  52                 	db	82	;'R'
  3339  007B82  4F                 	db	79	;'O'
  3340  007B83  52                 	db	82	;'R'
  3341  007B84  20                 	db	32
  3342  007B85  2D                 	db	45
  3343  007B86  20                 	db	32
  3344  007B87  55                 	db	85	;'U'
  3345  007B88  6E                 	db	110	;'n'
  3346  007B89  6B                 	db	107	;'k'
  3347  007B8A  6E                 	db	110	;'n'
  3348  007B8B  6F                 	db	111	;'o'
  3349  007B8C  77                 	db	119	;'w'
  3350  007B8D  6E                 	db	110	;'n'
  3351  007B8E  20                 	db	32
  3352  007B8F  63                 	db	99	;'c'
  3353  007B90  6F                 	db	111	;'o'
  3354  007B91  6D                 	db	109	;'m'
  3355  007B92  6D                 	db	109	;'m'
  3356  007B93  61                 	db	97	;'a'
  3357  007B94  6E                 	db	110	;'n'
  3358  007B95  64                 	db	100	;'d'
  3359  007B96  0D                 	db	13
  3360  007B97  0A                 	db	10
  3361  007B98  00                 	db	0
  3362  007B99                     STR_232:
  3363  007B99  4E                 	db	78	;'N'
  3364  007B9A  6F                 	db	111	;'o'
  3365  007B9B  64                 	db	100	;'d'
  3366  007B9C  65                 	db	101	;'e'
  3367  007B9D  20                 	db	32
  3368  007B9E  66                 	db	102	;'f'
  3369  007B9F  6F                 	db	111	;'o'
  3370  007BA0  75                 	db	117	;'u'
  3371  007BA1  6E                 	db	110	;'n'
  3372  007BA2  64                 	db	100	;'d'
  3373  007BA3  20                 	db	32
  3374  007BA4  77                 	db	119	;'w'
  3375  007BA5  69                 	db	105	;'i'
  3376  007BA6  74                 	db	116	;'t'
  3377  007BA7  68                 	db	104	;'h'
  3378  007BA8  20                 	db	32
  3379  007BA9  6E                 	db	110	;'n'
  3380  007BAA  6F                 	db	111	;'o'
  3381  007BAB  64                 	db	100	;'d'
  3382  007BAC  65                 	db	101	;'e'
  3383  007BAD  20                 	db	32
  3384  007BAE  69                 	db	105	;'i'
  3385  007BAF  64                 	db	100	;'d'
  3386  007BB0  20                 	db	32
  3387  007BB1  3D                 	db	61	;'='
  3388  007BB2  20                 	db	32
  3389  007BB3  00                 	db	0
  3390  007BB4                     STR_120:
  3391  007BB4  2B                 	db	43
  3392  007BB5  4F                 	db	79	;'O'
  3393  007BB6  4B                 	db	75	;'K'
  3394  007BB7  20                 	db	32
  3395  007BB8  2D                 	db	45
  3396  007BB9  20                 	db	32
  3397  007BBA  4D                 	db	77	;'M'
  3398  007BBB  6F                 	db	111	;'o'
  3399  007BBC  64                 	db	100	;'d'
  3400  007BBD  65                 	db	101	;'e'
  3401  007BBE  20                 	db	32
  3402  007BBF  69                 	db	105	;'i'
  3403  007BC0  73                 	db	115	;'s'
  3404  007BC1  20                 	db	32
  3405  007BC2  6E                 	db	110	;'n'
  3406  007BC3  6F                 	db	111	;'o'
  3407  007BC4  77                 	db	119	;'w'
  3408  007BC5  20                 	db	32
  3409  007BC6  53                 	db	83	;'S'
  3410  007BC7  4C                 	db	76	;'L'
  3411  007BC8  43                 	db	67	;'C'
  3412  007BC9  41                 	db	65	;'A'
  3413  007BCA  4E                 	db	78	;'N'
  3414  007BCB  0D                 	db	13
  3415  007BCC  0A                 	db	10
  3416  007BCD  00                 	db	0
  3417  007BCE                     STR_25:
  3418  007BCE  2B                 	db	43
  3419  007BCF  4F                 	db	79	;'O'
  3420  007BD0  4B                 	db	75	;'K'
  3421  007BD1  20                 	db	32
  3422  007BD2  2D                 	db	45
  3423  007BD3  20                 	db	32
  3424  007BD4  4C                 	db	76	;'L'
  3425  007BD5  69                 	db	105	;'i'
  3426  007BD6  73                 	db	115	;'s'
  3427  007BD7  74                 	db	116	;'t'
  3428  007BD8  65                 	db	101	;'e'
  3429  007BD9  6E                 	db	110	;'n'
  3430  007BDA  20                 	db	32
  3431  007BDB  6F                 	db	111	;'o'
  3432  007BDC  6E                 	db	110	;'n'
  3433  007BDD  6C                 	db	108	;'l'
  3434  007BDE  79                 	db	121	;'y'
  3435  007BDF  20                 	db	32
  3436  007BE0  6D                 	db	109	;'m'
  3437  007BE1  6F                 	db	111	;'o'
  3438  007BE2  64                 	db	100	;'d'
  3439  007BE3  65                 	db	101	;'e'
  3440  007BE4  0D                 	db	13
  3441  007BE5  0A                 	db	10
  3442  007BE6  00                 	db	0
  3443  007BE7                     STR_185:
  3444  007BE7  54                 	db	84	;'T'
  3445  007BE8  72                 	db	114	;'r'
  3446  007BE9  61                 	db	97	;'a'
  3447  007BEA  6E                 	db	110	;'n'
  3448  007BEB  73                 	db	115	;'s'
  3449  007BEC  6D                 	db	109	;'m'
  3450  007BED  69                 	db	105	;'i'
  3451  007BEE  74                 	db	116	;'t'
  3452  007BEF  20                 	db	32
  3453  007BF0  45                 	db	69	;'E'
  3454  007BF1  72                 	db	114	;'r'
  3455  007BF2  72                 	db	114	;'r'
  3456  007BF3  6F                 	db	111	;'o'
  3457  007BF4  72                 	db	114	;'r'
  3458  007BF5  20                 	db	32
  3459  007BF6  43                 	db	67	;'C'
  3460  007BF7  6F                 	db	111	;'o'
  3461  007BF8  75                 	db	117	;'u'
  3462  007BF9  6E                 	db	110	;'n'
  3463  007BFA  74                 	db	116	;'t'
  3464  007BFB  65                 	db	101	;'e'
  3465  007BFC  72                 	db	114	;'r'
  3466  007BFD  3A                 	db	58	;':'
  3467  007BFE  20                 	db	32
  3468  007BFF  00                 	db	0
  3469  007C00                     STR_209:
  3470  007C00  54                 	db	84	;'T'
  3471  007C01  58                 	db	88	;'X'
  3472  007C02  20                 	db	32
  3473  007C03  2D                 	db	45
  3474  007C04  20                 	db	32
  3475  007C05  53                 	db	83	;'S'
  3476  007C06  65                 	db	101	;'e'
  3477  007C07  6E                 	db	110	;'n'
  3478  007C08  64                 	db	100	;'d'
  3479  007C09  20                 	db	32
  3480  007C0A  43                 	db	67	;'C'
  3481  007C0B  41                 	db	65	;'A'
  3482  007C0C  4E                 	db	78	;'N'
  3483  007C0D  20                 	db	32
  3484  007C0E  66                 	db	102	;'f'
  3485  007C0F  72                 	db	114	;'r'
  3486  007C10  61                 	db	97	;'a'
  3487  007C11  6D                 	db	109	;'m'
  3488  007C12  65                 	db	101	;'e'
  3489  007C13  20                 	db	32
  3490  007C14  2E                 	db	46
  3491  007C15  0D                 	db	13
  3492  007C16  0A                 	db	10
  3493  007C17  00                 	db	0
  3494  007C18                     STR_219:
  3495  007C18  46                 	db	70	;'F'
  3496  007C19  49                 	db	73	;'I'
  3497  007C1A  4C                 	db	76	;'L'
  3498  007C1B  54                 	db	84	;'T'
  3499  007C1C  45                 	db	69	;'E'
  3500  007C1D  52                 	db	82	;'R'
  3501  007C1E  20                 	db	32
  3502  007C1F  2D                 	db	45
  3503  007C20  20                 	db	32
  3504  007C21  53                 	db	83	;'S'
  3505  007C22  65                 	db	101	;'e'
  3506  007C23  74                 	db	116	;'t'
  3507  007C24  20                 	db	32
  3508  007C25  66                 	db	102	;'f'
  3509  007C26  69                 	db	105	;'i'
  3510  007C27  6C                 	db	108	;'l'
  3511  007C28  74                 	db	116	;'t'
  3512  007C29  65                 	db	101	;'e'
  3513  007C2A  72                 	db	114	;'r'
  3514  007C2B  20                 	db	32
  3515  007C2C  2E                 	db	46
  3516  007C2D  0D                 	db	13
  3517  007C2E  0A                 	db	10
  3518  007C2F  00                 	db	0
  3519  007C30                     STR_48:
  3520  007C30  2D                 	db	45
  3521  007C31  45                 	db	69	;'E'
  3522  007C32  52                 	db	82	;'R'
  3523  007C33  52                 	db	82	;'R'
  3524  007C34  4F                 	db	79	;'O'
  3525  007C35  52                 	db	82	;'R'
  3526  007C36  20                 	db	32
  3527  007C37  2D                 	db	45
  3528  007C38  20                 	db	32
  3529  007C39  4E                 	db	78	;'N'
  3530  007C3A  65                 	db	101	;'e'
  3531  007C3B  65                 	db	101	;'e'
  3532  007C3C  64                 	db	100	;'d'
  3533  007C3D  73                 	db	115	;'s'
  3534  007C3E  20                 	db	32
  3535  007C3F  6E                 	db	110	;'n'
  3536  007C40  6F                 	db	111	;'o'
  3537  007C41  64                 	db	100	;'d'
  3538  007C42  65                 	db	101	;'e'
  3539  007C43  69                 	db	105	;'i'
  3540  007C44  64                 	db	100	;'d'
  3541  007C45  0D                 	db	13
  3542  007C46  0A                 	db	10
  3543  007C47  00                 	db	0
  3544  007C48                     STR_28:
  3545  007C48  2D                 	db	45
  3546  007C49  45                 	db	69	;'E'
  3547  007C4A  52                 	db	82	;'R'
  3548  007C4B  52                 	db	82	;'R'
  3549  007C4C  4F                 	db	79	;'O'
  3550  007C4D  52                 	db	82	;'R'
  3551  007C4E  20                 	db	32
  3552  007C4F  2D                 	db	45
  3553  007C50  20                 	db	32
  3554  007C51  55                 	db	85	;'U'
  3555  007C52  6E                 	db	110	;'n'
  3556  007C53  6B                 	db	107	;'k'
  3557  007C54  6E                 	db	110	;'n'
  3558  007C55  6F                 	db	111	;'o'
  3559  007C56  77                 	db	119	;'w'
  3560  007C57  6E                 	db	110	;'n'
  3561  007C58  20                 	db	32
  3562  007C59  6D                 	db	109	;'m'
  3563  007C5A  6F                 	db	111	;'o'
  3564  007C5B  64                 	db	100	;'d'
  3565  007C5C  65                 	db	101	;'e'
  3566  007C5D  0D                 	db	13
  3567  007C5E  0A                 	db	10
  3568  007C5F  00                 	db	0
  3569  007C60                     STR_75:
  3570  007C60  2D                 	db	45
  3571  007C61  45                 	db	69	;'E'
  3572  007C62  52                 	db	82	;'R'
  3573  007C63  52                 	db	82	;'R'
  3574  007C64  4F                 	db	79	;'O'
  3575  007C65  52                 	db	82	;'R'
  3576  007C66  20                 	db	32
  3577  007C67  2D                 	db	45
  3578  007C68  20                 	db	32
  3579  007C69  4E                 	db	78	;'N'
  3580  007C6A  65                 	db	101	;'e'
  3581  007C6B  65                 	db	101	;'e'
  3582  007C6C  64                 	db	100	;'d'
  3583  007C6D  20                 	db	32
  3584  007C6E  61                 	db	97	;'a'
  3585  007C6F  20                 	db	32
  3586  007C70  76                 	db	118	;'v'
  3587  007C71  61                 	db	97	;'a'
  3588  007C72  6C                 	db	108	;'l'
  3589  007C73  75                 	db	117	;'u'
  3590  007C74  65                 	db	101	;'e'
  3591  007C75  0D                 	db	13
  3592  007C76  0A                 	db	10
  3593  007C77  00                 	db	0
  3594  007C78                     STR_192:
  3595  007C78  52                 	db	82	;'R'
  3596  007C79  65                 	db	101	;'e'
  3597  007C7A  63                 	db	99	;'c'
  3598  007C7B  65                 	db	101	;'e'
  3599  007C7C  69                 	db	105	;'i'
  3600  007C7D  76                 	db	118	;'v'
  3601  007C7E  65                 	db	101	;'e'
  3602  007C7F  20                 	db	32
  3603  007C80  45                 	db	69	;'E'
  3604  007C81  72                 	db	114	;'r'
  3605  007C82  72                 	db	114	;'r'
  3606  007C83  6F                 	db	111	;'o'
  3607  007C84  72                 	db	114	;'r'
  3608  007C85  20                 	db	32
  3609  007C86  43                 	db	67	;'C'
  3610  007C87  6F                 	db	111	;'o'
  3611  007C88  75                 	db	117	;'u'
  3612  007C89  6E                 	db	110	;'n'
  3613  007C8A  74                 	db	116	;'t'
  3614  007C8B  65                 	db	101	;'e'
  3615  007C8C  72                 	db	114	;'r'
  3616  007C8D  3A                 	db	58	;':'
  3617  007C8E  20                 	db	32
  3618  007C8F  00                 	db	0
  3619  007C90                     STR_177:
  3620  007C90  55                 	db	85	;'U'
  3621  007C91  41                 	db	65	;'A'
  3622  007C92  52                 	db	82	;'R'
  3623  007C93  54                 	db	84	;'T'
  3624  007C94  20                 	db	32
  3625  007C95  52                 	db	82	;'R'
  3626  007C96  65                 	db	101	;'e'
  3627  007C97  63                 	db	99	;'c'
  3628  007C98  65                 	db	101	;'e'
  3629  007C99  69                 	db	105	;'i'
  3630  007C9A  76                 	db	118	;'v'
  3631  007C9B  65                 	db	101	;'e'
  3632  007C9C  20                 	db	32
  3633  007C9D  6F                 	db	111	;'o'
  3634  007C9E  76                 	db	118	;'v'
  3635  007C9F  65                 	db	101	;'e'
  3636  007CA0  72                 	db	114	;'r'
  3637  007CA1  72                 	db	114	;'r'
  3638  007CA2  75                 	db	117	;'u'
  3639  007CA3  6E                 	db	110	;'n'
  3640  007CA4  73                 	db	115	;'s'
  3641  007CA5  3A                 	db	58	;':'
  3642  007CA6  20                 	db	32
  3643  007CA7  00                 	db	0
  3644  007CA8                     STR_173:
  3645  007CA8  43                 	db	67	;'C'
  3646  007CA9  41                 	db	65	;'A'
  3647  007CAA  4E                 	db	78	;'N'
  3648  007CAB  20                 	db	32
  3649  007CAC  54                 	db	84	;'T'
  3650  007CAD  72                 	db	114	;'r'
  3651  007CAE  61                 	db	97	;'a'
  3652  007CAF  6E                 	db	110	;'n'
  3653  007CB0  73                 	db	115	;'s'
  3654  007CB1  6D                 	db	109	;'m'
  3655  007CB2  69                 	db	105	;'i'
  3656  007CB3  74                 	db	116	;'t'
  3657  007CB4  20                 	db	32
  3658  007CB5  6F                 	db	111	;'o'
  3659  007CB6  76                 	db	118	;'v'
  3660  007CB7  65                 	db	101	;'e'
  3661  007CB8  72                 	db	114	;'r'
  3662  007CB9  72                 	db	114	;'r'
  3663  007CBA  75                 	db	117	;'u'
  3664  007CBB  6E                 	db	110	;'n'
  3665  007CBC  73                 	db	115	;'s'
  3666  007CBD  3A                 	db	58	;':'
  3667  007CBE  20                 	db	32
  3668  007CBF  00                 	db	0
  3669  007CC0                     STR_211:
  3670  007CC0  52                 	db	82	;'R'
  3671  007CC1  58                 	db	88	;'X'
  3672  007CC2  20                 	db	32
  3673  007CC3  2D                 	db	45
  3674  007CC4  20                 	db	32
  3675  007CC5  52                 	db	82	;'R'
  3676  007CC6  65                 	db	101	;'e'
  3677  007CC7  61                 	db	97	;'a'
  3678  007CC8  64                 	db	100	;'d'
  3679  007CC9  20                 	db	32
  3680  007CCA  43                 	db	67	;'C'
  3681  007CCB  41                 	db	65	;'A'
  3682  007CCC  4E                 	db	78	;'N'
  3683  007CCD  20                 	db	32
  3684  007CCE  66                 	db	102	;'f'
  3685  007CCF  72                 	db	114	;'r'
  3686  007CD0  61                 	db	97	;'a'
  3687  007CD1  6D                 	db	109	;'m'
  3688  007CD2  65                 	db	101	;'e'
  3689  007CD3  2E                 	db	46
  3690  007CD4  0D                 	db	13
  3691  007CD5  0A                 	db	10
  3692  007CD6  00                 	db	0
  3693  007CD7                     STR_169:
  3694  007CD7  43                 	db	67	;'C'
  3695  007CD8  41                 	db	65	;'A'
  3696  007CD9  4E                 	db	78	;'N'
  3697  007CDA  20                 	db	32
  3698  007CDB  52                 	db	82	;'R'
  3699  007CDC  65                 	db	101	;'e'
  3700  007CDD  63                 	db	99	;'c'
  3701  007CDE  65                 	db	101	;'e'
  3702  007CDF  69                 	db	105	;'i'
  3703  007CE0  76                 	db	118	;'v'
  3704  007CE1  65                 	db	101	;'e'
  3705  007CE2  20                 	db	32
  3706  007CE3  6F                 	db	111	;'o'
  3707  007CE4  76                 	db	118	;'v'
  3708  007CE5  65                 	db	101	;'e'
  3709  007CE6  72                 	db	114	;'r'
  3710  007CE7  72                 	db	114	;'r'
  3711  007CE8  75                 	db	117	;'u'
  3712  007CE9  6E                 	db	110	;'n'
  3713  007CEA  73                 	db	115	;'s'
  3714  007CEB  3A                 	db	58	;':'
  3715  007CEC  20                 	db	32
  3716  007CED  00                 	db	0
  3717  007CEE                     STR_254:
  3718  007CEE  55                 	db	85	;'U'
  3719  007CEF  6E                 	db	110	;'n'
  3720  007CF0  6B                 	db	107	;'k'
  3721  007CF1  6E                 	db	110	;'n'
  3722  007CF2  6F                 	db	111	;'o'
  3723  007CF3  77                 	db	119	;'w'
  3724  007CF4  6E                 	db	110	;'n'
  3725  007CF5  20                 	db	32
  3726  007CF6  28                 	db	40
  3727  007CF7  56                 	db	86	;'V'
  3728  007CF8  65                 	db	101	;'e'
  3729  007CF9  72                 	db	114	;'r'
  3730  007CFA  62                 	db	98	;'b'
  3731  007CFB  6F                 	db	111	;'o'
  3732  007CFC  73                 	db	115	;'s'
  3733  007CFD  65                 	db	101	;'e'
  3734  007CFE  20                 	db	32
  3735  007CFF  75                 	db	117	;'u'
  3736  007D00  73                 	db	115	;'s'
  3737  007D01  65                 	db	101	;'e'
  3738  007D02  64                 	db	100	;'d'
  3739  007D03  29                 	db	41
  3740  007D04  00                 	db	0
  3741  007D05                     STR_24:
  3742  007D05  2B                 	db	43
  3743  007D06  4F                 	db	79	;'O'
  3744  007D07  4B                 	db	75	;'K'
  3745  007D08  20                 	db	32
  3746  007D09  2D                 	db	45
  3747  007D0A  20                 	db	32
  3748  007D0B  4C                 	db	76	;'L'
  3749  007D0C  6F                 	db	111	;'o'
  3750  007D0D  6F                 	db	111	;'o'
  3751  007D0E  70                 	db	112	;'p'
  3752  007D0F  62                 	db	98	;'b'
  3753  007D10  61                 	db	97	;'a'
  3754  007D11  63                 	db	99	;'c'
  3755  007D12  6B                 	db	107	;'k'
  3756  007D13  20                 	db	32
  3757  007D14  6D                 	db	109	;'m'
  3758  007D15  6F                 	db	111	;'o'
  3759  007D16  64                 	db	100	;'d'
  3760  007D17  65                 	db	101	;'e'
  3761  007D18  0D                 	db	13
  3762  007D19  0A                 	db	10
  3763  007D1A  00                 	db	0
  3764  007D1B                     STR_161:
  3765  007D1B  52                 	db	82	;'R'
  3766  007D1C  65                 	db	101	;'e'
  3767  007D1D  63                 	db	99	;'c'
  3768  007D1E  65                 	db	101	;'e'
  3769  007D1F  69                 	db	105	;'i'
  3770  007D20  76                 	db	118	;'v'
  3771  007D21  65                 	db	101	;'e'
  3772  007D22  64                 	db	100	;'d'
  3773  007D23  20                 	db	32
  3774  007D24  43                 	db	67	;'C'
  3775  007D25  41                 	db	65	;'A'
  3776  007D26  4E                 	db	78	;'N'
  3777  007D27  20                 	db	32
  3778  007D28  66                 	db	102	;'f'
  3779  007D29  72                 	db	114	;'r'
  3780  007D2A  61                 	db	97	;'a'
  3781  007D2B  6D                 	db	109	;'m'
  3782  007D2C  65                 	db	101	;'e'
  3783  007D2D  73                 	db	115	;'s'
  3784  007D2E  3A                 	db	58	;':'
  3785  007D2F  20                 	db	32
  3786  007D30  00                 	db	0
  3787  007D31                     STR_165:
  3788  007D31  52                 	db	82	;'R'
  3789  007D32  65                 	db	101	;'e'
  3790  007D33  63                 	db	99	;'c'
  3791  007D34  65                 	db	101	;'e'
  3792  007D35  69                 	db	105	;'i'
  3793  007D36  76                 	db	118	;'v'
  3794  007D37  65                 	db	101	;'e'
  3795  007D38  64                 	db	100	;'d'
  3796  007D39  20                 	db	32
  3797  007D3A  43                 	db	67	;'C'
  3798  007D3B  41                 	db	65	;'A'
  3799  007D3C  4E                 	db	78	;'N'
  3800  007D3D  20                 	db	32
  3801  007D3E  62                 	db	98	;'b'
  3802  007D3F  79                 	db	121	;'y'
  3803  007D40  74                 	db	116	;'t'
  3804  007D41  65                 	db	101	;'e'
  3805  007D42  73                 	db	115	;'s'
  3806  007D43  3A                 	db	58	;':'
  3807  007D44  20                 	db	32
  3808  007D45  00                 	db	0
  3809  007D46                     STR_221:
  3810  007D46  4D                 	db	77	;'M'
  3811  007D47  41                 	db	65	;'A'
  3812  007D48  53                 	db	83	;'S'
  3813  007D49  4B                 	db	75	;'K'
  3814  007D4A  20                 	db	32
  3815  007D4B  2D                 	db	45
  3816  007D4C  20                 	db	32
  3817  007D4D  53                 	db	83	;'S'
  3818  007D4E  65                 	db	101	;'e'
  3819  007D4F  74                 	db	116	;'t'
  3820  007D50  20                 	db	32
  3821  007D51  6D                 	db	109	;'m'
  3822  007D52  61                 	db	97	;'a'
  3823  007D53  73                 	db	115	;'s'
  3824  007D54  6B                 	db	107	;'k'
  3825  007D55  20                 	db	32
  3826  007D56  2E                 	db	46
  3827  007D57  0D                 	db	13
  3828  007D58  0A                 	db	10
  3829  007D59  00                 	db	0
  3830  007D5A                     STR_126:
  3831  007D5A  4A                 	db	74	;'J'
  3832  007D5B  46                 	db	70	;'F'
  3833  007D5C  72                 	db	114	;'r'
  3834  007D5D  61                 	db	97	;'a'
  3835  007D5E  6E                 	db	110	;'n'
  3836  007D5F  6B                 	db	107	;'k'
  3837  007D60  66                 	db	102	;'f'
  3838  007D61  75                 	db	117	;'u'
  3839  007D62  72                 	db	114	;'r'
  3840  007D63  74                 	db	116	;'t'
  3841  007D64  20                 	db	32
  3842  007D65  52                 	db	82	;'R'
  3843  007D66  53                 	db	83	;'S'
  3844  007D67  2D                 	db	45
  3845  007D68  32                 	db	50	;'2'
  3846  007D69  33                 	db	51	;'3'
  3847  007D6A  32                 	db	50	;'2'
  3848  007D6B  0D                 	db	13
  3849  007D6C  0A                 	db	10
  3850  007D6D  00                 	db	0
  3851  007D6E                     STR_26:
  3852  007D6E  2B                 	db	43
  3853  007D6F  4F                 	db	79	;'O'
  3854  007D70  4B                 	db	75	;'K'
  3855  007D71  20                 	db	32
  3856  007D72  2D                 	db	45
  3857  007D73  20                 	db	32
  3858  007D74  43                 	db	67	;'C'
  3859  007D75  6C                 	db	108	;'l'
  3860  007D76  6F                 	db	111	;'o'
  3861  007D77  73                 	db	115	;'s'
  3862  007D78  65                 	db	101	;'e'
  3863  007D79  64                 	db	100	;'d'
  3864  007D7A  20                 	db	32
  3865  007D7B  6D                 	db	109	;'m'
  3866  007D7C  6F                 	db	111	;'o'
  3867  007D7D  64                 	db	100	;'d'
  3868  007D7E  65                 	db	101	;'e'
  3869  007D7F  0D                 	db	13
  3870  007D80  0A                 	db	10
  3871  007D81  00                 	db	0
  3872  007D82                     STR_21:
  3873  007D82  2B                 	db	43
  3874  007D83  4F                 	db	79	;'O'
  3875  007D84  4B                 	db	75	;'K'
  3876  007D85  20                 	db	32
  3877  007D86  2D                 	db	45
  3878  007D87  20                 	db	32
  3879  007D88  4E                 	db	78	;'N'
  3880  007D89  6F                 	db	111	;'o'
  3881  007D8A  72                 	db	114	;'r'
  3882  007D8B  6D                 	db	109	;'m'
  3883  007D8C  61                 	db	97	;'a'
  3884  007D8D  6C                 	db	108	;'l'
  3885  007D8E  20                 	db	32
  3886  007D8F  6D                 	db	109	;'m'
  3887  007D90  6F                 	db	111	;'o'
  3888  007D91  64                 	db	100	;'d'
  3889  007D92  65                 	db	101	;'e'
  3890  007D93  0D                 	db	13
  3891  007D94  0A                 	db	10
  3892  007D95  00                 	db	0
  3893  007D96                     STR_22:
  3894  007D96  2B                 	db	43
  3895  007D97  4F                 	db	79	;'O'
  3896  007D98  4B                 	db	75	;'K'
  3897  007D99  20                 	db	32
  3898  007D9A  2D                 	db	45
  3899  007D9B  20                 	db	32
  3900  007D9C  53                 	db	83	;'S'
  3901  007D9D  69                 	db	105	;'i'
  3902  007D9E  6C                 	db	108	;'l'
  3903  007D9F  65                 	db	101	;'e'
  3904  007DA0  6E                 	db	110	;'n'
  3905  007DA1  74                 	db	116	;'t'
  3906  007DA2  20                 	db	32
  3907  007DA3  6D                 	db	109	;'m'
  3908  007DA4  6F                 	db	111	;'o'
  3909  007DA5  64                 	db	100	;'d'
  3910  007DA6  65                 	db	101	;'e'
  3911  007DA7  0D                 	db	13
  3912  007DA8  0A                 	db	10
  3913  007DA9  00                 	db	0
  3914  007DAA                     STR_79:
  3915  007DAA  49                 	db	73	;'I'
  3916  007DAB  6E                 	db	110	;'n'
  3917  007DAC  66                 	db	102	;'f'
  3918  007DAD  6F                 	db	111	;'o'
  3919  007DAE  20                 	db	32
  3920  007DAF  66                 	db	102	;'f'
  3921  007DB0  6F                 	db	111	;'o'
  3922  007DB1  72                 	db	114	;'r'
  3923  007DB2  20                 	db	32
  3924  007DB3  6E                 	db	110	;'n'
  3925  007DB4  6F                 	db	111	;'o'
  3926  007DB5  64                 	db	100	;'d'
  3927  007DB6  65                 	db	101	;'e'
  3928  007DB7  20                 	db	32
  3929  007DB8  69                 	db	105	;'i'
  3930  007DB9  64                 	db	100	;'d'
  3931  007DBA  20                 	db	32
  3932  007DBB  3D                 	db	61	;'='
  3933  007DBC  20                 	db	32
  3934  007DBD  00                 	db	0
  3935  007DBE                     STR_243:
  3936  007DBE  46                 	db	70	;'F'
  3937  007DBF  69                 	db	105	;'i'
  3938  007DC0  72                 	db	114	;'r'
  3939  007DC1  6D                 	db	109	;'m'
  3940  007DC2  77                 	db	119	;'w'
  3941  007DC3  61                 	db	97	;'a'
  3942  007DC4  72                 	db	114	;'r'
  3943  007DC5  65                 	db	101	;'e'
  3944  007DC6  20                 	db	32
  3945  007DC7  76                 	db	118	;'v'
  3946  007DC8  65                 	db	101	;'e'
  3947  007DC9  72                 	db	114	;'r'
  3948  007DCA  73                 	db	115	;'s'
  3949  007DCB  69                 	db	105	;'i'
  3950  007DCC  6F                 	db	111	;'o'
  3951  007DCD  6E                 	db	110	;'n'
  3952  007DCE  20                 	db	32
  3953  007DCF  3D                 	db	61	;'='
  3954  007DD0  20                 	db	32
  3955  007DD1  00                 	db	0
  3956  007DD2                     STR_23:
  3957  007DD2  2B                 	db	43
  3958  007DD3  4F                 	db	79	;'O'
  3959  007DD4  4B                 	db	75	;'K'
  3960  007DD5  20                 	db	32
  3961  007DD6  2D                 	db	45
  3962  007DD7  20                 	db	32
  3963  007DD8  53                 	db	83	;'S'
  3964  007DD9  6C                 	db	108	;'l'
  3965  007DDA  65                 	db	101	;'e'
  3966  007DDB  65                 	db	101	;'e'
  3967  007DDC  70                 	db	112	;'p'
  3968  007DDD  20                 	db	32
  3969  007DDE  6D                 	db	109	;'m'
  3970  007DDF  6F                 	db	111	;'o'
  3971  007DE0  64                 	db	100	;'d'
  3972  007DE1  65                 	db	101	;'e'
  3973  007DE2  0D                 	db	13
  3974  007DE3  0A                 	db	10
  3975  007DE4  00                 	db	0
  3976  007DE5                     STR_27:
  3977  007DE5  2B                 	db	43
  3978  007DE6  4F                 	db	79	;'O'
  3979  007DE7  4B                 	db	75	;'K'
  3980  007DE8  20                 	db	32
  3981  007DE9  2D                 	db	45
  3982  007DEA  20                 	db	32
  3983  007DEB  42                 	db	66	;'B'
  3984  007DEC  69                 	db	105	;'i'
  3985  007DED  74                 	db	116	;'t'
  3986  007DEE  73                 	db	115	;'s'
  3987  007DEF  20                 	db	32
  3988  007DF0  6D                 	db	109	;'m'
  3989  007DF1  6F                 	db	111	;'o'
  3990  007DF2  64                 	db	100	;'d'
  3991  007DF3  65                 	db	101	;'e'
  3992  007DF4  0D                 	db	13
  3993  007DF5  0A                 	db	10
  3994  007DF6  00                 	db	0
  3995  007DF7                     STR_40:
  3996  007DF7  2B                 	db	43
  3997  007DF8  4F                 	db	79	;'O'
  3998  007DF9  4B                 	db	75	;'K'
  3999  007DFA  20                 	db	32
  4000  007DFB  2D                 	db	45
  4001  007DFC  20                 	db	32
  4002  007DFD  6E                 	db	110	;'n'
  4003  007DFE  6F                 	db	111	;'o'
  4004  007DFF  20                 	db	32
  4005  007E00  65                 	db	101	;'e'
  4006  007E01  76                 	db	118	;'v'
  4007  007E02  65                 	db	101	;'e'
  4008  007E03  6E                 	db	110	;'n'
  4009  007E04  74                 	db	116	;'t'
  4010  007E05  73                 	db	115	;'s'
  4011  007E06  0D                 	db	13
  4012  007E07  0A                 	db	10
  4013  007E08  00                 	db	0
  4014  007E09                     STR_153:
  4015  007E09  53                 	db	83	;'S'
  4016  007E0A  65                 	db	101	;'e'
  4017  007E0B  6E                 	db	110	;'n'
  4018  007E0C  74                 	db	116	;'t'
  4019  007E0D  20                 	db	32
  4020  007E0E  43                 	db	67	;'C'
  4021  007E0F  41                 	db	65	;'A'
  4022  007E10  4E                 	db	78	;'N'
  4023  007E11  20                 	db	32
  4024  007E12  66                 	db	102	;'f'
  4025  007E13  72                 	db	114	;'r'
  4026  007E14  61                 	db	97	;'a'
  4027  007E15  6D                 	db	109	;'m'
  4028  007E16  65                 	db	101	;'e'
  4029  007E17  73                 	db	115	;'s'
  4030  007E18  3A                 	db	58	;':'
  4031  007E19  20                 	db	32
  4032  007E1A  00                 	db	0
  4033  007E1B                     STR_256:
  4034  007E1B  30                 	db	48	;'0'
  4035  007E1C  31                 	db	49	;'1'
  4036  007E1D  32                 	db	50	;'2'
  4037  007E1E  33                 	db	51	;'3'
  4038  007E1F  34                 	db	52	;'4'
  4039  007E20  35                 	db	53	;'5'
  4040  007E21  36                 	db	54	;'6'
  4041  007E22  37                 	db	55	;'7'
  4042  007E23  38                 	db	56	;'8'
  4043  007E24  39                 	db	57	;'9'
  4044  007E25  41                 	db	65	;'A'
  4045  007E26  42                 	db	66	;'B'
  4046  007E27  43                 	db	67	;'C'
  4047  007E28  44                 	db	68	;'D'
  4048  007E29  45                 	db	69	;'E'
  4049  007E2A  46                 	db	70	;'F'
  4050  007E2B  00                 	db	0
  4051  007E2C                     STR_257:
  4052  007E2C  30                 	db	48	;'0'
  4053  007E2D  31                 	db	49	;'1'
  4054  007E2E  32                 	db	50	;'2'
  4055  007E2F  33                 	db	51	;'3'
  4056  007E30  34                 	db	52	;'4'
  4057  007E31  35                 	db	53	;'5'
  4058  007E32  36                 	db	54	;'6'
  4059  007E33  37                 	db	55	;'7'
  4060  007E34  38                 	db	56	;'8'
  4061  007E35  39                 	db	57	;'9'
  4062  007E36  61                 	db	97	;'a'
  4063  007E37  62                 	db	98	;'b'
  4064  007E38  63                 	db	99	;'c'
  4065  007E39  64                 	db	100	;'d'
  4066  007E3A  65                 	db	101	;'e'
  4067  007E3B  66                 	db	102	;'f'
  4068  007E3C  00                 	db	0
  4069  007E3D                     STR_157:
  4070  007E3D  53                 	db	83	;'S'
  4071  007E3E  65                 	db	101	;'e'
  4072  007E3F  6E                 	db	110	;'n'
  4073  007E40  74                 	db	116	;'t'
  4074  007E41  20                 	db	32
  4075  007E42  43                 	db	67	;'C'
  4076  007E43  41                 	db	65	;'A'
  4077  007E44  4E                 	db	78	;'N'
  4078  007E45  20                 	db	32
  4079  007E46  62                 	db	98	;'b'
  4080  007E47  79                 	db	121	;'y'
  4081  007E48  74                 	db	116	;'t'
  4082  007E49  65                 	db	101	;'e'
  4083  007E4A  73                 	db	115	;'s'
  4084  007E4B  3A                 	db	58	;':'
  4085  007E4C  20                 	db	32
  4086  007E4D  00                 	db	0
  4087  007E4E                     STR_235:
  4088  007E4E  20                 	db	32
  4089  007E4F  6E                 	db	110	;'n'
  4090  007E50  6F                 	db	111	;'o'
  4091  007E51  64                 	db	100	;'d'
  4092  007E52  65                 	db	101	;'e'
  4093  007E53  73                 	db	115	;'s'
  4094  007E54  20                 	db	32
  4095  007E55  66                 	db	102	;'f'
  4096  007E56  6F                 	db	111	;'o'
  4097  007E57  75                 	db	117	;'u'
  4098  007E58  6E                 	db	110	;'n'
  4099  007E59  64                 	db	100	;'d'
  4100  007E5A  0D                 	db	13
  4101  007E5B  0A                 	db	10
  4102  007E5C  00                 	db	0
  4103  007E5D                     STR_52:
  4104  007E5D  56                 	db	86	;'V'
  4105  007E5E  61                 	db	97	;'a'
  4106  007E5F  6C                 	db	108	;'l'
  4107  007E60  75                 	db	117	;'u'
  4108  007E61  65                 	db	101	;'e'
  4109  007E62  20                 	db	32
  4110  007E63  66                 	db	102	;'f'
  4111  007E64  6F                 	db	111	;'o'
  4112  007E65  72                 	db	114	;'r'
  4113  007E66  20                 	db	32
  4114  007E67  72                 	db	114	;'r'
  4115  007E68  65                 	db	101	;'e'
  4116  007E69  67                 	db	103	;'g'
  4117  007E6A  20                 	db	32
  4118  007E6B  00                 	db	0
  4119  007E6C                     STR_241:
  4120  007E6C  4D                 	db	77	;'M'
  4121  007E6D  44                 	db	68	;'D'
  4122  007E6E  46                 	db	70	;'F'
  4123  007E6F  20                 	db	32
  4124  007E70  3D                 	db	61	;'='
  4125  007E71  20                 	db	32
  4126  007E72  68                 	db	104	;'h'
  4127  007E73  74                 	db	116	;'t'
  4128  007E74  74                 	db	116	;'t'
  4129  007E75  70                 	db	112	;'p'
  4130  007E76  3A                 	db	58	;':'
  4131  007E77  2F                 	db	47
  4132  007E78  2F                 	db	47
  4133  007E79  00                 	db	0
  4134  007E7A                     STR_251:
  4135  007E7A  56                 	db	86	;'V'
  4136  007E7B  53                 	db	83	;'S'
  4137  007E7C  43                 	db	67	;'C'
  4138  007E7D  50                 	db	80	;'P'
  4139  007E7E  20                 	db	32
  4140  007E7F  44                 	db	68	;'D'
  4141  007E80  72                 	db	114	;'r'
  4142  007E81  69                 	db	105	;'i'
  4143  007E82  76                 	db	118	;'v'
  4144  007E83  65                 	db	101	;'e'
  4145  007E84  72                 	db	114	;'r'
  4146  007E85  00                 	db	0
  4147  007E86                     STR_112:
  4148  007E86  52                 	db	82	;'R'
  4149  007E87  57                 	db	87	;'W'
  4150  007E88  54                 	db	84	;'T'
  4151  007E89  49                 	db	73	;'I'
  4152  007E8A  4D                 	db	77	;'M'
  4153  007E8B  45                 	db	69	;'E'
  4154  007E8C  4F                 	db	79	;'O'
  4155  007E8D  55                 	db	85	;'U'
  4156  007E8E  54                 	db	84	;'T'
  4157  007E8F  20                 	db	32
  4158  007E90  00                 	db	0
  4159  007E91                     STR_151:
  4160  007E91  2C                 	db	44
  4161  007E92  44                 	db	68	;'D'
  4162  007E93  61                 	db	97	;'a'
  4163  007E94  74                 	db	116	;'t'
  4164  007E95  61                 	db	97	;'a'
  4165  007E96  3D                 	db	61	;'='
  4166  007E97  6E                 	db	110	;'n'
  4167  007E98  6F                 	db	111	;'o'
  4168  007E99  6E                 	db	110	;'n'
  4169  007E9A  65                 	db	101	;'e'
  4170  007E9B  00                 	db	0
  4171  007E9C                     STR_247:
  4172  007E9C  56                 	db	86	;'V'
  4173  007E9D  65                 	db	101	;'e'
  4174  007E9E  72                 	db	114	;'r'
  4175  007E9F  73                 	db	115	;'s'
  4176  007EA0  69                 	db	105	;'i'
  4177  007EA1  6F                 	db	111	;'o'
  4178  007EA2  6E                 	db	110	;'n'
  4179  007EA3  3A                 	db	58	;':'
  4180  007EA4  20                 	db	32
  4181  007EA5  00                 	db	0
  4182  007EA6                     STR_253:
  4183  007EA6  56                 	db	86	;'V'
  4184  007EA7  53                 	db	83	;'S'
  4185  007EA8  43                 	db	67	;'C'
  4186  007EA9  50                 	db	80	;'P'
  4187  007EAA  20                 	db	32
  4188  007EAB  4E                 	db	78	;'N'
  4189  007EAC  6F                 	db	111	;'o'
  4190  007EAD  64                 	db	100	;'d'
  4191  007EAE  65                 	db	101	;'e'
  4192  007EAF  00                 	db	0
  4193  007EB0                     STR_252:
  4194  007EB0  53                 	db	83	;'S'
  4195  007EB1  4C                 	db	76	;'L'
  4196  007EB2  20                 	db	32
  4197  007EB3  44                 	db	68	;'D'
  4198  007EB4  72                 	db	114	;'r'
  4199  007EB5  69                 	db	105	;'i'
  4200  007EB6  76                 	db	118	;'v'
  4201  007EB7  65                 	db	101	;'e'
  4202  007EB8  72                 	db	114	;'r'
  4203  007EB9  00                 	db	0
  4204  007EBA                     STR_113:
  4205  007EBA  53                 	db	83	;'S'
  4206  007EBB  54                 	db	84	;'T'
  4207  007EBC  41                 	db	65	;'A'
  4208  007EBD  52                 	db	82	;'R'
  4209  007EBE  54                 	db	84	;'T'
  4210  007EBF  49                 	db	73	;'I'
  4211  007EC0  46                 	db	70	;'F'
  4212  007EC1  20                 	db	32
  4213  007EC2  00                 	db	0
  4214  007EC3                     STR_141:
  4215  007EC3  2C                 	db	44
  4216  007EC4  6E                 	db	110	;'n'
  4217  007EC5  6F                 	db	111	;'o'
  4218  007EC6  64                 	db	100	;'d'
  4219  007EC7  65                 	db	101	;'e'
  4220  007EC8  69                 	db	105	;'i'
  4221  007EC9  64                 	db	100	;'d'
  4222  007ECA  3D                 	db	61	;'='
  4223  007ECB  00                 	db	0
  4224  007ECC                     STR_14:
  4225  007ECC  4C                 	db	76	;'L'
  4226  007ECD  4F                 	db	79	;'O'
  4227  007ECE  4F                 	db	79	;'O'
  4228  007ECF  50                 	db	80	;'P'
  4229  007ED0  42                 	db	66	;'B'
  4230  007ED1  41                 	db	65	;'A'
  4231  007ED2  43                 	db	67	;'C'
  4232  007ED3  4B                 	db	75	;'K'
  4233  007ED4  00                 	db	0
  4234  007ED5                     STR_127:
  4235  007ED5  56                 	db	86	;'V'
  4236  007ED6  31                 	db	49	;'1'
  4237  007ED7  30                 	db	48	;'0'
  4238  007ED8  31                 	db	49	;'1'
  4239  007ED9  31                 	db	49	;'1'
  4240  007EDA  0D                 	db	13
  4241  007EDB  0A                 	db	10
  4242  007EDC  00                 	db	0
  4243  007EDD                     STR_128:
  4244  007EDD  4E                 	db	78	;'N'
  4245  007EDE  31                 	db	49	;'1'
  4246  007EDF  39                 	db	57	;'9'
  4247  007EE0  37                 	db	55	;'7'
  4248  007EE1  37                 	db	55	;'7'
  4249  007EE2  0D                 	db	13
  4250  007EE3  0A                 	db	10
  4251  007EE4  00                 	db	0
  4252  007EE5                     STR_236:
  4253  007EE5  47                 	db	71	;'G'
  4254  007EE6  55                 	db	85	;'U'
  4255  007EE7  49                 	db	73	;'I'
  4256  007EE8  44                 	db	68	;'D'
  4257  007EE9  20                 	db	32
  4258  007EEA  3D                 	db	61	;'='
  4259  007EEB  20                 	db	32
  4260  007EEC  00                 	db	0
  4261  007EED                     STR_121:
  4262  007EED  46                 	db	70	;'F'
  4263  007EEE  49                 	db	73	;'I'
  4264  007EEF  4C                 	db	76	;'L'
  4265  007EF0  54                 	db	84	;'T'
  4266  007EF1  45                 	db	69	;'E'
  4267  007EF2  52                 	db	82	;'R'
  4268  007EF3  20                 	db	32
  4269  007EF4  00                 	db	0
  4270  007EF5                     STR_135:
  4271  007EF5  2C                 	db	44
  4272  007EF6  63                 	db	99	;'c'
  4273  007EF7  6C                 	db	108	;'l'
  4274  007EF8  61                 	db	97	;'a'
  4275  007EF9  73                 	db	115	;'s'
  4276  007EFA  73                 	db	115	;'s'
  4277  007EFB  3D                 	db	61	;'='
  4278  007EFC  00                 	db	0
  4279  007EFD                     STR_115:
  4280  007EFD  56                 	db	86	;'V'
  4281  007EFE  45                 	db	69	;'E'
  4282  007EFF  52                 	db	82	;'R'
  4283  007F00  42                 	db	66	;'B'
  4284  007F01  4F                 	db	79	;'O'
  4285  007F02  53                 	db	83	;'S'
  4286  007F03  45                 	db	69	;'E'
  4287  007F04  00                 	db	0
  4288  007F05                     STR_110:
  4289  007F05  44                 	db	68	;'D'
  4290  007F06  45                 	db	69	;'E'
  4291  007F07  43                 	db	67	;'C'
  4292  007F08  49                 	db	73	;'I'
  4293  007F09  4D                 	db	77	;'M'
  4294  007F0A  41                 	db	65	;'A'
  4295  007F0B  4C                 	db	76	;'L'
  4296  007F0C  00                 	db	0
  4297  007F0D                     STR_18:
  4298  007F0D  56                 	db	86	;'V'
  4299  007F0E  45                 	db	69	;'E'
  4300  007F0F  52                 	db	82	;'R'
  4301  007F10  53                 	db	83	;'S'
  4302  007F11  49                 	db	73	;'I'
  4303  007F12  4F                 	db	79	;'O'
  4304  007F13  4E                 	db	78	;'N'
  4305  007F14  00                 	db	0
  4306  007F15                     STR_170:
  4307  007F15  30                 	db	48	;'0'
  4308  007F16  78                 	db	120	;'x'
  4309  007F17  25                 	db	37
  4310  007F18  30                 	db	48	;'0'
  4311  007F19  38                 	db	56	;'8'
  4312  007F1A  6C                 	db	108	;'l'
  4313  007F1B  58                 	db	88	;'X'
  4314  007F1C  00                 	db	0
  4315  007F1D                     STR_250:
  4316  007F1D  56                 	db	86	;'V'
  4317  007F1E  65                 	db	101	;'e'
  4318  007F1F  72                 	db	114	;'r'
  4319  007F20  62                 	db	98	;'b'
  4320  007F21  6F                 	db	111	;'o'
  4321  007F22  73                 	db	115	;'s'
  4322  007F23  65                 	db	101	;'e'
  4323  007F24  00                 	db	0
  4324  007F25                     STR_249:
  4325  007F25  4D                 	db	77	;'M'
  4326  007F26  6F                 	db	111	;'o'
  4327  007F27  64                 	db	100	;'d'
  4328  007F28  65                 	db	101	;'e'
  4329  007F29  3A                 	db	58	;':'
  4330  007F2A  20                 	db	32
  4331  007F2B  00                 	db	0
  4332  007F2C                     STR_147:
  4333  007F2C  2C                 	db	44
  4334  007F2D  44                 	db	68	;'D'
  4335  007F2E  61                 	db	97	;'a'
  4336  007F2F  74                 	db	116	;'t'
  4337  007F30  61                 	db	97	;'a'
  4338  007F31  3D                 	db	61	;'='
  4339  007F32  00                 	db	0
  4340  007F33                     STR_138:
  4341  007F33  2C                 	db	44
  4342  007F34  74                 	db	116	;'t'
  4343  007F35  79                 	db	121	;'y'
  4344  007F36  70                 	db	112	;'p'
  4345  007F37  65                 	db	101	;'e'
  4346  007F38  3D                 	db	61	;'='
  4347  007F39  00                 	db	0
  4348  007F3A                     STR_144:
  4349  007F3A  2C                 	db	44
  4350  007F3B  73                 	db	115	;'s'
  4351  007F3C  69                 	db	105	;'i'
  4352  007F3D  7A                 	db	122	;'z'
  4353  007F3E  65                 	db	101	;'e'
  4354  007F3F  3D                 	db	61	;'='
  4355  007F40  00                 	db	0
  4356  007F41                     STR_132:
  4357  007F41  3C                 	db	60	;'<'
  4358  007F42  50                 	db	80	;'P'
  4359  007F43  72                 	db	114	;'r'
  4360  007F44  69                 	db	105	;'i'
  4361  007F45  6F                 	db	111	;'o'
  4362  007F46  3D                 	db	61	;'='
  4363  007F47  00                 	db	0
  4364  007F48                     STR_20:
  4365  007F48  49                 	db	73	;'I'
  4366  007F49  46                 	db	70	;'F'
  4367  007F4A  4D                 	db	77	;'M'
  4368  007F4B  4F                 	db	79	;'O'
  4369  007F4C  44                 	db	68	;'D'
  4370  007F4D  45                 	db	69	;'E'
  4371  007F4E  00                 	db	0
  4372  007F4F                     STR_16:
  4373  007F4F  4C                 	db	76	;'L'
  4374  007F50  49                 	db	73	;'I'
  4375  007F51  53                 	db	83	;'S'
  4376  007F52  54                 	db	84	;'T'
  4377  007F53  45                 	db	69	;'E'
  4378  007F54  4E                 	db	78	;'N'
  4379  007F55  00                 	db	0
  4380  007F56                     STR_83:
  4381  007F56  46                 	db	70	;'F'
  4382  007F57  49                 	db	73	;'I'
  4383  007F58  4C                 	db	76	;'L'
  4384  007F59  54                 	db	84	;'T'
  4385  007F5A  45                 	db	69	;'E'
  4386  007F5B  52                 	db	82	;'R'
  4387  007F5C  00                 	db	0
  4388  007F5D                     STR_10:
  4389  007F5D  53                 	db	83	;'S'
  4390  007F5E  49                 	db	73	;'I'
  4391  007F5F  4C                 	db	76	;'L'
  4392  007F60  45                 	db	69	;'E'
  4393  007F61  4E                 	db	78	;'N'
  4394  007F62  54                 	db	84	;'T'
  4395  007F63  00                 	db	0
  4396  007F64                     STR_53:
  4397  007F64  30                 	db	48	;'0'
  4398  007F65  78                 	db	120	;'x'
  4399  007F66  25                 	db	37
  4400  007F67  30                 	db	48	;'0'
  4401  007F68  32                 	db	50	;'2'
  4402  007F69  58                 	db	88	;'X'
  4403  007F6A  00                 	db	0
  4404  007F6B                     STR_136:
  4405  007F6B  30                 	db	48	;'0'
  4406  007F6C  78                 	db	120	;'x'
  4407  007F6D  25                 	db	37
  4408  007F6E  30                 	db	48	;'0'
  4409  007F6F  34                 	db	52	;'4'
  4410  007F70  58                 	db	88	;'X'
  4411  007F71  00                 	db	0
  4412  007F72                     STR_154:
  4413  007F72  30                 	db	48	;'0'
  4414  007F73  78                 	db	120	;'x'
  4415  007F74  25                 	db	37
  4416  007F75  30                 	db	48	;'0'
  4417  007F76  38                 	db	56	;'8'
  4418  007F77  58                 	db	88	;'X'
  4419  007F78  00                 	db	0
  4420  007F79                     STR_129:
  4421  007F79  46                 	db	70	;'F'
  4422  007F7A  30                 	db	48	;'0'
  4423  007F7B  30                 	db	48	;'0'
  4424  007F7C  0D                 	db	13
  4425  007F7D  0A                 	db	10
  4426  007F7E  00                 	db	0
  4427  007F7F                     STR_9:
  4428  007F7F  2B                 	db	43
  4429  007F80  4F                 	db	79	;'O'
  4430  007F81  4B                 	db	75	;'K'
  4431  007F82  0D                 	db	13
  4432  007F83  0A                 	db	10
  4433  007F84  00                 	db	0
  4434  007F85                     STR_114:
  4435  007F85  4D                 	db	77	;'M'
  4436  007F86  4F                 	db	79	;'O'
  4437  007F87  44                 	db	68	;'D'
  4438  007F88  45                 	db	69	;'E'
  4439  007F89  20                 	db	32
  4440  007F8A  00                 	db	0
  4441  007F8B                     STR_122:
  4442  007F8B  4D                 	db	77	;'M'
  4443  007F8C  41                 	db	65	;'A'
  4444  007F8D  53                 	db	83	;'S'
  4445  007F8E  4B                 	db	75	;'K'
  4446  007F8F  20                 	db	32
  4447  007F90  00                 	db	0
  4448  007F91                     STR_12:
  4449  007F91  43                 	db	67	;'C'
  4450  007F92  4C                 	db	76	;'L'
  4451  007F93  4F                 	db	79	;'O'
  4452  007F94  53                 	db	83	;'S'
  4453  007F95  45                 	db	69	;'E'
  4454  007F96  00                 	db	0
  4455  007F97                     STR_119:
  4456  007F97  53                 	db	83	;'S'
  4457  007F98  4C                 	db	76	;'L'
  4458  007F99  43                 	db	67	;'C'
  4459  007F9A  41                 	db	65	;'A'
  4460  007F9B  4E                 	db	78	;'N'
  4461  007F9C  00                 	db	0
  4462  007F9D                     STR_107:
  4463  007F9D  53                 	db	83	;'S'
  4464  007F9E  45                 	db	69	;'E'
  4465  007F9F  54                 	db	84	;'T'
  4466  007FA0  20                 	db	32
  4467  007FA1  00                 	db	0
  4468  007FA2                     STR_45:
  4469  007FA2  46                 	db	70	;'F'
  4470  007FA3  49                 	db	73	;'I'
  4471  007FA4  4E                 	db	78	;'N'
  4472  007FA5  44                 	db	68	;'D'
  4473  007FA6  00                 	db	0
  4474  007FA7                     STR_46:
  4475  007FA7  52                 	db	82	;'R'
  4476  007FA8  52                 	db	82	;'R'
  4477  007FA9  45                 	db	69	;'E'
  4478  007FAA  47                 	db	71	;'G'
  4479  007FAB  00                 	db	0
  4480  007FAC                     STR_69:
  4481  007FAC  57                 	db	87	;'W'
  4482  007FAD  52                 	db	82	;'R'
  4483  007FAE  45                 	db	69	;'E'
  4484  007FAF  47                 	db	71	;'G'
  4485  007FB0  00                 	db	0
  4486  007FB1                     STR_95:
  4487  007FB1  4D                 	db	77	;'M'
  4488  007FB2  41                 	db	65	;'A'
  4489  007FB3  53                 	db	83	;'S'
  4490  007FB4  4B                 	db	75	;'K'
  4491  007FB5  00                 	db	0
  4492  007FB6                     STR_8:
  4493  007FB6  4F                 	db	79	;'O'
  4494  007FB7  50                 	db	80	;'P'
  4495  007FB8  45                 	db	69	;'E'
  4496  007FB9  4E                 	db	78	;'N'
  4497  007FBA  00                 	db	0
  4498  007FBB                     STR_78:
  4499  007FBB  49                 	db	73	;'I'
  4500  007FBC  4E                 	db	78	;'N'
  4501  007FBD  46                 	db	70	;'F'
  4502  007FBE  4F                 	db	79	;'O'
  4503  007FBF  00                 	db	0
  4504  007FC0                     STR_117:
  4505  007FC0  56                 	db	86	;'V'
  4506  007FC1  53                 	db	83	;'S'
  4507  007FC2  43                 	db	67	;'C'
  4508  007FC3  50                 	db	80	;'P'
  4509  007FC4  00                 	db	0
  4510  007FC5                     STR_43:
  4511  007FC5  48                 	db	72	;'H'
  4512  007FC6  45                 	db	69	;'E'
  4513  007FC7  4C                 	db	76	;'L'
  4514  007FC8  50                 	db	80	;'P'
  4515  007FC9  00                 	db	0
  4516  007FCA                     STR_41:
  4517  007FCA  53                 	db	83	;'S'
  4518  007FCB  54                 	db	84	;'T'
  4519  007FCC  41                 	db	65	;'A'
  4520  007FCD  54                 	db	84	;'T'
  4521  007FCE  00                 	db	0
  4522  007FCF                     STR_6:
  4523  007FCF  42                 	db	66	;'B'
  4524  007FD0  4F                 	db	79	;'O'
  4525  007FD1  4F                 	db	79	;'O'
  4526  007FD2  54                 	db	84	;'T'
  4527  007FD3  00                 	db	0
  4528  007FD4                     STR_152:
  4529  007FD4  3E                 	db	62	;'>'
  4530  007FD5  0D                 	db	13
  4531  007FD6  0A                 	db	10
  4532  007FD7  00                 	db	0
  4533  007FD8                     STR_42:
  4534  007FD8  45                 	db	69	;'E'
  4535  007FD9  52                 	db	82	;'R'
  4536  007FDA  52                 	db	82	;'R'
  4537  007FDB  00                 	db	0
  4538  007FDC                     STR_108:
  4539  007FDC  48                 	db	72	;'H'
  4540  007FDD  45                 	db	69	;'E'
  4541  007FDE  58                 	db	88	;'X'
  4542  007FDF  00                 	db	0
  4543  007FE0                     STR_155:
  4544  007FE0  25                 	db	37
  4545  007FE1  6C                 	db	108	;'l'
  4546  007FE2  75                 	db	117	;'u'
  4547  007FE3  00                 	db	0
  4548  007FE4                     STR_238:
  4549  007FE4  2D                 	db	45
  4550  007FE5  2D                 	db	45
  4551  007FE6  00                 	db	0
  4552  007FE7                     STR_38:
  4553  007FE7  52                 	db	82	;'R'
  4554  007FE8  58                 	db	88	;'X'
  4555  007FE9  00                 	db	0
  4556  007FEA                     STR_29:
  4557  007FEA  54                 	db	84	;'T'
  4558  007FEB  58                 	db	88	;'X'
  4559  007FEC  00                 	db	0
  4560  007FED                     STR_54:
  4561  007FED  25                 	db	37
  4562  007FEE  64                 	db	100	;'d'
  4563  007FEF  00                 	db	0
  4564  007FF0                     STR_131:
  4565  007FF0  07                 	db	7
  4566  007FF1  00                 	db	0
  4567  007FF2                     STR_130:
  4568  007FF2  0D                 	db	13
  4569  007FF3  00                 	db	0
  4570  007FF4                     STR_30:
  4571  007FF4  2C                 	db	44
  4572  007FF5  00                 	db	0
  4573  007FF6                     STR_245:
  4574  007FF6  2E                 	db	46
  4575  007FF7  00                 	db	0
  4576  007FF8                     STR_237:
  4577  007FF8  30                 	db	48	;'0'
  4578  007FF9  00                 	db	0
  4579  007FFA                     STR_239:
  4580  007FFA  3A                 	db	58	;':'
  4581  007FFB  00                 	db	0
  4582  007FFC                     STR_244:
  4583  007FFC  3F                 	db	63	;'?'
  4584  007FFD  00                 	db	0
  4585  007FFE                     __end_of__stringdata:
  4586                           	opt stack 0
  4587                           
  4588                           ; #config settings
  4589  007FFE  00                 	db	0	; dummy byte at the end
  4590  0000                     tblptru	equ	0xFF8
  4591                           tblptrh	equ	0xFF7
  4592                           tblptrl	equ	0xFF6
  4593                           tablat	equ	0xFF5
  4594                           prodh	equ	0xFF4
  4595                           prodl	equ	0xFF3
  4596                           intcon	equ	0xFF2
  4597                           indf0	equ	0xFEF
  4598                           fsr0h	equ	0xFEA
  4599                           fsr0l	equ	0xFE9
  4600                           wreg	equ	0xFE8
  4601                           indf1	equ	0xFE7
  4602                           postinc1	equ	0xFE6
  4603                           postdec1	equ	0xFE5
  4604                           fsr1h	equ	0xFE2
  4605                           fsr1l	equ	0xFE1
  4606                           indf2	equ	0xFDF
  4607                           postinc2	equ	0xFDE
  4608                           postdec2	equ	0xFDD
  4609                           plusw2	equ	0xFDB
  4610                           fsr2h	equ	0xFDA
  4611                           fsr2l	equ	0xFD9
  4612                           status	equ	0xFD8
  4613                           
  4614                           	psect	nvBANK0
  4615  0000F5                     __pnvBANK0:
  4616                           	opt stack 0
  4617  0000F5                     _caps:
  4618                           	opt stack 0
  4619  0000F5                     	ds	2
  4620                           tblptru	equ	0xFF8
  4621                           tblptrh	equ	0xFF7
  4622                           tblptrl	equ	0xFF6
  4623                           tablat	equ	0xFF5
  4624                           prodh	equ	0xFF4
  4625                           prodl	equ	0xFF3
  4626                           intcon	equ	0xFF2
  4627                           indf0	equ	0xFEF
  4628                           fsr0h	equ	0xFEA
  4629                           fsr0l	equ	0xFE9
  4630                           wreg	equ	0xFE8
  4631                           indf1	equ	0xFE7
  4632                           postinc1	equ	0xFE6
  4633                           postdec1	equ	0xFE5
  4634                           fsr1h	equ	0xFE2
  4635                           fsr1l	equ	0xFE1
  4636                           indf2	equ	0xFDF
  4637                           postinc2	equ	0xFDE
  4638                           postdec2	equ	0xFDD
  4639                           plusw2	equ	0xFDB
  4640                           fsr2h	equ	0xFDA
  4641                           fsr2l	equ	0xFD9
  4642                           status	equ	0xFD8
  4643                           
  4644                           	psect	cinit
  4645  004F58                     __pcinit:
  4646                           	opt stack 0
  4647  004F58                     start_initialization:
  4648                           	opt stack 0
  4649  004F58                     __initialization:
  4650                           	opt stack 0
  4651                           
  4652                           ; Clear objects allocated to BIGRAM (494 bytes)
  4653  004F58  EE04  F000         	lfsr	0,__pbssBIGRAM
  4654  004F5C  EE11 F0EE          	lfsr	1,494
  4655  004F60                     clear_0:
  4656  004F60  6AEE               	clrf	postinc0,c
  4657  004F62  50E5               	movf	postdec1,w,c
  4658  004F64  50E1               	movf	fsr1l,w,c
  4659  004F66  E1FC               	bnz	clear_0
  4660  004F68  50E2               	movf	fsr1h,w,c
  4661  004F6A  E1FA               	bnz	clear_0
  4662                           
  4663                           ; Clear objects allocated to BANK3 (256 bytes)
  4664  004F6C  EE03  F000         	lfsr	0,__pbssBANK3
  4665  004F70  EE11 F000          	lfsr	1,256
  4666  004F74                     clear_1:
  4667  004F74  6AEE               	clrf	postinc0,c
  4668  004F76  50E5               	movf	postdec1,w,c
  4669  004F78  50E1               	movf	fsr1l,w,c
  4670  004F7A  E1FC               	bnz	clear_1
  4671  004F7C  50E2               	movf	fsr1h,w,c
  4672  004F7E  E1FA               	bnz	clear_1
  4673                           
  4674                           ; Clear objects allocated to BANK2 (128 bytes)
  4675  004F80  EE02  F000         	lfsr	0,__pbssBANK2
  4676  004F84  0E80               	movlw	128
  4677  004F86                     clear_2:
  4678  004F86  6AEE               	clrf	postinc0,c
  4679  004F88  06E8               	decf	wreg,f,c
  4680  004F8A  E1FD               	bnz	clear_2
  4681                           
  4682                           ; Clear objects allocated to BANK1 (178 bytes)
  4683  004F8C  EE01  F000         	lfsr	0,__pbssBANK1
  4684  004F90  0EB2               	movlw	178
  4685  004F92                     clear_3:
  4686  004F92  6AEE               	clrf	postinc0,c
  4687  004F94  06E8               	decf	wreg,f,c
  4688  004F96  E1FD               	bnz	clear_3
  4689                           
  4690                           ; Clear objects allocated to BANK0 (36 bytes)
  4691  004F98  EE00  F0D1         	lfsr	0,__pbssBANK0
  4692  004F9C  0E24               	movlw	36
  4693  004F9E                     clear_4:
  4694  004F9E  6AEE               	clrf	postinc0,c
  4695  004FA0  06E8               	decf	wreg,f,c
  4696  004FA2  E1FD               	bnz	clear_4
  4697                           
  4698                           ; Clear objects allocated to COMRAM (37 bytes)
  4699  004FA4  EE00  F02B         	lfsr	0,__pbssCOMRAM
  4700  004FA8  0E25               	movlw	37
  4701  004FAA                     clear_5:
  4702  004FAA  6AEE               	clrf	postinc0,c
  4703  004FAC  06E8               	decf	wreg,f,c
  4704  004FAE  E1FD               	bnz	clear_5
  4705  004FB0                     end_of_initialization:
  4706                           	opt stack 0
  4707  004FB0                     __end_of__initialization:
  4708                           	opt stack 0
  4709  004FB0  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4710  004FB2  6EF8               	movwf	tblptru,c
  4711  004FB4  0100               	movlb	0
  4712  004FB6  EFEB  F019         	goto	_main	;jump to C main() function
  4713                           tblptru	equ	0xFF8
  4714                           tblptrh	equ	0xFF7
  4715                           tblptrl	equ	0xFF6
  4716                           tablat	equ	0xFF5
  4717                           prodh	equ	0xFF4
  4718                           prodl	equ	0xFF3
  4719                           intcon	equ	0xFF2
  4720                           indf0	equ	0xFEF
  4721                           postinc0	equ	0xFEE
  4722                           fsr0h	equ	0xFEA
  4723                           fsr0l	equ	0xFE9
  4724                           wreg	equ	0xFE8
  4725                           indf1	equ	0xFE7
  4726                           postinc1	equ	0xFE6
  4727                           postdec1	equ	0xFE5
  4728                           fsr1h	equ	0xFE2
  4729                           fsr1l	equ	0xFE1
  4730                           indf2	equ	0xFDF
  4731                           postinc2	equ	0xFDE
  4732                           postdec2	equ	0xFDD
  4733                           plusw2	equ	0xFDB
  4734                           fsr2h	equ	0xFDA
  4735                           fsr2l	equ	0xFD9
  4736                           status	equ	0xFD8
  4737                           
  4738                           	psect	bssCOMRAM
  4739  00002B                     __pbssCOMRAM:
  4740                           	opt stack 0
  4741  00002B                     _can_transmitOverruns:
  4742                           	opt stack 0
  4743  00002B                     	ds	4
  4744  00002F                     _uart_receiveOverruns:
  4745                           	opt stack 0
  4746  00002F                     	ds	4
  4747  000033                     _uart_transmitOverruns:
  4748                           	opt stack 0
  4749  000033                     	ds	4
  4750  000037                     _made_table:
  4751                           	opt stack 0
  4752  000037                     	ds	2
  4753  000039                     _status_led_cnt:
  4754                           	opt stack 0
  4755  000039                     	ds	2
  4756  00003B                     strtok@sp:
  4757                           	opt stack 0
  4758  00003B                     	ds	2
  4759  00003D                     _USART_Status:
  4760                           	opt stack 0
  4761  00003D                     	ds	1
  4762  00003E                     __ECANRxFilterHitInfo:
  4763                           	opt stack 0
  4764  00003E                     	ds	1
  4765  00003F                     _ledFunctionality:
  4766                           	opt stack 0
  4767  00003F                     	ds	1
  4768  000040                     _canInputFifo:
  4769                           	opt stack 0
  4770  000040                     	ds	8
  4771  000048                     _serialInputFifo:
  4772                           	opt stack 0
  4773  000048                     	ds	8
  4774                           tblptru	equ	0xFF8
  4775                           tblptrh	equ	0xFF7
  4776                           tblptrl	equ	0xFF6
  4777                           tablat	equ	0xFF5
  4778                           prodh	equ	0xFF4
  4779                           prodl	equ	0xFF3
  4780                           intcon	equ	0xFF2
  4781                           indf0	equ	0xFEF
  4782                           postinc0	equ	0xFEE
  4783                           fsr0h	equ	0xFEA
  4784                           fsr0l	equ	0xFE9
  4785                           wreg	equ	0xFE8
  4786                           indf1	equ	0xFE7
  4787                           postinc1	equ	0xFE6
  4788                           postdec1	equ	0xFE5
  4789                           fsr1h	equ	0xFE2
  4790                           fsr1l	equ	0xFE1
  4791                           indf2	equ	0xFDF
  4792                           postinc2	equ	0xFDE
  4793                           postdec2	equ	0xFDD
  4794                           plusw2	equ	0xFDB
  4795                           fsr2h	equ	0xFDA
  4796                           fsr2l	equ	0xFD9
  4797                           status	equ	0xFD8
  4798                           
  4799                           	psect	bssBANK0
  4800  0000D1                     __pbssBANK0:
  4801                           	opt stack 0
  4802  0000D1                     _can_receiveOverruns:
  4803                           	opt stack 0
  4804  0000D1                     	ds	4
  4805  0000D5                     _cntRxBytes:
  4806                           	opt stack 0
  4807  0000D5                     	ds	4
  4808  0000D9                     _cntRxFrames:
  4809                           	opt stack 0
  4810  0000D9                     	ds	4
  4811  0000DD                     _cntTxBytes:
  4812                           	opt stack 0
  4813  0000DD                     	ds	4
  4814  0000E1                     _cntTxFrames:
  4815                           	opt stack 0
  4816  0000E1                     	ds	4
  4817  0000E5                     _timekeeper:
  4818                           	opt stack 0
  4819  0000E5                     	ds	4
  4820  0000E9                     _timer:
  4821                           	opt stack 0
  4822  0000E9                     	ds	4
  4823  0000ED                     _bDLE:
  4824                           	opt stack 0
  4825  0000ED                     	ds	1
  4826  0000EE                     _bInitiated:
  4827                           	opt stack 0
  4828  0000EE                     	ds	1
  4829  0000EF                     _bOpen:
  4830                           	opt stack 0
  4831  0000EF                     	ds	1
  4832  0000F0                     _canrxcount:
  4833                           	opt stack 0
  4834  0000F0                     	ds	1
  4835  0000F1                     _mode:
  4836                           	opt stack 0
  4837  0000F1                     	ds	1
  4838  0000F2                     _nTimeStamp:
  4839                           	opt stack 0
  4840  0000F2                     	ds	1
  4841  0000F3                     _sequencyno:
  4842                           	opt stack 0
  4843  0000F3                     	ds	1
  4844  0000F4                     _stateVscpDriver:
  4845                           	opt stack 0
  4846  0000F4                     	ds	1
  4847                           tblptru	equ	0xFF8
  4848                           tblptrh	equ	0xFF7
  4849                           tblptrl	equ	0xFF6
  4850                           tablat	equ	0xFF5
  4851                           prodh	equ	0xFF4
  4852                           prodl	equ	0xFF3
  4853                           intcon	equ	0xFF2
  4854                           indf0	equ	0xFEF
  4855                           postinc0	equ	0xFEE
  4856                           fsr0h	equ	0xFEA
  4857                           fsr0l	equ	0xFE9
  4858                           wreg	equ	0xFE8
  4859                           indf1	equ	0xFE7
  4860                           postinc1	equ	0xFE6
  4861                           postdec1	equ	0xFE5
  4862                           fsr1h	equ	0xFE2
  4863                           fsr1l	equ	0xFE1
  4864                           indf2	equ	0xFDF
  4865                           postinc2	equ	0xFDE
  4866                           postdec2	equ	0xFDD
  4867                           plusw2	equ	0xFDB
  4868                           fsr2h	equ	0xFDA
  4869                           fsr2l	equ	0xFD9
  4870                           status	equ	0xFD8
  4871                           
  4872                           	psect	bssBANK1
  4873  000100                     __pbssBANK1:
  4874                           	opt stack 0
  4875  000100                     _bHex:
  4876                           	opt stack 0
  4877  000100                     	ds	1
  4878  000101                     _bSilent:
  4879                           	opt stack 0
  4880  000101                     	ds	1
  4881  000102                     _pos:
  4882                           	opt stack 0
  4883  000102                     	ds	1
  4884  000103                     _rwtimeout:
  4885                           	opt stack 0
  4886  000103                     	ds	1
  4887  000104                     _cmdbuf:
  4888                           	opt stack 0
  4889  000104                     	ds	80
  4890  000154                     _wrkbuf:
  4891                           	opt stack 0
  4892  000154                     	ds	80
  4893  0001A4                     _vscpData:
  4894                           	opt stack 0
  4895  0001A4                     	ds	8
  4896  0001AC                     _vscpClass:
  4897                           	opt stack 0
  4898  0001AC                     	ds	2
  4899  0001AE                     _vscpNodeId:
  4900                           	opt stack 0
  4901  0001AE                     	ds	1
  4902  0001AF                     _vscpPriority:
  4903                           	opt stack 0
  4904  0001AF                     	ds	1
  4905  0001B0                     _vscpSize:
  4906                           	opt stack 0
  4907  0001B0                     	ds	1
  4908  0001B1                     _vscpType:
  4909                           	opt stack 0
  4910  0001B1                     	ds	1
  4911                           tblptru	equ	0xFF8
  4912                           tblptrh	equ	0xFF7
  4913                           tblptrl	equ	0xFF6
  4914                           tablat	equ	0xFF5
  4915                           prodh	equ	0xFF4
  4916                           prodl	equ	0xFF3
  4917                           intcon	equ	0xFF2
  4918                           indf0	equ	0xFEF
  4919                           postinc0	equ	0xFEE
  4920                           fsr0h	equ	0xFEA
  4921                           fsr0l	equ	0xFE9
  4922                           wreg	equ	0xFE8
  4923                           indf1	equ	0xFE7
  4924                           postinc1	equ	0xFE6
  4925                           postdec1	equ	0xFE5
  4926                           fsr1h	equ	0xFE2
  4927                           fsr1l	equ	0xFE1
  4928                           indf2	equ	0xFDF
  4929                           postinc2	equ	0xFDE
  4930                           postdec2	equ	0xFDD
  4931                           plusw2	equ	0xFDB
  4932                           fsr2h	equ	0xFDA
  4933                           fsr2l	equ	0xFD9
  4934                           status	equ	0xFD8
  4935                           
  4936                           	psect	bssBANK2
  4937  000200                     __pbssBANK2:
  4938                           	opt stack 0
  4939  000200                     _inputBuffer:
  4940                           	opt stack 0
  4941  000200                     	ds	128
  4942                           tblptru	equ	0xFF8
  4943                           tblptrh	equ	0xFF7
  4944                           tblptrl	equ	0xFF6
  4945                           tablat	equ	0xFF5
  4946                           prodh	equ	0xFF4
  4947                           prodl	equ	0xFF3
  4948                           intcon	equ	0xFF2
  4949                           indf0	equ	0xFEF
  4950                           postinc0	equ	0xFEE
  4951                           fsr0h	equ	0xFEA
  4952                           fsr0l	equ	0xFE9
  4953                           wreg	equ	0xFE8
  4954                           indf1	equ	0xFE7
  4955                           postinc1	equ	0xFE6
  4956                           postdec1	equ	0xFE5
  4957                           fsr1h	equ	0xFE2
  4958                           fsr1l	equ	0xFE1
  4959                           indf2	equ	0xFDF
  4960                           postinc2	equ	0xFDE
  4961                           postdec2	equ	0xFDD
  4962                           plusw2	equ	0xFDB
  4963                           fsr2h	equ	0xFDA
  4964                           fsr2l	equ	0xFD9
  4965                           status	equ	0xFD8
  4966                           
  4967                           	psect	bssBANK3
  4968  000300                     __pbssBANK3:
  4969                           	opt stack 0
  4970  000300                     _crc8_table:
  4971                           	opt stack 0
  4972  000300                     	ds	256
  4973                           tblptru	equ	0xFF8
  4974                           tblptrh	equ	0xFF7
  4975                           tblptrl	equ	0xFF6
  4976                           tablat	equ	0xFF5
  4977                           prodh	equ	0xFF4
  4978                           prodl	equ	0xFF3
  4979                           intcon	equ	0xFF2
  4980                           indf0	equ	0xFEF
  4981                           postinc0	equ	0xFEE
  4982                           fsr0h	equ	0xFEA
  4983                           fsr0l	equ	0xFE9
  4984                           wreg	equ	0xFE8
  4985                           indf1	equ	0xFE7
  4986                           postinc1	equ	0xFE6
  4987                           postdec1	equ	0xFE5
  4988                           fsr1h	equ	0xFE2
  4989                           fsr1l	equ	0xFE1
  4990                           indf2	equ	0xFDF
  4991                           postinc2	equ	0xFDE
  4992                           postdec2	equ	0xFDD
  4993                           plusw2	equ	0xFDB
  4994                           fsr2h	equ	0xFDA
  4995                           fsr2l	equ	0xFD9
  4996                           status	equ	0xFD8
  4997                           
  4998                           	psect	bssBIGRAM
  4999  000400                     __pbssBIGRAM:
  5000                           	opt stack 0
  5001  000400                     _caninputBuffer:
  5002                           	opt stack 0
  5003  000400                     	ds	494
  5004                           tblptru	equ	0xFF8
  5005                           tblptrh	equ	0xFF7
  5006                           tblptrl	equ	0xFF6
  5007                           tablat	equ	0xFF5
  5008                           prodh	equ	0xFF4
  5009                           prodl	equ	0xFF3
  5010                           intcon	equ	0xFF2
  5011                           indf0	equ	0xFEF
  5012                           postinc0	equ	0xFEE
  5013                           fsr0h	equ	0xFEA
  5014                           fsr0l	equ	0xFE9
  5015                           wreg	equ	0xFE8
  5016                           indf1	equ	0xFE7
  5017                           postinc1	equ	0xFE6
  5018                           postdec1	equ	0xFE5
  5019                           fsr1h	equ	0xFE2
  5020                           fsr1l	equ	0xFE1
  5021                           indf2	equ	0xFDF
  5022                           postinc2	equ	0xFDE
  5023                           postdec2	equ	0xFDD
  5024                           plusw2	equ	0xFDB
  5025                           fsr2h	equ	0xFDA
  5026                           fsr2l	equ	0xFD9
  5027                           status	equ	0xFD8
  5028                           
  5029                           	psect	cstackBANK2
  5030  000280                     __pcstackBANK2:
  5031                           	opt stack 0
  5032  000280                     doModeVerbose@id:
  5033                           	opt stack 0
  5034                           
  5035                           ; 4 bytes @ 0x0
  5036  000280                     	ds	4
  5037  000284                     doModeVerbose@preg:
  5038                           	opt stack 0
  5039                           
  5040                           ; 2 bytes @ 0x4
  5041  000284                     	ds	2
  5042  000286                     doModeVerbose@preg_1161:
  5043                           	opt stack 0
  5044                           
  5045                           ; 2 bytes @ 0x6
  5046  000286                     	ds	2
  5047  000288                     doModeVerbose@filter_class:
  5048                           	opt stack 0
  5049                           
  5050                           ; 2 bytes @ 0x8
  5051  000288                     	ds	2
  5052  00028A                     doModeVerbose@mask_class:
  5053                           	opt stack 0
  5054                           
  5055                           ; 2 bytes @ 0xA
  5056  00028A                     	ds	2
  5057  00028C                     doModeVerbose@nodeid:
  5058                           	opt stack 0
  5059                           
  5060                           ; 1 bytes @ 0xC
  5061  00028C                     	ds	1
  5062  00028D                     doModeVerbose@nodeid_1153:
  5063                           	opt stack 0
  5064                           
  5065                           ; 1 bytes @ 0xD
  5066  00028D                     	ds	1
  5067  00028E                     doModeVerbose@filter_priority:
  5068                           	opt stack 0
  5069                           
  5070                           ; 1 bytes @ 0xE
  5071  00028E                     	ds	1
  5072  00028F                     doModeVerbose@filter_type:
  5073                           	opt stack 0
  5074                           
  5075                           ; 1 bytes @ 0xF
  5076  00028F                     	ds	1
  5077  000290                     doModeVerbose@filter_nodeid:
  5078                           	opt stack 0
  5079                           
  5080                           ; 1 bytes @ 0x10
  5081  000290                     	ds	1
  5082  000291                     doModeVerbose@mask_priority:
  5083                           	opt stack 0
  5084                           
  5085                           ; 1 bytes @ 0x11
  5086  000291                     	ds	1
  5087  000292                     doModeVerbose@mask_type:
  5088                           	opt stack 0
  5089                           
  5090                           ; 1 bytes @ 0x12
  5091  000292                     	ds	1
  5092  000293                     doModeVerbose@mask_nodeid:
  5093                           	opt stack 0
  5094                           
  5095                           ; 1 bytes @ 0x13
  5096  000293                     	ds	1
  5097  000294                     _doModeVerbose$1121:
  5098                           	opt stack 0
  5099                           
  5100                           ; 2 bytes @ 0x14
  5101  000294                     	ds	2
  5102  000296                     _doModeVerbose$1133:
  5103                           	opt stack 0
  5104                           
  5105                           ; 2 bytes @ 0x16
  5106  000296                     	ds	2
  5107  000298                     _doModeVerbose$1138:
  5108                           	opt stack 0
  5109                           
  5110                           ; 2 bytes @ 0x18
  5111  000298                     	ds	2
  5112  00029A                     _doModeVerbose$1144:
  5113                           	opt stack 0
  5114                           
  5115                           ; 2 bytes @ 0x1A
  5116  00029A                     	ds	2
  5117  00029C                     _doModeVerbose$1148:
  5118                           	opt stack 0
  5119                           
  5120                           ; 2 bytes @ 0x1C
  5121  00029C                     	ds	2
  5122  00029E                     _doModeVerbose$1173:
  5123                           	opt stack 0
  5124                           
  5125                           ; 2 bytes @ 0x1E
  5126  00029E                     	ds	2
  5127  0002A0                     doModeVerbose@rv:
  5128                           	opt stack 0
  5129                           
  5130                           ; 1 bytes @ 0x20
  5131  0002A0                     	ds	1
  5132  0002A1                     doModeVerbose@page_1154:
  5133                           	opt stack 0
  5134                           
  5135                           ; 1 bytes @ 0x21
  5136  0002A1                     	ds	1
  5137  0002A2                     doModeVerbose@reg_1155:
  5138                           	opt stack 0
  5139                           
  5140                           ; 1 bytes @ 0x22
  5141  0002A2                     	ds	1
  5142  0002A3                     doModeVerbose@id_1212:
  5143                           	opt stack 0
  5144                           
  5145                           ; 4 bytes @ 0x23
  5146  0002A3                     	ds	4
  5147  0002A7                     doModeVerbose@filterno:
  5148                           	opt stack 0
  5149                           
  5150                           ; 1 bytes @ 0x27
  5151  0002A7                     	ds	1
  5152  0002A8                     doModeVerbose@maskno:
  5153                           	opt stack 0
  5154                           
  5155                           ; 1 bytes @ 0x28
  5156  0002A8                     	ds	1
  5157  0002A9                     doModeVerbose@value_1156:
  5158                           	opt stack 0
  5159                           
  5160                           ; 1 bytes @ 0x29
  5161  0002A9                     	ds	1
  5162  0002AA                     doModeVerbose@i:
  5163                           	opt stack 0
  5164                           
  5165                           ; 1 bytes @ 0x2A
  5166  0002AA                     	ds	1
  5167  0002AB                     doModeVerbose@count:
  5168                           	opt stack 0
  5169                           
  5170                           ; 1 bytes @ 0x2B
  5171  0002AB                     	ds	1
  5172  0002AC                     doModeVerbose@c:
  5173                           	opt stack 0
  5174                           
  5175                           ; 1 bytes @ 0x2C
  5176  0002AC                     	ds	1
  5177  0002AD                     doModeVerbose@page:
  5178                           	opt stack 0
  5179                           
  5180                           ; 1 bytes @ 0x2D
  5181  0002AD                     	ds	1
  5182  0002AE                     doModeVerbose@reg:
  5183                           	opt stack 0
  5184                           
  5185                           ; 1 bytes @ 0x2E
  5186  0002AE                     	ds	1
  5187  0002AF                     doModeVerbose@nodeid_1168:
  5188                           	opt stack 0
  5189                           
  5190                           ; 1 bytes @ 0x2F
  5191  0002AF                     	ds	1
  5192  0002B0                     doModeVerbose@i_1103:
  5193                           	opt stack 0
  5194                           
  5195                           ; 1 bytes @ 0x30
  5196  0002B0                     	ds	1
  5197  0002B1                     doModeVerbose@value:
  5198                           	opt stack 0
  5199                           
  5200                           ; 1 bytes @ 0x31
  5201  0002B1                     	ds	1
  5202  0002B2                     doModeVerbose@p_1109:
  5203                           	opt stack 0
  5204                           
  5205                           ; 2 bytes @ 0x32
  5206  0002B2                     	ds	2
  5207  0002B4                     doModeVerbose@p_1157:
  5208                           	opt stack 0
  5209                           
  5210                           ; 2 bytes @ 0x34
  5211  0002B4                     	ds	2
  5212  0002B6                     doModeVerbose@ifmode:
  5213                           	opt stack 0
  5214                           
  5215                           ; 1 bytes @ 0x36
  5216  0002B6                     	ds	1
  5217  0002B7                     doModeVerbose@p:
  5218                           	opt stack 0
  5219                           
  5220                           ; 2 bytes @ 0x37
  5221  0002B7                     	ds	2
  5222  0002B9                     doModeVerbose@p_1181:
  5223                           	opt stack 0
  5224                           
  5225                           ; 2 bytes @ 0x39
  5226  0002B9                     	ds	2
  5227  0002BB                     doModeVerbose@p_1200:
  5228                           	opt stack 0
  5229                           
  5230                           ; 2 bytes @ 0x3B
  5231  0002BB                     	ds	2
  5232                           tblptru	equ	0xFF8
  5233                           tblptrh	equ	0xFF7
  5234                           tblptrl	equ	0xFF6
  5235                           tablat	equ	0xFF5
  5236                           prodh	equ	0xFF4
  5237                           prodl	equ	0xFF3
  5238                           intcon	equ	0xFF2
  5239                           indf0	equ	0xFEF
  5240                           postinc0	equ	0xFEE
  5241                           fsr0h	equ	0xFEA
  5242                           fsr0l	equ	0xFE9
  5243                           wreg	equ	0xFE8
  5244                           indf1	equ	0xFE7
  5245                           postinc1	equ	0xFE6
  5246                           postdec1	equ	0xFE5
  5247                           fsr1h	equ	0xFE2
  5248                           fsr1l	equ	0xFE1
  5249                           indf2	equ	0xFDF
  5250                           postinc2	equ	0xFDE
  5251                           postdec2	equ	0xFDD
  5252                           plusw2	equ	0xFDB
  5253                           fsr2h	equ	0xFDA
  5254                           fsr2l	equ	0xFD9
  5255                           status	equ	0xFD8
  5256                           
  5257                           	psect	cstackBANK1
  5258  0001B2                     __pcstackBANK1:
  5259                           	opt stack 0
  5260  0001B2                     ??_doModeVerbose:
  5261                           
  5262                           ; 0 bytes @ 0x0
  5263  0001B2                     	ds	20
  5264                           tblptru	equ	0xFF8
  5265                           tblptrh	equ	0xFF7
  5266                           tblptrl	equ	0xFF6
  5267                           tablat	equ	0xFF5
  5268                           prodh	equ	0xFF4
  5269                           prodl	equ	0xFF3
  5270                           intcon	equ	0xFF2
  5271                           indf0	equ	0xFEF
  5272                           postinc0	equ	0xFEE
  5273                           fsr0h	equ	0xFEA
  5274                           fsr0l	equ	0xFE9
  5275                           wreg	equ	0xFE8
  5276                           indf1	equ	0xFE7
  5277                           postinc1	equ	0xFE6
  5278                           postdec1	equ	0xFE5
  5279                           fsr1h	equ	0xFE2
  5280                           fsr1l	equ	0xFE1
  5281                           indf2	equ	0xFDF
  5282                           postinc2	equ	0xFDE
  5283                           postdec2	equ	0xFDD
  5284                           plusw2	equ	0xFDB
  5285                           fsr2h	equ	0xFDA
  5286                           fsr2l	equ	0xFD9
  5287                           status	equ	0xFD8
  5288                           
  5289                           	psect	cstackBANK0
  5290  000060                     __pcstackBANK0:
  5291                           	opt stack 0
  5292  000060                     ?_WriteTimer0:
  5293                           	opt stack 0
  5294  000060                     ?_fifo_init:
  5295                           	opt stack 0
  5296  000060                     ?_OpenUSART:
  5297                           	opt stack 0
  5298  000060                     ?_writeEEPROM:
  5299                           	opt stack 0
  5300  000060                     ?_setFilter:
  5301                           	opt stack 0
  5302  000060                     ?__CANIDToRegs:
  5303                           	opt stack 0
  5304  000060                     ??_isdigit:
  5305  000060                     ?_readEEPROM:
  5306                           	opt stack 0
  5307  000060                     ?_fifo_read:
  5308                           	opt stack 0
  5309  000060                     ?_memset:
  5310                           	opt stack 0
  5311  000060                     ?_strcpy:
  5312                           	opt stack 0
  5313  000060                     ?_strchr:
  5314                           	opt stack 0
  5315  000060                     ?_strlen:
  5316                           	opt stack 0
  5317  000060                     ?_memcpy:
  5318                           	opt stack 0
  5319  000060                     ?_strcat:
  5320                           	opt stack 0
  5321  000060                     ?___lwdiv:
  5322                           	opt stack 0
  5323  000060                     ?___lwmod:
  5324                           	opt stack 0
  5325  000060                     ?___wmul:
  5326                           	opt stack 0
  5327  000060                     ?___lldiv:
  5328                           	opt stack 0
  5329  000060                     ECANSetOperationMode@mode:
  5330                           	opt stack 0
  5331  000060                     nibbleFromChar@c:
  5332                           	opt stack 0
  5333  000060                     OpenTimer0@config:
  5334                           	opt stack 0
  5335  000060                     WriteUSART@data:
  5336                           	opt stack 0
  5337  000060                     toupper@c:
  5338                           	opt stack 0
  5339  000060                     __CANIDToRegs@ptr:
  5340                           	opt stack 0
  5341  000060                     fifo_init@buf:
  5342                           	opt stack 0
  5343  000060                     fifo_read@buf:
  5344                           	opt stack 0
  5345  000060                     writeEEPROM@address:
  5346                           	opt stack 0
  5347  000060                     readEEPROM@address:
  5348                           	opt stack 0
  5349  000060                     _init_crc8$2075:
  5350                           	opt stack 0
  5351  000060                     WriteTimer0@timer0:
  5352                           	opt stack 0
  5353  000060                     OpenUSART@spbrg:
  5354                           	opt stack 0
  5355  000060                     ___lwdiv@dividend:
  5356                           	opt stack 0
  5357  000060                     ___lwmod@dividend:
  5358                           	opt stack 0
  5359  000060                     memcpy@d1:
  5360                           	opt stack 0
  5361  000060                     memset@p1:
  5362                           	opt stack 0
  5363  000060                     strcat@to:
  5364                           	opt stack 0
  5365  000060                     strchr@ptr:
  5366                           	opt stack 0
  5367  000060                     strcpy@to:
  5368                           	opt stack 0
  5369  000060                     strlen@s:
  5370                           	opt stack 0
  5371  000060                     ___wmul@multiplier:
  5372                           	opt stack 0
  5373  000060                     setFilter@val:
  5374                           	opt stack 0
  5375  000060                     ___lldiv@dividend:
  5376                           	opt stack 0
  5377                           
  5378                           ; 4 bytes @ 0x0
  5379  000060                     	ds	1
  5380  000061                     ?_putsUSART:
  5381                           	opt stack 0
  5382  000061                     ??_printBinary:
  5383  000061                     ?_strichr:
  5384                           	opt stack 0
  5385  000061                     _isdigit$2888:
  5386                           	opt stack 0
  5387  000061                     putsUSART@data:
  5388                           	opt stack 0
  5389  000061                     strichr@ptr:
  5390                           	opt stack 0
  5391                           
  5392                           ; 2 bytes @ 0x1
  5393  000061                     	ds	1
  5394  000062                     writeEEPROM@data:
  5395                           	opt stack 0
  5396  000062                     readEEPROM@data:
  5397                           	opt stack 0
  5398  000062                     OpenUSART@config:
  5399                           	opt stack 0
  5400  000062                     isdigit@c:
  5401                           	opt stack 0
  5402  000062                     fifo_init@size:
  5403                           	opt stack 0
  5404  000062                     fifo_read@nbytes:
  5405                           	opt stack 0
  5406  000062                     init_crc8@j:
  5407                           	opt stack 0
  5408  000062                     WriteTimer0@timer:
  5409                           	opt stack 0
  5410  000062                     ___lwdiv@divisor:
  5411                           	opt stack 0
  5412  000062                     ___lwmod@divisor:
  5413                           	opt stack 0
  5414  000062                     memcpy@s1:
  5415                           	opt stack 0
  5416  000062                     memset@c:
  5417                           	opt stack 0
  5418  000062                     strcat@from:
  5419                           	opt stack 0
  5420  000062                     strchr@chr:
  5421                           	opt stack 0
  5422  000062                     strcpy@from:
  5423                           	opt stack 0
  5424  000062                     strlen@cp:
  5425                           	opt stack 0
  5426  000062                     ___wmul@multiplicand:
  5427                           	opt stack 0
  5428  000062                     __CANIDToRegs@val:
  5429                           	opt stack 0
  5430                           
  5431                           ; 4 bytes @ 0x2
  5432  000062                     	ds	1
  5433  000063                     ??_putsUSART:
  5434  000063                     init_app_eeprom@i:
  5435                           	opt stack 0
  5436  000063                     printBinary@value:
  5437                           	opt stack 0
  5438  000063                     strichr@chr:
  5439                           	opt stack 0
  5440                           
  5441                           ; 2 bytes @ 0x3
  5442  000063                     	ds	1
  5443  000064                     ??_fifo_read:
  5444  000064                     ??_strchr:
  5445  000064                     ??_setFilter:
  5446  000064                     ?_hexStringToBytes:
  5447                           	opt stack 0
  5448  000064                     ?_strnicmp:
  5449                           	opt stack 0
  5450  000064                     fifo_init@f:
  5451                           	opt stack 0
  5452  000064                     init_crc8@crc:
  5453                           	opt stack 0
  5454  000064                     ___lwdiv@counter:
  5455                           	opt stack 0
  5456  000064                     ___lwmod@counter:
  5457                           	opt stack 0
  5458  000064                     printBinary@i:
  5459                           	opt stack 0
  5460  000064                     hexStringToBytes@buf:
  5461                           	opt stack 0
  5462  000064                     memcpy@n:
  5463                           	opt stack 0
  5464  000064                     memset@n:
  5465                           	opt stack 0
  5466  000064                     strcat@cp:
  5467                           	opt stack 0
  5468  000064                     strcpy@cp:
  5469                           	opt stack 0
  5470  000064                     strnicmp@s1:
  5471                           	opt stack 0
  5472  000064                     ___wmul@product:
  5473                           	opt stack 0
  5474  000064                     ___lldiv@divisor:
  5475                           	opt stack 0
  5476                           
  5477                           ; 4 bytes @ 0x4
  5478  000064                     	ds	1
  5479  000065                     init_crc8@i:
  5480                           	opt stack 0
  5481  000065                     ___lwdiv@quotient:
  5482                           	opt stack 0
  5483                           
  5484                           ; 2 bytes @ 0x5
  5485  000065                     	ds	1
  5486  000066                     ?_atoi:
  5487                           	opt stack 0
  5488  000066                     ?_strspn:
  5489                           	opt stack 0
  5490  000066                     ?_strcspn:
  5491                           	opt stack 0
  5492  000066                     __CANIDToRegs@type:
  5493                           	opt stack 0
  5494  000066                     hexStringToBytes@size:
  5495                           	opt stack 0
  5496  000066                     atoi@s:
  5497                           	opt stack 0
  5498  000066                     memcpy@d:
  5499                           	opt stack 0
  5500  000066                     memset@p:
  5501                           	opt stack 0
  5502  000066                     strnicmp@s2:
  5503                           	opt stack 0
  5504  000066                     strcspn@s1:
  5505                           	opt stack 0
  5506  000066                     strspn@s1:
  5507                           	opt stack 0
  5508                           
  5509                           ; 2 bytes @ 0x6
  5510  000066                     	ds	1
  5511  000067                     ??__CANIDToRegs:
  5512  000067                     ?_crc8:
  5513                           	opt stack 0
  5514  000067                     ?_utoa:
  5515                           	opt stack 0
  5516  000067                     crc8@crc:
  5517                           	opt stack 0
  5518  000067                     hexStringToBytes@inhex:
  5519                           	opt stack 0
  5520  000067                     utoa@buf:
  5521                           	opt stack 0
  5522                           
  5523                           ; 2 bytes @ 0x7
  5524  000067                     	ds	1
  5525  000068                     ??_atoi:
  5526  000068                     fifo_read@p:
  5527                           	opt stack 0
  5528  000068                     memcpy@s:
  5529                           	opt stack 0
  5530  000068                     strnicmp@len:
  5531                           	opt stack 0
  5532  000068                     strcspn@s2:
  5533                           	opt stack 0
  5534  000068                     strspn@s2:
  5535                           	opt stack 0
  5536  000068                     ___lldiv@quotient:
  5537                           	opt stack 0
  5538                           
  5539                           ; 4 bytes @ 0x8
  5540  000068                     	ds	1
  5541  000069                     ??_hexStringToBytes:
  5542  000069                     __CANIDToRegs@Value:
  5543                           	opt stack 0
  5544  000069                     crc8@m:
  5545                           	opt stack 0
  5546  000069                     utoa@val:
  5547                           	opt stack 0
  5548                           
  5549                           ; 2 bytes @ 0x9
  5550  000069                     	ds	1
  5551  00006A                     ??_crc8:
  5552  00006A                     ??_strnicmp:
  5553  00006A                     ?_ECANSendMessage:
  5554                           	opt stack 0
  5555  00006A                     setFilter@filter:
  5556                           	opt stack 0
  5557  00006A                     atoi@sign:
  5558                           	opt stack 0
  5559  00006A                     fifo_read@i:
  5560                           	opt stack 0
  5561  00006A                     strcspn@i:
  5562                           	opt stack 0
  5563  00006A                     strspn@i:
  5564                           	opt stack 0
  5565  00006A                     ECANSendMessage@id:
  5566                           	opt stack 0
  5567                           
  5568                           ; 4 bytes @ 0xA
  5569  00006A                     	ds	1
  5570  00006B                     setFilter@sidh:
  5571                           	opt stack 0
  5572  00006B                     atoi@a:
  5573                           	opt stack 0
  5574  00006B                     utoa@base:
  5575                           	opt stack 0
  5576                           
  5577                           ; 2 bytes @ 0xB
  5578  00006B                     	ds	1
  5579  00006C                     ?_sendEscapedUartData:
  5580                           	opt stack 0
  5581  00006C                     ?_calcCRC:
  5582                           	opt stack 0
  5583  00006C                     ?_strtok:
  5584                           	opt stack 0
  5585  00006C                     setFilter@sidl:
  5586                           	opt stack 0
  5587  00006C                     fifo_read@f:
  5588                           	opt stack 0
  5589  00006C                     ___lldiv@counter:
  5590                           	opt stack 0
  5591  00006C                     strnicmp@r:
  5592                           	opt stack 0
  5593  00006C                     sendEscapedUartData@pcrc:
  5594                           	opt stack 0
  5595  00006C                     calcCRC@p:
  5596                           	opt stack 0
  5597  00006C                     hexStringToBytes@len:
  5598                           	opt stack 0
  5599  00006C                     strtok@s1:
  5600                           	opt stack 0
  5601                           
  5602                           ; 2 bytes @ 0xC
  5603  00006C                     	ds	1
  5604  00006D                     ?_getCANFrame:
  5605                           	opt stack 0
  5606  00006D                     ?_stristr:
  5607                           	opt stack 0
  5608  00006D                     ?___llmod:
  5609                           	opt stack 0
  5610  00006D                     setFilter@eidh:
  5611                           	opt stack 0
  5612  00006D                     getCANFrame@pdlc:
  5613                           	opt stack 0
  5614  00006D                     utoa@v:
  5615                           	opt stack 0
  5616  00006D                     stristr@s1:
  5617                           	opt stack 0
  5618  00006D                     ___llmod@dividend:
  5619                           	opt stack 0
  5620                           
  5621                           ; 4 bytes @ 0xD
  5622  00006D                     	ds	1
  5623  00006E                     sendEscapedUartData@c:
  5624                           	opt stack 0
  5625  00006E                     calcCRC@len:
  5626                           	opt stack 0
  5627  00006E                     setFilter@eidl:
  5628                           	opt stack 0
  5629  00006E                     ECANSendMessage@data:
  5630                           	opt stack 0
  5631  00006E                     hexStringToBytes@p:
  5632                           	opt stack 0
  5633  00006E                     strtok@s2:
  5634                           	opt stack 0
  5635                           
  5636                           ; 2 bytes @ 0xE
  5637  00006E                     	ds	1
  5638  00006F                     ?_sendVSCPDriverCommandReply:
  5639                           	opt stack 0
  5640  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5641                           	opt stack 0
  5642  00006F                     sendVSCPDriverAck@crc:
  5643                           	opt stack 0
  5644  00006F                     sendVSCPDriverNack@crc:
  5645                           	opt stack 0
  5646  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5647                           	opt stack 0
  5648  00006F                     sendVSCPModeCapabilities@crc:
  5649                           	opt stack 0
  5650  00006F                     calcCRC@j:
  5651                           	opt stack 0
  5652  00006F                     utoa@c:
  5653                           	opt stack 0
  5654  00006F                     getCANFrame@pdata:
  5655                           	opt stack 0
  5656  00006F                     stristr@s2:
  5657                           	opt stack 0
  5658                           
  5659                           ; 2 bytes @ 0xF
  5660  00006F                     	ds	1
  5661  000070                     ?_itoa:
  5662                           	opt stack 0
  5663  000070                     sendVSCPDriverErrorFrame@crc:
  5664                           	opt stack 0
  5665  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5666                           	opt stack 0
  5667  000070                     calcCRC@crc:
  5668                           	opt stack 0
  5669  000070                     ECANSendMessage@dataLen:
  5670                           	opt stack 0
  5671  000070                     hexStringToBytes@i:
  5672                           	opt stack 0
  5673  000070                     itoa@buf:
  5674                           	opt stack 0
  5675                           
  5676                           ; 2 bytes @ 0x10
  5677  000070                     	ds	1
  5678  000071                     sendVSCPDriverCommandReply@crc:
  5679                           	opt stack 0
  5680  000071                     getCANFrame@pid:
  5681                           	opt stack 0
  5682  000071                     ECANSendMessage@msgFlags:
  5683                           	opt stack 0
  5684  000071                     ___llmod@divisor:
  5685                           	opt stack 0
  5686                           
  5687                           ; 4 bytes @ 0x11
  5688  000071                     	ds	1
  5689  000072                     ??_ECANSendMessage:
  5690  000072                     ?_getVSCPFrame:
  5691                           	opt stack 0
  5692  000072                     getVSCPFrame@pvscpclass:
  5693                           	opt stack 0
  5694  000072                     itoa@val:
  5695                           	opt stack 0
  5696  000072                     receiveSendEventCANAL@data:
  5697                           	opt stack 0
  5698  000072                     receiveSendMultiEventCANAL@data:
  5699                           	opt stack 0
  5700                           
  5701                           ; 8 bytes @ 0x12
  5702  000072                     	ds	1
  5703  000073                     ECANSendMessage@pb:
  5704                           	opt stack 0
  5705                           
  5706                           ; 18 bytes @ 0x13
  5707  000073                     	ds	1
  5708  000074                     getVSCPFrame@pvscptype:
  5709                           	opt stack 0
  5710  000074                     itoa@base:
  5711                           	opt stack 0
  5712                           
  5713                           ; 2 bytes @ 0x14
  5714  000074                     	ds	1
  5715  000075                     ___llmod@counter:
  5716                           	opt stack 0
  5717                           
  5718                           ; 1 bytes @ 0x15
  5719  000075                     	ds	1
  5720  000076                     ?_sprintf:
  5721                           	opt stack 0
  5722  000076                     ?_ultoa:
  5723                           	opt stack 0
  5724  000076                     getVSCPFrame@pNodeId:
  5725                           	opt stack 0
  5726  000076                     sprintf@sp:
  5727                           	opt stack 0
  5728  000076                     ultoa@buf:
  5729                           	opt stack 0
  5730                           
  5731                           ; 2 bytes @ 0x16
  5732  000076                     	ds	2
  5733  000078                     getVSCPFrame@pPriority:
  5734                           	opt stack 0
  5735  000078                     sprintf@f:
  5736                           	opt stack 0
  5737  000078                     ultoa@val:
  5738                           	opt stack 0
  5739  000078                     printFirmwareVersion@wrkbuf:
  5740                           	opt stack 0
  5741                           
  5742                           ; 20 bytes @ 0x18
  5743  000078                     	ds	2
  5744  00007A                     receiveSendEventCANAL@i:
  5745                           	opt stack 0
  5746  00007A                     receiveSendMultiEventCANAL@msgcount:
  5747                           	opt stack 0
  5748  00007A                     getVSCPFrame@pSize:
  5749                           	opt stack 0
  5750                           
  5751                           ; 2 bytes @ 0x1A
  5752  00007A                     	ds	1
  5753  00007B                     receiveSendMultiEventCANAL@i:
  5754                           	opt stack 0
  5755  00007B                     receiveSendEventCANAL@id:
  5756                           	opt stack 0
  5757                           
  5758                           ; 4 bytes @ 0x1B
  5759  00007B                     	ds	1
  5760  00007C                     receiveSendMultiEventCANAL@dlc:
  5761                           	opt stack 0
  5762  00007C                     getVSCPFrame@pData:
  5763                           	opt stack 0
  5764  00007C                     ultoa@base:
  5765                           	opt stack 0
  5766                           
  5767                           ; 2 bytes @ 0x1C
  5768  00007C                     	ds	1
  5769  00007D                     receiveSendMultiEventCANAL@id:
  5770                           	opt stack 0
  5771                           
  5772                           ; 4 bytes @ 0x1D
  5773  00007D                     	ds	1
  5774  00007E                     ??_sprintf:
  5775  00007E                     ??_getVSCPFrame:
  5776  00007E                     ultoa@v:
  5777                           	opt stack 0
  5778                           
  5779                           ; 4 bytes @ 0x1E
  5780  00007E                     	ds	1
  5781  00007F                     receiveSendEventCANAL@dlc:
  5782                           	opt stack 0
  5783                           
  5784                           ; 1 bytes @ 0x1F
  5785  00007F                     	ds	1
  5786  000080                     receiveSendEventCANAL@crc:
  5787                           	opt stack 0
  5788                           
  5789                           ; 1 bytes @ 0x20
  5790  000080                     	ds	1
  5791  000081                     receiveSendMultiEventCANAL@crc:
  5792                           	opt stack 0
  5793  000081                     sprintf@idx:
  5794                           	opt stack 0
  5795                           
  5796                           ; 1 bytes @ 0x21
  5797  000081                     	ds	1
  5798  000082                     receiveSendMultiEventCANAL@pos:
  5799                           	opt stack 0
  5800  000082                     ultoa@c:
  5801                           	opt stack 0
  5802  000082                     _sprintf$2137:
  5803                           	opt stack 0
  5804  000082                     getVSCPFrame@id:
  5805                           	opt stack 0
  5806                           
  5807                           ; 4 bytes @ 0x22
  5808  000082                     	ds	1
  5809  000083                     ??_receiveSendEventSLCAN:
  5810                           
  5811                           ; 0 bytes @ 0x23
  5812  000083                     	ds	1
  5813  000084                     _sprintf$2138:
  5814                           	opt stack 0
  5815                           
  5816                           ; 2 bytes @ 0x24
  5817  000084                     	ds	1
  5818  000085                     ECANSendMessage@mode:
  5819                           	opt stack 0
  5820                           
  5821                           ; 1 bytes @ 0x25
  5822  000085                     	ds	1
  5823  000086                     ECANSendMessage@buffers:
  5824                           	opt stack 0
  5825  000086                     _sprintf$2144:
  5826                           	opt stack 0
  5827  000086                     receiveSendEventSLCAN@id:
  5828                           	opt stack 0
  5829                           
  5830                           ; 4 bytes @ 0x26
  5831  000086                     	ds	1
  5832  000087                     ECANSendMessage@j:
  5833                           	opt stack 0
  5834                           
  5835                           ; 1 bytes @ 0x27
  5836  000087                     	ds	1
  5837  000088                     ECANSendMessage@tempBSEL0:
  5838                           	opt stack 0
  5839  000088                     sprintf@ap:
  5840                           	opt stack 0
  5841                           
  5842                           ; 1 bytes @ 0x28
  5843  000088                     	ds	1
  5844  000089                     ECANSendMessage@tempPtr:
  5845                           	opt stack 0
  5846  000089                     sprintf@prec:
  5847                           	opt stack 0
  5848                           
  5849                           ; 2 bytes @ 0x29
  5850  000089                     	ds	1
  5851  00008A                     receiveSendEventSLCAN@dlc:
  5852                           	opt stack 0
  5853                           
  5854                           ; 1 bytes @ 0x2A
  5855  00008A                     	ds	1
  5856  00008B                     ECANSendMessage@temp:
  5857                           	opt stack 0
  5858  00008B                     receiveSendEventSLCAN@i:
  5859                           	opt stack 0
  5860  00008B                     sprintf@width:
  5861                           	opt stack 0
  5862                           
  5863                           ; 2 bytes @ 0x2B
  5864  00008B                     	ds	1
  5865  00008C                     ECANSendMessage@i:
  5866                           	opt stack 0
  5867                           
  5868                           ; 1 bytes @ 0x2C
  5869  00008C                     	ds	1
  5870  00008D                     ECANSendMessage@ptr:
  5871                           	opt stack 0
  5872  00008D                     sprintf@_val:
  5873                           	opt stack 0
  5874                           
  5875                           ; 4 bytes @ 0x2D
  5876  00008D                     	ds	2
  5877  00008F                     ?_sendCANFrame:
  5878                           	opt stack 0
  5879  00008F                     sendCANFrame@id:
  5880                           	opt stack 0
  5881                           
  5882                           ; 4 bytes @ 0x2F
  5883  00008F                     	ds	2
  5884  000091                     sprintf@c:
  5885                           	opt stack 0
  5886                           
  5887                           ; 1 bytes @ 0x31
  5888  000091                     	ds	1
  5889  000092                     sprintf@flag:
  5890                           	opt stack 0
  5891                           
  5892                           ; 2 bytes @ 0x32
  5893  000092                     	ds	1
  5894  000093                     sendCANFrame@dlc:
  5895                           	opt stack 0
  5896                           
  5897                           ; 1 bytes @ 0x33
  5898  000093                     	ds	1
  5899  000094                     ??_receivePrintEventVerbose:
  5900  000094                     _printStatistics$1359:
  5901                           	opt stack 0
  5902  000094                     _printErrors$1384:
  5903                           	opt stack 0
  5904  000094                     sendCANFrame@pdata:
  5905                           	opt stack 0
  5906                           
  5907                           ; 2 bytes @ 0x34
  5908  000094                     	ds	2
  5909  000096                     ??_doModeSLCAN:
  5910  000096                     ??_receiveVSCPModeCanalMsg:
  5911  000096                     ?_sendVSCPFrame:
  5912                           	opt stack 0
  5913  000096                     _printStatistics$1365:
  5914                           	opt stack 0
  5915  000096                     _printErrors$1390:
  5916                           	opt stack 0
  5917  000096                     sendVSCPFrame@vscpclass:
  5918                           	opt stack 0
  5919                           
  5920                           ; 2 bytes @ 0x36
  5921  000096                     	ds	2
  5922  000098                     sendVSCPFrame@vscptype:
  5923                           	opt stack 0
  5924  000098                     _printStatistics$1371:
  5925                           	opt stack 0
  5926  000098                     _printErrors$1396:
  5927                           	opt stack 0
  5928                           
  5929                           ; 2 bytes @ 0x38
  5930  000098                     	ds	1
  5931  000099                     sendVSCPFrame@nodeid:
  5932                           	opt stack 0
  5933  000099                     _receivePrintEventVerbose$1266:
  5934                           	opt stack 0
  5935                           
  5936                           ; 2 bytes @ 0x39
  5937  000099                     	ds	1
  5938  00009A                     sendVSCPFrame@priority:
  5939                           	opt stack 0
  5940  00009A                     _printStatistics$1377:
  5941                           	opt stack 0
  5942  00009A                     _printErrors$1402:
  5943                           	opt stack 0
  5944                           
  5945                           ; 2 bytes @ 0x3A
  5946  00009A                     	ds	1
  5947  00009B                     sendVSCPFrame@size:
  5948                           	opt stack 0
  5949  00009B                     _receivePrintEventVerbose$1271:
  5950                           	opt stack 0
  5951                           
  5952                           ; 2 bytes @ 0x3B
  5953  00009B                     	ds	1
  5954  00009C                     _printErrors$1408:
  5955                           	opt stack 0
  5956  00009C                     sendVSCPFrame@pData:
  5957                           	opt stack 0
  5958                           
  5959                           ; 2 bytes @ 0x3C
  5960  00009C                     	ds	1
  5961  00009D                     _receivePrintEventVerbose$1276:
  5962                           	opt stack 0
  5963  00009D                     doModeSLCAN@id:
  5964                           	opt stack 0
  5965                           
  5966                           ; 4 bytes @ 0x3D
  5967  00009D                     	ds	1
  5968  00009E                     ??_sendVSCPFrame:
  5969  00009E                     _printErrors$1417:
  5970                           	opt stack 0
  5971                           
  5972                           ; 2 bytes @ 0x3E
  5973  00009E                     	ds	1
  5974  00009F                     _receivePrintEventVerbose$1281:
  5975                           	opt stack 0
  5976                           
  5977                           ; 2 bytes @ 0x3F
  5978  00009F                     	ds	2
  5979  0000A1                     doModeSLCAN@dlc:
  5980                           	opt stack 0
  5981  0000A1                     _receivePrintEventVerbose$1286:
  5982                           	opt stack 0
  5983                           
  5984                           ; 2 bytes @ 0x41
  5985  0000A1                     	ds	1
  5986  0000A2                     doModeSLCAN@c:
  5987                           	opt stack 0
  5988                           
  5989                           ; 1 bytes @ 0x42
  5990  0000A2                     	ds	1
  5991  0000A3                     doModeSLCAN@rv:
  5992                           	opt stack 0
  5993  0000A3                     _receivePrintEventVerbose$1291:
  5994                           	opt stack 0
  5995                           
  5996                           ; 2 bytes @ 0x43
  5997  0000A3                     	ds	2
  5998  0000A5                     receivePrintEventVerbose@i:
  5999                           	opt stack 0
  6000                           
  6001                           ; 1 bytes @ 0x45
  6002  0000A5                     	ds	5
  6003  0000AA                     receiveVSCPModeCanalMsg@data:
  6004                           	opt stack 0
  6005                           
  6006                           ; 8 bytes @ 0x4A
  6007  0000AA                     	ds	8
  6008  0000B2                     receiveVSCPModeCanalMsg@id:
  6009                           	opt stack 0
  6010  0000B2                     sendVSCPFrame@id:
  6011                           	opt stack 0
  6012                           
  6013                           ; 4 bytes @ 0x52
  6014  0000B2                     	ds	4
  6015  0000B6                     ?_readRegisterExtended:
  6016                           	opt stack 0
  6017  0000B6                     ?_writeRegisterExtended:
  6018                           	opt stack 0
  6019  0000B6                     ?_readRegister:
  6020                           	opt stack 0
  6021  0000B6                     receiveVSCPModeCanalMsg@dlc:
  6022                           	opt stack 0
  6023  0000B6                     readRegister@reg:
  6024                           	opt stack 0
  6025  0000B6                     readRegisterExtended@page:
  6026                           	opt stack 0
  6027  0000B6                     writeRegisterExtended@page:
  6028                           	opt stack 0
  6029                           
  6030                           ; 2 bytes @ 0x56
  6031  0000B6                     	ds	1
  6032  0000B7                     doModeVscp@c:
  6033                           	opt stack 0
  6034  0000B7                     readRegister@timeout:
  6035                           	opt stack 0
  6036                           
  6037                           ; 2 bytes @ 0x57
  6038  0000B7                     	ds	1
  6039  0000B8                     readRegisterExtended@reg:
  6040                           	opt stack 0
  6041  0000B8                     writeRegisterExtended@reg:
  6042                           	opt stack 0
  6043                           
  6044                           ; 1 bytes @ 0x58
  6045  0000B8                     	ds	1
  6046  0000B9                     readRegister@value:
  6047                           	opt stack 0
  6048  0000B9                     readRegisterExtended@timeout:
  6049                           	opt stack 0
  6050  0000B9                     writeRegisterExtended@timeout:
  6051                           	opt stack 0
  6052                           
  6053                           ; 2 bytes @ 0x59
  6054  0000B9                     	ds	1
  6055  0000BA                     ??_readRegister:
  6056                           
  6057                           ; 0 bytes @ 0x5A
  6058  0000BA                     	ds	1
  6059  0000BB                     readRegisterExtended@value:
  6060                           	opt stack 0
  6061  0000BB                     writeRegisterExtended@value:
  6062                           	opt stack 0
  6063                           
  6064                           ; 2 bytes @ 0x5B
  6065  0000BB                     	ds	2
  6066  0000BD                     ??_readRegisterExtended:
  6067  0000BD                     ??_writeRegisterExtended:
  6068                           
  6069                           ; 0 bytes @ 0x5D
  6070  0000BD                     	ds	1
  6071  0000BE                     readRegister@nodeid:
  6072                           	opt stack 0
  6073                           
  6074                           ; 1 bytes @ 0x5E
  6075  0000BE                     	ds	1
  6076  0000BF                     printGUID@nodeid:
  6077                           	opt stack 0
  6078  0000BF                     printMDF@nodeid:
  6079                           	opt stack 0
  6080  0000BF                     printNodeFirmwareVersion@nodeid:
  6081                           	opt stack 0
  6082                           
  6083                           ; 1 bytes @ 0x5F
  6084  0000BF                     	ds	1
  6085  0000C0                     printMDF@value:
  6086                           	opt stack 0
  6087  0000C0                     printGUID@buf:
  6088                           	opt stack 0
  6089  0000C0                     printNodeFirmwareVersion@buf:
  6090                           	opt stack 0
  6091                           
  6092                           ; 3 bytes @ 0x60
  6093  0000C0                     	ds	1
  6094  0000C1                     readRegisterExtended@nodeid:
  6095                           	opt stack 0
  6096  0000C1                     writeRegisterExtended@nodeid:
  6097                           	opt stack 0
  6098  0000C1                     printMDF@p:
  6099                           	opt stack 0
  6100                           
  6101                           ; 2 bytes @ 0x61
  6102  0000C1                     	ds	2
  6103  0000C3                     printGUID@value:
  6104                           	opt stack 0
  6105  0000C3                     printMDF@i:
  6106                           	opt stack 0
  6107  0000C3                     printNodeFirmwareVersion@value:
  6108                           	opt stack 0
  6109                           
  6110                           ; 1 bytes @ 0x63
  6111  0000C3                     	ds	1
  6112  0000C4                     printGUID@i:
  6113                           	opt stack 0
  6114  0000C4                     printNodeFirmwareVersion@i:
  6115                           	opt stack 0
  6116                           
  6117                           ; 1 bytes @ 0x64
  6118  0000C4                     	ds	1
  6119  0000C5                     _findNodes$1461:
  6120                           	opt stack 0
  6121                           
  6122                           ; 2 bytes @ 0x65
  6123  0000C5                     	ds	2
  6124  0000C7                     findNodes@nFound:
  6125                           	opt stack 0
  6126                           
  6127                           ; 1 bytes @ 0x67
  6128  0000C7                     	ds	1
  6129  0000C8                     findNodes@value:
  6130                           	opt stack 0
  6131                           
  6132                           ; 1 bytes @ 0x68
  6133  0000C8                     	ds	1
  6134  0000C9                     findNodes@i:
  6135                           	opt stack 0
  6136                           
  6137                           ; 1 bytes @ 0x69
  6138  0000C9                     	ds	1
  6139  0000CA                     
  6140                           ; 2 bytes @ 0x6A
  6141  0000CA                     	ds	2
  6142  0000CC                     
  6143                           ; 3 bytes @ 0x6C
  6144  0000CC                     	ds	3
  6145  0000CF                     ??_main:
  6146                           
  6147                           ; 0 bytes @ 0x6F
  6148  0000CF                     	ds	1
  6149  0000D0                     main@c:
  6150                           	opt stack 0
  6151                           
  6152                           ; 1 bytes @ 0x70
  6153  0000D0                     	ds	1
  6154                           tblptru	equ	0xFF8
  6155                           tblptrh	equ	0xFF7
  6156                           tblptrl	equ	0xFF6
  6157                           tablat	equ	0xFF5
  6158                           prodh	equ	0xFF4
  6159                           prodl	equ	0xFF3
  6160                           intcon	equ	0xFF2
  6161                           indf0	equ	0xFEF
  6162                           postinc0	equ	0xFEE
  6163                           fsr0h	equ	0xFEA
  6164                           fsr0l	equ	0xFE9
  6165                           wreg	equ	0xFE8
  6166                           indf1	equ	0xFE7
  6167                           postinc1	equ	0xFE6
  6168                           postdec1	equ	0xFE5
  6169                           fsr1h	equ	0xFE2
  6170                           fsr1l	equ	0xFE1
  6171                           indf2	equ	0xFDF
  6172                           postinc2	equ	0xFDE
  6173                           postdec2	equ	0xFDD
  6174                           plusw2	equ	0xFDB
  6175                           fsr2h	equ	0xFDA
  6176                           fsr2l	equ	0xFD9
  6177                           status	equ	0xFD8
  6178                           
  6179                           	psect	cstackCOMRAM
  6180  000001                     __pcstackCOMRAM:
  6181                           	opt stack 0
  6182  000001                     ?__RegsToCANID:
  6183                           	opt stack 0
  6184  000001                     ?i1_WriteTimer0:
  6185                           	opt stack 0
  6186  000001                     ?_fifo_write:
  6187                           	opt stack 0
  6188  000001                     ?_fifo_getFree:
  6189                           	opt stack 0
  6190  000001                     ?__ECANPointBuffer:
  6191                           	opt stack 0
  6192  000001                     fifo_write@buf:
  6193                           	opt stack 0
  6194  000001                     ReadUSART@data:
  6195                           	opt stack 0
  6196  000001                     __RegsToCANID@ptr:
  6197                           	opt stack 0
  6198  000001                     i1WriteTimer0@timer0:
  6199                           	opt stack 0
  6200                           
  6201                           ; 2 bytes @ 0x0
  6202  000001                     	ds	1
  6203  000002                     fifo_write@nbytes:
  6204                           	opt stack 0
  6205                           
  6206                           ; 4 bytes @ 0x1
  6207  000002                     	ds	1
  6208  000003                     ??_fifo_getFree:
  6209  000003                     __RegsToCANID@val:
  6210                           	opt stack 0
  6211  000003                     i1WriteTimer0@timer:
  6212                           	opt stack 0
  6213                           
  6214                           ; 2 bytes @ 0x2
  6215  000003                     	ds	1
  6216  000004                     __RegsToCANID@type:
  6217                           	opt stack 0
  6218  000004                     __ECANPointBuffer@b:
  6219                           	opt stack 0
  6220                           
  6221                           ; 1 bytes @ 0x3
  6222  000004                     	ds	1
  6223  000005                     ??__RegsToCANID:
  6224  000005                     __ECANPointBuffer@pt:
  6225                           	opt stack 0
  6226                           
  6227                           ; 2 bytes @ 0x4
  6228  000005                     	ds	1
  6229  000006                     ??_fifo_write:
  6230                           
  6231                           ; 0 bytes @ 0x5
  6232  000006                     	ds	1
  6233  000007                     __RegsToCANID@Value:
  6234                           	opt stack 0
  6235                           
  6236                           ; 1 bytes @ 0x6
  6237  000007                     	ds	1
  6238  000008                     ?_ECANReceiveMessage:
  6239                           	opt stack 0
  6240  000008                     ECANReceiveMessage@data:
  6241                           	opt stack 0
  6242                           
  6243                           ; 1 bytes @ 0x7
  6244  000008                     	ds	1
  6245  000009                     ECANReceiveMessage@dataLen:
  6246                           	opt stack 0
  6247                           
  6248                           ; 1 bytes @ 0x8
  6249  000009                     	ds	1
  6250  00000A                     ECANReceiveMessage@msgFlags:
  6251                           	opt stack 0
  6252  00000A                     fifo_write@p:
  6253                           	opt stack 0
  6254                           
  6255                           ; 1 bytes @ 0x9
  6256  00000A                     	ds	1
  6257  00000B                     fifo_getFree@f:
  6258                           	opt stack 0
  6259  00000B                     ECANReceiveMessage@savedPtr:
  6260                           	opt stack 0
  6261  00000B                     fifo_write@i:
  6262                           	opt stack 0
  6263                           
  6264                           ; 4 bytes @ 0xA
  6265  00000B                     	ds	2
  6266  00000D                     ECANReceiveMessage@id:
  6267                           	opt stack 0
  6268                           
  6269                           ; 1 bytes @ 0xC
  6270  00000D                     	ds	1
  6271  00000E                     ECANReceiveMessage@i:
  6272                           	opt stack 0
  6273                           
  6274                           ; 1 bytes @ 0xD
  6275  00000E                     	ds	1
  6276  00000F                     ECANReceiveMessage@mode:
  6277                           	opt stack 0
  6278  00000F                     fifo_write@f:
  6279                           	opt stack 0
  6280                           
  6281                           ; 1 bytes @ 0xE
  6282  00000F                     	ds	1
  6283  000010                     ECANReceiveMessage@temp:
  6284                           	opt stack 0
  6285                           
  6286                           ; 1 bytes @ 0xF
  6287  000010                     	ds	1
  6288  000011                     ECANReceiveMessage@ptr:
  6289                           	opt stack 0
  6290                           
  6291                           ; 2 bytes @ 0x10
  6292  000011                     	ds	2
  6293  000013                     ??_Interrupt:
  6294                           
  6295                           ; 0 bytes @ 0x12
  6296  000013                     	ds	9
  6297  00001C                     Interrupt@data:
  6298                           	opt stack 0
  6299                           
  6300                           ; 8 bytes @ 0x1B
  6301  00001C                     	ds	8
  6302  000024                     Interrupt@c:
  6303                           	opt stack 0
  6304                           
  6305                           ; 1 bytes @ 0x23
  6306  000024                     	ds	1
  6307  000025                     Interrupt@dlc:
  6308                           	opt stack 0
  6309                           
  6310                           ; 1 bytes @ 0x24
  6311  000025                     	ds	1
  6312  000026                     Interrupt@id:
  6313                           	opt stack 0
  6314                           
  6315                           ; 4 bytes @ 0x25
  6316  000026                     	ds	4
  6317  00002A                     Interrupt@flags:
  6318                           	opt stack 0
  6319                           
  6320                           ; 1 bytes @ 0x29
  6321  00002A                     	ds	1
  6322                           tblptru	equ	0xFF8
  6323                           tblptrh	equ	0xFF7
  6324                           tblptrl	equ	0xFF6
  6325                           tablat	equ	0xFF5
  6326                           prodh	equ	0xFF4
  6327                           prodl	equ	0xFF3
  6328                           intcon	equ	0xFF2
  6329                           indf0	equ	0xFEF
  6330                           postinc0	equ	0xFEE
  6331                           fsr0h	equ	0xFEA
  6332                           fsr0l	equ	0xFE9
  6333                           wreg	equ	0xFE8
  6334                           indf1	equ	0xFE7
  6335                           postinc1	equ	0xFE6
  6336                           postdec1	equ	0xFE5
  6337                           fsr1h	equ	0xFE2
  6338                           fsr1l	equ	0xFE1
  6339                           indf2	equ	0xFDF
  6340                           postinc2	equ	0xFDE
  6341                           postdec2	equ	0xFDD
  6342                           plusw2	equ	0xFDB
  6343                           fsr2h	equ	0xFDA
  6344                           fsr2l	equ	0xFD9
  6345                           status	equ	0xFD8
  6346                           
  6347 ;;
  6348 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6349 ;;
  6350 ;; *************** function _main *****************
  6351 ;; Defined at:
  6352 ;;		line 255 in file "main.c"
  6353 ;; Parameters:    Size  Location     Type
  6354 ;;  argc            2  106[BANK0 ] int 
  6355 ;;  argv            3  108[BANK0 ] PTR PTR unsigned char 
  6356 ;; Auto vars:     Size  Location     Type
  6357 ;;  c               1  112[BANK0 ] unsigned char 
  6358 ;; Return value:  Size  Location     Type
  6359 ;;                  2  106[BANK0 ] int 
  6360 ;; Registers used:
  6361 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6362 ;; Tracked objects:
  6363 ;;		On entry : 0/0
  6364 ;;		On exit  : F/0
  6365 ;;		Unchanged: 0/0
  6366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6367 ;;      Params:         0       5       0       0       0       0       0
  6368 ;;      Locals:         0       1       0       0       0       0       0
  6369 ;;      Temps:          0       1       0       0       0       0       0
  6370 ;;      Totals:         0       7       0       0       0       0       0
  6371 ;;Total ram usage:        7 bytes
  6372 ;; Hardware stack levels required when called:   11
  6373 ;; This function calls:
  6374 ;;		_fifo_init
  6375 ;;		_init_crc8
  6376 ;;		_readEEPROM
  6377 ;;		_vscp_restoreDefaults
  6378 ;;		_init
  6379 ;;		_putsUSART
  6380 ;;		_printFirmwareVersion
  6381 ;;		_printMode
  6382 ;;		_fifo_read
  6383 ;;		_doModeVerbose
  6384 ;;		_doModeVscp
  6385 ;;		_doModeSLCAN
  6386 ;;		_doModeVscpNode
  6387 ;; This function is called by:
  6388 ;;		Startup code after reset
  6389 ;; This function uses a non-reentrant model
  6390 ;;
  6391                           
  6392                           	psect	text0
  6393  0033D6                     __ptext0:
  6394                           	opt stack 0
  6395  0033D6                     _main:
  6396                           	opt stack 20
  6397                           
  6398                           ;main.c: 257: caps.maxVscpFrames = 1;
  6399                           
  6400                           ;incstack = 0
  6401                           ;incstack = 0
  6402  0033D6  0E01               	movlw	1
  6403  0033D8  0100               	movlb	0	; () banked
  6404  0033DA  6FF5               	movwf	_caps& (0+255),b
  6405                           
  6406                           ;main.c: 258: caps.maxCanalFrames = 1;
  6407  0033DC  6FF6               	movwf	(_caps+1)& (0+255),b
  6408                           
  6409                           ; BSR set to: 0
  6410                           ;main.c: 263: fifo_init( &serialInputFifo, inputBuffer, sizeof ( inputBuffer));
  6411  0033DE  0E02               	movlw	high _inputBuffer
  6412  0033E0  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6413  0033E2  0E00               	movlw	low _inputBuffer
  6414  0033E4  6F60               	movwf	?_fifo_init& (0+255),b
  6415  0033E6  6B63               	clrf	(?_fifo_init+3)& (0+255),b
  6416  0033E8  0E80               	movlw	128
  6417  0033EA  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6418  0033EC  0E48               	movlw	_serialInputFifo& (0+255)
  6419  0033EE  EC10  F02A         	call	_fifo_init
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;main.c: 264: fifo_init( &canInputFifo, caninputBuffer, sizeof ( caninputBuffer));
  6423  0033F2  0E04               	movlw	high _caninputBuffer
  6424  0033F4  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6425  0033F6  0E00               	movlw	low _caninputBuffer
  6426  0033F8  6F60               	movwf	?_fifo_init& (0+255),b
  6427  0033FA  0E01               	movlw	1
  6428  0033FC  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6429  0033FE  0EEE               	movlw	238
  6430  003400  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6431  003402  0E40               	movlw	_canInputFifo& (0+255)
  6432  003404  EC10  F02A         	call	_fifo_init
  6433                           
  6434                           ; BSR set to: 0
  6435                           ;main.c: 267: init_crc8();
  6436  003408  EC44  F027         	call	_init_crc8	;wreg free
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;main.c: 271: if ( ( 0x55 != readEEPROM(0x01) ) ||
  6440                           ;main.c: 272: ( 0xaa != readEEPROM(0x02) ) ) {
  6441  00340C  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6442  00340E  0E01               	movlw	1
  6443  003410  6F60               	movwf	?_readEEPROM& (0+255),b
  6444  003412  ECAB  F02B         	call	_readEEPROM	;wreg free
  6445  003416  0A55               	xorlw	85
  6446  003418  E107               	bnz	l9800
  6447                           
  6448                           ; BSR set to: 0
  6449  00341A  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6450  00341C  0E02               	movlw	2
  6451  00341E  6F60               	movwf	?_readEEPROM& (0+255),b
  6452  003420  ECAB  F02B         	call	_readEEPROM	;wreg free
  6453  003424  0AAA               	xorlw	170
  6454  003426  A4D8               	btfss	status,2,c
  6455  003428                     l9800:
  6456                           
  6457                           ; BSR set to: 0
  6458                           ;main.c: 273: vscp_restoreDefaults();
  6459  003428  ECBD  F02B         	call	_vscp_restoreDefaults	;wreg free
  6460                           
  6461                           ;main.c: 274: }
  6462                           ;main.c: 277: init();
  6463  00342C  EC66  F029         	call	_init	;wreg free
  6464                           
  6465                           ; BSR set to: 0
  6466                           ;main.c: 281: _delay((unsigned long)((10)*(40000000/4000.0)));
  6467  003430  0E82               	movlw	130
  6468  003432  6FCF               	movwf	??_main& (0+255),b
  6469  003434  0EDD               	movlw	221
  6470  003436                     u17137:
  6471  003436  2EE8               	decfsz	wreg,f,c
  6472  003438  D7FE               	goto	u17137
  6473  00343A  2FCF               	decfsz	??_main& (0+255),f,b
  6474  00343C  D7FC               	goto	u17137
  6475  00343E  D000               	nop2	
  6476                           
  6477                           ;main.c: 285: putsUSART((char *) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6478  003440  0E79               	movlw	high STR_1
  6479  003442  0100               	movlb	0	; () banked
  6480  003444  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6481  003446  0E2F               	movlw	low STR_1
  6482  003448  6F61               	movwf	?_putsUSART& (0+255),b
  6483  00344A  ECC9  F028         	call	_putsUSART	;wreg free
  6484                           
  6485                           ;main.c: 286: putsUSART((char *) "Copyright (C) 2014-2015 Grodans Paradis AB, Sweden\r\n
      +                          ");
  6486  00344E  0E74               	movlw	high STR_2
  6487  003450  0100               	movlb	0	; () banked
  6488  003452  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6489  003454  0E8D               	movlw	low STR_2
  6490  003456  6F61               	movwf	?_putsUSART& (0+255),b
  6491  003458  ECC9  F028         	call	_putsUSART	;wreg free
  6492                           
  6493                           ;main.c: 287: putsUSART((char *) "http://www.paradiseofthefrog.com\r\n");
  6494  00345C  0E79               	movlw	high STR_3
  6495  00345E  0100               	movlb	0	; () banked
  6496  003460  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6497  003462  0E9D               	movlw	low STR_3
  6498  003464  6F61               	movwf	?_putsUSART& (0+255),b
  6499  003466  ECC9  F028         	call	_putsUSART	;wreg free
  6500                           
  6501                           ;main.c: 288: printFirmwareVersion();
  6502  00346A  EC0C  F025         	call	_printFirmwareVersion	;wreg free
  6503                           
  6504                           ;main.c: 289: printMode();
  6505  00346E  ECCE  F026         	call	_printMode	;wreg free
  6506                           
  6507                           ;main.c: 293: if (0 && (0 != mode)) {
  6508  003472  D026               	goto	l9834
  6509  003474                     l421:
  6510                           
  6511                           ; BSR set to: 0
  6512  003474  0004               	clrwdt		;# 
  6513                           
  6514                           ;main.c: 303: (INTCONbits.GIE = 0);
  6515  003476  9EF2               	bcf	intcon,7,c	;volatile
  6516                           
  6517                           ;main.c: 304: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6518  003478  0100               	movlb	0	; () banked
  6519  00347A  0E00               	movlw	high main@c
  6520  00347C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6521  00347E  0ED0               	movlw	low main@c
  6522  003480  6F60               	movwf	?_fifo_read& (0+255),b
  6523  003482  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6524  003484  0E01               	movlw	1
  6525  003486  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6526  003488  0E48               	movlw	_serialInputFifo& (0+255)
  6527  00348A  EC6F  F021         	call	_fifo_read
  6528  00348E  0560               	decf	?_fifo_read& (0+255),w,b
  6529  003490  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6530  003492  E10C               	bnz	l422
  6531                           
  6532                           ; BSR set to: 0
  6533                           ;main.c: 305: (INTCONbits.GIE = 1);
  6534  003494  8EF2               	bsf	intcon,7,c	;volatile
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;main.c: 306: if ('v' == c) {
  6538  003496  51D0               	movf	main@c& (0+255),w,b
  6539  003498  0A76               	xorlw	118
  6540  00349A  E108               	bnz	l422
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;main.c: 307: mode = 0;
  6544  00349C  6BF1               	clrf	_mode& (0+255),b
  6545                           
  6546                           ; BSR set to: 0
  6547                           ;main.c: 308: putsUSART((char *) "Temporary verbose mode set\r\n");
  6548  00349E  0E7B               	movlw	high STR_5
  6549  0034A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6550  0034A2  0E2A               	movlw	low STR_5
  6551  0034A4  6F61               	movwf	?_putsUSART& (0+255),b
  6552  0034A6  ECC9  F028         	call	_putsUSART	;wreg free
  6553                           
  6554                           ;main.c: 309: break;
  6555  0034AA  D00A               	goto	l9834
  6556  0034AC                     l422:
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;main.c: 310: }
  6560                           ;main.c: 311: }
  6561                           ;main.c: 312: (INTCONbits.GIE = 1);
  6562  0034AC  8EF2               	bsf	intcon,7,c	;volatile
  6563                           
  6564                           ; BSR set to: 0
  6565  0034AE  0EB8               	movlw	184
  6566  0034B0  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
  6567  0034B2  0E0B               	movlw	11
  6568  0034B4  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6569  0034B6  0E00               	movlw	0
  6570  0034B8  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6571  0034BA  0E00               	movlw	0
  6572  0034BC  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6573  0034BE  E3DA               	bnc	l421
  6574  0034C0                     l9834:
  6575                           
  6576                           ;main.c: 313: }
  6577                           ;main.c: 314: }
  6578                           ;main.c: 316: ledFunctionality = 1;
  6579  0034C0  0E01               	movlw	1
  6580  0034C2  6E3F               	movwf	_ledFunctionality,c
  6581  0034C4                     l425:
  6582  0034C4  0004               	clrwdt		;# 
  6583                           
  6584                           ;main.c: 324: if (COMSTATbits.TXBO) {
  6585  0034C6  AA74               	btfss	3956,5,c	;volatile
  6586  0034C8  D002               	goto	l426
  6587                           
  6588                           ;main.c: 326: ledFunctionality = 6;
  6589  0034CA  0E06               	movlw	6
  6590  0034CC  D009               	goto	L1
  6591  0034CE                     l426:
  6592                           
  6593                           ;main.c: 328: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6594  0034CE  B874               	btfsc	3956,4,c	;volatile
  6595  0034D0  D002               	goto	l9842
  6596  0034D2  A674               	btfss	3956,3,c	;volatile
  6597  0034D4  D002               	goto	l428
  6598  0034D6                     l9842:
  6599                           
  6600                           ;main.c: 330: ledFunctionality = 5;
  6601  0034D6  0E05               	movlw	5
  6602  0034D8  D003               	goto	L1
  6603  0034DA                     l428:
  6604                           
  6605                           ;main.c: 334: ledFunctionality = 4;
  6606  0034DA  0E04               	movlw	4
  6607                           
  6608                           ;main.c: 332: else if (COMSTATbits.EWARN) {
  6609  0034DC  A074               	btfss	3956,0,c	;volatile
  6610                           
  6611                           ;main.c: 336: else {
  6612                           ;main.c: 338: ledFunctionality = 1;
  6613                           
  6614                           ;main.c: 335: }
  6615  0034DE  0E01               	movlw	1
  6616  0034E0                     L1:
  6617  0034E0  6E3F               	movwf	_ledFunctionality,c
  6618                           
  6619                           ;main.c: 339: }
  6620                           ;main.c: 342: if (COMSTATbits.RXBnOVFL) {
  6621  0034E2  AC74               	btfss	3956,6,c	;volatile
  6622  0034E4  D007               	goto	l9854
  6623                           
  6624                           ;main.c: 343: can_receiveOverruns++;
  6625  0034E6  0100               	movlb	0	; () banked
  6626  0034E8  2BD1               	incf	_can_receiveOverruns& (0+255),f,b
  6627  0034EA  0E00               	movlw	0
  6628  0034EC  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6629  0034EE  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6630  0034F0  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;main.c: 344: COMSTATbits.RXBnOVFL = 0;
  6634  0034F2  9C74               	bcf	3956,6,c	;volatile
  6635  0034F4                     l9854:
  6636                           
  6637                           ;main.c: 345: }
  6638                           ;main.c: 347: if (0 == mode) {
  6639  0034F4  0100               	movlb	0	; () banked
  6640  0034F6  67F1               	tstfsz	_mode& (0+255),b
  6641  0034F8  D003               	goto	l9858
  6642  0034FA                     l9856:
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;main.c: 348: doModeVerbose();
  6646  0034FA  EC36  F001         	call	_doModeVerbose	;wreg free
  6647                           
  6648                           ;main.c: 349: }
  6649  0034FE  D7E2               	goto	l425
  6650  003500                     l9858:
  6651                           
  6652                           ; BSR set to: 0
  6653                           ;main.c: 350: else if (1 == mode) {
  6654  003500  05F1               	decf	_mode& (0+255),w,b
  6655  003502  E103               	bnz	l9862
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;main.c: 351: doModeVscp();
  6659  003504  EC1D  F015         	call	_doModeVscp	;wreg free
  6660                           
  6661                           ;main.c: 352: }
  6662  003508  D7DD               	goto	l425
  6663  00350A                     l9862:
  6664                           
  6665                           ; BSR set to: 0
  6666                           ;main.c: 353: else if (2 == mode) {
  6667  00350A  51F1               	movf	_mode& (0+255),w,b
  6668  00350C  0A02               	xorlw	2
  6669  00350E  E103               	bnz	l9866
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;main.c: 354: doModeSLCAN();
  6673  003510  ECA7  F00E         	call	_doModeSLCAN	;wreg free
  6674                           
  6675                           ;main.c: 355: }
  6676  003514  D7D7               	goto	l425
  6677  003516                     l9866:
  6678                           
  6679                           ; BSR set to: 0
  6680                           ;main.c: 356: else if (3 == mode) {
  6681  003516  51F1               	movf	_mode& (0+255),w,b
  6682  003518  0A03               	xorlw	3
  6683  00351A  E1EF               	bnz	l9856
  6684                           
  6685                           ; BSR set to: 0
  6686                           ;main.c: 357: doModeVscpNode();
  6687  00351C  ECC1  F02B         	call	_doModeVscpNode	;wreg free
  6688                           
  6689                           ;main.c: 358: }
  6690  003520  D7D1               	goto	l425
  6691  003522                     __end_of_main:
  6692                           	opt stack 0
  6693                           tblptru	equ	0xFF8
  6694                           tblptrh	equ	0xFF7
  6695                           tblptrl	equ	0xFF6
  6696                           tablat	equ	0xFF5
  6697                           prodh	equ	0xFF4
  6698                           prodl	equ	0xFF3
  6699                           intcon	equ	0xFF2
  6700                           indf0	equ	0xFEF
  6701                           postinc0	equ	0xFEE
  6702                           fsr0h	equ	0xFEA
  6703                           fsr0l	equ	0xFE9
  6704                           wreg	equ	0xFE8
  6705                           indf1	equ	0xFE7
  6706                           postinc1	equ	0xFE6
  6707                           postdec1	equ	0xFE5
  6708                           fsr1h	equ	0xFE2
  6709                           fsr1l	equ	0xFE1
  6710                           indf2	equ	0xFDF
  6711                           postinc2	equ	0xFDE
  6712                           postdec2	equ	0xFDD
  6713                           plusw2	equ	0xFDB
  6714                           fsr2h	equ	0xFDA
  6715                           fsr2l	equ	0xFD9
  6716                           status	equ	0xFD8
  6717                           
  6718 ;; *************** function _doModeVscpNode *****************
  6719 ;; Defined at:
  6720 ;;		line 1501 in file "main.c"
  6721 ;; Parameters:    Size  Location     Type
  6722 ;;		None
  6723 ;; Auto vars:     Size  Location     Type
  6724 ;;		None
  6725 ;; Return value:  Size  Location     Type
  6726 ;;		None               void
  6727 ;; Registers used:
  6728 ;;		None
  6729 ;; Tracked objects:
  6730 ;;		On entry : F/0
  6731 ;;		On exit  : F/0
  6732 ;;		Unchanged: F/0
  6733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6734 ;;      Params:         0       0       0       0       0       0       0
  6735 ;;      Locals:         0       0       0       0       0       0       0
  6736 ;;      Temps:          0       0       0       0       0       0       0
  6737 ;;      Totals:         0       0       0       0       0       0       0
  6738 ;;Total ram usage:        0 bytes
  6739 ;; Hardware stack levels used:    1
  6740 ;; Hardware stack levels required when called:    3
  6741 ;; This function calls:
  6742 ;;		Nothing
  6743 ;; This function is called by:
  6744 ;;		_main
  6745 ;; This function uses a non-reentrant model
  6746 ;;
  6747                           
  6748                           	psect	text1
  6749  005782                     __ptext1:
  6750                           	opt stack 0
  6751  005782                     _doModeVscpNode:
  6752                           	opt stack 27
  6753                           
  6754                           ; BSR set to: 0
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;incstack = 0
  6758                           ;incstack = 0
  6759  005782  0012               	return	
  6760  005784                     __end_of_doModeVscpNode:
  6761                           	opt stack 0
  6762                           tblptru	equ	0xFF8
  6763                           tblptrh	equ	0xFF7
  6764                           tblptrl	equ	0xFF6
  6765                           tablat	equ	0xFF5
  6766                           prodh	equ	0xFF4
  6767                           prodl	equ	0xFF3
  6768                           intcon	equ	0xFF2
  6769                           indf0	equ	0xFEF
  6770                           postinc0	equ	0xFEE
  6771                           fsr0h	equ	0xFEA
  6772                           fsr0l	equ	0xFE9
  6773                           wreg	equ	0xFE8
  6774                           indf1	equ	0xFE7
  6775                           postinc1	equ	0xFE6
  6776                           postdec1	equ	0xFE5
  6777                           fsr1h	equ	0xFE2
  6778                           fsr1l	equ	0xFE1
  6779                           indf2	equ	0xFDF
  6780                           postinc2	equ	0xFDE
  6781                           postdec2	equ	0xFDD
  6782                           plusw2	equ	0xFDB
  6783                           fsr2h	equ	0xFDA
  6784                           fsr2l	equ	0xFD9
  6785                           status	equ	0xFD8
  6786                           
  6787 ;; *************** function _doModeSLCAN *****************
  6788 ;; Defined at:
  6789 ;;		line 1299 in file "main.c"
  6790 ;; Parameters:    Size  Location     Type
  6791 ;;		None
  6792 ;; Auto vars:     Size  Location     Type
  6793 ;;  id              4   61[BANK0 ] unsigned long 
  6794 ;;  dlc             1   65[BANK0 ] unsigned char 
  6795 ;;  rv              1   67[BANK0 ] enum E15660
  6796 ;;  c               1   66[BANK0 ] unsigned char 
  6797 ;; Return value:  Size  Location     Type
  6798 ;;		None               void
  6799 ;; Registers used:
  6800 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6801 ;; Tracked objects:
  6802 ;;		On entry : F/0
  6803 ;;		On exit  : E/0
  6804 ;;		Unchanged: 0/0
  6805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6806 ;;      Params:         0       0       0       0       0       0       0
  6807 ;;      Locals:         0       7       0       0       0       0       0
  6808 ;;      Temps:          0       7       0       0       0       0       0
  6809 ;;      Totals:         0      14       0       0       0       0       0
  6810 ;;Total ram usage:       14 bytes
  6811 ;; Hardware stack levels used:    1
  6812 ;; Hardware stack levels required when called:    7
  6813 ;; This function calls:
  6814 ;;		_putsUSART
  6815 ;;		_fifo_read
  6816 ;;		_writeEEPROM
  6817 ;;		_ECANSetOperationMode
  6818 ;;		_memset
  6819 ;;		_receiveSendEventSLCAN
  6820 ;;		_strlen
  6821 ;;		_hexStringToBytes
  6822 ;;		_memcpy
  6823 ;;		_sendCANFrame
  6824 ;; This function is called by:
  6825 ;;		_main
  6826 ;; This function uses a non-reentrant model
  6827 ;;
  6828                           
  6829                           	psect	text2
  6830  001D4E                     __ptext2:
  6831                           	opt stack 0
  6832  001D4E                     _doModeSLCAN:
  6833                           	opt stack 23
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;main.c: 1300: uint8_t c;
  6837                           ;main.c: 1301: BOOL rv = 0;
  6838                           
  6839                           ; BSR set to: 0
  6840                           ;incstack = 0
  6841                           ;incstack = 0
  6842  001D4E  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6843                           
  6844                           ; BSR set to: 0
  6845                           ;main.c: 1304: receiveSendEventSLCAN();
  6846  001D50  ECB2  F017         	call	_receiveSendEventSLCAN	;wreg free
  6847                           
  6848                           ;main.c: 1307: (INTCONbits.GIE = 0);
  6849  001D54  9EF2               	bcf	intcon,7,c	;volatile
  6850                           
  6851                           ;main.c: 1309: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6852  001D56  0100               	movlb	0	; () banked
  6853  001D58  0E00               	movlw	high doModeSLCAN@c
  6854  001D5A  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6855  001D5C  0EA2               	movlw	low doModeSLCAN@c
  6856  001D5E  6F60               	movwf	?_fifo_read& (0+255),b
  6857  001D60  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6858  001D62  0E01               	movlw	1
  6859  001D64  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6860  001D66  0E48               	movlw	_serialInputFifo& (0+255)
  6861  001D68  EC6F  F021         	call	_fifo_read
  6862  001D6C  0560               	decf	?_fifo_read& (0+255),w,b
  6863  001D6E  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6864  001D70  E001 D19C          	bnz	l10914
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;main.c: 1312: (INTCONbits.GIE = 1);
  6868  001D74  8EF2               	bsf	intcon,7,c	;volatile
  6869                           
  6870                           ; BSR set to: 0
  6871                           ;main.c: 1314: if (0x0d != c) {
  6872  001D76  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  6873  001D78  0A0D               	xorlw	13
  6874  001D7A  E101 D14E          	bz	l10902
  6875                           
  6876                           ; BSR set to: 0
  6877                           ;main.c: 1315: cmdbuf[ pos ] = c;
  6878  001D7E  ECF6  F015         	call	PL18	;call to abstracted procedure
  6879  001D82  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;main.c: 1316: pos++;
  6883  001D86  2B02               	incf	_pos& (0+255),f,b
  6884  001D88  D192               	goto	l708
  6885  001D8A                     l10796:
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;main.c: 1324: if (1 == strlen(cmdbuf)) {
  6889  001D8A  0E01               	movlw	high _cmdbuf
  6890  001D8C  0100               	movlb	0	; () banked
  6891  001D8E  6F61               	movwf	(?_strlen+1)& (0+255),b
  6892  001D90  0E04               	movlw	low _cmdbuf
  6893  001D92  6F60               	movwf	?_strlen& (0+255),b
  6894  001D94  ECF0  F029         	call	_strlen	;wreg free
  6895  001D98  0560               	decf	?_strlen& (0+255),w,b
  6896  001D9A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6897  001D9C  E001 D168          	bnz	l10904
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;main.c: 1325: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6901  001DA0  0E7D               	movlw	high STR_126
  6902  001DA2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6903  001DA4  0E5A               	movlw	low STR_126
  6904  001DA6  6F61               	movwf	?_putsUSART& (0+255),b
  6905  001DA8  ECC9  F028         	call	_putsUSART	;wreg free
  6906  001DAC                     l10800:
  6907                           
  6908                           ;main.c: 1326: rv = 1;
  6909  001DAC  0E01               	movlw	1
  6910  001DAE  0100               	movlb	0	; () banked
  6911  001DB0  D0DE               	goto	L3
  6912  001DB2                     l10802:
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;main.c: 1332: if (1 == strlen(cmdbuf)) {
  6916  001DB2  0E01               	movlw	high _cmdbuf
  6917  001DB4  0100               	movlb	0	; () banked
  6918  001DB6  6F61               	movwf	(?_strlen+1)& (0+255),b
  6919  001DB8  0E04               	movlw	low _cmdbuf
  6920  001DBA  6F60               	movwf	?_strlen& (0+255),b
  6921  001DBC  ECF0  F029         	call	_strlen	;wreg free
  6922  001DC0  0560               	decf	?_strlen& (0+255),w,b
  6923  001DC2  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6924  001DC4  E001 D154          	bnz	l10904
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;main.c: 1333: putsUSART((char *) "V1011\r\n");
  6928  001DC8  0E7E               	movlw	high STR_127
  6929  001DCA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6930  001DCC  0ED5               	movlw	low STR_127
  6931  001DCE  6F61               	movwf	?_putsUSART& (0+255),b
  6932  001DD0  ECC9  F028         	call	_putsUSART	;wreg free
  6933  001DD4  D7EB               	goto	l10800
  6934  001DD6                     l10808:
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;main.c: 1340: if (1 == strlen(cmdbuf)) {
  6938  001DD6  0E01               	movlw	high _cmdbuf
  6939  001DD8  0100               	movlb	0	; () banked
  6940  001DDA  6F61               	movwf	(?_strlen+1)& (0+255),b
  6941  001DDC  0E04               	movlw	low _cmdbuf
  6942  001DDE  6F60               	movwf	?_strlen& (0+255),b
  6943  001DE0  ECF0  F029         	call	_strlen	;wreg free
  6944  001DE4  0560               	decf	?_strlen& (0+255),w,b
  6945  001DE6  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6946  001DE8  E001 D142          	bnz	l10904
  6947                           
  6948                           ; BSR set to: 0
  6949                           ;main.c: 1341: putsUSART((char *) "N1977\r\n");
  6950  001DEC  0E7E               	movlw	high STR_128
  6951  001DEE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6952  001DF0  0EDD               	movlw	low STR_128
  6953  001DF2  6F61               	movwf	?_putsUSART& (0+255),b
  6954  001DF4  ECC9  F028         	call	_putsUSART	;wreg free
  6955  001DF8  D7D9               	goto	l10800
  6956  001DFA                     l10814:
  6957                           
  6958                           ; BSR set to: 0
  6959                           ;main.c: 1350: bInitiated = 1;
  6960  001DFA  0E01               	movlw	1
  6961  001DFC  6FEE               	movwf	_bInitiated& (0+255),b
  6962                           
  6963                           ;main.c: 1351: rv = 1;
  6964  001DFE  D0B7               	goto	L3
  6965  001E00                     l718:
  6966                           
  6967                           ; BSR set to: 0
  6968                           ;main.c: 1356: if (!bOpen) {
  6969  001E00  67EF               	tstfsz	_bOpen& (0+255),b
  6970  001E02  D003               	goto	l10818
  6971                           
  6972                           ; BSR set to: 0
  6973                           ;main.c: 1357: bInitiated = 1;
  6974  001E04  0E01               	movlw	1
  6975  001E06  6FEE               	movwf	_bInitiated& (0+255),b
  6976                           
  6977                           ;main.c: 1358: rv = 1;
  6978  001E08  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  6979  001E0A                     l10818:
  6980                           
  6981                           ; BSR set to: 0
  6982                           ;main.c: 1363: if (1 == strlen(cmdbuf)) {
  6983  001E0A  0E01               	movlw	high _cmdbuf
  6984  001E0C  0100               	movlb	0	; () banked
  6985  001E0E  6F61               	movwf	(?_strlen+1)& (0+255),b
  6986  001E10  0E04               	movlw	low _cmdbuf
  6987  001E12  6F60               	movwf	?_strlen& (0+255),b
  6988  001E14  ECF0  F029         	call	_strlen	;wreg free
  6989  001E18  0560               	decf	?_strlen& (0+255),w,b
  6990  001E1A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6991  001E1C  E001 D128          	bnz	l10904
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;main.c: 1364: if (!bOpen && bInitiated) {
  6995  001E20  67EF               	tstfsz	_bOpen& (0+255),b
  6996  001E22  D126               	goto	l10904
  6997                           
  6998                           ; BSR set to: 0
  6999  001E24  51EE               	movf	_bInitiated& (0+255),w,b
  7000  001E26  E101 D123          	bz	l10904
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;main.c: 1365: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7004  001E2A  0E00               	movlw	0
  7005  001E2C  EC80  F02B         	call	_ECANSetOperationMode
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;main.c: 1366: bOpen = 1;
  7009  001E30  0E01               	movlw	1
  7010  001E32  6FEF               	movwf	_bOpen& (0+255),b
  7011  001E34  D7BB               	goto	l10800
  7012  001E36                     l10830:
  7013                           
  7014                           ; BSR set to: 0
  7015                           ;main.c: 1374: if (1 == strlen(cmdbuf)) {
  7016  001E36  0E01               	movlw	high _cmdbuf
  7017  001E38  0100               	movlb	0	; () banked
  7018  001E3A  6F61               	movwf	(?_strlen+1)& (0+255),b
  7019  001E3C  0E04               	movlw	low _cmdbuf
  7020  001E3E  6F60               	movwf	?_strlen& (0+255),b
  7021  001E40  ECF0  F029         	call	_strlen	;wreg free
  7022  001E44  0560               	decf	?_strlen& (0+255),w,b
  7023  001E46  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7024  001E48  E001 D112          	bnz	l10904
  7025                           
  7026                           ; BSR set to: 0
  7027                           ;main.c: 1375: if (bOpen) {
  7028  001E4C  51EF               	movf	_bOpen& (0+255),w,b
  7029  001E4E  E0AE               	bz	l10800
  7030                           
  7031                           ; BSR set to: 0
  7032                           ;main.c: 1376: ECANSetOperationMode(0x20);
  7033  001E50  0E20               	movlw	32
  7034  001E52  EC80  F02B         	call	_ECANSetOperationMode
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;main.c: 1377: bOpen = 0;
  7038  001E56  6BEF               	clrf	_bOpen& (0+255),b
  7039  001E58  D7A9               	goto	l10800
  7040  001E5A                     l10840:
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;main.c: 1390: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7044  001E5A  51EF               	movf	_bOpen& (0+255),w,b
  7045  001E5C  E101 D108          	bz	l10904
  7046                           
  7047                           ; BSR set to: 0
  7048  001E60  0E01               	movlw	high _cmdbuf
  7049  001E62  0100               	movlb	0	; () banked
  7050  001E64  6F61               	movwf	(?_strlen+1)& (0+255),b
  7051  001E66  0E04               	movlw	low _cmdbuf
  7052  001E68  6F60               	movwf	?_strlen& (0+255),b
  7053  001E6A  ECF0  F029         	call	_strlen	;wreg free
  7054  001E6E  0E0A               	movlw	10
  7055  001E70  5D60               	subwf	?_strlen& (0+255),w,b
  7056  001E72  0E00               	movlw	0
  7057  001E74  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7058  001E76  E201 D0FB          	bnc	l10904
  7059                           
  7060                           ; BSR set to: 0
  7061                           ;main.c: 1392: uint32_t id;
  7062                           ;main.c: 1393: uint8_t dlc;
  7063                           ;main.c: 1395: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7064  001E7A  0E01               	movlw	high _wrkbuf
  7065  001E7C  0100               	movlb	0	; () banked
  7066  001E7E  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7067  001E80  0E54               	movlw	low _wrkbuf
  7068  001E82  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7069  001E84  0E50               	movlw	80
  7070  001E86  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7071  001E88  0E01               	movlw	high _cmdbuf
  7072  001E8A  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7073  001E8C  0E04               	movlw	low _cmdbuf
  7074  001E8E  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7075  001E90  EC2B  F024         	call	_hexStringToBytes	;wreg free
  7076  001E94  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7077  001E96  0E05               	movlw	5
  7078  001E98  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  7079  001E9A  E201 D0E9          	bnc	l10904
  7080                           
  7081                           ; BSR set to: 0
  7082                           ;main.c: 1397: }
  7083                           ;main.c: 1399: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7084  001E9E  C157  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  7085  001EA2  0E08               	movlw	8
  7086  001EA4  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7087  001EA6  C156  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7088  001EAA  0E10               	movlw	16
  7089  001EAC  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7090  001EAE  C155  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7091  001EB2  0E18               	movlw	24
  7092  001EB4  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7093  001EB6  C154  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  7094  001EBA  0100               	movlb	0	; () banked
  7095  001EBC  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7096  001EBE  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7097  001EC0  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7098  001EC2  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7099  001EC4  D001               	goto	u13520
  7100  001EC6                     u13525:
  7101  001EC6  D8F4               	call	PL88	;call to abstracted procedure
  7102  001EC8                     u13520:
  7103  001EC8  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7104  001ECA  D7FD               	goto	u13525
  7105  001ECC  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7106  001ECE  D001               	goto	u13530
  7107  001ED0                     u13535:
  7108  001ED0  D8EF               	call	PL88	;call to abstracted procedure
  7109  001ED2                     u13530:
  7110  001ED2  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7111  001ED4  D7FD               	goto	u13535
  7112  001ED6  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  7113  001ED8  D001               	goto	u13540
  7114  001EDA                     u13545:
  7115  001EDA  D8EA               	call	PL88	;call to abstracted procedure
  7116  001EDC                     u13540:
  7117  001EDC  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7118  001EDE  D7FD               	goto	u13545
  7119  001EE0  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7120  001EE4  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7121  001EE8  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7122  001EEC  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;main.c: 1400: dlc = vscpData[4];
  7126  001EF0  C1A8  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;main.c: 1403: if (dlc > 8) break;
  7130  001EF4  0E08               	movlw	8
  7131  001EF6  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7132  001EF8  D001               	goto	l10856
  7133  001EFA  D0BA               	goto	l10904
  7134  001EFC                     l10856:
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;main.c: 1404: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7138  001EFC  90D8               	bcf	status,0,c
  7139  001EFE  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7140  001F00  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7141  001F02  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7142  001F04  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7143  001F06  0E0A               	movlw	10
  7144  001F08  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7145  001F0A  0E00               	movlw	0
  7146  001F0C  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7147  001F0E  0E01               	movlw	high _cmdbuf
  7148  001F10  0100               	movlb	0	; () banked
  7149  001F12  6F61               	movwf	(?_strlen+1)& (0+255),b
  7150  001F14  0E04               	movlw	low _cmdbuf
  7151  001F16  6F60               	movwf	?_strlen& (0+255),b
  7152  001F18  ECF0  F029         	call	_strlen	;wreg free
  7153  001F1C  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7154  001F1E  5D60               	subwf	?_strlen& (0+255),w,b
  7155  001F20  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7156  001F22  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7157  001F24  E201 D0A4          	bnc	l10904
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;main.c: 1406: memcpy(vscpData, vscpData + 5, dlc);
  7161  001F28  0E01               	movlw	high _vscpData
  7162  001F2A  0100               	movlb	0	; () banked
  7163  001F2C  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7164  001F2E  0EA4               	movlw	low _vscpData
  7165  001F30  6F60               	movwf	?_memcpy& (0+255),b
  7166  001F32  0EA9               	movlw	low (_vscpData+5)
  7167  001F34  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7168  001F36  0E01               	movlw	high (_vscpData+5)
  7169  001F38  6F97               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7170  001F3A  C096  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7171  001F3E  C097  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7172  001F42  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7173  001F46  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7174  001F48  ECCF  F029         	call	_memcpy	;wreg free
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;main.c: 1408: rv = sendCANFrame(id, dlc, vscpData);
  7178  001F4C  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7179  001F50  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7180  001F54  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7181  001F58  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7182  001F5C  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7183  001F60  0E01               	movlw	high _vscpData
  7184  001F62  0100               	movlb	0	; () banked
  7185  001F64  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7186  001F66  0EA4               	movlw	low _vscpData
  7187  001F68  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7188  001F6A  EC8D  F02A         	call	_sendCANFrame	;wreg free
  7189  001F6E                     L3:
  7190  001F6E  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7191  001F70  D07F               	goto	l10904
  7192  001F72                     l10864:
  7193                           
  7194                           ; BSR set to: 0
  7195                           ;main.c: 1423: if (bOpen && (strlen(cmdbuf) == 1)) {
  7196  001F72  51EF               	movf	_bOpen& (0+255),w,b
  7197  001F74  E07D               	bz	l10904
  7198                           
  7199                           ; BSR set to: 0
  7200  001F76  0E01               	movlw	high _cmdbuf
  7201  001F78  0100               	movlb	0	; () banked
  7202  001F7A  6F61               	movwf	(?_strlen+1)& (0+255),b
  7203  001F7C  0E04               	movlw	low _cmdbuf
  7204  001F7E  6F60               	movwf	?_strlen& (0+255),b
  7205  001F80  ECF0  F029         	call	_strlen	;wreg free
  7206  001F84  0560               	decf	?_strlen& (0+255),w,b
  7207  001F86  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7208  001F88  E173               	bnz	l10904
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;main.c: 1424: putsUSART((char *) "F00\r\n");
  7212  001F8A  0E7F               	movlw	high STR_129
  7213  001F8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7214  001F8E  0E79               	movlw	low STR_129
  7215  001F90  6F61               	movwf	?_putsUSART& (0+255),b
  7216  001F92  ECC9  F028         	call	_putsUSART	;wreg free
  7217  001F96  D06C               	goto	l10904
  7218  001F98                     l10874:
  7219                           
  7220                           ; BSR set to: 0
  7221                           ;main.c: 1440: if (2 == strlen(cmdbuf)) {
  7222  001F98  0E01               	movlw	high _cmdbuf
  7223  001F9A  0100               	movlb	0	; () banked
  7224  001F9C  6F61               	movwf	(?_strlen+1)& (0+255),b
  7225  001F9E  0E04               	movlw	low _cmdbuf
  7226  001FA0  6F60               	movwf	?_strlen& (0+255),b
  7227  001FA2  ECF0  F029         	call	_strlen	;wreg free
  7228  001FA6  5160               	movf	?_strlen& (0+255),w,b
  7229  001FA8  0A02               	xorlw	2
  7230  001FAA  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7231  001FAC  E161               	bnz	l10904
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;main.c: 1441: if (!bOpen) {
  7235  001FAE  67EF               	tstfsz	_bOpen& (0+255),b
  7236  001FB0  D05F               	goto	l10904
  7237                           
  7238                           ; BSR set to: 0
  7239                           ;main.c: 1442: if ('0' == cmdbuf[1]) {
  7240  001FB2  0101               	movlb	1	; () banked
  7241  001FB4  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7242  001FB6  0A30               	xorlw	48
  7243  001FB8  E10A               	bnz	l10886
  7244                           
  7245                           ; BSR set to: 1
  7246                           ;main.c: 1443: nTimeStamp = 0;
  7247  001FBA  0100               	movlb	0	; () banked
  7248  001FBC  6BF2               	clrf	_nTimeStamp& (0+255),b
  7249                           
  7250                           ; BSR set to: 0
  7251                           ;main.c: 1445: writeEEPROM(0x05, 0);
  7252  001FBE  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7253  001FC0  0E05               	movlw	5
  7254  001FC2  6F60               	movwf	?_writeEEPROM& (0+255),b
  7255  001FC4  0E00               	movlw	0
  7256  001FC6  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
  7257  001FC8  EC3F  F02B         	call	_writeEEPROM	;wreg free
  7258  001FCC  D6EF               	goto	l10800
  7259  001FCE                     l10886:
  7260                           
  7261                           ; BSR set to: 1
  7262  001FCE  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7263  001FD0  0A31               	xorlw	49
  7264  001FD2  E10B               	bnz	l743
  7265                           
  7266                           ; BSR set to: 1
  7267                           ;main.c: 1448: nTimeStamp = 1;
  7268  001FD4  0E01               	movlw	1
  7269  001FD6  0100               	movlb	0	; () banked
  7270  001FD8  6FF2               	movwf	_nTimeStamp& (0+255),b
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;main.c: 1450: writeEEPROM(0x05,
  7274                           ;main.c: 1451: 1);
  7275  001FDA  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7276  001FDC  0E05               	movlw	5
  7277  001FDE  6F60               	movwf	?_writeEEPROM& (0+255),b
  7278  001FE0  0E01               	movlw	1
  7279  001FE2  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
  7280  001FE4  EC3F  F02B         	call	_writeEEPROM	;wreg free
  7281  001FE8  D6E1               	goto	l10800
  7282  001FEA                     l743:
  7283                           
  7284                           ; BSR set to: 1
  7285                           ;main.c: 1454: rv = 0;
  7286  001FEA  0100               	movlb	0	; () banked
  7287  001FEC  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7288  001FEE  D040               	goto	l10904
  7289  001FF0                     l10894:
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;main.c: 1462: writeEEPROM(0x01, 0xFF);
  7293  001FF0  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7294  001FF2  0E01               	movlw	1
  7295  001FF4  6F60               	movwf	?_writeEEPROM& (0+255),b
  7296  001FF6  0EFF               	movlw	255
  7297  001FF8  6962               	setf	(?_writeEEPROM+2)& (0+255),b
  7298  001FFA  EC3F  F02B         	call	_writeEEPROM	;wreg free
  7299  001FFE  00FF               	reset		;# 
  7300                           
  7301                           ;main.c: 1464: break;
  7302  002000  D037               	goto	l10904
  7303  002002                     l10896:
  7304                           
  7305                           ; BSR set to: 0
  7306                           ;main.c: 1467: {
  7307                           ;main.c: 1469: if (0 == strlen(cmdbuf)) {
  7308  002002  0E01               	movlw	high _cmdbuf
  7309  002004  0100               	movlb	0	; () banked
  7310  002006  6F61               	movwf	(?_strlen+1)& (0+255),b
  7311  002008  0E04               	movlw	low _cmdbuf
  7312  00200A  6F60               	movwf	?_strlen& (0+255),b
  7313  00200C  ECF0  F029         	call	_strlen	;wreg free
  7314  002010  5161               	movf	(?_strlen+1)& (0+255),w,b
  7315  002012  1160               	iorwf	?_strlen& (0+255),w,b
  7316  002014  E101 D6CA          	bz	l10800
  7317  002018  D02B               	goto	l10904
  7318  00201A                     l10902:
  7319                           
  7320                           ; BSR set to: 0
  7321  00201A  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7322                           
  7323                           ; Switch size 1, requested type "space"
  7324                           ; Number of cases is 16, Range of values is 66 to 116
  7325                           ; switch strategies available:
  7326                           ; Name         Instructions Cycles
  7327                           ; simple_byte           49    25 (average)
  7328                           ;	Chosen strategy is simple_byte
  7329  00201C  0A42               	xorlw	66	; case 66
  7330  00201E  E0E8               	bz	l10894
  7331  002020  0A01               	xorlw	1	; case 67
  7332  002022  E101 D708          	bz	l10830
  7333  002026  0A05               	xorlw	5	; case 70
  7334  002028  E0A4               	bz	l10864
  7335  00202A  0A0C               	xorlw	12	; case 74
  7336  00202C  E101 D6AD          	bz	l10796
  7337  002030  0A07               	xorlw	7	; case 77
  7338  002032  E101 D6BB          	bz	l10800
  7339  002036  0A03               	xorlw	3	; case 78
  7340  002038  E101 D6CD          	bz	l10808
  7341  00203C  0A01               	xorlw	1	; case 79
  7342  00203E  E101 D6E4          	bz	l10818
  7343  002042  0A1D               	xorlw	29	; case 82
  7344  002044  E015               	bz	l10904
  7345  002046  0A01               	xorlw	1	; case 83
  7346  002048  E101 D6D7          	bz	l10814
  7347  00204C  0A07               	xorlw	7	; case 84
  7348  00204E  E101 D704          	bz	l10840
  7349  002052  0A02               	xorlw	2	; case 86
  7350  002054  E101 D6AD          	bz	l10802
  7351  002058  0A0C               	xorlw	12	; case 90
  7352  00205A  E09E               	bz	l10874
  7353  00205C  0A37               	xorlw	55	; case 109
  7354  00205E  E101 D6A5          	bz	l10800
  7355  002062  0A1F               	xorlw	31	; case 114
  7356  002064  E005               	bz	l10904
  7357  002066  0A01               	xorlw	1	; case 115
  7358  002068  E101 D6CA          	bz	l718
  7359  00206C  0A07               	xorlw	7	; case 116
  7360  00206E  E1C9               	bnz	l10896
  7361  002070                     l10904:
  7362                           
  7363                           ;main.c: 1477: if (rv) {
  7364  002070  0100               	movlb	0	; () banked
  7365  002072  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7366  002074  E007               	bz	l10908
  7367                           
  7368                           ; BSR set to: 0
  7369                           ;main.c: 1479: putsUSART((char *) "\r");
  7370  002076  0E7F               	movlw	high STR_130
  7371  002078  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7372  00207A  0EF2               	movlw	low STR_130
  7373  00207C  6F61               	movwf	?_putsUSART& (0+255),b
  7374  00207E  ECC9  F028         	call	_putsUSART	;wreg free
  7375                           
  7376                           ;main.c: 1480: }
  7377  002082  D006               	goto	l10910
  7378  002084                     l10908:
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;main.c: 1481: else {
  7382                           ;main.c: 1483: putsUSART((char *) "\a");
  7383  002084  0E7F               	movlw	high STR_131
  7384  002086  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7385  002088  0EF0               	movlw	low STR_131
  7386  00208A  6F61               	movwf	?_putsUSART& (0+255),b
  7387  00208C  ECC9  F028         	call	_putsUSART	;wreg free
  7388  002090                     l10910:
  7389                           
  7390                           ;main.c: 1484: }
  7391                           ;main.c: 1487: memset(cmdbuf, 0, sizeof ( cmdbuf));
  7392  002090  0E01               	movlw	high _cmdbuf
  7393  002092  0100               	movlb	0	; () banked
  7394  002094  6F61               	movwf	(?_memset+1)& (0+255),b
  7395  002096  0E04               	movlw	low _cmdbuf
  7396  002098  6F60               	movwf	?_memset& (0+255),b
  7397  00209A  6B63               	clrf	(?_memset+3)& (0+255),b
  7398  00209C  6B62               	clrf	(?_memset+2)& (0+255),b
  7399  00209E  6B65               	clrf	(?_memset+5)& (0+255),b
  7400  0020A0  0E50               	movlw	80
  7401  0020A2  6F64               	movwf	(?_memset+4)& (0+255),b
  7402  0020A4  EC28  F02B         	call	_memset	;wreg free
  7403                           
  7404                           ; BSR set to: 0
  7405                           ;main.c: 1488: pos = 0;
  7406  0020A8  0101               	movlb	1	; () banked
  7407  0020AA  6B02               	clrf	_pos& (0+255),b
  7408  0020AC                     l10914:
  7409                           
  7410                           ;main.c: 1490: }
  7411                           ;main.c: 1493: (INTCONbits.GIE = 1);
  7412  0020AC  8EF2               	bsf	intcon,7,c	;volatile
  7413  0020AE                     l708:
  7414  0020AE  0012               	return	
  7415  0020B0                     __end_of_doModeSLCAN:
  7416                           	opt stack 0
  7417  0020B0                     PL88:
  7418                           	opt stack 23
  7419  0020B0  90D8               	bcf	status,0,c
  7420  0020B2  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7421  0020B4  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7422  0020B6  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7423  0020B8  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7424  0020BA  0012               	return	
  7425  0020BC                     __end_ofPL88:
  7426                           	opt stack 0
  7427                           tblptru	equ	0xFF8
  7428                           tblptrh	equ	0xFF7
  7429                           tblptrl	equ	0xFF6
  7430                           tablat	equ	0xFF5
  7431                           prodh	equ	0xFF4
  7432                           prodl	equ	0xFF3
  7433                           intcon	equ	0xFF2
  7434                           indf0	equ	0xFEF
  7435                           postinc0	equ	0xFEE
  7436                           fsr0h	equ	0xFEA
  7437                           fsr0l	equ	0xFE9
  7438                           wreg	equ	0xFE8
  7439                           indf1	equ	0xFE7
  7440                           postinc1	equ	0xFE6
  7441                           postdec1	equ	0xFE5
  7442                           fsr1h	equ	0xFE2
  7443                           fsr1l	equ	0xFE1
  7444                           indf2	equ	0xFDF
  7445                           postinc2	equ	0xFDE
  7446                           postdec2	equ	0xFDD
  7447                           plusw2	equ	0xFDB
  7448                           fsr2h	equ	0xFDA
  7449                           fsr2l	equ	0xFD9
  7450                           status	equ	0xFD8
  7451                           
  7452 ;; *************** function _hexStringToBytes *****************
  7453 ;; Defined at:
  7454 ;;		line 35 in file "hexutils.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7457 ;;		 -> wrkbuf(80), 
  7458 ;;  size            1    6[BANK0 ] unsigned char 
  7459 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7460 ;;		 -> cmdbuf(80), 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;  i               2   16[BANK0 ] int 
  7463 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7464 ;;		 -> cmdbuf(80), 
  7465 ;;  len             2   12[BANK0 ] int 
  7466 ;; Return value:  Size  Location     Type
  7467 ;;                  1    wreg      unsigned char 
  7468 ;; Registers used:
  7469 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7470 ;; Tracked objects:
  7471 ;;		On entry : F/0
  7472 ;;		On exit  : F/0
  7473 ;;		Unchanged: 0/0
  7474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7475 ;;      Params:         0       5       0       0       0       0       0
  7476 ;;      Locals:         0       6       0       0       0       0       0
  7477 ;;      Temps:          0       3       0       0       0       0       0
  7478 ;;      Totals:         0      14       0       0       0       0       0
  7479 ;;Total ram usage:       14 bytes
  7480 ;; Hardware stack levels used:    1
  7481 ;; Hardware stack levels required when called:    4
  7482 ;; This function calls:
  7483 ;;		_strlen
  7484 ;;		_nibbleFromChar
  7485 ;; This function is called by:
  7486 ;;		_doModeSLCAN
  7487 ;; This function uses a non-reentrant model
  7488 ;;
  7489                           
  7490                           	psect	text3
  7491  004856                     __ptext3:
  7492                           	opt stack 0
  7493  004856                     _hexStringToBytes:
  7494                           	opt stack 25
  7495                           
  7496                           ; BSR set to: 0
  7497                           ;hexutils.c: 36: uint8_t *p;
  7498                           ;hexutils.c: 37: int len, i;
  7499                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7500                           
  7501                           ;incstack = 0
  7502                           ;incstack = 0
  7503  004856  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7504  00485A  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7505  00485E  ECF0  F029         	call	_strlen	;wreg free
  7506  004862  90D8               	bcf	status,0,c
  7507  004864  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7508  004866  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7509  004868  3160               	rrcf	?_strlen& (0+255),w,b
  7510  00486A  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7511                           
  7512                           ; BSR set to: 0
  7513                           ;hexutils.c: 40: if (len > size) return 0;
  7514  00486C  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7515  00486E  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7516  004870  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7517  004872  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7518  004874  0A80               	xorlw	128
  7519  004876  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7520  004878  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7521  00487A  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7522  00487C  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7523  00487E  0A80               	xorlw	128
  7524  004880  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7525  004882  E202               	bc	l1591
  7526                           
  7527                           ; BSR set to: 0
  7528  004884  0E00               	movlw	0
  7529  004886  D033               	goto	l1592
  7530  004888                     l1591:
  7531                           
  7532                           ; BSR set to: 0
  7533                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7534  004888  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7535  00488A  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7536  00488C  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7537  004890  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7538  004894  D022               	goto	l12486
  7539  004896                     l12480:
  7540                           
  7541                           ; BSR set to: 0
  7542                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7543  004896  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7544  004898  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7545  00489A  6ED9               	movwf	fsr2l,c
  7546  00489C  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7547  00489E  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7548  0048A0  6EDA               	movwf	fsr2h,c
  7549  0048A2  EE10 F001          	lfsr	1,1
  7550  0048A6  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7551  0048A8  26E1               	addwf	fsr1l,f,c
  7552  0048AA  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7553  0048AC  22E2               	addwfc	fsr1h,f,c
  7554  0048AE  50E7               	movf	indf1,w,c
  7555  0048B0  EC30  F02A         	call	_nibbleFromChar
  7556  0048B4  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7557  0048B6  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7558  0048BA  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7559  0048BE  50E7               	movf	indf1,w,c
  7560  0048C0  EC30  F02A         	call	_nibbleFromChar
  7561  0048C4  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7562  0048C6  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7563  0048C8  0BF0               	andlw	240
  7564  0048CA  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7565  0048CC  6EDF               	movwf	indf2,c
  7566                           
  7567                           ; BSR set to: 0
  7568                           ;hexutils.c: 43: p += 2;
  7569  0048CE  0E02               	movlw	2
  7570  0048D0  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7571  0048D2  0E00               	movlw	0
  7572  0048D4  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7573                           
  7574                           ; BSR set to: 0
  7575  0048D6  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7576  0048D8  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7577  0048DA                     l12486:
  7578                           
  7579                           ; BSR set to: 0
  7580  0048DA  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7581  0048DC  0A80               	xorlw	128
  7582  0048DE  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7583  0048E0  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7584  0048E2  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7585  0048E4  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7586  0048E6  0A80               	xorlw	128
  7587  0048E8  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7588  0048EA  E3D5               	bnc	l12480
  7589                           
  7590                           ; BSR set to: 0
  7591                           ;hexutils.c: 44: }
  7592                           ;hexutils.c: 46: return i;
  7593  0048EC  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7594  0048EE                     l1592:
  7595                           
  7596                           ; BSR set to: 0
  7597  0048EE  0012               	return	
  7598  0048F0                     __end_of_hexStringToBytes:
  7599                           	opt stack 0
  7600                           tblptru	equ	0xFF8
  7601                           tblptrh	equ	0xFF7
  7602                           tblptrl	equ	0xFF6
  7603                           tablat	equ	0xFF5
  7604                           prodh	equ	0xFF4
  7605                           prodl	equ	0xFF3
  7606                           intcon	equ	0xFF2
  7607                           indf0	equ	0xFEF
  7608                           postinc0	equ	0xFEE
  7609                           fsr0h	equ	0xFEA
  7610                           fsr0l	equ	0xFE9
  7611                           wreg	equ	0xFE8
  7612                           indf1	equ	0xFE7
  7613                           postinc1	equ	0xFE6
  7614                           postdec1	equ	0xFE5
  7615                           fsr1h	equ	0xFE2
  7616                           fsr1l	equ	0xFE1
  7617                           indf2	equ	0xFDF
  7618                           postinc2	equ	0xFDE
  7619                           postdec2	equ	0xFDD
  7620                           plusw2	equ	0xFDB
  7621                           fsr2h	equ	0xFDA
  7622                           fsr2l	equ	0xFD9
  7623                           status	equ	0xFD8
  7624                           
  7625 ;; *************** function _nibbleFromChar *****************
  7626 ;; Defined at:
  7627 ;;		line 20 in file "hexutils.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;  c               1    wreg     unsigned char 
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  c               1    0[BANK0 ] unsigned char 
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  1    wreg      unsigned char 
  7634 ;; Registers used:
  7635 ;;		wreg, status,2, status,0
  7636 ;; Tracked objects:
  7637 ;;		On entry : F/0
  7638 ;;		On exit  : F/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7641 ;;      Params:         0       0       0       0       0       0       0
  7642 ;;      Locals:         0       1       0       0       0       0       0
  7643 ;;      Temps:          0       0       0       0       0       0       0
  7644 ;;      Totals:         0       1       0       0       0       0       0
  7645 ;;Total ram usage:        1 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    3
  7648 ;; This function calls:
  7649 ;;		Nothing
  7650 ;; This function is called by:
  7651 ;;		_hexStringToBytes
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text4
  7656  005460                     __ptext4:
  7657                           	opt stack 0
  7658  005460                     _nibbleFromChar:
  7659                           	opt stack 25
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;incstack = 0
  7663                           ;incstack = 0
  7664                           ;nibbleFromChar@c stored from wreg
  7665  005460  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7666                           
  7667                           ; BSR set to: 0
  7668                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7669  005464  0E2F               	movlw	47
  7670  005466  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7671  005468  D006               	goto	l12756
  7672                           
  7673                           ; BSR set to: 0
  7674  00546A  0E3A               	movlw	58
  7675  00546C  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7676  00546E  D003               	goto	l12756
  7677                           
  7678                           ; BSR set to: 0
  7679  005470  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7680  005472  0FD0               	addlw	208
  7681  005474  D013               	goto	l1586
  7682  005476                     l12756:
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7686  005476  0E60               	movlw	96
  7687  005478  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7688  00547A  D006               	goto	l12764
  7689                           
  7690                           ; BSR set to: 0
  7691  00547C  0E67               	movlw	103
  7692  00547E  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7693  005480  D003               	goto	l12764
  7694                           
  7695                           ; BSR set to: 0
  7696  005482  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7697  005484  0FA9               	addlw	169
  7698  005486  D00A               	goto	l1586
  7699  005488                     l12764:
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7703  005488  0E40               	movlw	64
  7704  00548A  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7705  00548C  D006               	goto	l12772
  7706                           
  7707                           ; BSR set to: 0
  7708  00548E  0E47               	movlw	71
  7709  005490  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7710  005492  D003               	goto	l12772
  7711                           
  7712                           ; BSR set to: 0
  7713  005494  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7714  005496  0FC9               	addlw	201
  7715  005498  D001               	goto	l1586
  7716  00549A                     l12772:
  7717                           
  7718                           ; BSR set to: 0
  7719                           ;hexutils.c: 24: return 255;
  7720  00549A  0EFF               	movlw	255
  7721  00549C                     l1586:
  7722                           
  7723                           ; BSR set to: 0
  7724  00549C  0012               	return	
  7725  00549E                     __end_of_nibbleFromChar:
  7726                           	opt stack 0
  7727                           tblptru	equ	0xFF8
  7728                           tblptrh	equ	0xFF7
  7729                           tblptrl	equ	0xFF6
  7730                           tablat	equ	0xFF5
  7731                           prodh	equ	0xFF4
  7732                           prodl	equ	0xFF3
  7733                           intcon	equ	0xFF2
  7734                           indf0	equ	0xFEF
  7735                           postinc0	equ	0xFEE
  7736                           fsr0h	equ	0xFEA
  7737                           fsr0l	equ	0xFE9
  7738                           wreg	equ	0xFE8
  7739                           indf1	equ	0xFE7
  7740                           postinc1	equ	0xFE6
  7741                           postdec1	equ	0xFE5
  7742                           fsr1h	equ	0xFE2
  7743                           fsr1l	equ	0xFE1
  7744                           indf2	equ	0xFDF
  7745                           postinc2	equ	0xFDE
  7746                           postdec2	equ	0xFDD
  7747                           plusw2	equ	0xFDB
  7748                           fsr2h	equ	0xFDA
  7749                           fsr2l	equ	0xFD9
  7750                           status	equ	0xFD8
  7751                           
  7752 ;; *************** function _receiveSendEventSLCAN *****************
  7753 ;; Defined at:
  7754 ;;		line 2090 in file "main.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;		None
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  id              4   38[BANK0 ] unsigned long 
  7759 ;;  i               2   43[BANK0 ] int 
  7760 ;;  dlc             1   42[BANK0 ] unsigned char 
  7761 ;; Return value:  Size  Location     Type
  7762 ;;                  1    wreg      enum E15660
  7763 ;; Registers used:
  7764 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7765 ;; Tracked objects:
  7766 ;;		On entry : F/0
  7767 ;;		On exit  : 0/0
  7768 ;;		Unchanged: 0/0
  7769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7770 ;;      Params:         0       0       0       0       0       0       0
  7771 ;;      Locals:         0       7       0       0       0       0       0
  7772 ;;      Temps:          0       3       0       0       0       0       0
  7773 ;;      Totals:         0      10       0       0       0       0       0
  7774 ;;Total ram usage:       10 bytes
  7775 ;; Hardware stack levels used:    1
  7776 ;; Hardware stack levels required when called:    6
  7777 ;; This function calls:
  7778 ;;		_putsUSART
  7779 ;;		_WriteUSART
  7780 ;;		_strlen
  7781 ;;		_getCANFrame
  7782 ;;		_ultoa
  7783 ;;		_itoa
  7784 ;; This function is called by:
  7785 ;;		_doModeSLCAN
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           	psect	text5
  7790  002F64                     __ptext5:
  7791                           	opt stack 0
  7792  002F64                     _receiveSendEventSLCAN:
  7793                           	opt stack 23
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;main.c: 2091: int i;
  7797                           ;main.c: 2092: uint8_t dlc;
  7798                           ;main.c: 2093: uint32_t id;
  7799                           ;main.c: 2095: if (getCANFrame(&id, &dlc, vscpData)) {
  7800                           
  7801                           ; BSR set to: 0
  7802                           ;incstack = 0
  7803                           ;incstack = 0
  7804  002F64  0E00               	movlw	high receiveSendEventSLCAN@dlc
  7805  002F66  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
  7806  002F68  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  7807  002F6A  6F6D               	movwf	?_getCANFrame& (0+255),b
  7808  002F6C  0E01               	movlw	high _vscpData
  7809  002F6E  0100               	movlb	0	; () banked
  7810  002F70  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
  7811  002F72  0EA4               	movlw	low _vscpData
  7812  002F74  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
  7813  002F76  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  7814  002F78  EC57  F026         	call	_getCANFrame
  7815  002F7C  0900               	iorlw	0
  7816  002F7E  E101 D0AD          	bz	l1050
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;main.c: 2098: cntRxFrames++;
  7820  002F82  2BD9               	incf	_cntRxFrames& (0+255),f,b
  7821  002F84  0E00               	movlw	0
  7822  002F86  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7823  002F88  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7824  002F8A  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7825                           
  7826                           ;main.c: 2099: cntRxBytes += dlc;
  7827  002F8C  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7828  002F8E  27D5               	addwf	_cntRxBytes& (0+255),f,b
  7829  002F90  0E00               	movlw	0
  7830  002F92  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7831  002F94  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7832  002F96  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7833  002F98                     l1023:
  7834                           
  7835                           ; BSR set to: 0
  7836  002F98  A2AC               	btfss	4012,1,c	;volatile
  7837  002F9A  D7FE               	goto	l1023
  7838                           
  7839                           ; BSR set to: 0
  7840                           ;main.c: 2102: WriteUSART('T');
  7841  002F9C  0E54               	movlw	84
  7842  002F9E  EC98  F02B         	call	_WriteUSART
  7843                           
  7844                           ;main.c: 2104: ultoa(wrkbuf, id, 16);
  7845  002FA2  0E01               	movlw	high _wrkbuf
  7846  002FA4  0100               	movlb	0	; () banked
  7847  002FA6  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7848  002FA8  0E54               	movlw	low _wrkbuf
  7849  002FAA  6F76               	movwf	?_ultoa& (0+255),b
  7850  002FAC  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  7851  002FB0  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  7852  002FB4  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  7853  002FB8  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  7854  002FBC  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7855  002FBE  0E10               	movlw	16
  7856  002FC0  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7857  002FC2  EC56  F01F         	call	_ultoa	;wreg free
  7858                           
  7859                           ; BSR set to: 0
  7860                           ;main.c: 2106: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7861  002FC6  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7862  002FC8  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7863  002FCA                     l1028:
  7864                           
  7865                           ; BSR set to: 0
  7866  002FCA  A2AC               	btfss	4012,1,c	;volatile
  7867  002FCC  D7FE               	goto	l1028
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;main.c: 2108: WriteUSART('0');
  7871  002FCE  0E30               	movlw	48
  7872  002FD0  EC98  F02B         	call	_WriteUSART
  7873                           
  7874                           ; BSR set to: 0
  7875  002FD4  D884               	call	PL92	;call to abstracted procedure
  7876  002FD6  B4D8               	btfsc	status,2,c
  7877  002FD8  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7878  002FDA  E3F7               	bnc	l1028
  7879                           
  7880                           ; BSR set to: 0
  7881                           ;main.c: 2109: }
  7882                           ;main.c: 2110: putsUSART(wrkbuf);
  7883  002FDC  0E01               	movlw	high _wrkbuf
  7884  002FDE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7885  002FE0  0E54               	movlw	low _wrkbuf
  7886  002FE2  6F61               	movwf	?_putsUSART& (0+255),b
  7887  002FE4  ECC9  F028         	call	_putsUSART	;wreg free
  7888                           
  7889                           ;main.c: 2113: itoa(wrkbuf, dlc, 16);
  7890  002FE8  0E01               	movlw	high _wrkbuf
  7891  002FEA  0100               	movlb	0	; () banked
  7892  002FEC  6F71               	movwf	(?_itoa+1)& (0+255),b
  7893  002FEE  0E54               	movlw	low _wrkbuf
  7894  002FF0  6F70               	movwf	?_itoa& (0+255),b
  7895  002FF2  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  7896  002FF6  6B73               	clrf	(?_itoa+3)& (0+255),b
  7897  002FF8  6B75               	clrf	(?_itoa+5)& (0+255),b
  7898  002FFA  0E10               	movlw	16
  7899  002FFC  6F74               	movwf	(?_itoa+4)& (0+255),b
  7900  002FFE  ECA9  F02A         	call	_itoa	;wreg free
  7901  003002                     l1031:
  7902                           
  7903                           ; BSR set to: 0
  7904  003002  A2AC               	btfss	4012,1,c	;volatile
  7905  003004  D7FE               	goto	l1031
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;main.c: 2115: WriteUSART(wrkbuf[0]);
  7909  003006  0101               	movlb	1	; () banked
  7910  003008  5154               	movf	_wrkbuf& (0+255),w,b
  7911  00300A  EC98  F02B         	call	_WriteUSART
  7912                           
  7913                           ;main.c: 2118: for (i = 0; i < dlc; i++) {
  7914  00300E  0100               	movlb	0	; () banked
  7915  003010  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7916  003012  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7917  003014  D02D               	goto	l12438
  7918  003016                     l12426:
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;main.c: 2119: itoa(wrkbuf, vscpData[i], 16);
  7922  003016  0E01               	movlw	high _wrkbuf
  7923  003018  0100               	movlb	0	; () banked
  7924  00301A  6F71               	movwf	(?_itoa+1)& (0+255),b
  7925  00301C  0E54               	movlw	low _wrkbuf
  7926  00301E  6F70               	movwf	?_itoa& (0+255),b
  7927  003020  0EA4               	movlw	low _vscpData
  7928  003022  258B               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  7929  003024  6ED9               	movwf	fsr2l,c
  7930  003026  0E01               	movlw	high _vscpData
  7931  003028  218C               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  7932  00302A  6EDA               	movwf	fsr2h,c
  7933  00302C  50DF               	movf	indf2,w,c
  7934  00302E  6F72               	movwf	(?_itoa+2)& (0+255),b
  7935  003030  6B73               	clrf	(?_itoa+3)& (0+255),b
  7936  003032  6B75               	clrf	(?_itoa+5)& (0+255),b
  7937  003034  0E10               	movlw	16
  7938  003036  6F74               	movwf	(?_itoa+4)& (0+255),b
  7939  003038  ECA9  F02A         	call	_itoa	;wreg free
  7940                           
  7941                           ; BSR set to: 0
  7942                           ;main.c: 2121: if (2 != strlen(wrkbuf)) {
  7943  00303C  0E01               	movlw	high _wrkbuf
  7944  00303E  0100               	movlb	0	; () banked
  7945  003040  6F61               	movwf	(?_strlen+1)& (0+255),b
  7946  003042  0E54               	movlw	low _wrkbuf
  7947  003044  6F60               	movwf	?_strlen& (0+255),b
  7948  003046  ECF0  F029         	call	_strlen	;wreg free
  7949  00304A  5160               	movf	?_strlen& (0+255),w,b
  7950  00304C  0A02               	xorlw	2
  7951  00304E  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7952  003050  E005               	bz	l12434
  7953  003052                     l1037:
  7954                           
  7955                           ; BSR set to: 0
  7956  003052  A2AC               	btfss	4012,1,c	;volatile
  7957  003054  D7FE               	goto	l1037
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;main.c: 2123: WriteUSART('0');
  7961  003056  0E30               	movlw	48
  7962  003058  EC98  F02B         	call	_WriteUSART
  7963  00305C                     l12434:
  7964                           
  7965                           ;main.c: 2124: }
  7966                           ;main.c: 2126: putsUSART(wrkbuf);
  7967  00305C  0E01               	movlw	high _wrkbuf
  7968  00305E  0100               	movlb	0	; () banked
  7969  003060  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7970  003062  0E54               	movlw	low _wrkbuf
  7971  003064  6F61               	movwf	?_putsUSART& (0+255),b
  7972  003066  ECC9  F028         	call	_putsUSART	;wreg free
  7973  00306A  0100               	movlb	0	; () banked
  7974  00306C  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  7975  00306E  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  7976  003070                     l12438:
  7977                           
  7978                           ; BSR set to: 0
  7979  003070  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7980  003072  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  7981  003074  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  7982  003076  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  7983  003078  0A80               	xorlw	128
  7984  00307A  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  7985  00307C  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  7986  00307E  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7987  003080  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  7988  003082  0A80               	xorlw	128
  7989  003084  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  7990  003086  E3C7               	bnc	l12426
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;main.c: 2127: }
  7994                           ;main.c: 2130: if (nTimeStamp) {
  7995  003088  51F2               	movf	_nTimeStamp& (0+255),w,b
  7996  00308A  E023               	bz	l1047
  7997                           
  7998                           ; BSR set to: 0
  7999                           ;main.c: 2131: ultoa(wrkbuf, timer, 16);
  8000  00308C  0E01               	movlw	high _wrkbuf
  8001  00308E  0100               	movlb	0	; () banked
  8002  003090  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8003  003092  0E54               	movlw	low _wrkbuf
  8004  003094  6F76               	movwf	?_ultoa& (0+255),b
  8005  003096  C0E9  F078         	movff	_timer,?_ultoa+2	;volatile
  8006  00309A  C0EA  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8007  00309E  C0EB  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8008  0030A2  C0EC  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8009  0030A6  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8010  0030A8  0E10               	movlw	16
  8011  0030AA  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8012  0030AC  EC56  F01F         	call	_ultoa	;wreg free
  8013                           
  8014                           ; BSR set to: 0
  8015                           ;main.c: 2133: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8016  0030B0  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8017  0030B2  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8018  0030B4                     l1044:
  8019                           
  8020                           ; BSR set to: 0
  8021  0030B4  A2AC               	btfss	4012,1,c	;volatile
  8022  0030B6  D7FE               	goto	l1044
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;main.c: 2135: WriteUSART('0');
  8026  0030B8  0E30               	movlw	48
  8027  0030BA  EC98  F02B         	call	_WriteUSART
  8028                           
  8029                           ; BSR set to: 0
  8030  0030BE  D80F               	call	PL92	;call to abstracted procedure
  8031  0030C0  B4D8               	btfsc	status,2,c
  8032  0030C2  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8033  0030C4  E3F7               	bnc	l1044
  8034                           
  8035                           ; BSR set to: 0
  8036                           ;main.c: 2136: }
  8037                           ;main.c: 2137: putsUSART(wrkbuf);
  8038  0030C6  0E01               	movlw	high _wrkbuf
  8039  0030C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8040  0030CA  0E54               	movlw	low _wrkbuf
  8041  0030CC  6F61               	movwf	?_putsUSART& (0+255),b
  8042  0030CE  ECC9  F028         	call	_putsUSART	;wreg free
  8043  0030D2                     l1047:
  8044  0030D2  A2AC               	btfss	4012,1,c	;volatile
  8045  0030D4  D7FE               	goto	l1047
  8046                           
  8047                           ;main.c: 2141: WriteUSART(0x0d);
  8048  0030D6  0E0D               	movlw	13
  8049  0030D8  EC98  F02B         	call	_WriteUSART
  8050  0030DC                     l1050:
  8051  0030DC  0012               	return	
  8052  0030DE                     __end_of_receiveSendEventSLCAN:
  8053                           	opt stack 0
  8054  0030DE                     PL92:
  8055                           	opt stack 23
  8056  0030DE  0100               	movlb	0	; () banked
  8057  0030E0  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8058  0030E2  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8059  0030E4  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8060  0030E6  0A80               	xorlw	128
  8061  0030E8  0F80               	addlw	-128
  8062  0030EA  0CB8               	retlw	184
  8063  0030EC                     __end_ofPL92:
  8064                           	opt stack 0
  8065                           tblptru	equ	0xFF8
  8066                           tblptrh	equ	0xFF7
  8067                           tblptrl	equ	0xFF6
  8068                           tablat	equ	0xFF5
  8069                           prodh	equ	0xFF4
  8070                           prodl	equ	0xFF3
  8071                           intcon	equ	0xFF2
  8072                           indf0	equ	0xFEF
  8073                           postinc0	equ	0xFEE
  8074                           fsr0h	equ	0xFEA
  8075                           fsr0l	equ	0xFE9
  8076                           wreg	equ	0xFE8
  8077                           indf1	equ	0xFE7
  8078                           postinc1	equ	0xFE6
  8079                           postdec1	equ	0xFE5
  8080                           fsr1h	equ	0xFE2
  8081                           fsr1l	equ	0xFE1
  8082                           indf2	equ	0xFDF
  8083                           postinc2	equ	0xFDE
  8084                           postdec2	equ	0xFDD
  8085                           plusw2	equ	0xFDB
  8086                           fsr2h	equ	0xFDA
  8087                           fsr2l	equ	0xFD9
  8088                           status	equ	0xFD8
  8089                           
  8090 ;; *************** function _ultoa *****************
  8091 ;; Defined at:
  8092 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8095 ;;		 -> wrkbuf(80), 
  8096 ;;  val             4   24[BANK0 ] unsigned long 
  8097 ;;  base            2   28[BANK0 ] int 
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  v               4   30[BANK0 ] unsigned long 
  8100 ;;  c               1   34[BANK0 ] unsigned char 
  8101 ;; Return value:  Size  Location     Type
  8102 ;;                  2   22[BANK0 ] PTR unsigned char 
  8103 ;; Registers used:
  8104 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8105 ;; Tracked objects:
  8106 ;;		On entry : F/0
  8107 ;;		On exit  : F/0
  8108 ;;		Unchanged: 0/0
  8109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8110 ;;      Params:         0       8       0       0       0       0       0
  8111 ;;      Locals:         0       5       0       0       0       0       0
  8112 ;;      Temps:          0       0       0       0       0       0       0
  8113 ;;      Totals:         0      13       0       0       0       0       0
  8114 ;;Total ram usage:       13 bytes
  8115 ;; Hardware stack levels used:    1
  8116 ;; Hardware stack levels required when called:    4
  8117 ;; This function calls:
  8118 ;;		___lldiv
  8119 ;;		___llmod
  8120 ;; This function is called by:
  8121 ;;		_receiveSendEventSLCAN
  8122 ;; This function uses a non-reentrant model
  8123 ;;
  8124                           
  8125                           	psect	text6
  8126  003EAC                     __ptext6:
  8127                           	opt stack 0
  8128  003EAC                     _ultoa:
  8129                           	opt stack 24
  8130                           
  8131                           ; BSR set to: 0
  8132                           
  8133                           ;incstack = 0
  8134                           ;incstack = 0
  8135  003EAC  C078  F07E         	movff	ultoa@val,ultoa@v
  8136  003EB0  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8137  003EB4  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8138  003EB8  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8139  003EBC                     l12596:
  8140                           
  8141                           ; BSR set to: 0
  8142  003EBC  C07E  F060         	movff	ultoa@v,?___lldiv
  8143  003EC0  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8144  003EC4  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8145  003EC8  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8146  003ECC  D858               	call	PL70	;call to abstracted procedure
  8147  003ECE  EC93  F026         	call	___lldiv	;wreg free
  8148  003ED2  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8149  003ED6  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8150  003EDA  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8151  003EDE  C060  F07E         	movff	?___lldiv,ultoa@v
  8152                           
  8153                           ; BSR set to: 0
  8154  003EE2  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8155  003EE4  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8156                           
  8157                           ; BSR set to: 0
  8158  003EE6  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8159  003EE8  117E               	iorwf	ultoa@v& (0+255),w,b
  8160  003EEA  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8161  003EEC  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8162  003EEE  E1E6               	bnz	l12596
  8163                           
  8164                           ; BSR set to: 0
  8165  003EF0  C076  FFD9         	movff	ultoa@buf,fsr2l
  8166  003EF4  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8167  003EF8  6ADF               	clrf	indf2,c
  8168                           
  8169                           ; BSR set to: 0
  8170  003EFA  0776               	decf	ultoa@buf& (0+255),f,b
  8171  003EFC  A0D8               	btfss	status,0,c
  8172  003EFE  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8173  003F00                     l12606:
  8174                           
  8175                           ; BSR set to: 0
  8176  003F00  C078  F06D         	movff	ultoa@val,?___llmod
  8177  003F04  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8178  003F08  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8179  003F0C  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8180  003F10  C07C  F071         	movff	ultoa@base,?___llmod+4
  8181  003F14  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8182  003F18  0E00               	movlw	0
  8183  003F1A  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8184  003F1C  0EFF               	movlw	-1
  8185  003F1E  6F73               	movwf	(?___llmod+6)& (0+255),b
  8186  003F20  6F74               	movwf	(?___llmod+7)& (0+255),b
  8187  003F22  EC0E  F028         	call	___llmod	;wreg free
  8188  003F26  516D               	movf	?___llmod& (0+255),w,b
  8189  003F28  6F82               	movwf	ultoa@c& (0+255),b
  8190                           
  8191                           ; BSR set to: 0
  8192  003F2A  C078  F060         	movff	ultoa@val,?___lldiv
  8193  003F2E  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8194  003F32  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8195  003F36  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8196  003F3A  D821               	call	PL70	;call to abstracted procedure
  8197  003F3C  EC93  F026         	call	___lldiv	;wreg free
  8198  003F40  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8199  003F44  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8200  003F48  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8201  003F4C  C060  F078         	movff	?___lldiv,ultoa@val
  8202                           
  8203                           ; BSR set to: 0
  8204  003F50  0E09               	movlw	9
  8205  003F52  6582               	cpfsgt	ultoa@c& (0+255),b
  8206  003F54  D002               	goto	l2387
  8207                           
  8208                           ; BSR set to: 0
  8209  003F56  0E07               	movlw	7
  8210  003F58  2782               	addwf	ultoa@c& (0+255),f,b
  8211  003F5A                     l2387:
  8212                           
  8213                           ; BSR set to: 0
  8214  003F5A  0E30               	movlw	48
  8215  003F5C  2782               	addwf	ultoa@c& (0+255),f,b
  8216                           
  8217                           ; BSR set to: 0
  8218  003F5E  C076  FFD9         	movff	ultoa@buf,fsr2l
  8219  003F62  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8220  003F66  C082  FFDF         	movff	ultoa@c,indf2
  8221                           
  8222                           ; BSR set to: 0
  8223  003F6A  0776               	decf	ultoa@buf& (0+255),f,b
  8224  003F6C  A0D8               	btfss	status,0,c
  8225  003F6E  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8226                           
  8227                           ; BSR set to: 0
  8228  003F70  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8229  003F72  1178               	iorwf	ultoa@val& (0+255),w,b
  8230  003F74  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8231  003F76  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8232  003F78  B4D8               	btfsc	status,2,c
  8233                           
  8234                           ; BSR set to: 0
  8235  003F7A  0012               	return	
  8236  003F7C  D7C1               	goto	l12606
  8237  003F7E                     __end_of_ultoa:
  8238                           	opt stack 0
  8239  003F7E                     PL70:
  8240                           	opt stack 24
  8241  003F7E  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8242  003F82  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8243  003F86  0E00               	movlw	0
  8244  003F88  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8245  003F8A  0EFF               	movlw	-1
  8246  003F8C  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8247  003F8E  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8248  003F90  0012               	return	
  8249  003F92                     __end_ofPL70:
  8250                           	opt stack 0
  8251                           tblptru	equ	0xFF8
  8252                           tblptrh	equ	0xFF7
  8253                           tblptrl	equ	0xFF6
  8254                           tablat	equ	0xFF5
  8255                           prodh	equ	0xFF4
  8256                           prodl	equ	0xFF3
  8257                           intcon	equ	0xFF2
  8258                           indf0	equ	0xFEF
  8259                           postinc0	equ	0xFEE
  8260                           fsr0h	equ	0xFEA
  8261                           fsr0l	equ	0xFE9
  8262                           wreg	equ	0xFE8
  8263                           indf1	equ	0xFE7
  8264                           postinc1	equ	0xFE6
  8265                           postdec1	equ	0xFE5
  8266                           fsr1h	equ	0xFE2
  8267                           fsr1l	equ	0xFE1
  8268                           indf2	equ	0xFDF
  8269                           postinc2	equ	0xFDE
  8270                           postdec2	equ	0xFDD
  8271                           plusw2	equ	0xFDB
  8272                           fsr2h	equ	0xFDA
  8273                           fsr2l	equ	0xFD9
  8274                           status	equ	0xFD8
  8275                           
  8276 ;; *************** function _doModeVscp *****************
  8277 ;; Defined at:
  8278 ;;		line 1087 in file "main.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;		None
  8281 ;; Auto vars:     Size  Location     Type
  8282 ;;  c               1   87[BANK0 ] unsigned char 
  8283 ;; Return value:  Size  Location     Type
  8284 ;;		None               void
  8285 ;; Registers used:
  8286 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8287 ;; Tracked objects:
  8288 ;;		On entry : F/0
  8289 ;;		On exit  : E/0
  8290 ;;		Unchanged: 0/0
  8291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8292 ;;      Params:         0       0       0       0       0       0       0
  8293 ;;      Locals:         0       1       0       0       0       0       0
  8294 ;;      Temps:          0       0       0       0       0       0       0
  8295 ;;      Totals:         0       1       0       0       0       0       0
  8296 ;;Total ram usage:        1 bytes
  8297 ;; Hardware stack levels used:    1
  8298 ;; Hardware stack levels required when called:    7
  8299 ;; This function calls:
  8300 ;;		_fifo_read
  8301 ;;		_ECANSetOperationMode
  8302 ;;		_receiveSendMultiEventCANAL
  8303 ;;		_receiveSendEventCANAL
  8304 ;;		_calcCRC
  8305 ;;		_sendVSCPDriverErrorFrame
  8306 ;;		_sendVSCPDriverAck
  8307 ;;		_receiveVSCPModeCanalMsg
  8308 ;;		_sendVSCPDriverNack
  8309 ;;		_receiveVSCPModeMultiCanalMsg
  8310 ;;		_sendVSCPModeCapabilities
  8311 ;;		_sendVSCPDriverCommandReply
  8312 ;; This function is called by:
  8313 ;;		_main
  8314 ;; This function uses a non-reentrant model
  8315 ;;
  8316                           
  8317                           	psect	text7
  8318  002A3A                     __ptext7:
  8319                           	opt stack 0
  8320  002A3A                     _doModeVscp:
  8321                           	opt stack 23
  8322                           
  8323                           ; BSR set to: 0
  8324                           ;main.c: 1088: uint8_t c;
  8325                           ;main.c: 1091: if ( !bSilent ) {
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;incstack = 0
  8329                           ;incstack = 0
  8330  002A3A  0101               	movlb	1	; () banked
  8331  002A3C  6701               	tstfsz	_bSilent& (0+255),b
  8332  002A3E  D00B               	goto	l10632
  8333                           
  8334                           ; BSR set to: 1
  8335                           ;main.c: 1092: if ( caps.maxCanalFrames > 1 ) {
  8336  002A40  0100               	movlb	0	; () banked
  8337  002A42  EE20  F0F6         	lfsr	2,_caps+1
  8338  002A46  0E01               	movlw	1
  8339  002A48  64DF               	cpfsgt	indf2,c
  8340  002A4A  D003               	goto	l10630
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;main.c: 1095: receiveSendMultiEventCANAL();
  8344  002A4C  EC76  F018         	call	_receiveSendMultiEventCANAL	;wreg free
  8345                           
  8346                           ;main.c: 1096: }
  8347  002A50  D002               	goto	l10632
  8348  002A52                     l10630:
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;main.c: 1097: else {
  8352                           ;main.c: 1100: receiveSendEventCANAL();
  8353  002A52  EC91  F01A         	call	_receiveSendEventCANAL	;wreg free
  8354  002A56                     l10632:
  8355                           
  8356                           ;main.c: 1101: }
  8357                           ;main.c: 1102: }
  8358                           ;main.c: 1105: (INTCONbits.GIE = 0);
  8359  002A56  9EF2               	bcf	intcon,7,c	;volatile
  8360                           
  8361                           ;main.c: 1107: if ( 1 == fifo_read(&serialInputFifo, &c, 1 ) ) {
  8362  002A58  0100               	movlb	0	; () banked
  8363  002A5A  0E00               	movlw	high doModeVscp@c
  8364  002A5C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8365  002A5E  0EB7               	movlw	low doModeVscp@c
  8366  002A60  6F60               	movwf	?_fifo_read& (0+255),b
  8367  002A62  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  8368  002A64  0E01               	movlw	1
  8369  002A66  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8370  002A68  0E48               	movlw	_serialInputFifo& (0+255)
  8371  002A6A  EC6F  F021         	call	_fifo_read
  8372  002A6E  0560               	decf	?_fifo_read& (0+255),w,b
  8373  002A70  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8374  002A72  E001 D0B9          	bnz	l10776
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;main.c: 1110: (INTCONbits.GIE = 1);
  8378  002A76  8EF2               	bsf	intcon,7,c	;volatile
  8379                           
  8380                           ;main.c: 1112: if ( 0 == stateVscpDriver ) {
  8381  002A78  67F4               	tstfsz	_stateVscpDriver& (0+255),b
  8382  002A7A  D00E               	goto	l10652
  8383                           
  8384                           ; BSR set to: 0
  8385                           ;main.c: 1113: if ( bDLE ) {
  8386  002A7C  51ED               	movf	_bDLE& (0+255),w,b
  8387  002A7E  E009               	bz	l10648
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;main.c: 1114: bDLE = 0;
  8391  002A80  6BED               	clrf	_bDLE& (0+255),b
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;main.c: 1117: if ( 0x02 == c ) {
  8395  002A82  51B7               	movf	doModeVscp@c& (0+255),w,b
  8396  002A84  0A02               	xorlw	2
  8397  002A86  E129               	bnz	l10686
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;main.c: 1118: stateVscpDriver = 1;
  8401  002A88  0E01               	movlw	1
  8402  002A8A  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8403                           
  8404                           ; BSR set to: 0
  8405                           ;main.c: 1119: pos = 0;
  8406  002A8C  0101               	movlb	1	; () banked
  8407  002A8E  6B02               	clrf	_pos& (0+255),b
  8408  002A90  D024               	goto	l10686
  8409  002A92                     l10648:
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;main.c: 1122: else {
  8413                           ;main.c: 1123: bDLE = 1;
  8414  002A92  0E01               	movlw	1
  8415  002A94  6FED               	movwf	_bDLE& (0+255),b
  8416  002A96  D0A9               	goto	l658
  8417  002A98                     l10652:
  8418                           
  8419                           ; BSR set to: 0
  8420                           ;main.c: 1127: else if ( 1 == stateVscpDriver ) {
  8421  002A98  05F4               	decf	_stateVscpDriver& (0+255),w,b
  8422  002A9A  E11F               	bnz	l10686
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;main.c: 1128: if (bDLE) {
  8426  002A9C  51ED               	movf	_bDLE& (0+255),w,b
  8427  002A9E  E00F               	bz	l10670
  8428                           
  8429                           ; BSR set to: 0
  8430                           ;main.c: 1130: bDLE = 0;
  8431  002AA0  6BED               	clrf	_bDLE& (0+255),b
  8432                           
  8433                           ; BSR set to: 0
  8434                           ;main.c: 1133: if (0x03 == c) {
  8435  002AA2  51B7               	movf	doModeVscp@c& (0+255),w,b
  8436  002AA4  0A03               	xorlw	3
  8437  002AA6  E103               	bnz	l10662
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;main.c: 1134: stateVscpDriver = 2;
  8441  002AA8  0E02               	movlw	2
  8442  002AAA  6FF4               	movwf	_stateVscpDriver& (0+255),b
  8443                           
  8444                           ;main.c: 1135: }
  8445  002AAC  D016               	goto	l10686
  8446  002AAE                     l10662:
  8447                           
  8448                           ; BSR set to: 0
  8449                           ;main.c: 1136: else if (0x10 == c) {
  8450  002AAE  51B7               	movf	doModeVscp@c& (0+255),w,b
  8451  002AB0  0A10               	xorlw	16
  8452  002AB2  E113               	bnz	l10686
  8453                           
  8454                           ; BSR set to: 0
  8455                           ;main.c: 1138: cmdbuf[ pos++ ] = c;
  8456  002AB4  D89B               	call	PL18	;call to abstracted procedure
  8457  002AB6  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8458                           
  8459                           ; BSR set to: 0
  8460  002ABA  2B02               	incf	_pos& (0+255),f,b
  8461  002ABC  D096               	goto	l658
  8462  002ABE                     l10670:
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;main.c: 1142: else {
  8466                           ;main.c: 1143: if (0x10 == c) {
  8467  002ABE  51B7               	movf	doModeVscp@c& (0+255),w,b
  8468  002AC0  0A10               	xorlw	16
  8469  002AC2  E0E7               	bz	l10648
  8470                           
  8471                           ; BSR set to: 0
  8472                           ;main.c: 1147: else {
  8473                           ;main.c: 1149: cmdbuf[ pos++ ] = c;
  8474  002AC4  D893               	call	PL18	;call to abstracted procedure
  8475  002AC6  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8476                           
  8477                           ; BSR set to: 0
  8478  002ACA  2B02               	incf	_pos& (0+255),f,b
  8479                           
  8480                           ; BSR set to: 1
  8481                           ;main.c: 1151: if (pos >= 128u) {
  8482  002ACC  0E7F               	movlw	127
  8483  002ACE  6502               	cpfsgt	_pos& (0+255),b
  8484  002AD0  D08C               	goto	l658
  8485                           
  8486                           ; BSR set to: 1
  8487                           ;main.c: 1154: pos = 0;
  8488  002AD2  6B02               	clrf	_pos& (0+255),b
  8489                           
  8490                           ;main.c: 1155: stateVscpDriver = 0;
  8491  002AD4  0100               	movlb	0	; () banked
  8492  002AD6  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8493  002AD8  D088               	goto	l658
  8494  002ADA                     l10686:
  8495                           
  8496                           ;main.c: 1159: }
  8497                           ;main.c: 1160: }
  8498                           ;main.c: 1161: }
  8499                           ;main.c: 1166: if (2 == stateVscpDriver) {
  8500  002ADA  0100               	movlb	0	; () banked
  8501  002ADC  51F4               	movf	_stateVscpDriver& (0+255),w,b
  8502  002ADE  0A02               	xorlw	2
  8503  002AE0  E001 D082          	bnz	l10776
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;main.c: 1169: stateVscpDriver = 0;
  8507  002AE4  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;main.c: 1182: if (calcCRC(cmdbuf, pos)) {
  8511  002AE6  0E01               	movlw	high _cmdbuf
  8512  002AE8  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8513  002AEA  0E04               	movlw	low _cmdbuf
  8514  002AEC  6F6C               	movwf	?_calcCRC& (0+255),b
  8515  002AEE  C102  F06E         	movff	_pos,?_calcCRC+2
  8516  002AF2  EC11  F02B         	call	_calcCRC	;wreg free
  8517  002AF6  0900               	iorlw	0
  8518  002AF8  E003               	bz	l10694
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;main.c: 1183: sendVSCPDriverErrorFrame(1);
  8522  002AFA  0E01               	movlw	1
  8523  002AFC  ECD6  F021         	call	_sendVSCPDriverErrorFrame
  8524  002B00                     l10694:
  8525                           
  8526                           ;main.c: 1184: }
  8527                           ;main.c: 1187: if (0 ==
  8528                           ;main.c: 1188: cmdbuf[ 0 ]) {
  8529  002B00  0101               	movlb	1	; () banked
  8530  002B02  6704               	tstfsz	_cmdbuf& (0+255),b
  8531  002B04  D003               	goto	l10698
  8532  002B06                     l10696:
  8533                           
  8534                           ;main.c: 1189: sendVSCPDriverAck();
  8535  002B06  EC3B  F023         	call	_sendVSCPDriverAck	;wreg free
  8536                           
  8537                           ;main.c: 1190: }
  8538  002B0A  D06A               	goto	l10772
  8539  002B0C                     l10698:
  8540                           
  8541                           ; BSR set to: 1
  8542                           ;main.c: 1192: else if (1 ==
  8543                           ;main.c: 1193: cmdbuf[ 0 ]) {
  8544  002B0C  0504               	decf	_cmdbuf& (0+255),w,b
  8545  002B0E  E068               	bz	l10772
  8546                           
  8547                           ; BSR set to: 1
  8548                           ;main.c: 1197: else if (2 ==
  8549                           ;main.c: 1198: cmdbuf[ 0 ]) {
  8550  002B10  5104               	movf	_cmdbuf& (0+255),w,b
  8551  002B12  0A02               	xorlw	2
  8552  002B14  E107               	bnz	l10710
  8553                           
  8554                           ; BSR set to: 1
  8555                           ;main.c: 1199: if ( receiveVSCPModeCanalMsg() ) {
  8556  002B16  ECC9  F01F         	call	_receiveVSCPModeCanalMsg	;wreg free
  8557  002B1A  0900               	iorlw	0
  8558  002B1C  E1F4               	bnz	l10696
  8559  002B1E                     l10708:
  8560                           
  8561                           ;main.c: 1202: else {
  8562                           ;main.c: 1203: sendVSCPDriverNack();
  8563  002B1E  ECEB  F022         	call	_sendVSCPDriverNack	;wreg free
  8564  002B22  D05E               	goto	l10772
  8565  002B24                     l10710:
  8566                           
  8567                           ; BSR set to: 1
  8568                           ;main.c: 1207: else if (6 ==
  8569                           ;main.c: 1208: cmdbuf[ 0 ]) {
  8570  002B24  5104               	movf	_cmdbuf& (0+255),w,b
  8571  002B26  0A06               	xorlw	6
  8572  002B28  E103               	bnz	l10718
  8573                           
  8574                           ; BSR set to: 1
  8575                           ;main.c: 1209: if (receiveVSCPModeMultiCanalMsg()) {
  8576  002B2A  ECC2  F02B         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8577  002B2E  D7F5               	goto	L4
  8578  002B30                     l10718:
  8579                           
  8580                           ; BSR set to: 1
  8581                           ;main.c: 1217: else if (6 ==
  8582                           ;main.c: 1218: cmdbuf[ 0 ]) {
  8583  002B30  5104               	movf	_cmdbuf& (0+255),w,b
  8584  002B32  0A06               	xorlw	6
  8585  002B34  E0F4               	bz	l10708
  8586                           
  8587                           ; BSR set to: 1
  8588                           ;main.c: 1222: else if (3 ==
  8589                           ;main.c: 1223: cmdbuf[ 0 ]) {
  8590  002B36  5104               	movf	_cmdbuf& (0+255),w,b
  8591  002B38  0A03               	xorlw	3
  8592  002B3A  E0F1               	bz	l10708
  8593                           
  8594                           ; BSR set to: 1
  8595                           ;main.c: 1227: else if (4 ==
  8596                           ;main.c: 1228: cmdbuf[ 0 ]) {
  8597  002B3C  5104               	movf	_cmdbuf& (0+255),w,b
  8598  002B3E  0A04               	xorlw	4
  8599  002B40  E0EE               	bz	l10708
  8600                           
  8601                           ; BSR set to: 1
  8602                           ;main.c: 1232: else if (8 ==
  8603                           ;main.c: 1233: cmdbuf[ 0 ]) {
  8604  002B42  5104               	movf	_cmdbuf& (0+255),w,b
  8605  002B44  0A08               	xorlw	8
  8606  002B46  E107               	bnz	l10736
  8607                           
  8608                           ; BSR set to: 1
  8609                           ;main.c: 1234: caps.maxVscpFrames = cmdbuf[ 5 ];
  8610  002B48  C109  F0F5         	movff	_cmdbuf+5,_caps
  8611                           
  8612                           ;main.c: 1235: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8613  002B4C  C10A  F0F6         	movff	_cmdbuf+6,_caps+1
  8614                           
  8615                           ; BSR set to: 1
  8616                           ;main.c: 1236: sendVSCPModeCapabilities();
  8617  002B50  EC35  F022         	call	_sendVSCPModeCapabilities	;wreg free
  8618                           
  8619                           ;main.c: 1237: }
  8620  002B54  D045               	goto	l10772
  8621  002B56                     l10736:
  8622                           
  8623                           ; BSR set to: 1
  8624                           ;main.c: 1239: else if (255 ==
  8625                           ;main.c: 1240: cmdbuf[ 0 ]) {
  8626  002B56  2904               	incf	_cmdbuf& (0+255),w,b
  8627  002B58  E140               	bnz	l10770
  8628                           
  8629                           ; BSR set to: 1
  8630                           ;main.c: 1242: if (cmdbuf[ 5 ] ==
  8631                           ;main.c: 1243: 0) {
  8632  002B5A  6709               	tstfsz	(_cmdbuf+5)& (0+255),b
  8633  002B5C  D006               	goto	l10742
  8634                           
  8635                           ; BSR set to: 1
  8636                           ;main.c: 1244: sendVSCPDriverCommandReply(0, 0);
  8637  002B5E  0E00               	movlw	0
  8638  002B60  0100               	movlb	0	; () banked
  8639  002B62  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8640  002B64  EC37  F020         	call	_sendVSCPDriverCommandReply
  8641                           
  8642                           ;main.c: 1245: }
  8643  002B68  D03B               	goto	l10772
  8644  002B6A                     l10742:
  8645                           
  8646                           ; BSR set to: 1
  8647                           ;main.c: 1247: else if (cmdbuf[ 5 ] ==
  8648                           ;main.c: 1248: 1) {
  8649  002B6A  0509               	decf	(_cmdbuf+5)& (0+255),w,b
  8650  002B6C  E109               	bnz	l10748
  8651                           
  8652                           ; BSR set to: 1
  8653                           ;main.c: 1249: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8654  002B6E  0E00               	movlw	0
  8655  002B70  EC80  F02B         	call	_ECANSetOperationMode
  8656                           
  8657                           ; BSR set to: 0
  8658                           ;main.c: 1250: sendVSCPDriverCommandReply(0, 1);
  8659  002B74  0E01               	movlw	1
  8660  002B76  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8661  002B78  0E00               	movlw	0
  8662  002B7A  EC37  F020         	call	_sendVSCPDriverCommandReply
  8663                           
  8664                           ;main.c: 1251: }
  8665  002B7E  D030               	goto	l10772
  8666  002B80                     l10748:
  8667                           
  8668                           ; BSR set to: 1
  8669                           ;main.c: 1253: else if (cmdbuf[ 5 ] ==
  8670                           ;main.c: 1254: 2) {
  8671  002B80  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8672  002B82  0A02               	xorlw	2
  8673  002B84  E109               	bnz	l10754
  8674                           
  8675                           ; BSR set to: 1
  8676                           ;main.c: 1255: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8677  002B86  0E40               	movlw	64
  8678  002B88  EC80  F02B         	call	_ECANSetOperationMode
  8679                           
  8680                           ; BSR set to: 0
  8681                           ;main.c: 1256: sendVSCPDriverCommandReply(0, 2);
  8682  002B8C  0E02               	movlw	2
  8683  002B8E  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8684  002B90  0E00               	movlw	0
  8685  002B92  EC37  F020         	call	_sendVSCPDriverCommandReply
  8686                           
  8687                           ;main.c: 1257: }
  8688  002B96  D024               	goto	l10772
  8689  002B98                     l10754:
  8690                           
  8691                           ; BSR set to: 1
  8692                           ;main.c: 1259: else if (cmdbuf[ 5 ] ==
  8693                           ;main.c: 1260: 3) {
  8694  002B98  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8695  002B9A  0A03               	xorlw	3
  8696  002B9C  E109               	bnz	l10760
  8697                           
  8698                           ; BSR set to: 1
  8699                           ;main.c: 1261: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8700  002B9E  0E60               	movlw	96
  8701  002BA0  EC80  F02B         	call	_ECANSetOperationMode
  8702                           
  8703                           ; BSR set to: 0
  8704                           ;main.c: 1262: sendVSCPDriverCommandReply(0, 3);
  8705  002BA4  0E03               	movlw	3
  8706  002BA6  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8707  002BA8  0E00               	movlw	0
  8708  002BAA  EC37  F020         	call	_sendVSCPDriverCommandReply
  8709                           
  8710                           ;main.c: 1263: }
  8711  002BAE  D018               	goto	l10772
  8712  002BB0                     l10760:
  8713                           
  8714                           ; BSR set to: 1
  8715                           ;main.c: 1265: else if (cmdbuf[ 5 ] ==
  8716                           ;main.c: 1266: 4) {
  8717  002BB0  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8718  002BB2  0A04               	xorlw	4
  8719  002BB4  E109               	bnz	l10766
  8720                           
  8721                           ; BSR set to: 1
  8722                           ;main.c: 1267: ECANSetOperationMode(0x20);
  8723  002BB6  0E20               	movlw	32
  8724  002BB8  EC80  F02B         	call	_ECANSetOperationMode
  8725                           
  8726                           ; BSR set to: 0
  8727                           ;main.c: 1268: sendVSCPDriverCommandReply(0, 4);
  8728  002BBC  0E04               	movlw	4
  8729  002BBE  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8730  002BC0  0E00               	movlw	0
  8731  002BC2  EC37  F020         	call	_sendVSCPDriverCommandReply
  8732                           
  8733                           ;main.c: 1269: }
  8734  002BC6  D00C               	goto	l10772
  8735  002BC8                     l10766:
  8736                           
  8737                           ; BSR set to: 1
  8738                           ;main.c: 1271: else if (cmdbuf[ 5 ] ==
  8739                           ;main.c: 1272: 5) {
  8740  002BC8  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8741  002BCA  0A05               	xorlw	5
  8742  002BCC  E109               	bnz	l10772
  8743                           
  8744                           ; BSR set to: 1
  8745                           ;main.c: 1273: sendVSCPDriverCommandReply(0, 0);
  8746  002BCE  0E00               	movlw	0
  8747  002BD0  0100               	movlb	0	; () banked
  8748  002BD2  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8749  002BD4  EC37  F020         	call	_sendVSCPDriverCommandReply
  8750  002BD8  D003               	goto	l10772
  8751  002BDA                     l10770:
  8752                           
  8753                           ; BSR set to: 1
  8754                           ;main.c: 1277: else {
  8755                           ;main.c: 1279: sendVSCPDriverErrorFrame(2);
  8756  002BDA  0E02               	movlw	2
  8757  002BDC  ECD6  F021         	call	_sendVSCPDriverErrorFrame
  8758  002BE0                     l10772:
  8759                           
  8760                           ;main.c: 1280: }
  8761                           ;main.c: 1283: pos = 0;
  8762  002BE0  0101               	movlb	1	; () banked
  8763  002BE2  6B02               	clrf	_pos& (0+255),b
  8764                           
  8765                           ; BSR set to: 1
  8766                           ;main.c: 1284: stateVscpDriver = 0;
  8767  002BE4  0100               	movlb	0	; () banked
  8768  002BE6  6BF4               	clrf	_stateVscpDriver& (0+255),b
  8769  002BE8                     l10776:
  8770                           
  8771                           ; BSR set to: 0
  8772                           ;main.c: 1286: }
  8773                           ;main.c: 1288: }
  8774                           ;main.c: 1291: (INTCONbits.GIE = 1);
  8775  002BE8  8EF2               	bsf	intcon,7,c	;volatile
  8776  002BEA                     l658:
  8777  002BEA  0012               	return	
  8778  002BEC                     __end_of_doModeVscp:
  8779                           	opt stack 0
  8780  002BEC                     PL18:
  8781                           	opt stack 20
  8782  002BEC  0101               	movlb	1	; () banked
  8783  002BEE  0E04               	movlw	low _cmdbuf
  8784  002BF0  2502               	addwf	_pos& (0+255),w,b
  8785  002BF2  6ED9               	movwf	fsr2l,c
  8786  002BF4  6ADA               	clrf	fsr2h,c
  8787  002BF6  0E01               	movlw	high _cmdbuf
  8788  002BF8  22DA               	addwfc	fsr2h,f,c
  8789  002BFA  0012               	return	
  8790  002BFC                     __end_ofPL18:
  8791                           	opt stack 0
  8792                           tblptru	equ	0xFF8
  8793                           tblptrh	equ	0xFF7
  8794                           tblptrl	equ	0xFF6
  8795                           tablat	equ	0xFF5
  8796                           prodh	equ	0xFF4
  8797                           prodl	equ	0xFF3
  8798                           intcon	equ	0xFF2
  8799                           indf0	equ	0xFEF
  8800                           postinc0	equ	0xFEE
  8801                           fsr0h	equ	0xFEA
  8802                           fsr0l	equ	0xFE9
  8803                           wreg	equ	0xFE8
  8804                           indf1	equ	0xFE7
  8805                           postinc1	equ	0xFE6
  8806                           postdec1	equ	0xFE5
  8807                           fsr1h	equ	0xFE2
  8808                           fsr1l	equ	0xFE1
  8809                           indf2	equ	0xFDF
  8810                           postinc2	equ	0xFDE
  8811                           postdec2	equ	0xFDD
  8812                           plusw2	equ	0xFDB
  8813                           fsr2h	equ	0xFDA
  8814                           fsr2l	equ	0xFD9
  8815                           status	equ	0xFD8
  8816                           
  8817 ;; *************** function _sendVSCPDriverCommandReply *****************
  8818 ;; Defined at:
  8819 ;;		line 1673 in file "main.c"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;  cmdReplyCode    1    wreg     unsigned char 
  8822 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  8823 ;; Auto vars:     Size  Location     Type
  8824 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  8825 ;;  crc             1   17[BANK0 ] unsigned char 
  8826 ;; Return value:  Size  Location     Type
  8827 ;;		None               void
  8828 ;; Registers used:
  8829 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8830 ;; Tracked objects:
  8831 ;;		On entry : F/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8835 ;;      Params:         0       1       0       0       0       0       0
  8836 ;;      Locals:         0       2       0       0       0       0       0
  8837 ;;      Temps:          0       0       0       0       0       0       0
  8838 ;;      Totals:         0       3       0       0       0       0       0
  8839 ;;Total ram usage:        3 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; Hardware stack levels required when called:    6
  8842 ;; This function calls:
  8843 ;;		_WriteUSART
  8844 ;;		_sendEscapedUartData
  8845 ;;		_crc8
  8846 ;; This function is called by:
  8847 ;;		_doModeVscp
  8848 ;; This function uses a non-reentrant model
  8849 ;;
  8850                           
  8851                           	psect	text8
  8852  00406E                     __ptext8:
  8853                           	opt stack 0
  8854  00406E                     _sendVSCPDriverCommandReply:
  8855                           	opt stack 23
  8856                           
  8857                           ;incstack = 0
  8858                           ;incstack = 0
  8859                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8860  00406E  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8861                           
  8862                           ; BSR set to: 0
  8863                           ;main.c: 1674: uint8_t crc = 0;
  8864  004072  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  8865  004074                     l852:
  8866                           
  8867                           ; BSR set to: 0
  8868  004074  A2AC               	btfss	4012,1,c	;volatile
  8869  004076  D7FE               	goto	l852
  8870                           
  8871                           ; BSR set to: 0
  8872                           ;main.c: 1678: WriteUSART(0x10);
  8873  004078  0E10               	movlw	16
  8874  00407A  EC98  F02B         	call	_WriteUSART
  8875  00407E                     l855:
  8876  00407E  A2AC               	btfss	4012,1,c	;volatile
  8877  004080  D7FE               	goto	l855
  8878                           
  8879                           ;main.c: 1680: WriteUSART(0x02);
  8880  004082  0E02               	movlw	2
  8881  004084  EC98  F02B         	call	_WriteUSART
  8882  004088                     l858:
  8883  004088  A2AC               	btfss	4012,1,c	;volatile
  8884  00408A  D7FE               	goto	l858
  8885                           
  8886                           ;main.c: 1684: WriteUSART(254);
  8887  00408C  0EFE               	movlw	254
  8888  00408E  EC98  F02B         	call	_WriteUSART
  8889                           
  8890                           ;main.c: 1685: crc8(&crc, 254);
  8891  004092  0100               	movlb	0	; () banked
  8892  004094  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8893  004096  6F68               	movwf	(?_crc8+1)& (0+255),b
  8894  004098  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8895  00409A  6F67               	movwf	?_crc8& (0+255),b
  8896  00409C  0EFE               	movlw	254
  8897  00409E  6F69               	movwf	(?_crc8+2)& (0+255),b
  8898  0040A0  ECC5  F02A         	call	_crc8	;wreg free
  8899  0040A4                     l861:
  8900                           
  8901                           ; BSR set to: 0
  8902  0040A4  A2AC               	btfss	4012,1,c	;volatile
  8903  0040A6  D7FE               	goto	l861
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;main.c: 1689: WriteUSART(0);
  8907  0040A8  0E00               	movlw	0
  8908  0040AA  EC98  F02B         	call	_WriteUSART
  8909                           
  8910                           ;main.c: 1690: crc8(&crc, 0);
  8911  0040AE  D841               	call	PL96	;call to abstracted procedure
  8912  0040B0  ECC5  F02A         	call	_crc8	;wreg free
  8913                           
  8914                           ; BSR set to: 0
  8915                           ;main.c: 1693: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  8916  0040B4  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8917  0040B6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8918  0040B8  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8919  0040BA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8920  0040BC  0101               	movlb	1	; () banked
  8921  0040BE  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  8922  0040C0  EC3F  F028         	call	_sendEscapedUartData
  8923  0040C4                     l864:
  8924                           
  8925                           ; BSR set to: 0
  8926  0040C4  A2AC               	btfss	4012,1,c	;volatile
  8927  0040C6  D7FE               	goto	l864
  8928                           
  8929                           ; BSR set to: 0
  8930                           ;main.c: 1697: WriteUSART(0);
  8931  0040C8  0E00               	movlw	0
  8932  0040CA  EC98  F02B         	call	_WriteUSART
  8933                           
  8934                           ;main.c: 1698: crc8(&crc, 0);
  8935  0040CE  D831               	call	PL96	;call to abstracted procedure
  8936  0040D0  ECC5  F02A         	call	_crc8	;wreg free
  8937  0040D4                     l867:
  8938                           
  8939                           ; BSR set to: 0
  8940  0040D4  A2AC               	btfss	4012,1,c	;volatile
  8941  0040D6  D7FE               	goto	l867
  8942                           
  8943                           ; BSR set to: 0
  8944                           ;main.c: 1700: WriteUSART(2);
  8945  0040D8  0E02               	movlw	2
  8946  0040DA  EC98  F02B         	call	_WriteUSART
  8947                           
  8948                           ;main.c: 1701: crc8(&crc, 2);
  8949  0040DE  0100               	movlb	0	; () banked
  8950  0040E0  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8951  0040E2  6F68               	movwf	(?_crc8+1)& (0+255),b
  8952  0040E4  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8953  0040E6  6F67               	movwf	?_crc8& (0+255),b
  8954  0040E8  0E02               	movlw	2
  8955  0040EA  6F69               	movwf	(?_crc8+2)& (0+255),b
  8956  0040EC  ECC5  F02A         	call	_crc8	;wreg free
  8957  0040F0                     l870:
  8958                           
  8959                           ; BSR set to: 0
  8960  0040F0  A2AC               	btfss	4012,1,c	;volatile
  8961  0040F2  D7FE               	goto	l870
  8962                           
  8963                           ; BSR set to: 0
  8964                           ;main.c: 1705: sendEscapedUartData(cmdReplyCode, &crc);
  8965  0040F4  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8966  0040F6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8967  0040F8  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8968  0040FA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8969  0040FC  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  8970  0040FE  EC3F  F028         	call	_sendEscapedUartData
  8971  004102                     l873:
  8972                           
  8973                           ; BSR set to: 0
  8974  004102  A2AC               	btfss	4012,1,c	;volatile
  8975  004104  D7FE               	goto	l873
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;main.c: 1709: sendEscapedUartData(cmdCode, &crc);
  8979  004106  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8980  004108  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8981  00410A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8982  00410C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8983  00410E  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  8984  004110  EC3F  F028         	call	_sendEscapedUartData
  8985                           
  8986                           ;main.c: 1712: sendEscapedUartData(crc, (0));
  8987  004114  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  8988  004116  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  8989  004118  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  8990  00411A  EC3F  F028         	call	_sendEscapedUartData
  8991  00411E                     l876:
  8992                           
  8993                           ; BSR set to: 0
  8994  00411E  A2AC               	btfss	4012,1,c	;volatile
  8995  004120  D7FE               	goto	l876
  8996                           
  8997                           ; BSR set to: 0
  8998                           ;main.c: 1716: WriteUSART(0x10);
  8999  004122  0E10               	movlw	16
  9000  004124  EC98  F02B         	call	_WriteUSART
  9001  004128                     l879:
  9002  004128  A2AC               	btfss	4012,1,c	;volatile
  9003  00412A  D7FE               	goto	l879
  9004                           
  9005                           ;main.c: 1718: WriteUSART(0x03);
  9006  00412C  0E03               	movlw	3
  9007  00412E  EF98  F02B         	goto	_WriteUSART
  9008  004132                     __end_of_sendVSCPDriverCommandReply:
  9009                           	opt stack 0
  9010  004132                     PL96:
  9011                           	opt stack 23
  9012  004132  0100               	movlb	0	; () banked
  9013  004134  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9014  004136  6F68               	movwf	(?_crc8+1)& (0+255),b
  9015  004138  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9016  00413A  6F67               	movwf	?_crc8& (0+255),b
  9017  00413C  6B69               	clrf	(?_crc8+2)& (0+255),b
  9018  00413E  0C00               	retlw	0
  9019  004140                     __end_ofPL96:
  9020                           	opt stack 0
  9021                           tblptru	equ	0xFF8
  9022                           tblptrh	equ	0xFF7
  9023                           tblptrl	equ	0xFF6
  9024                           tablat	equ	0xFF5
  9025                           prodh	equ	0xFF4
  9026                           prodl	equ	0xFF3
  9027                           intcon	equ	0xFF2
  9028                           indf0	equ	0xFEF
  9029                           postinc0	equ	0xFEE
  9030                           fsr0h	equ	0xFEA
  9031                           fsr0l	equ	0xFE9
  9032                           wreg	equ	0xFE8
  9033                           indf1	equ	0xFE7
  9034                           postinc1	equ	0xFE6
  9035                           postdec1	equ	0xFE5
  9036                           fsr1h	equ	0xFE2
  9037                           fsr1l	equ	0xFE1
  9038                           indf2	equ	0xFDF
  9039                           postinc2	equ	0xFDE
  9040                           postdec2	equ	0xFDD
  9041                           plusw2	equ	0xFDB
  9042                           fsr2h	equ	0xFDA
  9043                           fsr2l	equ	0xFD9
  9044                           status	equ	0xFD8
  9045                           
  9046 ;; *************** function _sendVSCPModeCapabilities *****************
  9047 ;; Defined at:
  9048 ;;		line 2042 in file "main.c"
  9049 ;; Parameters:    Size  Location     Type
  9050 ;;		None
  9051 ;; Auto vars:     Size  Location     Type
  9052 ;;  crc             1   15[BANK0 ] unsigned char 
  9053 ;; Return value:  Size  Location     Type
  9054 ;;                  1    wreg      enum E15660
  9055 ;; Registers used:
  9056 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9057 ;; Tracked objects:
  9058 ;;		On entry : F/1
  9059 ;;		On exit  : 0/0
  9060 ;;		Unchanged: 0/0
  9061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9062 ;;      Params:         0       0       0       0       0       0       0
  9063 ;;      Locals:         0       1       0       0       0       0       0
  9064 ;;      Temps:          0       0       0       0       0       0       0
  9065 ;;      Totals:         0       1       0       0       0       0       0
  9066 ;;Total ram usage:        1 bytes
  9067 ;; Hardware stack levels used:    1
  9068 ;; Hardware stack levels required when called:    6
  9069 ;; This function calls:
  9070 ;;		_WriteUSART
  9071 ;;		_sendEscapedUartData
  9072 ;;		_crc8
  9073 ;; This function is called by:
  9074 ;;		_doModeVscp
  9075 ;; This function uses a non-reentrant model
  9076 ;;
  9077                           
  9078                           	psect	text9
  9079  00446A                     __ptext9:
  9080                           	opt stack 0
  9081  00446A                     _sendVSCPModeCapabilities:
  9082                           	opt stack 23
  9083                           
  9084                           ; BSR set to: 1
  9085                           ;main.c: 2043: uint8_t crc = 0;
  9086                           
  9087                           ;incstack = 0
  9088                           ;incstack = 0
  9089  00446A  0100               	movlb	0	; () banked
  9090  00446C  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9091  00446E                     l1001:
  9092  00446E  A2AC               	btfss	4012,1,c	;volatile
  9093  004470  D7FE               	goto	l1001
  9094                           
  9095                           ;main.c: 2047: WriteUSART(0x10);
  9096  004472  0E10               	movlw	16
  9097  004474  EC98  F02B         	call	_WriteUSART
  9098  004478                     l1004:
  9099  004478  A2AC               	btfss	4012,1,c	;volatile
  9100  00447A  D7FE               	goto	l1004
  9101                           
  9102                           ;main.c: 2049: WriteUSART(0x02);
  9103  00447C  0E02               	movlw	2
  9104  00447E  EC98  F02B         	call	_WriteUSART
  9105  004482                     l1007:
  9106  004482  A2AC               	btfss	4012,1,c	;volatile
  9107  004484  D7FE               	goto	l1007
  9108                           
  9109                           ;main.c: 2053: WriteUSART(9);
  9110  004486  0E09               	movlw	9
  9111  004488  EC98  F02B         	call	_WriteUSART
  9112                           
  9113                           ;main.c: 2054: crc8(&crc, 9);
  9114  00448C  0100               	movlb	0	; () banked
  9115  00448E  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9116  004490  6F68               	movwf	(?_crc8+1)& (0+255),b
  9117  004492  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9118  004494  6F67               	movwf	?_crc8& (0+255),b
  9119  004496  0E09               	movlw	9
  9120  004498  6F69               	movwf	(?_crc8+2)& (0+255),b
  9121  00449A  ECC5  F02A         	call	_crc8	;wreg free
  9122  00449E                     l1010:
  9123  00449E  A2AC               	btfss	4012,1,c	;volatile
  9124  0044A0  D7FE               	goto	l1010
  9125                           
  9126                           ;main.c: 2058: WriteUSART(0);
  9127  0044A2  0E00               	movlw	0
  9128  0044A4  EC98  F02B         	call	_WriteUSART
  9129                           
  9130                           ;main.c: 2059: crc8(&crc, 0);
  9131  0044A8  0100               	movlb	0	; () banked
  9132  0044AA  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9133  0044AC  6F68               	movwf	(?_crc8+1)& (0+255),b
  9134  0044AE  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9135  0044B0  6F67               	movwf	?_crc8& (0+255),b
  9136  0044B2  0E00               	movlw	0
  9137  0044B4  6B69               	clrf	(?_crc8+2)& (0+255),b
  9138  0044B6  ECC5  F02A         	call	_crc8	;wreg free
  9139                           
  9140                           ; BSR set to: 0
  9141                           ;main.c: 2062: sendEscapedUartData(sequencyno, &crc );
  9142  0044BA  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9143  0044BC  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9144  0044BE  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9145  0044C0  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9146  0044C2  51F3               	movf	_sequencyno& (0+255),w,b
  9147  0044C4  EC3F  F028         	call	_sendEscapedUartData
  9148                           
  9149                           ; BSR set to: 0
  9150                           ;main.c: 2063: sequencyno++;
  9151  0044C8  2BF3               	incf	_sequencyno& (0+255),f,b
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;main.c: 2066: sendEscapedUartData( 0, &crc );
  9155  0044CA  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9156  0044CC  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9157  0044CE  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9158  0044D0  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9159  0044D2  0E00               	movlw	0
  9160  0044D4  EC3F  F028         	call	_sendEscapedUartData
  9161                           
  9162                           ; BSR set to: 0
  9163                           ;main.c: 2067: sendEscapedUartData( 2, &crc );
  9164  0044D8  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9165  0044DA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9166  0044DC  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9167  0044DE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9168  0044E0  0E02               	movlw	2
  9169  0044E2  EC3F  F028         	call	_sendEscapedUartData
  9170                           
  9171                           ; BSR set to: 0
  9172                           ;main.c: 2070: sendEscapedUartData( 1, &crc );
  9173  0044E6  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9174  0044E8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9175  0044EA  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9176  0044EC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9177  0044EE  0E01               	movlw	1
  9178  0044F0  EC3F  F028         	call	_sendEscapedUartData
  9179                           
  9180                           ; BSR set to: 0
  9181                           ;main.c: 2071: sendEscapedUartData( 0, &crc );
  9182  0044F4  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9183  0044F6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9184  0044F8  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9185  0044FA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9186  0044FC  0E00               	movlw	0
  9187  0044FE  EC3F  F028         	call	_sendEscapedUartData
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;main.c: 2074: sendEscapedUartData(crc, (0));
  9191  004502  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9192  004504  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9193  004506  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9194  004508  EC3F  F028         	call	_sendEscapedUartData
  9195  00450C                     l1013:
  9196  00450C  A2AC               	btfss	4012,1,c	;volatile
  9197  00450E  D7FE               	goto	l1013
  9198                           
  9199                           ;main.c: 2078: WriteUSART(0x10);
  9200  004510  0E10               	movlw	16
  9201  004512  EC98  F02B         	call	_WriteUSART
  9202  004516                     l1016:
  9203  004516  A2AC               	btfss	4012,1,c	;volatile
  9204  004518  D7FE               	goto	l1016
  9205                           
  9206                           ;main.c: 2080: WriteUSART(0x03);
  9207  00451A  0E03               	movlw	3
  9208  00451C  EF98  F02B         	goto	_WriteUSART
  9209  004520                     __end_of_sendVSCPModeCapabilities:
  9210                           	opt stack 0
  9211                           tblptru	equ	0xFF8
  9212                           tblptrh	equ	0xFF7
  9213                           tblptrl	equ	0xFF6
  9214                           tablat	equ	0xFF5
  9215                           prodh	equ	0xFF4
  9216                           prodl	equ	0xFF3
  9217                           intcon	equ	0xFF2
  9218                           indf0	equ	0xFEF
  9219                           postinc0	equ	0xFEE
  9220                           fsr0h	equ	0xFEA
  9221                           fsr0l	equ	0xFE9
  9222                           wreg	equ	0xFE8
  9223                           indf1	equ	0xFE7
  9224                           postinc1	equ	0xFE6
  9225                           postdec1	equ	0xFE5
  9226                           fsr1h	equ	0xFE2
  9227                           fsr1l	equ	0xFE1
  9228                           indf2	equ	0xFDF
  9229                           postinc2	equ	0xFDE
  9230                           postdec2	equ	0xFDD
  9231                           plusw2	equ	0xFDB
  9232                           fsr2h	equ	0xFDA
  9233                           fsr2l	equ	0xFD9
  9234                           status	equ	0xFD8
  9235                           
  9236 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9237 ;; Defined at:
  9238 ;;		line 2173 in file "main.c"
  9239 ;; Parameters:    Size  Location     Type
  9240 ;;		None
  9241 ;; Auto vars:     Size  Location     Type
  9242 ;;		None
  9243 ;; Return value:  Size  Location     Type
  9244 ;;                  1    wreg      enum E15660
  9245 ;; Registers used:
  9246 ;;		wreg
  9247 ;; Tracked objects:
  9248 ;;		On entry : F/1
  9249 ;;		On exit  : F/1
  9250 ;;		Unchanged: F/0
  9251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9252 ;;      Params:         0       0       0       0       0       0       0
  9253 ;;      Locals:         0       0       0       0       0       0       0
  9254 ;;      Temps:          0       0       0       0       0       0       0
  9255 ;;      Totals:         0       0       0       0       0       0       0
  9256 ;;Total ram usage:        0 bytes
  9257 ;; Hardware stack levels used:    1
  9258 ;; Hardware stack levels required when called:    3
  9259 ;; This function calls:
  9260 ;;		Nothing
  9261 ;; This function is called by:
  9262 ;;		_doModeVscp
  9263 ;; This function uses a non-reentrant model
  9264 ;;
  9265                           
  9266                           	psect	text10
  9267  005784                     __ptext10:
  9268                           	opt stack 0
  9269  005784                     _receiveVSCPModeMultiCanalMsg:
  9270                           	opt stack 26
  9271                           
  9272                           ; BSR set to: 1
  9273                           
  9274                           ; BSR set to: 1
  9275                           ;main.c: 2175: return 0;
  9276                           
  9277                           ;incstack = 0
  9278                           ;incstack = 0
  9279  005784  0C00               	retlw	0
  9280  005786                     __end_of_receiveVSCPModeMultiCanalMsg:
  9281                           	opt stack 0
  9282                           tblptru	equ	0xFF8
  9283                           tblptrh	equ	0xFF7
  9284                           tblptrl	equ	0xFF6
  9285                           tablat	equ	0xFF5
  9286                           prodh	equ	0xFF4
  9287                           prodl	equ	0xFF3
  9288                           intcon	equ	0xFF2
  9289                           indf0	equ	0xFEF
  9290                           postinc0	equ	0xFEE
  9291                           fsr0h	equ	0xFEA
  9292                           fsr0l	equ	0xFE9
  9293                           wreg	equ	0xFE8
  9294                           indf1	equ	0xFE7
  9295                           postinc1	equ	0xFE6
  9296                           postdec1	equ	0xFE5
  9297                           fsr1h	equ	0xFE2
  9298                           fsr1l	equ	0xFE1
  9299                           indf2	equ	0xFDF
  9300                           postinc2	equ	0xFDE
  9301                           postdec2	equ	0xFDD
  9302                           plusw2	equ	0xFDB
  9303                           fsr2h	equ	0xFDA
  9304                           fsr2l	equ	0xFD9
  9305                           status	equ	0xFD8
  9306                           
  9307 ;; *************** function _sendVSCPDriverNack *****************
  9308 ;; Defined at:
  9309 ;;		line 1628 in file "main.c"
  9310 ;; Parameters:    Size  Location     Type
  9311 ;;		None
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;  crc             1   15[BANK0 ] unsigned char 
  9314 ;; Return value:  Size  Location     Type
  9315 ;;		None               void
  9316 ;; Registers used:
  9317 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : E/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9323 ;;      Params:         0       0       0       0       0       0       0
  9324 ;;      Locals:         0       1       0       0       0       0       0
  9325 ;;      Temps:          0       0       0       0       0       0       0
  9326 ;;      Totals:         0       1       0       0       0       0       0
  9327 ;;Total ram usage:        1 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    6
  9330 ;; This function calls:
  9331 ;;		_WriteUSART
  9332 ;;		_sendEscapedUartData
  9333 ;;		_crc8
  9334 ;; This function is called by:
  9335 ;;		_doModeVscp
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           	psect	text11
  9340  0045D6                     __ptext11:
  9341                           	opt stack 0
  9342  0045D6                     _sendVSCPDriverNack:
  9343                           	opt stack 23
  9344                           
  9345                           ;main.c: 1629: uint8_t crc = 0;
  9346                           
  9347                           ; BSR set to: 1
  9348                           ;incstack = 0
  9349                           ;incstack = 0
  9350  0045D6  0100               	movlb	0	; () banked
  9351  0045D8  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
  9352  0045DA                     l825:
  9353  0045DA  A2AC               	btfss	4012,1,c	;volatile
  9354  0045DC  D7FE               	goto	l825
  9355                           
  9356                           ;main.c: 1633: WriteUSART(0x10);
  9357  0045DE  0E10               	movlw	16
  9358  0045E0  EC98  F02B         	call	_WriteUSART
  9359  0045E4                     l828:
  9360  0045E4  A2AC               	btfss	4012,1,c	;volatile
  9361  0045E6  D7FE               	goto	l828
  9362                           
  9363                           ;main.c: 1635: WriteUSART(0x02);
  9364  0045E8  0E02               	movlw	2
  9365  0045EA  EC98  F02B         	call	_WriteUSART
  9366  0045EE                     l831:
  9367  0045EE  A2AC               	btfss	4012,1,c	;volatile
  9368  0045F0  D7FE               	goto	l831
  9369                           
  9370                           ;main.c: 1639: WriteUSART(252);
  9371  0045F2  0EFC               	movlw	252
  9372  0045F4  EC98  F02B         	call	_WriteUSART
  9373                           
  9374                           ;main.c: 1640: crc8(&crc, 252);
  9375  0045F8  0100               	movlb	0	; () banked
  9376  0045FA  0E00               	movlw	high sendVSCPDriverNack@crc
  9377  0045FC  6F68               	movwf	(?_crc8+1)& (0+255),b
  9378  0045FE  0E6F               	movlw	low sendVSCPDriverNack@crc
  9379  004600  6F67               	movwf	?_crc8& (0+255),b
  9380  004602  0EFC               	movlw	252
  9381  004604  6F69               	movwf	(?_crc8+2)& (0+255),b
  9382  004606  ECC5  F02A         	call	_crc8	;wreg free
  9383  00460A                     l834:
  9384  00460A  A2AC               	btfss	4012,1,c	;volatile
  9385  00460C  D7FE               	goto	l834
  9386                           
  9387                           ;main.c: 1644: WriteUSART(0);
  9388  00460E  0E00               	movlw	0
  9389  004610  EC98  F02B         	call	_WriteUSART
  9390                           
  9391                           ;main.c: 1645: crc8(&crc, 0);
  9392  004614  D829               	call	PL52	;call to abstracted procedure
  9393  004616  ECC5  F02A         	call	_crc8	;wreg free
  9394                           
  9395                           ; BSR set to: 0
  9396                           ;main.c: 1648: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9397  00461A  0E00               	movlw	high sendVSCPDriverNack@crc
  9398  00461C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9399  00461E  0E6F               	movlw	low sendVSCPDriverNack@crc
  9400  004620  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9401  004622  0101               	movlb	1	; () banked
  9402  004624  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9403  004626  EC3F  F028         	call	_sendEscapedUartData
  9404  00462A                     l837:
  9405  00462A  A2AC               	btfss	4012,1,c	;volatile
  9406  00462C  D7FE               	goto	l837
  9407                           
  9408                           ;main.c: 1652: WriteUSART(0);
  9409  00462E  0E00               	movlw	0
  9410  004630  EC98  F02B         	call	_WriteUSART
  9411                           
  9412                           ;main.c: 1653: crc8(&crc, 0);
  9413  004634  D819               	call	PL52	;call to abstracted procedure
  9414  004636  ECC5  F02A         	call	_crc8	;wreg free
  9415  00463A                     l840:
  9416  00463A  A2AC               	btfss	4012,1,c	;volatile
  9417  00463C  D7FE               	goto	l840
  9418                           
  9419                           ;main.c: 1655: WriteUSART(0);
  9420  00463E  0E00               	movlw	0
  9421  004640  EC98  F02B         	call	_WriteUSART
  9422                           
  9423                           ;main.c: 1656: crc8(&crc, 0);
  9424  004644  D811               	call	PL52	;call to abstracted procedure
  9425  004646  ECC5  F02A         	call	_crc8	;wreg free
  9426                           
  9427                           ; BSR set to: 0
  9428                           ;main.c: 1659: sendEscapedUartData(crc, (0));
  9429  00464A  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9430  00464C  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9431  00464E  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
  9432  004650  EC3F  F028         	call	_sendEscapedUartData
  9433  004654                     l843:
  9434  004654  A2AC               	btfss	4012,1,c	;volatile
  9435  004656  D7FE               	goto	l843
  9436                           
  9437                           ;main.c: 1663: WriteUSART(0x10);
  9438  004658  0E10               	movlw	16
  9439  00465A  EC98  F02B         	call	_WriteUSART
  9440  00465E                     l846:
  9441  00465E  A2AC               	btfss	4012,1,c	;volatile
  9442  004660  D7FE               	goto	l846
  9443                           
  9444                           ;main.c: 1665: WriteUSART(0x03);
  9445  004662  0E03               	movlw	3
  9446  004664  EF98  F02B         	goto	_WriteUSART
  9447  004668                     __end_of_sendVSCPDriverNack:
  9448                           	opt stack 0
  9449  004668                     PL52:
  9450                           	opt stack 23
  9451  004668  0100               	movlb	0	; () banked
  9452  00466A  0E00               	movlw	high sendVSCPDriverNack@crc
  9453  00466C  6F68               	movwf	(?_crc8+1)& (0+255),b
  9454  00466E  0E6F               	movlw	low sendVSCPDriverNack@crc
  9455  004670  6F67               	movwf	?_crc8& (0+255),b
  9456  004672  6B69               	clrf	(?_crc8+2)& (0+255),b
  9457  004674  0C00               	retlw	0
  9458  004676                     __end_ofPL52:
  9459                           	opt stack 0
  9460                           tblptru	equ	0xFF8
  9461                           tblptrh	equ	0xFF7
  9462                           tblptrl	equ	0xFF6
  9463                           tablat	equ	0xFF5
  9464                           prodh	equ	0xFF4
  9465                           prodl	equ	0xFF3
  9466                           intcon	equ	0xFF2
  9467                           indf0	equ	0xFEF
  9468                           postinc0	equ	0xFEE
  9469                           fsr0h	equ	0xFEA
  9470                           fsr0l	equ	0xFE9
  9471                           wreg	equ	0xFE8
  9472                           indf1	equ	0xFE7
  9473                           postinc1	equ	0xFE6
  9474                           postdec1	equ	0xFE5
  9475                           fsr1h	equ	0xFE2
  9476                           fsr1l	equ	0xFE1
  9477                           indf2	equ	0xFDF
  9478                           postinc2	equ	0xFDE
  9479                           postdec2	equ	0xFDD
  9480                           plusw2	equ	0xFDB
  9481                           fsr2h	equ	0xFDA
  9482                           fsr2l	equ	0xFD9
  9483                           status	equ	0xFD8
  9484                           
  9485 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9486 ;; Defined at:
  9487 ;;		line 2152 in file "main.c"
  9488 ;; Parameters:    Size  Location     Type
  9489 ;;		None
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;  data            8   74[BANK0 ] unsigned char [8]
  9492 ;;  id              4   82[BANK0 ] unsigned long 
  9493 ;;  dlc             1   86[BANK0 ] unsigned char 
  9494 ;; Return value:  Size  Location     Type
  9495 ;;                  1    wreg      enum E15660
  9496 ;; Registers used:
  9497 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9498 ;; Tracked objects:
  9499 ;;		On entry : F/1
  9500 ;;		On exit  : F/0
  9501 ;;		Unchanged: 0/0
  9502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9503 ;;      Params:         0       0       0       0       0       0       0
  9504 ;;      Locals:         0      13       0       0       0       0       0
  9505 ;;      Temps:          0      20       0       0       0       0       0
  9506 ;;      Totals:         0      33       0       0       0       0       0
  9507 ;;Total ram usage:       33 bytes
  9508 ;; Hardware stack levels used:    1
  9509 ;; Hardware stack levels required when called:    6
  9510 ;; This function calls:
  9511 ;;		_memcpy
  9512 ;;		_sendCANFrame
  9513 ;; This function is called by:
  9514 ;;		_doModeVscp
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           	psect	text12
  9519  003F92                     __ptext12:
  9520                           	opt stack 0
  9521  003F92                     _receiveVSCPModeCanalMsg:
  9522                           	opt stack 23
  9523                           
  9524                           ; BSR set to: 1
  9525                           ;main.c: 2153: uint32_t id;
  9526                           ;main.c: 2154: uint8_t dlc;
  9527                           ;main.c: 2155: uint8_t data[8];
  9528                           ;main.c: 2157: id = ((uint32_t) cmdbuf[5] << 26) |
  9529                           ;main.c: 2158: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9530                           ;main.c: 2159: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9531                           ;main.c: 2160: cmdbuf[5 + 3];
  9532                           
  9533                           ;incstack = 0
  9534                           ;incstack = 0
  9535  003F92  C10B  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9536  003F96  0100               	movlb	0	; () banked
  9537  003F98  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9538  003F9A  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9539  003F9C  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9540  003F9E  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9541  003FA2  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9542  003FA6  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9543  003FAA  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9544  003FAC  C10A  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9545  003FB0  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9546  003FB2  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9547  003FB4  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9548  003FB6  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9549  003FBA  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9550  003FBE  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9551  003FC0  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9552  003FC2  C109  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9553  003FC6  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9554  003FC8  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9555  003FCA  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9556  003FCC  0E1A               	movlw	26
  9557  003FCE                     u15765:
  9558  003FCE  90D8               	bcf	status,0,c
  9559  003FD0  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9560  003FD2  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9561  003FD4  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9562  003FD6  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9563  003FD8  2EE8               	decfsz	wreg,f,c
  9564  003FDA  D7F9               	goto	u15765
  9565  003FDC  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9566  003FDE  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9567  003FE0  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9568  003FE2  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9569  003FE4  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9570  003FE6  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9571  003FE8  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9572  003FEA  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9573  003FEC  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9574  003FEE  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9575  003FF0  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9576  003FF2  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9577  003FF4  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9578  003FF6  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9579  003FF8  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9580  003FFA  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9581  003FFC  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9582  003FFE  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9583  004000  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9584  004002  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9585  004004  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9586  004006  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9587  004008  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9588  00400A  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9589  00400C  0101               	movlb	1	; () banked
  9590  00400E  510C               	movf	(_cmdbuf+8)& (0+255),w,b
  9591  004010  0100               	movlb	0	; () banked
  9592  004012  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9593  004014  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9594  004016  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9595  004018  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9596  00401A  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9597  00401C  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9598  00401E  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9599  004020  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9600                           
  9601                           ;main.c: 2161: dlc = cmdbuf[4] - 4;
  9602  004022  0101               	movlb	1	; () banked
  9603  004024  5108               	movf	(_cmdbuf+4)& (0+255),w,b
  9604  004026  0FFC               	addlw	252
  9605  004028  0100               	movlb	0	; () banked
  9606  00402A  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9607                           
  9608                           ; BSR set to: 0
  9609                           ;main.c: 2162: memcpy(data, cmdbuf + 5 + 4, dlc);
  9610  00402C  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9611  00402E  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9612  004030  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9613  004032  6F60               	movwf	?_memcpy& (0+255),b
  9614  004034  0E0D               	movlw	low (_cmdbuf+9)
  9615  004036  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9616  004038  0E01               	movlw	high (_cmdbuf+9)
  9617  00403A  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9618  00403C  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9619  004040  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9620  004044  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9621  004048  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9622  00404A  ECCF  F029         	call	_memcpy	;wreg free
  9623                           
  9624                           ; BSR set to: 0
  9625                           ;main.c: 2164: return sendCANFrame(id, dlc, data);
  9626  00404E  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9627  004052  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9628  004056  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9629  00405A  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9630  00405E  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9631  004062  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9632  004064  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9633  004066  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9634  004068  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9635  00406A  EF8D  F02A         	goto	_sendCANFrame	;wreg free
  9636  00406E                     __end_of_receiveVSCPModeCanalMsg:
  9637                           	opt stack 0
  9638                           tblptru	equ	0xFF8
  9639                           tblptrh	equ	0xFF7
  9640                           tblptrl	equ	0xFF6
  9641                           tablat	equ	0xFF5
  9642                           prodh	equ	0xFF4
  9643                           prodl	equ	0xFF3
  9644                           intcon	equ	0xFF2
  9645                           indf0	equ	0xFEF
  9646                           postinc0	equ	0xFEE
  9647                           fsr0h	equ	0xFEA
  9648                           fsr0l	equ	0xFE9
  9649                           wreg	equ	0xFE8
  9650                           indf1	equ	0xFE7
  9651                           postinc1	equ	0xFE6
  9652                           postdec1	equ	0xFE5
  9653                           fsr1h	equ	0xFE2
  9654                           fsr1l	equ	0xFE1
  9655                           indf2	equ	0xFDF
  9656                           postinc2	equ	0xFDE
  9657                           postdec2	equ	0xFDD
  9658                           plusw2	equ	0xFDB
  9659                           fsr2h	equ	0xFDA
  9660                           fsr2l	equ	0xFD9
  9661                           status	equ	0xFD8
  9662                           
  9663 ;; *************** function _memcpy *****************
  9664 ;; Defined at:
  9665 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9666 ;; Parameters:    Size  Location     Type
  9667 ;;  d1              2    0[BANK0 ] PTR void 
  9668 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9669 ;;  s1              2    2[BANK0 ] PTR const void 
  9670 ;;		 -> vscpData(8), cmdbuf(80), 
  9671 ;;  n               2    4[BANK0 ] unsigned int 
  9672 ;; Auto vars:     Size  Location     Type
  9673 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9674 ;;		 -> vscpData(8), cmdbuf(80), 
  9675 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9676 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9677 ;; Return value:  Size  Location     Type
  9678 ;;                  2    0[BANK0 ] PTR void 
  9679 ;; Registers used:
  9680 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9681 ;; Tracked objects:
  9682 ;;		On entry : F/0
  9683 ;;		On exit  : F/0
  9684 ;;		Unchanged: 0/0
  9685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9686 ;;      Params:         0       6       0       0       0       0       0
  9687 ;;      Locals:         0       4       0       0       0       0       0
  9688 ;;      Temps:          0       0       0       0       0       0       0
  9689 ;;      Totals:         0      10       0       0       0       0       0
  9690 ;;Total ram usage:       10 bytes
  9691 ;; Hardware stack levels used:    1
  9692 ;; Hardware stack levels required when called:    3
  9693 ;; This function calls:
  9694 ;;		Nothing
  9695 ;; This function is called by:
  9696 ;;		_doModeSLCAN
  9697 ;;		_receiveVSCPModeCanalMsg
  9698 ;; This function uses a non-reentrant model
  9699 ;;
  9700                           
  9701                           	psect	text13
  9702  00539E                     __ptext13:
  9703                           	opt stack 0
  9704  00539E                     _memcpy:
  9705                           	opt stack 26
  9706                           
  9707                           ; BSR set to: 0
  9708                           
  9709                           ; BSR set to: 0
  9710                           ;incstack = 0
  9711                           ;incstack = 0
  9712  00539E  C062  F068         	movff	memcpy@s1,memcpy@s
  9713  0053A2  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9714  0053A6  C060  F066         	movff	memcpy@d1,memcpy@d
  9715  0053AA  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9716  0053AE  D00E               	goto	l12500
  9717  0053B0                     l12494:
  9718                           
  9719                           ; BSR set to: 0
  9720  0053B0  C068  FFD9         	movff	memcpy@s,fsr2l
  9721  0053B4  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9722  0053B8  C066  FFE1         	movff	memcpy@d,fsr1l
  9723  0053BC  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9724  0053C0  CFDF FFE7          	movff	indf2,indf1
  9725                           
  9726                           ; BSR set to: 0
  9727  0053C4  4B68               	infsnz	memcpy@s& (0+255),f,b
  9728  0053C6  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9729                           
  9730                           ; BSR set to: 0
  9731  0053C8  4B66               	infsnz	memcpy@d& (0+255),f,b
  9732  0053CA  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9733  0053CC                     l12500:
  9734                           
  9735                           ; BSR set to: 0
  9736  0053CC  0764               	decf	memcpy@n& (0+255),f,b
  9737  0053CE  A0D8               	btfss	status,0,c
  9738  0053D0  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9739  0053D2  0100               	movlb	0	; () banked
  9740  0053D4  2964               	incf	memcpy@n& (0+255),w,b
  9741  0053D6  B4D8               	btfsc	status,2,c
  9742  0053D8  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9743  0053DA  B4D8               	btfsc	status,2,c
  9744                           
  9745                           ; BSR set to: 0
  9746  0053DC  0012               	return	
  9747  0053DE  D7E8               	goto	l12494
  9748  0053E0                     __end_of_memcpy:
  9749                           	opt stack 0
  9750                           tblptru	equ	0xFF8
  9751                           tblptrh	equ	0xFF7
  9752                           tblptrl	equ	0xFF6
  9753                           tablat	equ	0xFF5
  9754                           prodh	equ	0xFF4
  9755                           prodl	equ	0xFF3
  9756                           intcon	equ	0xFF2
  9757                           indf0	equ	0xFEF
  9758                           postinc0	equ	0xFEE
  9759                           fsr0h	equ	0xFEA
  9760                           fsr0l	equ	0xFE9
  9761                           wreg	equ	0xFE8
  9762                           indf1	equ	0xFE7
  9763                           postinc1	equ	0xFE6
  9764                           postdec1	equ	0xFE5
  9765                           fsr1h	equ	0xFE2
  9766                           fsr1l	equ	0xFE1
  9767                           indf2	equ	0xFDF
  9768                           postinc2	equ	0xFDE
  9769                           postdec2	equ	0xFDD
  9770                           plusw2	equ	0xFDB
  9771                           fsr2h	equ	0xFDA
  9772                           fsr2l	equ	0xFD9
  9773                           status	equ	0xFD8
  9774                           
  9775 ;; *************** function _sendVSCPDriverAck *****************
  9776 ;; Defined at:
  9777 ;;		line 1584 in file "main.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;		None
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;  crc             1   15[BANK0 ] unsigned char 
  9782 ;; Return value:  Size  Location     Type
  9783 ;;		None               void
  9784 ;; Registers used:
  9785 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9786 ;; Tracked objects:
  9787 ;;		On entry : E/1
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9791 ;;      Params:         0       0       0       0       0       0       0
  9792 ;;      Locals:         0       1       0       0       0       0       0
  9793 ;;      Temps:          0       0       0       0       0       0       0
  9794 ;;      Totals:         0       1       0       0       0       0       0
  9795 ;;Total ram usage:        1 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    6
  9798 ;; This function calls:
  9799 ;;		_WriteUSART
  9800 ;;		_sendEscapedUartData
  9801 ;;		_crc8
  9802 ;; This function is called by:
  9803 ;;		_doModeVscp
  9804 ;; This function uses a non-reentrant model
  9805 ;;
  9806                           
  9807                           	psect	text14
  9808  004676                     __ptext14:
  9809                           	opt stack 0
  9810  004676                     _sendVSCPDriverAck:
  9811                           	opt stack 23
  9812                           
  9813                           ;main.c: 1585: uint8_t crc = 0;
  9814                           
  9815                           ; BSR set to: 0
  9816                           ;incstack = 0
  9817                           ;incstack = 0
  9818  004676  0100               	movlb	0	; () banked
  9819  004678  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9820  00467A                     l798:
  9821  00467A  A2AC               	btfss	4012,1,c	;volatile
  9822  00467C  D7FE               	goto	l798
  9823                           
  9824                           ;main.c: 1589: WriteUSART(0x10);
  9825  00467E  0E10               	movlw	16
  9826  004680  EC98  F02B         	call	_WriteUSART
  9827  004684                     l801:
  9828  004684  A2AC               	btfss	4012,1,c	;volatile
  9829  004686  D7FE               	goto	l801
  9830                           
  9831                           ;main.c: 1591: WriteUSART(0x02);
  9832  004688  0E02               	movlw	2
  9833  00468A  EC98  F02B         	call	_WriteUSART
  9834  00468E                     l804:
  9835  00468E  A2AC               	btfss	4012,1,c	;volatile
  9836  004690  D7FE               	goto	l804
  9837                           
  9838                           ;main.c: 1595: WriteUSART(251);
  9839  004692  0EFB               	movlw	251
  9840  004694  EC98  F02B         	call	_WriteUSART
  9841                           
  9842                           ;main.c: 1596: crc8(&crc, 251);
  9843  004698  0100               	movlb	0	; () banked
  9844  00469A  0E00               	movlw	high sendVSCPDriverAck@crc
  9845  00469C  6F68               	movwf	(?_crc8+1)& (0+255),b
  9846  00469E  0E6F               	movlw	low sendVSCPDriverAck@crc
  9847  0046A0  6F67               	movwf	?_crc8& (0+255),b
  9848  0046A2  0EFB               	movlw	251
  9849  0046A4  6F69               	movwf	(?_crc8+2)& (0+255),b
  9850  0046A6  ECC5  F02A         	call	_crc8	;wreg free
  9851  0046AA                     l807:
  9852  0046AA  A2AC               	btfss	4012,1,c	;volatile
  9853  0046AC  D7FE               	goto	l807
  9854                           
  9855                           ;main.c: 1600: WriteUSART(0);
  9856  0046AE  0E00               	movlw	0
  9857  0046B0  EC98  F02B         	call	_WriteUSART
  9858                           
  9859                           ;main.c: 1601: crc8(&crc, 0);
  9860  0046B4  D829               	call	PL48	;call to abstracted procedure
  9861  0046B6  ECC5  F02A         	call	_crc8	;wreg free
  9862                           
  9863                           ; BSR set to: 0
  9864                           ;main.c: 1604: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9865  0046BA  0E00               	movlw	high sendVSCPDriverAck@crc
  9866  0046BC  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9867  0046BE  0E6F               	movlw	low sendVSCPDriverAck@crc
  9868  0046C0  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9869  0046C2  0101               	movlb	1	; () banked
  9870  0046C4  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9871  0046C6  EC3F  F028         	call	_sendEscapedUartData
  9872  0046CA                     l810:
  9873  0046CA  A2AC               	btfss	4012,1,c	;volatile
  9874  0046CC  D7FE               	goto	l810
  9875                           
  9876                           ;main.c: 1608: WriteUSART(0);
  9877  0046CE  0E00               	movlw	0
  9878  0046D0  EC98  F02B         	call	_WriteUSART
  9879                           
  9880                           ;main.c: 1609: crc8(&crc, 0);
  9881  0046D4  D819               	call	PL48	;call to abstracted procedure
  9882  0046D6  ECC5  F02A         	call	_crc8	;wreg free
  9883  0046DA                     l813:
  9884  0046DA  A2AC               	btfss	4012,1,c	;volatile
  9885  0046DC  D7FE               	goto	l813
  9886                           
  9887                           ;main.c: 1611: WriteUSART(0);
  9888  0046DE  0E00               	movlw	0
  9889  0046E0  EC98  F02B         	call	_WriteUSART
  9890                           
  9891                           ;main.c: 1612: crc8(&crc, 0);
  9892  0046E4  D811               	call	PL48	;call to abstracted procedure
  9893  0046E6  ECC5  F02A         	call	_crc8	;wreg free
  9894                           
  9895                           ; BSR set to: 0
  9896                           ;main.c: 1615: sendEscapedUartData(crc, (0));
  9897  0046EA  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9898  0046EC  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9899  0046EE  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
  9900  0046F0  EC3F  F028         	call	_sendEscapedUartData
  9901  0046F4                     l816:
  9902  0046F4  A2AC               	btfss	4012,1,c	;volatile
  9903  0046F6  D7FE               	goto	l816
  9904                           
  9905                           ;main.c: 1619: WriteUSART(0x10);
  9906  0046F8  0E10               	movlw	16
  9907  0046FA  EC98  F02B         	call	_WriteUSART
  9908  0046FE                     l819:
  9909  0046FE  A2AC               	btfss	4012,1,c	;volatile
  9910  004700  D7FE               	goto	l819
  9911                           
  9912                           ;main.c: 1621: WriteUSART(0x03);
  9913  004702  0E03               	movlw	3
  9914  004704  EF98  F02B         	goto	_WriteUSART
  9915  004708                     __end_of_sendVSCPDriverAck:
  9916                           	opt stack 0
  9917  004708                     PL48:
  9918                           	opt stack 23
  9919  004708  0100               	movlb	0	; () banked
  9920  00470A  0E00               	movlw	high sendVSCPDriverAck@crc
  9921  00470C  6F68               	movwf	(?_crc8+1)& (0+255),b
  9922  00470E  0E6F               	movlw	low sendVSCPDriverAck@crc
  9923  004710  6F67               	movwf	?_crc8& (0+255),b
  9924  004712  6B69               	clrf	(?_crc8+2)& (0+255),b
  9925  004714  0C00               	retlw	0
  9926  004716                     __end_ofPL48:
  9927                           	opt stack 0
  9928                           tblptru	equ	0xFF8
  9929                           tblptrh	equ	0xFF7
  9930                           tblptrl	equ	0xFF6
  9931                           tablat	equ	0xFF5
  9932                           prodh	equ	0xFF4
  9933                           prodl	equ	0xFF3
  9934                           intcon	equ	0xFF2
  9935                           indf0	equ	0xFEF
  9936                           postinc0	equ	0xFEE
  9937                           fsr0h	equ	0xFEA
  9938                           fsr0l	equ	0xFE9
  9939                           wreg	equ	0xFE8
  9940                           indf1	equ	0xFE7
  9941                           postinc1	equ	0xFE6
  9942                           postdec1	equ	0xFE5
  9943                           fsr1h	equ	0xFE2
  9944                           fsr1l	equ	0xFE1
  9945                           indf2	equ	0xFDF
  9946                           postinc2	equ	0xFDE
  9947                           postdec2	equ	0xFDD
  9948                           plusw2	equ	0xFDB
  9949                           fsr2h	equ	0xFDA
  9950                           fsr2l	equ	0xFD9
  9951                           status	equ	0xFD8
  9952                           
  9953 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9954 ;; Defined at:
  9955 ;;		line 1536 in file "main.c"
  9956 ;; Parameters:    Size  Location     Type
  9957 ;;  errorcode       1    wreg     unsigned char 
  9958 ;; Auto vars:     Size  Location     Type
  9959 ;;  errorcode       1   15[BANK0 ] unsigned char 
  9960 ;;  crc             1   16[BANK0 ] unsigned char 
  9961 ;; Return value:  Size  Location     Type
  9962 ;;		None               void
  9963 ;; Registers used:
  9964 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9965 ;; Tracked objects:
  9966 ;;		On entry : E/0
  9967 ;;		On exit  : 0/0
  9968 ;;		Unchanged: 0/0
  9969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9970 ;;      Params:         0       0       0       0       0       0       0
  9971 ;;      Locals:         0       2       0       0       0       0       0
  9972 ;;      Temps:          0       0       0       0       0       0       0
  9973 ;;      Totals:         0       2       0       0       0       0       0
  9974 ;;Total ram usage:        2 bytes
  9975 ;; Hardware stack levels used:    1
  9976 ;; Hardware stack levels required when called:    6
  9977 ;; This function calls:
  9978 ;;		_WriteUSART
  9979 ;;		_sendEscapedUartData
  9980 ;;		_crc8
  9981 ;; This function is called by:
  9982 ;;		_doModeVscp
  9983 ;; This function uses a non-reentrant model
  9984 ;;
  9985                           
  9986                           	psect	text15
  9987  0043AC                     __ptext15:
  9988                           	opt stack 0
  9989  0043AC                     _sendVSCPDriverErrorFrame:
  9990                           	opt stack 23
  9991                           
  9992                           ;incstack = 0
  9993                           ;incstack = 0
  9994                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9995  0043AC  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9996                           
  9997                           ;main.c: 1537: uint8_t crc = 0;
  9998  0043B0  0100               	movlb	0	; () banked
  9999  0043B2  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
 10000  0043B4                     l771:
 10001  0043B4  A2AC               	btfss	4012,1,c	;volatile
 10002  0043B6  D7FE               	goto	l771
 10003                           
 10004                           ;main.c: 1541: WriteUSART(0x10);
 10005  0043B8  0E10               	movlw	16
 10006  0043BA  EC98  F02B         	call	_WriteUSART
 10007  0043BE                     l774:
 10008  0043BE  A2AC               	btfss	4012,1,c	;volatile
 10009  0043C0  D7FE               	goto	l774
 10010                           
 10011                           ;main.c: 1543: WriteUSART(0x02);
 10012  0043C2  0E02               	movlw	2
 10013  0043C4  EC98  F02B         	call	_WriteUSART
 10014  0043C8                     l777:
 10015  0043C8  A2AC               	btfss	4012,1,c	;volatile
 10016  0043CA  D7FE               	goto	l777
 10017                           
 10018                           ;main.c: 1547: WriteUSART(253);
 10019  0043CC  0EFD               	movlw	253
 10020  0043CE  EC98  F02B         	call	_WriteUSART
 10021                           
 10022                           ;main.c: 1548: crc8(&crc, 253);
 10023  0043D2  0100               	movlb	0	; () banked
 10024  0043D4  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10025  0043D6  6F68               	movwf	(?_crc8+1)& (0+255),b
 10026  0043D8  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10027  0043DA  6F67               	movwf	?_crc8& (0+255),b
 10028  0043DC  0EFD               	movlw	253
 10029  0043DE  6F69               	movwf	(?_crc8+2)& (0+255),b
 10030  0043E0  ECC5  F02A         	call	_crc8	;wreg free
 10031  0043E4                     l780:
 10032  0043E4  A2AC               	btfss	4012,1,c	;volatile
 10033  0043E6  D7FE               	goto	l780
 10034                           
 10035                           ;main.c: 1552: WriteUSART(0);
 10036  0043E8  0E00               	movlw	0
 10037  0043EA  EC98  F02B         	call	_WriteUSART
 10038                           
 10039                           ;main.c: 1553: crc8(&crc, 0);
 10040  0043EE  D836               	call	PL94	;call to abstracted procedure
 10041  0043F0  ECC5  F02A         	call	_crc8	;wreg free
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;main.c: 1556: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10045  0043F4  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10046  0043F6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10047  0043F8  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10048  0043FA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10049  0043FC  0101               	movlb	1	; () banked
 10050  0043FE  5106               	movf	(_cmdbuf+2)& (0+255),w,b
 10051  004400  EC3F  F028         	call	_sendEscapedUartData
 10052  004404                     l783:
 10053  004404  A2AC               	btfss	4012,1,c	;volatile
 10054  004406  D7FE               	goto	l783
 10055                           
 10056                           ;main.c: 1560: WriteUSART(0);
 10057  004408  0E00               	movlw	0
 10058  00440A  EC98  F02B         	call	_WriteUSART
 10059                           
 10060                           ;main.c: 1561: crc8(&crc, 0);
 10061  00440E  D826               	call	PL94	;call to abstracted procedure
 10062  004410  ECC5  F02A         	call	_crc8	;wreg free
 10063  004414                     l786:
 10064  004414  A2AC               	btfss	4012,1,c	;volatile
 10065  004416  D7FE               	goto	l786
 10066                           
 10067                           ;main.c: 1563: WriteUSART(1);
 10068  004418  0E01               	movlw	1
 10069  00441A  EC98  F02B         	call	_WriteUSART
 10070                           
 10071                           ;main.c: 1564: crc8(&crc, 1);
 10072  00441E  0100               	movlb	0	; () banked
 10073  004420  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10074  004422  6F68               	movwf	(?_crc8+1)& (0+255),b
 10075  004424  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10076  004426  6F67               	movwf	?_crc8& (0+255),b
 10077  004428  0E01               	movlw	1
 10078  00442A  6F69               	movwf	(?_crc8+2)& (0+255),b
 10079  00442C  ECC5  F02A         	call	_crc8	;wreg free
 10080                           
 10081                           ; BSR set to: 0
 10082                           ;main.c: 1567: sendEscapedUartData(errorcode, &crc);
 10083  004430  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10084  004432  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10085  004434  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10086  004436  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10087  004438  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
 10088  00443A  EC3F  F028         	call	_sendEscapedUartData
 10089                           
 10090                           ; BSR set to: 0
 10091                           ;main.c: 1570: sendEscapedUartData(crc, (0));
 10092  00443E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10093  004440  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10094  004442  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
 10095  004444  EC3F  F028         	call	_sendEscapedUartData
 10096  004448                     l789:
 10097  004448  A2AC               	btfss	4012,1,c	;volatile
 10098  00444A  D7FE               	goto	l789
 10099                           
 10100                           ;main.c: 1574: WriteUSART(0x10);
 10101  00444C  0E10               	movlw	16
 10102  00444E  EC98  F02B         	call	_WriteUSART
 10103  004452                     l792:
 10104  004452  A2AC               	btfss	4012,1,c	;volatile
 10105  004454  D7FE               	goto	l792
 10106                           
 10107                           ;main.c: 1576: WriteUSART(0x03);
 10108  004456  0E03               	movlw	3
 10109  004458  EF98  F02B         	goto	_WriteUSART
 10110  00445C                     __end_of_sendVSCPDriverErrorFrame:
 10111                           	opt stack 0
 10112  00445C                     PL94:
 10113                           	opt stack 23
 10114  00445C  0100               	movlb	0	; () banked
 10115  00445E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10116  004460  6F68               	movwf	(?_crc8+1)& (0+255),b
 10117  004462  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
 10118  004464  6F67               	movwf	?_crc8& (0+255),b
 10119  004466  6B69               	clrf	(?_crc8+2)& (0+255),b
 10120  004468  0C00               	retlw	0
 10121  00446A                     __end_ofPL94:
 10122                           	opt stack 0
 10123                           tblptru	equ	0xFF8
 10124                           tblptrh	equ	0xFF7
 10125                           tblptrl	equ	0xFF6
 10126                           tablat	equ	0xFF5
 10127                           prodh	equ	0xFF4
 10128                           prodl	equ	0xFF3
 10129                           intcon	equ	0xFF2
 10130                           indf0	equ	0xFEF
 10131                           postinc0	equ	0xFEE
 10132                           fsr0h	equ	0xFEA
 10133                           fsr0l	equ	0xFE9
 10134                           wreg	equ	0xFE8
 10135                           indf1	equ	0xFE7
 10136                           postinc1	equ	0xFE6
 10137                           postdec1	equ	0xFE5
 10138                           fsr1h	equ	0xFE2
 10139                           fsr1l	equ	0xFE1
 10140                           indf2	equ	0xFDF
 10141                           postinc2	equ	0xFDE
 10142                           postdec2	equ	0xFDD
 10143                           plusw2	equ	0xFDB
 10144                           fsr2h	equ	0xFDA
 10145                           fsr2l	equ	0xFD9
 10146                           status	equ	0xFD8
 10147                           
 10148 ;; *************** function _calcCRC *****************
 10149 ;; Defined at:
 10150 ;;		line 2385 in file "main.c"
 10151 ;; Parameters:    Size  Location     Type
 10152 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10153 ;;		 -> cmdbuf(80), 
 10154 ;;  len             1   14[BANK0 ] unsigned char 
 10155 ;; Auto vars:     Size  Location     Type
 10156 ;;  crc             1   16[BANK0 ] unsigned char 
 10157 ;;  j               1   15[BANK0 ] unsigned char 
 10158 ;; Return value:  Size  Location     Type
 10159 ;;                  1    wreg      unsigned char 
 10160 ;; Registers used:
 10161 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10162 ;; Tracked objects:
 10163 ;;		On entry : F/0
 10164 ;;		On exit  : F/0
 10165 ;;		Unchanged: 0/0
 10166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10167 ;;      Params:         0       3       0       0       0       0       0
 10168 ;;      Locals:         0       2       0       0       0       0       0
 10169 ;;      Temps:          0       0       0       0       0       0       0
 10170 ;;      Totals:         0       5       0       0       0       0       0
 10171 ;;Total ram usage:        5 bytes
 10172 ;; Hardware stack levels used:    1
 10173 ;; Hardware stack levels required when called:    5
 10174 ;; This function calls:
 10175 ;;		_crc8
 10176 ;; This function is called by:
 10177 ;;		_doModeVscp
 10178 ;; This function uses a non-reentrant model
 10179 ;;
 10180                           
 10181                           	psect	text16
 10182  005622                     __ptext16:
 10183                           	opt stack 0
 10184  005622                     _calcCRC:
 10185                           	opt stack 24
 10186                           
 10187                           ; BSR set to: 0
 10188                           ;main.c: 2386: uint8_t j;
 10189                           ;main.c: 2387: uint8_t crc = 0;
 10190                           
 10191                           ;incstack = 0
 10192                           ;incstack = 0
 10193  005622  6B70               	clrf	calcCRC@crc& (0+255),b
 10194                           
 10195                           ;main.c: 2389: for (j = 0; j < len; j++) {
 10196  005624  6B6F               	clrf	calcCRC@j& (0+255),b
 10197  005626  D00F               	goto	l12222
 10198  005628                     l12218:
 10199                           
 10200                           ; BSR set to: 0
 10201                           ;main.c: 2390: crc8(&crc, p[j]);
 10202  005628  0E00               	movlw	high calcCRC@crc
 10203  00562A  6F68               	movwf	(?_crc8+1)& (0+255),b
 10204  00562C  0E70               	movlw	low calcCRC@crc
 10205  00562E  6F67               	movwf	?_crc8& (0+255),b
 10206  005630  516F               	movf	calcCRC@j& (0+255),w,b
 10207  005632  256C               	addwf	calcCRC@p& (0+255),w,b
 10208  005634  6ED9               	movwf	fsr2l,c
 10209  005636  0E00               	movlw	0
 10210  005638  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10211  00563A  6EDA               	movwf	fsr2h,c
 10212  00563C  50DF               	movf	indf2,w,c
 10213  00563E  6F69               	movwf	(?_crc8+2)& (0+255),b
 10214  005640  ECC5  F02A         	call	_crc8	;wreg free
 10215                           
 10216                           ; BSR set to: 0
 10217  005644  2B6F               	incf	calcCRC@j& (0+255),f,b
 10218  005646                     l12222:
 10219                           
 10220                           ; BSR set to: 0
 10221  005646  516E               	movf	calcCRC@len& (0+255),w,b
 10222  005648  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10223  00564A  E3EE               	bnc	l12218
 10224                           
 10225                           ; BSR set to: 0
 10226                           ;main.c: 2391: }
 10227                           ;main.c: 2393: return crc;
 10228  00564C  5170               	movf	calcCRC@crc& (0+255),w,b
 10229                           
 10230                           ; BSR set to: 0
 10231  00564E  0012               	return	
 10232  005650                     __end_of_calcCRC:
 10233                           	opt stack 0
 10234                           tblptru	equ	0xFF8
 10235                           tblptrh	equ	0xFF7
 10236                           tblptrl	equ	0xFF6
 10237                           tablat	equ	0xFF5
 10238                           prodh	equ	0xFF4
 10239                           prodl	equ	0xFF3
 10240                           intcon	equ	0xFF2
 10241                           indf0	equ	0xFEF
 10242                           postinc0	equ	0xFEE
 10243                           fsr0h	equ	0xFEA
 10244                           fsr0l	equ	0xFE9
 10245                           wreg	equ	0xFE8
 10246                           indf1	equ	0xFE7
 10247                           postinc1	equ	0xFE6
 10248                           postdec1	equ	0xFE5
 10249                           fsr1h	equ	0xFE2
 10250                           fsr1l	equ	0xFE1
 10251                           indf2	equ	0xFDF
 10252                           postinc2	equ	0xFDE
 10253                           postdec2	equ	0xFDD
 10254                           plusw2	equ	0xFDB
 10255                           fsr2h	equ	0xFDA
 10256                           fsr2l	equ	0xFD9
 10257                           status	equ	0xFD8
 10258                           
 10259 ;; *************** function _receiveSendEventCANAL *****************
 10260 ;; Defined at:
 10261 ;;		line 1780 in file "main.c"
 10262 ;; Parameters:    Size  Location     Type
 10263 ;;		None
 10264 ;; Auto vars:     Size  Location     Type
 10265 ;;  crc             1   32[BANK0 ] unsigned char 
 10266 ;;  data            8   18[BANK0 ] unsigned char [8]
 10267 ;;  id              4   27[BANK0 ] unsigned long 
 10268 ;;  dlc             1   31[BANK0 ] unsigned char 
 10269 ;;  i               1   26[BANK0 ] unsigned char 
 10270 ;; Return value:  Size  Location     Type
 10271 ;;                  1    wreg      enum E15660
 10272 ;; Registers used:
 10273 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10274 ;; Tracked objects:
 10275 ;;		On entry : F/0
 10276 ;;		On exit  : 0/0
 10277 ;;		Unchanged: 0/0
 10278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10279 ;;      Params:         0       0       0       0       0       0       0
 10280 ;;      Locals:         0      15       0       0       0       0       0
 10281 ;;      Temps:          0       0       0       0       0       0       0
 10282 ;;      Totals:         0      15       0       0       0       0       0
 10283 ;;Total ram usage:       15 bytes
 10284 ;; Hardware stack levels used:    1
 10285 ;; Hardware stack levels required when called:    6
 10286 ;; This function calls:
 10287 ;;		_WriteUSART
 10288 ;;		_sendEscapedUartData
 10289 ;;		_crc8
 10290 ;;		_getCANFrame
 10291 ;; This function is called by:
 10292 ;;		_doModeVscp
 10293 ;; This function uses a non-reentrant model
 10294 ;;
 10295                           
 10296                           	psect	text17
 10297  003522                     __ptext17:
 10298                           	opt stack 0
 10299  003522                     _receiveSendEventCANAL:
 10300                           	opt stack 23
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;main.c: 1781: uint8_t i;
 10304                           ;main.c: 1782: uint32_t id;
 10305                           ;main.c: 1783: uint8_t dlc;
 10306                           ;main.c: 1784: uint8_t data[8];
 10307                           ;main.c: 1786: if ( getCANFrame( &id, &dlc, &data ) ) {
 10308                           
 10309                           ; BSR set to: 0
 10310                           ;incstack = 0
 10311                           ;incstack = 0
 10312  003522  0E00               	movlw	high receiveSendEventCANAL@dlc
 10313  003524  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10314  003526  0E7F               	movlw	low receiveSendEventCANAL@dlc
 10315  003528  6F6D               	movwf	?_getCANFrame& (0+255),b
 10316  00352A  0E00               	movlw	high receiveSendEventCANAL@data
 10317  00352C  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10318  00352E  0E72               	movlw	low receiveSendEventCANAL@data
 10319  003530  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10320  003532  0E7B               	movlw	receiveSendEventCANAL@id& (0+255)
 10321  003534  EC57  F026         	call	_getCANFrame
 10322  003538  0900               	iorlw	0
 10323  00353A  E101 D08F          	bz	l941
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;main.c: 1788: uint8_t crc = 0;
 10327  00353E  6B80               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10328                           
 10329                           ; BSR set to: 0
 10330                           ;main.c: 1791: cntRxFrames++;
 10331  003540  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10332  003542  0E00               	movlw	0
 10333  003544  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10334  003546  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10335  003548  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10336                           
 10337                           ;main.c: 1792: cntRxBytes += dlc;
 10338  00354A  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10339  00354C  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10340  00354E  0E00               	movlw	0
 10341  003550  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10342  003552  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10343  003554  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10344  003556                     l920:
 10345                           
 10346                           ; BSR set to: 0
 10347  003556  A2AC               	btfss	4012,1,c	;volatile
 10348  003558  D7FE               	goto	l920
 10349                           
 10350                           ; BSR set to: 0
 10351                           ;main.c: 1796: WriteUSART(0x10);
 10352  00355A  0E10               	movlw	16
 10353  00355C  EC98  F02B         	call	_WriteUSART
 10354  003560                     l923:
 10355  003560  A2AC               	btfss	4012,1,c	;volatile
 10356  003562  D7FE               	goto	l923
 10357                           
 10358                           ;main.c: 1798: WriteUSART(0x02);
 10359  003564  0E02               	movlw	2
 10360  003566  EC98  F02B         	call	_WriteUSART
 10361  00356A                     l926:
 10362  00356A  A2AC               	btfss	4012,1,c	;volatile
 10363  00356C  D7FE               	goto	l926
 10364                           
 10365                           ;main.c: 1802: WriteUSART(2);
 10366  00356E  0E02               	movlw	2
 10367  003570  EC98  F02B         	call	_WriteUSART
 10368                           
 10369                           ;main.c: 1803: crc8(&crc, 2);
 10370  003574  0100               	movlb	0	; () banked
 10371  003576  0E00               	movlw	high receiveSendEventCANAL@crc
 10372  003578  6F68               	movwf	(?_crc8+1)& (0+255),b
 10373  00357A  0E80               	movlw	low receiveSendEventCANAL@crc
 10374  00357C  6F67               	movwf	?_crc8& (0+255),b
 10375  00357E  0E02               	movlw	2
 10376  003580  6F69               	movwf	(?_crc8+2)& (0+255),b
 10377  003582  ECC5  F02A         	call	_crc8	;wreg free
 10378  003586                     l929:
 10379                           
 10380                           ; BSR set to: 0
 10381  003586  A2AC               	btfss	4012,1,c	;volatile
 10382  003588  D7FE               	goto	l929
 10383                           
 10384                           ; BSR set to: 0
 10385                           ;main.c: 1807: WriteUSART(0);
 10386  00358A  0E00               	movlw	0
 10387  00358C  EC98  F02B         	call	_WriteUSART
 10388                           
 10389                           ;main.c: 1808: crc8(&crc, 0);
 10390  003590  0100               	movlb	0	; () banked
 10391  003592  0E00               	movlw	high receiveSendEventCANAL@crc
 10392  003594  6F68               	movwf	(?_crc8+1)& (0+255),b
 10393  003596  0E80               	movlw	low receiveSendEventCANAL@crc
 10394  003598  6F67               	movwf	?_crc8& (0+255),b
 10395  00359A  0E00               	movlw	0
 10396  00359C  6B69               	clrf	(?_crc8+2)& (0+255),b
 10397  00359E  ECC5  F02A         	call	_crc8	;wreg free
 10398                           
 10399                           ; BSR set to: 0
 10400                           ;main.c: 1811: sendEscapedUartData(sequencyno, &crc);
 10401  0035A2  0E00               	movlw	high receiveSendEventCANAL@crc
 10402  0035A4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10403  0035A6  0E80               	movlw	low receiveSendEventCANAL@crc
 10404  0035A8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10405  0035AA  51F3               	movf	_sequencyno& (0+255),w,b
 10406  0035AC  EC3F  F028         	call	_sendEscapedUartData
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;main.c: 1812: sequencyno++;
 10410  0035B0  2BF3               	incf	_sequencyno& (0+255),f,b
 10411                           
 10412                           ; BSR set to: 0
 10413                           ;main.c: 1815: sendEscapedUartData(0, &crc);
 10414  0035B2  0E00               	movlw	high receiveSendEventCANAL@crc
 10415  0035B4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10416  0035B6  0E80               	movlw	low receiveSendEventCANAL@crc
 10417  0035B8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10418  0035BA  0E00               	movlw	0
 10419  0035BC  EC3F  F028         	call	_sendEscapedUartData
 10420                           
 10421                           ; BSR set to: 0
 10422                           ;main.c: 1816: sendEscapedUartData(5 + dlc, &crc);
 10423  0035C0  0E00               	movlw	high receiveSendEventCANAL@crc
 10424  0035C2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10425  0035C4  0E80               	movlw	low receiveSendEventCANAL@crc
 10426  0035C6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10427  0035C8  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10428  0035CA  0F05               	addlw	5
 10429  0035CC  EC3F  F028         	call	_sendEscapedUartData
 10430                           
 10431                           ; BSR set to: 0
 10432                           ;main.c: 1822: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10433  0035D0  0E00               	movlw	high receiveSendEventCANAL@crc
 10434  0035D2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10435  0035D4  0E80               	movlw	low receiveSendEventCANAL@crc
 10436  0035D6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10437  0035D8  0100               	movlb	0	; () banked
 10438  0035DA  517E               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10439  0035DC  EC3F  F028         	call	_sendEscapedUartData
 10440                           
 10441                           ; BSR set to: 0
 10442                           ;main.c: 1823: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10443  0035E0  0E00               	movlw	high receiveSendEventCANAL@crc
 10444  0035E2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10445  0035E4  0E80               	movlw	low receiveSendEventCANAL@crc
 10446  0035E6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10447  0035E8  0100               	movlb	0	; () banked
 10448  0035EA  517D               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10449  0035EC  EC3F  F028         	call	_sendEscapedUartData
 10450                           
 10451                           ; BSR set to: 0
 10452                           ;main.c: 1824: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10453  0035F0  0E00               	movlw	high receiveSendEventCANAL@crc
 10454  0035F2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10455  0035F4  0E80               	movlw	low receiveSendEventCANAL@crc
 10456  0035F6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10457  0035F8  0100               	movlb	0	; () banked
 10458  0035FA  517C               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10459  0035FC  EC3F  F028         	call	_sendEscapedUartData
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;main.c: 1825: sendEscapedUartData((id & 0xff), &crc);
 10463  003600  0E00               	movlw	high receiveSendEventCANAL@crc
 10464  003602  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10465  003604  0E80               	movlw	low receiveSendEventCANAL@crc
 10466  003606  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10467  003608  517B               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10468  00360A  EC3F  F028         	call	_sendEscapedUartData
 10469                           
 10470                           ; BSR set to: 0
 10471                           ;main.c: 1828: sendEscapedUartData(dlc, &crc);
 10472  00360E  0E00               	movlw	high receiveSendEventCANAL@crc
 10473  003610  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10474  003612  0E80               	movlw	low receiveSendEventCANAL@crc
 10475  003614  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10476  003616  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10477  003618  EC3F  F028         	call	_sendEscapedUartData
 10478                           
 10479                           ; BSR set to: 0
 10480                           ;main.c: 1831: for (i = 0; i < dlc; i++) {
 10481  00361C  6B7A               	clrf	receiveSendEventCANAL@i& (0+255),b
 10482  00361E  D00C               	goto	l12206
 10483  003620                     l12202:
 10484                           
 10485                           ; BSR set to: 0
 10486                           ;main.c: 1832: sendEscapedUartData( data[ i ], &crc );
 10487  003620  0E00               	movlw	high receiveSendEventCANAL@crc
 10488  003622  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10489  003624  0E80               	movlw	low receiveSendEventCANAL@crc
 10490  003626  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10491  003628  517A               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10492  00362A  0F72               	addlw	low receiveSendEventCANAL@data
 10493  00362C  6ED9               	movwf	fsr2l,c
 10494  00362E  6ADA               	clrf	fsr2h,c
 10495  003630  50DF               	movf	indf2,w,c
 10496  003632  EC3F  F028         	call	_sendEscapedUartData
 10497                           
 10498                           ; BSR set to: 0
 10499  003636  2B7A               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10500  003638                     l12206:
 10501                           
 10502                           ; BSR set to: 0
 10503  003638  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10504  00363A  5D7A               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10505  00363C  E3F1               	bnc	l12202
 10506                           
 10507                           ; BSR set to: 0
 10508                           ;main.c: 1833: }
 10509                           ;main.c: 1838: sendEscapedUartData(crc, (0));
 10510  00363E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10511  003640  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10512  003642  5180               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10513  003644  EC3F  F028         	call	_sendEscapedUartData
 10514  003648                     l935:
 10515                           
 10516                           ; BSR set to: 0
 10517  003648  A2AC               	btfss	4012,1,c	;volatile
 10518  00364A  D7FE               	goto	l935
 10519                           
 10520                           ; BSR set to: 0
 10521                           ;main.c: 1842: WriteUSART(0x10);
 10522  00364C  0E10               	movlw	16
 10523  00364E  EC98  F02B         	call	_WriteUSART
 10524  003652                     l938:
 10525  003652  A2AC               	btfss	4012,1,c	;volatile
 10526  003654  D7FE               	goto	l938
 10527                           
 10528                           ;main.c: 1844: WriteUSART(0x03);
 10529  003656  0E03               	movlw	3
 10530  003658  EC98  F02B         	call	_WriteUSART
 10531  00365C                     l941:
 10532  00365C  0012               	return	
 10533  00365E                     __end_of_receiveSendEventCANAL:
 10534                           	opt stack 0
 10535                           tblptru	equ	0xFF8
 10536                           tblptrh	equ	0xFF7
 10537                           tblptrl	equ	0xFF6
 10538                           tablat	equ	0xFF5
 10539                           prodh	equ	0xFF4
 10540                           prodl	equ	0xFF3
 10541                           intcon	equ	0xFF2
 10542                           indf0	equ	0xFEF
 10543                           postinc0	equ	0xFEE
 10544                           fsr0h	equ	0xFEA
 10545                           fsr0l	equ	0xFE9
 10546                           wreg	equ	0xFE8
 10547                           indf1	equ	0xFE7
 10548                           postinc1	equ	0xFE6
 10549                           postdec1	equ	0xFE5
 10550                           fsr1h	equ	0xFE2
 10551                           fsr1l	equ	0xFE1
 10552                           indf2	equ	0xFDF
 10553                           postinc2	equ	0xFDE
 10554                           postdec2	equ	0xFDD
 10555                           plusw2	equ	0xFDB
 10556                           fsr2h	equ	0xFDA
 10557                           fsr2l	equ	0xFD9
 10558                           status	equ	0xFD8
 10559                           
 10560 ;; *************** function _receiveSendMultiEventCANAL *****************
 10561 ;; Defined at:
 10562 ;;		line 1857 in file "main.c"
 10563 ;; Parameters:    Size  Location     Type
 10564 ;;		None
 10565 ;; Auto vars:     Size  Location     Type
 10566 ;;  crc             1   33[BANK0 ] unsigned char 
 10567 ;;  data            8   18[BANK0 ] unsigned char [8]
 10568 ;;  id              4   29[BANK0 ] unsigned long 
 10569 ;;  pos             1   34[BANK0 ] unsigned char 
 10570 ;;  dlc             1   28[BANK0 ] unsigned char 
 10571 ;;  i               1   27[BANK0 ] unsigned char 
 10572 ;;  msgcount        1   26[BANK0 ] unsigned char 
 10573 ;; Return value:  Size  Location     Type
 10574 ;;                  1    wreg      enum E15660
 10575 ;; Registers used:
 10576 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10577 ;; Tracked objects:
 10578 ;;		On entry : F/0
 10579 ;;		On exit  : 0/0
 10580 ;;		Unchanged: 0/0
 10581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10582 ;;      Params:         0       0       0       0       0       0       0
 10583 ;;      Locals:         0      17       0       0       0       0       0
 10584 ;;      Temps:          0       0       0       0       0       0       0
 10585 ;;      Totals:         0      17       0       0       0       0       0
 10586 ;;Total ram usage:       17 bytes
 10587 ;; Hardware stack levels used:    1
 10588 ;; Hardware stack levels required when called:    6
 10589 ;; This function calls:
 10590 ;;		_WriteUSART
 10591 ;;		_sendEscapedUartData
 10592 ;;		_crc8
 10593 ;;		_getCANFrame
 10594 ;; This function is called by:
 10595 ;;		_doModeVscp
 10596 ;; This function uses a non-reentrant model
 10597 ;;
 10598                           
 10599                           	psect	text18
 10600  0030EC                     __ptext18:
 10601                           	opt stack 0
 10602  0030EC                     _receiveSendMultiEventCANAL:
 10603                           	opt stack 23
 10604                           
 10605                           ; BSR set to: 0
 10606                           ;main.c: 1858: uint8_t i;
 10607                           ;main.c: 1859: uint8_t pos=0;
 10608                           
 10609                           ;incstack = 0
 10610                           ;incstack = 0
 10611  0030EC  6B82               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10612                           
 10613                           ;main.c: 1860: uint8_t msgcount=0;
 10614  0030EE  6B7A               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;main.c: 1861: uint32_t id;
 10618                           ;main.c: 1862: uint8_t dlc;
 10619                           ;main.c: 1863: uint8_t data[8];
 10620                           ;main.c: 1865: if ( getCANFrame( &id, &dlc, &data ) ) {
 10621  0030F0  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10622  0030F2  D8B1               	call	PL84	;call to abstracted procedure
 10623  0030F4  EC57  F026         	call	_getCANFrame
 10624  0030F8  0900               	iorlw	0
 10625  0030FA  E101 D0A3          	bz	l973
 10626                           
 10627                           ; BSR set to: 0
 10628                           ;main.c: 1867: uint8_t crc = 0;
 10629  0030FE  6B81               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10630                           
 10631                           ; BSR set to: 0
 10632                           ;main.c: 1870: cntRxFrames++;
 10633  003100  2BD9               	incf	_cntRxFrames& (0+255),f,b
 10634  003102  0E00               	movlw	0
 10635  003104  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10636  003106  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10637  003108  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10638                           
 10639                           ;main.c: 1871: cntRxBytes += dlc;
 10640  00310A  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10641  00310C  27D5               	addwf	_cntRxBytes& (0+255),f,b
 10642  00310E  0E00               	movlw	0
 10643  003110  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10644  003112  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10645  003114  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10646  003116                     l945:
 10647                           
 10648                           ; BSR set to: 0
 10649  003116  A2AC               	btfss	4012,1,c	;volatile
 10650  003118  D7FE               	goto	l945
 10651                           
 10652                           ; BSR set to: 0
 10653                           ;main.c: 1875: WriteUSART(0x10);
 10654  00311A  0E10               	movlw	16
 10655  00311C  EC98  F02B         	call	_WriteUSART
 10656  003120                     l948:
 10657  003120  A2AC               	btfss	4012,1,c	;volatile
 10658  003122  D7FE               	goto	l948
 10659                           
 10660                           ;main.c: 1877: WriteUSART(0x02);
 10661  003124  0E02               	movlw	2
 10662  003126  EC98  F02B         	call	_WriteUSART
 10663  00312A                     l951:
 10664  00312A  A2AC               	btfss	4012,1,c	;volatile
 10665  00312C  D7FE               	goto	l951
 10666                           
 10667                           ;main.c: 1881: WriteUSART(6);
 10668  00312E  0E06               	movlw	6
 10669  003130  EC98  F02B         	call	_WriteUSART
 10670                           
 10671                           ;main.c: 1882: crc8(&crc, 6);
 10672  003134  0100               	movlb	0	; () banked
 10673  003136  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10674  003138  6F68               	movwf	(?_crc8+1)& (0+255),b
 10675  00313A  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10676  00313C  6F67               	movwf	?_crc8& (0+255),b
 10677  00313E  0E06               	movlw	6
 10678  003140  6F69               	movwf	(?_crc8+2)& (0+255),b
 10679  003142  ECC5  F02A         	call	_crc8	;wreg free
 10680  003146                     l954:
 10681                           
 10682                           ; BSR set to: 0
 10683  003146  A2AC               	btfss	4012,1,c	;volatile
 10684  003148  D7FE               	goto	l954
 10685                           
 10686                           ; BSR set to: 0
 10687                           ;main.c: 1886: WriteUSART(0);
 10688  00314A  0E00               	movlw	0
 10689  00314C  EC98  F02B         	call	_WriteUSART
 10690                           
 10691                           ;main.c: 1887: crc8(&crc, 0);
 10692  003150  0100               	movlb	0	; () banked
 10693  003152  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10694  003154  6F68               	movwf	(?_crc8+1)& (0+255),b
 10695  003156  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10696  003158  6F67               	movwf	?_crc8& (0+255),b
 10697  00315A  0E00               	movlw	0
 10698  00315C  6B69               	clrf	(?_crc8+2)& (0+255),b
 10699  00315E  ECC5  F02A         	call	_crc8	;wreg free
 10700                           
 10701                           ; BSR set to: 0
 10702                           ;main.c: 1890: sendEscapedUartData(sequencyno, &crc);
 10703  003162  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10704  003164  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10705  003166  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10706  003168  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10707  00316A  51F3               	movf	_sequencyno& (0+255),w,b
 10708  00316C  EC3F  F028         	call	_sendEscapedUartData
 10709                           
 10710                           ; BSR set to: 0
 10711                           ;main.c: 1891: sequencyno++;
 10712  003170  2BF3               	incf	_sequencyno& (0+255),f,b
 10713  003172                     l12108:
 10714                           
 10715                           ; BSR set to: 0
 10716                           ;main.c: 1901: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10717  003172  0E54               	movlw	low _wrkbuf
 10718  003174  0100               	movlb	0	; () banked
 10719  003176  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10720  003178  6ED9               	movwf	fsr2l,c
 10721  00317A  6ADA               	clrf	fsr2h,c
 10722  00317C  0E01               	movlw	high _wrkbuf
 10723  00317E  22DA               	addwfc	fsr2h,f,c
 10724  003180  C080  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10725                           
 10726                           ; BSR set to: 0
 10727                           ;main.c: 1902: pos++;
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;main.c: 1903: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10731  003184  D860               	call	PL26	;call to abstracted procedure
 10732  003186  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10733                           
 10734                           ; BSR set to: 0
 10735                           ;main.c: 1904: pos++;
 10736                           
 10737                           ; BSR set to: 0
 10738                           ;main.c: 1905: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10739  00318A  D85D               	call	PL26	;call to abstracted procedure
 10740  00318C  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10741                           
 10742                           ; BSR set to: 0
 10743                           ;main.c: 1906: pos++;
 10744                           
 10745                           ; BSR set to: 0
 10746                           ;main.c: 1907: wrkbuf[ pos ] = id & 0xff;
 10747  003190  D85A               	call	PL26	;call to abstracted procedure
 10748  003192  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;main.c: 1908: pos++;
 10752                           
 10753                           ; BSR set to: 0
 10754                           ;main.c: 1911: wrkbuf[ pos ] = dlc;
 10755  003196  D857               	call	PL26	;call to abstracted procedure
 10756  003198  C07C  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;main.c: 1912: pos++;
 10760  00319C  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10761                           
 10762                           ; BSR set to: 0
 10763                           ;main.c: 1915: for (i = 0; i < dlc; i++) {
 10764  00319E  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10765  0031A0  D00F               	goto	l12136
 10766  0031A2                     l12130:
 10767                           
 10768                           ; BSR set to: 0
 10769                           ;main.c: 1916: wrkbuf[ pos ] = data[ i ];
 10770  0031A2  517B               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10771  0031A4  0F72               	addlw	low receiveSendMultiEventCANAL@data
 10772  0031A6  6ED9               	movwf	fsr2l,c
 10773  0031A8  6ADA               	clrf	fsr2h,c
 10774  0031AA  0E54               	movlw	low _wrkbuf
 10775  0031AC  0100               	movlb	0	; () banked
 10776  0031AE  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10777  0031B0  6EE1               	movwf	fsr1l,c
 10778  0031B2  6AE2               	clrf	fsr1h,c
 10779  0031B4  0E01               	movlw	high _wrkbuf
 10780  0031B6  22E2               	addwfc	fsr1h,f,c
 10781  0031B8  CFDF FFE7          	movff	indf2,indf1
 10782                           
 10783                           ; BSR set to: 1
 10784                           ;main.c: 1917: pos++;
 10785  0031BC  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10786                           
 10787                           ; BSR set to: 0
 10788  0031BE  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10789  0031C0                     l12136:
 10790                           
 10791                           ; BSR set to: 0
 10792  0031C0  517C               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10793  0031C2  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10794  0031C4  E3EE               	bnc	l12130
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;main.c: 1918: }
 10798                           ;main.c: 1920: msgcount++;
 10799  0031C6  2B7A               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 10800                           
 10801                           ; BSR set to: 0
 10802                           ;main.c: 1922: } while ( ( msgcount < caps.maxCanalFrames ) &&
 10803                           ;main.c: 1923: ( msgcount < 5 ) &&
 10804                           ;main.c: 1924: getCANFrame( &id, &dlc, &data ) );
 10805  0031C8  51F6               	movf	(_caps+1)& (0+255),w,b
 10806  0031CA  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10807  0031CC  D009               	goto	l12146
 10808                           
 10809                           ; BSR set to: 0
 10810  0031CE  0E05               	movlw	5
 10811  0031D0  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10812  0031D2  D006               	goto	l12146
 10813                           
 10814                           ; BSR set to: 0
 10815  0031D4  0E00               	movlw	high receiveSendMultiEventCANAL@dlc
 10816  0031D6  D83F               	call	PL84	;call to abstracted procedure
 10817  0031D8  EC57  F026         	call	_getCANFrame
 10818  0031DC  0900               	iorlw	0
 10819  0031DE  E1C9               	bnz	l12108
 10820  0031E0                     l12146:
 10821                           
 10822                           ; BSR set to: 0
 10823                           ;main.c: 1929: sendEscapedUartData(0, &crc);
 10824  0031E0  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10825  0031E2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10826  0031E4  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10827  0031E6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10828  0031E8  0E00               	movlw	0
 10829  0031EA  EC3F  F028         	call	_sendEscapedUartData
 10830                           
 10831                           ;main.c: 1930: sendEscapedUartData(pos, &crc);
 10832  0031EE  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10833  0031F0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10834  0031F2  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10835  0031F4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10836  0031F6  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10837  0031F8  EC3F  F028         	call	_sendEscapedUartData
 10838                           
 10839                           ; BSR set to: 0
 10840                           ;main.c: 1933: for (i = 0; i < pos; i++) {
 10841  0031FC  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10842  0031FE  D010               	goto	l12154
 10843  003200                     l12150:
 10844                           
 10845                           ; BSR set to: 0
 10846                           ;main.c: 1934: sendEscapedUartData( wrkbuf[ i ], &crc);
 10847  003200  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10848  003202  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10849  003204  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10850  003206  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10851  003208  0E54               	movlw	low _wrkbuf
 10852  00320A  0100               	movlb	0	; () banked
 10853  00320C  257B               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10854  00320E  6ED9               	movwf	fsr2l,c
 10855  003210  6ADA               	clrf	fsr2h,c
 10856  003212  0101               	movlb	1	; () banked
 10857  003214  0E01               	movlw	high _wrkbuf
 10858  003216  22DA               	addwfc	fsr2h,f,c
 10859  003218  50DF               	movf	indf2,w,c
 10860  00321A  EC3F  F028         	call	_sendEscapedUartData
 10861                           
 10862                           ; BSR set to: 0
 10863  00321E  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10864  003220                     l12154:
 10865                           
 10866                           ; BSR set to: 0
 10867  003220  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10868  003222  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10869  003224  E3ED               	bnc	l12150
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;main.c: 1935: }
 10873                           ;main.c: 1938: sendEscapedUartData(crc, (0));
 10874  003226  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10875  003228  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10876  00322A  5181               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 10877  00322C  EC3F  F028         	call	_sendEscapedUartData
 10878  003230                     l967:
 10879                           
 10880                           ; BSR set to: 0
 10881  003230  A2AC               	btfss	4012,1,c	;volatile
 10882  003232  D7FE               	goto	l967
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;main.c: 1942: WriteUSART(0x10);
 10886  003234  0E10               	movlw	16
 10887  003236  EC98  F02B         	call	_WriteUSART
 10888  00323A                     l970:
 10889  00323A  A2AC               	btfss	4012,1,c	;volatile
 10890  00323C  D7FE               	goto	l970
 10891                           
 10892                           ;main.c: 1944: WriteUSART(0x03);
 10893  00323E  0E03               	movlw	3
 10894  003240  EC98  F02B         	call	_WriteUSART
 10895  003244                     l973:
 10896  003244  0012               	return	
 10897  003246                     __end_of_receiveSendMultiEventCANAL:
 10898                           	opt stack 0
 10899  003246                     PL26:
 10900                           	opt stack 23
 10901  003246  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10902  003248  0E54               	movlw	low _wrkbuf
 10903  00324A  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10904  00324C  6ED9               	movwf	fsr2l,c
 10905  00324E  6ADA               	clrf	fsr2h,c
 10906  003250  0E01               	movlw	high _wrkbuf
 10907  003252  22DA               	addwfc	fsr2h,f,c
 10908  003254  0012               	return	
 10909  003256                     __end_ofPL26:
 10910                           	opt stack 0
 10911  003256                     PL84:
 10912                           	opt stack 23
 10913  003256  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
 10914  003258  0E7C               	movlw	low receiveSendMultiEventCANAL@dlc
 10915  00325A  6F6D               	movwf	?_getCANFrame& (0+255),b
 10916  00325C  0E00               	movlw	high receiveSendMultiEventCANAL@data
 10917  00325E  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
 10918  003260  0E72               	movlw	low receiveSendMultiEventCANAL@data
 10919  003262  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
 10920  003264  0E7D               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 10921  003266  0012               	return	
 10922  003268                     __end_ofPL84:
 10923                           	opt stack 0
 10924                           tblptru	equ	0xFF8
 10925                           tblptrh	equ	0xFF7
 10926                           tblptrl	equ	0xFF6
 10927                           tablat	equ	0xFF5
 10928                           prodh	equ	0xFF4
 10929                           prodl	equ	0xFF3
 10930                           intcon	equ	0xFF2
 10931                           indf0	equ	0xFEF
 10932                           postinc0	equ	0xFEE
 10933                           fsr0h	equ	0xFEA
 10934                           fsr0l	equ	0xFE9
 10935                           wreg	equ	0xFE8
 10936                           indf1	equ	0xFE7
 10937                           postinc1	equ	0xFE6
 10938                           postdec1	equ	0xFE5
 10939                           fsr1h	equ	0xFE2
 10940                           fsr1l	equ	0xFE1
 10941                           indf2	equ	0xFDF
 10942                           postinc2	equ	0xFDE
 10943                           postdec2	equ	0xFDD
 10944                           plusw2	equ	0xFDB
 10945                           fsr2h	equ	0xFDA
 10946                           fsr2l	equ	0xFD9
 10947                           status	equ	0xFD8
 10948                           
 10949 ;; *************** function _sendEscapedUartData *****************
 10950 ;; Defined at:
 10951 ;;		line 1510 in file "main.c"
 10952 ;; Parameters:    Size  Location     Type
 10953 ;;  c               1    wreg     unsigned char 
 10954 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 10955 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 10956 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 10957 ;;		 -> NULL(0), 
 10958 ;; Auto vars:     Size  Location     Type
 10959 ;;  c               1   14[BANK0 ] unsigned char 
 10960 ;; Return value:  Size  Location     Type
 10961 ;;		None               void
 10962 ;; Registers used:
 10963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10964 ;; Tracked objects:
 10965 ;;		On entry : E/1
 10966 ;;		On exit  : F/0
 10967 ;;		Unchanged: 0/0
 10968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10969 ;;      Params:         0       2       0       0       0       0       0
 10970 ;;      Locals:         0       1       0       0       0       0       0
 10971 ;;      Temps:          0       0       0       0       0       0       0
 10972 ;;      Totals:         0       3       0       0       0       0       0
 10973 ;;Total ram usage:        3 bytes
 10974 ;; Hardware stack levels used:    1
 10975 ;; Hardware stack levels required when called:    5
 10976 ;; This function calls:
 10977 ;;		_WriteUSART
 10978 ;;		_crc8
 10979 ;; This function is called by:
 10980 ;;		_sendVSCPDriverErrorFrame
 10981 ;;		_sendVSCPDriverAck
 10982 ;;		_sendVSCPDriverNack
 10983 ;;		_sendVSCPDriverCommandReply
 10984 ;;		_receiveSendEventCANAL
 10985 ;;		_receiveSendMultiEventCANAL
 10986 ;;		_sendVSCPModeCapabilities
 10987 ;; This function uses a non-reentrant model
 10988 ;;
 10989                           
 10990                           	psect	text19
 10991  00507E                     __ptext19:
 10992                           	opt stack 0
 10993  00507E                     _sendEscapedUartData:
 10994                           	opt stack 23
 10995                           
 10996                           ;incstack = 0
 10997                           ;incstack = 0
 10998                           ;sendEscapedUartData@c stored from wreg
 10999  00507E  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11000                           
 11001                           ;main.c: 1511: if (0x10 == c) {
 11002  005082  0100               	movlb	0	; () banked
 11003  005084  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11004  005086  0A10               	xorlw	16
 11005  005088  E117               	bnz	l764
 11006  00508A                     l756:
 11007  00508A  A2AC               	btfss	4012,1,c	;volatile
 11008  00508C  D7FE               	goto	l756
 11009                           
 11010                           ;main.c: 1514: WriteUSART(0x10);
 11011  00508E  0E10               	movlw	16
 11012  005090  EC98  F02B         	call	_WriteUSART
 11013  005094                     l759:
 11014  005094  A2AC               	btfss	4012,1,c	;volatile
 11015  005096  D7FE               	goto	l759
 11016                           
 11017                           ;main.c: 1518: WriteUSART(0x10);
 11018  005098  0E10               	movlw	16
 11019  00509A  EC98  F02B         	call	_WriteUSART
 11020                           
 11021                           ;main.c: 1519: if ((0) != pcrc) crc8(pcrc, 0x10);
 11022  00509E  0100               	movlb	0	; () banked
 11023  0050A0  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11024  0050A2  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11025  0050A4  E01B               	bz	l768
 11026                           
 11027                           ; BSR set to: 0
 11028  0050A6  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11029  0050AA  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11030  0050AE  0E10               	movlw	16
 11031  0050B0  6F69               	movwf	(?_crc8+2)& (0+255),b
 11032  0050B2  ECC5  F02A         	call	_crc8	;wreg free
 11033  0050B6  D012               	goto	l768
 11034  0050B8                     l764:
 11035  0050B8  A2AC               	btfss	4012,1,c	;volatile
 11036  0050BA  D7FE               	goto	l764
 11037                           
 11038                           ;main.c: 1525: WriteUSART(c);
 11039  0050BC  0100               	movlb	0	; () banked
 11040  0050BE  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11041  0050C0  EC98  F02B         	call	_WriteUSART
 11042                           
 11043                           ;main.c: 1526: if ((0) != pcrc) crc8(pcrc, c);
 11044  0050C4  0100               	movlb	0	; () banked
 11045  0050C6  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11046  0050C8  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11047  0050CA  E008               	bz	l768
 11048                           
 11049                           ; BSR set to: 0
 11050  0050CC  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11051  0050D0  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11052  0050D4  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11053  0050D8  ECC5  F02A         	call	_crc8	;wreg free
 11054  0050DC                     l768:
 11055                           
 11056                           ; BSR set to: 0
 11057  0050DC  0012               	return	
 11058  0050DE                     __end_of_sendEscapedUartData:
 11059                           	opt stack 0
 11060                           tblptru	equ	0xFF8
 11061                           tblptrh	equ	0xFF7
 11062                           tblptrl	equ	0xFF6
 11063                           tablat	equ	0xFF5
 11064                           prodh	equ	0xFF4
 11065                           prodl	equ	0xFF3
 11066                           intcon	equ	0xFF2
 11067                           indf0	equ	0xFEF
 11068                           postinc0	equ	0xFEE
 11069                           fsr0h	equ	0xFEA
 11070                           fsr0l	equ	0xFE9
 11071                           wreg	equ	0xFE8
 11072                           indf1	equ	0xFE7
 11073                           postinc1	equ	0xFE6
 11074                           postdec1	equ	0xFE5
 11075                           fsr1h	equ	0xFE2
 11076                           fsr1l	equ	0xFE1
 11077                           indf2	equ	0xFDF
 11078                           postinc2	equ	0xFDE
 11079                           postdec2	equ	0xFDD
 11080                           plusw2	equ	0xFDB
 11081                           fsr2h	equ	0xFDA
 11082                           fsr2l	equ	0xFD9
 11083                           status	equ	0xFD8
 11084                           
 11085 ;; *************** function _crc8 *****************
 11086 ;; Defined at:
 11087 ;;		line 47 in file "crc8.c"
 11088 ;; Parameters:    Size  Location     Type
 11089 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11090 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11091 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11092 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11093 ;;  m               1    9[BANK0 ] unsigned char 
 11094 ;; Auto vars:     Size  Location     Type
 11095 ;;		None
 11096 ;; Return value:  Size  Location     Type
 11097 ;;		None               void
 11098 ;; Registers used:
 11099 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11100 ;; Tracked objects:
 11101 ;;		On entry : F/0
 11102 ;;		On exit  : F/0
 11103 ;;		Unchanged: 0/0
 11104 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11105 ;;      Params:         0       3       0       0       0       0       0
 11106 ;;      Locals:         0       0       0       0       0       0       0
 11107 ;;      Temps:          0       2       0       0       0       0       0
 11108 ;;      Totals:         0       5       0       0       0       0       0
 11109 ;;Total ram usage:        5 bytes
 11110 ;; Hardware stack levels used:    1
 11111 ;; Hardware stack levels required when called:    4
 11112 ;; This function calls:
 11113 ;;		_init_crc8
 11114 ;; This function is called by:
 11115 ;;		_sendEscapedUartData
 11116 ;;		_sendVSCPDriverErrorFrame
 11117 ;;		_sendVSCPDriverAck
 11118 ;;		_sendVSCPDriverNack
 11119 ;;		_sendVSCPDriverCommandReply
 11120 ;;		_receiveSendEventCANAL
 11121 ;;		_receiveSendMultiEventCANAL
 11122 ;;		_sendVSCPModeCapabilities
 11123 ;;		_calcCRC
 11124 ;; This function uses a non-reentrant model
 11125 ;;
 11126                           
 11127                           	psect	text20
 11128  00558A                     __ptext20:
 11129                           	opt stack 0
 11130  00558A                     _crc8:
 11131                           	opt stack 24
 11132                           
 11133                           ; BSR set to: 0
 11134                           ;crc8.c: 48: if ( !made_table ) {
 11135                           
 11136                           ; BSR set to: 0
 11137                           ;incstack = 0
 11138                           ;incstack = 0
 11139  00558A  5038               	movf	_made_table+1,w,c
 11140  00558C  1037               	iorwf	_made_table,w,c
 11141  00558E  B4D8               	btfsc	status,2,c
 11142                           
 11143                           ; BSR set to: 0
 11144                           ;crc8.c: 49: init_crc8();
 11145  005590  EC44  F027         	call	_init_crc8	;wreg free
 11146                           
 11147                           ; BSR set to: 0
 11148                           ;crc8.c: 50: }
 11149                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11150  005594  C067  FFD9         	movff	crc8@crc,fsr2l
 11151  005598  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11152  00559C  50DF               	movf	indf2,w,c
 11153  00559E  1969               	xorwf	crc8@m& (0+255),w,b
 11154  0055A0  6F6A               	movwf	??_crc8& (0+255),b
 11155  0055A2  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11156  0055A4  0E00               	movlw	low _crc8_table
 11157  0055A6  0100               	movlb	0	; () banked
 11158  0055A8  256A               	addwf	??_crc8& (0+255),w,b
 11159  0055AA  6ED9               	movwf	fsr2l,c
 11160  0055AC  0E03               	movlw	high _crc8_table
 11161  0055AE  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11162  0055B0  6EDA               	movwf	fsr2h,c
 11163  0055B2  C067  FFE1         	movff	crc8@crc,fsr1l
 11164  0055B6  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11165  0055BA  CFDF FFE7          	movff	indf2,indf1
 11166                           
 11167                           ; BSR set to: 0
 11168  0055BE  0012               	return	
 11169  0055C0                     __end_of_crc8:
 11170                           	opt stack 0
 11171                           tblptru	equ	0xFF8
 11172                           tblptrh	equ	0xFF7
 11173                           tblptrl	equ	0xFF6
 11174                           tablat	equ	0xFF5
 11175                           prodh	equ	0xFF4
 11176                           prodl	equ	0xFF3
 11177                           intcon	equ	0xFF2
 11178                           indf0	equ	0xFEF
 11179                           postinc0	equ	0xFEE
 11180                           fsr0h	equ	0xFEA
 11181                           fsr0l	equ	0xFE9
 11182                           wreg	equ	0xFE8
 11183                           indf1	equ	0xFE7
 11184                           postinc1	equ	0xFE6
 11185                           postdec1	equ	0xFE5
 11186                           fsr1h	equ	0xFE2
 11187                           fsr1l	equ	0xFE1
 11188                           indf2	equ	0xFDF
 11189                           postinc2	equ	0xFDE
 11190                           postdec2	equ	0xFDD
 11191                           plusw2	equ	0xFDB
 11192                           fsr2h	equ	0xFDA
 11193                           fsr2l	equ	0xFD9
 11194                           status	equ	0xFD8
 11195                           
 11196 ;; *************** function _init_crc8 *****************
 11197 ;; Defined at:
 11198 ;;		line 25 in file "crc8.c"
 11199 ;; Parameters:    Size  Location     Type
 11200 ;;		None
 11201 ;; Auto vars:     Size  Location     Type
 11202 ;;  i               2    5[BANK0 ] int 
 11203 ;;  j               2    2[BANK0 ] int 
 11204 ;;  crc             1    4[BANK0 ] unsigned char 
 11205 ;; Return value:  Size  Location     Type
 11206 ;;		None               void
 11207 ;; Registers used:
 11208 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11209 ;; Tracked objects:
 11210 ;;		On entry : F/0
 11211 ;;		On exit  : F/0
 11212 ;;		Unchanged: 0/0
 11213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11214 ;;      Params:         0       0       0       0       0       0       0
 11215 ;;      Locals:         0       7       0       0       0       0       0
 11216 ;;      Temps:          0       0       0       0       0       0       0
 11217 ;;      Totals:         0       7       0       0       0       0       0
 11218 ;;Total ram usage:        7 bytes
 11219 ;; Hardware stack levels used:    1
 11220 ;; Hardware stack levels required when called:    3
 11221 ;; This function calls:
 11222 ;;		Nothing
 11223 ;; This function is called by:
 11224 ;;		_main
 11225 ;;		_crc8
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           	psect	text21
 11230  004E88                     __ptext21:
 11231                           	opt stack 0
 11232  004E88                     _init_crc8:
 11233                           	opt stack 24
 11234                           
 11235                           ; BSR set to: 0
 11236                           ;crc8.c: 26: int i,j;
 11237                           ;crc8.c: 27: unsigned char crc;
 11238                           ;crc8.c: 29: if (!made_table) {
 11239                           
 11240                           ; BSR set to: 0
 11241                           ;incstack = 0
 11242                           ;incstack = 0
 11243  004E88  5038               	movf	_made_table+1,w,c
 11244  004E8A  1037               	iorwf	_made_table,w,c
 11245  004E8C  E131               	bnz	l1572
 11246                           
 11247                           ; BSR set to: 0
 11248                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11249  004E8E  6B65               	clrf	init_crc8@i& (0+255),b
 11250  004E90  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11251  004E92                     l1564:
 11252                           
 11253                           ; BSR set to: 0
 11254                           ;crc8.c: 31: crc = i;
 11255  004E92  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11256                           
 11257                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11258  004E96  6B62               	clrf	init_crc8@j& (0+255),b
 11259  004E98  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11260  004E9A                     l1566:
 11261                           
 11262                           ; BSR set to: 0
 11263                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11264  004E9A  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11265  004E9C  D003               	goto	l9890
 11266                           
 11267                           ; BSR set to: 0
 11268  004E9E  6B60               	clrf	_init_crc8$2075& (0+255),b
 11269  004EA0  6B61               	clrf	(_init_crc8$2075+1)& (0+255),b
 11270  004EA2  D003               	goto	l9892
 11271  004EA4                     l9890:
 11272                           
 11273                           ; BSR set to: 0
 11274  004EA4  6B61               	clrf	(_init_crc8$2075+1)& (0+255),b
 11275  004EA6  0E07               	movlw	7
 11276  004EA8  6F60               	movwf	_init_crc8$2075& (0+255),b
 11277  004EAA                     l9892:
 11278                           
 11279                           ; BSR set to: 0
 11280  004EAA  5164               	movf	init_crc8@crc& (0+255),w,b
 11281  004EAC  2564               	addwf	init_crc8@crc& (0+255),w,b
 11282  004EAE  1960               	xorwf	_init_crc8$2075& (0+255),w,b
 11283  004EB0  6F64               	movwf	init_crc8@crc& (0+255),b
 11284                           
 11285                           ; BSR set to: 0
 11286  004EB2  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11287  004EB4  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11288                           
 11289                           ; BSR set to: 0
 11290  004EB6  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11291  004EB8  0A80               	xorlw	128
 11292  004EBA  0F80               	addlw	-128
 11293  004EBC  0E08               	movlw	8
 11294  004EBE  B4D8               	btfsc	status,2,c
 11295  004EC0  5D62               	subwf	init_crc8@j& (0+255),w,b
 11296  004EC2  E3EB               	bnc	l1566
 11297                           
 11298                           ; BSR set to: 0
 11299                           ;crc8.c: 34: }
 11300                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11301  004EC4  0E00               	movlw	low _crc8_table
 11302  004EC6  0100               	movlb	0	; () banked
 11303  004EC8  2565               	addwf	init_crc8@i& (0+255),w,b
 11304  004ECA  6ED9               	movwf	fsr2l,c
 11305  004ECC  0E03               	movlw	high _crc8_table
 11306  004ECE  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11307  004ED0  6EDA               	movwf	fsr2h,c
 11308  004ED2  C064  FFDF         	movff	init_crc8@crc,indf2
 11309                           
 11310                           ; BSR set to: 0
 11311  004ED6  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11312  004ED8  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11313                           
 11314                           ; BSR set to: 0
 11315  004EDA  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11316  004EDC  0A80               	xorlw	128
 11317  004EDE  0F7F               	addlw	-129
 11318  004EE0  0E00               	movlw	0
 11319  004EE2  B4D8               	btfsc	status,2,c
 11320  004EE4  5D65               	subwf	init_crc8@i& (0+255),w,b
 11321  004EE6  E3D5               	bnc	l1564
 11322                           
 11323                           ; BSR set to: 0
 11324                           ;crc8.c: 37: }
 11325                           ;crc8.c: 38: made_table=1;
 11326  004EE8  0E00               	movlw	0
 11327  004EEA  6E38               	movwf	_made_table+1,c
 11328  004EEC  0E01               	movlw	1
 11329  004EEE  6E37               	movwf	_made_table,c
 11330  004EF0                     l1572:
 11331                           
 11332                           ; BSR set to: 0
 11333  004EF0  0012               	return	
 11334  004EF2                     __end_of_init_crc8:
 11335                           	opt stack 0
 11336                           tblptru	equ	0xFF8
 11337                           tblptrh	equ	0xFF7
 11338                           tblptrl	equ	0xFF6
 11339                           tablat	equ	0xFF5
 11340                           prodh	equ	0xFF4
 11341                           prodl	equ	0xFF3
 11342                           intcon	equ	0xFF2
 11343                           indf0	equ	0xFEF
 11344                           postinc0	equ	0xFEE
 11345                           fsr0h	equ	0xFEA
 11346                           fsr0l	equ	0xFE9
 11347                           wreg	equ	0xFE8
 11348                           indf1	equ	0xFE7
 11349                           postinc1	equ	0xFE6
 11350                           postdec1	equ	0xFE5
 11351                           fsr1h	equ	0xFE2
 11352                           fsr1l	equ	0xFE1
 11353                           indf2	equ	0xFDF
 11354                           postinc2	equ	0xFDE
 11355                           postdec2	equ	0xFDD
 11356                           plusw2	equ	0xFDB
 11357                           fsr2h	equ	0xFDA
 11358                           fsr2l	equ	0xFD9
 11359                           status	equ	0xFD8
 11360                           
 11361 ;; *************** function _doModeVerbose *****************
 11362 ;; Defined at:
 11363 ;;		line 492 in file "main.c"
 11364 ;; Parameters:    Size  Location     Type
 11365 ;;		None
 11366 ;; Auto vars:     Size  Location     Type
 11367 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11368 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 11369 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 11370 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 11371 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 11372 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11373 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11374 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11375 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 11376 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 11377 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 11378 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 11379 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11380 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11381 ;;  id              4   35[BANK2 ] unsigned long 
 11382 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11383 ;;		 -> NULL(0), cmdbuf(80), 
 11384 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11385 ;;  maskno          1   40[BANK2 ] unsigned char 
 11386 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 11387 ;;  mask_type       1   18[BANK2 ] unsigned char 
 11388 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 11389 ;;  id              4    0[BANK2 ] unsigned long 
 11390 ;;  p               2   57[BANK2 ] PTR unsigned char 
 11391 ;;		 -> NULL(0), cmdbuf(80), 
 11392 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11393 ;;  filterno        1   39[BANK2 ] unsigned char 
 11394 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 11395 ;;  filter_type     1   15[BANK2 ] unsigned char 
 11396 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 11397 ;;  nodeid          1   47[BANK2 ] unsigned char 
 11398 ;;  p               2   52[BANK2 ] PTR unsigned char 
 11399 ;;		 -> NULL(0), cmdbuf(80), 
 11400 ;;  value           1   41[BANK2 ] unsigned char 
 11401 ;;  reg             1   34[BANK2 ] unsigned char 
 11402 ;;  page            1   33[BANK2 ] unsigned char 
 11403 ;;  nodeid          1   13[BANK2 ] unsigned char 
 11404 ;;  p               2   50[BANK2 ] PTR unsigned char 
 11405 ;;		 -> NULL(0), cmdbuf(80), 
 11406 ;;  value           1   49[BANK2 ] unsigned char 
 11407 ;;  i               1   48[BANK2 ] unsigned char 
 11408 ;;  reg             1   46[BANK2 ] unsigned char 
 11409 ;;  page            1   45[BANK2 ] unsigned char 
 11410 ;;  count           1   43[BANK2 ] unsigned char 
 11411 ;;  rv              1   32[BANK2 ] enum E15660
 11412 ;;  nodeid          1   12[BANK2 ] unsigned char 
 11413 ;;  p               2   55[BANK2 ] PTR unsigned char 
 11414 ;;		 -> NULL(0), cmdbuf(80), 
 11415 ;;  ifmode          1   54[BANK2 ] enum E16362
 11416 ;;  c               1   44[BANK2 ] unsigned char 
 11417 ;;  i               1   42[BANK2 ] unsigned char 
 11418 ;; Return value:  Size  Location     Type
 11419 ;;		None               void
 11420 ;; Registers used:
 11421 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11422 ;; Tracked objects:
 11423 ;;		On entry : 0/0
 11424 ;;		On exit  : 0/0
 11425 ;;		Unchanged: 0/0
 11426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11427 ;;      Params:         0       0       0       0       0       0       0
 11428 ;;      Locals:         0       0       0      61       0       0       0
 11429 ;;      Temps:          0       0      20       0       0       0       0
 11430 ;;      Totals:         0       0      20      61       0       0       0
 11431 ;;Total ram usage:       81 bytes
 11432 ;; Hardware stack levels used:    1
 11433 ;; Hardware stack levels required when called:   10
 11434 ;; This function calls:
 11435 ;;		_putsUSART
 11436 ;;		_printFirmwareVersion
 11437 ;;		_fifo_read
 11438 ;;		_writeEEPROM
 11439 ;;		_receivePrintEventVerbose
 11440 ;;		_stristr
 11441 ;;		_ECANSetOperationMode
 11442 ;;		_strtok
 11443 ;;		_atoi
 11444 ;;		_memset
 11445 ;;		_sendVSCPFrame
 11446 ;;		_printStatistics
 11447 ;;		_printErrors
 11448 ;;		_printHelp
 11449 ;;		_findNodes
 11450 ;;		_strcpy
 11451 ;;		_strchr
 11452 ;;		_readRegisterExtended
 11453 ;;		_sprintf
 11454 ;;		_WriteUSART
 11455 ;;		_printBinary
 11456 ;;		_writeRegisterExtended
 11457 ;;		_printNodeFirmwareVersion
 11458 ;;		_printGUID
 11459 ;;		_printMDF
 11460 ;;		_setFilter
 11461 ;;		__CANIDToRegs
 11462 ;; This function is called by:
 11463 ;;		_main
 11464 ;; This function uses a non-reentrant model
 11465 ;;
 11466                           
 11467                           	psect	text22
 11468  00026C                     __ptext22:
 11469                           	opt stack 0
 11470  00026C                     _doModeVerbose:
 11471                           	opt stack 20
 11472                           
 11473                           ;main.c: 493: uint8_t c;
 11474                           ;main.c: 494: uint8_t i;
 11475                           ;main.c: 497: if (!bSilent) {
 11476                           
 11477                           ; BSR set to: 0
 11478                           ;incstack = 0
 11479                           ;incstack = 0
 11480  00026C  0101               	movlb	1	; () banked
 11481  00026E  6701               	tstfsz	_bSilent& (0+255),b
 11482  000270  D002               	goto	l10020
 11483                           
 11484                           ; BSR set to: 1
 11485                           ;main.c: 498: receivePrintEventVerbose();
 11486  000272  ECC9  F011         	call	_receivePrintEventVerbose	;wreg free
 11487  000276                     l10020:
 11488                           
 11489                           ;main.c: 499: }
 11490                           ;main.c: 502: (INTCONbits.GIE = 0);
 11491  000276  9EF2               	bcf	intcon,7,c	;volatile
 11492                           
 11493                           ;main.c: 504: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11494  000278  0E02               	movlw	high doModeVerbose@c
 11495  00027A  0100               	movlb	0	; () banked
 11496  00027C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11497  00027E  0EAC               	movlw	low doModeVerbose@c
 11498  000280  6F60               	movwf	?_fifo_read& (0+255),b
 11499  000282  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 11500  000284  0E01               	movlw	1
 11501  000286  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11502  000288  0E48               	movlw	_serialInputFifo& (0+255)
 11503  00028A  EC6F  F021         	call	_fifo_read
 11504  00028E  0560               	decf	?_fifo_read& (0+255),w,b
 11505  000290  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11506  000292  E002 EF5D  F00A    	bnz	l10622
 11507                           
 11508                           ; BSR set to: 0
 11509                           ;main.c: 507: (INTCONbits.GIE = 1);
 11510  000298  8EF2               	bsf	intcon,7,c	;volatile
 11511                           
 11512                           ; BSR set to: 0
 11513                           ;main.c: 510: cmdbuf[ pos ] = c;
 11514  00029A  ECF6  F015         	call	PL18	;call to abstracted procedure
 11515  00029E  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 11516                           
 11517                           ; BSR set to: 2
 11518                           ;main.c: 511: pos++;
 11519  0002A2  2B02               	incf	_pos& (0+255),f,b
 11520                           
 11521                           ; BSR set to: 1
 11522                           ;main.c: 513: if (pos >= 128u) {
 11523  0002A4  0E7F               	movlw	127
 11524  0002A6  6502               	cpfsgt	_pos& (0+255),b
 11525  0002A8  D001               	goto	l10034
 11526                           
 11527                           ; BSR set to: 1
 11528                           ;main.c: 517: pos = 0;
 11529  0002AA  6B02               	clrf	_pos& (0+255),b
 11530  0002AC                     l10034:
 11531                           
 11532                           ; BSR set to: 1
 11533                           ;main.c: 519: }
 11534                           ;main.c: 522: if (0x0d == c) {
 11535  0002AC  0102               	movlb	2	; () banked
 11536  0002AE  51AC               	movf	doModeVerbose@c& (0+255),w,b
 11537  0002B0  0A0D               	xorlw	13
 11538  0002B2  E002 EF5D  F00A    	bnz	l10622
 11539                           
 11540                           ; BSR set to: 2
 11541                           ;main.c: 524: cmdbuf[ pos ] = 0;
 11542  0002B8  ECF6  F015         	call	PL18	;call to abstracted procedure
 11543  0002BC  6ADF               	clrf	indf2,c
 11544                           
 11545                           ; BSR set to: 1
 11546                           ;main.c: 527: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11547  0002BE  0100               	movlb	0	; () banked
 11548  0002C0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11549  0002C2  0E04               	movlw	low _cmdbuf
 11550  0002C4  6F6D               	movwf	?_stristr& (0+255),b
 11551  0002C6  0E7F               	movlw	high STR_6
 11552  0002C8  6F70               	movwf	(?_stristr+3)& (0+255),b
 11553  0002CA  0ECF               	movlw	low STR_6
 11554  0002CC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11555  0002CE  EC1B  F026         	call	_stristr	;wreg free
 11556  0002D2  EC5F  F00A         	call	PL2	;call to abstracted procedure
 11557  0002D6  E104               	bnz	u12165
 11558  0002D8  0100               	movlb	0	; () banked
 11559  0002DA  516D               	movf	?_stristr& (0+255),w,b
 11560  0002DC  0101               	movlb	1	; () banked
 11561  0002DE  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11562  0002E0                     u12165:
 11563  0002E0  E111               	bnz	l10044
 11564                           
 11565                           ; BSR set to: 1
 11566                           ;main.c: 528: putsUSART((char *) "Will enter bootloader now...\r\n");
 11567  0002E2  0E7A               	movlw	high STR_7
 11568  0002E4  0100               	movlb	0	; () banked
 11569  0002E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11570  0002E8  0EEC               	movlw	low STR_7
 11571  0002EA  6F61               	movwf	?_putsUSART& (0+255),b
 11572  0002EC  ECC9  F028         	call	_putsUSART	;wreg free
 11573                           
 11574                           ;main.c: 529: writeEEPROM(0x00, 0xFF);
 11575  0002F0  0100               	movlb	0	; () banked
 11576  0002F2  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 11577  0002F4  6B60               	clrf	?_writeEEPROM& (0+255),b
 11578  0002F6  0EFF               	movlw	255
 11579  0002F8  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 11580  0002FA  EC3F  F02B         	call	_writeEEPROM	;wreg free
 11581  0002FE  00FF               	reset		;# 
 11582                           
 11583                           ;main.c: 531: }
 11584  000300  EF4F  F00A         	goto	l10618
 11585  000304                     l10044:
 11586                           
 11587                           ; BSR set to: 1
 11588                           ;main.c: 533: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11589  000304  0E01               	movlw	high _cmdbuf
 11590  000306  0100               	movlb	0	; () banked
 11591  000308  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11592  00030A  0E04               	movlw	low _cmdbuf
 11593  00030C  6F6D               	movwf	?_stristr& (0+255),b
 11594  00030E  0E7F               	movlw	high STR_8
 11595  000310  6F70               	movwf	(?_stristr+3)& (0+255),b
 11596  000312  0EB6               	movlw	low STR_8
 11597  000314  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11598  000316  EC1B  F026         	call	_stristr	;wreg free
 11599  00031A  EC5F  F00A         	call	PL2	;call to abstracted procedure
 11600  00031E  E104               	bnz	u12175
 11601  000320  0100               	movlb	0	; () banked
 11602  000322  516D               	movf	?_stristr& (0+255),w,b
 11603  000324  0101               	movlb	1	; () banked
 11604  000326  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11605  000328                     u12175:
 11606  000328  E10C               	bnz	l10052
 11607                           
 11608                           ; BSR set to: 1
 11609                           ;main.c: 534: bSilent = 0;
 11610  00032A  6B01               	clrf	_bSilent& (0+255),b
 11611                           
 11612                           ; BSR set to: 1
 11613                           ;main.c: 535: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11614  00032C  0E00               	movlw	0
 11615  00032E  EC80  F02B         	call	_ECANSetOperationMode
 11616                           
 11617                           ; BSR set to: 0
 11618                           ;main.c: 536: putsUSART((char *) "+OK\r\n");
 11619  000332  0E7F               	movlw	high STR_9
 11620  000334  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11621  000336  0E7F               	movlw	low STR_9
 11622  000338  6F61               	movwf	?_putsUSART& (0+255),b
 11623  00033A  ECC9  F028         	call	_putsUSART	;wreg free
 11624                           
 11625                           ;main.c: 537: }
 11626  00033E  EF4F  F00A         	goto	l10618
 11627  000342                     l10052:
 11628                           
 11629                           ; BSR set to: 1
 11630                           ;main.c: 539: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11631  000342  0E01               	movlw	high _cmdbuf
 11632  000344  0100               	movlb	0	; () banked
 11633  000346  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11634  000348  0E04               	movlw	low _cmdbuf
 11635  00034A  6F6D               	movwf	?_stristr& (0+255),b
 11636  00034C  0E7F               	movlw	high STR_10
 11637  00034E  6F70               	movwf	(?_stristr+3)& (0+255),b
 11638  000350  0E5D               	movlw	low STR_10
 11639  000352  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11640  000354  EC1B  F026         	call	_stristr	;wreg free
 11641  000358  EC5F  F00A         	call	PL2	;call to abstracted procedure
 11642  00035C  E104               	bnz	u12185
 11643  00035E  0100               	movlb	0	; () banked
 11644  000360  516D               	movf	?_stristr& (0+255),w,b
 11645  000362  0101               	movlb	1	; () banked
 11646  000364  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11647  000366                     u12185:
 11648  000366  E10D               	bnz	l10060
 11649                           
 11650                           ; BSR set to: 1
 11651                           ;main.c: 540: bSilent = 1;
 11652  000368  0E01               	movlw	1
 11653  00036A  6F01               	movwf	_bSilent& (0+255),b
 11654                           
 11655                           ; BSR set to: 1
 11656                           ;main.c: 541: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11657  00036C  0E00               	movlw	0
 11658  00036E  EC80  F02B         	call	_ECANSetOperationMode
 11659                           
 11660                           ; BSR set to: 0
 11661                           ;main.c: 542: putsUSART((char *) "+OK\r\n");
 11662  000372  0E7F               	movlw	high STR_9
 11663  000374  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11664  000376  0E7F               	movlw	low STR_9
 11665  000378  6F61               	movwf	?_putsUSART& (0+255),b
 11666  00037A  ECC9  F028         	call	_putsUSART	;wreg free
 11667                           
 11668                           ;main.c: 543: }
 11669  00037E  EF4F  F00A         	goto	l10618
 11670  000382                     l10060:
 11671                           
 11672                           ; BSR set to: 1
 11673                           ;main.c: 545: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11674  000382  0E01               	movlw	high _cmdbuf
 11675  000384  0100               	movlb	0	; () banked
 11676  000386  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11677  000388  0E04               	movlw	low _cmdbuf
 11678  00038A  6F6D               	movwf	?_stristr& (0+255),b
 11679  00038C  0E7F               	movlw	high STR_12
 11680  00038E  6F70               	movwf	(?_stristr+3)& (0+255),b
 11681  000390  0E91               	movlw	low STR_12
 11682  000392  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11683  000394  EC1B  F026         	call	_stristr	;wreg free
 11684  000398  EC5F  F00A         	call	PL2	;call to abstracted procedure
 11685  00039C  E104               	bnz	u12195
 11686  00039E  0100               	movlb	0	; () banked
 11687  0003A0  516D               	movf	?_stristr& (0+255),w,b
 11688  0003A2  0101               	movlb	1	; () banked
 11689  0003A4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11690  0003A6                     u12195:
 11691  0003A6  E10D               	bnz	l10068
 11692                           
 11693                           ; BSR set to: 1
 11694                           ;main.c: 546: bSilent = 1;
 11695  0003A8  0E01               	movlw	1
 11696  0003AA  6F01               	movwf	_bSilent& (0+255),b
 11697                           
 11698                           ; BSR set to: 1
 11699                           ;main.c: 547: ECANSetOperationMode(0x20);
 11700  0003AC  0E20               	movlw	32
 11701  0003AE  EC80  F02B         	call	_ECANSetOperationMode
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;main.c: 548: putsUSART((char *) "+OK\r\n");
 11705  0003B2  0E7F               	movlw	high STR_9
 11706  0003B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11707  0003B6  0E7F               	movlw	low STR_9
 11708  0003B8  6F61               	movwf	?_putsUSART& (0+255),b
 11709  0003BA  ECC9  F028         	call	_putsUSART	;wreg free
 11710                           
 11711                           ;main.c: 549: }
 11712  0003BE  EF4F  F00A         	goto	l10618
 11713  0003C2                     l10068:
 11714                           
 11715                           ; BSR set to: 1
 11716                           ;main.c: 551: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11717  0003C2  0E01               	movlw	high _cmdbuf
 11718  0003C4  0100               	movlb	0	; () banked
 11719  0003C6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11720  0003C8  0E04               	movlw	low _cmdbuf
 11721  0003CA  6F6D               	movwf	?_stristr& (0+255),b
 11722  0003CC  0E7E               	movlw	high STR_14
 11723  0003CE  6F70               	movwf	(?_stristr+3)& (0+255),b
 11724  0003D0  0ECC               	movlw	low STR_14
 11725  0003D2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11726  0003D4  EC1B  F026         	call	_stristr	;wreg free
 11727  0003D8  EC5F  F00A         	call	PL2	;call to abstracted procedure
 11728  0003DC  E104               	bnz	u12205
 11729  0003DE  0100               	movlb	0	; () banked
 11730  0003E0  516D               	movf	?_stristr& (0+255),w,b
 11731  0003E2  0101               	movlb	1	; () banked
 11732  0003E4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11733  0003E6                     u12205:
 11734  0003E6  E10C               	bnz	l10076
 11735                           
 11736                           ; BSR set to: 1
 11737                           ;main.c: 552: bSilent = 0;
 11738  0003E8  6B01               	clrf	_bSilent& (0+255),b
 11739                           
 11740                           ; BSR set to: 1
 11741                           ;main.c: 553: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11742  0003EA  0E40               	movlw	64
 11743  0003EC  EC80  F02B         	call	_ECANSetOperationMode
 11744                           
 11745                           ; BSR set to: 0
 11746                           ;main.c: 554: putsUSART((char *) "+OK\r\n");
 11747  0003F0  0E7F               	movlw	high STR_9
 11748  0003F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11749  0003F4  0E7F               	movlw	low STR_9
 11750  0003F6  6F61               	movwf	?_putsUSART& (0+255),b
 11751  0003F8  ECC9  F028         	call	_putsUSART	;wreg free
 11752                           
 11753                           ;main.c: 555: }
 11754  0003FC  EF4F  F00A         	goto	l10618
 11755  000400                     l10076:
 11756                           
 11757                           ; BSR set to: 1
 11758                           ;main.c: 557: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11759  000400  0E01               	movlw	high _cmdbuf
 11760  000402  0100               	movlb	0	; () banked
 11761  000404  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11762  000406  0E04               	movlw	low _cmdbuf
 11763  000408  6F6D               	movwf	?_stristr& (0+255),b
 11764  00040A  0E7F               	movlw	high STR_16
 11765  00040C  6F70               	movwf	(?_stristr+3)& (0+255),b
 11766  00040E  0E4F               	movlw	low STR_16
 11767  000410  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11768  000412  EC1B  F026         	call	_stristr	;wreg free
 11769  000416  EC5F  F00A         	call	PL2	;call to abstracted procedure
 11770  00041A  E104               	bnz	u12215
 11771  00041C  0100               	movlb	0	; () banked
 11772  00041E  516D               	movf	?_stristr& (0+255),w,b
 11773  000420  0101               	movlb	1	; () banked
 11774  000422  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11775  000424                     u12215:
 11776  000424  E10C               	bnz	l10084
 11777                           
 11778                           ; BSR set to: 1
 11779                           ;main.c: 558: bSilent = 0;
 11780  000426  6B01               	clrf	_bSilent& (0+255),b
 11781                           
 11782                           ; BSR set to: 1
 11783                           ;main.c: 559: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11784  000428  0E60               	movlw	96
 11785  00042A  EC80  F02B         	call	_ECANSetOperationMode
 11786                           
 11787                           ; BSR set to: 0
 11788                           ;main.c: 560: putsUSART((char *) "+OK\r\n");
 11789  00042E  0E7F               	movlw	high STR_9
 11790  000430  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11791  000432  0E7F               	movlw	low STR_9
 11792  000434  6F61               	movwf	?_putsUSART& (0+255),b
 11793  000436  ECC9  F028         	call	_putsUSART	;wreg free
 11794                           
 11795                           ;main.c: 561: }
 11796  00043A  EF4F  F00A         	goto	l10618
 11797  00043E                     l10084:
 11798                           
 11799                           ; BSR set to: 1
 11800                           ;main.c: 563: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 11801  00043E  0E01               	movlw	high _cmdbuf
 11802  000440  0100               	movlb	0	; () banked
 11803  000442  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11804  000444  0E04               	movlw	low _cmdbuf
 11805  000446  6F6D               	movwf	?_stristr& (0+255),b
 11806  000448  0E7F               	movlw	high STR_18
 11807  00044A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11808  00044C  0E0D               	movlw	low STR_18
 11809  00044E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11810  000450  EC1B  F026         	call	_stristr	;wreg free
 11811  000454  EC5F  F00A         	call	PL2	;call to abstracted procedure
 11812  000458  E104               	bnz	u12225
 11813  00045A  0100               	movlb	0	; () banked
 11814  00045C  516D               	movf	?_stristr& (0+255),w,b
 11815  00045E  0101               	movlb	1	; () banked
 11816  000460  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11817  000462                     u12225:
 11818  000462  E10B               	bnz	l10090
 11819                           
 11820                           ; BSR set to: 1
 11821                           ;main.c: 564: printFirmwareVersion();
 11822  000464  EC0C  F025         	call	_printFirmwareVersion	;wreg free
 11823                           
 11824                           ;main.c: 565: putsUSART((char *) "+OK\r\n");
 11825  000468  0E7F               	movlw	high STR_9
 11826  00046A  0100               	movlb	0	; () banked
 11827  00046C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11828  00046E  0E7F               	movlw	low STR_9
 11829  000470  6F61               	movwf	?_putsUSART& (0+255),b
 11830  000472  ECC9  F028         	call	_putsUSART	;wreg free
 11831                           
 11832                           ;main.c: 566: }
 11833  000476  EF4F  F00A         	goto	l10618
 11834  00047A                     l10090:
 11835                           
 11836                           ; BSR set to: 1
 11837                           ;main.c: 567: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11838  00047A  0E01               	movlw	high _cmdbuf
 11839  00047C  0100               	movlb	0	; () banked
 11840  00047E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11841  000480  0E04               	movlw	low _cmdbuf
 11842  000482  6F6D               	movwf	?_stristr& (0+255),b
 11843  000484  0E7F               	movlw	high STR_20
 11844  000486  6F70               	movwf	(?_stristr+3)& (0+255),b
 11845  000488  0E48               	movlw	low STR_20
 11846  00048A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11847  00048C  EC1B  F026         	call	_stristr	;wreg free
 11848  000490  EC5F  F00A         	call	PL2	;call to abstracted procedure
 11849  000494  E104               	bnz	u12235
 11850  000496  0100               	movlb	0	; () banked
 11851  000498  516D               	movf	?_stristr& (0+255),w,b
 11852  00049A  0101               	movlb	1	; () banked
 11853  00049C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11854  00049E                     u12235:
 11855  00049E  E169               	bnz	l10126
 11856                           
 11857                           ; BSR set to: 1
 11858                           ;main.c: 568: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 11859  0004A0  506F               	movf	3951,w,c	;volatile
 11860  0004A2  0BE0               	andlw	224
 11861  0004A4  0102               	movlb	2	; () banked
 11862  0004A6  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 11863                           
 11864                           ; BSR set to: 2
 11865                           ;main.c: 569: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 11866  0004A8  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 11867  0004AA  D00C               	goto	l10100
 11868                           
 11869                           ; BSR set to: 2
 11870  0004AC  0101               	movlb	1	; () banked
 11871  0004AE  6701               	tstfsz	_bSilent& (0+255),b
 11872  0004B0  D009               	goto	l10100
 11873                           
 11874                           ; BSR set to: 1
 11875                           ;main.c: 570: putsUSART((char *) "+OK - Normal mode\r\n");
 11876  0004B2  0E7D               	movlw	high STR_21
 11877  0004B4  0100               	movlb	0	; () banked
 11878  0004B6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11879  0004B8  0E82               	movlw	low STR_21
 11880  0004BA  6F61               	movwf	?_putsUSART& (0+255),b
 11881  0004BC  ECC9  F028         	call	_putsUSART	;wreg free
 11882                           
 11883                           ;main.c: 571: }
 11884  0004C0  EF4F  F00A         	goto	l10618
 11885  0004C4                     l10100:
 11886                           
 11887                           ;main.c: 572: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 11888  0004C4  0102               	movlb	2	; () banked
 11889  0004C6  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11890  0004C8  0E01               	movlw	1
 11891  0004CA  A4D8               	btfss	status,2,c
 11892  0004CC  0E00               	movlw	0
 11893  0004CE  0101               	movlb	1	; () banked
 11894  0004D0  1501               	andwf	_bSilent& (0+255),w,b
 11895  0004D2  E009               	bz	l10104
 11896                           
 11897                           ; BSR set to: 1
 11898                           ;main.c: 573: putsUSART((char *) "+OK - Silent mode\r\n");
 11899  0004D4  0E7D               	movlw	high STR_22
 11900  0004D6  0100               	movlb	0	; () banked
 11901  0004D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11902  0004DA  0E96               	movlw	low STR_22
 11903  0004DC  6F61               	movwf	?_putsUSART& (0+255),b
 11904  0004DE  ECC9  F028         	call	_putsUSART	;wreg free
 11905                           
 11906                           ;main.c: 574: }
 11907  0004E2  EF4F  F00A         	goto	l10618
 11908  0004E6                     l10104:
 11909                           
 11910                           ; BSR set to: 1
 11911                           ;main.c: 575: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 11912  0004E6  0102               	movlb	2	; () banked
 11913  0004E8  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11914  0004EA  0A20               	xorlw	32
 11915  0004EC  E109               	bnz	l10108
 11916                           
 11917                           ; BSR set to: 2
 11918                           ;main.c: 576: putsUSART((char *) "+OK - Sleep mode\r\n");
 11919  0004EE  0E7D               	movlw	high STR_23
 11920  0004F0  0100               	movlb	0	; () banked
 11921  0004F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11922  0004F4  0ED2               	movlw	low STR_23
 11923  0004F6  6F61               	movwf	?_putsUSART& (0+255),b
 11924  0004F8  ECC9  F028         	call	_putsUSART	;wreg free
 11925                           
 11926                           ;main.c: 577: }
 11927  0004FC  EF4F  F00A         	goto	l10618
 11928  000500                     l10108:
 11929                           
 11930                           ; BSR set to: 2
 11931                           ;main.c: 578: else if (ECAN_OP_MODE_LOOP == ifmode) {
 11932  000500  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11933  000502  0A40               	xorlw	64
 11934  000504  E109               	bnz	l10112
 11935                           
 11936                           ; BSR set to: 2
 11937                           ;main.c: 579: putsUSART((char *) "+OK - Loopback mode\r\n");
 11938  000506  0E7D               	movlw	high STR_24
 11939  000508  0100               	movlb	0	; () banked
 11940  00050A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11941  00050C  0E05               	movlw	low STR_24
 11942  00050E  6F61               	movwf	?_putsUSART& (0+255),b
 11943  000510  ECC9  F028         	call	_putsUSART	;wreg free
 11944                           
 11945                           ;main.c: 580: }
 11946  000514  EF4F  F00A         	goto	l10618
 11947  000518                     l10112:
 11948                           
 11949                           ; BSR set to: 2
 11950                           ;main.c: 581: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 11951  000518  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11952  00051A  0A60               	xorlw	96
 11953  00051C  E109               	bnz	l10116
 11954                           
 11955                           ; BSR set to: 2
 11956                           ;main.c: 582: putsUSART((char *) "+OK - Listen only mode\r\n");
 11957  00051E  0E7B               	movlw	high STR_25
 11958  000520  0100               	movlb	0	; () banked
 11959  000522  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11960  000524  0ECE               	movlw	low STR_25
 11961  000526  6F61               	movwf	?_putsUSART& (0+255),b
 11962  000528  ECC9  F028         	call	_putsUSART	;wreg free
 11963                           
 11964                           ;main.c: 583: }
 11965  00052C  EF4F  F00A         	goto	l10618
 11966  000530                     l10116:
 11967                           
 11968                           ; BSR set to: 2
 11969                           ;main.c: 584: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 11970  000530  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11971  000532  0A80               	xorlw	128
 11972  000534  E109               	bnz	l10120
 11973                           
 11974                           ; BSR set to: 2
 11975                           ;main.c: 585: putsUSART((char *) "+OK - Closed mode\r\n");
 11976  000536  0E7D               	movlw	high STR_26
 11977  000538  0100               	movlb	0	; () banked
 11978  00053A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11979  00053C  0E6E               	movlw	low STR_26
 11980  00053E  6F61               	movwf	?_putsUSART& (0+255),b
 11981  000540  ECC9  F028         	call	_putsUSART	;wreg free
 11982                           
 11983                           ;main.c: 586: }
 11984  000544  EF4F  F00A         	goto	l10618
 11985  000548                     l10120:
 11986                           
 11987                           ; BSR set to: 2
 11988                           ;main.c: 587: else if (ECAN_OP_MODE_BITS == ifmode) {
 11989  000548  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11990  00054A  0AE0               	xorlw	224
 11991  00054C  E109               	bnz	l10124
 11992                           
 11993                           ; BSR set to: 2
 11994                           ;main.c: 588: putsUSART((char *) "+OK - Bits mode\r\n");
 11995  00054E  0E7D               	movlw	high STR_27
 11996  000550  0100               	movlb	0	; () banked
 11997  000552  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11998  000554  0EE5               	movlw	low STR_27
 11999  000556  6F61               	movwf	?_putsUSART& (0+255),b
 12000  000558  ECC9  F028         	call	_putsUSART	;wreg free
 12001                           
 12002                           ;main.c: 589: }
 12003  00055C  EF4F  F00A         	goto	l10618
 12004  000560                     l10124:
 12005                           
 12006                           ; BSR set to: 2
 12007                           ;main.c: 590: else {
 12008                           ;main.c: 591: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12009  000560  0E7C               	movlw	high STR_28
 12010  000562  0100               	movlb	0	; () banked
 12011  000564  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12012  000566  0E48               	movlw	low STR_28
 12013  000568  6F61               	movwf	?_putsUSART& (0+255),b
 12014  00056A  ECC9  F028         	call	_putsUSART	;wreg free
 12015  00056E  EF4F  F00A         	goto	l10618
 12016  000572                     l10126:
 12017                           
 12018                           ; BSR set to: 1
 12019                           ;main.c: 596: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12020  000572  0E01               	movlw	high _cmdbuf
 12021  000574  0100               	movlb	0	; () banked
 12022  000576  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12023  000578  0E04               	movlw	low _cmdbuf
 12024  00057A  6F6D               	movwf	?_stristr& (0+255),b
 12025  00057C  0E7F               	movlw	high STR_29
 12026  00057E  6F70               	movwf	(?_stristr+3)& (0+255),b
 12027  000580  0EEA               	movlw	low STR_29
 12028  000582  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12029  000584  EC1B  F026         	call	_stristr	;wreg free
 12030  000588  EC5F  F00A         	call	PL2	;call to abstracted procedure
 12031  00058C  E104               	bnz	u12335
 12032  00058E  0100               	movlb	0	; () banked
 12033  000590  516D               	movf	?_stristr& (0+255),w,b
 12034  000592  0101               	movlb	1	; () banked
 12035  000594  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12036  000596                     u12335:
 12037  000596  E001 D0D9          	bnz	l10180
 12038                           
 12039                           ; BSR set to: 1
 12040                           ;main.c: 598: char *p = strtok(cmdbuf, ",");
 12041  00059A  ECC2  F00A         	call	PL30	;call to abstracted procedure
 12042  00059E  ECC3  F024         	call	_strtok	;wreg free
 12043  0005A2  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12044  0005A6  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12045                           
 12046                           ; BSR set to: 0
 12047                           ;main.c: 601: vscpPriority = 3;
 12048  0005AA  0E03               	movlw	3
 12049  0005AC  0101               	movlb	1	; () banked
 12050  0005AE  6FAF               	movwf	_vscpPriority& (0+255),b
 12051                           
 12052                           ; BSR set to: 1
 12053                           ;main.c: 602: if ((0) != p) {
 12054  0005B0  0102               	movlb	2	; () banked
 12055  0005B2  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12056  0005B4  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12057  0005B6  E009               	bz	l10136
 12058                           
 12059                           ; BSR set to: 2
 12060                           ;main.c: 603: vscpPriority = atoi(p);
 12061  0005B8  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12062  0005BC  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12063  0005C0  EC59  F01D         	call	_atoi	;wreg free
 12064  0005C4  5166               	movf	?_atoi& (0+255),w,b
 12065  0005C6  0101               	movlb	1	; () banked
 12066  0005C8  6FAF               	movwf	_vscpPriority& (0+255),b
 12067  0005CA                     l10136:
 12068                           
 12069                           ;main.c: 604: }
 12070                           ;main.c: 607: vscpClass = 0;
 12071  0005CA  0101               	movlb	1	; () banked
 12072  0005CC  6BAC               	clrf	_vscpClass& (0+255),b
 12073  0005CE  6BAD               	clrf	(_vscpClass+1)& (0+255),b
 12074                           
 12075                           ; BSR set to: 1
 12076                           ;main.c: 608: if ((0) != (p = strtok((0), ","))) {
 12077  0005D0  EC69  F00A         	call	PL4	;call to abstracted procedure
 12078  0005D4  ECC3  F024         	call	_strtok	;wreg free
 12079  0005D8  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12080  0005DC  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12081  0005E0  0102               	movlb	2	; () banked
 12082  0005E2  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12083  0005E4  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12084  0005E6  E00A               	bz	l10142
 12085                           
 12086                           ; BSR set to: 2
 12087                           ;main.c: 609: vscpClass = atoi(p);
 12088  0005E8  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12089  0005EC  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12090  0005F0  EC59  F01D         	call	_atoi	;wreg free
 12091  0005F4  C066  F1AC         	movff	?_atoi,_vscpClass
 12092  0005F8  C067  F1AD         	movff	?_atoi+1,_vscpClass+1
 12093  0005FC                     l10142:
 12094                           
 12095                           ;main.c: 610: }
 12096                           ;main.c: 613: vscpType = 0;
 12097  0005FC  0101               	movlb	1	; () banked
 12098  0005FE  6BB1               	clrf	_vscpType& (0+255),b
 12099                           
 12100                           ; BSR set to: 1
 12101                           ;main.c: 614: if ((0) != (p = strtok((0), ","))) {
 12102  000600  EC69  F00A         	call	PL4	;call to abstracted procedure
 12103  000604  ECC3  F024         	call	_strtok	;wreg free
 12104  000608  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12105  00060C  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12106  000610  0102               	movlb	2	; () banked
 12107  000612  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12108  000614  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12109  000616  E009               	bz	l10148
 12110                           
 12111                           ; BSR set to: 2
 12112                           ;main.c: 615: vscpType = atoi(p);
 12113  000618  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12114  00061C  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12115  000620  EC59  F01D         	call	_atoi	;wreg free
 12116  000624  5166               	movf	?_atoi& (0+255),w,b
 12117  000626  0101               	movlb	1	; () banked
 12118  000628  6FB1               	movwf	_vscpType& (0+255),b
 12119  00062A                     l10148:
 12120                           
 12121                           ;main.c: 616: }
 12122                           ;main.c: 619: vscpNodeId = 0;
 12123  00062A  0101               	movlb	1	; () banked
 12124  00062C  6BAE               	clrf	_vscpNodeId& (0+255),b
 12125                           
 12126                           ; BSR set to: 1
 12127                           ;main.c: 620: if ((0) != (p = strtok((0), ","))) {
 12128  00062E  EC69  F00A         	call	PL4	;call to abstracted procedure
 12129  000632  ECC3  F024         	call	_strtok	;wreg free
 12130  000636  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12131  00063A  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12132  00063E  0102               	movlb	2	; () banked
 12133  000640  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12134  000642  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12135  000644  E009               	bz	l10154
 12136                           
 12137                           ; BSR set to: 2
 12138                           ;main.c: 621: vscpNodeId = atoi(p);
 12139  000646  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12140  00064A  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12141  00064E  EC59  F01D         	call	_atoi	;wreg free
 12142  000652  5166               	movf	?_atoi& (0+255),w,b
 12143  000654  0101               	movlb	1	; () banked
 12144  000656  6FAE               	movwf	_vscpNodeId& (0+255),b
 12145  000658                     l10154:
 12146                           
 12147                           ;main.c: 622: }
 12148                           ;main.c: 625: vscpSize = 0;
 12149  000658  0101               	movlb	1	; () banked
 12150  00065A  6BB0               	clrf	_vscpSize& (0+255),b
 12151                           
 12152                           ; BSR set to: 1
 12153                           ;main.c: 626: if ((0) != (p = strtok((0), ","))) {
 12154  00065C  EC69  F00A         	call	PL4	;call to abstracted procedure
 12155  000660  ECC3  F024         	call	_strtok	;wreg free
 12156  000664  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12157  000668  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12158  00066C  0102               	movlb	2	; () banked
 12159  00066E  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12160  000670  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12161  000672  E009               	bz	l10160
 12162                           
 12163                           ; BSR set to: 2
 12164                           ;main.c: 627: vscpSize = atoi(p);
 12165  000674  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12166  000678  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12167  00067C  EC59  F01D         	call	_atoi	;wreg free
 12168  000680  5166               	movf	?_atoi& (0+255),w,b
 12169  000682  0101               	movlb	1	; () banked
 12170  000684  6FB0               	movwf	_vscpSize& (0+255),b
 12171  000686                     l10160:
 12172                           
 12173                           ;main.c: 628: }
 12174                           ;main.c: 630: memset(vscpData, 0, 8);
 12175  000686  0E01               	movlw	high _vscpData
 12176  000688  0100               	movlb	0	; () banked
 12177  00068A  6F61               	movwf	(?_memset+1)& (0+255),b
 12178  00068C  0EA4               	movlw	low _vscpData
 12179  00068E  6F60               	movwf	?_memset& (0+255),b
 12180  000690  6B63               	clrf	(?_memset+3)& (0+255),b
 12181  000692  6B62               	clrf	(?_memset+2)& (0+255),b
 12182  000694  6B65               	clrf	(?_memset+5)& (0+255),b
 12183  000696  0E08               	movlw	8
 12184  000698  6F64               	movwf	(?_memset+4)& (0+255),b
 12185  00069A  EC28  F02B         	call	_memset	;wreg free
 12186                           
 12187                           ; BSR set to: 0
 12188                           ;main.c: 631: for (i = 0; i < vscpSize; i++) {
 12189  00069E  0102               	movlb	2	; () banked
 12190  0006A0  6BAA               	clrf	doModeVerbose@i& (0+255),b
 12191  0006A2  D01D               	goto	l10170
 12192  0006A4                     l10164:
 12193                           
 12194                           ; BSR set to: 2
 12195                           ;main.c: 632: if ((0) != (p = strtok((0), ","))) {
 12196  0006A4  EC69  F00A         	call	PL4	;call to abstracted procedure
 12197  0006A8  ECC3  F024         	call	_strtok	;wreg free
 12198  0006AC  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12199  0006B0  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12200  0006B4  0102               	movlb	2	; () banked
 12201  0006B6  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12202  0006B8  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12203  0006BA  E016               	bz	l10172
 12204                           
 12205                           ; BSR set to: 2
 12206                           ;main.c: 633: vscpData[ i ] = atoi(p);
 12207  0006BC  0EA4               	movlw	low _vscpData
 12208  0006BE  25AA               	addwf	doModeVerbose@i& (0+255),w,b
 12209  0006C0  6ED9               	movwf	fsr2l,c
 12210  0006C2  6ADA               	clrf	fsr2h,c
 12211  0006C4  0101               	movlb	1	; () banked
 12212  0006C6  0E01               	movlw	high _vscpData
 12213  0006C8  22DA               	addwfc	fsr2h,f,c
 12214  0006CA  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12215  0006CE  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12216  0006D2  EC59  F01D         	call	_atoi	;wreg free
 12217  0006D6  5166               	movf	?_atoi& (0+255),w,b
 12218  0006D8  6EDF               	movwf	indf2,c
 12219                           
 12220                           ; BSR set to: 0
 12221                           
 12222                           ;main.c: 634: } else {
 12223  0006DA  0102               	movlb	2	; () banked
 12224  0006DC  2BAA               	incf	doModeVerbose@i& (0+255),f,b
 12225  0006DE                     l10170:
 12226                           
 12227                           ; BSR set to: 2
 12228  0006DE  0101               	movlb	1	; () banked
 12229  0006E0  51B0               	movf	_vscpSize& (0+255),w,b
 12230  0006E2  0102               	movlb	2	; () banked
 12231  0006E4  5DAA               	subwf	doModeVerbose@i& (0+255),w,b
 12232  0006E6  E3DE               	bnc	l10164
 12233  0006E8                     l10172:
 12234                           
 12235                           ; BSR set to: 2
 12236                           ;main.c: 636: }
 12237                           ;main.c: 637: }
 12238                           ;main.c: 639: if ( sendVSCPFrame(vscpClass,
 12239                           ;main.c: 640: vscpType,
 12240                           ;main.c: 641: vscpNodeId,
 12241                           ;main.c: 642: vscpPriority,
 12242                           ;main.c: 643: vscpSize,
 12243                           ;main.c: 644: vscpData ) ) {
 12244  0006E8  C1AC  F096         	movff	_vscpClass,?_sendVSCPFrame
 12245  0006EC  C1AD  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12246  0006F0  C1B1  F098         	movff	_vscpType,?_sendVSCPFrame+2
 12247  0006F4  C1AE  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12248  0006F8  C1AF  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 12249  0006FC  C1B0  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 12250  000700  0E01               	movlw	high _vscpData
 12251  000702  0100               	movlb	0	; () banked
 12252  000704  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12253  000706  0EA4               	movlw	low _vscpData
 12254  000708  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12255  00070A  EC90  F022         	call	_sendVSCPFrame	;wreg free
 12256  00070E  0900               	iorlw	0
 12257  000710  E015               	bz	l10178
 12258                           
 12259                           ; BSR set to: 0
 12260                           ;main.c: 646: cntTxFrames++;
 12261  000712  2BE1               	incf	_cntTxFrames& (0+255),f,b
 12262  000714  0E00               	movlw	0
 12263  000716  23E2               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12264  000718  23E3               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12265  00071A  23E4               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12266                           
 12267                           ;main.c: 647: cntTxBytes += vscpSize;
 12268  00071C  0101               	movlb	1	; () banked
 12269  00071E  51B0               	movf	_vscpSize& (0+255),w,b
 12270  000720  0100               	movlb	0	; () banked
 12271  000722  27DD               	addwf	_cntTxBytes& (0+255),f,b
 12272  000724  0E00               	movlw	0
 12273  000726  23DE               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12274  000728  23DF               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12275  00072A  23E0               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12276                           
 12277                           ; BSR set to: 0
 12278                           ;main.c: 648: putsUSART((char *) "+OK\r\n");
 12279  00072C  0E7F               	movlw	high STR_9
 12280  00072E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12281  000730  0E7F               	movlw	low STR_9
 12282  000732  6F61               	movwf	?_putsUSART& (0+255),b
 12283  000734  ECC9  F028         	call	_putsUSART	;wreg free
 12284                           
 12285                           ;main.c: 649: }
 12286  000738  EF4F  F00A         	goto	l10618
 12287  00073C                     l10178:
 12288                           
 12289                           ; BSR set to: 0
 12290                           ;main.c: 650: else {
 12291                           ;main.c: 651: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12292  00073C  0E7A               	movlw	high STR_37
 12293  00073E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12294  000740  0E48               	movlw	low STR_37
 12295  000742  6F61               	movwf	?_putsUSART& (0+255),b
 12296  000744  ECC9  F028         	call	_putsUSART	;wreg free
 12297  000748  EF4F  F00A         	goto	l10618
 12298  00074C                     l10180:
 12299                           
 12300                           ; BSR set to: 1
 12301                           ;main.c: 655: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12302  00074C  0E01               	movlw	high _cmdbuf
 12303  00074E  0100               	movlb	0	; () banked
 12304  000750  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12305  000752  0E04               	movlw	low _cmdbuf
 12306  000754  6F6D               	movwf	?_stristr& (0+255),b
 12307  000756  0E7F               	movlw	high STR_38
 12308  000758  6F70               	movwf	(?_stristr+3)& (0+255),b
 12309  00075A  0EE7               	movlw	low STR_38
 12310  00075C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12311  00075E  EC1B  F026         	call	_stristr	;wreg free
 12312  000762  EC5F  F00A         	call	PL2	;call to abstracted procedure
 12313  000766  E104               	bnz	u12425
 12314  000768  0100               	movlb	0	; () banked
 12315  00076A  516D               	movf	?_stristr& (0+255),w,b
 12316  00076C  0101               	movlb	1	; () banked
 12317  00076E  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12318  000770                     u12425:
 12319  000770  E116               	bnz	l10188
 12320                           
 12321                           ; BSR set to: 1
 12322                           ;main.c: 656: if (receivePrintEventVerbose()) {
 12323  000772  ECC9  F011         	call	_receivePrintEventVerbose	;wreg free
 12324  000776  0900               	iorlw	0
 12325  000778  E009               	bz	l10186
 12326                           
 12327                           ;main.c: 657: putsUSART((char *) "+OK\r\n");
 12328  00077A  0E7F               	movlw	high STR_9
 12329  00077C  0100               	movlb	0	; () banked
 12330  00077E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12331  000780  0E7F               	movlw	low STR_9
 12332  000782  6F61               	movwf	?_putsUSART& (0+255),b
 12333  000784  ECC9  F028         	call	_putsUSART	;wreg free
 12334                           
 12335                           ;main.c: 658: }
 12336  000788  EF4F  F00A         	goto	l10618
 12337  00078C                     l10186:
 12338                           
 12339                           ;main.c: 659: else {
 12340                           ;main.c: 660: putsUSART((char *) "+OK - no events\r\n");
 12341  00078C  0E7D               	movlw	high STR_40
 12342  00078E  0100               	movlb	0	; () banked
 12343  000790  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12344  000792  0EF7               	movlw	low STR_40
 12345  000794  6F61               	movwf	?_putsUSART& (0+255),b
 12346  000796  ECC9  F028         	call	_putsUSART	;wreg free
 12347  00079A  EF4F  F00A         	goto	l10618
 12348  00079E                     l10188:
 12349                           
 12350                           ; BSR set to: 1
 12351                           ;main.c: 664: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12352  00079E  0E01               	movlw	high _cmdbuf
 12353  0007A0  0100               	movlb	0	; () banked
 12354  0007A2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12355  0007A4  0E04               	movlw	low _cmdbuf
 12356  0007A6  6F6D               	movwf	?_stristr& (0+255),b
 12357  0007A8  0E7F               	movlw	high STR_41
 12358  0007AA  6F70               	movwf	(?_stristr+3)& (0+255),b
 12359  0007AC  0ECA               	movlw	low STR_41
 12360  0007AE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12361  0007B0  EC1B  F026         	call	_stristr	;wreg free
 12362  0007B4  EC5F  F00A         	call	PL2	;call to abstracted procedure
 12363  0007B8  E104               	bnz	u12445
 12364  0007BA  0100               	movlb	0	; () banked
 12365  0007BC  516D               	movf	?_stristr& (0+255),w,b
 12366  0007BE  0101               	movlb	1	; () banked
 12367  0007C0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12368  0007C2                     u12445:
 12369  0007C2  E104               	bnz	l10192
 12370                           
 12371                           ; BSR set to: 1
 12372                           ;main.c: 665: printStatistics();
 12373  0007C4  ECDE  F016         	call	_printStatistics	;wreg free
 12374                           
 12375                           ;main.c: 666: }
 12376  0007C8  EF4F  F00A         	goto	l10618
 12377  0007CC                     l10192:
 12378                           
 12379                           ; BSR set to: 1
 12380                           ;main.c: 668: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12381  0007CC  0E01               	movlw	high _cmdbuf
 12382  0007CE  0100               	movlb	0	; () banked
 12383  0007D0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12384  0007D2  0E04               	movlw	low _cmdbuf
 12385  0007D4  6F6D               	movwf	?_stristr& (0+255),b
 12386  0007D6  0E7F               	movlw	high STR_42
 12387  0007D8  6F70               	movwf	(?_stristr+3)& (0+255),b
 12388  0007DA  0ED8               	movlw	low STR_42
 12389  0007DC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12390  0007DE  EC1B  F026         	call	_stristr	;wreg free
 12391  0007E2  EC5F  F00A         	call	PL2	;call to abstracted procedure
 12392  0007E6  E104               	bnz	u12455
 12393  0007E8  0100               	movlb	0	; () banked
 12394  0007EA  516D               	movf	?_stristr& (0+255),w,b
 12395  0007EC  0101               	movlb	1	; () banked
 12396  0007EE  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12397  0007F0                     u12455:
 12398  0007F0  E104               	bnz	l10196
 12399                           
 12400                           ; BSR set to: 1
 12401                           ;main.c: 669: printErrors();
 12402  0007F2  EC5E  F010         	call	_printErrors	;wreg free
 12403                           
 12404                           ;main.c: 670: }
 12405  0007F6  EF4F  F00A         	goto	l10618
 12406  0007FA                     l10196:
 12407                           
 12408                           ; BSR set to: 1
 12409                           ;main.c: 672: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12410  0007FA  0E01               	movlw	high _cmdbuf
 12411  0007FC  0100               	movlb	0	; () banked
 12412  0007FE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12413  000800  0E04               	movlw	low _cmdbuf
 12414  000802  6F6D               	movwf	?_stristr& (0+255),b
 12415  000804  0E7F               	movlw	high STR_43
 12416  000806  6F70               	movwf	(?_stristr+3)& (0+255),b
 12417  000808  0EC5               	movlw	low STR_43
 12418  00080A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12419  00080C  EC1B  F026         	call	_stristr	;wreg free
 12420  000810  EC5F  F00A         	call	PL2	;call to abstracted procedure
 12421  000814  E104               	bnz	u12465
 12422  000816  0100               	movlb	0	; () banked
 12423  000818  516D               	movf	?_stristr& (0+255),w,b
 12424  00081A  0101               	movlb	1	; () banked
 12425  00081C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12426  00081E                     u12465:
 12427  00081E  E10B               	bnz	l10200
 12428                           
 12429                           ; BSR set to: 1
 12430                           ;main.c: 673: printHelp();
 12431  000820  ECFE  F015         	call	_printHelp	;wreg free
 12432                           
 12433                           ;main.c: 674: putsUSART((char *) "+OK\r\n");
 12434  000824  0E7F               	movlw	high STR_9
 12435  000826  0100               	movlb	0	; () banked
 12436  000828  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12437  00082A  0E7F               	movlw	low STR_9
 12438  00082C  6F61               	movwf	?_putsUSART& (0+255),b
 12439  00082E  ECC9  F028         	call	_putsUSART	;wreg free
 12440                           
 12441                           ;main.c: 675: }
 12442  000832  EF4F  F00A         	goto	l10618
 12443  000836                     l10200:
 12444                           
 12445                           ; BSR set to: 1
 12446                           ;main.c: 677: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12447  000836  0E01               	movlw	high _cmdbuf
 12448  000838  0100               	movlb	0	; () banked
 12449  00083A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12450  00083C  0E04               	movlw	low _cmdbuf
 12451  00083E  6F6D               	movwf	?_stristr& (0+255),b
 12452  000840  0E7F               	movlw	high STR_45
 12453  000842  6F70               	movwf	(?_stristr+3)& (0+255),b
 12454  000844  0EA2               	movlw	low STR_45
 12455  000846  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12456  000848  EC1B  F026         	call	_stristr	;wreg free
 12457  00084C  EC5F  F00A         	call	PL2	;call to abstracted procedure
 12458  000850  E104               	bnz	u12475
 12459  000852  0100               	movlb	0	; () banked
 12460  000854  516D               	movf	?_stristr& (0+255),w,b
 12461  000856  0101               	movlb	1	; () banked
 12462  000858  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12463  00085A                     u12475:
 12464  00085A  E104               	bnz	l10204
 12465                           
 12466                           ; BSR set to: 1
 12467                           ;main.c: 678: findNodes();
 12468  00085C  ECDC  F01E         	call	_findNodes	;wreg free
 12469                           
 12470                           ;main.c: 679: }
 12471  000860  EF4F  F00A         	goto	l10618
 12472  000864                     l10204:
 12473                           
 12474                           ; BSR set to: 1
 12475                           ;main.c: 682: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12476  000864  0E01               	movlw	high _cmdbuf
 12477  000866  0100               	movlb	0	; () banked
 12478  000868  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12479  00086A  0E04               	movlw	low _cmdbuf
 12480  00086C  6F6D               	movwf	?_stristr& (0+255),b
 12481  00086E  0E7F               	movlw	high STR_46
 12482  000870  6F70               	movwf	(?_stristr+3)& (0+255),b
 12483  000872  0EA7               	movlw	low STR_46
 12484  000874  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12485  000876  EC1B  F026         	call	_stristr	;wreg free
 12486  00087A  EC5F  F00A         	call	PL2	;call to abstracted procedure
 12487  00087E  E104               	bnz	u12485
 12488  000880  0100               	movlb	0	; () banked
 12489  000882  516D               	movf	?_stristr& (0+255),w,b
 12490  000884  0101               	movlb	1	; () banked
 12491  000886  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12492  000888                     u12485:
 12493  000888  E001 D1B4          	bnz	l10334
 12494                           
 12495                           ; BSR set to: 1
 12496                           ;main.c: 684: uint8_t i;
 12497                           ;main.c: 685: uint8_t nodeid;
 12498                           ;main.c: 686: uint8_t page = 0;
 12499  00088C  0102               	movlb	2	; () banked
 12500  00088E  6BAD               	clrf	doModeVerbose@page& (0+255),b
 12501                           
 12502                           ; BSR set to: 2
 12503                           ;main.c: 687: uint8_t reg;
 12504                           ;main.c: 688: uint8_t value;
 12505                           ;main.c: 689: uint8_t count = 1;
 12506  000890  0E01               	movlw	1
 12507  000892  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12508                           
 12509                           ; BSR set to: 2
 12510                           ;main.c: 691: strcpy(cmdbuf, cmdbuf + 5);
 12511  000894  EC78  F00A         	call	PL8	;call to abstracted procedure
 12512  000898  ECF9  F02A         	call	_strcpy	;wreg free
 12513                           
 12514                           ;main.c: 692: char *p = strtok(cmdbuf, " ");
 12515  00089C  0E01               	movlw	high _cmdbuf
 12516  00089E  ECCC  F00A         	call	PL36	;call to abstracted procedure
 12517  0008A2  ECC3  F024         	call	_strtok	;wreg free
 12518  0008A6  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1109
 12519  0008AA  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1109+1
 12520                           
 12521                           ; BSR set to: 0
 12522                           ;main.c: 693: if ((0) != p) {
 12523  0008AE  0102               	movlb	2	; () banked
 12524  0008B0  51B3               	movf	(doModeVerbose@p_1109+1)& (0+255),w,b
 12525  0008B2  11B2               	iorwf	doModeVerbose@p_1109& (0+255),w,b
 12526  0008B4  E00A               	bz	l10218
 12527                           
 12528                           ; BSR set to: 2
 12529                           ;main.c: 694: nodeid = atoi(p);
 12530  0008B6  C2B2  F066         	movff	doModeVerbose@p_1109,?_atoi
 12531  0008BA  C2B3  F067         	movff	doModeVerbose@p_1109+1,?_atoi+1
 12532  0008BE  EC59  F01D         	call	_atoi	;wreg free
 12533  0008C2  5166               	movf	?_atoi& (0+255),w,b
 12534  0008C4  0102               	movlb	2	; () banked
 12535  0008C6  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 12536                           
 12537                           ;main.c: 695: } else {
 12538  0008C8  D009               	goto	l10222
 12539  0008CA                     l10218:
 12540                           
 12541                           ; BSR set to: 2
 12542                           ;main.c: 696: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12543  0008CA  0E7C               	movlw	high STR_48
 12544  0008CC  0100               	movlb	0	; () banked
 12545  0008CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12546  0008D0  0E30               	movlw	low STR_48
 12547  0008D2  6F61               	movwf	?_putsUSART& (0+255),b
 12548  0008D4  ECC9  F028         	call	_putsUSART	;wreg free
 12549  0008D8  EF5E  F00A         	goto	l524
 12550  0008DC                     l10222:
 12551                           
 12552                           ; BSR set to: 2
 12553                           ;main.c: 698: }
 12554                           ;main.c: 700: if ((0) != (p = strtok((0), " "))) {
 12555  0008DC  ECBA  F00A         	call	PL28	;call to abstracted procedure
 12556  0008E0  ECC3  F024         	call	_strtok	;wreg free
 12557  0008E4  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1109
 12558  0008E8  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1109+1
 12559  0008EC  0102               	movlb	2	; () banked
 12560  0008EE  51B3               	movf	(doModeVerbose@p_1109+1)& (0+255),w,b
 12561  0008F0  11B2               	iorwf	doModeVerbose@p_1109& (0+255),w,b
 12562  0008F2  E034               	bz	l10230
 12563                           
 12564                           ; BSR set to: 2
 12565                           ;main.c: 702: char *preg;
 12566                           ;main.c: 703: if (preg = strchr(p, ':')) {
 12567  0008F4  C2B2  F060         	movff	doModeVerbose@p_1109,?_strchr
 12568  0008F8  C2B3  F061         	movff	doModeVerbose@p_1109+1,?_strchr+1
 12569  0008FC  0100               	movlb	0	; () banked
 12570  0008FE  6B63               	clrf	(?_strchr+3)& (0+255),b
 12571  000900  0E3A               	movlw	58
 12572  000902  6F62               	movwf	(?_strchr+2)& (0+255),b
 12573  000904  ECDD  F027         	call	_strchr	;wreg free
 12574  000908  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12575  00090C  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12576  000910  0102               	movlb	2	; () banked
 12577  000912  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12578  000914  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12579  000916  E018               	bz	l10228
 12580                           
 12581                           ; BSR set to: 2
 12582                           ;main.c: 704: page = atoi(p);
 12583  000918  C2B2  F066         	movff	doModeVerbose@p_1109,?_atoi
 12584  00091C  C2B3  F067         	movff	doModeVerbose@p_1109+1,?_atoi+1
 12585  000920  EC59  F01D         	call	_atoi	;wreg free
 12586  000924  5166               	movf	?_atoi& (0+255),w,b
 12587  000926  0102               	movlb	2	; () banked
 12588  000928  6FAD               	movwf	doModeVerbose@page& (0+255),b
 12589                           
 12590                           ;main.c: 705: reg = atoi(preg + 1);
 12591  00092A  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12592  00092C  0101               	movlb	1	; () banked
 12593  00092E  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12594  000930  0E00               	movlw	0
 12595  000932  0102               	movlb	2	; () banked
 12596  000934  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12597  000936  0101               	movlb	1	; () banked
 12598  000938  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12599  00093A  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 12600  00093E  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12601  000942  EC59  F01D         	call	_atoi	;wreg free
 12602  000946  D006               	goto	L5
 12603  000948                     l10228:
 12604                           
 12605                           ; BSR set to: 2
 12606                           ;main.c: 707: reg = atoi(p);
 12607  000948  C2B2  F066         	movff	doModeVerbose@p_1109,?_atoi
 12608  00094C  C2B3  F067         	movff	doModeVerbose@p_1109+1,?_atoi+1
 12609  000950  EC59  F01D         	call	_atoi	;wreg free
 12610  000954                     L5:
 12611  000954  5166               	movf	?_atoi& (0+255),w,b
 12612  000956  0102               	movlb	2	; () banked
 12613  000958  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 12614  00095A  D009               	goto	l10234
 12615  00095C                     l10230:
 12616                           
 12617                           ; BSR set to: 2
 12618                           ;main.c: 712: else {
 12619                           ;main.c: 713: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12620  00095C  0E7A               	movlw	high STR_50
 12621  00095E  0100               	movlb	0	; () banked
 12622  000960  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12623  000962  0EAB               	movlw	low STR_50
 12624  000964  6F61               	movwf	?_putsUSART& (0+255),b
 12625  000966  ECC9  F028         	call	_putsUSART	;wreg free
 12626  00096A  EF5E  F00A         	goto	l524
 12627  00096E                     l10234:
 12628                           
 12629                           ; BSR set to: 2
 12630                           ;main.c: 715: }
 12631                           ;main.c: 718: if ((0) != (p = strtok((0), " "))) {
 12632  00096E  ECBA  F00A         	call	PL28	;call to abstracted procedure
 12633  000972  ECC3  F024         	call	_strtok	;wreg free
 12634  000976  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1109
 12635  00097A  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1109+1
 12636  00097E  0102               	movlb	2	; () banked
 12637  000980  51B3               	movf	(doModeVerbose@p_1109+1)& (0+255),w,b
 12638  000982  11B2               	iorwf	doModeVerbose@p_1109& (0+255),w,b
 12639  000984  E00D               	bz	l529
 12640                           
 12641                           ; BSR set to: 2
 12642                           ;main.c: 719: count = atoi(p);
 12643  000986  C2B2  F066         	movff	doModeVerbose@p_1109,?_atoi
 12644  00098A  C2B3  F067         	movff	doModeVerbose@p_1109+1,?_atoi+1
 12645  00098E  EC59  F01D         	call	_atoi	;wreg free
 12646  000992  5166               	movf	?_atoi& (0+255),w,b
 12647  000994  0102               	movlb	2	; () banked
 12648  000996  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12649                           
 12650                           ; BSR set to: 2
 12651                           ;main.c: 720: if (0 == count) count = 1;
 12652  000998  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 12653  00099A  D002               	goto	l529
 12654                           
 12655                           ; BSR set to: 2
 12656  00099C  0E01               	movlw	1
 12657  00099E  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12658  0009A0                     l529:
 12659                           
 12660                           ; BSR set to: 2
 12661                           ;main.c: 721: }
 12662                           ;main.c: 723: BOOL rv = 1;
 12663  0009A0  0E01               	movlw	1
 12664  0009A2  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 12665                           
 12666                           ; BSR set to: 2
 12667                           ;main.c: 724: for (i = 0; i < count; i++) {
 12668  0009A4  6BB0               	clrf	doModeVerbose@i_1103& (0+255),b
 12669  0009A6  D10E               	goto	l10326
 12670  0009A8                     l10244:
 12671                           
 12672                           ; BSR set to: 2
 12673                           ;main.c: 726: if (readRegisterExtended(nodeid,
 12674                           ;main.c: 727: page,
 12675                           ;main.c: 728: (reg + i) & 0xff,
 12676                           ;main.c: 729: rwtimeout,
 12677                           ;main.c: 730: &value)) {
 12678  0009A8  0100               	movlb	0	; () banked
 12679  0009AA  C2AD  F0B6         	movff	doModeVerbose@page,?_readRegisterExtended
 12680  0009AE  6BB7               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12681  0009B0  0102               	movlb	2	; () banked
 12682  0009B2  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 12683  0009B4  25B0               	addwf	doModeVerbose@i_1103& (0+255),w,b
 12684  0009B6  0100               	movlb	0	; () banked
 12685  0009B8  6FB8               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12686  0009BA  C103  F0B9         	movff	_rwtimeout,?_readRegisterExtended+3
 12687  0009BE  6BBA               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12688  0009C0  0E02               	movlw	high doModeVerbose@value
 12689  0009C2  6FBC               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12690  0009C4  0EB1               	movlw	low doModeVerbose@value
 12691  0009C6  6FBB               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12692  0009C8  0102               	movlb	2	; () banked
 12693  0009CA  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 12694  0009CC  EC5E  F01E         	call	_readRegisterExtended
 12695  0009D0  0900               	iorlw	0
 12696  0009D2  E101 D09D          	bz	l533
 12697                           
 12698                           ;main.c: 731: putsUSART((char *) "Value for reg ");
 12699  0009D6  0E7E               	movlw	high STR_52
 12700  0009D8  0100               	movlb	0	; () banked
 12701  0009DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12702  0009DC  0E5D               	movlw	low STR_52
 12703  0009DE  6F61               	movwf	?_putsUSART& (0+255),b
 12704  0009E0  ECC9  F028         	call	_putsUSART	;wreg free
 12705                           
 12706                           ;main.c: 732: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12707  0009E4  0101               	movlb	1	; () banked
 12708  0009E6  6700               	tstfsz	_bHex& (0+255),b
 12709  0009E8  D005               	goto	l10252
 12710                           
 12711                           ; BSR set to: 1
 12712  0009EA  0E7F               	movlw	high STR_54
 12713  0009EC  0102               	movlb	2	; () banked
 12714  0009EE  6F95               	movwf	(_doModeVerbose$1121+1)& (0+255),b
 12715  0009F0  0EED               	movlw	low STR_54
 12716  0009F2  D004               	goto	L6
 12717  0009F4                     l10252:
 12718                           
 12719                           ; BSR set to: 1
 12720  0009F4  0E7F               	movlw	high STR_53
 12721  0009F6  0102               	movlb	2	; () banked
 12722  0009F8  6F95               	movwf	(_doModeVerbose$1121+1)& (0+255),b
 12723  0009FA  0E64               	movlw	low STR_53
 12724  0009FC                     L6:
 12725  0009FC  6F94               	movwf	_doModeVerbose$1121& (0+255),b
 12726                           
 12727                           ; BSR set to: 2
 12728  0009FE  0E01               	movlw	high _wrkbuf
 12729  000A00  0100               	movlb	0	; () banked
 12730  000A02  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12731  000A04  0E54               	movlw	low _wrkbuf
 12732  000A06  6F76               	movwf	?_sprintf& (0+255),b
 12733  000A08  C294  F078         	movff	_doModeVerbose$1121,?_sprintf+2
 12734  000A0C  C295  F079         	movff	_doModeVerbose$1121+1,?_sprintf+3
 12735  000A10  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12736  000A14  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12737  000A16  EC07  F00B         	call	_sprintf	;wreg free
 12738                           
 12739                           ; BSR set to: 0
 12740                           ;main.c: 733: putsUSART(wrkbuf);
 12741  000A1A  0E01               	movlw	high _wrkbuf
 12742  000A1C  0100               	movlb	0	; () banked
 12743  000A1E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12744  000A20  0E54               	movlw	low _wrkbuf
 12745  000A22  6F61               	movwf	?_putsUSART& (0+255),b
 12746  000A24  ECC9  F028         	call	_putsUSART	;wreg free
 12747  000A28                     l538:
 12748  000A28  A2AC               	btfss	4012,1,c	;volatile
 12749  000A2A  D7FE               	goto	l538
 12750                           
 12751                           ;main.c: 735: WriteUSART(':');
 12752  000A2C  0E3A               	movlw	58
 12753  000A2E  EC98  F02B         	call	_WriteUSART
 12754                           
 12755                           ;main.c: 736: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12756  000A32  0101               	movlb	1	; () banked
 12757  000A34  6700               	tstfsz	_bHex& (0+255),b
 12758  000A36  D005               	goto	l10264
 12759                           
 12760                           ; BSR set to: 1
 12761  000A38  0E7F               	movlw	high STR_54
 12762  000A3A  0102               	movlb	2	; () banked
 12763  000A3C  6F97               	movwf	(_doModeVerbose$1133+1)& (0+255),b
 12764  000A3E  0EED               	movlw	low STR_54
 12765  000A40  D004               	goto	L7
 12766  000A42                     l10264:
 12767                           
 12768                           ; BSR set to: 1
 12769  000A42  0E7F               	movlw	high STR_53
 12770  000A44  0102               	movlb	2	; () banked
 12771  000A46  6F97               	movwf	(_doModeVerbose$1133+1)& (0+255),b
 12772  000A48  0E64               	movlw	low STR_53
 12773  000A4A                     L7:
 12774  000A4A  6F96               	movwf	_doModeVerbose$1133& (0+255),b
 12775                           
 12776                           ; BSR set to: 2
 12777  000A4C  0E01               	movlw	high _wrkbuf
 12778  000A4E  0100               	movlb	0	; () banked
 12779  000A50  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12780  000A52  0E54               	movlw	low _wrkbuf
 12781  000A54  6F76               	movwf	?_sprintf& (0+255),b
 12782  000A56  C296  F078         	movff	_doModeVerbose$1133,?_sprintf+2
 12783  000A5A  C297  F079         	movff	_doModeVerbose$1133+1,?_sprintf+3
 12784  000A5E  ECD5  F00A         	call	PL40	;call to abstracted procedure
 12785  000A62  EC07  F00B         	call	_sprintf	;wreg free
 12786                           
 12787                           ; BSR set to: 0
 12788                           ;main.c: 737: putsUSART(wrkbuf);
 12789  000A66  0E01               	movlw	high _wrkbuf
 12790  000A68  0100               	movlb	0	; () banked
 12791  000A6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12792  000A6C  0E54               	movlw	low _wrkbuf
 12793  000A6E  6F61               	movwf	?_putsUSART& (0+255),b
 12794  000A70  ECC9  F028         	call	_putsUSART	;wreg free
 12795                           
 12796                           ;main.c: 738: putsUSART((char *) " = ");
 12797  000A74  0E7E               	movlw	high (STR_236+4)
 12798  000A76  0100               	movlb	0	; () banked
 12799  000A78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12800  000A7A  0EE9               	movlw	low (STR_236+4)
 12801  000A7C  6F61               	movwf	?_putsUSART& (0+255),b
 12802  000A7E  ECC9  F028         	call	_putsUSART	;wreg free
 12803                           
 12804                           ;main.c: 739: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 12805  000A82  0101               	movlb	1	; () banked
 12806  000A84  6700               	tstfsz	_bHex& (0+255),b
 12807  000A86  D005               	goto	l10276
 12808                           
 12809                           ; BSR set to: 1
 12810  000A88  0E7F               	movlw	high STR_54
 12811  000A8A  0102               	movlb	2	; () banked
 12812  000A8C  6F99               	movwf	(_doModeVerbose$1138+1)& (0+255),b
 12813  000A8E  0EED               	movlw	low STR_54
 12814  000A90  D004               	goto	L8
 12815  000A92                     l10276:
 12816                           
 12817                           ; BSR set to: 1
 12818  000A92  0E7F               	movlw	high STR_53
 12819  000A94  0102               	movlb	2	; () banked
 12820  000A96  6F99               	movwf	(_doModeVerbose$1138+1)& (0+255),b
 12821  000A98  0E64               	movlw	low STR_53
 12822  000A9A                     L8:
 12823  000A9A  6F98               	movwf	_doModeVerbose$1138& (0+255),b
 12824                           
 12825                           ; BSR set to: 2
 12826  000A9C  0E01               	movlw	high _wrkbuf
 12827  000A9E  0100               	movlb	0	; () banked
 12828  000AA0  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12829  000AA2  0E54               	movlw	low _wrkbuf
 12830  000AA4  6F76               	movwf	?_sprintf& (0+255),b
 12831  000AA6  C298  F078         	movff	_doModeVerbose$1138,?_sprintf+2
 12832  000AAA  C299  F079         	movff	_doModeVerbose$1138+1,?_sprintf+3
 12833  000AAE  C2B1  F07A         	movff	doModeVerbose@value,?_sprintf+4
 12834  000AB2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12835  000AB4  EC07  F00B         	call	_sprintf	;wreg free
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;main.c: 740: putsUSART(wrkbuf);
 12839  000AB8  0E01               	movlw	high _wrkbuf
 12840  000ABA  0100               	movlb	0	; () banked
 12841  000ABC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12842  000ABE  0E54               	movlw	low _wrkbuf
 12843  000AC0  6F61               	movwf	?_putsUSART& (0+255),b
 12844  000AC2  ECC9  F028         	call	_putsUSART	;wreg free
 12845  000AC6                     l549:
 12846  000AC6  A2AC               	btfss	4012,1,c	;volatile
 12847  000AC8  D7FE               	goto	l549
 12848                           
 12849                           ;main.c: 742: WriteUSART(' ');
 12850  000ACA  0E20               	movlw	32
 12851  000ACC  EC98  F02B         	call	_WriteUSART
 12852  000AD0                     l552:
 12853  000AD0  A2AC               	btfss	4012,1,c	;volatile
 12854  000AD2  D7FE               	goto	l552
 12855                           
 12856                           ;main.c: 744: if ((value > 32) && (value < 127)) {
 12857  000AD4  0E20               	movlw	32
 12858  000AD6  0102               	movlb	2	; () banked
 12859  000AD8  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 12860  000ADA  D007               	goto	l10290
 12861                           
 12862                           ; BSR set to: 2
 12863  000ADC  0E7F               	movlw	127
 12864  000ADE  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 12865  000AE0  D004               	goto	l10290
 12866                           
 12867                           ; BSR set to: 2
 12868                           ;main.c: 745: WriteUSART(value);
 12869  000AE2  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12870  000AE4  EC98  F02B         	call	_WriteUSART
 12871                           
 12872                           ;main.c: 746: }
 12873  000AE8  D003               	goto	l557
 12874  000AEA                     l10290:
 12875                           
 12876                           ; BSR set to: 2
 12877                           ;main.c: 747: else {
 12878                           ;main.c: 748: WriteUSART('.');
 12879  000AEA  0E2E               	movlw	46
 12880  000AEC  EC98  F02B         	call	_WriteUSART
 12881  000AF0                     l557:
 12882  000AF0  A2AC               	btfss	4012,1,c	;volatile
 12883  000AF2  D7FE               	goto	l557
 12884                           
 12885                           ;main.c: 751: WriteUSART(' ');
 12886  000AF4  0E20               	movlw	32
 12887  000AF6  EC98  F02B         	call	_WriteUSART
 12888                           
 12889                           ;main.c: 752: printBinary(value);
 12890  000AFA  0102               	movlb	2	; () banked
 12891  000AFC  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12892  000AFE  EC1C  F029         	call	_printBinary
 12893                           
 12894                           ; BSR set to: 0
 12895                           ;main.c: 753: putsUSART((char *) "\r\n");
 12896  000B02  0E74               	movlw	high (STR_190+50)
 12897  000B04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12898  000B06  0E8A               	movlw	low (STR_190+50)
 12899  000B08  6F61               	movwf	?_putsUSART& (0+255),b
 12900  000B0A  ECC9  F028         	call	_putsUSART	;wreg free
 12901                           
 12902                           ;main.c: 754: }
 12903  000B0E  D058               	goto	l10324
 12904  000B10                     l533:
 12905                           
 12906                           ;main.c: 755: else {
 12907                           ;main.c: 756: rv = 0;
 12908  000B10  0102               	movlb	2	; () banked
 12909  000B12  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 12910                           
 12911                           ; BSR set to: 2
 12912                           ;main.c: 757: putsUSART((char *) "-ERROR - Unable to read register ");
 12913  000B14  0E7A               	movlw	high STR_61
 12914  000B16  0100               	movlb	0	; () banked
 12915  000B18  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12916  000B1A  0E05               	movlw	low STR_61
 12917  000B1C  6F61               	movwf	?_putsUSART& (0+255),b
 12918  000B1E  ECC9  F028         	call	_putsUSART	;wreg free
 12919                           
 12920                           ;main.c: 758: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12921  000B22  0101               	movlb	1	; () banked
 12922  000B24  6700               	tstfsz	_bHex& (0+255),b
 12923  000B26  D005               	goto	l10304
 12924                           
 12925                           ; BSR set to: 1
 12926  000B28  0E7F               	movlw	high STR_54
 12927  000B2A  0102               	movlb	2	; () banked
 12928  000B2C  6F9B               	movwf	(_doModeVerbose$1144+1)& (0+255),b
 12929  000B2E  0EED               	movlw	low STR_54
 12930  000B30  D004               	goto	L9
 12931  000B32                     l10304:
 12932                           
 12933                           ; BSR set to: 1
 12934  000B32  0E7F               	movlw	high STR_53
 12935  000B34  0102               	movlb	2	; () banked
 12936  000B36  6F9B               	movwf	(_doModeVerbose$1144+1)& (0+255),b
 12937  000B38  0E64               	movlw	low STR_53
 12938  000B3A                     L9:
 12939  000B3A  6F9A               	movwf	_doModeVerbose$1144& (0+255),b
 12940                           
 12941                           ; BSR set to: 2
 12942  000B3C  0E01               	movlw	high _wrkbuf
 12943  000B3E  0100               	movlb	0	; () banked
 12944  000B40  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12945  000B42  0E54               	movlw	low _wrkbuf
 12946  000B44  6F76               	movwf	?_sprintf& (0+255),b
 12947  000B46  C29A  F078         	movff	_doModeVerbose$1144,?_sprintf+2
 12948  000B4A  C29B  F079         	movff	_doModeVerbose$1144+1,?_sprintf+3
 12949  000B4E  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12950  000B52  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12951  000B54  EC07  F00B         	call	_sprintf	;wreg free
 12952                           
 12953                           ; BSR set to: 0
 12954                           ;main.c: 759: putsUSART(wrkbuf);
 12955  000B58  0E01               	movlw	high _wrkbuf
 12956  000B5A  0100               	movlb	0	; () banked
 12957  000B5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12958  000B5E  0E54               	movlw	low _wrkbuf
 12959  000B60  6F61               	movwf	?_putsUSART& (0+255),b
 12960  000B62  ECC9  F028         	call	_putsUSART	;wreg free
 12961  000B66                     l565:
 12962  000B66  A2AC               	btfss	4012,1,c	;volatile
 12963  000B68  D7FE               	goto	l565
 12964                           
 12965                           ;main.c: 761: WriteUSART(':');
 12966  000B6A  0E3A               	movlw	58
 12967  000B6C  EC98  F02B         	call	_WriteUSART
 12968                           
 12969                           ;main.c: 762: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12970  000B70  0101               	movlb	1	; () banked
 12971  000B72  6700               	tstfsz	_bHex& (0+255),b
 12972  000B74  D005               	goto	l10316
 12973                           
 12974                           ; BSR set to: 1
 12975  000B76  0E7F               	movlw	high STR_54
 12976  000B78  0102               	movlb	2	; () banked
 12977  000B7A  6F9D               	movwf	(_doModeVerbose$1148+1)& (0+255),b
 12978  000B7C  0EED               	movlw	low STR_54
 12979  000B7E  D004               	goto	L10
 12980  000B80                     l10316:
 12981                           
 12982                           ; BSR set to: 1
 12983  000B80  0E7F               	movlw	high STR_53
 12984  000B82  0102               	movlb	2	; () banked
 12985  000B84  6F9D               	movwf	(_doModeVerbose$1148+1)& (0+255),b
 12986  000B86  0E64               	movlw	low STR_53
 12987  000B88                     L10:
 12988  000B88  6F9C               	movwf	_doModeVerbose$1148& (0+255),b
 12989                           
 12990                           ; BSR set to: 2
 12991  000B8A  0E01               	movlw	high _wrkbuf
 12992  000B8C  0100               	movlb	0	; () banked
 12993  000B8E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12994  000B90  0E54               	movlw	low _wrkbuf
 12995  000B92  6F76               	movwf	?_sprintf& (0+255),b
 12996  000B94  C29C  F078         	movff	_doModeVerbose$1148,?_sprintf+2
 12997  000B98  C29D  F079         	movff	_doModeVerbose$1148+1,?_sprintf+3
 12998  000B9C  ECD5  F00A         	call	PL40	;call to abstracted procedure
 12999  000BA0  EC07  F00B         	call	_sprintf	;wreg free
 13000                           
 13001                           ; BSR set to: 0
 13002                           ;main.c: 763: putsUSART(wrkbuf);
 13003  000BA4  0E01               	movlw	high _wrkbuf
 13004  000BA6  0100               	movlb	0	; () banked
 13005  000BA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13006  000BAA  0E54               	movlw	low _wrkbuf
 13007  000BAC  6F61               	movwf	?_putsUSART& (0+255),b
 13008  000BAE  ECC9  F028         	call	_putsUSART	;wreg free
 13009                           
 13010                           ;main.c: 764: putsUSART((char *) "\r\n");
 13011  000BB2  0E74               	movlw	high (STR_190+50)
 13012  000BB4  0100               	movlb	0	; () banked
 13013  000BB6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13014  000BB8  0E8A               	movlw	low (STR_190+50)
 13015  000BBA  6F61               	movwf	?_putsUSART& (0+255),b
 13016  000BBC  ECC9  F028         	call	_putsUSART	;wreg free
 13017  000BC0                     l10324:
 13018  000BC0  0102               	movlb	2	; () banked
 13019  000BC2  2BB0               	incf	doModeVerbose@i_1103& (0+255),f,b
 13020  000BC4                     l10326:
 13021                           
 13022                           ; BSR set to: 2
 13023  000BC4  51AB               	movf	doModeVerbose@count& (0+255),w,b
 13024  000BC6  5DB0               	subwf	doModeVerbose@i_1103& (0+255),w,b
 13025  000BC8  E201 D6EE          	bnc	l10244
 13026                           
 13027                           ; BSR set to: 2
 13028                           ;main.c: 765: }
 13029                           ;main.c: 766: }
 13030                           ;main.c: 768: if (rv) {
 13031  000BCC  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 13032  000BCE  E009               	bz	l10332
 13033                           
 13034                           ; BSR set to: 2
 13035                           ;main.c: 769: putsUSART((char *) "+OK\r\n");
 13036  000BD0  0E7F               	movlw	high STR_9
 13037  000BD2  0100               	movlb	0	; () banked
 13038  000BD4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13039  000BD6  0E7F               	movlw	low STR_9
 13040  000BD8  6F61               	movwf	?_putsUSART& (0+255),b
 13041  000BDA  ECC9  F028         	call	_putsUSART	;wreg free
 13042                           
 13043                           ;main.c: 770: }
 13044  000BDE  EF4F  F00A         	goto	l10618
 13045  000BE2                     l10332:
 13046                           
 13047                           ; BSR set to: 2
 13048                           ;main.c: 771: else {
 13049                           ;main.c: 772: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13050  000BE2  0E74               	movlw	high STR_68
 13051  000BE4  0100               	movlb	0	; () banked
 13052  000BE6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13053  000BE8  0E22               	movlw	low STR_68
 13054  000BEA  6F61               	movwf	?_putsUSART& (0+255),b
 13055  000BEC  ECC9  F028         	call	_putsUSART	;wreg free
 13056  000BF0  EF4F  F00A         	goto	l10618
 13057  000BF4                     l10334:
 13058                           
 13059                           ; BSR set to: 1
 13060                           ;main.c: 778: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13061  000BF4  0E01               	movlw	high _cmdbuf
 13062  000BF6  0100               	movlb	0	; () banked
 13063  000BF8  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13064  000BFA  0E04               	movlw	low _cmdbuf
 13065  000BFC  6F6D               	movwf	?_stristr& (0+255),b
 13066  000BFE  0E7F               	movlw	high STR_69
 13067  000C00  6F70               	movwf	(?_stristr+3)& (0+255),b
 13068  000C02  0EAC               	movlw	low STR_69
 13069  000C04  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13070  000C06  EC1B  F026         	call	_stristr	;wreg free
 13071  000C0A  EC5F  F00A         	call	PL2	;call to abstracted procedure
 13072  000C0E  E104               	bnz	u12695
 13073  000C10  0100               	movlb	0	; () banked
 13074  000C12  516D               	movf	?_stristr& (0+255),w,b
 13075  000C14  0101               	movlb	1	; () banked
 13076  000C16  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13077  000C18                     u12695:
 13078  000C18  E001 D0AF          	bnz	l10376
 13079                           
 13080                           ; BSR set to: 1
 13081                           ;main.c: 780: uint8_t nodeid;
 13082                           ;main.c: 781: uint8_t page = 0;
 13083  000C1C  0102               	movlb	2	; () banked
 13084  000C1E  6BA1               	clrf	doModeVerbose@page_1154& (0+255),b
 13085                           
 13086                           ; BSR set to: 2
 13087                           ;main.c: 782: uint8_t reg;
 13088                           ;main.c: 783: uint8_t value;
 13089                           ;main.c: 785: strcpy(cmdbuf, cmdbuf + 5);
 13090  000C20  EC78  F00A         	call	PL8	;call to abstracted procedure
 13091  000C24  ECF9  F02A         	call	_strcpy	;wreg free
 13092                           
 13093                           ;main.c: 786: char *p = strtok(cmdbuf, " ");
 13094  000C28  0E01               	movlw	high _cmdbuf
 13095  000C2A  ECCC  F00A         	call	PL36	;call to abstracted procedure
 13096  000C2E  ECC3  F024         	call	_strtok	;wreg free
 13097  000C32  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1157
 13098  000C36  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1157+1
 13099                           
 13100                           ; BSR set to: 0
 13101                           ;main.c: 787: if ((0) != p) {
 13102  000C3A  0102               	movlb	2	; () banked
 13103  000C3C  51B5               	movf	(doModeVerbose@p_1157+1)& (0+255),w,b
 13104  000C3E  11B4               	iorwf	doModeVerbose@p_1157& (0+255),w,b
 13105  000C40  E00A               	bz	l10346
 13106                           
 13107                           ; BSR set to: 2
 13108                           ;main.c: 788: nodeid = atoi(p);
 13109  000C42  C2B4  F066         	movff	doModeVerbose@p_1157,?_atoi
 13110  000C46  C2B5  F067         	movff	doModeVerbose@p_1157+1,?_atoi+1
 13111  000C4A  EC59  F01D         	call	_atoi	;wreg free
 13112  000C4E  5166               	movf	?_atoi& (0+255),w,b
 13113  000C50  0102               	movlb	2	; () banked
 13114  000C52  6F8D               	movwf	doModeVerbose@nodeid_1153& (0+255),b
 13115                           
 13116                           ;main.c: 789: }
 13117  000C54  D009               	goto	l10350
 13118  000C56                     l10346:
 13119                           
 13120                           ; BSR set to: 2
 13121                           ;main.c: 790: else {
 13122                           ;main.c: 791: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13123  000C56  0E7C               	movlw	high STR_48
 13124  000C58  0100               	movlb	0	; () banked
 13125  000C5A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13126  000C5C  0E30               	movlw	low STR_48
 13127  000C5E  6F61               	movwf	?_putsUSART& (0+255),b
 13128  000C60  ECC9  F028         	call	_putsUSART	;wreg free
 13129  000C64  EF5E  F00A         	goto	l524
 13130  000C68                     l10350:
 13131                           
 13132                           ; BSR set to: 2
 13133                           ;main.c: 793: }
 13134                           ;main.c: 795: if ((0) != (p = strtok((0), " "))) {
 13135  000C68  ECBA  F00A         	call	PL28	;call to abstracted procedure
 13136  000C6C  ECC3  F024         	call	_strtok	;wreg free
 13137  000C70  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1157
 13138  000C74  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1157+1
 13139  000C78  0102               	movlb	2	; () banked
 13140  000C7A  51B5               	movf	(doModeVerbose@p_1157+1)& (0+255),w,b
 13141  000C7C  11B4               	iorwf	doModeVerbose@p_1157& (0+255),w,b
 13142  000C7E  E034               	bz	l10358
 13143                           
 13144                           ; BSR set to: 2
 13145                           ;main.c: 797: char *preg;
 13146                           ;main.c: 798: if (preg = strchr(p, ':')) {
 13147  000C80  C2B4  F060         	movff	doModeVerbose@p_1157,?_strchr
 13148  000C84  C2B5  F061         	movff	doModeVerbose@p_1157+1,?_strchr+1
 13149  000C88  0100               	movlb	0	; () banked
 13150  000C8A  6B63               	clrf	(?_strchr+3)& (0+255),b
 13151  000C8C  0E3A               	movlw	58
 13152  000C8E  6F62               	movwf	(?_strchr+2)& (0+255),b
 13153  000C90  ECDD  F027         	call	_strchr	;wreg free
 13154  000C94  C060  F286         	movff	?_strchr,doModeVerbose@preg_1161
 13155  000C98  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1161+1
 13156  000C9C  0102               	movlb	2	; () banked
 13157  000C9E  5187               	movf	(doModeVerbose@preg_1161+1)& (0+255),w,b
 13158  000CA0  1186               	iorwf	doModeVerbose@preg_1161& (0+255),w,b
 13159  000CA2  E018               	bz	l10356
 13160                           
 13161                           ; BSR set to: 2
 13162                           ;main.c: 799: page = atoi(p);
 13163  000CA4  C2B4  F066         	movff	doModeVerbose@p_1157,?_atoi
 13164  000CA8  C2B5  F067         	movff	doModeVerbose@p_1157+1,?_atoi+1
 13165  000CAC  EC59  F01D         	call	_atoi	;wreg free
 13166  000CB0  5166               	movf	?_atoi& (0+255),w,b
 13167  000CB2  0102               	movlb	2	; () banked
 13168  000CB4  6FA1               	movwf	doModeVerbose@page_1154& (0+255),b
 13169                           
 13170                           ;main.c: 800: reg = atoi(preg + 1);
 13171  000CB6  2986               	incf	doModeVerbose@preg_1161& (0+255),w,b
 13172  000CB8  0101               	movlb	1	; () banked
 13173  000CBA  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13174  000CBC  0E00               	movlw	0
 13175  000CBE  0102               	movlb	2	; () banked
 13176  000CC0  2187               	addwfc	(doModeVerbose@preg_1161+1)& (0+255),w,b
 13177  000CC2  0101               	movlb	1	; () banked
 13178  000CC4  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13179  000CC6  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 13180  000CCA  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13181  000CCE  EC59  F01D         	call	_atoi	;wreg free
 13182  000CD2  D006               	goto	L11
 13183  000CD4                     l10356:
 13184                           
 13185                           ; BSR set to: 2
 13186                           ;main.c: 802: else {
 13187                           ;main.c: 803: reg = atoi(p);
 13188  000CD4  C2B4  F066         	movff	doModeVerbose@p_1157,?_atoi
 13189  000CD8  C2B5  F067         	movff	doModeVerbose@p_1157+1,?_atoi+1
 13190  000CDC  EC59  F01D         	call	_atoi	;wreg free
 13191  000CE0                     L11:
 13192  000CE0  5166               	movf	?_atoi& (0+255),w,b
 13193  000CE2  0102               	movlb	2	; () banked
 13194  000CE4  6FA2               	movwf	doModeVerbose@reg_1155& (0+255),b
 13195  000CE6  D008               	goto	l10362
 13196  000CE8                     l10358:
 13197                           
 13198                           ; BSR set to: 2
 13199                           ;main.c: 807: else {
 13200                           ;main.c: 808: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13201  000CE8  0E7A               	movlw	high STR_50
 13202  000CEA  0100               	movlb	0	; () banked
 13203  000CEC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13204  000CEE  0EAB               	movlw	low STR_50
 13205  000CF0  6F61               	movwf	?_putsUSART& (0+255),b
 13206  000CF2  ECC9  F028         	call	_putsUSART	;wreg free
 13207  000CF6  D3E2               	goto	l524
 13208  000CF8                     l10362:
 13209                           
 13210                           ; BSR set to: 2
 13211                           ;main.c: 810: }
 13212                           ;main.c: 813: if ((0) != (p = strtok((0), " "))) {
 13213  000CF8  ECBA  F00A         	call	PL28	;call to abstracted procedure
 13214  000CFC  ECC3  F024         	call	_strtok	;wreg free
 13215  000D00  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1157
 13216  000D04  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1157+1
 13217  000D08  0102               	movlb	2	; () banked
 13218  000D0A  51B5               	movf	(doModeVerbose@p_1157+1)& (0+255),w,b
 13219  000D0C  11B4               	iorwf	doModeVerbose@p_1157& (0+255),w,b
 13220  000D0E  E00A               	bz	l10366
 13221                           
 13222                           ; BSR set to: 2
 13223                           ;main.c: 814: value = atoi(p);
 13224  000D10  C2B4  F066         	movff	doModeVerbose@p_1157,?_atoi
 13225  000D14  C2B5  F067         	movff	doModeVerbose@p_1157+1,?_atoi+1
 13226  000D18  EC59  F01D         	call	_atoi	;wreg free
 13227  000D1C  5166               	movf	?_atoi& (0+255),w,b
 13228  000D1E  0102               	movlb	2	; () banked
 13229  000D20  6FA9               	movwf	doModeVerbose@value_1156& (0+255),b
 13230                           
 13231                           ;main.c: 815: }
 13232  000D22  D008               	goto	l10370
 13233  000D24                     l10366:
 13234                           
 13235                           ; BSR set to: 2
 13236                           ;main.c: 816: else {
 13237                           ;main.c: 817: putsUSART((char *) "-ERROR - Need a value\r\n");
 13238  000D24  0E7C               	movlw	high STR_75
 13239  000D26  0100               	movlb	0	; () banked
 13240  000D28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13241  000D2A  0E60               	movlw	low STR_75
 13242  000D2C  6F61               	movwf	?_putsUSART& (0+255),b
 13243  000D2E  ECC9  F028         	call	_putsUSART	;wreg free
 13244  000D32  D3C4               	goto	l524
 13245  000D34                     l10370:
 13246                           
 13247                           ; BSR set to: 2
 13248                           ;main.c: 819: }
 13249                           ;main.c: 821: if (writeRegisterExtended(nodeid,
 13250                           ;main.c: 822: page,
 13251                           ;main.c: 823: reg,
 13252                           ;main.c: 824: rwtimeout,
 13253                           ;main.c: 825: &value)) {
 13254  000D34  0100               	movlb	0	; () banked
 13255  000D36  C2A1  F0B6         	movff	doModeVerbose@page_1154,?_writeRegisterExtended
 13256  000D3A  6BB7               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13257  000D3C  C2A2  F0B8         	movff	doModeVerbose@reg_1155,?_writeRegisterExtended+2
 13258  000D40  C103  F0B9         	movff	_rwtimeout,?_writeRegisterExtended+3
 13259  000D44  6BBA               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13260  000D46  0E02               	movlw	high doModeVerbose@value_1156
 13261  000D48  6FBC               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13262  000D4A  0EA9               	movlw	low doModeVerbose@value_1156
 13263  000D4C  6FBB               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13264  000D4E  0102               	movlb	2	; () banked
 13265  000D50  518D               	movf	doModeVerbose@nodeid_1153& (0+255),w,b
 13266  000D52  ECD6  F01C         	call	_writeRegisterExtended
 13267  000D56  0900               	iorlw	0
 13268  000D58  E008               	bz	l10374
 13269                           
 13270                           ;main.c: 826: putsUSART((char *) "+OK - Value written successfully\r\n");
 13271  000D5A  0E79               	movlw	high STR_76
 13272  000D5C  0100               	movlb	0	; () banked
 13273  000D5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13274  000D60  0EC0               	movlw	low STR_76
 13275  000D62  6F61               	movwf	?_putsUSART& (0+255),b
 13276  000D64  ECC9  F028         	call	_putsUSART	;wreg free
 13277                           
 13278                           ;main.c: 827: }
 13279  000D68  D39A               	goto	l10618
 13280  000D6A                     l10374:
 13281                           
 13282                           ;main.c: 828: else {
 13283                           ;main.c: 829: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 13284  000D6A  0E7A               	movlw	high STR_77
 13285  000D6C  0100               	movlb	0	; () banked
 13286  000D6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13287  000D70  0E8A               	movlw	low STR_77
 13288  000D72  6F61               	movwf	?_putsUSART& (0+255),b
 13289  000D74  ECC9  F028         	call	_putsUSART	;wreg free
 13290  000D78  D392               	goto	l10618
 13291  000D7A                     l10376:
 13292                           
 13293                           ; BSR set to: 1
 13294                           ;main.c: 835: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13295  000D7A  0E01               	movlw	high _cmdbuf
 13296  000D7C  0100               	movlb	0	; () banked
 13297  000D7E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13298  000D80  0E04               	movlw	low _cmdbuf
 13299  000D82  6F6D               	movwf	?_stristr& (0+255),b
 13300  000D84  0E7F               	movlw	high STR_78
 13301  000D86  6F70               	movwf	(?_stristr+3)& (0+255),b
 13302  000D88  0EBB               	movlw	low STR_78
 13303  000D8A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13304  000D8C  EC1B  F026         	call	_stristr	;wreg free
 13305  000D90  DB96               	call	PL2	;call to abstracted procedure
 13306  000D92  E104               	bnz	u12755
 13307  000D94  0100               	movlb	0	; () banked
 13308  000D96  516D               	movf	?_stristr& (0+255),w,b
 13309  000D98  0101               	movlb	1	; () banked
 13310  000D9A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13311  000D9C                     u12755:
 13312  000D9C  E157               	bnz	l10402
 13313                           
 13314                           ; BSR set to: 1
 13315                           ;main.c: 836: uint8_t nodeid;
 13316                           ;main.c: 838: strcpy(cmdbuf, cmdbuf + 9);
 13317  000D9E  0E01               	movlw	high _cmdbuf
 13318  000DA0  0100               	movlb	0	; () banked
 13319  000DA2  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13320  000DA4  0E04               	movlw	low _cmdbuf
 13321  000DA6  6F60               	movwf	?_strcpy& (0+255),b
 13322  000DA8  0E0D               	movlw	low (_cmdbuf+9)
 13323  000DAA  0101               	movlb	1	; () banked
 13324  000DAC  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13325  000DAE  0E01               	movlw	high (_cmdbuf+9)
 13326  000DB0  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13327  000DB2  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13328  000DB6  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13329  000DBA  ECF9  F02A         	call	_strcpy	;wreg free
 13330                           
 13331                           ;main.c: 839: nodeid = atoi(cmdbuf);
 13332  000DBE  0E01               	movlw	high _cmdbuf
 13333  000DC0  0100               	movlb	0	; () banked
 13334  000DC2  6F67               	movwf	(?_atoi+1)& (0+255),b
 13335  000DC4  0E04               	movlw	low _cmdbuf
 13336  000DC6  6F66               	movwf	?_atoi& (0+255),b
 13337  000DC8  EC59  F01D         	call	_atoi	;wreg free
 13338  000DCC  5166               	movf	?_atoi& (0+255),w,b
 13339  000DCE  0102               	movlb	2	; () banked
 13340  000DD0  6FAF               	movwf	doModeVerbose@nodeid_1168& (0+255),b
 13341                           
 13342                           ; BSR set to: 2
 13343                           ;main.c: 841: putsUSART((char *) "Info for node id = ");
 13344  000DD2  0E7D               	movlw	high STR_79
 13345  000DD4  0100               	movlb	0	; () banked
 13346  000DD6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13347  000DD8  0EAA               	movlw	low STR_79
 13348  000DDA  6F61               	movwf	?_putsUSART& (0+255),b
 13349  000DDC  ECC9  F028         	call	_putsUSART	;wreg free
 13350                           
 13351                           ;main.c: 842: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13352  000DE0  0101               	movlb	1	; () banked
 13353  000DE2  6700               	tstfsz	_bHex& (0+255),b
 13354  000DE4  D005               	goto	l10388
 13355                           
 13356                           ; BSR set to: 1
 13357  000DE6  0E7F               	movlw	high STR_54
 13358  000DE8  0102               	movlb	2	; () banked
 13359  000DEA  6F9F               	movwf	(_doModeVerbose$1173+1)& (0+255),b
 13360  000DEC  0EED               	movlw	low STR_54
 13361  000DEE  D004               	goto	L12
 13362  000DF0                     l10388:
 13363                           
 13364                           ; BSR set to: 1
 13365  000DF0  0E7F               	movlw	high STR_53
 13366  000DF2  0102               	movlb	2	; () banked
 13367  000DF4  6F9F               	movwf	(_doModeVerbose$1173+1)& (0+255),b
 13368  000DF6  0E64               	movlw	low STR_53
 13369  000DF8                     L12:
 13370  000DF8  6F9E               	movwf	_doModeVerbose$1173& (0+255),b
 13371                           
 13372                           ; BSR set to: 2
 13373  000DFA  0E01               	movlw	high _wrkbuf
 13374  000DFC  0100               	movlb	0	; () banked
 13375  000DFE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13376  000E00  0E54               	movlw	low _wrkbuf
 13377  000E02  6F76               	movwf	?_sprintf& (0+255),b
 13378  000E04  C29E  F078         	movff	_doModeVerbose$1173,?_sprintf+2
 13379  000E08  C29F  F079         	movff	_doModeVerbose$1173+1,?_sprintf+3
 13380  000E0C  C2AF  F07A         	movff	doModeVerbose@nodeid_1168,?_sprintf+4
 13381  000E10  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13382  000E12  EC07  F00B         	call	_sprintf	;wreg free
 13383                           
 13384                           ; BSR set to: 0
 13385                           ;main.c: 843: putsUSART(wrkbuf);
 13386  000E16  0E01               	movlw	high _wrkbuf
 13387  000E18  0100               	movlb	0	; () banked
 13388  000E1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13389  000E1C  0E54               	movlw	low _wrkbuf
 13390  000E1E  6F61               	movwf	?_putsUSART& (0+255),b
 13391  000E20  ECC9  F028         	call	_putsUSART	;wreg free
 13392                           
 13393                           ;main.c: 844: putsUSART((char *) "\r\n");
 13394  000E24  0E74               	movlw	high (STR_190+50)
 13395  000E26  0100               	movlb	0	; () banked
 13396  000E28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13397  000E2A  0E8A               	movlw	low (STR_190+50)
 13398  000E2C  6F61               	movwf	?_putsUSART& (0+255),b
 13399  000E2E  ECC9  F028         	call	_putsUSART	;wreg free
 13400                           
 13401                           ;main.c: 845: printNodeFirmwareVersion(nodeid);
 13402  000E32  0102               	movlb	2	; () banked
 13403  000E34  51AF               	movf	doModeVerbose@nodeid_1168& (0+255),w,b
 13404  000E36  ECA0  F020         	call	_printNodeFirmwareVersion
 13405                           
 13406                           ;main.c: 846: printGUID(nodeid);
 13407  000E3A  0102               	movlb	2	; () banked
 13408  000E3C  51AF               	movf	doModeVerbose@nodeid_1168& (0+255),w,b
 13409  000E3E  ECDC  F01D         	call	_printGUID
 13410                           
 13411                           ;main.c: 847: printMDF(nodeid);
 13412  000E42  0102               	movlb	2	; () banked
 13413  000E44  51AF               	movf	doModeVerbose@nodeid_1168& (0+255),w,b
 13414  000E46  EC78  F024         	call	_printMDF
 13415                           
 13416                           ;main.c: 848: }
 13417  000E4A  D329               	goto	l10618
 13418  000E4C                     l10402:
 13419                           
 13420                           ; BSR set to: 1
 13421                           ;main.c: 852: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13422  000E4C  0E01               	movlw	high _cmdbuf
 13423  000E4E  0100               	movlb	0	; () banked
 13424  000E50  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13425  000E52  0E04               	movlw	low _cmdbuf
 13426  000E54  6F6D               	movwf	?_stristr& (0+255),b
 13427  000E56  0E7F               	movlw	high STR_83
 13428  000E58  6F70               	movwf	(?_stristr+3)& (0+255),b
 13429  000E5A  0E56               	movlw	low STR_83
 13430  000E5C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13431  000E5E  EC1B  F026         	call	_stristr	;wreg free
 13432  000E62  DB2D               	call	PL2	;call to abstracted procedure
 13433  000E64  E104               	bnz	u12775
 13434  000E66  0100               	movlb	0	; () banked
 13435  000E68  516D               	movf	?_stristr& (0+255),w,b
 13436  000E6A  0101               	movlb	1	; () banked
 13437  000E6C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13438  000E6E                     u12775:
 13439  000E6E  E001 D0CC          	bnz	l10468
 13440                           
 13441                           ; BSR set to: 1
 13442                           ;main.c: 854: uint8_t filterno;
 13443                           ;main.c: 855: uint8_t filter_priority;
 13444                           ;main.c: 856: uint16_t filter_class;
 13445                           ;main.c: 857: uint8_t filter_type;
 13446                           ;main.c: 858: uint8_t filter_nodeid;
 13447                           ;main.c: 860: strcpy(cmdbuf, cmdbuf + 8);
 13448  000E72  0E01               	movlw	high _cmdbuf
 13449  000E74  DB71               	call	PL12	;call to abstracted procedure
 13450  000E76  ECF9  F02A         	call	_strcpy	;wreg free
 13451                           
 13452                           ;main.c: 861: char *p = strtok(cmdbuf, ",");
 13453  000E7A  DB84               	call	PL30	;call to abstracted procedure
 13454  000E7C  ECC3  F024         	call	_strtok	;wreg free
 13455  000E80  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1181
 13456  000E84  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1181+1
 13457                           
 13458                           ; BSR set to: 0
 13459                           ;main.c: 862: if ((0) != p) {
 13460  000E88  0102               	movlb	2	; () banked
 13461  000E8A  51BA               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 13462  000E8C  11B9               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 13463  000E8E  E014               	bz	l10418
 13464                           
 13465                           ; BSR set to: 2
 13466                           ;main.c: 863: filterno = atoi(p);
 13467  000E90  C2B9  F066         	movff	doModeVerbose@p_1181,?_atoi
 13468  000E94  C2BA  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 13469  000E98  EC59  F01D         	call	_atoi	;wreg free
 13470  000E9C  5166               	movf	?_atoi& (0+255),w,b
 13471  000E9E  0102               	movlb	2	; () banked
 13472  000EA0  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 13473                           
 13474                           ; BSR set to: 2
 13475                           ;main.c: 864: if (filterno > 15) {
 13476  000EA2  0E0F               	movlw	15
 13477  000EA4  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13478  000EA6  D010               	goto	l10422
 13479                           
 13480                           ; BSR set to: 2
 13481                           ;main.c: 865: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13482  000EA8  0E72               	movlw	high STR_85
 13483  000EAA  0100               	movlb	0	; () banked
 13484  000EAC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13485  000EAE  0E1C               	movlw	low STR_85
 13486  000EB0  6F61               	movwf	?_putsUSART& (0+255),b
 13487  000EB2  ECC9  F028         	call	_putsUSART	;wreg free
 13488  000EB6  D302               	goto	l524
 13489  000EB8                     l10418:
 13490                           
 13491                           ; BSR set to: 2
 13492                           ;main.c: 869: else {
 13493                           ;main.c: 870: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13494  000EB8  0E77               	movlw	high STR_86
 13495  000EBA  0100               	movlb	0	; () banked
 13496  000EBC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13497  000EBE  0EFA               	movlw	low STR_86
 13498  000EC0  6F61               	movwf	?_putsUSART& (0+255),b
 13499  000EC2  ECC9  F028         	call	_putsUSART	;wreg free
 13500  000EC6  D2FA               	goto	l524
 13501  000EC8                     l10422:
 13502                           
 13503                           ; BSR set to: 2
 13504                           ;main.c: 872: }
 13505                           ;main.c: 875: p = strtok((0), ",");
 13506  000EC8  DB04               	call	PL4	;call to abstracted procedure
 13507  000ECA  ECC3  F024         	call	_strtok	;wreg free
 13508  000ECE  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1181
 13509  000ED2  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1181+1
 13510                           
 13511                           ; BSR set to: 0
 13512                           ;main.c: 876: if ((0) != p) {
 13513  000ED6  0102               	movlb	2	; () banked
 13514  000ED8  51BA               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 13515  000EDA  11B9               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 13516  000EDC  E00A               	bz	l10428
 13517                           
 13518                           ; BSR set to: 2
 13519                           ;main.c: 877: filter_priority = atoi(p);
 13520  000EDE  C2B9  F066         	movff	doModeVerbose@p_1181,?_atoi
 13521  000EE2  C2BA  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 13522  000EE6  EC59  F01D         	call	_atoi	;wreg free
 13523  000EEA  5166               	movf	?_atoi& (0+255),w,b
 13524  000EEC  0102               	movlb	2	; () banked
 13525  000EEE  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 13526                           
 13527                           ;main.c: 878: }
 13528  000EF0  D008               	goto	l10432
 13529  000EF2                     l10428:
 13530                           
 13531                           ; BSR set to: 2
 13532                           ;main.c: 879: else {
 13533                           ;main.c: 880: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 13534  000EF2  0E77               	movlw	high STR_88
 13535  000EF4  0100               	movlb	0	; () banked
 13536  000EF6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13537  000EF8  0E2F               	movlw	low STR_88
 13538  000EFA  6F61               	movwf	?_putsUSART& (0+255),b
 13539  000EFC  ECC9  F028         	call	_putsUSART	;wreg free
 13540  000F00  D2DD               	goto	l524
 13541  000F02                     l10432:
 13542                           
 13543                           ; BSR set to: 2
 13544                           ;main.c: 882: }
 13545                           ;main.c: 885: p = strtok((0), ",");
 13546  000F02  DAE7               	call	PL4	;call to abstracted procedure
 13547  000F04  ECC3  F024         	call	_strtok	;wreg free
 13548  000F08  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1181
 13549  000F0C  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1181+1
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;main.c: 886: if ((0) != p) {
 13553  000F10  0102               	movlb	2	; () banked
 13554  000F12  51BA               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 13555  000F14  11B9               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 13556  000F16  E00B               	bz	l10438
 13557                           
 13558                           ; BSR set to: 2
 13559                           ;main.c: 887: filter_class = atoi(p);
 13560  000F18  C2B9  F066         	movff	doModeVerbose@p_1181,?_atoi
 13561  000F1C  C2BA  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 13562  000F20  EC59  F01D         	call	_atoi	;wreg free
 13563  000F24  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 13564  000F28  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 13565                           
 13566                           ;main.c: 888: }
 13567  000F2C  D008               	goto	l10442
 13568  000F2E                     l10438:
 13569                           
 13570                           ; BSR set to: 2
 13571                           ;main.c: 889: else {
 13572                           ;main.c: 890: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 13573  000F2E  0E78               	movlw	high STR_90
 13574  000F30  0100               	movlb	0	; () banked
 13575  000F32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13576  000F34  0E96               	movlw	low STR_90
 13577  000F36  6F61               	movwf	?_putsUSART& (0+255),b
 13578  000F38  ECC9  F028         	call	_putsUSART	;wreg free
 13579  000F3C  D2BF               	goto	l524
 13580  000F3E                     l10442:
 13581                           
 13582                           ; BSR set to: 0
 13583                           ;main.c: 892: }
 13584                           ;main.c: 895: p = strtok((0), ",");
 13585  000F3E  DAD1               	call	PL6	;call to abstracted procedure
 13586  000F40  ECC3  F024         	call	_strtok	;wreg free
 13587  000F44  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1181
 13588  000F48  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1181+1
 13589                           
 13590                           ; BSR set to: 0
 13591                           ;main.c: 896: if ((0) != p) {
 13592  000F4C  0102               	movlb	2	; () banked
 13593  000F4E  51BA               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 13594  000F50  11B9               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 13595  000F52  E00A               	bz	l10448
 13596                           
 13597                           ; BSR set to: 2
 13598                           ;main.c: 897: filter_type = atoi(p);
 13599  000F54  C2B9  F066         	movff	doModeVerbose@p_1181,?_atoi
 13600  000F58  C2BA  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 13601  000F5C  EC59  F01D         	call	_atoi	;wreg free
 13602  000F60  5166               	movf	?_atoi& (0+255),w,b
 13603  000F62  0102               	movlb	2	; () banked
 13604  000F64  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 13605                           
 13606                           ;main.c: 898: }
 13607  000F66  D008               	goto	l10452
 13608  000F68                     l10448:
 13609                           
 13610                           ; BSR set to: 2
 13611                           ;main.c: 899: else {
 13612                           ;main.c: 900: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 13613  000F68  0E78               	movlw	high STR_92
 13614  000F6A  0100               	movlb	0	; () banked
 13615  000F6C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13616  000F6E  0EE4               	movlw	low STR_92
 13617  000F70  6F61               	movwf	?_putsUSART& (0+255),b
 13618  000F72  ECC9  F028         	call	_putsUSART	;wreg free
 13619  000F76  D2A2               	goto	l524
 13620  000F78                     l10452:
 13621                           
 13622                           ; BSR set to: 2
 13623                           ;main.c: 902: }
 13624                           ;main.c: 905: p = strtok((0), ",");
 13625  000F78  DAAC               	call	PL4	;call to abstracted procedure
 13626  000F7A  ECC3  F024         	call	_strtok	;wreg free
 13627  000F7E  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1181
 13628  000F82  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1181+1
 13629                           
 13630                           ; BSR set to: 0
 13631                           ;main.c: 906: if ((0) != p) {
 13632  000F86  0102               	movlb	2	; () banked
 13633  000F88  51BA               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 13634  000F8A  11B9               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 13635  000F8C  E00A               	bz	l10458
 13636                           
 13637                           ; BSR set to: 2
 13638                           ;main.c: 907: filter_nodeid = atoi(p);
 13639  000F8E  C2B9  F066         	movff	doModeVerbose@p_1181,?_atoi
 13640  000F92  C2BA  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 13641  000F96  EC59  F01D         	call	_atoi	;wreg free
 13642  000F9A  5166               	movf	?_atoi& (0+255),w,b
 13643  000F9C  0102               	movlb	2	; () banked
 13644  000F9E  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 13645                           
 13646                           ;main.c: 908: }
 13647  000FA0  D008               	goto	l10462
 13648  000FA2                     l10458:
 13649                           
 13650                           ; BSR set to: 2
 13651                           ;main.c: 909: else {
 13652                           ;main.c: 910: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 13653  000FA2  0E77               	movlw	high STR_94
 13654  000FA4  0100               	movlb	0	; () banked
 13655  000FA6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13656  000FA8  0E59               	movlw	low STR_94
 13657  000FAA  6F61               	movwf	?_putsUSART& (0+255),b
 13658  000FAC  ECC9  F028         	call	_putsUSART	;wreg free
 13659  000FB0  D285               	goto	l524
 13660  000FB2                     l10462:
 13661                           
 13662                           ; BSR set to: 2
 13663                           ;main.c: 912: }
 13664                           ;main.c: 915: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13665  000FB2  0E80               	movlw	128
 13666  000FB4  EC80  F02B         	call	_ECANSetOperationMode
 13667                           
 13668                           ; BSR set to: 0
 13669                           ;main.c: 917: uint32_t id = ((uint32_t) filter_priority << 26) |
 13670                           ;main.c: 918: ((uint32_t) filter_class << 16) |
 13671                           ;main.c: 919: ((uint32_t) filter_type << 8) |
 13672                           ;main.c: 920: filter_nodeid;
 13673  000FB8  C28F  F1B2         	movff	doModeVerbose@filter_type,??_doModeVerbose
 13674  000FBC  DB04               	call	PL44	;call to abstracted procedure
 13675  000FBE  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 13676  000FC0  0101               	movlb	1	; () banked
 13677  000FC2  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 13678  000FC4  0102               	movlb	2	; () banked
 13679  000FC6  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 13680  000FC8  DB17               	call	PL60	;call to abstracted procedure
 13681  000FCA  C28E  F1BA         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 13682  000FCE  DA9F               	call	PL10	;call to abstracted procedure
 13683  000FD0  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 13684  000FD2  0101               	movlb	1	; () banked
 13685  000FD4  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13686  000FD6  0102               	movlb	2	; () banked
 13687  000FD8  6F80               	movwf	doModeVerbose@id& (0+255),b
 13688  000FDA  0101               	movlb	1	; () banked
 13689  000FDC  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13690  000FDE  0102               	movlb	2	; () banked
 13691  000FE0  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 13692  000FE2  0101               	movlb	1	; () banked
 13693  000FE4  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13694  000FE6  0102               	movlb	2	; () banked
 13695  000FE8  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 13696  000FEA  0101               	movlb	1	; () banked
 13697  000FEC  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13698  000FEE  0102               	movlb	2	; () banked
 13699  000FF0  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 13700                           
 13701                           ; BSR set to: 2
 13702                           ;main.c: 921: setFilter(filterno, id);
 13703  000FF2  C280  F060         	movff	doModeVerbose@id,?_setFilter
 13704  000FF6  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 13705  000FFA  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 13706  000FFE  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 13707  001002  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 13708  001004  EC2E  F014         	call	_setFilter
 13709                           
 13710                           ;main.c: 922: }
 13711  001008  D24A               	goto	l10618
 13712  00100A                     l10468:
 13713                           
 13714                           ; BSR set to: 1
 13715                           ;main.c: 926: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 13716  00100A  0E01               	movlw	high _cmdbuf
 13717  00100C  0100               	movlb	0	; () banked
 13718  00100E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13719  001010  0E04               	movlw	low _cmdbuf
 13720  001012  6F6D               	movwf	?_stristr& (0+255),b
 13721  001014  0E7F               	movlw	high STR_95
 13722  001016  6F70               	movwf	(?_stristr+3)& (0+255),b
 13723  001018  0EB1               	movlw	low STR_95
 13724  00101A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13725  00101C  EC1B  F026         	call	_stristr	;wreg free
 13726  001020  DA4E               	call	PL2	;call to abstracted procedure
 13727  001022  E104               	bnz	u12855
 13728  001024  0100               	movlb	0	; () banked
 13729  001026  516D               	movf	?_stristr& (0+255),w,b
 13730  001028  0101               	movlb	1	; () banked
 13731  00102A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13732  00102C                     u12855:
 13733  00102C  E001 D0D3          	bnz	l10538
 13734                           
 13735                           ; BSR set to: 1
 13736                           ;main.c: 928: uint8_t maskno;
 13737                           ;main.c: 929: uint8_t mask_priority;
 13738                           ;main.c: 930: uint16_t mask_class;
 13739                           ;main.c: 931: uint8_t mask_type;
 13740                           ;main.c: 932: uint8_t mask_nodeid;
 13741                           ;main.c: 934: strcpy(cmdbuf, cmdbuf + 8);
 13742  001030  0E01               	movlw	high _cmdbuf
 13743  001032  DA92               	call	PL12	;call to abstracted procedure
 13744  001034  ECF9  F02A         	call	_strcpy	;wreg free
 13745                           
 13746                           ;main.c: 935: char *p = strtok(cmdbuf, ",");
 13747  001038  DAA5               	call	PL30	;call to abstracted procedure
 13748  00103A  ECC3  F024         	call	_strtok	;wreg free
 13749  00103E  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1200
 13750  001042  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1200+1
 13751                           
 13752                           ; BSR set to: 0
 13753                           ;main.c: 936: if ((0) != p) {
 13754  001046  0102               	movlb	2	; () banked
 13755  001048  51BC               	movf	(doModeVerbose@p_1200+1)& (0+255),w,b
 13756  00104A  11BB               	iorwf	doModeVerbose@p_1200& (0+255),w,b
 13757  00104C  E014               	bz	l10484
 13758                           
 13759                           ; BSR set to: 2
 13760                           ;main.c: 937: maskno = atoi(p);
 13761  00104E  C2BB  F066         	movff	doModeVerbose@p_1200,?_atoi
 13762  001052  C2BC  F067         	movff	doModeVerbose@p_1200+1,?_atoi+1
 13763  001056  EC59  F01D         	call	_atoi	;wreg free
 13764  00105A  5166               	movf	?_atoi& (0+255),w,b
 13765  00105C  0102               	movlb	2	; () banked
 13766  00105E  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 13767                           
 13768                           ; BSR set to: 2
 13769                           ;main.c: 938: if (maskno > 1) {
 13770  001060  0E01               	movlw	1
 13771  001062  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 13772  001064  D010               	goto	l10488
 13773                           
 13774                           ; BSR set to: 2
 13775                           ;main.c: 939: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 13776  001066  0E75               	movlw	high STR_97
 13777  001068  0100               	movlb	0	; () banked
 13778  00106A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13779  00106C  0E29               	movlw	low STR_97
 13780  00106E  6F61               	movwf	?_putsUSART& (0+255),b
 13781  001070  ECC9  F028         	call	_putsUSART	;wreg free
 13782  001074  D223               	goto	l524
 13783  001076                     l10484:
 13784                           
 13785                           ; BSR set to: 2
 13786                           ;main.c: 943: else {
 13787                           ;main.c: 944: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 13788  001076  0E79               	movlw	high STR_98
 13789  001078  0100               	movlb	0	; () banked
 13790  00107A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13791  00107C  0E0A               	movlw	low STR_98
 13792  00107E  6F61               	movwf	?_putsUSART& (0+255),b
 13793  001080  ECC9  F028         	call	_putsUSART	;wreg free
 13794  001084  D21B               	goto	l524
 13795  001086                     l10488:
 13796                           
 13797                           ; BSR set to: 2
 13798                           ;main.c: 946: }
 13799                           ;main.c: 949: p = strtok((0), ",");
 13800  001086  DA25               	call	PL4	;call to abstracted procedure
 13801  001088  ECC3  F024         	call	_strtok	;wreg free
 13802  00108C  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1200
 13803  001090  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1200+1
 13804                           
 13805                           ; BSR set to: 0
 13806                           ;main.c: 950: if ((0) != p) {
 13807  001094  0102               	movlb	2	; () banked
 13808  001096  51BC               	movf	(doModeVerbose@p_1200+1)& (0+255),w,b
 13809  001098  11BB               	iorwf	doModeVerbose@p_1200& (0+255),w,b
 13810  00109A  E00A               	bz	l10494
 13811                           
 13812                           ; BSR set to: 2
 13813                           ;main.c: 951: mask_priority = atoi(p);
 13814  00109C  C2BB  F066         	movff	doModeVerbose@p_1200,?_atoi
 13815  0010A0  C2BC  F067         	movff	doModeVerbose@p_1200+1,?_atoi+1
 13816  0010A4  EC59  F01D         	call	_atoi	;wreg free
 13817  0010A8  5166               	movf	?_atoi& (0+255),w,b
 13818  0010AA  0102               	movlb	2	; () banked
 13819  0010AC  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 13820                           
 13821                           ;main.c: 952: }
 13822  0010AE  D008               	goto	l10498
 13823  0010B0                     l10494:
 13824                           
 13825                           ; BSR set to: 2
 13826                           ;main.c: 953: else {
 13827                           ;main.c: 954: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 13828  0010B0  0E77               	movlw	high STR_100
 13829  0010B2  0100               	movlb	0	; () banked
 13830  0010B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13831  0010B6  0EAA               	movlw	low STR_100
 13832  0010B8  6F61               	movwf	?_putsUSART& (0+255),b
 13833  0010BA  ECC9  F028         	call	_putsUSART	;wreg free
 13834  0010BE  D1FE               	goto	l524
 13835  0010C0                     l10498:
 13836                           
 13837                           ; BSR set to: 2
 13838                           ;main.c: 956: }
 13839                           ;main.c: 959: p = strtok((0), ",");
 13840  0010C0  DA08               	call	PL4	;call to abstracted procedure
 13841  0010C2  ECC3  F024         	call	_strtok	;wreg free
 13842  0010C6  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1200
 13843  0010CA  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1200+1
 13844                           
 13845                           ; BSR set to: 0
 13846                           ;main.c: 960: if ((0) != p) {
 13847  0010CE  0102               	movlb	2	; () banked
 13848  0010D0  51BC               	movf	(doModeVerbose@p_1200+1)& (0+255),w,b
 13849  0010D2  11BB               	iorwf	doModeVerbose@p_1200& (0+255),w,b
 13850  0010D4  E00B               	bz	l10504
 13851                           
 13852                           ; BSR set to: 2
 13853                           ;main.c: 961: mask_class = atoi(p);
 13854  0010D6  C2BB  F066         	movff	doModeVerbose@p_1200,?_atoi
 13855  0010DA  C2BC  F067         	movff	doModeVerbose@p_1200+1,?_atoi+1
 13856  0010DE  EC59  F01D         	call	_atoi	;wreg free
 13857  0010E2  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 13858  0010E6  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 13859                           
 13860                           ;main.c: 962: }
 13861  0010EA  D008               	goto	l10508
 13862  0010EC                     l10504:
 13863                           
 13864                           ; BSR set to: 2
 13865                           ;main.c: 963: else {
 13866                           ;main.c: 964: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 13867  0010EC  0E79               	movlw	high STR_102
 13868  0010EE  0100               	movlb	0	; () banked
 13869  0010F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13870  0010F2  0E54               	movlw	low STR_102
 13871  0010F4  6F61               	movwf	?_putsUSART& (0+255),b
 13872  0010F6  ECC9  F028         	call	_putsUSART	;wreg free
 13873  0010FA  D1E0               	goto	l524
 13874  0010FC                     l10508:
 13875                           
 13876                           ; BSR set to: 0
 13877                           ;main.c: 966: }
 13878                           ;main.c: 969: p = strtok((0), ",");
 13879  0010FC  D9F2               	call	PL6	;call to abstracted procedure
 13880  0010FE  ECC3  F024         	call	_strtok	;wreg free
 13881  001102  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1200
 13882  001106  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1200+1
 13883                           
 13884                           ; BSR set to: 0
 13885                           ;main.c: 970: if ((0) != p) {
 13886  00110A  0102               	movlb	2	; () banked
 13887  00110C  51BC               	movf	(doModeVerbose@p_1200+1)& (0+255),w,b
 13888  00110E  11BB               	iorwf	doModeVerbose@p_1200& (0+255),w,b
 13889  001110  E00A               	bz	l10514
 13890                           
 13891                           ; BSR set to: 2
 13892                           ;main.c: 971: mask_type = atoi(p);
 13893  001112  C2BB  F066         	movff	doModeVerbose@p_1200,?_atoi
 13894  001116  C2BC  F067         	movff	doModeVerbose@p_1200+1,?_atoi+1
 13895  00111A  EC59  F01D         	call	_atoi	;wreg free
 13896  00111E  5166               	movf	?_atoi& (0+255),w,b
 13897  001120  0102               	movlb	2	; () banked
 13898  001122  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 13899                           
 13900                           ;main.c: 972: }
 13901  001124  D008               	goto	l10518
 13902  001126                     l10514:
 13903                           
 13904                           ; BSR set to: 2
 13905                           ;main.c: 973: else {
 13906                           ;main.c: 974: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 13907  001126  0E79               	movlw	high STR_104
 13908  001128  0100               	movlb	0	; () banked
 13909  00112A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13910  00112C  0E79               	movlw	low STR_104
 13911  00112E  6F61               	movwf	?_putsUSART& (0+255),b
 13912  001130  ECC9  F028         	call	_putsUSART	;wreg free
 13913  001134  D1C3               	goto	l524
 13914  001136                     l10518:
 13915                           
 13916                           ; BSR set to: 2
 13917                           ;main.c: 976: }
 13918                           ;main.c: 979: p = strtok((0), ",");
 13919  001136  D9CD               	call	PL4	;call to abstracted procedure
 13920  001138  ECC3  F024         	call	_strtok	;wreg free
 13921  00113C  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1200
 13922  001140  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1200+1
 13923                           
 13924                           ; BSR set to: 0
 13925                           ;main.c: 980: if ((0) != p) {
 13926  001144  0102               	movlb	2	; () banked
 13927  001146  51BC               	movf	(doModeVerbose@p_1200+1)& (0+255),w,b
 13928  001148  11BB               	iorwf	doModeVerbose@p_1200& (0+255),w,b
 13929  00114A  E00A               	bz	l10524
 13930                           
 13931                           ; BSR set to: 2
 13932                           ;main.c: 981: mask_nodeid = atoi(p);
 13933  00114C  C2BB  F066         	movff	doModeVerbose@p_1200,?_atoi
 13934  001150  C2BC  F067         	movff	doModeVerbose@p_1200+1,?_atoi+1
 13935  001154  EC59  F01D         	call	_atoi	;wreg free
 13936  001158  5166               	movf	?_atoi& (0+255),w,b
 13937  00115A  0102               	movlb	2	; () banked
 13938  00115C  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 13939                           
 13940                           ;main.c: 982: }
 13941  00115E  D008               	goto	l10528
 13942  001160                     l10524:
 13943                           
 13944                           ; BSR set to: 2
 13945                           ;main.c: 983: else {
 13946                           ;main.c: 984: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 13947  001160  0E78               	movlw	high STR_106
 13948  001162  0100               	movlb	0	; () banked
 13949  001164  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13950  001166  0E6F               	movlw	low STR_106
 13951  001168  6F61               	movwf	?_putsUSART& (0+255),b
 13952  00116A  ECC9  F028         	call	_putsUSART	;wreg free
 13953  00116E  D1A6               	goto	l524
 13954  001170                     l10528:
 13955                           
 13956                           ; BSR set to: 2
 13957                           ;main.c: 986: }
 13958                           ;main.c: 988: uint32_t id = ((uint32_t) mask_priority << 26) |
 13959                           ;main.c: 989: ((uint32_t) mask_class << 16) |
 13960                           ;main.c: 990: ((uint32_t) mask_type << 8) |
 13961                           ;main.c: 991: mask_nodeid;
 13962  001170  C292  F1B2         	movff	doModeVerbose@mask_type,??_doModeVerbose
 13963  001174  DA28               	call	PL44	;call to abstracted procedure
 13964  001176  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 13965  001178  0101               	movlb	1	; () banked
 13966  00117A  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 13967  00117C  0102               	movlb	2	; () banked
 13968  00117E  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 13969  001180  DA3B               	call	PL60	;call to abstracted procedure
 13970  001182  C291  F1BA         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 13971  001186  D9C3               	call	PL10	;call to abstracted procedure
 13972  001188  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 13973  00118A  0101               	movlb	1	; () banked
 13974  00118C  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13975  00118E  0102               	movlb	2	; () banked
 13976  001190  6FA3               	movwf	doModeVerbose@id_1212& (0+255),b
 13977  001192  0101               	movlb	1	; () banked
 13978  001194  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13979  001196  0102               	movlb	2	; () banked
 13980  001198  6FA4               	movwf	(doModeVerbose@id_1212+1)& (0+255),b
 13981  00119A  0101               	movlb	1	; () banked
 13982  00119C  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13983  00119E  0102               	movlb	2	; () banked
 13984  0011A0  6FA5               	movwf	(doModeVerbose@id_1212+2)& (0+255),b
 13985  0011A2  0101               	movlb	1	; () banked
 13986  0011A4  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13987  0011A6  0102               	movlb	2	; () banked
 13988  0011A8  6FA6               	movwf	(doModeVerbose@id_1212+3)& (0+255),b
 13989                           
 13990                           ; BSR set to: 2
 13991                           ;main.c: 994: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13992  0011AA  0E80               	movlw	128
 13993  0011AC  EC80  F02B         	call	_ECANSetOperationMode
 13994                           
 13995                           ; BSR set to: 0
 13996                           ;main.c: 996: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 13997                           ;main.c: 997: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 13998  0011B0  0102               	movlb	2	; () banked
 13999  0011B2  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 14000  0011B4  E008               	bz	l10536
 14001                           
 14002                           ; BSR set to: 2
 14003  0011B6  0E0F               	movlw	15	;volatile
 14004  0011B8  0100               	movlb	0	; () banked
 14005  0011BA  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14006  0011BC  0E18               	movlw	24	;volatile
 14007  0011BE  DA10               	call	PL54	;call to abstracted procedure
 14008  0011C0  EC4C  F01C         	call	__CANIDToRegs	;wreg free
 14009  0011C4  D16C               	goto	l10618
 14010  0011C6                     l10536:
 14011                           
 14012                           ; BSR set to: 2
 14013  0011C6  0E0F               	movlw	15	;volatile
 14014  0011C8  0100               	movlb	0	; () banked
 14015  0011CA  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14016  0011CC  0E1C               	movlw	28	;volatile
 14017  0011CE  DA08               	call	PL54	;call to abstracted procedure
 14018  0011D0  EC4C  F01C         	call	__CANIDToRegs	;wreg free
 14019  0011D4  D164               	goto	l10618
 14020  0011D6                     l10538:
 14021                           
 14022                           ; BSR set to: 1
 14023                           ;main.c: 1005: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14024  0011D6  0E01               	movlw	high _cmdbuf
 14025  0011D8  0100               	movlb	0	; () banked
 14026  0011DA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14027  0011DC  0E04               	movlw	low _cmdbuf
 14028  0011DE  6F6D               	movwf	?_stristr& (0+255),b
 14029  0011E0  0E7F               	movlw	high STR_107
 14030  0011E2  6F70               	movwf	(?_stristr+3)& (0+255),b
 14031  0011E4  0E9D               	movlw	low STR_107
 14032  0011E6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14033  0011E8  EC1B  F026         	call	_stristr	;wreg free
 14034  0011EC  D968               	call	PL2	;call to abstracted procedure
 14035  0011EE  E104               	bnz	u12945
 14036  0011F0  0100               	movlb	0	; () banked
 14037  0011F2  516D               	movf	?_stristr& (0+255),w,b
 14038  0011F4  0101               	movlb	1	; () banked
 14039  0011F6  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14040  0011F8                     u12945:
 14041  0011F8  E001 D13F          	bnz	l10612
 14042                           
 14043                           ; BSR set to: 1
 14044                           ;main.c: 1008: strcpy(cmdbuf, cmdbuf + 4);
 14045  0011FC  0E01               	movlw	high _cmdbuf
 14046  0011FE  0100               	movlb	0	; () banked
 14047  001200  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14048  001202  0E04               	movlw	low _cmdbuf
 14049  001204  6F60               	movwf	?_strcpy& (0+255),b
 14050  001206  0E08               	movlw	low (_cmdbuf+4)
 14051  001208  0101               	movlb	1	; () banked
 14052  00120A  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14053  00120C  0E01               	movlw	high (_cmdbuf+4)
 14054  00120E  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14055  001210  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14056  001214  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14057  001218  ECF9  F02A         	call	_strcpy	;wreg free
 14058                           
 14059                           ;main.c: 1011: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14060  00121C  0E01               	movlw	high _cmdbuf
 14061  00121E  0100               	movlb	0	; () banked
 14062  001220  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14063  001222  0E04               	movlw	low _cmdbuf
 14064  001224  6F6D               	movwf	?_stristr& (0+255),b
 14065  001226  0E7F               	movlw	high STR_108
 14066  001228  6F70               	movwf	(?_stristr+3)& (0+255),b
 14067  00122A  0EDC               	movlw	low STR_108
 14068  00122C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14069  00122E  EC1B  F026         	call	_stristr	;wreg free
 14070  001232  D945               	call	PL2	;call to abstracted procedure
 14071  001234  E104               	bnz	u12955
 14072  001236  0100               	movlb	0	; () banked
 14073  001238  516D               	movf	?_stristr& (0+255),w,b
 14074  00123A  0101               	movlb	1	; () banked
 14075  00123C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14076  00123E                     u12955:
 14077  00123E  E111               	bnz	l10550
 14078                           
 14079                           ; BSR set to: 1
 14080                           ;main.c: 1012: bHex = 1;
 14081  001240  0E01               	movlw	1
 14082  001242  6F00               	movwf	_bHex& (0+255),b
 14083                           
 14084                           ; BSR set to: 1
 14085                           ;main.c: 1013: writeEEPROM(0x06, 1);
 14086  001244  0100               	movlb	0	; () banked
 14087  001246  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14088  001248  0E06               	movlw	6
 14089  00124A  6F60               	movwf	?_writeEEPROM& (0+255),b
 14090  00124C  0E01               	movlw	1
 14091  00124E  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14092  001250  EC3F  F02B         	call	_writeEEPROM	;wreg free
 14093                           
 14094                           ; BSR set to: 0
 14095                           ;main.c: 1014: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14096  001254  0E77               	movlw	high STR_109
 14097  001256  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14098  001258  0E03               	movlw	low STR_109
 14099  00125A  6F61               	movwf	?_putsUSART& (0+255),b
 14100  00125C  ECC9  F028         	call	_putsUSART	;wreg free
 14101                           
 14102                           ;main.c: 1015: }
 14103  001260  D11E               	goto	l10618
 14104  001262                     l10550:
 14105                           
 14106                           ; BSR set to: 1
 14107                           ;main.c: 1017: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14108  001262  0E01               	movlw	high _cmdbuf
 14109  001264  0100               	movlb	0	; () banked
 14110  001266  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14111  001268  0E04               	movlw	low _cmdbuf
 14112  00126A  6F6D               	movwf	?_stristr& (0+255),b
 14113  00126C  0E7F               	movlw	high STR_110
 14114  00126E  6F70               	movwf	(?_stristr+3)& (0+255),b
 14115  001270  0E05               	movlw	low STR_110
 14116  001272  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14117  001274  EC1B  F026         	call	_stristr	;wreg free
 14118  001278  D922               	call	PL2	;call to abstracted procedure
 14119  00127A  E104               	bnz	u12965
 14120  00127C  0100               	movlb	0	; () banked
 14121  00127E  516D               	movf	?_stristr& (0+255),w,b
 14122  001280  0101               	movlb	1	; () banked
 14123  001282  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 14124  001284                     u12965:
 14125  001284  E110               	bnz	l10558
 14126                           
 14127                           ; BSR set to: 1
 14128                           ;main.c: 1018: bHex = 0;
 14129  001286  6B00               	clrf	_bHex& (0+255),b
 14130                           
 14131                           ; BSR set to: 1
 14132                           ;main.c: 1019: writeEEPROM(0x06, 0);
 14133  001288  0100               	movlb	0	; () banked
 14134  00128A  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14135  00128C  0E06               	movlw	6
 14136  00128E  6F60               	movwf	?_writeEEPROM& (0+255),b
 14137  001290  0E00               	movlw	0
 14138  001292  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 14139  001294  EC3F  F02B         	call	_writeEEPROM	;wreg free
 14140                           
 14141                           ; BSR set to: 0
 14142                           ;main.c: 1020: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14143  001298  0E77               	movlw	high STR_111
 14144  00129A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14145  00129C  0ED2               	movlw	low STR_111
 14146  00129E  6F61               	movwf	?_putsUSART& (0+255),b
 14147  0012A0  ECC9  F028         	call	_putsUSART	;wreg free
 14148                           
 14149                           ;main.c: 1021: }
 14150  0012A4  D0FC               	goto	l10618
 14151  0012A6                     l10558:
 14152                           
 14153                           ; BSR set to: 1
 14154                           ;main.c: 1022: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14155  0012A6  0E01               	movlw	high _cmdbuf
 14156  0012A8  0100               	movlb	0	; () banked
 14157  0012AA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14158  0012AC  0E04               	movlw	low _cmdbuf
 14159  0012AE  6F6D               	movwf	?_stristr& (0+255),b
 14160  0012B0  0E7E               	movlw	high STR_112
 14161  0012B2  6F70               	movwf	(?_stristr+3)& (0+255),b
 14162  0012B4  0E86               	movlw	low STR_112
 14163  0012B6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14164  0012B8  EC1B  F026         	call	_stristr	;wreg free
 14165  0012BC  516E               	movf	(?_stristr+1)& (0+255),w,b
 14166  0012BE  116D               	iorwf	?_stristr& (0+255),w,b
 14167  0012C0  E027               	bz	l10570
 14168                           
 14169                           ; BSR set to: 0
 14170                           ;main.c: 1023: strcpy(cmdbuf, cmdbuf + 10);
 14171  0012C2  0E01               	movlw	high _cmdbuf
 14172  0012C4  0100               	movlb	0	; () banked
 14173  0012C6  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14174  0012C8  0E04               	movlw	low _cmdbuf
 14175  0012CA  6F60               	movwf	?_strcpy& (0+255),b
 14176  0012CC  0E0E               	movlw	low (_cmdbuf+10)
 14177  0012CE  0101               	movlb	1	; () banked
 14178  0012D0  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14179  0012D2  0E01               	movlw	high (_cmdbuf+10)
 14180  0012D4  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14181  0012D6  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14182  0012DA  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14183  0012DE  ECF9  F02A         	call	_strcpy	;wreg free
 14184                           
 14185                           ;main.c: 1024: rwtimeout = atoi(cmdbuf);
 14186  0012E2  0E01               	movlw	high _cmdbuf
 14187  0012E4  0100               	movlb	0	; () banked
 14188  0012E6  6F67               	movwf	(?_atoi+1)& (0+255),b
 14189  0012E8  0E04               	movlw	low _cmdbuf
 14190  0012EA  6F66               	movwf	?_atoi& (0+255),b
 14191  0012EC  EC59  F01D         	call	_atoi	;wreg free
 14192  0012F0  5166               	movf	?_atoi& (0+255),w,b
 14193  0012F2  0101               	movlb	1	; () banked
 14194  0012F4  6F03               	movwf	_rwtimeout& (0+255),b
 14195                           
 14196                           ; BSR set to: 1
 14197                           ;main.c: 1025: if (rwtimeout < 10u) {
 14198  0012F6  0E0A               	movlw	10
 14199  0012F8  6103               	cpfslt	_rwtimeout& (0+255),b
 14200  0012FA  D001               	goto	l10568
 14201                           
 14202                           ; BSR set to: 1
 14203                           ;main.c: 1026: rwtimeout = 10u;
 14204  0012FC  6F03               	movwf	_rwtimeout& (0+255),b
 14205  0012FE                     l10568:
 14206                           
 14207                           ; BSR set to: 1
 14208                           ;main.c: 1027: }
 14209                           ;main.c: 1028: writeEEPROM(0x09, rwtimeout);
 14210  0012FE  0100               	movlb	0	; () banked
 14211  001300  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14212  001302  0E09               	movlw	9
 14213  001304  6F60               	movwf	?_writeEEPROM& (0+255),b
 14214  001306  C103  F062         	movff	_rwtimeout,?_writeEEPROM+2
 14215  00130A  EC3F  F02B         	call	_writeEEPROM	;wreg free
 14216                           
 14217                           ;main.c: 1029: }
 14218  00130E  D0C7               	goto	l10618
 14219  001310                     l10570:
 14220                           
 14221                           ; BSR set to: 0
 14222                           ;main.c: 1030: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14223  001310  0E01               	movlw	high _cmdbuf
 14224  001312  0100               	movlb	0	; () banked
 14225  001314  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14226  001316  0E04               	movlw	low _cmdbuf
 14227  001318  6F6D               	movwf	?_stristr& (0+255),b
 14228  00131A  0E7E               	movlw	high STR_113
 14229  00131C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14230  00131E  0EBA               	movlw	low STR_113
 14231  001320  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14232  001322  EC1B  F026         	call	_stristr	;wreg free
 14233  001326  516E               	movf	(?_stristr+1)& (0+255),w,b
 14234  001328  116D               	iorwf	?_stristr& (0+255),w,b
 14235  00132A  E005               	bz	l10574
 14236                           
 14237                           ; BSR set to: 0
 14238                           ;main.c: 1031: strcpy(cmdbuf, cmdbuf + 8);
 14239  00132C  0E01               	movlw	high _cmdbuf
 14240  00132E  D914               	call	PL12	;call to abstracted procedure
 14241  001330  ECF9  F02A         	call	_strcpy	;wreg free
 14242                           
 14243                           ;main.c: 1032: }
 14244  001334  D0B4               	goto	l10618
 14245  001336                     l10574:
 14246                           
 14247                           ; BSR set to: 0
 14248                           ;main.c: 1033: else if (0 != stristr(cmdbuf, "MODE ")) {
 14249  001336  0E01               	movlw	high _cmdbuf
 14250  001338  0100               	movlb	0	; () banked
 14251  00133A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14252  00133C  0E04               	movlw	low _cmdbuf
 14253  00133E  6F6D               	movwf	?_stristr& (0+255),b
 14254  001340  0E7F               	movlw	high STR_114
 14255  001342  6F70               	movwf	(?_stristr+3)& (0+255),b
 14256  001344  0E85               	movlw	low STR_114
 14257  001346  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14258  001348  EC1B  F026         	call	_stristr	;wreg free
 14259  00134C  516E               	movf	(?_stristr+1)& (0+255),w,b
 14260  00134E  116D               	iorwf	?_stristr& (0+255),w,b
 14261  001350  E05C               	bz	l10602
 14262                           
 14263                           ; BSR set to: 0
 14264                           ;main.c: 1034: strcpy(cmdbuf, cmdbuf + 5);
 14265  001352  D8CE               	call	PL8	;call to abstracted procedure
 14266  001354  ECF9  F02A         	call	_strcpy	;wreg free
 14267                           
 14268                           ;main.c: 1035: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14269  001358  0E01               	movlw	high _cmdbuf
 14270  00135A  0100               	movlb	0	; () banked
 14271  00135C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14272  00135E  0E04               	movlw	low _cmdbuf
 14273  001360  6F6D               	movwf	?_stristr& (0+255),b
 14274  001362  0E7E               	movlw	high STR_115
 14275  001364  6F70               	movwf	(?_stristr+3)& (0+255),b
 14276  001366  0EFD               	movlw	low STR_115
 14277  001368  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14278  00136A  EC1B  F026         	call	_stristr	;wreg free
 14279  00136E  516E               	movf	(?_stristr+1)& (0+255),w,b
 14280  001370  116D               	iorwf	?_stristr& (0+255),w,b
 14281  001372  E00F               	bz	l10586
 14282                           
 14283                           ; BSR set to: 0
 14284                           ;main.c: 1036: mode = 0;
 14285  001374  6BF1               	clrf	_mode& (0+255),b
 14286                           
 14287                           ; BSR set to: 0
 14288                           ;main.c: 1037: writeEEPROM(0x03, 0);
 14289  001376  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14290  001378  0E03               	movlw	3
 14291  00137A  6F60               	movwf	?_writeEEPROM& (0+255),b
 14292  00137C  0E00               	movlw	0
 14293  00137E  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 14294  001380  EC3F  F02B         	call	_writeEEPROM	;wreg free
 14295                           
 14296                           ; BSR set to: 0
 14297                           ;main.c: 1038: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14298  001384  0E7B               	movlw	high STR_116
 14299  001386  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14300  001388  0E47               	movlw	low STR_116
 14301  00138A  6F61               	movwf	?_putsUSART& (0+255),b
 14302  00138C  ECC9  F028         	call	_putsUSART	;wreg free
 14303                           
 14304                           ;main.c: 1039: }
 14305  001390  D086               	goto	l10618
 14306  001392                     l10586:
 14307                           
 14308                           ; BSR set to: 0
 14309                           ;main.c: 1040: else if (0 != stristr(cmdbuf, "VSCP")) {
 14310  001392  0E01               	movlw	high _cmdbuf
 14311  001394  0100               	movlb	0	; () banked
 14312  001396  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14313  001398  0E04               	movlw	low _cmdbuf
 14314  00139A  6F6D               	movwf	?_stristr& (0+255),b
 14315  00139C  0E7F               	movlw	high STR_117
 14316  00139E  6F70               	movwf	(?_stristr+3)& (0+255),b
 14317  0013A0  0EC0               	movlw	low STR_117
 14318  0013A2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14319  0013A4  EC1B  F026         	call	_stristr	;wreg free
 14320  0013A8  516E               	movf	(?_stristr+1)& (0+255),w,b
 14321  0013AA  116D               	iorwf	?_stristr& (0+255),w,b
 14322  0013AC  E010               	bz	l10594
 14323                           
 14324                           ; BSR set to: 0
 14325                           ;main.c: 1041: mode = 1;
 14326  0013AE  0E01               	movlw	1
 14327  0013B0  6FF1               	movwf	_mode& (0+255),b
 14328                           
 14329                           ; BSR set to: 0
 14330                           ;main.c: 1042: writeEEPROM(0x03, 1);
 14331  0013B2  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14332  0013B4  0E03               	movlw	3
 14333  0013B6  6F60               	movwf	?_writeEEPROM& (0+255),b
 14334  0013B8  0E01               	movlw	1
 14335  0013BA  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14336  0013BC  EC3F  F02B         	call	_writeEEPROM	;wreg free
 14337                           
 14338                           ; BSR set to: 0
 14339                           ;main.c: 1043: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14340  0013C0  0E7A               	movlw	high STR_118
 14341  0013C2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14342  0013C4  0ECC               	movlw	low STR_118
 14343  0013C6  6F61               	movwf	?_putsUSART& (0+255),b
 14344  0013C8  ECC9  F028         	call	_putsUSART	;wreg free
 14345                           
 14346                           ;main.c: 1044: }
 14347  0013CC  D068               	goto	l10618
 14348  0013CE                     l10594:
 14349                           
 14350                           ; BSR set to: 0
 14351                           ;main.c: 1045: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14352  0013CE  0E01               	movlw	high _cmdbuf
 14353  0013D0  0100               	movlb	0	; () banked
 14354  0013D2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14355  0013D4  0E04               	movlw	low _cmdbuf
 14356  0013D6  6F6D               	movwf	?_stristr& (0+255),b
 14357  0013D8  0E7F               	movlw	high STR_119
 14358  0013DA  6F70               	movwf	(?_stristr+3)& (0+255),b
 14359  0013DC  0E97               	movlw	low STR_119
 14360  0013DE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14361  0013E0  EC1B  F026         	call	_stristr	;wreg free
 14362  0013E4  516E               	movf	(?_stristr+1)& (0+255),w,b
 14363  0013E6  116D               	iorwf	?_stristr& (0+255),w,b
 14364  0013E8  E05A               	bz	l10618
 14365                           
 14366                           ; BSR set to: 0
 14367                           ;main.c: 1046: mode = 2;
 14368  0013EA  0E02               	movlw	2
 14369  0013EC  6FF1               	movwf	_mode& (0+255),b
 14370                           
 14371                           ; BSR set to: 0
 14372                           ;main.c: 1047: writeEEPROM(0x03, 2);
 14373  0013EE  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 14374  0013F0  0E03               	movlw	3
 14375  0013F2  6F60               	movwf	?_writeEEPROM& (0+255),b
 14376  0013F4  0E02               	movlw	2
 14377  0013F6  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 14378  0013F8  EC3F  F02B         	call	_writeEEPROM	;wreg free
 14379                           
 14380                           ; BSR set to: 0
 14381                           ;main.c: 1048: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14382  0013FC  0E7B               	movlw	high STR_120
 14383  0013FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14384  001400  0EB4               	movlw	low STR_120
 14385  001402  6F61               	movwf	?_putsUSART& (0+255),b
 14386  001404  ECC9  F028         	call	_putsUSART	;wreg free
 14387  001408  D04A               	goto	l10618
 14388  00140A                     l10602:
 14389                           
 14390                           ; BSR set to: 0
 14391                           ;main.c: 1052: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14392  00140A  0E01               	movlw	high _cmdbuf
 14393  00140C  0100               	movlb	0	; () banked
 14394  00140E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14395  001410  0E04               	movlw	low _cmdbuf
 14396  001412  6F6D               	movwf	?_stristr& (0+255),b
 14397  001414  0E7E               	movlw	high STR_121
 14398  001416  6F70               	movwf	(?_stristr+3)& (0+255),b
 14399  001418  0EED               	movlw	low STR_121
 14400  00141A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14401  00141C  EC1B  F026         	call	_stristr	;wreg free
 14402  001420  516E               	movf	(?_stristr+1)& (0+255),w,b
 14403  001422  116D               	iorwf	?_stristr& (0+255),w,b
 14404  001424  E011               	bz	l10606
 14405                           
 14406                           ; BSR set to: 0
 14407                           ;main.c: 1053: strcpy(cmdbuf, cmdbuf + 7);
 14408  001426  0E01               	movlw	high _cmdbuf
 14409  001428  0100               	movlb	0	; () banked
 14410  00142A  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14411  00142C  0E04               	movlw	low _cmdbuf
 14412  00142E  6F60               	movwf	?_strcpy& (0+255),b
 14413  001430  0E0B               	movlw	low (_cmdbuf+7)
 14414  001432  0101               	movlb	1	; () banked
 14415  001434  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14416  001436  0E01               	movlw	high (_cmdbuf+7)
 14417  001438  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14418  00143A  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14419  00143E  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14420  001442  ECF9  F02A         	call	_strcpy	;wreg free
 14421                           
 14422                           ;main.c: 1054: }
 14423  001446  D02B               	goto	l10618
 14424  001448                     l10606:
 14425                           
 14426                           ; BSR set to: 0
 14427                           ;main.c: 1056: else if (0 != stristr(cmdbuf, "MASK ")) {
 14428  001448  0E01               	movlw	high _cmdbuf
 14429  00144A  0100               	movlb	0	; () banked
 14430  00144C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14431  00144E  0E04               	movlw	low _cmdbuf
 14432  001450  6F6D               	movwf	?_stristr& (0+255),b
 14433  001452  0E7F               	movlw	high STR_122
 14434  001454  6F70               	movwf	(?_stristr+3)& (0+255),b
 14435  001456  0E8B               	movlw	low STR_122
 14436  001458  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14437  00145A  EC1B  F026         	call	_stristr	;wreg free
 14438  00145E  516E               	movf	(?_stristr+1)& (0+255),w,b
 14439  001460  116D               	iorwf	?_stristr& (0+255),w,b
 14440  001462  E004               	bz	l10610
 14441                           
 14442                           ; BSR set to: 0
 14443                           ;main.c: 1057: strcpy(cmdbuf, cmdbuf + 5);
 14444  001464  D845               	call	PL8	;call to abstracted procedure
 14445  001466  ECF9  F02A         	call	_strcpy	;wreg free
 14446                           
 14447                           ;main.c: 1058: }
 14448  00146A  D019               	goto	l10618
 14449  00146C                     l10610:
 14450                           
 14451                           ; BSR set to: 0
 14452                           ;main.c: 1059: else {
 14453                           ;main.c: 1060: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14454  00146C  0E7A               	movlw	high STR_123
 14455  00146E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14456  001470  0E69               	movlw	low STR_123
 14457  001472  6F61               	movwf	?_putsUSART& (0+255),b
 14458  001474  ECC9  F028         	call	_putsUSART	;wreg free
 14459  001478  D012               	goto	l10618
 14460  00147A                     l10612:
 14461                           
 14462                           ; BSR set to: 1
 14463                           ;main.c: 1064: else {
 14464                           ;main.c: 1065: if ( 0x0d == cmdbuf[ 0 ] ) {
 14465  00147A  5104               	movf	_cmdbuf& (0+255),w,b
 14466  00147C  0A0D               	xorlw	13
 14467  00147E  E108               	bnz	l10616
 14468                           
 14469                           ; BSR set to: 1
 14470                           ;main.c: 1066: putsUSART((char *) "+OK\r\n");
 14471  001480  0E7F               	movlw	high STR_9
 14472  001482  0100               	movlb	0	; () banked
 14473  001484  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14474  001486  0E7F               	movlw	low STR_9
 14475  001488  6F61               	movwf	?_putsUSART& (0+255),b
 14476  00148A  ECC9  F028         	call	_putsUSART	;wreg free
 14477                           
 14478                           ;main.c: 1067: }
 14479  00148E  D007               	goto	l10618
 14480  001490                     l10616:
 14481                           
 14482                           ; BSR set to: 1
 14483                           ;main.c: 1068: else {
 14484                           ;main.c: 1069: putsUSART((char *) "-ERROR - Unknown command\r\n");
 14485  001490  0E7B               	movlw	high STR_125
 14486  001492  0100               	movlb	0	; () banked
 14487  001494  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14488  001496  0E7E               	movlw	low STR_125
 14489  001498  6F61               	movwf	?_putsUSART& (0+255),b
 14490  00149A  ECC9  F028         	call	_putsUSART	;wreg free
 14491  00149E                     l10618:
 14492                           
 14493                           ;main.c: 1070: }
 14494                           ;main.c: 1071: }
 14495                           ;main.c: 1073: memset(cmdbuf, 0, sizeof ( cmdbuf));
 14496  00149E  0E01               	movlw	high _cmdbuf
 14497  0014A0  0100               	movlb	0	; () banked
 14498  0014A2  6F61               	movwf	(?_memset+1)& (0+255),b
 14499  0014A4  0E04               	movlw	low _cmdbuf
 14500  0014A6  6F60               	movwf	?_memset& (0+255),b
 14501  0014A8  6B63               	clrf	(?_memset+3)& (0+255),b
 14502  0014AA  6B62               	clrf	(?_memset+2)& (0+255),b
 14503  0014AC  6B65               	clrf	(?_memset+5)& (0+255),b
 14504  0014AE  0E50               	movlw	80
 14505  0014B0  6F64               	movwf	(?_memset+4)& (0+255),b
 14506  0014B2  EC28  F02B         	call	_memset	;wreg free
 14507                           
 14508                           ; BSR set to: 0
 14509                           ;main.c: 1074: pos = 0;
 14510  0014B6  0101               	movlb	1	; () banked
 14511  0014B8  6B02               	clrf	_pos& (0+255),b
 14512  0014BA                     l10622:
 14513                           
 14514                           ;main.c: 1075: }
 14515                           ;main.c: 1076: }
 14516                           ;main.c: 1079: (INTCONbits.GIE = 1);
 14517  0014BA  8EF2               	bsf	intcon,7,c	;volatile
 14518  0014BC                     l524:
 14519  0014BC  0012               	return	
 14520  0014BE                     __end_of_doModeVerbose:
 14521                           	opt stack 0
 14522  0014BE                     PL2:
 14523                           	opt stack 20
 14524  0014BE  0E04               	movlw	low _cmdbuf
 14525  0014C0  0101               	movlb	1	; () banked
 14526  0014C2  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14527  0014C4  0E01               	movlw	high _cmdbuf
 14528  0014C6  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14529  0014C8  0100               	movlb	0	; () banked
 14530  0014CA  516E               	movf	(?_stristr+1)& (0+255),w,b
 14531  0014CC  0101               	movlb	1	; () banked
 14532  0014CE  19B3               	xorwf	(??_doModeVerbose+1)& (0+255),w,b
 14533  0014D0  0012               	return	
 14534  0014D2                     __end_ofPL2:
 14535                           	opt stack 0
 14536  0014D2                     PL4:
 14537                           	opt stack 20
 14538  0014D2  0100               	movlb	0	; () banked
 14539  0014D4  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14540  0014D6  6B6C               	clrf	?_strtok& (0+255),b
 14541  0014D8  0E7F               	movlw	high STR_30
 14542  0014DA  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14543  0014DC  0EF4               	movlw	low STR_30
 14544  0014DE  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14545  0014E0  0012               	return	
 14546  0014E2                     __end_ofPL4:
 14547                           	opt stack 0
 14548  0014E2                     PL6:
 14549                           	opt stack 20
 14550  0014E2  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14551  0014E4  6B6C               	clrf	?_strtok& (0+255),b
 14552  0014E6  0E7F               	movlw	high STR_30
 14553  0014E8  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14554  0014EA  0EF4               	movlw	low STR_30
 14555  0014EC  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14556  0014EE  0012               	return	
 14557  0014F0                     __end_ofPL6:
 14558                           	opt stack 0
 14559  0014F0                     PL8:
 14560                           	opt stack 20
 14561  0014F0  0E01               	movlw	high _cmdbuf
 14562  0014F2  0100               	movlb	0	; () banked
 14563  0014F4  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14564  0014F6  0E04               	movlw	low _cmdbuf
 14565  0014F8  6F60               	movwf	?_strcpy& (0+255),b
 14566  0014FA  0E09               	movlw	low (_cmdbuf+5)
 14567  0014FC  0101               	movlb	1	; () banked
 14568  0014FE  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14569  001500  0E01               	movlw	high (_cmdbuf+5)
 14570  001502  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14571  001504  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14572  001508  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14573  00150C  0012               	return	
 14574  00150E                     __end_ofPL8:
 14575                           	opt stack 0
 14576  00150E                     PL10:
 14577                           	opt stack 20
 14578  00150E  6BBB               	clrf	(??_doModeVerbose+9)& (0+255),b
 14579  001510  6BBC               	clrf	(??_doModeVerbose+10)& (0+255),b
 14580  001512  6BBD               	clrf	(??_doModeVerbose+11)& (0+255),b
 14581  001514  0E1A               	movlw	26
 14582  001516                     u12845:
 14583  001516  90D8               	bcf	status,0,c
 14584  001518  37BA               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 14585  00151A  37BB               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 14586  00151C  37BC               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 14587  00151E  37BD               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 14588  001520  2EE8               	decfsz	wreg,f,c
 14589  001522  D7F9               	goto	u12845
 14590  001524  51B6               	movf	(??_doModeVerbose+4)& (0+255),w,b
 14591  001526  11BA               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 14592  001528  6FBE               	movwf	(??_doModeVerbose+12)& (0+255),b
 14593  00152A  51B7               	movf	(??_doModeVerbose+5)& (0+255),w,b
 14594  00152C  11BB               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 14595  00152E  6FBF               	movwf	(??_doModeVerbose+13)& (0+255),b
 14596  001530  51B8               	movf	(??_doModeVerbose+6)& (0+255),w,b
 14597  001532  11BC               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 14598  001534  6FC0               	movwf	(??_doModeVerbose+14)& (0+255),b
 14599  001536  51B9               	movf	(??_doModeVerbose+7)& (0+255),w,b
 14600  001538  11BD               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 14601  00153A  6FC1               	movwf	(??_doModeVerbose+15)& (0+255),b
 14602  00153C  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14603  00153E  11BE               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 14604  001540  6FC2               	movwf	(??_doModeVerbose+16)& (0+255),b
 14605  001542  51B3               	movf	(??_doModeVerbose+1)& (0+255),w,b
 14606  001544  11BF               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 14607  001546  6FC3               	movwf	(??_doModeVerbose+17)& (0+255),b
 14608  001548  51B4               	movf	(??_doModeVerbose+2)& (0+255),w,b
 14609  00154A  11C0               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 14610  00154C  6FC4               	movwf	(??_doModeVerbose+18)& (0+255),b
 14611  00154E  51B5               	movf	(??_doModeVerbose+3)& (0+255),w,b
 14612  001550  11C1               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 14613  001552  6FC5               	movwf	(??_doModeVerbose+19)& (0+255),b
 14614  001554  0102               	movlb	2	; () banked
 14615  001556  0012               	return	
 14616  001558                     __end_ofPL10:
 14617                           	opt stack 0
 14618  001558                     PL12:
 14619                           	opt stack 20
 14620  001558  0100               	movlb	0	; () banked
 14621  00155A  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14622  00155C  0E04               	movlw	low _cmdbuf
 14623  00155E  6F60               	movwf	?_strcpy& (0+255),b
 14624  001560  0E0C               	movlw	low (_cmdbuf+8)
 14625  001562  0101               	movlb	1	; () banked
 14626  001564  6FB2               	movwf	??_doModeVerbose& (0+255),b
 14627  001566  0E01               	movlw	high (_cmdbuf+8)
 14628  001568  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 14629  00156A  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 14630  00156E  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14631  001572  0012               	return	
 14632  001574                     __end_ofPL12:
 14633                           	opt stack 0
 14634  001574                     PL28:
 14635                           	opt stack 20
 14636  001574  0100               	movlb	0	; () banked
 14637  001576  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14638  001578  6B6C               	clrf	?_strtok& (0+255),b
 14639  00157A  0E7F               	movlw	high (STR_249+5)
 14640  00157C  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14641  00157E  0E2A               	movlw	low (STR_249+5)
 14642  001580  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14643  001582  0012               	return	
 14644  001584                     __end_ofPL28:
 14645                           	opt stack 0
 14646  001584                     PL30:
 14647                           	opt stack 20
 14648  001584  0E01               	movlw	high _cmdbuf
 14649  001586  0100               	movlb	0	; () banked
 14650  001588  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14651  00158A  0E04               	movlw	low _cmdbuf
 14652  00158C  6F6C               	movwf	?_strtok& (0+255),b
 14653  00158E  0E7F               	movlw	high STR_30
 14654  001590  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14655  001592  0EF4               	movlw	low STR_30
 14656  001594  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14657  001596  0012               	return	
 14658  001598                     __end_ofPL30:
 14659                           	opt stack 0
 14660  001598                     PL36:
 14661                           	opt stack 20
 14662  001598  0100               	movlb	0	; () banked
 14663  00159A  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14664  00159C  0E04               	movlw	low _cmdbuf
 14665  00159E  6F6C               	movwf	?_strtok& (0+255),b
 14666  0015A0  0E7F               	movlw	high (STR_249+5)
 14667  0015A2  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14668  0015A4  0E2A               	movlw	low (STR_249+5)
 14669  0015A6  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14670  0015A8  0012               	return	
 14671  0015AA                     __end_ofPL36:
 14672                           	opt stack 0
 14673  0015AA                     PL40:
 14674                           	opt stack 20
 14675  0015AA  0102               	movlb	2	; () banked
 14676  0015AC  51B0               	movf	doModeVerbose@i_1103& (0+255),w,b
 14677  0015AE  C2AE  F1B2         	movff	doModeVerbose@reg,??_doModeVerbose
 14678  0015B2  0101               	movlb	1	; () banked
 14679  0015B4  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14680  0015B6  27B2               	addwf	??_doModeVerbose& (0+255),f,b
 14681  0015B8  0E00               	movlw	0
 14682  0015BA  23B3               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 14683  0015BC  51B2               	movf	??_doModeVerbose& (0+255),w,b
 14684  0015BE  0100               	movlb	0	; () banked
 14685  0015C0  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 14686  0015C2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14687  0015C4  0012               	return	
 14688  0015C6                     __end_ofPL40:
 14689                           	opt stack 0
 14690  0015C6                     PL44:
 14691                           	opt stack 20
 14692  0015C6  0101               	movlb	1	; () banked
 14693  0015C8  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 14694  0015CA  6BB4               	clrf	(??_doModeVerbose+2)& (0+255),b
 14695  0015CC  6BB5               	clrf	(??_doModeVerbose+3)& (0+255),b
 14696  0015CE  C1B4  F1B5         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 14697  0015D2  C1B3  F1B4         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 14698  0015D6  C1B2  F1B3         	movff	??_doModeVerbose,??_doModeVerbose+1
 14699  0015DA  6BB2               	clrf	??_doModeVerbose& (0+255),b
 14700  0015DC  0102               	movlb	2	; () banked
 14701  0015DE  0012               	return	
 14702  0015E0                     __end_ofPL44:
 14703                           	opt stack 0
 14704  0015E0                     PL54:
 14705                           	opt stack 20
 14706  0015E0  6F60               	movwf	?__CANIDToRegs& (0+255),b
 14707  0015E2  C2A3  F062         	movff	doModeVerbose@id_1212,?__CANIDToRegs+2
 14708  0015E6  C2A4  F063         	movff	doModeVerbose@id_1212+1,?__CANIDToRegs+3
 14709  0015EA  C2A5  F064         	movff	doModeVerbose@id_1212+2,?__CANIDToRegs+4
 14710  0015EE  C2A6  F065         	movff	doModeVerbose@id_1212+3,?__CANIDToRegs+5
 14711  0015F2  0E01               	movlw	1
 14712  0015F4  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 14713  0015F6  0C01               	retlw	1
 14714  0015F8                     __end_ofPL54:
 14715                           	opt stack 0
 14716  0015F8                     PL60:
 14717                           	opt stack 20
 14718  0015F8  0101               	movlb	1	; () banked
 14719  0015FA  6FB7               	movwf	(??_doModeVerbose+5)& (0+255),b
 14720  0015FC  6BB8               	clrf	(??_doModeVerbose+6)& (0+255),b
 14721  0015FE  6BB9               	clrf	(??_doModeVerbose+7)& (0+255),b
 14722  001600  C1B7  F1B9         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 14723  001604  C1B6  F1B8         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 14724  001608  6BB7               	clrf	(??_doModeVerbose+5)& (0+255),b
 14725  00160A  6BB6               	clrf	(??_doModeVerbose+4)& (0+255),b
 14726  00160C  0012               	return	
 14727  00160E                     __end_ofPL60:
 14728                           	opt stack 0
 14729                           tblptru	equ	0xFF8
 14730                           tblptrh	equ	0xFF7
 14731                           tblptrl	equ	0xFF6
 14732                           tablat	equ	0xFF5
 14733                           prodh	equ	0xFF4
 14734                           prodl	equ	0xFF3
 14735                           intcon	equ	0xFF2
 14736                           indf0	equ	0xFEF
 14737                           postinc0	equ	0xFEE
 14738                           fsr0h	equ	0xFEA
 14739                           fsr0l	equ	0xFE9
 14740                           wreg	equ	0xFE8
 14741                           indf1	equ	0xFE7
 14742                           postinc1	equ	0xFE6
 14743                           postdec1	equ	0xFE5
 14744                           fsr1h	equ	0xFE2
 14745                           fsr1l	equ	0xFE1
 14746                           indf2	equ	0xFDF
 14747                           postinc2	equ	0xFDE
 14748                           postdec2	equ	0xFDD
 14749                           plusw2	equ	0xFDB
 14750                           fsr2h	equ	0xFDA
 14751                           fsr2l	equ	0xFD9
 14752                           status	equ	0xFD8
 14753                           
 14754 ;; *************** function _setFilter *****************
 14755 ;; Defined at:
 14756 ;;		line 2771 in file "main.c"
 14757 ;; Parameters:    Size  Location     Type
 14758 ;;  filter          1    wreg     unsigned char 
 14759 ;;  val             4    0[BANK0 ] unsigned long 
 14760 ;; Auto vars:     Size  Location     Type
 14761 ;;  filter          1   10[BANK0 ] unsigned char 
 14762 ;;  eidl            1   14[BANK0 ] unsigned char 
 14763 ;;  eidh            1   13[BANK0 ] unsigned char 
 14764 ;;  sidl            1   12[BANK0 ] unsigned char 
 14765 ;;  sidh            1   11[BANK0 ] unsigned char 
 14766 ;; Return value:  Size  Location     Type
 14767 ;;		None               void
 14768 ;; Registers used:
 14769 ;;		wreg, status,2, status,0
 14770 ;; Tracked objects:
 14771 ;;		On entry : F/2
 14772 ;;		On exit  : F/0
 14773 ;;		Unchanged: 0/0
 14774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14775 ;;      Params:         0       4       0       0       0       0       0
 14776 ;;      Locals:         0       5       0       0       0       0       0
 14777 ;;      Temps:          0       6       0       0       0       0       0
 14778 ;;      Totals:         0      15       0       0       0       0       0
 14779 ;;Total ram usage:       15 bytes
 14780 ;; Hardware stack levels used:    1
 14781 ;; Hardware stack levels required when called:    3
 14782 ;; This function calls:
 14783 ;;		Nothing
 14784 ;; This function is called by:
 14785 ;;		_doModeVerbose
 14786 ;; This function uses a non-reentrant model
 14787 ;;
 14788                           
 14789                           	psect	text23
 14790  00285C                     __ptext23:
 14791                           	opt stack 0
 14792  00285C                     _setFilter:
 14793                           	opt stack 26
 14794                           
 14795                           ;incstack = 0
 14796                           ;incstack = 0
 14797                           ;setFilter@filter stored from wreg
 14798  00285C  CFE8 F06A          	movff	wreg,setFilter@filter
 14799                           
 14800                           ; BSR set to: 2
 14801                           ;main.c: 2772: uint8_t sidh = (long) val >> 21L;
 14802  002860  0E15               	movlw	21
 14803  002862  0100               	movlb	0	; () banked
 14804  002864  6F64               	movwf	??_setFilter& (0+255),b
 14805  002866  C060  F065         	movff	setFilter@val,??_setFilter+1
 14806  00286A  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 14807  00286E  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 14808  002872  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 14809  002876                     u15335:
 14810  002876  6764               	tstfsz	??_setFilter& (0+255),b
 14811  002878  D001               	goto	u15336
 14812  00287A  D007               	goto	u15337
 14813  00287C                     u15336:
 14814  00287C  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 14815  00287E  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14816  002880  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14817  002882  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14818  002884  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 14819  002886  2F64               	decfsz	??_setFilter& (0+255),f,b
 14820  002888  D7F6               	goto	u15335
 14821  00288A                     u15337:
 14822  00288A  5165               	movf	(??_setFilter+1)& (0+255),w,b
 14823  00288C  6F6B               	movwf	setFilter@sidh& (0+255),b
 14824                           
 14825                           ;main.c: 2773: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 14826                           ;main.c: 2774: ((long) (val) & 0x03L) |
 14827                           ;main.c: 2775: 0x08;
 14828  00288E  C060  F064         	movff	setFilter@val,??_setFilter
 14829  002892  0E03               	movlw	3
 14830  002894  1764               	andwf	??_setFilter& (0+255),f,b
 14831  002896  0E0D               	movlw	13
 14832  002898  6F65               	movwf	(??_setFilter+1)& (0+255),b
 14833  00289A  C060  F066         	movff	setFilter@val,??_setFilter+2
 14834  00289E  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 14835  0028A2  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 14836  0028A6  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 14837  0028AA                     u15345:
 14838  0028AA  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 14839  0028AC  D001               	goto	u15346
 14840  0028AE  D007               	goto	u15347
 14841  0028B0                     u15346:
 14842  0028B0  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 14843  0028B2  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 14844  0028B4  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 14845  0028B6  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 14846  0028B8  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 14847  0028BA  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 14848  0028BC  D7F6               	goto	u15345
 14849  0028BE                     u15347:
 14850  0028BE  5166               	movf	(??_setFilter+2)& (0+255),w,b
 14851  0028C0  0BE0               	andlw	224
 14852  0028C2  1164               	iorwf	??_setFilter& (0+255),w,b
 14853  0028C4  0908               	iorlw	8
 14854  0028C6  6F6C               	movwf	setFilter@sidl& (0+255),b
 14855                           
 14856                           ; BSR set to: 0
 14857                           ;main.c: 2776: uint8_t eidh = (long) val >> 8L;
 14858  0028C8  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 14859                           
 14860                           ; BSR set to: 0
 14861                           ;main.c: 2777: uint8_t eidl = val;
 14862  0028CC  C060  F06E         	movff	setFilter@val,setFilter@eidl
 14863                           
 14864                           ;main.c: 2779: switch (filter) {
 14865  0028D0  D090               	goto	l12056
 14866  0028D2                     l1231:
 14867                           
 14868                           ; BSR set to: 0
 14869                           ;main.c: 2782: RXF0SIDH = sidh;
 14870  0028D2  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 14871                           
 14872                           ;main.c: 2783: RXF0SIDL = sidl;
 14873  0028D6  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 14874                           
 14875                           ;main.c: 2784: RXF0EIDH = eidh;
 14876  0028DA  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 14877                           
 14878                           ;main.c: 2785: RXF0EIDL = eidl;
 14879  0028DE  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 14880                           
 14881                           ;main.c: 2786: break;
 14882  0028E2  D0AA               	goto	l1248
 14883  0028E4                     l1233:
 14884                           
 14885                           ; BSR set to: 0
 14886                           ;main.c: 2789: RXF1SIDH = sidh;
 14887  0028E4  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 14888                           
 14889                           ;main.c: 2790: RXF1SIDL = sidl;
 14890  0028E8  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 14891                           
 14892                           ;main.c: 2791: RXF1EIDH = eidh;
 14893  0028EC  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 14894                           
 14895                           ;main.c: 2792: RXF1EIDL = eidl;
 14896  0028F0  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 14897                           
 14898                           ;main.c: 2793: break;
 14899  0028F4  D0A1               	goto	l1248
 14900  0028F6                     l1234:
 14901                           
 14902                           ; BSR set to: 0
 14903                           ;main.c: 2796: RXF2SIDH = sidh;
 14904  0028F6  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 14905                           
 14906                           ;main.c: 2797: RXF2SIDL = sidl;
 14907  0028FA  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 14908                           
 14909                           ;main.c: 2798: RXF2EIDH = eidh;
 14910  0028FE  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 14911                           
 14912                           ;main.c: 2799: RXF2EIDL = eidl;
 14913  002902  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 14914                           
 14915                           ;main.c: 2800: break;
 14916  002906  D098               	goto	l1248
 14917  002908                     l1235:
 14918                           
 14919                           ; BSR set to: 0
 14920                           ;main.c: 2803: RXF3SIDH = sidh;
 14921  002908  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 14922                           
 14923                           ;main.c: 2804: RXF3SIDL = sidl;
 14924  00290C  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 14925                           
 14926                           ;main.c: 2805: RXF3EIDH = eidh;
 14927  002910  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 14928                           
 14929                           ;main.c: 2806: RXF3EIDL = eidl;
 14930  002914  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 14931                           
 14932                           ;main.c: 2807: break;
 14933  002918  D08F               	goto	l1248
 14934  00291A                     l1236:
 14935                           
 14936                           ; BSR set to: 0
 14937                           ;main.c: 2810: RXF4SIDH = sidh;
 14938  00291A  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 14939                           
 14940                           ;main.c: 2811: RXF4SIDL = sidl;
 14941  00291E  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 14942                           
 14943                           ;main.c: 2812: RXF4EIDH = eidh;
 14944  002922  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 14945                           
 14946                           ;main.c: 2813: RXF4EIDL = eidl;
 14947  002926  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 14948                           
 14949                           ;main.c: 2814: break;
 14950  00292A  D086               	goto	l1248
 14951  00292C                     l1237:
 14952                           
 14953                           ; BSR set to: 0
 14954                           ;main.c: 2817: RXF5SIDH = sidh;
 14955  00292C  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 14956                           
 14957                           ;main.c: 2818: RXF5SIDL = sidl;
 14958  002930  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 14959                           
 14960                           ;main.c: 2819: RXF5EIDH = eidh;
 14961  002934  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 14962                           
 14963                           ;main.c: 2820: RXF5EIDL = eidl;
 14964  002938  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 14965                           
 14966                           ;main.c: 2821: break;
 14967  00293C  D07D               	goto	l1248
 14968  00293E                     l1238:
 14969                           
 14970                           ; BSR set to: 0
 14971                           ;main.c: 2824: RXF6SIDH = sidh;
 14972  00293E  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 14973                           
 14974                           ;main.c: 2825: RXF6SIDL = sidl;
 14975  002942  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 14976                           
 14977                           ;main.c: 2826: RXF6EIDH = eidh;
 14978  002946  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 14979                           
 14980                           ;main.c: 2827: RXF6EIDL = eidl;
 14981  00294A  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 14982                           
 14983                           ;main.c: 2828: break;
 14984  00294E  D074               	goto	l1248
 14985  002950                     l1239:
 14986                           
 14987                           ; BSR set to: 0
 14988                           ;main.c: 2831: RXF7SIDH = sidh;
 14989  002950  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 14990                           
 14991                           ;main.c: 2832: RXF7SIDL = sidl;
 14992  002954  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 14993                           
 14994                           ;main.c: 2833: RXF7EIDH = eidh;
 14995  002958  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 14996                           
 14997                           ;main.c: 2834: RXF7EIDL = eidl;
 14998  00295C  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 14999                           
 15000                           ;main.c: 2835: break;
 15001  002960  D06B               	goto	l1248
 15002  002962                     l1240:
 15003                           
 15004                           ; BSR set to: 0
 15005                           ;main.c: 2838: RXF8SIDH = sidh;
 15006  002962  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 15007                           
 15008                           ;main.c: 2839: RXF8SIDL = sidl;
 15009  002966  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 15010                           
 15011                           ;main.c: 2840: RXF8EIDH = eidh;
 15012  00296A  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 15013                           
 15014                           ;main.c: 2841: RXF8EIDL = eidl;
 15015  00296E  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 15016                           
 15017                           ;main.c: 2842: break;
 15018  002972  D062               	goto	l1248
 15019  002974                     l1241:
 15020                           
 15021                           ; BSR set to: 0
 15022                           ;main.c: 2845: RXF9SIDH = sidh;
 15023  002974  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 15024                           
 15025                           ;main.c: 2846: RXF9SIDL = sidl;
 15026  002978  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 15027                           
 15028                           ;main.c: 2847: RXF9EIDH = eidh;
 15029  00297C  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 15030                           
 15031                           ;main.c: 2848: RXF9EIDL = eidl;
 15032  002980  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 15033                           
 15034                           ;main.c: 2849: break;
 15035  002984  D059               	goto	l1248
 15036  002986                     l1242:
 15037                           
 15038                           ; BSR set to: 0
 15039                           ;main.c: 2852: RXF10SIDH = sidh;
 15040  002986  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 15041                           
 15042                           ;main.c: 2853: RXF10SIDL = sidl;
 15043  00298A  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 15044                           
 15045                           ;main.c: 2854: RXF10EIDH = eidh;
 15046  00298E  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 15047                           
 15048                           ;main.c: 2855: RXF10EIDL = eidl;
 15049  002992  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 15050                           
 15051                           ;main.c: 2856: break;
 15052  002996  D050               	goto	l1248
 15053  002998                     l1243:
 15054                           
 15055                           ; BSR set to: 0
 15056                           ;main.c: 2859: RXF11SIDH = sidh;
 15057  002998  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 15058                           
 15059                           ;main.c: 2860: RXF11SIDL = sidl;
 15060  00299C  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 15061                           
 15062                           ;main.c: 2861: RXF11EIDH = eidh;
 15063  0029A0  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 15064                           
 15065                           ;main.c: 2862: RXF11EIDL = eidl;
 15066  0029A4  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 15067                           
 15068                           ;main.c: 2863: break;
 15069  0029A8  D047               	goto	l1248
 15070  0029AA                     l1244:
 15071                           
 15072                           ; BSR set to: 0
 15073                           ;main.c: 2866: RXF12SIDH = sidh;
 15074  0029AA  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 15075                           
 15076                           ;main.c: 2867: RXF12SIDL = sidl;
 15077  0029AE  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 15078                           
 15079                           ;main.c: 2868: RXF12EIDH = eidh;
 15080  0029B2  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 15081                           
 15082                           ;main.c: 2869: RXF12EIDL = eidl;
 15083  0029B6  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 15084                           
 15085                           ;main.c: 2870: break;
 15086  0029BA  D03E               	goto	l1248
 15087  0029BC                     l1245:
 15088                           
 15089                           ; BSR set to: 0
 15090                           ;main.c: 2873: RXF13SIDH = sidh;
 15091  0029BC  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 15092                           
 15093                           ;main.c: 2874: RXF13SIDL = sidl;
 15094  0029C0  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 15095                           
 15096                           ;main.c: 2875: RXF13EIDH = eidh;
 15097  0029C4  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 15098                           
 15099                           ;main.c: 2876: RXF13EIDL = eidl;
 15100  0029C8  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 15101                           
 15102                           ;main.c: 2877: break;
 15103  0029CC  D035               	goto	l1248
 15104  0029CE                     l1246:
 15105                           
 15106                           ; BSR set to: 0
 15107                           ;main.c: 2880: RXF14SIDH = sidh;
 15108  0029CE  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 15109                           
 15110                           ;main.c: 2881: RXF14SIDL = sidl;
 15111  0029D2  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 15112                           
 15113                           ;main.c: 2882: RXF14EIDH = eidh;
 15114  0029D6  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 15115                           
 15116                           ;main.c: 2883: RXF14EIDL = eidl;
 15117  0029DA  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 15118                           
 15119                           ;main.c: 2884: break;
 15120  0029DE  D02C               	goto	l1248
 15121  0029E0                     l1247:
 15122                           
 15123                           ; BSR set to: 0
 15124                           ;main.c: 2887: RXF15SIDH = sidh;
 15125  0029E0  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 15126                           
 15127                           ;main.c: 2888: RXF15SIDL = sidl;
 15128  0029E4  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 15129                           
 15130                           ;main.c: 2889: RXF15EIDH = eidh;
 15131  0029E8  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 15132                           
 15133                           ;main.c: 2890: RXF15EIDL = eidl;
 15134  0029EC  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 15135                           
 15136                           ;main.c: 2891: break;
 15137  0029F0  D023               	goto	l1248
 15138  0029F2                     l12056:
 15139                           
 15140                           ; BSR set to: 0
 15141  0029F2  516A               	movf	setFilter@filter& (0+255),w,b
 15142                           
 15143                           ; Switch size 1, requested type "space"
 15144                           ; Number of cases is 16, Range of values is 0 to 15
 15145                           ; switch strategies available:
 15146                           ; Name         Instructions Cycles
 15147                           ; simple_byte           49    25 (average)
 15148                           ;	Chosen strategy is simple_byte
 15149  0029F4  E101 D76D          	bz	l1231
 15150  0029F8  0A01               	xorlw	1	; case 1
 15151  0029FA  E101 D773          	bz	l1233
 15152  0029FE  0A03               	xorlw	3	; case 2
 15153  002A00  E101 D779          	bz	l1234
 15154  002A04  0A01               	xorlw	1	; case 3
 15155  002A06  E080               	bz	l1235
 15156  002A08  0A07               	xorlw	7	; case 4
 15157  002A0A  E087               	bz	l1236
 15158  002A0C  0A01               	xorlw	1	; case 5
 15159  002A0E  E08E               	bz	l1237
 15160  002A10  0A03               	xorlw	3	; case 6
 15161  002A12  E095               	bz	l1238
 15162  002A14  0A01               	xorlw	1	; case 7
 15163  002A16  E09C               	bz	l1239
 15164  002A18  0A0F               	xorlw	15	; case 8
 15165  002A1A  E0A3               	bz	l1240
 15166  002A1C  0A01               	xorlw	1	; case 9
 15167  002A1E  E0AA               	bz	l1241
 15168  002A20  0A03               	xorlw	3	; case 10
 15169  002A22  E0B1               	bz	l1242
 15170  002A24  0A01               	xorlw	1	; case 11
 15171  002A26  E0B8               	bz	l1243
 15172  002A28  0A07               	xorlw	7	; case 12
 15173  002A2A  E0BF               	bz	l1244
 15174  002A2C  0A01               	xorlw	1	; case 13
 15175  002A2E  E0C6               	bz	l1245
 15176  002A30  0A03               	xorlw	3	; case 14
 15177  002A32  E0CD               	bz	l1246
 15178  002A34  0A01               	xorlw	1	; case 15
 15179  002A36  E0D4               	bz	l1247
 15180  002A38                     l1248:
 15181                           
 15182                           ; BSR set to: 0
 15183  002A38  0012               	return	
 15184  002A3A                     __end_of_setFilter:
 15185                           	opt stack 0
 15186                           tblptru	equ	0xFF8
 15187                           tblptrh	equ	0xFF7
 15188                           tblptrl	equ	0xFF6
 15189                           tablat	equ	0xFF5
 15190                           prodh	equ	0xFF4
 15191                           prodl	equ	0xFF3
 15192                           intcon	equ	0xFF2
 15193                           indf0	equ	0xFEF
 15194                           postinc0	equ	0xFEE
 15195                           fsr0h	equ	0xFEA
 15196                           fsr0l	equ	0xFE9
 15197                           wreg	equ	0xFE8
 15198                           indf1	equ	0xFE7
 15199                           postinc1	equ	0xFE6
 15200                           postdec1	equ	0xFE5
 15201                           fsr1h	equ	0xFE2
 15202                           fsr1l	equ	0xFE1
 15203                           indf2	equ	0xFDF
 15204                           postinc2	equ	0xFDE
 15205                           postdec2	equ	0xFDD
 15206                           plusw2	equ	0xFDB
 15207                           fsr2h	equ	0xFDA
 15208                           fsr2l	equ	0xFD9
 15209                           status	equ	0xFD8
 15210                           
 15211 ;; *************** function _writeRegisterExtended *****************
 15212 ;; Defined at:
 15213 ;;		line 2334 in file "main.c"
 15214 ;; Parameters:    Size  Location     Type
 15215 ;;  nodeid          1    wreg     unsigned char 
 15216 ;;  page            2   86[BANK0 ] unsigned short 
 15217 ;;  reg             1   88[BANK0 ] unsigned char 
 15218 ;;  timeout         2   89[BANK0 ] unsigned short 
 15219 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15220 ;;		 -> doModeVerbose@value_1156(1), 
 15221 ;; Auto vars:     Size  Location     Type
 15222 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15223 ;; Return value:  Size  Location     Type
 15224 ;;                  1    wreg      enum E15660
 15225 ;; Registers used:
 15226 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15227 ;; Tracked objects:
 15228 ;;		On entry : F/2
 15229 ;;		On exit  : E/0
 15230 ;;		Unchanged: 0/0
 15231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15232 ;;      Params:         0       7       0       0       0       0       0
 15233 ;;      Locals:         0       1       0       0       0       0       0
 15234 ;;      Temps:          0       4       0       0       0       0       0
 15235 ;;      Totals:         0      12       0       0       0       0       0
 15236 ;;Total ram usage:       12 bytes
 15237 ;; Hardware stack levels used:    1
 15238 ;; Hardware stack levels required when called:    7
 15239 ;; This function calls:
 15240 ;;		_sendVSCPFrame
 15241 ;;		_getVSCPFrame
 15242 ;; This function is called by:
 15243 ;;		_doModeVerbose
 15244 ;; This function uses a non-reentrant model
 15245 ;;
 15246                           
 15247                           	psect	text24
 15248  0039AC                     __ptext24:
 15249                           	opt stack 0
 15250  0039AC                     _writeRegisterExtended:
 15251                           	opt stack 22
 15252                           
 15253                           ; BSR set to: 0
 15254                           ;incstack = 0
 15255                           ;incstack = 0
 15256                           ;writeRegisterExtended@nodeid stored from wreg
 15257  0039AC  CFE8 F0C1          	movff	wreg,writeRegisterExtended@nodeid
 15258                           
 15259                           ; BSR set to: 2
 15260                           ;main.c: 2335: vscpData[ 0 ] = nodeid;
 15261  0039B0  C0C1  F1A4         	movff	writeRegisterExtended@nodeid,_vscpData
 15262                           
 15263                           ; BSR set to: 2
 15264                           ;main.c: 2336: vscpData[ 1 ] = page >> 8;
 15265  0039B4  0100               	movlb	0	; () banked
 15266  0039B6  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15267  0039B8  0101               	movlb	1	; () banked
 15268  0039BA  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15269                           
 15270                           ; BSR set to: 1
 15271                           ;main.c: 2337: vscpData[ 2 ] = page & 0xff;
 15272  0039BC  C0B6  F1A6         	movff	writeRegisterExtended@page,_vscpData+2
 15273                           
 15274                           ; BSR set to: 1
 15275                           ;main.c: 2338: vscpData[ 3 ] = reg;
 15276  0039C0  C0B8  F1A7         	movff	writeRegisterExtended@reg,_vscpData+3
 15277                           
 15278                           ; BSR set to: 1
 15279                           ;main.c: 2339: vscpData[ 4 ] = *value;
 15280  0039C4  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15281  0039C8  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15282  0039CC  50DF               	movf	indf2,w,c
 15283  0039CE  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15284                           
 15285                           ; BSR set to: 1
 15286                           ;main.c: 2341: if (sendVSCPFrame(0,
 15287                           ;main.c: 2342: 38,
 15288                           ;main.c: 2343: 0,
 15289                           ;main.c: 2344: 0,
 15290                           ;main.c: 2345: 5,
 15291                           ;main.c: 2346: vscpData)) {
 15292  0039D0  0100               	movlb	0	; () banked
 15293  0039D2  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15294  0039D4  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15295  0039D6  0E26               	movlw	38
 15296  0039D8  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15297  0039DA  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15298  0039DC  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15299  0039DE  0E05               	movlw	5
 15300  0039E0  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15301  0039E2  0E01               	movlw	high _vscpData
 15302  0039E4  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15303  0039E6  0EA4               	movlw	low _vscpData
 15304  0039E8  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15305  0039EA  EC90  F022         	call	_sendVSCPFrame	;wreg free
 15306  0039EE  0900               	iorlw	0
 15307  0039F0  E05E               	bz	l11956
 15308                           
 15309                           ; BSR set to: 0
 15310                           ;main.c: 2348: timekeeper = 0;
 15311  0039F2  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15312  0039F4  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15313  0039F6  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15314  0039F8  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15315                           
 15316                           ;main.c: 2349: while (timekeeper < timeout) {
 15317  0039FA  D049               	goto	l11954
 15318  0039FC                     l1088:
 15319                           
 15320                           ; BSR set to: 0
 15321  0039FC  0004               	clrwdt		;# 
 15322                           
 15323                           ;main.c: 2353: if (getVSCPFrame(&vscpClass,
 15324                           ;main.c: 2354: &vscpType,
 15325                           ;main.c: 2355: &vscpNodeId,
 15326                           ;main.c: 2356: &vscpPriority,
 15327                           ;main.c: 2357: &vscpSize,
 15328                           ;main.c: 2358: vscpData)) {
 15329  0039FE  0E01               	movlw	high _vscpClass
 15330  003A00  0100               	movlb	0	; () banked
 15331  003A02  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15332  003A04  0EAC               	movlw	low _vscpClass
 15333  003A06  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15334  003A08  0E01               	movlw	high _vscpType
 15335  003A0A  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15336  003A0C  0EB1               	movlw	low _vscpType
 15337  003A0E  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15338  003A10  0E01               	movlw	high _vscpNodeId
 15339  003A12  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15340  003A14  0EAE               	movlw	low _vscpNodeId
 15341  003A16  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15342  003A18  0E01               	movlw	high _vscpPriority
 15343  003A1A  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15344  003A1C  0EAF               	movlw	low _vscpPriority
 15345  003A1E  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15346  003A20  0E01               	movlw	high _vscpSize
 15347  003A22  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15348  003A24  0EB0               	movlw	low _vscpSize
 15349  003A26  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15350  003A28  0E01               	movlw	high _vscpData
 15351  003A2A  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15352  003A2C  0EA4               	movlw	low _vscpData
 15353  003A2E  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15354  003A30  EC98  F025         	call	_getVSCPFrame	;wreg free
 15355  003A34  0900               	iorlw	0
 15356  003A36  E02B               	bz	l11954
 15357                           
 15358                           ; BSR set to: 0
 15359                           ;main.c: 2360: if ((nodeid == vscpNodeId) &&
 15360                           ;main.c: 2361: (5 == vscpSize) &&
 15361                           ;main.c: 2362: (0 == vscpData[ 0 ]) &&
 15362                           ;main.c: 2363: ((page >> 8) == vscpData[ 1 ]) &&
 15363                           ;main.c: 2364: ((page & 0xff) == vscpData[ 2 ]) &&
 15364                           ;main.c: 2365: (reg == vscpData[ 3 ]) &&
 15365                           ;main.c: 2366: (*value == vscpData[ 4 ])) {
 15366  003A38  0101               	movlb	1	; () banked
 15367  003A3A  51AE               	movf	_vscpNodeId& (0+255),w,b
 15368  003A3C  0100               	movlb	0	; () banked
 15369  003A3E  63C1               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15370  003A40  D026               	goto	l11954
 15371                           
 15372                           ; BSR set to: 0
 15373  003A42  0101               	movlb	1	; () banked
 15374  003A44  51B0               	movf	_vscpSize& (0+255),w,b
 15375  003A46  0A05               	xorlw	5
 15376  003A48  E122               	bnz	l11954
 15377                           
 15378                           ; BSR set to: 1
 15379  003A4A  67A4               	tstfsz	_vscpData& (0+255),b
 15380  003A4C  D020               	goto	l11954
 15381                           
 15382                           ; BSR set to: 1
 15383  003A4E  0100               	movlb	0	; () banked
 15384  003A50  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15385  003A52  0101               	movlb	1	; () banked
 15386  003A54  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15387  003A56  E11B               	bnz	l11954
 15388                           
 15389                           ; BSR set to: 1
 15390  003A58  0100               	movlb	0	; () banked
 15391  003A5A  51B6               	movf	writeRegisterExtended@page& (0+255),w,b
 15392  003A5C  EE21  F0A6         	lfsr	2,_vscpData+2
 15393  003A60  62DF               	cpfseq	indf2,c
 15394  003A62  D015               	goto	l11954
 15395                           
 15396                           ; BSR set to: 1
 15397  003A64  51B8               	movf	writeRegisterExtended@reg& (0+255),w,b
 15398  003A66  0101               	movlb	1	; () banked
 15399  003A68  EE21  F0A7         	lfsr	2,_vscpData+3
 15400  003A6C  62DF               	cpfseq	indf2,c
 15401  003A6E  D00F               	goto	l11954
 15402                           
 15403                           ; BSR set to: 1
 15404  003A70  51A8               	movf	(_vscpData+4)& (0+255),w,b
 15405  003A72  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15406  003A76  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15407  003A7A  62DF               	cpfseq	indf2,c
 15408  003A7C  D008               	goto	l11954
 15409                           
 15410                           ; BSR set to: 1
 15411                           ;main.c: 2367: *value = vscpData[ 1 ];
 15412  003A7E  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15413  003A82  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15414  003A86  C1A5  FFDF         	movff	_vscpData+1,indf2
 15415                           
 15416                           ; BSR set to: 1
 15417                           ;main.c: 2368: return 1;
 15418  003A8A  0E01               	movlw	1
 15419  003A8C  D011               	goto	l1091
 15420  003A8E                     l11954:
 15421  003A8E  0100               	movlb	0	; () banked
 15422  003A90  51B9               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15423  003A92  6FBD               	movwf	??_writeRegisterExtended& (0+255),b
 15424  003A94  51BA               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15425  003A96  6FBE               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15426  003A98  6BBF               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15427  003A9A  6BC0               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15428  003A9C  51BD               	movf	??_writeRegisterExtended& (0+255),w,b
 15429  003A9E  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15430  003AA0  51BE               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15431  003AA2  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15432  003AA4  51BF               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15433  003AA6  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15434  003AA8  51C0               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15435  003AAA  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15436  003AAC  E3A7               	bnc	l1088
 15437  003AAE                     l11956:
 15438                           
 15439                           ; BSR set to: 0
 15440                           ;main.c: 2369: }
 15441                           ;main.c: 2371: }
 15442                           ;main.c: 2373: }
 15443                           ;main.c: 2375: }
 15444                           ;main.c: 2377: return 0;
 15445  003AAE  0E00               	movlw	0
 15446  003AB0                     l1091:
 15447  003AB0  0012               	return	
 15448  003AB2                     __end_of_writeRegisterExtended:
 15449                           	opt stack 0
 15450                           tblptru	equ	0xFF8
 15451                           tblptrh	equ	0xFF7
 15452                           tblptrl	equ	0xFF6
 15453                           tablat	equ	0xFF5
 15454                           prodh	equ	0xFF4
 15455                           prodl	equ	0xFF3
 15456                           intcon	equ	0xFF2
 15457                           indf0	equ	0xFEF
 15458                           postinc0	equ	0xFEE
 15459                           fsr0h	equ	0xFEA
 15460                           fsr0l	equ	0xFE9
 15461                           wreg	equ	0xFE8
 15462                           indf1	equ	0xFE7
 15463                           postinc1	equ	0xFE6
 15464                           postdec1	equ	0xFE5
 15465                           fsr1h	equ	0xFE2
 15466                           fsr1l	equ	0xFE1
 15467                           indf2	equ	0xFDF
 15468                           postinc2	equ	0xFDE
 15469                           postdec2	equ	0xFDD
 15470                           plusw2	equ	0xFDB
 15471                           fsr2h	equ	0xFDA
 15472                           fsr2l	equ	0xFD9
 15473                           status	equ	0xFD8
 15474                           
 15475 ;; *************** function _printBinary *****************
 15476 ;; Defined at:
 15477 ;;		line 2421 in file "main.c"
 15478 ;; Parameters:    Size  Location     Type
 15479 ;;  value           1    wreg     unsigned char 
 15480 ;; Auto vars:     Size  Location     Type
 15481 ;;  value           1    3[BANK0 ] unsigned char 
 15482 ;;  i               2    4[BANK0 ] int 
 15483 ;; Return value:  Size  Location     Type
 15484 ;;		None               void
 15485 ;; Registers used:
 15486 ;;		wreg, status,2, status,0, cstack
 15487 ;; Tracked objects:
 15488 ;;		On entry : F/2
 15489 ;;		On exit  : F/0
 15490 ;;		Unchanged: 0/0
 15491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15492 ;;      Params:         0       0       0       0       0       0       0
 15493 ;;      Locals:         0       3       0       0       0       0       0
 15494 ;;      Temps:          0       2       0       0       0       0       0
 15495 ;;      Totals:         0       5       0       0       0       0       0
 15496 ;;Total ram usage:        5 bytes
 15497 ;; Hardware stack levels used:    1
 15498 ;; Hardware stack levels required when called:    4
 15499 ;; This function calls:
 15500 ;;		_WriteUSART
 15501 ;; This function is called by:
 15502 ;;		_doModeVerbose
 15503 ;; This function uses a non-reentrant model
 15504 ;;
 15505                           
 15506                           	psect	text25
 15507  005238                     __ptext25:
 15508                           	opt stack 0
 15509  005238                     _printBinary:
 15510                           	opt stack 25
 15511                           
 15512                           ;incstack = 0
 15513                           ;incstack = 0
 15514                           ;printBinary@value stored from wreg
 15515  005238  CFE8 F063          	movff	wreg,printBinary@value
 15516                           
 15517                           ; BSR set to: 2
 15518                           ;main.c: 2422: int i;
 15519                           ;main.c: 2424: for (i = 7; i >= 0; i--) {
 15520  00523C  0100               	movlb	0	; () banked
 15521  00523E  6B65               	clrf	(printBinary@i+1)& (0+255),b
 15522  005240  0E07               	movlw	7
 15523  005242  6F64               	movwf	printBinary@i& (0+255),b
 15524  005244                     l11906:
 15525                           
 15526                           ; BSR set to: 0
 15527                           ;main.c: 2425: if (value & (1 << i)) {
 15528  005244  C064  F061         	movff	printBinary@i,??_printBinary
 15529  005248  0E01               	movlw	1
 15530  00524A  6F62               	movwf	(??_printBinary+1)& (0+255),b
 15531  00524C  2B61               	incf	??_printBinary& (0+255),f,b
 15532  00524E  D002               	goto	u15094
 15533  005250                     u15095:
 15534  005250  90D8               	bcf	status,0,c
 15535  005252  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 15536  005254                     u15094:
 15537  005254  2F61               	decfsz	??_printBinary& (0+255),f,b
 15538  005256  D7FC               	goto	u15095
 15539  005258  5162               	movf	(??_printBinary+1)& (0+255),w,b
 15540  00525A  1563               	andwf	printBinary@value& (0+255),w,b
 15541  00525C  E006               	bz	l1111
 15542  00525E                     l1107:
 15543  00525E  A2AC               	btfss	4012,1,c	;volatile
 15544  005260  D7FE               	goto	l1107
 15545                           
 15546                           ;main.c: 2427: WriteUSART('1');
 15547  005262  0E31               	movlw	49
 15548  005264  EC98  F02B         	call	_WriteUSART
 15549                           
 15550                           ;main.c: 2428: } else {
 15551  005268  D005               	goto	l11914
 15552  00526A                     l1111:
 15553  00526A  A2AC               	btfss	4012,1,c	;volatile
 15554  00526C  D7FE               	goto	l1111
 15555                           
 15556                           ;main.c: 2430: WriteUSART('0');
 15557  00526E  0E30               	movlw	48
 15558  005270  EC98  F02B         	call	_WriteUSART
 15559  005274                     l11914:
 15560  005274  0100               	movlb	0	; () banked
 15561  005276  0764               	decf	printBinary@i& (0+255),f,b
 15562  005278  A0D8               	btfss	status,0,c
 15563  00527A  0765               	decf	(printBinary@i+1)& (0+255),f,b
 15564                           
 15565                           ; BSR set to: 0
 15566  00527C  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 15567                           
 15568                           ; BSR set to: 0
 15569  00527E  0012               	return	
 15570  005280  D7E1               	goto	l11906
 15571  005282                     __end_of_printBinary:
 15572                           	opt stack 0
 15573                           tblptru	equ	0xFF8
 15574                           tblptrh	equ	0xFF7
 15575                           tblptrl	equ	0xFF6
 15576                           tablat	equ	0xFF5
 15577                           prodh	equ	0xFF4
 15578                           prodl	equ	0xFF3
 15579                           intcon	equ	0xFF2
 15580                           indf0	equ	0xFEF
 15581                           postinc0	equ	0xFEE
 15582                           fsr0h	equ	0xFEA
 15583                           fsr0l	equ	0xFE9
 15584                           wreg	equ	0xFE8
 15585                           indf1	equ	0xFE7
 15586                           postinc1	equ	0xFE6
 15587                           postdec1	equ	0xFE5
 15588                           fsr1h	equ	0xFE2
 15589                           fsr1l	equ	0xFE1
 15590                           indf2	equ	0xFDF
 15591                           postinc2	equ	0xFDE
 15592                           postdec2	equ	0xFDD
 15593                           plusw2	equ	0xFDB
 15594                           fsr2h	equ	0xFDA
 15595                           fsr2l	equ	0xFD9
 15596                           status	equ	0xFD8
 15597                           
 15598 ;; *************** function _readRegisterExtended *****************
 15599 ;; Defined at:
 15600 ;;		line 2233 in file "main.c"
 15601 ;; Parameters:    Size  Location     Type
 15602 ;;  nodeid          1    wreg     unsigned char 
 15603 ;;  page            2   86[BANK0 ] unsigned short 
 15604 ;;  reg             1   88[BANK0 ] unsigned char 
 15605 ;;  timeout         2   89[BANK0 ] unsigned short 
 15606 ;;  value           2   91[BANK0 ] PTR unsigned char 
 15607 ;;		 -> doModeVerbose@value(1), 
 15608 ;; Auto vars:     Size  Location     Type
 15609 ;;  nodeid          1   97[BANK0 ] unsigned char 
 15610 ;; Return value:  Size  Location     Type
 15611 ;;                  1    wreg      enum E15660
 15612 ;; Registers used:
 15613 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15614 ;; Tracked objects:
 15615 ;;		On entry : F/2
 15616 ;;		On exit  : E/0
 15617 ;;		Unchanged: 0/0
 15618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15619 ;;      Params:         0       7       0       0       0       0       0
 15620 ;;      Locals:         0       1       0       0       0       0       0
 15621 ;;      Temps:          0       4       0       0       0       0       0
 15622 ;;      Totals:         0      12       0       0       0       0       0
 15623 ;;Total ram usage:       12 bytes
 15624 ;; Hardware stack levels used:    1
 15625 ;; Hardware stack levels required when called:    7
 15626 ;; This function calls:
 15627 ;;		_sendVSCPFrame
 15628 ;;		_getVSCPFrame
 15629 ;; This function is called by:
 15630 ;;		_doModeVerbose
 15631 ;; This function uses a non-reentrant model
 15632 ;;
 15633                           
 15634                           	psect	text26
 15635  003CBC                     __ptext26:
 15636                           	opt stack 0
 15637  003CBC                     _readRegisterExtended:
 15638                           	opt stack 22
 15639                           
 15640                           ; BSR set to: 0
 15641                           ;incstack = 0
 15642                           ;incstack = 0
 15643                           ;readRegisterExtended@nodeid stored from wreg
 15644  003CBC  CFE8 F0C1          	movff	wreg,readRegisterExtended@nodeid
 15645                           
 15646                           ; BSR set to: 2
 15647                           ;main.c: 2234: vscpData[ 0 ] = nodeid;
 15648  003CC0  C0C1  F1A4         	movff	readRegisterExtended@nodeid,_vscpData
 15649                           
 15650                           ; BSR set to: 2
 15651                           ;main.c: 2235: vscpData[ 1 ] = page >> 8;
 15652  003CC4  0100               	movlb	0	; () banked
 15653  003CC6  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15654  003CC8  0101               	movlb	1	; () banked
 15655  003CCA  6FA5               	movwf	(_vscpData+1)& (0+255),b
 15656                           
 15657                           ; BSR set to: 1
 15658                           ;main.c: 2236: vscpData[ 2 ] = page & 0xff;
 15659  003CCC  C0B6  F1A6         	movff	readRegisterExtended@page,_vscpData+2
 15660                           
 15661                           ; BSR set to: 1
 15662                           ;main.c: 2237: vscpData[ 3 ] = reg;
 15663  003CD0  C0B8  F1A7         	movff	readRegisterExtended@reg,_vscpData+3
 15664                           
 15665                           ; BSR set to: 1
 15666                           ;main.c: 2238: vscpData[ 4 ] = 1;
 15667  003CD4  0E01               	movlw	1
 15668  003CD6  6FA8               	movwf	(_vscpData+4)& (0+255),b
 15669                           
 15670                           ; BSR set to: 1
 15671                           ;main.c: 2240: if (sendVSCPFrame(0,
 15672                           ;main.c: 2241: 37,
 15673                           ;main.c: 2242: 0,
 15674                           ;main.c: 2243: 0,
 15675                           ;main.c: 2244: 5,
 15676                           ;main.c: 2245: vscpData)) {
 15677  003CD8  0100               	movlb	0	; () banked
 15678  003CDA  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15679  003CDC  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15680  003CDE  0E25               	movlw	37
 15681  003CE0  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15682  003CE2  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15683  003CE4  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15684  003CE6  0E05               	movlw	5
 15685  003CE8  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15686  003CEA  0E01               	movlw	high _vscpData
 15687  003CEC  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15688  003CEE  0EA4               	movlw	low _vscpData
 15689  003CF0  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15690  003CF2  EC90  F022         	call	_sendVSCPFrame	;wreg free
 15691  003CF6  0900               	iorlw	0
 15692  003CF8  E05D               	bz	l11546
 15693                           
 15694                           ; BSR set to: 0
 15695                           ;main.c: 2247: timekeeper = 0;
 15696  003CFA  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 15697  003CFC  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 15698  003CFE  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 15699  003D00  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 15700                           
 15701                           ;main.c: 2248: while (timekeeper < timeout) {
 15702  003D02  D048               	goto	l11544
 15703  003D04                     l1070:
 15704                           
 15705                           ; BSR set to: 0
 15706  003D04  0004               	clrwdt		;# 
 15707                           
 15708                           ;main.c: 2252: if (getVSCPFrame(&vscpClass,
 15709                           ;main.c: 2253: &vscpType,
 15710                           ;main.c: 2254: &vscpNodeId,
 15711                           ;main.c: 2255: &vscpPriority,
 15712                           ;main.c: 2256: &vscpSize,
 15713                           ;main.c: 2257: vscpData)) {
 15714  003D06  0E01               	movlw	high _vscpClass
 15715  003D08  0100               	movlb	0	; () banked
 15716  003D0A  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15717  003D0C  0EAC               	movlw	low _vscpClass
 15718  003D0E  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15719  003D10  0E01               	movlw	high _vscpType
 15720  003D12  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15721  003D14  0EB1               	movlw	low _vscpType
 15722  003D16  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15723  003D18  0E01               	movlw	high _vscpNodeId
 15724  003D1A  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15725  003D1C  0EAE               	movlw	low _vscpNodeId
 15726  003D1E  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15727  003D20  0E01               	movlw	high _vscpPriority
 15728  003D22  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 15729  003D24  0EAF               	movlw	low _vscpPriority
 15730  003D26  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 15731  003D28  0E01               	movlw	high _vscpSize
 15732  003D2A  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 15733  003D2C  0EB0               	movlw	low _vscpSize
 15734  003D2E  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 15735  003D30  0E01               	movlw	high _vscpData
 15736  003D32  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 15737  003D34  0EA4               	movlw	low _vscpData
 15738  003D36  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 15739  003D38  EC98  F025         	call	_getVSCPFrame	;wreg free
 15740  003D3C  0900               	iorlw	0
 15741  003D3E  E02A               	bz	l11544
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;main.c: 2258: if ((nodeid == vscpNodeId) &&
 15745                           ;main.c: 2259: (0 == vscpClass) &&
 15746                           ;main.c: 2260: (39 == vscpType) &&
 15747                           ;main.c: 2261: (5 == vscpSize) &&
 15748                           ;main.c: 2262: (0 == vscpData[ 0 ]) &&
 15749                           ;main.c: 2263: ((page >> 8) == vscpData[ 1 ]) &&
 15750                           ;main.c: 2264: ((page & 0xff) == vscpData[ 2 ]) &&
 15751                           ;main.c: 2265: (reg == vscpData[ 3 ])) {
 15752  003D40  0101               	movlb	1	; () banked
 15753  003D42  51AE               	movf	_vscpNodeId& (0+255),w,b
 15754  003D44  0100               	movlb	0	; () banked
 15755  003D46  63C1               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 15756  003D48  D025               	goto	l11544
 15757                           
 15758                           ; BSR set to: 0
 15759  003D4A  0101               	movlb	1	; () banked
 15760  003D4C  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 15761  003D4E  11AC               	iorwf	_vscpClass& (0+255),w,b
 15762  003D50  E121               	bnz	l11544
 15763                           
 15764                           ; BSR set to: 1
 15765  003D52  51B1               	movf	_vscpType& (0+255),w,b
 15766  003D54  0A27               	xorlw	39
 15767  003D56  E11E               	bnz	l11544
 15768                           
 15769                           ; BSR set to: 1
 15770  003D58  51B0               	movf	_vscpSize& (0+255),w,b
 15771  003D5A  0A05               	xorlw	5
 15772  003D5C  E11B               	bnz	l11544
 15773                           
 15774                           ; BSR set to: 1
 15775  003D5E  67A4               	tstfsz	_vscpData& (0+255),b
 15776  003D60  D019               	goto	l11544
 15777                           
 15778                           ; BSR set to: 1
 15779  003D62  0100               	movlb	0	; () banked
 15780  003D64  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15781  003D66  0101               	movlb	1	; () banked
 15782  003D68  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 15783  003D6A  E114               	bnz	l11544
 15784                           
 15785                           ; BSR set to: 1
 15786  003D6C  0100               	movlb	0	; () banked
 15787  003D6E  51B6               	movf	readRegisterExtended@page& (0+255),w,b
 15788  003D70  EE21  F0A6         	lfsr	2,_vscpData+2
 15789  003D74  62DF               	cpfseq	indf2,c
 15790  003D76  D00E               	goto	l11544
 15791                           
 15792                           ; BSR set to: 1
 15793  003D78  51B8               	movf	readRegisterExtended@reg& (0+255),w,b
 15794  003D7A  0101               	movlb	1	; () banked
 15795  003D7C  EE21  F0A7         	lfsr	2,_vscpData+3
 15796  003D80  62DF               	cpfseq	indf2,c
 15797  003D82  D008               	goto	l11544
 15798                           
 15799                           ; BSR set to: 1
 15800                           ;main.c: 2266: *value = vscpData[ 4 ];
 15801  003D84  C0BB  FFD9         	movff	readRegisterExtended@value,fsr2l
 15802  003D88  C0BC  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 15803  003D8C  C1A8  FFDF         	movff	_vscpData+4,indf2
 15804                           
 15805                           ; BSR set to: 1
 15806                           ;main.c: 2267: return 1;
 15807  003D90  0E01               	movlw	1
 15808  003D92  D011               	goto	l1073
 15809  003D94                     l11544:
 15810  003D94  0100               	movlb	0	; () banked
 15811  003D96  51B9               	movf	readRegisterExtended@timeout& (0+255),w,b
 15812  003D98  6FBD               	movwf	??_readRegisterExtended& (0+255),b
 15813  003D9A  51BA               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 15814  003D9C  6FBE               	movwf	(??_readRegisterExtended+1)& (0+255),b
 15815  003D9E  6BBF               	clrf	(??_readRegisterExtended+2)& (0+255),b
 15816  003DA0  6BC0               	clrf	(??_readRegisterExtended+3)& (0+255),b
 15817  003DA2  51BD               	movf	??_readRegisterExtended& (0+255),w,b
 15818  003DA4  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 15819  003DA6  51BE               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 15820  003DA8  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 15821  003DAA  51BF               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 15822  003DAC  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 15823  003DAE  51C0               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 15824  003DB0  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 15825  003DB2  E3A8               	bnc	l1070
 15826  003DB4                     l11546:
 15827                           
 15828                           ; BSR set to: 0
 15829                           ;main.c: 2268: }
 15830                           ;main.c: 2269: }
 15831                           ;main.c: 2270: }
 15832                           ;main.c: 2271: }
 15833                           ;main.c: 2273: return 0;
 15834  003DB4  0E00               	movlw	0
 15835  003DB6                     l1073:
 15836  003DB6  0012               	return	
 15837  003DB8                     __end_of_readRegisterExtended:
 15838                           	opt stack 0
 15839                           tblptru	equ	0xFF8
 15840                           tblptrh	equ	0xFF7
 15841                           tblptrl	equ	0xFF6
 15842                           tablat	equ	0xFF5
 15843                           prodh	equ	0xFF4
 15844                           prodl	equ	0xFF3
 15845                           intcon	equ	0xFF2
 15846                           indf0	equ	0xFEF
 15847                           postinc0	equ	0xFEE
 15848                           fsr0h	equ	0xFEA
 15849                           fsr0l	equ	0xFE9
 15850                           wreg	equ	0xFE8
 15851                           indf1	equ	0xFE7
 15852                           postinc1	equ	0xFE6
 15853                           postdec1	equ	0xFE5
 15854                           fsr1h	equ	0xFE2
 15855                           fsr1l	equ	0xFE1
 15856                           indf2	equ	0xFDF
 15857                           postinc2	equ	0xFDE
 15858                           postdec2	equ	0xFDD
 15859                           plusw2	equ	0xFDB
 15860                           fsr2h	equ	0xFDA
 15861                           fsr2l	equ	0xFD9
 15862                           status	equ	0xFD8
 15863                           
 15864 ;; *************** function _strcpy *****************
 15865 ;; Defined at:
 15866 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 15867 ;; Parameters:    Size  Location     Type
 15868 ;;  to              2    0[BANK0 ] PTR unsigned char 
 15869 ;;		 -> cmdbuf(80), 
 15870 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 15871 ;;		 -> cmdbuf(80), 
 15872 ;; Auto vars:     Size  Location     Type
 15873 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 15874 ;;		 -> cmdbuf(80), 
 15875 ;; Return value:  Size  Location     Type
 15876 ;;                  2    0[BANK0 ] PTR unsigned char 
 15877 ;; Registers used:
 15878 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15879 ;; Tracked objects:
 15880 ;;		On entry : F/1
 15881 ;;		On exit  : E/0
 15882 ;;		Unchanged: 0/0
 15883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15884 ;;      Params:         0       4       0       0       0       0       0
 15885 ;;      Locals:         0       2       0       0       0       0       0
 15886 ;;      Temps:          0       0       0       0       0       0       0
 15887 ;;      Totals:         0       6       0       0       0       0       0
 15888 ;;Total ram usage:        6 bytes
 15889 ;; Hardware stack levels used:    1
 15890 ;; Hardware stack levels required when called:    3
 15891 ;; This function calls:
 15892 ;;		Nothing
 15893 ;; This function is called by:
 15894 ;;		_doModeVerbose
 15895 ;; This function uses a non-reentrant model
 15896 ;;
 15897                           
 15898                           	psect	text27
 15899  0055F2                     __ptext27:
 15900                           	opt stack 0
 15901  0055F2                     _strcpy:
 15902                           	opt stack 26
 15903                           
 15904                           ; BSR set to: 1
 15905                           
 15906                           ;incstack = 0
 15907                           ;incstack = 0
 15908  0055F2  C060  F064         	movff	strcpy@to,strcpy@cp
 15909  0055F6  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 15910  0055FA  D005               	goto	l11498
 15911  0055FC                     l11496:
 15912  0055FC  0100               	movlb	0	; () banked
 15913  0055FE  4B64               	infsnz	strcpy@cp& (0+255),f,b
 15914  005600  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 15915  005602  4B62               	infsnz	strcpy@from& (0+255),f,b
 15916  005604  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 15917  005606                     l11498:
 15918  005606  C062  FFD9         	movff	strcpy@from,fsr2l
 15919  00560A  C063  FFDA         	movff	strcpy@from+1,fsr2h
 15920  00560E  C064  FFE1         	movff	strcpy@cp,fsr1l
 15921  005612  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 15922  005616  CFDF FFE7          	movff	indf2,indf1
 15923  00561A  50E7               	movf	indf1,w,c
 15924  00561C  B4D8               	btfsc	status,2,c
 15925  00561E  0012               	return	
 15926  005620  D7ED               	goto	l11496
 15927  005622                     __end_of_strcpy:
 15928                           	opt stack 0
 15929                           tblptru	equ	0xFF8
 15930                           tblptrh	equ	0xFF7
 15931                           tblptrl	equ	0xFF6
 15932                           tablat	equ	0xFF5
 15933                           prodh	equ	0xFF4
 15934                           prodl	equ	0xFF3
 15935                           intcon	equ	0xFF2
 15936                           indf0	equ	0xFEF
 15937                           postinc0	equ	0xFEE
 15938                           fsr0h	equ	0xFEA
 15939                           fsr0l	equ	0xFE9
 15940                           wreg	equ	0xFE8
 15941                           indf1	equ	0xFE7
 15942                           postinc1	equ	0xFE6
 15943                           postdec1	equ	0xFE5
 15944                           fsr1h	equ	0xFE2
 15945                           fsr1l	equ	0xFE1
 15946                           indf2	equ	0xFDF
 15947                           postinc2	equ	0xFDE
 15948                           postdec2	equ	0xFDD
 15949                           plusw2	equ	0xFDB
 15950                           fsr2h	equ	0xFDA
 15951                           fsr2l	equ	0xFD9
 15952                           status	equ	0xFD8
 15953                           
 15954 ;; *************** function _findNodes *****************
 15955 ;; Defined at:
 15956 ;;		line 2572 in file "main.c"
 15957 ;; Parameters:    Size  Location     Type
 15958 ;;		None
 15959 ;; Auto vars:     Size  Location     Type
 15960 ;;  i               1  105[BANK0 ] unsigned char 
 15961 ;;  value           1  104[BANK0 ] unsigned char 
 15962 ;;  nFound          1  103[BANK0 ] unsigned char 
 15963 ;; Return value:  Size  Location     Type
 15964 ;;		None               void
 15965 ;; Registers used:
 15966 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15967 ;; Tracked objects:
 15968 ;;		On entry : F/1
 15969 ;;		On exit  : 0/0
 15970 ;;		Unchanged: 0/0
 15971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15972 ;;      Params:         0       0       0       0       0       0       0
 15973 ;;      Locals:         0       5       0       0       0       0       0
 15974 ;;      Temps:          0       0       0       0       0       0       0
 15975 ;;      Totals:         0       5       0       0       0       0       0
 15976 ;;Total ram usage:        5 bytes
 15977 ;; Hardware stack levels used:    1
 15978 ;; Hardware stack levels required when called:    9
 15979 ;; This function calls:
 15980 ;;		_putsUSART
 15981 ;;		_printNodeFirmwareVersion
 15982 ;;		_printGUID
 15983 ;;		_printMDF
 15984 ;;		_itoa
 15985 ;;		_readRegister
 15986 ;; This function is called by:
 15987 ;;		_doModeVerbose
 15988 ;; This function uses a non-reentrant model
 15989 ;;
 15990                           
 15991                           	psect	text28
 15992  003DB8                     __ptext28:
 15993                           	opt stack 0
 15994  003DB8                     _findNodes:
 15995                           	opt stack 20
 15996                           
 15997                           ; BSR set to: 1
 15998                           ;main.c: 2573: uint8_t nFound = 0;
 15999                           
 16000                           ;incstack = 0
 16001                           ;incstack = 0
 16002  003DB8  0100               	movlb	0	; () banked
 16003  003DBA  6BC7               	clrf	findNodes@nFound& (0+255),b
 16004                           
 16005                           ; BSR set to: 0
 16006                           ;main.c: 2574: uint8_t i;
 16007                           ;main.c: 2575: uint8_t value;
 16008                           ;main.c: 2577: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16009  003DBC  0E71               	movlw	high STR_231
 16010  003DBE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16011  003DC0  0E53               	movlw	low STR_231
 16012  003DC2  6F61               	movwf	?_putsUSART& (0+255),b
 16013  003DC4  ECC9  F028         	call	_putsUSART	;wreg free
 16014                           
 16015                           ;main.c: 2579: for (i = 1; i != 0; i++) {
 16016  003DC8  0E01               	movlw	1
 16017  003DCA  0100               	movlb	0	; () banked
 16018  003DCC  6FC9               	movwf	findNodes@i& (0+255),b
 16019  003DCE                     l1172:
 16020                           
 16021                           ; BSR set to: 0
 16022  003DCE  0004               	clrwdt		;# 
 16023                           
 16024                           ;main.c: 2583: if (readRegister(i,
 16025                           ;main.c: 2584: 0xE0,
 16026                           ;main.c: 2585: rwtimeout,
 16027                           ;main.c: 2586: &value)) {
 16028  003DD0  0EE0               	movlw	224
 16029  003DD2  0100               	movlb	0	; () banked
 16030  003DD4  6FB6               	movwf	?_readRegister& (0+255),b
 16031  003DD6  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16032  003DDA  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16033  003DDC  0EC8               	movlw	low findNodes@value
 16034  003DDE  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16035  003DE0  51C9               	movf	findNodes@i& (0+255),w,b
 16036  003DE2  EC08  F021         	call	_readRegister
 16037  003DE6  0900               	iorlw	0
 16038  003DE8  E043               	bz	l11484
 16039                           
 16040                           ;main.c: 2587: putsUSART((char *) "Node found with node id = ");
 16041  003DEA  0E7B               	movlw	high STR_232
 16042  003DEC  0100               	movlb	0	; () banked
 16043  003DEE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16044  003DF0  0E99               	movlw	low STR_232
 16045  003DF2  6F61               	movwf	?_putsUSART& (0+255),b
 16046  003DF4  ECC9  F028         	call	_putsUSART	;wreg free
 16047                           
 16048                           ;main.c: 2588: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16049  003DF8  0101               	movlb	1	; () banked
 16050  003DFA  6700               	tstfsz	_bHex& (0+255),b
 16051  003DFC  D004               	goto	l11466
 16052                           
 16053                           ; BSR set to: 1
 16054  003DFE  0100               	movlb	0	; () banked
 16055  003E00  6BC6               	clrf	(_findNodes$1461+1)& (0+255),b
 16056  003E02  0E0A               	movlw	10
 16057  003E04  D003               	goto	L13
 16058  003E06                     l11466:
 16059                           
 16060                           ; BSR set to: 1
 16061  003E06  0100               	movlb	0	; () banked
 16062  003E08  6BC6               	clrf	(_findNodes$1461+1)& (0+255),b
 16063  003E0A  0E10               	movlw	16
 16064  003E0C                     L13:
 16065  003E0C  6FC5               	movwf	_findNodes$1461& (0+255),b
 16066                           
 16067                           ; BSR set to: 0
 16068  003E0E  0E01               	movlw	high _wrkbuf
 16069  003E10  0100               	movlb	0	; () banked
 16070  003E12  6F71               	movwf	(?_itoa+1)& (0+255),b
 16071  003E14  0E54               	movlw	low _wrkbuf
 16072  003E16  6F70               	movwf	?_itoa& (0+255),b
 16073  003E18  C1AE  F072         	movff	_vscpNodeId,?_itoa+2
 16074  003E1C  6B73               	clrf	(?_itoa+3)& (0+255),b
 16075  003E1E  C0C5  F074         	movff	_findNodes$1461,?_itoa+4
 16076  003E22  C0C6  F075         	movff	_findNodes$1461+1,?_itoa+5
 16077  003E26  ECA9  F02A         	call	_itoa	;wreg free
 16078                           
 16079                           ; BSR set to: 0
 16080                           ;main.c: 2589: putsUSART(wrkbuf);
 16081  003E2A  0E01               	movlw	high _wrkbuf
 16082  003E2C  0100               	movlb	0	; () banked
 16083  003E2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16084  003E30  0E54               	movlw	low _wrkbuf
 16085  003E32  6F61               	movwf	?_putsUSART& (0+255),b
 16086  003E34  ECC9  F028         	call	_putsUSART	;wreg free
 16087                           
 16088                           ;main.c: 2590: putsUSART((char *) "\r\n");
 16089  003E38  0E74               	movlw	high (STR_190+50)
 16090  003E3A  0100               	movlb	0	; () banked
 16091  003E3C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16092  003E3E  0E8A               	movlw	low (STR_190+50)
 16093  003E40  6F61               	movwf	?_putsUSART& (0+255),b
 16094  003E42  ECC9  F028         	call	_putsUSART	;wreg free
 16095                           
 16096                           ;main.c: 2591: printNodeFirmwareVersion(i);
 16097  003E46  0100               	movlb	0	; () banked
 16098  003E48  51C9               	movf	findNodes@i& (0+255),w,b
 16099  003E4A  ECA0  F020         	call	_printNodeFirmwareVersion
 16100                           
 16101                           ;main.c: 2592: printGUID(i);
 16102  003E4E  0100               	movlb	0	; () banked
 16103  003E50  51C9               	movf	findNodes@i& (0+255),w,b
 16104  003E52  ECDC  F01D         	call	_printGUID
 16105                           
 16106                           ;main.c: 2593: printMDF(i);
 16107  003E56  0100               	movlb	0	; () banked
 16108  003E58  51C9               	movf	findNodes@i& (0+255),w,b
 16109  003E5A  EC78  F024         	call	_printMDF
 16110                           
 16111                           ;main.c: 2594: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16112  003E5E  0E71               	movlw	high STR_231
 16113  003E60  0100               	movlb	0	; () banked
 16114  003E62  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16115  003E64  0E53               	movlw	low STR_231
 16116  003E66  6F61               	movwf	?_putsUSART& (0+255),b
 16117  003E68  ECC9  F028         	call	_putsUSART	;wreg free
 16118                           
 16119                           ;main.c: 2595: nFound++;
 16120  003E6C  0100               	movlb	0	; () banked
 16121  003E6E  2BC7               	incf	findNodes@nFound& (0+255),f,b
 16122  003E70                     l11484:
 16123  003E70  0100               	movlb	0	; () banked
 16124  003E72  2BC9               	incf	findNodes@i& (0+255),f,b
 16125                           
 16126                           ; BSR set to: 0
 16127  003E74  67C9               	tstfsz	findNodes@i& (0+255),b
 16128  003E76  D7AB               	goto	l1172
 16129                           
 16130                           ; BSR set to: 0
 16131                           ;main.c: 2596: }
 16132                           ;main.c: 2598: }
 16133                           ;main.c: 2600: itoa(wrkbuf, nFound, 10);
 16134  003E78  0E01               	movlw	high _wrkbuf
 16135  003E7A  6F71               	movwf	(?_itoa+1)& (0+255),b
 16136  003E7C  0E54               	movlw	low _wrkbuf
 16137  003E7E  6F70               	movwf	?_itoa& (0+255),b
 16138  003E80  C0C7  F072         	movff	findNodes@nFound,?_itoa+2
 16139  003E84  6B73               	clrf	(?_itoa+3)& (0+255),b
 16140  003E86  6B75               	clrf	(?_itoa+5)& (0+255),b
 16141  003E88  0E0A               	movlw	10
 16142  003E8A  6F74               	movwf	(?_itoa+4)& (0+255),b
 16143  003E8C  ECA9  F02A         	call	_itoa	;wreg free
 16144                           
 16145                           ; BSR set to: 0
 16146                           ;main.c: 2601: putsUSART(wrkbuf);
 16147  003E90  0E01               	movlw	high _wrkbuf
 16148  003E92  0100               	movlb	0	; () banked
 16149  003E94  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16150  003E96  0E54               	movlw	low _wrkbuf
 16151  003E98  6F61               	movwf	?_putsUSART& (0+255),b
 16152  003E9A  ECC9  F028         	call	_putsUSART	;wreg free
 16153                           
 16154                           ;main.c: 2602: putsUSART((char *) " nodes found\r\n");
 16155  003E9E  0E7E               	movlw	high STR_235
 16156  003EA0  0100               	movlb	0	; () banked
 16157  003EA2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16158  003EA4  0E4E               	movlw	low STR_235
 16159  003EA6  6F61               	movwf	?_putsUSART& (0+255),b
 16160  003EA8  EFC9  F028         	goto	_putsUSART	;wreg free
 16161  003EAC                     __end_of_findNodes:
 16162                           	opt stack 0
 16163                           tblptru	equ	0xFF8
 16164                           tblptrh	equ	0xFF7
 16165                           tblptrl	equ	0xFF6
 16166                           tablat	equ	0xFF5
 16167                           prodh	equ	0xFF4
 16168                           prodl	equ	0xFF3
 16169                           intcon	equ	0xFF2
 16170                           indf0	equ	0xFEF
 16171                           postinc0	equ	0xFEE
 16172                           fsr0h	equ	0xFEA
 16173                           fsr0l	equ	0xFE9
 16174                           wreg	equ	0xFE8
 16175                           indf1	equ	0xFE7
 16176                           postinc1	equ	0xFE6
 16177                           postdec1	equ	0xFE5
 16178                           fsr1h	equ	0xFE2
 16179                           fsr1l	equ	0xFE1
 16180                           indf2	equ	0xFDF
 16181                           postinc2	equ	0xFDE
 16182                           postdec2	equ	0xFDD
 16183                           plusw2	equ	0xFDB
 16184                           fsr2h	equ	0xFDA
 16185                           fsr2l	equ	0xFD9
 16186                           status	equ	0xFD8
 16187                           
 16188 ;; *************** function _printMDF *****************
 16189 ;; Defined at:
 16190 ;;		line 2653 in file "main.c"
 16191 ;; Parameters:    Size  Location     Type
 16192 ;;  nodeid          1    wreg     unsigned char 
 16193 ;; Auto vars:     Size  Location     Type
 16194 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16195 ;;  p               2   97[BANK0 ] PTR unsigned char 
 16196 ;;		 -> wrkbuf(80), 
 16197 ;;  i               1   99[BANK0 ] unsigned char 
 16198 ;;  value           1   96[BANK0 ] unsigned char 
 16199 ;; Return value:  Size  Location     Type
 16200 ;;		None               void
 16201 ;; Registers used:
 16202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16203 ;; Tracked objects:
 16204 ;;		On entry : D/2
 16205 ;;		On exit  : 0/0
 16206 ;;		Unchanged: 0/0
 16207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16208 ;;      Params:         0       0       0       0       0       0       0
 16209 ;;      Locals:         0       5       0       0       0       0       0
 16210 ;;      Temps:          0       0       0       0       0       0       0
 16211 ;;      Totals:         0       5       0       0       0       0       0
 16212 ;;Total ram usage:        5 bytes
 16213 ;; Hardware stack levels used:    1
 16214 ;; Hardware stack levels required when called:    8
 16215 ;; This function calls:
 16216 ;;		_putsUSART
 16217 ;;		_memset
 16218 ;;		_readRegister
 16219 ;; This function is called by:
 16220 ;;		_doModeVerbose
 16221 ;;		_findNodes
 16222 ;; This function uses a non-reentrant model
 16223 ;;
 16224                           
 16225                           	psect	text29
 16226  0048F0                     __ptext29:
 16227                           	opt stack 0
 16228  0048F0                     _printMDF:
 16229                           	opt stack 21
 16230                           
 16231                           ;incstack = 0
 16232                           ;incstack = 0
 16233                           ;printMDF@nodeid stored from wreg
 16234  0048F0  CFE8 F0BF          	movff	wreg,printMDF@nodeid
 16235                           
 16236                           ;main.c: 2654: uint8_t i;
 16237                           ;main.c: 2655: uint8_t value;
 16238                           ;main.c: 2656: char *p = wrkbuf;
 16239  0048F4  0E01               	movlw	high _wrkbuf
 16240  0048F6  0100               	movlb	0	; () banked
 16241  0048F8  6FC2               	movwf	(printMDF@p+1)& (0+255),b
 16242  0048FA  0E54               	movlw	low _wrkbuf
 16243  0048FC  6FC1               	movwf	printMDF@p& (0+255),b
 16244                           
 16245                           ; BSR set to: 0
 16246                           ;main.c: 2657: memset(wrkbuf, 0, sizeof (wrkbuf));
 16247  0048FE  0E01               	movlw	high _wrkbuf
 16248  004900  6F61               	movwf	(?_memset+1)& (0+255),b
 16249  004902  0E54               	movlw	low _wrkbuf
 16250  004904  6F60               	movwf	?_memset& (0+255),b
 16251  004906  6B63               	clrf	(?_memset+3)& (0+255),b
 16252  004908  6B62               	clrf	(?_memset+2)& (0+255),b
 16253  00490A  6B65               	clrf	(?_memset+5)& (0+255),b
 16254  00490C  0E50               	movlw	80
 16255  00490E  6F64               	movwf	(?_memset+4)& (0+255),b
 16256  004910  EC28  F02B         	call	_memset	;wreg free
 16257                           
 16258                           ; BSR set to: 0
 16259                           ;main.c: 2658: putsUSART((char *) "MDF = http://");
 16260  004914  0E7E               	movlw	high STR_241
 16261  004916  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16262  004918  0E6C               	movlw	low STR_241
 16263  00491A  6F61               	movwf	?_putsUSART& (0+255),b
 16264  00491C  ECC9  F028         	call	_putsUSART	;wreg free
 16265                           
 16266                           ;main.c: 2660: for (i = 0; i < 32; i++) {
 16267  004920  0100               	movlb	0	; () banked
 16268  004922  6BC3               	clrf	printMDF@i& (0+255),b
 16269  004924                     l12032:
 16270                           
 16271                           ; BSR set to: 0
 16272                           ;main.c: 2661: if (readRegister(nodeid,
 16273                           ;main.c: 2662: 0xE0 + i,
 16274                           ;main.c: 2663: rwtimeout,
 16275                           ;main.c: 2664: &value)) {
 16276  004924  51C3               	movf	printMDF@i& (0+255),w,b
 16277  004926  0FE0               	addlw	224
 16278  004928  6FB6               	movwf	?_readRegister& (0+255),b
 16279  00492A  0100               	movlb	0	; () banked
 16280  00492C  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16281  004930  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16282  004932  0EC0               	movlw	low printMDF@value
 16283  004934  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16284  004936  51BF               	movf	printMDF@nodeid& (0+255),w,b
 16285  004938  EC08  F021         	call	_readRegister
 16286  00493C  0900               	iorlw	0
 16287  00493E  E00A               	bz	l12038
 16288                           
 16289                           ;main.c: 2665: *p = value;
 16290  004940  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16291  004944  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16292  004948  C0C0  FFDF         	movff	printMDF@value,indf2
 16293  00494C                     l12036:
 16294                           
 16295                           ;main.c: 2666: p++;
 16296  00494C  0100               	movlb	0	; () banked
 16297  00494E  4BC1               	infsnz	printMDF@p& (0+255),f,b
 16298  004950  2BC2               	incf	(printMDF@p+1)& (0+255),f,b
 16299                           
 16300                           ;main.c: 2668: }
 16301  004952  D007               	goto	l12042
 16302  004954                     l12038:
 16303                           
 16304                           ;main.c: 2669: else {
 16305                           ;main.c: 2670: *p = '?';
 16306  004954  C0C1  FFD9         	movff	printMDF@p,fsr2l
 16307  004958  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 16308  00495C  0E3F               	movlw	63
 16309  00495E  6EDF               	movwf	indf2,c
 16310  004960  D7F5               	goto	l12036
 16311  004962                     l12042:
 16312                           
 16313                           ; BSR set to: 0
 16314  004962  2BC3               	incf	printMDF@i& (0+255),f,b
 16315                           
 16316                           ; BSR set to: 0
 16317  004964  0E1F               	movlw	31
 16318  004966  65C3               	cpfsgt	printMDF@i& (0+255),b
 16319  004968  D7DD               	goto	l12032
 16320                           
 16321                           ; BSR set to: 0
 16322                           ;main.c: 2672: }
 16323                           ;main.c: 2673: }
 16324                           ;main.c: 2675: putsUSART(wrkbuf);
 16325  00496A  0E01               	movlw	high _wrkbuf
 16326  00496C  0100               	movlb	0	; () banked
 16327  00496E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16328  004970  0E54               	movlw	low _wrkbuf
 16329  004972  6F61               	movwf	?_putsUSART& (0+255),b
 16330  004974  ECC9  F028         	call	_putsUSART	;wreg free
 16331                           
 16332                           ;main.c: 2676: putsUSART((char *) "\r\n");
 16333  004978  0E74               	movlw	high (STR_190+50)
 16334  00497A  0100               	movlb	0	; () banked
 16335  00497C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16336  00497E  0E8A               	movlw	low (STR_190+50)
 16337  004980  6F61               	movwf	?_putsUSART& (0+255),b
 16338  004982  EFC9  F028         	goto	_putsUSART	;wreg free
 16339  004986                     __end_of_printMDF:
 16340                           	opt stack 0
 16341                           tblptru	equ	0xFF8
 16342                           tblptrh	equ	0xFF7
 16343                           tblptrl	equ	0xFF6
 16344                           tablat	equ	0xFF5
 16345                           prodh	equ	0xFF4
 16346                           prodl	equ	0xFF3
 16347                           intcon	equ	0xFF2
 16348                           indf0	equ	0xFEF
 16349                           postinc0	equ	0xFEE
 16350                           fsr0h	equ	0xFEA
 16351                           fsr0l	equ	0xFE9
 16352                           wreg	equ	0xFE8
 16353                           indf1	equ	0xFE7
 16354                           postinc1	equ	0xFE6
 16355                           postdec1	equ	0xFE5
 16356                           fsr1h	equ	0xFE2
 16357                           fsr1l	equ	0xFE1
 16358                           indf2	equ	0xFDF
 16359                           postinc2	equ	0xFDE
 16360                           postdec2	equ	0xFDD
 16361                           plusw2	equ	0xFDB
 16362                           fsr2h	equ	0xFDA
 16363                           fsr2l	equ	0xFD9
 16364                           status	equ	0xFD8
 16365                           
 16366 ;; *************** function _printGUID *****************
 16367 ;; Defined at:
 16368 ;;		line 2612 in file "main.c"
 16369 ;; Parameters:    Size  Location     Type
 16370 ;;  nodeid          1    wreg     unsigned char 
 16371 ;; Auto vars:     Size  Location     Type
 16372 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16373 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16374 ;;  i               1  100[BANK0 ] unsigned char 
 16375 ;;  value           1   99[BANK0 ] unsigned char 
 16376 ;; Return value:  Size  Location     Type
 16377 ;;		None               void
 16378 ;; Registers used:
 16379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16380 ;; Tracked objects:
 16381 ;;		On entry : D/2
 16382 ;;		On exit  : 0/0
 16383 ;;		Unchanged: 0/0
 16384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16385 ;;      Params:         0       0       0       0       0       0       0
 16386 ;;      Locals:         0       6       0       0       0       0       0
 16387 ;;      Temps:          0       0       0       0       0       0       0
 16388 ;;      Totals:         0       6       0       0       0       0       0
 16389 ;;Total ram usage:        6 bytes
 16390 ;; Hardware stack levels used:    1
 16391 ;; Hardware stack levels required when called:    8
 16392 ;; This function calls:
 16393 ;;		_putsUSART
 16394 ;;		_memset
 16395 ;;		_strlen
 16396 ;;		_itoa
 16397 ;;		_readRegister
 16398 ;;		_strcat
 16399 ;; This function is called by:
 16400 ;;		_doModeVerbose
 16401 ;;		_findNodes
 16402 ;; This function uses a non-reentrant model
 16403 ;;
 16404                           
 16405                           	psect	text30
 16406  003BB8                     __ptext30:
 16407                           	opt stack 0
 16408  003BB8                     _printGUID:
 16409                           	opt stack 21
 16410                           
 16411                           ;incstack = 0
 16412                           ;incstack = 0
 16413                           ;printGUID@nodeid stored from wreg
 16414  003BB8  CFE8 F0BF          	movff	wreg,printGUID@nodeid
 16415                           
 16416                           ;main.c: 2613: uint8_t i;
 16417                           ;main.c: 2614: uint8_t value;
 16418                           ;main.c: 2615: char buf[3];
 16419                           ;main.c: 2617: memset(wrkbuf, 0, sizeof (wrkbuf));
 16420  003BBC  0E01               	movlw	high _wrkbuf
 16421  003BBE  0100               	movlb	0	; () banked
 16422  003BC0  6F61               	movwf	(?_memset+1)& (0+255),b
 16423  003BC2  0E54               	movlw	low _wrkbuf
 16424  003BC4  6F60               	movwf	?_memset& (0+255),b
 16425  003BC6  6B63               	clrf	(?_memset+3)& (0+255),b
 16426  003BC8  6B62               	clrf	(?_memset+2)& (0+255),b
 16427  003BCA  6B65               	clrf	(?_memset+5)& (0+255),b
 16428  003BCC  0E50               	movlw	80
 16429  003BCE  6F64               	movwf	(?_memset+4)& (0+255),b
 16430  003BD0  EC28  F02B         	call	_memset	;wreg free
 16431                           
 16432                           ; BSR set to: 0
 16433                           ;main.c: 2618: putsUSART((char *) "GUID = ");
 16434  003BD4  0E7E               	movlw	high STR_236
 16435  003BD6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16436  003BD8  0EE5               	movlw	low STR_236
 16437  003BDA  6F61               	movwf	?_putsUSART& (0+255),b
 16438  003BDC  ECC9  F028         	call	_putsUSART	;wreg free
 16439                           
 16440                           ;main.c: 2620: for (i = 0; i < 16; i++) {
 16441  003BE0  0100               	movlb	0	; () banked
 16442  003BE2  6BC4               	clrf	printGUID@i& (0+255),b
 16443  003BE4                     l11998:
 16444                           
 16445                           ; BSR set to: 0
 16446                           ;main.c: 2621: if (readRegister(nodeid,
 16447                           ;main.c: 2622: 0xD0 + i,
 16448                           ;main.c: 2623: rwtimeout,
 16449                           ;main.c: 2624: &value)) {
 16450  003BE4  51C4               	movf	printGUID@i& (0+255),w,b
 16451  003BE6  0FD0               	addlw	208
 16452  003BE8  6FB6               	movwf	?_readRegister& (0+255),b
 16453  003BEA  0100               	movlb	0	; () banked
 16454  003BEC  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16455  003BF0  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16456  003BF2  0EC3               	movlw	low printGUID@value
 16457  003BF4  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16458  003BF6  51BF               	movf	printGUID@nodeid& (0+255),w,b
 16459  003BF8  EC08  F021         	call	_readRegister
 16460  003BFC  0900               	iorlw	0
 16461  003BFE  E029               	bz	l12008
 16462                           
 16463                           ;main.c: 2625: itoa(buf, value, 16);
 16464  003C00  0100               	movlb	0	; () banked
 16465  003C02  0E00               	movlw	high printGUID@buf
 16466  003C04  6F71               	movwf	(?_itoa+1)& (0+255),b
 16467  003C06  0EC0               	movlw	low printGUID@buf
 16468  003C08  6F70               	movwf	?_itoa& (0+255),b
 16469  003C0A  C0C3  F072         	movff	printGUID@value,?_itoa+2
 16470  003C0E  6B73               	clrf	(?_itoa+3)& (0+255),b
 16471  003C10  6B75               	clrf	(?_itoa+5)& (0+255),b
 16472  003C12  0E10               	movlw	16
 16473  003C14  6F74               	movwf	(?_itoa+4)& (0+255),b
 16474  003C16  ECA9  F02A         	call	_itoa	;wreg free
 16475                           
 16476                           ; BSR set to: 0
 16477                           ;main.c: 2626: if (1 == strlen(buf)) {
 16478  003C1A  0E00               	movlw	high printGUID@buf
 16479  003C1C  6F61               	movwf	(?_strlen+1)& (0+255),b
 16480  003C1E  0EC0               	movlw	low printGUID@buf
 16481  003C20  6F60               	movwf	?_strlen& (0+255),b
 16482  003C22  ECF0  F029         	call	_strlen	;wreg free
 16483  003C26  0560               	decf	?_strlen& (0+255),w,b
 16484  003C28  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 16485  003C2A  E10F               	bnz	l12006
 16486                           
 16487                           ; BSR set to: 0
 16488                           ;main.c: 2627: strcat(wrkbuf, "0");
 16489  003C2C  0E01               	movlw	high _wrkbuf
 16490  003C2E  0100               	movlb	0	; () banked
 16491  003C30  6F61               	movwf	(?_strcat+1)& (0+255),b
 16492  003C32  0E54               	movlw	low _wrkbuf
 16493  003C34  6F60               	movwf	?_strcat& (0+255),b
 16494  003C36  0E7F               	movlw	high STR_237
 16495  003C38  6F63               	movwf	(?_strcat+3)& (0+255),b
 16496  003C3A  0EF8               	movlw	low STR_237
 16497  003C3C  6F62               	movwf	(?_strcat+2)& (0+255),b
 16498  003C3E  EC9D  F028         	call	_strcat	;wreg free
 16499                           
 16500                           ;main.c: 2628: strcat(wrkbuf, buf);
 16501  003C42  D832               	call	PL72	;call to abstracted procedure
 16502  003C44  EC9D  F028         	call	_strcat	;wreg free
 16503                           
 16504                           ;main.c: 2629: } else {
 16505  003C48  D00F               	goto	l12010
 16506  003C4A                     l12006:
 16507                           
 16508                           ; BSR set to: 0
 16509                           ;main.c: 2630: strcat(wrkbuf, buf);
 16510  003C4A  D82E               	call	PL72	;call to abstracted procedure
 16511  003C4C  EC9D  F028         	call	_strcat	;wreg free
 16512  003C50  D00B               	goto	l12010
 16513  003C52                     l12008:
 16514                           
 16515                           ;main.c: 2634: strcat(wrkbuf, "--");
 16516  003C52  0E01               	movlw	high _wrkbuf
 16517  003C54  0100               	movlb	0	; () banked
 16518  003C56  6F61               	movwf	(?_strcat+1)& (0+255),b
 16519  003C58  0E54               	movlw	low _wrkbuf
 16520  003C5A  6F60               	movwf	?_strcat& (0+255),b
 16521  003C5C  0E7F               	movlw	high STR_238
 16522  003C5E  6F63               	movwf	(?_strcat+3)& (0+255),b
 16523  003C60  0EE4               	movlw	low STR_238
 16524  003C62  6F62               	movwf	(?_strcat+2)& (0+255),b
 16525  003C64  EC9D  F028         	call	_strcat	;wreg free
 16526  003C68                     l12010:
 16527                           
 16528                           ;main.c: 2635: }
 16529                           ;main.c: 2637: if (i < 15) {
 16530  003C68  0E0F               	movlw	15
 16531  003C6A  0100               	movlb	0	; () banked
 16532  003C6C  61C4               	cpfslt	printGUID@i& (0+255),b
 16533  003C6E  D00A               	goto	l12014
 16534                           
 16535                           ; BSR set to: 0
 16536                           ;main.c: 2638: strcat(wrkbuf, ":");
 16537  003C70  0E01               	movlw	high _wrkbuf
 16538  003C72  6F61               	movwf	(?_strcat+1)& (0+255),b
 16539  003C74  0E54               	movlw	low _wrkbuf
 16540  003C76  6F60               	movwf	?_strcat& (0+255),b
 16541  003C78  0E7F               	movlw	high STR_239
 16542  003C7A  6F63               	movwf	(?_strcat+3)& (0+255),b
 16543  003C7C  0EFA               	movlw	low STR_239
 16544  003C7E  6F62               	movwf	(?_strcat+2)& (0+255),b
 16545  003C80  EC9D  F028         	call	_strcat	;wreg free
 16546  003C84                     l12014:
 16547  003C84  0100               	movlb	0	; () banked
 16548  003C86  2BC4               	incf	printGUID@i& (0+255),f,b
 16549                           
 16550                           ; BSR set to: 0
 16551  003C88  0E0F               	movlw	15
 16552  003C8A  65C4               	cpfsgt	printGUID@i& (0+255),b
 16553  003C8C  D7AB               	goto	l11998
 16554                           
 16555                           ; BSR set to: 0
 16556                           ;main.c: 2639: }
 16557                           ;main.c: 2641: }
 16558                           ;main.c: 2643: putsUSART(wrkbuf);
 16559  003C8E  0E01               	movlw	high _wrkbuf
 16560  003C90  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16561  003C92  0E54               	movlw	low _wrkbuf
 16562  003C94  6F61               	movwf	?_putsUSART& (0+255),b
 16563  003C96  ECC9  F028         	call	_putsUSART	;wreg free
 16564                           
 16565                           ;main.c: 2644: putsUSART((char *) "\r\n");
 16566  003C9A  0E74               	movlw	high (STR_190+50)
 16567  003C9C  0100               	movlb	0	; () banked
 16568  003C9E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16569  003CA0  0E8A               	movlw	low (STR_190+50)
 16570  003CA2  6F61               	movwf	?_putsUSART& (0+255),b
 16571  003CA4  EFC9  F028         	goto	_putsUSART	;wreg free
 16572  003CA8                     __end_of_printGUID:
 16573                           	opt stack 0
 16574  003CA8                     PL72:
 16575                           	opt stack 21
 16576  003CA8  0E01               	movlw	high _wrkbuf
 16577  003CAA  0100               	movlb	0	; () banked
 16578  003CAC  6F61               	movwf	(?_strcat+1)& (0+255),b
 16579  003CAE  0E54               	movlw	low _wrkbuf
 16580  003CB0  6F60               	movwf	?_strcat& (0+255),b
 16581  003CB2  0E00               	movlw	high printGUID@buf
 16582  003CB4  6F63               	movwf	(?_strcat+3)& (0+255),b
 16583  003CB6  0EC0               	movlw	low printGUID@buf
 16584  003CB8  6F62               	movwf	(?_strcat+2)& (0+255),b
 16585  003CBA  0012               	return	
 16586  003CBC                     __end_ofPL72:
 16587                           	opt stack 0
 16588                           tblptru	equ	0xFF8
 16589                           tblptrh	equ	0xFF7
 16590                           tblptrl	equ	0xFF6
 16591                           tablat	equ	0xFF5
 16592                           prodh	equ	0xFF4
 16593                           prodl	equ	0xFF3
 16594                           intcon	equ	0xFF2
 16595                           indf0	equ	0xFEF
 16596                           postinc0	equ	0xFEE
 16597                           fsr0h	equ	0xFEA
 16598                           fsr0l	equ	0xFE9
 16599                           wreg	equ	0xFE8
 16600                           indf1	equ	0xFE7
 16601                           postinc1	equ	0xFE6
 16602                           postdec1	equ	0xFE5
 16603                           fsr1h	equ	0xFE2
 16604                           fsr1l	equ	0xFE1
 16605                           indf2	equ	0xFDF
 16606                           postinc2	equ	0xFDE
 16607                           postdec2	equ	0xFDD
 16608                           plusw2	equ	0xFDB
 16609                           fsr2h	equ	0xFDA
 16610                           fsr2l	equ	0xFD9
 16611                           status	equ	0xFD8
 16612                           
 16613 ;; *************** function _printNodeFirmwareVersion *****************
 16614 ;; Defined at:
 16615 ;;		line 2684 in file "main.c"
 16616 ;; Parameters:    Size  Location     Type
 16617 ;;  nodeid          1    wreg     unsigned char 
 16618 ;; Auto vars:     Size  Location     Type
 16619 ;;  nodeid          1   95[BANK0 ] unsigned char 
 16620 ;;  buf             3   96[BANK0 ] unsigned char [3]
 16621 ;;  i               1  100[BANK0 ] unsigned char 
 16622 ;;  value           1   99[BANK0 ] unsigned char 
 16623 ;; Return value:  Size  Location     Type
 16624 ;;		None               void
 16625 ;; Registers used:
 16626 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16627 ;; Tracked objects:
 16628 ;;		On entry : D/2
 16629 ;;		On exit  : 0/0
 16630 ;;		Unchanged: 0/0
 16631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16632 ;;      Params:         0       0       0       0       0       0       0
 16633 ;;      Locals:         0       6       0       0       0       0       0
 16634 ;;      Temps:          0       0       0       0       0       0       0
 16635 ;;      Totals:         0       6       0       0       0       0       0
 16636 ;;Total ram usage:        6 bytes
 16637 ;; Hardware stack levels used:    1
 16638 ;; Hardware stack levels required when called:    8
 16639 ;; This function calls:
 16640 ;;		_putsUSART
 16641 ;;		_memset
 16642 ;;		_itoa
 16643 ;;		_readRegister
 16644 ;;		_strcat
 16645 ;; This function is called by:
 16646 ;;		_doModeVerbose
 16647 ;;		_findNodes
 16648 ;; This function uses a non-reentrant model
 16649 ;;
 16650                           
 16651                           	psect	text31
 16652  004140                     __ptext31:
 16653                           	opt stack 0
 16654  004140                     _printNodeFirmwareVersion:
 16655                           	opt stack 21
 16656                           
 16657                           ;incstack = 0
 16658                           ;incstack = 0
 16659                           ;printNodeFirmwareVersion@nodeid stored from wreg
 16660  004140  CFE8 F0BF          	movff	wreg,printNodeFirmwareVersion@nodeid
 16661                           
 16662                           ;main.c: 2685: uint8_t i;
 16663                           ;main.c: 2686: uint8_t value;
 16664                           ;main.c: 2687: char buf[3];
 16665                           ;main.c: 2689: memset(wrkbuf, 0, sizeof (wrkbuf));
 16666  004144  0E01               	movlw	high _wrkbuf
 16667  004146  0100               	movlb	0	; () banked
 16668  004148  6F61               	movwf	(?_memset+1)& (0+255),b
 16669  00414A  0E54               	movlw	low _wrkbuf
 16670  00414C  6F60               	movwf	?_memset& (0+255),b
 16671  00414E  6B63               	clrf	(?_memset+3)& (0+255),b
 16672  004150  6B62               	clrf	(?_memset+2)& (0+255),b
 16673  004152  6B65               	clrf	(?_memset+5)& (0+255),b
 16674  004154  0E50               	movlw	80
 16675  004156  6F64               	movwf	(?_memset+4)& (0+255),b
 16676  004158  EC28  F02B         	call	_memset	;wreg free
 16677                           
 16678                           ; BSR set to: 0
 16679                           ;main.c: 2690: putsUSART((char *) "Firmware version = ");
 16680  00415C  0E7D               	movlw	high STR_243
 16681  00415E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16682  004160  0EBE               	movlw	low STR_243
 16683  004162  6F61               	movwf	?_putsUSART& (0+255),b
 16684  004164  ECC9  F028         	call	_putsUSART	;wreg free
 16685                           
 16686                           ;main.c: 2692: for (i = 0; i < 3; i++) {
 16687  004168  0100               	movlb	0	; () banked
 16688  00416A  6BC4               	clrf	printNodeFirmwareVersion@i& (0+255),b
 16689  00416C                     l11970:
 16690                           
 16691                           ; BSR set to: 0
 16692                           ;main.c: 2693: if (readRegister(nodeid,
 16693                           ;main.c: 2694: 0x94 + i,
 16694                           ;main.c: 2695: rwtimeout,
 16695                           ;main.c: 2696: &value)) {
 16696  00416C  51C4               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 16697  00416E  0F94               	addlw	148
 16698  004170  6FB6               	movwf	?_readRegister& (0+255),b
 16699  004172  0100               	movlb	0	; () banked
 16700  004174  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 16701  004178  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 16702  00417A  0EC3               	movlw	low printNodeFirmwareVersion@value
 16703  00417C  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 16704  00417E  51BF               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 16705  004180  EC08  F021         	call	_readRegister
 16706  004184  0900               	iorlw	0
 16707  004186  E019               	bz	l11976
 16708                           
 16709                           ;main.c: 2697: itoa(buf, value, 16);
 16710  004188  0100               	movlb	0	; () banked
 16711  00418A  0E00               	movlw	high printNodeFirmwareVersion@buf
 16712  00418C  6F71               	movwf	(?_itoa+1)& (0+255),b
 16713  00418E  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16714  004190  6F70               	movwf	?_itoa& (0+255),b
 16715  004192  C0C3  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 16716  004196  6B73               	clrf	(?_itoa+3)& (0+255),b
 16717  004198  6B75               	clrf	(?_itoa+5)& (0+255),b
 16718  00419A  0E10               	movlw	16
 16719  00419C  6F74               	movwf	(?_itoa+4)& (0+255),b
 16720  00419E  ECA9  F02A         	call	_itoa	;wreg free
 16721                           
 16722                           ; BSR set to: 0
 16723                           ;main.c: 2698: strcat(wrkbuf, buf);
 16724  0041A2  0E01               	movlw	high _wrkbuf
 16725  0041A4  0100               	movlb	0	; () banked
 16726  0041A6  6F61               	movwf	(?_strcat+1)& (0+255),b
 16727  0041A8  0E54               	movlw	low _wrkbuf
 16728  0041AA  6F60               	movwf	?_strcat& (0+255),b
 16729  0041AC  0E00               	movlw	high printNodeFirmwareVersion@buf
 16730  0041AE  6F63               	movwf	(?_strcat+3)& (0+255),b
 16731  0041B0  0EC0               	movlw	low printNodeFirmwareVersion@buf
 16732  0041B2  6F62               	movwf	(?_strcat+2)& (0+255),b
 16733  0041B4  EC9D  F028         	call	_strcat	;wreg free
 16734                           
 16735                           ;main.c: 2699: }
 16736  0041B8  D00B               	goto	l11978
 16737  0041BA                     l11976:
 16738                           
 16739                           ;main.c: 2700: else {
 16740                           ;main.c: 2701: strcat(wrkbuf, "?");
 16741  0041BA  0E01               	movlw	high _wrkbuf
 16742  0041BC  0100               	movlb	0	; () banked
 16743  0041BE  6F61               	movwf	(?_strcat+1)& (0+255),b
 16744  0041C0  0E54               	movlw	low _wrkbuf
 16745  0041C2  6F60               	movwf	?_strcat& (0+255),b
 16746  0041C4  0E7F               	movlw	high STR_244
 16747  0041C6  6F63               	movwf	(?_strcat+3)& (0+255),b
 16748  0041C8  0EFC               	movlw	low STR_244
 16749  0041CA  6F62               	movwf	(?_strcat+2)& (0+255),b
 16750  0041CC  EC9D  F028         	call	_strcat	;wreg free
 16751  0041D0                     l11978:
 16752                           
 16753                           ;main.c: 2702: }
 16754                           ;main.c: 2704: if (i < 2) {
 16755  0041D0  0E02               	movlw	2
 16756  0041D2  0100               	movlb	0	; () banked
 16757  0041D4  61C4               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 16758  0041D6  D00A               	goto	l11982
 16759                           
 16760                           ; BSR set to: 0
 16761                           ;main.c: 2705: strcat(wrkbuf, ".");
 16762  0041D8  0E01               	movlw	high _wrkbuf
 16763  0041DA  6F61               	movwf	(?_strcat+1)& (0+255),b
 16764  0041DC  0E54               	movlw	low _wrkbuf
 16765  0041DE  6F60               	movwf	?_strcat& (0+255),b
 16766  0041E0  0E7F               	movlw	high STR_245
 16767  0041E2  6F63               	movwf	(?_strcat+3)& (0+255),b
 16768  0041E4  0EF6               	movlw	low STR_245
 16769  0041E6  6F62               	movwf	(?_strcat+2)& (0+255),b
 16770  0041E8  EC9D  F028         	call	_strcat	;wreg free
 16771  0041EC                     l11982:
 16772  0041EC  0100               	movlb	0	; () banked
 16773  0041EE  2BC4               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 16774                           
 16775                           ; BSR set to: 0
 16776  0041F0  0E02               	movlw	2
 16777  0041F2  65C4               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 16778  0041F4  D7BB               	goto	l11970
 16779                           
 16780                           ; BSR set to: 0
 16781                           ;main.c: 2706: }
 16782                           ;main.c: 2708: }
 16783                           ;main.c: 2710: putsUSART(wrkbuf);
 16784  0041F6  0E01               	movlw	high _wrkbuf
 16785  0041F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16786  0041FA  0E54               	movlw	low _wrkbuf
 16787  0041FC  6F61               	movwf	?_putsUSART& (0+255),b
 16788  0041FE  ECC9  F028         	call	_putsUSART	;wreg free
 16789                           
 16790                           ;main.c: 2711: putsUSART((char *) "\r\n");
 16791  004202  0E74               	movlw	high (STR_190+50)
 16792  004204  0100               	movlb	0	; () banked
 16793  004206  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16794  004208  0E8A               	movlw	low (STR_190+50)
 16795  00420A  6F61               	movwf	?_putsUSART& (0+255),b
 16796  00420C  EFC9  F028         	goto	_putsUSART	;wreg free
 16797  004210                     __end_of_printNodeFirmwareVersion:
 16798                           	opt stack 0
 16799                           tblptru	equ	0xFF8
 16800                           tblptrh	equ	0xFF7
 16801                           tblptrl	equ	0xFF6
 16802                           tablat	equ	0xFF5
 16803                           prodh	equ	0xFF4
 16804                           prodl	equ	0xFF3
 16805                           intcon	equ	0xFF2
 16806                           indf0	equ	0xFEF
 16807                           postinc0	equ	0xFEE
 16808                           fsr0h	equ	0xFEA
 16809                           fsr0l	equ	0xFE9
 16810                           wreg	equ	0xFE8
 16811                           indf1	equ	0xFE7
 16812                           postinc1	equ	0xFE6
 16813                           postdec1	equ	0xFE5
 16814                           fsr1h	equ	0xFE2
 16815                           fsr1l	equ	0xFE1
 16816                           indf2	equ	0xFDF
 16817                           postinc2	equ	0xFDE
 16818                           postdec2	equ	0xFDD
 16819                           plusw2	equ	0xFDB
 16820                           fsr2h	equ	0xFDA
 16821                           fsr2l	equ	0xFD9
 16822                           status	equ	0xFD8
 16823                           
 16824 ;; *************** function _strcat *****************
 16825 ;; Defined at:
 16826 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 16827 ;; Parameters:    Size  Location     Type
 16828 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16829 ;;		 -> wrkbuf(80), 
 16830 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16831 ;;		 -> STR_245(2), STR_244(2), printNodeFirmwareVersion@buf(3), STR_239(2), 
 16832 ;;		 -> STR_238(3), STR_237(2), printGUID@buf(3), 
 16833 ;; Auto vars:     Size  Location     Type
 16834 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16835 ;;		 -> wrkbuf(80), 
 16836 ;; Return value:  Size  Location     Type
 16837 ;;                  2    0[BANK0 ] PTR unsigned char 
 16838 ;; Registers used:
 16839 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16840 ;; Tracked objects:
 16841 ;;		On entry : F/0
 16842 ;;		On exit  : 0/0
 16843 ;;		Unchanged: 0/0
 16844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16845 ;;      Params:         0       4       0       0       0       0       0
 16846 ;;      Locals:         0       2       0       0       0       0       0
 16847 ;;      Temps:          0       0       0       0       0       0       0
 16848 ;;      Totals:         0       6       0       0       0       0       0
 16849 ;;Total ram usage:        6 bytes
 16850 ;; Hardware stack levels used:    1
 16851 ;; Hardware stack levels required when called:    3
 16852 ;; This function calls:
 16853 ;;		Nothing
 16854 ;; This function is called by:
 16855 ;;		_printGUID
 16856 ;;		_printNodeFirmwareVersion
 16857 ;; This function uses a non-reentrant model
 16858 ;;
 16859                           
 16860                           	psect	text32
 16861  00513A                     __ptext32:
 16862                           	opt stack 0
 16863  00513A                     _strcat:
 16864                           	opt stack 25
 16865                           
 16866                           ; BSR set to: 0
 16867                           
 16868                           ;incstack = 0
 16869                           ;incstack = 0
 16870  00513A  C060  F064         	movff	strcat@to,strcat@cp
 16871  00513E  C061  F065         	movff	strcat@to+1,strcat@cp+1
 16872  005142  D002               	goto	l12668
 16873  005144                     l12666:
 16874                           
 16875                           ; BSR set to: 0
 16876  005144  4B64               	infsnz	strcat@cp& (0+255),f,b
 16877  005146  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16878  005148                     l12668:
 16879                           
 16880                           ; BSR set to: 0
 16881  005148  C064  FFD9         	movff	strcat@cp,fsr2l
 16882  00514C  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16883  005150  50DF               	movf	indf2,w,c
 16884  005152  E006               	bz	l12672
 16885  005154  D7F7               	goto	l12666
 16886  005156                     l12670:
 16887  005156  0100               	movlb	0	; () banked
 16888  005158  4B64               	infsnz	strcat@cp& (0+255),f,b
 16889  00515A  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16890  00515C  4B62               	infsnz	strcat@from& (0+255),f,b
 16891  00515E  2B63               	incf	(strcat@from+1)& (0+255),f,b
 16892  005160                     l12672:
 16893                           
 16894                           ; BSR set to: 0
 16895  005160  C062  FFF6         	movff	strcat@from,tblptrl
 16896  005164  C063  FFF7         	movff	strcat@from+1,tblptrh
 16897  005168  6AF8               	clrf	tblptru,c
 16898  00516A  C064  FFD9         	movff	strcat@cp,fsr2l
 16899  00516E  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16900  005172  0E05               	movlw	(high __ramtop+-1)
 16901  005174  64F7               	cpfsgt	tblptrh,c
 16902  005176  D003               	bra	u16457
 16903  005178  0008               	tblrd		*
 16904  00517A  50F5               	movf	tablat,w,c
 16905  00517C  D005               	bra	u16450
 16906  00517E                     u16457:
 16907  00517E  CFF6 FFE9          	movff	tblptrl,fsr0l
 16908  005182  CFF7 FFEA          	movff	tblptrh,fsr0h
 16909  005186  50EF               	movf	indf0,w,c
 16910  005188                     u16450:
 16911  005188  6EDF               	movwf	indf2,c
 16912  00518A  50DF               	movf	indf2,w,c
 16913  00518C  B4D8               	btfsc	status,2,c
 16914  00518E  0012               	return	
 16915  005190  D7E2               	goto	l12670
 16916  005192                     __end_of_strcat:
 16917                           	opt stack 0
 16918                           tblptru	equ	0xFF8
 16919                           tblptrh	equ	0xFF7
 16920                           tblptrl	equ	0xFF6
 16921                           tablat	equ	0xFF5
 16922                           prodh	equ	0xFF4
 16923                           prodl	equ	0xFF3
 16924                           intcon	equ	0xFF2
 16925                           indf0	equ	0xFEF
 16926                           postinc0	equ	0xFEE
 16927                           fsr0h	equ	0xFEA
 16928                           fsr0l	equ	0xFE9
 16929                           wreg	equ	0xFE8
 16930                           indf1	equ	0xFE7
 16931                           postinc1	equ	0xFE6
 16932                           postdec1	equ	0xFE5
 16933                           fsr1h	equ	0xFE2
 16934                           fsr1l	equ	0xFE1
 16935                           indf2	equ	0xFDF
 16936                           postinc2	equ	0xFDE
 16937                           postdec2	equ	0xFDD
 16938                           plusw2	equ	0xFDB
 16939                           fsr2h	equ	0xFDA
 16940                           fsr2l	equ	0xFD9
 16941                           status	equ	0xFD8
 16942                           
 16943 ;; *************** function _readRegister *****************
 16944 ;; Defined at:
 16945 ;;		line 2187 in file "main.c"
 16946 ;; Parameters:    Size  Location     Type
 16947 ;;  nodeid          1    wreg     unsigned char 
 16948 ;;  reg             1   86[BANK0 ] unsigned char 
 16949 ;;  timeout         2   87[BANK0 ] unsigned short 
 16950 ;;  value           1   89[BANK0 ] PTR unsigned char 
 16951 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 16952 ;; Auto vars:     Size  Location     Type
 16953 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16954 ;; Return value:  Size  Location     Type
 16955 ;;                  1    wreg      enum E15660
 16956 ;; Registers used:
 16957 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16958 ;; Tracked objects:
 16959 ;;		On entry : F/0
 16960 ;;		On exit  : E/0
 16961 ;;		Unchanged: 0/0
 16962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16963 ;;      Params:         0       4       0       0       0       0       0
 16964 ;;      Locals:         0       1       0       0       0       0       0
 16965 ;;      Temps:          0       4       0       0       0       0       0
 16966 ;;      Totals:         0       9       0       0       0       0       0
 16967 ;;Total ram usage:        9 bytes
 16968 ;; Hardware stack levels used:    1
 16969 ;; Hardware stack levels required when called:    7
 16970 ;; This function calls:
 16971 ;;		_sendVSCPFrame
 16972 ;;		_getVSCPFrame
 16973 ;; This function is called by:
 16974 ;;		_findNodes
 16975 ;;		_printGUID
 16976 ;;		_printMDF
 16977 ;;		_printNodeFirmwareVersion
 16978 ;; This function uses a non-reentrant model
 16979 ;;
 16980                           
 16981                           	psect	text33
 16982  004210                     __ptext33:
 16983                           	opt stack 0
 16984  004210                     _readRegister:
 16985                           	opt stack 21
 16986                           
 16987                           ;incstack = 0
 16988                           ;incstack = 0
 16989                           ;readRegister@nodeid stored from wreg
 16990  004210  CFE8 F0BE          	movff	wreg,readRegister@nodeid
 16991                           
 16992                           ; BSR set to: 0
 16993                           ;main.c: 2188: vscpData[ 0 ] = nodeid;
 16994  004214  C0BE  F1A4         	movff	readRegister@nodeid,_vscpData
 16995                           
 16996                           ; BSR set to: 0
 16997                           ;main.c: 2189: vscpData[ 1 ] = reg;
 16998  004218  C0B6  F1A5         	movff	readRegister@reg,_vscpData+1
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;main.c: 2191: if (sendVSCPFrame(0,
 17002                           ;main.c: 2192: 9,
 17003                           ;main.c: 2193: 0,
 17004                           ;main.c: 2194: 0,
 17005                           ;main.c: 2195: 2,
 17006                           ;main.c: 2196: vscpData)) {
 17007  00421C  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17008  00421E  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 17009  004220  0E09               	movlw	9
 17010  004222  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17011  004224  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17012  004226  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17013  004228  0E02               	movlw	2
 17014  00422A  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17015  00422C  0E01               	movlw	high _vscpData
 17016  00422E  0100               	movlb	0	; () banked
 17017  004230  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17018  004232  0EA4               	movlw	low _vscpData
 17019  004234  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17020  004236  EC90  F022         	call	_sendVSCPFrame	;wreg free
 17021  00423A  0900               	iorlw	0
 17022  00423C  E04E               	bz	l12660
 17023                           
 17024                           ; BSR set to: 0
 17025                           ;main.c: 2198: timekeeper = 0;
 17026  00423E  6BE5               	clrf	_timekeeper& (0+255),b	;volatile
 17027  004240  6BE6               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 17028  004242  6BE7               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 17029  004244  6BE8               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 17030                           
 17031                           ;main.c: 2199: while (timekeeper < timeout) {
 17032  004246  D039               	goto	l12658
 17033  004248                     l1061:
 17034                           
 17035                           ; BSR set to: 0
 17036  004248  0004               	clrwdt		;# 
 17037                           
 17038                           ;main.c: 2203: if (getVSCPFrame(&vscpClass,
 17039                           ;main.c: 2204: &vscpType,
 17040                           ;main.c: 2205: &vscpNodeId,
 17041                           ;main.c: 2206: &vscpPriority,
 17042                           ;main.c: 2207: &vscpSize,
 17043                           ;main.c: 2208: vscpData)) {
 17044  00424A  0E01               	movlw	high _vscpClass
 17045  00424C  0100               	movlb	0	; () banked
 17046  00424E  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17047  004250  0EAC               	movlw	low _vscpClass
 17048  004252  6F72               	movwf	?_getVSCPFrame& (0+255),b
 17049  004254  0E01               	movlw	high _vscpType
 17050  004256  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17051  004258  0EB1               	movlw	low _vscpType
 17052  00425A  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17053  00425C  0E01               	movlw	high _vscpNodeId
 17054  00425E  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17055  004260  0EAE               	movlw	low _vscpNodeId
 17056  004262  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17057  004264  0E01               	movlw	high _vscpPriority
 17058  004266  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 17059  004268  0EAF               	movlw	low _vscpPriority
 17060  00426A  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 17061  00426C  0E01               	movlw	high _vscpSize
 17062  00426E  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 17063  004270  0EB0               	movlw	low _vscpSize
 17064  004272  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 17065  004274  0E01               	movlw	high _vscpData
 17066  004276  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 17067  004278  0EA4               	movlw	low _vscpData
 17068  00427A  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 17069  00427C  EC98  F025         	call	_getVSCPFrame	;wreg free
 17070  004280  0900               	iorlw	0
 17071  004282  E01B               	bz	l12658
 17072                           
 17073                           ; BSR set to: 0
 17074                           ;main.c: 2209: if ((nodeid == vscpNodeId) &&
 17075                           ;main.c: 2210: (0 == vscpClass) &&
 17076                           ;main.c: 2211: (10 == vscpType) &&
 17077                           ;main.c: 2212: (2 == vscpSize) &&
 17078                           ;main.c: 2213: (reg == vscpData[ 0 ])) {
 17079  004284  0101               	movlb	1	; () banked
 17080  004286  51AE               	movf	_vscpNodeId& (0+255),w,b
 17081  004288  0100               	movlb	0	; () banked
 17082  00428A  63BE               	cpfseq	readRegister@nodeid& (0+255),b
 17083  00428C  D016               	goto	l12658
 17084                           
 17085                           ; BSR set to: 0
 17086  00428E  0101               	movlb	1	; () banked
 17087  004290  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 17088  004292  11AC               	iorwf	_vscpClass& (0+255),w,b
 17089  004294  E112               	bnz	l12658
 17090                           
 17091                           ; BSR set to: 1
 17092  004296  51B1               	movf	_vscpType& (0+255),w,b
 17093  004298  0A0A               	xorlw	10
 17094  00429A  E10F               	bnz	l12658
 17095                           
 17096                           ; BSR set to: 1
 17097  00429C  51B0               	movf	_vscpSize& (0+255),w,b
 17098  00429E  0A02               	xorlw	2
 17099  0042A0  E10C               	bnz	l12658
 17100                           
 17101                           ; BSR set to: 1
 17102  0042A2  51A4               	movf	_vscpData& (0+255),w,b
 17103  0042A4  0100               	movlb	0	; () banked
 17104  0042A6  63B6               	cpfseq	readRegister@reg& (0+255),b
 17105  0042A8  D008               	goto	l12658
 17106                           
 17107                           ; BSR set to: 0
 17108                           ;main.c: 2214: *value = vscpData[ 1 ];
 17109  0042AA  51B9               	movf	readRegister@value& (0+255),w,b
 17110  0042AC  6ED9               	movwf	fsr2l,c
 17111  0042AE  6ADA               	clrf	fsr2h,c
 17112  0042B0  0101               	movlb	1	; () banked
 17113  0042B2  C1A5  FFDF         	movff	_vscpData+1,indf2
 17114                           
 17115                           ; BSR set to: 1
 17116                           ;main.c: 2215: return 1;
 17117  0042B6  0E01               	movlw	1
 17118  0042B8  D011               	goto	l1064
 17119  0042BA                     l12658:
 17120  0042BA  0100               	movlb	0	; () banked
 17121  0042BC  51B7               	movf	readRegister@timeout& (0+255),w,b
 17122  0042BE  6FBA               	movwf	??_readRegister& (0+255),b
 17123  0042C0  51B8               	movf	(readRegister@timeout+1)& (0+255),w,b
 17124  0042C2  6FBB               	movwf	(??_readRegister+1)& (0+255),b
 17125  0042C4  6BBC               	clrf	(??_readRegister+2)& (0+255),b
 17126  0042C6  6BBD               	clrf	(??_readRegister+3)& (0+255),b
 17127  0042C8  51BA               	movf	??_readRegister& (0+255),w,b
 17128  0042CA  5DE5               	subwf	_timekeeper& (0+255),w,b	;volatile
 17129  0042CC  51BB               	movf	(??_readRegister+1)& (0+255),w,b
 17130  0042CE  59E6               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 17131  0042D0  51BC               	movf	(??_readRegister+2)& (0+255),w,b
 17132  0042D2  59E7               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 17133  0042D4  51BD               	movf	(??_readRegister+3)& (0+255),w,b
 17134  0042D6  59E8               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 17135  0042D8  E3B7               	bnc	l1061
 17136  0042DA                     l12660:
 17137                           
 17138                           ; BSR set to: 0
 17139                           ;main.c: 2216: }
 17140                           ;main.c: 2217: }
 17141                           ;main.c: 2218: }
 17142                           ;main.c: 2219: }
 17143                           ;main.c: 2221: return 0;
 17144  0042DA  0E00               	movlw	0
 17145  0042DC                     l1064:
 17146  0042DC  0012               	return	
 17147  0042DE                     __end_of_readRegister:
 17148                           	opt stack 0
 17149                           tblptru	equ	0xFF8
 17150                           tblptrh	equ	0xFF7
 17151                           tblptrl	equ	0xFF6
 17152                           tablat	equ	0xFF5
 17153                           prodh	equ	0xFF4
 17154                           prodl	equ	0xFF3
 17155                           intcon	equ	0xFF2
 17156                           indf0	equ	0xFEF
 17157                           postinc0	equ	0xFEE
 17158                           fsr0h	equ	0xFEA
 17159                           fsr0l	equ	0xFE9
 17160                           wreg	equ	0xFE8
 17161                           indf1	equ	0xFE7
 17162                           postinc1	equ	0xFE6
 17163                           postdec1	equ	0xFE5
 17164                           fsr1h	equ	0xFE2
 17165                           fsr1l	equ	0xFE1
 17166                           indf2	equ	0xFDF
 17167                           postinc2	equ	0xFDE
 17168                           postdec2	equ	0xFDD
 17169                           plusw2	equ	0xFDB
 17170                           fsr2h	equ	0xFDA
 17171                           fsr2l	equ	0xFD9
 17172                           status	equ	0xFD8
 17173                           
 17174 ;; *************** function _sendVSCPFrame *****************
 17175 ;; Defined at:
 17176 ;;		line 2908 in file "main.c"
 17177 ;; Parameters:    Size  Location     Type
 17178 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 17179 ;;  vscptype        1   56[BANK0 ] unsigned char 
 17180 ;;  nodeid          1   57[BANK0 ] unsigned char 
 17181 ;;  priority        1   58[BANK0 ] unsigned char 
 17182 ;;  size            1   59[BANK0 ] unsigned char 
 17183 ;;  pData           2   60[BANK0 ] PTR unsigned char 
 17184 ;;		 -> vscpData(8), 
 17185 ;; Auto vars:     Size  Location     Type
 17186 ;;  id              4   82[BANK0 ] unsigned long 
 17187 ;; Return value:  Size  Location     Type
 17188 ;;                  1    wreg      unsigned char 
 17189 ;; Registers used:
 17190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17191 ;; Tracked objects:
 17192 ;;		On entry : F/0
 17193 ;;		On exit  : F/0
 17194 ;;		Unchanged: 0/0
 17195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17196 ;;      Params:         0       8       0       0       0       0       0
 17197 ;;      Locals:         0       4       0       0       0       0       0
 17198 ;;      Temps:          0      20       0       0       0       0       0
 17199 ;;      Totals:         0      32       0       0       0       0       0
 17200 ;;Total ram usage:       32 bytes
 17201 ;; Hardware stack levels used:    1
 17202 ;; Hardware stack levels required when called:    6
 17203 ;; This function calls:
 17204 ;;		_sendCANFrame
 17205 ;; This function is called by:
 17206 ;;		_doModeVerbose
 17207 ;;		_readRegister
 17208 ;;		_readRegisterExtended
 17209 ;;		_writeRegisterExtended
 17210 ;; This function uses a non-reentrant model
 17211 ;;
 17212                           
 17213                           	psect	text34
 17214  004520                     __ptext34:
 17215                           	opt stack 0
 17216  004520                     _sendVSCPFrame:
 17217                           	opt stack 21
 17218                           
 17219                           ; BSR set to: 0
 17220                           ;main.c: 2909: uint32_t id = ((uint32_t) priority << 26) |
 17221                           ;main.c: 2910: ((uint32_t) vscpclass << 16) |
 17222                           ;main.c: 2911: ((uint32_t) vscptype << 8) |
 17223                           ;main.c: 2912: nodeid;
 17224                           
 17225                           ;incstack = 0
 17226                           ;incstack = 0
 17227  004520  C098  F09E         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17228  004524  6B9F               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17229  004526  6BA0               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17230  004528  6BA1               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17231  00452A  C0A0  F0A1         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17232  00452E  C09F  F0A0         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17233  004532  C09E  F09F         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17234  004536  6B9E               	clrf	??_sendVSCPFrame& (0+255),b
 17235  004538  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17236  00453A  6FA2               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17237  00453C  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17238  00453E  6FA3               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17239  004540  6BA4               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17240  004542  6BA5               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17241  004544  C0A3  F0A5         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17242  004548  C0A2  F0A4         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17243  00454C  6BA3               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17244  00454E  6BA2               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17245  004550  C09A  F0A6         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17246  004554  6BA7               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17247  004556  6BA8               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17248  004558  6BA9               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17249  00455A  0E1A               	movlw	26
 17250  00455C                     u14105:
 17251  00455C  90D8               	bcf	status,0,c
 17252  00455E  37A6               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17253  004560  37A7               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17254  004562  37A8               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17255  004564  37A9               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17256  004566  2EE8               	decfsz	wreg,f,c
 17257  004568  D7F9               	goto	u14105
 17258  00456A  51A2               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17259  00456C  11A6               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17260  00456E  6FAA               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17261  004570  51A3               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17262  004572  11A7               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17263  004574  6FAB               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17264  004576  51A4               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17265  004578  11A8               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17266  00457A  6FAC               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17267  00457C  51A5               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17268  00457E  11A9               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17269  004580  6FAD               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17270  004582  519E               	movf	??_sendVSCPFrame& (0+255),w,b
 17271  004584  11AA               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17272  004586  6FAE               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17273  004588  519F               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17274  00458A  11AB               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17275  00458C  6FAF               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17276  00458E  51A0               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17277  004590  11AC               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17278  004592  6FB0               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17279  004594  51A1               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17280  004596  11AD               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17281  004598  6FB1               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17282  00459A  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17283  00459C  11AE               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17284  00459E  6FB2               	movwf	sendVSCPFrame@id& (0+255),b
 17285  0045A0  51AF               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17286  0045A2  6FB3               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17287  0045A4  51B0               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17288  0045A6  6FB4               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17289  0045A8  51B1               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17290  0045AA  6FB5               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17291                           
 17292                           ; BSR set to: 0
 17293                           ;main.c: 2914: if (!sendCANFrame(id, size, pData)) {
 17294  0045AC  C0B2  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 17295  0045B0  C0B3  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17296  0045B4  C0B4  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17297  0045B8  C0B5  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17298  0045BC  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17299  0045C0  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17300  0045C4  C09D  F095         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17301  0045C8  EC8D  F02A         	call	_sendCANFrame	;wreg free
 17302  0045CC  0900               	iorlw	0
 17303                           
 17304                           ; BSR set to: 0
 17305                           ;main.c: 2916: return 0;
 17306  0045CE  0E00               	movlw	0
 17307  0045D0  A4D8               	btfss	status,2,c
 17308                           
 17309                           ; BSR set to: 0
 17310                           ;main.c: 2917: }
 17311                           ;main.c: 2919: return 1;
 17312  0045D2  0E01               	movlw	1
 17313                           
 17314                           ; BSR set to: 0
 17315  0045D4  0012               	return	
 17316  0045D6                     __end_of_sendVSCPFrame:
 17317                           	opt stack 0
 17318                           tblptru	equ	0xFF8
 17319                           tblptrh	equ	0xFF7
 17320                           tblptrl	equ	0xFF6
 17321                           tablat	equ	0xFF5
 17322                           prodh	equ	0xFF4
 17323                           prodl	equ	0xFF3
 17324                           intcon	equ	0xFF2
 17325                           indf0	equ	0xFEF
 17326                           postinc0	equ	0xFEE
 17327                           fsr0h	equ	0xFEA
 17328                           fsr0l	equ	0xFE9
 17329                           wreg	equ	0xFE8
 17330                           indf1	equ	0xFE7
 17331                           postinc1	equ	0xFE6
 17332                           postdec1	equ	0xFE5
 17333                           fsr1h	equ	0xFE2
 17334                           fsr1l	equ	0xFE1
 17335                           indf2	equ	0xFDF
 17336                           postinc2	equ	0xFDE
 17337                           postdec2	equ	0xFDD
 17338                           plusw2	equ	0xFDB
 17339                           fsr2h	equ	0xFDA
 17340                           fsr2l	equ	0xFD9
 17341                           status	equ	0xFD8
 17342                           
 17343 ;; *************** function _sendCANFrame *****************
 17344 ;; Defined at:
 17345 ;;		line 2954 in file "main.c"
 17346 ;; Parameters:    Size  Location     Type
 17347 ;;  id              4   47[BANK0 ] unsigned long 
 17348 ;;  dlc             1   51[BANK0 ] unsigned char 
 17349 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 17350 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17351 ;; Auto vars:     Size  Location     Type
 17352 ;;		None
 17353 ;; Return value:  Size  Location     Type
 17354 ;;                  1    wreg      unsigned char 
 17355 ;; Registers used:
 17356 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17357 ;; Tracked objects:
 17358 ;;		On entry : F/0
 17359 ;;		On exit  : F/0
 17360 ;;		Unchanged: 0/0
 17361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17362 ;;      Params:         0       7       0       0       0       0       0
 17363 ;;      Locals:         0       0       0       0       0       0       0
 17364 ;;      Temps:          0       0       0       0       0       0       0
 17365 ;;      Totals:         0       7       0       0       0       0       0
 17366 ;;Total ram usage:        7 bytes
 17367 ;; Hardware stack levels used:    1
 17368 ;; Hardware stack levels required when called:    5
 17369 ;; This function calls:
 17370 ;;		_ECANSendMessage
 17371 ;; This function is called by:
 17372 ;;		_doModeSLCAN
 17373 ;;		_receiveVSCPModeCanalMsg
 17374 ;;		_sendVSCPFrame
 17375 ;; This function uses a non-reentrant model
 17376 ;;
 17377                           
 17378                           	psect	text35
 17379  00551A                     __ptext35:
 17380                           	opt stack 0
 17381  00551A                     _sendCANFrame:
 17382                           	opt stack 24
 17383                           
 17384                           ; BSR set to: 0
 17385                           ;main.c: 2955: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17386                           
 17387                           ; BSR set to: 0
 17388                           ;incstack = 0
 17389                           ;incstack = 0
 17390  00551A  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 17391  00551E  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17392  005522  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17393  005526  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17394  00552A  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17395  00552E  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17396  005532  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17397  005536  0E20               	movlw	32
 17398  005538  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17399  00553A  EC34  F019         	call	_ECANSendMessage	;wreg free
 17400  00553E  0900               	iorlw	0
 17401  005540  E106               	bnz	l12510
 17402                           
 17403                           ; BSR set to: 0
 17404                           ;main.c: 2957: can_transmitOverruns++;
 17405  005542  2A2B               	incf	_can_transmitOverruns,f,c
 17406  005544  0E00               	movlw	0
 17407  005546  222C               	addwfc	_can_transmitOverruns+1,f,c
 17408  005548  222D               	addwfc	_can_transmitOverruns+2,f,c
 17409  00554A  222E               	addwfc	_can_transmitOverruns+3,f,c
 17410                           
 17411                           ; BSR set to: 0
 17412                           ;main.c: 2958: return 0;
 17413  00554C  D001               	goto	l1260
 17414  00554E                     l12510:
 17415                           
 17416                           ; BSR set to: 0
 17417                           ;main.c: 2959: }
 17418                           ;main.c: 2961: return 1;
 17419  00554E  0E01               	movlw	1
 17420  005550                     l1260:
 17421                           
 17422                           ; BSR set to: 0
 17423  005550  0012               	return	
 17424  005552                     __end_of_sendCANFrame:
 17425                           	opt stack 0
 17426                           tblptru	equ	0xFF8
 17427                           tblptrh	equ	0xFF7
 17428                           tblptrl	equ	0xFF6
 17429                           tablat	equ	0xFF5
 17430                           prodh	equ	0xFF4
 17431                           prodl	equ	0xFF3
 17432                           intcon	equ	0xFF2
 17433                           indf0	equ	0xFEF
 17434                           postinc0	equ	0xFEE
 17435                           fsr0h	equ	0xFEA
 17436                           fsr0l	equ	0xFE9
 17437                           wreg	equ	0xFE8
 17438                           indf1	equ	0xFE7
 17439                           postinc1	equ	0xFE6
 17440                           postdec1	equ	0xFE5
 17441                           fsr1h	equ	0xFE2
 17442                           fsr1l	equ	0xFE1
 17443                           indf2	equ	0xFDF
 17444                           postinc2	equ	0xFDE
 17445                           postdec2	equ	0xFDD
 17446                           plusw2	equ	0xFDB
 17447                           fsr2h	equ	0xFDA
 17448                           fsr2l	equ	0xFD9
 17449                           status	equ	0xFD8
 17450                           
 17451 ;; *************** function _ECANSendMessage *****************
 17452 ;; Defined at:
 17453 ;;		line 617 in file "ECAN.c"
 17454 ;; Parameters:    Size  Location     Type
 17455 ;;  id              4   10[BANK0 ] unsigned long 
 17456 ;;  data            2   14[BANK0 ] PTR unsigned char 
 17457 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17458 ;;  dataLen         1   16[BANK0 ] unsigned char 
 17459 ;;  msgFlags        1   17[BANK0 ] enum E16306
 17460 ;; Auto vars:     Size  Location     Type
 17461 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 17462 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17463 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17464 ;;		 -> B0CON(1), 
 17465 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 17466 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17467 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17468 ;;		 -> B0CON(1), 
 17469 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 17470 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17471 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17472 ;;		 -> B0CON(1), 
 17473 ;;  i               1   44[BANK0 ] unsigned char 
 17474 ;;  temp            1   43[BANK0 ] unsigned char 
 17475 ;;  tempBSEL0       1   40[BANK0 ] struct .
 17476 ;;  j               1   39[BANK0 ] unsigned char 
 17477 ;;  buffers         1   38[BANK0 ] unsigned char 
 17478 ;;  mode            1   37[BANK0 ] unsigned char 
 17479 ;; Return value:  Size  Location     Type
 17480 ;;                  1    wreg      enum E15660
 17481 ;; Registers used:
 17482 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17483 ;; Tracked objects:
 17484 ;;		On entry : F/0
 17485 ;;		On exit  : F/0
 17486 ;;		Unchanged: 0/0
 17487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17488 ;;      Params:         0       8       0       0       0       0       0
 17489 ;;      Locals:         0      28       0       0       0       0       0
 17490 ;;      Temps:          0       1       0       0       0       0       0
 17491 ;;      Totals:         0      37       0       0       0       0       0
 17492 ;;Total ram usage:       37 bytes
 17493 ;; Hardware stack levels used:    1
 17494 ;; Hardware stack levels required when called:    4
 17495 ;; This function calls:
 17496 ;;		__CANIDToRegs
 17497 ;; This function is called by:
 17498 ;;		_sendCANFrame
 17499 ;; This function uses a non-reentrant model
 17500 ;;
 17501                           
 17502                           	psect	text36
 17503  003268                     __ptext36:
 17504                           	opt stack 0
 17505  003268                     _ECANSendMessage:
 17506                           	opt stack 24
 17507                           
 17508                           ; BSR set to: 0
 17509                           ;ECAN.c: 619: BYTE mode;
 17510                           ;ECAN.c: 620: BYTE buffers;
 17511                           ;ECAN.c: 628: BYTE i,j;
 17512                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17513                           ;ECAN.c: 630: BYTE* pb[9];
 17514                           ;ECAN.c: 631: BYTE temp;
 17515                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17516                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;incstack = 0
 17520                           ;incstack = 0
 17521  003268  0E0F               	movlw	15	;volatile
 17522  00326A  0100               	movlb	0	; () banked
 17523  00326C  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17524  00326E  0E40               	movlw	64	;volatile
 17525  003270  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 17526                           
 17527                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17528  003272  0E0F               	movlw	15	;volatile
 17529  003274  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17530  003276  0E30               	movlw	48	;volatile
 17531  003278  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17532                           
 17533                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17534  00327A  0E0F               	movlw	15	;volatile
 17535  00327C  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17536  00327E  0E20               	movlw	32	;volatile
 17537  003280  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17538                           
 17539                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17540  003282  0E0E               	movlw	14	;volatile
 17541  003284  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17542  003286  0E20               	movlw	32	;volatile
 17543  003288  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17544                           
 17545                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17546  00328A  0E0E               	movlw	14	;volatile
 17547  00328C  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17548  00328E  0E30               	movlw	48	;volatile
 17549  003290  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17550                           
 17551                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17552  003292  0E0E               	movlw	14	;volatile
 17553  003294  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17554  003296  0E40               	movlw	64	;volatile
 17555  003298  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17556                           
 17557                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17558  00329A  0E0E               	movlw	14	;volatile
 17559  00329C  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17560  00329E  0E50               	movlw	80	;volatile
 17561  0032A0  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17562                           
 17563                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17564  0032A2  0E0E               	movlw	14	;volatile
 17565  0032A4  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17566  0032A6  0E60               	movlw	96	;volatile
 17567  0032A8  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17568                           
 17569                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17570  0032AA  0E0E               	movlw	14	;volatile
 17571  0032AC  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17572  0032AE  0E70               	movlw	112	;volatile
 17573  0032B0  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17574                           
 17575                           ; BSR set to: 0
 17576                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17577  0032B2  5077               	movf	3959,w,c	;volatile
 17578  0032B4  0BC0               	andlw	192
 17579  0032B6  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 17580                           
 17581                           ; BSR set to: 0
 17582                           ;ECAN.c: 660: if ( mode == 0x00 )
 17583  0032B8  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 17584  0032BA  D002               	goto	l12682
 17585                           
 17586                           ; BSR set to: 0
 17587                           ;ECAN.c: 661: buffers = 2;
 17588  0032BC  0E02               	movlw	2
 17589  0032BE  D001               	goto	L14
 17590  0032C0                     l12682:
 17591                           
 17592                           ; BSR set to: 0
 17593                           ;ECAN.c: 662: else
 17594                           ;ECAN.c: 663: buffers = 8;
 17595  0032C0  0E08               	movlw	8
 17596  0032C2                     L14:
 17597  0032C2  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 17598                           
 17599                           ; BSR set to: 0
 17600                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17601  0032C4  010D               	movlb	13	; () banked
 17602  0032C6  90D8               	bcf	status,0,c
 17603  0032C8  31F8               	rrcf	248,w,b	;volatile
 17604  0032CA  0100               	movlb	0	; () banked
 17605  0032CC  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17606                           
 17607                           ; BSR set to: 0
 17608                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17609  0032CE  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 17610  0032D0  D07D               	goto	l12742
 17611  0032D2                     l12688:
 17612                           
 17613                           ; BSR set to: 0
 17614                           ;ECAN.c: 688: {
 17615                           ;ECAN.c: 693: ptr = pb[i];
 17616  0032D2  518C               	movf	ECANSendMessage@i& (0+255),w,b
 17617  0032D4  0D02               	mullw	2
 17618  0032D6  50F3               	movf	prodl,w,c
 17619  0032D8  0F73               	addlw	low ECANSendMessage@pb
 17620  0032DA  6ED9               	movwf	fsr2l,c
 17621  0032DC  6ADA               	clrf	fsr2h,c
 17622  0032DE  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 17623  0032E2  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 17624                           
 17625                           ; BSR set to: 0
 17626                           ;ECAN.c: 694: tempPtr = ptr;
 17627  0032E6  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17628  0032EA  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17629                           
 17630                           ; BSR set to: 0
 17631                           ;ECAN.c: 702: if ( i > 2 )
 17632  0032EE  0E02               	movlw	2
 17633  0032F0  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 17634  0032F2  D004               	goto	l12700
 17635                           
 17636                           ; BSR set to: 0
 17637                           ;ECAN.c: 703: {
 17638                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17639  0032F4  90D8               	bcf	status,0,c
 17640  0032F6  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17641                           
 17642                           ; BSR set to: 0
 17643                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17644  0032F8  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17645  0032FA  D067               	goto	l12740
 17646  0032FC                     l12700:
 17647                           
 17648                           ; BSR set to: 0
 17649                           ;ECAN.c: 714: }
 17650                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 17651  0032FC  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17652  003300  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17653  003304  50DF               	movf	indf2,w,c
 17654  003306  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17655  003308  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 17656  00330A  D05F               	goto	l12740
 17657                           
 17658                           ; BSR set to: 0
 17659                           ;ECAN.c: 721: {
 17660                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 17661  00330C  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17662  003310  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17663  003314  0EFC               	movlw	252
 17664  003316  16DF               	andwf	indf2,f,c
 17665                           
 17666                           ; BSR set to: 0
 17667                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 17668  003318  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 17669  00331C  0E03               	movlw	3
 17670  00331E  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 17671  003320  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17672  003324  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17673  003328  5172               	movf	??_ECANSendMessage& (0+255),w,b
 17674  00332A  12DF               	iorwf	indf2,f,c
 17675                           
 17676                           ; BSR set to: 0
 17677                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 17678  00332C  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 17679  00332E  D004               	goto	l1427
 17680                           
 17681                           ; BSR set to: 0
 17682                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 17683  003330  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17684  003332  0940               	iorlw	64
 17685  003334  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17686  003336  D002               	goto	l12710
 17687  003338                     l1427:
 17688                           
 17689                           ; BSR set to: 0
 17690                           ;ECAN.c: 729: else
 17691                           ;ECAN.c: 730: temp = dataLen;
 17692  003338  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 17693  00333C                     l12710:
 17694                           
 17695                           ; BSR set to: 0
 17696                           ;ECAN.c: 732: *(ptr+5) = temp;
 17697  00333C  EE20 F005          	lfsr	2,5
 17698  003340  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 17699  003342  26D9               	addwf	fsr2l,f,c
 17700  003344  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 17701  003346  22DA               	addwfc	fsr2h,f,c
 17702  003348  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 17703                           
 17704                           ; BSR set to: 0
 17705                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 17706  00334C  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 17707  00334E  D003               	goto	l1429
 17708                           
 17709                           ; BSR set to: 0
 17710                           ;ECAN.c: 736: temp = 1;
 17711  003350  0E01               	movlw	1
 17712  003352  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17713  003354  D001               	goto	l12716
 17714  003356                     l1429:
 17715                           
 17716                           ; BSR set to: 0
 17717                           ;ECAN.c: 738: else
 17718                           ;ECAN.c: 739: temp = 0;
 17719  003356  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 17720  003358                     l12716:
 17721                           
 17722                           ; BSR set to: 0
 17723                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 17724  003358  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 17725  00335A  6F60               	movwf	?__CANIDToRegs& (0+255),b
 17726  00335C  0E00               	movlw	0
 17727  00335E  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 17728  003360  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 17729  003362  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 17730  003366  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 17731  00336A  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 17732  00336E  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 17733  003372  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 17734  003376  EC4C  F01C         	call	__CANIDToRegs	;wreg free
 17735                           
 17736                           ; BSR set to: 0
 17737                           ;ECAN.c: 745: ptr += 6;
 17738  00337A  0E06               	movlw	6
 17739  00337C  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 17740  00337E  0E00               	movlw	0
 17741  003380  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 17742                           
 17743                           ; BSR set to: 0
 17744                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 17745  003382  6B87               	clrf	ECANSendMessage@j& (0+255),b
 17746  003384  D00F               	goto	l12730
 17747  003386                     l12722:
 17748                           
 17749                           ; BSR set to: 0
 17750                           ;ECAN.c: 748: *ptr++ = *data++;
 17751  003386  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 17752  00338A  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 17753  00338E  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 17754  003392  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 17755  003396  CFDF FFE7          	movff	indf2,indf1
 17756                           
 17757                           ; BSR set to: 0
 17758  00339A  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 17759  00339C  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 17760                           
 17761                           ; BSR set to: 0
 17762  00339E  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 17763  0033A0  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 17764                           
 17765                           ; BSR set to: 0
 17766  0033A2  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 17767  0033A4                     l12730:
 17768                           
 17769                           ; BSR set to: 0
 17770  0033A4  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17771  0033A6  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 17772  0033A8  E3EE               	bnc	l12722
 17773                           
 17774                           ; BSR set to: 0
 17775                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 17776  0033AA  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17777  0033AE  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17778  0033B2  50DF               	movf	indf2,w,c
 17779  0033B4  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17780  0033B6  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 17781  0033B8  D006               	goto	l12736
 17782                           
 17783                           ; BSR set to: 0
 17784                           ;ECAN.c: 753: *tempPtr |= 0x08;
 17785  0033BA  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17786  0033BE  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17787  0033C2  0E00               	movlw	0
 17788  0033C4  86DB               	bsf	plusw2,3,c
 17789  0033C6                     l12736:
 17790                           
 17791                           ; BSR set to: 0
 17792                           ;ECAN.c: 755: return TRUE;
 17793  0033C6  0E01               	movlw	1
 17794  0033C8  D005               	goto	l1435
 17795  0033CA                     l12740:
 17796                           
 17797                           ; BSR set to: 0
 17798  0033CA  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 17799  0033CC                     l12742:
 17800                           
 17801                           ; BSR set to: 0
 17802  0033CC  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 17803  0033CE  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 17804  0033D0  E380               	bnc	l12688
 17805                           
 17806                           ; BSR set to: 0
 17807                           ;ECAN.c: 756: }
 17808                           ;ECAN.c: 757: }
 17809                           ;ECAN.c: 760: return FALSE;
 17810  0033D2  0E00               	movlw	0
 17811  0033D4                     l1435:
 17812                           
 17813                           ; BSR set to: 0
 17814  0033D4  0012               	return	
 17815  0033D6                     __end_of_ECANSendMessage:
 17816                           	opt stack 0
 17817                           tblptru	equ	0xFF8
 17818                           tblptrh	equ	0xFF7
 17819                           tblptrl	equ	0xFF6
 17820                           tablat	equ	0xFF5
 17821                           prodh	equ	0xFF4
 17822                           prodl	equ	0xFF3
 17823                           intcon	equ	0xFF2
 17824                           indf0	equ	0xFEF
 17825                           postinc0	equ	0xFEE
 17826                           fsr0h	equ	0xFEA
 17827                           fsr0l	equ	0xFE9
 17828                           wreg	equ	0xFE8
 17829                           indf1	equ	0xFE7
 17830                           postinc1	equ	0xFE6
 17831                           postdec1	equ	0xFE5
 17832                           fsr1h	equ	0xFE2
 17833                           fsr1l	equ	0xFE1
 17834                           indf2	equ	0xFDF
 17835                           postinc2	equ	0xFDE
 17836                           postdec2	equ	0xFDD
 17837                           plusw2	equ	0xFDB
 17838                           fsr2h	equ	0xFDA
 17839                           fsr2l	equ	0xFD9
 17840                           status	equ	0xFD8
 17841                           
 17842 ;; *************** function __CANIDToRegs *****************
 17843 ;; Defined at:
 17844 ;;		line 1101 in file "ECAN.c"
 17845 ;; Parameters:    Size  Location     Type
 17846 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17847 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17848 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17849 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 17850 ;;  val             4    2[BANK0 ] unsigned long 
 17851 ;;  type            1    6[BANK0 ] unsigned char 
 17852 ;; Auto vars:     Size  Location     Type
 17853 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 17854 ;;		 -> _CANIDToRegs@val(4), 
 17855 ;; Return value:  Size  Location     Type
 17856 ;;		None               void
 17857 ;; Registers used:
 17858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17859 ;; Tracked objects:
 17860 ;;		On entry : F/0
 17861 ;;		On exit  : F/0
 17862 ;;		Unchanged: 0/0
 17863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17864 ;;      Params:         0       7       0       0       0       0       0
 17865 ;;      Locals:         0       1       0       0       0       0       0
 17866 ;;      Temps:          0       2       0       0       0       0       0
 17867 ;;      Totals:         0      10       0       0       0       0       0
 17868 ;;Total ram usage:       10 bytes
 17869 ;; Hardware stack levels used:    1
 17870 ;; Hardware stack levels required when called:    3
 17871 ;; This function calls:
 17872 ;;		Nothing
 17873 ;; This function is called by:
 17874 ;;		_doModeVerbose
 17875 ;;		_ECANSendMessage
 17876 ;; This function uses a non-reentrant model
 17877 ;;
 17878                           
 17879                           	psect	text37
 17880  003898                     __ptext37:
 17881                           	opt stack 0
 17882  003898                     __CANIDToRegs:
 17883                           	opt stack 24
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 17887                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 17888                           
 17889                           ; BSR set to: 0
 17890                           ;incstack = 0
 17891                           ;incstack = 0
 17892  003898  0E62               	movlw	low __CANIDToRegs@val
 17893  00389A  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 17894                           
 17895                           ; BSR set to: 0
 17896                           ;ECAN.c: 1106: if ( type == 0 )
 17897  00389C  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 17898  00389E  D022               	goto	l12068
 17899                           
 17900                           ; BSR set to: 0
 17901                           ;ECAN.c: 1107: {
 17902                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 17903  0038A0  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17904  0038A2  6ED9               	movwf	fsr2l,c
 17905  0038A4  6ADA               	clrf	fsr2h,c
 17906  0038A6  50DF               	movf	indf2,w,c
 17907  0038A8  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17908  0038AA  90D8               	bcf	status,0,c
 17909  0038AC  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17910  0038AE  90D8               	bcf	status,0,c
 17911  0038B0  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17912  0038B2  90D8               	bcf	status,0,c
 17913  0038B4  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 17914                           
 17915                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 17916  0038B6  D862               	call	PL58	;call to abstracted procedure
 17917  0038B8  2AD9               	incf	fsr2l,f,c
 17918  0038BA  6ADA               	clrf	fsr2h,c
 17919  0038BC  D872               	call	PL110	;call to abstracted procedure
 17920  0038BE                     u15365:
 17921  0038BE  90D8               	bcf	status,0,c
 17922  0038C0  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17923  0038C2  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17924  0038C4  D7FC               	goto	u15365
 17925  0038C6  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17926                           
 17927                           ; BSR set to: 0
 17928                           ;ECAN.c: 1111: ptr++;
 17929                           
 17930                           ; BSR set to: 0
 17931                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 17932  0038CA  D846               	call	PL32	;call to abstracted procedure
 17933  0038CC  D86A               	call	PL110	;call to abstracted procedure
 17934  0038CE                     u15375:
 17935  0038CE  90D8               	bcf	status,0,c
 17936  0038D0  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17937  0038D2  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17938  0038D4  D7FC               	goto	u15375
 17939  0038D6  5167               	movf	??__CANIDToRegs& (0+255),w,b
 17940  0038D8  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17941  0038DC  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17942  0038E0  6EDF               	movwf	indf2,c
 17943                           
 17944                           ;ECAN.c: 1113: }
 17945  0038E2  D039               	goto	l1489
 17946  0038E4                     l12068:
 17947                           
 17948                           ; BSR set to: 0
 17949                           ;ECAN.c: 1114: else
 17950                           ;ECAN.c: 1115: {
 17951                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 17952  0038E4  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17953  0038E6  D842               	call	PL50	;call to abstracted procedure
 17954  0038E8  0E05               	movlw	5
 17955  0038EA  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 17956  0038EC                     u15385:
 17957  0038EC  90D8               	bcf	status,0,c
 17958  0038EE  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17959  0038F0  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17960  0038F2  D7FC               	goto	u15385
 17961  0038F4  5167               	movf	??__CANIDToRegs& (0+255),w,b
 17962                           
 17963                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 17964  0038F6  D842               	call	PL58	;call to abstracted procedure
 17965  0038F8  0E03               	movlw	3
 17966  0038FA  D849               	call	PL74	;call to abstracted procedure
 17967  0038FC  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17968  0038FE  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17969                           
 17970                           ; BSR set to: 0
 17971                           ;ECAN.c: 1119: ptr++;
 17972                           
 17973                           ; BSR set to: 0
 17974                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 17975  003902  D82A               	call	PL32	;call to abstracted procedure
 17976  003904  0E02               	movlw	2
 17977  003906  D843               	call	PL74	;call to abstracted procedure
 17978  003908  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 17979  00390A  0BE0               	andlw	224
 17980  00390C  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17981  003910  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17982  003914  6EDF               	movwf	indf2,c
 17983                           
 17984                           ; BSR set to: 0
 17985                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 17986  003916  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17987  00391A  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17988  00391E  0E00               	movlw	0
 17989  003920  86DB               	bsf	plusw2,3,c
 17990                           
 17991                           ; BSR set to: 0
 17992                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 17993  003922  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17994  003924  D823               	call	PL50	;call to abstracted procedure
 17995  003926  0E03               	movlw	3
 17996  003928  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 17997  00392A  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17998                           
 17999                           ;ECAN.c: 1124: ptr++;
 18000                           
 18001                           ; BSR set to: 0
 18002                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 18003  00392E  D814               	call	PL32	;call to abstracted procedure
 18004  003930  2AD9               	incf	fsr2l,f,c
 18005  003932  6ADA               	clrf	fsr2h,c
 18006  003934  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18007  003938  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18008  00393C  CFDF FFE7          	movff	indf2,indf1
 18009                           
 18010                           ; BSR set to: 0
 18011                           ;ECAN.c: 1126: ptr++;
 18012  003940  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18013  003942  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18014                           
 18015                           ; BSR set to: 0
 18016                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 18017  003944  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18018  003946  6ED9               	movwf	fsr2l,c
 18019  003948  6ADA               	clrf	fsr2h,c
 18020  00394A  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18021  00394E  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18022  003952  CFDF FFE7          	movff	indf2,indf1
 18023  003956                     l1489:
 18024                           
 18025                           ; BSR set to: 0
 18026  003956  0012               	return	
 18027  003958                     __end_of__CANIDToRegs:
 18028                           	opt stack 0
 18029  003958                     PL32:
 18030                           	opt stack 24
 18031  003958  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18032  00395C  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18033  00395E  12DF               	iorwf	indf2,f,c
 18034  003960  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18035  003962  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18036  003964  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18037  003966  6ED9               	movwf	fsr2l,c
 18038  003968  6ADA               	clrf	fsr2h,c
 18039  00396A  0012               	return	
 18040  00396C                     __end_ofPL32:
 18041                           	opt stack 0
 18042  00396C                     PL50:
 18043                           	opt stack 24
 18044  00396C  6ED9               	movwf	fsr2l,c
 18045  00396E  6ADA               	clrf	fsr2h,c
 18046  003970  0E02               	movlw	2
 18047  003972  26D9               	addwf	fsr2l,f,c
 18048  003974  6ADA               	clrf	fsr2h,c
 18049  003976  50DF               	movf	indf2,w,c
 18050  003978  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18051  00397A  0012               	return	
 18052  00397C                     __end_ofPL50:
 18053                           	opt stack 0
 18054  00397C                     PL58:
 18055                           	opt stack 24
 18056  00397C  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18057  003980  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18058  003984  6EDF               	movwf	indf2,c
 18059  003986  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18060  003988  6ED9               	movwf	fsr2l,c
 18061  00398A  6ADA               	clrf	fsr2h,c
 18062  00398C  0012               	return	
 18063  00398E                     __end_ofPL58:
 18064                           	opt stack 0
 18065  00398E                     PL74:
 18066                           	opt stack 24
 18067  00398E  26D9               	addwf	fsr2l,f,c
 18068  003990  6ADA               	clrf	fsr2h,c
 18069  003992  50DF               	movf	indf2,w,c
 18070  003994  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18071  003996  90D8               	bcf	status,0,c
 18072  003998  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18073  00399A  90D8               	bcf	status,0,c
 18074  00399C  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18075  00399E  90D8               	bcf	status,0,c
 18076  0039A0  0012               	return	
 18077  0039A2                     __end_ofPL74:
 18078                           	opt stack 0
 18079  0039A2                     PL110:
 18080                           	opt stack 24
 18081  0039A2  50DF               	movf	indf2,w,c
 18082  0039A4  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18083  0039A6  0E05               	movlw	5
 18084  0039A8  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18085  0039AA  0C05               	retlw	5
 18086  0039AC                     __end_ofPL110:
 18087                           	opt stack 0
 18088                           tblptru	equ	0xFF8
 18089                           tblptrh	equ	0xFF7
 18090                           tblptrl	equ	0xFF6
 18091                           tablat	equ	0xFF5
 18092                           prodh	equ	0xFF4
 18093                           prodl	equ	0xFF3
 18094                           intcon	equ	0xFF2
 18095                           indf0	equ	0xFEF
 18096                           postinc0	equ	0xFEE
 18097                           fsr0h	equ	0xFEA
 18098                           fsr0l	equ	0xFE9
 18099                           wreg	equ	0xFE8
 18100                           indf1	equ	0xFE7
 18101                           postinc1	equ	0xFE6
 18102                           postdec1	equ	0xFE5
 18103                           fsr1h	equ	0xFE2
 18104                           fsr1l	equ	0xFE1
 18105                           indf2	equ	0xFDF
 18106                           postinc2	equ	0xFDE
 18107                           postdec2	equ	0xFDD
 18108                           plusw2	equ	0xFDB
 18109                           fsr2h	equ	0xFDA
 18110                           fsr2l	equ	0xFD9
 18111                           status	equ	0xFD8
 18112                           
 18113 ;; *************** function _memset *****************
 18114 ;; Defined at:
 18115 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18116 ;; Parameters:    Size  Location     Type
 18117 ;;  p1              2    0[BANK0 ] PTR void 
 18118 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18119 ;;  c               2    2[BANK0 ] int 
 18120 ;;  n               2    4[BANK0 ] unsigned int 
 18121 ;; Auto vars:     Size  Location     Type
 18122 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18123 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18124 ;; Return value:  Size  Location     Type
 18125 ;;                  2    0[BANK0 ] PTR void 
 18126 ;; Registers used:
 18127 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18128 ;; Tracked objects:
 18129 ;;		On entry : F/0
 18130 ;;		On exit  : F/0
 18131 ;;		Unchanged: 0/0
 18132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18133 ;;      Params:         0       6       0       0       0       0       0
 18134 ;;      Locals:         0       2       0       0       0       0       0
 18135 ;;      Temps:          0       0       0       0       0       0       0
 18136 ;;      Totals:         0       8       0       0       0       0       0
 18137 ;;Total ram usage:        8 bytes
 18138 ;; Hardware stack levels used:    1
 18139 ;; Hardware stack levels required when called:    3
 18140 ;; This function calls:
 18141 ;;		Nothing
 18142 ;; This function is called by:
 18143 ;;		_doModeVerbose
 18144 ;;		_doModeSLCAN
 18145 ;;		_printGUID
 18146 ;;		_printMDF
 18147 ;;		_printNodeFirmwareVersion
 18148 ;; This function uses a non-reentrant model
 18149 ;;
 18150                           
 18151                           	psect	text38
 18152  005650                     __ptext38:
 18153                           	opt stack 0
 18154  005650                     _memset:
 18155                           	opt stack 26
 18156                           
 18157                           ; BSR set to: 0
 18158                           
 18159                           ; BSR set to: 0
 18160                           ;incstack = 0
 18161                           ;incstack = 0
 18162  005650  C060  F066         	movff	memset@p1,memset@p
 18163  005654  C061  F067         	movff	memset@p1+1,memset@p+1
 18164  005658  D008               	goto	l11270
 18165  00565A                     l11266:
 18166                           
 18167                           ; BSR set to: 0
 18168  00565A  C066  FFD9         	movff	memset@p,fsr2l
 18169  00565E  C067  FFDA         	movff	memset@p+1,fsr2h
 18170  005662  C062  FFDF         	movff	memset@c,indf2
 18171                           
 18172                           ; BSR set to: 0
 18173  005666  4B66               	infsnz	memset@p& (0+255),f,b
 18174  005668  2B67               	incf	(memset@p+1)& (0+255),f,b
 18175  00566A                     l11270:
 18176                           
 18177                           ; BSR set to: 0
 18178  00566A  0764               	decf	memset@n& (0+255),f,b
 18179  00566C  A0D8               	btfss	status,0,c
 18180  00566E  0765               	decf	(memset@n+1)& (0+255),f,b
 18181  005670  0100               	movlb	0	; () banked
 18182  005672  2964               	incf	memset@n& (0+255),w,b
 18183  005674  B4D8               	btfsc	status,2,c
 18184  005676  2965               	incf	(memset@n+1)& (0+255),w,b
 18185  005678  B4D8               	btfsc	status,2,c
 18186                           
 18187                           ; BSR set to: 0
 18188  00567A  0012               	return	
 18189  00567C  D7EE               	goto	l11266
 18190  00567E                     __end_of_memset:
 18191                           	opt stack 0
 18192                           tblptru	equ	0xFF8
 18193                           tblptrh	equ	0xFF7
 18194                           tblptrl	equ	0xFF6
 18195                           tablat	equ	0xFF5
 18196                           prodh	equ	0xFF4
 18197                           prodl	equ	0xFF3
 18198                           intcon	equ	0xFF2
 18199                           indf0	equ	0xFEF
 18200                           postinc0	equ	0xFEE
 18201                           fsr0h	equ	0xFEA
 18202                           fsr0l	equ	0xFE9
 18203                           wreg	equ	0xFE8
 18204                           indf1	equ	0xFE7
 18205                           postinc1	equ	0xFE6
 18206                           postdec1	equ	0xFE5
 18207                           fsr1h	equ	0xFE2
 18208                           fsr1l	equ	0xFE1
 18209                           indf2	equ	0xFDF
 18210                           postinc2	equ	0xFDE
 18211                           postdec2	equ	0xFDD
 18212                           plusw2	equ	0xFDB
 18213                           fsr2h	equ	0xFDA
 18214                           fsr2l	equ	0xFD9
 18215                           status	equ	0xFD8
 18216                           
 18217 ;; *************** function _printHelp *****************
 18218 ;; Defined at:
 18219 ;;		line 2531 in file "main.c"
 18220 ;; Parameters:    Size  Location     Type
 18221 ;;		None
 18222 ;; Auto vars:     Size  Location     Type
 18223 ;;		None
 18224 ;; Return value:  Size  Location     Type
 18225 ;;		None               void
 18226 ;; Registers used:
 18227 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18228 ;; Tracked objects:
 18229 ;;		On entry : F/1
 18230 ;;		On exit  : 0/0
 18231 ;;		Unchanged: 0/0
 18232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18233 ;;      Params:         0       0       0       0       0       0       0
 18234 ;;      Locals:         0       0       0       0       0       0       0
 18235 ;;      Temps:          0       0       0       0       0       0       0
 18236 ;;      Totals:         0       0       0       0       0       0       0
 18237 ;;Total ram usage:        0 bytes
 18238 ;; Hardware stack levels used:    1
 18239 ;; Hardware stack levels required when called:    5
 18240 ;; This function calls:
 18241 ;;		_putsUSART
 18242 ;; This function is called by:
 18243 ;;		_doModeVerbose
 18244 ;; This function uses a non-reentrant model
 18245 ;;
 18246                           
 18247                           	psect	text39
 18248  002BFC                     __ptext39:
 18249                           	opt stack 0
 18250  002BFC                     _printHelp:
 18251                           	opt stack 24
 18252                           
 18253                           ; BSR set to: 1
 18254                           ;main.c: 2532: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18255                           
 18256                           ; BSR set to: 0
 18257                           ;incstack = 0
 18258                           ;incstack = 0
 18259  002BFC  0E78               	movlw	high STR_199
 18260  002BFE  0100               	movlb	0	; () banked
 18261  002C00  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18262  002C02  0E48               	movlw	low STR_199
 18263  002C04  6F61               	movwf	?_putsUSART& (0+255),b
 18264  002C06  ECC9  F028         	call	_putsUSART	;wreg free
 18265                           
 18266                           ;main.c: 2533: putsUSART((char *) "------------------------------------\r\n");
 18267  002C0A  0E71               	movlw	high (STR_231+28)
 18268  002C0C  0100               	movlb	0	; () banked
 18269  002C0E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18270  002C10  0E6F               	movlw	low (STR_231+28)
 18271  002C12  6F61               	movwf	?_putsUSART& (0+255),b
 18272  002C14  ECC9  F028         	call	_putsUSART	;wreg free
 18273                           
 18274                           ;main.c: 2534: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18275  002C18  0E7B               	movlw	high STR_201
 18276  002C1A  0100               	movlb	0	; () banked
 18277  002C1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18278  002C1E  0E63               	movlw	low STR_201
 18279  002C20  6F61               	movwf	?_putsUSART& (0+255),b
 18280  002C22  ECC9  F028         	call	_putsUSART	;wreg free
 18281                           
 18282                           ;main.c: 2535: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18283  002C26  0E76               	movlw	high STR_202
 18284  002C28  0100               	movlb	0	; () banked
 18285  002C2A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18286  002C2C  0ED7               	movlw	low STR_202
 18287  002C2E  6F61               	movwf	?_putsUSART& (0+255),b
 18288  002C30  ECC9  F028         	call	_putsUSART	;wreg free
 18289                           
 18290                           ;main.c: 2536: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18291  002C34  0E76               	movlw	high STR_203
 18292  002C36  0100               	movlb	0	; () banked
 18293  002C38  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18294  002C3A  0E7D               	movlw	low STR_203
 18295  002C3C  6F61               	movwf	?_putsUSART& (0+255),b
 18296  002C3E  ECC9  F028         	call	_putsUSART	;wreg free
 18297                           
 18298                           ;main.c: 2537: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18299  002C42  0E74               	movlw	high STR_204
 18300  002C44  0100               	movlb	0	; () banked
 18301  002C46  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18302  002C48  0EF6               	movlw	low STR_204
 18303  002C4A  6F61               	movwf	?_putsUSART& (0+255),b
 18304  002C4C  ECC9  F028         	call	_putsUSART	;wreg free
 18305                           
 18306                           ;main.c: 2538: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18307  002C50  0E75               	movlw	high STR_205
 18308  002C52  0100               	movlb	0	; () banked
 18309  002C54  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18310  002C56  0E5B               	movlw	low STR_205
 18311  002C58  6F61               	movwf	?_putsUSART& (0+255),b
 18312  002C5A  ECC9  F028         	call	_putsUSART	;wreg free
 18313                           
 18314                           ;main.c: 2539: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18315  002C5E  0E7B               	movlw	high STR_206
 18316  002C60  0100               	movlb	0	; () banked
 18317  002C62  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18318  002C64  0E0B               	movlw	low STR_206
 18319  002C66  6F61               	movwf	?_putsUSART& (0+255),b
 18320  002C68  ECC9  F028         	call	_putsUSART	;wreg free
 18321                           
 18322                           ;main.c: 2540: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18323  002C6C  0E75               	movlw	high STR_207
 18324  002C6E  0100               	movlb	0	; () banked
 18325  002C70  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18326  002C72  0E8D               	movlw	low STR_207
 18327  002C74  6F61               	movwf	?_putsUSART& (0+255),b
 18328  002C76  ECC9  F028         	call	_putsUSART	;wreg free
 18329                           
 18330                           ;main.c: 2541: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18331  002C7A  0E76               	movlw	high STR_208
 18332  002C7C  0100               	movlb	0	; () banked
 18333  002C7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18334  002C80  0EAB               	movlw	low STR_208
 18335  002C82  6F61               	movwf	?_putsUSART& (0+255),b
 18336  002C84  ECC9  F028         	call	_putsUSART	;wreg free
 18337                           
 18338                           ;main.c: 2542: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18339  002C88  0E7C               	movlw	high STR_209
 18340  002C8A  0100               	movlb	0	; () banked
 18341  002C8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18342  002C8E  0E00               	movlw	low STR_209
 18343  002C90  6F61               	movwf	?_putsUSART& (0+255),b
 18344  002C92  ECC9  F028         	call	_putsUSART	;wreg free
 18345                           
 18346                           ;main.c: 2543: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18347  002C96  0E73               	movlw	high STR_210
 18348  002C98  0100               	movlb	0	; () banked
 18349  002C9A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18350  002C9C  0E0F               	movlw	low STR_210
 18351  002C9E  6F61               	movwf	?_putsUSART& (0+255),b
 18352  002CA0  ECC9  F028         	call	_putsUSART	;wreg free
 18353                           
 18354                           ;main.c: 2544: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18355  002CA4  0E7C               	movlw	high STR_211
 18356  002CA6  0100               	movlb	0	; () banked
 18357  002CA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18358  002CAA  0EC0               	movlw	low STR_211
 18359  002CAC  6F61               	movwf	?_putsUSART& (0+255),b
 18360  002CAE  ECC9  F028         	call	_putsUSART	;wreg free
 18361                           
 18362                           ;main.c: 2545: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18363  002CB2  0E7A               	movlw	high STR_212
 18364  002CB4  0100               	movlb	0	; () banked
 18365  002CB6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18366  002CB8  0E27               	movlw	low STR_212
 18367  002CBA  6F61               	movwf	?_putsUSART& (0+255),b
 18368  002CBC  ECC9  F028         	call	_putsUSART	;wreg free
 18369                           
 18370                           ;main.c: 2546: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18371  002CC0  0E78               	movlw	high STR_213
 18372  002CC2  0100               	movlb	0	; () banked
 18373  002CC4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18374  002CC6  0E21               	movlw	low STR_213
 18375  002CC8  6F61               	movwf	?_putsUSART& (0+255),b
 18376  002CCA  ECC9  F028         	call	_putsUSART	;wreg free
 18377                           
 18378                           ;main.c: 2547: putsUSART((char *) "HELP - Display this help information.\r\n");
 18379  002CCE  0E77               	movlw	high STR_214
 18380  002CD0  0100               	movlb	0	; () banked
 18381  002CD2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18382  002CD4  0E82               	movlw	low STR_214
 18383  002CD6  6F61               	movwf	?_putsUSART& (0+255),b
 18384  002CD8  ECC9  F028         	call	_putsUSART	;wreg free
 18385                           
 18386                           ;main.c: 2548: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18387  002CDC  0E76               	movlw	high STR_215
 18388  002CDE  0100               	movlb	0	; () banked
 18389  002CE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18390  002CE2  0E4E               	movlw	low STR_215
 18391  002CE4  6F61               	movwf	?_putsUSART& (0+255),b
 18392  002CE6  ECC9  F028         	call	_putsUSART	;wreg free
 18393                           
 18394                           ;main.c: 2549: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 18395  002CEA  0E71               	movlw	high STR_216
 18396  002CEC  0100               	movlb	0	; () banked
 18397  002CEE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18398  002CF0  0E0E               	movlw	low STR_216
 18399  002CF2  6F61               	movwf	?_putsUSART& (0+255),b
 18400  002CF4  ECC9  F028         	call	_putsUSART	;wreg free
 18401                           
 18402                           ;main.c: 2550: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 18403  002CF8  0E71               	movlw	high STR_217
 18404  002CFA  0100               	movlb	0	; () banked
 18405  002CFC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18406  002CFE  0ED9               	movlw	low STR_217
 18407  002D00  6F61               	movwf	?_putsUSART& (0+255),b
 18408  002D02  ECC9  F028         	call	_putsUSART	;wreg free
 18409                           
 18410                           ;main.c: 2551: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18411  002D06  0E70               	movlw	high STR_218
 18412  002D08  0100               	movlb	0	; () banked
 18413  002D0A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18414  002D0C  0E7A               	movlw	low STR_218
 18415  002D0E  6F61               	movwf	?_putsUSART& (0+255),b
 18416  002D10  ECC9  F028         	call	_putsUSART	;wreg free
 18417                           
 18418                           ;main.c: 2552: putsUSART((char *) "FILTER - Set filter .\r\n");
 18419  002D14  0E7C               	movlw	high STR_219
 18420  002D16  0100               	movlb	0	; () banked
 18421  002D18  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18422  002D1A  0E18               	movlw	low STR_219
 18423  002D1C  6F61               	movwf	?_putsUSART& (0+255),b
 18424  002D1E  ECC9  F028         	call	_putsUSART	;wreg free
 18425                           
 18426                           ;main.c: 2553: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18427  002D22  0E70               	movlw	high STR_220
 18428  002D24  0100               	movlb	0	; () banked
 18429  002D26  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18430  002D28  0E2C               	movlw	low STR_220
 18431  002D2A  6F61               	movwf	?_putsUSART& (0+255),b
 18432  002D2C  ECC9  F028         	call	_putsUSART	;wreg free
 18433                           
 18434                           ;main.c: 2554: putsUSART((char *) "MASK - Set mask .\r\n");
 18435  002D30  0E7D               	movlw	high STR_221
 18436  002D32  0100               	movlb	0	; () banked
 18437  002D34  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18438  002D36  0E46               	movlw	low STR_221
 18439  002D38  6F61               	movwf	?_putsUSART& (0+255),b
 18440  002D3A  ECC9  F028         	call	_putsUSART	;wreg free
 18441                           
 18442                           ;main.c: 2555: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18443  002D3E  0E70               	movlw	high STR_222
 18444  002D40  0100               	movlb	0	; () banked
 18445  002D42  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18446  002D44  0EC7               	movlw	low STR_222
 18447  002D46  6F61               	movwf	?_putsUSART& (0+255),b
 18448  002D48  ECC9  F028         	call	_putsUSART	;wreg free
 18449                           
 18450                           ;main.c: 2556: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18451  002D4C  0E79               	movlw	high STR_223
 18452  002D4E  0100               	movlb	0	; () banked
 18453  002D50  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18454  002D52  0EE3               	movlw	low STR_223
 18455  002D54  6F61               	movwf	?_putsUSART& (0+255),b
 18456  002D56  ECC9  F028         	call	_putsUSART	;wreg free
 18457                           
 18458                           ;main.c: 2557: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18459  002D5A  0E76               	movlw	high STR_224
 18460  002D5C  0100               	movlb	0	; () banked
 18461  002D5E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18462  002D60  0E1F               	movlw	low STR_224
 18463  002D62  6F61               	movwf	?_putsUSART& (0+255),b
 18464  002D64  ECC9  F028         	call	_putsUSART	;wreg free
 18465                           
 18466                           ;main.c: 2558: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18467  002D68  0E75               	movlw	high STR_225
 18468  002D6A  0100               	movlb	0	; () banked
 18469  002D6C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18470  002D6E  0EF0               	movlw	low STR_225
 18471  002D70  6F61               	movwf	?_putsUSART& (0+255),b
 18472  002D72  ECC9  F028         	call	_putsUSART	;wreg free
 18473                           
 18474                           ;main.c: 2559: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 18475  002D76  0E71               	movlw	high STR_226
 18476  002D78  0100               	movlb	0	; () banked
 18477  002D7A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18478  002D7C  0E96               	movlw	low STR_226
 18479  002D7E  6F61               	movwf	?_putsUSART& (0+255),b
 18480  002D80  ECC9  F028         	call	_putsUSART	;wreg free
 18481                           
 18482                           ;main.c: 2560: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18483  002D84  0E75               	movlw	high STR_227
 18484  002D86  0100               	movlb	0	; () banked
 18485  002D88  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18486  002D8A  0EBF               	movlw	low STR_227
 18487  002D8C  6F61               	movwf	?_putsUSART& (0+255),b
 18488  002D8E  ECC9  F028         	call	_putsUSART	;wreg free
 18489                           
 18490                           ;main.c: 2561: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18491  002D92  0E73               	movlw	high STR_228
 18492  002D94  0100               	movlb	0	; () banked
 18493  002D96  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18494  002D98  0E7E               	movlw	low STR_228
 18495  002D9A  6F61               	movwf	?_putsUSART& (0+255),b
 18496  002D9C  ECC9  F028         	call	_putsUSART	;wreg free
 18497                           
 18498                           ;main.c: 2562: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18499  002DA0  0E72               	movlw	high STR_229
 18500  002DA2  0100               	movlb	0	; () banked
 18501  002DA4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18502  002DA6  0E5E               	movlw	low STR_229
 18503  002DA8  6F61               	movwf	?_putsUSART& (0+255),b
 18504  002DAA  ECC9  F028         	call	_putsUSART	;wreg free
 18505                           
 18506                           ;main.c: 2563: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18507  002DAE  0E78               	movlw	high STR_230
 18508  002DB0  0100               	movlb	0	; () banked
 18509  002DB2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18510  002DB4  0EBD               	movlw	low STR_230
 18511  002DB6  6F61               	movwf	?_putsUSART& (0+255),b
 18512  002DB8  EFC9  F028         	goto	_putsUSART	;wreg free
 18513  002DBC                     __end_of_printHelp:
 18514                           	opt stack 0
 18515                           tblptru	equ	0xFF8
 18516                           tblptrh	equ	0xFF7
 18517                           tblptrl	equ	0xFF6
 18518                           tablat	equ	0xFF5
 18519                           prodh	equ	0xFF4
 18520                           prodl	equ	0xFF3
 18521                           intcon	equ	0xFF2
 18522                           indf0	equ	0xFEF
 18523                           postinc0	equ	0xFEE
 18524                           fsr0h	equ	0xFEA
 18525                           fsr0l	equ	0xFE9
 18526                           wreg	equ	0xFE8
 18527                           indf1	equ	0xFE7
 18528                           postinc1	equ	0xFE6
 18529                           postdec1	equ	0xFE5
 18530                           fsr1h	equ	0xFE2
 18531                           fsr1l	equ	0xFE1
 18532                           indf2	equ	0xFDF
 18533                           postinc2	equ	0xFDE
 18534                           postdec2	equ	0xFDD
 18535                           plusw2	equ	0xFDB
 18536                           fsr2h	equ	0xFDA
 18537                           fsr2l	equ	0xFD9
 18538                           status	equ	0xFD8
 18539                           
 18540 ;; *************** function _printErrors *****************
 18541 ;; Defined at:
 18542 ;;		line 2467 in file "main.c"
 18543 ;; Parameters:    Size  Location     Type
 18544 ;;		None
 18545 ;; Auto vars:     Size  Location     Type
 18546 ;;		None
 18547 ;; Return value:  Size  Location     Type
 18548 ;;		None               void
 18549 ;; Registers used:
 18550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18551 ;; Tracked objects:
 18552 ;;		On entry : F/1
 18553 ;;		On exit  : 0/0
 18554 ;;		Unchanged: 0/0
 18555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18556 ;;      Params:         0       0       0       0       0       0       0
 18557 ;;      Locals:         0      12       0       0       0       0       0
 18558 ;;      Temps:          0       0       0       0       0       0       0
 18559 ;;      Totals:         0      12       0       0       0       0       0
 18560 ;;Total ram usage:       12 bytes
 18561 ;; Hardware stack levels used:    1
 18562 ;; Hardware stack levels required when called:    5
 18563 ;; This function calls:
 18564 ;;		_putsUSART
 18565 ;;		_sprintf
 18566 ;; This function is called by:
 18567 ;;		_doModeVerbose
 18568 ;; This function uses a non-reentrant model
 18569 ;;
 18570                           
 18571                           	psect	text40
 18572  0020BC                     __ptext40:
 18573                           	opt stack 0
 18574  0020BC                     _printErrors:
 18575                           	opt stack 24
 18576                           
 18577                           ; BSR set to: 1
 18578                           ;main.c: 2468: putsUSART((char *) "CAN Receive overruns: ");
 18579                           
 18580                           ;incstack = 0
 18581                           ;incstack = 0
 18582  0020BC  0E7C               	movlw	high STR_169
 18583  0020BE  0100               	movlb	0	; () banked
 18584  0020C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18585  0020C2  0ED7               	movlw	low STR_169
 18586  0020C4  6F61               	movwf	?_putsUSART& (0+255),b
 18587  0020C6  ECC9  F028         	call	_putsUSART	;wreg free
 18588                           
 18589                           ;main.c: 2469: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18590  0020CA  0101               	movlb	1	; () banked
 18591  0020CC  6700               	tstfsz	_bHex& (0+255),b
 18592  0020CE  D005               	goto	l11346
 18593                           
 18594                           ; BSR set to: 1
 18595  0020D0  0E7F               	movlw	high STR_155
 18596  0020D2  0100               	movlb	0	; () banked
 18597  0020D4  6F95               	movwf	(_printErrors$1384+1)& (0+255),b
 18598  0020D6  0EE0               	movlw	low STR_155
 18599  0020D8  D004               	goto	L15
 18600  0020DA                     l11346:
 18601                           
 18602                           ; BSR set to: 1
 18603  0020DA  0E7F               	movlw	high STR_170
 18604  0020DC  0100               	movlb	0	; () banked
 18605  0020DE  6F95               	movwf	(_printErrors$1384+1)& (0+255),b
 18606  0020E0  0E15               	movlw	low STR_170
 18607  0020E2                     L15:
 18608  0020E2  6F94               	movwf	_printErrors$1384& (0+255),b
 18609                           
 18610                           ; BSR set to: 0
 18611  0020E4  0E01               	movlw	high _wrkbuf
 18612  0020E6  0100               	movlb	0	; () banked
 18613  0020E8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18614  0020EA  0E54               	movlw	low _wrkbuf
 18615  0020EC  6F76               	movwf	?_sprintf& (0+255),b
 18616  0020EE  C094  F078         	movff	_printErrors$1384,?_sprintf+2
 18617  0020F2  C095  F079         	movff	_printErrors$1384+1,?_sprintf+3
 18618  0020F6  C0D1  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 18619  0020FA  C0D2  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 18620  0020FE  C0D3  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 18621  002102  C0D4  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 18622  002106  EC07  F00B         	call	_sprintf	;wreg free
 18623                           
 18624                           ; BSR set to: 0
 18625                           ;main.c: 2470: putsUSART(wrkbuf);
 18626  00210A  0E01               	movlw	high _wrkbuf
 18627  00210C  0100               	movlb	0	; () banked
 18628  00210E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18629  002110  0E54               	movlw	low _wrkbuf
 18630  002112  6F61               	movwf	?_putsUSART& (0+255),b
 18631  002114  ECC9  F028         	call	_putsUSART	;wreg free
 18632                           
 18633                           ;main.c: 2471: putsUSART((char *) "\r\n");
 18634  002118  0E74               	movlw	high (STR_190+50)
 18635  00211A  0100               	movlb	0	; () banked
 18636  00211C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18637  00211E  0E8A               	movlw	low (STR_190+50)
 18638  002120  6F61               	movwf	?_putsUSART& (0+255),b
 18639  002122  ECC9  F028         	call	_putsUSART	;wreg free
 18640                           
 18641                           ;main.c: 2473: putsUSART((char *) "CAN Transmit overruns: ");
 18642  002126  0E7C               	movlw	high STR_173
 18643  002128  0100               	movlb	0	; () banked
 18644  00212A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18645  00212C  0EA8               	movlw	low STR_173
 18646  00212E  6F61               	movwf	?_putsUSART& (0+255),b
 18647  002130  ECC9  F028         	call	_putsUSART	;wreg free
 18648                           
 18649                           ;main.c: 2474: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18650  002134  0101               	movlb	1	; () banked
 18651  002136  6700               	tstfsz	_bHex& (0+255),b
 18652  002138  D005               	goto	l11360
 18653                           
 18654                           ; BSR set to: 1
 18655  00213A  0E7F               	movlw	high STR_155
 18656  00213C  0100               	movlb	0	; () banked
 18657  00213E  6F97               	movwf	(_printErrors$1390+1)& (0+255),b
 18658  002140  0EE0               	movlw	low STR_155
 18659  002142  D004               	goto	L16
 18660  002144                     l11360:
 18661                           
 18662                           ; BSR set to: 1
 18663  002144  0E7F               	movlw	high STR_170
 18664  002146  0100               	movlb	0	; () banked
 18665  002148  6F97               	movwf	(_printErrors$1390+1)& (0+255),b
 18666  00214A  0E15               	movlw	low STR_170
 18667  00214C                     L16:
 18668  00214C  6F96               	movwf	_printErrors$1390& (0+255),b
 18669                           
 18670                           ; BSR set to: 0
 18671  00214E  0E01               	movlw	high _wrkbuf
 18672  002150  0100               	movlb	0	; () banked
 18673  002152  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18674  002154  0E54               	movlw	low _wrkbuf
 18675  002156  6F76               	movwf	?_sprintf& (0+255),b
 18676  002158  C096  F078         	movff	_printErrors$1390,?_sprintf+2
 18677  00215C  C097  F079         	movff	_printErrors$1390+1,?_sprintf+3
 18678  002160  C02B  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 18679  002164  C02C  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 18680  002168  C02D  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 18681  00216C  C02E  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 18682  002170  EC07  F00B         	call	_sprintf	;wreg free
 18683                           
 18684                           ; BSR set to: 0
 18685                           ;main.c: 2475: putsUSART(wrkbuf);
 18686  002174  0E01               	movlw	high _wrkbuf
 18687  002176  0100               	movlb	0	; () banked
 18688  002178  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18689  00217A  0E54               	movlw	low _wrkbuf
 18690  00217C  6F61               	movwf	?_putsUSART& (0+255),b
 18691  00217E  ECC9  F028         	call	_putsUSART	;wreg free
 18692                           
 18693                           ;main.c: 2476: putsUSART((char *) "\r\n");
 18694  002182  0E74               	movlw	high (STR_190+50)
 18695  002184  0100               	movlb	0	; () banked
 18696  002186  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18697  002188  0E8A               	movlw	low (STR_190+50)
 18698  00218A  6F61               	movwf	?_putsUSART& (0+255),b
 18699  00218C  ECC9  F028         	call	_putsUSART	;wreg free
 18700                           
 18701                           ;main.c: 2478: putsUSART((char *) "UART Receive overruns: ");
 18702  002190  0E7C               	movlw	high STR_177
 18703  002192  0100               	movlb	0	; () banked
 18704  002194  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18705  002196  0E90               	movlw	low STR_177
 18706  002198  6F61               	movwf	?_putsUSART& (0+255),b
 18707  00219A  ECC9  F028         	call	_putsUSART	;wreg free
 18708                           
 18709                           ;main.c: 2479: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18710  00219E  0101               	movlb	1	; () banked
 18711  0021A0  6700               	tstfsz	_bHex& (0+255),b
 18712  0021A2  D005               	goto	l11374
 18713                           
 18714                           ; BSR set to: 1
 18715  0021A4  0E7F               	movlw	high STR_155
 18716  0021A6  0100               	movlb	0	; () banked
 18717  0021A8  6F99               	movwf	(_printErrors$1396+1)& (0+255),b
 18718  0021AA  0EE0               	movlw	low STR_155
 18719  0021AC  D004               	goto	L17
 18720  0021AE                     l11374:
 18721                           
 18722                           ; BSR set to: 1
 18723  0021AE  0E7F               	movlw	high STR_170
 18724  0021B0  0100               	movlb	0	; () banked
 18725  0021B2  6F99               	movwf	(_printErrors$1396+1)& (0+255),b
 18726  0021B4  0E15               	movlw	low STR_170
 18727  0021B6                     L17:
 18728  0021B6  6F98               	movwf	_printErrors$1396& (0+255),b
 18729                           
 18730                           ; BSR set to: 0
 18731  0021B8  0E01               	movlw	high _wrkbuf
 18732  0021BA  0100               	movlb	0	; () banked
 18733  0021BC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18734  0021BE  0E54               	movlw	low _wrkbuf
 18735  0021C0  6F76               	movwf	?_sprintf& (0+255),b
 18736  0021C2  C098  F078         	movff	_printErrors$1396,?_sprintf+2
 18737  0021C6  C099  F079         	movff	_printErrors$1396+1,?_sprintf+3
 18738  0021CA  C02F  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 18739  0021CE  C030  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18740  0021D2  C031  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18741  0021D6  C032  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18742  0021DA  EC07  F00B         	call	_sprintf	;wreg free
 18743                           
 18744                           ; BSR set to: 0
 18745                           ;main.c: 2480: putsUSART(wrkbuf);
 18746  0021DE  0E01               	movlw	high _wrkbuf
 18747  0021E0  0100               	movlb	0	; () banked
 18748  0021E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18749  0021E4  0E54               	movlw	low _wrkbuf
 18750  0021E6  6F61               	movwf	?_putsUSART& (0+255),b
 18751  0021E8  ECC9  F028         	call	_putsUSART	;wreg free
 18752                           
 18753                           ;main.c: 2481: putsUSART((char *) "\r\n");
 18754  0021EC  0E74               	movlw	high (STR_190+50)
 18755  0021EE  0100               	movlb	0	; () banked
 18756  0021F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18757  0021F2  0E8A               	movlw	low (STR_190+50)
 18758  0021F4  6F61               	movwf	?_putsUSART& (0+255),b
 18759  0021F6  ECC9  F028         	call	_putsUSART	;wreg free
 18760                           
 18761                           ;main.c: 2483: putsUSART((char *) "UART Receive overruns: ");
 18762  0021FA  0E7C               	movlw	high STR_177
 18763  0021FC  0100               	movlb	0	; () banked
 18764  0021FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18765  002200  0E90               	movlw	low STR_177
 18766  002202  6F61               	movwf	?_putsUSART& (0+255),b
 18767  002204  ECC9  F028         	call	_putsUSART	;wreg free
 18768                           
 18769                           ;main.c: 2484: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18770  002208  0101               	movlb	1	; () banked
 18771  00220A  6700               	tstfsz	_bHex& (0+255),b
 18772  00220C  D005               	goto	l11388
 18773                           
 18774                           ; BSR set to: 1
 18775  00220E  0E7F               	movlw	high STR_155
 18776  002210  0100               	movlb	0	; () banked
 18777  002212  6F9B               	movwf	(_printErrors$1402+1)& (0+255),b
 18778  002214  0EE0               	movlw	low STR_155
 18779  002216  D004               	goto	L18
 18780  002218                     l11388:
 18781                           
 18782                           ; BSR set to: 1
 18783  002218  0E7F               	movlw	high STR_170
 18784  00221A  0100               	movlb	0	; () banked
 18785  00221C  6F9B               	movwf	(_printErrors$1402+1)& (0+255),b
 18786  00221E  0E15               	movlw	low STR_170
 18787  002220                     L18:
 18788  002220  6F9A               	movwf	_printErrors$1402& (0+255),b
 18789                           
 18790                           ; BSR set to: 0
 18791  002222  0E01               	movlw	high _wrkbuf
 18792  002224  0100               	movlb	0	; () banked
 18793  002226  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18794  002228  0E54               	movlw	low _wrkbuf
 18795  00222A  6F76               	movwf	?_sprintf& (0+255),b
 18796  00222C  C09A  F078         	movff	_printErrors$1402,?_sprintf+2
 18797  002230  C09B  F079         	movff	_printErrors$1402+1,?_sprintf+3
 18798  002234  C033  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 18799  002238  C034  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18800  00223C  C035  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18801  002240  C036  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18802  002244  EC07  F00B         	call	_sprintf	;wreg free
 18803                           
 18804                           ; BSR set to: 0
 18805                           ;main.c: 2485: putsUSART(wrkbuf);
 18806  002248  0E01               	movlw	high _wrkbuf
 18807  00224A  0100               	movlb	0	; () banked
 18808  00224C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18809  00224E  0E54               	movlw	low _wrkbuf
 18810  002250  6F61               	movwf	?_putsUSART& (0+255),b
 18811  002252  ECC9  F028         	call	_putsUSART	;wreg free
 18812                           
 18813                           ;main.c: 2486: putsUSART((char *) "\r\n");
 18814  002256  0E74               	movlw	high (STR_190+50)
 18815  002258  0100               	movlb	0	; () banked
 18816  00225A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18817  00225C  0E8A               	movlw	low (STR_190+50)
 18818  00225E  6F61               	movwf	?_putsUSART& (0+255),b
 18819  002260  ECC9  F028         	call	_putsUSART	;wreg free
 18820                           
 18821                           ;main.c: 2488: putsUSART((char *) "Transmit Error Counter: ");
 18822  002264  0E7B               	movlw	high STR_185
 18823  002266  0100               	movlb	0	; () banked
 18824  002268  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18825  00226A  0EE7               	movlw	low STR_185
 18826  00226C  6F61               	movwf	?_putsUSART& (0+255),b
 18827  00226E  ECC9  F028         	call	_putsUSART	;wreg free
 18828                           
 18829                           ;main.c: 2489: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18830  002272  0101               	movlb	1	; () banked
 18831  002274  6700               	tstfsz	_bHex& (0+255),b
 18832  002276  D005               	goto	l11402
 18833                           
 18834                           ; BSR set to: 1
 18835  002278  0E7F               	movlw	high STR_54
 18836  00227A  0100               	movlb	0	; () banked
 18837  00227C  6F9D               	movwf	(_printErrors$1408+1)& (0+255),b
 18838  00227E  0EED               	movlw	low STR_54
 18839  002280  D004               	goto	L19
 18840  002282                     l11402:
 18841                           
 18842                           ; BSR set to: 1
 18843  002282  0E7F               	movlw	high STR_53
 18844  002284  0100               	movlb	0	; () banked
 18845  002286  6F9D               	movwf	(_printErrors$1408+1)& (0+255),b
 18846  002288  0E64               	movlw	low STR_53
 18847  00228A                     L19:
 18848  00228A  6F9C               	movwf	_printErrors$1408& (0+255),b
 18849                           
 18850                           ; BSR set to: 0
 18851  00228C  0E01               	movlw	high _wrkbuf
 18852  00228E  0100               	movlb	0	; () banked
 18853  002290  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18854  002292  0E54               	movlw	low _wrkbuf
 18855  002294  6F76               	movwf	?_sprintf& (0+255),b
 18856  002296  C09C  F078         	movff	_printErrors$1408,?_sprintf+2
 18857  00229A  C09D  F079         	movff	_printErrors$1408+1,?_sprintf+3
 18858  00229E  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 18859  0022A2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18860  0022A4  EC07  F00B         	call	_sprintf	;wreg free
 18861                           
 18862                           ; BSR set to: 0
 18863                           ;main.c: 2490: putsUSART(wrkbuf);
 18864  0022A8  0E01               	movlw	high _wrkbuf
 18865  0022AA  0100               	movlb	0	; () banked
 18866  0022AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18867  0022AE  0E54               	movlw	low _wrkbuf
 18868  0022B0  6F61               	movwf	?_putsUSART& (0+255),b
 18869  0022B2  ECC9  F028         	call	_putsUSART	;wreg free
 18870                           
 18871                           ;main.c: 2491: putsUSART((char *) "\r\n");
 18872  0022B6  0E74               	movlw	high (STR_190+50)
 18873  0022B8  0100               	movlb	0	; () banked
 18874  0022BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18875  0022BC  0E8A               	movlw	low (STR_190+50)
 18876  0022BE  6F61               	movwf	?_putsUSART& (0+255),b
 18877  0022C0  ECC9  F028         	call	_putsUSART	;wreg free
 18878                           
 18879                           ;main.c: 2493: if (COMSTATbits.TXWARN) {
 18880  0022C4  A474               	btfss	3956,2,c	;volatile
 18881  0022C6  D007               	goto	l11414
 18882                           
 18883                           ;main.c: 2494: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 18884  0022C8  0E72               	movlw	high STR_189
 18885  0022CA  0100               	movlb	0	; () banked
 18886  0022CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18887  0022CE  0E9C               	movlw	low STR_189
 18888  0022D0  6F61               	movwf	?_putsUSART& (0+255),b
 18889  0022D2  ECC9  F028         	call	_putsUSART	;wreg free
 18890  0022D6                     l11414:
 18891                           
 18892                           ;main.c: 2495: }
 18893                           ;main.c: 2497: if (COMSTATbits.TXBO) {
 18894  0022D6  AA74               	btfss	3956,5,c	;volatile
 18895  0022D8  D007               	goto	l11418
 18896                           
 18897                           ;main.c: 2498: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 18898  0022DA  0E74               	movlw	high STR_190
 18899  0022DC  0100               	movlb	0	; () banked
 18900  0022DE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18901  0022E0  0E58               	movlw	low STR_190
 18902  0022E2  6F61               	movwf	?_putsUSART& (0+255),b
 18903  0022E4  ECC9  F028         	call	_putsUSART	;wreg free
 18904  0022E8                     l11418:
 18905                           
 18906                           ;main.c: 2499: }
 18907                           ;main.c: 2501: if (COMSTATbits.TXBP) {
 18908  0022E8  A874               	btfss	3956,4,c	;volatile
 18909  0022EA  D007               	goto	l1158
 18910                           
 18911                           ;main.c: 2502: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 18912  0022EC  0E72               	movlw	high STR_191
 18913  0022EE  0100               	movlb	0	; () banked
 18914  0022F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18915  0022F2  0ED6               	movlw	low STR_191
 18916  0022F4  6F61               	movwf	?_putsUSART& (0+255),b
 18917  0022F6  ECC9  F028         	call	_putsUSART	;wreg free
 18918  0022FA                     l1158:
 18919                           
 18920                           ;main.c: 2503: }
 18921                           ;main.c: 2506: putsUSART((char *) "Receive Error Counter: ");
 18922  0022FA  0E7C               	movlw	high STR_192
 18923  0022FC  0100               	movlb	0	; () banked
 18924  0022FE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18925  002300  0E78               	movlw	low STR_192
 18926  002302  6F61               	movwf	?_putsUSART& (0+255),b
 18927  002304  ECC9  F028         	call	_putsUSART	;wreg free
 18928                           
 18929                           ;main.c: 2507: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 18930  002308  0101               	movlb	1	; () banked
 18931  00230A  6700               	tstfsz	_bHex& (0+255),b
 18932  00230C  D005               	goto	l11426
 18933                           
 18934                           ; BSR set to: 1
 18935  00230E  0E7F               	movlw	high STR_54
 18936  002310  0100               	movlb	0	; () banked
 18937  002312  6F9F               	movwf	(_printErrors$1417+1)& (0+255),b
 18938  002314  0EED               	movlw	low STR_54
 18939  002316  D004               	goto	L20
 18940  002318                     l11426:
 18941                           
 18942                           ; BSR set to: 1
 18943  002318  0E7F               	movlw	high STR_53
 18944  00231A  0100               	movlb	0	; () banked
 18945  00231C  6F9F               	movwf	(_printErrors$1417+1)& (0+255),b
 18946  00231E  0E64               	movlw	low STR_53
 18947  002320                     L20:
 18948  002320  6F9E               	movwf	_printErrors$1417& (0+255),b
 18949                           
 18950                           ; BSR set to: 0
 18951  002322  0E01               	movlw	high _wrkbuf
 18952  002324  0100               	movlb	0	; () banked
 18953  002326  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18954  002328  0E54               	movlw	low _wrkbuf
 18955  00232A  6F76               	movwf	?_sprintf& (0+255),b
 18956  00232C  C09E  F078         	movff	_printErrors$1417,?_sprintf+2
 18957  002330  C09F  F079         	movff	_printErrors$1417+1,?_sprintf+3
 18958  002334  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 18959  002338  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18960  00233A  EC07  F00B         	call	_sprintf	;wreg free
 18961                           
 18962                           ; BSR set to: 0
 18963                           ;main.c: 2508: putsUSART(wrkbuf);
 18964  00233E  0E01               	movlw	high _wrkbuf
 18965  002340  0100               	movlb	0	; () banked
 18966  002342  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18967  002344  0E54               	movlw	low _wrkbuf
 18968  002346  6F61               	movwf	?_putsUSART& (0+255),b
 18969  002348  ECC9  F028         	call	_putsUSART	;wreg free
 18970                           
 18971                           ;main.c: 2509: putsUSART((char *) "\r\n");
 18972  00234C  0E74               	movlw	high (STR_190+50)
 18973  00234E  0100               	movlb	0	; () banked
 18974  002350  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18975  002352  0E8A               	movlw	low (STR_190+50)
 18976  002354  6F61               	movwf	?_putsUSART& (0+255),b
 18977  002356  ECC9  F028         	call	_putsUSART	;wreg free
 18978                           
 18979                           ;main.c: 2511: if (COMSTATbits.RXWARN) {
 18980  00235A  A274               	btfss	3956,1,c	;volatile
 18981  00235C  D007               	goto	l11438
 18982                           
 18983                           ;main.c: 2512: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 18984  00235E  0E73               	movlw	high STR_196
 18985  002360  0100               	movlb	0	; () banked
 18986  002362  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18987  002364  0E47               	movlw	low STR_196
 18988  002366  6F61               	movwf	?_putsUSART& (0+255),b
 18989  002368  ECC9  F028         	call	_putsUSART	;wreg free
 18990  00236C                     l11438:
 18991                           
 18992                           ;main.c: 2513: }
 18993                           ;main.c: 2515: if (COMSTATbits.RXBP) {
 18994  00236C  A674               	btfss	3956,3,c	;volatile
 18995  00236E  D007               	goto	l11442
 18996                           
 18997                           ;main.c: 2516: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 18998  002370  0E73               	movlw	high STR_197
 18999  002372  0100               	movlb	0	; () banked
 19000  002374  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19001  002376  0EEC               	movlw	low STR_197
 19002  002378  6F61               	movwf	?_putsUSART& (0+255),b
 19003  00237A  ECC9  F028         	call	_putsUSART	;wreg free
 19004  00237E                     l11442:
 19005                           
 19006                           ;main.c: 2517: }
 19007                           ;main.c: 2519: if (COMSTATbits.EWARN) {
 19008  00237E  A074               	btfss	3956,0,c	;volatile
 19009  002380  D007               	goto	l1166
 19010                           
 19011                           ;main.c: 2520: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19012  002382  0E74               	movlw	high STR_198
 19013  002384  0100               	movlb	0	; () banked
 19014  002386  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19015  002388  0EC2               	movlw	low STR_198
 19016  00238A  6F61               	movwf	?_putsUSART& (0+255),b
 19017  00238C  ECC9  F028         	call	_putsUSART	;wreg free
 19018  002390                     l1166:
 19019  002390  0012               	return	
 19020  002392                     __end_of_printErrors:
 19021                           	opt stack 0
 19022                           tblptru	equ	0xFF8
 19023                           tblptrh	equ	0xFF7
 19024                           tblptrl	equ	0xFF6
 19025                           tablat	equ	0xFF5
 19026                           prodh	equ	0xFF4
 19027                           prodl	equ	0xFF3
 19028                           intcon	equ	0xFF2
 19029                           indf0	equ	0xFEF
 19030                           postinc0	equ	0xFEE
 19031                           fsr0h	equ	0xFEA
 19032                           fsr0l	equ	0xFE9
 19033                           wreg	equ	0xFE8
 19034                           indf1	equ	0xFE7
 19035                           postinc1	equ	0xFE6
 19036                           postdec1	equ	0xFE5
 19037                           fsr1h	equ	0xFE2
 19038                           fsr1l	equ	0xFE1
 19039                           indf2	equ	0xFDF
 19040                           postinc2	equ	0xFDE
 19041                           postdec2	equ	0xFDD
 19042                           plusw2	equ	0xFDB
 19043                           fsr2h	equ	0xFDA
 19044                           fsr2l	equ	0xFD9
 19045                           status	equ	0xFD8
 19046                           
 19047 ;; *************** function _printStatistics *****************
 19048 ;; Defined at:
 19049 ;;		line 2440 in file "main.c"
 19050 ;; Parameters:    Size  Location     Type
 19051 ;;		None
 19052 ;; Auto vars:     Size  Location     Type
 19053 ;;		None
 19054 ;; Return value:  Size  Location     Type
 19055 ;;		None               void
 19056 ;; Registers used:
 19057 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19058 ;; Tracked objects:
 19059 ;;		On entry : F/1
 19060 ;;		On exit  : 0/0
 19061 ;;		Unchanged: 0/0
 19062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19063 ;;      Params:         0       0       0       0       0       0       0
 19064 ;;      Locals:         0       8       0       0       0       0       0
 19065 ;;      Temps:          0       0       0       0       0       0       0
 19066 ;;      Totals:         0       8       0       0       0       0       0
 19067 ;;Total ram usage:        8 bytes
 19068 ;; Hardware stack levels used:    1
 19069 ;; Hardware stack levels required when called:    5
 19070 ;; This function calls:
 19071 ;;		_putsUSART
 19072 ;;		_sprintf
 19073 ;; This function is called by:
 19074 ;;		_doModeVerbose
 19075 ;; This function uses a non-reentrant model
 19076 ;;
 19077                           
 19078                           	psect	text41
 19079  002DBC                     __ptext41:
 19080                           	opt stack 0
 19081  002DBC                     _printStatistics:
 19082                           	opt stack 24
 19083                           
 19084                           ; BSR set to: 1
 19085                           ;main.c: 2441: putsUSART((char *) "Sent CAN frames: ");
 19086                           
 19087                           ;incstack = 0
 19088                           ;incstack = 0
 19089  002DBC  0E7E               	movlw	high STR_153
 19090  002DBE  0100               	movlb	0	; () banked
 19091  002DC0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19092  002DC2  0E09               	movlw	low STR_153
 19093  002DC4  6F61               	movwf	?_putsUSART& (0+255),b
 19094  002DC6  ECC9  F028         	call	_putsUSART	;wreg free
 19095                           
 19096                           ;main.c: 2442: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19097  002DCA  0101               	movlb	1	; () banked
 19098  002DCC  6700               	tstfsz	_bHex& (0+255),b
 19099  002DCE  D005               	goto	l11290
 19100                           
 19101                           ; BSR set to: 1
 19102  002DD0  0E7F               	movlw	high STR_155
 19103  002DD2  0100               	movlb	0	; () banked
 19104  002DD4  6F95               	movwf	(_printStatistics$1359+1)& (0+255),b
 19105  002DD6  0EE0               	movlw	low STR_155
 19106  002DD8  D004               	goto	L21
 19107  002DDA                     l11290:
 19108                           
 19109                           ; BSR set to: 1
 19110  002DDA  0E7F               	movlw	high STR_154
 19111  002DDC  0100               	movlb	0	; () banked
 19112  002DDE  6F95               	movwf	(_printStatistics$1359+1)& (0+255),b
 19113  002DE0  0E72               	movlw	low STR_154
 19114  002DE2                     L21:
 19115  002DE2  6F94               	movwf	_printStatistics$1359& (0+255),b
 19116                           
 19117                           ; BSR set to: 0
 19118  002DE4  0E01               	movlw	high _wrkbuf
 19119  002DE6  0100               	movlb	0	; () banked
 19120  002DE8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19121  002DEA  0E54               	movlw	low _wrkbuf
 19122  002DEC  6F76               	movwf	?_sprintf& (0+255),b
 19123  002DEE  C094  F078         	movff	_printStatistics$1359,?_sprintf+2
 19124  002DF2  C095  F079         	movff	_printStatistics$1359+1,?_sprintf+3
 19125  002DF6  C0E1  F07A         	movff	_cntTxFrames,?_sprintf+4
 19126  002DFA  C0E2  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19127  002DFE  C0E3  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19128  002E02  C0E4  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19129  002E06  EC07  F00B         	call	_sprintf	;wreg free
 19130                           
 19131                           ; BSR set to: 0
 19132                           ;main.c: 2443: putsUSART(wrkbuf);
 19133  002E0A  0E01               	movlw	high _wrkbuf
 19134  002E0C  0100               	movlb	0	; () banked
 19135  002E0E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19136  002E10  0E54               	movlw	low _wrkbuf
 19137  002E12  6F61               	movwf	?_putsUSART& (0+255),b
 19138  002E14  ECC9  F028         	call	_putsUSART	;wreg free
 19139                           
 19140                           ;main.c: 2444: putsUSART((char *) "\r\n");
 19141  002E18  0E74               	movlw	high (STR_190+50)
 19142  002E1A  0100               	movlb	0	; () banked
 19143  002E1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19144  002E1E  0E8A               	movlw	low (STR_190+50)
 19145  002E20  6F61               	movwf	?_putsUSART& (0+255),b
 19146  002E22  ECC9  F028         	call	_putsUSART	;wreg free
 19147                           
 19148                           ;main.c: 2446: putsUSART((char *) "Sent CAN bytes: ");
 19149  002E26  0E7E               	movlw	high STR_157
 19150  002E28  0100               	movlb	0	; () banked
 19151  002E2A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19152  002E2C  0E3D               	movlw	low STR_157
 19153  002E2E  6F61               	movwf	?_putsUSART& (0+255),b
 19154  002E30  ECC9  F028         	call	_putsUSART	;wreg free
 19155                           
 19156                           ;main.c: 2447: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19157  002E34  0101               	movlb	1	; () banked
 19158  002E36  6700               	tstfsz	_bHex& (0+255),b
 19159  002E38  D005               	goto	l11304
 19160                           
 19161                           ; BSR set to: 1
 19162  002E3A  0E7F               	movlw	high STR_155
 19163  002E3C  0100               	movlb	0	; () banked
 19164  002E3E  6F97               	movwf	(_printStatistics$1365+1)& (0+255),b
 19165  002E40  0EE0               	movlw	low STR_155
 19166  002E42  D004               	goto	L22
 19167  002E44                     l11304:
 19168                           
 19169                           ; BSR set to: 1
 19170  002E44  0E7F               	movlw	high STR_154
 19171  002E46  0100               	movlb	0	; () banked
 19172  002E48  6F97               	movwf	(_printStatistics$1365+1)& (0+255),b
 19173  002E4A  0E72               	movlw	low STR_154
 19174  002E4C                     L22:
 19175  002E4C  6F96               	movwf	_printStatistics$1365& (0+255),b
 19176                           
 19177                           ; BSR set to: 0
 19178  002E4E  0E01               	movlw	high _wrkbuf
 19179  002E50  0100               	movlb	0	; () banked
 19180  002E52  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19181  002E54  0E54               	movlw	low _wrkbuf
 19182  002E56  6F76               	movwf	?_sprintf& (0+255),b
 19183  002E58  C096  F078         	movff	_printStatistics$1365,?_sprintf+2
 19184  002E5C  C097  F079         	movff	_printStatistics$1365+1,?_sprintf+3
 19185  002E60  C0DD  F07A         	movff	_cntTxBytes,?_sprintf+4
 19186  002E64  C0DE  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19187  002E68  C0DF  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19188  002E6C  C0E0  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19189  002E70  EC07  F00B         	call	_sprintf	;wreg free
 19190                           
 19191                           ; BSR set to: 0
 19192                           ;main.c: 2448: putsUSART(wrkbuf);
 19193  002E74  0E01               	movlw	high _wrkbuf
 19194  002E76  0100               	movlb	0	; () banked
 19195  002E78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19196  002E7A  0E54               	movlw	low _wrkbuf
 19197  002E7C  6F61               	movwf	?_putsUSART& (0+255),b
 19198  002E7E  ECC9  F028         	call	_putsUSART	;wreg free
 19199                           
 19200                           ;main.c: 2449: putsUSART((char *) "\r\n");
 19201  002E82  0E74               	movlw	high (STR_190+50)
 19202  002E84  0100               	movlb	0	; () banked
 19203  002E86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19204  002E88  0E8A               	movlw	low (STR_190+50)
 19205  002E8A  6F61               	movwf	?_putsUSART& (0+255),b
 19206  002E8C  ECC9  F028         	call	_putsUSART	;wreg free
 19207                           
 19208                           ;main.c: 2451: putsUSART((char *) "Received CAN frames: ");
 19209  002E90  0E7D               	movlw	high STR_161
 19210  002E92  0100               	movlb	0	; () banked
 19211  002E94  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19212  002E96  0E1B               	movlw	low STR_161
 19213  002E98  6F61               	movwf	?_putsUSART& (0+255),b
 19214  002E9A  ECC9  F028         	call	_putsUSART	;wreg free
 19215                           
 19216                           ;main.c: 2452: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19217  002E9E  0101               	movlb	1	; () banked
 19218  002EA0  6700               	tstfsz	_bHex& (0+255),b
 19219  002EA2  D005               	goto	l11318
 19220                           
 19221                           ; BSR set to: 1
 19222  002EA4  0E7F               	movlw	high STR_155
 19223  002EA6  0100               	movlb	0	; () banked
 19224  002EA8  6F99               	movwf	(_printStatistics$1371+1)& (0+255),b
 19225  002EAA  0EE0               	movlw	low STR_155
 19226  002EAC  D004               	goto	L23
 19227  002EAE                     l11318:
 19228                           
 19229                           ; BSR set to: 1
 19230  002EAE  0E7F               	movlw	high STR_154
 19231  002EB0  0100               	movlb	0	; () banked
 19232  002EB2  6F99               	movwf	(_printStatistics$1371+1)& (0+255),b
 19233  002EB4  0E72               	movlw	low STR_154
 19234  002EB6                     L23:
 19235  002EB6  6F98               	movwf	_printStatistics$1371& (0+255),b
 19236                           
 19237                           ; BSR set to: 0
 19238  002EB8  0E01               	movlw	high _wrkbuf
 19239  002EBA  0100               	movlb	0	; () banked
 19240  002EBC  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19241  002EBE  0E54               	movlw	low _wrkbuf
 19242  002EC0  6F76               	movwf	?_sprintf& (0+255),b
 19243  002EC2  C098  F078         	movff	_printStatistics$1371,?_sprintf+2
 19244  002EC6  C099  F079         	movff	_printStatistics$1371+1,?_sprintf+3
 19245  002ECA  C0D9  F07A         	movff	_cntRxFrames,?_sprintf+4
 19246  002ECE  C0DA  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19247  002ED2  C0DB  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19248  002ED6  C0DC  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19249  002EDA  EC07  F00B         	call	_sprintf	;wreg free
 19250                           
 19251                           ; BSR set to: 0
 19252                           ;main.c: 2453: putsUSART(wrkbuf);
 19253  002EDE  0E01               	movlw	high _wrkbuf
 19254  002EE0  0100               	movlb	0	; () banked
 19255  002EE2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19256  002EE4  0E54               	movlw	low _wrkbuf
 19257  002EE6  6F61               	movwf	?_putsUSART& (0+255),b
 19258  002EE8  ECC9  F028         	call	_putsUSART	;wreg free
 19259                           
 19260                           ;main.c: 2454: putsUSART((char *) "\r\n");
 19261  002EEC  0E74               	movlw	high (STR_190+50)
 19262  002EEE  0100               	movlb	0	; () banked
 19263  002EF0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19264  002EF2  0E8A               	movlw	low (STR_190+50)
 19265  002EF4  6F61               	movwf	?_putsUSART& (0+255),b
 19266  002EF6  ECC9  F028         	call	_putsUSART	;wreg free
 19267                           
 19268                           ;main.c: 2456: putsUSART((char *) "Received CAN bytes: ");
 19269  002EFA  0E7D               	movlw	high STR_165
 19270  002EFC  0100               	movlb	0	; () banked
 19271  002EFE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19272  002F00  0E31               	movlw	low STR_165
 19273  002F02  6F61               	movwf	?_putsUSART& (0+255),b
 19274  002F04  ECC9  F028         	call	_putsUSART	;wreg free
 19275                           
 19276                           ;main.c: 2457: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19277  002F08  0101               	movlb	1	; () banked
 19278  002F0A  6700               	tstfsz	_bHex& (0+255),b
 19279  002F0C  D005               	goto	l11332
 19280                           
 19281                           ; BSR set to: 1
 19282  002F0E  0E7F               	movlw	high STR_155
 19283  002F10  0100               	movlb	0	; () banked
 19284  002F12  6F9B               	movwf	(_printStatistics$1377+1)& (0+255),b
 19285  002F14  0EE0               	movlw	low STR_155
 19286  002F16  D004               	goto	L24
 19287  002F18                     l11332:
 19288                           
 19289                           ; BSR set to: 1
 19290  002F18  0E7F               	movlw	high STR_154
 19291  002F1A  0100               	movlb	0	; () banked
 19292  002F1C  6F9B               	movwf	(_printStatistics$1377+1)& (0+255),b
 19293  002F1E  0E72               	movlw	low STR_154
 19294  002F20                     L24:
 19295  002F20  6F9A               	movwf	_printStatistics$1377& (0+255),b
 19296                           
 19297                           ; BSR set to: 0
 19298  002F22  0E01               	movlw	high _wrkbuf
 19299  002F24  0100               	movlb	0	; () banked
 19300  002F26  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19301  002F28  0E54               	movlw	low _wrkbuf
 19302  002F2A  6F76               	movwf	?_sprintf& (0+255),b
 19303  002F2C  C09A  F078         	movff	_printStatistics$1377,?_sprintf+2
 19304  002F30  C09B  F079         	movff	_printStatistics$1377+1,?_sprintf+3
 19305  002F34  C0D5  F07A         	movff	_cntRxBytes,?_sprintf+4
 19306  002F38  C0D6  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19307  002F3C  C0D7  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19308  002F40  C0D8  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19309  002F44  EC07  F00B         	call	_sprintf	;wreg free
 19310                           
 19311                           ; BSR set to: 0
 19312                           ;main.c: 2458: putsUSART(wrkbuf);
 19313  002F48  0E01               	movlw	high _wrkbuf
 19314  002F4A  0100               	movlb	0	; () banked
 19315  002F4C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19316  002F4E  0E54               	movlw	low _wrkbuf
 19317  002F50  6F61               	movwf	?_putsUSART& (0+255),b
 19318  002F52  ECC9  F028         	call	_putsUSART	;wreg free
 19319                           
 19320                           ;main.c: 2459: putsUSART((char *) "\r\n");
 19321  002F56  0E74               	movlw	high (STR_190+50)
 19322  002F58  0100               	movlb	0	; () banked
 19323  002F5A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19324  002F5C  0E8A               	movlw	low (STR_190+50)
 19325  002F5E  6F61               	movwf	?_putsUSART& (0+255),b
 19326  002F60  EFC9  F028         	goto	_putsUSART	;wreg free
 19327  002F64                     __end_of_printStatistics:
 19328                           	opt stack 0
 19329                           tblptru	equ	0xFF8
 19330                           tblptrh	equ	0xFF7
 19331                           tblptrl	equ	0xFF6
 19332                           tablat	equ	0xFF5
 19333                           prodh	equ	0xFF4
 19334                           prodl	equ	0xFF3
 19335                           intcon	equ	0xFF2
 19336                           indf0	equ	0xFEF
 19337                           postinc0	equ	0xFEE
 19338                           fsr0h	equ	0xFEA
 19339                           fsr0l	equ	0xFE9
 19340                           wreg	equ	0xFE8
 19341                           indf1	equ	0xFE7
 19342                           postinc1	equ	0xFE6
 19343                           postdec1	equ	0xFE5
 19344                           fsr1h	equ	0xFE2
 19345                           fsr1l	equ	0xFE1
 19346                           indf2	equ	0xFDF
 19347                           postinc2	equ	0xFDE
 19348                           postdec2	equ	0xFDD
 19349                           plusw2	equ	0xFDB
 19350                           fsr2h	equ	0xFDA
 19351                           fsr2l	equ	0xFD9
 19352                           status	equ	0xFD8
 19353                           
 19354 ;; *************** function _atoi *****************
 19355 ;; Defined at:
 19356 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19357 ;; Parameters:    Size  Location     Type
 19358 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19359 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 19360 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 19361 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 19362 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 19363 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19364 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19365 ;; Auto vars:     Size  Location     Type
 19366 ;;  a               2   11[BANK0 ] int 
 19367 ;;  sign            1   10[BANK0 ] unsigned char 
 19368 ;; Return value:  Size  Location     Type
 19369 ;;                  2    6[BANK0 ] int 
 19370 ;; Registers used:
 19371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19372 ;; Tracked objects:
 19373 ;;		On entry : C/2
 19374 ;;		On exit  : F/0
 19375 ;;		Unchanged: 0/0
 19376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19377 ;;      Params:         0       2       0       0       0       0       0
 19378 ;;      Locals:         0       3       0       0       0       0       0
 19379 ;;      Temps:          0       2       0       0       0       0       0
 19380 ;;      Totals:         0       7       0       0       0       0       0
 19381 ;;Total ram usage:        7 bytes
 19382 ;; Hardware stack levels used:    1
 19383 ;; Hardware stack levels required when called:    4
 19384 ;; This function calls:
 19385 ;;		_isdigit
 19386 ;;		___wmul
 19387 ;; This function is called by:
 19388 ;;		_doModeVerbose
 19389 ;; This function uses a non-reentrant model
 19390 ;;
 19391                           
 19392                           	psect	text42
 19393  003AB2                     __ptext42:
 19394                           	opt stack 0
 19395  003AB2                     _atoi:
 19396                           	opt stack 25
 19397                           
 19398                           ;incstack = 0
 19399                           ;incstack = 0
 19400  003AB2  D003               	goto	l11242
 19401  003AB4                     l11240:
 19402  003AB4  0100               	movlb	0	; () banked
 19403  003AB6  4B66               	infsnz	atoi@s& (0+255),f,b
 19404  003AB8  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19405  003ABA                     l11242:
 19406  003ABA  0100               	movlb	0	; () banked
 19407  003ABC  D876               	call	PL22	;call to abstracted procedure
 19408  003ABE  64EA               	cpfsgt	fsr0h,c
 19409  003AC0  D003               	bra	u13977
 19410  003AC2  6EEA               	movwf	fsr0h,c
 19411  003AC4  50EF               	movf	indf0,w,c
 19412  003AC6  D003               	bra	u13970
 19413  003AC8                     u13977:
 19414  003AC8  6EF7               	movwf	tblptrh,c
 19415  003ACA  0008               	tblrd		*
 19416  003ACC  50F5               	movf	tablat,w,c
 19417  003ACE                     u13970:
 19418  003ACE  0A20               	xorlw	32
 19419  003AD0  E0F1               	bz	l11240
 19420  003AD2  0100               	movlb	0	; () banked
 19421  003AD4  D86A               	call	PL22	;call to abstracted procedure
 19422  003AD6  64EA               	cpfsgt	fsr0h,c
 19423  003AD8  D003               	bra	u13997
 19424  003ADA  6EEA               	movwf	fsr0h,c
 19425  003ADC  50EF               	movf	indf0,w,c
 19426  003ADE  D003               	bra	u13990
 19427  003AE0                     u13997:
 19428  003AE0  6EF7               	movwf	tblptrh,c
 19429  003AE2  0008               	tblrd		*
 19430  003AE4  50F5               	movf	tablat,w,c
 19431  003AE6                     u13990:
 19432  003AE6  0A09               	xorlw	9
 19433  003AE8  E0E5               	bz	l11240
 19434  003AEA  0100               	movlb	0	; () banked
 19435  003AEC  6B6B               	clrf	atoi@a& (0+255),b
 19436  003AEE  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19437  003AF0  6B6A               	clrf	atoi@sign& (0+255),b
 19438                           
 19439                           ; BSR set to: 0
 19440  003AF2  D85B               	call	PL22	;call to abstracted procedure
 19441  003AF4  64EA               	cpfsgt	fsr0h,c
 19442  003AF6  D003               	bra	u14017
 19443  003AF8  6EEA               	movwf	fsr0h,c
 19444  003AFA  50EF               	movf	indf0,w,c
 19445  003AFC  D003               	bra	u14010
 19446  003AFE                     u14017:
 19447  003AFE  6EF7               	movwf	tblptrh,c
 19448  003B00  0008               	tblrd		*
 19449  003B02  50F5               	movf	tablat,w,c
 19450  003B04                     u14010:
 19451  003B04  0A2D               	xorlw	45
 19452  003B06  E103               	bnz	l11250
 19453  003B08  0100               	movlb	0	; () banked
 19454  003B0A  2B6A               	incf	atoi@sign& (0+255),f,b
 19455  003B0C  D00D               	goto	L25
 19456  003B0E                     l11250:
 19457  003B0E  0100               	movlb	0	; () banked
 19458  003B10  D84C               	call	PL22	;call to abstracted procedure
 19459  003B12  64EA               	cpfsgt	fsr0h,c
 19460  003B14  D003               	bra	u14037
 19461  003B16  6EEA               	movwf	fsr0h,c
 19462  003B18  50EF               	movf	indf0,w,c
 19463  003B1A  D003               	bra	u14030
 19464  003B1C                     u14037:
 19465  003B1C  6EF7               	movwf	tblptrh,c
 19466  003B1E  0008               	tblrd		*
 19467  003B20  50F5               	movf	tablat,w,c
 19468  003B22                     u14030:
 19469  003B22  0A2B               	xorlw	43
 19470  003B24  E121               	bnz	l11258
 19471  003B26                     l11252:
 19472  003B26  0100               	movlb	0	; () banked
 19473  003B28                     L25:
 19474  003B28  4B66               	infsnz	atoi@s& (0+255),f,b
 19475  003B2A  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19476  003B2C  D01D               	goto	l11258
 19477  003B2E                     l11254:
 19478                           
 19479                           ; BSR set to: 0
 19480  003B2E  C06B  F060         	movff	atoi@a,?___wmul
 19481  003B32  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19482  003B36  6B63               	clrf	(?___wmul+3)& (0+255),b
 19483  003B38  0E0A               	movlw	10
 19484  003B3A  6F62               	movwf	(?___wmul+2)& (0+255),b
 19485  003B3C  ECE0  F02A         	call	___wmul	;wreg free
 19486  003B40  D834               	call	PL22	;call to abstracted procedure
 19487  003B42  64EA               	cpfsgt	fsr0h,c
 19488  003B44  D003               	bra	u14057
 19489  003B46  6EEA               	movwf	fsr0h,c
 19490  003B48  50EF               	movf	indf0,w,c
 19491  003B4A  D003               	bra	u14050
 19492  003B4C                     u14057:
 19493  003B4C  6EF7               	movwf	tblptrh,c
 19494  003B4E  0008               	tblrd		*
 19495  003B50  50F5               	movf	tablat,w,c
 19496  003B52                     u14050:
 19497  003B52  0100               	movlb	0	; () banked
 19498  003B54  2760               	addwf	?___wmul& (0+255),f,b
 19499  003B56  0E00               	movlw	0
 19500  003B58  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19501  003B5A  0ED0               	movlw	208
 19502  003B5C  2560               	addwf	?___wmul& (0+255),w,b
 19503  003B5E  6F6B               	movwf	atoi@a& (0+255),b
 19504  003B60  0EFF               	movlw	255
 19505  003B62  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19506  003B64  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19507  003B66  D7DF               	goto	l11252
 19508  003B68                     l11258:
 19509  003B68  0100               	movlb	0	; () banked
 19510  003B6A  D81F               	call	PL22	;call to abstracted procedure
 19511  003B6C  64EA               	cpfsgt	fsr0h,c
 19512  003B6E  D003               	bra	u14067
 19513  003B70  6EEA               	movwf	fsr0h,c
 19514  003B72  50EF               	movf	indf0,w,c
 19515  003B74  D003               	bra	u14060
 19516  003B76                     u14067:
 19517  003B76  6EF7               	movwf	tblptrh,c
 19518  003B78  0008               	tblrd		*
 19519  003B7A  50F5               	movf	tablat,w,c
 19520  003B7C                     u14060:
 19521  003B7C  EC52  F02B         	call	_isdigit
 19522  003B80  E2D6               	bc	l11254
 19523                           
 19524                           ; BSR set to: 0
 19525  003B82  516A               	movf	atoi@sign& (0+255),w,b
 19526  003B84  E00D               	bz	l2012
 19527                           
 19528                           ; BSR set to: 0
 19529  003B86  C06B  F068         	movff	atoi@a,??_atoi
 19530  003B8A  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19531  003B8E  1F68               	comf	??_atoi& (0+255),f,b
 19532  003B90  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19533  003B92  4B68               	infsnz	??_atoi& (0+255),f,b
 19534  003B94  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19535  003B96  C068  F066         	movff	??_atoi,?_atoi
 19536  003B9A  C069  F067         	movff	??_atoi+1,?_atoi+1
 19537  003B9E  D004               	goto	l2013
 19538  003BA0                     l2012:
 19539                           
 19540                           ; BSR set to: 0
 19541  003BA0  C06B  F066         	movff	atoi@a,?_atoi
 19542  003BA4  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19543  003BA8                     l2013:
 19544                           
 19545                           ; BSR set to: 0
 19546  003BA8  0012               	return	
 19547  003BAA                     __end_of_atoi:
 19548                           	opt stack 0
 19549  003BAA                     PL22:
 19550                           	opt stack 25
 19551  003BAA  5166               	movf	atoi@s& (0+255),w,b
 19552  003BAC  6EF6               	movwf	tblptrl,c
 19553  003BAE  6EE9               	movwf	fsr0l,c
 19554  003BB0  0E05               	movlw	(high __ramtop+-1)
 19555  003BB2  6EEA               	movwf	fsr0h,c
 19556  003BB4  5167               	movf	(atoi@s+1)& (0+255),w,b
 19557  003BB6  0012               	return	
 19558  003BB8                     __end_ofPL22:
 19559                           	opt stack 0
 19560                           tblptru	equ	0xFF8
 19561                           tblptrh	equ	0xFF7
 19562                           tblptrl	equ	0xFF6
 19563                           tablat	equ	0xFF5
 19564                           prodh	equ	0xFF4
 19565                           prodl	equ	0xFF3
 19566                           intcon	equ	0xFF2
 19567                           indf0	equ	0xFEF
 19568                           postinc0	equ	0xFEE
 19569                           fsr0h	equ	0xFEA
 19570                           fsr0l	equ	0xFE9
 19571                           wreg	equ	0xFE8
 19572                           indf1	equ	0xFE7
 19573                           postinc1	equ	0xFE6
 19574                           postdec1	equ	0xFE5
 19575                           fsr1h	equ	0xFE2
 19576                           fsr1l	equ	0xFE1
 19577                           indf2	equ	0xFDF
 19578                           postinc2	equ	0xFDE
 19579                           postdec2	equ	0xFDD
 19580                           plusw2	equ	0xFDB
 19581                           fsr2h	equ	0xFDA
 19582                           fsr2l	equ	0xFD9
 19583                           status	equ	0xFD8
 19584                           
 19585 ;; *************** function _strtok *****************
 19586 ;; Defined at:
 19587 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19588 ;; Parameters:    Size  Location     Type
 19589 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19590 ;;		 -> NULL(0), cmdbuf(80), 
 19591 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19592 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 19593 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 19594 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 19595 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 19596 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19597 ;;		 -> STR_31(2), STR_30(2), 
 19598 ;; Auto vars:     Size  Location     Type
 19599 ;;		None
 19600 ;; Return value:  Size  Location     Type
 19601 ;;                  2   12[BANK0 ] PTR unsigned char 
 19602 ;; Registers used:
 19603 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19604 ;; Tracked objects:
 19605 ;;		On entry : F/0
 19606 ;;		On exit  : F/0
 19607 ;;		Unchanged: 0/0
 19608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19609 ;;      Params:         0       4       0       0       0       0       0
 19610 ;;      Locals:         0       0       0       0       0       0       0
 19611 ;;      Temps:          0       0       0       0       0       0       0
 19612 ;;      Totals:         0       4       0       0       0       0       0
 19613 ;;Total ram usage:        4 bytes
 19614 ;; Hardware stack levels used:    1
 19615 ;; Hardware stack levels required when called:    5
 19616 ;; This function calls:
 19617 ;;		_strspn
 19618 ;;		_strcspn
 19619 ;; This function is called by:
 19620 ;;		_doModeVerbose
 19621 ;; This function uses a non-reentrant model
 19622 ;;
 19623                           
 19624                           	psect	text43
 19625  004986                     __ptext43:
 19626                           	opt stack 0
 19627  004986                     _strtok:
 19628                           	opt stack 24
 19629                           
 19630                           ; BSR set to: 0
 19631                           
 19632                           ; BSR set to: 0
 19633                           ;incstack = 0
 19634                           ;incstack = 0
 19635  004986  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19636  004988  116C               	iorwf	strtok@s1& (0+255),w,b
 19637  00498A  E104               	bnz	l11220
 19638                           
 19639                           ; BSR set to: 0
 19640  00498C  C03B  F06C         	movff	strtok@sp,strtok@s1
 19641  004990  C03C  F06D         	movff	strtok@sp+1,strtok@s1+1
 19642  004994                     l11220:
 19643                           
 19644                           ; BSR set to: 0
 19645  004994  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19646  004996  116C               	iorwf	strtok@s1& (0+255),w,b
 19647  004998  E016               	bz	L26
 19648                           
 19649                           ; BSR set to: 0
 19650                           
 19651                           ; BSR set to: 0
 19652  00499A  C06C  F066         	movff	strtok@s1,?_strspn
 19653  00499E  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 19654  0049A2  C06E  F068         	movff	strtok@s2,?_strspn+2
 19655  0049A6  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 19656  0049AA  ECAD  F029         	call	_strspn	;wreg free
 19657  0049AE  5166               	movf	?_strspn& (0+255),w,b
 19658  0049B0  276C               	addwf	strtok@s1& (0+255),f,b
 19659  0049B2  5167               	movf	(?_strspn+1)& (0+255),w,b
 19660  0049B4  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 19661                           
 19662                           ; BSR set to: 0
 19663  0049B6  C06C  FFD9         	movff	strtok@s1,fsr2l
 19664  0049BA  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 19665  0049BE  50DF               	movf	indf2,w,c
 19666  0049C0  E105               	bnz	l11230
 19667                           
 19668                           ; BSR set to: 0
 19669  0049C2  6A3B               	clrf	strtok@sp,c
 19670  0049C4  6A3C               	clrf	strtok@sp+1,c
 19671  0049C6                     L26:
 19672  0049C6  6B6C               	clrf	?_strtok& (0+255),b
 19673  0049C8  6B6D               	clrf	(?_strtok+1)& (0+255),b
 19674  0049CA  D025               	goto	l2505
 19675  0049CC                     l11230:
 19676                           
 19677                           ; BSR set to: 0
 19678  0049CC  C06C  F066         	movff	strtok@s1,?_strcspn
 19679  0049D0  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 19680  0049D4  C06E  F068         	movff	strtok@s2,?_strcspn+2
 19681  0049D8  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 19682  0049DC  EC8B  F029         	call	_strcspn	;wreg free
 19683  0049E0  5166               	movf	?_strcspn& (0+255),w,b
 19684  0049E2  256C               	addwf	strtok@s1& (0+255),w,b
 19685  0049E4  6E3B               	movwf	strtok@sp,c
 19686  0049E6  5167               	movf	(?_strcspn+1)& (0+255),w,b
 19687  0049E8  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 19688  0049EA  6E3C               	movwf	strtok@sp+1,c
 19689                           
 19690                           ; BSR set to: 0
 19691  0049EC  C03B  FFD9         	movff	strtok@sp,fsr2l
 19692  0049F0  C03C  FFDA         	movff	strtok@sp+1,fsr2h
 19693  0049F4  50DF               	movf	indf2,w,c
 19694  0049F6  E009               	bz	l2507
 19695                           
 19696                           ; BSR set to: 0
 19697  0049F8  C03B  FFD9         	movff	strtok@sp,fsr2l
 19698  0049FC  C03C  FFDA         	movff	strtok@sp+1,fsr2h
 19699  004A00  0E00               	movlw	0
 19700  004A02  6EDF               	movwf	indf2,c
 19701                           
 19702                           ; BSR set to: 0
 19703  004A04  4A3B               	infsnz	strtok@sp,f,c
 19704  004A06  2A3C               	incf	strtok@sp+1,f,c
 19705  004A08  D002               	goto	l2508
 19706  004A0A                     l2507:
 19707                           
 19708                           ; BSR set to: 0
 19709  004A0A  6A3B               	clrf	strtok@sp,c
 19710  004A0C  6A3C               	clrf	strtok@sp+1,c
 19711  004A0E                     l2508:
 19712                           
 19713                           ; BSR set to: 0
 19714  004A0E  C06C  F06C         	movff	strtok@s1,?_strtok
 19715  004A12  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 19716  004A16                     l2505:
 19717                           
 19718                           ; BSR set to: 0
 19719  004A16  0012               	return	
 19720  004A18                     __end_of_strtok:
 19721                           	opt stack 0
 19722                           tblptru	equ	0xFF8
 19723                           tblptrh	equ	0xFF7
 19724                           tblptrl	equ	0xFF6
 19725                           tablat	equ	0xFF5
 19726                           prodh	equ	0xFF4
 19727                           prodl	equ	0xFF3
 19728                           intcon	equ	0xFF2
 19729                           indf0	equ	0xFEF
 19730                           postinc0	equ	0xFEE
 19731                           fsr0h	equ	0xFEA
 19732                           fsr0l	equ	0xFE9
 19733                           wreg	equ	0xFE8
 19734                           indf1	equ	0xFE7
 19735                           postinc1	equ	0xFE6
 19736                           postdec1	equ	0xFE5
 19737                           fsr1h	equ	0xFE2
 19738                           fsr1l	equ	0xFE1
 19739                           indf2	equ	0xFDF
 19740                           postinc2	equ	0xFDE
 19741                           postdec2	equ	0xFDD
 19742                           plusw2	equ	0xFDB
 19743                           fsr2h	equ	0xFDA
 19744                           fsr2l	equ	0xFD9
 19745                           status	equ	0xFD8
 19746                           
 19747 ;; *************** function _strcspn *****************
 19748 ;; Defined at:
 19749 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19750 ;; Parameters:    Size  Location     Type
 19751 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19752 ;;		 -> NULL(0), cmdbuf(80), 
 19753 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19754 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 19755 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 19756 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 19757 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 19758 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19759 ;;		 -> STR_31(2), STR_30(2), 
 19760 ;; Auto vars:     Size  Location     Type
 19761 ;;  i               2   10[BANK0 ] unsigned int 
 19762 ;; Return value:  Size  Location     Type
 19763 ;;                  2    6[BANK0 ] unsigned int 
 19764 ;; Registers used:
 19765 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19766 ;; Tracked objects:
 19767 ;;		On entry : F/0
 19768 ;;		On exit  : F/0
 19769 ;;		Unchanged: 0/0
 19770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19771 ;;      Params:         0       4       0       0       0       0       0
 19772 ;;      Locals:         0       2       0       0       0       0       0
 19773 ;;      Temps:          0       0       0       0       0       0       0
 19774 ;;      Totals:         0       6       0       0       0       0       0
 19775 ;;Total ram usage:        6 bytes
 19776 ;; Hardware stack levels used:    1
 19777 ;; Hardware stack levels required when called:    4
 19778 ;; This function calls:
 19779 ;;		_strchr
 19780 ;; This function is called by:
 19781 ;;		_strtok
 19782 ;; This function uses a non-reentrant model
 19783 ;;
 19784                           
 19785                           	psect	text44
 19786  005316                     __ptext44:
 19787                           	opt stack 0
 19788  005316                     _strcspn:
 19789                           	opt stack 24
 19790                           
 19791                           ; BSR set to: 0
 19792                           
 19793                           ; BSR set to: 0
 19794                           ;incstack = 0
 19795                           ;incstack = 0
 19796  005316  6B6A               	clrf	strcspn@i& (0+255),b
 19797  005318  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 19798  00531A  D004               	goto	l12940
 19799  00531C                     l12938:
 19800                           
 19801                           ; BSR set to: 0
 19802  00531C  4B66               	infsnz	strcspn@s1& (0+255),f,b
 19803  00531E  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 19804  005320  4B6A               	infsnz	strcspn@i& (0+255),f,b
 19805  005322  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 19806  005324                     l12940:
 19807                           
 19808                           ; BSR set to: 0
 19809  005324  C066  FFD9         	movff	strcspn@s1,fsr2l
 19810  005328  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19811  00532C  50DF               	movf	indf2,w,c
 19812  00532E  E010               	bz	l2532
 19813                           
 19814                           ; BSR set to: 0
 19815  005330  C068  F060         	movff	strcspn@s2,?_strchr
 19816  005334  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 19817  005338  C066  FFD9         	movff	strcspn@s1,fsr2l
 19818  00533C  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19819  005340  50DF               	movf	indf2,w,c
 19820  005342  6F62               	movwf	(?_strchr+2)& (0+255),b
 19821  005344  6B63               	clrf	(?_strchr+3)& (0+255),b
 19822  005346  ECDD  F027         	call	_strchr	;wreg free
 19823  00534A  5161               	movf	(?_strchr+1)& (0+255),w,b
 19824  00534C  1160               	iorwf	?_strchr& (0+255),w,b
 19825  00534E  E0E6               	bz	l12938
 19826  005350                     l2532:
 19827                           
 19828                           ; BSR set to: 0
 19829  005350  C06A  F066         	movff	strcspn@i,?_strcspn
 19830  005354  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 19831                           
 19832                           ; BSR set to: 0
 19833  005358  0012               	return	
 19834  00535A                     __end_of_strcspn:
 19835                           	opt stack 0
 19836                           tblptru	equ	0xFF8
 19837                           tblptrh	equ	0xFF7
 19838                           tblptrl	equ	0xFF6
 19839                           tablat	equ	0xFF5
 19840                           prodh	equ	0xFF4
 19841                           prodl	equ	0xFF3
 19842                           intcon	equ	0xFF2
 19843                           indf0	equ	0xFEF
 19844                           postinc0	equ	0xFEE
 19845                           fsr0h	equ	0xFEA
 19846                           fsr0l	equ	0xFE9
 19847                           wreg	equ	0xFE8
 19848                           indf1	equ	0xFE7
 19849                           postinc1	equ	0xFE6
 19850                           postdec1	equ	0xFE5
 19851                           fsr1h	equ	0xFE2
 19852                           fsr1l	equ	0xFE1
 19853                           indf2	equ	0xFDF
 19854                           postinc2	equ	0xFDE
 19855                           postdec2	equ	0xFDD
 19856                           plusw2	equ	0xFDB
 19857                           fsr2h	equ	0xFDA
 19858                           fsr2l	equ	0xFD9
 19859                           status	equ	0xFD8
 19860                           
 19861 ;; *************** function _strspn *****************
 19862 ;; Defined at:
 19863 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19864 ;; Parameters:    Size  Location     Type
 19865 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19866 ;;		 -> NULL(0), cmdbuf(80), 
 19867 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19868 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 19869 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 19870 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 19871 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 19872 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19873 ;;		 -> STR_31(2), STR_30(2), 
 19874 ;; Auto vars:     Size  Location     Type
 19875 ;;  i               2   10[BANK0 ] unsigned int 
 19876 ;; Return value:  Size  Location     Type
 19877 ;;                  2    6[BANK0 ] unsigned int 
 19878 ;; Registers used:
 19879 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19880 ;; Tracked objects:
 19881 ;;		On entry : F/0
 19882 ;;		On exit  : F/0
 19883 ;;		Unchanged: 0/0
 19884 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19885 ;;      Params:         0       4       0       0       0       0       0
 19886 ;;      Locals:         0       2       0       0       0       0       0
 19887 ;;      Temps:          0       0       0       0       0       0       0
 19888 ;;      Totals:         0       6       0       0       0       0       0
 19889 ;;Total ram usage:        6 bytes
 19890 ;; Hardware stack levels used:    1
 19891 ;; Hardware stack levels required when called:    4
 19892 ;; This function calls:
 19893 ;;		_strchr
 19894 ;; This function is called by:
 19895 ;;		_strtok
 19896 ;; This function uses a non-reentrant model
 19897 ;;
 19898                           
 19899                           	psect	text45
 19900  00535A                     __ptext45:
 19901                           	opt stack 0
 19902  00535A                     _strspn:
 19903                           	opt stack 24
 19904                           
 19905                           ; BSR set to: 0
 19906                           
 19907                           ; BSR set to: 0
 19908                           ;incstack = 0
 19909                           ;incstack = 0
 19910  00535A  6B6A               	clrf	strspn@i& (0+255),b
 19911  00535C  6B6B               	clrf	(strspn@i+1)& (0+255),b
 19912  00535E  D004               	goto	l12932
 19913  005360                     l12930:
 19914                           
 19915                           ; BSR set to: 0
 19916  005360  4B66               	infsnz	strspn@s1& (0+255),f,b
 19917  005362  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 19918  005364  4B6A               	infsnz	strspn@i& (0+255),f,b
 19919  005366  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 19920  005368                     l12932:
 19921                           
 19922                           ; BSR set to: 0
 19923  005368  C066  FFD9         	movff	strspn@s1,fsr2l
 19924  00536C  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19925  005370  50DF               	movf	indf2,w,c
 19926  005372  E010               	bz	l2551
 19927                           
 19928                           ; BSR set to: 0
 19929  005374  C068  F060         	movff	strspn@s2,?_strchr
 19930  005378  C069  F061         	movff	strspn@s2+1,?_strchr+1
 19931  00537C  C066  FFD9         	movff	strspn@s1,fsr2l
 19932  005380  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19933  005384  50DF               	movf	indf2,w,c
 19934  005386  6F62               	movwf	(?_strchr+2)& (0+255),b
 19935  005388  6B63               	clrf	(?_strchr+3)& (0+255),b
 19936  00538A  ECDD  F027         	call	_strchr	;wreg free
 19937  00538E  5161               	movf	(?_strchr+1)& (0+255),w,b
 19938  005390  1160               	iorwf	?_strchr& (0+255),w,b
 19939  005392  E1E6               	bnz	l12930
 19940  005394                     l2551:
 19941                           
 19942                           ; BSR set to: 0
 19943  005394  C06A  F066         	movff	strspn@i,?_strspn
 19944  005398  C06B  F067         	movff	strspn@i+1,?_strspn+1
 19945                           
 19946                           ; BSR set to: 0
 19947  00539C  0012               	return	
 19948  00539E                     __end_of_strspn:
 19949                           	opt stack 0
 19950                           tblptru	equ	0xFF8
 19951                           tblptrh	equ	0xFF7
 19952                           tblptrl	equ	0xFF6
 19953                           tablat	equ	0xFF5
 19954                           prodh	equ	0xFF4
 19955                           prodl	equ	0xFF3
 19956                           intcon	equ	0xFF2
 19957                           indf0	equ	0xFEF
 19958                           postinc0	equ	0xFEE
 19959                           fsr0h	equ	0xFEA
 19960                           fsr0l	equ	0xFE9
 19961                           wreg	equ	0xFE8
 19962                           indf1	equ	0xFE7
 19963                           postinc1	equ	0xFE6
 19964                           postdec1	equ	0xFE5
 19965                           fsr1h	equ	0xFE2
 19966                           fsr1l	equ	0xFE1
 19967                           indf2	equ	0xFDF
 19968                           postinc2	equ	0xFDE
 19969                           postdec2	equ	0xFDD
 19970                           plusw2	equ	0xFDB
 19971                           fsr2h	equ	0xFDA
 19972                           fsr2l	equ	0xFD9
 19973                           status	equ	0xFD8
 19974                           
 19975 ;; *************** function _strchr *****************
 19976 ;; Defined at:
 19977 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 19978 ;; Parameters:    Size  Location     Type
 19979 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 19980 ;;		 -> STR_105(2), STR_103(2), STR_101(2), STR_99(2), 
 19981 ;;		 -> STR_96(2), STR_93(2), STR_91(2), STR_89(2), 
 19982 ;;		 -> STR_87(2), STR_84(2), STR_74(2), STR_72(2), 
 19983 ;;		 -> STR_70(2), STR_51(2), STR_49(2), STR_47(2), 
 19984 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19985 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19986 ;;  chr             2    2[BANK0 ] int 
 19987 ;; Auto vars:     Size  Location     Type
 19988 ;;		None
 19989 ;; Return value:  Size  Location     Type
 19990 ;;                  2    0[BANK0 ] PTR unsigned char 
 19991 ;; Registers used:
 19992 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19993 ;; Tracked objects:
 19994 ;;		On entry : F/0
 19995 ;;		On exit  : F/0
 19996 ;;		Unchanged: 0/0
 19997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19998 ;;      Params:         0       4       0       0       0       0       0
 19999 ;;      Locals:         0       0       0       0       0       0       0
 20000 ;;      Temps:          0       2       0       0       0       0       0
 20001 ;;      Totals:         0       6       0       0       0       0       0
 20002 ;;Total ram usage:        6 bytes
 20003 ;; Hardware stack levels used:    1
 20004 ;; Hardware stack levels required when called:    3
 20005 ;; This function calls:
 20006 ;;		Nothing
 20007 ;; This function is called by:
 20008 ;;		_doModeVerbose
 20009 ;;		_strcspn
 20010 ;;		_strspn
 20011 ;; This function uses a non-reentrant model
 20012 ;;
 20013                           
 20014                           	psect	text46
 20015  004FBA                     __ptext46:
 20016                           	opt stack 0
 20017  004FBA                     _strchr:
 20018                           	opt stack 26
 20019  004FBA                     l2453:
 20020                           
 20021                           ; BSR set to: 0
 20022  004FBA  0100               	movlb	0	; () banked
 20023  004FBC  5160               	movf	strchr@ptr& (0+255),w,b
 20024  004FBE  6EF6               	movwf	tblptrl,c
 20025  004FC0  6EE9               	movwf	fsr0l,c
 20026  004FC2  0E05               	movlw	(high __ramtop+-1)
 20027  004FC4  6EEA               	movwf	fsr0h,c
 20028  004FC6  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20029  004FC8  64EA               	cpfsgt	fsr0h,c
 20030  004FCA  D003               	bra	u14327
 20031  004FCC  6EEA               	movwf	fsr0h,c
 20032  004FCE  50EF               	movf	indf0,w,c
 20033  004FD0  D003               	bra	u14320
 20034  004FD2                     u14327:
 20035  004FD2  6EF7               	movwf	tblptrh,c
 20036  004FD4  0008               	tblrd		*
 20037  004FD6  50F5               	movf	tablat,w,c
 20038  004FD8                     u14320:
 20039  004FD8  0100               	movlb	0	; () banked
 20040  004FDA  1962               	xorwf	strchr@chr& (0+255),w,b
 20041  004FDC  E105               	bnz	l11504
 20042                           
 20043                           ; BSR set to: 0
 20044  004FDE  C060  F060         	movff	strchr@ptr,?_strchr
 20045  004FE2  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20046  004FE6  D019               	goto	l2455
 20047  004FE8                     l11504:
 20048                           
 20049                           ; BSR set to: 0
 20050  004FE8  5160               	movf	strchr@ptr& (0+255),w,b
 20051  004FEA  6F64               	movwf	??_strchr& (0+255),b
 20052  004FEC  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20053  004FEE  6F65               	movwf	(??_strchr+1)& (0+255),b
 20054  004FF0  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20055  004FF2  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20056  004FF4  5164               	movf	??_strchr& (0+255),w,b
 20057  004FF6  6EF6               	movwf	tblptrl,c
 20058  004FF8  6EE9               	movwf	fsr0l,c
 20059  004FFA  0E05               	movlw	(high __ramtop+-1)
 20060  004FFC  6EEA               	movwf	fsr0h,c
 20061  004FFE  5165               	movf	(??_strchr+1)& (0+255),w,b
 20062  005000  64EA               	cpfsgt	fsr0h,c
 20063  005002  D003               	bra	u14347
 20064  005004  6EEA               	movwf	fsr0h,c
 20065  005006  50EF               	movf	indf0,w,c
 20066  005008  D003               	bra	u14340
 20067  00500A                     u14347:
 20068  00500A  6EF7               	movwf	tblptrh,c
 20069  00500C  0008               	tblrd		*
 20070  00500E  50F5               	movf	tablat,w,c
 20071  005010                     u14340:
 20072  005010  0900               	iorlw	0
 20073  005012  E1D3               	bnz	l2453
 20074  005014  0100               	movlb	0	; () banked
 20075  005016  6B60               	clrf	?_strchr& (0+255),b
 20076  005018  6B61               	clrf	(?_strchr+1)& (0+255),b
 20077  00501A                     l2455:
 20078                           
 20079                           ; BSR set to: 0
 20080  00501A  0012               	return	
 20081  00501C                     __end_of_strchr:
 20082                           	opt stack 0
 20083                           tblptru	equ	0xFF8
 20084                           tblptrh	equ	0xFF7
 20085                           tblptrl	equ	0xFF6
 20086                           tablat	equ	0xFF5
 20087                           prodh	equ	0xFF4
 20088                           prodl	equ	0xFF3
 20089                           intcon	equ	0xFF2
 20090                           indf0	equ	0xFEF
 20091                           postinc0	equ	0xFEE
 20092                           fsr0h	equ	0xFEA
 20093                           fsr0l	equ	0xFE9
 20094                           wreg	equ	0xFE8
 20095                           indf1	equ	0xFE7
 20096                           postinc1	equ	0xFE6
 20097                           postdec1	equ	0xFE5
 20098                           fsr1h	equ	0xFE2
 20099                           fsr1l	equ	0xFE1
 20100                           indf2	equ	0xFDF
 20101                           postinc2	equ	0xFDE
 20102                           postdec2	equ	0xFDD
 20103                           plusw2	equ	0xFDB
 20104                           fsr2h	equ	0xFDA
 20105                           fsr2l	equ	0xFD9
 20106                           status	equ	0xFD8
 20107                           
 20108 ;; *************** function _stristr *****************
 20109 ;; Defined at:
 20110 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20111 ;; Parameters:    Size  Location     Type
 20112 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20113 ;;		 -> NULL(0), cmdbuf(80), 
 20114 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20115 ;;		 -> STR_122(6), STR_121(8), STR_119(6), STR_117(5), 
 20116 ;;		 -> STR_115(8), STR_114(6), STR_113(9), STR_112(11), 
 20117 ;;		 -> STR_110(8), STR_108(4), STR_107(5), STR_95(5), 
 20118 ;;		 -> STR_83(7), STR_78(5), STR_69(5), STR_46(5), 
 20119 ;;		 -> STR_45(5), STR_43(5), STR_42(4), STR_41(5), 
 20120 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20121 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20122 ;;		 -> STR_8(5), STR_6(5), 
 20123 ;; Auto vars:     Size  Location     Type
 20124 ;;		None
 20125 ;; Return value:  Size  Location     Type
 20126 ;;                  2   13[BANK0 ] PTR unsigned char 
 20127 ;; Registers used:
 20128 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20129 ;; Tracked objects:
 20130 ;;		On entry : F/0
 20131 ;;		On exit  : F/0
 20132 ;;		Unchanged: 0/0
 20133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20134 ;;      Params:         0       4       0       0       0       0       0
 20135 ;;      Locals:         0       0       0       0       0       0       0
 20136 ;;      Temps:          0       0       0       0       0       0       0
 20137 ;;      Totals:         0       4       0       0       0       0       0
 20138 ;;Total ram usage:        4 bytes
 20139 ;; Hardware stack levels used:    1
 20140 ;; Hardware stack levels required when called:    5
 20141 ;; This function calls:
 20142 ;;		_strlen
 20143 ;;		_strnicmp
 20144 ;;		_strichr
 20145 ;; This function is called by:
 20146 ;;		_doModeVerbose
 20147 ;; This function uses a non-reentrant model
 20148 ;;
 20149                           
 20150                           	psect	text47
 20151  004C36                     __ptext47:
 20152                           	opt stack 0
 20153  004C36                     _stristr:
 20154                           	opt stack 24
 20155                           
 20156                           ; BSR set to: 0
 20157                           
 20158                           ; BSR set to: 0
 20159                           ;incstack = 0
 20160                           ;incstack = 0
 20161  004C36  D02F               	goto	l11208
 20162  004C38                     l11202:
 20163                           
 20164                           ; BSR set to: 0
 20165  004C38  C06D  F064         	movff	stristr@s1,?_strnicmp
 20166  004C3C  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20167  004C40  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20168  004C44  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20169  004C48  C06F  F060         	movff	stristr@s2,?_strlen
 20170  004C4C  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20171  004C50  ECF0  F029         	call	_strlen	;wreg free
 20172  004C54  C060  F068         	movff	?_strlen,?_strnicmp+4
 20173  004C58  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20174  004C5C  EC79  F027         	call	_strnicmp	;wreg free
 20175  004C60  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20176  004C62  1164               	iorwf	?_strnicmp& (0+255),w,b
 20177  004C64  E105               	bnz	l11206
 20178                           
 20179                           ; BSR set to: 0
 20180  004C66  C06D  F06D         	movff	stristr@s1,?_stristr
 20181  004C6A  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20182  004C6E  D01E               	goto	l2474
 20183  004C70                     l11206:
 20184                           
 20185                           ; BSR set to: 0
 20186  004C70  296D               	incf	stristr@s1& (0+255),w,b
 20187  004C72  6F61               	movwf	?_strichr& (0+255),b
 20188  004C74  0E00               	movlw	0
 20189  004C76  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20190  004C78  6F62               	movwf	(?_strichr+1)& (0+255),b
 20191  004C7A  C06F  FFF6         	movff	stristr@s2,tblptrl
 20192  004C7E  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20193  004C82  0008               	tblrd		*
 20194  004C84  50F5               	movf	tablat,w,c
 20195  004C86  6F63               	movwf	(?_strichr+2)& (0+255),b
 20196  004C88  6B64               	clrf	(?_strichr+3)& (0+255),b
 20197  004C8A  EC4F  F02A         	call	_strichr	;wreg free
 20198  004C8E  C061  F06D         	movff	?_strichr,stristr@s1
 20199  004C92  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20200  004C96                     l11208:
 20201                           
 20202                           ; BSR set to: 0
 20203  004C96  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20204  004C98  116D               	iorwf	stristr@s1& (0+255),w,b
 20205  004C9A  E006               	bz	l2477
 20206                           
 20207                           ; BSR set to: 0
 20208  004C9C  C06D  FFD9         	movff	stristr@s1,fsr2l
 20209  004CA0  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20210  004CA4  50DF               	movf	indf2,w,c
 20211  004CA6  E1C8               	bnz	l11202
 20212  004CA8                     l2477:
 20213                           
 20214                           ; BSR set to: 0
 20215  004CA8  6B6D               	clrf	?_stristr& (0+255),b
 20216  004CAA  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20217  004CAC                     l2474:
 20218                           
 20219                           ; BSR set to: 0
 20220  004CAC  0012               	return	
 20221  004CAE                     __end_of_stristr:
 20222                           	opt stack 0
 20223                           tblptru	equ	0xFF8
 20224                           tblptrh	equ	0xFF7
 20225                           tblptrl	equ	0xFF6
 20226                           tablat	equ	0xFF5
 20227                           prodh	equ	0xFF4
 20228                           prodl	equ	0xFF3
 20229                           intcon	equ	0xFF2
 20230                           indf0	equ	0xFEF
 20231                           postinc0	equ	0xFEE
 20232                           fsr0h	equ	0xFEA
 20233                           fsr0l	equ	0xFE9
 20234                           wreg	equ	0xFE8
 20235                           indf1	equ	0xFE7
 20236                           postinc1	equ	0xFE6
 20237                           postdec1	equ	0xFE5
 20238                           fsr1h	equ	0xFE2
 20239                           fsr1l	equ	0xFE1
 20240                           indf2	equ	0xFDF
 20241                           postinc2	equ	0xFDE
 20242                           postdec2	equ	0xFDD
 20243                           plusw2	equ	0xFDB
 20244                           fsr2h	equ	0xFDA
 20245                           fsr2l	equ	0xFD9
 20246                           status	equ	0xFD8
 20247                           
 20248 ;; *************** function _strichr *****************
 20249 ;; Defined at:
 20250 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20251 ;; Parameters:    Size  Location     Type
 20252 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20253 ;;		 -> NULL(0), cmdbuf(80), 
 20254 ;;  chr             2    3[BANK0 ] int 
 20255 ;; Auto vars:     Size  Location     Type
 20256 ;;		None
 20257 ;; Return value:  Size  Location     Type
 20258 ;;                  2    1[BANK0 ] PTR unsigned char 
 20259 ;; Registers used:
 20260 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20261 ;; Tracked objects:
 20262 ;;		On entry : F/0
 20263 ;;		On exit  : F/0
 20264 ;;		Unchanged: 0/0
 20265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20266 ;;      Params:         0       4       0       0       0       0       0
 20267 ;;      Locals:         0       0       0       0       0       0       0
 20268 ;;      Temps:          0       0       0       0       0       0       0
 20269 ;;      Totals:         0       4       0       0       0       0       0
 20270 ;;Total ram usage:        4 bytes
 20271 ;; Hardware stack levels used:    1
 20272 ;; Hardware stack levels required when called:    4
 20273 ;; This function calls:
 20274 ;;		_toupper
 20275 ;; This function is called by:
 20276 ;;		_stristr
 20277 ;; This function uses a non-reentrant model
 20278 ;;
 20279                           
 20280                           	psect	text48
 20281  00549E                     __ptext48:
 20282                           	opt stack 0
 20283  00549E                     _strichr:
 20284                           	opt stack 24
 20285                           
 20286                           ; BSR set to: 0
 20287                           
 20288                           ; BSR set to: 0
 20289                           ;incstack = 0
 20290                           ;incstack = 0
 20291  00549E  5163               	movf	strichr@chr& (0+255),w,b
 20292  0054A0  EC8D  F02B         	call	_toupper
 20293  0054A4  6F63               	movwf	strichr@chr& (0+255),b
 20294  0054A6  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20295  0054A8  D010               	goto	l12916
 20296  0054AA                     l12910:
 20297                           
 20298                           ; BSR set to: 0
 20299  0054AA  C061  FFD9         	movff	strichr@ptr,fsr2l
 20300  0054AE  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20301  0054B2  50DF               	movf	indf2,w,c
 20302  0054B4  EC8D  F02B         	call	_toupper
 20303  0054B8  1963               	xorwf	strichr@chr& (0+255),w,b
 20304  0054BA  E105               	bnz	l12914
 20305                           
 20306                           ; BSR set to: 0
 20307  0054BC  C061  F061         	movff	strichr@ptr,?_strichr
 20308  0054C0  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20309  0054C4  D00A               	goto	l2541
 20310  0054C6                     l12914:
 20311                           
 20312                           ; BSR set to: 0
 20313  0054C6  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20314  0054C8  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20315  0054CA                     l12916:
 20316                           
 20317                           ; BSR set to: 0
 20318  0054CA  C061  FFD9         	movff	strichr@ptr,fsr2l
 20319  0054CE  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20320  0054D2  50DF               	movf	indf2,w,c
 20321  0054D4  E1EA               	bnz	l12910
 20322                           
 20323                           ; BSR set to: 0
 20324  0054D6  6B61               	clrf	?_strichr& (0+255),b
 20325  0054D8  6B62               	clrf	(?_strichr+1)& (0+255),b
 20326  0054DA                     l2541:
 20327                           
 20328                           ; BSR set to: 0
 20329  0054DA  0012               	return	
 20330  0054DC                     __end_of_strichr:
 20331                           	opt stack 0
 20332                           tblptru	equ	0xFF8
 20333                           tblptrh	equ	0xFF7
 20334                           tblptrl	equ	0xFF6
 20335                           tablat	equ	0xFF5
 20336                           prodh	equ	0xFF4
 20337                           prodl	equ	0xFF3
 20338                           intcon	equ	0xFF2
 20339                           indf0	equ	0xFEF
 20340                           postinc0	equ	0xFEE
 20341                           fsr0h	equ	0xFEA
 20342                           fsr0l	equ	0xFE9
 20343                           wreg	equ	0xFE8
 20344                           indf1	equ	0xFE7
 20345                           postinc1	equ	0xFE6
 20346                           postdec1	equ	0xFE5
 20347                           fsr1h	equ	0xFE2
 20348                           fsr1l	equ	0xFE1
 20349                           indf2	equ	0xFDF
 20350                           postinc2	equ	0xFDE
 20351                           postdec2	equ	0xFDD
 20352                           plusw2	equ	0xFDB
 20353                           fsr2h	equ	0xFDA
 20354                           fsr2l	equ	0xFD9
 20355                           status	equ	0xFD8
 20356                           
 20357 ;; *************** function _strnicmp *****************
 20358 ;; Defined at:
 20359 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20360 ;; Parameters:    Size  Location     Type
 20361 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20362 ;;		 -> NULL(0), cmdbuf(80), 
 20363 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20364 ;;		 -> STR_122(6), STR_121(8), STR_119(6), STR_117(5), 
 20365 ;;		 -> STR_115(8), STR_114(6), STR_113(9), STR_112(11), 
 20366 ;;		 -> STR_110(8), STR_108(4), STR_107(5), STR_95(5), 
 20367 ;;		 -> STR_83(7), STR_78(5), STR_69(5), STR_46(5), 
 20368 ;;		 -> STR_45(5), STR_43(5), STR_42(4), STR_41(5), 
 20369 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20370 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20371 ;;		 -> STR_8(5), STR_6(5), 
 20372 ;;  len             2    8[BANK0 ] unsigned int 
 20373 ;; Auto vars:     Size  Location     Type
 20374 ;;  r               1   12[BANK0 ] char 
 20375 ;; Return value:  Size  Location     Type
 20376 ;;                  2    4[BANK0 ] int 
 20377 ;; Registers used:
 20378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20379 ;; Tracked objects:
 20380 ;;		On entry : F/0
 20381 ;;		On exit  : F/0
 20382 ;;		Unchanged: 0/0
 20383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20384 ;;      Params:         0       6       0       0       0       0       0
 20385 ;;      Locals:         0       1       0       0       0       0       0
 20386 ;;      Temps:          0       2       0       0       0       0       0
 20387 ;;      Totals:         0       9       0       0       0       0       0
 20388 ;;Total ram usage:        9 bytes
 20389 ;; Hardware stack levels used:    1
 20390 ;; Hardware stack levels required when called:    4
 20391 ;; This function calls:
 20392 ;;		_toupper
 20393 ;; This function is called by:
 20394 ;;		_stristr
 20395 ;; This function uses a non-reentrant model
 20396 ;;
 20397                           
 20398                           	psect	text49
 20399  004EF2                     __ptext49:
 20400                           	opt stack 0
 20401  004EF2                     _strnicmp:
 20402                           	opt stack 24
 20403                           
 20404                           ; BSR set to: 0
 20405                           
 20406                           ; BSR set to: 0
 20407                           ;incstack = 0
 20408                           ;incstack = 0
 20409  004EF2  D027               	goto	l12906
 20410  004EF4                     l12896:
 20411                           
 20412                           ; BSR set to: 0
 20413  004EF4  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20414  004EF8  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20415  004EFC  0008               	tblrd		*
 20416  004EFE  50F5               	movf	tablat,w,c
 20417  004F00  EC8D  F02B         	call	_toupper
 20418  004F04  6F6A               	movwf	??_strnicmp& (0+255),b
 20419  004F06  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20420  004F0A  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20421  004F0E  50DF               	movf	indf2,w,c
 20422  004F10  EC8D  F02B         	call	_toupper
 20423  004F14  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20424  004F16  516A               	movf	??_strnicmp& (0+255),w,b
 20425  004F18  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20426  004F1A  6F6C               	movwf	strnicmp@r& (0+255),b
 20427  004F1C  0100               	movlb	0	; () banked
 20428  004F1E  676C               	tstfsz	strnicmp@r& (0+255),b
 20429  004F20  D006               	goto	l12900
 20430                           
 20431                           ; BSR set to: 0
 20432  004F22  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20433  004F26  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20434  004F2A  50DF               	movf	indf2,w,c
 20435  004F2C  E106               	bnz	l12904
 20436  004F2E                     l12900:
 20437                           
 20438                           ; BSR set to: 0
 20439  004F2E  516C               	movf	strnicmp@r& (0+255),w,b
 20440  004F30  6F64               	movwf	?_strnicmp& (0+255),b
 20441  004F32  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20442  004F34  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20443  004F36  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20444  004F38  D00E               	goto	l2493
 20445  004F3A                     l12904:
 20446                           
 20447                           ; BSR set to: 0
 20448  004F3A  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20449  004F3C  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20450  004F3E  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20451  004F40  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20452  004F42                     l12906:
 20453                           
 20454                           ; BSR set to: 0
 20455  004F42  0768               	decf	strnicmp@len& (0+255),f,b
 20456  004F44  A0D8               	btfss	status,0,c
 20457  004F46  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20458  004F48  0100               	movlb	0	; () banked
 20459  004F4A  2968               	incf	strnicmp@len& (0+255),w,b
 20460  004F4C  B4D8               	btfsc	status,2,c
 20461  004F4E  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20462  004F50  E1D1               	bnz	l12896
 20463                           
 20464                           ; BSR set to: 0
 20465  004F52  6B64               	clrf	?_strnicmp& (0+255),b
 20466  004F54  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20467  004F56                     l2493:
 20468                           
 20469                           ; BSR set to: 0
 20470  004F56  0012               	return	
 20471  004F58                     __end_of_strnicmp:
 20472                           	opt stack 0
 20473                           tblptru	equ	0xFF8
 20474                           tblptrh	equ	0xFF7
 20475                           tblptrl	equ	0xFF6
 20476                           tablat	equ	0xFF5
 20477                           prodh	equ	0xFF4
 20478                           prodl	equ	0xFF3
 20479                           intcon	equ	0xFF2
 20480                           indf0	equ	0xFEF
 20481                           postinc0	equ	0xFEE
 20482                           fsr0h	equ	0xFEA
 20483                           fsr0l	equ	0xFE9
 20484                           wreg	equ	0xFE8
 20485                           indf1	equ	0xFE7
 20486                           postinc1	equ	0xFE6
 20487                           postdec1	equ	0xFE5
 20488                           fsr1h	equ	0xFE2
 20489                           fsr1l	equ	0xFE1
 20490                           indf2	equ	0xFDF
 20491                           postinc2	equ	0xFDE
 20492                           postdec2	equ	0xFDD
 20493                           plusw2	equ	0xFDB
 20494                           fsr2h	equ	0xFDA
 20495                           fsr2l	equ	0xFD9
 20496                           status	equ	0xFD8
 20497                           
 20498 ;; *************** function _toupper *****************
 20499 ;; Defined at:
 20500 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20501 ;; Parameters:    Size  Location     Type
 20502 ;;  c               1    wreg     unsigned char 
 20503 ;; Auto vars:     Size  Location     Type
 20504 ;;  c               1    0[BANK0 ] unsigned char 
 20505 ;; Return value:  Size  Location     Type
 20506 ;;                  1    wreg      unsigned char 
 20507 ;; Registers used:
 20508 ;;		wreg, status,2, status,0
 20509 ;; Tracked objects:
 20510 ;;		On entry : F/0
 20511 ;;		On exit  : F/0
 20512 ;;		Unchanged: 0/0
 20513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20514 ;;      Params:         0       0       0       0       0       0       0
 20515 ;;      Locals:         0       1       0       0       0       0       0
 20516 ;;      Temps:          0       0       0       0       0       0       0
 20517 ;;      Totals:         0       1       0       0       0       0       0
 20518 ;;Total ram usage:        1 bytes
 20519 ;; Hardware stack levels used:    1
 20520 ;; Hardware stack levels required when called:    3
 20521 ;; This function calls:
 20522 ;;		Nothing
 20523 ;; This function is called by:
 20524 ;;		_strnicmp
 20525 ;;		_strichr
 20526 ;; This function uses a non-reentrant model
 20527 ;;
 20528                           
 20529                           	psect	text50
 20530  00571A                     __ptext50:
 20531                           	opt stack 0
 20532  00571A                     _toupper:
 20533                           	opt stack 24
 20534                           
 20535                           ; BSR set to: 0
 20536                           ;incstack = 0
 20537                           ;incstack = 0
 20538                           ;toupper@c stored from wreg
 20539  00571A  CFE8 F060          	movff	wreg,toupper@c
 20540                           
 20541                           ; BSR set to: 0
 20542  00571E  0E7B               	movlw	123
 20543  005720  6160               	cpfslt	toupper@c& (0+255),b
 20544  005722  D004               	goto	l12924
 20545                           
 20546                           ; BSR set to: 0
 20547  005724  0E60               	movlw	96
 20548  005726  6560               	cpfsgt	toupper@c& (0+255),b
 20549  005728  D001               	goto	l12924
 20550                           
 20551                           ; BSR set to: 0
 20552  00572A  9B60               	bcf	toupper@c& (0+255),5,b
 20553  00572C                     l12924:
 20554                           
 20555                           ; BSR set to: 0
 20556  00572C  5160               	movf	toupper@c& (0+255),w,b
 20557                           
 20558                           ; BSR set to: 0
 20559  00572E  0012               	return	
 20560  005730                     __end_of_toupper:
 20561                           	opt stack 0
 20562                           tblptru	equ	0xFF8
 20563                           tblptrh	equ	0xFF7
 20564                           tblptrl	equ	0xFF6
 20565                           tablat	equ	0xFF5
 20566                           prodh	equ	0xFF4
 20567                           prodl	equ	0xFF3
 20568                           intcon	equ	0xFF2
 20569                           indf0	equ	0xFEF
 20570                           postinc0	equ	0xFEE
 20571                           fsr0h	equ	0xFEA
 20572                           fsr0l	equ	0xFE9
 20573                           wreg	equ	0xFE8
 20574                           indf1	equ	0xFE7
 20575                           postinc1	equ	0xFE6
 20576                           postdec1	equ	0xFE5
 20577                           fsr1h	equ	0xFE2
 20578                           fsr1l	equ	0xFE1
 20579                           indf2	equ	0xFDF
 20580                           postinc2	equ	0xFDE
 20581                           postdec2	equ	0xFDD
 20582                           plusw2	equ	0xFDB
 20583                           fsr2h	equ	0xFDA
 20584                           fsr2l	equ	0xFD9
 20585                           status	equ	0xFD8
 20586                           
 20587 ;; *************** function _strlen *****************
 20588 ;; Defined at:
 20589 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20590 ;; Parameters:    Size  Location     Type
 20591 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20592 ;;		 -> printGUID@buf(3), STR_122(6), STR_121(8), STR_119(6), 
 20593 ;;		 -> STR_117(5), STR_115(8), STR_114(6), STR_113(9), 
 20594 ;;		 -> STR_112(11), STR_110(8), STR_108(4), STR_107(5), 
 20595 ;;		 -> STR_95(5), STR_83(7), STR_78(5), STR_69(5), 
 20596 ;;		 -> wrkbuf(80), STR_46(5), STR_45(5), STR_43(5), 
 20597 ;;		 -> STR_42(4), STR_41(5), STR_38(3), STR_29(3), 
 20598 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20599 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20600 ;;		 -> cmdbuf(80), 
 20601 ;; Auto vars:     Size  Location     Type
 20602 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 20603 ;;		 -> printGUID@buf(3), STR_122(6), STR_121(8), STR_119(6), 
 20604 ;;		 -> STR_117(5), STR_115(8), STR_114(6), STR_113(9), 
 20605 ;;		 -> STR_112(11), STR_110(8), STR_108(4), STR_107(5), 
 20606 ;;		 -> STR_95(5), STR_83(7), STR_78(5), STR_69(5), 
 20607 ;;		 -> wrkbuf(80), STR_46(5), STR_45(5), STR_43(5), 
 20608 ;;		 -> STR_42(4), STR_41(5), STR_38(3), STR_29(3), 
 20609 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20610 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20611 ;;		 -> cmdbuf(80), 
 20612 ;; Return value:  Size  Location     Type
 20613 ;;                  2    0[BANK0 ] unsigned int 
 20614 ;; Registers used:
 20615 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20616 ;; Tracked objects:
 20617 ;;		On entry : F/0
 20618 ;;		On exit  : F/0
 20619 ;;		Unchanged: 0/0
 20620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20621 ;;      Params:         0       2       0       0       0       0       0
 20622 ;;      Locals:         0       2       0       0       0       0       0
 20623 ;;      Temps:          0       0       0       0       0       0       0
 20624 ;;      Totals:         0       4       0       0       0       0       0
 20625 ;;Total ram usage:        4 bytes
 20626 ;; Hardware stack levels used:    1
 20627 ;; Hardware stack levels required when called:    3
 20628 ;; This function calls:
 20629 ;;		Nothing
 20630 ;; This function is called by:
 20631 ;;		_doModeSLCAN
 20632 ;;		_receiveSendEventSLCAN
 20633 ;;		_printGUID
 20634 ;;		_hexStringToBytes
 20635 ;;		_stristr
 20636 ;; This function uses a non-reentrant model
 20637 ;;
 20638                           
 20639                           	psect	text51
 20640  0053E0                     __ptext51:
 20641                           	opt stack 0
 20642  0053E0                     _strlen:
 20643                           	opt stack 25
 20644                           
 20645                           ; BSR set to: 0
 20646                           
 20647                           ; BSR set to: 0
 20648                           ;incstack = 0
 20649                           ;incstack = 0
 20650  0053E0  C060  F062         	movff	strlen@s,strlen@cp
 20651  0053E4  C061  F063         	movff	strlen@s+1,strlen@cp+1
 20652  0053E8  D003               	goto	l12466
 20653  0053EA                     l12464:
 20654  0053EA  0100               	movlb	0	; () banked
 20655  0053EC  4B62               	infsnz	strlen@cp& (0+255),f,b
 20656  0053EE  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 20657  0053F0                     l12466:
 20658                           
 20659                           ; BSR set to: 0
 20660  0053F0  5162               	movf	strlen@cp& (0+255),w,b
 20661  0053F2  6EF6               	movwf	tblptrl,c
 20662  0053F4  6EE9               	movwf	fsr0l,c
 20663  0053F6  0E05               	movlw	(high __ramtop+-1)
 20664  0053F8  6EEA               	movwf	fsr0h,c
 20665  0053FA  5163               	movf	(strlen@cp+1)& (0+255),w,b
 20666  0053FC  64EA               	cpfsgt	fsr0h,c
 20667  0053FE  D003               	bra	u16137
 20668  005400  6EEA               	movwf	fsr0h,c
 20669  005402  50EF               	movf	indf0,w,c
 20670  005404  D003               	bra	u16130
 20671  005406                     u16137:
 20672  005406  6EF7               	movwf	tblptrh,c
 20673  005408  0008               	tblrd		*
 20674  00540A  50F5               	movf	tablat,w,c
 20675  00540C                     u16130:
 20676  00540C  0900               	iorlw	0
 20677  00540E  E1ED               	bnz	l12464
 20678  005410  0100               	movlb	0	; () banked
 20679  005412  5160               	movf	strlen@s& (0+255),w,b
 20680  005414  5D62               	subwf	strlen@cp& (0+255),w,b
 20681  005416  6F60               	movwf	?_strlen& (0+255),b
 20682  005418  5161               	movf	(strlen@s+1)& (0+255),w,b
 20683  00541A  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 20684  00541C  6F61               	movwf	(?_strlen+1)& (0+255),b
 20685                           
 20686                           ; BSR set to: 0
 20687  00541E  0012               	return	
 20688  005420                     __end_of_strlen:
 20689                           	opt stack 0
 20690                           tblptru	equ	0xFF8
 20691                           tblptrh	equ	0xFF7
 20692                           tblptrl	equ	0xFF6
 20693                           tablat	equ	0xFF5
 20694                           prodh	equ	0xFF4
 20695                           prodl	equ	0xFF3
 20696                           intcon	equ	0xFF2
 20697                           indf0	equ	0xFEF
 20698                           postinc0	equ	0xFEE
 20699                           fsr0h	equ	0xFEA
 20700                           fsr0l	equ	0xFE9
 20701                           wreg	equ	0xFE8
 20702                           indf1	equ	0xFE7
 20703                           postinc1	equ	0xFE6
 20704                           postdec1	equ	0xFE5
 20705                           fsr1h	equ	0xFE2
 20706                           fsr1l	equ	0xFE1
 20707                           indf2	equ	0xFDF
 20708                           postinc2	equ	0xFDE
 20709                           postdec2	equ	0xFDD
 20710                           plusw2	equ	0xFDB
 20711                           fsr2h	equ	0xFDA
 20712                           fsr2l	equ	0xFD9
 20713                           status	equ	0xFD8
 20714                           
 20715 ;; *************** function _receivePrintEventVerbose *****************
 20716 ;; Defined at:
 20717 ;;		line 1726 in file "main.c"
 20718 ;; Parameters:    Size  Location     Type
 20719 ;;		None
 20720 ;; Auto vars:     Size  Location     Type
 20721 ;;  i               1   69[BANK0 ] unsigned char 
 20722 ;; Return value:  Size  Location     Type
 20723 ;;                  1    wreg      enum E15660
 20724 ;; Registers used:
 20725 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20726 ;; Tracked objects:
 20727 ;;		On entry : F/1
 20728 ;;		On exit  : 0/0
 20729 ;;		Unchanged: 0/0
 20730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20731 ;;      Params:         0       0       0       0       0       0       0
 20732 ;;      Locals:         0      13       0       0       0       0       0
 20733 ;;      Temps:          0       5       0       0       0       0       0
 20734 ;;      Totals:         0      18       0       0       0       0       0
 20735 ;;Total ram usage:       18 bytes
 20736 ;; Hardware stack levels used:    1
 20737 ;; Hardware stack levels required when called:    6
 20738 ;; This function calls:
 20739 ;;		_putsUSART
 20740 ;;		_sprintf
 20741 ;;		_getVSCPFrame
 20742 ;; This function is called by:
 20743 ;;		_doModeVerbose
 20744 ;; This function uses a non-reentrant model
 20745 ;;
 20746                           
 20747                           	psect	text52
 20748  002392                     __ptext52:
 20749                           	opt stack 0
 20750  002392                     _receivePrintEventVerbose:
 20751                           	opt stack 23
 20752                           
 20753                           ; BSR set to: 1
 20754                           ;main.c: 1727: uint8_t i;
 20755                           ;main.c: 1729: if (getVSCPFrame(&vscpClass,
 20756                           ;main.c: 1730: &vscpType,
 20757                           ;main.c: 1731: &vscpNodeId,
 20758                           ;main.c: 1732: &vscpPriority,
 20759                           ;main.c: 1733: &vscpSize,
 20760                           ;main.c: 1734: vscpData)) {
 20761                           
 20762                           ; BSR set to: 0
 20763                           ;incstack = 0
 20764                           ;incstack = 0
 20765  002392  0E01               	movlw	high _vscpClass
 20766  002394  0100               	movlb	0	; () banked
 20767  002396  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20768  002398  0EAC               	movlw	low _vscpClass
 20769  00239A  6F72               	movwf	?_getVSCPFrame& (0+255),b
 20770  00239C  0E01               	movlw	high _vscpType
 20771  00239E  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20772  0023A0  0EB1               	movlw	low _vscpType
 20773  0023A2  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20774  0023A4  0E01               	movlw	high _vscpNodeId
 20775  0023A6  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 20776  0023A8  0EAE               	movlw	low _vscpNodeId
 20777  0023AA  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20778  0023AC  0E01               	movlw	high _vscpPriority
 20779  0023AE  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 20780  0023B0  0EAF               	movlw	low _vscpPriority
 20781  0023B2  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 20782  0023B4  0E01               	movlw	high _vscpSize
 20783  0023B6  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 20784  0023B8  0EB0               	movlw	low _vscpSize
 20785  0023BA  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 20786  0023BC  0E01               	movlw	high _vscpData
 20787  0023BE  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 20788  0023C0  0EA4               	movlw	low _vscpData
 20789  0023C2  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 20790  0023C4  EC98  F025         	call	_getVSCPFrame	;wreg free
 20791  0023C8  0900               	iorlw	0
 20792  0023CA  E101 D141          	bz	l11196
 20793                           
 20794                           ; BSR set to: 0
 20795                           ;main.c: 1737: cntRxFrames++;
 20796  0023CE  2BD9               	incf	_cntRxFrames& (0+255),f,b
 20797  0023D0  0E00               	movlw	0
 20798  0023D2  23DA               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20799  0023D4  23DB               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20800  0023D6  23DC               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20801                           
 20802                           ;main.c: 1738: cntRxBytes += vscpSize;
 20803  0023D8  0101               	movlb	1	; () banked
 20804  0023DA  51B0               	movf	_vscpSize& (0+255),w,b
 20805  0023DC  0100               	movlb	0	; () banked
 20806  0023DE  27D5               	addwf	_cntRxBytes& (0+255),f,b
 20807  0023E0  0E00               	movlw	0
 20808  0023E2  23D6               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20809  0023E4  23D7               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20810  0023E6  23D8               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20811                           
 20812                           ; BSR set to: 0
 20813                           ;main.c: 1740: putsUSART((char *) "<Prio=");
 20814  0023E8  0E7F               	movlw	high STR_132
 20815  0023EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20816  0023EC  0E41               	movlw	low STR_132
 20817  0023EE  6F61               	movwf	?_putsUSART& (0+255),b
 20818  0023F0  ECC9  F028         	call	_putsUSART	;wreg free
 20819                           
 20820                           ;main.c: 1741: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20821  0023F4  0101               	movlb	1	; () banked
 20822  0023F6  6700               	tstfsz	_bHex& (0+255),b
 20823  0023F8  D005               	goto	l11114
 20824                           
 20825                           ; BSR set to: 1
 20826  0023FA  0E7F               	movlw	high STR_54
 20827  0023FC  0100               	movlb	0	; () banked
 20828  0023FE  6F9A               	movwf	(_receivePrintEventVerbose$1266+1)& (0+255),b
 20829  002400  0EED               	movlw	low STR_54
 20830  002402  D004               	goto	L27
 20831  002404                     l11114:
 20832                           
 20833                           ; BSR set to: 1
 20834  002404  0E7F               	movlw	high STR_53
 20835  002406  0100               	movlb	0	; () banked
 20836  002408  6F9A               	movwf	(_receivePrintEventVerbose$1266+1)& (0+255),b
 20837  00240A  0E64               	movlw	low STR_53
 20838  00240C                     L27:
 20839  00240C  6F99               	movwf	_receivePrintEventVerbose$1266& (0+255),b
 20840                           
 20841                           ; BSR set to: 0
 20842  00240E  0E01               	movlw	high _wrkbuf
 20843  002410  0100               	movlb	0	; () banked
 20844  002412  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20845  002414  0E54               	movlw	low _wrkbuf
 20846  002416  6F76               	movwf	?_sprintf& (0+255),b
 20847  002418  C099  F078         	movff	_receivePrintEventVerbose$1266,?_sprintf+2
 20848  00241C  C09A  F079         	movff	_receivePrintEventVerbose$1266+1,?_sprintf+3
 20849  002420  C1AF  F07A         	movff	_vscpPriority,?_sprintf+4
 20850  002424  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20851  002426  EC07  F00B         	call	_sprintf	;wreg free
 20852                           
 20853                           ; BSR set to: 0
 20854                           ;main.c: 1742: putsUSART(wrkbuf);
 20855  00242A  0E01               	movlw	high _wrkbuf
 20856  00242C  0100               	movlb	0	; () banked
 20857  00242E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20858  002430  0E54               	movlw	low _wrkbuf
 20859  002432  6F61               	movwf	?_putsUSART& (0+255),b
 20860  002434  ECC9  F028         	call	_putsUSART	;wreg free
 20861                           
 20862                           ;main.c: 1743: putsUSART((char *) ",class=");
 20863  002438  0E7E               	movlw	high STR_135
 20864  00243A  0100               	movlb	0	; () banked
 20865  00243C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20866  00243E  0EF5               	movlw	low STR_135
 20867  002440  6F61               	movwf	?_putsUSART& (0+255),b
 20868  002442  ECC9  F028         	call	_putsUSART	;wreg free
 20869                           
 20870                           ;main.c: 1744: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20871  002446  0101               	movlb	1	; () banked
 20872  002448  6700               	tstfsz	_bHex& (0+255),b
 20873  00244A  D005               	goto	l11126
 20874                           
 20875                           ; BSR set to: 1
 20876  00244C  0E7F               	movlw	high STR_54
 20877  00244E  0100               	movlb	0	; () banked
 20878  002450  6F9C               	movwf	(_receivePrintEventVerbose$1271+1)& (0+255),b
 20879  002452  0EED               	movlw	low STR_54
 20880  002454  D004               	goto	L28
 20881  002456                     l11126:
 20882                           
 20883                           ; BSR set to: 1
 20884  002456  0E7F               	movlw	high STR_136
 20885  002458  0100               	movlb	0	; () banked
 20886  00245A  6F9C               	movwf	(_receivePrintEventVerbose$1271+1)& (0+255),b
 20887  00245C  0E6B               	movlw	low STR_136
 20888  00245E                     L28:
 20889  00245E  6F9B               	movwf	_receivePrintEventVerbose$1271& (0+255),b
 20890                           
 20891                           ; BSR set to: 0
 20892  002460  0E01               	movlw	high _wrkbuf
 20893  002462  0100               	movlb	0	; () banked
 20894  002464  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20895  002466  0E54               	movlw	low _wrkbuf
 20896  002468  6F76               	movwf	?_sprintf& (0+255),b
 20897  00246A  C09B  F078         	movff	_receivePrintEventVerbose$1271,?_sprintf+2
 20898  00246E  C09C  F079         	movff	_receivePrintEventVerbose$1271+1,?_sprintf+3
 20899  002472  C1AC  F07A         	movff	_vscpClass,?_sprintf+4
 20900  002476  C1AD  F07B         	movff	_vscpClass+1,?_sprintf+5
 20901  00247A  EC07  F00B         	call	_sprintf	;wreg free
 20902                           
 20903                           ; BSR set to: 0
 20904                           ;main.c: 1745: putsUSART(wrkbuf);
 20905  00247E  0E01               	movlw	high _wrkbuf
 20906  002480  0100               	movlb	0	; () banked
 20907  002482  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20908  002484  0E54               	movlw	low _wrkbuf
 20909  002486  6F61               	movwf	?_putsUSART& (0+255),b
 20910  002488  ECC9  F028         	call	_putsUSART	;wreg free
 20911                           
 20912                           ;main.c: 1746: putsUSART((char *) ",type=");
 20913  00248C  0E7F               	movlw	high STR_138
 20914  00248E  0100               	movlb	0	; () banked
 20915  002490  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20916  002492  0E33               	movlw	low STR_138
 20917  002494  6F61               	movwf	?_putsUSART& (0+255),b
 20918  002496  ECC9  F028         	call	_putsUSART	;wreg free
 20919                           
 20920                           ;main.c: 1747: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 20921  00249A  0101               	movlb	1	; () banked
 20922  00249C  6700               	tstfsz	_bHex& (0+255),b
 20923  00249E  D005               	goto	l11138
 20924                           
 20925                           ; BSR set to: 1
 20926  0024A0  0E7F               	movlw	high STR_54
 20927  0024A2  0100               	movlb	0	; () banked
 20928  0024A4  6F9E               	movwf	(_receivePrintEventVerbose$1276+1)& (0+255),b
 20929  0024A6  0EED               	movlw	low STR_54
 20930  0024A8  D004               	goto	L29
 20931  0024AA                     l11138:
 20932                           
 20933                           ; BSR set to: 1
 20934  0024AA  0E7F               	movlw	high STR_53
 20935  0024AC  0100               	movlb	0	; () banked
 20936  0024AE  6F9E               	movwf	(_receivePrintEventVerbose$1276+1)& (0+255),b
 20937  0024B0  0E64               	movlw	low STR_53
 20938  0024B2                     L29:
 20939  0024B2  6F9D               	movwf	_receivePrintEventVerbose$1276& (0+255),b
 20940                           
 20941                           ; BSR set to: 0
 20942  0024B4  0E01               	movlw	high _wrkbuf
 20943  0024B6  0100               	movlb	0	; () banked
 20944  0024B8  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20945  0024BA  0E54               	movlw	low _wrkbuf
 20946  0024BC  6F76               	movwf	?_sprintf& (0+255),b
 20947  0024BE  C09D  F078         	movff	_receivePrintEventVerbose$1276,?_sprintf+2
 20948  0024C2  C09E  F079         	movff	_receivePrintEventVerbose$1276+1,?_sprintf+3
 20949  0024C6  C1B1  F07A         	movff	_vscpType,?_sprintf+4
 20950  0024CA  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20951  0024CC  EC07  F00B         	call	_sprintf	;wreg free
 20952                           
 20953                           ; BSR set to: 0
 20954                           ;main.c: 1748: putsUSART(wrkbuf);
 20955  0024D0  0E01               	movlw	high _wrkbuf
 20956  0024D2  0100               	movlb	0	; () banked
 20957  0024D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20958  0024D6  0E54               	movlw	low _wrkbuf
 20959  0024D8  6F61               	movwf	?_putsUSART& (0+255),b
 20960  0024DA  ECC9  F028         	call	_putsUSART	;wreg free
 20961                           
 20962                           ;main.c: 1749: putsUSART((char *) ",nodeid=");
 20963  0024DE  0E7E               	movlw	high STR_141
 20964  0024E0  0100               	movlb	0	; () banked
 20965  0024E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20966  0024E4  0EC3               	movlw	low STR_141
 20967  0024E6  6F61               	movwf	?_putsUSART& (0+255),b
 20968  0024E8  ECC9  F028         	call	_putsUSART	;wreg free
 20969                           
 20970                           ;main.c: 1750: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 20971  0024EC  0101               	movlb	1	; () banked
 20972  0024EE  6700               	tstfsz	_bHex& (0+255),b
 20973  0024F0  D005               	goto	l11150
 20974                           
 20975                           ; BSR set to: 1
 20976  0024F2  0E7F               	movlw	high STR_54
 20977  0024F4  0100               	movlb	0	; () banked
 20978  0024F6  6FA0               	movwf	(_receivePrintEventVerbose$1281+1)& (0+255),b
 20979  0024F8  0EED               	movlw	low STR_54
 20980  0024FA  D004               	goto	L30
 20981  0024FC                     l11150:
 20982                           
 20983                           ; BSR set to: 1
 20984  0024FC  0E7F               	movlw	high STR_53
 20985  0024FE  0100               	movlb	0	; () banked
 20986  002500  6FA0               	movwf	(_receivePrintEventVerbose$1281+1)& (0+255),b
 20987  002502  0E64               	movlw	low STR_53
 20988  002504                     L30:
 20989  002504  6F9F               	movwf	_receivePrintEventVerbose$1281& (0+255),b
 20990                           
 20991                           ; BSR set to: 0
 20992  002506  0E01               	movlw	high _wrkbuf
 20993  002508  0100               	movlb	0	; () banked
 20994  00250A  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20995  00250C  0E54               	movlw	low _wrkbuf
 20996  00250E  6F76               	movwf	?_sprintf& (0+255),b
 20997  002510  C09F  F078         	movff	_receivePrintEventVerbose$1281,?_sprintf+2
 20998  002514  C0A0  F079         	movff	_receivePrintEventVerbose$1281+1,?_sprintf+3
 20999  002518  C1AE  F07A         	movff	_vscpNodeId,?_sprintf+4
 21000  00251C  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21001  00251E  EC07  F00B         	call	_sprintf	;wreg free
 21002                           
 21003                           ; BSR set to: 0
 21004                           ;main.c: 1751: putsUSART(wrkbuf);
 21005  002522  0E01               	movlw	high _wrkbuf
 21006  002524  0100               	movlb	0	; () banked
 21007  002526  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21008  002528  0E54               	movlw	low _wrkbuf
 21009  00252A  6F61               	movwf	?_putsUSART& (0+255),b
 21010  00252C  ECC9  F028         	call	_putsUSART	;wreg free
 21011                           
 21012                           ;main.c: 1752: putsUSART((char *) ",size=");
 21013  002530  0E7F               	movlw	high STR_144
 21014  002532  0100               	movlb	0	; () banked
 21015  002534  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21016  002536  0E3A               	movlw	low STR_144
 21017  002538  6F61               	movwf	?_putsUSART& (0+255),b
 21018  00253A  ECC9  F028         	call	_putsUSART	;wreg free
 21019                           
 21020                           ;main.c: 1753: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21021  00253E  0101               	movlb	1	; () banked
 21022  002540  6700               	tstfsz	_bHex& (0+255),b
 21023  002542  D005               	goto	l11162
 21024                           
 21025                           ; BSR set to: 1
 21026  002544  0E7F               	movlw	high STR_54
 21027  002546  0100               	movlb	0	; () banked
 21028  002548  6FA2               	movwf	(_receivePrintEventVerbose$1286+1)& (0+255),b
 21029  00254A  0EED               	movlw	low STR_54
 21030  00254C  D004               	goto	L31
 21031  00254E                     l11162:
 21032                           
 21033                           ; BSR set to: 1
 21034  00254E  0E7F               	movlw	high STR_53
 21035  002550  0100               	movlb	0	; () banked
 21036  002552  6FA2               	movwf	(_receivePrintEventVerbose$1286+1)& (0+255),b
 21037  002554  0E64               	movlw	low STR_53
 21038  002556                     L31:
 21039  002556  6FA1               	movwf	_receivePrintEventVerbose$1286& (0+255),b
 21040                           
 21041                           ; BSR set to: 0
 21042  002558  0E01               	movlw	high _wrkbuf
 21043  00255A  0100               	movlb	0	; () banked
 21044  00255C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21045  00255E  0E54               	movlw	low _wrkbuf
 21046  002560  6F76               	movwf	?_sprintf& (0+255),b
 21047  002562  C0A1  F078         	movff	_receivePrintEventVerbose$1286,?_sprintf+2
 21048  002566  C0A2  F079         	movff	_receivePrintEventVerbose$1286+1,?_sprintf+3
 21049  00256A  C1B0  F07A         	movff	_vscpSize,?_sprintf+4
 21050  00256E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21051  002570  EC07  F00B         	call	_sprintf	;wreg free
 21052                           
 21053                           ; BSR set to: 0
 21054                           ;main.c: 1754: putsUSART(wrkbuf);
 21055  002574  0E01               	movlw	high _wrkbuf
 21056  002576  0100               	movlb	0	; () banked
 21057  002578  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21058  00257A  0E54               	movlw	low _wrkbuf
 21059  00257C  6F61               	movwf	?_putsUSART& (0+255),b
 21060  00257E  ECC9  F028         	call	_putsUSART	;wreg free
 21061                           
 21062                           ;main.c: 1755: if (vscpSize > 0) {
 21063  002582  0101               	movlb	1	; () banked
 21064  002584  51B0               	movf	_vscpSize& (0+255),w,b
 21065  002586  E054               	bz	l11190
 21066                           
 21067                           ; BSR set to: 1
 21068                           ;main.c: 1756: putsUSART((char *) ",Data=");
 21069  002588  0E7F               	movlw	high STR_147
 21070  00258A  0100               	movlb	0	; () banked
 21071  00258C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21072  00258E  0E2C               	movlw	low STR_147
 21073  002590  6F61               	movwf	?_putsUSART& (0+255),b
 21074  002592  ECC9  F028         	call	_putsUSART	;wreg free
 21075                           
 21076                           ;main.c: 1757: for (i = 0; i < vscpSize; i++) {
 21077  002596  0100               	movlb	0	; () banked
 21078  002598  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21079  00259A  D044               	goto	l11188
 21080  00259C                     l908:
 21081                           
 21082                           ; BSR set to: 0
 21083                           ;main.c: 1759: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21084  00259C  0101               	movlb	1	; () banked
 21085  00259E  6700               	tstfsz	_bHex& (0+255),b
 21086  0025A0  D005               	goto	l11176
 21087                           
 21088                           ; BSR set to: 1
 21089  0025A2  0E7F               	movlw	high STR_54
 21090  0025A4  0100               	movlb	0	; () banked
 21091  0025A6  6FA4               	movwf	(_receivePrintEventVerbose$1291+1)& (0+255),b
 21092  0025A8  0EED               	movlw	low STR_54
 21093  0025AA  D004               	goto	L32
 21094  0025AC                     l11176:
 21095                           
 21096                           ; BSR set to: 1
 21097  0025AC  0E7F               	movlw	high STR_53
 21098  0025AE  0100               	movlb	0	; () banked
 21099  0025B0  6FA4               	movwf	(_receivePrintEventVerbose$1291+1)& (0+255),b
 21100  0025B2  0E64               	movlw	low STR_53
 21101  0025B4                     L32:
 21102  0025B4  6FA3               	movwf	_receivePrintEventVerbose$1291& (0+255),b
 21103                           
 21104                           ; BSR set to: 0
 21105  0025B6  0E01               	movlw	high _wrkbuf
 21106  0025B8  0100               	movlb	0	; () banked
 21107  0025BA  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21108  0025BC  0E54               	movlw	low _wrkbuf
 21109  0025BE  6F76               	movwf	?_sprintf& (0+255),b
 21110  0025C0  C0A3  F078         	movff	_receivePrintEventVerbose$1291,?_sprintf+2
 21111  0025C4  C0A4  F079         	movff	_receivePrintEventVerbose$1291+1,?_sprintf+3
 21112  0025C8  0EA4               	movlw	low _vscpData
 21113  0025CA  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 21114  0025CC  6ED9               	movwf	fsr2l,c
 21115  0025CE  6ADA               	clrf	fsr2h,c
 21116  0025D0  0E01               	movlw	high _vscpData
 21117  0025D2  22DA               	addwfc	fsr2h,f,c
 21118  0025D4  50DF               	movf	indf2,w,c
 21119  0025D6  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21120  0025D8  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21121  0025DA  EC07  F00B         	call	_sprintf	;wreg free
 21122                           
 21123                           ; BSR set to: 0
 21124                           ;main.c: 1760: putsUSART(wrkbuf);
 21125  0025DE  0E01               	movlw	high _wrkbuf
 21126  0025E0  0100               	movlb	0	; () banked
 21127  0025E2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21128  0025E4  0E54               	movlw	low _wrkbuf
 21129  0025E6  6F61               	movwf	?_putsUSART& (0+255),b
 21130  0025E8  ECC9  F028         	call	_putsUSART	;wreg free
 21131                           
 21132                           ;main.c: 1761: if (i < (vscpSize - 1)) {
 21133  0025EC  0EFF               	movlw	255
 21134  0025EE  0101               	movlb	1	; () banked
 21135  0025F0  25B0               	addwf	_vscpSize& (0+255),w,b
 21136  0025F2  0100               	movlb	0	; () banked
 21137  0025F4  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21138  0025F6  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21139  0025F8  0EFF               	movlw	255
 21140  0025FA  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21141  0025FC  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21142  0025FE  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21143  002600  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21144  002602  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21145  002604  0A80               	xorlw	128
 21146  002606  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21147  002608  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21148  00260A  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21149  00260C  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21150  00260E  0A80               	xorlw	128
 21151  002610  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21152  002612  E206               	bc	l11186
 21153                           
 21154                           ; BSR set to: 0
 21155                           ;main.c: 1762: putsUSART((char *) ",");
 21156  002614  0E7F               	movlw	high STR_30
 21157  002616  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21158  002618  0EF4               	movlw	low STR_30
 21159  00261A  6F61               	movwf	?_putsUSART& (0+255),b
 21160  00261C  ECC9  F028         	call	_putsUSART	;wreg free
 21161  002620                     l11186:
 21162  002620  0100               	movlb	0	; () banked
 21163  002622  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21164  002624                     l11188:
 21165                           
 21166                           ; BSR set to: 0
 21167  002624  0101               	movlb	1	; () banked
 21168  002626  51B0               	movf	_vscpSize& (0+255),w,b
 21169  002628  0100               	movlb	0	; () banked
 21170  00262A  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21171  00262C  E208               	bc	l915
 21172  00262E  D7B6               	goto	l908
 21173  002630                     l11190:
 21174                           
 21175                           ; BSR set to: 1
 21176                           ;main.c: 1766: putsUSART((char *) ",Data=none");
 21177  002630  0E7E               	movlw	high STR_151
 21178  002632  0100               	movlb	0	; () banked
 21179  002634  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21180  002636  0E91               	movlw	low STR_151
 21181  002638  6F61               	movwf	?_putsUSART& (0+255),b
 21182  00263A  ECC9  F028         	call	_putsUSART	;wreg free
 21183  00263E                     l915:
 21184                           
 21185                           ;main.c: 1767: }
 21186                           ;main.c: 1768: putsUSART((char *) ">\r\n");
 21187  00263E  0E7F               	movlw	high STR_152
 21188  002640  0100               	movlb	0	; () banked
 21189  002642  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21190  002644  0ED4               	movlw	low STR_152
 21191  002646  6F61               	movwf	?_putsUSART& (0+255),b
 21192  002648  ECC9  F028         	call	_putsUSART	;wreg free
 21193                           
 21194                           ;main.c: 1769: return 1;
 21195  00264C  0E01               	movlw	1
 21196  00264E  D001               	goto	l916
 21197  002650                     l11196:
 21198                           
 21199                           ; BSR set to: 0
 21200                           ;main.c: 1770: }
 21201                           ;main.c: 1772: return 0;
 21202  002650  0E00               	movlw	0
 21203  002652                     l916:
 21204  002652  0012               	return	
 21205  002654                     __end_of_receivePrintEventVerbose:
 21206                           	opt stack 0
 21207                           tblptru	equ	0xFF8
 21208                           tblptrh	equ	0xFF7
 21209                           tblptrl	equ	0xFF6
 21210                           tablat	equ	0xFF5
 21211                           prodh	equ	0xFF4
 21212                           prodl	equ	0xFF3
 21213                           intcon	equ	0xFF2
 21214                           indf0	equ	0xFEF
 21215                           postinc0	equ	0xFEE
 21216                           fsr0h	equ	0xFEA
 21217                           fsr0l	equ	0xFE9
 21218                           wreg	equ	0xFE8
 21219                           indf1	equ	0xFE7
 21220                           postinc1	equ	0xFE6
 21221                           postdec1	equ	0xFE5
 21222                           fsr1h	equ	0xFE2
 21223                           fsr1l	equ	0xFE1
 21224                           indf2	equ	0xFDF
 21225                           postinc2	equ	0xFDE
 21226                           postdec2	equ	0xFDD
 21227                           plusw2	equ	0xFDB
 21228                           fsr2h	equ	0xFDA
 21229                           fsr2l	equ	0xFD9
 21230                           status	equ	0xFD8
 21231                           
 21232 ;; *************** function _getVSCPFrame *****************
 21233 ;; Defined at:
 21234 ;;		line 2933 in file "main.c"
 21235 ;; Parameters:    Size  Location     Type
 21236 ;;  pvscpclass      2   18[BANK0 ] PTR unsigned short 
 21237 ;;		 -> vscpClass(2), 
 21238 ;;  pvscptype       2   20[BANK0 ] PTR unsigned char 
 21239 ;;		 -> vscpType(1), 
 21240 ;;  pNodeId         2   22[BANK0 ] PTR unsigned char 
 21241 ;;		 -> vscpNodeId(1), 
 21242 ;;  pPriority       2   24[BANK0 ] PTR unsigned char 
 21243 ;;		 -> vscpPriority(1), 
 21244 ;;  pSize           2   26[BANK0 ] PTR unsigned char 
 21245 ;;		 -> vscpSize(1), 
 21246 ;;  pData           2   28[BANK0 ] PTR unsigned char 
 21247 ;;		 -> vscpData(8), 
 21248 ;; Auto vars:     Size  Location     Type
 21249 ;;  id              4   34[BANK0 ] unsigned long 
 21250 ;; Return value:  Size  Location     Type
 21251 ;;                  1    wreg      unsigned char 
 21252 ;; Registers used:
 21253 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21254 ;; Tracked objects:
 21255 ;;		On entry : F/0
 21256 ;;		On exit  : F/0
 21257 ;;		Unchanged: 0/0
 21258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21259 ;;      Params:         0      12       0       0       0       0       0
 21260 ;;      Locals:         0       4       0       0       0       0       0
 21261 ;;      Temps:          0       4       0       0       0       0       0
 21262 ;;      Totals:         0      20       0       0       0       0       0
 21263 ;;Total ram usage:       20 bytes
 21264 ;; Hardware stack levels used:    1
 21265 ;; Hardware stack levels required when called:    5
 21266 ;; This function calls:
 21267 ;;		_getCANFrame
 21268 ;; This function is called by:
 21269 ;;		_receivePrintEventVerbose
 21270 ;;		_readRegister
 21271 ;;		_readRegisterExtended
 21272 ;;		_writeRegisterExtended
 21273 ;; This function uses a non-reentrant model
 21274 ;;
 21275                           
 21276                           	psect	text53
 21277  004B30                     __ptext53:
 21278                           	opt stack 0
 21279  004B30                     _getVSCPFrame:
 21280                           	opt stack 22
 21281                           
 21282                           ; BSR set to: 0
 21283                           ;main.c: 2934: uint32_t id;
 21284                           ;main.c: 2936: if (!getCANFrame(&id, pSize, pData)) {
 21285                           
 21286                           ;incstack = 0
 21287                           ;incstack = 0
 21288  004B30  C07A  F06D         	movff	getVSCPFrame@pSize,?_getCANFrame
 21289  004B34  C07B  F06E         	movff	getVSCPFrame@pSize+1,?_getCANFrame+1
 21290  004B38  C07C  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+2
 21291  004B3C  C07D  F070         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 21292  004B40  0E82               	movlw	getVSCPFrame@id& (0+255)
 21293  004B42  EC57  F026         	call	_getCANFrame
 21294  004B46  0900               	iorlw	0
 21295  004B48  E102               	bnz	l12544
 21296                           
 21297                           ; BSR set to: 0
 21298                           ;main.c: 2937: return 0;
 21299  004B4A  0E00               	movlw	0
 21300  004B4C  D033               	goto	l1256
 21301  004B4E                     l12544:
 21302                           
 21303                           ; BSR set to: 0
 21304                           ;main.c: 2938: }
 21305                           ;main.c: 2940: *pNodeId = id & 0x0ff;
 21306  004B4E  C076  FFD9         	movff	getVSCPFrame@pNodeId,fsr2l
 21307  004B52  C077  FFDA         	movff	getVSCPFrame@pNodeId+1,fsr2h
 21308  004B56  C082  FFDF         	movff	getVSCPFrame@id,indf2
 21309                           
 21310                           ;main.c: 2941: *pvscptype = (id >> 8) & 0xff;
 21311  004B5A  C074  FFD9         	movff	getVSCPFrame@pvscptype,fsr2l
 21312  004B5E  C075  FFDA         	movff	getVSCPFrame@pvscptype+1,fsr2h
 21313  004B62  C083  FFDF         	movff	getVSCPFrame@id+1,indf2
 21314                           
 21315                           ; BSR set to: 0
 21316                           ;main.c: 2942: *pvscpclass = (id >> 16) & 0x1ff;
 21317  004B66  0100               	movlb	0	; () banked
 21318  004B68  5184               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21319  004B6A  6F7E               	movwf	??_getVSCPFrame& (0+255),b
 21320  004B6C  0E01               	movlw	1
 21321  004B6E  1585               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21322  004B70  6F7F               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21323  004B72  C072  FFD9         	movff	getVSCPFrame@pvscpclass,fsr2l
 21324  004B76  C073  FFDA         	movff	getVSCPFrame@pvscpclass+1,fsr2h
 21325  004B7A  C07E  FFDE         	movff	??_getVSCPFrame,postinc2
 21326  004B7E  C07F  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21327                           
 21328                           ; BSR set to: 0
 21329                           ;main.c: 2943: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21330  004B82  C082  F07E         	movff	getVSCPFrame@id,??_getVSCPFrame
 21331  004B86  C083  F07F         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21332  004B8A  C084  F080         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21333  004B8E  C085  F081         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21334  004B92  0E1B               	movlw	27
 21335  004B94  D005               	goto	u16270
 21336  004B96                     u16275:
 21337  004B96  90D8               	bcf	status,0,c
 21338  004B98  3381               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21339  004B9A  3380               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21340  004B9C  337F               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21341  004B9E  337E               	rrcf	??_getVSCPFrame& (0+255),f,b
 21342  004BA0                     u16270:
 21343  004BA0  2EE8               	decfsz	wreg,f,c
 21344  004BA2  D7F9               	goto	u16275
 21345  004BA4  517E               	movf	??_getVSCPFrame& (0+255),w,b
 21346  004BA6  0B07               	andlw	7
 21347  004BA8  C078  FFD9         	movff	getVSCPFrame@pPriority,fsr2l
 21348  004BAC  C079  FFDA         	movff	getVSCPFrame@pPriority+1,fsr2h
 21349  004BB0  6EDF               	movwf	indf2,c
 21350                           
 21351                           ; BSR set to: 0
 21352                           ;main.c: 2945: return 1;
 21353  004BB2  0E01               	movlw	1
 21354  004BB4                     l1256:
 21355                           
 21356                           ; BSR set to: 0
 21357  004BB4  0012               	return	
 21358  004BB6                     __end_of_getVSCPFrame:
 21359                           	opt stack 0
 21360                           tblptru	equ	0xFF8
 21361                           tblptrh	equ	0xFF7
 21362                           tblptrl	equ	0xFF6
 21363                           tablat	equ	0xFF5
 21364                           prodh	equ	0xFF4
 21365                           prodl	equ	0xFF3
 21366                           intcon	equ	0xFF2
 21367                           indf0	equ	0xFEF
 21368                           postinc0	equ	0xFEE
 21369                           fsr0h	equ	0xFEA
 21370                           fsr0l	equ	0xFE9
 21371                           wreg	equ	0xFE8
 21372                           indf1	equ	0xFE7
 21373                           postinc1	equ	0xFE6
 21374                           postdec1	equ	0xFE5
 21375                           fsr1h	equ	0xFE2
 21376                           fsr1l	equ	0xFE1
 21377                           indf2	equ	0xFDF
 21378                           postinc2	equ	0xFDE
 21379                           postdec2	equ	0xFDD
 21380                           plusw2	equ	0xFDB
 21381                           fsr2h	equ	0xFDA
 21382                           fsr2l	equ	0xFD9
 21383                           status	equ	0xFD8
 21384                           
 21385 ;; *************** function _getCANFrame *****************
 21386 ;; Defined at:
 21387 ;;		line 2969 in file "main.c"
 21388 ;; Parameters:    Size  Location     Type
 21389 ;;  pid             1    wreg     PTR unsigned long 
 21390 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21391 ;;  pdlc            2   13[BANK0 ] PTR unsigned char 
 21392 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21393 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 21394 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21395 ;; Auto vars:     Size  Location     Type
 21396 ;;  pid             1   17[BANK0 ] PTR unsigned long 
 21397 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21398 ;; Return value:  Size  Location     Type
 21399 ;;                  1    wreg      unsigned char 
 21400 ;; Registers used:
 21401 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21402 ;; Tracked objects:
 21403 ;;		On entry : F/0
 21404 ;;		On exit  : F/0
 21405 ;;		Unchanged: 0/0
 21406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21407 ;;      Params:         0       4       0       0       0       0       0
 21408 ;;      Locals:         0       1       0       0       0       0       0
 21409 ;;      Temps:          0       0       0       0       0       0       0
 21410 ;;      Totals:         0       5       0       0       0       0       0
 21411 ;;Total ram usage:        5 bytes
 21412 ;; Hardware stack levels used:    1
 21413 ;; Hardware stack levels required when called:    4
 21414 ;; This function calls:
 21415 ;;		_fifo_read
 21416 ;; This function is called by:
 21417 ;;		_receiveSendEventCANAL
 21418 ;;		_receiveSendMultiEventCANAL
 21419 ;;		_receiveSendEventSLCAN
 21420 ;;		_getVSCPFrame
 21421 ;; This function uses a non-reentrant model
 21422 ;;
 21423                           
 21424                           	psect	text54
 21425  004CAE                     __ptext54:
 21426                           	opt stack 0
 21427  004CAE                     _getCANFrame:
 21428                           	opt stack 24
 21429                           
 21430                           ; BSR set to: 0
 21431                           ;incstack = 0
 21432                           ;incstack = 0
 21433                           ;getCANFrame@pid stored from wreg
 21434  004CAE  CFE8 F071          	movff	wreg,getCANFrame@pid
 21435                           
 21436                           ; BSR set to: 0
 21437                           ;main.c: 2990: if ( canrxcount ) {
 21438  004CB2  51F0               	movf	_canrxcount& (0+255),w,b	;volatile
 21439  004CB4  E00F               	bz	l12562
 21440                           
 21441                           ; BSR set to: 0
 21442                           ;main.c: 2992: (INTCONbits.GIE = 0);
 21443  004CB6  9EF2               	bcf	intcon,7,c	;volatile
 21444                           
 21445                           ; BSR set to: 0
 21446                           ;main.c: 2995: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21447  004CB8  C071  F060         	movff	getCANFrame@pid,?_fifo_read
 21448  004CBC  6B61               	clrf	(?_fifo_read+1)& (0+255),b
 21449  004CBE  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21450  004CC0  0E04               	movlw	4
 21451  004CC2  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21452  004CC4  0E40               	movlw	_canInputFifo& (0+255)
 21453  004CC6  EC6F  F021         	call	_fifo_read
 21454  004CCA  5160               	movf	?_fifo_read& (0+255),w,b
 21455  004CCC  0A04               	xorlw	4
 21456  004CCE  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21457  004CD0  E003               	bz	l12566
 21458  004CD2                     l12560:
 21459                           
 21460                           ; BSR set to: 0
 21461                           ;main.c: 2996: (INTCONbits.GIE = 1);
 21462  004CD2  8EF2               	bsf	intcon,7,c	;volatile
 21463  004CD4                     l12562:
 21464                           
 21465                           ; BSR set to: 0
 21466                           ;main.c: 2997: return 0;
 21467  004CD4  0E00               	movlw	0
 21468  004CD6  D026               	goto	l1265
 21469  004CD8                     l12566:
 21470                           
 21471                           ; BSR set to: 0
 21472                           ;main.c: 2998: }
 21473                           ;main.c: 3001: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21474  004CD8  C06D  F060         	movff	getCANFrame@pdlc,?_fifo_read
 21475  004CDC  C06E  F061         	movff	getCANFrame@pdlc+1,?_fifo_read+1
 21476  004CE0  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21477  004CE2  0E01               	movlw	1
 21478  004CE4  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21479  004CE6  0E40               	movlw	_canInputFifo& (0+255)
 21480  004CE8  EC6F  F021         	call	_fifo_read
 21481  004CEC  0560               	decf	?_fifo_read& (0+255),w,b
 21482  004CEE  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21483  004CF0  E1F0               	bnz	l12560
 21484                           
 21485                           ; BSR set to: 0
 21486                           ;main.c: 3004: }
 21487                           ;main.c: 3007: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21488  004CF2  C06F  F060         	movff	getCANFrame@pdata,?_fifo_read
 21489  004CF6  C070  F061         	movff	getCANFrame@pdata+1,?_fifo_read+1
 21490  004CFA  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21491  004CFE  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21492  004D02  50DF               	movf	indf2,w,c
 21493  004D04  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 21494  004D06  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21495  004D08  0E40               	movlw	_canInputFifo& (0+255)
 21496  004D0A  EC6F  F021         	call	_fifo_read
 21497  004D0E  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 21498  004D12  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 21499  004D16  50DF               	movf	indf2,w,c
 21500  004D18  1960               	xorwf	?_fifo_read& (0+255),w,b
 21501  004D1A  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21502  004D1C  E1DA               	bnz	l12560
 21503                           
 21504                           ; BSR set to: 0
 21505                           ;main.c: 3010: }
 21506                           ;main.c: 3012: canrxcount--;
 21507  004D1E  07F0               	decf	_canrxcount& (0+255),f,b	;volatile
 21508                           
 21509                           ; BSR set to: 0
 21510                           ;main.c: 3014: (INTCONbits.GIE = 1);
 21511  004D20  8EF2               	bsf	intcon,7,c	;volatile
 21512                           
 21513                           ; BSR set to: 0
 21514                           ;main.c: 3016: return 1;
 21515  004D22  0E01               	movlw	1
 21516  004D24                     l1265:
 21517                           
 21518                           ; BSR set to: 0
 21519  004D24  0012               	return	
 21520  004D26                     __end_of_getCANFrame:
 21521                           	opt stack 0
 21522                           tblptru	equ	0xFF8
 21523                           tblptrh	equ	0xFF7
 21524                           tblptrl	equ	0xFF6
 21525                           tablat	equ	0xFF5
 21526                           prodh	equ	0xFF4
 21527                           prodl	equ	0xFF3
 21528                           intcon	equ	0xFF2
 21529                           indf0	equ	0xFEF
 21530                           postinc0	equ	0xFEE
 21531                           fsr0h	equ	0xFEA
 21532                           fsr0l	equ	0xFE9
 21533                           wreg	equ	0xFE8
 21534                           indf1	equ	0xFE7
 21535                           postinc1	equ	0xFE6
 21536                           postdec1	equ	0xFE5
 21537                           fsr1h	equ	0xFE2
 21538                           fsr1l	equ	0xFE1
 21539                           indf2	equ	0xFDF
 21540                           postinc2	equ	0xFDE
 21541                           postdec2	equ	0xFDD
 21542                           plusw2	equ	0xFDB
 21543                           fsr2h	equ	0xFDA
 21544                           fsr2l	equ	0xFD9
 21545                           status	equ	0xFD8
 21546                           
 21547 ;; *************** function _fifo_read *****************
 21548 ;; Defined at:
 21549 ;;		line 29 in file "fifo.c"
 21550 ;; Parameters:    Size  Location     Type
 21551 ;;  f               1    wreg     PTR struct .
 21552 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21553 ;;  buf             2    0[BANK0 ] PTR void 
 21554 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21555 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21556 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21557 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21558 ;;  nbytes          2    2[BANK0 ] unsigned short 
 21559 ;; Auto vars:     Size  Location     Type
 21560 ;;  f               1   12[BANK0 ] PTR struct .
 21561 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21562 ;;  i               2   10[BANK0 ] unsigned short 
 21563 ;;  p               2    8[BANK0 ] PTR unsigned char 
 21564 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21565 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21566 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21567 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21568 ;; Return value:  Size  Location     Type
 21569 ;;                  2    0[BANK0 ] unsigned short 
 21570 ;; Registers used:
 21571 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21572 ;; Tracked objects:
 21573 ;;		On entry : F/0
 21574 ;;		On exit  : F/0
 21575 ;;		Unchanged: 0/0
 21576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21577 ;;      Params:         0       4       0       0       0       0       0
 21578 ;;      Locals:         0       5       0       0       0       0       0
 21579 ;;      Temps:          0       4       0       0       0       0       0
 21580 ;;      Totals:         0      13       0       0       0       0       0
 21581 ;;Total ram usage:       13 bytes
 21582 ;; Hardware stack levels used:    1
 21583 ;; Hardware stack levels required when called:    3
 21584 ;; This function calls:
 21585 ;;		Nothing
 21586 ;; This function is called by:
 21587 ;;		_main
 21588 ;;		_doModeVerbose
 21589 ;;		_doModeVscp
 21590 ;;		_doModeSLCAN
 21591 ;;		_getCANFrame
 21592 ;; This function uses a non-reentrant model
 21593 ;;
 21594                           
 21595                           	psect	text55
 21596  0042DE                     __ptext55:
 21597                           	opt stack 0
 21598  0042DE                     _fifo_read:
 21599                           	opt stack 24
 21600                           
 21601                           ; BSR set to: 0
 21602                           ;incstack = 0
 21603                           ;incstack = 0
 21604                           ;fifo_read@f stored from wreg
 21605  0042DE  CFE8 F06C          	movff	wreg,fifo_read@f
 21606                           
 21607                           ; BSR set to: 0
 21608                           ;fifo.c: 30: uint16_t i;
 21609                           ;fifo.c: 31: uint8_t *p;
 21610                           ;fifo.c: 32: p = buf;
 21611  0042E2  C060  F068         	movff	fifo_read@buf,fifo_read@p
 21612  0042E6  C061  F069         	movff	fifo_read@buf+1,fifo_read@p+1
 21613                           
 21614                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21615  0042EA  6B6A               	clrf	fifo_read@i& (0+255),b
 21616  0042EC  6B6B               	clrf	(fifo_read@i+1)& (0+255),b
 21617  0042EE  D03E               	goto	l10014
 21618  0042F0                     l10000:
 21619                           
 21620                           ; BSR set to: 0
 21621                           ;fifo.c: 36: if (f->tail != f->head) {
 21622  0042F0  516C               	movf	fifo_read@f& (0+255),w,b
 21623  0042F2  6ED9               	movwf	fsr2l,c
 21624  0042F4  6ADA               	clrf	fsr2h,c
 21625  0042F6  0E02               	movlw	2
 21626  0042F8  D843               	call	PL34	;call to abstracted procedure
 21627  0042FA  B4D8               	btfsc	status,2,c
 21628  0042FC  18E7               	xorwf	indf1,w,c
 21629  0042FE  E02F               	bz	l1515
 21630                           
 21631                           ; BSR set to: 0
 21632                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21633  004300  D84E               	call	PL104	;call to abstracted procedure
 21634  004302  CFDE F064          	movff	postinc2,??_fifo_read
 21635  004306  CFDD F065          	movff	postdec2,??_fifo_read+1
 21636  00430A  516C               	movf	fifo_read@f& (0+255),w,b
 21637  00430C  6ED9               	movwf	fsr2l,c
 21638  00430E  6ADA               	clrf	fsr2h,c
 21639  004310  CFDE F066          	movff	postinc2,??_fifo_read+2
 21640  004314  CFDD F067          	movff	postdec2,??_fifo_read+3
 21641  004318  5164               	movf	??_fifo_read& (0+255),w,b
 21642  00431A  2566               	addwf	(??_fifo_read+2)& (0+255),w,b
 21643  00431C  6ED9               	movwf	fsr2l,c
 21644  00431E  5165               	movf	(??_fifo_read+1)& (0+255),w,b
 21645  004320  2167               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21646  004322  6EDA               	movwf	fsr2h,c
 21647  004324  C068  FFE1         	movff	fifo_read@p,fsr1l
 21648  004328  C069  FFE2         	movff	fifo_read@p+1,fsr1h
 21649  00432C  CFDF FFE7          	movff	indf2,indf1
 21650                           
 21651                           ; BSR set to: 0
 21652  004330  4B68               	infsnz	fifo_read@p& (0+255),f,b
 21653  004332  2B69               	incf	(fifo_read@p+1)& (0+255),f,b
 21654                           
 21655                           ; BSR set to: 0
 21656                           ;fifo.c: 38: f->tail++;
 21657  004334  516C               	movf	fifo_read@f& (0+255),w,b
 21658  004336  6ED9               	movwf	fsr2l,c
 21659  004338  6ADA               	clrf	fsr2h,c
 21660  00433A  0E04               	movlw	4
 21661  00433C  26D9               	addwf	fsr2l,f,c
 21662  00433E  6ADA               	clrf	fsr2h,c
 21663  004340  2ADE               	incf	postinc2,f,c
 21664  004342  0E00               	movlw	0
 21665  004344  22DD               	addwfc	postdec2,f,c
 21666                           
 21667                           ; BSR set to: 0
 21668                           ;fifo.c: 39: if (f->tail == f->size) {
 21669  004346  516C               	movf	fifo_read@f& (0+255),w,b
 21670  004348  6ED9               	movwf	fsr2l,c
 21671  00434A  6ADA               	clrf	fsr2h,c
 21672  00434C  0E06               	movlw	6
 21673  00434E  D818               	call	PL34	;call to abstracted procedure
 21674  004350  B4D8               	btfsc	status,2,c
 21675  004352  18E7               	xorwf	indf1,w,c
 21676  004354  E109               	bnz	l10012
 21677                           
 21678                           ; BSR set to: 0
 21679                           ;fifo.c: 40: f->tail = 0;
 21680  004356  D823               	call	PL104	;call to abstracted procedure
 21681  004358  6ADE               	clrf	postinc2,c
 21682  00435A  6ADD               	clrf	postdec2,c
 21683  00435C  D005               	goto	l10012
 21684  00435E                     l1515:
 21685                           
 21686                           ; BSR set to: 0
 21687                           ;fifo.c: 43: else {
 21688                           ;fifo.c: 44: return i;
 21689  00435E  C06A  F060         	movff	fifo_read@i,?_fifo_read
 21690  004362  C06B  F061         	movff	fifo_read@i+1,?_fifo_read+1
 21691  004366  D00B               	goto	l1518
 21692  004368                     l10012:
 21693                           
 21694                           ; BSR set to: 0
 21695  004368  4B6A               	infsnz	fifo_read@i& (0+255),f,b
 21696  00436A  2B6B               	incf	(fifo_read@i+1)& (0+255),f,b
 21697  00436C                     l10014:
 21698                           
 21699                           ; BSR set to: 0
 21700  00436C  5162               	movf	fifo_read@nbytes& (0+255),w,b
 21701  00436E  5D6A               	subwf	fifo_read@i& (0+255),w,b
 21702  004370  5163               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 21703  004372  596B               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21704  004374  E3BD               	bnc	l10000
 21705                           
 21706                           ; BSR set to: 0
 21707                           ;fifo.c: 45: }
 21708                           ;fifo.c: 47: }
 21709                           ;fifo.c: 49: return nbytes;
 21710  004376  C062  F060         	movff	fifo_read@nbytes,?_fifo_read
 21711  00437A  C063  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21712  00437E                     l1518:
 21713                           
 21714                           ; BSR set to: 0
 21715  00437E  0012               	return	
 21716  004380                     __end_of_fifo_read:
 21717                           	opt stack 0
 21718  004380                     PL34:
 21719                           	opt stack 24
 21720  004380  26D9               	addwf	fsr2l,f,c
 21721  004382  6ADA               	clrf	fsr2h,c
 21722  004384  516C               	movf	fifo_read@f& (0+255),w,b
 21723  004386  6EE1               	movwf	fsr1l,c
 21724  004388  6AE2               	clrf	fsr1h,c
 21725  00438A  0E04               	movlw	4
 21726  00438C  26E1               	addwf	fsr1l,f,c
 21727  00438E  6AE2               	clrf	fsr1h,c
 21728  004390  52E6               	movf	postinc1,f,c
 21729  004392  52DE               	movf	postinc2,f,c
 21730  004394  50DD               	movf	postdec2,w,c
 21731  004396  18E5               	xorwf	postdec1,w,c
 21732  004398  CFDF FFE8          	movff	indf2,wreg
 21733  00439C  0012               	return	
 21734  00439E                     __end_ofPL34:
 21735                           	opt stack 0
 21736  00439E                     PL104:
 21737                           	opt stack 24
 21738  00439E  516C               	movf	fifo_read@f& (0+255),w,b
 21739  0043A0  6ED9               	movwf	fsr2l,c
 21740  0043A2  6ADA               	clrf	fsr2h,c
 21741  0043A4  0E04               	movlw	4
 21742  0043A6  26D9               	addwf	fsr2l,f,c
 21743  0043A8  6ADA               	clrf	fsr2h,c
 21744  0043AA  0012               	return	
 21745  0043AC                     __end_ofPL104:
 21746                           	opt stack 0
 21747                           tblptru	equ	0xFF8
 21748                           tblptrh	equ	0xFF7
 21749                           tblptrl	equ	0xFF6
 21750                           tablat	equ	0xFF5
 21751                           prodh	equ	0xFF4
 21752                           prodl	equ	0xFF3
 21753                           intcon	equ	0xFF2
 21754                           indf0	equ	0xFEF
 21755                           postinc0	equ	0xFEE
 21756                           fsr0h	equ	0xFEA
 21757                           fsr0l	equ	0xFE9
 21758                           wreg	equ	0xFE8
 21759                           indf1	equ	0xFE7
 21760                           postinc1	equ	0xFE6
 21761                           postdec1	equ	0xFE5
 21762                           fsr1h	equ	0xFE2
 21763                           fsr1l	equ	0xFE1
 21764                           indf2	equ	0xFDF
 21765                           postinc2	equ	0xFDE
 21766                           postdec2	equ	0xFDD
 21767                           plusw2	equ	0xFDB
 21768                           fsr2h	equ	0xFDA
 21769                           fsr2l	equ	0xFD9
 21770                           status	equ	0xFD8
 21771                           
 21772 ;; *************** function _sprintf *****************
 21773 ;; Defined at:
 21774 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21775 ;; Parameters:    Size  Location     Type
 21776 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 21777 ;;		 -> wrkbuf(80), 
 21778 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 21779 ;;		 -> STR_194(3), STR_193(7), STR_187(3), STR_186(7), 
 21780 ;;		 -> STR_183(4), STR_182(8), STR_179(4), STR_178(8), 
 21781 ;;		 -> STR_175(4), STR_174(8), STR_171(4), STR_170(8), 
 21782 ;;		 -> STR_167(4), STR_166(7), STR_163(4), STR_162(7), 
 21783 ;;		 -> STR_159(4), STR_158(7), STR_155(4), STR_154(7), 
 21784 ;;		 -> STR_149(3), STR_148(7), STR_146(3), STR_145(7), 
 21785 ;;		 -> STR_143(3), STR_142(7), STR_140(3), STR_139(7), 
 21786 ;;		 -> STR_137(3), STR_136(7), STR_134(3), STR_133(7), 
 21787 ;;		 -> STR_81(3), STR_80(7), STR_65(3), STR_64(7), 
 21788 ;;		 -> STR_63(3), STR_62(7), STR_59(3), STR_58(7), 
 21789 ;;		 -> STR_56(3), STR_55(7), STR_54(3), STR_53(7), 
 21790 ;; Auto vars:     Size  Location     Type
 21791 ;;  idx             1   33[BANK0 ] unsigned char 
 21792 ;;  _val            4   45[BANK0 ] struct .
 21793 ;;  flag            2   50[BANK0 ] unsigned short 
 21794 ;;  width           2   43[BANK0 ] int 
 21795 ;;  prec            2   41[BANK0 ] int 
 21796 ;;  c               1   49[BANK0 ] char 
 21797 ;;  ap              1   40[BANK0 ] PTR void [1]
 21798 ;;		 -> ?_sprintf(2), 
 21799 ;; Return value:  Size  Location     Type
 21800 ;;                  2   22[BANK0 ] int 
 21801 ;; Registers used:
 21802 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21803 ;; Tracked objects:
 21804 ;;		On entry : F/0
 21805 ;;		On exit  : F/0
 21806 ;;		Unchanged: 0/0
 21807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21808 ;;      Params:         0       8       0       0       0       0       0
 21809 ;;      Locals:         0      19       0       0       0       0       0
 21810 ;;      Temps:          0       3       0       0       0       0       0
 21811 ;;      Totals:         0      30       0       0       0       0       0
 21812 ;;Total ram usage:       30 bytes
 21813 ;; Hardware stack levels used:    1
 21814 ;; Hardware stack levels required when called:    4
 21815 ;; This function calls:
 21816 ;;		_isdigit
 21817 ;;		___lldiv
 21818 ;;		___llmod
 21819 ;;		___wmul
 21820 ;; This function is called by:
 21821 ;;		_doModeVerbose
 21822 ;;		_receivePrintEventVerbose
 21823 ;;		_printStatistics
 21824 ;;		_printErrors
 21825 ;; This function uses a non-reentrant model
 21826 ;;
 21827                           
 21828                           	psect	text56
 21829  00160E                     __ptext56:
 21830                           	opt stack 0
 21831  00160E                     _sprintf:
 21832                           	opt stack 25
 21833                           
 21834                           ; BSR set to: 0
 21835                           ;doprnt.c: 494: va_list ap;
 21836                           ;doprnt.c: 499: signed char c;
 21837                           ;doprnt.c: 501: int width;
 21838                           ;doprnt.c: 504: int prec;
 21839                           ;doprnt.c: 508: unsigned short flag;
 21840                           ;doprnt.c: 527: union {
 21841                           ;doprnt.c: 528: unsigned long _val;
 21842                           ;doprnt.c: 529: struct {
 21843                           ;doprnt.c: 530: const char * _cp;
 21844                           ;doprnt.c: 531: unsigned _len;
 21845                           ;doprnt.c: 532: } _str;
 21846                           ;doprnt.c: 533: } _val;
 21847                           ;doprnt.c: 542: *ap = __va_start();
 21848                           
 21849                           ; BSR set to: 0
 21850                           ;incstack = 0
 21851                           ;incstack = 0
 21852  00160E  0E7A               	movlw	low (?_sprintf+4)
 21853  001610  6F88               	movwf	sprintf@ap& (0+255),b
 21854                           
 21855                           ;doprnt.c: 545: while(c = *f++) {
 21856  001612  D32C               	goto	l11886
 21857  001614                     l11552:
 21858                           
 21859                           ; BSR set to: 0
 21860                           ;doprnt.c: 547: if(c != '%')
 21861  001614  5191               	movf	sprintf@c& (0+255),w,b
 21862  001616  0A25               	xorlw	37
 21863  001618  E009               	bz	l1623
 21864                           
 21865                           ; BSR set to: 0
 21866                           ;doprnt.c: 549: {
 21867                           ;doprnt.c: 550: ((*sp++ = (c)));
 21868  00161A  C076  FFD9         	movff	sprintf@sp,fsr2l
 21869  00161E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21870  001622  C091  FFDF         	movff	sprintf@c,indf2
 21871                           
 21872                           ; BSR set to: 0
 21873  001626  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21874  001628  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21875                           
 21876                           ;doprnt.c: 551: continue;
 21877  00162A  D320               	goto	l11886
 21878  00162C                     l1623:
 21879                           
 21880                           ; BSR set to: 0
 21881                           ;doprnt.c: 552: }
 21882                           ;doprnt.c: 555: width = 0;
 21883  00162C  6B8B               	clrf	sprintf@width& (0+255),b
 21884  00162E  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21885                           
 21886                           ;doprnt.c: 557: flag = 0;
 21887  001630  6B92               	clrf	sprintf@flag& (0+255),b
 21888  001632  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 21889  001634  D009               	goto	l11568
 21890  001636                     l11558:
 21891                           
 21892                           ; BSR set to: 0
 21893                           ;doprnt.c: 563: flag |= 0x08;
 21894  001636  8792               	bsf	sprintf@flag& (0+255),3,b
 21895  001638  D005               	goto	L33
 21896  00163A                     l11560:
 21897                           
 21898                           ; BSR set to: 0
 21899                           ;doprnt.c: 570: flag |= 0x01;
 21900  00163A  8192               	bsf	sprintf@flag& (0+255),0,b
 21901  00163C  D003               	goto	L33
 21902  00163E                     l11562:
 21903                           
 21904                           ; BSR set to: 0
 21905                           ;doprnt.c: 583: flag |= 0x800;
 21906  00163E  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 21907  001640  D001               	goto	L33
 21908  001642                     l11564:
 21909                           
 21910                           ; BSR set to: 0
 21911                           ;doprnt.c: 589: flag |= 0x04;
 21912  001642  8592               	bsf	sprintf@flag& (0+255),2,b
 21913  001644                     L33:
 21914                           
 21915                           ;doprnt.c: 590: f++;
 21916  001644  4B78               	infsnz	sprintf@f& (0+255),f,b
 21917  001646  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21918  001648                     l11568:
 21919                           
 21920                           ; BSR set to: 0
 21921  001648  C078  FFF6         	movff	sprintf@f,tblptrl
 21922  00164C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21923  001650  0008               	tblrd		*
 21924  001652  50F5               	movf	tablat,w,c
 21925                           
 21926                           ; Switch size 1, requested type "space"
 21927                           ; Number of cases is 4, Range of values is 32 to 48
 21928                           ; switch strategies available:
 21929                           ; Name         Instructions Cycles
 21930                           ; simple_byte           13     7 (average)
 21931                           ;	Chosen strategy is simple_byte
 21932  001654  0A20               	xorlw	32	; case 32
 21933  001656  E0F1               	bz	l11560
 21934  001658  0A03               	xorlw	3	; case 35
 21935  00165A  E0F1               	bz	l11562
 21936  00165C  0A0E               	xorlw	14	; case 45
 21937  00165E  E0EB               	bz	l11558
 21938  001660  0A1D               	xorlw	29	; case 48
 21939  001662  E0EF               	bz	l11564
 21940                           
 21941                           ; BSR set to: 0
 21942                           ;doprnt.c: 602: if(flag & 0x08)
 21943  001664  B792               	btfsc	sprintf@flag& (0+255),3,b
 21944                           
 21945                           ; BSR set to: 0
 21946                           ;doprnt.c: 603: flag &= ~0x04;
 21947  001666  9592               	bcf	sprintf@flag& (0+255),2,b
 21948                           
 21949                           ; BSR set to: 0
 21950                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 21951  001668  C078  FFF6         	movff	sprintf@f,tblptrl
 21952  00166C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21953  001670  0008               	tblrd		*
 21954  001672  50F5               	movf	tablat,w,c
 21955  001674  EC52  F02B         	call	_isdigit
 21956  001678  E325               	bnc	l11584
 21957                           
 21958                           ; BSR set to: 0
 21959                           ;doprnt.c: 607: width = 0;
 21960  00167A  6B8B               	clrf	sprintf@width& (0+255),b
 21961  00167C  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21962  00167E                     l11576:
 21963                           
 21964                           ; BSR set to: 0
 21965                           ;doprnt.c: 609: width *= 10;
 21966  00167E  C08B  F060         	movff	sprintf@width,?___wmul
 21967  001682  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 21968  001686  6B63               	clrf	(?___wmul+3)& (0+255),b
 21969  001688  0E0A               	movlw	10
 21970  00168A  6F62               	movwf	(?___wmul+2)& (0+255),b
 21971  00168C  ECE0  F02A         	call	___wmul	;wreg free
 21972  001690  C060  F08B         	movff	?___wmul,sprintf@width
 21973  001694  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 21974                           
 21975                           ; BSR set to: 0
 21976                           ;doprnt.c: 610: width += *f++ - '0';
 21977  001698  C078  FFF6         	movff	sprintf@f,tblptrl
 21978  00169C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21979  0016A0  0008               	tblrd		*
 21980  0016A2  CFF5 F07E          	movff	tablat,??_sprintf
 21981  0016A6  0ED0               	movlw	208
 21982  0016A8  257E               	addwf	??_sprintf& (0+255),w,b
 21983  0016AA  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 21984  0016AC  6B80               	clrf	(??_sprintf+2)& (0+255),b
 21985  0016AE  0EFF               	movlw	255
 21986  0016B0  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 21987  0016B2  517F               	movf	(??_sprintf+1)& (0+255),w,b
 21988  0016B4  278B               	addwf	sprintf@width& (0+255),f,b
 21989  0016B6  5180               	movf	(??_sprintf+2)& (0+255),w,b
 21990  0016B8  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 21991                           
 21992                           ; BSR set to: 0
 21993                           
 21994                           ; BSR set to: 0
 21995                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 21996  0016BA  DB36               	call	PL82	;call to abstracted procedure
 21997  0016BC  EC52  F02B         	call	_isdigit
 21998  0016C0  E314               	bnc	l11592
 21999  0016C2  D7DD               	goto	l11576
 22000  0016C4                     l11584:
 22001                           
 22002                           ; BSR set to: 0
 22003  0016C4  C078  FFF6         	movff	sprintf@f,tblptrl
 22004  0016C8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22005  0016CC  0008               	tblrd		*
 22006  0016CE  50F5               	movf	tablat,w,c
 22007  0016D0  0A2A               	xorlw	42
 22008  0016D2  E10B               	bnz	l11592
 22009                           
 22010                           ; BSR set to: 0
 22011                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22012  0016D4  5188               	movf	sprintf@ap& (0+255),w,b
 22013  0016D6  6ED9               	movwf	fsr2l,c
 22014  0016D8  6ADA               	clrf	fsr2h,c
 22015  0016DA  CFDE F08B          	movff	postinc2,sprintf@width
 22016  0016DE  CFDD F08C          	movff	postdec2,sprintf@width+1
 22017                           
 22018                           ; BSR set to: 0
 22019  0016E2  0E02               	movlw	2
 22020  0016E4  2788               	addwf	sprintf@ap& (0+255),f,b
 22021                           
 22022                           ; BSR set to: 0
 22023                           ;doprnt.c: 615: f++;
 22024  0016E6  4B78               	infsnz	sprintf@f& (0+255),f,b
 22025  0016E8  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22026  0016EA                     l11592:
 22027                           
 22028                           ; BSR set to: 0
 22029                           ;doprnt.c: 617: }
 22030                           ;doprnt.c: 620: if(*f == '.') {
 22031  0016EA  C078  FFF6         	movff	sprintf@f,tblptrl
 22032  0016EE  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22033  0016F2  0008               	tblrd		*
 22034  0016F4  50F5               	movf	tablat,w,c
 22035  0016F6  0A2E               	xorlw	46
 22036  0016F8  E137               	bnz	l1639
 22037                           
 22038                           ; BSR set to: 0
 22039                           ;doprnt.c: 621: flag |= 0x4000;
 22040  0016FA  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22041                           
 22042                           ;doprnt.c: 622: f++;
 22043                           
 22044                           ; BSR set to: 0
 22045                           ;doprnt.c: 624: if(*f == '*') {
 22046  0016FC  DB15               	call	PL82	;call to abstracted procedure
 22047  0016FE  0A2A               	xorlw	42
 22048  001700  E10C               	bnz	l1640
 22049                           
 22050                           ; BSR set to: 0
 22051                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22052  001702  5188               	movf	sprintf@ap& (0+255),w,b
 22053  001704  6ED9               	movwf	fsr2l,c
 22054  001706  6ADA               	clrf	fsr2h,c
 22055  001708  CFDE F089          	movff	postinc2,sprintf@prec
 22056  00170C  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22057                           
 22058                           ; BSR set to: 0
 22059  001710  0E02               	movlw	2
 22060  001712  2788               	addwf	sprintf@ap& (0+255),f,b
 22061                           
 22062                           ; BSR set to: 0
 22063                           ;doprnt.c: 626: f++;
 22064  001714  4B78               	infsnz	sprintf@f& (0+255),f,b
 22065  001716  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22066                           
 22067                           ;doprnt.c: 627: } else
 22068  001718  D088               	goto	l11662
 22069  00171A                     l1640:
 22070                           
 22071                           ; BSR set to: 0
 22072                           ;doprnt.c: 629: {
 22073                           ;doprnt.c: 630: prec = 0;
 22074  00171A  6B89               	clrf	sprintf@prec& (0+255),b
 22075  00171C  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22076                           
 22077                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22078  00171E  D01A               	goto	l11608
 22079  001720                     l11604:
 22080                           
 22081                           ; BSR set to: 0
 22082                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22083  001720  C089  F060         	movff	sprintf@prec,?___wmul
 22084  001724  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22085  001728  6B63               	clrf	(?___wmul+3)& (0+255),b
 22086  00172A  0E0A               	movlw	10
 22087  00172C  6F62               	movwf	(?___wmul+2)& (0+255),b
 22088  00172E  ECE0  F02A         	call	___wmul	;wreg free
 22089  001732  C078  FFF6         	movff	sprintf@f,tblptrl
 22090  001736  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22091  00173A  0008               	tblrd		*
 22092  00173C  50F5               	movf	tablat,w,c
 22093  00173E  2760               	addwf	?___wmul& (0+255),f,b
 22094  001740  0E00               	movlw	0
 22095  001742  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22096  001744  0ED0               	movlw	208
 22097  001746  2560               	addwf	?___wmul& (0+255),w,b
 22098  001748  6F89               	movwf	sprintf@prec& (0+255),b
 22099  00174A  0EFF               	movlw	255
 22100  00174C  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22101  00174E  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22102                           
 22103                           ; BSR set to: 0
 22104  001750  4B78               	infsnz	sprintf@f& (0+255),f,b
 22105  001752  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22106  001754                     l11608:
 22107                           
 22108                           ; BSR set to: 0
 22109  001754  C078  FFF6         	movff	sprintf@f,tblptrl
 22110  001758  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22111  00175C  0008               	tblrd		*
 22112  00175E  50F5               	movf	tablat,w,c
 22113  001760  EC52  F02B         	call	_isdigit
 22114  001764  E362               	bnc	l11662
 22115  001766  D7DC               	goto	l11604
 22116  001768                     l1639:
 22117                           
 22118                           ; BSR set to: 0
 22119                           ;doprnt.c: 635: prec = 0;
 22120  001768  6B89               	clrf	sprintf@prec& (0+255),b
 22121  00176A  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22122  00176C  D05E               	goto	l11662
 22123  00176E                     l11610:
 22124                           
 22125                           ; BSR set to: 0
 22126                           ;doprnt.c: 652: flag |= 0x10;
 22127  00176E  8992               	bsf	sprintf@flag& (0+255),4,b
 22128                           
 22129                           ;doprnt.c: 653: goto loop;
 22130  001770  D05C               	goto	l11662
 22131  001772                     l11612:
 22132                           
 22133                           ; BSR set to: 0
 22134                           ;doprnt.c: 700: flag |= 0x40;
 22135  001772  8D92               	bsf	sprintf@flag& (0+255),6,b
 22136                           
 22137                           ;doprnt.c: 702: break;
 22138  001774  D06F               	goto	l11664
 22139  001776                     l11614:
 22140                           
 22141                           ; BSR set to: 0
 22142                           ;doprnt.c: 723: flag |= 0x20;
 22143  001776  8B92               	bsf	sprintf@flag& (0+255),5,b
 22144  001778                     l1656:
 22145                           
 22146                           ; BSR set to: 0
 22147                           ;doprnt.c: 730: flag |= 0x80;
 22148  001778  8F92               	bsf	sprintf@flag& (0+255),7,b
 22149                           
 22150                           ;doprnt.c: 732: break;
 22151  00177A  D06C               	goto	l11664
 22152  00177C                     l11616:
 22153                           
 22154                           ; BSR set to: 0
 22155                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22156  00177C  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22157  00177E  1189               	iorwf	sprintf@prec& (0+255),w,b
 22158  001780  E009               	bz	l11622
 22159                           
 22160                           ; BSR set to: 0
 22161  001782  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22162  001784  5D89               	subwf	sprintf@prec& (0+255),w,b
 22163  001786  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22164  001788  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22165  00178A  E204               	bc	l11622
 22166                           
 22167                           ; BSR set to: 0
 22168                           ;doprnt.c: 763: _val._str._len = prec;
 22169  00178C  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22170  001790  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22171  001794                     l11622:
 22172                           
 22173                           ; BSR set to: 0
 22174                           ;doprnt.c: 766: if(width > _val._str._len)
 22175  001794  518B               	movf	sprintf@width& (0+255),w,b
 22176  001796  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22177  001798  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22178  00179A  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22179  00179C  E207               	bc	l1659
 22180                           
 22181                           ; BSR set to: 0
 22182                           ;doprnt.c: 767: width -= _val._str._len;
 22183  00179E  EE20  F08E         	lfsr	2,sprintf@_val+1
 22184  0017A2  50DE               	movf	postinc2,w,c
 22185  0017A4  5F8B               	subwf	sprintf@width& (0+255),f,b
 22186  0017A6  50DD               	movf	postdec2,w,c
 22187  0017A8  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22188  0017AA  D002               	goto	l1660
 22189  0017AC                     l1659:
 22190                           
 22191                           ; BSR set to: 0
 22192                           ;doprnt.c: 768: else
 22193                           ;doprnt.c: 769: width = 0;
 22194  0017AC  6B8B               	clrf	sprintf@width& (0+255),b
 22195  0017AE  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22196  0017B0                     l1660:
 22197                           
 22198                           ; BSR set to: 0
 22199                           ;doprnt.c: 771: if(!(flag & 0x08))
 22200  0017B0  A792               	btfss	sprintf@flag& (0+255),3,b
 22201  0017B2  D004               	goto	l11632
 22202  0017B4  D015               	goto	l11640
 22203  0017B6                     l11628:
 22204                           
 22205                           ; BSR set to: 0
 22206                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22207  0017B6  DAB1               	call	PL64	;call to abstracted procedure
 22208                           
 22209                           ; BSR set to: 0
 22210  0017B8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22211  0017BA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22212  0017BC                     l11632:
 22213                           
 22214                           ; BSR set to: 0
 22215  0017BC  078B               	decf	sprintf@width& (0+255),f,b
 22216  0017BE  DAC2               	call	PL112	;call to abstracted procedure
 22217  0017C0  B4D8               	btfsc	status,2,c
 22218  0017C2  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22219  0017C4  E00D               	bz	l11640
 22220  0017C6  D7F7               	goto	l11628
 22221  0017C8                     l11634:
 22222                           
 22223                           ; BSR set to: 0
 22224                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22225  0017C8  518D               	movf	sprintf@_val& (0+255),w,b
 22226  0017CA  6ED9               	movwf	fsr2l,c
 22227  0017CC  6ADA               	clrf	fsr2h,c
 22228  0017CE  C076  FFE1         	movff	sprintf@sp,fsr1l
 22229  0017D2  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22230  0017D6  CFDF FFE7          	movff	indf2,indf1
 22231                           
 22232                           ; BSR set to: 0
 22233  0017DA  2B8D               	incf	sprintf@_val& (0+255),f,b
 22234                           
 22235                           ; BSR set to: 0
 22236  0017DC  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22237  0017DE  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22238  0017E0                     l11640:
 22239                           
 22240                           ; BSR set to: 0
 22241  0017E0  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22242  0017E2  A0D8               	btfss	status,0,c
 22243  0017E4  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22244  0017E6  0100               	movlb	0	; () banked
 22245  0017E8  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22246  0017EA  B4D8               	btfsc	status,2,c
 22247  0017EC  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22248  0017EE  E1EC               	bnz	l11634
 22249                           
 22250                           ; BSR set to: 0
 22251                           ;doprnt.c: 779: if(flag & 0x08)
 22252  0017F0  B792               	btfsc	sprintf@flag& (0+255),3,b
 22253  0017F2  D004               	goto	l11648
 22254  0017F4  D23B               	goto	l11886
 22255  0017F6                     l11644:
 22256                           
 22257                           ; BSR set to: 0
 22258                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22259  0017F6  DA91               	call	PL64	;call to abstracted procedure
 22260                           
 22261                           ; BSR set to: 0
 22262  0017F8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22263  0017FA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22264  0017FC                     l11648:
 22265                           
 22266                           ; BSR set to: 0
 22267  0017FC  078B               	decf	sprintf@width& (0+255),f,b
 22268  0017FE  DAA2               	call	PL112	;call to abstracted procedure
 22269  001800  B4D8               	btfsc	status,2,c
 22270  001802  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22271  001804  E101 D232          	bz	l11886
 22272  001808  D7F6               	goto	l11644
 22273  00180A                     l11650:
 22274                           
 22275                           ; BSR set to: 0
 22276                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22277  00180A  5188               	movf	sprintf@ap& (0+255),w,b
 22278  00180C  6ED9               	movwf	fsr2l,c
 22279  00180E  6ADA               	clrf	fsr2h,c
 22280  001810  50DF               	movf	indf2,w,c
 22281  001812  6F91               	movwf	sprintf@c& (0+255),b
 22282                           
 22283                           ; BSR set to: 0
 22284  001814  0E02               	movlw	2
 22285  001816  2788               	addwf	sprintf@ap& (0+255),f,b
 22286  001818                     l11654:
 22287                           
 22288                           ; BSR set to: 0
 22289                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22290  001818  0E91               	movlw	low sprintf@c
 22291  00181A  6F8D               	movwf	sprintf@_val& (0+255),b
 22292                           
 22293                           ; BSR set to: 0
 22294                           ;doprnt.c: 815: _val._str._len = 1;
 22295  00181C  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22296  00181E  0E01               	movlw	1
 22297  001820  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22298                           
 22299                           ;doprnt.c: 816: goto dostring;
 22300  001822  D7AC               	goto	l11616
 22301  001824                     l11658:
 22302                           
 22303                           ; BSR set to: 0
 22304                           ;doprnt.c: 827: flag |= 0xC0;
 22305  001824  0EC0               	movlw	192
 22306  001826  1392               	iorwf	sprintf@flag& (0+255),f,b
 22307                           
 22308                           ;doprnt.c: 828: break;
 22309  001828  D015               	goto	l11664
 22310  00182A                     l11662:
 22311                           
 22312                           ; BSR set to: 0
 22313  00182A  DA6C               	call	PL62	;call to abstracted procedure
 22314  00182C  5191               	movf	sprintf@c& (0+255),w,b
 22315                           
 22316                           ; Switch size 1, requested type "space"
 22317                           ; Number of cases is 9, Range of values is 0 to 120
 22318                           ; switch strategies available:
 22319                           ; Name         Instructions Cycles
 22320                           ; simple_byte           28    15 (average)
 22321                           ;	Chosen strategy is simple_byte
 22322  00182E  E101 D220          	bz	l11888
 22323  001832  0A58               	xorlw	88	; case 88
 22324  001834  E0A0               	bz	l11614
 22325  001836  0A3B               	xorlw	59	; case 99
 22326  001838  E0E8               	bz	l11650
 22327  00183A  0A07               	xorlw	7	; case 100
 22328  00183C  E00B               	bz	l11664
 22329  00183E  0A0D               	xorlw	13	; case 105
 22330  001840  E009               	bz	l11664
 22331  001842  0A05               	xorlw	5	; case 108
 22332  001844  E094               	bz	l11610
 22333  001846  0A03               	xorlw	3	; case 111
 22334  001848  E094               	bz	l11612
 22335  00184A  0A1A               	xorlw	26	; case 117
 22336  00184C  E0EB               	bz	l11658
 22337  00184E  0A0D               	xorlw	13	; case 120
 22338  001850  E093               	bz	l1656
 22339  001852  D7E2               	goto	l11654
 22340  001854                     l11664:
 22341                           
 22342                           ; BSR set to: 0
 22343                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22344  001854  5192               	movf	sprintf@flag& (0+255),w,b
 22345  001856  0BC0               	andlw	192
 22346  001858  E120               	bnz	l1675
 22347                           
 22348                           ; BSR set to: 0
 22349                           ;doprnt.c: 1260: {
 22350                           ;doprnt.c: 1262: if(flag & 0x10)
 22351  00185A  A992               	btfss	sprintf@flag& (0+255),4,b
 22352  00185C  D003               	goto	l11672
 22353                           
 22354                           ; BSR set to: 0
 22355                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22356  00185E  5188               	movf	sprintf@ap& (0+255),w,b
 22357                           
 22358                           ; BSR set to: 0
 22359  001860  DA46               	call	PL56	;call to abstracted procedure
 22360  001862  D00D               	goto	L34
 22361  001864                     l11672:
 22362                           
 22363                           ; BSR set to: 0
 22364                           ;doprnt.c: 1264: else
 22365                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22366  001864  5188               	movf	sprintf@ap& (0+255),w,b
 22367  001866  6ED9               	movwf	fsr2l,c
 22368  001868  6ADA               	clrf	fsr2h,c
 22369  00186A  CFDE F08D          	movff	postinc2,sprintf@_val
 22370  00186E  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22371  001872  0E00               	movlw	0
 22372  001874  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22373  001876  0EFF               	movlw	-1
 22374  001878  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22375  00187A  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22376                           
 22377                           ; BSR set to: 0
 22378  00187C  0E02               	movlw	2
 22379  00187E                     L34:
 22380  00187E  2788               	addwf	sprintf@ap& (0+255),f,b
 22381                           
 22382                           ; BSR set to: 0
 22383                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22384  001880  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22385  001882  D01F               	goto	l11690
 22386                           
 22387                           ; BSR set to: 0
 22388                           ;doprnt.c: 1269: flag |= 0x03;
 22389  001884  0E03               	movlw	3
 22390  001886  1392               	iorwf	sprintf@flag& (0+255),f,b
 22391                           
 22392                           ; BSR set to: 0
 22393                           ;doprnt.c: 1270: _val._val = -_val._val;
 22394  001888  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22395  00188A  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22396  00188C  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22397  00188E  6D8D               	negf	sprintf@_val& (0+255),b
 22398  001890  0E00               	movlw	0
 22399  001892  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22400  001894  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22401  001896  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22402  001898  D014               	goto	l11690
 22403  00189A                     l1675:
 22404                           
 22405                           ; BSR set to: 0
 22406                           ;doprnt.c: 1275: else
 22407                           ;doprnt.c: 1280: {
 22408                           ;doprnt.c: 1288: if(flag & 0x10)
 22409  00189A  A992               	btfss	sprintf@flag& (0+255),4,b
 22410  00189C  D003               	goto	l11686
 22411                           
 22412                           ; BSR set to: 0
 22413                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22414  00189E  5188               	movf	sprintf@ap& (0+255),w,b
 22415                           
 22416                           ; BSR set to: 0
 22417  0018A0  DA26               	call	PL56	;call to abstracted procedure
 22418  0018A2  D00E               	goto	L35
 22419  0018A4                     l11686:
 22420                           
 22421                           ; BSR set to: 0
 22422                           ;doprnt.c: 1290: else
 22423                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22424  0018A4  5188               	movf	sprintf@ap& (0+255),w,b
 22425  0018A6  6ED9               	movwf	fsr2l,c
 22426  0018A8  6ADA               	clrf	fsr2h,c
 22427  0018AA  CFDE F07E          	movff	postinc2,??_sprintf
 22428  0018AE  CFDD F07F          	movff	postdec2,??_sprintf+1
 22429  0018B2  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22430  0018B6  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22431  0018BA  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22432  0018BC  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22433                           
 22434                           ; BSR set to: 0
 22435  0018BE  0E02               	movlw	2
 22436  0018C0                     L35:
 22437  0018C0  2788               	addwf	sprintf@ap& (0+255),f,b
 22438  0018C2                     l11690:
 22439                           
 22440                           ; BSR set to: 0
 22441                           ;doprnt.c: 1294: }
 22442                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22443  0018C2  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22444  0018C4  1189               	iorwf	sprintf@prec& (0+255),w,b
 22445  0018C6  E15C               	bnz	l11740
 22446                           
 22447                           ; BSR set to: 0
 22448  0018C8  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22449  0018CA  118D               	iorwf	sprintf@_val& (0+255),w,b
 22450  0018CC  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22451  0018CE  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22452  0018D0  E157               	bnz	l11740
 22453                           
 22454                           ; BSR set to: 0
 22455                           ;doprnt.c: 1298: prec++;
 22456  0018D2  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22457  0018D4  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22458  0018D6  D054               	goto	l11740
 22459  0018D8                     l11696:
 22460                           
 22461                           ; BSR set to: 0
 22462                           ;doprnt.c: 1309: case 0xC0:
 22463                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22464  0018D8  0E01               	movlw	1
 22465  0018DA  6F91               	movwf	sprintf@c& (0+255),b
 22466  0018DC                     l11698:
 22467                           
 22468                           ; BSR set to: 0
 22469  0018DC  5191               	movf	sprintf@c& (0+255),w,b
 22470  0018DE  0A0A               	xorlw	10
 22471  0018E0  E058               	bz	l11742
 22472                           
 22473                           ; BSR set to: 0
 22474                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22475  0018E2  5191               	movf	sprintf@c& (0+255),w,b
 22476  0018E4  0D04               	mullw	4
 22477  0018E6  0EE4               	movlw	low _dpowers
 22478  0018E8  24F3               	addwf	prodl,w,c
 22479  0018EA  6EF6               	movwf	tblptrl,c
 22480  0018EC  0E6F               	movlw	high _dpowers
 22481  0018EE  20F4               	addwfc	prodh,w,c
 22482  0018F0  6EF7               	movwf	tblptrh,c
 22483  0018F2  0009               	tblrd		*+
 22484  0018F4  50F5               	movf	tablat,w,c
 22485  0018F6  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22486  0018F8  0009               	tblrd		*+
 22487  0018FA  50F5               	movf	tablat,w,c
 22488  0018FC  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22489  0018FE  0009               	tblrd		*+
 22490  001900  50F5               	movf	tablat,w,c
 22491  001902  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22492  001904  0009               	tblrd		*+
 22493  001906  50F5               	movf	tablat,w,c
 22494  001908  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22495  00190A  E343               	bnc	l11742
 22496                           
 22497                           ; BSR set to: 0
 22498  00190C  2B91               	incf	sprintf@c& (0+255),f,b
 22499  00190E  D7E6               	goto	l11698
 22500  001910                     l11710:
 22501                           
 22502                           ; BSR set to: 0
 22503                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22504  001910  0E01               	movlw	1
 22505  001912  6F91               	movwf	sprintf@c& (0+255),b
 22506  001914                     l11712:
 22507                           
 22508                           ; BSR set to: 0
 22509  001914  5191               	movf	sprintf@c& (0+255),w,b
 22510  001916  0A08               	xorlw	8
 22511  001918  E03C               	bz	l11742
 22512                           
 22513                           ; BSR set to: 0
 22514                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22515  00191A  5191               	movf	sprintf@c& (0+255),w,b
 22516  00191C  0D04               	mullw	4
 22517  00191E  0E0C               	movlw	low _hexpowers
 22518  001920  24F3               	addwf	prodl,w,c
 22519  001922  6EF6               	movwf	tblptrl,c
 22520  001924  0E70               	movlw	high _hexpowers
 22521  001926  20F4               	addwfc	prodh,w,c
 22522  001928  6EF7               	movwf	tblptrh,c
 22523  00192A  0009               	tblrd		*+
 22524  00192C  50F5               	movf	tablat,w,c
 22525  00192E  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22526  001930  0009               	tblrd		*+
 22527  001932  50F5               	movf	tablat,w,c
 22528  001934  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22529  001936  0009               	tblrd		*+
 22530  001938  50F5               	movf	tablat,w,c
 22531  00193A  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22532  00193C  0009               	tblrd		*+
 22533  00193E  50F5               	movf	tablat,w,c
 22534  001940  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22535  001942  E327               	bnc	l11742
 22536                           
 22537                           ; BSR set to: 0
 22538  001944  2B91               	incf	sprintf@c& (0+255),f,b
 22539  001946  D7E6               	goto	l11712
 22540  001948                     l11724:
 22541                           
 22542                           ; BSR set to: 0
 22543                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22544  001948  0E01               	movlw	1
 22545  00194A  6F91               	movwf	sprintf@c& (0+255),b
 22546  00194C                     l11726:
 22547                           
 22548                           ; BSR set to: 0
 22549  00194C  5191               	movf	sprintf@c& (0+255),w,b
 22550  00194E  0A0C               	xorlw	12
 22551  001950  E020               	bz	l11742
 22552                           
 22553                           ; BSR set to: 0
 22554                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22555  001952  5191               	movf	sprintf@c& (0+255),w,b
 22556  001954  0D04               	mullw	4
 22557  001956  0EB4               	movlw	low _octpowers
 22558  001958  24F3               	addwf	prodl,w,c
 22559  00195A  6EF6               	movwf	tblptrl,c
 22560  00195C  0E6F               	movlw	high _octpowers
 22561  00195E  20F4               	addwfc	prodh,w,c
 22562  001960  6EF7               	movwf	tblptrh,c
 22563  001962  0009               	tblrd		*+
 22564  001964  50F5               	movf	tablat,w,c
 22565  001966  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22566  001968  0009               	tblrd		*+
 22567  00196A  50F5               	movf	tablat,w,c
 22568  00196C  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22569  00196E  0009               	tblrd		*+
 22570  001970  50F5               	movf	tablat,w,c
 22571  001972  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22572  001974  0009               	tblrd		*+
 22573  001976  50F5               	movf	tablat,w,c
 22574  001978  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22575  00197A  E30B               	bnc	l11742
 22576                           
 22577                           ; BSR set to: 0
 22578  00197C  2B91               	incf	sprintf@c& (0+255),f,b
 22579  00197E  D7E6               	goto	l11726
 22580  001980                     l11740:
 22581                           
 22582                           ; BSR set to: 0
 22583  001980  5192               	movf	sprintf@flag& (0+255),w,b
 22584  001982  0BC0               	andlw	192
 22585                           
 22586                           ; Switch size 1, requested type "space"
 22587                           ; Number of cases is 4, Range of values is 0 to 192
 22588                           ; switch strategies available:
 22589                           ; Name         Instructions Cycles
 22590                           ; simple_byte           13     7 (average)
 22591                           ;	Chosen strategy is simple_byte
 22592  001984  E0A9               	bz	l11696
 22593  001986  0A40               	xorlw	64	; case 64
 22594  001988  E0DF               	bz	l11724
 22595  00198A  0AC0               	xorlw	192	; case 128
 22596  00198C  E0C1               	bz	l11710
 22597  00198E  0A40               	xorlw	64	; case 192
 22598  001990  E0A3               	bz	l11696
 22599  001992                     l11742:
 22600                           
 22601                           ; BSR set to: 0
 22602                           ;doprnt.c: 1346: if(c < prec)
 22603  001992  0E80               	movlw	128
 22604  001994  BF91               	btfsc	sprintf@c& (0+255),7,b
 22605  001996  0E7F               	movlw	127
 22606  001998  6F7E               	movwf	??_sprintf& (0+255),b
 22607  00199A  5189               	movf	sprintf@prec& (0+255),w,b
 22608  00199C  5D91               	subwf	sprintf@c& (0+255),w,b
 22609  00199E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22610  0019A0  0A80               	xorlw	128
 22611  0019A2  597E               	subwfb	??_sprintf& (0+255),w,b
 22612  0019A4  E203               	bc	l11746
 22613                           
 22614                           ; BSR set to: 0
 22615                           ;doprnt.c: 1347: c = prec;
 22616  0019A6  C089  F091         	movff	sprintf@prec,sprintf@c
 22617  0019AA  D00F               	goto	l11750
 22618  0019AC                     l11746:
 22619                           
 22620                           ; BSR set to: 0
 22621                           ;doprnt.c: 1348: else if(prec < c)
 22622  0019AC  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22623  0019AE  0A80               	xorlw	128
 22624  0019B0  6F7E               	movwf	??_sprintf& (0+255),b
 22625  0019B2  5191               	movf	sprintf@c& (0+255),w,b
 22626  0019B4  5D89               	subwf	sprintf@prec& (0+255),w,b
 22627  0019B6  0E80               	movlw	128
 22628  0019B8  BF91               	btfsc	sprintf@c& (0+255),7,b
 22629  0019BA  0E7F               	movlw	127
 22630  0019BC  597E               	subwfb	??_sprintf& (0+255),w,b
 22631  0019BE  E205               	bc	l11750
 22632                           
 22633                           ; BSR set to: 0
 22634                           ;doprnt.c: 1349: prec = c;
 22635  0019C0  5191               	movf	sprintf@c& (0+255),w,b
 22636  0019C2  6F89               	movwf	sprintf@prec& (0+255),b
 22637  0019C4  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22638  0019C6  BF89               	btfsc	sprintf@prec& (0+255),7,b
 22639  0019C8  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22640  0019CA                     l11750:
 22641                           
 22642                           ; BSR set to: 0
 22643                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22644  0019CA  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22645  0019CC  118B               	iorwf	sprintf@width& (0+255),w,b
 22646  0019CE  E006               	bz	l11756
 22647                           
 22648                           ; BSR set to: 0
 22649  0019D0  5192               	movf	sprintf@flag& (0+255),w,b
 22650  0019D2  0B03               	andlw	3
 22651  0019D4  E003               	bz	l11756
 22652                           
 22653                           ; BSR set to: 0
 22654                           ;doprnt.c: 1353: width--;
 22655  0019D6  078B               	decf	sprintf@width& (0+255),f,b
 22656  0019D8  A0D8               	btfss	status,0,c
 22657  0019DA  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22658  0019DC                     l11756:
 22659                           
 22660                           ; BSR set to: 0
 22661                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22662  0019DC  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 22663  0019DE  D010               	goto	l11762
 22664                           
 22665                           ; BSR set to: 0
 22666                           ;doprnt.c: 1356: if(width > prec)
 22667  0019E0  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22668  0019E2  0A80               	xorlw	128
 22669  0019E4  6F7E               	movwf	??_sprintf& (0+255),b
 22670  0019E6  518B               	movf	sprintf@width& (0+255),w,b
 22671  0019E8  5D89               	subwf	sprintf@prec& (0+255),w,b
 22672  0019EA  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22673  0019EC  0A80               	xorlw	128
 22674  0019EE  597E               	subwfb	??_sprintf& (0+255),w,b
 22675  0019F0  E205               	bc	l1703
 22676                           
 22677                           ; BSR set to: 0
 22678                           ;doprnt.c: 1357: width -= prec;
 22679  0019F2  5189               	movf	sprintf@prec& (0+255),w,b
 22680  0019F4  5F8B               	subwf	sprintf@width& (0+255),f,b
 22681  0019F6  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22682  0019F8  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22683  0019FA  D002               	goto	l11762
 22684  0019FC                     l1703:
 22685                           
 22686                           ; BSR set to: 0
 22687                           ;doprnt.c: 1358: else
 22688                           ;doprnt.c: 1359: width = 0;
 22689  0019FC  6B8B               	clrf	sprintf@width& (0+255),b
 22690  0019FE  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22691  001A00                     l11762:
 22692                           
 22693                           ; BSR set to: 0
 22694                           ;doprnt.c: 1360: }
 22695                           ;doprnt.c: 1364: if((flag & (
 22696                           ;doprnt.c: 1366: 0x04|
 22697                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22698  001A00  0EC4               	movlw	196
 22699  001A02  D94D               	call	PL20	;call to abstracted procedure
 22700  001A04  0E40               	movlw	64
 22701  001A06  B4D8               	btfsc	status,2,c
 22702  001A08  197E               	xorwf	??_sprintf& (0+255),w,b
 22703  001A0A  E107               	bnz	l11768
 22704                           
 22705                           ; BSR set to: 0
 22706                           ;doprnt.c: 1369: if(width)
 22707  001A0C  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22708  001A0E  118B               	iorwf	sprintf@width& (0+255),w,b
 22709  001A10  E018               	bz	l11774
 22710                           
 22711                           ; BSR set to: 0
 22712                           ;doprnt.c: 1370: width--;
 22713  001A12  078B               	decf	sprintf@width& (0+255),f,b
 22714  001A14  A0D8               	btfss	status,0,c
 22715  001A16  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22716  001A18  D014               	goto	l11774
 22717  001A1A                     l11768:
 22718                           
 22719                           ; BSR set to: 0
 22720                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22721  001A1A  0EC0               	movlw	192
 22722  001A1C  D940               	call	PL20	;call to abstracted procedure
 22723  001A1E  0E80               	movlw	128
 22724  001A20  B4D8               	btfsc	status,2,c
 22725  001A22  197E               	xorwf	??_sprintf& (0+255),w,b
 22726  001A24  E10E               	bnz	l11774
 22727                           
 22728                           ; BSR set to: 0
 22729                           ;doprnt.c: 1379: if(width > 2)
 22730  001A26  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22731  001A28  0A80               	xorlw	128
 22732  001A2A  0F80               	addlw	-128
 22733  001A2C  0E03               	movlw	3
 22734  001A2E  B4D8               	btfsc	status,2,c
 22735  001A30  5D8B               	subwf	sprintf@width& (0+255),w,b
 22736  001A32  E305               	bnc	l1709
 22737                           
 22738                           ; BSR set to: 0
 22739                           ;doprnt.c: 1380: width -= 2;
 22740  001A34  0EFE               	movlw	254
 22741  001A36  278B               	addwf	sprintf@width& (0+255),f,b
 22742  001A38  0EFF               	movlw	255
 22743  001A3A  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22744  001A3C  D002               	goto	l11774
 22745  001A3E                     l1709:
 22746                           
 22747                           ; BSR set to: 0
 22748                           ;doprnt.c: 1381: else
 22749                           ;doprnt.c: 1382: width = 0;
 22750  001A3E  6B8B               	clrf	sprintf@width& (0+255),b
 22751  001A40  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22752  001A42                     l11774:
 22753                           
 22754                           ; BSR set to: 0
 22755                           ;doprnt.c: 1383: }
 22756                           ;doprnt.c: 1388: if(width > c)
 22757  001A42  0E80               	movlw	128
 22758  001A44  BF91               	btfsc	sprintf@c& (0+255),7,b
 22759  001A46  0E7F               	movlw	127
 22760  001A48  6F7E               	movwf	??_sprintf& (0+255),b
 22761  001A4A  518B               	movf	sprintf@width& (0+255),w,b
 22762  001A4C  5D91               	subwf	sprintf@c& (0+255),w,b
 22763  001A4E  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22764  001A50  0A80               	xorlw	128
 22765  001A52  597E               	subwfb	??_sprintf& (0+255),w,b
 22766  001A54  E207               	bc	l1711
 22767                           
 22768                           ; BSR set to: 0
 22769                           ;doprnt.c: 1389: width -= c;
 22770  001A56  5191               	movf	sprintf@c& (0+255),w,b
 22771  001A58  5F8B               	subwf	sprintf@width& (0+255),f,b
 22772  001A5A  0E00               	movlw	0
 22773  001A5C  BF91               	btfsc	sprintf@c& (0+255),7,b
 22774  001A5E  0EFF               	movlw	255
 22775  001A60  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22776  001A62  D002               	goto	l1712
 22777  001A64                     l1711:
 22778                           
 22779                           ; BSR set to: 0
 22780                           ;doprnt.c: 1390: else
 22781                           ;doprnt.c: 1391: width = 0;
 22782  001A64  6B8B               	clrf	sprintf@width& (0+255),b
 22783  001A66  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22784  001A68                     l1712:
 22785                           
 22786                           ; BSR set to: 0
 22787                           ;doprnt.c: 1394: if(flag & 0x04) {
 22788  001A68  A592               	btfss	sprintf@flag& (0+255),2,b
 22789  001A6A  D03C               	goto	l11812
 22790                           
 22791                           ; BSR set to: 0
 22792                           ;doprnt.c: 1399: if(flag & 0x03)
 22793  001A6C  5192               	movf	sprintf@flag& (0+255),w,b
 22794  001A6E  0B03               	andlw	3
 22795  001A70  E009               	bz	l1714
 22796                           
 22797                           ; BSR set to: 0
 22798                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22799  001A72  C076  FFD9         	movff	sprintf@sp,fsr2l
 22800  001A76  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22801  001A7A  0E2D               	movlw	45
 22802  001A7C  6EDF               	movwf	indf2,c
 22803  001A7E                     l11782:
 22804                           
 22805                           ; BSR set to: 0
 22806  001A7E  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22807  001A80  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22808  001A82  D022               	goto	l11804
 22809  001A84                     l1714:
 22810                           
 22811                           ; BSR set to: 0
 22812                           ;doprnt.c: 1403: else
 22813                           ;doprnt.c: 1406: if(flag & 0x01)
 22814  001A84  A192               	btfss	sprintf@flag& (0+255),0,b
 22815  001A86  D006               	goto	l11788
 22816                           
 22817                           ; BSR set to: 0
 22818                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22819  001A88  C076  FFD9         	movff	sprintf@sp,fsr2l
 22820  001A8C  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22821  001A90  0E20               	movlw	32
 22822  001A92  D7F4               	goto	L36
 22823  001A94                     l11788:
 22824                           
 22825                           ; BSR set to: 0
 22826                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22827  001A94  0EC0               	movlw	192
 22828  001A96  D903               	call	PL20	;call to abstracted procedure
 22829  001A98  0E80               	movlw	128
 22830  001A9A  B4D8               	btfsc	status,2,c
 22831  001A9C  197E               	xorwf	??_sprintf& (0+255),w,b
 22832  001A9E  E114               	bnz	l11804
 22833                           
 22834                           ; BSR set to: 0
 22835                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22836  001AA0  C076  FFD9         	movff	sprintf@sp,fsr2l
 22837  001AA4  D94A               	call	PL98	;call to abstracted procedure
 22838                           
 22839                           ; BSR set to: 0
 22840  001AA6  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22841  001AA8  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22842                           
 22843                           ; BSR set to: 0
 22844                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22845  001AAA  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22846  001AAC  D003               	goto	l11798
 22847                           
 22848                           ; BSR set to: 0
 22849  001AAE  6B83               	clrf	(_sprintf$2137+1)& (0+255),b
 22850  001AB0  0E78               	movlw	120
 22851  001AB2  D002               	goto	L37
 22852  001AB4                     l11798:
 22853                           
 22854                           ; BSR set to: 0
 22855  001AB4  6B83               	clrf	(_sprintf$2137+1)& (0+255),b
 22856  001AB6  0E58               	movlw	88
 22857  001AB8                     L37:
 22858  001AB8  6F82               	movwf	_sprintf$2137& (0+255),b
 22859                           
 22860                           ; BSR set to: 0
 22861  001ABA  C076  FFD9         	movff	sprintf@sp,fsr2l
 22862  001ABE  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22863  001AC2  C082  FFDF         	movff	_sprintf$2137,indf2
 22864  001AC6  D7DB               	goto	l11782
 22865  001AC8                     l11804:
 22866                           
 22867                           ; BSR set to: 0
 22868                           ;doprnt.c: 1419: }
 22869                           ;doprnt.c: 1422: if(width)
 22870  001AC8  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22871  001ACA  118B               	iorwf	sprintf@width& (0+255),w,b
 22872  001ACC  E101 D0B9          	bz	l11876
 22873                           
 22874                           ; BSR set to: 0
 22875                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22876  001AD0  C076  FFD9         	movff	sprintf@sp,fsr2l
 22877  001AD4  D932               	call	PL98	;call to abstracted procedure
 22878                           
 22879                           ; BSR set to: 0
 22880  001AD6  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22881  001AD8  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22882                           
 22883                           ; BSR set to: 0
 22884                           ;doprnt.c: 1425: while(--width);
 22885  001ADA  078B               	decf	sprintf@width& (0+255),f,b
 22886  001ADC  A0D8               	btfss	status,0,c
 22887  001ADE  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22888  001AE0  0100               	movlb	0	; () banked
 22889  001AE2  D7F2               	goto	l11804
 22890  001AE4                     l11812:
 22891                           
 22892                           ; BSR set to: 0
 22893                           ;doprnt.c: 1429: {
 22894                           ;doprnt.c: 1431: if(width
 22895                           ;doprnt.c: 1433: && !(flag & 0x08)
 22896                           ;doprnt.c: 1435: )
 22897  001AE4  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22898  001AE6  118B               	iorwf	sprintf@width& (0+255),w,b
 22899  001AE8  A4D8               	btfss	status,2,c
 22900                           
 22901                           ; BSR set to: 0
 22902  001AEA  B792               	btfsc	sprintf@flag& (0+255),3,b
 22903  001AEC  D004               	goto	l11822
 22904  001AEE                     l11816:
 22905                           
 22906                           ; BSR set to: 0
 22907                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 22908  001AEE  C076  FFD9         	movff	sprintf@sp,fsr2l
 22909                           
 22910                           ; BSR set to: 0
 22911                           
 22912                           ; BSR set to: 0
 22913                           ;doprnt.c: 1438: while(--width);
 22914  001AF2  D8F0               	call	PL46	;call to abstracted procedure
 22915  001AF4  E1FC               	bnz	l11816
 22916  001AF6                     l11822:
 22917                           
 22918                           ; BSR set to: 0
 22919                           ;doprnt.c: 1445: if(flag & 0x03)
 22920  001AF6  5192               	movf	sprintf@flag& (0+255),w,b
 22921  001AF8  0B03               	andlw	3
 22922  001AFA  E009               	bz	l1730
 22923                           
 22924                           ; BSR set to: 0
 22925                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 22926  001AFC  C076  FFD9         	movff	sprintf@sp,fsr2l
 22927  001B00  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22928  001B04  0E2D               	movlw	45
 22929  001B06  6EDF               	movwf	indf2,c
 22930                           
 22931                           ; BSR set to: 0
 22932  001B08  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22933  001B0A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22934  001B0C  D008               	goto	l11832
 22935  001B0E                     l1730:
 22936                           
 22937                           ; BSR set to: 0
 22938                           ;doprnt.c: 1450: else if(flag & 0x01)
 22939  001B0E  A192               	btfss	sprintf@flag& (0+255),0,b
 22940  001B10  D006               	goto	l11832
 22941                           
 22942                           ; BSR set to: 0
 22943                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 22944  001B12  C076  FFD9         	movff	sprintf@sp,fsr2l
 22945  001B16  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22946  001B1A  0E20               	movlw	32
 22947  001B1C  D7F4               	goto	L38
 22948  001B1E                     l11832:
 22949                           
 22950                           ; BSR set to: 0
 22951                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 22952  001B1E  0EC0               	movlw	192
 22953  001B20  D8BE               	call	PL20	;call to abstracted procedure
 22954  001B22  0E40               	movlw	64
 22955  001B24  B4D8               	btfsc	status,2,c
 22956  001B26  197E               	xorwf	??_sprintf& (0+255),w,b
 22957  001B28  E106               	bnz	l11838
 22958                           
 22959                           ; BSR set to: 0
 22960                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 22961  001B2A  C076  FFD9         	movff	sprintf@sp,fsr2l
 22962  001B2E  D905               	call	PL98	;call to abstracted procedure
 22963  001B30                     l11836:
 22964                           
 22965                           ; BSR set to: 0
 22966  001B30  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22967  001B32  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22968  001B34  D086               	goto	l11876
 22969  001B36                     l11838:
 22970                           
 22971                           ; BSR set to: 0
 22972                           ;doprnt.c: 1457: else
 22973                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22974  001B36  0EC0               	movlw	192
 22975  001B38  D8B2               	call	PL20	;call to abstracted procedure
 22976  001B3A  0E80               	movlw	128
 22977  001B3C  B4D8               	btfsc	status,2,c
 22978  001B3E  197E               	xorwf	??_sprintf& (0+255),w,b
 22979  001B40  E001 D07F          	bnz	l11876
 22980                           
 22981                           ; BSR set to: 0
 22982                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 22983  001B44  C076  FFD9         	movff	sprintf@sp,fsr2l
 22984  001B48  D8F8               	call	PL98	;call to abstracted procedure
 22985                           
 22986                           ; BSR set to: 0
 22987  001B4A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22988  001B4C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22989                           
 22990                           ; BSR set to: 0
 22991                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22992  001B4E  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22993  001B50  D003               	goto	l11848
 22994                           
 22995                           ; BSR set to: 0
 22996  001B52  6B85               	clrf	(_sprintf$2138+1)& (0+255),b
 22997  001B54  0E78               	movlw	120
 22998  001B56  D002               	goto	L39
 22999  001B58                     l11848:
 23000                           
 23001                           ; BSR set to: 0
 23002  001B58  6B85               	clrf	(_sprintf$2138+1)& (0+255),b
 23003  001B5A  0E58               	movlw	88
 23004  001B5C                     L39:
 23005  001B5C  6F84               	movwf	_sprintf$2138& (0+255),b
 23006                           
 23007                           ; BSR set to: 0
 23008  001B5E  C076  FFD9         	movff	sprintf@sp,fsr2l
 23009  001B62  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23010  001B66  C084  FFDF         	movff	_sprintf$2138,indf2
 23011  001B6A  D7E2               	goto	l11836
 23012  001B6C                     l11854:
 23013                           
 23014                           ; BSR set to: 0
 23015                           ;doprnt.c: 1493: case 0xC0:
 23016                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23017  001B6C  C089  F07E         	movff	sprintf@prec,??_sprintf
 23018  001B70  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23019  001B74  90D8               	bcf	status,0,c
 23020  001B76  377E               	rlcf	??_sprintf& (0+255),f,b
 23021  001B78  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23022  001B7A  90D8               	bcf	status,0,c
 23023  001B7C  377E               	rlcf	??_sprintf& (0+255),f,b
 23024  001B7E  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23025  001B80  0EE4               	movlw	low _dpowers
 23026  001B82  257E               	addwf	??_sprintf& (0+255),w,b
 23027  001B84  6EF6               	movwf	tblptrl,c
 23028  001B86  0E6F               	movlw	high _dpowers
 23029  001B88  D87B               	call	PL14	;call to abstracted procedure
 23030  001B8A  C08D  F060         	movff	sprintf@_val,?___lldiv
 23031  001B8E  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23032  001B92  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23033  001B96  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23034  001B9A  EC93  F026         	call	___lldiv	;wreg free
 23035  001B9E  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23036  001BA2  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23037  001BA6  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23038  001BAA  C060  F06D         	movff	?___lldiv,?___llmod
 23039  001BAE  0E0A               	movlw	10
 23040  001BB0  6F71               	movwf	(?___llmod+4)& (0+255),b
 23041  001BB2  0E00               	movlw	0
 23042  001BB4  6B72               	clrf	(?___llmod+5)& (0+255),b
 23043  001BB6  6B73               	clrf	(?___llmod+6)& (0+255),b
 23044  001BB8  6B74               	clrf	(?___llmod+7)& (0+255),b
 23045  001BBA  EC0E  F028         	call	___llmod	;wreg free
 23046  001BBE  516D               	movf	?___llmod& (0+255),w,b
 23047  001BC0  D02D               	goto	L40
 23048  001BC2                     l11856:
 23049                           
 23050                           ; BSR set to: 0
 23051                           ;doprnt.c: 1506: {
 23052                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23053  001BC2  D875               	call	PL24	;call to abstracted procedure
 23054  001BC4  0E0C               	movlw	low _hexpowers
 23055  001BC6  257E               	addwf	??_sprintf& (0+255),w,b
 23056  001BC8  6EF6               	movwf	tblptrl,c
 23057  001BCA  0E70               	movlw	high _hexpowers
 23058  001BCC  D859               	call	PL14	;call to abstracted procedure
 23059  001BCE  EC93  F026         	call	___lldiv	;wreg free
 23060  001BD2  5160               	movf	?___lldiv& (0+255),w,b
 23061  001BD4  0B0F               	andlw	15
 23062  001BD6  6F81               	movwf	sprintf@idx& (0+255),b
 23063                           
 23064                           ; BSR set to: 0
 23065                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23066  001BD8  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23067  001BDA  D004               	goto	l11862
 23068                           
 23069                           ; BSR set to: 0
 23070  001BDC  0E7E               	movlw	high STR_257
 23071  001BDE  6F87               	movwf	(_sprintf$2144+1)& (0+255),b
 23072  001BE0  0E2C               	movlw	low STR_257
 23073  001BE2  D003               	goto	L41
 23074  001BE4                     l11862:
 23075                           
 23076                           ; BSR set to: 0
 23077  001BE4  0E7E               	movlw	high STR_256
 23078  001BE6  6F87               	movwf	(_sprintf$2144+1)& (0+255),b
 23079  001BE8  0E1B               	movlw	low STR_256
 23080  001BEA                     L41:
 23081  001BEA  6F86               	movwf	_sprintf$2144& (0+255),b
 23082                           
 23083                           ; BSR set to: 0
 23084  001BEC  5181               	movf	sprintf@idx& (0+255),w,b
 23085  001BEE  2586               	addwf	_sprintf$2144& (0+255),w,b
 23086  001BF0  6F7E               	movwf	??_sprintf& (0+255),b
 23087  001BF2  0E00               	movlw	0
 23088  001BF4  2187               	addwfc	(_sprintf$2144+1)& (0+255),w,b
 23089  001BF6  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23090  001BF8  C07E  FFF6         	movff	??_sprintf,tblptrl
 23091  001BFC  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23092  001C00  0008               	tblrd		*
 23093  001C02  CFF5 F091          	movff	tablat,sprintf@c
 23094                           
 23095                           ;doprnt.c: 1515: }
 23096                           ;doprnt.c: 1517: break;
 23097  001C06  D016               	goto	l11872
 23098  001C08                     l11866:
 23099                           
 23100                           ; BSR set to: 0
 23101                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23102  001C08  D852               	call	PL24	;call to abstracted procedure
 23103  001C0A  0EB4               	movlw	low _octpowers
 23104  001C0C  257E               	addwf	??_sprintf& (0+255),w,b
 23105  001C0E  6EF6               	movwf	tblptrl,c
 23106  001C10  0E6F               	movlw	high _octpowers
 23107  001C12  D836               	call	PL14	;call to abstracted procedure
 23108  001C14  EC93  F026         	call	___lldiv	;wreg free
 23109  001C18  5160               	movf	?___lldiv& (0+255),w,b
 23110  001C1A  0B07               	andlw	7
 23111  001C1C                     L40:
 23112  001C1C  0F30               	addlw	48
 23113  001C1E  6F91               	movwf	sprintf@c& (0+255),b
 23114                           
 23115                           ;doprnt.c: 1527: break;
 23116  001C20  D009               	goto	l11872
 23117  001C22                     l11870:
 23118                           
 23119                           ; BSR set to: 0
 23120  001C22  5192               	movf	sprintf@flag& (0+255),w,b
 23121  001C24  0BC0               	andlw	192
 23122                           
 23123                           ; Switch size 1, requested type "space"
 23124                           ; Number of cases is 4, Range of values is 0 to 192
 23125                           ; switch strategies available:
 23126                           ; Name         Instructions Cycles
 23127                           ; simple_byte           13     7 (average)
 23128                           ;	Chosen strategy is simple_byte
 23129  001C26  E0A2               	bz	l11854
 23130  001C28  0A40               	xorlw	64	; case 64
 23131  001C2A  E0EE               	bz	l11866
 23132  001C2C  0AC0               	xorlw	192	; case 128
 23133  001C2E  E0C9               	bz	l11856
 23134  001C30  0A40               	xorlw	64	; case 192
 23135  001C32  E09C               	bz	l11854
 23136  001C34                     l11872:
 23137                           
 23138                           ; BSR set to: 0
 23139                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23140  001C34  C076  FFD9         	movff	sprintf@sp,fsr2l
 23141  001C38  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23142  001C3C  C091  FFDF         	movff	sprintf@c,indf2
 23143  001C40  D777               	goto	l11836
 23144  001C42                     l11876:
 23145                           
 23146                           ; BSR set to: 0
 23147  001C42  0789               	decf	sprintf@prec& (0+255),f,b
 23148  001C44  A0D8               	btfss	status,0,c
 23149  001C46  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23150  001C48  0100               	movlb	0	; () banked
 23151  001C4A  2989               	incf	sprintf@prec& (0+255),w,b
 23152  001C4C  B4D8               	btfsc	status,2,c
 23153  001C4E  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23154  001C50  E1E8               	bnz	l11870
 23155                           
 23156                           ; BSR set to: 0
 23157                           ;doprnt.c: 1532: }
 23158                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23159  001C52  A792               	btfss	sprintf@flag& (0+255),3,b
 23160  001C54  D00B               	goto	l11886
 23161                           
 23162                           ; BSR set to: 0
 23163  001C56  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23164  001C58  0A80               	xorlw	128
 23165  001C5A  0F80               	addlw	-128
 23166  001C5C  0E01               	movlw	1
 23167  001C5E  B4D8               	btfsc	status,2,c
 23168  001C60  5D8B               	subwf	sprintf@width& (0+255),w,b
 23169  001C62  E304               	bnc	l11886
 23170  001C64                     l11880:
 23171                           
 23172                           ; BSR set to: 0
 23173                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23174  001C64  C076  FFD9         	movff	sprintf@sp,fsr2l
 23175                           
 23176                           ; BSR set to: 0
 23177                           
 23178                           ; BSR set to: 0
 23179                           ;doprnt.c: 1538: while(--width);
 23180  001C68  D835               	call	PL46	;call to abstracted procedure
 23181  001C6A  E1FC               	bnz	l11880
 23182  001C6C                     l11886:
 23183                           
 23184                           ; BSR set to: 0
 23185  001C6C  D84B               	call	PL62	;call to abstracted procedure
 23186  001C6E  6791               	tstfsz	sprintf@c& (0+255),b
 23187  001C70  D4D1               	goto	l11552
 23188  001C72                     l11888:
 23189                           
 23190                           ; BSR set to: 0
 23191                           ;doprnt.c: 1545: *sp = 0;
 23192  001C72  C076  FFD9         	movff	sprintf@sp,fsr2l
 23193  001C76  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23194  001C7A  0E00               	movlw	0
 23195  001C7C  6EDF               	movwf	indf2,c
 23196                           
 23197                           ; BSR set to: 0
 23198  001C7E  0C00               	retlw	0
 23199  001C80                     __end_of_sprintf:
 23200                           	opt stack 0
 23201  001C80                     PL14:
 23202                           	opt stack 25
 23203  001C80  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23204  001C82  6EF7               	movwf	tblptrh,c
 23205  001C84  0009               	tblrd		*+
 23206  001C86  CFF5 F064          	movff	tablat,?___lldiv+4
 23207  001C8A  0009               	tblrd		*+
 23208  001C8C  CFF5 F065          	movff	tablat,?___lldiv+5
 23209  001C90  0009               	tblrd		*+
 23210  001C92  CFF5 F066          	movff	tablat,?___lldiv+6
 23211  001C96  000A               	tblrd		*-
 23212  001C98  CFF5 F067          	movff	tablat,?___lldiv+7
 23213  001C9C  0012               	return	
 23214  001C9E                     __end_ofPL14:
 23215                           	opt stack 0
 23216  001C9E                     PL20:
 23217                           	opt stack 25
 23218  001C9E  1592               	andwf	sprintf@flag& (0+255),w,b
 23219  001CA0  6F7E               	movwf	??_sprintf& (0+255),b
 23220  001CA2  0E08               	movlw	8
 23221  001CA4  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23222  001CA6  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23223  001CA8  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23224  001CAA  0A08               	xorlw	8
 23225  001CAC  0012               	return	
 23226  001CAE                     __end_ofPL20:
 23227                           	opt stack 0
 23228  001CAE                     PL24:
 23229                           	opt stack 25
 23230  001CAE  C08D  F060         	movff	sprintf@_val,?___lldiv
 23231  001CB2  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23232  001CB6  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23233  001CBA  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23234  001CBE  C089  F07E         	movff	sprintf@prec,??_sprintf
 23235  001CC2  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23236  001CC6  90D8               	bcf	status,0,c
 23237  001CC8  377E               	rlcf	??_sprintf& (0+255),f,b
 23238  001CCA  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23239  001CCC  90D8               	bcf	status,0,c
 23240  001CCE  377E               	rlcf	??_sprintf& (0+255),f,b
 23241  001CD0  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23242  001CD2  0012               	return	
 23243  001CD4                     __end_ofPL24:
 23244                           	opt stack 0
 23245  001CD4                     PL46:
 23246                           	opt stack 25
 23247  001CD4  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23248  001CD8  0E20               	movlw	32
 23249  001CDA  6EDF               	movwf	indf2,c
 23250  001CDC  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23251  001CDE  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23252  001CE0  078B               	decf	sprintf@width& (0+255),f,b
 23253  001CE2  A0D8               	btfss	status,0,c
 23254  001CE4  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23255  001CE6  0100               	movlb	0	; () banked
 23256  001CE8  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23257  001CEA  118B               	iorwf	sprintf@width& (0+255),w,b
 23258  001CEC  0012               	return	
 23259  001CEE                     __end_ofPL46:
 23260                           	opt stack 0
 23261  001CEE                     PL56:
 23262                           	opt stack 25
 23263  001CEE  6ED9               	movwf	fsr2l,c
 23264  001CF0  6ADA               	clrf	fsr2h,c
 23265  001CF2  CFDE F08D          	movff	postinc2,sprintf@_val
 23266  001CF6  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23267  001CFA  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23268  001CFE  CFDE F090          	movff	postinc2,sprintf@_val+3
 23269  001D02  0C04               	retlw	4
 23270  001D04                     __end_ofPL56:
 23271                           	opt stack 0
 23272  001D04                     PL62:
 23273                           	opt stack 25
 23274  001D04  C078  FFF6         	movff	sprintf@f,tblptrl
 23275  001D08  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23276  001D0C  4B78               	infsnz	sprintf@f& (0+255),f,b
 23277  001D0E  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23278  001D10  0008               	tblrd		*
 23279  001D12  CFF5 F091          	movff	tablat,sprintf@c
 23280  001D16  0100               	movlb	0	; () banked
 23281  001D18  0012               	return	
 23282  001D1A                     __end_ofPL62:
 23283                           	opt stack 0
 23284  001D1A                     PL64:
 23285                           	opt stack 25
 23286  001D1A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23287  001D1E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23288  001D22  0E20               	movlw	32
 23289  001D24  6EDF               	movwf	indf2,c
 23290  001D26  0C20               	retlw	32
 23291  001D28                     __end_ofPL64:
 23292                           	opt stack 0
 23293  001D28                     PL82:
 23294                           	opt stack 25
 23295  001D28  4B78               	infsnz	sprintf@f& (0+255),f,b
 23296  001D2A  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23297  001D2C  C078  FFF6         	movff	sprintf@f,tblptrl
 23298  001D30  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23299  001D34  0008               	tblrd		*
 23300  001D36  50F5               	movf	tablat,w,c
 23301  001D38  0012               	return	
 23302  001D3A                     __end_ofPL82:
 23303                           	opt stack 0
 23304  001D3A                     PL98:
 23305                           	opt stack 25
 23306  001D3A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23307  001D3E  0E30               	movlw	48
 23308  001D40  6EDF               	movwf	indf2,c
 23309  001D42  0C30               	retlw	48
 23310  001D44                     __end_ofPL98:
 23311                           	opt stack 0
 23312  001D44                     PL112:
 23313                           	opt stack 25
 23314  001D44  A0D8               	btfss	status,0,c
 23315  001D46  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23316  001D48  0100               	movlb	0	; () banked
 23317  001D4A  298B               	incf	sprintf@width& (0+255),w,b
 23318  001D4C  0012               	return	
 23319  001D4E                     __end_ofPL112:
 23320                           	opt stack 0
 23321                           tblptru	equ	0xFF8
 23322                           tblptrh	equ	0xFF7
 23323                           tblptrl	equ	0xFF6
 23324                           tablat	equ	0xFF5
 23325                           prodh	equ	0xFF4
 23326                           prodl	equ	0xFF3
 23327                           intcon	equ	0xFF2
 23328                           indf0	equ	0xFEF
 23329                           postinc0	equ	0xFEE
 23330                           fsr0h	equ	0xFEA
 23331                           fsr0l	equ	0xFE9
 23332                           wreg	equ	0xFE8
 23333                           indf1	equ	0xFE7
 23334                           postinc1	equ	0xFE6
 23335                           postdec1	equ	0xFE5
 23336                           fsr1h	equ	0xFE2
 23337                           fsr1l	equ	0xFE1
 23338                           indf2	equ	0xFDF
 23339                           postinc2	equ	0xFDE
 23340                           postdec2	equ	0xFDD
 23341                           plusw2	equ	0xFDB
 23342                           fsr2h	equ	0xFDA
 23343                           fsr2l	equ	0xFD9
 23344                           status	equ	0xFD8
 23345                           
 23346 ;; *************** function ___wmul *****************
 23347 ;; Defined at:
 23348 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23349 ;; Parameters:    Size  Location     Type
 23350 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23351 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23352 ;; Auto vars:     Size  Location     Type
 23353 ;;  product         2    4[BANK0 ] unsigned int 
 23354 ;; Return value:  Size  Location     Type
 23355 ;;                  2    0[BANK0 ] unsigned int 
 23356 ;; Registers used:
 23357 ;;		wreg, status,2, status,0, prodl, prodh
 23358 ;; Tracked objects:
 23359 ;;		On entry : F/0
 23360 ;;		On exit  : F/0
 23361 ;;		Unchanged: 0/0
 23362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23363 ;;      Params:         0       4       0       0       0       0       0
 23364 ;;      Locals:         0       2       0       0       0       0       0
 23365 ;;      Temps:          0       0       0       0       0       0       0
 23366 ;;      Totals:         0       6       0       0       0       0       0
 23367 ;;Total ram usage:        6 bytes
 23368 ;; Hardware stack levels used:    1
 23369 ;; Hardware stack levels required when called:    3
 23370 ;; This function calls:
 23371 ;;		Nothing
 23372 ;; This function is called by:
 23373 ;;		_sprintf
 23374 ;;		_atoi
 23375 ;; This function uses a non-reentrant model
 23376 ;;
 23377                           
 23378                           	psect	text57
 23379  0055C0                     __ptext57:
 23380                           	opt stack 0
 23381  0055C0                     ___wmul:
 23382                           	opt stack 25
 23383                           
 23384                           ; BSR set to: 0
 23385                           
 23386                           ; BSR set to: 0
 23387                           ;incstack = 0
 23388                           ;incstack = 0
 23389  0055C0  5160               	movf	___wmul@multiplier& (0+255),w,b
 23390  0055C2  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23391  0055C4  CFF3 F064          	movff	prodl,___wmul@product
 23392  0055C8  CFF4 F065          	movff	prodh,___wmul@product+1
 23393  0055CC  5160               	movf	___wmul@multiplier& (0+255),w,b
 23394  0055CE  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23395  0055D0  D808               	call	PL100	;call to abstracted procedure
 23396  0055D2  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23397  0055D4  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23398  0055D6  D805               	call	PL100	;call to abstracted procedure
 23399                           
 23400                           ; BSR set to: 0
 23401  0055D8  C064  F060         	movff	___wmul@product,?___wmul
 23402  0055DC  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23403                           
 23404                           ; BSR set to: 0
 23405  0055E0  0012               	return	
 23406  0055E2                     __end_of___wmul:
 23407                           	opt stack 0
 23408  0055E2                     PL100:
 23409                           	opt stack 25
 23410  0055E2  CFF3 FFF4          	movff	prodl,prodh
 23411  0055E6  6AF3               	clrf	prodl,c
 23412  0055E8  50F3               	movf	prodl,w,c
 23413  0055EA  2764               	addwf	___wmul@product& (0+255),f,b
 23414  0055EC  50F4               	movf	prodh,w,c
 23415  0055EE  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23416  0055F0  0012               	return	
 23417  0055F2                     __end_ofPL100:
 23418                           	opt stack 0
 23419                           tblptru	equ	0xFF8
 23420                           tblptrh	equ	0xFF7
 23421                           tblptrl	equ	0xFF6
 23422                           tablat	equ	0xFF5
 23423                           prodh	equ	0xFF4
 23424                           prodl	equ	0xFF3
 23425                           intcon	equ	0xFF2
 23426                           indf0	equ	0xFEF
 23427                           postinc0	equ	0xFEE
 23428                           fsr0h	equ	0xFEA
 23429                           fsr0l	equ	0xFE9
 23430                           wreg	equ	0xFE8
 23431                           indf1	equ	0xFE7
 23432                           postinc1	equ	0xFE6
 23433                           postdec1	equ	0xFE5
 23434                           fsr1h	equ	0xFE2
 23435                           fsr1l	equ	0xFE1
 23436                           indf2	equ	0xFDF
 23437                           postinc2	equ	0xFDE
 23438                           postdec2	equ	0xFDD
 23439                           plusw2	equ	0xFDB
 23440                           fsr2h	equ	0xFDA
 23441                           fsr2l	equ	0xFD9
 23442                           status	equ	0xFD8
 23443                           
 23444 ;; *************** function ___llmod *****************
 23445 ;; Defined at:
 23446 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23447 ;; Parameters:    Size  Location     Type
 23448 ;;  dividend        4   13[BANK0 ] unsigned long 
 23449 ;;  divisor         4   17[BANK0 ] unsigned long 
 23450 ;; Auto vars:     Size  Location     Type
 23451 ;;  counter         1   21[BANK0 ] unsigned char 
 23452 ;; Return value:  Size  Location     Type
 23453 ;;                  4   13[BANK0 ] unsigned long 
 23454 ;; Registers used:
 23455 ;;		wreg, status,2, status,0
 23456 ;; Tracked objects:
 23457 ;;		On entry : F/0
 23458 ;;		On exit  : F/0
 23459 ;;		Unchanged: 0/0
 23460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23461 ;;      Params:         0       8       0       0       0       0       0
 23462 ;;      Locals:         0       1       0       0       0       0       0
 23463 ;;      Temps:          0       0       0       0       0       0       0
 23464 ;;      Totals:         0       9       0       0       0       0       0
 23465 ;;Total ram usage:        9 bytes
 23466 ;; Hardware stack levels used:    1
 23467 ;; Hardware stack levels required when called:    3
 23468 ;; This function calls:
 23469 ;;		Nothing
 23470 ;; This function is called by:
 23471 ;;		_sprintf
 23472 ;;		_ultoa
 23473 ;; This function uses a non-reentrant model
 23474 ;;
 23475                           
 23476                           	psect	text58
 23477  00501C                     __ptext58:
 23478                           	opt stack 0
 23479  00501C                     ___llmod:
 23480                           	opt stack 24
 23481                           
 23482                           ; BSR set to: 0
 23483                           
 23484                           ; BSR set to: 0
 23485                           ;incstack = 0
 23486                           ;incstack = 0
 23487  00501C  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23488  00501E  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23489  005020  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23490  005022  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23491  005024  E023               	bz	l2329
 23492                           
 23493                           ; BSR set to: 0
 23494  005026  0E01               	movlw	1
 23495  005028  6F75               	movwf	___llmod@counter& (0+255),b
 23496  00502A  D006               	goto	l12846
 23497  00502C                     l12844:
 23498                           
 23499                           ; BSR set to: 0
 23500  00502C  90D8               	bcf	status,0,c
 23501  00502E  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23502  005030  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23503  005032  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23504  005034  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23505  005036  2B75               	incf	___llmod@counter& (0+255),f,b
 23506  005038                     l12846:
 23507                           
 23508                           ; BSR set to: 0
 23509  005038  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23510  00503A  D7F8               	goto	l12844
 23511  00503C                     l12848:
 23512                           
 23513                           ; BSR set to: 0
 23514  00503C  5171               	movf	___llmod@divisor& (0+255),w,b
 23515  00503E  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23516  005040  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23517  005042  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23518  005044  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23519  005046  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23520  005048  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23521  00504A  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23522  00504C  E308               	bnc	l12852
 23523                           
 23524                           ; BSR set to: 0
 23525  00504E  5171               	movf	___llmod@divisor& (0+255),w,b
 23526  005050  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23527  005052  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23528  005054  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23529  005056  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23530  005058  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23531  00505A  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23532  00505C  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23533  00505E                     l12852:
 23534                           
 23535                           ; BSR set to: 0
 23536  00505E  90D8               	bcf	status,0,c
 23537  005060  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23538  005062  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23539  005064  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23540  005066  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23541                           
 23542                           ; BSR set to: 0
 23543  005068  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23544  00506A  D7E8               	goto	l12848
 23545  00506C                     l2329:
 23546                           
 23547                           ; BSR set to: 0
 23548  00506C  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23549  005070  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23550  005074  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23551  005078  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23552                           
 23553                           ; BSR set to: 0
 23554  00507C  0012               	return	
 23555  00507E                     __end_of___llmod:
 23556                           	opt stack 0
 23557                           tblptru	equ	0xFF8
 23558                           tblptrh	equ	0xFF7
 23559                           tblptrl	equ	0xFF6
 23560                           tablat	equ	0xFF5
 23561                           prodh	equ	0xFF4
 23562                           prodl	equ	0xFF3
 23563                           intcon	equ	0xFF2
 23564                           indf0	equ	0xFEF
 23565                           postinc0	equ	0xFEE
 23566                           fsr0h	equ	0xFEA
 23567                           fsr0l	equ	0xFE9
 23568                           wreg	equ	0xFE8
 23569                           indf1	equ	0xFE7
 23570                           postinc1	equ	0xFE6
 23571                           postdec1	equ	0xFE5
 23572                           fsr1h	equ	0xFE2
 23573                           fsr1l	equ	0xFE1
 23574                           indf2	equ	0xFDF
 23575                           postinc2	equ	0xFDE
 23576                           postdec2	equ	0xFDD
 23577                           plusw2	equ	0xFDB
 23578                           fsr2h	equ	0xFDA
 23579                           fsr2l	equ	0xFD9
 23580                           status	equ	0xFD8
 23581                           
 23582 ;; *************** function ___lldiv *****************
 23583 ;; Defined at:
 23584 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23585 ;; Parameters:    Size  Location     Type
 23586 ;;  dividend        4    0[BANK0 ] unsigned long 
 23587 ;;  divisor         4    4[BANK0 ] unsigned long 
 23588 ;; Auto vars:     Size  Location     Type
 23589 ;;  quotient        4    8[BANK0 ] unsigned long 
 23590 ;;  counter         1   12[BANK0 ] unsigned char 
 23591 ;; Return value:  Size  Location     Type
 23592 ;;                  4    0[BANK0 ] unsigned long 
 23593 ;; Registers used:
 23594 ;;		wreg, status,2, status,0
 23595 ;; Tracked objects:
 23596 ;;		On entry : F/0
 23597 ;;		On exit  : F/0
 23598 ;;		Unchanged: 0/0
 23599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23600 ;;      Params:         0       8       0       0       0       0       0
 23601 ;;      Locals:         0       5       0       0       0       0       0
 23602 ;;      Temps:          0       0       0       0       0       0       0
 23603 ;;      Totals:         0      13       0       0       0       0       0
 23604 ;;Total ram usage:       13 bytes
 23605 ;; Hardware stack levels used:    1
 23606 ;; Hardware stack levels required when called:    3
 23607 ;; This function calls:
 23608 ;;		Nothing
 23609 ;; This function is called by:
 23610 ;;		_sprintf
 23611 ;;		_ultoa
 23612 ;; This function uses a non-reentrant model
 23613 ;;
 23614                           
 23615                           	psect	text59
 23616  004D26                     __ptext59:
 23617                           	opt stack 0
 23618  004D26                     ___lldiv:
 23619                           	opt stack 24
 23620                           
 23621                           ; BSR set to: 0
 23622                           
 23623                           ; BSR set to: 0
 23624                           ;incstack = 0
 23625                           ;incstack = 0
 23626  004D26  6B68               	clrf	___lldiv@quotient& (0+255),b
 23627  004D28  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 23628  004D2A  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 23629  004D2C  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 23630                           
 23631                           ; BSR set to: 0
 23632  004D2E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23633  004D30  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23634  004D32  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23635  004D34  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23636  004D36  E029               	bz	l2319
 23637                           
 23638                           ; BSR set to: 0
 23639  004D38  0E01               	movlw	1
 23640  004D3A  6F6C               	movwf	___lldiv@counter& (0+255),b
 23641  004D3C  D006               	goto	l12826
 23642  004D3E                     l12824:
 23643                           
 23644                           ; BSR set to: 0
 23645  004D3E  90D8               	bcf	status,0,c
 23646  004D40  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23647  004D42  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23648  004D44  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23649  004D46  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23650  004D48  2B6C               	incf	___lldiv@counter& (0+255),f,b
 23651  004D4A                     l12826:
 23652                           
 23653                           ; BSR set to: 0
 23654  004D4A  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23655  004D4C  D7F8               	goto	l12824
 23656  004D4E                     l12828:
 23657                           
 23658                           ; BSR set to: 0
 23659  004D4E  90D8               	bcf	status,0,c
 23660  004D50  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 23661  004D52  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23662  004D54  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23663  004D56  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23664                           
 23665                           ; BSR set to: 0
 23666  004D58  5164               	movf	___lldiv@divisor& (0+255),w,b
 23667  004D5A  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23668  004D5C  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23669  004D5E  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23670  004D60  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23671  004D62  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23672  004D64  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23673  004D66  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23674  004D68  E309               	bnc	l12836
 23675                           
 23676                           ; BSR set to: 0
 23677  004D6A  5164               	movf	___lldiv@divisor& (0+255),w,b
 23678  004D6C  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23679  004D6E  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23680  004D70  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23681  004D72  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23682  004D74  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23683  004D76  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23684  004D78  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23685                           
 23686                           ; BSR set to: 0
 23687  004D7A  8168               	bsf	___lldiv@quotient& (0+255),0,b
 23688  004D7C                     l12836:
 23689                           
 23690                           ; BSR set to: 0
 23691  004D7C  90D8               	bcf	status,0,c
 23692  004D7E  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23693  004D80  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23694  004D82  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23695  004D84  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23696                           
 23697                           ; BSR set to: 0
 23698  004D86  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 23699  004D88  D7E2               	goto	l12828
 23700  004D8A                     l2319:
 23701                           
 23702                           ; BSR set to: 0
 23703  004D8A  C068  F060         	movff	___lldiv@quotient,?___lldiv
 23704  004D8E  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23705  004D92  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23706  004D96  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23707                           
 23708                           ; BSR set to: 0
 23709  004D9A  0012               	return	
 23710  004D9C                     __end_of___lldiv:
 23711                           	opt stack 0
 23712                           tblptru	equ	0xFF8
 23713                           tblptrh	equ	0xFF7
 23714                           tblptrl	equ	0xFF6
 23715                           tablat	equ	0xFF5
 23716                           prodh	equ	0xFF4
 23717                           prodl	equ	0xFF3
 23718                           intcon	equ	0xFF2
 23719                           indf0	equ	0xFEF
 23720                           postinc0	equ	0xFEE
 23721                           fsr0h	equ	0xFEA
 23722                           fsr0l	equ	0xFE9
 23723                           wreg	equ	0xFE8
 23724                           indf1	equ	0xFE7
 23725                           postinc1	equ	0xFE6
 23726                           postdec1	equ	0xFE5
 23727                           fsr1h	equ	0xFE2
 23728                           fsr1l	equ	0xFE1
 23729                           indf2	equ	0xFDF
 23730                           postinc2	equ	0xFDE
 23731                           postdec2	equ	0xFDD
 23732                           plusw2	equ	0xFDB
 23733                           fsr2h	equ	0xFDA
 23734                           fsr2l	equ	0xFD9
 23735                           status	equ	0xFD8
 23736                           
 23737 ;; *************** function _isdigit *****************
 23738 ;; Defined at:
 23739 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23740 ;; Parameters:    Size  Location     Type
 23741 ;;  c               1    wreg     unsigned char 
 23742 ;; Auto vars:     Size  Location     Type
 23743 ;;  c               1    2[BANK0 ] unsigned char 
 23744 ;; Return value:  Size  Location     Type
 23745 ;;		None               void
 23746 ;; Registers used:
 23747 ;;		wreg, status,2, status,0
 23748 ;; Tracked objects:
 23749 ;;		On entry : 0/0
 23750 ;;		On exit  : F/0
 23751 ;;		Unchanged: 0/0
 23752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23753 ;;      Params:         0       0       0       0       0       0       0
 23754 ;;      Locals:         0       2       0       0       0       0       0
 23755 ;;      Temps:          0       1       0       0       0       0       0
 23756 ;;      Totals:         0       3       0       0       0       0       0
 23757 ;;Total ram usage:        3 bytes
 23758 ;; Hardware stack levels used:    1
 23759 ;; Hardware stack levels required when called:    3
 23760 ;; This function calls:
 23761 ;;		Nothing
 23762 ;; This function is called by:
 23763 ;;		_sprintf
 23764 ;;		_atoi
 23765 ;; This function uses a non-reentrant model
 23766 ;;
 23767                           
 23768                           	psect	text60
 23769  0056A4                     __ptext60:
 23770                           	opt stack 0
 23771  0056A4                     _isdigit:
 23772                           	opt stack 25
 23773                           
 23774                           ; BSR set to: 0
 23775                           ;incstack = 0
 23776                           ;incstack = 0
 23777                           ;isdigit@c stored from wreg
 23778  0056A4  CFE8 F062          	movff	wreg,isdigit@c
 23779  0056A8  0100               	movlb	0	; () banked
 23780  0056AA  6B61               	clrf	_isdigit$2888& (0+255),b
 23781                           
 23782                           ; BSR set to: 0
 23783  0056AC  0E3A               	movlw	58
 23784  0056AE  6162               	cpfslt	isdigit@c& (0+255),b
 23785  0056B0  D005               	goto	l12784
 23786                           
 23787                           ; BSR set to: 0
 23788  0056B2  0E2F               	movlw	47
 23789  0056B4  6562               	cpfsgt	isdigit@c& (0+255),b
 23790  0056B6  D002               	goto	l12784
 23791                           
 23792                           ; BSR set to: 0
 23793  0056B8  0E01               	movlw	1
 23794  0056BA  6F61               	movwf	_isdigit$2888& (0+255),b
 23795  0056BC                     l12784:
 23796                           
 23797                           ; BSR set to: 0
 23798  0056BC  C061  F060         	movff	_isdigit$2888,??_isdigit
 23799  0056C0  3160               	rrcf	??_isdigit& (0+255),w,b
 23800                           
 23801                           ; BSR set to: 0
 23802  0056C2  0012               	return	
 23803  0056C4                     __end_of_isdigit:
 23804                           	opt stack 0
 23805                           tblptru	equ	0xFF8
 23806                           tblptrh	equ	0xFF7
 23807                           tblptrl	equ	0xFF6
 23808                           tablat	equ	0xFF5
 23809                           prodh	equ	0xFF4
 23810                           prodl	equ	0xFF3
 23811                           intcon	equ	0xFF2
 23812                           indf0	equ	0xFEF
 23813                           postinc0	equ	0xFEE
 23814                           fsr0h	equ	0xFEA
 23815                           fsr0l	equ	0xFE9
 23816                           wreg	equ	0xFE8
 23817                           indf1	equ	0xFE7
 23818                           postinc1	equ	0xFE6
 23819                           postdec1	equ	0xFE5
 23820                           fsr1h	equ	0xFE2
 23821                           fsr1l	equ	0xFE1
 23822                           indf2	equ	0xFDF
 23823                           postinc2	equ	0xFDE
 23824                           postdec2	equ	0xFDD
 23825                           plusw2	equ	0xFDB
 23826                           fsr2h	equ	0xFDA
 23827                           fsr2l	equ	0xFD9
 23828                           status	equ	0xFD8
 23829                           
 23830 ;; *************** function _printFirmwareVersion *****************
 23831 ;; Defined at:
 23832 ;;		line 2729 in file "main.c"
 23833 ;; Parameters:    Size  Location     Type
 23834 ;;		None
 23835 ;; Auto vars:     Size  Location     Type
 23836 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 23837 ;; Return value:  Size  Location     Type
 23838 ;;		None               void
 23839 ;; Registers used:
 23840 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 23841 ;; Tracked objects:
 23842 ;;		On entry : 0/0
 23843 ;;		On exit  : 0/0
 23844 ;;		Unchanged: 0/0
 23845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23846 ;;      Params:         0       0       0       0       0       0       0
 23847 ;;      Locals:         0      20       0       0       0       0       0
 23848 ;;      Temps:          0       0       0       0       0       0       0
 23849 ;;      Totals:         0      20       0       0       0       0       0
 23850 ;;Total ram usage:       20 bytes
 23851 ;; Hardware stack levels used:    1
 23852 ;; Hardware stack levels required when called:    6
 23853 ;; This function calls:
 23854 ;;		_putsUSART
 23855 ;;		_WriteUSART
 23856 ;;		_itoa
 23857 ;; This function is called by:
 23858 ;;		_main
 23859 ;;		_doModeVerbose
 23860 ;; This function uses a non-reentrant model
 23861 ;;
 23862                           
 23863                           	psect	text61
 23864  004A18                     __ptext61:
 23865                           	opt stack 0
 23866  004A18                     _printFirmwareVersion:
 23867                           	opt stack 23
 23868                           
 23869                           ;main.c: 2730: char wrkbuf[20];
 23870                           ;main.c: 2731: putsUSART((char *) "Version: ");
 23871                           
 23872                           ; BSR set to: 0
 23873                           ;incstack = 0
 23874                           ;incstack = 0
 23875  004A18  0E7E               	movlw	high STR_247
 23876  004A1A  0100               	movlb	0	; () banked
 23877  004A1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23878  004A1E  0E9C               	movlw	low STR_247
 23879  004A20  6F61               	movwf	?_putsUSART& (0+255),b
 23880  004A22  ECC9  F028         	call	_putsUSART	;wreg free
 23881                           
 23882                           ;main.c: 2732: itoa(wrkbuf, 1, 10);
 23883  004A26  D838               	call	PL66	;call to abstracted procedure
 23884  004A28  0E01               	movlw	1
 23885  004A2A  6F72               	movwf	(?_itoa+2)& (0+255),b
 23886  004A2C  6B75               	clrf	(?_itoa+5)& (0+255),b
 23887  004A2E  0E0A               	movlw	10
 23888  004A30  6F74               	movwf	(?_itoa+4)& (0+255),b
 23889  004A32  ECA9  F02A         	call	_itoa	;wreg free
 23890                           
 23891                           ; BSR set to: 0
 23892                           ;main.c: 2733: putsUSART(wrkbuf);
 23893  004A36  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23894  004A38  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23895  004A3A  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23896  004A3C  6F61               	movwf	?_putsUSART& (0+255),b
 23897  004A3E  ECC9  F028         	call	_putsUSART	;wreg free
 23898  004A42                     l1210:
 23899  004A42  A2AC               	btfss	4012,1,c	;volatile
 23900  004A44  D7FE               	goto	l1210
 23901                           
 23902                           ;main.c: 2735: WriteUSART('.');
 23903  004A46  0E2E               	movlw	46
 23904  004A48  EC98  F02B         	call	_WriteUSART
 23905                           
 23906                           ;main.c: 2736: itoa(wrkbuf, 0, 10);
 23907  004A4C  D825               	call	PL66	;call to abstracted procedure
 23908  004A4E  6B72               	clrf	(?_itoa+2)& (0+255),b
 23909  004A50  6B75               	clrf	(?_itoa+5)& (0+255),b
 23910  004A52  0E0A               	movlw	10
 23911  004A54  6F74               	movwf	(?_itoa+4)& (0+255),b
 23912  004A56  ECA9  F02A         	call	_itoa	;wreg free
 23913                           
 23914                           ; BSR set to: 0
 23915                           ;main.c: 2737: putsUSART(wrkbuf);
 23916  004A5A  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23917  004A5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23918  004A5E  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23919  004A60  6F61               	movwf	?_putsUSART& (0+255),b
 23920  004A62  ECC9  F028         	call	_putsUSART	;wreg free
 23921  004A66                     l1213:
 23922  004A66  A2AC               	btfss	4012,1,c	;volatile
 23923  004A68  D7FE               	goto	l1213
 23924                           
 23925                           ;main.c: 2739: WriteUSART('.');
 23926  004A6A  0E2E               	movlw	46
 23927  004A6C  EC98  F02B         	call	_WriteUSART
 23928                           
 23929                           ;main.c: 2740: itoa(wrkbuf, 0, 10);
 23930  004A70  D813               	call	PL66	;call to abstracted procedure
 23931  004A72  6B72               	clrf	(?_itoa+2)& (0+255),b
 23932  004A74  6B75               	clrf	(?_itoa+5)& (0+255),b
 23933  004A76  0E0A               	movlw	10
 23934  004A78  6F74               	movwf	(?_itoa+4)& (0+255),b
 23935  004A7A  ECA9  F02A         	call	_itoa	;wreg free
 23936                           
 23937                           ; BSR set to: 0
 23938                           ;main.c: 2741: putsUSART(wrkbuf);
 23939  004A7E  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23940  004A80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23941  004A82  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23942  004A84  6F61               	movwf	?_putsUSART& (0+255),b
 23943  004A86  ECC9  F028         	call	_putsUSART	;wreg free
 23944                           
 23945                           ;main.c: 2742: putsUSART((char *) "\r\n");
 23946  004A8A  0E74               	movlw	high (STR_190+50)
 23947  004A8C  0100               	movlb	0	; () banked
 23948  004A8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23949  004A90  0E8A               	movlw	low (STR_190+50)
 23950  004A92  6F61               	movwf	?_putsUSART& (0+255),b
 23951  004A94  EFC9  F028         	goto	_putsUSART	;wreg free
 23952  004A98                     __end_of_printFirmwareVersion:
 23953                           	opt stack 0
 23954  004A98                     PL66:
 23955                           	opt stack 23
 23956  004A98  0100               	movlb	0	; () banked
 23957  004A9A  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23958  004A9C  6F71               	movwf	(?_itoa+1)& (0+255),b
 23959  004A9E  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23960  004AA0  6F70               	movwf	?_itoa& (0+255),b
 23961  004AA2  6B73               	clrf	(?_itoa+3)& (0+255),b
 23962  004AA4  0012               	return	
 23963  004AA6                     __end_ofPL66:
 23964                           	opt stack 0
 23965                           tblptru	equ	0xFF8
 23966                           tblptrh	equ	0xFF7
 23967                           tblptrl	equ	0xFF6
 23968                           tablat	equ	0xFF5
 23969                           prodh	equ	0xFF4
 23970                           prodl	equ	0xFF3
 23971                           intcon	equ	0xFF2
 23972                           indf0	equ	0xFEF
 23973                           postinc0	equ	0xFEE
 23974                           fsr0h	equ	0xFEA
 23975                           fsr0l	equ	0xFE9
 23976                           wreg	equ	0xFE8
 23977                           indf1	equ	0xFE7
 23978                           postinc1	equ	0xFE6
 23979                           postdec1	equ	0xFE5
 23980                           fsr1h	equ	0xFE2
 23981                           fsr1l	equ	0xFE1
 23982                           indf2	equ	0xFDF
 23983                           postinc2	equ	0xFDE
 23984                           postdec2	equ	0xFDD
 23985                           plusw2	equ	0xFDB
 23986                           fsr2h	equ	0xFDA
 23987                           fsr2l	equ	0xFD9
 23988                           status	equ	0xFD8
 23989                           
 23990 ;; *************** function _itoa *****************
 23991 ;; Defined at:
 23992 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23993 ;; Parameters:    Size  Location     Type
 23994 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 23995 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23996 ;;  val             2   18[BANK0 ] int 
 23997 ;;  base            2   20[BANK0 ] int 
 23998 ;; Auto vars:     Size  Location     Type
 23999 ;;  cp              2    0        PTR unsigned char 
 24000 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24001 ;; Return value:  Size  Location     Type
 24002 ;;                  2   16[BANK0 ] PTR unsigned char 
 24003 ;; Registers used:
 24004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24005 ;; Tracked objects:
 24006 ;;		On entry : F/0
 24007 ;;		On exit  : F/0
 24008 ;;		Unchanged: 0/0
 24009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24010 ;;      Params:         0       6       0       0       0       0       0
 24011 ;;      Locals:         0       2       0       0       0       0       0
 24012 ;;      Temps:          0       0       0       0       0       0       0
 24013 ;;      Totals:         0       8       0       0       0       0       0
 24014 ;;Total ram usage:        8 bytes
 24015 ;; Hardware stack levels used:    1
 24016 ;; Hardware stack levels required when called:    5
 24017 ;; This function calls:
 24018 ;;		_utoa
 24019 ;; This function is called by:
 24020 ;;		_receiveSendEventSLCAN
 24021 ;;		_findNodes
 24022 ;;		_printGUID
 24023 ;;		_printNodeFirmwareVersion
 24024 ;;		_printFirmwareVersion
 24025 ;; This function uses a non-reentrant model
 24026 ;;
 24027                           
 24028                           	psect	text62
 24029  005552                     __ptext62:
 24030                           	opt stack 0
 24031  005552                     _itoa:
 24032                           	opt stack 23
 24033                           
 24034                           ; BSR set to: 0
 24035                           
 24036                           ;incstack = 0
 24037                           ;incstack = 0
 24038  005552  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24039  005554  D00C               	goto	l12628
 24040                           
 24041                           ; BSR set to: 0
 24042  005556  C070  FFD9         	movff	itoa@buf,fsr2l
 24043  00555A  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24044  00555E  0E2D               	movlw	45
 24045  005560  6EDF               	movwf	indf2,c
 24046                           
 24047                           ; BSR set to: 0
 24048  005562  4B70               	infsnz	itoa@buf& (0+255),f,b
 24049  005564  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24050                           
 24051                           ; BSR set to: 0
 24052  005566  6D72               	negf	itoa@val& (0+255),b
 24053  005568  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24054  00556A  B0D8               	btfsc	status,0,c
 24055  00556C  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24056  00556E                     l12628:
 24057                           
 24058                           ; BSR set to: 0
 24059  00556E  C070  F067         	movff	itoa@buf,?_utoa
 24060  005572  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24061  005576  C072  F069         	movff	itoa@val,?_utoa+2
 24062  00557A  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24063  00557E  C074  F06B         	movff	itoa@base,?_utoa+4
 24064  005582  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24065  005586  EF8B  F023         	goto	_utoa	;wreg free
 24066  00558A                     __end_of_itoa:
 24067                           	opt stack 0
 24068                           tblptru	equ	0xFF8
 24069                           tblptrh	equ	0xFF7
 24070                           tblptrl	equ	0xFF6
 24071                           tablat	equ	0xFF5
 24072                           prodh	equ	0xFF4
 24073                           prodl	equ	0xFF3
 24074                           intcon	equ	0xFF2
 24075                           indf0	equ	0xFEF
 24076                           postinc0	equ	0xFEE
 24077                           fsr0h	equ	0xFEA
 24078                           fsr0l	equ	0xFE9
 24079                           wreg	equ	0xFE8
 24080                           indf1	equ	0xFE7
 24081                           postinc1	equ	0xFE6
 24082                           postdec1	equ	0xFE5
 24083                           fsr1h	equ	0xFE2
 24084                           fsr1l	equ	0xFE1
 24085                           indf2	equ	0xFDF
 24086                           postinc2	equ	0xFDE
 24087                           postdec2	equ	0xFDD
 24088                           plusw2	equ	0xFDB
 24089                           fsr2h	equ	0xFDA
 24090                           fsr2l	equ	0xFD9
 24091                           status	equ	0xFD8
 24092                           
 24093 ;; *************** function _utoa *****************
 24094 ;; Defined at:
 24095 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24096 ;; Parameters:    Size  Location     Type
 24097 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24098 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24099 ;;  val             2    9[BANK0 ] unsigned int 
 24100 ;;  base            2   11[BANK0 ] int 
 24101 ;; Auto vars:     Size  Location     Type
 24102 ;;  v               2   13[BANK0 ] unsigned int 
 24103 ;;  c               1   15[BANK0 ] unsigned char 
 24104 ;; Return value:  Size  Location     Type
 24105 ;;                  2    7[BANK0 ] PTR unsigned char 
 24106 ;; Registers used:
 24107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24108 ;; Tracked objects:
 24109 ;;		On entry : F/0
 24110 ;;		On exit  : F/0
 24111 ;;		Unchanged: 0/0
 24112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24113 ;;      Params:         0       6       0       0       0       0       0
 24114 ;;      Locals:         0       3       0       0       0       0       0
 24115 ;;      Temps:          0       0       0       0       0       0       0
 24116 ;;      Totals:         0       9       0       0       0       0       0
 24117 ;;Total ram usage:        9 bytes
 24118 ;; Hardware stack levels used:    1
 24119 ;; Hardware stack levels required when called:    4
 24120 ;; This function calls:
 24121 ;;		___lwdiv
 24122 ;;		___lwmod
 24123 ;; This function is called by:
 24124 ;;		_itoa
 24125 ;; This function uses a non-reentrant model
 24126 ;;
 24127                           
 24128                           	psect	text63
 24129  004716                     __ptext63:
 24130                           	opt stack 0
 24131  004716                     _utoa:
 24132                           	opt stack 23
 24133                           
 24134                           ; BSR set to: 0
 24135                           
 24136                           ; BSR set to: 0
 24137                           ;incstack = 0
 24138                           ;incstack = 0
 24139  004716  C069  F06D         	movff	utoa@val,utoa@v
 24140  00471A  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24141  00471E                     l12790:
 24142                           
 24143                           ; BSR set to: 0
 24144  00471E  C06D  F060         	movff	utoa@v,?___lwdiv
 24145  004722  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24146  004726  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24147  00472A  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24148  00472E  EC41  F029         	call	___lwdiv	;wreg free
 24149  004732  C060  F06D         	movff	?___lwdiv,utoa@v
 24150  004736  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24151                           
 24152                           ; BSR set to: 0
 24153  00473A  4B67               	infsnz	utoa@buf& (0+255),f,b
 24154  00473C  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24155                           
 24156                           ; BSR set to: 0
 24157  00473E  516E               	movf	(utoa@v+1)& (0+255),w,b
 24158  004740  116D               	iorwf	utoa@v& (0+255),w,b
 24159  004742  E1ED               	bnz	l12790
 24160                           
 24161                           ; BSR set to: 0
 24162  004744  C067  FFD9         	movff	utoa@buf,fsr2l
 24163  004748  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24164  00474C  0E00               	movlw	0
 24165  00474E  6ADF               	clrf	indf2,c
 24166                           
 24167                           ; BSR set to: 0
 24168  004750  0767               	decf	utoa@buf& (0+255),f,b
 24169  004752  A0D8               	btfss	status,0,c
 24170  004754  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24171  004756                     l12800:
 24172                           
 24173                           ; BSR set to: 0
 24174  004756  C069  F060         	movff	utoa@val,?___lwmod
 24175  00475A  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24176  00475E  C06B  F062         	movff	utoa@base,?___lwmod+2
 24177  004762  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24178  004766  EC6E  F02A         	call	___lwmod	;wreg free
 24179  00476A  5160               	movf	?___lwmod& (0+255),w,b
 24180  00476C  6F6F               	movwf	utoa@c& (0+255),b
 24181                           
 24182                           ; BSR set to: 0
 24183  00476E  C069  F060         	movff	utoa@val,?___lwdiv
 24184  004772  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24185  004776  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24186  00477A  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24187  00477E  EC41  F029         	call	___lwdiv	;wreg free
 24188  004782  C060  F069         	movff	?___lwdiv,utoa@val
 24189  004786  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24190                           
 24191                           ; BSR set to: 0
 24192  00478A  0E09               	movlw	9
 24193  00478C  656F               	cpfsgt	utoa@c& (0+255),b
 24194  00478E  D002               	goto	l2288
 24195                           
 24196                           ; BSR set to: 0
 24197  004790  0E07               	movlw	7
 24198  004792  276F               	addwf	utoa@c& (0+255),f,b
 24199  004794                     l2288:
 24200                           
 24201                           ; BSR set to: 0
 24202  004794  0E30               	movlw	48
 24203  004796  276F               	addwf	utoa@c& (0+255),f,b
 24204                           
 24205                           ; BSR set to: 0
 24206  004798  C067  FFD9         	movff	utoa@buf,fsr2l
 24207  00479C  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24208  0047A0  C06F  FFDF         	movff	utoa@c,indf2
 24209                           
 24210                           ; BSR set to: 0
 24211  0047A4  0767               	decf	utoa@buf& (0+255),f,b
 24212  0047A6  A0D8               	btfss	status,0,c
 24213  0047A8  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24214                           
 24215                           ; BSR set to: 0
 24216  0047AA  516A               	movf	(utoa@val+1)& (0+255),w,b
 24217  0047AC  1169               	iorwf	utoa@val& (0+255),w,b
 24218  0047AE  E1D3               	bnz	l12800
 24219                           
 24220                           ; BSR set to: 0
 24221                           ;	Return value of _utoa is never used
 24222  0047B0  4B67               	infsnz	utoa@buf& (0+255),f,b
 24223  0047B2  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24224                           
 24225                           ; BSR set to: 0
 24226  0047B4  0012               	return	
 24227  0047B6                     __end_of_utoa:
 24228                           	opt stack 0
 24229                           tblptru	equ	0xFF8
 24230                           tblptrh	equ	0xFF7
 24231                           tblptrl	equ	0xFF6
 24232                           tablat	equ	0xFF5
 24233                           prodh	equ	0xFF4
 24234                           prodl	equ	0xFF3
 24235                           intcon	equ	0xFF2
 24236                           indf0	equ	0xFEF
 24237                           postinc0	equ	0xFEE
 24238                           fsr0h	equ	0xFEA
 24239                           fsr0l	equ	0xFE9
 24240                           wreg	equ	0xFE8
 24241                           indf1	equ	0xFE7
 24242                           postinc1	equ	0xFE6
 24243                           postdec1	equ	0xFE5
 24244                           fsr1h	equ	0xFE2
 24245                           fsr1l	equ	0xFE1
 24246                           indf2	equ	0xFDF
 24247                           postinc2	equ	0xFDE
 24248                           postdec2	equ	0xFDD
 24249                           plusw2	equ	0xFDB
 24250                           fsr2h	equ	0xFDA
 24251                           fsr2l	equ	0xFD9
 24252                           status	equ	0xFD8
 24253                           
 24254 ;; *************** function ___lwmod *****************
 24255 ;; Defined at:
 24256 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24257 ;; Parameters:    Size  Location     Type
 24258 ;;  dividend        2    0[BANK0 ] unsigned int 
 24259 ;;  divisor         2    2[BANK0 ] unsigned int 
 24260 ;; Auto vars:     Size  Location     Type
 24261 ;;  counter         1    4[BANK0 ] unsigned char 
 24262 ;; Return value:  Size  Location     Type
 24263 ;;                  2    0[BANK0 ] unsigned int 
 24264 ;; Registers used:
 24265 ;;		wreg, status,2, status,0
 24266 ;; Tracked objects:
 24267 ;;		On entry : F/0
 24268 ;;		On exit  : F/0
 24269 ;;		Unchanged: 0/0
 24270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24271 ;;      Params:         0       4       0       0       0       0       0
 24272 ;;      Locals:         0       1       0       0       0       0       0
 24273 ;;      Temps:          0       0       0       0       0       0       0
 24274 ;;      Totals:         0       5       0       0       0       0       0
 24275 ;;Total ram usage:        5 bytes
 24276 ;; Hardware stack levels used:    1
 24277 ;; Hardware stack levels required when called:    3
 24278 ;; This function calls:
 24279 ;;		Nothing
 24280 ;; This function is called by:
 24281 ;;		_utoa
 24282 ;; This function uses a non-reentrant model
 24283 ;;
 24284                           
 24285                           	psect	text64
 24286  0054DC                     __ptext64:
 24287                           	opt stack 0
 24288  0054DC                     ___lwmod:
 24289                           	opt stack 23
 24290                           
 24291                           ; BSR set to: 0
 24292                           
 24293                           ; BSR set to: 0
 24294                           ;incstack = 0
 24295                           ;incstack = 0
 24296  0054DC  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24297  0054DE  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24298  0054E0  E017               	bz	l2412
 24299                           
 24300                           ; BSR set to: 0
 24301  0054E2  0E01               	movlw	1
 24302  0054E4  6F64               	movwf	___lwmod@counter& (0+255),b
 24303  0054E6  D004               	goto	l12884
 24304  0054E8                     l12882:
 24305                           
 24306                           ; BSR set to: 0
 24307  0054E8  90D8               	bcf	status,0,c
 24308  0054EA  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24309  0054EC  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24310  0054EE  2B64               	incf	___lwmod@counter& (0+255),f,b
 24311  0054F0                     l12884:
 24312                           
 24313                           ; BSR set to: 0
 24314  0054F0  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24315  0054F2  D7FA               	goto	l12882
 24316  0054F4                     l12886:
 24317                           
 24318                           ; BSR set to: 0
 24319  0054F4  5162               	movf	___lwmod@divisor& (0+255),w,b
 24320  0054F6  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24321  0054F8  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24322  0054FA  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24323  0054FC  E304               	bnc	l12890
 24324                           
 24325                           ; BSR set to: 0
 24326  0054FE  5162               	movf	___lwmod@divisor& (0+255),w,b
 24327  005500  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24328  005502  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24329  005504  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24330  005506                     l12890:
 24331                           
 24332                           ; BSR set to: 0
 24333  005506  90D8               	bcf	status,0,c
 24334  005508  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24335  00550A  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24336                           
 24337                           ; BSR set to: 0
 24338  00550C  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24339  00550E  D7F2               	goto	l12886
 24340  005510                     l2412:
 24341                           
 24342                           ; BSR set to: 0
 24343  005510  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24344  005514  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24345                           
 24346                           ; BSR set to: 0
 24347  005518  0012               	return	
 24348  00551A                     __end_of___lwmod:
 24349                           	opt stack 0
 24350                           tblptru	equ	0xFF8
 24351                           tblptrh	equ	0xFF7
 24352                           tblptrl	equ	0xFF6
 24353                           tablat	equ	0xFF5
 24354                           prodh	equ	0xFF4
 24355                           prodl	equ	0xFF3
 24356                           intcon	equ	0xFF2
 24357                           indf0	equ	0xFEF
 24358                           postinc0	equ	0xFEE
 24359                           fsr0h	equ	0xFEA
 24360                           fsr0l	equ	0xFE9
 24361                           wreg	equ	0xFE8
 24362                           indf1	equ	0xFE7
 24363                           postinc1	equ	0xFE6
 24364                           postdec1	equ	0xFE5
 24365                           fsr1h	equ	0xFE2
 24366                           fsr1l	equ	0xFE1
 24367                           indf2	equ	0xFDF
 24368                           postinc2	equ	0xFDE
 24369                           postdec2	equ	0xFDD
 24370                           plusw2	equ	0xFDB
 24371                           fsr2h	equ	0xFDA
 24372                           fsr2l	equ	0xFD9
 24373                           status	equ	0xFD8
 24374                           
 24375 ;; *************** function ___lwdiv *****************
 24376 ;; Defined at:
 24377 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24378 ;; Parameters:    Size  Location     Type
 24379 ;;  dividend        2    0[BANK0 ] unsigned int 
 24380 ;;  divisor         2    2[BANK0 ] unsigned int 
 24381 ;; Auto vars:     Size  Location     Type
 24382 ;;  quotient        2    5[BANK0 ] unsigned int 
 24383 ;;  counter         1    4[BANK0 ] unsigned char 
 24384 ;; Return value:  Size  Location     Type
 24385 ;;                  2    0[BANK0 ] unsigned int 
 24386 ;; Registers used:
 24387 ;;		wreg, status,2, status,0
 24388 ;; Tracked objects:
 24389 ;;		On entry : F/0
 24390 ;;		On exit  : F/0
 24391 ;;		Unchanged: 0/0
 24392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24393 ;;      Params:         0       4       0       0       0       0       0
 24394 ;;      Locals:         0       3       0       0       0       0       0
 24395 ;;      Temps:          0       0       0       0       0       0       0
 24396 ;;      Totals:         0       7       0       0       0       0       0
 24397 ;;Total ram usage:        7 bytes
 24398 ;; Hardware stack levels used:    1
 24399 ;; Hardware stack levels required when called:    3
 24400 ;; This function calls:
 24401 ;;		Nothing
 24402 ;; This function is called by:
 24403 ;;		_utoa
 24404 ;; This function uses a non-reentrant model
 24405 ;;
 24406                           
 24407                           	psect	text65
 24408  005282                     __ptext65:
 24409                           	opt stack 0
 24410  005282                     ___lwdiv:
 24411                           	opt stack 23
 24412                           
 24413                           ; BSR set to: 0
 24414                           
 24415                           ; BSR set to: 0
 24416                           ;incstack = 0
 24417                           ;incstack = 0
 24418  005282  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24419  005284  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24420                           
 24421                           ; BSR set to: 0
 24422  005286  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24423  005288  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24424  00528A  E01B               	bz	l2402
 24425                           
 24426                           ; BSR set to: 0
 24427  00528C  0E01               	movlw	1
 24428  00528E  6F64               	movwf	___lwdiv@counter& (0+255),b
 24429  005290  D004               	goto	l12864
 24430  005292                     l12862:
 24431                           
 24432                           ; BSR set to: 0
 24433  005292  90D8               	bcf	status,0,c
 24434  005294  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24435  005296  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24436  005298  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24437  00529A                     l12864:
 24438                           
 24439                           ; BSR set to: 0
 24440  00529A  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24441  00529C  D7FA               	goto	l12862
 24442  00529E                     l12866:
 24443                           
 24444                           ; BSR set to: 0
 24445  00529E  90D8               	bcf	status,0,c
 24446  0052A0  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24447  0052A2  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24448                           
 24449                           ; BSR set to: 0
 24450  0052A4  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24451  0052A6  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24452  0052A8  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24453  0052AA  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24454  0052AC  E305               	bnc	l12874
 24455                           
 24456                           ; BSR set to: 0
 24457  0052AE  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24458  0052B0  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24459  0052B2  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24460  0052B4  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24461                           
 24462                           ; BSR set to: 0
 24463  0052B6  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24464  0052B8                     l12874:
 24465                           
 24466                           ; BSR set to: 0
 24467  0052B8  90D8               	bcf	status,0,c
 24468  0052BA  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24469  0052BC  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24470                           
 24471                           ; BSR set to: 0
 24472  0052BE  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24473  0052C0  D7EE               	goto	l12866
 24474  0052C2                     l2402:
 24475                           
 24476                           ; BSR set to: 0
 24477  0052C2  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24478  0052C6  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24479                           
 24480                           ; BSR set to: 0
 24481  0052CA  0012               	return	
 24482  0052CC                     __end_of___lwdiv:
 24483                           	opt stack 0
 24484                           tblptru	equ	0xFF8
 24485                           tblptrh	equ	0xFF7
 24486                           tblptrl	equ	0xFF6
 24487                           tablat	equ	0xFF5
 24488                           prodh	equ	0xFF4
 24489                           prodl	equ	0xFF3
 24490                           intcon	equ	0xFF2
 24491                           indf0	equ	0xFEF
 24492                           postinc0	equ	0xFEE
 24493                           fsr0h	equ	0xFEA
 24494                           fsr0l	equ	0xFE9
 24495                           wreg	equ	0xFE8
 24496                           indf1	equ	0xFE7
 24497                           postinc1	equ	0xFE6
 24498                           postdec1	equ	0xFE5
 24499                           fsr1h	equ	0xFE2
 24500                           fsr1l	equ	0xFE1
 24501                           indf2	equ	0xFDF
 24502                           postinc2	equ	0xFDE
 24503                           postdec2	equ	0xFDD
 24504                           plusw2	equ	0xFDB
 24505                           fsr2h	equ	0xFDA
 24506                           fsr2l	equ	0xFD9
 24507                           status	equ	0xFD8
 24508                           
 24509 ;; *************** function _printMode *****************
 24510 ;; Defined at:
 24511 ;;		line 2750 in file "main.c"
 24512 ;; Parameters:    Size  Location     Type
 24513 ;;		None
 24514 ;; Auto vars:     Size  Location     Type
 24515 ;;		None
 24516 ;; Return value:  Size  Location     Type
 24517 ;;		None               void
 24518 ;; Registers used:
 24519 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24520 ;; Tracked objects:
 24521 ;;		On entry : 0/0
 24522 ;;		On exit  : 0/0
 24523 ;;		Unchanged: 0/0
 24524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24525 ;;      Params:         0       0       0       0       0       0       0
 24526 ;;      Locals:         0       0       0       0       0       0       0
 24527 ;;      Temps:          0       0       0       0       0       0       0
 24528 ;;      Totals:         0       0       0       0       0       0       0
 24529 ;;Total ram usage:        0 bytes
 24530 ;; Hardware stack levels used:    1
 24531 ;; Hardware stack levels required when called:    5
 24532 ;; This function calls:
 24533 ;;		_putsUSART
 24534 ;; This function is called by:
 24535 ;;		_main
 24536 ;; This function uses a non-reentrant model
 24537 ;;
 24538                           
 24539                           	psect	text66
 24540  004D9C                     __ptext66:
 24541                           	opt stack 0
 24542  004D9C                     _printMode:
 24543                           	opt stack 25
 24544                           
 24545                           ;main.c: 2751: putsUSART((char *) "Mode: ");
 24546                           
 24547                           ; BSR set to: 0
 24548                           ;incstack = 0
 24549                           ;incstack = 0
 24550  004D9C  0E7F               	movlw	high STR_249
 24551  004D9E  0100               	movlb	0	; () banked
 24552  004DA0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24553  004DA2  0E25               	movlw	low STR_249
 24554  004DA4  6F61               	movwf	?_putsUSART& (0+255),b
 24555  004DA6  ECC9  F028         	call	_putsUSART	;wreg free
 24556                           
 24557                           ;main.c: 2752: if (0 == mode) {
 24558  004DAA  0100               	movlb	0	; () banked
 24559  004DAC  67F1               	tstfsz	_mode& (0+255),b
 24560  004DAE  D007               	goto	l9984
 24561                           
 24562                           ; BSR set to: 0
 24563                           ;main.c: 2753: putsUSART((char *) "Verbose");
 24564  004DB0  0E7F               	movlw	high STR_250
 24565  004DB2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24566  004DB4  0E1D               	movlw	low STR_250
 24567  004DB6  6F61               	movwf	?_putsUSART& (0+255),b
 24568  004DB8  ECC9  F028         	call	_putsUSART	;wreg free
 24569                           
 24570                           ;main.c: 2754: } else if (1 == mode) {
 24571  004DBC  D023               	goto	l1220
 24572  004DBE                     l9984:
 24573                           
 24574                           ; BSR set to: 0
 24575  004DBE  05F1               	decf	_mode& (0+255),w,b
 24576  004DC0  E107               	bnz	l9988
 24577                           
 24578                           ; BSR set to: 0
 24579                           ;main.c: 2755: putsUSART((char *) "VSCP Driver");
 24580  004DC2  0E7E               	movlw	high STR_251
 24581  004DC4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24582  004DC6  0E7A               	movlw	low STR_251
 24583  004DC8  6F61               	movwf	?_putsUSART& (0+255),b
 24584  004DCA  ECC9  F028         	call	_putsUSART	;wreg free
 24585                           
 24586                           ;main.c: 2756: } else if (2 == mode) {
 24587  004DCE  D01A               	goto	l1220
 24588  004DD0                     l9988:
 24589                           
 24590                           ; BSR set to: 0
 24591  004DD0  51F1               	movf	_mode& (0+255),w,b
 24592  004DD2  0A02               	xorlw	2
 24593  004DD4  E107               	bnz	l9992
 24594                           
 24595                           ; BSR set to: 0
 24596                           ;main.c: 2757: putsUSART((char *) "SL Driver");
 24597  004DD6  0E7E               	movlw	high STR_252
 24598  004DD8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24599  004DDA  0EB0               	movlw	low STR_252
 24600  004DDC  6F61               	movwf	?_putsUSART& (0+255),b
 24601  004DDE  ECC9  F028         	call	_putsUSART	;wreg free
 24602                           
 24603                           ;main.c: 2758: } else if (3 == mode) {
 24604  004DE2  D010               	goto	l1220
 24605  004DE4                     l9992:
 24606                           
 24607                           ; BSR set to: 0
 24608  004DE4  51F1               	movf	_mode& (0+255),w,b
 24609  004DE6  0A03               	xorlw	3
 24610  004DE8  E107               	bnz	l9996
 24611                           
 24612                           ; BSR set to: 0
 24613                           ;main.c: 2759: putsUSART((char *) "VSCP Node");
 24614  004DEA  0E7E               	movlw	high STR_253
 24615  004DEC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24616  004DEE  0EA6               	movlw	low STR_253
 24617  004DF0  6F61               	movwf	?_putsUSART& (0+255),b
 24618  004DF2  ECC9  F028         	call	_putsUSART	;wreg free
 24619                           
 24620                           ;main.c: 2760: } else {
 24621  004DF6  D006               	goto	l1220
 24622  004DF8                     l9996:
 24623                           
 24624                           ; BSR set to: 0
 24625                           ;main.c: 2761: putsUSART((char *) "Unknown (Verbose used)");
 24626  004DF8  0E7C               	movlw	high STR_254
 24627  004DFA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24628  004DFC  0EEE               	movlw	low STR_254
 24629  004DFE  6F61               	movwf	?_putsUSART& (0+255),b
 24630  004E00  ECC9  F028         	call	_putsUSART	;wreg free
 24631  004E04                     l1220:
 24632                           
 24633                           ;main.c: 2762: }
 24634                           ;main.c: 2763: putsUSART((char *) "\r\n");
 24635  004E04  0E74               	movlw	high (STR_190+50)
 24636  004E06  0100               	movlb	0	; () banked
 24637  004E08  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24638  004E0A  0E8A               	movlw	low (STR_190+50)
 24639  004E0C  6F61               	movwf	?_putsUSART& (0+255),b
 24640  004E0E  EFC9  F028         	goto	_putsUSART	;wreg free
 24641  004E12                     __end_of_printMode:
 24642                           	opt stack 0
 24643                           tblptru	equ	0xFF8
 24644                           tblptrh	equ	0xFF7
 24645                           tblptrl	equ	0xFF6
 24646                           tablat	equ	0xFF5
 24647                           prodh	equ	0xFF4
 24648                           prodl	equ	0xFF3
 24649                           intcon	equ	0xFF2
 24650                           indf0	equ	0xFEF
 24651                           postinc0	equ	0xFEE
 24652                           fsr0h	equ	0xFEA
 24653                           fsr0l	equ	0xFE9
 24654                           wreg	equ	0xFE8
 24655                           indf1	equ	0xFE7
 24656                           postinc1	equ	0xFE6
 24657                           postdec1	equ	0xFE5
 24658                           fsr1h	equ	0xFE2
 24659                           fsr1l	equ	0xFE1
 24660                           indf2	equ	0xFDF
 24661                           postinc2	equ	0xFDE
 24662                           postdec2	equ	0xFDD
 24663                           plusw2	equ	0xFDB
 24664                           fsr2h	equ	0xFDA
 24665                           fsr2l	equ	0xFD9
 24666                           status	equ	0xFD8
 24667                           
 24668 ;; *************** function _putsUSART *****************
 24669 ;; Defined at:
 24670 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 24671 ;; Parameters:    Size  Location     Type
 24672 ;;  data            2    1[BANK0 ] PTR unsigned char 
 24673 ;;		 -> STR_255(3), STR_254(23), STR_253(10), STR_252(10), 
 24674 ;;		 -> STR_251(12), STR_250(8), STR_249(7), STR_248(3), 
 24675 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_247(10), STR_246(3), STR_243(20), 
 24676 ;;		 -> STR_242(3), STR_241(14), STR_240(3), STR_236(8), 
 24677 ;;		 -> STR_235(15), STR_234(67), STR_233(3), STR_232(27), 
 24678 ;;		 -> STR_231(67), STR_230(39), STR_229(62), STR_228(55), 
 24679 ;;		 -> STR_227(49), STR_226(67), STR_225(47), STR_224(47), 
 24680 ;;		 -> STR_223(34), STR_222(71), STR_221(20), STR_220(78), 
 24681 ;;		 -> STR_219(24), STR_218(77), STR_217(67), STR_216(69), 
 24682 ;;		 -> STR_215(47), STR_214(40), STR_213(39), STR_212(33), 
 24683 ;;		 -> STR_211(23), STR_210(56), STR_209(24), STR_208(44), 
 24684 ;;		 -> STR_207(50), STR_206(31), STR_205(50), STR_204(51), 
 24685 ;;		 -> STR_203(46), STR_202(44), STR_201(27), STR_200(39), 
 24686 ;;		 -> STR_199(39), STR_198(52), STR_197(54), STR_196(55), 
 24687 ;;		 -> STR_195(3), STR_192(24), STR_191(57), STR_190(53), 
 24688 ;;		 -> STR_189(58), STR_188(3), STR_185(25), STR_184(3), 
 24689 ;;		 -> STR_181(24), STR_180(3), STR_177(24), STR_176(3), 
 24690 ;;		 -> STR_173(24), STR_172(3), STR_169(23), STR_168(3), 
 24691 ;;		 -> STR_165(21), STR_164(3), STR_161(22), STR_160(3), 
 24692 ;;		 -> STR_157(17), STR_156(3), STR_153(18), STR_152(4), 
 24693 ;;		 -> STR_151(11), STR_150(2), STR_147(7), STR_144(7), 
 24694 ;;		 -> STR_141(9), STR_138(7), STR_135(8), STR_132(7), 
 24695 ;;		 -> STR_131(2), STR_130(2), STR_129(6), STR_128(8), 
 24696 ;;		 -> STR_127(8), STR_126(20), STR_125(27), STR_124(6), 
 24697 ;;		 -> STR_123(33), STR_120(26), STR_118(32), STR_116(28), 
 24698 ;;		 -> STR_111(40), STR_109(44), STR_106(39), STR_104(36), 
 24699 ;;		 -> STR_102(37), STR_100(40), STR_98(37), STR_97(50), 
 24700 ;;		 -> STR_94(41), STR_92(38), STR_90(39), STR_88(42), 
 24701 ;;		 -> STR_86(39), STR_85(66), STR_82(3), STR_79(20), 
 24702 ;;		 -> STR_77(33), STR_76(35), STR_75(24), STR_73(33), 
 24703 ;;		 -> STR_71(24), STR_68(54), STR_67(6), STR_66(3), 
 24704 ;;		 -> STR_61(34), STR_60(3), STR_57(4), wrkbuf(80), 
 24705 ;;		 -> STR_52(15), STR_50(33), STR_48(24), STR_44(6), 
 24706 ;;		 -> STR_40(18), STR_39(6), STR_37(33), STR_36(6), 
 24707 ;;		 -> STR_28(24), STR_27(18), STR_26(20), STR_25(25), 
 24708 ;;		 -> STR_24(22), STR_23(19), STR_22(20), STR_21(20), 
 24709 ;;		 -> STR_19(6), STR_17(6), STR_15(6), STR_13(6), 
 24710 ;;		 -> STR_11(6), STR_9(6), STR_7(31), STR_5(29), 
 24711 ;;		 -> STR_4(55), STR_3(35), STR_2(53), STR_1(37), 
 24712 ;; Auto vars:     Size  Location     Type
 24713 ;;		None
 24714 ;; Return value:  Size  Location     Type
 24715 ;;		None               void
 24716 ;; Registers used:
 24717 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24718 ;; Tracked objects:
 24719 ;;		On entry : F/0
 24720 ;;		On exit  : 0/0
 24721 ;;		Unchanged: 0/0
 24722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24723 ;;      Params:         0       2       0       0       0       0       0
 24724 ;;      Locals:         0       0       0       0       0       0       0
 24725 ;;      Temps:          0       2       0       0       0       0       0
 24726 ;;      Totals:         0       4       0       0       0       0       0
 24727 ;;Total ram usage:        4 bytes
 24728 ;; Hardware stack levels used:    1
 24729 ;; Hardware stack levels required when called:    4
 24730 ;; This function calls:
 24731 ;;		_WriteUSART
 24732 ;; This function is called by:
 24733 ;;		_main
 24734 ;;		_doModeVerbose
 24735 ;;		_doModeSLCAN
 24736 ;;		_receivePrintEventVerbose
 24737 ;;		_receiveSendEventSLCAN
 24738 ;;		_printStatistics
 24739 ;;		_printErrors
 24740 ;;		_printHelp
 24741 ;;		_findNodes
 24742 ;;		_printGUID
 24743 ;;		_printMDF
 24744 ;;		_printNodeFirmwareVersion
 24745 ;;		_printFirmwareVersion
 24746 ;;		_printMode
 24747 ;; This function uses a non-reentrant model
 24748 ;;
 24749                           
 24750                           	psect	text67
 24751  005192                     __ptext67:
 24752                           	opt stack 0
 24753  005192                     _putsUSART:
 24754                           	opt stack 24
 24755  005192                     l1820:
 24756  005192  A2AC               	btfss	4012,1,c	;volatile
 24757  005194  D7FE               	goto	l1820
 24758  005196  0100               	movlb	0	; () banked
 24759  005198  5161               	movf	putsUSART@data& (0+255),w,b
 24760  00519A  6EF6               	movwf	tblptrl,c
 24761  00519C  6EE9               	movwf	fsr0l,c
 24762  00519E  0E05               	movlw	(high __ramtop+-1)
 24763  0051A0  6EEA               	movwf	fsr0h,c
 24764  0051A2  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24765  0051A4  64EA               	cpfsgt	fsr0h,c
 24766  0051A6  D003               	bra	u12007
 24767  0051A8  6EEA               	movwf	fsr0h,c
 24768  0051AA  50EF               	movf	indf0,w,c
 24769  0051AC  D003               	bra	u12000
 24770  0051AE                     u12007:
 24771  0051AE  6EF7               	movwf	tblptrh,c
 24772  0051B0  0008               	tblrd		*
 24773  0051B2  50F5               	movf	tablat,w,c
 24774  0051B4                     u12000:
 24775  0051B4  EC98  F02B         	call	_WriteUSART
 24776  0051B8  0100               	movlb	0	; () banked
 24777  0051BA  5161               	movf	putsUSART@data& (0+255),w,b
 24778  0051BC  6F63               	movwf	??_putsUSART& (0+255),b
 24779  0051BE  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24780  0051C0  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 24781  0051C2  4B61               	infsnz	putsUSART@data& (0+255),f,b
 24782  0051C4  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 24783  0051C6  5163               	movf	??_putsUSART& (0+255),w,b
 24784  0051C8  6EF6               	movwf	tblptrl,c
 24785  0051CA  6EE9               	movwf	fsr0l,c
 24786  0051CC  0E05               	movlw	(high __ramtop+-1)
 24787  0051CE  6EEA               	movwf	fsr0h,c
 24788  0051D0  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 24789  0051D2  64EA               	cpfsgt	fsr0h,c
 24790  0051D4  D003               	bra	u12017
 24791  0051D6  6EEA               	movwf	fsr0h,c
 24792  0051D8  50EF               	movf	indf0,w,c
 24793  0051DA  D003               	bra	u12010
 24794  0051DC                     u12017:
 24795  0051DC  6EF7               	movwf	tblptrh,c
 24796  0051DE  0008               	tblrd		*
 24797  0051E0  50F5               	movf	tablat,w,c
 24798  0051E2                     u12010:
 24799  0051E2  0900               	iorlw	0
 24800  0051E4  B4D8               	btfsc	status,2,c
 24801  0051E6  0012               	return	
 24802  0051E8  D7D4               	goto	l1820
 24803  0051EA                     __end_of_putsUSART:
 24804                           	opt stack 0
 24805                           tblptru	equ	0xFF8
 24806                           tblptrh	equ	0xFF7
 24807                           tblptrl	equ	0xFF6
 24808                           tablat	equ	0xFF5
 24809                           prodh	equ	0xFF4
 24810                           prodl	equ	0xFF3
 24811                           intcon	equ	0xFF2
 24812                           indf0	equ	0xFEF
 24813                           postinc0	equ	0xFEE
 24814                           fsr0h	equ	0xFEA
 24815                           fsr0l	equ	0xFE9
 24816                           wreg	equ	0xFE8
 24817                           indf1	equ	0xFE7
 24818                           postinc1	equ	0xFE6
 24819                           postdec1	equ	0xFE5
 24820                           fsr1h	equ	0xFE2
 24821                           fsr1l	equ	0xFE1
 24822                           indf2	equ	0xFDF
 24823                           postinc2	equ	0xFDE
 24824                           postdec2	equ	0xFDD
 24825                           plusw2	equ	0xFDB
 24826                           fsr2h	equ	0xFDA
 24827                           fsr2l	equ	0xFD9
 24828                           status	equ	0xFD8
 24829                           
 24830 ;; *************** function _WriteUSART *****************
 24831 ;; Defined at:
 24832 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24833 ;; Parameters:    Size  Location     Type
 24834 ;;  data            1    wreg     unsigned char 
 24835 ;; Auto vars:     Size  Location     Type
 24836 ;;  data            1    0[BANK0 ] unsigned char 
 24837 ;; Return value:  Size  Location     Type
 24838 ;;		None               void
 24839 ;; Registers used:
 24840 ;;		wreg
 24841 ;; Tracked objects:
 24842 ;;		On entry : 0/0
 24843 ;;		On exit  : 0/0
 24844 ;;		Unchanged: 0/0
 24845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24846 ;;      Params:         0       0       0       0       0       0       0
 24847 ;;      Locals:         0       1       0       0       0       0       0
 24848 ;;      Temps:          0       0       0       0       0       0       0
 24849 ;;      Totals:         0       1       0       0       0       0       0
 24850 ;;Total ram usage:        1 bytes
 24851 ;; Hardware stack levels used:    1
 24852 ;; Hardware stack levels required when called:    3
 24853 ;; This function calls:
 24854 ;;		Nothing
 24855 ;; This function is called by:
 24856 ;;		_doModeVerbose
 24857 ;;		_sendEscapedUartData
 24858 ;;		_sendVSCPDriverErrorFrame
 24859 ;;		_sendVSCPDriverAck
 24860 ;;		_sendVSCPDriverNack
 24861 ;;		_sendVSCPDriverCommandReply
 24862 ;;		_receiveSendEventCANAL
 24863 ;;		_receiveSendMultiEventCANAL
 24864 ;;		_sendVSCPModeCapabilities
 24865 ;;		_receiveSendEventSLCAN
 24866 ;;		_printBinary
 24867 ;;		_printFirmwareVersion
 24868 ;;		_putsUSART
 24869 ;; This function uses a non-reentrant model
 24870 ;;
 24871                           
 24872                           	psect	text68
 24873  005730                     __ptext68:
 24874                           	opt stack 0
 24875  005730                     _WriteUSART:
 24876                           	opt stack 25
 24877                           
 24878                           ;incstack = 0
 24879                           ;incstack = 0
 24880                           ;WriteUSART@data stored from wreg
 24881  005730  CFE8 F060          	movff	wreg,WriteUSART@data
 24882  005734  ACAC               	btfss	4012,6,c	;volatile
 24883  005736  D003               	goto	l11898
 24884  005738  90AC               	bcf	4012,0,c	;volatile
 24885  00573A  B23D               	btfsc	_USART_Status,1,c
 24886  00573C  80AC               	bsf	4012,0,c	;volatile
 24887  00573E                     l11898:
 24888  00573E  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 24889  005742  0012               	return	
 24890  005744                     __end_of_WriteUSART:
 24891                           	opt stack 0
 24892                           tblptru	equ	0xFF8
 24893                           tblptrh	equ	0xFF7
 24894                           tblptrl	equ	0xFF6
 24895                           tablat	equ	0xFF5
 24896                           prodh	equ	0xFF4
 24897                           prodl	equ	0xFF3
 24898                           intcon	equ	0xFF2
 24899                           indf0	equ	0xFEF
 24900                           postinc0	equ	0xFEE
 24901                           fsr0h	equ	0xFEA
 24902                           fsr0l	equ	0xFE9
 24903                           wreg	equ	0xFE8
 24904                           indf1	equ	0xFE7
 24905                           postinc1	equ	0xFE6
 24906                           postdec1	equ	0xFE5
 24907                           fsr1h	equ	0xFE2
 24908                           fsr1l	equ	0xFE1
 24909                           indf2	equ	0xFDF
 24910                           postinc2	equ	0xFDE
 24911                           postdec2	equ	0xFDD
 24912                           plusw2	equ	0xFDB
 24913                           fsr2h	equ	0xFDA
 24914                           fsr2l	equ	0xFD9
 24915                           status	equ	0xFD8
 24916                           
 24917 ;; *************** function _init *****************
 24918 ;; Defined at:
 24919 ;;		line 375 in file "main.c"
 24920 ;; Parameters:    Size  Location     Type
 24921 ;;		None
 24922 ;; Auto vars:     Size  Location     Type
 24923 ;;		None
 24924 ;; Return value:  Size  Location     Type
 24925 ;;		None               void
 24926 ;; Registers used:
 24927 ;;		wreg, status,2, status,0, cstack
 24928 ;; Tracked objects:
 24929 ;;		On entry : E/0
 24930 ;;		On exit  : F/0
 24931 ;;		Unchanged: 0/0
 24932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24933 ;;      Params:         0       0       0       0       0       0       0
 24934 ;;      Locals:         0       0       0       0       0       0       0
 24935 ;;      Temps:          0       0       0       0       0       0       0
 24936 ;;      Totals:         0       0       0       0       0       0       0
 24937 ;;Total ram usage:        0 bytes
 24938 ;; Hardware stack levels used:    1
 24939 ;; Hardware stack levels required when called:    5
 24940 ;; This function calls:
 24941 ;;		_WriteTimer0
 24942 ;;		_init_app_ram
 24943 ;;		_OpenUSART
 24944 ;;		_OpenTimer0
 24945 ;;		_ECANInitialize
 24946 ;; This function is called by:
 24947 ;;		_main
 24948 ;; This function uses a non-reentrant model
 24949 ;;
 24950                           
 24951                           	psect	text69
 24952  0052CC                     __ptext69:
 24953                           	opt stack 0
 24954  0052CC                     _init:
 24955                           	opt stack 25
 24956                           
 24957                           ;main.c: 377: init_app_ram();
 24958                           
 24959                           ;incstack = 0
 24960                           ;incstack = 0
 24961  0052CC  ECF5  F028         	call	_init_app_ram	;wreg free
 24962                           
 24963                           ; BSR set to: 1
 24964                           ;main.c: 380: OSCCONbits.IRCF0 = 1;
 24965  0052D0  88D3               	bsf	4051,4,c	;volatile
 24966                           
 24967                           ; BSR set to: 1
 24968                           ;main.c: 381: OSCCONbits.IRCF1 = 1;
 24969  0052D2  8AD3               	bsf	4051,5,c	;volatile
 24970                           
 24971                           ; BSR set to: 1
 24972                           ;main.c: 382: OSCCONbits.IRCF2 = 1;
 24973  0052D4  8CD3               	bsf	4051,6,c	;volatile
 24974                           
 24975                           ; BSR set to: 1
 24976                           ;main.c: 383: OSCTUNEbits.PLLEN = 1;
 24977  0052D6  8C9B               	bsf	3995,6,c	;volatile
 24978                           
 24979                           ; BSR set to: 1
 24980                           ;main.c: 385: TRISBbits.RB2 = 0;
 24981  0052D8  9493               	bcf	3987,2,c	;volatile
 24982                           
 24983                           ; BSR set to: 1
 24984                           ;main.c: 386: TRISBbits.RB3 = 1;
 24985  0052DA  8693               	bsf	3987,3,c	;volatile
 24986                           
 24987                           ; BSR set to: 1
 24988                           ;main.c: 388: TRISCbits.RC1 = 0;
 24989  0052DC  9294               	bcf	3988,1,c	;volatile
 24990                           
 24991                           ; BSR set to: 1
 24992                           ;main.c: 389: TRISCbits.RC6 = 0;
 24993  0052DE  9C94               	bcf	3988,6,c	;volatile
 24994                           
 24995                           ; BSR set to: 1
 24996                           ;main.c: 390: TRISCbits.RC7 = 1;
 24997  0052E0  8E94               	bsf	3988,7,c	;volatile
 24998                           
 24999                           ;main.c: 394: OpenUSART( 0b01111111 &
 25000                           ;main.c: 395: 0b11111111 &
 25001                           ;main.c: 396: 0b11111110 &
 25002                           ;main.c: 397: 0b11111101 &
 25003                           ;main.c: 398: 0b11111111,
 25004                           ;main.c: 399: 21 );
 25005  0052E2  0100               	movlb	0	; () banked
 25006  0052E4  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25007  0052E6  0E15               	movlw	21
 25008  0052E8  6F60               	movwf	?_OpenUSART& (0+255),b
 25009  0052EA  0E7C               	movlw	124
 25010  0052EC  EC6F  F028         	call	_OpenUSART
 25011                           
 25012                           ; BSR set to: 0
 25013                           ;main.c: 401: RCIF = 0;
 25014  0052F0  9A9E               	bcf	3998,5,c	;volatile
 25015                           
 25016                           ; BSR set to: 0
 25017                           ;main.c: 402: RCIP = 0;
 25018  0052F2  9A9F               	bcf	3999,5,c	;volatile
 25019                           
 25020                           ; BSR set to: 0
 25021                           ;main.c: 403: RCIE = 1;
 25022  0052F4  8A9D               	bsf	3997,5,c	;volatile
 25023                           
 25024                           ; BSR set to: 0
 25025                           ;main.c: 404: PEIE = 1;
 25026  0052F6  8CF2               	bsf	intcon,6,c	;volatile
 25027                           
 25028                           ; BSR set to: 0
 25029                           ;main.c: 407: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25030  0052F8  0E92               	movlw	146
 25031  0052FA  EC62  F02B         	call	_OpenTimer0
 25032                           
 25033                           ; BSR set to: 0
 25034                           ;main.c: 408: WriteTimer0(0xfb1d);
 25035  0052FE  0EFB               	movlw	251
 25036  005300  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25037  005302  0E1D               	movlw	29
 25038  005304  6F60               	movwf	?_WriteTimer0& (0+255),b
 25039  005306  ECA2  F02B         	call	_WriteTimer0	;wreg free
 25040                           
 25041                           ;main.c: 411: ECANInitialize();
 25042  00530A  ECDB  F025         	call	_ECANInitialize	;wreg free
 25043                           
 25044                           ; BSR set to: 0
 25045                           ;main.c: 435: RXBnIE = 1;
 25046  00530E  82A3               	bsf	4003,1,c	;volatile
 25047                           
 25048                           ; BSR set to: 0
 25049                           ;main.c: 436: ERRIE = 1;
 25050  005310  8AA3               	bsf	4003,5,c	;volatile
 25051                           
 25052                           ; BSR set to: 0
 25053                           ;main.c: 438: (INTCONbits.GIE = 1);
 25054  005312  8EF2               	bsf	intcon,7,c	;volatile
 25055                           
 25056                           ; BSR set to: 0
 25057  005314  0012               	return	
 25058  005316                     __end_of_init:
 25059                           	opt stack 0
 25060                           tblptru	equ	0xFF8
 25061                           tblptrh	equ	0xFF7
 25062                           tblptrl	equ	0xFF6
 25063                           tablat	equ	0xFF5
 25064                           prodh	equ	0xFF4
 25065                           prodl	equ	0xFF3
 25066                           intcon	equ	0xFF2
 25067                           indf0	equ	0xFEF
 25068                           postinc0	equ	0xFEE
 25069                           fsr0h	equ	0xFEA
 25070                           fsr0l	equ	0xFE9
 25071                           wreg	equ	0xFE8
 25072                           indf1	equ	0xFE7
 25073                           postinc1	equ	0xFE6
 25074                           postdec1	equ	0xFE5
 25075                           fsr1h	equ	0xFE2
 25076                           fsr1l	equ	0xFE1
 25077                           indf2	equ	0xFDF
 25078                           postinc2	equ	0xFDE
 25079                           postdec2	equ	0xFDD
 25080                           plusw2	equ	0xFDB
 25081                           fsr2h	equ	0xFDA
 25082                           fsr2l	equ	0xFD9
 25083                           status	equ	0xFD8
 25084                           
 25085 ;; *************** function _ECANInitialize *****************
 25086 ;; Defined at:
 25087 ;;		line 168 in file "ECAN.c"
 25088 ;; Parameters:    Size  Location     Type
 25089 ;;		None
 25090 ;; Auto vars:     Size  Location     Type
 25091 ;;		None
 25092 ;; Return value:  Size  Location     Type
 25093 ;;		None               void
 25094 ;; Registers used:
 25095 ;;		wreg, status,2, status,0, cstack
 25096 ;; Tracked objects:
 25097 ;;		On entry : F/0
 25098 ;;		On exit  : F/0
 25099 ;;		Unchanged: 0/0
 25100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25101 ;;      Params:         0       0       0       0       0       0       0
 25102 ;;      Locals:         0       0       0       0       0       0       0
 25103 ;;      Temps:          0       0       0       0       0       0       0
 25104 ;;      Totals:         0       0       0       0       0       0       0
 25105 ;;Total ram usage:        0 bytes
 25106 ;; Hardware stack levels used:    1
 25107 ;; Hardware stack levels required when called:    4
 25108 ;; This function calls:
 25109 ;;		_ECANSetOperationMode
 25110 ;; This function is called by:
 25111 ;;		_init
 25112 ;; This function uses a non-reentrant model
 25113 ;;
 25114                           
 25115                           	psect	text70
 25116  004BB6                     __ptext70:
 25117                           	opt stack 0
 25118  004BB6                     _ECANInitialize:
 25119                           	opt stack 25
 25120                           
 25121                           ; BSR set to: 0
 25122                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25123                           
 25124                           ; BSR set to: 0
 25125                           ;incstack = 0
 25126                           ;incstack = 0
 25127  004BB6  0E80               	movlw	128
 25128  004BB8  EC80  F02B         	call	_ECANSetOperationMode
 25129                           
 25130                           ; BSR set to: 0
 25131                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25132  004BBC  0E09               	movlw	9
 25133  004BBE  6E70               	movwf	3952,c	;volatile
 25134                           
 25135                           ; BSR set to: 0
 25136                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25137  004BC0  0EFC               	movlw	252
 25138  004BC2  6E71               	movwf	3953,c	;volatile
 25139                           
 25140                           ; BSR set to: 0
 25141                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25142                           ;ECAN.c: 181: (0 << 6) |
 25143                           ;ECAN.c: 182: (2-1);
 25144  004BC4  0E01               	movlw	1
 25145  004BC6  6E72               	movwf	3954,c	;volatile
 25146                           
 25147                           ; BSR set to: 0
 25148                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25149  004BC8  0E20               	movlw	32
 25150  004BCA  6E73               	movwf	3955,c	;volatile
 25151                           
 25152                           ; BSR set to: 0
 25153                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25154  004BCC  8E77               	bsf	3959,7,c	;volatile
 25155                           
 25156                           ; BSR set to: 0
 25157                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25158  004BCE  9C77               	bcf	3959,6,c	;volatile
 25159                           
 25160                           ; BSR set to: 0
 25161                           ;ECAN.c: 205: RXB0CON = 0;
 25162  004BD0  6A60               	clrf	3936,c	;volatile
 25163                           
 25164                           ; BSR set to: 0
 25165                           ;ECAN.c: 211: RXB1CON = 0;
 25166  004BD2  010F               	movlb	15	; () banked
 25167  004BD4  6B50               	clrf	80,b	;volatile
 25168                           
 25169                           ; BSR set to: 15
 25170                           ;ECAN.c: 221: B0CON = 0;
 25171  004BD6  010E               	movlb	14	; () banked
 25172  004BD8  6B20               	clrf	32,b	;volatile
 25173                           
 25174                           ; BSR set to: 14
 25175                           ;ECAN.c: 231: B1CON = 0;
 25176  004BDA  6B30               	clrf	48,b	;volatile
 25177                           
 25178                           ; BSR set to: 14
 25179                           ;ECAN.c: 241: B2CON = 0;
 25180  004BDC  6B40               	clrf	64,b	;volatile
 25181                           
 25182                           ; BSR set to: 14
 25183                           ;ECAN.c: 251: B3CON = 0;
 25184  004BDE  6B50               	clrf	80,b	;volatile
 25185                           
 25186                           ; BSR set to: 14
 25187                           ;ECAN.c: 261: B4CON = 0;
 25188  004BE0  6B60               	clrf	96,b	;volatile
 25189                           
 25190                           ; BSR set to: 14
 25191                           ;ECAN.c: 271: B5CON = 0;
 25192  004BE2  6B70               	clrf	112,b	;volatile
 25193                           
 25194                           ; BSR set to: 14
 25195                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25196  004BE4  010D               	movlb	13	; () banked
 25197  004BE6  6BF8               	clrf	248,b	;volatile
 25198                           
 25199                           ; BSR set to: 13
 25200                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25201  004BE8  010F               	movlb	15	; () banked
 25202  004BEA  6B00               	clrf	0,b	;volatile
 25203                           
 25204                           ; BSR set to: 15
 25205  004BEC  0E08               	movlw	8
 25206  004BEE  6F01               	movwf	1,b	;volatile
 25207                           
 25208                           ; BSR set to: 15
 25209  004BF0  6B02               	clrf	2,b	;volatile
 25210                           
 25211                           ; BSR set to: 15
 25212  004BF2  6B03               	clrf	3,b	;volatile
 25213                           
 25214                           ; BSR set to: 15
 25215                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25216  004BF4  0E01               	movlw	1
 25217  004BF6  010D               	movlb	13	; () banked
 25218  004BF8  6FD4               	movwf	212,b	;volatile
 25219                           
 25220                           ; BSR set to: 13
 25221                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25222  004BFA  6BD5               	clrf	213,b	;volatile
 25223                           
 25224                           ; BSR set to: 13
 25225                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25226  004BFC  6BE0               	clrf	224,b	;volatile
 25227                           
 25228                           ; BSR set to: 13
 25229                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25230  004BFE  0E11               	movlw	17
 25231  004C00  6FE1               	movwf	225,b	;volatile
 25232                           
 25233                           ; BSR set to: 13
 25234                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25235  004C02  6FE2               	movwf	226,b	;volatile
 25236                           
 25237                           ; BSR set to: 13
 25238                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25239  004C04  6BE3               	clrf	227,b	;volatile
 25240                           
 25241                           ; BSR set to: 13
 25242                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25243  004C06  6BE4               	clrf	228,b	;volatile
 25244                           
 25245                           ; BSR set to: 13
 25246                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25247  004C08  6BE5               	clrf	229,b	;volatile
 25248                           
 25249                           ; BSR set to: 13
 25250                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25251  004C0A  6BE6               	clrf	230,b	;volatile
 25252                           
 25253                           ; BSR set to: 13
 25254                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25255  004C0C  6BE7               	clrf	231,b	;volatile
 25256                           
 25257                           ; BSR set to: 13
 25258                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25259  004C0E  0E54               	movlw	84
 25260  004C10  6FF0               	movwf	240,b	;volatile
 25261                           
 25262                           ; BSR set to: 13
 25263                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25264  004C12  0E05               	movlw	5
 25265  004C14  6FF1               	movwf	241,b	;volatile
 25266                           
 25267                           ; BSR set to: 13
 25268                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25269  004C16  6BF2               	clrf	242,b	;volatile
 25270                           
 25271                           ; BSR set to: 13
 25272                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25273  004C18  6BF2               	clrf	242,b	;volatile
 25274                           
 25275                           ; BSR set to: 13
 25276                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25277  004C1A  010F               	movlb	15	; () banked
 25278  004C1C  6B18               	clrf	24,b	;volatile
 25279                           
 25280                           ; BSR set to: 15
 25281  004C1E  6B19               	clrf	25,b	;volatile
 25282                           
 25283                           ; BSR set to: 15
 25284  004C20  6B1A               	clrf	26,b	;volatile
 25285                           
 25286                           ; BSR set to: 15
 25287  004C22  6B1B               	clrf	27,b	;volatile
 25288                           
 25289                           ; BSR set to: 15
 25290                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25291  004C24  8719               	bsf	25,3,b	;volatile
 25292                           
 25293                           ; BSR set to: 15
 25294                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25295  004C26  6B1C               	clrf	28,b	;volatile
 25296                           
 25297                           ; BSR set to: 15
 25298  004C28  6B1D               	clrf	29,b	;volatile
 25299                           
 25300                           ; BSR set to: 15
 25301  004C2A  6B1E               	clrf	30,b	;volatile
 25302                           
 25303                           ; BSR set to: 15
 25304  004C2C  6B1F               	clrf	31,b	;volatile
 25305                           
 25306                           ; BSR set to: 15
 25307                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25308  004C2E  871D               	bsf	29,3,b	;volatile
 25309                           
 25310                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25311  004C30  0E20               	movlw	32
 25312  004C32  EF80  F02B         	goto	_ECANSetOperationMode
 25313  004C36                     __end_of_ECANInitialize:
 25314                           	opt stack 0
 25315                           tblptru	equ	0xFF8
 25316                           tblptrh	equ	0xFF7
 25317                           tblptrl	equ	0xFF6
 25318                           tablat	equ	0xFF5
 25319                           prodh	equ	0xFF4
 25320                           prodl	equ	0xFF3
 25321                           intcon	equ	0xFF2
 25322                           indf0	equ	0xFEF
 25323                           postinc0	equ	0xFEE
 25324                           fsr0h	equ	0xFEA
 25325                           fsr0l	equ	0xFE9
 25326                           wreg	equ	0xFE8
 25327                           indf1	equ	0xFE7
 25328                           postinc1	equ	0xFE6
 25329                           postdec1	equ	0xFE5
 25330                           fsr1h	equ	0xFE2
 25331                           fsr1l	equ	0xFE1
 25332                           indf2	equ	0xFDF
 25333                           postinc2	equ	0xFDE
 25334                           postdec2	equ	0xFDD
 25335                           plusw2	equ	0xFDB
 25336                           fsr2h	equ	0xFDA
 25337                           fsr2l	equ	0xFD9
 25338                           status	equ	0xFD8
 25339                           
 25340 ;; *************** function _ECANSetOperationMode *****************
 25341 ;; Defined at:
 25342 ;;		line 1014 in file "ECAN.c"
 25343 ;; Parameters:    Size  Location     Type
 25344 ;;  mode            1    wreg     enum E16337
 25345 ;; Auto vars:     Size  Location     Type
 25346 ;;  mode            1    0[BANK0 ] enum E16337
 25347 ;; Return value:  Size  Location     Type
 25348 ;;		None               void
 25349 ;; Registers used:
 25350 ;;		wreg, status,2, status,0
 25351 ;; Tracked objects:
 25352 ;;		On entry : 0/0
 25353 ;;		On exit  : F/0
 25354 ;;		Unchanged: 0/0
 25355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25356 ;;      Params:         0       0       0       0       0       0       0
 25357 ;;      Locals:         0       1       0       0       0       0       0
 25358 ;;      Temps:          0       0       0       0       0       0       0
 25359 ;;      Totals:         0       1       0       0       0       0       0
 25360 ;;Total ram usage:        1 bytes
 25361 ;; Hardware stack levels used:    1
 25362 ;; Hardware stack levels required when called:    3
 25363 ;; This function calls:
 25364 ;;		Nothing
 25365 ;; This function is called by:
 25366 ;;		_doModeVerbose
 25367 ;;		_doModeVscp
 25368 ;;		_doModeSLCAN
 25369 ;;		_ECANInitialize
 25370 ;; This function uses a non-reentrant model
 25371 ;;
 25372                           
 25373                           	psect	text71
 25374  005700                     __ptext71:
 25375                           	opt stack 0
 25376  005700                     _ECANSetOperationMode:
 25377                           	opt stack 26
 25378                           
 25379                           ; BSR set to: 0
 25380                           ;incstack = 0
 25381                           ;incstack = 0
 25382                           ;ECANSetOperationMode@mode stored from wreg
 25383  005700  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 25384                           
 25385                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25386  005704  0E1F               	movlw	31
 25387  005706  166F               	andwf	3951,f,c	;volatile
 25388                           
 25389                           ;ECAN.c: 1016: CANCON |= mode;
 25390  005708  0100               	movlb	0	; () banked
 25391  00570A  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 25392  00570C  126F               	iorwf	3951,f,c	;volatile
 25393  00570E                     l11214:
 25394                           
 25395                           ; BSR set to: 0
 25396  00570E  506F               	movf	3951,w,c	;volatile
 25397  005710  0BE0               	andlw	224
 25398  005712  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 25399  005714  B4D8               	btfsc	status,2,c
 25400                           
 25401                           ; BSR set to: 0
 25402  005716  0012               	return	
 25403  005718  D7FA               	goto	l11214
 25404  00571A                     __end_of_ECANSetOperationMode:
 25405                           	opt stack 0
 25406                           tblptru	equ	0xFF8
 25407                           tblptrh	equ	0xFF7
 25408                           tblptrl	equ	0xFF6
 25409                           tablat	equ	0xFF5
 25410                           prodh	equ	0xFF4
 25411                           prodl	equ	0xFF3
 25412                           intcon	equ	0xFF2
 25413                           indf0	equ	0xFEF
 25414                           postinc0	equ	0xFEE
 25415                           fsr0h	equ	0xFEA
 25416                           fsr0l	equ	0xFE9
 25417                           wreg	equ	0xFE8
 25418                           indf1	equ	0xFE7
 25419                           postinc1	equ	0xFE6
 25420                           postdec1	equ	0xFE5
 25421                           fsr1h	equ	0xFE2
 25422                           fsr1l	equ	0xFE1
 25423                           indf2	equ	0xFDF
 25424                           postinc2	equ	0xFDE
 25425                           postdec2	equ	0xFDD
 25426                           plusw2	equ	0xFDB
 25427                           fsr2h	equ	0xFDA
 25428                           fsr2l	equ	0xFD9
 25429                           status	equ	0xFD8
 25430                           
 25431 ;; *************** function _OpenTimer0 *****************
 25432 ;; Defined at:
 25433 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25434 ;; Parameters:    Size  Location     Type
 25435 ;;  config          1    wreg     unsigned char 
 25436 ;; Auto vars:     Size  Location     Type
 25437 ;;  config          1    0[BANK0 ] unsigned char 
 25438 ;; Return value:  Size  Location     Type
 25439 ;;		None               void
 25440 ;; Registers used:
 25441 ;;		wreg, status,2, status,0
 25442 ;; Tracked objects:
 25443 ;;		On entry : F/0
 25444 ;;		On exit  : F/0
 25445 ;;		Unchanged: 0/0
 25446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25447 ;;      Params:         0       0       0       0       0       0       0
 25448 ;;      Locals:         0       1       0       0       0       0       0
 25449 ;;      Temps:          0       0       0       0       0       0       0
 25450 ;;      Totals:         0       1       0       0       0       0       0
 25451 ;;Total ram usage:        1 bytes
 25452 ;; Hardware stack levels used:    1
 25453 ;; Hardware stack levels required when called:    3
 25454 ;; This function calls:
 25455 ;;		Nothing
 25456 ;; This function is called by:
 25457 ;;		_init
 25458 ;; This function uses a non-reentrant model
 25459 ;;
 25460                           
 25461                           	psect	text72
 25462  0056C4                     __ptext72:
 25463                           	opt stack 0
 25464  0056C4                     _OpenTimer0:
 25465                           	opt stack 26
 25466                           
 25467                           ; BSR set to: 0
 25468                           ;incstack = 0
 25469                           ;incstack = 0
 25470                           ;OpenTimer0@config stored from wreg
 25471  0056C4  CFE8 F060          	movff	wreg,OpenTimer0@config
 25472                           
 25473                           ; BSR set to: 0
 25474  0056C8  5160               	movf	OpenTimer0@config& (0+255),w,b
 25475  0056CA  0B7F               	andlw	127
 25476  0056CC  6ED5               	movwf	4053,c	;volatile
 25477                           
 25478                           ; BSR set to: 0
 25479  0056CE  6AD7               	clrf	4055,c	;volatile
 25480                           
 25481                           ; BSR set to: 0
 25482  0056D0  6AD6               	clrf	4054,c	;volatile
 25483                           
 25484                           ; BSR set to: 0
 25485  0056D2  94F2               	bcf	intcon,2,c	;volatile
 25486                           
 25487                           ; BSR set to: 0
 25488  0056D4  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 25489  0056D6  D002               	goto	l1770
 25490                           
 25491                           ; BSR set to: 0
 25492  0056D8  8AF2               	bsf	intcon,5,c	;volatile
 25493  0056DA  D001               	goto	l1771
 25494  0056DC                     l1770:
 25495                           
 25496                           ; BSR set to: 0
 25497  0056DC  9AF2               	bcf	intcon,5,c	;volatile
 25498  0056DE                     l1771:
 25499                           
 25500                           ; BSR set to: 0
 25501  0056DE  8ED5               	bsf	4053,7,c	;volatile
 25502                           
 25503                           ; BSR set to: 0
 25504  0056E0  0012               	return	
 25505  0056E2                     __end_of_OpenTimer0:
 25506                           	opt stack 0
 25507                           tblptru	equ	0xFF8
 25508                           tblptrh	equ	0xFF7
 25509                           tblptrl	equ	0xFF6
 25510                           tablat	equ	0xFF5
 25511                           prodh	equ	0xFF4
 25512                           prodl	equ	0xFF3
 25513                           intcon	equ	0xFF2
 25514                           indf0	equ	0xFEF
 25515                           postinc0	equ	0xFEE
 25516                           fsr0h	equ	0xFEA
 25517                           fsr0l	equ	0xFE9
 25518                           wreg	equ	0xFE8
 25519                           indf1	equ	0xFE7
 25520                           postinc1	equ	0xFE6
 25521                           postdec1	equ	0xFE5
 25522                           fsr1h	equ	0xFE2
 25523                           fsr1l	equ	0xFE1
 25524                           indf2	equ	0xFDF
 25525                           postinc2	equ	0xFDE
 25526                           postdec2	equ	0xFDD
 25527                           plusw2	equ	0xFDB
 25528                           fsr2h	equ	0xFDA
 25529                           fsr2l	equ	0xFD9
 25530                           status	equ	0xFD8
 25531                           
 25532 ;; *************** function _OpenUSART *****************
 25533 ;; Defined at:
 25534 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25535 ;; Parameters:    Size  Location     Type
 25536 ;;  config          1    wreg     unsigned char 
 25537 ;;  spbrg           2    0[BANK0 ] unsigned int 
 25538 ;; Auto vars:     Size  Location     Type
 25539 ;;  config          1    2[BANK0 ] unsigned char 
 25540 ;; Return value:  Size  Location     Type
 25541 ;;		None               void
 25542 ;; Registers used:
 25543 ;;		wreg, status,2
 25544 ;; Tracked objects:
 25545 ;;		On entry : F/0
 25546 ;;		On exit  : F/0
 25547 ;;		Unchanged: 0/0
 25548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25549 ;;      Params:         0       2       0       0       0       0       0
 25550 ;;      Locals:         0       1       0       0       0       0       0
 25551 ;;      Temps:          0       0       0       0       0       0       0
 25552 ;;      Totals:         0       3       0       0       0       0       0
 25553 ;;Total ram usage:        3 bytes
 25554 ;; Hardware stack levels used:    1
 25555 ;; Hardware stack levels required when called:    3
 25556 ;; This function calls:
 25557 ;;		Nothing
 25558 ;; This function is called by:
 25559 ;;		_init
 25560 ;; This function uses a non-reentrant model
 25561 ;;
 25562                           
 25563                           	psect	text73
 25564  0050DE                     __ptext73:
 25565                           	opt stack 0
 25566  0050DE                     _OpenUSART:
 25567                           	opt stack 26
 25568                           
 25569                           ; BSR set to: 0
 25570                           ;incstack = 0
 25571                           ;incstack = 0
 25572                           ;OpenUSART@config stored from wreg
 25573  0050DE  CFE8 F062          	movff	wreg,OpenUSART@config
 25574                           
 25575                           ; BSR set to: 0
 25576  0050E2  6AAC               	clrf	4012,c	;volatile
 25577  0050E4  6AAB               	clrf	4011,c	;volatile
 25578                           
 25579                           ; BSR set to: 0
 25580  0050E6  B162               	btfsc	OpenUSART@config& (0+255),0,b
 25581                           
 25582                           ; BSR set to: 0
 25583  0050E8  88AC               	bsf	4012,4,c	;volatile
 25584                           
 25585                           ; BSR set to: 0
 25586  0050EA  A362               	btfss	OpenUSART@config& (0+255),1,b
 25587  0050EC  D002               	goto	l10930
 25588                           
 25589                           ; BSR set to: 0
 25590  0050EE  8CAC               	bsf	4012,6,c	;volatile
 25591  0050F0  8CAB               	bsf	4011,6,c	;volatile
 25592  0050F2                     l10930:
 25593                           
 25594                           ; BSR set to: 0
 25595  0050F2  B562               	btfsc	OpenUSART@config& (0+255),2,b
 25596                           
 25597                           ; BSR set to: 0
 25598  0050F4  8EAC               	bsf	4012,7,c	;volatile
 25599                           
 25600                           ; BSR set to: 0
 25601  0050F6  A762               	btfss	OpenUSART@config& (0+255),3,b
 25602  0050F8  D002               	goto	l1803
 25603                           
 25604                           ; BSR set to: 0
 25605  0050FA  88AB               	bsf	4011,4,c	;volatile
 25606  0050FC  D001               	goto	l10938
 25607  0050FE                     l1803:
 25608                           
 25609                           ; BSR set to: 0
 25610  0050FE  8AAB               	bsf	4011,5,c	;volatile
 25611  005100                     l10938:
 25612                           
 25613                           ; BSR set to: 0
 25614  005100  B962               	btfsc	OpenUSART@config& (0+255),4,b
 25615                           
 25616                           ; BSR set to: 0
 25617  005102  84AC               	bsf	4012,2,c	;volatile
 25618                           
 25619                           ; BSR set to: 0
 25620  005104  989E               	bcf	3998,4,c	;volatile
 25621                           
 25622                           ; BSR set to: 0
 25623  005106  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 25624                           
 25625                           ; BSR set to: 0
 25626  005108  86AB               	bsf	4011,3,c	;volatile
 25627                           
 25628                           ; BSR set to: 0
 25629  00510A  AD62               	btfss	OpenUSART@config& (0+255),6,b
 25630  00510C  D002               	goto	l1807
 25631                           
 25632                           ; BSR set to: 0
 25633  00510E  8A9D               	bsf	3997,5,c	;volatile
 25634  005110  D001               	goto	l1808
 25635  005112                     l1807:
 25636                           
 25637                           ; BSR set to: 0
 25638  005112  9A9D               	bcf	3997,5,c	;volatile
 25639  005114                     l1808:
 25640                           
 25641                           ; BSR set to: 0
 25642  005114  9A9E               	bcf	3998,5,c	;volatile
 25643                           
 25644                           ; BSR set to: 0
 25645  005116  AF62               	btfss	OpenUSART@config& (0+255),7,b
 25646  005118  D002               	goto	l1809
 25647                           
 25648                           ; BSR set to: 0
 25649  00511A  889D               	bsf	3997,4,c	;volatile
 25650  00511C  D001               	goto	l1810
 25651  00511E                     l1809:
 25652                           
 25653                           ; BSR set to: 0
 25654  00511E  989D               	bcf	3997,4,c	;volatile
 25655  005120                     l1810:
 25656                           
 25657                           ; BSR set to: 0
 25658  005120  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 25659                           
 25660                           ; BSR set to: 0
 25661  005124  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 25662  005126  6EB0               	movwf	4016,c	;volatile
 25663                           
 25664                           ; BSR set to: 0
 25665  005128  8AAC               	bsf	4012,5,c	;volatile
 25666                           
 25667                           ; BSR set to: 0
 25668  00512A  8EAB               	bsf	4011,7,c	;volatile
 25669                           
 25670                           ; BSR set to: 0
 25671  00512C  9C94               	bcf	3988,6,c	;volatile
 25672                           
 25673                           ; BSR set to: 0
 25674  00512E  8E94               	bsf	3988,7,c	;volatile
 25675                           
 25676                           ; BSR set to: 0
 25677  005130  B8AC               	btfsc	4012,4,c	;volatile
 25678                           
 25679                           ; BSR set to: 0
 25680  005132  BEAC               	btfsc	4012,7,c	;volatile
 25681  005134  D001               	goto	l1812
 25682                           
 25683                           ; BSR set to: 0
 25684  005136  8C94               	bsf	3988,6,c	;volatile
 25685  005138                     l1812:
 25686                           
 25687                           ; BSR set to: 0
 25688  005138  0012               	return	
 25689  00513A                     __end_of_OpenUSART:
 25690                           	opt stack 0
 25691                           tblptru	equ	0xFF8
 25692                           tblptrh	equ	0xFF7
 25693                           tblptrl	equ	0xFF6
 25694                           tablat	equ	0xFF5
 25695                           prodh	equ	0xFF4
 25696                           prodl	equ	0xFF3
 25697                           intcon	equ	0xFF2
 25698                           indf0	equ	0xFEF
 25699                           postinc0	equ	0xFEE
 25700                           fsr0h	equ	0xFEA
 25701                           fsr0l	equ	0xFE9
 25702                           wreg	equ	0xFE8
 25703                           indf1	equ	0xFE7
 25704                           postinc1	equ	0xFE6
 25705                           postdec1	equ	0xFE5
 25706                           fsr1h	equ	0xFE2
 25707                           fsr1l	equ	0xFE1
 25708                           indf2	equ	0xFDF
 25709                           postinc2	equ	0xFDE
 25710                           postdec2	equ	0xFDD
 25711                           plusw2	equ	0xFDB
 25712                           fsr2h	equ	0xFDA
 25713                           fsr2l	equ	0xFD9
 25714                           status	equ	0xFD8
 25715                           
 25716 ;; *************** function _WriteTimer0 *****************
 25717 ;; Defined at:
 25718 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25719 ;; Parameters:    Size  Location     Type
 25720 ;;  timer0          2    0[BANK0 ] unsigned int 
 25721 ;; Auto vars:     Size  Location     Type
 25722 ;;  timer           2    2[BANK0 ] struct Timers
 25723 ;; Return value:  Size  Location     Type
 25724 ;;		None               void
 25725 ;; Registers used:
 25726 ;;		None
 25727 ;; Tracked objects:
 25728 ;;		On entry : F/0
 25729 ;;		On exit  : F/0
 25730 ;;		Unchanged: F/0
 25731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25732 ;;      Params:         0       2       0       0       0       0       0
 25733 ;;      Locals:         0       2       0       0       0       0       0
 25734 ;;      Temps:          0       0       0       0       0       0       0
 25735 ;;      Totals:         0       4       0       0       0       0       0
 25736 ;;Total ram usage:        4 bytes
 25737 ;; Hardware stack levels used:    1
 25738 ;; Hardware stack levels required when called:    3
 25739 ;; This function calls:
 25740 ;;		Nothing
 25741 ;; This function is called by:
 25742 ;;		_init
 25743 ;; This function uses a non-reentrant model
 25744 ;;
 25745                           
 25746                           	psect	text74
 25747  005744                     __ptext74:
 25748                           	opt stack 0
 25749  005744                     _WriteTimer0:
 25750                           	opt stack 26
 25751                           
 25752                           ; BSR set to: 0
 25753                           
 25754                           ; BSR set to: 0
 25755                           ;incstack = 0
 25756                           ;incstack = 0
 25757  005744  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 25758  005748  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 25759  00574C  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 25760  005750  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 25761                           
 25762                           ; BSR set to: 0
 25763  005754  0012               	return	
 25764  005756                     __end_of_WriteTimer0:
 25765                           	opt stack 0
 25766                           tblptru	equ	0xFF8
 25767                           tblptrh	equ	0xFF7
 25768                           tblptrl	equ	0xFF6
 25769                           tablat	equ	0xFF5
 25770                           prodh	equ	0xFF4
 25771                           prodl	equ	0xFF3
 25772                           intcon	equ	0xFF2
 25773                           indf0	equ	0xFEF
 25774                           postinc0	equ	0xFEE
 25775                           fsr0h	equ	0xFEA
 25776                           fsr0l	equ	0xFE9
 25777                           wreg	equ	0xFE8
 25778                           indf1	equ	0xFE7
 25779                           postinc1	equ	0xFE6
 25780                           postdec1	equ	0xFE5
 25781                           fsr1h	equ	0xFE2
 25782                           fsr1l	equ	0xFE1
 25783                           indf2	equ	0xFDF
 25784                           postinc2	equ	0xFDE
 25785                           postdec2	equ	0xFDD
 25786                           plusw2	equ	0xFDB
 25787                           fsr2h	equ	0xFDA
 25788                           fsr2l	equ	0xFD9
 25789                           status	equ	0xFD8
 25790                           
 25791 ;; *************** function _vscp_restoreDefaults *****************
 25792 ;; Defined at:
 25793 ;;		line 2719 in file "main.c"
 25794 ;; Parameters:    Size  Location     Type
 25795 ;;		None
 25796 ;; Auto vars:     Size  Location     Type
 25797 ;;		None
 25798 ;; Return value:  Size  Location     Type
 25799 ;;		None               void
 25800 ;; Registers used:
 25801 ;;		wreg, status,2, status,0, cstack
 25802 ;; Tracked objects:
 25803 ;;		On entry : F/0
 25804 ;;		On exit  : F/1
 25805 ;;		Unchanged: 0/0
 25806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25807 ;;      Params:         0       0       0       0       0       0       0
 25808 ;;      Locals:         0       0       0       0       0       0       0
 25809 ;;      Temps:          0       0       0       0       0       0       0
 25810 ;;      Totals:         0       0       0       0       0       0       0
 25811 ;;Total ram usage:        0 bytes
 25812 ;; Hardware stack levels used:    1
 25813 ;; Hardware stack levels required when called:    5
 25814 ;; This function calls:
 25815 ;;		_init_app_ram
 25816 ;;		_init_app_eeprom
 25817 ;; This function is called by:
 25818 ;;		_main
 25819 ;; This function uses a non-reentrant model
 25820 ;;
 25821                           
 25822                           	psect	text75
 25823  00577A                     __ptext75:
 25824                           	opt stack 0
 25825  00577A                     _vscp_restoreDefaults:
 25826                           	opt stack 25
 25827                           
 25828                           ; BSR set to: 0
 25829                           ;main.c: 2720: init_app_eeprom();
 25830                           
 25831                           ; BSR set to: 0
 25832                           ;incstack = 0
 25833                           ;incstack = 0
 25834  00577A  EC53  F025         	call	_init_app_eeprom	;wreg free
 25835                           
 25836                           ; BSR set to: 0
 25837                           ;main.c: 2721: init_app_ram();
 25838  00577E  EFF5  F028         	goto	_init_app_ram	;wreg free
 25839  005782                     __end_of_vscp_restoreDefaults:
 25840                           	opt stack 0
 25841                           tblptru	equ	0xFF8
 25842                           tblptrh	equ	0xFF7
 25843                           tblptrl	equ	0xFF6
 25844                           tablat	equ	0xFF5
 25845                           prodh	equ	0xFF4
 25846                           prodl	equ	0xFF3
 25847                           intcon	equ	0xFF2
 25848                           indf0	equ	0xFEF
 25849                           postinc0	equ	0xFEE
 25850                           fsr0h	equ	0xFEA
 25851                           fsr0l	equ	0xFE9
 25852                           wreg	equ	0xFE8
 25853                           indf1	equ	0xFE7
 25854                           postinc1	equ	0xFE6
 25855                           postdec1	equ	0xFE5
 25856                           fsr1h	equ	0xFE2
 25857                           fsr1l	equ	0xFE1
 25858                           indf2	equ	0xFDF
 25859                           postinc2	equ	0xFDE
 25860                           postdec2	equ	0xFDD
 25861                           plusw2	equ	0xFDB
 25862                           fsr2h	equ	0xFDA
 25863                           fsr2l	equ	0xFD9
 25864                           status	equ	0xFD8
 25865                           
 25866 ;; *************** function _init_app_eeprom *****************
 25867 ;; Defined at:
 25868 ;;		line 465 in file "main.c"
 25869 ;; Parameters:    Size  Location     Type
 25870 ;;		None
 25871 ;; Auto vars:     Size  Location     Type
 25872 ;;  i               1    3[BANK0 ] unsigned char 
 25873 ;; Return value:  Size  Location     Type
 25874 ;;		None               void
 25875 ;; Registers used:
 25876 ;;		wreg, status,2, status,0, cstack
 25877 ;; Tracked objects:
 25878 ;;		On entry : F/0
 25879 ;;		On exit  : F/0
 25880 ;;		Unchanged: 0/0
 25881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25882 ;;      Params:         0       0       0       0       0       0       0
 25883 ;;      Locals:         0       1       0       0       0       0       0
 25884 ;;      Temps:          0       0       0       0       0       0       0
 25885 ;;      Totals:         0       1       0       0       0       0       0
 25886 ;;Total ram usage:        1 bytes
 25887 ;; Hardware stack levels used:    1
 25888 ;; Hardware stack levels required when called:    4
 25889 ;; This function calls:
 25890 ;;		_writeEEPROM
 25891 ;; This function is called by:
 25892 ;;		_vscp_restoreDefaults
 25893 ;; This function uses a non-reentrant model
 25894 ;;
 25895                           
 25896                           	psect	text76
 25897  004AA6                     __ptext76:
 25898                           	opt stack 0
 25899  004AA6                     _init_app_eeprom:
 25900                           	opt stack 25
 25901                           
 25902                           ; BSR set to: 0
 25903                           ;main.c: 466: uint8_t i;
 25904                           ;main.c: 468: writeEEPROM(0x01, 0x55);
 25905                           
 25906                           ; BSR set to: 1
 25907                           ;incstack = 0
 25908                           ;incstack = 0
 25909  004AA6  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25910  004AA8  0E01               	movlw	1
 25911  004AAA  6F60               	movwf	?_writeEEPROM& (0+255),b
 25912  004AAC  0E55               	movlw	85
 25913  004AAE  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25914  004AB0  EC3F  F02B         	call	_writeEEPROM	;wreg free
 25915                           
 25916                           ;main.c: 469: writeEEPROM(0x02, 0xAA);
 25917  004AB4  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25918  004AB6  0E02               	movlw	2
 25919  004AB8  6F60               	movwf	?_writeEEPROM& (0+255),b
 25920  004ABA  0EAA               	movlw	170
 25921  004ABC  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25922  004ABE  EC3F  F02B         	call	_writeEEPROM	;wreg free
 25923                           
 25924                           ;main.c: 470: writeEEPROM(0x03, 0);
 25925  004AC2  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25926  004AC4  0E03               	movlw	3
 25927  004AC6  6F60               	movwf	?_writeEEPROM& (0+255),b
 25928  004AC8  0E00               	movlw	0
 25929  004ACA  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25930  004ACC  EC3F  F02B         	call	_writeEEPROM	;wreg free
 25931                           
 25932                           ;main.c: 471: writeEEPROM(0x05, 0);
 25933  004AD0  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25934  004AD2  0E05               	movlw	5
 25935  004AD4  6F60               	movwf	?_writeEEPROM& (0+255),b
 25936  004AD6  0E00               	movlw	0
 25937  004AD8  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25938  004ADA  EC3F  F02B         	call	_writeEEPROM	;wreg free
 25939                           
 25940                           ;main.c: 472: writeEEPROM(0x06, 0);
 25941  004ADE  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25942  004AE0  0E06               	movlw	6
 25943  004AE2  6F60               	movwf	?_writeEEPROM& (0+255),b
 25944  004AE4  0E00               	movlw	0
 25945  004AE6  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25946  004AE8  EC3F  F02B         	call	_writeEEPROM	;wreg free
 25947                           
 25948                           ;main.c: 473: writeEEPROM(0x09, 10u);
 25949  004AEC  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25950  004AEE  0E09               	movlw	9
 25951  004AF0  6F60               	movwf	?_writeEEPROM& (0+255),b
 25952  004AF2  0E0A               	movlw	10
 25953  004AF4  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25954  004AF6  EC3F  F02B         	call	_writeEEPROM	;wreg free
 25955                           
 25956                           ; BSR set to: 0
 25957                           ;main.c: 476: for (i = 0x20; i < (0x5C + 4); i++) {
 25958  004AFA  0E20               	movlw	32
 25959  004AFC  6F63               	movwf	init_app_eeprom@i& (0+255),b
 25960  004AFE                     l11078:
 25961                           
 25962                           ; BSR set to: 0
 25963                           ;main.c: 477: writeEEPROM(0x01, 0xFF);
 25964  004AFE  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25965  004B00  0E01               	movlw	1
 25966  004B02  6F60               	movwf	?_writeEEPROM& (0+255),b
 25967  004B04  0EFF               	movlw	255
 25968  004B06  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 25969  004B08  EC3F  F02B         	call	_writeEEPROM	;wreg free
 25970                           
 25971                           ; BSR set to: 0
 25972  004B0C  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 25973                           
 25974                           ; BSR set to: 0
 25975  004B0E  0E5F               	movlw	95
 25976  004B10  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 25977  004B12  D7F5               	goto	l11078
 25978                           
 25979                           ; BSR set to: 0
 25980                           ;main.c: 478: }
 25981                           ;main.c: 481: for (i = 0x60; i < (0x64 + 4); i++) {
 25982  004B14  0E60               	movlw	96
 25983  004B16  6F63               	movwf	init_app_eeprom@i& (0+255),b
 25984  004B18                     l11090:
 25985                           
 25986                           ; BSR set to: 0
 25987                           ;main.c: 482: writeEEPROM(0x01, 0xFF);
 25988  004B18  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25989  004B1A  0E01               	movlw	1
 25990  004B1C  6F60               	movwf	?_writeEEPROM& (0+255),b
 25991  004B1E  0EFF               	movlw	255
 25992  004B20  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 25993  004B22  EC3F  F02B         	call	_writeEEPROM	;wreg free
 25994                           
 25995                           ; BSR set to: 0
 25996  004B26  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 25997                           
 25998                           ; BSR set to: 0
 25999  004B28  0E67               	movlw	103
 26000  004B2A  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 26001  004B2C  D7F5               	goto	l11090
 26002                           
 26003                           ; BSR set to: 0
 26004  004B2E  0C67               	retlw	103
 26005  004B30                     __end_of_init_app_eeprom:
 26006                           	opt stack 0
 26007                           tblptru	equ	0xFF8
 26008                           tblptrh	equ	0xFF7
 26009                           tblptrl	equ	0xFF6
 26010                           tablat	equ	0xFF5
 26011                           prodh	equ	0xFF4
 26012                           prodl	equ	0xFF3
 26013                           intcon	equ	0xFF2
 26014                           indf0	equ	0xFEF
 26015                           postinc0	equ	0xFEE
 26016                           fsr0h	equ	0xFEA
 26017                           fsr0l	equ	0xFE9
 26018                           wreg	equ	0xFE8
 26019                           indf1	equ	0xFE7
 26020                           postinc1	equ	0xFE6
 26021                           postdec1	equ	0xFE5
 26022                           fsr1h	equ	0xFE2
 26023                           fsr1l	equ	0xFE1
 26024                           indf2	equ	0xFDF
 26025                           postinc2	equ	0xFDE
 26026                           postdec2	equ	0xFDD
 26027                           plusw2	equ	0xFDB
 26028                           fsr2h	equ	0xFDA
 26029                           fsr2l	equ	0xFD9
 26030                           status	equ	0xFD8
 26031                           
 26032 ;; *************** function _writeEEPROM *****************
 26033 ;; Defined at:
 26034 ;;		line 23 in file "eeprom.c"
 26035 ;; Parameters:    Size  Location     Type
 26036 ;;  address         2    0[BANK0 ] unsigned short 
 26037 ;;  data            1    2[BANK0 ] unsigned char 
 26038 ;; Auto vars:     Size  Location     Type
 26039 ;;		None
 26040 ;; Return value:  Size  Location     Type
 26041 ;;		None               void
 26042 ;; Registers used:
 26043 ;;		wreg, status,2
 26044 ;; Tracked objects:
 26045 ;;		On entry : F/0
 26046 ;;		On exit  : F/0
 26047 ;;		Unchanged: F/0
 26048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26049 ;;      Params:         0       3       0       0       0       0       0
 26050 ;;      Locals:         0       0       0       0       0       0       0
 26051 ;;      Temps:          0       0       0       0       0       0       0
 26052 ;;      Totals:         0       3       0       0       0       0       0
 26053 ;;Total ram usage:        3 bytes
 26054 ;; Hardware stack levels used:    1
 26055 ;; Hardware stack levels required when called:    3
 26056 ;; This function calls:
 26057 ;;		Nothing
 26058 ;; This function is called by:
 26059 ;;		_init_app_eeprom
 26060 ;;		_doModeVerbose
 26061 ;;		_doModeSLCAN
 26062 ;; This function uses a non-reentrant model
 26063 ;;
 26064                           
 26065                           	psect	text77
 26066  00567E                     __ptext77:
 26067                           	opt stack 0
 26068  00567E                     _writeEEPROM:
 26069                           	opt stack 26
 26070                           
 26071                           ; BSR set to: 0
 26072                           ;eeprom.c: 29: EEADR = address & 0xff;
 26073                           
 26074                           ; BSR set to: 0
 26075                           ;incstack = 0
 26076                           ;incstack = 0
 26077  00567E  C060  FFA9         	movff	writeEEPROM@address,4009	;volatile
 26078                           
 26079                           ;eeprom.c: 30: EEDATA = data;
 26080  005682  C062  FFA8         	movff	writeEEPROM@data,4008	;volatile
 26081                           
 26082                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 26083  005686  9EA6               	bcf	4006,7,c	;volatile
 26084                           
 26085                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 26086  005688  9CA6               	bcf	4006,6,c	;volatile
 26087                           
 26088                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 26089  00568A  84A6               	bsf	4006,2,c	;volatile
 26090                           
 26091                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 26092  00568C  9EF2               	bcf	intcon,7,c	;volatile
 26093                           
 26094                           ; BSR set to: 0
 26095                           ;eeprom.c: 37: EECON2 = 0x55;
 26096  00568E  0E55               	movlw	85
 26097  005690  6EA7               	movwf	4007,c	;volatile
 26098                           
 26099                           ;eeprom.c: 38: EECON2 = 0xaa;
 26100  005692  0EAA               	movlw	170
 26101  005694  6EA7               	movwf	4007,c	;volatile
 26102                           
 26103                           ; BSR set to: 0
 26104                           ;eeprom.c: 39: EECON1bits.WR = 1;
 26105  005696  82A6               	bsf	4006,1,c	;volatile
 26106                           
 26107                           ; BSR set to: 0
 26108                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 26109  005698  8EF2               	bsf	intcon,7,c	;volatile
 26110  00569A                     l1550:
 26111                           
 26112                           ; BSR set to: 0
 26113  00569A  A8A1               	btfss	4001,4,c	;volatile
 26114  00569C  D7FE               	goto	l1550
 26115                           
 26116                           ; BSR set to: 0
 26117                           ;eeprom.c: 43: PIR2bits.EEIF = 0;
 26118  00569E  98A1               	bcf	4001,4,c	;volatile
 26119                           
 26120                           ;eeprom.c: 44: EECON1bits.WREN = 0;
 26121  0056A0  94A6               	bcf	4006,2,c	;volatile
 26122                           
 26123                           ; BSR set to: 0
 26124  0056A2  0012               	return	
 26125  0056A4                     __end_of_writeEEPROM:
 26126                           	opt stack 0
 26127                           tblptru	equ	0xFF8
 26128                           tblptrh	equ	0xFF7
 26129                           tblptrl	equ	0xFF6
 26130                           tablat	equ	0xFF5
 26131                           prodh	equ	0xFF4
 26132                           prodl	equ	0xFF3
 26133                           intcon	equ	0xFF2
 26134                           indf0	equ	0xFEF
 26135                           postinc0	equ	0xFEE
 26136                           fsr0h	equ	0xFEA
 26137                           fsr0l	equ	0xFE9
 26138                           wreg	equ	0xFE8
 26139                           indf1	equ	0xFE7
 26140                           postinc1	equ	0xFE6
 26141                           postdec1	equ	0xFE5
 26142                           fsr1h	equ	0xFE2
 26143                           fsr1l	equ	0xFE1
 26144                           indf2	equ	0xFDF
 26145                           postinc2	equ	0xFDE
 26146                           postdec2	equ	0xFDD
 26147                           plusw2	equ	0xFDB
 26148                           fsr2h	equ	0xFDA
 26149                           fsr2l	equ	0xFD9
 26150                           status	equ	0xFD8
 26151                           
 26152 ;; *************** function _init_app_ram *****************
 26153 ;; Defined at:
 26154 ;;		line 447 in file "main.c"
 26155 ;; Parameters:    Size  Location     Type
 26156 ;;		None
 26157 ;; Auto vars:     Size  Location     Type
 26158 ;;		None
 26159 ;; Return value:  Size  Location     Type
 26160 ;;		None               void
 26161 ;; Registers used:
 26162 ;;		wreg, status,2, cstack
 26163 ;; Tracked objects:
 26164 ;;		On entry : E/0
 26165 ;;		On exit  : F/1
 26166 ;;		Unchanged: 0/0
 26167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26168 ;;      Params:         0       0       0       0       0       0       0
 26169 ;;      Locals:         0       0       0       0       0       0       0
 26170 ;;      Temps:          0       0       0       0       0       0       0
 26171 ;;      Totals:         0       0       0       0       0       0       0
 26172 ;;Total ram usage:        0 bytes
 26173 ;; Hardware stack levels used:    1
 26174 ;; Hardware stack levels required when called:    4
 26175 ;; This function calls:
 26176 ;;		_readEEPROM
 26177 ;; This function is called by:
 26178 ;;		_init
 26179 ;;		_vscp_restoreDefaults
 26180 ;; This function uses a non-reentrant model
 26181 ;;
 26182                           
 26183                           	psect	text78
 26184  0051EA                     __ptext78:
 26185                           	opt stack 0
 26186  0051EA                     _init_app_ram:
 26187                           	opt stack 25
 26188                           
 26189                           ;main.c: 449: can_receiveOverruns = 0;
 26190                           
 26191                           ; BSR set to: 0
 26192                           ;incstack = 0
 26193                           ;incstack = 0
 26194  0051EA  0100               	movlb	0	; () banked
 26195  0051EC  6BD1               	clrf	_can_receiveOverruns& (0+255),b
 26196  0051EE  6BD2               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26197  0051F0  6BD3               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26198  0051F2  6BD4               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26199                           
 26200                           ;main.c: 450: can_transmitOverruns = 0;
 26201  0051F4  6A2B               	clrf	_can_transmitOverruns,c
 26202  0051F6  6A2C               	clrf	_can_transmitOverruns+1,c
 26203  0051F8  6A2D               	clrf	_can_transmitOverruns+2,c
 26204  0051FA  6A2E               	clrf	_can_transmitOverruns+3,c
 26205                           
 26206                           ;main.c: 451: uart_receiveOverruns = 0;
 26207  0051FC  6A2F               	clrf	_uart_receiveOverruns,c
 26208  0051FE  6A30               	clrf	_uart_receiveOverruns+1,c
 26209  005200  6A31               	clrf	_uart_receiveOverruns+2,c
 26210  005202  6A32               	clrf	_uart_receiveOverruns+3,c
 26211                           
 26212                           ;main.c: 452: uart_transmitOverruns = 0;
 26213  005204  6A33               	clrf	_uart_transmitOverruns,c
 26214  005206  6A34               	clrf	_uart_transmitOverruns+1,c
 26215  005208  6A35               	clrf	_uart_transmitOverruns+2,c
 26216  00520A  6A36               	clrf	_uart_transmitOverruns+3,c
 26217                           
 26218                           ; BSR set to: 0
 26219                           ;main.c: 454: bHex = readEEPROM(0x06);
 26220  00520C  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26221  00520E  0E06               	movlw	6
 26222  005210  6F60               	movwf	?_readEEPROM& (0+255),b
 26223  005212  ECAB  F02B         	call	_readEEPROM	;wreg free
 26224  005216  0101               	movlb	1	; () banked
 26225  005218  6F00               	movwf	_bHex& (0+255),b
 26226                           
 26227                           ;main.c: 455: mode = readEEPROM(0x03);
 26228  00521A  0100               	movlb	0	; () banked
 26229  00521C  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26230  00521E  0E03               	movlw	3
 26231  005220  6F60               	movwf	?_readEEPROM& (0+255),b
 26232  005222  ECAB  F02B         	call	_readEEPROM	;wreg free
 26233  005226  6FF1               	movwf	_mode& (0+255),b
 26234                           
 26235                           ;main.c: 457: rwtimeout = readEEPROM(0x09);
 26236  005228  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 26237  00522A  0E09               	movlw	9
 26238  00522C  6F60               	movwf	?_readEEPROM& (0+255),b
 26239  00522E  ECAB  F02B         	call	_readEEPROM	;wreg free
 26240  005232  0101               	movlb	1	; () banked
 26241  005234  6F03               	movwf	_rwtimeout& (0+255),b
 26242                           
 26243                           ; BSR set to: 1
 26244  005236  0012               	return	
 26245  005238                     __end_of_init_app_ram:
 26246                           	opt stack 0
 26247                           tblptru	equ	0xFF8
 26248                           tblptrh	equ	0xFF7
 26249                           tblptrl	equ	0xFF6
 26250                           tablat	equ	0xFF5
 26251                           prodh	equ	0xFF4
 26252                           prodl	equ	0xFF3
 26253                           intcon	equ	0xFF2
 26254                           indf0	equ	0xFEF
 26255                           postinc0	equ	0xFEE
 26256                           fsr0h	equ	0xFEA
 26257                           fsr0l	equ	0xFE9
 26258                           wreg	equ	0xFE8
 26259                           indf1	equ	0xFE7
 26260                           postinc1	equ	0xFE6
 26261                           postdec1	equ	0xFE5
 26262                           fsr1h	equ	0xFE2
 26263                           fsr1l	equ	0xFE1
 26264                           indf2	equ	0xFDF
 26265                           postinc2	equ	0xFDE
 26266                           postdec2	equ	0xFDD
 26267                           plusw2	equ	0xFDB
 26268                           fsr2h	equ	0xFDA
 26269                           fsr2l	equ	0xFD9
 26270                           status	equ	0xFD8
 26271                           
 26272 ;; *************** function _readEEPROM *****************
 26273 ;; Defined at:
 26274 ;;		line 87 in file "eeprom.c"
 26275 ;; Parameters:    Size  Location     Type
 26276 ;;  address         2    0[BANK0 ] unsigned short 
 26277 ;; Auto vars:     Size  Location     Type
 26278 ;;  data            1    2[BANK0 ] unsigned char 
 26279 ;; Return value:  Size  Location     Type
 26280 ;;                  1    wreg      unsigned char 
 26281 ;; Registers used:
 26282 ;;		wreg, status,2
 26283 ;; Tracked objects:
 26284 ;;		On entry : F/0
 26285 ;;		On exit  : F/0
 26286 ;;		Unchanged: 0/0
 26287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26288 ;;      Params:         0       2       0       0       0       0       0
 26289 ;;      Locals:         0       1       0       0       0       0       0
 26290 ;;      Temps:          0       0       0       0       0       0       0
 26291 ;;      Totals:         0       3       0       0       0       0       0
 26292 ;;Total ram usage:        3 bytes
 26293 ;; Hardware stack levels used:    1
 26294 ;; Hardware stack levels required when called:    3
 26295 ;; This function calls:
 26296 ;;		Nothing
 26297 ;; This function is called by:
 26298 ;;		_main
 26299 ;;		_init_app_ram
 26300 ;; This function uses a non-reentrant model
 26301 ;;
 26302                           
 26303                           	psect	text79
 26304  005756                     __ptext79:
 26305                           	opt stack 0
 26306  005756                     _readEEPROM:
 26307                           	opt stack 25
 26308                           
 26309                           ; BSR set to: 0
 26310                           ;eeprom.c: 88: uint8_t data;
 26311                           ;eeprom.c: 93: EEADR = address & 0xff;
 26312                           
 26313                           ; BSR set to: 1
 26314                           ;incstack = 0
 26315                           ;incstack = 0
 26316  005756  C060  FFA9         	movff	readEEPROM@address,4009	;volatile
 26317                           
 26318                           ;eeprom.c: 94: EECON1bits.EEPGD= 0;
 26319  00575A  9EA6               	bcf	4006,7,c	;volatile
 26320                           
 26321                           ;eeprom.c: 95: EECON1bits.CFGS = 0;
 26322  00575C  9CA6               	bcf	4006,6,c	;volatile
 26323                           
 26324                           ;eeprom.c: 96: EECON1bits.RD = 1;
 26325  00575E  80A6               	bsf	4006,0,c	;volatile
 26326                           
 26327                           ;eeprom.c: 97: data = EEDATA;
 26328  005760  CFA8 F062          	movff	4008,readEEPROM@data	;volatile
 26329                           
 26330                           ; BSR set to: 0
 26331                           ;eeprom.c: 99: return data;
 26332  005764  5162               	movf	readEEPROM@data& (0+255),w,b
 26333                           
 26334                           ; BSR set to: 0
 26335  005766  0012               	return	
 26336  005768                     __end_of_readEEPROM:
 26337                           	opt stack 0
 26338                           tblptru	equ	0xFF8
 26339                           tblptrh	equ	0xFF7
 26340                           tblptrl	equ	0xFF6
 26341                           tablat	equ	0xFF5
 26342                           prodh	equ	0xFF4
 26343                           prodl	equ	0xFF3
 26344                           intcon	equ	0xFF2
 26345                           indf0	equ	0xFEF
 26346                           postinc0	equ	0xFEE
 26347                           fsr0h	equ	0xFEA
 26348                           fsr0l	equ	0xFE9
 26349                           wreg	equ	0xFE8
 26350                           indf1	equ	0xFE7
 26351                           postinc1	equ	0xFE6
 26352                           postdec1	equ	0xFE5
 26353                           fsr1h	equ	0xFE2
 26354                           fsr1l	equ	0xFE1
 26355                           indf2	equ	0xFDF
 26356                           postinc2	equ	0xFDE
 26357                           postdec2	equ	0xFDD
 26358                           plusw2	equ	0xFDB
 26359                           fsr2h	equ	0xFDA
 26360                           fsr2l	equ	0xFD9
 26361                           status	equ	0xFD8
 26362                           
 26363 ;; *************** function _fifo_init *****************
 26364 ;; Defined at:
 26365 ;;		line 14 in file "fifo.c"
 26366 ;; Parameters:    Size  Location     Type
 26367 ;;  f               1    wreg     PTR struct .
 26368 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26369 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 26370 ;;		 -> caninputBuffer(494), inputBuffer(128), 
 26371 ;;  size            2    2[BANK0 ] unsigned short 
 26372 ;; Auto vars:     Size  Location     Type
 26373 ;;  f               1    4[BANK0 ] PTR struct .
 26374 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26375 ;; Return value:  Size  Location     Type
 26376 ;;		None               void
 26377 ;; Registers used:
 26378 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26379 ;; Tracked objects:
 26380 ;;		On entry : F/0
 26381 ;;		On exit  : F/0
 26382 ;;		Unchanged: 0/0
 26383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26384 ;;      Params:         0       4       0       0       0       0       0
 26385 ;;      Locals:         0       1       0       0       0       0       0
 26386 ;;      Temps:          0       0       0       0       0       0       0
 26387 ;;      Totals:         0       5       0       0       0       0       0
 26388 ;;Total ram usage:        5 bytes
 26389 ;; Hardware stack levels used:    1
 26390 ;; Hardware stack levels required when called:    3
 26391 ;; This function calls:
 26392 ;;		Nothing
 26393 ;; This function is called by:
 26394 ;;		_main
 26395 ;; This function uses a non-reentrant model
 26396 ;;
 26397                           
 26398                           	psect	text80
 26399  005420                     __ptext80:
 26400                           	opt stack 0
 26401  005420                     _fifo_init:
 26402                           	opt stack 27
 26403                           
 26404                           ; BSR set to: 0
 26405                           ;incstack = 0
 26406                           ;incstack = 0
 26407                           ;fifo_init@f stored from wreg
 26408  005420  CFE8 F064          	movff	wreg,fifo_init@f
 26409                           
 26410                           ; BSR set to: 0
 26411                           ;fifo.c: 15: f->head = 0;
 26412  005424  5164               	movf	fifo_init@f& (0+255),w,b
 26413  005426  6ED9               	movwf	fsr2l,c
 26414  005428  6ADA               	clrf	fsr2h,c
 26415  00542A  0E02               	movlw	2
 26416                           
 26417                           ;fifo.c: 16: f->tail = 0;
 26418  00542C  D811               	call	PL90	;call to abstracted procedure
 26419  00542E  0E04               	movlw	4
 26420                           
 26421                           ;fifo.c: 17: f->size = size;
 26422  005430  D80F               	call	PL90	;call to abstracted procedure
 26423  005432  0E06               	movlw	6
 26424  005434  26D9               	addwf	fsr2l,f,c
 26425  005436  6ADA               	clrf	fsr2h,c
 26426  005438  C062  FFDE         	movff	fifo_init@size,postinc2
 26427  00543C  C063  FFDD         	movff	fifo_init@size+1,postdec2
 26428                           
 26429                           ; BSR set to: 0
 26430                           ;fifo.c: 18: f->buf = buf;
 26431  005440  5164               	movf	fifo_init@f& (0+255),w,b
 26432  005442  6ED9               	movwf	fsr2l,c
 26433  005444  6ADA               	clrf	fsr2h,c
 26434  005446  C060  FFDE         	movff	fifo_init@buf,postinc2
 26435  00544A  C061  FFDD         	movff	fifo_init@buf+1,postdec2
 26436                           
 26437                           ; BSR set to: 0
 26438  00544E  0012               	return	
 26439  005450                     __end_of_fifo_init:
 26440                           	opt stack 0
 26441  005450                     PL90:
 26442                           	opt stack 27
 26443  005450  26D9               	addwf	fsr2l,f,c
 26444  005452  6ADA               	clrf	fsr2h,c
 26445  005454  6ADE               	clrf	postinc2,c
 26446  005456  6ADD               	clrf	postdec2,c
 26447  005458  5164               	movf	fifo_init@f& (0+255),w,b
 26448  00545A  6ED9               	movwf	fsr2l,c
 26449  00545C  6ADA               	clrf	fsr2h,c
 26450  00545E  0012               	return	
 26451  005460                     __end_ofPL90:
 26452                           	opt stack 0
 26453                           tblptru	equ	0xFF8
 26454                           tblptrh	equ	0xFF7
 26455                           tblptrl	equ	0xFF6
 26456                           tablat	equ	0xFF5
 26457                           prodh	equ	0xFF4
 26458                           prodl	equ	0xFF3
 26459                           intcon	equ	0xFF2
 26460                           indf0	equ	0xFEF
 26461                           postinc0	equ	0xFEE
 26462                           fsr0h	equ	0xFEA
 26463                           fsr0l	equ	0xFE9
 26464                           wreg	equ	0xFE8
 26465                           indf1	equ	0xFE7
 26466                           postinc1	equ	0xFE6
 26467                           postdec1	equ	0xFE5
 26468                           fsr1h	equ	0xFE2
 26469                           fsr1l	equ	0xFE1
 26470                           indf2	equ	0xFDF
 26471                           postinc2	equ	0xFDE
 26472                           postdec2	equ	0xFDD
 26473                           plusw2	equ	0xFDB
 26474                           fsr2h	equ	0xFDA
 26475                           fsr2l	equ	0xFD9
 26476                           status	equ	0xFD8
 26477                           
 26478 ;; *************** function _Interrupt *****************
 26479 ;; Defined at:
 26480 ;;		line 137 in file "main.c"
 26481 ;; Parameters:    Size  Location     Type
 26482 ;;		None
 26483 ;; Auto vars:     Size  Location     Type
 26484 ;;  data            8   27[COMRAM] unsigned char [8]
 26485 ;;  id              4   37[COMRAM] unsigned long 
 26486 ;;  flags           1   41[COMRAM] enum E16349
 26487 ;;  dlc             1   36[COMRAM] unsigned char 
 26488 ;;  c               1   35[COMRAM] unsigned char 
 26489 ;; Return value:  Size  Location     Type
 26490 ;;		None               void
 26491 ;; Registers used:
 26492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26493 ;; Tracked objects:
 26494 ;;		On entry : 0/0
 26495 ;;		On exit  : 0/0
 26496 ;;		Unchanged: 0/0
 26497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26498 ;;      Params:         0       0       0       0       0       0       0
 26499 ;;      Locals:        15       0       0       0       0       0       0
 26500 ;;      Temps:          9       0       0       0       0       0       0
 26501 ;;      Totals:        24       0       0       0       0       0       0
 26502 ;;Total ram usage:       24 bytes
 26503 ;; Hardware stack levels used:    1
 26504 ;; Hardware stack levels required when called:    2
 26505 ;; This function calls:
 26506 ;;		_ReadUSART
 26507 ;;		_fifo_write
 26508 ;;		_ECANReceiveMessage
 26509 ;;		_fifo_getFree
 26510 ;;		i1_WriteTimer0
 26511 ;; This function is called by:
 26512 ;;		Interrupt level 1
 26513 ;; This function uses a non-reentrant model
 26514 ;;
 26515                           
 26516                           	psect	intcodelo
 26517  000018                     __pintcodelo:
 26518                           	opt stack 0
 26519  000018                     _Interrupt:
 26520                           	opt stack 20
 26521                           
 26522                           ; BSR set to: 0
 26523                           ;incstack = 0
 26524  000018  CFD8 F015          	movff	status,??_Interrupt+2
 26525  00001C  CFE8 F016          	movff	wreg,??_Interrupt+3
 26526  000020  CFE0 F017          	movff	bsr,??_Interrupt+4
 26527  000024  CFE1 F018          	movff	fsr1l,??_Interrupt+5
 26528  000028  CFE2 F019          	movff	fsr1h,??_Interrupt+6
 26529  00002C  CFD9 F01A          	movff	fsr2l,??_Interrupt+7
 26530  000030  CFDA F01B          	movff	fsr2h,??_Interrupt+8
 26531  000034                     
 26532                           ;main.c: 138: uint8_t c;
 26533                           ;main.c: 141: if ( 1 == PIR1bits.RCIF ) {
 26534  000034  AA9E               	btfss	3998,5,c	;volatile
 26535  000036  D001               	goto	i1u1690_21
 26536  000038  D001               	goto	i1u1690_20
 26537  00003A                     i1u1690_21:
 26538  00003A  D020               	goto	i1l387
 26539  00003C                     i1u1690_20:
 26540  00003C                     
 26541                           ;main.c: 143: c = ReadUSART();
 26542  00003C  EC71  F02B         	call	_ReadUSART	;wreg free
 26543  000040  6E24               	movwf	Interrupt@c,c
 26544  000042                     
 26545                           ;main.c: 145: if (1 != fifo_write(&serialInputFifo, &c, 1)) {
 26546  000042  0E24               	movlw	low Interrupt@c
 26547  000044  6E01               	movwf	?_fifo_write,c
 26548  000046  0E01               	movlw	1
 26549  000048  6E02               	movwf	?_fifo_write+1,c
 26550  00004A  0E00               	movlw	0
 26551  00004C  6E03               	movwf	?_fifo_write+2,c
 26552  00004E  0E00               	movlw	0
 26553  000050  6E04               	movwf	?_fifo_write+3,c
 26554  000052  0E00               	movlw	0
 26555  000054  6E05               	movwf	?_fifo_write+4,c
 26556  000056  0E48               	movlw	_serialInputFifo& (0+255)
 26557  000058  ECBE  F01B         	call	_fifo_write
 26558  00005C  0401               	decf	?_fifo_write,w,c
 26559  00005E  1002               	iorwf	?_fifo_write+1,w,c
 26560  000060  B4D8               	btfsc	status,2,c
 26561  000062  D001               	goto	i1u1691_21
 26562  000064  D001               	goto	i1u1691_20
 26563  000066                     i1u1691_21:
 26564  000066  D008               	goto	i1l12960
 26565  000068                     i1u1691_20:
 26566  000068                     
 26567                           ;main.c: 147: uart_receiveOverruns++;
 26568  000068  0E01               	movlw	1
 26569  00006A  262F               	addwf	_uart_receiveOverruns,f,c
 26570  00006C  0E00               	movlw	0
 26571  00006E  2230               	addwfc	_uart_receiveOverruns+1,f,c
 26572  000070  0E00               	movlw	0
 26573  000072  2231               	addwfc	_uart_receiveOverruns+2,f,c
 26574  000074  0E00               	movlw	0
 26575  000076  2232               	addwfc	_uart_receiveOverruns+3,f,c
 26576  000078                     i1l12960:
 26577                           
 26578                           ;main.c: 148: }
 26579                           ;main.c: 151: PIR1bits.RCIF = 0;
 26580  000078  9A9E               	bcf	3998,5,c	;volatile
 26581                           
 26582                           ;main.c: 153: }
 26583  00007A  D07D               	goto	i1l389
 26584  00007C                     i1l387:
 26585                           
 26586                           ;main.c: 155: else if (1 == INTCONbits.TMR0IF) {
 26587  00007C  A4F2               	btfss	intcon,2,c	;volatile
 26588  00007E  D001               	goto	i1u1692_21
 26589  000080  D001               	goto	i1u1692_20
 26590  000082                     i1u1692_21:
 26591  000082  D079               	goto	i1l389
 26592  000084                     i1u1692_20:
 26593  000084                     
 26594                           ;main.c: 157: WriteTimer0(0xfb1d);
 26595  000084  0EFB               	movlw	251
 26596  000086  6E02               	movwf	?i1_WriteTimer0+1,c
 26597  000088  0E1D               	movlw	29
 26598  00008A  6E01               	movwf	?i1_WriteTimer0,c
 26599  00008C  ECB4  F02B         	call	i1_WriteTimer0	;wreg free
 26600  000090                     
 26601                           ;main.c: 159: timer++;
 26602  000090  0E01               	movlw	1
 26603  000092  0100               	movlb	0	; () banked
 26604  000094  27E9               	addwf	_timer& (0+255),f,b	;volatile
 26605  000096  0E00               	movlw	0
 26606  000098  23EA               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 26607  00009A  0E00               	movlw	0
 26608  00009C  23EB               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 26609  00009E  0E00               	movlw	0
 26610  0000A0  23EC               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 26611  0000A2                     
 26612                           ; BSR set to: 0
 26613                           ;main.c: 160: timekeeper++;
 26614  0000A2  0E01               	movlw	1
 26615  0000A4  27E5               	addwf	_timekeeper& (0+255),f,b	;volatile
 26616  0000A6  0E00               	movlw	0
 26617  0000A8  23E6               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 26618  0000AA  0E00               	movlw	0
 26619  0000AC  23E7               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 26620  0000AE  0E00               	movlw	0
 26621  0000B0  23E8               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 26622  0000B2                     
 26623                           ; BSR set to: 0
 26624                           ;main.c: 163: status_led_cnt++;
 26625  0000B2  4A39               	infsnz	_status_led_cnt,f,c	;volatile
 26626  0000B4  2A3A               	incf	_status_led_cnt+1,f,c	;volatile
 26627  0000B6                     
 26628                           ; BSR set to: 0
 26629                           ;main.c: 164: if ((2 == ledFunctionality) &&
 26630                           ;main.c: 165: (status_led_cnt > 1000)) {
 26631  0000B6  503F               	movf	_ledFunctionality,w,c
 26632  0000B8  0A02               	xorlw	2
 26633  0000BA  A4D8               	btfss	status,2,c
 26634  0000BC  D001               	goto	i1u1693_21
 26635  0000BE  D001               	goto	i1u1693_20
 26636  0000C0                     i1u1693_21:
 26637  0000C0  D00C               	goto	i1l12976
 26638  0000C2                     i1u1693_20:
 26639  0000C2                     
 26640                           ; BSR set to: 0
 26641  0000C2  0EE9               	movlw	233
 26642  0000C4  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26643  0000C6  0E03               	movlw	3
 26644  0000C8  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26645  0000CA  A0D8               	btfss	status,0,c
 26646  0000CC  D001               	goto	i1u1694_21
 26647  0000CE  D001               	goto	i1u1694_20
 26648  0000D0                     i1u1694_21:
 26649  0000D0  D004               	goto	i1l12976
 26650  0000D2                     i1u1694_20:
 26651  0000D2                     i1l12974:
 26652                           
 26653                           ; BSR set to: 0
 26654                           ;main.c: 166: LATC1 = ~LATC1;
 26655  0000D2  728B               	btg	3979,1,c	;volatile
 26656                           
 26657                           ;main.c: 167: status_led_cnt = 0;
 26658  0000D4  6A39               	clrf	_status_led_cnt,c	;volatile
 26659  0000D6  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 26660                           
 26661                           ;main.c: 168: }
 26662  0000D8  D04D               	goto	i1l392
 26663  0000DA                     i1l12976:
 26664                           
 26665                           ; BSR set to: 0
 26666                           ;main.c: 169: else if ((3 == ledFunctionality) &&
 26667                           ;main.c: 170: (status_led_cnt > 400)) {
 26668  0000DA  503F               	movf	_ledFunctionality,w,c
 26669  0000DC  0A03               	xorlw	3
 26670  0000DE  A4D8               	btfss	status,2,c
 26671  0000E0  D001               	goto	i1u1695_21
 26672  0000E2  D001               	goto	i1u1695_20
 26673  0000E4                     i1u1695_21:
 26674  0000E4  D009               	goto	i1l12982
 26675  0000E6                     i1u1695_20:
 26676  0000E6                     
 26677                           ; BSR set to: 0
 26678  0000E6  0E91               	movlw	145
 26679  0000E8  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26680  0000EA  0E01               	movlw	1
 26681  0000EC  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26682  0000EE  A0D8               	btfss	status,0,c
 26683  0000F0  D001               	goto	i1u1696_21
 26684  0000F2  D001               	goto	i1u1696_20
 26685  0000F4                     i1u1696_21:
 26686  0000F4  D001               	goto	i1l12982
 26687  0000F6                     i1u1696_20:
 26688  0000F6  D7ED               	goto	i1l12974
 26689  0000F8                     i1l12982:
 26690                           
 26691                           ; BSR set to: 0
 26692                           ;main.c: 174: else if ((4 == ledFunctionality) &&
 26693                           ;main.c: 175: (status_led_cnt > 100)) {
 26694  0000F8  503F               	movf	_ledFunctionality,w,c
 26695  0000FA  0A04               	xorlw	4
 26696  0000FC  A4D8               	btfss	status,2,c
 26697  0000FE  D001               	goto	i1u1697_21
 26698  000100  D001               	goto	i1u1697_20
 26699  000102                     i1u1697_21:
 26700  000102  D009               	goto	i1l12988
 26701  000104                     i1u1697_20:
 26702  000104                     
 26703                           ; BSR set to: 0
 26704  000104  0E65               	movlw	101
 26705  000106  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26706  000108  0E00               	movlw	0
 26707  00010A  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26708  00010C  A0D8               	btfss	status,0,c
 26709  00010E  D001               	goto	i1u1698_21
 26710  000110  D001               	goto	i1u1698_20
 26711  000112                     i1u1698_21:
 26712  000112  D001               	goto	i1l12988
 26713  000114                     i1u1698_20:
 26714  000114  D7DE               	goto	i1l12974
 26715  000116                     i1l12988:
 26716                           
 26717                           ; BSR set to: 0
 26718                           ;main.c: 179: else if ((5 == ledFunctionality) &&
 26719                           ;main.c: 180: (status_led_cnt > 70)) {
 26720  000116  503F               	movf	_ledFunctionality,w,c
 26721  000118  0A05               	xorlw	5
 26722  00011A  A4D8               	btfss	status,2,c
 26723  00011C  D001               	goto	i1u1699_21
 26724  00011E  D001               	goto	i1u1699_20
 26725  000120                     i1u1699_21:
 26726  000120  D009               	goto	i1l12994
 26727  000122                     i1u1699_20:
 26728  000122                     
 26729                           ; BSR set to: 0
 26730  000122  0E47               	movlw	71
 26731  000124  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26732  000126  0E00               	movlw	0
 26733  000128  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26734  00012A  A0D8               	btfss	status,0,c
 26735  00012C  D001               	goto	i1u1700_21
 26736  00012E  D001               	goto	i1u1700_20
 26737  000130                     i1u1700_21:
 26738  000130  D001               	goto	i1l12994
 26739  000132                     i1u1700_20:
 26740  000132  D7CF               	goto	i1l12974
 26741  000134                     i1l12994:
 26742                           
 26743                           ; BSR set to: 0
 26744                           ;main.c: 184: else if ((6 == ledFunctionality) &&
 26745                           ;main.c: 185: (status_led_cnt > 40)) {
 26746  000134  503F               	movf	_ledFunctionality,w,c
 26747  000136  0A06               	xorlw	6
 26748  000138  A4D8               	btfss	status,2,c
 26749  00013A  D001               	goto	i1u1701_21
 26750  00013C  D001               	goto	i1u1701_20
 26751  00013E                     i1u1701_21:
 26752  00013E  D009               	goto	i1l13000
 26753  000140                     i1u1701_20:
 26754  000140                     
 26755                           ; BSR set to: 0
 26756  000140  0E29               	movlw	41
 26757  000142  5C39               	subwf	_status_led_cnt,w,c	;volatile
 26758  000144  0E00               	movlw	0
 26759  000146  583A               	subwfb	_status_led_cnt+1,w,c	;volatile
 26760  000148  A0D8               	btfss	status,0,c
 26761  00014A  D001               	goto	i1u1702_21
 26762  00014C  D001               	goto	i1u1702_20
 26763  00014E                     i1u1702_21:
 26764  00014E  D001               	goto	i1l13000
 26765  000150                     i1u1702_20:
 26766  000150  D7C0               	goto	i1l12974
 26767  000152                     i1l13000:
 26768                           
 26769                           ; BSR set to: 0
 26770                           ;main.c: 189: else if (1 == ledFunctionality) {
 26771  000152  043F               	decf	_ledFunctionality,w,c
 26772  000154  A4D8               	btfss	status,2,c
 26773  000156  D001               	goto	i1u1703_21
 26774  000158  D001               	goto	i1u1703_20
 26775  00015A                     i1u1703_21:
 26776  00015A  D004               	goto	i1l401
 26777  00015C                     i1u1703_20:
 26778  00015C                     
 26779                           ; BSR set to: 0
 26780                           ;main.c: 190: LATC1 = 1;
 26781  00015C  828B               	bsf	3979,1,c	;volatile
 26782                           
 26783                           ;main.c: 191: status_led_cnt = 0;
 26784  00015E  6A39               	clrf	_status_led_cnt,c	;volatile
 26785  000160  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 26786                           
 26787                           ;main.c: 192: }
 26788  000162  D008               	goto	i1l392
 26789  000164                     i1l401:
 26790                           
 26791                           ; BSR set to: 0
 26792                           ;main.c: 193: else if (0 == ledFunctionality) {
 26793  000164  663F               	tstfsz	_ledFunctionality,c
 26794  000166  D001               	goto	i1u1704_21
 26795  000168  D001               	goto	i1u1704_20
 26796  00016A                     i1u1704_21:
 26797  00016A  D004               	goto	i1l398
 26798  00016C                     i1u1704_20:
 26799  00016C                     
 26800                           ; BSR set to: 0
 26801                           ;main.c: 194: LATC1 = 0;
 26802  00016C  928B               	bcf	3979,1,c	;volatile
 26803                           
 26804                           ;main.c: 195: status_led_cnt = 0;
 26805  00016E  6A39               	clrf	_status_led_cnt,c	;volatile
 26806  000170  6A3A               	clrf	_status_led_cnt+1,c	;volatile
 26807  000172  D000               	goto	i1l392
 26808  000174                     i1l398:
 26809  000174                     i1l392:
 26810                           
 26811                           ; BSR set to: 0
 26812                           ;main.c: 196: }
 26813                           ;main.c: 198: INTCONbits.TMR0IF = 0;
 26814  000174  94F2               	bcf	intcon,2,c	;volatile
 26815  000176                     i1l389:
 26816                           
 26817                           ;main.c: 199: }
 26818                           ;main.c: 202: if ( 1 == IRXIF ) {
 26819  000176  AEA4               	btfss	4004,7,c	;volatile
 26820  000178  D001               	goto	i1u1705_21
 26821  00017A  D001               	goto	i1u1705_20
 26822  00017C                     i1u1705_21:
 26823  00017C  D001               	goto	i1l404
 26824  00017E                     i1u1705_20:
 26825  00017E                     
 26826                           ;main.c: 204: IRXIF = 0;
 26827  00017E  9EA4               	bcf	4004,7,c	;volatile
 26828  000180                     i1l404:
 26829                           
 26830                           ;main.c: 205: }
 26831                           ;main.c: 208: if ( RXBnIF ) {
 26832  000180  A2A4               	btfss	4004,1,c	;volatile
 26833  000182  D001               	goto	i1u1706_21
 26834  000184  D001               	goto	i1u1706_20
 26835  000186                     i1u1706_21:
 26836  000186  D061               	goto	i1l413
 26837  000188                     i1u1706_20:
 26838  000188                     
 26839                           ;main.c: 210: uint32_t id;
 26840                           ;main.c: 211: uint8_t dlc;
 26841                           ;main.c: 212: uint8_t data[8];
 26842                           ;main.c: 213: ECAN_RX_MSG_FLAGS flags;
 26843                           ;main.c: 215: if ( ECANReceiveMessage((unsigned long *)&id,
 26844                           ;main.c: 216: (BYTE*)&data,
 26845                           ;main.c: 217: (BYTE*)&dlc,
 26846                           ;main.c: 218: &flags) ) {
 26847  000188  0E1C               	movlw	low Interrupt@data
 26848  00018A  6E08               	movwf	?_ECANReceiveMessage,c
 26849  00018C  0E25               	movlw	low Interrupt@dlc
 26850  00018E  6E09               	movwf	?_ECANReceiveMessage+1,c
 26851  000190  0E2A               	movlw	low Interrupt@flags
 26852  000192  6E0A               	movwf	?_ECANReceiveMessage+2,c
 26853  000194  0E26               	movlw	Interrupt@id& (0+255)
 26854  000196  EC2A  F013         	call	_ECANReceiveMessage
 26855  00019A  0900               	iorlw	0
 26856  00019C  B4D8               	btfsc	status,2,c
 26857  00019E  D001               	goto	i1u1707_21
 26858  0001A0  D001               	goto	i1u1707_20
 26859  0001A2                     i1u1707_21:
 26860  0001A2  D052               	goto	i1l13026
 26861  0001A4                     i1u1707_20:
 26862  0001A4                     
 26863                           ;main.c: 221: if ( flags & ECAN_RX_OVERFLOW ) {
 26864  0001A4  A62A               	btfss	Interrupt@flags,3,c
 26865  0001A6  D001               	goto	i1u1708_21
 26866  0001A8  D001               	goto	i1u1708_20
 26867  0001AA                     i1u1708_21:
 26868  0001AA  D00E               	goto	i1l407
 26869  0001AC                     i1u1708_20:
 26870  0001AC                     
 26871                           ;main.c: 222: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 26872  0001AC  AA2A               	btfss	Interrupt@flags,5,c
 26873  0001AE  D001               	goto	i1u1709_21
 26874  0001B0  D001               	goto	i1u1709_20
 26875  0001B2                     i1u1709_21:
 26876  0001B2  D04A               	goto	i1l13026
 26877  0001B4                     i1u1709_20:
 26878  0001B4                     i1l13014:
 26879  0001B4  0E01               	movlw	1
 26880  0001B6  0100               	movlb	0	; () banked
 26881  0001B8  27D1               	addwf	_can_receiveOverruns& (0+255),f,b
 26882  0001BA  0E00               	movlw	0
 26883  0001BC  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 26884  0001BE  0E00               	movlw	0
 26885  0001C0  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 26886  0001C2  0E00               	movlw	0
 26887  0001C4  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 26888  0001C6  D040               	goto	i1l13026
 26889  0001C8                     i1l407:
 26890                           
 26891                           ;main.c: 224: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 26892                           ;main.c: 225: ( flags & ECAN_RX_XTD_FRAME ) ) {
 26893  0001C8  BC2A               	btfsc	Interrupt@flags,6,c
 26894  0001CA  D001               	goto	i1u1710_21
 26895  0001CC  D001               	goto	i1u1710_20
 26896  0001CE                     i1u1710_21:
 26897  0001CE  D03C               	goto	i1l13026
 26898  0001D0                     i1u1710_20:
 26899  0001D0  AA2A               	btfss	Interrupt@flags,5,c
 26900  0001D2  D001               	goto	i1u1711_21
 26901  0001D4  D001               	goto	i1u1711_20
 26902  0001D6                     i1u1711_21:
 26903  0001D6  D038               	goto	i1l13026
 26904  0001D8                     i1u1711_20:
 26905  0001D8                     
 26906                           ;main.c: 227: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 26907  0001D8  5025               	movf	Interrupt@dlc,w,c
 26908  0001DA  6E13               	movwf	??_Interrupt& (0+255),c
 26909  0001DC  6A14               	clrf	(??_Interrupt+1)& (0+255),c
 26910  0001DE  0E05               	movlw	5
 26911  0001E0  2613               	addwf	??_Interrupt,f,c
 26912  0001E2  0E00               	movlw	0
 26913  0001E4  2214               	addwfc	??_Interrupt+1,f,c
 26914  0001E6  0E40               	movlw	_canInputFifo& (0+255)
 26915  0001E8  ECDB  F023         	call	_fifo_getFree
 26916  0001EC  5013               	movf	??_Interrupt,w,c
 26917  0001EE  5C01               	subwf	?_fifo_getFree,w,c
 26918  0001F0  5014               	movf	??_Interrupt+1,w,c
 26919  0001F2  5802               	subwfb	?_fifo_getFree+1,w,c
 26920  0001F4  A0D8               	btfss	status,0,c
 26921  0001F6  D001               	goto	i1u1712_21
 26922  0001F8  D001               	goto	i1u1712_20
 26923  0001FA                     i1u1712_21:
 26924  0001FA  D7DC               	goto	i1l13014
 26925  0001FC                     i1u1712_20:
 26926  0001FC                     
 26927                           ;main.c: 228: fifo_write( &canInputFifo, (uint8_t *)&id, 4 );
 26928  0001FC  0E26               	movlw	low Interrupt@id
 26929  0001FE  6E01               	movwf	?_fifo_write,c
 26930  000200  0E04               	movlw	4
 26931  000202  6E02               	movwf	?_fifo_write+1,c
 26932  000204  0E00               	movlw	0
 26933  000206  6E03               	movwf	?_fifo_write+2,c
 26934  000208  0E00               	movlw	0
 26935  00020A  6E04               	movwf	?_fifo_write+3,c
 26936  00020C  0E00               	movlw	0
 26937  00020E  6E05               	movwf	?_fifo_write+4,c
 26938  000210  0E40               	movlw	_canInputFifo& (0+255)
 26939  000212  ECBE  F01B         	call	_fifo_write
 26940                           
 26941                           ;main.c: 229: fifo_write( &canInputFifo, &dlc, 1 );
 26942  000216  0E25               	movlw	low Interrupt@dlc
 26943  000218  6E01               	movwf	?_fifo_write,c
 26944  00021A  0E01               	movlw	1
 26945  00021C  6E02               	movwf	?_fifo_write+1,c
 26946  00021E  0E00               	movlw	0
 26947  000220  6E03               	movwf	?_fifo_write+2,c
 26948  000222  0E00               	movlw	0
 26949  000224  6E04               	movwf	?_fifo_write+3,c
 26950  000226  0E00               	movlw	0
 26951  000228  6E05               	movwf	?_fifo_write+4,c
 26952  00022A  0E40               	movlw	_canInputFifo& (0+255)
 26953  00022C  ECBE  F01B         	call	_fifo_write
 26954                           
 26955                           ;main.c: 230: fifo_write( &canInputFifo, (uint8_t *)&data, dlc );
 26956  000230  0E1C               	movlw	low Interrupt@data
 26957  000232  6E01               	movwf	?_fifo_write,c
 26958  000234  5025               	movf	Interrupt@dlc,w,c
 26959  000236  6E02               	movwf	?_fifo_write+1,c
 26960  000238  6A03               	clrf	?_fifo_write+2,c
 26961  00023A  6A04               	clrf	?_fifo_write+3,c
 26962  00023C  6A05               	clrf	?_fifo_write+4,c
 26963  00023E  0E40               	movlw	_canInputFifo& (0+255)
 26964  000240  ECBE  F01B         	call	_fifo_write
 26965  000244                     
 26966                           ;main.c: 232: canrxcount++;
 26967  000244  0100               	movlb	0	; () banked
 26968  000246  2BF0               	incf	_canrxcount& (0+255),f,b	;volatile
 26969  000248                     i1l13026:
 26970                           
 26971                           ;main.c: 236: }
 26972                           ;main.c: 238: }
 26973                           ;main.c: 240: }
 26974                           ;main.c: 243: RXBnIF = 0;
 26975  000248  92A4               	bcf	4004,1,c	;volatile
 26976  00024A                     i1l413:
 26977  00024A  C01B  FFDA         	movff	??_Interrupt+8,fsr2h
 26978  00024E  C01A  FFD9         	movff	??_Interrupt+7,fsr2l
 26979  000252  C019  FFE2         	movff	??_Interrupt+6,fsr1h
 26980  000256  C018  FFE1         	movff	??_Interrupt+5,fsr1l
 26981  00025A  C017  FFE0         	movff	??_Interrupt+4,bsr
 26982  00025E  C016  FFE8         	movff	??_Interrupt+3,wreg
 26983  000262  C015  FFD8         	movff	??_Interrupt+2,status
 26984  000266  0010               	retfie	
 26985  000268                     __end_of_Interrupt:
 26986                           	opt stack 0
 26987                           tblptru	equ	0xFF8
 26988                           tblptrh	equ	0xFF7
 26989                           tblptrl	equ	0xFF6
 26990                           tablat	equ	0xFF5
 26991                           prodh	equ	0xFF4
 26992                           prodl	equ	0xFF3
 26993                           intcon	equ	0xFF2
 26994                           indf0	equ	0xFEF
 26995                           postinc0	equ	0xFEE
 26996                           fsr0h	equ	0xFEA
 26997                           fsr0l	equ	0xFE9
 26998                           wreg	equ	0xFE8
 26999                           indf1	equ	0xFE7
 27000                           postinc1	equ	0xFE6
 27001                           postdec1	equ	0xFE5
 27002                           fsr1h	equ	0xFE2
 27003                           fsr1l	equ	0xFE1
 27004                           bsr	equ	0xFE0
 27005                           indf2	equ	0xFDF
 27006                           postinc2	equ	0xFDE
 27007                           postdec2	equ	0xFDD
 27008                           plusw2	equ	0xFDB
 27009                           fsr2h	equ	0xFDA
 27010                           fsr2l	equ	0xFD9
 27011                           status	equ	0xFD8
 27012                           
 27013 ;; *************** function i1_WriteTimer0 *****************
 27014 ;; Defined at:
 27015 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27016 ;; Parameters:    Size  Location     Type
 27017 ;;  timer0          2    0[COMRAM] unsigned int 
 27018 ;; Auto vars:     Size  Location     Type
 27019 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 27020 ;; Return value:  Size  Location     Type
 27021 ;;		None               void
 27022 ;; Registers used:
 27023 ;;		None
 27024 ;; Tracked objects:
 27025 ;;		On entry : 0/0
 27026 ;;		On exit  : 0/0
 27027 ;;		Unchanged: 0/0
 27028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27029 ;;      Params:         2       0       0       0       0       0       0
 27030 ;;      Locals:         2       0       0       0       0       0       0
 27031 ;;      Temps:          0       0       0       0       0       0       0
 27032 ;;      Totals:         4       0       0       0       0       0       0
 27033 ;;Total ram usage:        4 bytes
 27034 ;; Hardware stack levels used:    1
 27035 ;; This function calls:
 27036 ;;		Nothing
 27037 ;; This function is called by:
 27038 ;;		_Interrupt
 27039 ;; This function uses a non-reentrant model
 27040 ;;
 27041                           
 27042                           	psect	text82
 27043  005768                     __ptext82:
 27044                           	opt stack 0
 27045  005768                     i1_WriteTimer0:
 27046                           	opt stack 21
 27047                           
 27048                           ;incstack = 0
 27049                           ;incstack = 0
 27050  005768  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 27051  00576C  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 27052  005770  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 27053  005774  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 27054  005778  0012               	return	
 27055  00577A                     __end_ofi1_WriteTimer0:
 27056                           	opt stack 0
 27057                           tblptru	equ	0xFF8
 27058                           tblptrh	equ	0xFF7
 27059                           tblptrl	equ	0xFF6
 27060                           tablat	equ	0xFF5
 27061                           prodh	equ	0xFF4
 27062                           prodl	equ	0xFF3
 27063                           intcon	equ	0xFF2
 27064                           indf0	equ	0xFEF
 27065                           postinc0	equ	0xFEE
 27066                           fsr0h	equ	0xFEA
 27067                           fsr0l	equ	0xFE9
 27068                           wreg	equ	0xFE8
 27069                           indf1	equ	0xFE7
 27070                           postinc1	equ	0xFE6
 27071                           postdec1	equ	0xFE5
 27072                           fsr1h	equ	0xFE2
 27073                           fsr1l	equ	0xFE1
 27074                           bsr	equ	0xFE0
 27075                           indf2	equ	0xFDF
 27076                           postinc2	equ	0xFDE
 27077                           postdec2	equ	0xFDD
 27078                           plusw2	equ	0xFDB
 27079                           fsr2h	equ	0xFDA
 27080                           fsr2l	equ	0xFD9
 27081                           status	equ	0xFD8
 27082                           
 27083 ;; *************** function _fifo_getFree *****************
 27084 ;; Defined at:
 27085 ;;		line 96 in file "fifo.c"
 27086 ;; Parameters:    Size  Location     Type
 27087 ;;  f               1    wreg     PTR struct .
 27088 ;;		 -> canInputFifo(8), 
 27089 ;; Auto vars:     Size  Location     Type
 27090 ;;  f               1   10[COMRAM] PTR struct .
 27091 ;;		 -> canInputFifo(8), 
 27092 ;; Return value:  Size  Location     Type
 27093 ;;                  2    0[COMRAM] unsigned short 
 27094 ;; Registers used:
 27095 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27096 ;; Tracked objects:
 27097 ;;		On entry : 0/0
 27098 ;;		On exit  : 0/0
 27099 ;;		Unchanged: 0/0
 27100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27101 ;;      Params:         2       0       0       0       0       0       0
 27102 ;;      Locals:         1       0       0       0       0       0       0
 27103 ;;      Temps:          8       0       0       0       0       0       0
 27104 ;;      Totals:        11       0       0       0       0       0       0
 27105 ;;Total ram usage:       11 bytes
 27106 ;; Hardware stack levels used:    1
 27107 ;; This function calls:
 27108 ;;		Nothing
 27109 ;; This function is called by:
 27110 ;;		_Interrupt
 27111 ;; This function uses a non-reentrant model
 27112 ;;
 27113                           
 27114                           	psect	text83
 27115  0047B6                     __ptext83:
 27116                           	opt stack 0
 27117  0047B6                     _fifo_getFree:
 27118                           	opt stack 21
 27119                           
 27120                           ;incstack = 0
 27121                           ;incstack = 0
 27122                           ;fifo_getFree@f stored from wreg
 27123  0047B6  CFE8 F00B          	movff	wreg,fifo_getFree@f
 27124                           
 27125                           ;fifo.c: 97: if (f->head < f->tail) {
 27126  0047BA  D83F               	call	PL68	;call to abstracted procedure
 27127  0047BC  500B               	movf	fifo_getFree@f,w,c
 27128  0047BE  6EE1               	movwf	fsr1l,c
 27129  0047C0  6AE2               	clrf	fsr1h,c
 27130  0047C2  0E02               	movlw	2
 27131  0047C4  26E1               	addwf	fsr1l,f,c
 27132  0047C6  6AE2               	clrf	fsr1h,c
 27133  0047C8  52E6               	movf	postinc1,f,c
 27134  0047CA  52DE               	movf	postinc2,f,c
 27135  0047CC  50DD               	movf	postdec2,w,c
 27136  0047CE  5CE5               	subwf	postdec1,w,c
 27137  0047D0  E102               	bnz	i1u615_25
 27138  0047D2  50DF               	movf	indf2,w,c
 27139  0047D4  5CE7               	subwf	indf1,w,c
 27140  0047D6                     i1u615_25:
 27141  0047D6  E210               	bc	i1l6330
 27142                           
 27143                           ;fifo.c: 98: return (f->tail - f->head);
 27144  0047D8  D837               	call	PL108	;call to abstracted procedure
 27145  0047DA  CFDE F003          	movff	postinc2,??_fifo_getFree
 27146  0047DE  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27147  0047E2  D82B               	call	PL68	;call to abstracted procedure
 27148  0047E4  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27149  0047E8  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27150  0047EC  5003               	movf	??_fifo_getFree,w,c
 27151  0047EE  5C05               	subwf	??_fifo_getFree+2,w,c
 27152  0047F0  6E01               	movwf	?_fifo_getFree,c
 27153  0047F2  5004               	movf	??_fifo_getFree+1,w,c
 27154  0047F4  5806               	subwfb	??_fifo_getFree+3,w,c
 27155  0047F6  D01F               	goto	L42
 27156  0047F8                     i1l6330:
 27157                           
 27158                           ;fifo.c: 100: else {
 27159                           ;fifo.c: 101: return (f->size + (f->tail - f->head));
 27160  0047F8  D820               	call	PL68	;call to abstracted procedure
 27161  0047FA  CFDE F003          	movff	postinc2,??_fifo_getFree
 27162  0047FE  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27163  004802  D822               	call	PL108	;call to abstracted procedure
 27164  004804  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27165  004808  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27166  00480C  500B               	movf	fifo_getFree@f,w,c
 27167  00480E  6ED9               	movwf	fsr2l,c
 27168  004810  6ADA               	clrf	fsr2h,c
 27169  004812  0E06               	movlw	6
 27170  004814  26D9               	addwf	fsr2l,f,c
 27171  004816  6ADA               	clrf	fsr2h,c
 27172  004818  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 27173  00481C  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 27174  004820  5005               	movf	??_fifo_getFree+2,w,c
 27175  004822  5C07               	subwf	??_fifo_getFree+4,w,c
 27176  004824  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 27177  004826  5006               	movf	??_fifo_getFree+3,w,c
 27178  004828  5808               	subwfb	??_fifo_getFree+5,w,c
 27179  00482A  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 27180  00482C  5003               	movf	??_fifo_getFree,w,c
 27181  00482E  2409               	addwf	??_fifo_getFree+6,w,c
 27182  004830  6E01               	movwf	?_fifo_getFree,c
 27183  004832  5004               	movf	??_fifo_getFree+1,w,c
 27184  004834  200A               	addwfc	??_fifo_getFree+7,w,c
 27185  004836                     L42:
 27186  004836  6E02               	movwf	?_fifo_getFree+1,c
 27187  004838  0012               	return	
 27188  00483A                     __end_of_fifo_getFree:
 27189                           	opt stack 0
 27190  00483A                     PL68:
 27191                           	opt stack 21
 27192  00483A  500B               	movf	fifo_getFree@f,w,c
 27193  00483C  6ED9               	movwf	fsr2l,c
 27194  00483E  6ADA               	clrf	fsr2h,c
 27195  004840  0E04               	movlw	4
 27196  004842  26D9               	addwf	fsr2l,f,c
 27197  004844  6ADA               	clrf	fsr2h,c
 27198  004846  0012               	return	
 27199  004848                     __end_ofPL68:
 27200                           	opt stack 0
 27201  004848                     PL108:
 27202                           	opt stack 21
 27203  004848  500B               	movf	fifo_getFree@f,w,c
 27204  00484A  6ED9               	movwf	fsr2l,c
 27205  00484C  6ADA               	clrf	fsr2h,c
 27206  00484E  0E02               	movlw	2
 27207  004850  26D9               	addwf	fsr2l,f,c
 27208  004852  6ADA               	clrf	fsr2h,c
 27209  004854  0012               	return	
 27210  004856                     __end_ofPL108:
 27211                           	opt stack 0
 27212                           tblptru	equ	0xFF8
 27213                           tblptrh	equ	0xFF7
 27214                           tblptrl	equ	0xFF6
 27215                           tablat	equ	0xFF5
 27216                           prodh	equ	0xFF4
 27217                           prodl	equ	0xFF3
 27218                           intcon	equ	0xFF2
 27219                           indf0	equ	0xFEF
 27220                           postinc0	equ	0xFEE
 27221                           fsr0h	equ	0xFEA
 27222                           fsr0l	equ	0xFE9
 27223                           wreg	equ	0xFE8
 27224                           indf1	equ	0xFE7
 27225                           postinc1	equ	0xFE6
 27226                           postdec1	equ	0xFE5
 27227                           fsr1h	equ	0xFE2
 27228                           fsr1l	equ	0xFE1
 27229                           bsr	equ	0xFE0
 27230                           indf2	equ	0xFDF
 27231                           postinc2	equ	0xFDE
 27232                           postdec2	equ	0xFDD
 27233                           plusw2	equ	0xFDB
 27234                           fsr2h	equ	0xFDA
 27235                           fsr2l	equ	0xFD9
 27236                           status	equ	0xFD8
 27237                           
 27238 ;; *************** function _ECANReceiveMessage *****************
 27239 ;; Defined at:
 27240 ;;		line 803 in file "ECAN.c"
 27241 ;; Parameters:    Size  Location     Type
 27242 ;;  id              1    wreg     PTR unsigned long 
 27243 ;;		 -> Interrupt@id(4), 
 27244 ;;  data            1    7[COMRAM] PTR unsigned char 
 27245 ;;		 -> Interrupt@data(8), 
 27246 ;;  dataLen         1    8[COMRAM] PTR unsigned char 
 27247 ;;		 -> Interrupt@dlc(1), 
 27248 ;;  msgFlags        1    9[COMRAM] PTR enum E16324
 27249 ;;		 -> Interrupt@flags(1), 
 27250 ;; Auto vars:     Size  Location     Type
 27251 ;;  id              1   12[COMRAM] PTR unsigned long 
 27252 ;;		 -> Interrupt@id(4), 
 27253 ;;  ptr             2   16[COMRAM] PTR unsigned char 
 27254 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27255 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27256 ;;  savedPtr        2   10[COMRAM] PTR unsigned char 
 27257 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27258 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27259 ;;  temp            1   15[COMRAM] struct .
 27260 ;;  mode            1   14[COMRAM] unsigned char 
 27261 ;;  i               1   13[COMRAM] unsigned char 
 27262 ;; Return value:  Size  Location     Type
 27263 ;;                  1    wreg      enum E15660
 27264 ;; Registers used:
 27265 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27266 ;; Tracked objects:
 27267 ;;		On entry : 0/0
 27268 ;;		On exit  : 0/0
 27269 ;;		Unchanged: 0/0
 27270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27271 ;;      Params:         3       0       0       0       0       0       0
 27272 ;;      Locals:         8       0       0       0       0       0       0
 27273 ;;      Temps:          0       0       0       0       0       0       0
 27274 ;;      Totals:        11       0       0       0       0       0       0
 27275 ;;Total ram usage:       11 bytes
 27276 ;; Hardware stack levels used:    1
 27277 ;; Hardware stack levels required when called:    1
 27278 ;; This function calls:
 27279 ;;		__ECANPointBuffer
 27280 ;;		__RegsToCANID
 27281 ;; This function is called by:
 27282 ;;		_Interrupt
 27283 ;; This function uses a non-reentrant model
 27284 ;;
 27285                           
 27286                           	psect	text84
 27287  002654                     __ptext84:
 27288                           	opt stack 0
 27289  002654                     _ECANReceiveMessage:
 27290                           	opt stack 20
 27291                           
 27292                           ;incstack = 0
 27293                           ;incstack = 0
 27294                           ;ECANReceiveMessage@id stored from wreg
 27295  002654  CFE8 F00D          	movff	wreg,ECANReceiveMessage@id
 27296                           
 27297                           ;ECAN.c: 805: BYTE mode;
 27298                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27299                           ;ECAN.c: 809: char i;
 27300                           ;ECAN.c: 810: BYTE_VAL temp;
 27301                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27302  002658  6A3E               	clrf	__ECANRxFilterHitInfo,c
 27303                           
 27304                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27305  00265A  5077               	movf	3959,w,c	;volatile
 27306  00265C  0BC0               	andlw	192
 27307  00265E  6E0F               	movwf	ECANReceiveMessage@mode,c
 27308                           
 27309                           ;ECAN.c: 816: if ( mode == 0x00 )
 27310  002660  660F               	tstfsz	ECANReceiveMessage@mode,c
 27311  002662  D032               	goto	i1l9580
 27312                           
 27313                           ;ECAN.c: 822: {
 27314                           ;ECAN.c: 824: if ( RXB0FUL )
 27315  002664  AE60               	btfss	3936,7,c	;volatile
 27316  002666  D012               	goto	i1l1440
 27317                           
 27318                           ;ECAN.c: 825: {
 27319                           ;ECAN.c: 827: RXB0IF = 0;
 27320  002668  90A4               	bcf	4004,0,c	;volatile
 27321                           
 27322                           ;ECAN.c: 830: if ( RXB0OVFL )
 27323  00266A  AE74               	btfss	3956,7,c	;volatile
 27324  00266C  D006               	goto	i1l9556
 27325                           
 27326                           ;ECAN.c: 831: {
 27327                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27328  00266E  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27329  002670  6ED9               	movwf	fsr2l,c
 27330  002672  6ADA               	clrf	fsr2h,c
 27331  002674  0E00               	movlw	0
 27332  002676  86DB               	bsf	plusw2,3,c
 27333                           
 27334                           ;ECAN.c: 833: RXB0OVFL = 0;
 27335  002678  9E74               	bcf	3956,7,c	;volatile
 27336  00267A                     i1l9556:
 27337                           
 27338                           ;ECAN.c: 834: }
 27339                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27340  00267A  A060               	btfss	3936,0,c	;volatile
 27341  00267C  D002               	bra	i1u1132_25
 27342  00267E  803E               	bsf	__ECANRxFilterHitInfo,0,c
 27343  002680  D001               	bra	i1u1132_27
 27344  002682                     i1u1132_25:
 27345  002682  903E               	bcf	__ECANRxFilterHitInfo,0,c
 27346  002684                     i1u1132_27:
 27347                           
 27348                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27349  002684  0E0F               	movlw	15	;volatile
 27350  002686  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27351  002688  0E60               	movlw	96	;volatile
 27352  00268A  D01A               	goto	L43
 27353  00268C                     i1l1440:
 27354                           
 27355                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27356  00268C  010F               	movlb	15	; () banked
 27357  00268E  AF50               	btfss	80,7,b	;volatile
 27358  002690  D019               	goto	i1l9574
 27359                           
 27360                           ; BSR set to: 15
 27361                           ;ECAN.c: 842: {
 27362                           ;ECAN.c: 844: RXB1IF = 0;
 27363  002692  92A4               	bcf	4004,1,c	;volatile
 27364                           
 27365                           ;ECAN.c: 847: if ( RXB1OVFL )
 27366  002694  AC74               	btfss	3956,6,c	;volatile
 27367  002696  D006               	goto	i1l9566
 27368                           
 27369                           ; BSR set to: 15
 27370                           ;ECAN.c: 848: {
 27371                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27372  002698  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27373  00269A  6ED9               	movwf	fsr2l,c
 27374  00269C  6ADA               	clrf	fsr2h,c
 27375  00269E  0E00               	movlw	0
 27376  0026A0  86DB               	bsf	plusw2,3,c
 27377                           
 27378                           ; BSR set to: 15
 27379                           ;ECAN.c: 850: RXB1OVFL = 0;
 27380  0026A2  9C74               	bcf	3956,6,c	;volatile
 27381  0026A4                     i1l9566:
 27382                           
 27383                           ; BSR set to: 15
 27384                           ;ECAN.c: 851: }
 27385                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27386  0026A4  5150               	movf	80,w,b	;volatile
 27387  0026A6  0B07               	andlw	7
 27388  0026A8  6E3E               	movwf	__ECANRxFilterHitInfo,c
 27389                           
 27390                           ; BSR set to: 15
 27391                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27392  0026AA  0E02               	movlw	2
 27393  0026AC  603E               	cpfslt	__ECANRxFilterHitInfo,c
 27394  0026AE  D005               	goto	i1l9572
 27395                           
 27396                           ; BSR set to: 15
 27397                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27398  0026B0  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27399  0026B2  6ED9               	movwf	fsr2l,c
 27400  0026B4  6ADA               	clrf	fsr2h,c
 27401  0026B6  0E00               	movlw	0
 27402  0026B8  8EDB               	bsf	plusw2,7,c
 27403  0026BA                     i1l9572:
 27404                           
 27405                           ; BSR set to: 15
 27406                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27407  0026BA  0E0F               	movlw	15	;volatile
 27408  0026BC  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27409  0026BE  0E50               	movlw	80	;volatile
 27410  0026C0                     L43:
 27411  0026C0  6E11               	movwf	ECANReceiveMessage@ptr,c
 27412                           
 27413                           ;ECAN.c: 860: }
 27414  0026C2  D065               	goto	i1l9634
 27415  0026C4                     i1l9574:
 27416                           
 27417                           ;ECAN.c: 861: else
 27418                           ;ECAN.c: 862: return FALSE;
 27419  0026C4  0E00               	movlw	0
 27420  0026C6  D0C2               	goto	i1l1447
 27421  0026C8                     i1l9580:
 27422                           
 27423                           ;ECAN.c: 869: else if ( mode == 0x40 )
 27424  0026C8  500F               	movf	ECANReceiveMessage@mode,w,c
 27425  0026CA  0A40               	xorlw	64
 27426  0026CC  E146               	bnz	i1l1450
 27427                           
 27428                           ;ECAN.c: 875: {
 27429                           ;ECAN.c: 876: if ( RXB0FUL )
 27430  0026CE  AE60               	btfss	3936,7,c	;volatile
 27431  0026D0  D004               	goto	i1l1451
 27432                           
 27433                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 27434  0026D2  0E0F               	movlw	15	;volatile
 27435  0026D4  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27436  0026D6  0E60               	movlw	96	;volatile
 27437  0026D8  D03E               	goto	L50
 27438  0026DA                     i1l1451:
 27439                           
 27440                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 27441  0026DA  010F               	movlb	15	; () banked
 27442  0026DC  AF50               	btfss	80,7,b	;volatile
 27443  0026DE  D004               	goto	i1l1453
 27444                           
 27445                           ; BSR set to: 15
 27446                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 27447  0026E0  0E0F               	movlw	15	;volatile
 27448  0026E2  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27449  0026E4  0E50               	movlw	80	;volatile
 27450  0026E6  D037               	goto	L50
 27451  0026E8                     i1l1453:
 27452                           
 27453                           ; BSR set to: 15
 27454                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 27455  0026E8  010D               	movlb	13
 27456  0026EA  B5F8               	btfsc	248,2,b	;volatile
 27457  0026EC  D007               	goto	i1l1455
 27458  0026EE  010E               	movlb	14
 27459  0026F0  AF20               	btfss	32,7,b	;volatile
 27460  0026F2  D004               	goto	i1l1455
 27461                           
 27462                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 27463  0026F4  0E0E               	movlw	14	;volatile
 27464  0026F6  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27465  0026F8  0E20               	movlw	32	;volatile
 27466  0026FA  D02D               	goto	L50
 27467  0026FC                     i1l1455:
 27468                           
 27469                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 27470  0026FC  010D               	movlb	13
 27471  0026FE  B7F8               	btfsc	248,3,b	;volatile
 27472  002700  D007               	goto	i1l1457
 27473  002702  010E               	movlb	14
 27474  002704  AF30               	btfss	48,7,b	;volatile
 27475  002706  D004               	goto	i1l1457
 27476                           
 27477                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 27478  002708  0E0E               	movlw	14	;volatile
 27479  00270A  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27480  00270C  0E30               	movlw	48	;volatile
 27481  00270E  D023               	goto	L50
 27482  002710                     i1l1457:
 27483                           
 27484                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 27485  002710  010D               	movlb	13
 27486  002712  B9F8               	btfsc	248,4,b	;volatile
 27487  002714  D007               	goto	i1l1459
 27488  002716  010E               	movlb	14
 27489  002718  AF40               	btfss	64,7,b	;volatile
 27490  00271A  D004               	goto	i1l1459
 27491                           
 27492                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 27493  00271C  0E0E               	movlw	14	;volatile
 27494  00271E  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27495  002720  0E40               	movlw	64	;volatile
 27496  002722  D019               	goto	L50
 27497  002724                     i1l1459:
 27498                           
 27499                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 27500  002724  010D               	movlb	13
 27501  002726  BBF8               	btfsc	248,5,b	;volatile
 27502  002728  D005               	goto	i1l1461
 27503  00272A  010E               	movlb	14
 27504  00272C  AF50               	btfss	80,7,b	;volatile
 27505  00272E  D002               	goto	i1l1461
 27506                           
 27507                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 27508  002730  0E0E               	movlw	14	;volatile
 27509  002732  D7D7               	goto	L51
 27510  002734                     i1l1461:
 27511                           
 27512                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 27513  002734  010D               	movlb	13
 27514  002736  BDF8               	btfsc	248,6,b	;volatile
 27515  002738  D005               	goto	i1l1463
 27516  00273A  010E               	movlb	14
 27517  00273C  AF60               	btfss	96,7,b	;volatile
 27518  00273E  D002               	goto	i1l1463
 27519                           
 27520                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 27521  002740  0E0E               	movlw	14	;volatile
 27522  002742  D7C8               	goto	L52
 27523  002744                     i1l1463:
 27524                           
 27525                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 27526  002744  010D               	movlb	13
 27527  002746  BFF8               	btfsc	248,7,b	;volatile
 27528  002748  D7BD               	goto	i1l9574
 27529  00274A  010E               	movlb	14
 27530  00274C  AF70               	btfss	112,7,b	;volatile
 27531  00274E  D7BA               	goto	i1l9574
 27532                           
 27533                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 27534  002750  0E0E               	movlw	14	;volatile
 27535  002752  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 27536  002754  0E70               	movlw	112	;volatile
 27537  002756                     L50:
 27538  002756  6E11               	movwf	ECANReceiveMessage@ptr,c
 27539  002758  D00A               	goto	i1l9624
 27540  00275A                     i1l1450:
 27541                           
 27542                           ;ECAN.c: 910: else
 27543                           ;ECAN.c: 915: {
 27544                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 27545  00275A  AE74               	btfss	3956,7,c	;volatile
 27546  00275C  D7B3               	goto	i1l9574
 27547                           
 27548                           ;ECAN.c: 919: {
 27549                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 27550  00275E  506F               	movf	3951,w,c	;volatile
 27551  002760  0B07               	andlw	7
 27552  002762  EC09  F027         	call	__ECANPointBuffer
 27553  002766  C001  F011         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 27554  00276A  C002  F012         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 27555  00276E                     i1l9624:
 27556                           
 27557                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 27558  00276E  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27559  002772  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27560  002776  50DF               	movf	indf2,w,c
 27561  002778  0B1F               	andlw	31
 27562  00277A  6E3E               	movwf	__ECANRxFilterHitInfo,c
 27563                           
 27564                           ;ECAN.c: 934: RXB1IF = 0;
 27565  00277C  92A4               	bcf	4004,1,c	;volatile
 27566                           
 27567                           ;ECAN.c: 936: if ( RXB1OVFL )
 27568  00277E  AC74               	btfss	3956,6,c	;volatile
 27569  002780  D006               	goto	i1l9634
 27570                           
 27571                           ;ECAN.c: 937: {
 27572                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 27573  002782  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27574  002784  6ED9               	movwf	fsr2l,c
 27575  002786  6ADA               	clrf	fsr2h,c
 27576  002788  0E00               	movlw	0
 27577  00278A  86DB               	bsf	plusw2,3,c
 27578                           
 27579                           ;ECAN.c: 939: RXB1OVFL = 0;
 27580  00278C  9C74               	bcf	3956,6,c	;volatile
 27581  00278E                     i1l9634:
 27582                           
 27583                           ;ECAN.c: 944: savedPtr = ptr;
 27584  00278E  C011  F00B         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 27585  002792  C012  F00C         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 27586                           
 27587                           ;ECAN.c: 945: *msgFlags = 0;
 27588  002796  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27589  002798  6ED9               	movwf	fsr2l,c
 27590  00279A  6ADA               	clrf	fsr2h,c
 27591  00279C  6ADF               	clrf	indf2,c
 27592                           
 27593                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 27594  00279E  EE20 F005          	lfsr	2,5
 27595  0027A2  D855               	call	PL106	;call to abstracted procedure
 27596                           
 27597                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 27598  0027A4  5009               	movf	ECANReceiveMessage@dataLen,w,c
 27599  0027A6  6ED9               	movwf	fsr2l,c
 27600  0027A8  6ADA               	clrf	fsr2h,c
 27601  0027AA  5010               	movf	ECANReceiveMessage@temp,w,c
 27602  0027AC  0B0F               	andlw	15
 27603  0027AE  6EDF               	movwf	indf2,c
 27604                           
 27605                           ;ECAN.c: 952: if ( temp.bits.b6 )
 27606  0027B0  AC10               	btfss	ECANReceiveMessage@temp,6,c
 27607  0027B2  D005               	goto	i1l1471
 27608                           
 27609                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 27610  0027B4  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27611  0027B6  6ED9               	movwf	fsr2l,c
 27612  0027B8  6ADA               	clrf	fsr2h,c
 27613  0027BA  0E00               	movlw	0
 27614  0027BC  8CDB               	bsf	plusw2,6,c
 27615  0027BE                     i1l1471:
 27616                           
 27617                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 27618  0027BE  EE20 F002          	lfsr	2,2
 27619  0027C2  D845               	call	PL106	;call to abstracted procedure
 27620                           
 27621                           ;ECAN.c: 957: if ( temp.bits.b3 )
 27622  0027C4  A610               	btfss	ECANReceiveMessage@temp,3,c
 27623  0027C6  D008               	goto	i1l1472
 27624                           
 27625                           ;ECAN.c: 958: {
 27626                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 27627  0027C8  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27628  0027CA  6ED9               	movwf	fsr2l,c
 27629  0027CC  6ADA               	clrf	fsr2h,c
 27630  0027CE  0E00               	movlw	0
 27631  0027D0  8ADB               	bsf	plusw2,5,c
 27632                           
 27633                           ;ECAN.c: 960: temp.Val = 1;
 27634  0027D2  0E01               	movlw	1
 27635  0027D4  6E10               	movwf	ECANReceiveMessage@temp,c
 27636                           
 27637                           ;ECAN.c: 961: }
 27638  0027D6  D001               	goto	i1l9652
 27639  0027D8                     i1l1472:
 27640                           
 27641                           ;ECAN.c: 962: else
 27642                           ;ECAN.c: 963: temp.Val = 0;
 27643  0027D8  6A10               	clrf	ECANReceiveMessage@temp,c
 27644  0027DA                     i1l9652:
 27645                           
 27646                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 27647  0027DA  2811               	incf	ECANReceiveMessage@ptr,w,c
 27648  0027DC  6E01               	movwf	?__RegsToCANID,c
 27649  0027DE  0E00               	movlw	0
 27650  0027E0  2012               	addwfc	ECANReceiveMessage@ptr+1,w,c
 27651  0027E2  6E02               	movwf	?__RegsToCANID+1,c
 27652  0027E4  C00D  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 27653  0027E8  C010  F004         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 27654  0027EC  EC2F  F01B         	call	__RegsToCANID	;wreg free
 27655                           
 27656                           ;ECAN.c: 968: ptr += 6;
 27657  0027F0  0E06               	movlw	6
 27658  0027F2  2611               	addwf	ECANReceiveMessage@ptr,f,c
 27659  0027F4  0E00               	movlw	0
 27660  0027F6  2212               	addwfc	ECANReceiveMessage@ptr+1,f,c
 27661                           
 27662                           ;ECAN.c: 969: temp.Val = *dataLen;
 27663  0027F8  5009               	movf	ECANReceiveMessage@dataLen,w,c
 27664  0027FA  6ED9               	movwf	fsr2l,c
 27665  0027FC  6ADA               	clrf	fsr2h,c
 27666  0027FE  50DF               	movf	indf2,w,c
 27667  002800  6E10               	movwf	ECANReceiveMessage@temp,c
 27668                           
 27669                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 27670  002802  6A0E               	clrf	ECANReceiveMessage@i,c
 27671  002804  D00D               	goto	i1l9668
 27672  002806                     i1l9660:
 27673                           
 27674                           ;ECAN.c: 971: *data++ = *ptr++;
 27675  002806  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27676  00280A  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27677  00280E  5008               	movf	ECANReceiveMessage@data,w,c
 27678  002810  6EE1               	movwf	fsr1l,c
 27679  002812  6AE2               	clrf	fsr1h,c
 27680  002814  CFDF FFE7          	movff	indf2,indf1
 27681  002818  4A11               	infsnz	ECANReceiveMessage@ptr,f,c
 27682  00281A  2A12               	incf	ECANReceiveMessage@ptr+1,f,c
 27683  00281C  2A08               	incf	ECANReceiveMessage@data,f,c
 27684  00281E  2A0E               	incf	ECANReceiveMessage@i,f,c
 27685  002820                     i1l9668:
 27686  002820  5010               	movf	ECANReceiveMessage@temp,w,c
 27687  002822  5C0E               	subwf	ECANReceiveMessage@i,w,c
 27688  002824  E3F0               	bnc	i1l9660
 27689                           
 27690                           ;ECAN.c: 974: if ( IRXIF )
 27691  002826  AEA4               	btfss	4004,7,c	;volatile
 27692  002828  D006               	goto	i1l9674
 27693                           
 27694                           ;ECAN.c: 975: {
 27695                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 27696  00282A  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 27697  00282C  6ED9               	movwf	fsr2l,c
 27698  00282E  6ADA               	clrf	fsr2h,c
 27699  002830  0E00               	movlw	0
 27700  002832  88DB               	bsf	plusw2,4,c
 27701                           
 27702                           ;ECAN.c: 977: IRXIF = 0;
 27703  002834  9EA4               	bcf	4004,7,c	;volatile
 27704  002836                     i1l9674:
 27705                           
 27706                           ;ECAN.c: 978: }
 27707                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 27708  002836  C00B  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 27709  00283A  C00C  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 27710  00283E  0E7F               	movlw	127
 27711  002840  16DF               	andwf	indf2,f,c
 27712                           
 27713                           ;ECAN.c: 985: if ( mode == 0x80 )
 27714  002842  500F               	movf	ECANReceiveMessage@mode,w,c
 27715  002844  0A80               	xorlw	128
 27716  002846  B4D8               	btfsc	status,2,c
 27717                           
 27718                           ;ECAN.c: 986: FIFOEMPTY = 0;
 27719  002848  9E74               	bcf	3956,7,c	;volatile
 27720                           
 27721                           ;ECAN.c: 992: return TRUE;
 27722  00284A  0E01               	movlw	1
 27723  00284C                     i1l1447:
 27724  00284C  0012               	return	
 27725  00284E                     __end_of_ECANReceiveMessage:
 27726                           	opt stack 0
 27727  00284E                     PL106:
 27728                           	opt stack 20
 27729  00284E  5011               	movf	ECANReceiveMessage@ptr,w,c
 27730  002850  26D9               	addwf	fsr2l,f,c
 27731  002852  5012               	movf	ECANReceiveMessage@ptr+1,w,c
 27732  002854  22DA               	addwfc	fsr2h,f,c
 27733  002856  50DF               	movf	indf2,w,c
 27734  002858  6E10               	movwf	ECANReceiveMessage@temp,c
 27735  00285A  0012               	return	
 27736  00285C                     __end_ofPL106:
 27737                           	opt stack 0
 27738                           tblptru	equ	0xFF8
 27739                           tblptrh	equ	0xFF7
 27740                           tblptrl	equ	0xFF6
 27741                           tablat	equ	0xFF5
 27742                           prodh	equ	0xFF4
 27743                           prodl	equ	0xFF3
 27744                           intcon	equ	0xFF2
 27745                           indf0	equ	0xFEF
 27746                           postinc0	equ	0xFEE
 27747                           fsr0h	equ	0xFEA
 27748                           fsr0l	equ	0xFE9
 27749                           wreg	equ	0xFE8
 27750                           indf1	equ	0xFE7
 27751                           postinc1	equ	0xFE6
 27752                           postdec1	equ	0xFE5
 27753                           fsr1h	equ	0xFE2
 27754                           fsr1l	equ	0xFE1
 27755                           bsr	equ	0xFE0
 27756                           indf2	equ	0xFDF
 27757                           postinc2	equ	0xFDE
 27758                           postdec2	equ	0xFDD
 27759                           plusw2	equ	0xFDB
 27760                           fsr2h	equ	0xFDA
 27761                           fsr2l	equ	0xFD9
 27762                           status	equ	0xFD8
 27763                           
 27764 ;; *************** function __RegsToCANID *****************
 27765 ;; Defined at:
 27766 ;;		line 1158 in file "ECAN.c"
 27767 ;; Parameters:    Size  Location     Type
 27768 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 27769 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27770 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27771 ;;  val             1    2[COMRAM] PTR unsigned long 
 27772 ;;		 -> Interrupt@id(4), 
 27773 ;;  type            1    3[COMRAM] unsigned char 
 27774 ;; Auto vars:     Size  Location     Type
 27775 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 27776 ;;		 -> Interrupt@id(4), 
 27777 ;; Return value:  Size  Location     Type
 27778 ;;		None               void
 27779 ;; Registers used:
 27780 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27781 ;; Tracked objects:
 27782 ;;		On entry : 0/0
 27783 ;;		On exit  : 0/0
 27784 ;;		Unchanged: 0/0
 27785 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27786 ;;      Params:         4       0       0       0       0       0       0
 27787 ;;      Locals:         1       0       0       0       0       0       0
 27788 ;;      Temps:          2       0       0       0       0       0       0
 27789 ;;      Totals:         7       0       0       0       0       0       0
 27790 ;;Total ram usage:        7 bytes
 27791 ;; Hardware stack levels used:    1
 27792 ;; This function calls:
 27793 ;;		Nothing
 27794 ;; This function is called by:
 27795 ;;		_ECANReceiveMessage
 27796 ;; This function uses a non-reentrant model
 27797 ;;
 27798                           
 27799                           	psect	text85
 27800  00365E                     __ptext85:
 27801                           	opt stack 0
 27802  00365E                     __RegsToCANID:
 27803                           	opt stack 20
 27804                           
 27805                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 27806                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 27807                           
 27808                           ;incstack = 0
 27809                           ;incstack = 0
 27810  00365E  C003  F007         	movff	__RegsToCANID@val,__RegsToCANID@Value
 27811                           
 27812                           ;ECAN.c: 1163: if ( type == 0 )
 27813  003662  6604               	tstfsz	__RegsToCANID@type,c
 27814  003664  D02B               	goto	i1l9324
 27815                           
 27816                           ;ECAN.c: 1164: {
 27817                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 27818  003666  5007               	movf	__RegsToCANID@Value,w,c
 27819  003668  6ED9               	movwf	fsr2l,c
 27820  00366A  D86C               	call	PL78	;call to abstracted procedure
 27821  00366C  3605               	rlcf	??__RegsToCANID,f,c
 27822  00366E  90D8               	bcf	status,0,c
 27823  003670  3605               	rlcf	??__RegsToCANID,f,c
 27824  003672  90D8               	bcf	status,0,c
 27825  003674  3405               	rlcf	??__RegsToCANID,w,c
 27826  003676  6EDF               	movwf	indf2,c
 27827                           
 27828                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 27829  003678  5007               	movf	__RegsToCANID@Value,w,c
 27830  00367A  6ED9               	movwf	fsr2l,c
 27831  00367C  6ADA               	clrf	fsr2h,c
 27832  00367E  2AD9               	incf	fsr2l,f,c
 27833  003680  6ADA               	clrf	fsr2h,c
 27834  003682  D873               	call	PL86	;call to abstracted procedure
 27835  003684                     i1u1092_25:
 27836  003684  90D8               	bcf	status,0,c
 27837  003686  3205               	rrcf	??__RegsToCANID,f,c
 27838  003688  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27839  00368A  D7FC               	goto	i1u1092_25
 27840  00368C  5005               	movf	??__RegsToCANID,w,c
 27841                           
 27842                           ;ECAN.c: 1168: ptr++;
 27843                           
 27844                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 27845  00368E  D863               	call	PL80	;call to abstracted procedure
 27846  003690  0E05               	movlw	5
 27847  003692  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 27848  003694                     i1u1093_25:
 27849  003694  90D8               	bcf	status,0,c
 27850  003696  3205               	rrcf	??__RegsToCANID,f,c
 27851  003698  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27852  00369A  D7FC               	goto	i1u1093_25
 27853  00369C  5007               	movf	__RegsToCANID@Value,w,c
 27854  00369E  6ED9               	movwf	fsr2l,c
 27855  0036A0  6ADA               	clrf	fsr2h,c
 27856  0036A2  5005               	movf	??__RegsToCANID,w,c
 27857  0036A4  12DF               	iorwf	indf2,f,c
 27858                           
 27859                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 27860  0036A6  D83D               	call	PL38	;call to abstracted procedure
 27861  0036A8  6ADF               	clrf	indf2,c
 27862                           
 27863                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 27864  0036AA  5007               	movf	__RegsToCANID@Value,w,c
 27865  0036AC  6ED9               	movwf	fsr2l,c
 27866  0036AE  6ADA               	clrf	fsr2h,c
 27867  0036B0  0E03               	movlw	3
 27868  0036B2  26D9               	addwf	fsr2l,f,c
 27869  0036B4  6ADA               	clrf	fsr2h,c
 27870  0036B6  0E00               	movlw	0
 27871  0036B8  6EDF               	movwf	indf2,c
 27872                           
 27873                           ;ECAN.c: 1172: }
 27874  0036BA  D032               	goto	i1l1494
 27875  0036BC                     i1l9324:
 27876                           
 27877                           ;ECAN.c: 1173: else
 27878                           ;ECAN.c: 1174: {
 27879                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 27880  0036BC  D832               	call	PL38	;call to abstracted procedure
 27881  0036BE  D855               	call	PL86	;call to abstracted procedure
 27882  0036C0                     i1u1094_25:
 27883  0036C0  90D8               	bcf	status,0,c
 27884  0036C2  3605               	rlcf	??__RegsToCANID,f,c
 27885  0036C4  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27886  0036C6  D7FC               	goto	i1u1094_25
 27887  0036C8  5005               	movf	??__RegsToCANID,w,c
 27888  0036CA  6EDF               	movwf	indf2,c
 27889                           
 27890                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 27891  0036CC  5007               	movf	__RegsToCANID@Value,w,c
 27892  0036CE  6ED9               	movwf	fsr2l,c
 27893  0036D0  6ADA               	clrf	fsr2h,c
 27894  0036D2  0E03               	movlw	3
 27895  0036D4  26D9               	addwf	fsr2l,f,c
 27896  0036D6  D836               	call	PL78	;call to abstracted procedure
 27897  0036D8  3205               	rrcf	??__RegsToCANID,f,c
 27898  0036DA  90D8               	bcf	status,0,c
 27899  0036DC  3205               	rrcf	??__RegsToCANID,f,c
 27900  0036DE  90D8               	bcf	status,0,c
 27901  0036E0  3005               	rrcf	??__RegsToCANID,w,c
 27902                           
 27903                           ;ECAN.c: 1178: ptr++;
 27904                           
 27905                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 27906  0036E2  D839               	call	PL80	;call to abstracted procedure
 27907  0036E4  0E03               	movlw	3
 27908  0036E6  1605               	andwf	??__RegsToCANID,f,c
 27909  0036E8  D81C               	call	PL38	;call to abstracted procedure
 27910  0036EA  5005               	movf	??__RegsToCANID,w,c
 27911  0036EC  12DF               	iorwf	indf2,f,c
 27912                           
 27913                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 27914  0036EE  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27915  0036F2  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27916  0036F6  50DF               	movf	indf2,w,c
 27917  0036F8  6E05               	movwf	??__RegsToCANID& (0+255),c
 27918  0036FA  90D8               	bcf	status,0,c
 27919  0036FC  3205               	rrcf	??__RegsToCANID,f,c
 27920  0036FE  90D8               	bcf	status,0,c
 27921  003700  3205               	rrcf	??__RegsToCANID,f,c
 27922  003702  90D8               	bcf	status,0,c
 27923  003704  3205               	rrcf	??__RegsToCANID,f,c
 27924  003706  0E1C               	movlw	28
 27925  003708  1605               	andwf	??__RegsToCANID,f,c
 27926  00370A  D80B               	call	PL38	;call to abstracted procedure
 27927  00370C  5005               	movf	??__RegsToCANID,w,c
 27928  00370E  12DF               	iorwf	indf2,f,c
 27929                           
 27930                           ;ECAN.c: 1182: ptr++;
 27931                           
 27932                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 27933  003710  D80F               	call	PL76	;call to abstracted procedure
 27934  003712  2AE1               	incf	fsr1l,f,c
 27935  003714  6AE2               	clrf	fsr1h,c
 27936  003716  CFDF FFE7          	movff	indf2,indf1
 27937                           
 27938                           ;ECAN.c: 1184: ptr++;
 27939                           
 27940                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 27941  00371A  D80A               	call	PL76	;call to abstracted procedure
 27942  00371C  CFDF FFE7          	movff	indf2,indf1
 27943  003720                     i1l1494:
 27944  003720  0012               	return	
 27945  003722                     __end_of__RegsToCANID:
 27946                           	opt stack 0
 27947  003722                     PL38:
 27948                           	opt stack 20
 27949  003722  5007               	movf	__RegsToCANID@Value,w,c
 27950  003724  6ED9               	movwf	fsr2l,c
 27951  003726  6ADA               	clrf	fsr2h,c
 27952  003728  0E02               	movlw	2
 27953  00372A  26D9               	addwf	fsr2l,f,c
 27954  00372C  6ADA               	clrf	fsr2h,c
 27955  00372E  0012               	return	
 27956  003730                     __end_ofPL38:
 27957                           	opt stack 0
 27958  003730                     PL76:
 27959                           	opt stack 20
 27960  003730  4A01               	infsnz	__RegsToCANID@ptr,f,c
 27961  003732  2A02               	incf	__RegsToCANID@ptr+1,f,c
 27962  003734  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27963  003738  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27964  00373C  5007               	movf	__RegsToCANID@Value,w,c
 27965  00373E  6EE1               	movwf	fsr1l,c
 27966  003740  6AE2               	clrf	fsr1h,c
 27967  003742  0012               	return	
 27968  003744                     __end_ofPL76:
 27969                           	opt stack 0
 27970  003744                     PL78:
 27971                           	opt stack 20
 27972  003744  6ADA               	clrf	fsr2h,c
 27973  003746  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 27974  00374A  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 27975  00374E  50E7               	movf	indf1,w,c
 27976  003750  6E05               	movwf	??__RegsToCANID& (0+255),c
 27977  003752  90D8               	bcf	status,0,c
 27978  003754  0012               	return	
 27979  003756                     __end_ofPL78:
 27980                           	opt stack 0
 27981  003756                     PL80:
 27982                           	opt stack 20
 27983  003756  6EDF               	movwf	indf2,c
 27984  003758  4A01               	infsnz	__RegsToCANID@ptr,f,c
 27985  00375A  2A02               	incf	__RegsToCANID@ptr+1,f,c
 27986  00375C  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27987  003760  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27988  003764  50DF               	movf	indf2,w,c
 27989  003766  6E05               	movwf	??__RegsToCANID& (0+255),c
 27990  003768  0012               	return	
 27991  00376A                     __end_ofPL80:
 27992                           	opt stack 0
 27993  00376A                     PL86:
 27994                           	opt stack 20
 27995  00376A  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 27996  00376E  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 27997  003772  50E7               	movf	indf1,w,c
 27998  003774  6E05               	movwf	??__RegsToCANID& (0+255),c
 27999  003776  0E05               	movlw	5
 28000  003778  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 28001  00377A  0C05               	retlw	5
 28002  00377C                     __end_ofPL86:
 28003                           	opt stack 0
 28004                           tblptru	equ	0xFF8
 28005                           tblptrh	equ	0xFF7
 28006                           tblptrl	equ	0xFF6
 28007                           tablat	equ	0xFF5
 28008                           prodh	equ	0xFF4
 28009                           prodl	equ	0xFF3
 28010                           intcon	equ	0xFF2
 28011                           indf0	equ	0xFEF
 28012                           postinc0	equ	0xFEE
 28013                           fsr0h	equ	0xFEA
 28014                           fsr0l	equ	0xFE9
 28015                           wreg	equ	0xFE8
 28016                           indf1	equ	0xFE7
 28017                           postinc1	equ	0xFE6
 28018                           postdec1	equ	0xFE5
 28019                           fsr1h	equ	0xFE2
 28020                           fsr1l	equ	0xFE1
 28021                           bsr	equ	0xFE0
 28022                           indf2	equ	0xFDF
 28023                           postinc2	equ	0xFDE
 28024                           postdec2	equ	0xFDD
 28025                           plusw2	equ	0xFDB
 28026                           fsr2h	equ	0xFDA
 28027                           fsr2l	equ	0xFD9
 28028                           status	equ	0xFD8
 28029                           
 28030 ;; *************** function __ECANPointBuffer *****************
 28031 ;; Defined at:
 28032 ;;		line 1209 in file "ECAN.c"
 28033 ;; Parameters:    Size  Location     Type
 28034 ;;  b               1    wreg     unsigned char 
 28035 ;; Auto vars:     Size  Location     Type
 28036 ;;  b               1    3[COMRAM] unsigned char 
 28037 ;;  pt              2    4[COMRAM] PTR unsigned char 
 28038 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28039 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28040 ;; Return value:  Size  Location     Type
 28041 ;;                  2    0[COMRAM] PTR unsigned char 
 28042 ;; Registers used:
 28043 ;;		wreg, status,2, status,0
 28044 ;; Tracked objects:
 28045 ;;		On entry : 0/0
 28046 ;;		On exit  : 0/0
 28047 ;;		Unchanged: 0/0
 28048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28049 ;;      Params:         3       0       0       0       0       0       0
 28050 ;;      Locals:         3       0       0       0       0       0       0
 28051 ;;      Temps:          0       0       0       0       0       0       0
 28052 ;;      Totals:         6       0       0       0       0       0       0
 28053 ;;Total ram usage:        6 bytes
 28054 ;; Hardware stack levels used:    1
 28055 ;; This function calls:
 28056 ;;		Nothing
 28057 ;; This function is called by:
 28058 ;;		_ECANReceiveMessage
 28059 ;; This function uses a non-reentrant model
 28060 ;;
 28061                           
 28062                           	psect	text86
 28063  004E12                     __ptext86:
 28064                           	opt stack 0
 28065  004E12                     __ECANPointBuffer:
 28066                           	opt stack 20
 28067                           
 28068                           ;incstack = 0
 28069                           ;incstack = 0
 28070                           ;__ECANPointBuffer@b stored from wreg
 28071  004E12  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 28072                           
 28073                           ;ECAN.c: 1210: BYTE* pt;
 28074                           ;ECAN.c: 1212: switch(b)
 28075  004E16  D024               	goto	i1l9310
 28076  004E18                     i1l9292:
 28077                           
 28078                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 28079  004E18  0E0F               	movlw	15	;volatile
 28080  004E1A  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28081  004E1C  0E60               	movlw	96	;volatile
 28082  004E1E  D01E               	goto	L59
 28083  004E20                     i1l9294:
 28084                           
 28085                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 28086  004E20  010F               	movlb	15	; () banked
 28087  004E22  0E0F               	movlw	15	;volatile
 28088  004E24  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28089  004E26  0E50               	movlw	80	;volatile
 28090  004E28  D019               	goto	L59
 28091  004E2A                     i1l9296:
 28092                           
 28093                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 28094  004E2A  010E               	movlb	14	; () banked
 28095  004E2C  0E0E               	movlw	14	;volatile
 28096  004E2E  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28097  004E30  0E20               	movlw	32	;volatile
 28098  004E32  D014               	goto	L59
 28099  004E34                     i1l9298:
 28100                           
 28101                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 28102  004E34  010E               	movlb	14	; () banked
 28103  004E36  0E0E               	movlw	14	;volatile
 28104  004E38  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28105  004E3A  0E30               	movlw	48	;volatile
 28106  004E3C  D00F               	goto	L59
 28107  004E3E                     i1l9300:
 28108                           
 28109                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28110  004E3E  010E               	movlb	14	; () banked
 28111  004E40  0E0E               	movlw	14	;volatile
 28112  004E42  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28113  004E44  0E40               	movlw	64	;volatile
 28114  004E46  D00A               	goto	L59
 28115  004E48                     i1l9302:
 28116                           
 28117                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28118  004E48  010E               	movlb	14	; () banked
 28119  004E4A  0E0E               	movlw	14	;volatile
 28120  004E4C  D7EB               	goto	L60
 28121  004E4E                     i1l9304:
 28122                           
 28123                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28124  004E4E  010E               	movlb	14	; () banked
 28125  004E50  0E0E               	movlw	14	;volatile
 28126  004E52  D7E3               	goto	L61
 28127  004E54                     i1l9306:
 28128                           
 28129                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28130  004E54  010E               	movlb	14	; () banked
 28131  004E56  0E0E               	movlw	14	;volatile
 28132  004E58  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28133  004E5A  0E70               	movlw	112	;volatile
 28134  004E5C                     L59:
 28135  004E5C  6E05               	movwf	__ECANPointBuffer@pt,c
 28136                           
 28137                           ;ECAN.c: 1237: break;
 28138  004E5E  D00F               	goto	i1l1499
 28139  004E60                     i1l9310:
 28140  004E60  5004               	movf	__ECANPointBuffer@b,w,c
 28141                           
 28142                           ; Switch size 1, requested type "space"
 28143                           ; Number of cases is 7, Range of values is 0 to 6
 28144                           ; switch strategies available:
 28145                           ; Name         Instructions Cycles
 28146                           ; simple_byte           22    12 (average)
 28147                           ;	Chosen strategy is simple_byte
 28148  004E62  E0DA               	bz	i1l9292
 28149  004E64  0A01               	xorlw	1	; case 1
 28150  004E66  E0DC               	bz	i1l9294
 28151  004E68  0A03               	xorlw	3	; case 2
 28152  004E6A  E0DF               	bz	i1l9296
 28153  004E6C  0A01               	xorlw	1	; case 3
 28154  004E6E  E0E2               	bz	i1l9298
 28155  004E70  0A07               	xorlw	7	; case 4
 28156  004E72  E0E5               	bz	i1l9300
 28157  004E74  0A01               	xorlw	1	; case 5
 28158  004E76  E0E8               	bz	i1l9302
 28159  004E78  0A03               	xorlw	3	; case 6
 28160  004E7A  E0E9               	bz	i1l9304
 28161  004E7C  D7EB               	goto	i1l9306
 28162  004E7E                     i1l1499:
 28163                           
 28164                           ;ECAN.c: 1239: return (pt);
 28165  004E7E  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28166  004E82  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28167  004E86  0012               	return	
 28168  004E88                     __end_of__ECANPointBuffer:
 28169                           	opt stack 0
 28170                           tblptru	equ	0xFF8
 28171                           tblptrh	equ	0xFF7
 28172                           tblptrl	equ	0xFF6
 28173                           tablat	equ	0xFF5
 28174                           prodh	equ	0xFF4
 28175                           prodl	equ	0xFF3
 28176                           intcon	equ	0xFF2
 28177                           indf0	equ	0xFEF
 28178                           postinc0	equ	0xFEE
 28179                           fsr0h	equ	0xFEA
 28180                           fsr0l	equ	0xFE9
 28181                           wreg	equ	0xFE8
 28182                           indf1	equ	0xFE7
 28183                           postinc1	equ	0xFE6
 28184                           postdec1	equ	0xFE5
 28185                           fsr1h	equ	0xFE2
 28186                           fsr1l	equ	0xFE1
 28187                           bsr	equ	0xFE0
 28188                           indf2	equ	0xFDF
 28189                           postinc2	equ	0xFDE
 28190                           postdec2	equ	0xFDD
 28191                           plusw2	equ	0xFDB
 28192                           fsr2h	equ	0xFDA
 28193                           fsr2l	equ	0xFD9
 28194                           status	equ	0xFD8
 28195                           
 28196 ;; *************** function _fifo_write *****************
 28197 ;; Defined at:
 28198 ;;		line 61 in file "fifo.c"
 28199 ;; Parameters:    Size  Location     Type
 28200 ;;  f               1    wreg     PTR struct .
 28201 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28202 ;;  buf             1    0[COMRAM] PTR const void 
 28203 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28204 ;;  nbytes          4    1[COMRAM] unsigned long 
 28205 ;; Auto vars:     Size  Location     Type
 28206 ;;  f               1   14[COMRAM] PTR struct .
 28207 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28208 ;;  i               4   10[COMRAM] unsigned long 
 28209 ;;  p               1    9[COMRAM] PTR const unsigned char 
 28210 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 28211 ;; Return value:  Size  Location     Type
 28212 ;;                  2    0[COMRAM] unsigned short 
 28213 ;; Registers used:
 28214 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28215 ;; Tracked objects:
 28216 ;;		On entry : 0/0
 28217 ;;		On exit  : 0/0
 28218 ;;		Unchanged: 0/0
 28219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28220 ;;      Params:         5       0       0       0       0       0       0
 28221 ;;      Locals:         6       0       0       0       0       0       0
 28222 ;;      Temps:          4       0       0       0       0       0       0
 28223 ;;      Totals:        15       0       0       0       0       0       0
 28224 ;;Total ram usage:       15 bytes
 28225 ;; Hardware stack levels used:    1
 28226 ;; This function calls:
 28227 ;;		Nothing
 28228 ;; This function is called by:
 28229 ;;		_Interrupt
 28230 ;; This function uses a non-reentrant model
 28231 ;;
 28232                           
 28233                           	psect	text87
 28234  00377C                     __ptext87:
 28235                           	opt stack 0
 28236  00377C                     _fifo_write:
 28237                           	opt stack 21
 28238                           
 28239                           ;incstack = 0
 28240                           ;incstack = 0
 28241                           ;fifo_write@f stored from wreg
 28242  00377C  CFE8 F00F          	movff	wreg,fifo_write@f
 28243                           
 28244                           ;fifo.c: 62: uint32_t i;
 28245                           ;fifo.c: 63: const uint8_t *p;
 28246                           ;fifo.c: 64: p = buf;
 28247  003780  C001  F00A         	movff	fifo_write@buf,fifo_write@p
 28248                           
 28249                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28250  003784  6A0B               	clrf	fifo_write@i,c
 28251  003786  6A0C               	clrf	fifo_write@i+1,c
 28252  003788  6A0D               	clrf	fifo_write@i+2,c
 28253  00378A  6A0E               	clrf	fifo_write@i+3,c
 28254  00378C  D052               	goto	i1l6318
 28255  00378E                     i1l6298:
 28256                           
 28257                           ;fifo.c: 69: if ((f->head + 1 == f->tail) ||
 28258                           ;fifo.c: 70: ((f->head + 1 == f->size) && (f->tail == 0))) {
 28259  00378E  500F               	movf	fifo_write@f,w,c
 28260  003790  6ED9               	movwf	fsr2l,c
 28261  003792  6ADA               	clrf	fsr2h,c
 28262  003794  0E04               	movlw	4
 28263  003796  D85B               	call	PL16	;call to abstracted procedure
 28264  003798  E102               	bnz	i1u610_25
 28265  00379A  5006               	movf	??_fifo_write,w,c
 28266  00379C  1808               	xorwf	??_fifo_write+2,w,c
 28267  00379E                     i1u610_25:
 28268  00379E  E012               	bz	i1l1526
 28269  0037A0  500F               	movf	fifo_write@f,w,c
 28270  0037A2  6ED9               	movwf	fsr2l,c
 28271  0037A4  6ADA               	clrf	fsr2h,c
 28272  0037A6  0E06               	movlw	6
 28273  0037A8  D852               	call	PL16	;call to abstracted procedure
 28274  0037AA  E102               	bnz	i1u611_25
 28275  0037AC  5006               	movf	??_fifo_write,w,c
 28276  0037AE  1808               	xorwf	??_fifo_write+2,w,c
 28277  0037B0                     i1u611_25:
 28278  0037B0  E10E               	bnz	i1l6306
 28279  0037B2  500F               	movf	fifo_write@f,w,c
 28280  0037B4  6ED9               	movwf	fsr2l,c
 28281  0037B6  6ADA               	clrf	fsr2h,c
 28282  0037B8  0E04               	movlw	4
 28283  0037BA  26D9               	addwf	fsr2l,f,c
 28284  0037BC  6ADA               	clrf	fsr2h,c
 28285  0037BE  50DE               	movf	postinc2,w,c
 28286  0037C0  10DD               	iorwf	postdec2,w,c
 28287  0037C2  E105               	bnz	i1l6306
 28288  0037C4                     i1l1526:
 28289                           
 28290                           ;fifo.c: 71: return i;
 28291  0037C4  C00B  F001         	movff	fifo_write@i,?_fifo_write
 28292  0037C8  C00C  F002         	movff	fifo_write@i+1,?_fifo_write+1
 28293  0037CC  D03F               	goto	i1l1527
 28294  0037CE                     i1l6306:
 28295                           
 28296                           ;fifo.c: 73: else {
 28297                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28298  0037CE  500A               	movf	fifo_write@p,w,c
 28299  0037D0  6ED9               	movwf	fsr2l,c
 28300  0037D2  D85A               	call	PL102	;call to abstracted procedure
 28301  0037D4  CFE6 F006          	movff	postinc1,??_fifo_write
 28302  0037D8  CFE5 F007          	movff	postdec1,??_fifo_write+1
 28303  0037DC  500F               	movf	fifo_write@f,w,c
 28304  0037DE  6EE1               	movwf	fsr1l,c
 28305  0037E0  6AE2               	clrf	fsr1h,c
 28306  0037E2  CFE6 F008          	movff	postinc1,??_fifo_write+2
 28307  0037E6  CFE5 F009          	movff	postdec1,??_fifo_write+3
 28308  0037EA  5006               	movf	??_fifo_write,w,c
 28309  0037EC  2408               	addwf	??_fifo_write+2,w,c
 28310  0037EE  6EE1               	movwf	fsr1l,c
 28311  0037F0  5007               	movf	??_fifo_write+1,w,c
 28312  0037F2  2009               	addwfc	??_fifo_write+3,w,c
 28313  0037F4  6EE2               	movwf	fsr1h,c
 28314  0037F6  CFDF FFE7          	movff	indf2,indf1
 28315  0037FA  2A0A               	incf	fifo_write@p,f,c
 28316                           
 28317                           ;fifo.c: 75: f->head++;
 28318  0037FC  D83E               	call	PL42	;call to abstracted procedure
 28319  0037FE  2ADE               	incf	postinc2,f,c
 28320  003800  0E00               	movlw	0
 28321  003802  22DD               	addwfc	postdec2,f,c
 28322                           
 28323                           ;fifo.c: 76: if (f->head == f->size) {
 28324  003804  500F               	movf	fifo_write@f,w,c
 28325  003806  6ED9               	movwf	fsr2l,c
 28326  003808  6ADA               	clrf	fsr2h,c
 28327  00380A  0E06               	movlw	6
 28328  00380C  26D9               	addwf	fsr2l,f,c
 28329  00380E  D83C               	call	PL102	;call to abstracted procedure
 28330  003810  52E6               	movf	postinc1,f,c
 28331  003812  52DE               	movf	postinc2,f,c
 28332  003814  50DD               	movf	postdec2,w,c
 28333  003816  18E5               	xorwf	postdec1,w,c
 28334  003818  CFDF FFE8          	movff	indf2,wreg
 28335  00381C  B4D8               	btfsc	status,2,c
 28336  00381E  18E7               	xorwf	indf1,w,c
 28337  003820  E103               	bnz	i1l6316
 28338                           
 28339                           ;fifo.c: 77: f->head = 0;
 28340  003822  D82B               	call	PL42	;call to abstracted procedure
 28341  003824  6ADE               	clrf	postinc2,c
 28342  003826  6ADD               	clrf	postdec2,c
 28343  003828                     i1l6316:
 28344  003828  2A0B               	incf	fifo_write@i,f,c
 28345  00382A  0E00               	movlw	0
 28346  00382C  220C               	addwfc	fifo_write@i+1,f,c
 28347  00382E  220D               	addwfc	fifo_write@i+2,f,c
 28348  003830  220E               	addwfc	fifo_write@i+3,f,c
 28349  003832                     i1l6318:
 28350  003832  5002               	movf	fifo_write@nbytes,w,c
 28351  003834  5C0B               	subwf	fifo_write@i,w,c
 28352  003836  5003               	movf	fifo_write@nbytes+1,w,c
 28353  003838  580C               	subwfb	fifo_write@i+1,w,c
 28354  00383A  5004               	movf	fifo_write@nbytes+2,w,c
 28355  00383C  580D               	subwfb	fifo_write@i+2,w,c
 28356  00383E  5005               	movf	fifo_write@nbytes+3,w,c
 28357  003840  580E               	subwfb	fifo_write@i+3,w,c
 28358  003842  E3A5               	bnc	i1l6298
 28359                           
 28360                           ;fifo.c: 78: }
 28361                           ;fifo.c: 79: }
 28362                           ;fifo.c: 81: }
 28363                           ;fifo.c: 83: return nbytes;
 28364  003844  C002  F001         	movff	fifo_write@nbytes,?_fifo_write
 28365  003848  C003  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28366  00384C                     i1l1527:
 28367  00384C  0012               	return	
 28368  00384E                     __end_of_fifo_write:
 28369                           	opt stack 0
 28370  00384E                     PL16:
 28371                           	opt stack 21
 28372  00384E  26D9               	addwf	fsr2l,f,c
 28373  003850  6ADA               	clrf	fsr2h,c
 28374  003852  CFDE F006          	movff	postinc2,??_fifo_write
 28375  003856  CFDD F007          	movff	postdec2,??_fifo_write+1
 28376  00385A  500F               	movf	fifo_write@f,w,c
 28377  00385C  6ED9               	movwf	fsr2l,c
 28378  00385E  6ADA               	clrf	fsr2h,c
 28379  003860  0E02               	movlw	2
 28380  003862  26D9               	addwf	fsr2l,f,c
 28381  003864  6ADA               	clrf	fsr2h,c
 28382  003866  CFDE F008          	movff	postinc2,??_fifo_write+2
 28383  00386A  CFDD F009          	movff	postdec2,??_fifo_write+3
 28384  00386E  2A08               	incf	??_fifo_write+2,f,c
 28385  003870  0E00               	movlw	0
 28386  003872  2209               	addwfc	??_fifo_write+3,f,c
 28387  003874  5007               	movf	??_fifo_write+1,w,c
 28388  003876  1809               	xorwf	??_fifo_write+3,w,c
 28389  003878  0012               	return	
 28390  00387A                     __end_ofPL16:
 28391                           	opt stack 0
 28392  00387A                     PL42:
 28393                           	opt stack 21
 28394  00387A  500F               	movf	fifo_write@f,w,c
 28395  00387C  6ED9               	movwf	fsr2l,c
 28396  00387E  6ADA               	clrf	fsr2h,c
 28397  003880  0E02               	movlw	2
 28398  003882  26D9               	addwf	fsr2l,f,c
 28399  003884  6ADA               	clrf	fsr2h,c
 28400  003886  0012               	return	
 28401  003888                     __end_ofPL42:
 28402                           	opt stack 0
 28403  003888                     PL102:
 28404                           	opt stack 21
 28405  003888  6ADA               	clrf	fsr2h,c
 28406  00388A  500F               	movf	fifo_write@f,w,c
 28407  00388C  6EE1               	movwf	fsr1l,c
 28408  00388E  6AE2               	clrf	fsr1h,c
 28409  003890  0E02               	movlw	2
 28410  003892  26E1               	addwf	fsr1l,f,c
 28411  003894  6AE2               	clrf	fsr1h,c
 28412  003896  0012               	return	
 28413  003898                     __end_ofPL102:
 28414                           	opt stack 0
 28415                           tblptru	equ	0xFF8
 28416                           tblptrh	equ	0xFF7
 28417                           tblptrl	equ	0xFF6
 28418                           tablat	equ	0xFF5
 28419                           prodh	equ	0xFF4
 28420                           prodl	equ	0xFF3
 28421                           intcon	equ	0xFF2
 28422                           indf0	equ	0xFEF
 28423                           postinc0	equ	0xFEE
 28424                           fsr0h	equ	0xFEA
 28425                           fsr0l	equ	0xFE9
 28426                           wreg	equ	0xFE8
 28427                           indf1	equ	0xFE7
 28428                           postinc1	equ	0xFE6
 28429                           postdec1	equ	0xFE5
 28430                           fsr1h	equ	0xFE2
 28431                           fsr1l	equ	0xFE1
 28432                           bsr	equ	0xFE0
 28433                           indf2	equ	0xFDF
 28434                           postinc2	equ	0xFDE
 28435                           postdec2	equ	0xFDD
 28436                           plusw2	equ	0xFDB
 28437                           fsr2h	equ	0xFDA
 28438                           fsr2l	equ	0xFD9
 28439                           status	equ	0xFD8
 28440                           
 28441 ;; *************** function _ReadUSART *****************
 28442 ;; Defined at:
 28443 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 28444 ;; Parameters:    Size  Location     Type
 28445 ;;		None
 28446 ;; Auto vars:     Size  Location     Type
 28447 ;;  data            1    0[COMRAM] unsigned char 
 28448 ;; Return value:  Size  Location     Type
 28449 ;;                  1    wreg      unsigned char 
 28450 ;; Registers used:
 28451 ;;		wreg, status,2, status,0
 28452 ;; Tracked objects:
 28453 ;;		On entry : 0/0
 28454 ;;		On exit  : 0/0
 28455 ;;		Unchanged: 0/0
 28456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28457 ;;      Params:         0       0       0       0       0       0       0
 28458 ;;      Locals:         1       0       0       0       0       0       0
 28459 ;;      Temps:          0       0       0       0       0       0       0
 28460 ;;      Totals:         1       0       0       0       0       0       0
 28461 ;;Total ram usage:        1 bytes
 28462 ;; Hardware stack levels used:    1
 28463 ;; This function calls:
 28464 ;;		Nothing
 28465 ;; This function is called by:
 28466 ;;		_Interrupt
 28467 ;; This function uses a non-reentrant model
 28468 ;;
 28469                           
 28470                           	psect	text88
 28471  0056E2                     __ptext88:
 28472                           	opt stack 0
 28473  0056E2                     _ReadUSART:
 28474                           	opt stack 21
 28475                           
 28476                           ;incstack = 0
 28477                           ;incstack = 0
 28478  0056E2  0EF2               	movlw	242
 28479  0056E4  163D               	andwf	_USART_Status,f,c
 28480  0056E6  ACAB               	btfss	4011,6,c	;volatile
 28481  0056E8  D003               	goto	i1l1833
 28482  0056EA  903D               	bcf	_USART_Status,0,c
 28483  0056EC  B0AB               	btfsc	4011,0,c	;volatile
 28484  0056EE  803D               	bsf	_USART_Status,0,c
 28485  0056F0                     i1l1833:
 28486  0056F0  B4AB               	btfsc	4011,2,c	;volatile
 28487  0056F2  843D               	bsf	_USART_Status,2,c
 28488  0056F4  B2AB               	btfsc	4011,1,c	;volatile
 28489  0056F6  863D               	bsf	_USART_Status,3,c
 28490  0056F8  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 28491  0056FC  5001               	movf	ReadUSART@data,w,c
 28492  0056FE  0012               	return	
 28493  005700                     __end_of_ReadUSART:
 28494                           	opt stack 0
 28495                           tblptru	equ	0xFF8
 28496                           tblptrh	equ	0xFF7
 28497                           tblptrl	equ	0xFF6
 28498                           tablat	equ	0xFF5
 28499                           prodh	equ	0xFF4
 28500                           prodl	equ	0xFF3
 28501                           intcon	equ	0xFF2
 28502                           indf0	equ	0xFEF
 28503                           postinc0	equ	0xFEE
 28504                           fsr0h	equ	0xFEA
 28505                           fsr0l	equ	0xFE9
 28506                           wreg	equ	0xFE8
 28507                           indf1	equ	0xFE7
 28508                           postinc1	equ	0xFE6
 28509                           postdec1	equ	0xFE5
 28510                           fsr1h	equ	0xFE2
 28511                           fsr1l	equ	0xFE1
 28512                           bsr	equ	0xFE0
 28513                           indf2	equ	0xFDF
 28514                           postinc2	equ	0xFDE
 28515                           postdec2	equ	0xFDD
 28516                           plusw2	equ	0xFDB
 28517                           fsr2h	equ	0xFDA
 28518                           fsr2l	equ	0xFD9
 28519                           status	equ	0xFD8
 28520                           tblptru	equ	0xFF8
 28521                           tblptrh	equ	0xFF7
 28522                           tblptrl	equ	0xFF6
 28523                           tablat	equ	0xFF5
 28524                           prodh	equ	0xFF4
 28525                           prodl	equ	0xFF3
 28526                           intcon	equ	0xFF2
 28527                           indf0	equ	0xFEF
 28528                           postinc0	equ	0xFEE
 28529                           fsr0h	equ	0xFEA
 28530                           fsr0l	equ	0xFE9
 28531                           wreg	equ	0xFE8
 28532                           indf1	equ	0xFE7
 28533                           postinc1	equ	0xFE6
 28534                           postdec1	equ	0xFE5
 28535                           fsr1h	equ	0xFE2
 28536                           fsr1l	equ	0xFE1
 28537                           bsr	equ	0xFE0
 28538                           indf2	equ	0xFDF
 28539                           postinc2	equ	0xFDE
 28540                           postdec2	equ	0xFDD
 28541                           plusw2	equ	0xFDB
 28542                           fsr2h	equ	0xFDA
 28543                           fsr2l	equ	0xFD9
 28544                           status	equ	0xFD8
 28545                           
 28546                           	psect	rparam
 28547  0000                     tblptru	equ	0xFF8
 28548                           tblptrh	equ	0xFF7
 28549                           tblptrl	equ	0xFF6
 28550                           tablat	equ	0xFF5
 28551                           prodh	equ	0xFF4
 28552                           prodl	equ	0xFF3
 28553                           intcon	equ	0xFF2
 28554                           indf0	equ	0xFEF
 28555                           postinc0	equ	0xFEE
 28556                           fsr0h	equ	0xFEA
 28557                           fsr0l	equ	0xFE9
 28558                           wreg	equ	0xFE8
 28559                           indf1	equ	0xFE7
 28560                           postinc1	equ	0xFE6
 28561                           postdec1	equ	0xFE5
 28562                           fsr1h	equ	0xFE2
 28563                           fsr1l	equ	0xFE1
 28564                           bsr	equ	0xFE0
 28565                           indf2	equ	0xFDF
 28566                           postinc2	equ	0xFDE
 28567                           postdec2	equ	0xFDD
 28568                           plusw2	equ	0xFDB
 28569                           fsr2h	equ	0xFDA
 28570                           fsr2l	equ	0xFD9
 28571                           status	equ	0xFD8
 28572                           tblptru	equ	0xFF8
 28573                           tblptrh	equ	0xFF7
 28574                           tblptrl	equ	0xFF6
 28575                           tablat	equ	0xFF5
 28576                           prodh	equ	0xFF4
 28577                           prodl	equ	0xFF3
 28578                           intcon	equ	0xFF2
 28579                           indf0	equ	0xFEF
 28580                           postinc0	equ	0xFEE
 28581                           fsr0h	equ	0xFEA
 28582                           fsr0l	equ	0xFE9
 28583                           wreg	equ	0xFE8
 28584                           indf1	equ	0xFE7
 28585                           postinc1	equ	0xFE6
 28586                           postdec1	equ	0xFE5
 28587                           fsr1h	equ	0xFE2
 28588                           fsr1l	equ	0xFE1
 28589                           bsr	equ	0xFE0
 28590                           indf2	equ	0xFDF
 28591                           postinc2	equ	0xFDE
 28592                           postdec2	equ	0xFDD
 28593                           plusw2	equ	0xFDB
 28594                           fsr2h	equ	0xFDA
 28595                           fsr2l	equ	0xFD9
 28596                           status	equ	0xFD8


Data Sizes:
    Strings     4050
    Constant    120
    Data        0
    BSS         1129
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     42      79
    BANK0           160    113     151
    BANK1           256     20     198
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_122(CODE[6]), STR_121(CODE[8]), STR_119(CODE[6]), 
		 -> STR_117(CODE[5]), STR_115(CODE[8]), STR_114(CODE[6]), STR_113(CODE[9]), 
		 -> STR_112(CODE[11]), STR_110(CODE[8]), STR_108(CODE[4]), STR_107(CODE[5]), 
		 -> STR_95(CODE[5]), STR_83(CODE[7]), STR_78(CODE[5]), STR_69(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_46(CODE[5]), STR_45(CODE[5]), STR_43(CODE[5]), 
		 -> STR_42(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_122(CODE[6]), STR_121(CODE[8]), STR_119(CODE[6]), STR_117(CODE[5]), 
		 -> STR_115(CODE[8]), STR_114(CODE[6]), STR_113(CODE[9]), STR_112(CODE[11]), 
		 -> STR_110(CODE[8]), STR_108(CODE[4]), STR_107(CODE[5]), STR_95(CODE[5]), 
		 -> STR_83(CODE[7]), STR_78(CODE[5]), STR_69(CODE[5]), STR_46(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[5]), STR_42(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_122(CODE[6]), STR_121(CODE[8]), STR_119(CODE[6]), 
		 -> STR_117(CODE[5]), STR_115(CODE[8]), STR_114(CODE[6]), STR_113(CODE[9]), 
		 -> STR_112(CODE[11]), STR_110(CODE[8]), STR_108(CODE[4]), STR_107(CODE[5]), 
		 -> STR_95(CODE[5]), STR_83(CODE[7]), STR_78(CODE[5]), STR_69(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_46(CODE[5]), STR_45(CODE[5]), STR_43(CODE[5]), 
		 -> STR_42(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_122(CODE[6]), STR_121(CODE[8]), STR_119(CODE[6]), 
		 -> STR_117(CODE[5]), STR_115(CODE[8]), STR_114(CODE[6]), STR_113(CODE[9]), 
		 -> STR_112(CODE[11]), STR_110(CODE[8]), STR_108(CODE[4]), STR_107(CODE[5]), 
		 -> STR_95(CODE[5]), STR_83(CODE[7]), STR_78(CODE[5]), STR_69(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_46(CODE[5]), STR_45(CODE[5]), STR_43(CODE[5]), 
		 -> STR_42(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_122(CODE[6]), STR_121(CODE[8]), STR_119(CODE[6]), STR_117(CODE[5]), 
		 -> STR_115(CODE[8]), STR_114(CODE[6]), STR_113(CODE[9]), STR_112(CODE[11]), 
		 -> STR_110(CODE[8]), STR_108(CODE[4]), STR_107(CODE[5]), STR_95(CODE[5]), 
		 -> STR_83(CODE[7]), STR_78(CODE[5]), STR_69(CODE[5]), STR_46(CODE[5]), 
		 -> STR_45(CODE[5]), STR_43(CODE[5]), STR_42(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_245(CODE[2]), STR_244(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_239(CODE[2]), 
		 -> STR_238(CODE[3]), STR_237(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_255(CODE[3]), STR_254(CODE[23]), STR_253(CODE[10]), STR_252(CODE[10]), 
		 -> STR_251(CODE[12]), STR_250(CODE[8]), STR_249(CODE[7]), STR_248(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_247(CODE[10]), STR_246(CODE[3]), STR_243(CODE[20]), 
		 -> STR_242(CODE[3]), STR_241(CODE[14]), STR_240(CODE[3]), STR_236(CODE[8]), 
		 -> STR_235(CODE[15]), STR_234(CODE[67]), STR_233(CODE[3]), STR_232(CODE[27]), 
		 -> STR_231(CODE[67]), STR_230(CODE[39]), STR_229(CODE[62]), STR_228(CODE[55]), 
		 -> STR_227(CODE[49]), STR_226(CODE[67]), STR_225(CODE[47]), STR_224(CODE[47]), 
		 -> STR_223(CODE[34]), STR_222(CODE[71]), STR_221(CODE[20]), STR_220(CODE[78]), 
		 -> STR_219(CODE[24]), STR_218(CODE[77]), STR_217(CODE[67]), STR_216(CODE[69]), 
		 -> STR_215(CODE[47]), STR_214(CODE[40]), STR_213(CODE[39]), STR_212(CODE[33]), 
		 -> STR_211(CODE[23]), STR_210(CODE[56]), STR_209(CODE[24]), STR_208(CODE[44]), 
		 -> STR_207(CODE[50]), STR_206(CODE[31]), STR_205(CODE[50]), STR_204(CODE[51]), 
		 -> STR_203(CODE[46]), STR_202(CODE[44]), STR_201(CODE[27]), STR_200(CODE[39]), 
		 -> STR_199(CODE[39]), STR_198(CODE[52]), STR_197(CODE[54]), STR_196(CODE[55]), 
		 -> STR_195(CODE[3]), STR_192(CODE[24]), STR_191(CODE[57]), STR_190(CODE[53]), 
		 -> STR_189(CODE[58]), STR_188(CODE[3]), STR_185(CODE[25]), STR_184(CODE[3]), 
		 -> STR_181(CODE[24]), STR_180(CODE[3]), STR_177(CODE[24]), STR_176(CODE[3]), 
		 -> STR_173(CODE[24]), STR_172(CODE[3]), STR_169(CODE[23]), STR_168(CODE[3]), 
		 -> STR_165(CODE[21]), STR_164(CODE[3]), STR_161(CODE[22]), STR_160(CODE[3]), 
		 -> STR_157(CODE[17]), STR_156(CODE[3]), STR_153(CODE[18]), STR_152(CODE[4]), 
		 -> STR_151(CODE[11]), STR_150(CODE[2]), STR_147(CODE[7]), STR_144(CODE[7]), 
		 -> STR_141(CODE[9]), STR_138(CODE[7]), STR_135(CODE[8]), STR_132(CODE[7]), 
		 -> STR_131(CODE[2]), STR_130(CODE[2]), STR_129(CODE[6]), STR_128(CODE[8]), 
		 -> STR_127(CODE[8]), STR_126(CODE[20]), STR_125(CODE[27]), STR_124(CODE[6]), 
		 -> STR_123(CODE[33]), STR_120(CODE[26]), STR_118(CODE[32]), STR_116(CODE[28]), 
		 -> STR_111(CODE[40]), STR_109(CODE[44]), STR_106(CODE[39]), STR_104(CODE[36]), 
		 -> STR_102(CODE[37]), STR_100(CODE[40]), STR_98(CODE[37]), STR_97(CODE[50]), 
		 -> STR_94(CODE[41]), STR_92(CODE[38]), STR_90(CODE[39]), STR_88(CODE[42]), 
		 -> STR_86(CODE[39]), STR_85(CODE[66]), STR_82(CODE[3]), STR_79(CODE[20]), 
		 -> STR_77(CODE[33]), STR_76(CODE[35]), STR_75(CODE[24]), STR_73(CODE[33]), 
		 -> STR_71(CODE[24]), STR_68(CODE[54]), STR_67(CODE[6]), STR_66(CODE[3]), 
		 -> STR_61(CODE[34]), STR_60(CODE[3]), STR_57(CODE[4]), wrkbuf(BANK1[80]), 
		 -> STR_52(CODE[15]), STR_50(CODE[33]), STR_48(CODE[24]), STR_44(CODE[6]), 
		 -> STR_40(CODE[18]), STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), 
		 -> STR_28(CODE[24]), STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), 
		 -> STR_24(CODE[22]), STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), 
		 -> STR_19(CODE[6]), STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), 
		 -> STR_11(CODE[6]), STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), 
		 -> STR_4(CODE[55]), STR_3(CODE[35]), STR_2(CODE[53]), STR_1(CODE[37]), 

    sprintf$2144	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_257(CODE[17]), STR_256(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_194(CODE[3]), STR_193(CODE[7]), STR_187(CODE[3]), STR_186(CODE[7]), 
		 -> STR_183(CODE[4]), STR_182(CODE[8]), STR_179(CODE[4]), STR_178(CODE[8]), 
		 -> STR_175(CODE[4]), STR_174(CODE[8]), STR_171(CODE[4]), STR_170(CODE[8]), 
		 -> STR_167(CODE[4]), STR_166(CODE[7]), STR_163(CODE[4]), STR_162(CODE[7]), 
		 -> STR_159(CODE[4]), STR_158(CODE[7]), STR_155(CODE[4]), STR_154(CODE[7]), 
		 -> STR_149(CODE[3]), STR_148(CODE[7]), STR_146(CODE[3]), STR_145(CODE[7]), 
		 -> STR_143(CODE[3]), STR_142(CODE[7]), STR_140(CODE[3]), STR_139(CODE[7]), 
		 -> STR_137(CODE[3]), STR_136(CODE[7]), STR_134(CODE[3]), STR_133(CODE[7]), 
		 -> STR_81(CODE[3]), STR_80(CODE[7]), STR_65(CODE[3]), STR_64(CODE[7]), 
		 -> STR_63(CODE[3]), STR_62(CODE[7]), STR_59(CODE[3]), STR_58(CODE[7]), 
		 -> STR_56(CODE[3]), STR_55(CODE[7]), STR_54(CODE[3]), STR_53(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2124$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_write@buf	PTR const void  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_read@buf	PTR void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 8
		 -> Interrupt@data(COMRAM[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> Interrupt@dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> Interrupt@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK1[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(2) Largest target is 1
		 -> vscpPriority(BANK1[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(2) Largest target is 2
		 -> vscpClass(BANK1[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(2) Largest target is 1
		 -> vscpType(BANK1[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(2) Largest target is 1
		 -> vscpNodeId(BANK1[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(2) Largest target is 1
		 -> vscpSize(BANK1[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1417	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_194(CODE[3]), STR_193(CODE[7]), 

    printErrors$1408	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_187(CODE[3]), STR_186(CODE[7]), 

    printErrors$1402	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_183(CODE[4]), STR_182(CODE[8]), 

    printErrors$1396	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_179(CODE[4]), STR_178(CODE[8]), 

    printErrors$1390	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_175(CODE[4]), STR_174(CODE[8]), 

    printErrors$1384	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_171(CODE[4]), STR_170(CODE[8]), 

    printStatistics$1377	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_167(CODE[4]), STR_166(CODE[7]), 

    printStatistics$1371	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_163(CODE[4]), STR_162(CODE[7]), 

    printStatistics$1365	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_159(CODE[4]), STR_158(CODE[7]), 

    printStatistics$1359	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_155(CODE[4]), STR_154(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1156(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1291	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_149(CODE[3]), STR_148(CODE[7]), 

    receivePrintEventVerbose$1286	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_146(CODE[3]), STR_145(CODE[7]), 

    receivePrintEventVerbose$1281	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_143(CODE[3]), STR_142(CODE[7]), 

    receivePrintEventVerbose$1276	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_140(CODE[3]), STR_139(CODE[7]), 

    receivePrintEventVerbose$1271	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_137(CODE[3]), STR_136(CODE[7]), 

    receivePrintEventVerbose$1266	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_134(CODE[3]), STR_133(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1200	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1181	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1173	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_81(CODE[3]), STR_80(CODE[7]), 

    doModeVerbose@preg_1161	PTR unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1157	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1148	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_65(CODE[3]), STR_64(CODE[7]), 

    doModeVerbose$1144	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_63(CODE[3]), STR_62(CODE[7]), 

    doModeVerbose$1138	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_59(CODE[3]), STR_58(CODE[7]), 

    doModeVerbose$1133	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_56(CODE[3]), STR_55(CODE[7]), 

    doModeVerbose$1121	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_54(CODE[3]), STR_53(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_105(CODE[2]), STR_103(CODE[2]), STR_101(CODE[2]), STR_99(CODE[2]), 
		 -> STR_96(CODE[2]), STR_93(CODE[2]), STR_91(CODE[2]), STR_89(CODE[2]), 
		 -> STR_87(CODE[2]), STR_84(CODE[2]), STR_74(CODE[2]), STR_72(CODE[2]), 
		 -> STR_70(CODE[2]), STR_51(CODE[2]), STR_49(CODE[2]), STR_47(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1109	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _init_app_ram->_readEEPROM

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  103692
                                            106 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _readEEPROM
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    7534
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                        _writeEEPROM
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    3319
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8     910
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   16070
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
                 _sendVSCPDriverNack
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1455
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1393
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2323
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1331
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1393
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     631
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    2585
                                             18 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    2897
                                             18 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     675
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     427
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   76457
                                              0 BANK1     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                        _writeEEPROM
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    3519
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     161
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3457
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   19230
                                            101 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    3832
                                             95 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    5359
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    5164
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3333
                                             86 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2199
                                             54 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    1979
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    5402
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    5328
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     665
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4     898
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     257
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     260
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0      96
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    6449
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        20     8     12     948
                                             18 BANK0     20     8     12
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     601
                                             13 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           13     9      4     446
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    5087
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     232
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1480
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2      93
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     603
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     263
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     198
                                              3 BANK0      1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            5     1      4     186
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           24    24      0    2582
                                             18 COMRAM    24    24      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       11     9      2     154
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 11     8      3    1180
                                              7 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         15    10      5     378
                                              0 COMRAM    15    10      5
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _readEEPROM
   _vscp_restoreDefaults
     _init_app_ram
       _readEEPROM
     _init_app_eeprom
       _writeEEPROM
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _writeEEPROM
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _writeEEPROM
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     3D      BD       9       73.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     14      C6       7       77.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     71      97       5       94.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2A      4F       1       83.2%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     369       3        0.0%
DATA                 0      0     565      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Feb 26 23:07:03 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 14BE  
                          printBinary@i 0064                             fifo_write@f 000F  
                           fifo_write@i 000B                             fifo_write@p 000A  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 45D6  
            doModeVerbose@filter_nodeid 0290                                      PL2 14BE  
                                    PL4 14D2                                      PL6 14E2  
                                    PL8 14F0                                      bsr 000FE0  
                   ___wmul@multiplicand 0062                             __CFG_BORV$3 000000  
                __end_of_doModeVscpNode 5784                                     PL10 150E  
                                   PL20 1C9E                                     PL12 1558  
                                   PL30 1584                                     PL22 3BAA  
                                   PL14 1C80                                     PL40 15AA  
                                   PL32 3958                                     PL24 1CAE  
                                   PL16 384E                                     PL50 396C  
                                   PL42 387A                                     PL34 4380  
                                   PL26 3246                                     PL18 2BEC  
                                   PL60 15F8                                     PL52 4668  
                                   PL44 15C6                                     PL36 1598  
                                   PL28 1574                                     PL70 3F7E  
                                   PL62 1D04                                     PL54 15E0  
                                   PL46 1CD4                                     PL38 3722  
                                   PL80 3756                                     PL72 3CA8  
                                   PL64 1D1A                                     PL56 1CEE  
                                   PL48 4708                                     PL90 5450  
                                   PL82 1D28                                     PL74 398E  
                                   PL66 4A98                                     PL58 397C  
                                   PL92 30DE                                     PL84 3256  
                                   PL76 3730                                     PL68 483A  
                                   PL94 445C                                     PL86 376A  
                                   PL78 3744                                     PL96 4132  
                                   PL88 20B0                                     PL98 1D3A  
               sendEscapedUartData@pcrc 006C                                     l421 3474  
                                   l422 34AC                                     l425 34C4  
                                   l426 34CE                                     l524 14BC  
                                   l428 34DA                                     l533 0B10  
                                   l552 0AD0                                     l529 09A0  
                                   l801 4684                                     l538 0A28  
                                   l810 46CA                                     l804 468E  
                                   l708 20AE                                     l565 0B66  
                                   l557 0AF0                                     l549 0AC6  
                                   l813 46DA                                     l718 1E00  
                                   l807 46AA                                     l831 45EE  
                                   l743 1FEA                                     l920 3556  
                                   l816 46F4                                     l840 463A  
                                   l825 45DA                                     l834 460A  
                                   l658 2BEA                                     l915 263E  
                                   l923 3560                                     l771 43B4  
                                   l819 46FE                                     l843 4654  
                                   l916 2652                                     l908 259C  
                                   l756 508A                                     l764 50B8  
                                   l780 43E4                                     l828 45E4  
                                   l852 4074                                     l941 365C  
                                   l837 462A                                     l861 40A4  
                                   l926 356A                                     l774 43BE  
                                   l846 465E                                     l870 40F0  
                                   l759 5094                                     l951 312A  
                                   l935 3648                                     l783 4404  
                                   l855 407E                                     l768 50DC  
                                   l792 4452                                     l864 40C4  
                                   l945 3116                                     l929 3586  
                                   l777 43C8                                     l873 4102  
                                   l970 323A                                     l954 3146  
                                   l938 3652                                     l786 4414  
                                   l858 4088                                     l867 40D4  
                                   l948 3120                                     l876 411E  
                                   l973 3244                                     l789 4448  
                                   l798 467A                                     l967 3230  
                                   l879 4128                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 0082                           fifo_write@buf 0001  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                                   _pos 0102          __size_of_writeRegisterExtended 0106  
                                   wreg 000FE8           __end_of_writeRegisterExtended 3AB2  
                                  PL100 55E2                                    PL110 39A2  
                                  PL102 3888                                    PL112 1D44  
                                  PL104 439E                                    PL106 284E  
                                  PL108 4848                            __CFG_LVP$OFF 000000  
                          __CFG_WDT$OFF 000000                                    l1001 446E  
                                  l1010 449E                                    l1004 4478  
                                  l1013 450C                                    l1111 526A  
                                  l1007 4482                                    l1031 3002  
                                  l1023 2F98                                    l1016 4516  
                                  l1210 4A42                                    l1050 30DC  
                                  l1107 525E                                    l1220 4E04  
                                  l2012 3BA0                                    l1044 30B4  
                                  l1028 2FCA                                    l1213 4A66  
                                  l2013 3BA8                                    l1061 4248  
                                  l1037 3052                                    l1070 3D04  
                                  l1231 28D2                                    l1047 30D2  
                                  l1064 42DC                                    l1240 2962  
                                  l1073 3DB6                                    l1241 2974  
                                  l1233 28E4                                    l1242 2986  
                                  l1234 28F6                                    l1091 3AB0  
                                  l1243 2998                                    l1235 2908  
                                  l1260 5550                                    l1172 3DCE  
                                  l1244 29AA                                    l1236 291A  
                                  l1245 29BC                                    l1237 292C  
                                  l1166 2390                                    l1158 22FA  
                                  l1246 29CE                                    l1238 293E  
                                  l1247 29E0                                    l1239 2950  
                                  l1256 4BB4                                    l1088 39FC  
                                  l1248 2A38                                    l1265 4D24  
                                  l2402 52C2                                    l1515 435E  
                                  l1435 33D4                                    l1427 3338  
                                  l2412 5510                                    l1429 3356  
                                  l1550 569A                                    l1518 437E  
                                  l2319 4D8A                                    l1711 1A64  
                                  l1703 19FC                                    l1623 162C  
                                  l1712 1A68                                    l1640 171A  
                                  l2329 506C                                    l2505 4A16  
                                  l1810 5120                                    l1730 1B0E  
                                  l1714 1A84                                    l1803 50FE  
                                  l2507 4A0A                                    l1812 5138  
                                  l1820 5192                                    l1660 17B0  
                                  l2532 5350                                    l2508 4A0E  
                                  l1564 4E92                                    l1572 4EF0  
                                  l1709 1A3E                                    l2541 54DA  
                                  l2453 4FBA                                    l1566 4E9A  
                                  l1807 5112                                    l1639 1768  
                                  l2455 501A                                    l2551 5394  
                                  l1591 4888                                    l1808 5114  
                                  l2288 4794                                    l1656 1778  
                                  l1592 48EE                                    l1809 511E  
                                  l1489 3956                                    l1770 56DC  
                                  l2474 4CAC                                    l1586 549C  
                                  l1771 56DE                                    l1675 189A  
                                  l1659 17AC                                    l2387 3F5A  
                                  l2493 4F56                                    l2477 4CA8  
                                  l9800 3428                                    l9842 34D6  
                                  l9834 34C0                                    l9862 350A  
                                  l9854 34F4                                    STR_1 792F  
                                  l9856 34FA                                    STR_2 748D  
                                  STR_3 799D                                    l9890 4EA4  
                                  l9866 3516                                    l9858 3500  
                                  STR_4 73B5                                    STR_5 7B2A  
                                  l9892 4EAA                                    STR_6 7FCF  
                                  STR_7 7AEC                                    STR_8 7FB6  
                                  STR_9 7F7F                                    l9992 4DE4  
                                  l9984 4DBE                                    l9996 4DF8  
                                  l9988 4DD0                                    _PEIE 007F96  
                        sendCANFrame@id 008F                                    _RCIE 007CED  
                                  _RCIF 007CF5                                    _RCIP 007CFD  
                      ??_ECANInitialize 0061                                    _bDLE 00ED  
                          __CFG_PWRT$ON 000000              __end_of_sendVSCPDriverNack 4668  
                                  _bHex 0100            doModeVerbose@filter_priority 028E  
                                  _crc8 558A                                    _caps 00F5  
                                  _atoi 3AB2                                    _main 33D6  
                                  _init 52CC                                    _mode 00F1  
                                  _itoa 5552                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 4716                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 0268                            _sprintf$2144 0086  
                          _sprintf$2137 0082                            _sprintf$2138 0084  
          receiveSendMultiEventCANAL@id 007D                             _writeEEPROM 567E  
             ECANReceiveMessage@dataLen 0009      __end_of_receiveSendMultiEventCANAL 3246  
            _receiveSendMultiEventCANAL 30EC                      doModeVerbose@count 02AB  
                 getVSCPFrame@pPriority 0078                          _caninputBuffer 0400  
                    doModeVerbose@value 02B1                    __end_of_getVSCPFrame 4BB6  
                      __RegsToCANID@val 0003                        __RegsToCANID@ptr 0001  
                  __size_of_getCANFrame 0078                ?_receiveVSCPModeCanalMsg 0001  
                       ?_doModeVscpNode 0001                                   l10000 42F0  
                                 l10012 4368                                   l10100 04C4  
                                 l10020 0276                                   l10014 436C  
                                 l10200 0836                                   l10120 0548  
                                 l10112 0518                                   l10104 04E6  
                                 l10034 02AC                                   l10204 0864  
                                 l10124 0560                                   l10116 0530  
                                 l10108 0500                                   l10060 0382  
                                 l10052 0342                                   l10044 0304  
                                 l10230 095C                                   l10222 08DC  
                                 l10142 05FC                                   l10126 0572  
                                 l10304 0B32                                   l10160 0686  
                                 l10136 05CA                                   l11114 2404  
                                 l11202 4C38                                   l12010 3C68  
                                 l10402 0E4C                                   l10234 096E  
                                 l10218 08CA                                   l10170 06DE  
                                 l10154 0658                                   l10090 047A  
                                 l11220 4994                                   l10332 0BE2  
                                 l10316 0B80                                   l10324 0BC0  
                                 l10252 09F4                                   l10244 09A8  
                                 l10228 0948                                   l10172 06E8  
                                 l10164 06A4                                   l10148 062A  
                                 l10180 074C                                   l10084 043E  
                                 l10076 0400                                   l10068 03C2  
                                 l11214 570E                                   l11150 24FC  
                                 l11126 2456                                   l11206 4C70  
                                 l11230 49CC                                   l12014 3C84  
                                 l12006 3C4A                                   l10422 0EC8  
                                 l10350 0C68                                   l10326 0BC4  
                                 l10334 0BF4                                   l11208 4C96  
                                 l11240 3AB4                                   l11304 2E44  
                                 l12008 3C52                                   l12032 4924  
                                 l10504 10EC                                   l10432 0F02  
                                 l10264 0A42                                   l10192 07CC  
                                 _B0CON 000E20                                   l11090 4B18  
                                 l11162 254E                                   l11138 24AA  
                                 l11250 3B0E                                   l11242 3ABA  
                                 l11402 2282                                   l12042 4962  
                                 l10610 146C                                   l10602 140A  
                                 l10514 1126                                   l10442 0F3E  
                                 l10418 0EB8                                   l10370 0D34  
                                 l10362 0CF8                                   l10346 0C56  
                                 l10290 0AEA                                   l10186 078C  
                                 l10178 073C                                   l12130 31A2  
                                 l12202 3620                                   l11252 3B26  
                                 l11332 2F18                                   l12036 494C  
                                 l10612 147A                                   l10524 1160  
                                 l10508 10FC                                   l10452 0F78  
                                 l10428 0EF2                                   l10356 0CD4  
                                 l10276 0A92                                   l10196 07FA  
                                 l10188 079E                                   l12108 3172  
                                 l11078 4AFE                                   l11190 2630  
                                 l11254 3B2E                                   l11318 2EAE  
                                 l11414 22D6                                   l11270 566A  
                                 l12038 4954                                   l10606 1448  
                                 l10550 1262                                   l10518 1136  
                                 l10462 0FB2                                   l10438 0F2E  
                                 l10374 0D6A                                   l10366 0D24  
                                 l10358 0CE8                                   l10622 14BA  
                                 l12150 3200                                   l12206 3638  
                                 l12222 5646                                   l10710 2B24  
                                 l10630 2A52                                   l11176 25AC  
                                 l11504 4FE8                                   l11360 2144  
                                 l12056 29F2                                   l10616 1490  
                                 l10536 11C6                                   l10528 1170  
                                 l10448 0F68                                   l10376 0D7A  
                                 l12136 31C0                                   l10632 2A56  
                                 l10800 1DAC                                   _B1CON 000E30  
                                 l11610 176E                                   l11186 2620  
                                 l11258 3B68                                   l11290 2DDA  
                                 l11442 237E                                   l11426 2318  
                                 l11418 22E8                                   l11346 20DA  
                                 l11266 565A                                   l10570 1310  
                                 l10538 11D6                                   l10458 0FA2  
                                 l10618 149E                                   l12154 3220  
                                 l12146 31E0                                   l12218 5628  
                                 l10802 1DB2                                   l11612 1772  
                                 l11604 1720                                   l11188 2624  
                                 l11196 2650                                   l12068 38E4  
                                 l10484 1076                                   l10468 100A  
                                 l10388 0DF0                                   l12500 53CC  
                                 l10708 2B1E                                   l10652 2A98  
                                 l11710 1910                                   l11622 1794  
                                 l11614 1776                                   l11438 236C  
                                 l11374 21AE                                   l12510 554E  
                                 l10574 1336                                   l10558 12A6  
                                 l10494 10B0                                   l10742 2B6A  
                                 l10718 2B30                                   l10662 2AAE  
                                 l10670 2ABE                                   l10910 2090  
                                 l10830 1E36                                   l10814 1DFA  
                                 l10902 201A                                   l11712 1914  
                                 l11632 17BC                                   l11640 17E0  
                                 l11616 177C                                   l11608 1754  
                                 l11560 163A                                   l11552 1614  
                                 l11544 3D94                                   l10568 12FE  
                                 l10488 1086                                   l10760 2BB0  
                                 l10736 2B56                                   l10648 2A92  
                                 l10840 1E5A                                   l10808 1DD6  
                                 l10904 2070                                   _B2CON 000E40  
                                 l10930 50F2                                   l11650 180A  
                                 l11634 17C8                                   l11562 163E  
                                 l11466 3E06                                   l11546 3DB4  
                                 l10594 13CE                                   l10586 1392  
                                 l10498 10C0                                   l10754 2B98  
                                 l10770 2BDA                                   l12434 305C  
                                 l12426 3016                                   l10818 1E0A  
                                 l10914 20AC                                   l11804 1AC8  
                                 l11812 1AE4                                   l11724 1948  
                                 l11740 1980                                   l11644 17F6  
                                 l11628 17B6                                   l11564 1642  
                                 l11388 2218                                   l12700 32FC  
                                 l11484 3E70                                   l10748 2B80  
                                 l10772 2BE0                                   l10908 2084  
                                 l11822 1AF6                                   l11750 19CA  
                                 l11726 194C                                   l11742 1992  
                                 l11654 1818                                   l11662 182A  
                                 l11558 1636                                   l12710 333C  
                                 l10766 2BC8                                   l10694 2B00  
                                 l10686 2ADA                                   l12606 3F00  
                                 l12438 3070                                   l12800 4756  
                                 l11832 1B1E                                   l11816 1AEE  
                                 l11672 1864                                   l11648 17FC  
                                 l11664 1854                                   l11592 16EA  
                                 l11576 167E                                   l11584 16C4  
                                 l11568 1648                                   l12560 4CD2  
                                 l12544 4B4E                                   l12464 53EA  
                                 l11496 55FC                                   l10696 2B06  
                                 l10776 2BE8                                   l12480 4896  
                                 l10864 1F72                                   l10856 1EFC  
                                 _B3CON 000E50                                   l10938 5100  
                                 l11762 1A00                                   l11746 19AC  
                                 l11690 18C2                                   l11658 1824  
                                 l12562 4CD4                                   l12466 53F0  
                                 l12722 3386                                   l12730 33A4  
                                 l11498 5606                                   l11914 5274  
                                 l11906 5244                                   l10698 2B0C  
                                 l10874 1F98                                   l12628 556E  
                                 l11836 1B30                                   l11756 19DC  
                                 l12900 4F2E                                   l12716 3358  
                                 l12740 33CA                                   l12660 42DA  
                                 l10796 1D8A                                   l11870 1C22  
                                 l11862 1BE4                                   l11854 1B6C  
                                 l11838 1B36                                   l11782 1A7E  
                                 l11774 1A42                                   l11686 18A4  
                                 l12566 4CD8                                   l12910 54AA  
                                 l12742 33CC                                   l12670 5156  
                                 l12494 53B0                                   l12486 48DA  
                                 l10894 1FF0                                   l10886 1FCE  
                                 l12824 4D3E                                   l11880 1C64  
                                 l11856 1BC2                                   l11872 1C34  
                                 l11848 1B58                                   l11768 1A1A  
                                 l11696 18D8                                   l12904 4F3A  
                                 l12736 33C6                                   l12672 5160  
                                 l10896 2002                                   _B4CON 000E60  
                                 l12826 4D4A                                   l11866 1C08  
                                 l11698 18DC                                   l12906 4F42  
                                 l12914 54C6                                   l12930 5360  
                                 l12682 32C0                                   l12658 42BA  
                                 l12666 5144                                   l11970 416C  
                                 l11954 3A8E                                   l12836 4D7C  
                                 l12828 4D4E                                   l12852 505E  
                                 l12844 502C                                   l11876 1C42  
                                 l11788 1A94                                   l12924 572C  
                                 l12916 54CA                                   l12932 5368  
                                 l12940 5324                                   l12668 5148  
                                 l11956 3AAE                                   l12596 3EBC  
                                 l12772 549A                                   l12764 5488  
                                 l12756 5476                                   l12862 5292  
                                 l12790 471E                                   l12846 5038  
                                 l11798 1AB4                                   l11886 1C6C  
                                 l11982 41EC                                   l12864 529A  
                                 l12784 56BC                                   l12848 503C  
                                 l11888 1C72                                   l12688 32D2  
                                 l11976 41BA                                   _B5CON 000E70  
                                 l11898 573E                                   l12874 52B8  
                                 l12866 529E                                   l12890 5506  
                                 l12882 54E8                                   l12938 531C  
                                 l11978 41D0                                   l12884 54F0  
                                 l12886 54F4                                   l11998 3BE4  
                                 l12896 4EF4                                   ?_crc8 0067  
                  __size_of_doModeSLCAN 0362                      writeEEPROM@address 0060  
                                 ?_atoi 0066                                   ?_main 00CA  
                                 ?_init 0001                                   ?_itoa 0070  
                         i1_WriteTimer0 5768                                   _EEADR 000FA9  
                                 STR_10 7F5D                                   STR_11 7F7F  
                                 STR_12 7F91                                   STR_20 7F48  
                                 STR_13 7F7F                                   STR_21 7D82  
                                 STR_30 7FF4                                   STR_14 7ECC  
                                 STR_22 7D96                                   STR_15 7F7F  
                                 STR_31 7FF4                                   STR_23 7DD2  
                                 STR_32 7FF4                                   STR_16 7F4F  
                                 STR_40 7DF7                                   STR_24 7D05  
                                 STR_17 7F7F                                   STR_33 7FF4  
                                 STR_41 7FCA                                   STR_25 7BCE  
                                 STR_34 7FF4                                   STR_42 7FD8  
                                 STR_18 7F0D                                   STR_26 7D6E  
                                 STR_50 7AAB                                   STR_19 7F7F  
                                 STR_51 7F2A                                   STR_35 7FF4  
                                 STR_43 7FC5                                   STR_27 7DE5  
                                 STR_60 748A                                   STR_44 7F7F  
                                 STR_36 7F7F                                   STR_52 7E5D  
                                 STR_28 7C48                                   STR_29 7FEA  
                                 STR_45 7FA2                                   STR_53 7F64  
                                 STR_37 7A48                                   STR_61 7A05  
                                 STR_70 7F2A                                   STR_62 7F64  
                                 STR_54 7FED                                   STR_38 7FE7  
                                 STR_46 7FA7                                   STR_39 7F7F  
                                 STR_71 7C30                                   STR_47 7F2A  
                                 STR_55 7F64                                   STR_63 7FED  
                                 STR_72 7F2A                                   STR_80 7F64  
                                 STR_64 7F64                                   STR_56 7FED  
                                 STR_48 7C30                                   STR_73 7AAB  
                                 STR_49 7F2A                                   STR_57 7EE9  
                                 STR_81 7FED                                   STR_65 7FED  
                                 STR_82 748A                                   STR_66 748A  
                                 STR_74 7F2A                                   STR_58 7F64  
                                 STR_90 7896                                   STR_67 7F7F  
                                 STR_91 7FF4                                   STR_59 7FED  
                                 STR_83 7F56                                   STR_75 7C60  
                                 STR_84 7FF4                                   STR_76 79C0  
                                 STR_92 78E4                                   STR_68 7422  
                                 STR_93 7FF4                                   STR_69 7FAC  
                                 STR_77 7A8A                                   STR_85 721C  
                                 STR_78 7FBB                                   STR_86 77FA  
                                 STR_94 7759                                   STR_87 7FF4  
                                 STR_95 7FB1                                   STR_79 7DAA  
                                 STR_96 7FF4                                   STR_88 772F  
                                 STR_89 7FF4                                   STR_97 7529  
                                 STR_98 790A                                   STR_99 7FF4  
          __end_of_printFirmwareVersion 4A98                                   _BSEL0 000DF8  
                       __end_of___lldiv 4D9C                                   ?_utoa 0067  
                                 u12000 51B4                                   u12010 51E2  
                       __end_of_calcCRC 5650                                   u12007 51AE  
                                 _T0CON 000FD5                                   u12017 51DC  
                                 u12205 03E6                                   u12215 0424  
                       __end_of___llmod 507E                                   u12225 0462  
                                 u14010 3B04                                   u12235 049E  
                                 u12165 02E0                                   u14030 3B22  
                                 u12335 0596                                   u12175 0328  
                                 u14017 3AFE                                   u14105 455C  
                                 u12425 0770                                   u12185 0366  
                                 u14050 3B52                                   u12195 03A6  
                                 u14060 3B7C                                   u14037 3B1C  
                                 u12445 07C2                                   u12455 07F0  
                                 _LATC1 007C59                                   u14320 4FD8  
                                 u13520 1EC8                                   u14057 3B4C  
                                 u12465 081E                                   u13530 1ED2  
                                 u14067 3B76                                   u12475 085A  
                                 u14340 5010                                   u13540 1EDC  
                                 u12485 0888                                   u13525 1EC6  
                                 u14327 4FD2                                   u13535 1ED0  
                                 u13545 1EDA                                   u16130 540C  
                                 u14347 500A                                   u12755 0D9C  
                                 u12845 1516                                   u15094 5254  
                                 u15095 5250                                   u15335 2876  
                                 u12855 102C                                   u12775 0E6E  
                                 u12695 0C18                                   u15336 287C  
                                 u16137 5406                                   u15345 28AA  
                                 u15337 288A                                   u12945 11F8  
                                 u15346 28B0                                   u15347 28BE  
                                 u12955 123E                                   u15365 38BE  
                                 u12965 1284                                   u16270 4BA0  
                                 u15375 38CE                                   u15385 38EC  
                                 u17137 3436                                   u13970 3ACE  
                                 u16450 5188                                   u16275 4B96  
                                 u13990 3AE6                                   u13977 3AC8  
                                 u16457 517E                                   u13997 3AE0  
                                 u15765 3FCE                         __end_of___lwdiv 52CC  
                                 _ERRIE 007D1D                            _vscpPriority 01AF  
                                 i1l401 0164                                   i1l404 0180  
                                 i1l413 024A                                   i1l407 01C8  
                       __end_of___lwmod 551A                                   i1l392 0174  
                                 i1l387 007C                                   i1l389 0176  
                                 i1l398 0174                         sendCANFrame@dlc 0093  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0063                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00B8                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 00EF  
               readRegisterExtended@reg 00B8                           __CFG_WRTD$OFF 000000  
                        __CFG_EBTRB$OFF 000000                        _hexStringToBytes 4856  
                                 crc8@m 0069                         __end_of_dpowers 700C  
                       __end_of_isdigit 56C4                                   _timer 00E9  
                                 atoi@a 006B                                   atoi@s 0066  
                                 main@c 00D0                                   _ultoa 3EAC  
                            Interrupt@c 0024              ??_printNodeFirmwareVersion 00BF  
                      _printErrors$1402 009A                        _printErrors$1408 009C  
                      _printErrors$1417 009E                        _printErrors$1390 0096  
                      _printErrors$1384 0094                                   tablat 000FF5  
                      _printErrors$1396 0098                 ??_receiveSendEventCANAL 0072  
           __end_of_sendEscapedUartData 50DE                                   plusw2 000FDB  
                                 utoa@c 006F                                   utoa@v 006D  
                                 status 000FD8                         __end_of_sprintf 1C80  
               ??_receiveSendEventSLCAN 0083                         __end_of_strichr 54DC  
                       __end_of_strcspn 535A                         __end_of_toupper 5730  
                       __end_of_stristr 4CAE                            __end_ofPL100 55F2  
                          __end_ofPL110 39AC                            __end_ofPL102 3898  
                          __end_ofPL112 1D4E                            __end_ofPL104 43AC  
                          __end_ofPL106 285C                            __end_ofPL108 4856  
     __size_of_receivePrintEventVerbose 02C2                     doModeVerbose@i_1103 02B0  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1200 02BB  
                   doModeVerbose@p_1109 02B2                     doModeVerbose@p_1181 02B9  
                   doModeVerbose@p_1157 02B4                          WriteUSART@data 0060  
                  _ECANSetOperationMode 5700                            _canInputFifo 0040  
                       __initialization 4F58                  doModeVerbose@page_1154 02A1  
         receiveSendMultiEventCANAL@dlc 007C                            __end_of_crc8 55C0  
         receiveSendMultiEventCANAL@crc 0081                            __end_of_atoi 3BAA  
         receiveSendMultiEventCANAL@pos 0082                            __end_of_main 3522  
                          __end_of_init 5316                            __end_of_itoa 558A  
                          __end_of_utoa 47B6                     doModeVerbose@ifmode 02B6  
                   doModeVerbose@maskno 02A8                     doModeVerbose@nodeid 028C  
                         doModeSLCAN@id 009D                          __CFG_OSC$HSPLL 000000  
                         doModeSLCAN@rv 00A3                       ??_ECANSendMessage 0072  
                        ?i1_WriteTimer0 0001              writeRegisterExtended@value 00BB  
                                ??_crc8 006A                   getVSCPFrame@pvscptype 0074  
                                ??_atoi 0068                  ??_vscp_restoreDefaults 0064  
                                ??_main 00CF                       readRegister@value 00B9  
                                ??_init 0064                                  ??_itoa 0076  
                                ??_utoa 006D                  doModeVerbose@mask_type 0292  
                         __activetblptr 000002                         _stateVscpDriver 00F4  
                     __RegsToCANID@type 0004                    _can_transmitOverruns 002B  
            ECANReceiveMessage@msgFlags 000A                           ?_readRegister 00B6  
             __size_of__ECANPointBuffer 0076                                  _B0TXEN 006FC2  
                                _B1TXEN 006FC3                                  _B2TXEN 006FC4  
                doModeVerbose@preg_1161 0286                                  _B3TXEN 006FC5  
                                _B4TXEN 006FC6                                  _B5TXEN 006FC7  
           readRegisterExtended@timeout 00B9              ECANReceiveMessage@savedPtr 000B  
                                _CANCON 000F6F                        ___llmod@dividend 006D  
                                STR_100 77AA                                  STR_101 7FF4  
                                STR_110 7F05                                  STR_102 7954  
                                STR_103 7FF4                                  STR_111 77D2  
                                STR_200 716F                                  STR_112 7E86  
                                STR_120 7BB4                                  STR_104 7979  
                                STR_105 7FF4                                  STR_121 7EED  
                                STR_113 7EBA                                  STR_201 7B63  
                                STR_130 7FF2                                  STR_122 7F8B  
                                STR_114 7F85                                  STR_106 786F  
                                STR_202 76D7                                  STR_210 730F  
                                STR_131 7FF0                                  STR_107 7F9D  
                                STR_115 7EFD                                  STR_211 7CC0  
                                STR_123 7A69                                  STR_203 767D  
                                STR_124 7F7F                                  STR_140 7FED  
                                STR_108 7FDC                                  STR_132 7F41  
                                STR_116 7B47                                  STR_212 7A27  
                                STR_204 74F6                                  STR_220 702C  
                                STR_133 7F64                                  STR_117 7FC0  
                                STR_141 7EC3                                  STR_221 7D46  
                                STR_125 7B7E                                  STR_213 7821  
                                STR_109 7703                                  STR_205 755B  
                                STR_150 7FF4                                  STR_142 7F64  
                                STR_134 7FED                                  STR_126 7D5A  
                                STR_206 7B0B                                  STR_118 7ACC  
                                STR_230 78BD                                  STR_214 7782  
                                STR_222 70C7                                  STR_143 7FED  
                                STR_119 7F97                                  STR_135 7EF5  
                                STR_127 7ED5                                  STR_151 7E91  
                                STR_223 79E3                                  STR_215 764E  
                                STR_207 758D                                  STR_231 7153  
                                STR_240 748A                                  STR_160 748A  
                                STR_152 7FD4                                  STR_136 7F6B  
                                STR_144 7F3A                                  STR_128 7EDD  
                                STR_232 7B99                                  STR_208 76AB  
                                STR_224 761F                                  STR_216 710E  
                                STR_233 748A                                  STR_145 7F64  
                                STR_137 7FED                                  STR_129 7F79  
                                STR_241 7E6C                                  STR_153 7E09  
                                STR_161 7D1B                                  STR_209 7C00  
                                STR_225 75F0                                  STR_217 71D9  
                                STR_242 748A                                  STR_234 7153  
                                STR_162 7F72                                  STR_146 7FED  
                                STR_154 7F72                                  STR_138 7F33  
                                STR_250 7F1D                                  STR_170 7F15  
                                STR_226 7196                                  STR_218 707A  
                                STR_139 7F64                                  STR_171 7FE0  
                                STR_163 7FE0                                  STR_155 7FE0  
                                STR_147 7F2C                                  STR_251 7E7A  
                                STR_235 7E4E                                  STR_243 7DBE  
                                STR_219 7C18                                  STR_227 75BF  
                                STR_180 748A                                  STR_172 748A  
                                STR_164 748A                                  STR_156 748A  
                                STR_148 7F64                                  STR_244 7FFC  
                                STR_236 7EE5                                  STR_252 7EB0  
                                STR_228 737E                                  STR_181 7C90  
                                STR_149 7FED                                  STR_237 7FF8  
                                STR_245 7FF6                                  STR_253 7EA6  
                                STR_157 7E3D                                  STR_165 7D31  
                                STR_173 7CA8                                  STR_229 725E  
                                _EEDATA 000FA8                                  STR_246 748A  
                                STR_166 7F72                                  STR_158 7F72  
                                STR_182 7F15                                  STR_174 7F15  
                                STR_238 7FE4                                  STR_254 7CEE  
                                STR_190 7458                                  STR_255 748A  
                                STR_183 7FE0                                  STR_175 7FE0  
                                STR_167 7FE0                                  STR_159 7FE0  
                                STR_239 7FFA                                  STR_247 7E9C  
                                STR_191 72D6                                  STR_248 748A  
                                STR_184 748A                                  STR_176 748A  
                                STR_168 748A                                  STR_256 7E1B  
                                STR_192 7C78                                  STR_193 7F64  
                                STR_249 7F25                                  STR_257 7E2C  
                                STR_169 7CD7                                  STR_177 7C90  
                                STR_185 7BE7                                  STR_186 7F64  
                                STR_178 7F15                                  STR_194 7FED  
                                STR_195 748A                                  STR_187 7FED  
                                STR_179 7FE0                                  STR_188 748A  
                                STR_196 7347                                  STR_197 73EC  
                                STR_189 729C                                  STR_198 74C2  
                                STR_199 7848                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 3DB8                                  _CIOCON 000F73  
                                ?_ultoa 0076            ??_sendVSCPDriverCommandReply 0070  
                  __end_of_fifo_getFree 483A                                  i1l1440 268C  
                         ?_init_app_ram 0001                                  i1l1450 275A  
                                i1l1451 26DA                                  _MDSEL0 007BBE  
                                i1l1461 2734                                  i1l1453 26E8  
                                _MDSEL1 007BBF                                  i1l1526 37C4  
                                i1l1527 384C                                  i1l1471 27BE  
                                i1l1463 2744                                  i1l1455 26FC  
                                i1l1447 284C                                  i1l1472 27D8  
                                i1l1457 2710                                  i1l1459 2724  
                                i1l1494 3720                                  i1l1833 56F0  
                                i1l1499 4E7E                                  i1l6306 37CE  
                                i1l6330 47F8                                  i1l6316 3828  
                                i1l6318 3832                              _OpenTimer0 56C4  
                                i1l6298 378E                                  i1l9300 4E3E  
                                i1l9302 4E48                                  i1l9310 4E60  
                                i1l9304 4E4E                                  i1l9306 4E54  
                                i1l9324 36BC                                  i1l9292 4E18  
                                i1l9294 4E20                                  i1l9296 4E2A  
                                i1l9624 276E                                  i1l9298 4E34  
                                i1l9634 278E                                  i1l9660 2806  
                                i1l9652 27DA                                  i1l9572 26BA  
                                i1l9556 267A                                  i1l9580 26C8  
                                i1l9566 26A4                                  i1l9574 26C4  
                                i1l9674 2836                                  i1l9668 2820  
                       _init_app_eeprom 4AA6                      __size_of_ReadUSART 001E  
                                _RXB0IF 007D20                                  _RXB1IF 007D21  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 0008  
                ECANReceiveMessage@mode 000F                  ECANReceiveMessage@temp 0010  
                                _RXBnIE 007D19                                  _RXBnIF 007D21  
                     getVSCPFrame@pData 007C              ??_sendVSCPDriverErrorFrame 006F  
                     getVSCPFrame@pSize 007A                      _doModeVerbose$1121 0294  
                    _doModeVerbose$1133 0296                      _doModeVerbose$1144 029A  
                    _doModeVerbose$1138 0298                      _doModeVerbose$1148 029C  
                    _doModeVerbose$1173 029E                   ?_ECANSetOperationMode 0001  
                    __CANIDToRegs@Value 0069                      __size_of_Interrupt 0250  
              readRegisterExtended@page 00B6                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0002                          getCANFrame@pid 0071  
                                ___wmul 55C0                              _bInitiated 00EE  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0068  
                             ??_calcCRC 006F                                  _cmdbuf 0104  
                             ??___llmod 0075                        OpenTimer0@config 0060  
                receiveSendEventCANAL@i 007A                               ??___lwdiv 0064  
                             ??___lwmod 0064           _receivePrintEventVerbose$1271 009B  
         _receivePrintEventVerbose$1281 009F           _receivePrintEventVerbose$1266 0099  
         _receivePrintEventVerbose$1291 00A3           _receivePrintEventVerbose$1276 009D  
         _receivePrintEventVerbose$1286 00A1                                  _memcpy 539E  
                                _memset 5650                                  clear_0 4F60  
                                clear_1 4F74                                  clear_2 4F86  
                                clear_3 4F92                                  clear_4 4F9E  
                                clear_5 4FAA                           ?_sendCANFrame 008F  
                                _strcat 513A                                  _strchr 4FBA  
                                _strcpy 55F2                                  _strlen 53E0  
                                _wrkbuf 0154                                  _strtok 4986  
                                _strspn 535A                             Interrupt@id 0026  
   __size_of_sendVSCPDriverCommandReply 00C4                               ??_isdigit 0060  
                receiveSendEventSLCAN@i 008B                        __end_of_printMDF 4986  
                          __mediumconst 6FB4                          ??_readRegister 00BA  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                            ?_printBinary 0001  
               __size_of_nibbleFromChar 003E                                  ultoa@c 0082  
                                ultoa@v 007E                            ?_printErrors 0001  
                             ??_sprintf 007E                               ??_strichr 0065  
                             ??_strcspn 006A                               ??_toupper 0060  
                        ??_init_app_ram 0063                               ??_stristr 0071  
            ??_sendVSCPModeCapabilities 006F              doModeVerbose@mask_priority 0291  
                      __end_of_strnicmp 4F58                              __accesstop 0060  
               __end_of__initialization 4FB0                    _printFirmwareVersion 4A18  
                       writeEEPROM@data 0062                   __size_of_getVSCPFrame 0086  
             receiveSendEventCANAL@data 0072                    doModeVerbose@id_1212 02A3  
                            _WriteUSART 5730                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 01A8                    _printStatistics$1371 0098  
                  _printStatistics$1365 0096                    _printStatistics$1359 0094  
                  _printStatistics$1377 009A                   _uart_transmitOverruns 0033  
                       ??i1_WriteTimer0 0003                           __end_of_ultoa 3F7E  
                            __end_ofPL2 14D2                              __end_ofPL4 14E2  
                            __end_ofPL6 14F0                              __end_ofPL8 150E  
                        ??_sendCANFrame 0096                       __end_of_ReadUSART 5700  
                         ?__RegsToCANID 0001             __size_of_ECANReceiveMessage 01FA  
                    sendVSCPFrame@pData 009C                         readRegister@reg 00B6  
                  sendVSCPDriverAck@crc 006F                      __size_of_findNodes 00F4  
                        doModeSLCAN@dlc 00A1                      __size_of_fifo_init 0030  
                    __size_of_fifo_read 00A2                  getVSCPFrame@pvscpclass 0072  
               __end_of_init_app_eeprom 4B30                       __end_of_Interrupt 0268  
                         ReadUSART@data 0001                      readRegister@nodeid 00BE  
                        _status_led_cnt 0039                      __RegsToCANID@Value 0007  
                            _crc8_table 0300                       __end_of_OpenUSART 513A  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C4  
                       setFilter@filter 006A                            sprintf@width 008B  
      __end_of_printNodeFirmwareVersion 4210                              _doModeVscp 2A3A  
                               ??_ultoa 007E                            _getVSCPFrame 4B30  
                            __pbssBANK0 00D1                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                              calcCRC@crc 0070  
                            calcCRC@len 006E                   ?_printFirmwareVersion 0001  
                ??_ECANSetOperationMode 0060                      __size_of_init_crc8 006A  
                         setFilter@eidh 006D                           setFilter@eidl 006E  
                         setFilter@sidh 006B                           setFilter@sidl 006C  
                            _canrxcount 00F0                            ?_writeEEPROM 0060  
                      ??_doModeVscpNode 0060                              _nTimeStamp 00F2  
           ?_receiveSendMultiEventCANAL 0001                __end_of_hexStringToBytes 48F0  
              ECANSetOperationMode@mode 0060                                 ?___wmul 0060  
                    __size_of_setFilter 01DE                                 _B0RXFUL 007107  
                               _B1RXFUL 007187                    __ECANRxFilterHitInfo 003E  
                               _B2RXFUL 007207                                 _B3RXFUL 007287  
                               _B4RXFUL 007307                      _sendVSCPDriverNack 45D6  
                               _B5RXFUL 007387                        WriteTimer0@timer 0062  
                         putsUSART@data 0061                    _readRegisterExtended 3CBC  
                               ?_memcpy 0060                                 _ECANCON 000F77  
                               ?_memset 0060                           ??_WriteTimer0 0062  
                        ??__RegsToCANID 0005                   sendVSCPFrame@priority 009A  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0060  
                               ?_strchr 0060                                 ?_strcpy 0060  
                               ?_strlen 0060                                 ?_strtok 006C  
                               ?_strspn 0066                              _cntRxBytes 00D5  
                            _cntTxBytes 00DD                                 i1l13000 0152  
                               i1l13010 01A4                                 i1l13002 015C  
                               i1l13020 01FC                                 i1l13012 01AC  
                               i1l13004 016C                                 i1l13022 0244  
                               i1l13014 01B4                                 i1l13006 017E  
                               i1l13016 01D0                                 i1l13008 0188  
                               i1l13018 01D8                                 i1l13026 0248  
                    __size_of_printGUID 00F0                     ?_sendVSCPDriverNack 0001  
                               i1l12960 0078                                 i1l12952 0034  
                               i1l12970 00B6                                 i1l12962 0084  
                               i1l12954 003C                                 i1l12972 00C2  
                               i1l12964 0090                                 i1l12956 0042  
                               i1l12990 0122                                 i1l12982 00F8  
                               i1l12974 00D2                                 i1l12966 00A2  
                               i1l12958 0068                                 i1l12984 0104  
                               i1l12976 00DA                                 i1l12968 00B2  
                               i1l12994 0134                                 i1l12978 00E6  
                               i1l12996 0140                                 i1l12988 0116  
                            _fifo_write 377C                      __size_of_printHelp 01C0  
                    __size_of_printMode 0076                   sendVSCPFrame@vscptype 0098  
                 __size_of_fifo_getFree 0084                 doModeVerbose@value_1156 02A9  
                     sendCANFrame@pdata 0094                              _made_table 0037  
                               _RXB0CON 000F60                                 _RXB1CON 000F50  
                               _RXB0FUL 007B07                        __ECANPointBuffer 4E12  
                               _TXB0CON 000F40                                 _TXB1CON 000F30  
                               _TXB2CON 000F20                      __size_of_putsUSART 0058  
    __end_of_sendVSCPDriverCommandReply 4132              _sendVSCPDriverCommandReply 406E  
                               _RXFCON0 000DD4                                 _RXFCON1 000DD5  
                 _writeRegisterExtended 39AC        __size_of_receiveVSCPModeCanalMsg 00DC  
                __size_of_doModeVerbose 1252                    sendEscapedUartData@c 006E  
                __size_of_sendVSCPFrame 00B6        __end_of_sendVSCPDriverErrorFrame 445C  
                            _readEEPROM 5756          __size_of_receiveSendEventCANAL 013C  
         __end_of_receiveSendEventCANAL 365E                    ??_sendVSCPDriverNack 006F  
            printFirmwareVersion@wrkbuf 0078          __size_of_receiveSendEventSLCAN 017A  
                       _ECANSendMessage 3268           __end_of_receiveSendEventSLCAN 30DE  
                               __Hparam 0000                       __end_of_findNodes 3EAC  
                               __Lparam 0000                       __end_of_fifo_init 5450  
                     __end_of_fifo_read 4380                           ??_getCANFrame 0071  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00B6  
                  __end_of_readRegister 42DE                               ?_printMDF 0001  
                               _bSilent 0101               receiveVSCPModeCanalMsg@id 00B2  
                         ??_doModeSLCAN 0096                                 ___lldiv 4D26  
                       __size_of___wmul 0022                                 _calcCRC 5622  
                       getCANFrame@pdlc 006D                                 ___llmod 501C  
                               ___lwdiv 5282                               _FIFOEMPTY 007BA7  
                               ___lwmod 54DC                   ?_readRegisterExtended 00B6  
           printNodeFirmwareVersion@buf 00C0                    __end_of_init_app_ram 5238  
                          _fifo_getFree 47B6                            init_crc8@crc 0064  
                               __pcinit 4F58                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0064  
                               __ptext0 33D6                                 __ptext1 5782  
                               __ptext2 1D4E                                 __ptext3 4856  
                               __ptext4 5460                 receiveSendEventCANAL@id 007B  
                               __ptext5 2F64                                 __ptext6 3EAC  
                               __ptext7 2A3A                                 __ptext8 406E  
                               __ptext9 446A                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C3                       ??_printStatistics 0094  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 0030  
                       __size_of_strlen 0040                       __end_of_hexpowers 702C  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 6FE4                       __end_of_init_crc8 4EF2  
                               _isdigit 56A4          printNodeFirmwareVersion@nodeid 00BF  
                   __end_of_WriteTimer0 5756                          _nibbleFromChar 5460  
                      ?_init_app_eeprom 0001                                 _sprintf 160E  
      __end_of_sendVSCPModeCapabilities 4520                       __end_of_setFilter 2A3A  
                               _strichr 549E                          doModeVerbose@c 02AC  
                        doModeVerbose@i 02AA                          doModeVerbose@p 02B7  
                               _strcspn 5316                                 _toupper 571A  
                           ?_doModeVscp 0001                                 _stristr 4C36  
                  __size_of_printBinary 004A                    end_of_initialization 4FB0  
                          Interrupt@dlc 0025                       __end_of_octpowers 6FE4  
                  __size_of_printErrors 02D6                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0078                                 itoa@buf 0070  
                             i1u1132_25 2682                               i1u1132_27 2684  
                               memset@c 0062                                 itoa@val 0072  
                               memset@n 0064                                 memset@p 0066  
                         __Lmediumconst 6FB4                               i1u1092_25 3684  
                  __end_of_sendCANFrame 5552                               i1u1093_25 3694  
                             i1u1094_25 36C0                               i1u1700_20 0132  
                             i1u1700_21 0130                               i1u1701_20 0140  
                             i1u1701_21 013E                               i1u1710_20 01D0  
                             i1u1702_20 0150                               i1u1710_21 01CE  
                             i1u1702_21 014E                               i1u1711_20 01D8  
                             i1u1703_20 015C                               i1u1711_21 01D6  
                             i1u1703_21 015A                               i1u1712_20 01FC  
                             i1u1704_20 016C                               i1u1712_21 01FA  
                             i1u1704_21 016A                               i1u1705_20 017E  
                             i1u1705_21 017C                               i1u1706_20 0188  
                             i1u1706_21 0186                               i1u1707_20 01A4  
                             i1u1707_21 01A2                               i1u1708_20 01AC  
                             i1u1708_21 01AA                               i1u1709_20 01B4  
                             i1u1709_21 01B2                               i1u1690_20 003C  
                             i1u1690_21 003A                               i1u1691_20 0068  
                             i1u1691_21 0066                               i1u1692_20 0084  
                             i1u1692_21 0082                               i1u1693_20 00C2  
                             i1u1693_21 00C0                               i1u1694_20 00D2  
                             i1u1694_21 00D0                               i1u1695_20 00E6  
                             i1u1695_21 00E4                               i1u1696_20 00F6  
                             i1u1696_21 00F4                               i1u1697_20 0104  
                             i1u1697_21 0102                               i1u1698_20 0114  
                             i1u1698_21 0112                               i1u1699_20 0122  
                             i1u1699_21 0120                     _can_receiveOverruns 00D1  
               receiveSendEventSLCAN@id 0086                       __end_of_printGUID 3CA8  
                       ___lldiv@divisor 0064                       __end_of_printHelp 2DBC  
                       ___lldiv@counter 006C                       __end_of_printMode 4E12  
                     ECANSendMessage@id 006A                       ECANSendMessage@pb 0073  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 00BF  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 51EA  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 026C  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00D0  
                               utoa@val 0069               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 4520                                 strlen@s 0060  
                            _sequencyno 00F3                              _timekeeper 00E5  
                             _RXM0EXIDM 0078CB                                 strspn@i 006A  
                            ??_strnicmp 006A                     __end_of_getCANFrame 4D26  
                            findNodes@i 00C9                  __end_of_nibbleFromChar 549E  
                   __end_of_doModeSLCAN 20B0                             ?_fifo_write 0001  
                            fifo_init@f 0064           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 006C                              fifo_read@i 006A  
                            fifo_read@p 0068                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B6  
     sendVSCPDriverCommandReply@cmdCode 006F                     __size_of_WriteUSART 0014  
                     readEEPROM@address 0060             sendVSCPModeCapabilities@crc 006F  
               __end_of_ECANSendMessage 33D6                    _uart_receiveOverruns 002F  
              _receivePrintEventVerbose 2392                              _vscpNodeId 01AE  
                         ?__CANIDToRegs 0060                    __end_of__RegsToCANID 3722  
                           ?_readEEPROM 0060                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02AD  
                     doModeVerbose@preg 0284                          _init_crc8$2075 0060  
                ??_readRegisterExtended 00BD                          ?_doModeVerbose 0001  
                        ?_sendVSCPFrame 0096                    __size_of_writeEEPROM 0026  
                        __end_of___wmul 55E2                     __size_of_doModeVscp 01B2  
                           _WriteTimer0 5744                          __end_of_memcpy 53E0  
                        __end_of_memset 567E       __size_of_sendVSCPDriverErrorFrame 00B0  
             ?_sendVSCPDriverErrorFrame 0001                         ?_nibbleFromChar 0001  
                        __end_of_strcat 5192                          __end_of_strchr 501C  
                        __end_of_strcpy 5622                          __end_of_strlen 5420  
              doModeVerbose@filter_type 028F                          __end_of_strtok 4A18  
                        __end_of_strspn 539E                             __end_ofPL10 1558  
                           __end_ofPL20 1CAE                             __end_ofPL12 1574  
                           __end_ofPL30 1598                             __end_ofPL22 3BB8  
                           __end_ofPL14 1C9E                             __end_ofPL40 15C6  
                           __end_ofPL32 396C                             __end_ofPL24 1CD4  
                           __end_ofPL16 387A                             __end_ofPL50 397C  
                           __end_ofPL42 3888                             __end_ofPL34 439E  
                           __end_ofPL26 3256                             __end_ofPL18 2BFC  
                           __end_ofPL60 160E                             __end_ofPL52 4676  
                           __end_ofPL44 15E0                             __end_ofPL36 15AA  
                           __end_ofPL28 1584                             __end_ofPL70 3F92  
                           __end_ofPL62 1D1A                             __end_ofPL54 15F8  
                           __end_ofPL46 1CEE                             __end_ofPL38 3730  
                           __end_ofPL80 376A                             __end_ofPL72 3CBC  
                           __end_ofPL64 1D28                             __end_ofPL56 1D04  
                           __end_ofPL48 4716                             __end_ofPL90 5460  
                           __end_ofPL82 1D3A                             __end_ofPL74 39A2  
                           __end_ofPL66 4AA6                             __end_ofPL58 398E  
                           __end_ofPL92 30EC                             __end_ofPL84 3268  
                           __end_ofPL76 3744                             __end_ofPL68 4848  
                           __end_ofPL94 446A                             __end_ofPL86 377C  
                           __end_ofPL78 3756                             __end_ofPL96 4140  
                           __end_ofPL88 20BC                             __end_ofPL98 1D44  
                   start_initialization 4F58                               _ReadUSART 56E2  
                       findNodes@nFound 00C7                   doModeVerbose@reg_1155 02A2  
                 doModeVerbose@filterno 02A7                 _receiveVSCPModeCanalMsg 3F92  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 00A2  
                          ??_OpenTimer0 0060  sendVSCPDriverCommandReply@cmdReplyCode 0070  
                             _Interrupt 0018                          ??__CANIDToRegs 0067  
            readRegisterExtended@nodeid 00C1                               _OpenUSART 50DE  
                   sendVSCPFrame@nodeid 0099                         ___llmod@divisor 0071  
                 __size_of_readRegister 00CE                         ___llmod@counter 0075  
                 ECANReceiveMessage@ptr 0011                     __size_of_fifo_write 00D2  
                 __size_of_init_app_ram 004E                          _findNodes$1461 00C5  
              __end_of__ECANPointBuffer 4E88                       __CANIDToRegs@type 0066  
                            init_crc8@i 0065                              init_crc8@j 0062  
                           _getCANFrame 4CAE                                ??___wmul 0064  
     __size_of_sendVSCPModeCapabilities 00B6                       ?_hexStringToBytes 0064  
                           _doModeSLCAN 1D4E               ?_sendVSCPModeCapabilities 0001  
            __end_of_ECANReceiveMessage 284E                                ??_memcpy 0066  
                   readRegister@timeout 00B7                                ??_memset 0066  
                 sendVSCPDriverNack@crc 006F                doModeVerbose@mask_nodeid 0293  
                 __end_ofi1_WriteTimer0 577A                      ??_hexStringToBytes 0069  
                              ??_strcat 0064                                ??_strchr 0064  
                              ??_strcpy 0064                                ??_strlen 0062  
                    __end_of_OpenTimer0 56E2                                ??_strtok 0070  
                              ??_strspn 006A                     __size_of_readEEPROM 0012  
                           __pbssBIGRAM 0400                             __pbssCOMRAM 002B  
                            ?_ReadUSART 0001                           __pcstackBANK0 0060  
                         __pcstackBANK1 01B2                           __pcstackBANK2 0280  
                   __end_of__stringdata 7FFE                            _readRegister 4210  
                 __size_of_sendCANFrame 0038                            _isdigit$2888 0061  
           ?_sendVSCPDriverCommandReply 006F             sendVSCPDriverErrorFrame@crc 0070  
                      ?_ECANSendMessage 006A                       sendVSCPFrame@size 009B  
                          _init_app_ram 51EA                              ?_Interrupt 0001  
                            ?_OpenUSART 0060                             sprintf@_val 008D  
                           sprintf@flag 0092                             sprintf@prec 0089  
                             __pnvBANK0 00F5                        _ledFunctionality 003F  
              doModeVerbose@nodeid_1153 028D                doModeVerbose@nodeid_1168 02AF  
                          setFilter@val 0060                        ___lwdiv@dividend 0060  
                       ??_doModeVerbose 01B2           __size_of_ECANSetOperationMode 001A  
                       _printStatistics 2DBC                            ??_WriteUSART 0060  
                       ??_sendVSCPFrame 009E                          _ECANInitialize 4BB6  
                     _sendVSCPDriverAck 4676                           __pmediumconst 6FB4  
                              ?___lldiv 0060                                ?_calcCRC 006C  
                              ?___llmod 006D                               _findNodes 3DB8  
                              ?___lwdiv 0060                                ?___lwmod 0060  
                             _fifo_init 5420                               _fifo_read 42DE  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0096  
                           __pintcodelo 0018                            _sendCANFrame 551A  
                     WriteTimer0@timer0 0060                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 0096  
                   ??_sendVSCPDriverAck 006F                       __size_of_strnicmp 0066  
                       printGUID@nodeid 00BF                     _sendEscapedUartData 507E  
                             _hexpowers 700C                        ___lwdiv@quotient 0065  
                             _init_crc8 4E88                   __size_of__RegsToCANID 00C4  
             doModeVerbose@filter_class 0288                                ?_sprintf 0076  
                              ?_strichr 0061                             _cntRxFrames 00D9  
                          ??_doModeVscp 00B7                                ?_strcspn 0066  
                              ?_toupper 0001                                ?_stristr 006D  
                    __end_of_WriteUSART 5744                          __size_of_ultoa 00D2  
                           _cntTxFrames 00E1                          ___wmul@product 0064  
                sendVSCPFrame@vscpclass 0096                               _setFilter 285C  
                           strnicmp@len 0068                               _octpowers 6FB4  
                              _PIE1bits 000F9D             __size_of_sendVSCPDriverNack 0092  
                __end_of_ECANInitialize 4C36               __end_of_sendVSCPDriverAck 4708  
                              i1u610_25 379E                                i1u611_25 37B0  
                              i1u615_25 47D6                                _PIR1bits 000F9E  
                 _receiveSendEventCANAL 3522                                _PIR2bits 000FA1  
                      ECANSendMessage@i 008C                        ECANSendMessage@j 0087  
                  ?_sendEscapedUartData 006C                   _receiveSendEventSLCAN 2F64  
                              _RXF0EIDH 000F02                                _RXF0EIDL 000F03  
                              _RXB0OVFL 007BA7                                _RXF1EIDH 000F06  
                              _RXF1EIDL 000F07                                _RXB1OVFL 007BA6  
                              _RXF2EIDH 000F0A                                _RXF2EIDL 000F0B  
                              _RXF3EIDH 000F0E                                _RXF3EIDL 000F0F  
                              _RXF4EIDH 000F12                                _RXF4EIDL 000F13  
                              _RXF5EIDH 000F16                                _RXF5EIDL 000F17  
                              _RXF6EIDH 000D62             receiveSendMultiEventCANAL@i 007B  
                              _RXF6EIDL 000D63                       hexStringToBytes@i 0070  
                              _RXF7EIDH 000D66                                _RXF0SIDH 000F00  
                     hexStringToBytes@p 006E                                _RXF7EIDL 000D67  
                              _RXF0SIDL 000F01                               _printGUID 3BB8  
                              _RXF8EIDH 000D6A                                _RXF1SIDH 000F04  
                              _RXF8EIDL 000D6B                                _RXF1SIDL 000F05  
                              _RXF9EIDH 000D72                                _RXF2SIDH 000F08  
                              _RXF9EIDL 000D73                                _RXF2SIDL 000F09  
                              _RXF3SIDH 000F0C                                _RXF3SIDL 000F0D  
                            printGUID@i 00C4                                _RXF4SIDH 000F10  
                              _RXF4SIDL 000F11                                _RXF5SIDH 000F14  
                              _RXF5SIDL 000F15                                _RXF6SIDH 000D60  
                              _RXF6SIDL 000D61                                _RXM0EIDH 000F1A  
                              _RXF7SIDH 000D64                                _RXM0EIDL 000F1B  
                              _RXF7SIDL 000D65                                _RXM1EIDH 000F1E  
                              _RXF8SIDH 000D68                                _RXM1EIDL 000F1F  
                              _RXF8SIDL 000D69                                _RXF9SIDH 000D70  
                              _RXF9SIDL 000D71                                _RXFBCON0 000DE0  
                              _RXFBCON1 000DE1                                _RXFBCON2 000DE2  
                              _RXFBCON3 000DE3                                _RXFBCON4 000DE4  
                              _RXFBCON5 000DE5                                _RXFBCON6 000DE6  
                              _RXFBCON7 000DE7                              ?_findNodes 0001  
                             _printHelp 2BFC                                _RXM0SIDH 000F18  
                              _RXM0SIDL 000F19                                _RXM1SIDH 000F1C  
                              _RXM1SIDL 000F1D                               _printMode 4D9C  
                            ?_fifo_init 0060                              ?_fifo_read 0060  
                              _RXERRCNT 000F75                      __end_of_doModeVscp 2BEC  
                              _TXERRCNT 000F76                    __end_of__CANIDToRegs 3958  
                             _putsUSART 5192                             __stringdata 702C  
                     ___wmul@multiplier 0060                            __RegsToCANID 365E  
                             _vscpClass 01AC                 ??_writeRegisterExtended 00BD  
                          ??_fifo_write 0006                 __size_of_doModeVscpNode 0002  
            ??_receivePrintEventVerbose 0094                             ??_ReadUSART 0001  
                   getVSCPFrame@pNodeId 0076                           ??_printBinary 0061  
                      doModeVerbose@reg 02AE                           ??_printErrors 0094  
                            ?_init_crc8 0001                               _rwtimeout 0103  
             writeRegisterExtended@page 00B6                          Interrupt@flags 002A  
  __end_of_receiveVSCPModeMultiCanalMsg 5786   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 5784                             ??_Interrupt 0013  
               __end_of_printStatistics 2F64                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00B9                            ??_readEEPROM 0062  
              __size_of_init_app_eeprom 008A                              ?_setFilter 0060  
                       OpenUSART@config 0062                          findNodes@value 00C8  
          __end_of_vscp_restoreDefaults 5782                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 0080         __end_of_receiveVSCPModeCanalMsg 406E  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000D                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 384E                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00AA                              ?_printGUID 0001  
                           doModeVscp@c 00B7                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 006F  
                            ?_putsUSART 0061                         fifo_read@nbytes 0062  
                            sprintf@idx 0081                      __end_of_readEEPROM 5768  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 5784  
                              __ptext11 45D6                                __ptext20 558A  
                              __ptext12 3F92                                __ptext21 4E88  
                              __ptext13 539E                                __ptext30 3BB8  
                              __ptext22 026C                                __ptext14 4676  
                              __ptext31 4140                                __ptext23 285C  
                              __ptext15 43AC                                __ptext40 20BC  
                              __ptext32 513A                                __ptext24 39AC  
                              __ptext16 5622                                __ptext41 2DBC  
                              __ptext33 4210                                __ptext25 5238  
                              __ptext17 3522                                __ptext50 571A  
                              __ptext42 3AB2                                __ptext34 4520  
                              __ptext26 3CBC                                __ptext18 30EC  
                              __ptext51 53E0                                __ptext43 4986  
                              __ptext35 551A                                __ptext27 55F2  
                              __ptext19 507E                                __ptext60 56A4  
                              __ptext52 2392                                __ptext44 5316  
                              __ptext36 3268                                __ptext28 3DB8  
                              __ptext61 4A18                                __ptext53 4B30  
                              __ptext45 535A                                __ptext37 3898  
                              __ptext29 48F0                                __ptext70 4BB6  
                              __ptext62 5552                                __ptext54 4CAE  
                              __ptext46 4FBA                                __ptext38 5650  
                              __ptext71 5700                                __ptext63 4716  
                              __ptext55 42DE                                __ptext47 4C36  
                              __ptext39 2BFC                                __ptext80 5420  
                              __ptext72 56C4                                __ptext64 54DC  
                              __ptext56 160E                                __ptext48 549E  
                              __ptext73 50DE                                __ptext65 5282  
                              __ptext57 55C0                                __ptext49 4EF2  
                              __ptext82 5768                                __ptext74 5744  
                              __ptext66 4D9C                                __ptext58 501C  
                              __ptext83 47B6                                __ptext75 577A  
                              __ptext67 5192                                __ptext59 4D26  
                              __ptext84 2654                                __ptext76 4AA6  
                              __ptext68 5730                                __ptext85 365E  
                              __ptext77 567E                                __ptext69 52CC  
                              __ptext86 4E12                                __ptext78 51EA  
                              __ptext87 377C                                __ptext79 5756  
                              __ptext88 56E2                receiveSendEventCANAL@dlc 007F  
              receiveSendEventCANAL@crc 0080                          printMDF@nodeid 00BF  
                         ?_getVSCPFrame 0072                              strichr@chr 0063  
                      __size_of_sprintf 0672                              strichr@ptr 0061  
                      __size_of_strichr 003E                        __size_of_strcspn 0044  
                      __size_of_toupper 0016                        __size_of_stristr 0078  
                            strcpy@from 0062                          printGUID@value 00C3  
                   __end_of_printBinary 5282                           __size_of_crc8 0036  
                         __size_of_atoi 00F8                           __size_of_main 014C  
                         __size_of_init 004A                           __size_of_itoa 0038  
         ?_receiveVSCPModeMultiCanalMsg 0001                     __end_of_printErrors 2392  
                         __size_of_utoa 00A0                  ?_receiveSendEventCANAL 0001  
                            strnicmp@s1 0064                              strnicmp@s2 0066  
                           _inputBuffer 0200              __size_of_sendVSCPDriverAck 0092  
        receiveSendMultiEventCANAL@data 0072                  ?_receiveSendEventSLCAN 0001  
                         ??_writeEEPROM 0063                _printNodeFirmwareVersion 4140  
                   ECANSendMessage@data 006E                ECANSendMessage@tempBSEL0 0088  
                              _printMDF 48F0                               printMDF@i 00C3  
                             printMDF@p 00C1                            ?_getCANFrame 006D  
                   ECANSendMessage@mode 0085                     ECANSendMessage@temp 008B  
                     ?__ECANPointBuffer 0001            ??_receiveSendMultiEventCANAL 0072  
                              atoi@sign 006A                             ??_findNodes 00C5  
                          ?_doModeSLCAN 0001                             ??_fifo_init 0064  
                           ??_fifo_read 0064                                _vscpData 01A4  
         __size_of_readRegisterExtended 00FC                                main@argc 00CA  
                              main@argv 00CC                                _vscpSize 01B0  
                    ??__ECANPointBuffer 0004                                _vscpType 01B1  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 006F  
                       doModeVerbose@id 0280                         doModeVerbose@rv 02A0  
                              _strnicmp 4EF2                        init_app_eeprom@i 0063  
           writeRegisterExtended@nodeid 00C1                           Interrupt@data 001C  
                       _serialInputFifo 0048                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0060                     ECANReceiveMessage@i 000E  
                              memcpy@d1 0060                                memcpy@s1 0062  
             receivePrintEventVerbose@i 00A5                                itoa@base 0074  
                              isdigit@c 0062                      _ECANReceiveMessage 2654  
                              memset@p1 0060                             ??_init_crc8 0060  
                             ultoa@base 007C                          ??_getVSCPFrame 007E  
             __size_of_hexStringToBytes 009A                         sendVSCPFrame@id 00B2  
                              intlevel1 0000                               sprintf@ap 0088  
                             sprintf@sp 0076                    hexStringToBytes@size 0066  
                             strchr@chr 0062                        ?_printStatistics 0001  
              receiveSendEventSLCAN@dlc 008A                        ___lwmod@dividend 0060  
                             strchr@ptr 0060                     ?_ECANReceiveMessage 0008  
                      ___lldiv@dividend 0060                             ??_setFilter 0064  
                         printMDF@value 00C0     __size_of_receiveSendMultiEventCANAL 015A  
                         fifo_getFree@f 000B                               strcspn@s1 0066  
                             strcspn@s2 0068      receiveSendMultiEventCANAL@msgcount 007A  
               ECANSendMessage@msgFlags 0071                              _OSCCONbits 000FD3  
                             strnicmp@r 006C                               stristr@s1 006D  
                             stristr@s2 006F                      ECANSendMessage@ptr 008D  
                     ??_init_app_eeprom 0063                   __size_of__CANIDToRegs 00C0  
                           ??_printGUID 00BF                          readEEPROM@data 0062  
                           ??_printHelp 0065                             ??_printMode 0065  
              _sendVSCPDriverErrorFrame 43AC                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 0070                     __end_of_writeEEPROM 56A4  
                   __ECANPointBuffer@pt 0005                    ??_ECANReceiveMessage 000B  
                           ??_putsUSART 0063                                utoa@base 006B  
                              ultoa@buf 0076                                ultoa@val 0078  
                         fifo_init@size 0062                                sprintf@c 0091  
                              sprintf@f 0078                     hexStringToBytes@buf 0064  
                              strcat@cp 0064                     hexStringToBytes@len 006C  
                        _doModeVscpNode 5782                                strcat@to 0060  
      __end_of_receivePrintEventVerbose 2654                  ECANSendMessage@buffers 0086  
                      ___lldiv@quotient 0068                         ___lwmod@divisor 0062  
          __end_of_ECANSetOperationMode 571A                    _vscp_restoreDefaults 577A  
                          printGUID@buf 00C0                                strcpy@cp 0064  
                              strlen@cp 0062                                strcpy@to 0060  
                       ___lwmod@counter 0064                                strcspn@i 006A  
                              toupper@c 0060                             _printBinary 5238  
                              strtok@s1 006C                                strtok@s2 006E  
                              strspn@s1 0066                                strspn@s2 0068  
                            _RXM1EXIDEN 0078EB                                strtok@sp 003B  
                ECANSendMessage@tempPtr 0089                             _printErrors 20BC  
                          fifo_init@buf 0060                            fifo_read@buf 0060  
         sendVSCPDriverCommandReply@crc 0071                            __CANIDToRegs 3898  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 003D  
             readRegisterExtended@value 00BB                _sendVSCPModeCapabilities 446A  
              __size_of_ECANSendMessage 016E  
