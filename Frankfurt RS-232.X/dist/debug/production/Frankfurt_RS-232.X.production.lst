

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Mon Oct 05 22:24:42 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   109                           	psect	pa_nodes,global,class=CODE,delta=1
   110  0000                     tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           intcon	equ	0xFF2
   117                           indf0	equ	0xFEF
   118                           fsr0h	equ	0xFEA
   119                           fsr0l	equ	0xFE9
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           postinc1	equ	0xFE6
   123                           postdec1	equ	0xFE5
   124                           fsr1h	equ	0xFE2
   125                           fsr1l	equ	0xFE1
   126                           indf2	equ	0xFDF
   127                           postinc2	equ	0xFDE
   128                           postdec2	equ	0xFDD
   129                           plusw2	equ	0xFDB
   130                           fsr2h	equ	0xFDA
   131                           fsr2l	equ	0xFD9
   132                           status	equ	0xFD8
   133                           
   134                           	psect	mediumconst
   135  006FB0                     __pmediumconst:
   136                           	opt stack 0
   137  006FB0                     _octpowers:
   138                           	opt stack 0
   139  006FB0  0001               	dw	1
   140  006FB2  0000               	dw	0
   141  006FB4  0008               	dw	8
   142  006FB6  0000               	dw	0
   143  006FB8  0040               	dw	64
   144  006FBA  0000               	dw	0
   145  006FBC  0200               	dw	512
   146  006FBE  0000               	dw	0
   147  006FC0  1000               	dw	4096
   148  006FC2  0000               	dw	0
   149  006FC4  8000               	dw	32768
   150  006FC6  0000               	dw	0
   151  006FC8  0000               	dw	0
   152  006FCA  0004               	dw	4
   153  006FCC  0000               	dw	0
   154  006FCE  0020               	dw	32
   155  006FD0  0000               	dw	0
   156  006FD2  0100               	dw	256
   157  006FD4  0000               	dw	0
   158  006FD6  0800               	dw	2048
   159  006FD8  0000               	dw	0
   160  006FDA  4000               	dw	16384
   161  006FDC  0000               	dw	0
   162  006FDE  0000               	dw	0
   163  006FE0                     __end_of_octpowers:
   164                           	opt stack 0
   165  006FE0                     _dpowers:
   166                           	opt stack 0
   167  006FE0  0001               	dw	1
   168  006FE2  0000               	dw	0
   169  006FE4  000A               	dw	10
   170  006FE6  0000               	dw	0
   171  006FE8  0064               	dw	100
   172  006FEA  0000               	dw	0
   173  006FEC  03E8               	dw	1000
   174  006FEE  0000               	dw	0
   175  006FF0  2710               	dw	10000
   176  006FF2  0000               	dw	0
   177  006FF4  86A0               	dw	34464
   178  006FF6  0001               	dw	1
   179  006FF8  4240               	dw	16960
   180  006FFA  000F               	dw	15
   181  006FFC  9680               	dw	38528
   182  006FFE  0098               	dw	152
   183  007000  E100               	dw	57600
   184  007002  05F5               	dw	1525
   185  007004  CA00               	dw	51712
   186  007006  3B9A               	dw	15258
   187  007008                     __end_of_dpowers:
   188                           	opt stack 0
   189  007008                     _hexpowers:
   190                           	opt stack 0
   191  007008  0001               	dw	1
   192  00700A  0000               	dw	0
   193  00700C  0010               	dw	16
   194  00700E  0000               	dw	0
   195  007010  0100               	dw	256
   196  007012  0000               	dw	0
   197  007014  1000               	dw	4096
   198  007016  0000               	dw	0
   199  007018  0000               	dw	0
   200  00701A  0001               	dw	1
   201  00701C  0000               	dw	0
   202  00701E  0010               	dw	16
   203  007020  0000               	dw	0
   204  007022  0100               	dw	256
   205  007024  0000               	dw	0
   206  007026  1000               	dw	4096
   207  007028                     __end_of_hexpowers:
   208                           	opt stack 0
   209  0000                     _BRGCON1	set	3952
   210  0000                     _BRGCON2	set	3953
   211  0000                     _BRGCON3	set	3954
   212  0000                     _BSEL0	set	3576
   213  0000                     _CANCON	set	3951
   214  0000                     _CIOCON	set	3955
   215  0000                     _COMSTATbits	set	3956
   216  0000                     _ECANCON	set	3959
   217  0000                     _EEADR	set	4009
   218  0000                     _EECON1bits	set	4006
   219  0000                     _EECON2	set	4007
   220  0000                     _EEDATA	set	4008
   221  0000                     _INTCONbits	set	4082
   222  0000                     _MSEL0	set	3568
   223  0000                     _MSEL1	set	3569
   224  0000                     _MSEL2	set	3570
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _RCREG	set	4014
   230  0000                     _RCSTA	set	4011
   231  0000                     _RCSTAbits	set	4011
   232  0000                     _RXB1CONbits	set	3920
   233  0000                     _RXERRCNT	set	3957
   234  0000                     _RXF0EIDH	set	3842
   235  0000                     _RXF0EIDL	set	3843
   236  0000                     _RXF0SIDH	set	3840
   237  0000                     _RXF0SIDL	set	3841
   238  0000                     _RXF10EIDH	set	3446
   239  0000                     _RXF10EIDL	set	3447
   240  0000                     _RXF10SIDH	set	3444
   241  0000                     _RXF10SIDL	set	3445
   242  0000                     _RXF11EIDH	set	3450
   243  0000                     _RXF11EIDL	set	3451
   244  0000                     _RXF11SIDH	set	3448
   245  0000                     _RXF11SIDL	set	3449
   246  0000                     _RXF12EIDH	set	3458
   247  0000                     _RXF12EIDL	set	3459
   248  0000                     _RXF12SIDH	set	3456
   249  0000                     _RXF12SIDL	set	3457
   250  0000                     _RXF13EIDH	set	3462
   251  0000                     _RXF13EIDL	set	3463
   252  0000                     _RXF13SIDH	set	3460
   253  0000                     _RXF13SIDL	set	3461
   254  0000                     _RXF14EIDH	set	3466
   255  0000                     _RXF14EIDL	set	3467
   256  0000                     _RXF14SIDH	set	3464
   257  0000                     _RXF14SIDL	set	3465
   258  0000                     _RXF15EIDH	set	3474
   259  0000                     _RXF15EIDL	set	3475
   260  0000                     _RXF15SIDH	set	3472
   261  0000                     _RXF15SIDL	set	3473
   262  0000                     _RXF1EIDH	set	3846
   263  0000                     _RXF1EIDL	set	3847
   264  0000                     _RXF1SIDH	set	3844
   265  0000                     _RXF1SIDL	set	3845
   266  0000                     _RXF2EIDH	set	3850
   267  0000                     _RXF2EIDL	set	3851
   268  0000                     _RXF2SIDH	set	3848
   269  0000                     _RXF2SIDL	set	3849
   270  0000                     _RXF3EIDH	set	3854
   271  0000                     _RXF3EIDL	set	3855
   272  0000                     _RXF3SIDH	set	3852
   273  0000                     _RXF3SIDL	set	3853
   274  0000                     _RXF4EIDH	set	3858
   275  0000                     _RXF4EIDL	set	3859
   276  0000                     _RXF4SIDH	set	3856
   277  0000                     _RXF4SIDL	set	3857
   278  0000                     _RXF5EIDH	set	3862
   279  0000                     _RXF5EIDL	set	3863
   280  0000                     _RXF5SIDH	set	3860
   281  0000                     _RXF5SIDL	set	3861
   282  0000                     _RXF6EIDH	set	3426
   283  0000                     _RXF6EIDL	set	3427
   284  0000                     _RXF6SIDH	set	3424
   285  0000                     _RXF6SIDL	set	3425
   286  0000                     _RXF7EIDH	set	3430
   287  0000                     _RXF7EIDL	set	3431
   288  0000                     _RXF7SIDH	set	3428
   289  0000                     _RXF7SIDL	set	3429
   290  0000                     _RXF8EIDH	set	3434
   291  0000                     _RXF8EIDL	set	3435
   292  0000                     _RXF8SIDH	set	3432
   293  0000                     _RXF8SIDL	set	3433
   294  0000                     _RXF9EIDH	set	3442
   295  0000                     _RXF9EIDL	set	3443
   296  0000                     _RXF9SIDH	set	3440
   297  0000                     _RXF9SIDL	set	3441
   298  0000                     _RXFBCON0	set	3552
   299  0000                     _RXFBCON1	set	3553
   300  0000                     _RXFBCON2	set	3554
   301  0000                     _RXFBCON3	set	3555
   302  0000                     _RXFBCON4	set	3556
   303  0000                     _RXFBCON5	set	3557
   304  0000                     _RXFBCON6	set	3558
   305  0000                     _RXFBCON7	set	3559
   306  0000                     _RXFCON0	set	3540
   307  0000                     _RXFCON1	set	3541
   308  0000                     _RXM0EIDH	set	3866
   309  0000                     _RXM0EIDL	set	3867
   310  0000                     _RXM0SIDL	set	3865
   311  0000                     _RXM1EIDH	set	3870
   312  0000                     _RXM1EIDL	set	3871
   313  0000                     _RXM1SIDL	set	3869
   314  0000                     _SPBRG	set	4015
   315  0000                     _SPBRGH	set	4016
   316  0000                     _T0CON	set	4053
   317  0000                     _T0CONbits	set	4053
   318  0000                     _TMR0H	set	4055
   319  0000                     _TMR0L	set	4054
   320  0000                     _TRISBbits	set	3987
   321  0000                     _TRISCbits	set	3988
   322  0000                     _TXERRCNT	set	3958
   323  0000                     _TXREG	set	4013
   324  0000                     _TXSTA	set	4012
   325  0000                     _TXSTAbits	set	4012
   326  0000                     _B0RXFUL	set	28935
   327  0000                     _B0TXEN	set	28610
   328  0000                     _B1RXFUL	set	29063
   329  0000                     _B1TXEN	set	28611
   330  0000                     _B2RXFUL	set	29191
   331  0000                     _B2TXEN	set	28612
   332  0000                     _B3RXFUL	set	29319
   333  0000                     _B3TXEN	set	28613
   334  0000                     _B4RXFUL	set	29447
   335  0000                     _B4TXEN	set	28614
   336  0000                     _B5RXFUL	set	29575
   337  0000                     _B5TXEN	set	28615
   338  0000                     _ERRIE	set	32029
   339  0000                     _FIFOEMPTY	set	31655
   340  0000                     _IRXIF	set	32039
   341  0000                     _LATC1	set	31833
   342  0000                     _MDSEL0	set	31678
   343  0000                     _MDSEL1	set	31679
   344  0000                     _PEIE	set	32662
   345  0000                     _RCIE	set	31981
   346  0000                     _RCIF	set	31989
   347  0000                     _RCIP	set	31997
   348  0000                     _RXB0FILHIT0	set	31488
   349  0000                     _RXB0FUL	set	31495
   350  0000                     _RXB0IF	set	32032
   351  0000                     _RXB0OVFL	set	31655
   352  0000                     _RXB1IF	set	32033
   353  0000                     _RXB1OVFL	set	31654
   354  0000                     _RXBnIE	set	32025
   355  0000                     _RXBnIF	set	32033
   356  0000                     _RXM0EXIDM	set	30923
   357  0000                     _RXM1EXIDEN	set	30955
   358  0000                     _B0CON	set	3616
   359  0000                     _B1CON	set	3632
   360  0000                     _B2CON	set	3648
   361  0000                     _B3CON	set	3664
   362  0000                     _B4CON	set	3680
   363  0000                     _B5CON	set	3696
   364  0000                     _RXB0CON	set	3936
   365  0000                     _RXB1CON	set	3920
   366  0000                     _RXM0SIDH	set	3864
   367  0000                     _RXM1SIDH	set	3868
   368  0000                     _TXB0CON	set	3904
   369  0000                     _TXB1CON	set	3888
   370  0000                     _TXB2CON	set	3872
   371  007028                     __stringdata:
   372                           	opt stack 0
   373  007028                     STR_227:
   374  007028  20                 	db	32
   375  007029  20                 	db	32
   376  00702A  20                 	db	32
   377  00702B  20                 	db	32
   378  00702C  20                 	db	32
   379  00702D  20                 	db	32
   380  00702E  20                 	db	32
   381  00702F  20                 	db	32
   382  007030  20                 	db	32
   383  007031  46                 	db	70	;'F'
   384  007032  6F                 	db	111	;'o'
   385  007033  72                 	db	114	;'r'
   386  007034  6D                 	db	109	;'m'
   387  007035  61                 	db	97	;'a'
   388  007036  74                 	db	116	;'t'
   389  007037  3A                 	db	58	;':'
   390  007038  20                 	db	32
   391  007039  66                 	db	102	;'f'
   392  00703A  69                 	db	105	;'i'
   393  00703B  6C                 	db	108	;'l'
   394  00703C  74                 	db	116	;'t'
   395  00703D  65                 	db	101	;'e'
   396  00703E  72                 	db	114	;'r'
   397  00703F  20                 	db	32
   398  007040  66                 	db	102	;'f'
   399  007041  69                 	db	105	;'i'
   400  007042  6C                 	db	108	;'l'
   401  007043  74                 	db	116	;'t'
   402  007044  65                 	db	101	;'e'
   403  007045  72                 	db	114	;'r'
   404  007046  6E                 	db	110	;'n'
   405  007047  6F                 	db	111	;'o'
   406  007048  2C                 	db	44
   407  007049  70                 	db	112	;'p'
   408  00704A  72                 	db	114	;'r'
   409  00704B  69                 	db	105	;'i'
   410  00704C  6F                 	db	111	;'o'
   411  00704D  2C                 	db	44
   412  00704E  63                 	db	99	;'c'
   413  00704F  6C                 	db	108	;'l'
   414  007050  61                 	db	97	;'a'
   415  007051  73                 	db	115	;'s'
   416  007052  73                 	db	115	;'s'
   417  007053  2C                 	db	44
   418  007054  74                 	db	116	;'t'
   419  007055  79                 	db	121	;'y'
   420  007056  70                 	db	112	;'p'
   421  007057  65                 	db	101	;'e'
   422  007058  2C                 	db	44
   423  007059  6E                 	db	110	;'n'
   424  00705A  6F                 	db	111	;'o'
   425  00705B  64                 	db	100	;'d'
   426  00705C  65                 	db	101	;'e'
   427  00705D  69                 	db	105	;'i'
   428  00705E  64                 	db	100	;'d'
   429  00705F  20                 	db	32
   430  007060  20                 	db	32
   431  007061  28                 	db	40
   432  007062  66                 	db	102	;'f'
   433  007063  69                 	db	105	;'i'
   434  007064  6C                 	db	108	;'l'
   435  007065  74                 	db	116	;'t'
   436  007066  65                 	db	101	;'e'
   437  007067  72                 	db	114	;'r'
   438  007068  6E                 	db	110	;'n'
   439  007069  6F                 	db	111	;'o'
   440  00706A  20                 	db	32
   441  00706B  3D                 	db	61	;'='
   442  00706C  20                 	db	32
   443  00706D  30                 	db	48	;'0'
   444  00706E  2D                 	db	45
   445  00706F  31                 	db	49	;'1'
   446  007070  35                 	db	53	;'5'
   447  007071  29                 	db	41
   448  007072  2E                 	db	46
   449  007073  0D                 	db	13
   450  007074  0A                 	db	10
   451  007075  00                 	db	0
   452  007076                     STR_225:
   453  007076  49                 	db	73	;'I'
   454  007077  4E                 	db	78	;'N'
   455  007078  46                 	db	70	;'F'
   456  007079  4F                 	db	79	;'O'
   457  00707A  20                 	db	32
   458  00707B  2D                 	db	45
   459  00707C  20                 	db	32
   460  00707D  47                 	db	71	;'G'
   461  00707E  65                 	db	101	;'e'
   462  00707F  74                 	db	116	;'t'
   463  007080  20                 	db	32
   464  007081  69                 	db	105	;'i'
   465  007082  6E                 	db	110	;'n'
   466  007083  66                 	db	102	;'f'
   467  007084  6F                 	db	111	;'o'
   468  007085  20                 	db	32
   469  007086  61                 	db	97	;'a'
   470  007087  62                 	db	98	;'b'
   471  007088  6F                 	db	111	;'o'
   472  007089  75                 	db	117	;'u'
   473  00708A  74                 	db	116	;'t'
   474  00708B  20                 	db	32
   475  00708C  61                 	db	97	;'a'
   476  00708D  6E                 	db	110	;'n'
   477  00708E  20                 	db	32
   478  00708F  65                 	db	101	;'e'
   479  007090  78                 	db	120	;'x'
   480  007091  69                 	db	105	;'i'
   481  007092  73                 	db	115	;'s'
   482  007093  74                 	db	116	;'t'
   483  007094  65                 	db	101	;'e'
   484  007095  6E                 	db	110	;'n'
   485  007096  74                 	db	116	;'t'
   486  007097  20                 	db	32
   487  007098  6E                 	db	110	;'n'
   488  007099  6F                 	db	111	;'o'
   489  00709A  64                 	db	100	;'d'
   490  00709B  65                 	db	101	;'e'
   491  00709C  20                 	db	32
   492  00709D  6F                 	db	111	;'o'
   493  00709E  6E                 	db	110	;'n'
   494  00709F  20                 	db	32
   495  0070A0  74                 	db	116	;'t'
   496  0070A1  68                 	db	104	;'h'
   497  0070A2  65                 	db	101	;'e'
   498  0070A3  20                 	db	32
   499  0070A4  62                 	db	98	;'b'
   500  0070A5  75                 	db	117	;'u'
   501  0070A6  73                 	db	115	;'s'
   502  0070A7  20                 	db	32
   503  0070A8  28                 	db	40
   504  0070A9  46                 	db	70	;'F'
   505  0070AA  6F                 	db	111	;'o'
   506  0070AB  72                 	db	114	;'r'
   507  0070AC  6D                 	db	109	;'m'
   508  0070AD  61                 	db	97	;'a'
   509  0070AE  74                 	db	116	;'t'
   510  0070AF  3A                 	db	58	;':'
   511  0070B0  20                 	db	32
   512  0070B1  69                 	db	105	;'i'
   513  0070B2  6E                 	db	110	;'n'
   514  0070B3  66                 	db	102	;'f'
   515  0070B4  6F                 	db	111	;'o'
   516  0070B5  20                 	db	32
   517  0070B6  6E                 	db	110	;'n'
   518  0070B7  69                 	db	105	;'i'
   519  0070B8  63                 	db	99	;'c'
   520  0070B9  6B                 	db	107	;'k'
   521  0070BA  6E                 	db	110	;'n'
   522  0070BB  61                 	db	97	;'a'
   523  0070BC  6D                 	db	109	;'m'
   524  0070BD  65                 	db	101	;'e'
   525  0070BE  29                 	db	41
   526  0070BF  2E                 	db	46
   527  0070C0  0D                 	db	13
   528  0070C1  0A                 	db	10
   529  0070C2  00                 	db	0
   530  0070C3                     STR_229:
   531  0070C3  20                 	db	32
   532  0070C4  20                 	db	32
   533  0070C5  20                 	db	32
   534  0070C6  20                 	db	32
   535  0070C7  20                 	db	32
   536  0070C8  20                 	db	32
   537  0070C9  20                 	db	32
   538  0070CA  46                 	db	70	;'F'
   539  0070CB  6F                 	db	111	;'o'
   540  0070CC  72                 	db	114	;'r'
   541  0070CD  6D                 	db	109	;'m'
   542  0070CE  61                 	db	97	;'a'
   543  0070CF  74                 	db	116	;'t'
   544  0070D0  3A                 	db	58	;':'
   545  0070D1  20                 	db	32
   546  0070D2  6D                 	db	109	;'m'
   547  0070D3  61                 	db	97	;'a'
   548  0070D4  73                 	db	115	;'s'
   549  0070D5  6B                 	db	107	;'k'
   550  0070D6  20                 	db	32
   551  0070D7  6D                 	db	109	;'m'
   552  0070D8  61                 	db	97	;'a'
   553  0070D9  73                 	db	115	;'s'
   554  0070DA  6B                 	db	107	;'k'
   555  0070DB  6E                 	db	110	;'n'
   556  0070DC  6F                 	db	111	;'o'
   557  0070DD  2C                 	db	44
   558  0070DE  70                 	db	112	;'p'
   559  0070DF  72                 	db	114	;'r'
   560  0070E0  69                 	db	105	;'i'
   561  0070E1  6F                 	db	111	;'o'
   562  0070E2  2C                 	db	44
   563  0070E3  63                 	db	99	;'c'
   564  0070E4  6C                 	db	108	;'l'
   565  0070E5  61                 	db	97	;'a'
   566  0070E6  73                 	db	115	;'s'
   567  0070E7  73                 	db	115	;'s'
   568  0070E8  2C                 	db	44
   569  0070E9  74                 	db	116	;'t'
   570  0070EA  79                 	db	121	;'y'
   571  0070EB  70                 	db	112	;'p'
   572  0070EC  65                 	db	101	;'e'
   573  0070ED  2C                 	db	44
   574  0070EE  6E                 	db	110	;'n'
   575  0070EF  6F                 	db	111	;'o'
   576  0070F0  64                 	db	100	;'d'
   577  0070F1  65                 	db	101	;'e'
   578  0070F2  69                 	db	105	;'i'
   579  0070F3  64                 	db	100	;'d'
   580  0070F4  20                 	db	32
   581  0070F5  28                 	db	40
   582  0070F6  6D                 	db	109	;'m'
   583  0070F7  61                 	db	97	;'a'
   584  0070F8  73                 	db	115	;'s'
   585  0070F9  6B                 	db	107	;'k'
   586  0070FA  6E                 	db	110	;'n'
   587  0070FB  6F                 	db	111	;'o'
   588  0070FC  20                 	db	32
   589  0070FD  3D                 	db	61	;'='
   590  0070FE  20                 	db	32
   591  0070FF  30                 	db	48	;'0'
   592  007100  20                 	db	32
   593  007101  6F                 	db	111	;'o'
   594  007102  72                 	db	114	;'r'
   595  007103  20                 	db	32
   596  007104  31                 	db	49	;'1'
   597  007105  29                 	db	41
   598  007106  2E                 	db	46
   599  007107  0D                 	db	13
   600  007108  0A                 	db	10
   601  007109  00                 	db	0
   602  00710A                     STR_223:
   603  00710A  52                 	db	82	;'R'
   604  00710B  52                 	db	82	;'R'
   605  00710C  45                 	db	69	;'E'
   606  00710D  47                 	db	71	;'G'
   607  00710E  20                 	db	32
   608  00710F  2D                 	db	45
   609  007110  20                 	db	32
   610  007111  52                 	db	82	;'R'
   611  007112  65                 	db	101	;'e'
   612  007113  61                 	db	97	;'a'
   613  007114  64                 	db	100	;'d'
   614  007115  20                 	db	32
   615  007116  72                 	db	114	;'r'
   616  007117  65                 	db	101	;'e'
   617  007118  67                 	db	103	;'g'
   618  007119  69                 	db	105	;'i'
   619  00711A  73                 	db	115	;'s'
   620  00711B  74                 	db	116	;'t'
   621  00711C  65                 	db	101	;'e'
   622  00711D  72                 	db	114	;'r'
   623  00711E  28                 	db	40
   624  00711F  73                 	db	115	;'s'
   625  007120  29                 	db	41
   626  007121  20                 	db	32
   627  007122  6F                 	db	111	;'o'
   628  007123  66                 	db	102	;'f'
   629  007124  20                 	db	32
   630  007125  6E                 	db	110	;'n'
   631  007126  6F                 	db	111	;'o'
   632  007127  64                 	db	100	;'d'
   633  007128  65                 	db	101	;'e'
   634  007129  20                 	db	32
   635  00712A  28                 	db	40
   636  00712B  46                 	db	70	;'F'
   637  00712C  6F                 	db	111	;'o'
   638  00712D  72                 	db	114	;'r'
   639  00712E  6D                 	db	109	;'m'
   640  00712F  61                 	db	97	;'a'
   641  007130  74                 	db	116	;'t'
   642  007131  3A                 	db	58	;':'
   643  007132  20                 	db	32
   644  007133  72                 	db	114	;'r'
   645  007134  72                 	db	114	;'r'
   646  007135  65                 	db	101	;'e'
   647  007136  67                 	db	103	;'g'
   648  007137  20                 	db	32
   649  007138  5B                 	db	91	;'['
   650  007139  70                 	db	112	;'p'
   651  00713A  61                 	db	97	;'a'
   652  00713B  67                 	db	103	;'g'
   653  00713C  65                 	db	101	;'e'
   654  00713D  3A                 	db	58	;':'
   655  00713E  5D                 	db	93	;']'
   656  00713F  72                 	db	114	;'r'
   657  007140  65                 	db	101	;'e'
   658  007141  67                 	db	103	;'g'
   659  007142  20                 	db	32
   660  007143  5B                 	db	91	;'['
   661  007144  63                 	db	99	;'c'
   662  007145  6F                 	db	111	;'o'
   663  007146  75                 	db	117	;'u'
   664  007147  6E                 	db	110	;'n'
   665  007148  74                 	db	116	;'t'
   666  007149  5D                 	db	93	;']'
   667  00714A  29                 	db	41
   668  00714B  2E                 	db	46
   669  00714C  0D                 	db	13
   670  00714D  0A                 	db	10
   671  00714E  00                 	db	0
   672  00714F                     STR_238:
   673  00714F  2D                 	db	45
   674  007150  2D                 	db	45
   675  007151  2D                 	db	45
   676  007152  2D                 	db	45
   677  007153  2D                 	db	45
   678  007154  2D                 	db	45
   679  007155  2D                 	db	45
   680  007156  2D                 	db	45
   681  007157  2D                 	db	45
   682  007158  2D                 	db	45
   683  007159  2D                 	db	45
   684  00715A  2D                 	db	45
   685  00715B  2D                 	db	45
   686  00715C  2D                 	db	45
   687  00715D  2D                 	db	45
   688  00715E  2D                 	db	45
   689  00715F  2D                 	db	45
   690  007160  2D                 	db	45
   691  007161  2D                 	db	45
   692  007162  2D                 	db	45
   693  007163  2D                 	db	45
   694  007164  2D                 	db	45
   695  007165  2D                 	db	45
   696  007166  2D                 	db	45
   697  007167  2D                 	db	45
   698  007168  2D                 	db	45
   699  007169  2D                 	db	45
   700  00716A  2D                 	db	45
   701  00716B  2D                 	db	45
   702  00716C  2D                 	db	45
   703  00716D  2D                 	db	45
   704  00716E  2D                 	db	45
   705  00716F  2D                 	db	45
   706  007170  2D                 	db	45
   707  007171  2D                 	db	45
   708  007172  2D                 	db	45
   709  007173  2D                 	db	45
   710  007174  2D                 	db	45
   711  007175  2D                 	db	45
   712  007176  2D                 	db	45
   713  007177  2D                 	db	45
   714  007178  2D                 	db	45
   715  007179  2D                 	db	45
   716  00717A  2D                 	db	45
   717  00717B  2D                 	db	45
   718  00717C  2D                 	db	45
   719  00717D  2D                 	db	45
   720  00717E  2D                 	db	45
   721  00717F  2D                 	db	45
   722  007180  2D                 	db	45
   723  007181  2D                 	db	45
   724  007182  2D                 	db	45
   725  007183  2D                 	db	45
   726  007184  2D                 	db	45
   727  007185  2D                 	db	45
   728  007186  2D                 	db	45
   729  007187  2D                 	db	45
   730  007188  2D                 	db	45
   731  007189  2D                 	db	45
   732  00718A  2D                 	db	45
   733  00718B  2D                 	db	45
   734  00718C  2D                 	db	45
   735  00718D  2D                 	db	45
   736  00718E  2D                 	db	45
   737  00718F  0D                 	db	13
   738  007190  0A                 	db	10
   739  007191  00                 	db	0
   740  007192                     STR_233:
   741  007192  20                 	db	32
   742  007193  20                 	db	32
   743  007194  20                 	db	32
   744  007195  20                 	db	32
   745  007196  52                 	db	82	;'R'
   746  007197  57                 	db	87	;'W'
   747  007198  54                 	db	84	;'T'
   748  007199  49                 	db	73	;'I'
   749  00719A  4D                 	db	77	;'M'
   750  00719B  45                 	db	69	;'E'
   751  00719C  4F                 	db	79	;'O'
   752  00719D  55                 	db	85	;'U'
   753  00719E  54                 	db	84	;'T'
   754  00719F  20                 	db	32
   755  0071A0  2D                 	db	45
   756  0071A1  20                 	db	32
   757  0071A2  53                 	db	83	;'S'
   758  0071A3  65                 	db	101	;'e'
   759  0071A4  74                 	db	116	;'t'
   760  0071A5  20                 	db	32
   761  0071A6  72                 	db	114	;'r'
   762  0071A7  65                 	db	101	;'e'
   763  0071A8  67                 	db	103	;'g'
   764  0071A9  69                 	db	105	;'i'
   765  0071AA  73                 	db	115	;'s'
   766  0071AB  74                 	db	116	;'t'
   767  0071AC  65                 	db	101	;'e'
   768  0071AD  72                 	db	114	;'r'
   769  0071AE  20                 	db	32
   770  0071AF  72                 	db	114	;'r'
   771  0071B0  65                 	db	101	;'e'
   772  0071B1  61                 	db	97	;'a'
   773  0071B2  64                 	db	100	;'d'
   774  0071B3  2F                 	db	47
   775  0071B4  77                 	db	119	;'w'
   776  0071B5  72                 	db	114	;'r'
   777  0071B6  69                 	db	105	;'i'
   778  0071B7  74                 	db	116	;'t'
   779  0071B8  65                 	db	101	;'e'
   780  0071B9  20                 	db	32
   781  0071BA  74                 	db	116	;'t'
   782  0071BB  69                 	db	105	;'i'
   783  0071BC  6D                 	db	109	;'m'
   784  0071BD  65                 	db	101	;'e'
   785  0071BE  6F                 	db	111	;'o'
   786  0071BF  75                 	db	117	;'u'
   787  0071C0  74                 	db	116	;'t'
   788  0071C1  2E                 	db	46
   789  0071C2  20                 	db	32
   790  0071C3  44                 	db	68	;'D'
   791  0071C4  65                 	db	101	;'e'
   792  0071C5  66                 	db	102	;'f'
   793  0071C6  61                 	db	97	;'a'
   794  0071C7  75                 	db	117	;'u'
   795  0071C8  6C                 	db	108	;'l'
   796  0071C9  74                 	db	116	;'t'
   797  0071CA  3D                 	db	61	;'='
   798  0071CB  31                 	db	49	;'1'
   799  0071CC  30                 	db	48	;'0'
   800  0071CD  20                 	db	32
   801  0071CE  6D                 	db	109	;'m'
   802  0071CF  73                 	db	115	;'s'
   803  0071D0  20                 	db	32
   804  0071D1  2E                 	db	46
   805  0071D2  0D                 	db	13
   806  0071D3  0A                 	db	10
   807  0071D4  00                 	db	0
   808  0071D5                     STR_224:
   809  0071D5  57                 	db	87	;'W'
   810  0071D6  52                 	db	82	;'R'
   811  0071D7  45                 	db	69	;'E'
   812  0071D8  47                 	db	71	;'G'
   813  0071D9  20                 	db	32
   814  0071DA  2D                 	db	45
   815  0071DB  20                 	db	32
   816  0071DC  57                 	db	87	;'W'
   817  0071DD  72                 	db	114	;'r'
   818  0071DE  69                 	db	105	;'i'
   819  0071DF  74                 	db	116	;'t'
   820  0071E0  65                 	db	101	;'e'
   821  0071E1  20                 	db	32
   822  0071E2  72                 	db	114	;'r'
   823  0071E3  65                 	db	101	;'e'
   824  0071E4  67                 	db	103	;'g'
   825  0071E5  69                 	db	105	;'i'
   826  0071E6  73                 	db	115	;'s'
   827  0071E7  74                 	db	116	;'t'
   828  0071E8  65                 	db	101	;'e'
   829  0071E9  72                 	db	114	;'r'
   830  0071EA  20                 	db	32
   831  0071EB  6F                 	db	111	;'o'
   832  0071EC  66                 	db	102	;'f'
   833  0071ED  20                 	db	32
   834  0071EE  6E                 	db	110	;'n'
   835  0071EF  6F                 	db	111	;'o'
   836  0071F0  64                 	db	100	;'d'
   837  0071F1  65                 	db	101	;'e'
   838  0071F2  20                 	db	32
   839  0071F3  28                 	db	40
   840  0071F4  46                 	db	70	;'F'
   841  0071F5  6F                 	db	111	;'o'
   842  0071F6  72                 	db	114	;'r'
   843  0071F7  6D                 	db	109	;'m'
   844  0071F8  61                 	db	97	;'a'
   845  0071F9  74                 	db	116	;'t'
   846  0071FA  3A                 	db	58	;':'
   847  0071FB  20                 	db	32
   848  0071FC  77                 	db	119	;'w'
   849  0071FD  72                 	db	114	;'r'
   850  0071FE  65                 	db	101	;'e'
   851  0071FF  67                 	db	103	;'g'
   852  007200  20                 	db	32
   853  007201  5B                 	db	91	;'['
   854  007202  70                 	db	112	;'p'
   855  007203  61                 	db	97	;'a'
   856  007204  67                 	db	103	;'g'
   857  007205  65                 	db	101	;'e'
   858  007206  3A                 	db	58	;':'
   859  007207  5D                 	db	93	;']'
   860  007208  72                 	db	114	;'r'
   861  007209  65                 	db	101	;'e'
   862  00720A  67                 	db	103	;'g'
   863  00720B  20                 	db	32
   864  00720C  63                 	db	99	;'c'
   865  00720D  6F                 	db	111	;'o'
   866  00720E  6E                 	db	110	;'n'
   867  00720F  74                 	db	116	;'t'
   868  007210  65                 	db	101	;'e'
   869  007211  6E                 	db	110	;'n'
   870  007212  74                 	db	116	;'t'
   871  007213  29                 	db	41
   872  007214  2E                 	db	46
   873  007215  0D                 	db	13
   874  007216  0A                 	db	10
   875  007217  00                 	db	0
   876  007218                     STR_89:
   877  007218  2D                 	db	45
   878  007219  45                 	db	69	;'E'
   879  00721A  52                 	db	82	;'R'
   880  00721B  52                 	db	82	;'R'
   881  00721C  4F                 	db	79	;'O'
   882  00721D  52                 	db	82	;'R'
   883  00721E  20                 	db	32
   884  00721F  2D                 	db	45
   885  007220  20                 	db	32
   886  007221  46                 	db	70	;'F'
   887  007222  69                 	db	105	;'i'
   888  007223  6C                 	db	108	;'l'
   889  007224  74                 	db	116	;'t'
   890  007225  65                 	db	101	;'e'
   891  007226  72                 	db	114	;'r'
   892  007227  20                 	db	32
   893  007228  6E                 	db	110	;'n'
   894  007229  75                 	db	117	;'u'
   895  00722A  6D                 	db	109	;'m'
   896  00722B  62                 	db	98	;'b'
   897  00722C  65                 	db	101	;'e'
   898  00722D  72                 	db	114	;'r'
   899  00722E  20                 	db	32
   900  00722F  63                 	db	99	;'c'
   901  007230  61                 	db	97	;'a'
   902  007231  6E                 	db	110	;'n'
   903  007232  20                 	db	32
   904  007233  6F                 	db	111	;'o'
   905  007234  6E                 	db	110	;'n'
   906  007235  6C                 	db	108	;'l'
   907  007236  79                 	db	121	;'y'
   908  007237  20                 	db	32
   909  007238  62                 	db	98	;'b'
   910  007239  65                 	db	101	;'e'
   911  00723A  20                 	db	32
   912  00723B  73                 	db	115	;'s'
   913  00723C  65                 	db	101	;'e'
   914  00723D  74                 	db	116	;'t'
   915  00723E  20                 	db	32
   916  00723F  74                 	db	116	;'t'
   917  007240  6F                 	db	111	;'o'
   918  007241  20                 	db	32
   919  007242  61                 	db	97	;'a'
   920  007243  20                 	db	32
   921  007244  76                 	db	118	;'v'
   922  007245  61                 	db	97	;'a'
   923  007246  6C                 	db	108	;'l'
   924  007247  75                 	db	117	;'u'
   925  007248  65                 	db	101	;'e'
   926  007249  20                 	db	32
   927  00724A  62                 	db	98	;'b'
   928  00724B  65                 	db	101	;'e'
   929  00724C  74                 	db	116	;'t'
   930  00724D  77                 	db	119	;'w'
   931  00724E  65                 	db	101	;'e'
   932  00724F  65                 	db	101	;'e'
   933  007250  6E                 	db	110	;'n'
   934  007251  20                 	db	32
   935  007252  30                 	db	48	;'0'
   936  007253  2D                 	db	45
   937  007254  31                 	db	49	;'1'
   938  007255  35                 	db	53	;'5'
   939  007256  2E                 	db	46
   940  007257  0D                 	db	13
   941  007258  0A                 	db	10
   942  007259  00                 	db	0
   943  00725A                     STR_236:
   944  00725A  20                 	db	32
   945  00725B  20                 	db	32
   946  00725C  20                 	db	32
   947  00725D  20                 	db	32
   948  00725E  4D                 	db	77	;'M'
   949  00725F  4F                 	db	79	;'O'
   950  007260  44                 	db	68	;'D'
   951  007261  45                 	db	69	;'E'
   952  007262  20                 	db	32
   953  007263  2D                 	db	45
   954  007264  20                 	db	32
   955  007265  53                 	db	83	;'S'
   956  007266  65                 	db	101	;'e'
   957  007267  74                 	db	116	;'t'
   958  007268  20                 	db	32
   959  007269  61                 	db	97	;'a'
   960  00726A  64                 	db	100	;'d'
   961  00726B  61                 	db	97	;'a'
   962  00726C  70                 	db	112	;'p'
   963  00726D  74                 	db	116	;'t'
   964  00726E  65                 	db	101	;'e'
   965  00726F  72                 	db	114	;'r'
   966  007270  20                 	db	32
   967  007271  6D                 	db	109	;'m'
   968  007272  6F                 	db	111	;'o'
   969  007273  64                 	db	100	;'d'
   970  007274  65                 	db	101	;'e'
   971  007275  20                 	db	32
   972  007276  74                 	db	116	;'t'
   973  007277  68                 	db	104	;'h'
   974  007278  61                 	db	97	;'a'
   975  007279  74                 	db	116	;'t'
   976  00727A  20                 	db	32
   977  00727B  73                 	db	115	;'s'
   978  00727C  68                 	db	104	;'h'
   979  00727D  6F                 	db	111	;'o'
   980  00727E  75                 	db	117	;'u'
   981  00727F  6C                 	db	108	;'l'
   982  007280  64                 	db	100	;'d'
   983  007281  20                 	db	32
   984  007282  62                 	db	98	;'b'
   985  007283  65                 	db	101	;'e'
   986  007284  20                 	db	32
   987  007285  75                 	db	117	;'u'
   988  007286  73                 	db	115	;'s'
   989  007287  65                 	db	101	;'e'
   990  007288  64                 	db	100	;'d'
   991  007289  20                 	db	32
   992  00728A  6F                 	db	111	;'o'
   993  00728B  6E                 	db	110	;'n'
   994  00728C  20                 	db	32
   995  00728D  73                 	db	115	;'s'
   996  00728E  74                 	db	116	;'t'
   997  00728F  61                 	db	97	;'a'
   998  007290  72                 	db	114	;'r'
   999  007291  74                 	db	116	;'t'
  1000  007292  75                 	db	117	;'u'
  1001  007293  70                 	db	112	;'p'
  1002  007294  2E                 	db	46
  1003  007295  0D                 	db	13
  1004  007296  0A                 	db	10
  1005  007297  00                 	db	0
  1006  007298                     STR_196:
  1007  007298  54                 	db	84	;'T'
  1008  007299  72                 	db	114	;'r'
  1009  00729A  61                 	db	97	;'a'
  1010  00729B  6E                 	db	110	;'n'
  1011  00729C  73                 	db	115	;'s'
  1012  00729D  6D                 	db	109	;'m'
  1013  00729E  69                 	db	105	;'i'
  1014  00729F  74                 	db	116	;'t'
  1015  0072A0  74                 	db	116	;'t'
  1016  0072A1  65                 	db	101	;'e'
  1017  0072A2  72                 	db	114	;'r'
  1018  0072A3  20                 	db	32
  1019  0072A4  69                 	db	105	;'i'
  1020  0072A5  6E                 	db	110	;'n'
  1021  0072A6  20                 	db	32
  1022  0072A7  45                 	db	69	;'E'
  1023  0072A8  72                 	db	114	;'r'
  1024  0072A9  72                 	db	114	;'r'
  1025  0072AA  6F                 	db	111	;'o'
  1026  0072AB  72                 	db	114	;'r'
  1027  0072AC  20                 	db	32
  1028  0072AD  53                 	db	83	;'S'
  1029  0072AE  74                 	db	116	;'t'
  1030  0072AF  61                 	db	97	;'a'
  1031  0072B0  74                 	db	116	;'t'
  1032  0072B1  65                 	db	101	;'e'
  1033  0072B2  20                 	db	32
  1034  0072B3  57                 	db	87	;'W'
  1035  0072B4  61                 	db	97	;'a'
  1036  0072B5  72                 	db	114	;'r'
  1037  0072B6  6E                 	db	110	;'n'
  1038  0072B7  69                 	db	105	;'i'
  1039  0072B8  6E                 	db	110	;'n'
  1040  0072B9  67                 	db	103	;'g'
  1041  0072BA  20                 	db	32
  1042  0072BB  28                 	db	40
  1043  0072BC  31                 	db	49	;'1'
  1044  0072BD  32                 	db	50	;'2'
  1045  0072BE  38                 	db	56	;'8'
  1046  0072BF  20                 	db	32
  1047  0072C0  3E                 	db	62	;'>'
  1048  0072C1  20                 	db	32
  1049  0072C2  54                 	db	84	;'T'
  1050  0072C3  45                 	db	69	;'E'
  1051  0072C4  52                 	db	82	;'R'
  1052  0072C5  52                 	db	82	;'R'
  1053  0072C6  43                 	db	67	;'C'
  1054  0072C7  4E                 	db	78	;'N'
  1055  0072C8  54                 	db	84	;'T'
  1056  0072C9  20                 	db	32
  1057  0072CA  3F                 	db	63	;'?'
  1058  0072CB  20                 	db	32
  1059  0072CC  39                 	db	57	;'9'
  1060  0072CD  36                 	db	54	;'6'
  1061  0072CE  29                 	db	41
  1062  0072CF  0D                 	db	13
  1063  0072D0  0A                 	db	10
  1064  0072D1  00                 	db	0
  1065  0072D2                     STR_2:
  1066  0072D2  43                 	db	67	;'C'
  1067  0072D3  6F                 	db	111	;'o'
  1068  0072D4  70                 	db	112	;'p'
  1069  0072D5  79                 	db	121	;'y'
  1070  0072D6  72                 	db	114	;'r'
  1071  0072D7  69                 	db	105	;'i'
  1072  0072D8  67                 	db	103	;'g'
  1073  0072D9  68                 	db	104	;'h'
  1074  0072DA  74                 	db	116	;'t'
  1075  0072DB  20                 	db	32
  1076  0072DC  28                 	db	40
  1077  0072DD  43                 	db	67	;'C'
  1078  0072DE  29                 	db	41
  1079  0072DF  20                 	db	32
  1080  0072E0  32                 	db	50	;'2'
  1081  0072E1  30                 	db	48	;'0'
  1082  0072E2  31                 	db	49	;'1'
  1083  0072E3  34                 	db	52	;'4'
  1084  0072E4  2D                 	db	45
  1085  0072E5  32                 	db	50	;'2'
  1086  0072E6  30                 	db	48	;'0'
  1087  0072E7  31                 	db	49	;'1'
  1088  0072E8  35                 	db	53	;'5'
  1089  0072E9  20                 	db	32
  1090  0072EA  50                 	db	80	;'P'
  1091  0072EB  61                 	db	97	;'a'
  1092  0072EC  72                 	db	114	;'r'
  1093  0072ED  61                 	db	97	;'a'
  1094  0072EE  64                 	db	100	;'d'
  1095  0072EF  69                 	db	105	;'i'
  1096  0072F0  73                 	db	115	;'s'
  1097  0072F1  65                 	db	101	;'e'
  1098  0072F2  20                 	db	32
  1099  0072F3  6F                 	db	111	;'o'
  1100  0072F4  66                 	db	102	;'f'
  1101  0072F5  20                 	db	32
  1102  0072F6  74                 	db	116	;'t'
  1103  0072F7  68                 	db	104	;'h'
  1104  0072F8  65                 	db	101	;'e'
  1105  0072F9  20                 	db	32
  1106  0072FA  46                 	db	70	;'F'
  1107  0072FB  72                 	db	114	;'r'
  1108  0072FC  6F                 	db	111	;'o'
  1109  0072FD  67                 	db	103	;'g'
  1110  0072FE  20                 	db	32
  1111  0072FF  41                 	db	65	;'A'
  1112  007300  42                 	db	66	;'B'
  1113  007301  2C                 	db	44
  1114  007302  20                 	db	32
  1115  007303  53                 	db	83	;'S'
  1116  007304  77                 	db	119	;'w'
  1117  007305  65                 	db	101	;'e'
  1118  007306  64                 	db	100	;'d'
  1119  007307  65                 	db	101	;'e'
  1120  007308  6E                 	db	110	;'n'
  1121  007309  0D                 	db	13
  1122  00730A  0A                 	db	10
  1123  00730B  00                 	db	0
  1124  00730C                     STR_198:
  1125  00730C  54                 	db	84	;'T'
  1126  00730D  72                 	db	114	;'r'
  1127  00730E  61                 	db	97	;'a'
  1128  00730F  6E                 	db	110	;'n'
  1129  007310  73                 	db	115	;'s'
  1130  007311  6D                 	db	109	;'m'
  1131  007312  69                 	db	105	;'i'
  1132  007313  74                 	db	116	;'t'
  1133  007314  74                 	db	116	;'t'
  1134  007315  65                 	db	101	;'e'
  1135  007316  72                 	db	114	;'r'
  1136  007317  20                 	db	32
  1137  007318  69                 	db	105	;'i'
  1138  007319  6E                 	db	110	;'n'
  1139  00731A  20                 	db	32
  1140  00731B  45                 	db	69	;'E'
  1141  00731C  72                 	db	114	;'r'
  1142  00731D  72                 	db	114	;'r'
  1143  00731E  6F                 	db	111	;'o'
  1144  00731F  72                 	db	114	;'r'
  1145  007320  20                 	db	32
  1146  007321  53                 	db	83	;'S'
  1147  007322  74                 	db	116	;'t'
  1148  007323  61                 	db	97	;'a'
  1149  007324  74                 	db	116	;'t'
  1150  007325  65                 	db	101	;'e'
  1151  007326  20                 	db	32
  1152  007327  42                 	db	66	;'B'
  1153  007328  75                 	db	117	;'u'
  1154  007329  73                 	db	115	;'s'
  1155  00732A  20                 	db	32
  1156  00732B  50                 	db	80	;'P'
  1157  00732C  61                 	db	97	;'a'
  1158  00732D  73                 	db	115	;'s'
  1159  00732E  73                 	db	115	;'s'
  1160  00732F  69                 	db	105	;'i'
  1161  007330  76                 	db	118	;'v'
  1162  007331  65                 	db	101	;'e'
  1163  007332  20                 	db	32
  1164  007333  28                 	db	40
  1165  007334  54                 	db	84	;'T'
  1166  007335  45                 	db	69	;'E'
  1167  007336  52                 	db	82	;'R'
  1168  007337  52                 	db	82	;'R'
  1169  007338  43                 	db	67	;'C'
  1170  007339  4E                 	db	78	;'N'
  1171  00733A  54                 	db	84	;'T'
  1172  00733B  20                 	db	32
  1173  00733C  3F                 	db	63	;'?'
  1174  00733D  20                 	db	32
  1175  00733E  31                 	db	49	;'1'
  1176  00733F  32                 	db	50	;'2'
  1177  007340  38                 	db	56	;'8'
  1178  007341  29                 	db	41
  1179  007342  0D                 	db	13
  1180  007343  0A                 	db	10
  1181  007344  00                 	db	0
  1182  007345                     STR_217:
  1183  007345  20                 	db	32
  1184  007346  20                 	db	32
  1185  007347  20                 	db	32
  1186  007348  20                 	db	32
  1187  007349  20                 	db	32
  1188  00734A  46                 	db	70	;'F'
  1189  00734B  6F                 	db	111	;'o'
  1190  00734C  72                 	db	114	;'r'
  1191  00734D  6D                 	db	109	;'m'
  1192  00734E  61                 	db	97	;'a'
  1193  00734F  74                 	db	116	;'t'
  1194  007350  3A                 	db	58	;':'
  1195  007351  20                 	db	32
  1196  007352  70                 	db	112	;'p'
  1197  007353  72                 	db	114	;'r'
  1198  007354  69                 	db	105	;'i'
  1199  007355  6F                 	db	111	;'o'
  1200  007356  72                 	db	114	;'r'
  1201  007357  69                 	db	105	;'i'
  1202  007358  74                 	db	116	;'t'
  1203  007359  79                 	db	121	;'y'
  1204  00735A  2C                 	db	44
  1205  00735B  63                 	db	99	;'c'
  1206  00735C  6C                 	db	108	;'l'
  1207  00735D  61                 	db	97	;'a'
  1208  00735E  73                 	db	115	;'s'
  1209  00735F  73                 	db	115	;'s'
  1210  007360  2C                 	db	44
  1211  007361  74                 	db	116	;'t'
  1212  007362  79                 	db	121	;'y'
  1213  007363  70                 	db	112	;'p'
  1214  007364  65                 	db	101	;'e'
  1215  007365  2C                 	db	44
  1216  007366  6E                 	db	110	;'n'
  1217  007367  6F                 	db	111	;'o'
  1218  007368  64                 	db	100	;'d'
  1219  007369  65                 	db	101	;'e'
  1220  00736A  69                 	db	105	;'i'
  1221  00736B  64                 	db	100	;'d'
  1222  00736C  2C                 	db	44
  1223  00736D  63                 	db	99	;'c'
  1224  00736E  6F                 	db	111	;'o'
  1225  00736F  75                 	db	117	;'u'
  1226  007370  6E                 	db	110	;'n'
  1227  007371  74                 	db	116	;'t'
  1228  007372  2C                 	db	44
  1229  007373  64                 	db	100	;'d'
  1230  007374  61                 	db	97	;'a'
  1231  007375  74                 	db	116	;'t'
  1232  007376  61                 	db	97	;'a'
  1233  007377  2C                 	db	44
  1234  007378  2C                 	db	44
  1235  007379  2C                 	db	44
  1236  00737A  0D                 	db	13
  1237  00737B  0A                 	db	10
  1238  00737C  00                 	db	0
  1239  00737D                     STR_203:
  1240  00737D  52                 	db	82	;'R'
  1241  00737E  65                 	db	101	;'e'
  1242  00737F  63                 	db	99	;'c'
  1243  007380  65                 	db	101	;'e'
  1244  007381  69                 	db	105	;'i'
  1245  007382  76                 	db	118	;'v'
  1246  007383  65                 	db	101	;'e'
  1247  007384  72                 	db	114	;'r'
  1248  007385  20                 	db	32
  1249  007386  69                 	db	105	;'i'
  1250  007387  6E                 	db	110	;'n'
  1251  007388  20                 	db	32
  1252  007389  45                 	db	69	;'E'
  1253  00738A  72                 	db	114	;'r'
  1254  00738B  72                 	db	114	;'r'
  1255  00738C  6F                 	db	111	;'o'
  1256  00738D  72                 	db	114	;'r'
  1257  00738E  20                 	db	32
  1258  00738F  53                 	db	83	;'S'
  1259  007390  74                 	db	116	;'t'
  1260  007391  61                 	db	97	;'a'
  1261  007392  74                 	db	116	;'t'
  1262  007393  65                 	db	101	;'e'
  1263  007394  20                 	db	32
  1264  007395  57                 	db	87	;'W'
  1265  007396  61                 	db	97	;'a'
  1266  007397  72                 	db	114	;'r'
  1267  007398  6E                 	db	110	;'n'
  1268  007399  69                 	db	105	;'i'
  1269  00739A  6E                 	db	110	;'n'
  1270  00739B  67                 	db	103	;'g'
  1271  00739C  20                 	db	32
  1272  00739D  28                 	db	40
  1273  00739E  31                 	db	49	;'1'
  1274  00739F  32                 	db	50	;'2'
  1275  0073A0  38                 	db	56	;'8'
  1276  0073A1  20                 	db	32
  1277  0073A2  3E                 	db	62	;'>'
  1278  0073A3  20                 	db	32
  1279  0073A4  52                 	db	82	;'R'
  1280  0073A5  45                 	db	69	;'E'
  1281  0073A6  52                 	db	82	;'R'
  1282  0073A7  52                 	db	82	;'R'
  1283  0073A8  43                 	db	67	;'C'
  1284  0073A9  4E                 	db	78	;'N'
  1285  0073AA  54                 	db	84	;'T'
  1286  0073AB  20                 	db	32
  1287  0073AC  3F                 	db	63	;'?'
  1288  0073AD  20                 	db	32
  1289  0073AE  39                 	db	57	;'9'
  1290  0073AF  36                 	db	54	;'6'
  1291  0073B0  29                 	db	41
  1292  0073B1  0D                 	db	13
  1293  0073B2  0A                 	db	10
  1294  0073B3  00                 	db	0
  1295  0073B4                     STR_235:
  1296  0073B4  20                 	db	32
  1297  0073B5  20                 	db	32
  1298  0073B6  20                 	db	32
  1299  0073B7  20                 	db	32
  1300  0073B8  53                 	db	83	;'S'
  1301  0073B9  54                 	db	84	;'T'
  1302  0073BA  41                 	db	65	;'A'
  1303  0073BB  52                 	db	82	;'R'
  1304  0073BC  54                 	db	84	;'T'
  1305  0073BD  49                 	db	73	;'I'
  1306  0073BE  46                 	db	70	;'F'
  1307  0073BF  20                 	db	32
  1308  0073C0  2D                 	db	45
  1309  0073C1  20                 	db	32
  1310  0073C2  53                 	db	83	;'S'
  1311  0073C3  65                 	db	101	;'e'
  1312  0073C4  74                 	db	116	;'t'
  1313  0073C5  20                 	db	32
  1314  0073C6  69                 	db	105	;'i'
  1315  0073C7  6E                 	db	110	;'n'
  1316  0073C8  74                 	db	116	;'t'
  1317  0073C9  65                 	db	101	;'e'
  1318  0073CA  72                 	db	114	;'r'
  1319  0073CB  66                 	db	102	;'f'
  1320  0073CC  61                 	db	97	;'a'
  1321  0073CD  63                 	db	99	;'c'
  1322  0073CE  65                 	db	101	;'e'
  1323  0073CF  20                 	db	32
  1324  0073D0  73                 	db	115	;'s'
  1325  0073D1  74                 	db	116	;'t'
  1326  0073D2  61                 	db	97	;'a'
  1327  0073D3  74                 	db	116	;'t'
  1328  0073D4  65                 	db	101	;'e'
  1329  0073D5  20                 	db	32
  1330  0073D6  74                 	db	116	;'t'
  1331  0073D7  6F                 	db	111	;'o'
  1332  0073D8  20                 	db	32
  1333  0073D9  75                 	db	117	;'u'
  1334  0073DA  73                 	db	115	;'s'
  1335  0073DB  65                 	db	101	;'e'
  1336  0073DC  20                 	db	32
  1337  0073DD  6F                 	db	111	;'o'
  1338  0073DE  6E                 	db	110	;'n'
  1339  0073DF  20                 	db	32
  1340  0073E0  73                 	db	115	;'s'
  1341  0073E1  74                 	db	116	;'t'
  1342  0073E2  61                 	db	97	;'a'
  1343  0073E3  72                 	db	114	;'r'
  1344  0073E4  74                 	db	116	;'t'
  1345  0073E5  75                 	db	117	;'u'
  1346  0073E6  70                 	db	112	;'p'
  1347  0073E7  2E                 	db	46
  1348  0073E8  0D                 	db	13
  1349  0073E9  0A                 	db	10
  1350  0073EA  00                 	db	0
  1351  0073EB                     STR_4:
  1352  0073EB  50                 	db	80	;'P'
  1353  0073EC  72                 	db	114	;'r'
  1354  0073ED  65                 	db	101	;'e'
  1355  0073EE  73                 	db	115	;'s'
  1356  0073EF  73                 	db	115	;'s'
  1357  0073F0  20                 	db	32
  1358  0073F1  27                 	db	39
  1359  0073F2  76                 	db	118	;'v'
  1360  0073F3  27                 	db	39
  1361  0073F4  20                 	db	32
  1362  0073F5  77                 	db	119	;'w'
  1363  0073F6  69                 	db	105	;'i'
  1364  0073F7  74                 	db	116	;'t'
  1365  0073F8  68                 	db	104	;'h'
  1366  0073F9  69                 	db	105	;'i'
  1367  0073FA  6E                 	db	110	;'n'
  1368  0073FB  20                 	db	32
  1369  0073FC  74                 	db	116	;'t'
  1370  0073FD  68                 	db	104	;'h'
  1371  0073FE  72                 	db	114	;'r'
  1372  0073FF  65                 	db	101	;'e'
  1373  007400  65                 	db	101	;'e'
  1374  007401  20                 	db	32
  1375  007402  73                 	db	115	;'s'
  1376  007403  65                 	db	101	;'e'
  1377  007404  63                 	db	99	;'c'
  1378  007405  6F                 	db	111	;'o'
  1379  007406  6E                 	db	110	;'n'
  1380  007407  64                 	db	100	;'d'
  1381  007408  73                 	db	115	;'s'
  1382  007409  20                 	db	32
  1383  00740A  74                 	db	116	;'t'
  1384  00740B  6F                 	db	111	;'o'
  1385  00740C  20                 	db	32
  1386  00740D  65                 	db	101	;'e'
  1387  00740E  6E                 	db	110	;'n'
  1388  00740F  74                 	db	116	;'t'
  1389  007410  65                 	db	101	;'e'
  1390  007411  72                 	db	114	;'r'
  1391  007412  20                 	db	32
  1392  007413  76                 	db	118	;'v'
  1393  007414  65                 	db	101	;'e'
  1394  007415  72                 	db	114	;'r'
  1395  007416  62                 	db	98	;'b'
  1396  007417  6F                 	db	111	;'o'
  1397  007418  73                 	db	115	;'s'
  1398  007419  65                 	db	101	;'e'
  1399  00741A  20                 	db	32
  1400  00741B  6D                 	db	109	;'m'
  1401  00741C  6F                 	db	111	;'o'
  1402  00741D  64                 	db	100	;'d'
  1403  00741E  65                 	db	101	;'e'
  1404  00741F  0D                 	db	13
  1405  007420  0A                 	db	10
  1406  007421  00                 	db	0
  1407  007422                     STR_204:
  1408  007422  52                 	db	82	;'R'
  1409  007423  65                 	db	101	;'e'
  1410  007424  63                 	db	99	;'c'
  1411  007425  65                 	db	101	;'e'
  1412  007426  69                 	db	105	;'i'
  1413  007427  76                 	db	118	;'v'
  1414  007428  65                 	db	101	;'e'
  1415  007429  72                 	db	114	;'r'
  1416  00742A  20                 	db	32
  1417  00742B  69                 	db	105	;'i'
  1418  00742C  6E                 	db	110	;'n'
  1419  00742D  20                 	db	32
  1420  00742E  45                 	db	69	;'E'
  1421  00742F  72                 	db	114	;'r'
  1422  007430  72                 	db	114	;'r'
  1423  007431  6F                 	db	111	;'o'
  1424  007432  72                 	db	114	;'r'
  1425  007433  20                 	db	32
  1426  007434  53                 	db	83	;'S'
  1427  007435  74                 	db	116	;'t'
  1428  007436  61                 	db	97	;'a'
  1429  007437  74                 	db	116	;'t'
  1430  007438  65                 	db	101	;'e'
  1431  007439  20                 	db	32
  1432  00743A  42                 	db	66	;'B'
  1433  00743B  75                 	db	117	;'u'
  1434  00743C  73                 	db	115	;'s'
  1435  00743D  20                 	db	32
  1436  00743E  50                 	db	80	;'P'
  1437  00743F  61                 	db	97	;'a'
  1438  007440  73                 	db	115	;'s'
  1439  007441  73                 	db	115	;'s'
  1440  007442  69                 	db	105	;'i'
  1441  007443  76                 	db	118	;'v'
  1442  007444  65                 	db	101	;'e'
  1443  007445  20                 	db	32
  1444  007446  28                 	db	40
  1445  007447  52                 	db	82	;'R'
  1446  007448  45                 	db	69	;'E'
  1447  007449  52                 	db	82	;'R'
  1448  00744A  52                 	db	82	;'R'
  1449  00744B  43                 	db	67	;'C'
  1450  00744C  4E                 	db	78	;'N'
  1451  00744D  54                 	db	84	;'T'
  1452  00744E  20                 	db	32
  1453  00744F  3F                 	db	63	;'?'
  1454  007450  20                 	db	32
  1455  007451  31                 	db	49	;'1'
  1456  007452  32                 	db	50	;'2'
  1457  007453  38                 	db	56	;'8'
  1458  007454  29                 	db	41
  1459  007455  0D                 	db	13
  1460  007456  0A                 	db	10
  1461  007457  00                 	db	0
  1462  007458                     STR_71:
  1463  007458  2D                 	db	45
  1464  007459  45                 	db	69	;'E'
  1465  00745A  52                 	db	82	;'R'
  1466  00745B  52                 	db	82	;'R'
  1467  00745C  4F                 	db	79	;'O'
  1468  00745D  52                 	db	82	;'R'
  1469  00745E  20                 	db	32
  1470  00745F  2D                 	db	45
  1471  007460  20                 	db	32
  1472  007461  4F                 	db	79	;'O'
  1473  007462  6E                 	db	110	;'n'
  1474  007463  65                 	db	101	;'e'
  1475  007464  20                 	db	32
  1476  007465  6F                 	db	111	;'o'
  1477  007466  72                 	db	114	;'r'
  1478  007467  20                 	db	32
  1479  007468  6D                 	db	109	;'m'
  1480  007469  6F                 	db	111	;'o'
  1481  00746A  72                 	db	114	;'r'
  1482  00746B  65                 	db	101	;'e'
  1483  00746C  20                 	db	32
  1484  00746D  72                 	db	114	;'r'
  1485  00746E  65                 	db	101	;'e'
  1486  00746F  67                 	db	103	;'g'
  1487  007470  69                 	db	105	;'i'
  1488  007471  73                 	db	115	;'s'
  1489  007472  74                 	db	116	;'t'
  1490  007473  65                 	db	101	;'e'
  1491  007474  72                 	db	114	;'r'
  1492  007475  28                 	db	40
  1493  007476  73                 	db	115	;'s'
  1494  007477  29                 	db	41
  1495  007478  20                 	db	32
  1496  007479  63                 	db	99	;'c'
  1497  00747A  6F                 	db	111	;'o'
  1498  00747B  75                 	db	117	;'u'
  1499  00747C  6C                 	db	108	;'l'
  1500  00747D  64                 	db	100	;'d'
  1501  00747E  20                 	db	32
  1502  00747F  6E                 	db	110	;'n'
  1503  007480  6F                 	db	111	;'o'
  1504  007481  74                 	db	116	;'t'
  1505  007482  20                 	db	32
  1506  007483  62                 	db	98	;'b'
  1507  007484  65                 	db	101	;'e'
  1508  007485  20                 	db	32
  1509  007486  72                 	db	114	;'r'
  1510  007487  65                 	db	101	;'e'
  1511  007488  61                 	db	97	;'a'
  1512  007489  64                 	db	100	;'d'
  1513  00748A  2E                 	db	46
  1514  00748B  0D                 	db	13
  1515  00748C  0A                 	db	10
  1516  00748D  00                 	db	0
  1517  00748E                     STR_197:
  1518  00748E  54                 	db	84	;'T'
  1519  00748F  72                 	db	114	;'r'
  1520  007490  61                 	db	97	;'a'
  1521  007491  6E                 	db	110	;'n'
  1522  007492  73                 	db	115	;'s'
  1523  007493  6D                 	db	109	;'m'
  1524  007494  69                 	db	105	;'i'
  1525  007495  74                 	db	116	;'t'
  1526  007496  74                 	db	116	;'t'
  1527  007497  65                 	db	101	;'e'
  1528  007498  72                 	db	114	;'r'
  1529  007499  20                 	db	32
  1530  00749A  69                 	db	105	;'i'
  1531  00749B  6E                 	db	110	;'n'
  1532  00749C  20                 	db	32
  1533  00749D  45                 	db	69	;'E'
  1534  00749E  72                 	db	114	;'r'
  1535  00749F  72                 	db	114	;'r'
  1536  0074A0  6F                 	db	111	;'o'
  1537  0074A1  72                 	db	114	;'r'
  1538  0074A2  20                 	db	32
  1539  0074A3  53                 	db	83	;'S'
  1540  0074A4  74                 	db	116	;'t'
  1541  0074A5  61                 	db	97	;'a'
  1542  0074A6  74                 	db	116	;'t'
  1543  0074A7  65                 	db	101	;'e'
  1544  0074A8  20                 	db	32
  1545  0074A9  42                 	db	66	;'B'
  1546  0074AA  75                 	db	117	;'u'
  1547  0074AB  73                 	db	115	;'s'
  1548  0074AC  20                 	db	32
  1549  0074AD  4F                 	db	79	;'O'
  1550  0074AE  46                 	db	70	;'F'
  1551  0074AF  46                 	db	70	;'F'
  1552  0074B0  20                 	db	32
  1553  0074B1  28                 	db	40
  1554  0074B2  54                 	db	84	;'T'
  1555  0074B3  45                 	db	69	;'E'
  1556  0074B4  52                 	db	82	;'R'
  1557  0074B5  52                 	db	82	;'R'
  1558  0074B6  43                 	db	67	;'C'
  1559  0074B7  4E                 	db	78	;'N'
  1560  0074B8  54                 	db	84	;'T'
  1561  0074B9  20                 	db	32
  1562  0074BA  3F                 	db	63	;'?'
  1563  0074BB  20                 	db	32
  1564  0074BC  32                 	db	50	;'2'
  1565  0074BD  35                 	db	53	;'5'
  1566  0074BE  36                 	db	54	;'6'
  1567  0074BF  29                 	db	41
  1568  0074C0  0D                 	db	13
  1569  0074C1  0A                 	db	10
  1570  0074C2  00                 	db	0
  1571  0074C3                     STR_205:
  1572  0074C3  54                 	db	84	;'T'
  1573  0074C4  72                 	db	114	;'r'
  1574  0074C5  61                 	db	97	;'a'
  1575  0074C6  6E                 	db	110	;'n'
  1576  0074C7  73                 	db	115	;'s'
  1577  0074C8  6D                 	db	109	;'m'
  1578  0074C9  69                 	db	105	;'i'
  1579  0074CA  74                 	db	116	;'t'
  1580  0074CB  74                 	db	116	;'t'
  1581  0074CC  65                 	db	101	;'e'
  1582  0074CD  72                 	db	114	;'r'
  1583  0074CE  20                 	db	32
  1584  0074CF  6F                 	db	111	;'o'
  1585  0074D0  72                 	db	114	;'r'
  1586  0074D1  20                 	db	32
  1587  0074D2  52                 	db	82	;'R'
  1588  0074D3  65                 	db	101	;'e'
  1589  0074D4  63                 	db	99	;'c'
  1590  0074D5  65                 	db	101	;'e'
  1591  0074D6  69                 	db	105	;'i'
  1592  0074D7  76                 	db	118	;'v'
  1593  0074D8  65                 	db	101	;'e'
  1594  0074D9  72                 	db	114	;'r'
  1595  0074DA  20                 	db	32
  1596  0074DB  69                 	db	105	;'i'
  1597  0074DC  73                 	db	115	;'s'
  1598  0074DD  20                 	db	32
  1599  0074DE  69                 	db	105	;'i'
  1600  0074DF  6E                 	db	110	;'n'
  1601  0074E0  20                 	db	32
  1602  0074E1  45                 	db	69	;'E'
  1603  0074E2  72                 	db	114	;'r'
  1604  0074E3  72                 	db	114	;'r'
  1605  0074E4  6F                 	db	111	;'o'
  1606  0074E5  72                 	db	114	;'r'
  1607  0074E6  20                 	db	32
  1608  0074E7  53                 	db	83	;'S'
  1609  0074E8  74                 	db	116	;'t'
  1610  0074E9  61                 	db	97	;'a'
  1611  0074EA  74                 	db	116	;'t'
  1612  0074EB  65                 	db	101	;'e'
  1613  0074EC  20                 	db	32
  1614  0074ED  57                 	db	87	;'W'
  1615  0074EE  61                 	db	97	;'a'
  1616  0074EF  72                 	db	114	;'r'
  1617  0074F0  6E                 	db	110	;'n'
  1618  0074F1  69                 	db	105	;'i'
  1619  0074F2  6E                 	db	110	;'n'
  1620  0074F3  67                 	db	103	;'g'
  1621  0074F4  0D                 	db	13
  1622  0074F5  0A                 	db	10
  1623  0074F6  00                 	db	0
  1624  0074F7                     STR_211:
  1625  0074F7  4C                 	db	76	;'L'
  1626  0074F8  49                 	db	73	;'I'
  1627  0074F9  53                 	db	83	;'S'
  1628  0074FA  54                 	db	84	;'T'
  1629  0074FB  45                 	db	69	;'E'
  1630  0074FC  4E                 	db	78	;'N'
  1631  0074FD  20                 	db	32
  1632  0074FE  2D                 	db	45
  1633  0074FF  20                 	db	32
  1634  007500  4F                 	db	79	;'O'
  1635  007501  70                 	db	112	;'p'
  1636  007502  65                 	db	101	;'e'
  1637  007503  6E                 	db	110	;'n'
  1638  007504  20                 	db	32
  1639  007505  43                 	db	67	;'C'
  1640  007506  41                 	db	65	;'A'
  1641  007507  4E                 	db	78	;'N'
  1642  007508  20                 	db	32
  1643  007509  69                 	db	105	;'i'
  1644  00750A  6E                 	db	110	;'n'
  1645  00750B  74                 	db	116	;'t'
  1646  00750C  65                 	db	101	;'e'
  1647  00750D  72                 	db	114	;'r'
  1648  00750E  66                 	db	102	;'f'
  1649  00750F  61                 	db	97	;'a'
  1650  007510  63                 	db	99	;'c'
  1651  007511  65                 	db	101	;'e'
  1652  007512  20                 	db	32
  1653  007513  69                 	db	105	;'i'
  1654  007514  6E                 	db	110	;'n'
  1655  007515  20                 	db	32
  1656  007516  6C                 	db	108	;'l'
  1657  007517  69                 	db	105	;'i'
  1658  007518  73                 	db	115	;'s'
  1659  007519  74                 	db	116	;'t'
  1660  00751A  65                 	db	101	;'e'
  1661  00751B  6E                 	db	110	;'n'
  1662  00751C  20                 	db	32
  1663  00751D  6F                 	db	111	;'o'
  1664  00751E  6E                 	db	110	;'n'
  1665  00751F  6C                 	db	108	;'l'
  1666  007520  79                 	db	121	;'y'
  1667  007521  20                 	db	32
  1668  007522  6D                 	db	109	;'m'
  1669  007523  6F                 	db	111	;'o'
  1670  007524  64                 	db	100	;'d'
  1671  007525  65                 	db	101	;'e'
  1672  007526  2E                 	db	46
  1673  007527  0D                 	db	13
  1674  007528  0A                 	db	10
  1675  007529  00                 	db	0
  1676  00752A                     STR_102:
  1677  00752A  2D                 	db	45
  1678  00752B  45                 	db	69	;'E'
  1679  00752C  52                 	db	82	;'R'
  1680  00752D  52                 	db	82	;'R'
  1681  00752E  4F                 	db	79	;'O'
  1682  00752F  52                 	db	82	;'R'
  1683  007530  20                 	db	32
  1684  007531  2D                 	db	45
  1685  007532  20                 	db	32
  1686  007533  4D                 	db	77	;'M'
  1687  007534  61                 	db	97	;'a'
  1688  007535  73                 	db	115	;'s'
  1689  007536  6B                 	db	107	;'k'
  1690  007537  20                 	db	32
  1691  007538  6E                 	db	110	;'n'
  1692  007539  75                 	db	117	;'u'
  1693  00753A  6D                 	db	109	;'m'
  1694  00753B  62                 	db	98	;'b'
  1695  00753C  65                 	db	101	;'e'
  1696  00753D  72                 	db	114	;'r'
  1697  00753E  20                 	db	32
  1698  00753F  63                 	db	99	;'c'
  1699  007540  61                 	db	97	;'a'
  1700  007541  6E                 	db	110	;'n'
  1701  007542  20                 	db	32
  1702  007543  6F                 	db	111	;'o'
  1703  007544  6E                 	db	110	;'n'
  1704  007545  6C                 	db	108	;'l'
  1705  007546  79                 	db	121	;'y'
  1706  007547  20                 	db	32
  1707  007548  62                 	db	98	;'b'
  1708  007549  65                 	db	101	;'e'
  1709  00754A  20                 	db	32
  1710  00754B  73                 	db	115	;'s'
  1711  00754C  65                 	db	101	;'e'
  1712  00754D  74                 	db	116	;'t'
  1713  00754E  20                 	db	32
  1714  00754F  61                 	db	97	;'a'
  1715  007550  73                 	db	115	;'s'
  1716  007551  20                 	db	32
  1717  007552  30                 	db	48	;'0'
  1718  007553  20                 	db	32
  1719  007554  6F                 	db	111	;'o'
  1720  007555  72                 	db	114	;'r'
  1721  007556  20                 	db	32
  1722  007557  31                 	db	49	;'1'
  1723  007558  2E                 	db	46
  1724  007559  0D                 	db	13
  1725  00755A  0A                 	db	10
  1726  00755B  00                 	db	0
  1727  00755C                     STR_212:
  1728  00755C  4C                 	db	76	;'L'
  1729  00755D  4F                 	db	79	;'O'
  1730  00755E  4F                 	db	79	;'O'
  1731  00755F  50                 	db	80	;'P'
  1732  007560  42                 	db	66	;'B'
  1733  007561  41                 	db	65	;'A'
  1734  007562  43                 	db	67	;'C'
  1735  007563  4B                 	db	75	;'K'
  1736  007564  20                 	db	32
  1737  007565  2D                 	db	45
  1738  007566  20                 	db	32
  1739  007567  4F                 	db	79	;'O'
  1740  007568  70                 	db	112	;'p'
  1741  007569  65                 	db	101	;'e'
  1742  00756A  6E                 	db	110	;'n'
  1743  00756B  20                 	db	32
  1744  00756C  43                 	db	67	;'C'
  1745  00756D  41                 	db	65	;'A'
  1746  00756E  4E                 	db	78	;'N'
  1747  00756F  20                 	db	32
  1748  007570  69                 	db	105	;'i'
  1749  007571  6E                 	db	110	;'n'
  1750  007572  74                 	db	116	;'t'
  1751  007573  65                 	db	101	;'e'
  1752  007574  72                 	db	114	;'r'
  1753  007575  66                 	db	102	;'f'
  1754  007576  61                 	db	97	;'a'
  1755  007577  63                 	db	99	;'c'
  1756  007578  65                 	db	101	;'e'
  1757  007579  20                 	db	32
  1758  00757A  69                 	db	105	;'i'
  1759  00757B  6E                 	db	110	;'n'
  1760  00757C  20                 	db	32
  1761  00757D  6C                 	db	108	;'l'
  1762  00757E  6F                 	db	111	;'o'
  1763  00757F  6F                 	db	111	;'o'
  1764  007580  70                 	db	112	;'p'
  1765  007581  62                 	db	98	;'b'
  1766  007582  61                 	db	97	;'a'
  1767  007583  63                 	db	99	;'c'
  1768  007584  6B                 	db	107	;'k'
  1769  007585  20                 	db	32
  1770  007586  6D                 	db	109	;'m'
  1771  007587  6F                 	db	111	;'o'
  1772  007588  64                 	db	100	;'d'
  1773  007589  65                 	db	101	;'e'
  1774  00758A  2E                 	db	46
  1775  00758B  0D                 	db	13
  1776  00758C  0A                 	db	10
  1777  00758D  00                 	db	0
  1778  00758E                     STR_214:
  1779  00758E  56                 	db	86	;'V'
  1780  00758F  45                 	db	69	;'E'
  1781  007590  52                 	db	82	;'R'
  1782  007591  53                 	db	83	;'S'
  1783  007592  49                 	db	73	;'I'
  1784  007593  4F                 	db	79	;'O'
  1785  007594  4E                 	db	78	;'N'
  1786  007595  20                 	db	32
  1787  007596  2D                 	db	45
  1788  007597  20                 	db	32
  1789  007598  44                 	db	68	;'D'
  1790  007599  69                 	db	105	;'i'
  1791  00759A  73                 	db	115	;'s'
  1792  00759B  70                 	db	112	;'p'
  1793  00759C  6C                 	db	108	;'l'
  1794  00759D  61                 	db	97	;'a'
  1795  00759E  79                 	db	121	;'y'
  1796  00759F  20                 	db	32
  1797  0075A0  66                 	db	102	;'f'
  1798  0075A1  69                 	db	105	;'i'
  1799  0075A2  72                 	db	114	;'r'
  1800  0075A3  6D                 	db	109	;'m'
  1801  0075A4  77                 	db	119	;'w'
  1802  0075A5  61                 	db	97	;'a'
  1803  0075A6  72                 	db	114	;'r'
  1804  0075A7  65                 	db	101	;'e'
  1805  0075A8  20                 	db	32
  1806  0075A9  76                 	db	118	;'v'
  1807  0075AA  65                 	db	101	;'e'
  1808  0075AB  72                 	db	114	;'r'
  1809  0075AC  73                 	db	115	;'s'
  1810  0075AD  69                 	db	105	;'i'
  1811  0075AE  6F                 	db	111	;'o'
  1812  0075AF  6E                 	db	110	;'n'
  1813  0075B0  20                 	db	32
  1814  0075B1  69                 	db	105	;'i'
  1815  0075B2  6E                 	db	110	;'n'
  1816  0075B3  66                 	db	102	;'f'
  1817  0075B4  6F                 	db	111	;'o'
  1818  0075B5  72                 	db	114	;'r'
  1819  0075B6  6D                 	db	109	;'m'
  1820  0075B7  61                 	db	97	;'a'
  1821  0075B8  74                 	db	116	;'t'
  1822  0075B9  69                 	db	105	;'i'
  1823  0075BA  6F                 	db	111	;'o'
  1824  0075BB  6E                 	db	110	;'n'
  1825  0075BC  2E                 	db	46
  1826  0075BD  0D                 	db	13
  1827  0075BE  0A                 	db	10
  1828  0075BF  00                 	db	0
  1829  0075C0                     STR_234:
  1830  0075C0  20                 	db	32
  1831  0075C1  20                 	db	32
  1832  0075C2  20                 	db	32
  1833  0075C3  20                 	db	32
  1834  0075C4  20                 	db	32
  1835  0075C5  20                 	db	32
  1836  0075C6  20                 	db	32
  1837  0075C7  20                 	db	32
  1838  0075C8  20                 	db	32
  1839  0075C9  20                 	db	32
  1840  0075CA  20                 	db	32
  1841  0075CB  20                 	db	32
  1842  0075CC  20                 	db	32
  1843  0075CD  20                 	db	32
  1844  0075CE  20                 	db	32
  1845  0075CF  20                 	db	32
  1846  0075D0  46                 	db	70	;'F'
  1847  0075D1  6F                 	db	111	;'o'
  1848  0075D2  72                 	db	114	;'r'
  1849  0075D3  6D                 	db	109	;'m'
  1850  0075D4  61                 	db	97	;'a'
  1851  0075D5  74                 	db	116	;'t'
  1852  0075D6  3A                 	db	58	;':'
  1853  0075D7  20                 	db	32
  1854  0075D8  73                 	db	115	;'s'
  1855  0075D9  65                 	db	101	;'e'
  1856  0075DA  74                 	db	116	;'t'
  1857  0075DB  20                 	db	32
  1858  0075DC  72                 	db	114	;'r'
  1859  0075DD  77                 	db	119	;'w'
  1860  0075DE  74                 	db	116	;'t'
  1861  0075DF  69                 	db	105	;'i'
  1862  0075E0  6D                 	db	109	;'m'
  1863  0075E1  65                 	db	101	;'e'
  1864  0075E2  6F                 	db	111	;'o'
  1865  0075E3  75                 	db	117	;'u'
  1866  0075E4  74                 	db	116	;'t'
  1867  0075E5  20                 	db	32
  1868  0075E6  74                 	db	116	;'t'
  1869  0075E7  69                 	db	105	;'i'
  1870  0075E8  6D                 	db	109	;'m'
  1871  0075E9  65                 	db	101	;'e'
  1872  0075EA  6F                 	db	111	;'o'
  1873  0075EB  75                 	db	117	;'u'
  1874  0075EC  74                 	db	116	;'t'
  1875  0075ED  2E                 	db	46
  1876  0075EE  0D                 	db	13
  1877  0075EF  0A                 	db	10
  1878  0075F0  00                 	db	0
  1879  0075F1                     STR_232:
  1880  0075F1  20                 	db	32
  1881  0075F2  20                 	db	32
  1882  0075F3  20                 	db	32
  1883  0075F4  20                 	db	32
  1884  0075F5  44                 	db	68	;'D'
  1885  0075F6  45                 	db	69	;'E'
  1886  0075F7  43                 	db	67	;'C'
  1887  0075F8  49                 	db	73	;'I'
  1888  0075F9  4D                 	db	77	;'M'
  1889  0075FA  41                 	db	65	;'A'
  1890  0075FB  4C                 	db	76	;'L'
  1891  0075FC  20                 	db	32
  1892  0075FD  2D                 	db	45
  1893  0075FE  20                 	db	32
  1894  0075FF  44                 	db	68	;'D'
  1895  007600  69                 	db	105	;'i'
  1896  007601  73                 	db	115	;'s'
  1897  007602  70                 	db	112	;'p'
  1898  007603  6C                 	db	108	;'l'
  1899  007604  61                 	db	97	;'a'
  1900  007605  79                 	db	121	;'y'
  1901  007606  20                 	db	32
  1902  007607  6E                 	db	110	;'n'
  1903  007608  75                 	db	117	;'u'
  1904  007609  6D                 	db	109	;'m'
  1905  00760A  65                 	db	101	;'e'
  1906  00760B  72                 	db	114	;'r'
  1907  00760C  69                 	db	105	;'i'
  1908  00760D  63                 	db	99	;'c'
  1909  00760E  61                 	db	97	;'a'
  1910  00760F  6C                 	db	108	;'l'
  1911  007610  73                 	db	115	;'s'
  1912  007611  20                 	db	32
  1913  007612  69                 	db	105	;'i'
  1914  007613  6E                 	db	110	;'n'
  1915  007614  20                 	db	32
  1916  007615  64                 	db	100	;'d'
  1917  007616  65                 	db	101	;'e'
  1918  007617  63                 	db	99	;'c'
  1919  007618  69                 	db	105	;'i'
  1920  007619  6D                 	db	109	;'m'
  1921  00761A  61                 	db	97	;'a'
  1922  00761B  6C                 	db	108	;'l'
  1923  00761C  2E                 	db	46
  1924  00761D  0D                 	db	13
  1925  00761E  0A                 	db	10
  1926  00761F  00                 	db	0
  1927  007620                     STR_231:
  1928  007620  20                 	db	32
  1929  007621  20                 	db	32
  1930  007622  20                 	db	32
  1931  007623  20                 	db	32
  1932  007624  48                 	db	72	;'H'
  1933  007625  45                 	db	69	;'E'
  1934  007626  58                 	db	88	;'X'
  1935  007627  20                 	db	32
  1936  007628  2D                 	db	45
  1937  007629  20                 	db	32
  1938  00762A  44                 	db	68	;'D'
  1939  00762B  69                 	db	105	;'i'
  1940  00762C  73                 	db	115	;'s'
  1941  00762D  70                 	db	112	;'p'
  1942  00762E  6C                 	db	108	;'l'
  1943  00762F  61                 	db	97	;'a'
  1944  007630  79                 	db	121	;'y'
  1945  007631  20                 	db	32
  1946  007632  6E                 	db	110	;'n'
  1947  007633  75                 	db	117	;'u'
  1948  007634  6D                 	db	109	;'m'
  1949  007635  65                 	db	101	;'e'
  1950  007636  72                 	db	114	;'r'
  1951  007637  69                 	db	105	;'i'
  1952  007638  63                 	db	99	;'c'
  1953  007639  61                 	db	97	;'a'
  1954  00763A  6C                 	db	108	;'l'
  1955  00763B  73                 	db	115	;'s'
  1956  00763C  20                 	db	32
  1957  00763D  69                 	db	105	;'i'
  1958  00763E  6E                 	db	110	;'n'
  1959  00763F  20                 	db	32
  1960  007640  68                 	db	104	;'h'
  1961  007641  65                 	db	101	;'e'
  1962  007642  78                 	db	120	;'x'
  1963  007643  61                 	db	97	;'a'
  1964  007644  64                 	db	100	;'d'
  1965  007645  65                 	db	101	;'e'
  1966  007646  63                 	db	99	;'c'
  1967  007647  69                 	db	105	;'i'
  1968  007648  6D                 	db	109	;'m'
  1969  007649  61                 	db	97	;'a'
  1970  00764A  6C                 	db	108	;'l'
  1971  00764B  2E                 	db	46
  1972  00764C  0D                 	db	13
  1973  00764D  0A                 	db	10
  1974  00764E  00                 	db	0
  1975  00764F                     STR_222:
  1976  00764F  46                 	db	70	;'F'
  1977  007650  49                 	db	73	;'I'
  1978  007651  4E                 	db	78	;'N'
  1979  007652  44                 	db	68	;'D'
  1980  007653  20                 	db	32
  1981  007654  2D                 	db	45
  1982  007655  20                 	db	32
  1983  007656  46                 	db	70	;'F'
  1984  007657  69                 	db	105	;'i'
  1985  007658  6E                 	db	110	;'n'
  1986  007659  64                 	db	100	;'d'
  1987  00765A  20                 	db	32
  1988  00765B  61                 	db	97	;'a'
  1989  00765C  76                 	db	118	;'v'
  1990  00765D  61                 	db	97	;'a'
  1991  00765E  69                 	db	105	;'i'
  1992  00765F  6C                 	db	108	;'l'
  1993  007660  61                 	db	97	;'a'
  1994  007661  62                 	db	98	;'b'
  1995  007662  6C                 	db	108	;'l'
  1996  007663  65                 	db	101	;'e'
  1997  007664  20                 	db	32
  1998  007665  43                 	db	67	;'C'
  1999  007666  41                 	db	65	;'A'
  2000  007667  4E                 	db	78	;'N'
  2001  007668  34                 	db	52	;'4'
  2002  007669  56                 	db	86	;'V'
  2003  00766A  53                 	db	83	;'S'
  2004  00766B  43                 	db	67	;'C'
  2005  00766C  50                 	db	80	;'P'
  2006  00766D  20                 	db	32
  2007  00766E  6E                 	db	110	;'n'
  2008  00766F  6F                 	db	111	;'o'
  2009  007670  64                 	db	100	;'d'
  2010  007671  65                 	db	101	;'e'
  2011  007672  73                 	db	115	;'s'
  2012  007673  20                 	db	32
  2013  007674  6F                 	db	111	;'o'
  2014  007675  6E                 	db	110	;'n'
  2015  007676  20                 	db	32
  2016  007677  62                 	db	98	;'b'
  2017  007678  75                 	db	117	;'u'
  2018  007679  73                 	db	115	;'s'
  2019  00767A  2E                 	db	46
  2020  00767B  0D                 	db	13
  2021  00767C  0A                 	db	10
  2022  00767D  00                 	db	0
  2023  00767E                     STR_210:
  2024  00767E  53                 	db	83	;'S'
  2025  00767F  49                 	db	73	;'I'
  2026  007680  4C                 	db	76	;'L'
  2027  007681  45                 	db	69	;'E'
  2028  007682  4E                 	db	78	;'N'
  2029  007683  54                 	db	84	;'T'
  2030  007684  20                 	db	32
  2031  007685  2D                 	db	45
  2032  007686  20                 	db	32
  2033  007687  4F                 	db	79	;'O'
  2034  007688  70                 	db	112	;'p'
  2035  007689  65                 	db	101	;'e'
  2036  00768A  6E                 	db	110	;'n'
  2037  00768B  20                 	db	32
  2038  00768C  43                 	db	67	;'C'
  2039  00768D  41                 	db	65	;'A'
  2040  00768E  4E                 	db	78	;'N'
  2041  00768F  20                 	db	32
  2042  007690  69                 	db	105	;'i'
  2043  007691  6E                 	db	110	;'n'
  2044  007692  74                 	db	116	;'t'
  2045  007693  65                 	db	101	;'e'
  2046  007694  72                 	db	114	;'r'
  2047  007695  66                 	db	102	;'f'
  2048  007696  61                 	db	97	;'a'
  2049  007697  63                 	db	99	;'c'
  2050  007698  65                 	db	101	;'e'
  2051  007699  20                 	db	32
  2052  00769A  69                 	db	105	;'i'
  2053  00769B  6E                 	db	110	;'n'
  2054  00769C  20                 	db	32
  2055  00769D  73                 	db	115	;'s'
  2056  00769E  69                 	db	105	;'i'
  2057  00769F  6C                 	db	108	;'l'
  2058  0076A0  65                 	db	101	;'e'
  2059  0076A1  6E                 	db	110	;'n'
  2060  0076A2  74                 	db	116	;'t'
  2061  0076A3  20                 	db	32
  2062  0076A4  6D                 	db	109	;'m'
  2063  0076A5  6F                 	db	111	;'o'
  2064  0076A6  64                 	db	100	;'d'
  2065  0076A7  65                 	db	101	;'e'
  2066  0076A8  2E                 	db	46
  2067  0076A9  0D                 	db	13
  2068  0076AA  0A                 	db	10
  2069  0076AB  00                 	db	0
  2070  0076AC                     STR_215:
  2071  0076AC  49                 	db	73	;'I'
  2072  0076AD  46                 	db	70	;'F'
  2073  0076AE  4D                 	db	77	;'M'
  2074  0076AF  4F                 	db	79	;'O'
  2075  0076B0  44                 	db	68	;'D'
  2076  0076B1  45                 	db	69	;'E'
  2077  0076B2  20                 	db	32
  2078  0076B3  2D                 	db	45
  2079  0076B4  20                 	db	32
  2080  0076B5  44                 	db	68	;'D'
  2081  0076B6  69                 	db	105	;'i'
  2082  0076B7  73                 	db	115	;'s'
  2083  0076B8  70                 	db	112	;'p'
  2084  0076B9  6C                 	db	108	;'l'
  2085  0076BA  61                 	db	97	;'a'
  2086  0076BB  79                 	db	121	;'y'
  2087  0076BC  20                 	db	32
  2088  0076BD  73                 	db	115	;'s'
  2089  0076BE  65                 	db	101	;'e'
  2090  0076BF  6C                 	db	108	;'l'
  2091  0076C0  65                 	db	101	;'e'
  2092  0076C1  63                 	db	99	;'c'
  2093  0076C2  74                 	db	116	;'t'
  2094  0076C3  65                 	db	101	;'e'
  2095  0076C4  64                 	db	100	;'d'
  2096  0076C5  20                 	db	32
  2097  0076C6  69                 	db	105	;'i'
  2098  0076C7  6E                 	db	110	;'n'
  2099  0076C8  74                 	db	116	;'t'
  2100  0076C9  65                 	db	101	;'e'
  2101  0076CA  72                 	db	114	;'r'
  2102  0076CB  66                 	db	102	;'f'
  2103  0076CC  61                 	db	97	;'a'
  2104  0076CD  63                 	db	99	;'c'
  2105  0076CE  65                 	db	101	;'e'
  2106  0076CF  20                 	db	32
  2107  0076D0  6D                 	db	109	;'m'
  2108  0076D1  6F                 	db	111	;'o'
  2109  0076D2  64                 	db	100	;'d'
  2110  0076D3  65                 	db	101	;'e'
  2111  0076D4  2E                 	db	46
  2112  0076D5  0D                 	db	13
  2113  0076D6  0A                 	db	10
  2114  0076D7  00                 	db	0
  2115  0076D8                     STR_209:
  2116  0076D8  4F                 	db	79	;'O'
  2117  0076D9  50                 	db	80	;'P'
  2118  0076DA  45                 	db	69	;'E'
  2119  0076DB  4E                 	db	78	;'N'
  2120  0076DC  20                 	db	32
  2121  0076DD  2D                 	db	45
  2122  0076DE  20                 	db	32
  2123  0076DF  4F                 	db	79	;'O'
  2124  0076E0  70                 	db	112	;'p'
  2125  0076E1  65                 	db	101	;'e'
  2126  0076E2  6E                 	db	110	;'n'
  2127  0076E3  20                 	db	32
  2128  0076E4  43                 	db	67	;'C'
  2129  0076E5  41                 	db	65	;'A'
  2130  0076E6  4E                 	db	78	;'N'
  2131  0076E7  20                 	db	32
  2132  0076E8  69                 	db	105	;'i'
  2133  0076E9  6E                 	db	110	;'n'
  2134  0076EA  74                 	db	116	;'t'
  2135  0076EB  65                 	db	101	;'e'
  2136  0076EC  72                 	db	114	;'r'
  2137  0076ED  66                 	db	102	;'f'
  2138  0076EE  61                 	db	97	;'a'
  2139  0076EF  63                 	db	99	;'c'
  2140  0076F0  65                 	db	101	;'e'
  2141  0076F1  20                 	db	32
  2142  0076F2  69                 	db	105	;'i'
  2143  0076F3  6E                 	db	110	;'n'
  2144  0076F4  20                 	db	32
  2145  0076F5  6E                 	db	110	;'n'
  2146  0076F6  6F                 	db	111	;'o'
  2147  0076F7  72                 	db	114	;'r'
  2148  0076F8  6D                 	db	109	;'m'
  2149  0076F9  61                 	db	97	;'a'
  2150  0076FA  6C                 	db	108	;'l'
  2151  0076FB  20                 	db	32
  2152  0076FC  6D                 	db	109	;'m'
  2153  0076FD  6F                 	db	111	;'o'
  2154  0076FE  64                 	db	100	;'d'
  2155  0076FF  65                 	db	101	;'e'
  2156  007700  2E                 	db	46
  2157  007701  0D                 	db	13
  2158  007702  0A                 	db	10
  2159  007703  00                 	db	0
  2160  007704                     STR_115:
  2161  007704  2B                 	db	43
  2162  007705  4F                 	db	79	;'O'
  2163  007706  4B                 	db	75	;'K'
  2164  007707  20                 	db	32
  2165  007708  2D                 	db	45
  2166  007709  20                 	db	32
  2167  00770A  4E                 	db	78	;'N'
  2168  00770B  75                 	db	117	;'u'
  2169  00770C  6D                 	db	109	;'m'
  2170  00770D  65                 	db	101	;'e'
  2171  00770E  72                 	db	114	;'r'
  2172  00770F  69                 	db	105	;'i'
  2173  007710  63                 	db	99	;'c'
  2174  007711  61                 	db	97	;'a'
  2175  007712  6C                 	db	108	;'l'
  2176  007713  20                 	db	32
  2177  007714  6F                 	db	111	;'o'
  2178  007715  75                 	db	117	;'u'
  2179  007716  74                 	db	116	;'t'
  2180  007717  70                 	db	112	;'p'
  2181  007718  75                 	db	117	;'u'
  2182  007719  74                 	db	116	;'t'
  2183  00771A  20                 	db	32
  2184  00771B  6E                 	db	110	;'n'
  2185  00771C  6F                 	db	111	;'o'
  2186  00771D  77                 	db	119	;'w'
  2187  00771E  20                 	db	32
  2188  00771F  69                 	db	105	;'i'
  2189  007720  6E                 	db	110	;'n'
  2190  007721  20                 	db	32
  2191  007722  68                 	db	104	;'h'
  2192  007723  65                 	db	101	;'e'
  2193  007724  78                 	db	120	;'x'
  2194  007725  61                 	db	97	;'a'
  2195  007726  64                 	db	100	;'d'
  2196  007727  65                 	db	101	;'e'
  2197  007728  63                 	db	99	;'c'
  2198  007729  69                 	db	105	;'i'
  2199  00772A  6D                 	db	109	;'m'
  2200  00772B  61                 	db	97	;'a'
  2201  00772C  6C                 	db	108	;'l'
  2202  00772D  0D                 	db	13
  2203  00772E  0A                 	db	10
  2204  00772F  00                 	db	0
  2205  007730                     STR_92:
  2206  007730  2D                 	db	45
  2207  007731  45                 	db	69	;'E'
  2208  007732  52                 	db	82	;'R'
  2209  007733  52                 	db	82	;'R'
  2210  007734  4F                 	db	79	;'O'
  2211  007735  52                 	db	82	;'R'
  2212  007736  20                 	db	32
  2213  007737  2D                 	db	45
  2214  007738  20                 	db	32
  2215  007739  66                 	db	102	;'f'
  2216  00773A  69                 	db	105	;'i'
  2217  00773B  6C                 	db	108	;'l'
  2218  00773C  74                 	db	116	;'t'
  2219  00773D  65                 	db	101	;'e'
  2220  00773E  72                 	db	114	;'r'
  2221  00773F  20                 	db	32
  2222  007740  66                 	db	102	;'f'
  2223  007741  6F                 	db	111	;'o'
  2224  007742  72                 	db	114	;'r'
  2225  007743  20                 	db	32
  2226  007744  70                 	db	112	;'p'
  2227  007745  72                 	db	114	;'r'
  2228  007746  69                 	db	105	;'i'
  2229  007747  6F                 	db	111	;'o'
  2230  007748  72                 	db	114	;'r'
  2231  007749  69                 	db	105	;'i'
  2232  00774A  74                 	db	116	;'t'
  2233  00774B  79                 	db	121	;'y'
  2234  00774C  20                 	db	32
  2235  00774D  69                 	db	105	;'i'
  2236  00774E  73                 	db	115	;'s'
  2237  00774F  20                 	db	32
  2238  007750  6D                 	db	109	;'m'
  2239  007751  69                 	db	105	;'i'
  2240  007752  73                 	db	115	;'s'
  2241  007753  73                 	db	115	;'s'
  2242  007754  69                 	db	105	;'i'
  2243  007755  6E                 	db	110	;'n'
  2244  007756  67                 	db	103	;'g'
  2245  007757  0D                 	db	13
  2246  007758  0A                 	db	10
  2247  007759  00                 	db	0
  2248  00775A                     STR_98:
  2249  00775A  2D                 	db	45
  2250  00775B  45                 	db	69	;'E'
  2251  00775C  52                 	db	82	;'R'
  2252  00775D  52                 	db	82	;'R'
  2253  00775E  4F                 	db	79	;'O'
  2254  00775F  52                 	db	82	;'R'
  2255  007760  20                 	db	32
  2256  007761  2D                 	db	45
  2257  007762  20                 	db	32
  2258  007763  66                 	db	102	;'f'
  2259  007764  69                 	db	105	;'i'
  2260  007765  6C                 	db	108	;'l'
  2261  007766  74                 	db	116	;'t'
  2262  007767  65                 	db	101	;'e'
  2263  007768  72                 	db	114	;'r'
  2264  007769  20                 	db	32
  2265  00776A  66                 	db	102	;'f'
  2266  00776B  6F                 	db	111	;'o'
  2267  00776C  72                 	db	114	;'r'
  2268  00776D  20                 	db	32
  2269  00776E  6E                 	db	110	;'n'
  2270  00776F  69                 	db	105	;'i'
  2271  007770  64                 	db	100	;'d'
  2272  007771  65                 	db	101	;'e'
  2273  007772  20                 	db	32
  2274  007773  69                 	db	105	;'i'
  2275  007774  64                 	db	100	;'d'
  2276  007775  20                 	db	32
  2277  007776  69                 	db	105	;'i'
  2278  007777  73                 	db	115	;'s'
  2279  007778  20                 	db	32
  2280  007779  6D                 	db	109	;'m'
  2281  00777A  69                 	db	105	;'i'
  2282  00777B  73                 	db	115	;'s'
  2283  00777C  73                 	db	115	;'s'
  2284  00777D  69                 	db	105	;'i'
  2285  00777E  6E                 	db	110	;'n'
  2286  00777F  67                 	db	103	;'g'
  2287  007780  0D                 	db	13
  2288  007781  0A                 	db	10
  2289  007782  00                 	db	0
  2290  007783                     STR_221:
  2291  007783  48                 	db	72	;'H'
  2292  007784  45                 	db	69	;'E'
  2293  007785  4C                 	db	76	;'L'
  2294  007786  50                 	db	80	;'P'
  2295  007787  20                 	db	32
  2296  007788  2D                 	db	45
  2297  007789  20                 	db	32
  2298  00778A  44                 	db	68	;'D'
  2299  00778B  69                 	db	105	;'i'
  2300  00778C  73                 	db	115	;'s'
  2301  00778D  70                 	db	112	;'p'
  2302  00778E  6C                 	db	108	;'l'
  2303  00778F  61                 	db	97	;'a'
  2304  007790  79                 	db	121	;'y'
  2305  007791  20                 	db	32
  2306  007792  74                 	db	116	;'t'
  2307  007793  68                 	db	104	;'h'
  2308  007794  69                 	db	105	;'i'
  2309  007795  73                 	db	115	;'s'
  2310  007796  20                 	db	32
  2311  007797  68                 	db	104	;'h'
  2312  007798  65                 	db	101	;'e'
  2313  007799  6C                 	db	108	;'l'
  2314  00779A  70                 	db	112	;'p'
  2315  00779B  20                 	db	32
  2316  00779C  69                 	db	105	;'i'
  2317  00779D  6E                 	db	110	;'n'
  2318  00779E  66                 	db	102	;'f'
  2319  00779F  6F                 	db	111	;'o'
  2320  0077A0  72                 	db	114	;'r'
  2321  0077A1  6D                 	db	109	;'m'
  2322  0077A2  61                 	db	97	;'a'
  2323  0077A3  74                 	db	116	;'t'
  2324  0077A4  69                 	db	105	;'i'
  2325  0077A5  6F                 	db	111	;'o'
  2326  0077A6  6E                 	db	110	;'n'
  2327  0077A7  2E                 	db	46
  2328  0077A8  0D                 	db	13
  2329  0077A9  0A                 	db	10
  2330  0077AA  00                 	db	0
  2331  0077AB                     STR_105:
  2332  0077AB  2D                 	db	45
  2333  0077AC  45                 	db	69	;'E'
  2334  0077AD  52                 	db	82	;'R'
  2335  0077AE  52                 	db	82	;'R'
  2336  0077AF  4F                 	db	79	;'O'
  2337  0077B0  52                 	db	82	;'R'
  2338  0077B1  20                 	db	32
  2339  0077B2  2D                 	db	45
  2340  0077B3  20                 	db	32
  2341  0077B4  6D                 	db	109	;'m'
  2342  0077B5  61                 	db	97	;'a'
  2343  0077B6  73                 	db	115	;'s'
  2344  0077B7  6B                 	db	107	;'k'
  2345  0077B8  20                 	db	32
  2346  0077B9  66                 	db	102	;'f'
  2347  0077BA  6F                 	db	111	;'o'
  2348  0077BB  72                 	db	114	;'r'
  2349  0077BC  20                 	db	32
  2350  0077BD  70                 	db	112	;'p'
  2351  0077BE  72                 	db	114	;'r'
  2352  0077BF  69                 	db	105	;'i'
  2353  0077C0  6F                 	db	111	;'o'
  2354  0077C1  72                 	db	114	;'r'
  2355  0077C2  69                 	db	105	;'i'
  2356  0077C3  74                 	db	116	;'t'
  2357  0077C4  79                 	db	121	;'y'
  2358  0077C5  20                 	db	32
  2359  0077C6  69                 	db	105	;'i'
  2360  0077C7  73                 	db	115	;'s'
  2361  0077C8  20                 	db	32
  2362  0077C9  6D                 	db	109	;'m'
  2363  0077CA  69                 	db	105	;'i'
  2364  0077CB  73                 	db	115	;'s'
  2365  0077CC  73                 	db	115	;'s'
  2366  0077CD  69                 	db	105	;'i'
  2367  0077CE  6E                 	db	110	;'n'
  2368  0077CF  67                 	db	103	;'g'
  2369  0077D0  0D                 	db	13
  2370  0077D1  0A                 	db	10
  2371  0077D2  00                 	db	0
  2372  0077D3                     STR_117:
  2373  0077D3  2B                 	db	43
  2374  0077D4  4F                 	db	79	;'O'
  2375  0077D5  4B                 	db	75	;'K'
  2376  0077D6  20                 	db	32
  2377  0077D7  2D                 	db	45
  2378  0077D8  20                 	db	32
  2379  0077D9  4E                 	db	78	;'N'
  2380  0077DA  75                 	db	117	;'u'
  2381  0077DB  6D                 	db	109	;'m'
  2382  0077DC  65                 	db	101	;'e'
  2383  0077DD  72                 	db	114	;'r'
  2384  0077DE  69                 	db	105	;'i'
  2385  0077DF  63                 	db	99	;'c'
  2386  0077E0  61                 	db	97	;'a'
  2387  0077E1  6C                 	db	108	;'l'
  2388  0077E2  20                 	db	32
  2389  0077E3  6F                 	db	111	;'o'
  2390  0077E4  75                 	db	117	;'u'
  2391  0077E5  74                 	db	116	;'t'
  2392  0077E6  70                 	db	112	;'p'
  2393  0077E7  75                 	db	117	;'u'
  2394  0077E8  74                 	db	116	;'t'
  2395  0077E9  20                 	db	32
  2396  0077EA  6E                 	db	110	;'n'
  2397  0077EB  6F                 	db	111	;'o'
  2398  0077EC  77                 	db	119	;'w'
  2399  0077ED  20                 	db	32
  2400  0077EE  69                 	db	105	;'i'
  2401  0077EF  6E                 	db	110	;'n'
  2402  0077F0  20                 	db	32
  2403  0077F1  64                 	db	100	;'d'
  2404  0077F2  65                 	db	101	;'e'
  2405  0077F3  63                 	db	99	;'c'
  2406  0077F4  69                 	db	105	;'i'
  2407  0077F5  6D                 	db	109	;'m'
  2408  0077F6  61                 	db	97	;'a'
  2409  0077F7  6C                 	db	108	;'l'
  2410  0077F8  0D                 	db	13
  2411  0077F9  0A                 	db	10
  2412  0077FA  00                 	db	0
  2413  0077FB                     STR_90:
  2414  0077FB  2D                 	db	45
  2415  0077FC  45                 	db	69	;'E'
  2416  0077FD  52                 	db	82	;'R'
  2417  0077FE  52                 	db	82	;'R'
  2418  0077FF  4F                 	db	79	;'O'
  2419  007800  52                 	db	82	;'R'
  2420  007801  20                 	db	32
  2421  007802  2D                 	db	45
  2422  007803  20                 	db	32
  2423  007804  4E                 	db	78	;'N'
  2424  007805  6F                 	db	111	;'o'
  2425  007806  20                 	db	32
  2426  007807  66                 	db	102	;'f'
  2427  007808  69                 	db	105	;'i'
  2428  007809  6C                 	db	108	;'l'
  2429  00780A  74                 	db	116	;'t'
  2430  00780B  65                 	db	101	;'e'
  2431  00780C  72                 	db	114	;'r'
  2432  00780D  20                 	db	32
  2433  00780E  6E                 	db	110	;'n'
  2434  00780F  75                 	db	117	;'u'
  2435  007810  6D                 	db	109	;'m'
  2436  007811  62                 	db	98	;'b'
  2437  007812  65                 	db	101	;'e'
  2438  007813  72                 	db	114	;'r'
  2439  007814  20                 	db	32
  2440  007815  73                 	db	115	;'s'
  2441  007816  70                 	db	112	;'p'
  2442  007817  65                 	db	101	;'e'
  2443  007818  63                 	db	99	;'c'
  2444  007819  69                 	db	105	;'i'
  2445  00781A  66                 	db	102	;'f'
  2446  00781B  69                 	db	105	;'i'
  2447  00781C  65                 	db	101	;'e'
  2448  00781D  64                 	db	100	;'d'
  2449  00781E  2E                 	db	46
  2450  00781F  0D                 	db	13
  2451  007820  0A                 	db	10
  2452  007821  00                 	db	0
  2453  007822                     STR_220:
  2454  007822  45                 	db	69	;'E'
  2455  007823  52                 	db	82	;'R'
  2456  007824  52                 	db	82	;'R'
  2457  007825  20                 	db	32
  2458  007826  2D                 	db	45
  2459  007827  20                 	db	32
  2460  007828  44                 	db	68	;'D'
  2461  007829  69                 	db	105	;'i'
  2462  00782A  73                 	db	115	;'s'
  2463  00782B  70                 	db	112	;'p'
  2464  00782C  6C                 	db	108	;'l'
  2465  00782D  61                 	db	97	;'a'
  2466  00782E  79                 	db	121	;'y'
  2467  00782F  20                 	db	32
  2468  007830  43                 	db	67	;'C'
  2469  007831  41                 	db	65	;'A'
  2470  007832  4E                 	db	78	;'N'
  2471  007833  20                 	db	32
  2472  007834  65                 	db	101	;'e'
  2473  007835  72                 	db	114	;'r'
  2474  007836  72                 	db	114	;'r'
  2475  007837  6F                 	db	111	;'o'
  2476  007838  72                 	db	114	;'r'
  2477  007839  20                 	db	32
  2478  00783A  69                 	db	105	;'i'
  2479  00783B  6E                 	db	110	;'n'
  2480  00783C  66                 	db	102	;'f'
  2481  00783D  6F                 	db	111	;'o'
  2482  00783E  72                 	db	114	;'r'
  2483  00783F  6D                 	db	109	;'m'
  2484  007840  61                 	db	97	;'a'
  2485  007841  74                 	db	116	;'t'
  2486  007842  69                 	db	105	;'i'
  2487  007843  6F                 	db	111	;'o'
  2488  007844  6E                 	db	110	;'n'
  2489  007845  2E                 	db	46
  2490  007846  0D                 	db	13
  2491  007847  0A                 	db	10
  2492  007848  00                 	db	0
  2493  007849                     STR_206:
  2494  007849  48                 	db	72	;'H'
  2495  00784A  65                 	db	101	;'e'
  2496  00784B  6C                 	db	108	;'l'
  2497  00784C  70                 	db	112	;'p'
  2498  00784D  20                 	db	32
  2499  00784E  66                 	db	102	;'f'
  2500  00784F  6F                 	db	111	;'o'
  2501  007850  72                 	db	114	;'r'
  2502  007851  20                 	db	32
  2503  007852  74                 	db	116	;'t'
  2504  007853  68                 	db	104	;'h'
  2505  007854  65                 	db	101	;'e'
  2506  007855  20                 	db	32
  2507  007856  46                 	db	70	;'F'
  2508  007857  72                 	db	114	;'r'
  2509  007858  61                 	db	97	;'a'
  2510  007859  6E                 	db	110	;'n'
  2511  00785A  6B                 	db	107	;'k'
  2512  00785B  66                 	db	102	;'f'
  2513  00785C  75                 	db	117	;'u'
  2514  00785D  72                 	db	114	;'r'
  2515  00785E  74                 	db	116	;'t'
  2516  00785F  20                 	db	32
  2517  007860  52                 	db	82	;'R'
  2518  007861  53                 	db	83	;'S'
  2519  007862  2D                 	db	45
  2520  007863  32                 	db	50	;'2'
  2521  007864  33                 	db	51	;'3'
  2522  007865  32                 	db	50	;'2'
  2523  007866  20                 	db	32
  2524  007867  6D                 	db	109	;'m'
  2525  007868  6F                 	db	111	;'o'
  2526  007869  64                 	db	100	;'d'
  2527  00786A  75                 	db	117	;'u'
  2528  00786B  6C                 	db	108	;'l'
  2529  00786C  65                 	db	101	;'e'
  2530  00786D  0D                 	db	13
  2531  00786E  0A                 	db	10
  2532  00786F  00                 	db	0
  2533  007870                     STR_111:
  2534  007870  2D                 	db	45
  2535  007871  45                 	db	69	;'E'
  2536  007872  52                 	db	82	;'R'
  2537  007873  52                 	db	82	;'R'
  2538  007874  4F                 	db	79	;'O'
  2539  007875  52                 	db	82	;'R'
  2540  007876  20                 	db	32
  2541  007877  2D                 	db	45
  2542  007878  20                 	db	32
  2543  007879  6D                 	db	109	;'m'
  2544  00787A  61                 	db	97	;'a'
  2545  00787B  73                 	db	115	;'s'
  2546  00787C  6B                 	db	107	;'k'
  2547  00787D  20                 	db	32
  2548  00787E  66                 	db	102	;'f'
  2549  00787F  6F                 	db	111	;'o'
  2550  007880  72                 	db	114	;'r'
  2551  007881  20                 	db	32
  2552  007882  6E                 	db	110	;'n'
  2553  007883  69                 	db	105	;'i'
  2554  007884  64                 	db	100	;'d'
  2555  007885  65                 	db	101	;'e'
  2556  007886  20                 	db	32
  2557  007887  69                 	db	105	;'i'
  2558  007888  64                 	db	100	;'d'
  2559  007889  20                 	db	32
  2560  00788A  69                 	db	105	;'i'
  2561  00788B  73                 	db	115	;'s'
  2562  00788C  20                 	db	32
  2563  00788D  6D                 	db	109	;'m'
  2564  00788E  69                 	db	105	;'i'
  2565  00788F  73                 	db	115	;'s'
  2566  007890  73                 	db	115	;'s'
  2567  007891  69                 	db	105	;'i'
  2568  007892  6E                 	db	110	;'n'
  2569  007893  67                 	db	103	;'g'
  2570  007894  0D                 	db	13
  2571  007895  0A                 	db	10
  2572  007896  00                 	db	0
  2573  007897                     STR_94:
  2574  007897  2D                 	db	45
  2575  007898  45                 	db	69	;'E'
  2576  007899  52                 	db	82	;'R'
  2577  00789A  52                 	db	82	;'R'
  2578  00789B  4F                 	db	79	;'O'
  2579  00789C  52                 	db	82	;'R'
  2580  00789D  20                 	db	32
  2581  00789E  2D                 	db	45
  2582  00789F  20                 	db	32
  2583  0078A0  66                 	db	102	;'f'
  2584  0078A1  69                 	db	105	;'i'
  2585  0078A2  6C                 	db	108	;'l'
  2586  0078A3  74                 	db	116	;'t'
  2587  0078A4  65                 	db	101	;'e'
  2588  0078A5  72                 	db	114	;'r'
  2589  0078A6  20                 	db	32
  2590  0078A7  66                 	db	102	;'f'
  2591  0078A8  6F                 	db	111	;'o'
  2592  0078A9  72                 	db	114	;'r'
  2593  0078AA  20                 	db	32
  2594  0078AB  63                 	db	99	;'c'
  2595  0078AC  6C                 	db	108	;'l'
  2596  0078AD  61                 	db	97	;'a'
  2597  0078AE  73                 	db	115	;'s'
  2598  0078AF  73                 	db	115	;'s'
  2599  0078B0  20                 	db	32
  2600  0078B1  69                 	db	105	;'i'
  2601  0078B2  73                 	db	115	;'s'
  2602  0078B3  20                 	db	32
  2603  0078B4  6D                 	db	109	;'m'
  2604  0078B5  69                 	db	105	;'i'
  2605  0078B6  73                 	db	115	;'s'
  2606  0078B7  73                 	db	115	;'s'
  2607  0078B8  69                 	db	105	;'i'
  2608  0078B9  6E                 	db	110	;'n'
  2609  0078BA  67                 	db	103	;'g'
  2610  0078BB  0D                 	db	13
  2611  0078BC  0A                 	db	10
  2612  0078BD  00                 	db	0
  2613  0078BE                     STR_237:
  2614  0078BE  20                 	db	32
  2615  0078BF  20                 	db	32
  2616  0078C0  20                 	db	32
  2617  0078C1  20                 	db	32
  2618  0078C2  20                 	db	32
  2619  0078C3  20                 	db	32
  2620  0078C4  20                 	db	32
  2621  0078C5  20                 	db	32
  2622  0078C6  20                 	db	32
  2623  0078C7  20                 	db	32
  2624  0078C8  20                 	db	32
  2625  0078C9  4D                 	db	77	;'M'
  2626  0078CA  6F                 	db	111	;'o'
  2627  0078CB  64                 	db	100	;'d'
  2628  0078CC  65                 	db	101	;'e'
  2629  0078CD  73                 	db	115	;'s'
  2630  0078CE  3A                 	db	58	;':'
  2631  0078CF  20                 	db	32
  2632  0078D0  76                 	db	118	;'v'
  2633  0078D1  65                 	db	101	;'e'
  2634  0078D2  72                 	db	114	;'r'
  2635  0078D3  62                 	db	98	;'b'
  2636  0078D4  6F                 	db	111	;'o'
  2637  0078D5  73                 	db	115	;'s'
  2638  0078D6  65                 	db	101	;'e'
  2639  0078D7  7C                 	db	124
  2640  0078D8  76                 	db	118	;'v'
  2641  0078D9  73                 	db	115	;'s'
  2642  0078DA  63                 	db	99	;'c'
  2643  0078DB  70                 	db	112	;'p'
  2644  0078DC  7C                 	db	124
  2645  0078DD  73                 	db	115	;'s'
  2646  0078DE  6C                 	db	108	;'l'
  2647  0078DF  63                 	db	99	;'c'
  2648  0078E0  61                 	db	97	;'a'
  2649  0078E1  6E                 	db	110	;'n'
  2650  0078E2  0D                 	db	13
  2651  0078E3  0A                 	db	10
  2652  0078E4  00                 	db	0
  2653  0078E5                     STR_96:
  2654  0078E5  2D                 	db	45
  2655  0078E6  45                 	db	69	;'E'
  2656  0078E7  52                 	db	82	;'R'
  2657  0078E8  52                 	db	82	;'R'
  2658  0078E9  4F                 	db	79	;'O'
  2659  0078EA  52                 	db	82	;'R'
  2660  0078EB  20                 	db	32
  2661  0078EC  2D                 	db	45
  2662  0078ED  20                 	db	32
  2663  0078EE  66                 	db	102	;'f'
  2664  0078EF  69                 	db	105	;'i'
  2665  0078F0  6C                 	db	108	;'l'
  2666  0078F1  74                 	db	116	;'t'
  2667  0078F2  65                 	db	101	;'e'
  2668  0078F3  72                 	db	114	;'r'
  2669  0078F4  20                 	db	32
  2670  0078F5  66                 	db	102	;'f'
  2671  0078F6  6F                 	db	111	;'o'
  2672  0078F7  72                 	db	114	;'r'
  2673  0078F8  20                 	db	32
  2674  0078F9  74                 	db	116	;'t'
  2675  0078FA  79                 	db	121	;'y'
  2676  0078FB  70                 	db	112	;'p'
  2677  0078FC  65                 	db	101	;'e'
  2678  0078FD  20                 	db	32
  2679  0078FE  69                 	db	105	;'i'
  2680  0078FF  73                 	db	115	;'s'
  2681  007900  20                 	db	32
  2682  007901  6D                 	db	109	;'m'
  2683  007902  69                 	db	105	;'i'
  2684  007903  73                 	db	115	;'s'
  2685  007904  73                 	db	115	;'s'
  2686  007905  69                 	db	105	;'i'
  2687  007906  6E                 	db	110	;'n'
  2688  007907  67                 	db	103	;'g'
  2689  007908  0D                 	db	13
  2690  007909  0A                 	db	10
  2691  00790A  00                 	db	0
  2692  00790B                     STR_103:
  2693  00790B  2D                 	db	45
  2694  00790C  45                 	db	69	;'E'
  2695  00790D  52                 	db	82	;'R'
  2696  00790E  52                 	db	82	;'R'
  2697  00790F  4F                 	db	79	;'O'
  2698  007910  52                 	db	82	;'R'
  2699  007911  20                 	db	32
  2700  007912  2D                 	db	45
  2701  007913  20                 	db	32
  2702  007914  4E                 	db	78	;'N'
  2703  007915  6F                 	db	111	;'o'
  2704  007916  20                 	db	32
  2705  007917  6D                 	db	109	;'m'
  2706  007918  61                 	db	97	;'a'
  2707  007919  73                 	db	115	;'s'
  2708  00791A  6B                 	db	107	;'k'
  2709  00791B  20                 	db	32
  2710  00791C  6E                 	db	110	;'n'
  2711  00791D  75                 	db	117	;'u'
  2712  00791E  6D                 	db	109	;'m'
  2713  00791F  62                 	db	98	;'b'
  2714  007920  65                 	db	101	;'e'
  2715  007921  72                 	db	114	;'r'
  2716  007922  20                 	db	32
  2717  007923  73                 	db	115	;'s'
  2718  007924  70                 	db	112	;'p'
  2719  007925  65                 	db	101	;'e'
  2720  007926  63                 	db	99	;'c'
  2721  007927  69                 	db	105	;'i'
  2722  007928  66                 	db	102	;'f'
  2723  007929  69                 	db	105	;'i'
  2724  00792A  65                 	db	101	;'e'
  2725  00792B  64                 	db	100	;'d'
  2726  00792C  2E                 	db	46
  2727  00792D  0D                 	db	13
  2728  00792E  0A                 	db	10
  2729  00792F  00                 	db	0
  2730  007930                     STR_1:
  2731  007930  0D                 	db	13
  2732  007931  0A                 	db	10
  2733  007932  46                 	db	70	;'F'
  2734  007933  72                 	db	114	;'r'
  2735  007934  61                 	db	97	;'a'
  2736  007935  6E                 	db	110	;'n'
  2737  007936  6B                 	db	107	;'k'
  2738  007937  66                 	db	102	;'f'
  2739  007938  75                 	db	117	;'u'
  2740  007939  72                 	db	114	;'r'
  2741  00793A  74                 	db	116	;'t'
  2742  00793B  20                 	db	32
  2743  00793C  52                 	db	82	;'R'
  2744  00793D  53                 	db	83	;'S'
  2745  00793E  2D                 	db	45
  2746  00793F  32                 	db	50	;'2'
  2747  007940  33                 	db	51	;'3'
  2748  007941  32                 	db	50	;'2'
  2749  007942  20                 	db	32
  2750  007943  43                 	db	67	;'C'
  2751  007944  41                 	db	65	;'A'
  2752  007945  4E                 	db	78	;'N'
  2753  007946  34                 	db	52	;'4'
  2754  007947  56                 	db	86	;'V'
  2755  007948  53                 	db	83	;'S'
  2756  007949  43                 	db	67	;'C'
  2757  00794A  50                 	db	80	;'P'
  2758  00794B  20                 	db	32
  2759  00794C  6D                 	db	109	;'m'
  2760  00794D  6F                 	db	111	;'o'
  2761  00794E  64                 	db	100	;'d'
  2762  00794F  75                 	db	117	;'u'
  2763  007950  6C                 	db	108	;'l'
  2764  007951  65                 	db	101	;'e'
  2765  007952  0D                 	db	13
  2766  007953  0A                 	db	10
  2767  007954  00                 	db	0
  2768  007955                     STR_107:
  2769  007955  2D                 	db	45
  2770  007956  45                 	db	69	;'E'
  2771  007957  52                 	db	82	;'R'
  2772  007958  52                 	db	82	;'R'
  2773  007959  4F                 	db	79	;'O'
  2774  00795A  52                 	db	82	;'R'
  2775  00795B  20                 	db	32
  2776  00795C  2D                 	db	45
  2777  00795D  20                 	db	32
  2778  00795E  6D                 	db	109	;'m'
  2779  00795F  61                 	db	97	;'a'
  2780  007960  73                 	db	115	;'s'
  2781  007961  6B                 	db	107	;'k'
  2782  007962  20                 	db	32
  2783  007963  66                 	db	102	;'f'
  2784  007964  6F                 	db	111	;'o'
  2785  007965  72                 	db	114	;'r'
  2786  007966  20                 	db	32
  2787  007967  63                 	db	99	;'c'
  2788  007968  6C                 	db	108	;'l'
  2789  007969  61                 	db	97	;'a'
  2790  00796A  73                 	db	115	;'s'
  2791  00796B  73                 	db	115	;'s'
  2792  00796C  20                 	db	32
  2793  00796D  69                 	db	105	;'i'
  2794  00796E  73                 	db	115	;'s'
  2795  00796F  20                 	db	32
  2796  007970  6D                 	db	109	;'m'
  2797  007971  69                 	db	105	;'i'
  2798  007972  73                 	db	115	;'s'
  2799  007973  73                 	db	115	;'s'
  2800  007974  69                 	db	105	;'i'
  2801  007975  6E                 	db	110	;'n'
  2802  007976  67                 	db	103	;'g'
  2803  007977  0D                 	db	13
  2804  007978  0A                 	db	10
  2805  007979  00                 	db	0
  2806  00797A                     STR_109:
  2807  00797A  2D                 	db	45
  2808  00797B  45                 	db	69	;'E'
  2809  00797C  52                 	db	82	;'R'
  2810  00797D  52                 	db	82	;'R'
  2811  00797E  4F                 	db	79	;'O'
  2812  00797F  52                 	db	82	;'R'
  2813  007980  20                 	db	32
  2814  007981  2D                 	db	45
  2815  007982  20                 	db	32
  2816  007983  6D                 	db	109	;'m'
  2817  007984  61                 	db	97	;'a'
  2818  007985  73                 	db	115	;'s'
  2819  007986  6B                 	db	107	;'k'
  2820  007987  20                 	db	32
  2821  007988  66                 	db	102	;'f'
  2822  007989  6F                 	db	111	;'o'
  2823  00798A  72                 	db	114	;'r'
  2824  00798B  20                 	db	32
  2825  00798C  74                 	db	116	;'t'
  2826  00798D  79                 	db	121	;'y'
  2827  00798E  70                 	db	112	;'p'
  2828  00798F  65                 	db	101	;'e'
  2829  007990  20                 	db	32
  2830  007991  69                 	db	105	;'i'
  2831  007992  73                 	db	115	;'s'
  2832  007993  20                 	db	32
  2833  007994  6D                 	db	109	;'m'
  2834  007995  69                 	db	105	;'i'
  2835  007996  73                 	db	115	;'s'
  2836  007997  73                 	db	115	;'s'
  2837  007998  69                 	db	105	;'i'
  2838  007999  6E                 	db	110	;'n'
  2839  00799A  67                 	db	103	;'g'
  2840  00799B  0D                 	db	13
  2841  00799C  0A                 	db	10
  2842  00799D  00                 	db	0
  2843  00799E                     STR_3:
  2844  00799E  68                 	db	104	;'h'
  2845  00799F  74                 	db	116	;'t'
  2846  0079A0  74                 	db	116	;'t'
  2847  0079A1  70                 	db	112	;'p'
  2848  0079A2  3A                 	db	58	;':'
  2849  0079A3  2F                 	db	47
  2850  0079A4  2F                 	db	47
  2851  0079A5  77                 	db	119	;'w'
  2852  0079A6  77                 	db	119	;'w'
  2853  0079A7  77                 	db	119	;'w'
  2854  0079A8  2E                 	db	46
  2855  0079A9  70                 	db	112	;'p'
  2856  0079AA  61                 	db	97	;'a'
  2857  0079AB  72                 	db	114	;'r'
  2858  0079AC  61                 	db	97	;'a'
  2859  0079AD  64                 	db	100	;'d'
  2860  0079AE  69                 	db	105	;'i'
  2861  0079AF  73                 	db	115	;'s'
  2862  0079B0  65                 	db	101	;'e'
  2863  0079B1  6F                 	db	111	;'o'
  2864  0079B2  66                 	db	102	;'f'
  2865  0079B3  74                 	db	116	;'t'
  2866  0079B4  68                 	db	104	;'h'
  2867  0079B5  65                 	db	101	;'e'
  2868  0079B6  66                 	db	102	;'f'
  2869  0079B7  72                 	db	114	;'r'
  2870  0079B8  6F                 	db	111	;'o'
  2871  0079B9  67                 	db	103	;'g'
  2872  0079BA  2E                 	db	46
  2873  0079BB  63                 	db	99	;'c'
  2874  0079BC  6F                 	db	111	;'o'
  2875  0079BD  6D                 	db	109	;'m'
  2876  0079BE  0D                 	db	13
  2877  0079BF  0A                 	db	10
  2878  0079C0  00                 	db	0
  2879  0079C1                     STR_79:
  2880  0079C1  2B                 	db	43
  2881  0079C2  4F                 	db	79	;'O'
  2882  0079C3  4B                 	db	75	;'K'
  2883  0079C4  20                 	db	32
  2884  0079C5  2D                 	db	45
  2885  0079C6  20                 	db	32
  2886  0079C7  56                 	db	86	;'V'
  2887  0079C8  61                 	db	97	;'a'
  2888  0079C9  6C                 	db	108	;'l'
  2889  0079CA  75                 	db	117	;'u'
  2890  0079CB  65                 	db	101	;'e'
  2891  0079CC  20                 	db	32
  2892  0079CD  77                 	db	119	;'w'
  2893  0079CE  72                 	db	114	;'r'
  2894  0079CF  69                 	db	105	;'i'
  2895  0079D0  74                 	db	116	;'t'
  2896  0079D1  74                 	db	116	;'t'
  2897  0079D2  65                 	db	101	;'e'
  2898  0079D3  6E                 	db	110	;'n'
  2899  0079D4  20                 	db	32
  2900  0079D5  73                 	db	115	;'s'
  2901  0079D6  75                 	db	117	;'u'
  2902  0079D7  63                 	db	99	;'c'
  2903  0079D8  63                 	db	99	;'c'
  2904  0079D9  65                 	db	101	;'e'
  2905  0079DA  73                 	db	115	;'s'
  2906  0079DB  73                 	db	115	;'s'
  2907  0079DC  66                 	db	102	;'f'
  2908  0079DD  75                 	db	117	;'u'
  2909  0079DE  6C                 	db	108	;'l'
  2910  0079DF  6C                 	db	108	;'l'
  2911  0079E0  79                 	db	121	;'y'
  2912  0079E1  0D                 	db	13
  2913  0079E2  0A                 	db	10
  2914  0079E3  00                 	db	0
  2915  0079E4                     STR_230:
  2916  0079E4  53                 	db	83	;'S'
  2917  0079E5  45                 	db	69	;'E'
  2918  0079E6  54                 	db	84	;'T'
  2919  0079E7  20                 	db	32
  2920  0079E8  2D                 	db	45
  2921  0079E9  20                 	db	32
  2922  0079EA  50                 	db	80	;'P'
  2923  0079EB  65                 	db	101	;'e'
  2924  0079EC  72                 	db	114	;'r'
  2925  0079ED  73                 	db	115	;'s'
  2926  0079EE  69                 	db	105	;'i'
  2927  0079EF  73                 	db	115	;'s'
  2928  0079F0  74                 	db	116	;'t'
  2929  0079F1  65                 	db	101	;'e'
  2930  0079F2  6E                 	db	110	;'n'
  2931  0079F3  74                 	db	116	;'t'
  2932  0079F4  20                 	db	32
  2933  0079F5  66                 	db	102	;'f'
  2934  0079F6  75                 	db	117	;'u'
  2935  0079F7  6E                 	db	110	;'n'
  2936  0079F8  63                 	db	99	;'c'
  2937  0079F9  74                 	db	116	;'t'
  2938  0079FA  69                 	db	105	;'i'
  2939  0079FB  6F                 	db	111	;'o'
  2940  0079FC  6E                 	db	110	;'n'
  2941  0079FD  61                 	db	97	;'a'
  2942  0079FE  6C                 	db	108	;'l'
  2943  0079FF  69                 	db	105	;'i'
  2944  007A00  74                 	db	116	;'t'
  2945  007A01  79                 	db	121	;'y'
  2946  007A02  2E                 	db	46
  2947  007A03  0D                 	db	13
  2948  007A04  0A                 	db	10
  2949  007A05  00                 	db	0
  2950  007A06                     STR_64:
  2951  007A06  2D                 	db	45
  2952  007A07  45                 	db	69	;'E'
  2953  007A08  52                 	db	82	;'R'
  2954  007A09  52                 	db	82	;'R'
  2955  007A0A  4F                 	db	79	;'O'
  2956  007A0B  52                 	db	82	;'R'
  2957  007A0C  20                 	db	32
  2958  007A0D  2D                 	db	45
  2959  007A0E  20                 	db	32
  2960  007A0F  55                 	db	85	;'U'
  2961  007A10  6E                 	db	110	;'n'
  2962  007A11  61                 	db	97	;'a'
  2963  007A12  62                 	db	98	;'b'
  2964  007A13  6C                 	db	108	;'l'
  2965  007A14  65                 	db	101	;'e'
  2966  007A15  20                 	db	32
  2967  007A16  74                 	db	116	;'t'
  2968  007A17  6F                 	db	111	;'o'
  2969  007A18  20                 	db	32
  2970  007A19  72                 	db	114	;'r'
  2971  007A1A  65                 	db	101	;'e'
  2972  007A1B  61                 	db	97	;'a'
  2973  007A1C  64                 	db	100	;'d'
  2974  007A1D  20                 	db	32
  2975  007A1E  72                 	db	114	;'r'
  2976  007A1F  65                 	db	101	;'e'
  2977  007A20  67                 	db	103	;'g'
  2978  007A21  69                 	db	105	;'i'
  2979  007A22  73                 	db	115	;'s'
  2980  007A23  74                 	db	116	;'t'
  2981  007A24  65                 	db	101	;'e'
  2982  007A25  72                 	db	114	;'r'
  2983  007A26  20                 	db	32
  2984  007A27  00                 	db	0
  2985  007A28                     STR_219:
  2986  007A28  53                 	db	83	;'S'
  2987  007A29  54                 	db	84	;'T'
  2988  007A2A  41                 	db	65	;'A'
  2989  007A2B  54                 	db	84	;'T'
  2990  007A2C  20                 	db	32
  2991  007A2D  2D                 	db	45
  2992  007A2E  20                 	db	32
  2993  007A2F  44                 	db	68	;'D'
  2994  007A30  69                 	db	105	;'i'
  2995  007A31  73                 	db	115	;'s'
  2996  007A32  70                 	db	112	;'p'
  2997  007A33  6C                 	db	108	;'l'
  2998  007A34  61                 	db	97	;'a'
  2999  007A35  79                 	db	121	;'y'
  3000  007A36  20                 	db	32
  3001  007A37  43                 	db	67	;'C'
  3002  007A38  41                 	db	65	;'A'
  3003  007A39  4E                 	db	78	;'N'
  3004  007A3A  20                 	db	32
  3005  007A3B  73                 	db	115	;'s'
  3006  007A3C  74                 	db	116	;'t'
  3007  007A3D  61                 	db	97	;'a'
  3008  007A3E  74                 	db	116	;'t'
  3009  007A3F  69                 	db	105	;'i'
  3010  007A40  73                 	db	115	;'s'
  3011  007A41  74                 	db	116	;'t'
  3012  007A42  69                 	db	105	;'i'
  3013  007A43  63                 	db	99	;'c'
  3014  007A44  73                 	db	115	;'s'
  3015  007A45  2E                 	db	46
  3016  007A46  0D                 	db	13
  3017  007A47  0A                 	db	10
  3018  007A48  00                 	db	0
  3019  007A49                     STR_37:
  3020  007A49  2D                 	db	45
  3021  007A4A  45                 	db	69	;'E'
  3022  007A4B  52                 	db	82	;'R'
  3023  007A4C  52                 	db	82	;'R'
  3024  007A4D  4F                 	db	79	;'O'
  3025  007A4E  52                 	db	82	;'R'
  3026  007A4F  20                 	db	32
  3027  007A50  2D                 	db	45
  3028  007A51  20                 	db	32
  3029  007A52  46                 	db	70	;'F'
  3030  007A53  61                 	db	97	;'a'
  3031  007A54  69                 	db	105	;'i'
  3032  007A55  6C                 	db	108	;'l'
  3033  007A56  65                 	db	101	;'e'
  3034  007A57  64                 	db	100	;'d'
  3035  007A58  20                 	db	32
  3036  007A59  74                 	db	116	;'t'
  3037  007A5A  6F                 	db	111	;'o'
  3038  007A5B  20                 	db	32
  3039  007A5C  73                 	db	115	;'s'
  3040  007A5D  65                 	db	101	;'e'
  3041  007A5E  6E                 	db	110	;'n'
  3042  007A5F  64                 	db	100	;'d'
  3043  007A60  20                 	db	32
  3044  007A61  65                 	db	101	;'e'
  3045  007A62  76                 	db	118	;'v'
  3046  007A63  65                 	db	101	;'e'
  3047  007A64  6E                 	db	110	;'n'
  3048  007A65  74                 	db	116	;'t'
  3049  007A66  2E                 	db	46
  3050  007A67  0D                 	db	13
  3051  007A68  0A                 	db	10
  3052  007A69  00                 	db	0
  3053  007A6A                     STR_130:
  3054  007A6A  2D                 	db	45
  3055  007A6B  45                 	db	69	;'E'
  3056  007A6C  52                 	db	82	;'R'
  3057  007A6D  52                 	db	82	;'R'
  3058  007A6E  4F                 	db	79	;'O'
  3059  007A6F  52                 	db	82	;'R'
  3060  007A70  20                 	db	32
  3061  007A71  2D                 	db	45
  3062  007A72  20                 	db	32
  3063  007A73  55                 	db	85	;'U'
  3064  007A74  6E                 	db	110	;'n'
  3065  007A75  6B                 	db	107	;'k'
  3066  007A76  6E                 	db	110	;'n'
  3067  007A77  6F                 	db	111	;'o'
  3068  007A78  77                 	db	119	;'w'
  3069  007A79  6E                 	db	110	;'n'
  3070  007A7A  20                 	db	32
  3071  007A7B  27                 	db	39
  3072  007A7C  53                 	db	83	;'S'
  3073  007A7D  45                 	db	69	;'E'
  3074  007A7E  54                 	db	84	;'T'
  3075  007A7F  27                 	db	39
  3076  007A80  20                 	db	32
  3077  007A81  63                 	db	99	;'c'
  3078  007A82  6F                 	db	111	;'o'
  3079  007A83  6D                 	db	109	;'m'
  3080  007A84  6D                 	db	109	;'m'
  3081  007A85  61                 	db	97	;'a'
  3082  007A86  6E                 	db	110	;'n'
  3083  007A87  64                 	db	100	;'d'
  3084  007A88  0D                 	db	13
  3085  007A89  0A                 	db	10
  3086  007A8A  00                 	db	0
  3087  007A8B                     STR_80:
  3088  007A8B  2D                 	db	45
  3089  007A8C  45                 	db	69	;'E'
  3090  007A8D  52                 	db	82	;'R'
  3091  007A8E  52                 	db	82	;'R'
  3092  007A8F  4F                 	db	79	;'O'
  3093  007A90  52                 	db	82	;'R'
  3094  007A91  20                 	db	32
  3095  007A92  2D                 	db	45
  3096  007A93  20                 	db	32
  3097  007A94  46                 	db	70	;'F'
  3098  007A95  61                 	db	97	;'a'
  3099  007A96  69                 	db	105	;'i'
  3100  007A97  6C                 	db	108	;'l'
  3101  007A98  65                 	db	101	;'e'
  3102  007A99  64                 	db	100	;'d'
  3103  007A9A  20                 	db	32
  3104  007A9B  74                 	db	116	;'t'
  3105  007A9C  6F                 	db	111	;'o'
  3106  007A9D  20                 	db	32
  3107  007A9E  77                 	db	119	;'w'
  3108  007A9F  72                 	db	114	;'r'
  3109  007AA0  69                 	db	105	;'i'
  3110  007AA1  74                 	db	116	;'t'
  3111  007AA2  65                 	db	101	;'e'
  3112  007AA3  20                 	db	32
  3113  007AA4  76                 	db	118	;'v'
  3114  007AA5  61                 	db	97	;'a'
  3115  007AA6  6C                 	db	108	;'l'
  3116  007AA7  75                 	db	117	;'u'
  3117  007AA8  65                 	db	101	;'e'
  3118  007AA9  0D                 	db	13
  3119  007AAA  0A                 	db	10
  3120  007AAB  00                 	db	0
  3121  007AAC                     STR_53:
  3122  007AAC  2D                 	db	45
  3123  007AAD  45                 	db	69	;'E'
  3124  007AAE  52                 	db	82	;'R'
  3125  007AAF  52                 	db	82	;'R'
  3126  007AB0  4F                 	db	79	;'O'
  3127  007AB1  52                 	db	82	;'R'
  3128  007AB2  20                 	db	32
  3129  007AB3  2D                 	db	45
  3130  007AB4  20                 	db	32
  3131  007AB5  4E                 	db	78	;'N'
  3132  007AB6  65                 	db	101	;'e'
  3133  007AB7  65                 	db	101	;'e'
  3134  007AB8  64                 	db	100	;'d'
  3135  007AB9  73                 	db	115	;'s'
  3136  007ABA  20                 	db	32
  3137  007ABB  5B                 	db	91	;'['
  3138  007ABC  70                 	db	112	;'p'
  3139  007ABD  61                 	db	97	;'a'
  3140  007ABE  67                 	db	103	;'g'
  3141  007ABF  65                 	db	101	;'e'
  3142  007AC0  3A                 	db	58	;':'
  3143  007AC1  5D                 	db	93	;']'
  3144  007AC2  72                 	db	114	;'r'
  3145  007AC3  65                 	db	101	;'e'
  3146  007AC4  67                 	db	103	;'g'
  3147  007AC5  69                 	db	105	;'i'
  3148  007AC6  73                 	db	115	;'s'
  3149  007AC7  74                 	db	116	;'t'
  3150  007AC8  65                 	db	101	;'e'
  3151  007AC9  72                 	db	114	;'r'
  3152  007ACA  0D                 	db	13
  3153  007ACB  0A                 	db	10
  3154  007ACC  00                 	db	0
  3155  007ACD                     STR_125:
  3156  007ACD  2B                 	db	43
  3157  007ACE  4F                 	db	79	;'O'
  3158  007ACF  4B                 	db	75	;'K'
  3159  007AD0  20                 	db	32
  3160  007AD1  2D                 	db	45
  3161  007AD2  20                 	db	32
  3162  007AD3  4D                 	db	77	;'M'
  3163  007AD4  6F                 	db	111	;'o'
  3164  007AD5  64                 	db	100	;'d'
  3165  007AD6  65                 	db	101	;'e'
  3166  007AD7  20                 	db	32
  3167  007AD8  69                 	db	105	;'i'
  3168  007AD9  73                 	db	115	;'s'
  3169  007ADA  20                 	db	32
  3170  007ADB  6E                 	db	110	;'n'
  3171  007ADC  6F                 	db	111	;'o'
  3172  007ADD  77                 	db	119	;'w'
  3173  007ADE  20                 	db	32
  3174  007ADF  56                 	db	86	;'V'
  3175  007AE0  53                 	db	83	;'S'
  3176  007AE1  43                 	db	67	;'C'
  3177  007AE2  50                 	db	80	;'P'
  3178  007AE3  20                 	db	32
  3179  007AE4  44                 	db	68	;'D'
  3180  007AE5  72                 	db	114	;'r'
  3181  007AE6  69                 	db	105	;'i'
  3182  007AE7  76                 	db	118	;'v'
  3183  007AE8  65                 	db	101	;'e'
  3184  007AE9  72                 	db	114	;'r'
  3185  007AEA  0D                 	db	13
  3186  007AEB  0A                 	db	10
  3187  007AEC  00                 	db	0
  3188  007AED                     STR_7:
  3189  007AED  57                 	db	87	;'W'
  3190  007AEE  69                 	db	105	;'i'
  3191  007AEF  6C                 	db	108	;'l'
  3192  007AF0  6C                 	db	108	;'l'
  3193  007AF1  20                 	db	32
  3194  007AF2  65                 	db	101	;'e'
  3195  007AF3  6E                 	db	110	;'n'
  3196  007AF4  74                 	db	116	;'t'
  3197  007AF5  65                 	db	101	;'e'
  3198  007AF6  72                 	db	114	;'r'
  3199  007AF7  20                 	db	32
  3200  007AF8  62                 	db	98	;'b'
  3201  007AF9  6F                 	db	111	;'o'
  3202  007AFA  6F                 	db	111	;'o'
  3203  007AFB  74                 	db	116	;'t'
  3204  007AFC  6C                 	db	108	;'l'
  3205  007AFD  6F                 	db	111	;'o'
  3206  007AFE  61                 	db	97	;'a'
  3207  007AFF  64                 	db	100	;'d'
  3208  007B00  65                 	db	101	;'e'
  3209  007B01  72                 	db	114	;'r'
  3210  007B02  20                 	db	32
  3211  007B03  6E                 	db	110	;'n'
  3212  007B04  6F                 	db	111	;'o'
  3213  007B05  77                 	db	119	;'w'
  3214  007B06  2E                 	db	46
  3215  007B07  2E                 	db	46
  3216  007B08  2E                 	db	46
  3217  007B09  0D                 	db	13
  3218  007B0A  0A                 	db	10
  3219  007B0B  00                 	db	0
  3220  007B0C                     STR_213:
  3221  007B0C  43                 	db	67	;'C'
  3222  007B0D  4C                 	db	76	;'L'
  3223  007B0E  4F                 	db	79	;'O'
  3224  007B0F  53                 	db	83	;'S'
  3225  007B10  45                 	db	69	;'E'
  3226  007B11  20                 	db	32
  3227  007B12  2D                 	db	45
  3228  007B13  20                 	db	32
  3229  007B14  43                 	db	67	;'C'
  3230  007B15  6C                 	db	108	;'l'
  3231  007B16  6F                 	db	111	;'o'
  3232  007B17  73                 	db	115	;'s'
  3233  007B18  65                 	db	101	;'e'
  3234  007B19  20                 	db	32
  3235  007B1A  43                 	db	67	;'C'
  3236  007B1B  41                 	db	65	;'A'
  3237  007B1C  4E                 	db	78	;'N'
  3238  007B1D  20                 	db	32
  3239  007B1E  69                 	db	105	;'i'
  3240  007B1F  6E                 	db	110	;'n'
  3241  007B20  74                 	db	116	;'t'
  3242  007B21  65                 	db	101	;'e'
  3243  007B22  72                 	db	114	;'r'
  3244  007B23  66                 	db	102	;'f'
  3245  007B24  61                 	db	97	;'a'
  3246  007B25  63                 	db	99	;'c'
  3247  007B26  65                 	db	101	;'e'
  3248  007B27  2E                 	db	46
  3249  007B28  0D                 	db	13
  3250  007B29  0A                 	db	10
  3251  007B2A  00                 	db	0
  3252  007B2B                     STR_5:
  3253  007B2B  54                 	db	84	;'T'
  3254  007B2C  65                 	db	101	;'e'
  3255  007B2D  6D                 	db	109	;'m'
  3256  007B2E  70                 	db	112	;'p'
  3257  007B2F  6F                 	db	111	;'o'
  3258  007B30  72                 	db	114	;'r'
  3259  007B31  61                 	db	97	;'a'
  3260  007B32  72                 	db	114	;'r'
  3261  007B33  79                 	db	121	;'y'
  3262  007B34  20                 	db	32
  3263  007B35  76                 	db	118	;'v'
  3264  007B36  65                 	db	101	;'e'
  3265  007B37  72                 	db	114	;'r'
  3266  007B38  62                 	db	98	;'b'
  3267  007B39  6F                 	db	111	;'o'
  3268  007B3A  73                 	db	115	;'s'
  3269  007B3B  65                 	db	101	;'e'
  3270  007B3C  20                 	db	32
  3271  007B3D  6D                 	db	109	;'m'
  3272  007B3E  6F                 	db	111	;'o'
  3273  007B3F  64                 	db	100	;'d'
  3274  007B40  65                 	db	101	;'e'
  3275  007B41  20                 	db	32
  3276  007B42  73                 	db	115	;'s'
  3277  007B43  65                 	db	101	;'e'
  3278  007B44  74                 	db	116	;'t'
  3279  007B45  0D                 	db	13
  3280  007B46  0A                 	db	10
  3281  007B47  00                 	db	0
  3282  007B48                     STR_123:
  3283  007B48  2B                 	db	43
  3284  007B49  4F                 	db	79	;'O'
  3285  007B4A  4B                 	db	75	;'K'
  3286  007B4B  20                 	db	32
  3287  007B4C  2D                 	db	45
  3288  007B4D  20                 	db	32
  3289  007B4E  4D                 	db	77	;'M'
  3290  007B4F  6F                 	db	111	;'o'
  3291  007B50  64                 	db	100	;'d'
  3292  007B51  65                 	db	101	;'e'
  3293  007B52  20                 	db	32
  3294  007B53  69                 	db	105	;'i'
  3295  007B54  73                 	db	115	;'s'
  3296  007B55  20                 	db	32
  3297  007B56  6E                 	db	110	;'n'
  3298  007B57  6F                 	db	111	;'o'
  3299  007B58  77                 	db	119	;'w'
  3300  007B59  20                 	db	32
  3301  007B5A  76                 	db	118	;'v'
  3302  007B5B  65                 	db	101	;'e'
  3303  007B5C  72                 	db	114	;'r'
  3304  007B5D  62                 	db	98	;'b'
  3305  007B5E  6F                 	db	111	;'o'
  3306  007B5F  73                 	db	115	;'s'
  3307  007B60  65                 	db	101	;'e'
  3308  007B61  0D                 	db	13
  3309  007B62  0A                 	db	10
  3310  007B63  00                 	db	0
  3311  007B64                     STR_208:
  3312  007B64  42                 	db	66	;'B'
  3313  007B65  4F                 	db	79	;'O'
  3314  007B66  4F                 	db	79	;'O'
  3315  007B67  54                 	db	84	;'T'
  3316  007B68  20                 	db	32
  3317  007B69  2D                 	db	45
  3318  007B6A  20                 	db	32
  3319  007B6B  45                 	db	69	;'E'
  3320  007B6C  6E                 	db	110	;'n'
  3321  007B6D  74                 	db	116	;'t'
  3322  007B6E  65                 	db	101	;'e'
  3323  007B6F  72                 	db	114	;'r'
  3324  007B70  20                 	db	32
  3325  007B71  62                 	db	98	;'b'
  3326  007B72  6F                 	db	111	;'o'
  3327  007B73  6F                 	db	111	;'o'
  3328  007B74  74                 	db	116	;'t'
  3329  007B75  6C                 	db	108	;'l'
  3330  007B76  6F                 	db	111	;'o'
  3331  007B77  61                 	db	97	;'a'
  3332  007B78  64                 	db	100	;'d'
  3333  007B79  65                 	db	101	;'e'
  3334  007B7A  72                 	db	114	;'r'
  3335  007B7B  2E                 	db	46
  3336  007B7C  0D                 	db	13
  3337  007B7D  0A                 	db	10
  3338  007B7E  00                 	db	0
  3339  007B7F                     STR_132:
  3340  007B7F  2D                 	db	45
  3341  007B80  45                 	db	69	;'E'
  3342  007B81  52                 	db	82	;'R'
  3343  007B82  52                 	db	82	;'R'
  3344  007B83  4F                 	db	79	;'O'
  3345  007B84  52                 	db	82	;'R'
  3346  007B85  20                 	db	32
  3347  007B86  2D                 	db	45
  3348  007B87  20                 	db	32
  3349  007B88  55                 	db	85	;'U'
  3350  007B89  6E                 	db	110	;'n'
  3351  007B8A  6B                 	db	107	;'k'
  3352  007B8B  6E                 	db	110	;'n'
  3353  007B8C  6F                 	db	111	;'o'
  3354  007B8D  77                 	db	119	;'w'
  3355  007B8E  6E                 	db	110	;'n'
  3356  007B8F  20                 	db	32
  3357  007B90  63                 	db	99	;'c'
  3358  007B91  6F                 	db	111	;'o'
  3359  007B92  6D                 	db	109	;'m'
  3360  007B93  6D                 	db	109	;'m'
  3361  007B94  61                 	db	97	;'a'
  3362  007B95  6E                 	db	110	;'n'
  3363  007B96  64                 	db	100	;'d'
  3364  007B97  0D                 	db	13
  3365  007B98  0A                 	db	10
  3366  007B99  00                 	db	0
  3367  007B9A                     STR_239:
  3368  007B9A  4E                 	db	78	;'N'
  3369  007B9B  6F                 	db	111	;'o'
  3370  007B9C  64                 	db	100	;'d'
  3371  007B9D  65                 	db	101	;'e'
  3372  007B9E  20                 	db	32
  3373  007B9F  66                 	db	102	;'f'
  3374  007BA0  6F                 	db	111	;'o'
  3375  007BA1  75                 	db	117	;'u'
  3376  007BA2  6E                 	db	110	;'n'
  3377  007BA3  64                 	db	100	;'d'
  3378  007BA4  20                 	db	32
  3379  007BA5  77                 	db	119	;'w'
  3380  007BA6  69                 	db	105	;'i'
  3381  007BA7  74                 	db	116	;'t'
  3382  007BA8  68                 	db	104	;'h'
  3383  007BA9  20                 	db	32
  3384  007BAA  6E                 	db	110	;'n'
  3385  007BAB  6F                 	db	111	;'o'
  3386  007BAC  64                 	db	100	;'d'
  3387  007BAD  65                 	db	101	;'e'
  3388  007BAE  20                 	db	32
  3389  007BAF  69                 	db	105	;'i'
  3390  007BB0  64                 	db	100	;'d'
  3391  007BB1  20                 	db	32
  3392  007BB2  3D                 	db	61	;'='
  3393  007BB3  20                 	db	32
  3394  007BB4  00                 	db	0
  3395  007BB5                     STR_127:
  3396  007BB5  2B                 	db	43
  3397  007BB6  4F                 	db	79	;'O'
  3398  007BB7  4B                 	db	75	;'K'
  3399  007BB8  20                 	db	32
  3400  007BB9  2D                 	db	45
  3401  007BBA  20                 	db	32
  3402  007BBB  4D                 	db	77	;'M'
  3403  007BBC  6F                 	db	111	;'o'
  3404  007BBD  64                 	db	100	;'d'
  3405  007BBE  65                 	db	101	;'e'
  3406  007BBF  20                 	db	32
  3407  007BC0  69                 	db	105	;'i'
  3408  007BC1  73                 	db	115	;'s'
  3409  007BC2  20                 	db	32
  3410  007BC3  6E                 	db	110	;'n'
  3411  007BC4  6F                 	db	111	;'o'
  3412  007BC5  77                 	db	119	;'w'
  3413  007BC6  20                 	db	32
  3414  007BC7  53                 	db	83	;'S'
  3415  007BC8  4C                 	db	76	;'L'
  3416  007BC9  43                 	db	67	;'C'
  3417  007BCA  41                 	db	65	;'A'
  3418  007BCB  4E                 	db	78	;'N'
  3419  007BCC  0D                 	db	13
  3420  007BCD  0A                 	db	10
  3421  007BCE  00                 	db	0
  3422  007BCF                     STR_25:
  3423  007BCF  2B                 	db	43
  3424  007BD0  4F                 	db	79	;'O'
  3425  007BD1  4B                 	db	75	;'K'
  3426  007BD2  20                 	db	32
  3427  007BD3  2D                 	db	45
  3428  007BD4  20                 	db	32
  3429  007BD5  4C                 	db	76	;'L'
  3430  007BD6  69                 	db	105	;'i'
  3431  007BD7  73                 	db	115	;'s'
  3432  007BD8  74                 	db	116	;'t'
  3433  007BD9  65                 	db	101	;'e'
  3434  007BDA  6E                 	db	110	;'n'
  3435  007BDB  20                 	db	32
  3436  007BDC  6F                 	db	111	;'o'
  3437  007BDD  6E                 	db	110	;'n'
  3438  007BDE  6C                 	db	108	;'l'
  3439  007BDF  79                 	db	121	;'y'
  3440  007BE0  20                 	db	32
  3441  007BE1  6D                 	db	109	;'m'
  3442  007BE2  6F                 	db	111	;'o'
  3443  007BE3  64                 	db	100	;'d'
  3444  007BE4  65                 	db	101	;'e'
  3445  007BE5  0D                 	db	13
  3446  007BE6  0A                 	db	10
  3447  007BE7  00                 	db	0
  3448  007BE8                     STR_192:
  3449  007BE8  54                 	db	84	;'T'
  3450  007BE9  72                 	db	114	;'r'
  3451  007BEA  61                 	db	97	;'a'
  3452  007BEB  6E                 	db	110	;'n'
  3453  007BEC  73                 	db	115	;'s'
  3454  007BED  6D                 	db	109	;'m'
  3455  007BEE  69                 	db	105	;'i'
  3456  007BEF  74                 	db	116	;'t'
  3457  007BF0  20                 	db	32
  3458  007BF1  45                 	db	69	;'E'
  3459  007BF2  72                 	db	114	;'r'
  3460  007BF3  72                 	db	114	;'r'
  3461  007BF4  6F                 	db	111	;'o'
  3462  007BF5  72                 	db	114	;'r'
  3463  007BF6  20                 	db	32
  3464  007BF7  43                 	db	67	;'C'
  3465  007BF8  6F                 	db	111	;'o'
  3466  007BF9  75                 	db	117	;'u'
  3467  007BFA  6E                 	db	110	;'n'
  3468  007BFB  74                 	db	116	;'t'
  3469  007BFC  65                 	db	101	;'e'
  3470  007BFD  72                 	db	114	;'r'
  3471  007BFE  3A                 	db	58	;':'
  3472  007BFF  20                 	db	32
  3473  007C00  00                 	db	0
  3474  007C01                     STR_216:
  3475  007C01  54                 	db	84	;'T'
  3476  007C02  58                 	db	88	;'X'
  3477  007C03  20                 	db	32
  3478  007C04  2D                 	db	45
  3479  007C05  20                 	db	32
  3480  007C06  53                 	db	83	;'S'
  3481  007C07  65                 	db	101	;'e'
  3482  007C08  6E                 	db	110	;'n'
  3483  007C09  64                 	db	100	;'d'
  3484  007C0A  20                 	db	32
  3485  007C0B  43                 	db	67	;'C'
  3486  007C0C  41                 	db	65	;'A'
  3487  007C0D  4E                 	db	78	;'N'
  3488  007C0E  20                 	db	32
  3489  007C0F  66                 	db	102	;'f'
  3490  007C10  72                 	db	114	;'r'
  3491  007C11  61                 	db	97	;'a'
  3492  007C12  6D                 	db	109	;'m'
  3493  007C13  65                 	db	101	;'e'
  3494  007C14  20                 	db	32
  3495  007C15  2E                 	db	46
  3496  007C16  0D                 	db	13
  3497  007C17  0A                 	db	10
  3498  007C18  00                 	db	0
  3499  007C19                     STR_226:
  3500  007C19  46                 	db	70	;'F'
  3501  007C1A  49                 	db	73	;'I'
  3502  007C1B  4C                 	db	76	;'L'
  3503  007C1C  54                 	db	84	;'T'
  3504  007C1D  45                 	db	69	;'E'
  3505  007C1E  52                 	db	82	;'R'
  3506  007C1F  20                 	db	32
  3507  007C20  2D                 	db	45
  3508  007C21  20                 	db	32
  3509  007C22  53                 	db	83	;'S'
  3510  007C23  65                 	db	101	;'e'
  3511  007C24  74                 	db	116	;'t'
  3512  007C25  20                 	db	32
  3513  007C26  66                 	db	102	;'f'
  3514  007C27  69                 	db	105	;'i'
  3515  007C28  6C                 	db	108	;'l'
  3516  007C29  74                 	db	116	;'t'
  3517  007C2A  65                 	db	101	;'e'
  3518  007C2B  72                 	db	114	;'r'
  3519  007C2C  20                 	db	32
  3520  007C2D  2E                 	db	46
  3521  007C2E  0D                 	db	13
  3522  007C2F  0A                 	db	10
  3523  007C30  00                 	db	0
  3524  007C31                     STR_51:
  3525  007C31  2D                 	db	45
  3526  007C32  45                 	db	69	;'E'
  3527  007C33  52                 	db	82	;'R'
  3528  007C34  52                 	db	82	;'R'
  3529  007C35  4F                 	db	79	;'O'
  3530  007C36  52                 	db	82	;'R'
  3531  007C37  20                 	db	32
  3532  007C38  2D                 	db	45
  3533  007C39  20                 	db	32
  3534  007C3A  4E                 	db	78	;'N'
  3535  007C3B  65                 	db	101	;'e'
  3536  007C3C  65                 	db	101	;'e'
  3537  007C3D  64                 	db	100	;'d'
  3538  007C3E  73                 	db	115	;'s'
  3539  007C3F  20                 	db	32
  3540  007C40  6E                 	db	110	;'n'
  3541  007C41  6F                 	db	111	;'o'
  3542  007C42  64                 	db	100	;'d'
  3543  007C43  65                 	db	101	;'e'
  3544  007C44  69                 	db	105	;'i'
  3545  007C45  64                 	db	100	;'d'
  3546  007C46  0D                 	db	13
  3547  007C47  0A                 	db	10
  3548  007C48  00                 	db	0
  3549  007C49                     STR_28:
  3550  007C49  2D                 	db	45
  3551  007C4A  45                 	db	69	;'E'
  3552  007C4B  52                 	db	82	;'R'
  3553  007C4C  52                 	db	82	;'R'
  3554  007C4D  4F                 	db	79	;'O'
  3555  007C4E  52                 	db	82	;'R'
  3556  007C4F  20                 	db	32
  3557  007C50  2D                 	db	45
  3558  007C51  20                 	db	32
  3559  007C52  55                 	db	85	;'U'
  3560  007C53  6E                 	db	110	;'n'
  3561  007C54  6B                 	db	107	;'k'
  3562  007C55  6E                 	db	110	;'n'
  3563  007C56  6F                 	db	111	;'o'
  3564  007C57  77                 	db	119	;'w'
  3565  007C58  6E                 	db	110	;'n'
  3566  007C59  20                 	db	32
  3567  007C5A  6D                 	db	109	;'m'
  3568  007C5B  6F                 	db	111	;'o'
  3569  007C5C  64                 	db	100	;'d'
  3570  007C5D  65                 	db	101	;'e'
  3571  007C5E  0D                 	db	13
  3572  007C5F  0A                 	db	10
  3573  007C60  00                 	db	0
  3574  007C61                     STR_78:
  3575  007C61  2D                 	db	45
  3576  007C62  45                 	db	69	;'E'
  3577  007C63  52                 	db	82	;'R'
  3578  007C64  52                 	db	82	;'R'
  3579  007C65  4F                 	db	79	;'O'
  3580  007C66  52                 	db	82	;'R'
  3581  007C67  20                 	db	32
  3582  007C68  2D                 	db	45
  3583  007C69  20                 	db	32
  3584  007C6A  4E                 	db	78	;'N'
  3585  007C6B  65                 	db	101	;'e'
  3586  007C6C  65                 	db	101	;'e'
  3587  007C6D  64                 	db	100	;'d'
  3588  007C6E  20                 	db	32
  3589  007C6F  61                 	db	97	;'a'
  3590  007C70  20                 	db	32
  3591  007C71  76                 	db	118	;'v'
  3592  007C72  61                 	db	97	;'a'
  3593  007C73  6C                 	db	108	;'l'
  3594  007C74  75                 	db	117	;'u'
  3595  007C75  65                 	db	101	;'e'
  3596  007C76  0D                 	db	13
  3597  007C77  0A                 	db	10
  3598  007C78  00                 	db	0
  3599  007C79                     STR_199:
  3600  007C79  52                 	db	82	;'R'
  3601  007C7A  65                 	db	101	;'e'
  3602  007C7B  63                 	db	99	;'c'
  3603  007C7C  65                 	db	101	;'e'
  3604  007C7D  69                 	db	105	;'i'
  3605  007C7E  76                 	db	118	;'v'
  3606  007C7F  65                 	db	101	;'e'
  3607  007C80  20                 	db	32
  3608  007C81  45                 	db	69	;'E'
  3609  007C82  72                 	db	114	;'r'
  3610  007C83  72                 	db	114	;'r'
  3611  007C84  6F                 	db	111	;'o'
  3612  007C85  72                 	db	114	;'r'
  3613  007C86  20                 	db	32
  3614  007C87  43                 	db	67	;'C'
  3615  007C88  6F                 	db	111	;'o'
  3616  007C89  75                 	db	117	;'u'
  3617  007C8A  6E                 	db	110	;'n'
  3618  007C8B  74                 	db	116	;'t'
  3619  007C8C  65                 	db	101	;'e'
  3620  007C8D  72                 	db	114	;'r'
  3621  007C8E  3A                 	db	58	;':'
  3622  007C8F  20                 	db	32
  3623  007C90  00                 	db	0
  3624  007C91                     STR_184:
  3625  007C91  55                 	db	85	;'U'
  3626  007C92  41                 	db	65	;'A'
  3627  007C93  52                 	db	82	;'R'
  3628  007C94  54                 	db	84	;'T'
  3629  007C95  20                 	db	32
  3630  007C96  52                 	db	82	;'R'
  3631  007C97  65                 	db	101	;'e'
  3632  007C98  63                 	db	99	;'c'
  3633  007C99  65                 	db	101	;'e'
  3634  007C9A  69                 	db	105	;'i'
  3635  007C9B  76                 	db	118	;'v'
  3636  007C9C  65                 	db	101	;'e'
  3637  007C9D  20                 	db	32
  3638  007C9E  6F                 	db	111	;'o'
  3639  007C9F  76                 	db	118	;'v'
  3640  007CA0  65                 	db	101	;'e'
  3641  007CA1  72                 	db	114	;'r'
  3642  007CA2  72                 	db	114	;'r'
  3643  007CA3  75                 	db	117	;'u'
  3644  007CA4  6E                 	db	110	;'n'
  3645  007CA5  73                 	db	115	;'s'
  3646  007CA6  3A                 	db	58	;':'
  3647  007CA7  20                 	db	32
  3648  007CA8  00                 	db	0
  3649  007CA9                     STR_180:
  3650  007CA9  43                 	db	67	;'C'
  3651  007CAA  41                 	db	65	;'A'
  3652  007CAB  4E                 	db	78	;'N'
  3653  007CAC  20                 	db	32
  3654  007CAD  54                 	db	84	;'T'
  3655  007CAE  72                 	db	114	;'r'
  3656  007CAF  61                 	db	97	;'a'
  3657  007CB0  6E                 	db	110	;'n'
  3658  007CB1  73                 	db	115	;'s'
  3659  007CB2  6D                 	db	109	;'m'
  3660  007CB3  69                 	db	105	;'i'
  3661  007CB4  74                 	db	116	;'t'
  3662  007CB5  20                 	db	32
  3663  007CB6  6F                 	db	111	;'o'
  3664  007CB7  76                 	db	118	;'v'
  3665  007CB8  65                 	db	101	;'e'
  3666  007CB9  72                 	db	114	;'r'
  3667  007CBA  72                 	db	114	;'r'
  3668  007CBB  75                 	db	117	;'u'
  3669  007CBC  6E                 	db	110	;'n'
  3670  007CBD  73                 	db	115	;'s'
  3671  007CBE  3A                 	db	58	;':'
  3672  007CBF  20                 	db	32
  3673  007CC0  00                 	db	0
  3674  007CC1                     STR_218:
  3675  007CC1  52                 	db	82	;'R'
  3676  007CC2  58                 	db	88	;'X'
  3677  007CC3  20                 	db	32
  3678  007CC4  2D                 	db	45
  3679  007CC5  20                 	db	32
  3680  007CC6  52                 	db	82	;'R'
  3681  007CC7  65                 	db	101	;'e'
  3682  007CC8  61                 	db	97	;'a'
  3683  007CC9  64                 	db	100	;'d'
  3684  007CCA  20                 	db	32
  3685  007CCB  43                 	db	67	;'C'
  3686  007CCC  41                 	db	65	;'A'
  3687  007CCD  4E                 	db	78	;'N'
  3688  007CCE  20                 	db	32
  3689  007CCF  66                 	db	102	;'f'
  3690  007CD0  72                 	db	114	;'r'
  3691  007CD1  61                 	db	97	;'a'
  3692  007CD2  6D                 	db	109	;'m'
  3693  007CD3  65                 	db	101	;'e'
  3694  007CD4  2E                 	db	46
  3695  007CD5  0D                 	db	13
  3696  007CD6  0A                 	db	10
  3697  007CD7  00                 	db	0
  3698  007CD8                     STR_176:
  3699  007CD8  43                 	db	67	;'C'
  3700  007CD9  41                 	db	65	;'A'
  3701  007CDA  4E                 	db	78	;'N'
  3702  007CDB  20                 	db	32
  3703  007CDC  52                 	db	82	;'R'
  3704  007CDD  65                 	db	101	;'e'
  3705  007CDE  63                 	db	99	;'c'
  3706  007CDF  65                 	db	101	;'e'
  3707  007CE0  69                 	db	105	;'i'
  3708  007CE1  76                 	db	118	;'v'
  3709  007CE2  65                 	db	101	;'e'
  3710  007CE3  20                 	db	32
  3711  007CE4  6F                 	db	111	;'o'
  3712  007CE5  76                 	db	118	;'v'
  3713  007CE6  65                 	db	101	;'e'
  3714  007CE7  72                 	db	114	;'r'
  3715  007CE8  72                 	db	114	;'r'
  3716  007CE9  75                 	db	117	;'u'
  3717  007CEA  6E                 	db	110	;'n'
  3718  007CEB  73                 	db	115	;'s'
  3719  007CEC  3A                 	db	58	;':'
  3720  007CED  20                 	db	32
  3721  007CEE  00                 	db	0
  3722  007CEF                     STR_261:
  3723  007CEF  55                 	db	85	;'U'
  3724  007CF0  6E                 	db	110	;'n'
  3725  007CF1  6B                 	db	107	;'k'
  3726  007CF2  6E                 	db	110	;'n'
  3727  007CF3  6F                 	db	111	;'o'
  3728  007CF4  77                 	db	119	;'w'
  3729  007CF5  6E                 	db	110	;'n'
  3730  007CF6  20                 	db	32
  3731  007CF7  28                 	db	40
  3732  007CF8  56                 	db	86	;'V'
  3733  007CF9  65                 	db	101	;'e'
  3734  007CFA  72                 	db	114	;'r'
  3735  007CFB  62                 	db	98	;'b'
  3736  007CFC  6F                 	db	111	;'o'
  3737  007CFD  73                 	db	115	;'s'
  3738  007CFE  65                 	db	101	;'e'
  3739  007CFF  20                 	db	32
  3740  007D00  75                 	db	117	;'u'
  3741  007D01  73                 	db	115	;'s'
  3742  007D02  65                 	db	101	;'e'
  3743  007D03  64                 	db	100	;'d'
  3744  007D04  29                 	db	41
  3745  007D05  00                 	db	0
  3746  007D06                     STR_24:
  3747  007D06  2B                 	db	43
  3748  007D07  4F                 	db	79	;'O'
  3749  007D08  4B                 	db	75	;'K'
  3750  007D09  20                 	db	32
  3751  007D0A  2D                 	db	45
  3752  007D0B  20                 	db	32
  3753  007D0C  4C                 	db	76	;'L'
  3754  007D0D  6F                 	db	111	;'o'
  3755  007D0E  6F                 	db	111	;'o'
  3756  007D0F  70                 	db	112	;'p'
  3757  007D10  62                 	db	98	;'b'
  3758  007D11  61                 	db	97	;'a'
  3759  007D12  63                 	db	99	;'c'
  3760  007D13  6B                 	db	107	;'k'
  3761  007D14  20                 	db	32
  3762  007D15  6D                 	db	109	;'m'
  3763  007D16  6F                 	db	111	;'o'
  3764  007D17  64                 	db	100	;'d'
  3765  007D18  65                 	db	101	;'e'
  3766  007D19  0D                 	db	13
  3767  007D1A  0A                 	db	10
  3768  007D1B  00                 	db	0
  3769  007D1C                     STR_168:
  3770  007D1C  52                 	db	82	;'R'
  3771  007D1D  65                 	db	101	;'e'
  3772  007D1E  63                 	db	99	;'c'
  3773  007D1F  65                 	db	101	;'e'
  3774  007D20  69                 	db	105	;'i'
  3775  007D21  76                 	db	118	;'v'
  3776  007D22  65                 	db	101	;'e'
  3777  007D23  64                 	db	100	;'d'
  3778  007D24  20                 	db	32
  3779  007D25  43                 	db	67	;'C'
  3780  007D26  41                 	db	65	;'A'
  3781  007D27  4E                 	db	78	;'N'
  3782  007D28  20                 	db	32
  3783  007D29  66                 	db	102	;'f'
  3784  007D2A  72                 	db	114	;'r'
  3785  007D2B  61                 	db	97	;'a'
  3786  007D2C  6D                 	db	109	;'m'
  3787  007D2D  65                 	db	101	;'e'
  3788  007D2E  73                 	db	115	;'s'
  3789  007D2F  3A                 	db	58	;':'
  3790  007D30  20                 	db	32
  3791  007D31  00                 	db	0
  3792  007D32                     STR_172:
  3793  007D32  52                 	db	82	;'R'
  3794  007D33  65                 	db	101	;'e'
  3795  007D34  63                 	db	99	;'c'
  3796  007D35  65                 	db	101	;'e'
  3797  007D36  69                 	db	105	;'i'
  3798  007D37  76                 	db	118	;'v'
  3799  007D38  65                 	db	101	;'e'
  3800  007D39  64                 	db	100	;'d'
  3801  007D3A  20                 	db	32
  3802  007D3B  43                 	db	67	;'C'
  3803  007D3C  41                 	db	65	;'A'
  3804  007D3D  4E                 	db	78	;'N'
  3805  007D3E  20                 	db	32
  3806  007D3F  62                 	db	98	;'b'
  3807  007D40  79                 	db	121	;'y'
  3808  007D41  74                 	db	116	;'t'
  3809  007D42  65                 	db	101	;'e'
  3810  007D43  73                 	db	115	;'s'
  3811  007D44  3A                 	db	58	;':'
  3812  007D45  20                 	db	32
  3813  007D46  00                 	db	0
  3814  007D47                     STR_228:
  3815  007D47  4D                 	db	77	;'M'
  3816  007D48  41                 	db	65	;'A'
  3817  007D49  53                 	db	83	;'S'
  3818  007D4A  4B                 	db	75	;'K'
  3819  007D4B  20                 	db	32
  3820  007D4C  2D                 	db	45
  3821  007D4D  20                 	db	32
  3822  007D4E  53                 	db	83	;'S'
  3823  007D4F  65                 	db	101	;'e'
  3824  007D50  74                 	db	116	;'t'
  3825  007D51  20                 	db	32
  3826  007D52  6D                 	db	109	;'m'
  3827  007D53  61                 	db	97	;'a'
  3828  007D54  73                 	db	115	;'s'
  3829  007D55  6B                 	db	107	;'k'
  3830  007D56  20                 	db	32
  3831  007D57  2E                 	db	46
  3832  007D58  0D                 	db	13
  3833  007D59  0A                 	db	10
  3834  007D5A  00                 	db	0
  3835  007D5B                     STR_133:
  3836  007D5B  4A                 	db	74	;'J'
  3837  007D5C  46                 	db	70	;'F'
  3838  007D5D  72                 	db	114	;'r'
  3839  007D5E  61                 	db	97	;'a'
  3840  007D5F  6E                 	db	110	;'n'
  3841  007D60  6B                 	db	107	;'k'
  3842  007D61  66                 	db	102	;'f'
  3843  007D62  75                 	db	117	;'u'
  3844  007D63  72                 	db	114	;'r'
  3845  007D64  74                 	db	116	;'t'
  3846  007D65  20                 	db	32
  3847  007D66  52                 	db	82	;'R'
  3848  007D67  53                 	db	83	;'S'
  3849  007D68  2D                 	db	45
  3850  007D69  32                 	db	50	;'2'
  3851  007D6A  33                 	db	51	;'3'
  3852  007D6B  32                 	db	50	;'2'
  3853  007D6C  0D                 	db	13
  3854  007D6D  0A                 	db	10
  3855  007D6E  00                 	db	0
  3856  007D6F                     STR_26:
  3857  007D6F  2B                 	db	43
  3858  007D70  4F                 	db	79	;'O'
  3859  007D71  4B                 	db	75	;'K'
  3860  007D72  20                 	db	32
  3861  007D73  2D                 	db	45
  3862  007D74  20                 	db	32
  3863  007D75  43                 	db	67	;'C'
  3864  007D76  6C                 	db	108	;'l'
  3865  007D77  6F                 	db	111	;'o'
  3866  007D78  73                 	db	115	;'s'
  3867  007D79  65                 	db	101	;'e'
  3868  007D7A  64                 	db	100	;'d'
  3869  007D7B  20                 	db	32
  3870  007D7C  6D                 	db	109	;'m'
  3871  007D7D  6F                 	db	111	;'o'
  3872  007D7E  64                 	db	100	;'d'
  3873  007D7F  65                 	db	101	;'e'
  3874  007D80  0D                 	db	13
  3875  007D81  0A                 	db	10
  3876  007D82  00                 	db	0
  3877  007D83                     STR_21:
  3878  007D83  2B                 	db	43
  3879  007D84  4F                 	db	79	;'O'
  3880  007D85  4B                 	db	75	;'K'
  3881  007D86  20                 	db	32
  3882  007D87  2D                 	db	45
  3883  007D88  20                 	db	32
  3884  007D89  4E                 	db	78	;'N'
  3885  007D8A  6F                 	db	111	;'o'
  3886  007D8B  72                 	db	114	;'r'
  3887  007D8C  6D                 	db	109	;'m'
  3888  007D8D  61                 	db	97	;'a'
  3889  007D8E  6C                 	db	108	;'l'
  3890  007D8F  20                 	db	32
  3891  007D90  6D                 	db	109	;'m'
  3892  007D91  6F                 	db	111	;'o'
  3893  007D92  64                 	db	100	;'d'
  3894  007D93  65                 	db	101	;'e'
  3895  007D94  0D                 	db	13
  3896  007D95  0A                 	db	10
  3897  007D96  00                 	db	0
  3898  007D97                     STR_22:
  3899  007D97  2B                 	db	43
  3900  007D98  4F                 	db	79	;'O'
  3901  007D99  4B                 	db	75	;'K'
  3902  007D9A  20                 	db	32
  3903  007D9B  2D                 	db	45
  3904  007D9C  20                 	db	32
  3905  007D9D  53                 	db	83	;'S'
  3906  007D9E  69                 	db	105	;'i'
  3907  007D9F  6C                 	db	108	;'l'
  3908  007DA0  65                 	db	101	;'e'
  3909  007DA1  6E                 	db	110	;'n'
  3910  007DA2  74                 	db	116	;'t'
  3911  007DA3  20                 	db	32
  3912  007DA4  6D                 	db	109	;'m'
  3913  007DA5  6F                 	db	111	;'o'
  3914  007DA6  64                 	db	100	;'d'
  3915  007DA7  65                 	db	101	;'e'
  3916  007DA8  0D                 	db	13
  3917  007DA9  0A                 	db	10
  3918  007DAA  00                 	db	0
  3919  007DAB                     STR_82:
  3920  007DAB  49                 	db	73	;'I'
  3921  007DAC  6E                 	db	110	;'n'
  3922  007DAD  66                 	db	102	;'f'
  3923  007DAE  6F                 	db	111	;'o'
  3924  007DAF  20                 	db	32
  3925  007DB0  66                 	db	102	;'f'
  3926  007DB1  6F                 	db	111	;'o'
  3927  007DB2  72                 	db	114	;'r'
  3928  007DB3  20                 	db	32
  3929  007DB4  6E                 	db	110	;'n'
  3930  007DB5  6F                 	db	111	;'o'
  3931  007DB6  64                 	db	100	;'d'
  3932  007DB7  65                 	db	101	;'e'
  3933  007DB8  20                 	db	32
  3934  007DB9  69                 	db	105	;'i'
  3935  007DBA  64                 	db	100	;'d'
  3936  007DBB  20                 	db	32
  3937  007DBC  3D                 	db	61	;'='
  3938  007DBD  20                 	db	32
  3939  007DBE  00                 	db	0
  3940  007DBF                     STR_250:
  3941  007DBF  46                 	db	70	;'F'
  3942  007DC0  69                 	db	105	;'i'
  3943  007DC1  72                 	db	114	;'r'
  3944  007DC2  6D                 	db	109	;'m'
  3945  007DC3  77                 	db	119	;'w'
  3946  007DC4  61                 	db	97	;'a'
  3947  007DC5  72                 	db	114	;'r'
  3948  007DC6  65                 	db	101	;'e'
  3949  007DC7  20                 	db	32
  3950  007DC8  76                 	db	118	;'v'
  3951  007DC9  65                 	db	101	;'e'
  3952  007DCA  72                 	db	114	;'r'
  3953  007DCB  73                 	db	115	;'s'
  3954  007DCC  69                 	db	105	;'i'
  3955  007DCD  6F                 	db	111	;'o'
  3956  007DCE  6E                 	db	110	;'n'
  3957  007DCF  20                 	db	32
  3958  007DD0  3D                 	db	61	;'='
  3959  007DD1  20                 	db	32
  3960  007DD2  00                 	db	0
  3961  007DD3                     STR_23:
  3962  007DD3  2B                 	db	43
  3963  007DD4  4F                 	db	79	;'O'
  3964  007DD5  4B                 	db	75	;'K'
  3965  007DD6  20                 	db	32
  3966  007DD7  2D                 	db	45
  3967  007DD8  20                 	db	32
  3968  007DD9  53                 	db	83	;'S'
  3969  007DDA  6C                 	db	108	;'l'
  3970  007DDB  65                 	db	101	;'e'
  3971  007DDC  65                 	db	101	;'e'
  3972  007DDD  70                 	db	112	;'p'
  3973  007DDE  20                 	db	32
  3974  007DDF  6D                 	db	109	;'m'
  3975  007DE0  6F                 	db	111	;'o'
  3976  007DE1  64                 	db	100	;'d'
  3977  007DE2  65                 	db	101	;'e'
  3978  007DE3  0D                 	db	13
  3979  007DE4  0A                 	db	10
  3980  007DE5  00                 	db	0
  3981  007DE6                     STR_27:
  3982  007DE6  2B                 	db	43
  3983  007DE7  4F                 	db	79	;'O'
  3984  007DE8  4B                 	db	75	;'K'
  3985  007DE9  20                 	db	32
  3986  007DEA  2D                 	db	45
  3987  007DEB  20                 	db	32
  3988  007DEC  42                 	db	66	;'B'
  3989  007DED  69                 	db	105	;'i'
  3990  007DEE  74                 	db	116	;'t'
  3991  007DEF  73                 	db	115	;'s'
  3992  007DF0  20                 	db	32
  3993  007DF1  6D                 	db	109	;'m'
  3994  007DF2  6F                 	db	111	;'o'
  3995  007DF3  64                 	db	100	;'d'
  3996  007DF4  65                 	db	101	;'e'
  3997  007DF5  0D                 	db	13
  3998  007DF6  0A                 	db	10
  3999  007DF7  00                 	db	0
  4000  007DF8                     STR_40:
  4001  007DF8  2B                 	db	43
  4002  007DF9  4F                 	db	79	;'O'
  4003  007DFA  4B                 	db	75	;'K'
  4004  007DFB  20                 	db	32
  4005  007DFC  2D                 	db	45
  4006  007DFD  20                 	db	32
  4007  007DFE  6E                 	db	110	;'n'
  4008  007DFF  6F                 	db	111	;'o'
  4009  007E00  20                 	db	32
  4010  007E01  65                 	db	101	;'e'
  4011  007E02  76                 	db	118	;'v'
  4012  007E03  65                 	db	101	;'e'
  4013  007E04  6E                 	db	110	;'n'
  4014  007E05  74                 	db	116	;'t'
  4015  007E06  73                 	db	115	;'s'
  4016  007E07  0D                 	db	13
  4017  007E08  0A                 	db	10
  4018  007E09  00                 	db	0
  4019  007E0A                     STR_160:
  4020  007E0A  53                 	db	83	;'S'
  4021  007E0B  65                 	db	101	;'e'
  4022  007E0C  6E                 	db	110	;'n'
  4023  007E0D  74                 	db	116	;'t'
  4024  007E0E  20                 	db	32
  4025  007E0F  43                 	db	67	;'C'
  4026  007E10  41                 	db	65	;'A'
  4027  007E11  4E                 	db	78	;'N'
  4028  007E12  20                 	db	32
  4029  007E13  66                 	db	102	;'f'
  4030  007E14  72                 	db	114	;'r'
  4031  007E15  61                 	db	97	;'a'
  4032  007E16  6D                 	db	109	;'m'
  4033  007E17  65                 	db	101	;'e'
  4034  007E18  73                 	db	115	;'s'
  4035  007E19  3A                 	db	58	;':'
  4036  007E1A  20                 	db	32
  4037  007E1B  00                 	db	0
  4038  007E1C                     STR_263:
  4039  007E1C  30                 	db	48	;'0'
  4040  007E1D  31                 	db	49	;'1'
  4041  007E1E  32                 	db	50	;'2'
  4042  007E1F  33                 	db	51	;'3'
  4043  007E20  34                 	db	52	;'4'
  4044  007E21  35                 	db	53	;'5'
  4045  007E22  36                 	db	54	;'6'
  4046  007E23  37                 	db	55	;'7'
  4047  007E24  38                 	db	56	;'8'
  4048  007E25  39                 	db	57	;'9'
  4049  007E26  41                 	db	65	;'A'
  4050  007E27  42                 	db	66	;'B'
  4051  007E28  43                 	db	67	;'C'
  4052  007E29  44                 	db	68	;'D'
  4053  007E2A  45                 	db	69	;'E'
  4054  007E2B  46                 	db	70	;'F'
  4055  007E2C  00                 	db	0
  4056  007E2D                     STR_264:
  4057  007E2D  30                 	db	48	;'0'
  4058  007E2E  31                 	db	49	;'1'
  4059  007E2F  32                 	db	50	;'2'
  4060  007E30  33                 	db	51	;'3'
  4061  007E31  34                 	db	52	;'4'
  4062  007E32  35                 	db	53	;'5'
  4063  007E33  36                 	db	54	;'6'
  4064  007E34  37                 	db	55	;'7'
  4065  007E35  38                 	db	56	;'8'
  4066  007E36  39                 	db	57	;'9'
  4067  007E37  61                 	db	97	;'a'
  4068  007E38  62                 	db	98	;'b'
  4069  007E39  63                 	db	99	;'c'
  4070  007E3A  64                 	db	100	;'d'
  4071  007E3B  65                 	db	101	;'e'
  4072  007E3C  66                 	db	102	;'f'
  4073  007E3D  00                 	db	0
  4074  007E3E                     STR_164:
  4075  007E3E  53                 	db	83	;'S'
  4076  007E3F  65                 	db	101	;'e'
  4077  007E40  6E                 	db	110	;'n'
  4078  007E41  74                 	db	116	;'t'
  4079  007E42  20                 	db	32
  4080  007E43  43                 	db	67	;'C'
  4081  007E44  41                 	db	65	;'A'
  4082  007E45  4E                 	db	78	;'N'
  4083  007E46  20                 	db	32
  4084  007E47  62                 	db	98	;'b'
  4085  007E48  79                 	db	121	;'y'
  4086  007E49  74                 	db	116	;'t'
  4087  007E4A  65                 	db	101	;'e'
  4088  007E4B  73                 	db	115	;'s'
  4089  007E4C  3A                 	db	58	;':'
  4090  007E4D  20                 	db	32
  4091  007E4E  00                 	db	0
  4092  007E4F                     STR_242:
  4093  007E4F  20                 	db	32
  4094  007E50  6E                 	db	110	;'n'
  4095  007E51  6F                 	db	111	;'o'
  4096  007E52  64                 	db	100	;'d'
  4097  007E53  65                 	db	101	;'e'
  4098  007E54  73                 	db	115	;'s'
  4099  007E55  20                 	db	32
  4100  007E56  66                 	db	102	;'f'
  4101  007E57  6F                 	db	111	;'o'
  4102  007E58  75                 	db	117	;'u'
  4103  007E59  6E                 	db	110	;'n'
  4104  007E5A  64                 	db	100	;'d'
  4105  007E5B  0D                 	db	13
  4106  007E5C  0A                 	db	10
  4107  007E5D  00                 	db	0
  4108  007E5E                     STR_55:
  4109  007E5E  56                 	db	86	;'V'
  4110  007E5F  61                 	db	97	;'a'
  4111  007E60  6C                 	db	108	;'l'
  4112  007E61  75                 	db	117	;'u'
  4113  007E62  65                 	db	101	;'e'
  4114  007E63  20                 	db	32
  4115  007E64  66                 	db	102	;'f'
  4116  007E65  6F                 	db	111	;'o'
  4117  007E66  72                 	db	114	;'r'
  4118  007E67  20                 	db	32
  4119  007E68  72                 	db	114	;'r'
  4120  007E69  65                 	db	101	;'e'
  4121  007E6A  67                 	db	103	;'g'
  4122  007E6B  20                 	db	32
  4123  007E6C  00                 	db	0
  4124  007E6D                     STR_248:
  4125  007E6D  4D                 	db	77	;'M'
  4126  007E6E  44                 	db	68	;'D'
  4127  007E6F  46                 	db	70	;'F'
  4128  007E70  20                 	db	32
  4129  007E71  3D                 	db	61	;'='
  4130  007E72  20                 	db	32
  4131  007E73  68                 	db	104	;'h'
  4132  007E74  74                 	db	116	;'t'
  4133  007E75  74                 	db	116	;'t'
  4134  007E76  70                 	db	112	;'p'
  4135  007E77  3A                 	db	58	;':'
  4136  007E78  2F                 	db	47
  4137  007E79  2F                 	db	47
  4138  007E7A  00                 	db	0
  4139  007E7B                     STR_258:
  4140  007E7B  56                 	db	86	;'V'
  4141  007E7C  53                 	db	83	;'S'
  4142  007E7D  43                 	db	67	;'C'
  4143  007E7E  50                 	db	80	;'P'
  4144  007E7F  20                 	db	32
  4145  007E80  44                 	db	68	;'D'
  4146  007E81  72                 	db	114	;'r'
  4147  007E82  69                 	db	105	;'i'
  4148  007E83  76                 	db	118	;'v'
  4149  007E84  65                 	db	101	;'e'
  4150  007E85  72                 	db	114	;'r'
  4151  007E86  00                 	db	0
  4152  007E87                     STR_118:
  4153  007E87  52                 	db	82	;'R'
  4154  007E88  57                 	db	87	;'W'
  4155  007E89  54                 	db	84	;'T'
  4156  007E8A  49                 	db	73	;'I'
  4157  007E8B  4D                 	db	77	;'M'
  4158  007E8C  45                 	db	69	;'E'
  4159  007E8D  4F                 	db	79	;'O'
  4160  007E8E  55                 	db	85	;'U'
  4161  007E8F  54                 	db	84	;'T'
  4162  007E90  20                 	db	32
  4163  007E91  00                 	db	0
  4164  007E92                     STR_158:
  4165  007E92  2C                 	db	44
  4166  007E93  44                 	db	68	;'D'
  4167  007E94  61                 	db	97	;'a'
  4168  007E95  74                 	db	116	;'t'
  4169  007E96  61                 	db	97	;'a'
  4170  007E97  3D                 	db	61	;'='
  4171  007E98  6E                 	db	110	;'n'
  4172  007E99  6F                 	db	111	;'o'
  4173  007E9A  6E                 	db	110	;'n'
  4174  007E9B  65                 	db	101	;'e'
  4175  007E9C  00                 	db	0
  4176  007E9D                     STR_254:
  4177  007E9D  56                 	db	86	;'V'
  4178  007E9E  65                 	db	101	;'e'
  4179  007E9F  72                 	db	114	;'r'
  4180  007EA0  73                 	db	115	;'s'
  4181  007EA1  69                 	db	105	;'i'
  4182  007EA2  6F                 	db	111	;'o'
  4183  007EA3  6E                 	db	110	;'n'
  4184  007EA4  3A                 	db	58	;':'
  4185  007EA5  20                 	db	32
  4186  007EA6  00                 	db	0
  4187  007EA7                     STR_260:
  4188  007EA7  56                 	db	86	;'V'
  4189  007EA8  53                 	db	83	;'S'
  4190  007EA9  43                 	db	67	;'C'
  4191  007EAA  50                 	db	80	;'P'
  4192  007EAB  20                 	db	32
  4193  007EAC  4E                 	db	78	;'N'
  4194  007EAD  6F                 	db	111	;'o'
  4195  007EAE  64                 	db	100	;'d'
  4196  007EAF  65                 	db	101	;'e'
  4197  007EB0  00                 	db	0
  4198  007EB1                     STR_259:
  4199  007EB1  53                 	db	83	;'S'
  4200  007EB2  4C                 	db	76	;'L'
  4201  007EB3  20                 	db	32
  4202  007EB4  44                 	db	68	;'D'
  4203  007EB5  72                 	db	114	;'r'
  4204  007EB6  69                 	db	105	;'i'
  4205  007EB7  76                 	db	118	;'v'
  4206  007EB8  65                 	db	101	;'e'
  4207  007EB9  72                 	db	114	;'r'
  4208  007EBA  00                 	db	0
  4209  007EBB                     STR_120:
  4210  007EBB  53                 	db	83	;'S'
  4211  007EBC  54                 	db	84	;'T'
  4212  007EBD  41                 	db	65	;'A'
  4213  007EBE  52                 	db	82	;'R'
  4214  007EBF  54                 	db	84	;'T'
  4215  007EC0  49                 	db	73	;'I'
  4216  007EC1  46                 	db	70	;'F'
  4217  007EC2  20                 	db	32
  4218  007EC3  00                 	db	0
  4219  007EC4                     STR_148:
  4220  007EC4  2C                 	db	44
  4221  007EC5  6E                 	db	110	;'n'
  4222  007EC6  6F                 	db	111	;'o'
  4223  007EC7  64                 	db	100	;'d'
  4224  007EC8  65                 	db	101	;'e'
  4225  007EC9  69                 	db	105	;'i'
  4226  007ECA  64                 	db	100	;'d'
  4227  007ECB  3D                 	db	61	;'='
  4228  007ECC  00                 	db	0
  4229  007ECD                     STR_14:
  4230  007ECD  4C                 	db	76	;'L'
  4231  007ECE  4F                 	db	79	;'O'
  4232  007ECF  4F                 	db	79	;'O'
  4233  007ED0  50                 	db	80	;'P'
  4234  007ED1  42                 	db	66	;'B'
  4235  007ED2  41                 	db	65	;'A'
  4236  007ED3  43                 	db	67	;'C'
  4237  007ED4  4B                 	db	75	;'K'
  4238  007ED5  00                 	db	0
  4239  007ED6                     STR_134:
  4240  007ED6  56                 	db	86	;'V'
  4241  007ED7  31                 	db	49	;'1'
  4242  007ED8  30                 	db	48	;'0'
  4243  007ED9  31                 	db	49	;'1'
  4244  007EDA  31                 	db	49	;'1'
  4245  007EDB  0D                 	db	13
  4246  007EDC  0A                 	db	10
  4247  007EDD  00                 	db	0
  4248  007EDE                     STR_135:
  4249  007EDE  4E                 	db	78	;'N'
  4250  007EDF  31                 	db	49	;'1'
  4251  007EE0  39                 	db	57	;'9'
  4252  007EE1  37                 	db	55	;'7'
  4253  007EE2  37                 	db	55	;'7'
  4254  007EE3  0D                 	db	13
  4255  007EE4  0A                 	db	10
  4256  007EE5  00                 	db	0
  4257  007EE6                     STR_243:
  4258  007EE6  47                 	db	71	;'G'
  4259  007EE7  55                 	db	85	;'U'
  4260  007EE8  49                 	db	73	;'I'
  4261  007EE9  44                 	db	68	;'D'
  4262  007EEA  20                 	db	32
  4263  007EEB  3D                 	db	61	;'='
  4264  007EEC  20                 	db	32
  4265  007EED  00                 	db	0
  4266  007EEE                     STR_128:
  4267  007EEE  46                 	db	70	;'F'
  4268  007EEF  49                 	db	73	;'I'
  4269  007EF0  4C                 	db	76	;'L'
  4270  007EF1  54                 	db	84	;'T'
  4271  007EF2  45                 	db	69	;'E'
  4272  007EF3  52                 	db	82	;'R'
  4273  007EF4  20                 	db	32
  4274  007EF5  00                 	db	0
  4275  007EF6                     STR_142:
  4276  007EF6  2C                 	db	44
  4277  007EF7  63                 	db	99	;'c'
  4278  007EF8  6C                 	db	108	;'l'
  4279  007EF9  61                 	db	97	;'a'
  4280  007EFA  73                 	db	115	;'s'
  4281  007EFB  73                 	db	115	;'s'
  4282  007EFC  3D                 	db	61	;'='
  4283  007EFD  00                 	db	0
  4284  007EFE                     STR_122:
  4285  007EFE  56                 	db	86	;'V'
  4286  007EFF  45                 	db	69	;'E'
  4287  007F00  52                 	db	82	;'R'
  4288  007F01  42                 	db	66	;'B'
  4289  007F02  4F                 	db	79	;'O'
  4290  007F03  53                 	db	83	;'S'
  4291  007F04  45                 	db	69	;'E'
  4292  007F05  00                 	db	0
  4293  007F06                     STR_116:
  4294  007F06  44                 	db	68	;'D'
  4295  007F07  45                 	db	69	;'E'
  4296  007F08  43                 	db	67	;'C'
  4297  007F09  49                 	db	73	;'I'
  4298  007F0A  4D                 	db	77	;'M'
  4299  007F0B  41                 	db	65	;'A'
  4300  007F0C  4C                 	db	76	;'L'
  4301  007F0D  00                 	db	0
  4302  007F0E                     STR_18:
  4303  007F0E  56                 	db	86	;'V'
  4304  007F0F  45                 	db	69	;'E'
  4305  007F10  52                 	db	82	;'R'
  4306  007F11  53                 	db	83	;'S'
  4307  007F12  49                 	db	73	;'I'
  4308  007F13  4F                 	db	79	;'O'
  4309  007F14  4E                 	db	78	;'N'
  4310  007F15  00                 	db	0
  4311  007F16                     STR_177:
  4312  007F16  30                 	db	48	;'0'
  4313  007F17  78                 	db	120	;'x'
  4314  007F18  25                 	db	37
  4315  007F19  30                 	db	48	;'0'
  4316  007F1A  38                 	db	56	;'8'
  4317  007F1B  6C                 	db	108	;'l'
  4318  007F1C  58                 	db	88	;'X'
  4319  007F1D  00                 	db	0
  4320  007F1E                     STR_257:
  4321  007F1E  56                 	db	86	;'V'
  4322  007F1F  65                 	db	101	;'e'
  4323  007F20  72                 	db	114	;'r'
  4324  007F21  62                 	db	98	;'b'
  4325  007F22  6F                 	db	111	;'o'
  4326  007F23  73                 	db	115	;'s'
  4327  007F24  65                 	db	101	;'e'
  4328  007F25  00                 	db	0
  4329  007F26                     STR_256:
  4330  007F26  4D                 	db	77	;'M'
  4331  007F27  6F                 	db	111	;'o'
  4332  007F28  64                 	db	100	;'d'
  4333  007F29  65                 	db	101	;'e'
  4334  007F2A  3A                 	db	58	;':'
  4335  007F2B  20                 	db	32
  4336  007F2C  00                 	db	0
  4337  007F2D                     STR_154:
  4338  007F2D  2C                 	db	44
  4339  007F2E  44                 	db	68	;'D'
  4340  007F2F  61                 	db	97	;'a'
  4341  007F30  74                 	db	116	;'t'
  4342  007F31  61                 	db	97	;'a'
  4343  007F32  3D                 	db	61	;'='
  4344  007F33  00                 	db	0
  4345  007F34                     STR_145:
  4346  007F34  2C                 	db	44
  4347  007F35  74                 	db	116	;'t'
  4348  007F36  79                 	db	121	;'y'
  4349  007F37  70                 	db	112	;'p'
  4350  007F38  65                 	db	101	;'e'
  4351  007F39  3D                 	db	61	;'='
  4352  007F3A  00                 	db	0
  4353  007F3B                     STR_151:
  4354  007F3B  2C                 	db	44
  4355  007F3C  73                 	db	115	;'s'
  4356  007F3D  69                 	db	105	;'i'
  4357  007F3E  7A                 	db	122	;'z'
  4358  007F3F  65                 	db	101	;'e'
  4359  007F40  3D                 	db	61	;'='
  4360  007F41  00                 	db	0
  4361  007F42                     STR_139:
  4362  007F42  3C                 	db	60	;'<'
  4363  007F43  50                 	db	80	;'P'
  4364  007F44  72                 	db	114	;'r'
  4365  007F45  69                 	db	105	;'i'
  4366  007F46  6F                 	db	111	;'o'
  4367  007F47  3D                 	db	61	;'='
  4368  007F48  00                 	db	0
  4369  007F49                     STR_20:
  4370  007F49  49                 	db	73	;'I'
  4371  007F4A  46                 	db	70	;'F'
  4372  007F4B  4D                 	db	77	;'M'
  4373  007F4C  4F                 	db	79	;'O'
  4374  007F4D  44                 	db	68	;'D'
  4375  007F4E  45                 	db	69	;'E'
  4376  007F4F  00                 	db	0
  4377  007F50                     STR_16:
  4378  007F50  4C                 	db	76	;'L'
  4379  007F51  49                 	db	73	;'I'
  4380  007F52  53                 	db	83	;'S'
  4381  007F53  54                 	db	84	;'T'
  4382  007F54  45                 	db	69	;'E'
  4383  007F55  4E                 	db	78	;'N'
  4384  007F56  00                 	db	0
  4385  007F57                     STR_87:
  4386  007F57  46                 	db	70	;'F'
  4387  007F58  49                 	db	73	;'I'
  4388  007F59  4C                 	db	76	;'L'
  4389  007F5A  54                 	db	84	;'T'
  4390  007F5B  45                 	db	69	;'E'
  4391  007F5C  52                 	db	82	;'R'
  4392  007F5D  00                 	db	0
  4393  007F5E                     STR_10:
  4394  007F5E  53                 	db	83	;'S'
  4395  007F5F  49                 	db	73	;'I'
  4396  007F60  4C                 	db	76	;'L'
  4397  007F61  45                 	db	69	;'E'
  4398  007F62  4E                 	db	78	;'N'
  4399  007F63  54                 	db	84	;'T'
  4400  007F64  00                 	db	0
  4401  007F65                     STR_56:
  4402  007F65  30                 	db	48	;'0'
  4403  007F66  78                 	db	120	;'x'
  4404  007F67  25                 	db	37
  4405  007F68  30                 	db	48	;'0'
  4406  007F69  32                 	db	50	;'2'
  4407  007F6A  58                 	db	88	;'X'
  4408  007F6B  00                 	db	0
  4409  007F6C                     STR_143:
  4410  007F6C  30                 	db	48	;'0'
  4411  007F6D  78                 	db	120	;'x'
  4412  007F6E  25                 	db	37
  4413  007F6F  30                 	db	48	;'0'
  4414  007F70  34                 	db	52	;'4'
  4415  007F71  58                 	db	88	;'X'
  4416  007F72  00                 	db	0
  4417  007F73                     STR_161:
  4418  007F73  30                 	db	48	;'0'
  4419  007F74  78                 	db	120	;'x'
  4420  007F75  25                 	db	37
  4421  007F76  30                 	db	48	;'0'
  4422  007F77  38                 	db	56	;'8'
  4423  007F78  58                 	db	88	;'X'
  4424  007F79  00                 	db	0
  4425  007F7A                     STR_136:
  4426  007F7A  46                 	db	70	;'F'
  4427  007F7B  30                 	db	48	;'0'
  4428  007F7C  30                 	db	48	;'0'
  4429  007F7D  0D                 	db	13
  4430  007F7E  0A                 	db	10
  4431  007F7F  00                 	db	0
  4432  007F80                     STR_9:
  4433  007F80  2B                 	db	43
  4434  007F81  4F                 	db	79	;'O'
  4435  007F82  4B                 	db	75	;'K'
  4436  007F83  0D                 	db	13
  4437  007F84  0A                 	db	10
  4438  007F85  00                 	db	0
  4439  007F86                     STR_121:
  4440  007F86  4D                 	db	77	;'M'
  4441  007F87  4F                 	db	79	;'O'
  4442  007F88  44                 	db	68	;'D'
  4443  007F89  45                 	db	69	;'E'
  4444  007F8A  20                 	db	32
  4445  007F8B  00                 	db	0
  4446  007F8C                     STR_129:
  4447  007F8C  4D                 	db	77	;'M'
  4448  007F8D  41                 	db	65	;'A'
  4449  007F8E  53                 	db	83	;'S'
  4450  007F8F  4B                 	db	75	;'K'
  4451  007F90  20                 	db	32
  4452  007F91  00                 	db	0
  4453  007F92                     STR_12:
  4454  007F92  43                 	db	67	;'C'
  4455  007F93  4C                 	db	76	;'L'
  4456  007F94  4F                 	db	79	;'O'
  4457  007F95  53                 	db	83	;'S'
  4458  007F96  45                 	db	69	;'E'
  4459  007F97  00                 	db	0
  4460  007F98                     STR_126:
  4461  007F98  53                 	db	83	;'S'
  4462  007F99  4C                 	db	76	;'L'
  4463  007F9A  43                 	db	67	;'C'
  4464  007F9B  41                 	db	65	;'A'
  4465  007F9C  4E                 	db	78	;'N'
  4466  007F9D  00                 	db	0
  4467  007F9E                     STR_113:
  4468  007F9E  53                 	db	83	;'S'
  4469  007F9F  45                 	db	69	;'E'
  4470  007FA0  54                 	db	84	;'T'
  4471  007FA1  20                 	db	32
  4472  007FA2  00                 	db	0
  4473  007FA3                     STR_47:
  4474  007FA3  46                 	db	70	;'F'
  4475  007FA4  49                 	db	73	;'I'
  4476  007FA5  4E                 	db	78	;'N'
  4477  007FA6  44                 	db	68	;'D'
  4478  007FA7  00                 	db	0
  4479  007FA8                     STR_49:
  4480  007FA8  52                 	db	82	;'R'
  4481  007FA9  52                 	db	82	;'R'
  4482  007FAA  45                 	db	69	;'E'
  4483  007FAB  47                 	db	71	;'G'
  4484  007FAC  00                 	db	0
  4485  007FAD                     STR_72:
  4486  007FAD  57                 	db	87	;'W'
  4487  007FAE  52                 	db	82	;'R'
  4488  007FAF  45                 	db	69	;'E'
  4489  007FB0  47                 	db	71	;'G'
  4490  007FB1  00                 	db	0
  4491  007FB2                     STR_100:
  4492  007FB2  4D                 	db	77	;'M'
  4493  007FB3  41                 	db	65	;'A'
  4494  007FB4  53                 	db	83	;'S'
  4495  007FB5  4B                 	db	75	;'K'
  4496  007FB6  00                 	db	0
  4497  007FB7                     STR_8:
  4498  007FB7  4F                 	db	79	;'O'
  4499  007FB8  50                 	db	80	;'P'
  4500  007FB9  45                 	db	69	;'E'
  4501  007FBA  4E                 	db	78	;'N'
  4502  007FBB  00                 	db	0
  4503  007FBC                     STR_81:
  4504  007FBC  49                 	db	73	;'I'
  4505  007FBD  4E                 	db	78	;'N'
  4506  007FBE  46                 	db	70	;'F'
  4507  007FBF  4F                 	db	79	;'O'
  4508  007FC0  00                 	db	0
  4509  007FC1                     STR_124:
  4510  007FC1  56                 	db	86	;'V'
  4511  007FC2  53                 	db	83	;'S'
  4512  007FC3  43                 	db	67	;'C'
  4513  007FC4  50                 	db	80	;'P'
  4514  007FC5  00                 	db	0
  4515  007FC6                     STR_45:
  4516  007FC6  48                 	db	72	;'H'
  4517  007FC7  45                 	db	69	;'E'
  4518  007FC8  4C                 	db	76	;'L'
  4519  007FC9  50                 	db	80	;'P'
  4520  007FCA  00                 	db	0
  4521  007FCB                     STR_41:
  4522  007FCB  53                 	db	83	;'S'
  4523  007FCC  54                 	db	84	;'T'
  4524  007FCD  41                 	db	65	;'A'
  4525  007FCE  54                 	db	84	;'T'
  4526  007FCF  00                 	db	0
  4527  007FD0                     STR_6:
  4528  007FD0  42                 	db	66	;'B'
  4529  007FD1  4F                 	db	79	;'O'
  4530  007FD2  4F                 	db	79	;'O'
  4531  007FD3  54                 	db	84	;'T'
  4532  007FD4  00                 	db	0
  4533  007FD5                     STR_159:
  4534  007FD5  3E                 	db	62	;'>'
  4535  007FD6  0D                 	db	13
  4536  007FD7  0A                 	db	10
  4537  007FD8  00                 	db	0
  4538  007FD9                     STR_43:
  4539  007FD9  45                 	db	69	;'E'
  4540  007FDA  52                 	db	82	;'R'
  4541  007FDB  52                 	db	82	;'R'
  4542  007FDC  00                 	db	0
  4543  007FDD                     STR_114:
  4544  007FDD  48                 	db	72	;'H'
  4545  007FDE  45                 	db	69	;'E'
  4546  007FDF  58                 	db	88	;'X'
  4547  007FE0  00                 	db	0
  4548  007FE1                     STR_162:
  4549  007FE1  25                 	db	37
  4550  007FE2  6C                 	db	108	;'l'
  4551  007FE3  75                 	db	117	;'u'
  4552  007FE4  00                 	db	0
  4553  007FE5                     STR_245:
  4554  007FE5  2D                 	db	45
  4555  007FE6  2D                 	db	45
  4556  007FE7  00                 	db	0
  4557  007FE8                     STR_38:
  4558  007FE8  52                 	db	82	;'R'
  4559  007FE9  58                 	db	88	;'X'
  4560  007FEA  00                 	db	0
  4561  007FEB                     STR_29:
  4562  007FEB  54                 	db	84	;'T'
  4563  007FEC  58                 	db	88	;'X'
  4564  007FED  00                 	db	0
  4565  007FEE                     STR_57:
  4566  007FEE  25                 	db	37
  4567  007FEF  64                 	db	100	;'d'
  4568  007FF0  00                 	db	0
  4569  007FF1                     STR_138:
  4570  007FF1  07                 	db	7
  4571  007FF2  00                 	db	0
  4572  007FF3                     STR_137:
  4573  007FF3  0D                 	db	13
  4574  007FF4  00                 	db	0
  4575  007FF5                     STR_30:
  4576  007FF5  2C                 	db	44
  4577  007FF6  00                 	db	0
  4578  007FF7                     STR_252:
  4579  007FF7  2E                 	db	46
  4580  007FF8  00                 	db	0
  4581  007FF9                     STR_244:
  4582  007FF9  30                 	db	48	;'0'
  4583  007FFA  00                 	db	0
  4584  007FFB                     STR_246:
  4585  007FFB  3A                 	db	58	;':'
  4586  007FFC  00                 	db	0
  4587  007FFD                     STR_251:
  4588  007FFD  3F                 	db	63	;'?'
  4589  007FFE  00                 	db	0
  4590  007FFF                     __end_of__stringdata:
  4591                           	opt stack 0
  4592                           
  4593                           ; #config settings
  4594  007FFF  00                 	db	0	; dummy byte at the end
  4595  0000                     tblptru	equ	0xFF8
  4596                           tblptrh	equ	0xFF7
  4597                           tblptrl	equ	0xFF6
  4598                           tablat	equ	0xFF5
  4599                           prodh	equ	0xFF4
  4600                           prodl	equ	0xFF3
  4601                           intcon	equ	0xFF2
  4602                           indf0	equ	0xFEF
  4603                           fsr0h	equ	0xFEA
  4604                           fsr0l	equ	0xFE9
  4605                           wreg	equ	0xFE8
  4606                           indf1	equ	0xFE7
  4607                           postinc1	equ	0xFE6
  4608                           postdec1	equ	0xFE5
  4609                           fsr1h	equ	0xFE2
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           plusw2	equ	0xFDB
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619                           	psect	nvBANK1
  4620  0001E2                     __pnvBANK1:
  4621                           	opt stack 0
  4622  0001E2                     _caps:
  4623                           	opt stack 0
  4624  0001E2                     	ds	2
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon	equ	0xFF2
  4632                           indf0	equ	0xFEF
  4633                           fsr0h	equ	0xFEA
  4634                           fsr0l	equ	0xFE9
  4635                           wreg	equ	0xFE8
  4636                           indf1	equ	0xFE7
  4637                           postinc1	equ	0xFE6
  4638                           postdec1	equ	0xFE5
  4639                           fsr1h	equ	0xFE2
  4640                           fsr1l	equ	0xFE1
  4641                           indf2	equ	0xFDF
  4642                           postinc2	equ	0xFDE
  4643                           postdec2	equ	0xFDD
  4644                           plusw2	equ	0xFDB
  4645                           fsr2h	equ	0xFDA
  4646                           fsr2l	equ	0xFD9
  4647                           status	equ	0xFD8
  4648                           
  4649                           	psect	cinit
  4650  0050CE                     __pcinit:
  4651                           	opt stack 0
  4652  0050CE                     start_initialization:
  4653                           	opt stack 0
  4654  0050CE                     __initialization:
  4655                           	opt stack 0
  4656                           
  4657                           ; Clear objects allocated to BIGRAM (494 bytes)
  4658  0050CE  EE04  F000         	lfsr	0,__pbssBIGRAM
  4659  0050D2  EE11 F0EE          	lfsr	1,494
  4660  0050D6                     clear_0:
  4661  0050D6  6AEE               	clrf	postinc0,c
  4662  0050D8  50E5               	movf	postdec1,w,c
  4663  0050DA  50E1               	movf	fsr1l,w,c
  4664  0050DC  E1FC               	bnz	clear_0
  4665  0050DE  50E2               	movf	fsr1h,w,c
  4666  0050E0  E1FA               	bnz	clear_0
  4667                           
  4668                           ; Clear objects allocated to BANK3 (256 bytes)
  4669  0050E2  EE03  F000         	lfsr	0,__pbssBANK3
  4670  0050E6  EE11 F000          	lfsr	1,256
  4671  0050EA                     clear_1:
  4672  0050EA  6AEE               	clrf	postinc0,c
  4673  0050EC  50E5               	movf	postdec1,w,c
  4674  0050EE  50E1               	movf	fsr1l,w,c
  4675  0050F0  E1FC               	bnz	clear_1
  4676  0050F2  50E2               	movf	fsr1h,w,c
  4677  0050F4  E1FA               	bnz	clear_1
  4678                           
  4679                           ; Clear objects allocated to BANK2 (128 bytes)
  4680  0050F6  EE02  F000         	lfsr	0,__pbssBANK2
  4681  0050FA  0E80               	movlw	128
  4682  0050FC                     clear_2:
  4683  0050FC  6AEE               	clrf	postinc0,c
  4684  0050FE  06E8               	decf	wreg,f,c
  4685  005100  E1FD               	bnz	clear_2
  4686                           
  4687                           ; Clear objects allocated to BANK1 (226 bytes)
  4688  005102  EE01  F000         	lfsr	0,__pbssBANK1
  4689  005106  0EE2               	movlw	226
  4690  005108                     clear_3:
  4691  005108  6AEE               	clrf	postinc0,c
  4692  00510A  06E8               	decf	wreg,f,c
  4693  00510C  E1FD               	bnz	clear_3
  4694                           
  4695                           ; Clear objects allocated to BANK0 (9 bytes)
  4696  00510E  EE00  F0E4         	lfsr	0,__pbssBANK0
  4697  005112  0E09               	movlw	9
  4698  005114                     clear_4:
  4699  005114  6AEE               	clrf	postinc0,c
  4700  005116  06E8               	decf	wreg,f,c
  4701  005118  E1FD               	bnz	clear_4
  4702                           
  4703                           ; Clear objects allocated to COMRAM (30 bytes)
  4704  00511A  EE00  F022         	lfsr	0,__pbssCOMRAM
  4705  00511E  0E1E               	movlw	30
  4706  005120                     clear_5:
  4707  005120  6AEE               	clrf	postinc0,c
  4708  005122  06E8               	decf	wreg,f,c
  4709  005124  E1FD               	bnz	clear_5
  4710  005126                     end_of_initialization:
  4711                           	opt stack 0
  4712  005126                     __end_of__initialization:
  4713                           	opt stack 0
  4714  005126  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4715  005128  6EF8               	movwf	tblptru,c
  4716  00512A  0100               	movlb	0
  4717  00512C  EF02  F019         	goto	_main	;jump to C main() function
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           indf0	equ	0xFEF
  4726                           postinc0	equ	0xFEE
  4727                           fsr0h	equ	0xFEA
  4728                           fsr0l	equ	0xFE9
  4729                           wreg	equ	0xFE8
  4730                           indf1	equ	0xFE7
  4731                           postinc1	equ	0xFE6
  4732                           postdec1	equ	0xFE5
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           plusw2	equ	0xFDB
  4739                           fsr2h	equ	0xFDA
  4740                           fsr2l	equ	0xFD9
  4741                           status	equ	0xFD8
  4742                           
  4743                           	psect	bssCOMRAM
  4744  000022                     __pbssCOMRAM:
  4745                           	opt stack 0
  4746  000022                     _timekeeper:
  4747                           	opt stack 0
  4748  000022                     	ds	4
  4749  000026                     _status_led_cnt:
  4750                           	opt stack 0
  4751  000026                     	ds	2
  4752  000028                     strtok@sp:
  4753                           	opt stack 0
  4754  000028                     	ds	2
  4755  00002A                     _USART_Status:
  4756                           	opt stack 0
  4757  00002A                     	ds	1
  4758  00002B                     __ECANRxFilterHitInfo:
  4759                           	opt stack 0
  4760  00002B                     	ds	1
  4761  00002C                     _bDLE:
  4762                           	opt stack 0
  4763  00002C                     	ds	1
  4764  00002D                     _bInitiated:
  4765                           	opt stack 0
  4766  00002D                     	ds	1
  4767  00002E                     _bSilent:
  4768                           	opt stack 0
  4769  00002E                     	ds	1
  4770  00002F                     _fifo_canrxcount:
  4771                           	opt stack 0
  4772  00002F                     	ds	1
  4773  000030                     _ledFunctionality:
  4774                           	opt stack 0
  4775  000030                     	ds	1
  4776  000031                     _nTimeStamp:
  4777                           	opt stack 0
  4778  000031                     	ds	1
  4779  000032                     _sequencyno:
  4780                           	opt stack 0
  4781  000032                     	ds	1
  4782  000033                     _stateVscpDriver:
  4783                           	opt stack 0
  4784  000033                     	ds	1
  4785  000034                     _vscpData:
  4786                           	opt stack 0
  4787  000034                     	ds	8
  4788  00003C                     _vscpClass:
  4789                           	opt stack 0
  4790  00003C                     	ds	2
  4791  00003E                     _dlc:
  4792                           	opt stack 0
  4793  00003E                     	ds	1
  4794  00003F                     _flags:
  4795                           	opt stack 0
  4796  00003F                     	ds	1
  4797                           tblptru	equ	0xFF8
  4798                           tblptrh	equ	0xFF7
  4799                           tblptrl	equ	0xFF6
  4800                           tablat	equ	0xFF5
  4801                           prodh	equ	0xFF4
  4802                           prodl	equ	0xFF3
  4803                           intcon	equ	0xFF2
  4804                           indf0	equ	0xFEF
  4805                           postinc0	equ	0xFEE
  4806                           fsr0h	equ	0xFEA
  4807                           fsr0l	equ	0xFE9
  4808                           wreg	equ	0xFE8
  4809                           indf1	equ	0xFE7
  4810                           postinc1	equ	0xFE6
  4811                           postdec1	equ	0xFE5
  4812                           fsr1h	equ	0xFE2
  4813                           fsr1l	equ	0xFE1
  4814                           indf2	equ	0xFDF
  4815                           postinc2	equ	0xFDE
  4816                           postdec2	equ	0xFDD
  4817                           plusw2	equ	0xFDB
  4818                           fsr2h	equ	0xFDA
  4819                           fsr2l	equ	0xFD9
  4820                           status	equ	0xFD8
  4821                           
  4822                           	psect	bssBANK0
  4823  0000E4                     __pbssBANK0:
  4824                           	opt stack 0
  4825  0000E4                     _bHex:
  4826                           	opt stack 0
  4827  0000E4                     	ds	1
  4828  0000E5                     _bOpen:
  4829                           	opt stack 0
  4830  0000E5                     	ds	1
  4831  0000E6                     _mode:
  4832                           	opt stack 0
  4833  0000E6                     	ds	1
  4834  0000E7                     _pos:
  4835                           	opt stack 0
  4836  0000E7                     	ds	1
  4837  0000E8                     _rwtimeout:
  4838                           	opt stack 0
  4839  0000E8                     	ds	1
  4840  0000E9                     _vscpNodeId:
  4841                           	opt stack 0
  4842  0000E9                     	ds	1
  4843  0000EA                     _vscpPriority:
  4844                           	opt stack 0
  4845  0000EA                     	ds	1
  4846  0000EB                     _vscpSize:
  4847                           	opt stack 0
  4848  0000EB                     	ds	1
  4849  0000EC                     _vscpType:
  4850                           	opt stack 0
  4851  0000EC                     	ds	1
  4852                           tblptru	equ	0xFF8
  4853                           tblptrh	equ	0xFF7
  4854                           tblptrl	equ	0xFF6
  4855                           tablat	equ	0xFF5
  4856                           prodh	equ	0xFF4
  4857                           prodl	equ	0xFF3
  4858                           intcon	equ	0xFF2
  4859                           indf0	equ	0xFEF
  4860                           postinc0	equ	0xFEE
  4861                           fsr0h	equ	0xFEA
  4862                           fsr0l	equ	0xFE9
  4863                           wreg	equ	0xFE8
  4864                           indf1	equ	0xFE7
  4865                           postinc1	equ	0xFE6
  4866                           postdec1	equ	0xFE5
  4867                           fsr1h	equ	0xFE2
  4868                           fsr1l	equ	0xFE1
  4869                           indf2	equ	0xFDF
  4870                           postinc2	equ	0xFDE
  4871                           postdec2	equ	0xFDD
  4872                           plusw2	equ	0xFDB
  4873                           fsr2h	equ	0xFDA
  4874                           fsr2l	equ	0xFD9
  4875                           status	equ	0xFD8
  4876                           
  4877                           	psect	bssBANK1
  4878  000100                     __pbssBANK1:
  4879                           	opt stack 0
  4880  000100                     _can_receiveOverruns:
  4881                           	opt stack 0
  4882  000100                     	ds	4
  4883  000104                     _can_transmitOverruns:
  4884                           	opt stack 0
  4885  000104                     	ds	4
  4886  000108                     _cntRxBytes:
  4887                           	opt stack 0
  4888  000108                     	ds	4
  4889  00010C                     _cntRxFrames:
  4890                           	opt stack 0
  4891  00010C                     	ds	4
  4892  000110                     _cntTxBytes:
  4893                           	opt stack 0
  4894  000110                     	ds	4
  4895  000114                     _cntTxFrames:
  4896                           	opt stack 0
  4897  000114                     	ds	4
  4898  000118                     _timer:
  4899                           	opt stack 0
  4900  000118                     	ds	4
  4901  00011C                     _uart_receiveOverruns:
  4902                           	opt stack 0
  4903  00011C                     	ds	4
  4904  000120                     _uart_transmitOverruns:
  4905                           	opt stack 0
  4906  000120                     	ds	4
  4907  000124                     _made_table:
  4908                           	opt stack 0
  4909  000124                     	ds	2
  4910  000126                     _cmdbuf:
  4911                           	opt stack 0
  4912  000126                     	ds	80
  4913  000176                     _wrkbuf:
  4914                           	opt stack 0
  4915  000176                     	ds	80
  4916  0001C6                     _canInputFifo:
  4917                           	opt stack 0
  4918  0001C6                     	ds	8
  4919  0001CE                     _data:
  4920                           	opt stack 0
  4921  0001CE                     	ds	8
  4922  0001D6                     _serialInputFifo:
  4923                           	opt stack 0
  4924  0001D6                     	ds	8
  4925  0001DE                     _id:
  4926                           	opt stack 0
  4927  0001DE                     	ds	4
  4928                           tblptru	equ	0xFF8
  4929                           tblptrh	equ	0xFF7
  4930                           tblptrl	equ	0xFF6
  4931                           tablat	equ	0xFF5
  4932                           prodh	equ	0xFF4
  4933                           prodl	equ	0xFF3
  4934                           intcon	equ	0xFF2
  4935                           indf0	equ	0xFEF
  4936                           postinc0	equ	0xFEE
  4937                           fsr0h	equ	0xFEA
  4938                           fsr0l	equ	0xFE9
  4939                           wreg	equ	0xFE8
  4940                           indf1	equ	0xFE7
  4941                           postinc1	equ	0xFE6
  4942                           postdec1	equ	0xFE5
  4943                           fsr1h	equ	0xFE2
  4944                           fsr1l	equ	0xFE1
  4945                           indf2	equ	0xFDF
  4946                           postinc2	equ	0xFDE
  4947                           postdec2	equ	0xFDD
  4948                           plusw2	equ	0xFDB
  4949                           fsr2h	equ	0xFDA
  4950                           fsr2l	equ	0xFD9
  4951                           status	equ	0xFD8
  4952                           
  4953                           	psect	bssBANK2
  4954  000200                     __pbssBANK2:
  4955                           	opt stack 0
  4956  000200                     _serial_inputBuffer:
  4957                           	opt stack 0
  4958  000200                     	ds	128
  4959                           tblptru	equ	0xFF8
  4960                           tblptrh	equ	0xFF7
  4961                           tblptrl	equ	0xFF6
  4962                           tablat	equ	0xFF5
  4963                           prodh	equ	0xFF4
  4964                           prodl	equ	0xFF3
  4965                           intcon	equ	0xFF2
  4966                           indf0	equ	0xFEF
  4967                           postinc0	equ	0xFEE
  4968                           fsr0h	equ	0xFEA
  4969                           fsr0l	equ	0xFE9
  4970                           wreg	equ	0xFE8
  4971                           indf1	equ	0xFE7
  4972                           postinc1	equ	0xFE6
  4973                           postdec1	equ	0xFE5
  4974                           fsr1h	equ	0xFE2
  4975                           fsr1l	equ	0xFE1
  4976                           indf2	equ	0xFDF
  4977                           postinc2	equ	0xFDE
  4978                           postdec2	equ	0xFDD
  4979                           plusw2	equ	0xFDB
  4980                           fsr2h	equ	0xFDA
  4981                           fsr2l	equ	0xFD9
  4982                           status	equ	0xFD8
  4983                           
  4984                           	psect	bssBANK3
  4985  000300                     __pbssBANK3:
  4986                           	opt stack 0
  4987  000300                     _crc8_table:
  4988                           	opt stack 0
  4989  000300                     	ds	256
  4990                           tblptru	equ	0xFF8
  4991                           tblptrh	equ	0xFF7
  4992                           tblptrl	equ	0xFF6
  4993                           tablat	equ	0xFF5
  4994                           prodh	equ	0xFF4
  4995                           prodl	equ	0xFF3
  4996                           intcon	equ	0xFF2
  4997                           indf0	equ	0xFEF
  4998                           postinc0	equ	0xFEE
  4999                           fsr0h	equ	0xFEA
  5000                           fsr0l	equ	0xFE9
  5001                           wreg	equ	0xFE8
  5002                           indf1	equ	0xFE7
  5003                           postinc1	equ	0xFE6
  5004                           postdec1	equ	0xFE5
  5005                           fsr1h	equ	0xFE2
  5006                           fsr1l	equ	0xFE1
  5007                           indf2	equ	0xFDF
  5008                           postinc2	equ	0xFDE
  5009                           postdec2	equ	0xFDD
  5010                           plusw2	equ	0xFDB
  5011                           fsr2h	equ	0xFDA
  5012                           fsr2l	equ	0xFD9
  5013                           status	equ	0xFD8
  5014                           
  5015                           	psect	bssBIGRAM
  5016  000400                     __pbssBIGRAM:
  5017                           	opt stack 0
  5018  000400                     _can_inputBuffer:
  5019                           	opt stack 0
  5020  000400                     	ds	494
  5021                           tblptru	equ	0xFF8
  5022                           tblptrh	equ	0xFF7
  5023                           tblptrl	equ	0xFF6
  5024                           tablat	equ	0xFF5
  5025                           prodh	equ	0xFF4
  5026                           prodl	equ	0xFF3
  5027                           intcon	equ	0xFF2
  5028                           indf0	equ	0xFEF
  5029                           postinc0	equ	0xFEE
  5030                           fsr0h	equ	0xFEA
  5031                           fsr0l	equ	0xFE9
  5032                           wreg	equ	0xFE8
  5033                           indf1	equ	0xFE7
  5034                           postinc1	equ	0xFE6
  5035                           postdec1	equ	0xFE5
  5036                           fsr1h	equ	0xFE2
  5037                           fsr1l	equ	0xFE1
  5038                           indf2	equ	0xFDF
  5039                           postinc2	equ	0xFDE
  5040                           postdec2	equ	0xFDD
  5041                           plusw2	equ	0xFDB
  5042                           fsr2h	equ	0xFDA
  5043                           fsr2l	equ	0xFD9
  5044                           status	equ	0xFD8
  5045                           
  5046                           	psect	cstackBANK2
  5047  000280                     __pcstackBANK2:
  5048                           	opt stack 0
  5049  000280                     doModeVerbose@id:
  5050                           	opt stack 0
  5051                           
  5052                           ; 4 bytes @ 0x0
  5053  000280                     	ds	4
  5054  000284                     doModeVerbose@preg:
  5055                           	opt stack 0
  5056                           
  5057                           ; 2 bytes @ 0x4
  5058  000284                     	ds	2
  5059  000286                     doModeVerbose@preg_1231:
  5060                           	opt stack 0
  5061                           
  5062                           ; 2 bytes @ 0x6
  5063  000286                     	ds	2
  5064  000288                     doModeVerbose@filter_class:
  5065                           	opt stack 0
  5066                           
  5067                           ; 2 bytes @ 0x8
  5068  000288                     	ds	2
  5069  00028A                     doModeVerbose@mask_class:
  5070                           	opt stack 0
  5071                           
  5072                           ; 2 bytes @ 0xA
  5073  00028A                     	ds	2
  5074  00028C                     doModeVerbose@nodeid:
  5075                           	opt stack 0
  5076                           
  5077                           ; 1 bytes @ 0xC
  5078  00028C                     	ds	1
  5079  00028D                     doModeVerbose@nodeid_1223:
  5080                           	opt stack 0
  5081                           
  5082                           ; 1 bytes @ 0xD
  5083  00028D                     	ds	1
  5084  00028E                     doModeVerbose@filter_priority:
  5085                           	opt stack 0
  5086                           
  5087                           ; 1 bytes @ 0xE
  5088  00028E                     	ds	1
  5089  00028F                     doModeVerbose@filter_type:
  5090                           	opt stack 0
  5091                           
  5092                           ; 1 bytes @ 0xF
  5093  00028F                     	ds	1
  5094  000290                     doModeVerbose@filter_nodeid:
  5095                           	opt stack 0
  5096                           
  5097                           ; 1 bytes @ 0x10
  5098  000290                     	ds	1
  5099  000291                     doModeVerbose@mask_priority:
  5100                           	opt stack 0
  5101                           
  5102                           ; 1 bytes @ 0x11
  5103  000291                     	ds	1
  5104  000292                     doModeVerbose@mask_type:
  5105                           	opt stack 0
  5106                           
  5107                           ; 1 bytes @ 0x12
  5108  000292                     	ds	1
  5109  000293                     doModeVerbose@mask_nodeid:
  5110                           	opt stack 0
  5111                           
  5112                           ; 1 bytes @ 0x13
  5113  000293                     	ds	1
  5114  000294                     _doModeVerbose$1191:
  5115                           	opt stack 0
  5116                           
  5117                           ; 2 bytes @ 0x14
  5118  000294                     	ds	2
  5119  000296                     _doModeVerbose$1203:
  5120                           	opt stack 0
  5121                           
  5122                           ; 2 bytes @ 0x16
  5123  000296                     	ds	2
  5124  000298                     _doModeVerbose$1208:
  5125                           	opt stack 0
  5126                           
  5127                           ; 2 bytes @ 0x18
  5128  000298                     	ds	2
  5129  00029A                     _doModeVerbose$1214:
  5130                           	opt stack 0
  5131                           
  5132                           ; 2 bytes @ 0x1A
  5133  00029A                     	ds	2
  5134  00029C                     _doModeVerbose$1218:
  5135                           	opt stack 0
  5136                           
  5137                           ; 2 bytes @ 0x1C
  5138  00029C                     	ds	2
  5139  00029E                     _doModeVerbose$1243:
  5140                           	opt stack 0
  5141                           
  5142                           ; 2 bytes @ 0x1E
  5143  00029E                     	ds	2
  5144  0002A0                     doModeVerbose@rv:
  5145                           	opt stack 0
  5146                           
  5147                           ; 1 bytes @ 0x20
  5148  0002A0                     	ds	1
  5149  0002A1                     doModeVerbose@page_1224:
  5150                           	opt stack 0
  5151                           
  5152                           ; 1 bytes @ 0x21
  5153  0002A1                     	ds	1
  5154  0002A2                     doModeVerbose@reg_1225:
  5155                           	opt stack 0
  5156                           
  5157                           ; 1 bytes @ 0x22
  5158  0002A2                     	ds	1
  5159  0002A3                     doModeVerbose@id_1284:
  5160                           	opt stack 0
  5161                           
  5162                           ; 4 bytes @ 0x23
  5163  0002A3                     	ds	4
  5164  0002A7                     doModeVerbose@filterno:
  5165                           	opt stack 0
  5166                           
  5167                           ; 1 bytes @ 0x27
  5168  0002A7                     	ds	1
  5169  0002A8                     doModeVerbose@maskno:
  5170                           	opt stack 0
  5171                           
  5172                           ; 1 bytes @ 0x28
  5173  0002A8                     	ds	1
  5174  0002A9                     doModeVerbose@i:
  5175                           	opt stack 0
  5176                           
  5177                           ; 1 bytes @ 0x29
  5178  0002A9                     	ds	1
  5179  0002AA                     doModeVerbose@value_1226:
  5180                           	opt stack 0
  5181                           
  5182                           ; 1 bytes @ 0x2A
  5183  0002AA                     	ds	1
  5184  0002AB                     doModeVerbose@count:
  5185                           	opt stack 0
  5186                           
  5187                           ; 1 bytes @ 0x2B
  5188  0002AB                     	ds	1
  5189  0002AC                     doModeVerbose@c:
  5190                           	opt stack 0
  5191                           
  5192                           ; 1 bytes @ 0x2C
  5193  0002AC                     	ds	1
  5194  0002AD                     doModeVerbose@page:
  5195                           	opt stack 0
  5196                           
  5197                           ; 1 bytes @ 0x2D
  5198  0002AD                     	ds	1
  5199  0002AE                     doModeVerbose@reg:
  5200                           	opt stack 0
  5201                           
  5202                           ; 1 bytes @ 0x2E
  5203  0002AE                     	ds	1
  5204  0002AF                     doModeVerbose@nodeid_1238:
  5205                           	opt stack 0
  5206                           
  5207                           ; 1 bytes @ 0x2F
  5208  0002AF                     	ds	1
  5209  0002B0                     doModeVerbose@i_1173:
  5210                           	opt stack 0
  5211                           
  5212                           ; 1 bytes @ 0x30
  5213  0002B0                     	ds	1
  5214  0002B1                     doModeVerbose@value:
  5215                           	opt stack 0
  5216                           
  5217                           ; 1 bytes @ 0x31
  5218  0002B1                     	ds	1
  5219  0002B2                     doModeVerbose@p_1179:
  5220                           	opt stack 0
  5221                           
  5222                           ; 2 bytes @ 0x32
  5223  0002B2                     	ds	2
  5224  0002B4                     doModeVerbose@p_1227:
  5225                           	opt stack 0
  5226                           
  5227                           ; 2 bytes @ 0x34
  5228  0002B4                     	ds	2
  5229  0002B6                     doModeVerbose@ifmode:
  5230                           	opt stack 0
  5231                           
  5232                           ; 1 bytes @ 0x36
  5233  0002B6                     	ds	1
  5234  0002B7                     doModeVerbose@p:
  5235                           	opt stack 0
  5236                           
  5237                           ; 2 bytes @ 0x37
  5238  0002B7                     	ds	2
  5239  0002B9                     doModeVerbose@p_1252:
  5240                           	opt stack 0
  5241                           
  5242                           ; 2 bytes @ 0x39
  5243  0002B9                     	ds	2
  5244  0002BB                     doModeVerbose@p_1272:
  5245                           	opt stack 0
  5246                           
  5247                           ; 2 bytes @ 0x3B
  5248  0002BB                     	ds	2
  5249                           tblptru	equ	0xFF8
  5250                           tblptrh	equ	0xFF7
  5251                           tblptrl	equ	0xFF6
  5252                           tablat	equ	0xFF5
  5253                           prodh	equ	0xFF4
  5254                           prodl	equ	0xFF3
  5255                           intcon	equ	0xFF2
  5256                           indf0	equ	0xFEF
  5257                           postinc0	equ	0xFEE
  5258                           fsr0h	equ	0xFEA
  5259                           fsr0l	equ	0xFE9
  5260                           wreg	equ	0xFE8
  5261                           indf1	equ	0xFE7
  5262                           postinc1	equ	0xFE6
  5263                           postdec1	equ	0xFE5
  5264                           fsr1h	equ	0xFE2
  5265                           fsr1l	equ	0xFE1
  5266                           indf2	equ	0xFDF
  5267                           postinc2	equ	0xFDE
  5268                           postdec2	equ	0xFDD
  5269                           plusw2	equ	0xFDB
  5270                           fsr2h	equ	0xFDA
  5271                           fsr2l	equ	0xFD9
  5272                           status	equ	0xFD8
  5273                           
  5274                           	psect	cstackBANK0
  5275  000060                     __pcstackBANK0:
  5276                           	opt stack 0
  5277  000060                     ?_WriteTimer0:
  5278                           	opt stack 0
  5279  000060                     ?_fifo_init:
  5280                           	opt stack 0
  5281  000060                     ?_OpenUSART:
  5282                           	opt stack 0
  5283  000060                     ?_Write_b_eep:
  5284                           	opt stack 0
  5285  000060                     ?_setFilter:
  5286                           	opt stack 0
  5287  000060                     ?__CANIDToRegs:
  5288                           	opt stack 0
  5289  000060                     ??_isdigit:
  5290  000060                     ?_Read_b_eep:
  5291                           	opt stack 0
  5292  000060                     ?_fifo_read:
  5293                           	opt stack 0
  5294  000060                     ?_memset:
  5295                           	opt stack 0
  5296  000060                     ?_strcpy:
  5297                           	opt stack 0
  5298  000060                     ?_strchr:
  5299                           	opt stack 0
  5300  000060                     ?_strlen:
  5301                           	opt stack 0
  5302  000060                     ?_memcpy:
  5303                           	opt stack 0
  5304  000060                     ?_strcat:
  5305                           	opt stack 0
  5306  000060                     ?___lwdiv:
  5307                           	opt stack 0
  5308  000060                     ?___lwmod:
  5309                           	opt stack 0
  5310  000060                     ?___wmul:
  5311                           	opt stack 0
  5312  000060                     ?___lldiv:
  5313                           	opt stack 0
  5314  000060                     ECANSetOperationMode@mode:
  5315                           	opt stack 0
  5316  000060                     nibbleFromChar@c:
  5317                           	opt stack 0
  5318  000060                     OpenTimer0@config:
  5319                           	opt stack 0
  5320  000060                     WriteUSART@data:
  5321                           	opt stack 0
  5322  000060                     toupper@c:
  5323                           	opt stack 0
  5324  000060                     __CANIDToRegs@ptr:
  5325                           	opt stack 0
  5326  000060                     fifo_init@f:
  5327                           	opt stack 0
  5328  000060                     fifo_read@f:
  5329                           	opt stack 0
  5330  000060                     _init_crc8$2024:
  5331                           	opt stack 0
  5332  000060                     Read_b_eep@badd:
  5333                           	opt stack 0
  5334  000060                     Write_b_eep@badd:
  5335                           	opt stack 0
  5336  000060                     WriteTimer0@timer0:
  5337                           	opt stack 0
  5338  000060                     OpenUSART@spbrg:
  5339                           	opt stack 0
  5340  000060                     ___lwdiv@dividend:
  5341                           	opt stack 0
  5342  000060                     ___lwmod@dividend:
  5343                           	opt stack 0
  5344  000060                     memcpy@d1:
  5345                           	opt stack 0
  5346  000060                     memset@p1:
  5347                           	opt stack 0
  5348  000060                     strcat@to:
  5349                           	opt stack 0
  5350  000060                     strchr@ptr:
  5351                           	opt stack 0
  5352  000060                     strcpy@to:
  5353                           	opt stack 0
  5354  000060                     strlen@s:
  5355                           	opt stack 0
  5356  000060                     ___wmul@multiplier:
  5357                           	opt stack 0
  5358  000060                     setFilter@val:
  5359                           	opt stack 0
  5360  000060                     ___lldiv@dividend:
  5361                           	opt stack 0
  5362                           
  5363                           ; 4 bytes @ 0x0
  5364  000060                     	ds	1
  5365  000061                     ?_putsUSART:
  5366                           	opt stack 0
  5367  000061                     ??_printBinary:
  5368  000061                     ?_strichr:
  5369                           	opt stack 0
  5370  000061                     _isdigit$2933:
  5371                           	opt stack 0
  5372  000061                     putsUSART@data:
  5373                           	opt stack 0
  5374  000061                     strichr@ptr:
  5375                           	opt stack 0
  5376                           
  5377                           ; 2 bytes @ 0x1
  5378  000061                     	ds	1
  5379  000062                     Write_b_eep@bdat:
  5380                           	opt stack 0
  5381  000062                     OpenUSART@config:
  5382                           	opt stack 0
  5383  000062                     isdigit@c:
  5384                           	opt stack 0
  5385  000062                     fifo_init@buf:
  5386                           	opt stack 0
  5387  000062                     fifo_read@buf:
  5388                           	opt stack 0
  5389  000062                     init_crc8@j:
  5390                           	opt stack 0
  5391  000062                     WriteTimer0@timer:
  5392                           	opt stack 0
  5393  000062                     ___lwdiv@divisor:
  5394                           	opt stack 0
  5395  000062                     ___lwmod@divisor:
  5396                           	opt stack 0
  5397  000062                     memcpy@s1:
  5398                           	opt stack 0
  5399  000062                     memset@c:
  5400                           	opt stack 0
  5401  000062                     strcat@from:
  5402                           	opt stack 0
  5403  000062                     strchr@chr:
  5404                           	opt stack 0
  5405  000062                     strcpy@from:
  5406                           	opt stack 0
  5407  000062                     strlen@cp:
  5408                           	opt stack 0
  5409  000062                     ___wmul@multiplicand:
  5410                           	opt stack 0
  5411  000062                     __CANIDToRegs@val:
  5412                           	opt stack 0
  5413                           
  5414                           ; 4 bytes @ 0x2
  5415  000062                     	ds	1
  5416  000063                     ??_putsUSART:
  5417  000063                     printBinary@value:
  5418                           	opt stack 0
  5419  000063                     Write_b_eep@GIE_BIT_VAL:
  5420                           	opt stack 0
  5421  000063                     strichr@chr:
  5422                           	opt stack 0
  5423                           
  5424                           ; 2 bytes @ 0x3
  5425  000063                     	ds	1
  5426  000064                     ??_strchr:
  5427  000064                     ??_setFilter:
  5428  000064                     ?_hexStringToBytes:
  5429                           	opt stack 0
  5430  000064                     ?_strnicmp:
  5431                           	opt stack 0
  5432  000064                     init_app_eeprom@i:
  5433                           	opt stack 0
  5434  000064                     init_crc8@crc:
  5435                           	opt stack 0
  5436  000064                     ___lwdiv@counter:
  5437                           	opt stack 0
  5438  000064                     ___lwmod@counter:
  5439                           	opt stack 0
  5440  000064                     printBinary@i:
  5441                           	opt stack 0
  5442  000064                     fifo_init@size:
  5443                           	opt stack 0
  5444  000064                     fifo_read@nbytes:
  5445                           	opt stack 0
  5446  000064                     hexStringToBytes@buf:
  5447                           	opt stack 0
  5448  000064                     memcpy@n:
  5449                           	opt stack 0
  5450  000064                     memset@n:
  5451                           	opt stack 0
  5452  000064                     strcat@cp:
  5453                           	opt stack 0
  5454  000064                     strcpy@cp:
  5455                           	opt stack 0
  5456  000064                     strnicmp@s1:
  5457                           	opt stack 0
  5458  000064                     ___wmul@product:
  5459                           	opt stack 0
  5460  000064                     ___lldiv@divisor:
  5461                           	opt stack 0
  5462                           
  5463                           ; 4 bytes @ 0x4
  5464  000064                     	ds	1
  5465  000065                     init_crc8@i:
  5466                           	opt stack 0
  5467  000065                     ___lwdiv@quotient:
  5468                           	opt stack 0
  5469                           
  5470                           ; 2 bytes @ 0x5
  5471  000065                     	ds	1
  5472  000066                     ??_fifo_read:
  5473  000066                     ?_atoi:
  5474                           	opt stack 0
  5475  000066                     ?_strspn:
  5476                           	opt stack 0
  5477  000066                     ?_strcspn:
  5478                           	opt stack 0
  5479  000066                     __CANIDToRegs@type:
  5480                           	opt stack 0
  5481  000066                     hexStringToBytes@size:
  5482                           	opt stack 0
  5483  000066                     atoi@s:
  5484                           	opt stack 0
  5485  000066                     memcpy@d:
  5486                           	opt stack 0
  5487  000066                     memset@p:
  5488                           	opt stack 0
  5489  000066                     strnicmp@s2:
  5490                           	opt stack 0
  5491  000066                     strcspn@s1:
  5492                           	opt stack 0
  5493  000066                     strspn@s1:
  5494                           	opt stack 0
  5495                           
  5496                           ; 2 bytes @ 0x6
  5497  000066                     	ds	1
  5498  000067                     ??__CANIDToRegs:
  5499  000067                     ?_crc8:
  5500                           	opt stack 0
  5501  000067                     ?_utoa:
  5502                           	opt stack 0
  5503  000067                     crc8@crc:
  5504                           	opt stack 0
  5505  000067                     hexStringToBytes@inhex:
  5506                           	opt stack 0
  5507  000067                     utoa@buf:
  5508                           	opt stack 0
  5509                           
  5510                           ; 2 bytes @ 0x7
  5511  000067                     	ds	1
  5512  000068                     ??_atoi:
  5513  000068                     ___lldiv@counter:
  5514                           	opt stack 0
  5515  000068                     memcpy@s:
  5516                           	opt stack 0
  5517  000068                     strnicmp@len:
  5518                           	opt stack 0
  5519  000068                     strcspn@s2:
  5520                           	opt stack 0
  5521  000068                     strspn@s2:
  5522                           	opt stack 0
  5523                           
  5524                           ; 2 bytes @ 0x8
  5525  000068                     	ds	1
  5526  000069                     ??_hexStringToBytes:
  5527  000069                     __CANIDToRegs@Value:
  5528                           	opt stack 0
  5529  000069                     crc8@m:
  5530                           	opt stack 0
  5531  000069                     utoa@val:
  5532                           	opt stack 0
  5533  000069                     ___lldiv@quotient:
  5534                           	opt stack 0
  5535                           
  5536                           ; 4 bytes @ 0x9
  5537  000069                     	ds	1
  5538  00006A                     ??_crc8:
  5539  00006A                     ??_strnicmp:
  5540  00006A                     ?_ECANSendMessage:
  5541                           	opt stack 0
  5542  00006A                     setFilter@filter:
  5543                           	opt stack 0
  5544  00006A                     atoi@sign:
  5545                           	opt stack 0
  5546  00006A                     fifo_read@p:
  5547                           	opt stack 0
  5548  00006A                     strcspn@i:
  5549                           	opt stack 0
  5550  00006A                     strspn@i:
  5551                           	opt stack 0
  5552  00006A                     ECANSendMessage@id:
  5553                           	opt stack 0
  5554                           
  5555                           ; 4 bytes @ 0xA
  5556  00006A                     	ds	1
  5557  00006B                     setFilter@sidh:
  5558                           	opt stack 0
  5559  00006B                     atoi@a:
  5560                           	opt stack 0
  5561  00006B                     utoa@base:
  5562                           	opt stack 0
  5563                           
  5564                           ; 2 bytes @ 0xB
  5565  00006B                     	ds	1
  5566  00006C                     ?_sendEscapedUartData:
  5567                           	opt stack 0
  5568  00006C                     ?_calcCRC:
  5569                           	opt stack 0
  5570  00006C                     ?_strtok:
  5571                           	opt stack 0
  5572  00006C                     setFilter@sidl:
  5573                           	opt stack 0
  5574  00006C                     strnicmp@r:
  5575                           	opt stack 0
  5576  00006C                     sendEscapedUartData@pcrc:
  5577                           	opt stack 0
  5578  00006C                     calcCRC@p:
  5579                           	opt stack 0
  5580  00006C                     fifo_read@i:
  5581                           	opt stack 0
  5582  00006C                     hexStringToBytes@len:
  5583                           	opt stack 0
  5584  00006C                     strtok@s1:
  5585                           	opt stack 0
  5586                           
  5587                           ; 2 bytes @ 0xC
  5588  00006C                     	ds	1
  5589  00006D                     ?_stristr:
  5590                           	opt stack 0
  5591  00006D                     ?___llmod:
  5592                           	opt stack 0
  5593  00006D                     setFilter@eidh:
  5594                           	opt stack 0
  5595  00006D                     utoa@v:
  5596                           	opt stack 0
  5597  00006D                     stristr@s1:
  5598                           	opt stack 0
  5599  00006D                     ___llmod@dividend:
  5600                           	opt stack 0
  5601                           
  5602                           ; 4 bytes @ 0xD
  5603  00006D                     	ds	1
  5604  00006E                     ?_getCANFrame:
  5605                           	opt stack 0
  5606  00006E                     sendEscapedUartData@c:
  5607                           	opt stack 0
  5608  00006E                     calcCRC@len:
  5609                           	opt stack 0
  5610  00006E                     setFilter@eidl:
  5611                           	opt stack 0
  5612  00006E                     getCANFrame@pdlc:
  5613                           	opt stack 0
  5614  00006E                     ECANSendMessage@data:
  5615                           	opt stack 0
  5616  00006E                     hexStringToBytes@p:
  5617                           	opt stack 0
  5618  00006E                     strtok@s2:
  5619                           	opt stack 0
  5620                           
  5621                           ; 2 bytes @ 0xE
  5622  00006E                     	ds	1
  5623  00006F                     ?_sendVSCPDriverCommandReply:
  5624                           	opt stack 0
  5625  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5626                           	opt stack 0
  5627  00006F                     sendVSCPDriverAck@crc:
  5628                           	opt stack 0
  5629  00006F                     sendVSCPDriverNack@crc:
  5630                           	opt stack 0
  5631  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5632                           	opt stack 0
  5633  00006F                     sendVSCPModeCapabilities@crc:
  5634                           	opt stack 0
  5635  00006F                     calcCRC@j:
  5636                           	opt stack 0
  5637  00006F                     utoa@c:
  5638                           	opt stack 0
  5639  00006F                     getCANFrame@pdata:
  5640                           	opt stack 0
  5641  00006F                     stristr@s2:
  5642                           	opt stack 0
  5643                           
  5644                           ; 2 bytes @ 0xF
  5645  00006F                     	ds	1
  5646  000070                     ?_itoa:
  5647                           	opt stack 0
  5648  000070                     sendVSCPDriverErrorFrame@crc:
  5649                           	opt stack 0
  5650  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5651                           	opt stack 0
  5652  000070                     calcCRC@crc:
  5653                           	opt stack 0
  5654  000070                     ECANSendMessage@dataLen:
  5655                           	opt stack 0
  5656  000070                     hexStringToBytes@i:
  5657                           	opt stack 0
  5658  000070                     itoa@buf:
  5659                           	opt stack 0
  5660                           
  5661                           ; 2 bytes @ 0x10
  5662  000070                     	ds	1
  5663  000071                     sendVSCPDriverCommandReply@crc:
  5664                           	opt stack 0
  5665  000071                     getCANFrame@pid:
  5666                           	opt stack 0
  5667  000071                     ECANSendMessage@msgFlags:
  5668                           	opt stack 0
  5669  000071                     ___llmod@divisor:
  5670                           	opt stack 0
  5671                           
  5672                           ; 4 bytes @ 0x11
  5673  000071                     	ds	1
  5674  000072                     ??_ECANSendMessage:
  5675  000072                     ?_getVSCPFrame:
  5676                           	opt stack 0
  5677  000072                     getVSCPFrame@pvscptype:
  5678                           	opt stack 0
  5679  000072                     itoa@val:
  5680                           	opt stack 0
  5681  000072                     receiveSendEventCANAL@data:
  5682                           	opt stack 0
  5683  000072                     receiveSendMultiEventCANAL@data:
  5684                           	opt stack 0
  5685                           
  5686                           ; 8 bytes @ 0x12
  5687  000072                     	ds	1
  5688  000073                     getVSCPFrame@pNodeId:
  5689                           	opt stack 0
  5690  000073                     ECANSendMessage@pb:
  5691                           	opt stack 0
  5692                           
  5693                           ; 18 bytes @ 0x13
  5694  000073                     	ds	1
  5695  000074                     getVSCPFrame@pPriority:
  5696                           	opt stack 0
  5697  000074                     itoa@base:
  5698                           	opt stack 0
  5699                           
  5700                           ; 2 bytes @ 0x14
  5701  000074                     	ds	1
  5702  000075                     getVSCPFrame@pSize:
  5703                           	opt stack 0
  5704  000075                     ___llmod@counter:
  5705                           	opt stack 0
  5706                           
  5707                           ; 1 bytes @ 0x15
  5708  000075                     	ds	1
  5709  000076                     ?_sprintf:
  5710                           	opt stack 0
  5711  000076                     ?_ultoa:
  5712                           	opt stack 0
  5713  000076                     getVSCPFrame@pData:
  5714                           	opt stack 0
  5715  000076                     sprintf@sp:
  5716                           	opt stack 0
  5717  000076                     ultoa@buf:
  5718                           	opt stack 0
  5719                           
  5720                           ; 2 bytes @ 0x16
  5721  000076                     	ds	1
  5722  000077                     ??_getVSCPFrame:
  5723                           
  5724                           ; 0 bytes @ 0x17
  5725  000077                     	ds	1
  5726  000078                     sprintf@f:
  5727                           	opt stack 0
  5728  000078                     ultoa@val:
  5729                           	opt stack 0
  5730  000078                     printFirmwareVersion@wrkbuf:
  5731                           	opt stack 0
  5732                           
  5733                           ; 20 bytes @ 0x18
  5734  000078                     	ds	2
  5735  00007A                     receiveSendEventCANAL@i:
  5736                           	opt stack 0
  5737  00007A                     receiveSendMultiEventCANAL@msgcount:
  5738                           	opt stack 0
  5739                           
  5740                           ; 1 bytes @ 0x1A
  5741  00007A                     	ds	1
  5742  00007B                     receiveSendMultiEventCANAL@i:
  5743                           	opt stack 0
  5744  00007B                     getVSCPFrame@pvscpclass:
  5745                           	opt stack 0
  5746  00007B                     receiveSendEventCANAL@id:
  5747                           	opt stack 0
  5748                           
  5749                           ; 4 bytes @ 0x1B
  5750  00007B                     	ds	1
  5751  00007C                     ultoa@base:
  5752                           	opt stack 0
  5753  00007C                     receiveSendMultiEventCANAL@id:
  5754                           	opt stack 0
  5755  00007C                     getVSCPFrame@id:
  5756                           	opt stack 0
  5757                           
  5758                           ; 4 bytes @ 0x1C
  5759  00007C                     	ds	2
  5760  00007E                     ??_sprintf:
  5761  00007E                     ultoa@v:
  5762                           	opt stack 0
  5763                           
  5764                           ; 4 bytes @ 0x1E
  5765  00007E                     	ds	1
  5766  00007F                     receiveSendEventCANAL@dlc:
  5767                           	opt stack 0
  5768                           
  5769                           ; 1 bytes @ 0x1F
  5770  00007F                     	ds	1
  5771  000080                     receiveSendEventCANAL@crc:
  5772                           	opt stack 0
  5773  000080                     receiveSendMultiEventCANAL@dlc:
  5774                           	opt stack 0
  5775                           
  5776                           ; 1 bytes @ 0x20
  5777  000080                     	ds	1
  5778  000081                     receiveSendMultiEventCANAL@crc:
  5779                           	opt stack 0
  5780  000081                     sprintf@idx:
  5781                           	opt stack 0
  5782                           
  5783                           ; 1 bytes @ 0x21
  5784  000081                     	ds	1
  5785  000082                     receiveSendMultiEventCANAL@pos:
  5786                           	opt stack 0
  5787  000082                     ultoa@c:
  5788                           	opt stack 0
  5789  000082                     _sprintf$2086:
  5790                           	opt stack 0
  5791                           
  5792                           ; 2 bytes @ 0x22
  5793  000082                     	ds	1
  5794  000083                     ??_receiveSendEventSLCAN:
  5795                           
  5796                           ; 0 bytes @ 0x23
  5797  000083                     	ds	1
  5798  000084                     _sprintf$2087:
  5799                           	opt stack 0
  5800                           
  5801                           ; 2 bytes @ 0x24
  5802  000084                     	ds	1
  5803  000085                     ECANSendMessage@mode:
  5804                           	opt stack 0
  5805                           
  5806                           ; 1 bytes @ 0x25
  5807  000085                     	ds	1
  5808  000086                     ECANSendMessage@buffers:
  5809                           	opt stack 0
  5810  000086                     _sprintf$2093:
  5811                           	opt stack 0
  5812  000086                     receiveSendEventSLCAN@id:
  5813                           	opt stack 0
  5814                           
  5815                           ; 4 bytes @ 0x26
  5816  000086                     	ds	1
  5817  000087                     ECANSendMessage@j:
  5818                           	opt stack 0
  5819                           
  5820                           ; 1 bytes @ 0x27
  5821  000087                     	ds	1
  5822  000088                     ECANSendMessage@tempBSEL0:
  5823                           	opt stack 0
  5824  000088                     sprintf@ap:
  5825                           	opt stack 0
  5826                           
  5827                           ; 1 bytes @ 0x28
  5828  000088                     	ds	1
  5829  000089                     ECANSendMessage@tempPtr:
  5830                           	opt stack 0
  5831  000089                     sprintf@prec:
  5832                           	opt stack 0
  5833                           
  5834                           ; 2 bytes @ 0x29
  5835  000089                     	ds	1
  5836  00008A                     receiveSendEventSLCAN@dlc:
  5837                           	opt stack 0
  5838                           
  5839                           ; 1 bytes @ 0x2A
  5840  00008A                     	ds	1
  5841  00008B                     ECANSendMessage@temp:
  5842                           	opt stack 0
  5843  00008B                     receiveSendEventSLCAN@i:
  5844                           	opt stack 0
  5845  00008B                     sprintf@width:
  5846                           	opt stack 0
  5847                           
  5848                           ; 2 bytes @ 0x2B
  5849  00008B                     	ds	1
  5850  00008C                     ECANSendMessage@i:
  5851                           	opt stack 0
  5852                           
  5853                           ; 1 bytes @ 0x2C
  5854  00008C                     	ds	1
  5855  00008D                     ECANSendMessage@ptr:
  5856                           	opt stack 0
  5857  00008D                     sprintf@_val:
  5858                           	opt stack 0
  5859                           
  5860                           ; 4 bytes @ 0x2D
  5861  00008D                     	ds	2
  5862  00008F                     ?_sendCANFrame:
  5863                           	opt stack 0
  5864  00008F                     sendCANFrame@id:
  5865                           	opt stack 0
  5866                           
  5867                           ; 4 bytes @ 0x2F
  5868  00008F                     	ds	2
  5869  000091                     sprintf@c:
  5870                           	opt stack 0
  5871                           
  5872                           ; 1 bytes @ 0x31
  5873  000091                     	ds	1
  5874  000092                     sprintf@flag:
  5875                           	opt stack 0
  5876                           
  5877                           ; 2 bytes @ 0x32
  5878  000092                     	ds	1
  5879  000093                     sendCANFrame@dlc:
  5880                           	opt stack 0
  5881                           
  5882                           ; 1 bytes @ 0x33
  5883  000093                     	ds	1
  5884  000094                     ??_receivePrintEventVerbose:
  5885  000094                     _printStatistics$1433:
  5886                           	opt stack 0
  5887  000094                     _printErrors$1458:
  5888                           	opt stack 0
  5889  000094                     sendCANFrame@pdata:
  5890                           	opt stack 0
  5891                           
  5892                           ; 2 bytes @ 0x34
  5893  000094                     	ds	2
  5894  000096                     ??_doModeSLCAN:
  5895  000096                     ??_receiveVSCPModeCanalMsg:
  5896  000096                     ?_sendVSCPFrame:
  5897                           	opt stack 0
  5898  000096                     _printStatistics$1439:
  5899                           	opt stack 0
  5900  000096                     _printErrors$1464:
  5901                           	opt stack 0
  5902  000096                     sendVSCPFrame@vscpclass:
  5903                           	opt stack 0
  5904                           
  5905                           ; 2 bytes @ 0x36
  5906  000096                     	ds	2
  5907  000098                     sendVSCPFrame@vscptype:
  5908                           	opt stack 0
  5909  000098                     _printStatistics$1445:
  5910                           	opt stack 0
  5911  000098                     _printErrors$1470:
  5912                           	opt stack 0
  5913                           
  5914                           ; 2 bytes @ 0x38
  5915  000098                     	ds	1
  5916  000099                     sendVSCPFrame@nodeid:
  5917                           	opt stack 0
  5918  000099                     _receivePrintEventVerbose$1340:
  5919                           	opt stack 0
  5920                           
  5921                           ; 2 bytes @ 0x39
  5922  000099                     	ds	1
  5923  00009A                     sendVSCPFrame@priority:
  5924                           	opt stack 0
  5925  00009A                     _printStatistics$1451:
  5926                           	opt stack 0
  5927  00009A                     _printErrors$1476:
  5928                           	opt stack 0
  5929                           
  5930                           ; 2 bytes @ 0x3A
  5931  00009A                     	ds	1
  5932  00009B                     sendVSCPFrame@size:
  5933                           	opt stack 0
  5934  00009B                     _receivePrintEventVerbose$1345:
  5935                           	opt stack 0
  5936                           
  5937                           ; 2 bytes @ 0x3B
  5938  00009B                     	ds	1
  5939  00009C                     sendVSCPFrame@pData:
  5940                           	opt stack 0
  5941  00009C                     _printErrors$1482:
  5942                           	opt stack 0
  5943                           
  5944                           ; 2 bytes @ 0x3C
  5945  00009C                     	ds	1
  5946  00009D                     ??_sendVSCPFrame:
  5947  00009D                     _receivePrintEventVerbose$1350:
  5948                           	opt stack 0
  5949  00009D                     doModeSLCAN@id:
  5950                           	opt stack 0
  5951                           
  5952                           ; 4 bytes @ 0x3D
  5953  00009D                     	ds	1
  5954  00009E                     _printErrors$1491:
  5955                           	opt stack 0
  5956                           
  5957                           ; 2 bytes @ 0x3E
  5958  00009E                     	ds	1
  5959  00009F                     _receivePrintEventVerbose$1355:
  5960                           	opt stack 0
  5961                           
  5962                           ; 2 bytes @ 0x3F
  5963  00009F                     	ds	2
  5964  0000A1                     doModeSLCAN@dlc:
  5965                           	opt stack 0
  5966  0000A1                     _receivePrintEventVerbose$1360:
  5967                           	opt stack 0
  5968                           
  5969                           ; 2 bytes @ 0x41
  5970  0000A1                     	ds	1
  5971  0000A2                     doModeSLCAN@c:
  5972                           	opt stack 0
  5973                           
  5974                           ; 1 bytes @ 0x42
  5975  0000A2                     	ds	1
  5976  0000A3                     doModeSLCAN@rv:
  5977                           	opt stack 0
  5978  0000A3                     _receivePrintEventVerbose$1365:
  5979                           	opt stack 0
  5980                           
  5981                           ; 2 bytes @ 0x43
  5982  0000A3                     	ds	2
  5983  0000A5                     receivePrintEventVerbose@i:
  5984                           	opt stack 0
  5985                           
  5986                           ; 1 bytes @ 0x45
  5987  0000A5                     	ds	5
  5988  0000AA                     receiveVSCPModeCanalMsg@data:
  5989                           	opt stack 0
  5990                           
  5991                           ; 8 bytes @ 0x4A
  5992  0000AA                     	ds	7
  5993  0000B1                     sendVSCPFrame@id:
  5994                           	opt stack 0
  5995                           
  5996                           ; 4 bytes @ 0x51
  5997  0000B1                     	ds	1
  5998  0000B2                     receiveVSCPModeCanalMsg@id:
  5999                           	opt stack 0
  6000                           
  6001                           ; 4 bytes @ 0x52
  6002  0000B2                     	ds	3
  6003  0000B5                     ?_readRegisterExtended:
  6004                           	opt stack 0
  6005  0000B5                     ?_writeRegisterExtended:
  6006                           	opt stack 0
  6007  0000B5                     ?_readRegister:
  6008                           	opt stack 0
  6009  0000B5                     readRegister@reg:
  6010                           	opt stack 0
  6011  0000B5                     readRegisterExtended@page:
  6012                           	opt stack 0
  6013  0000B5                     writeRegisterExtended@page:
  6014                           	opt stack 0
  6015                           
  6016                           ; 2 bytes @ 0x55
  6017  0000B5                     	ds	1
  6018  0000B6                     receiveVSCPModeCanalMsg@dlc:
  6019                           	opt stack 0
  6020  0000B6                     readRegister@timeout:
  6021                           	opt stack 0
  6022                           
  6023                           ; 2 bytes @ 0x56
  6024  0000B6                     	ds	1
  6025  0000B7                     doModeVscp@c:
  6026                           	opt stack 0
  6027  0000B7                     readRegisterExtended@reg:
  6028                           	opt stack 0
  6029  0000B7                     writeRegisterExtended@reg:
  6030                           	opt stack 0
  6031                           
  6032                           ; 1 bytes @ 0x57
  6033  0000B7                     	ds	1
  6034  0000B8                     readRegister@value:
  6035                           	opt stack 0
  6036  0000B8                     readRegisterExtended@timeout:
  6037                           	opt stack 0
  6038  0000B8                     writeRegisterExtended@timeout:
  6039                           	opt stack 0
  6040                           
  6041                           ; 2 bytes @ 0x58
  6042  0000B8                     	ds	1
  6043  0000B9                     ??_readRegister:
  6044                           
  6045                           ; 0 bytes @ 0x59
  6046  0000B9                     	ds	1
  6047  0000BA                     readRegisterExtended@value:
  6048                           	opt stack 0
  6049  0000BA                     writeRegisterExtended@value:
  6050                           	opt stack 0
  6051                           
  6052                           ; 2 bytes @ 0x5A
  6053  0000BA                     	ds	2
  6054  0000BC                     ??_readRegisterExtended:
  6055  0000BC                     ??_writeRegisterExtended:
  6056                           
  6057                           ; 0 bytes @ 0x5C
  6058  0000BC                     	ds	1
  6059  0000BD                     readRegister@nodeid:
  6060                           	opt stack 0
  6061                           
  6062                           ; 1 bytes @ 0x5D
  6063  0000BD                     	ds	1
  6064  0000BE                     printGUID@nodeid:
  6065                           	opt stack 0
  6066  0000BE                     printMDF@nodeid:
  6067                           	opt stack 0
  6068  0000BE                     printNodeFirmwareVersion@nodeid:
  6069                           	opt stack 0
  6070                           
  6071                           ; 1 bytes @ 0x5E
  6072  0000BE                     	ds	1
  6073  0000BF                     printMDF@value:
  6074                           	opt stack 0
  6075  0000BF                     printGUID@buf:
  6076                           	opt stack 0
  6077  0000BF                     printNodeFirmwareVersion@buf:
  6078                           	opt stack 0
  6079                           
  6080                           ; 3 bytes @ 0x5F
  6081  0000BF                     	ds	1
  6082  0000C0                     readRegisterExtended@nodeid:
  6083                           	opt stack 0
  6084  0000C0                     writeRegisterExtended@nodeid:
  6085                           	opt stack 0
  6086  0000C0                     printMDF@p:
  6087                           	opt stack 0
  6088                           
  6089                           ; 2 bytes @ 0x60
  6090  0000C0                     	ds	2
  6091  0000C2                     printGUID@value:
  6092                           	opt stack 0
  6093  0000C2                     printMDF@i:
  6094                           	opt stack 0
  6095  0000C2                     printNodeFirmwareVersion@value:
  6096                           	opt stack 0
  6097                           
  6098                           ; 1 bytes @ 0x62
  6099  0000C2                     	ds	1
  6100  0000C3                     printGUID@i:
  6101                           	opt stack 0
  6102  0000C3                     printNodeFirmwareVersion@i:
  6103                           	opt stack 0
  6104                           
  6105                           ; 1 bytes @ 0x63
  6106  0000C3                     	ds	1
  6107  0000C4                     _findNodes$1535:
  6108                           	opt stack 0
  6109                           
  6110                           ; 2 bytes @ 0x64
  6111  0000C4                     	ds	2
  6112  0000C6                     findNodes@nFound:
  6113                           	opt stack 0
  6114                           
  6115                           ; 1 bytes @ 0x66
  6116  0000C6                     	ds	1
  6117  0000C7                     findNodes@value:
  6118                           	opt stack 0
  6119                           
  6120                           ; 1 bytes @ 0x67
  6121  0000C7                     	ds	1
  6122  0000C8                     findNodes@i:
  6123                           	opt stack 0
  6124                           
  6125                           ; 1 bytes @ 0x68
  6126  0000C8                     	ds	1
  6127  0000C9                     ??_doModeVerbose:
  6128                           
  6129                           ; 0 bytes @ 0x69
  6130  0000C9                     	ds	20
  6131  0000DD                     
  6132                           ; 2 bytes @ 0x7D
  6133  0000DD                     	ds	2
  6134  0000DF                     
  6135                           ; 3 bytes @ 0x7F
  6136  0000DF                     	ds	3
  6137  0000E2                     ??_main:
  6138                           
  6139                           ; 0 bytes @ 0x82
  6140  0000E2                     	ds	1
  6141  0000E3                     main@c:
  6142                           	opt stack 0
  6143                           
  6144                           ; 1 bytes @ 0x83
  6145  0000E3                     	ds	1
  6146                           tblptru	equ	0xFF8
  6147                           tblptrh	equ	0xFF7
  6148                           tblptrl	equ	0xFF6
  6149                           tablat	equ	0xFF5
  6150                           prodh	equ	0xFF4
  6151                           prodl	equ	0xFF3
  6152                           intcon	equ	0xFF2
  6153                           indf0	equ	0xFEF
  6154                           postinc0	equ	0xFEE
  6155                           fsr0h	equ	0xFEA
  6156                           fsr0l	equ	0xFE9
  6157                           wreg	equ	0xFE8
  6158                           indf1	equ	0xFE7
  6159                           postinc1	equ	0xFE6
  6160                           postdec1	equ	0xFE5
  6161                           fsr1h	equ	0xFE2
  6162                           fsr1l	equ	0xFE1
  6163                           indf2	equ	0xFDF
  6164                           postinc2	equ	0xFDE
  6165                           postdec2	equ	0xFDD
  6166                           plusw2	equ	0xFDB
  6167                           fsr2h	equ	0xFDA
  6168                           fsr2l	equ	0xFD9
  6169                           status	equ	0xFD8
  6170                           
  6171                           	psect	cstackCOMRAM
  6172  000001                     __pcstackCOMRAM:
  6173                           	opt stack 0
  6174  000001                     ?__RegsToCANID:
  6175                           	opt stack 0
  6176  000001                     ?i1_WriteTimer0:
  6177                           	opt stack 0
  6178  000001                     ?_fifo_write:
  6179                           	opt stack 0
  6180  000001                     ?_fifo_getFree:
  6181                           	opt stack 0
  6182  000001                     ?__ECANPointBuffer:
  6183                           	opt stack 0
  6184  000001                     ReadUSART@data:
  6185                           	opt stack 0
  6186  000001                     __RegsToCANID@ptr:
  6187                           	opt stack 0
  6188  000001                     fifo_write@f:
  6189                           	opt stack 0
  6190  000001                     fifo_getFree@f:
  6191                           	opt stack 0
  6192  000001                     i1WriteTimer0@timer0:
  6193                           	opt stack 0
  6194                           
  6195                           ; 2 bytes @ 0x0
  6196  000001                     	ds	2
  6197  000003                     ??_fifo_getFree:
  6198  000003                     __RegsToCANID@val:
  6199                           	opt stack 0
  6200  000003                     fifo_write@buf:
  6201                           	opt stack 0
  6202  000003                     i1WriteTimer0@timer:
  6203                           	opt stack 0
  6204                           
  6205                           ; 2 bytes @ 0x2
  6206  000003                     	ds	1
  6207  000004                     __ECANPointBuffer@b:
  6208                           	opt stack 0
  6209                           
  6210                           ; 1 bytes @ 0x3
  6211  000004                     	ds	1
  6212  000005                     __RegsToCANID@type:
  6213                           	opt stack 0
  6214  000005                     __ECANPointBuffer@pt:
  6215                           	opt stack 0
  6216  000005                     fifo_write@nbytes:
  6217                           	opt stack 0
  6218                           
  6219                           ; 4 bytes @ 0x4
  6220  000005                     	ds	1
  6221  000006                     ??__RegsToCANID:
  6222                           
  6223                           ; 0 bytes @ 0x5
  6224  000006                     	ds	2
  6225  000008                     __RegsToCANID@Value:
  6226                           	opt stack 0
  6227                           
  6228                           ; 2 bytes @ 0x7
  6229  000008                     	ds	1
  6230  000009                     ??_fifo_write:
  6231                           
  6232                           ; 0 bytes @ 0x8
  6233  000009                     	ds	1
  6234  00000A                     ?_ECANReceiveMessage:
  6235                           	opt stack 0
  6236  00000A                     ECANReceiveMessage@id:
  6237                           	opt stack 0
  6238                           
  6239                           ; 2 bytes @ 0x9
  6240  00000A                     	ds	2
  6241  00000C                     ECANReceiveMessage@data:
  6242                           	opt stack 0
  6243                           
  6244                           ; 2 bytes @ 0xB
  6245  00000C                     	ds	1
  6246  00000D                     fifo_write@p:
  6247                           	opt stack 0
  6248                           
  6249                           ; 2 bytes @ 0xC
  6250  00000D                     	ds	1
  6251  00000E                     ECANReceiveMessage@dataLen:
  6252                           	opt stack 0
  6253                           
  6254                           ; 1 bytes @ 0xD
  6255  00000E                     	ds	1
  6256  00000F                     ECANReceiveMessage@msgFlags:
  6257                           	opt stack 0
  6258  00000F                     fifo_write@i:
  6259                           	opt stack 0
  6260                           
  6261                           ; 4 bytes @ 0xE
  6262  00000F                     	ds	1
  6263  000010                     ECANReceiveMessage@savedPtr:
  6264                           	opt stack 0
  6265                           
  6266                           ; 2 bytes @ 0xF
  6267  000010                     	ds	2
  6268  000012                     ECANReceiveMessage@i:
  6269                           	opt stack 0
  6270                           
  6271                           ; 1 bytes @ 0x11
  6272  000012                     	ds	1
  6273  000013                     ECANReceiveMessage@mode:
  6274                           	opt stack 0
  6275                           
  6276                           ; 1 bytes @ 0x12
  6277  000013                     	ds	1
  6278  000014                     ECANReceiveMessage@temp:
  6279                           	opt stack 0
  6280                           
  6281                           ; 1 bytes @ 0x13
  6282  000014                     	ds	1
  6283  000015                     ECANReceiveMessage@ptr:
  6284                           	opt stack 0
  6285                           
  6286                           ; 2 bytes @ 0x14
  6287  000015                     	ds	2
  6288  000017                     ??_Interrupt:
  6289                           
  6290                           ; 0 bytes @ 0x16
  6291  000017                     	ds	9
  6292  000020                     Interrupt@c:
  6293                           	opt stack 0
  6294                           
  6295                           ; 1 bytes @ 0x1F
  6296  000020                     	ds	1
  6297  000021                     Interrupt@fail:
  6298                           	opt stack 0
  6299                           
  6300                           ; 1 bytes @ 0x20
  6301  000021                     	ds	1
  6302                           tblptru	equ	0xFF8
  6303                           tblptrh	equ	0xFF7
  6304                           tblptrl	equ	0xFF6
  6305                           tablat	equ	0xFF5
  6306                           prodh	equ	0xFF4
  6307                           prodl	equ	0xFF3
  6308                           intcon	equ	0xFF2
  6309                           indf0	equ	0xFEF
  6310                           postinc0	equ	0xFEE
  6311                           fsr0h	equ	0xFEA
  6312                           fsr0l	equ	0xFE9
  6313                           wreg	equ	0xFE8
  6314                           indf1	equ	0xFE7
  6315                           postinc1	equ	0xFE6
  6316                           postdec1	equ	0xFE5
  6317                           fsr1h	equ	0xFE2
  6318                           fsr1l	equ	0xFE1
  6319                           indf2	equ	0xFDF
  6320                           postinc2	equ	0xFDE
  6321                           postdec2	equ	0xFDD
  6322                           plusw2	equ	0xFDB
  6323                           fsr2h	equ	0xFDA
  6324                           fsr2l	equ	0xFD9
  6325                           status	equ	0xFD8
  6326                           
  6327 ;;
  6328 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6329 ;;
  6330 ;; *************** function _main *****************
  6331 ;; Defined at:
  6332 ;;		line 270 in file "main.c"
  6333 ;; Parameters:    Size  Location     Type
  6334 ;;  argc            2  125[BANK0 ] int 
  6335 ;;  argv            3  127[BANK0 ] PTR PTR unsigned char 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  c               1  131[BANK0 ] unsigned char 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  2  125[BANK0 ] int 
  6340 ;; Registers used:
  6341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : F/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6347 ;;      Params:         0       5       0       0       0       0       0
  6348 ;;      Locals:         0       1       0       0       0       0       0
  6349 ;;      Temps:          0       1       0       0       0       0       0
  6350 ;;      Totals:         0       7       0       0       0       0       0
  6351 ;;Total ram usage:        7 bytes
  6352 ;; Hardware stack levels required when called:   11
  6353 ;; This function calls:
  6354 ;;		_fifo_init
  6355 ;;		_init_crc8
  6356 ;;		_Read_b_eep
  6357 ;;		_vscp_restoreDefaults
  6358 ;;		_init
  6359 ;;		_putsUSART
  6360 ;;		_printFirmwareVersion
  6361 ;;		_printMode
  6362 ;;		_fifo_read
  6363 ;;		_doModeVerbose
  6364 ;;		_doModeVscp
  6365 ;;		_doModeSLCAN
  6366 ;;		_doModeVscpNode
  6367 ;; This function is called by:
  6368 ;;		Startup code after reset
  6369 ;; This function uses a non-reentrant model
  6370 ;;
  6371                           
  6372                           	psect	text0
  6373  003204                     __ptext0:
  6374                           	opt stack 0
  6375  003204                     _main:
  6376                           	opt stack 20
  6377                           
  6378                           ;main.c: 272: caps.maxVscpFrames = 1;
  6379                           
  6380                           ;incstack = 0
  6381                           ;incstack = 0
  6382  003204  0E01               	movlw	1
  6383  003206  0101               	movlb	1	; () banked
  6384  003208  6FE2               	movwf	_caps& (0+255),b
  6385                           
  6386                           ;main.c: 273: caps.maxCanalFrames = 1;
  6387  00320A  6FE3               	movwf	(_caps+1)& (0+255),b
  6388                           
  6389                           ; BSR set to: 1
  6390                           ;main.c: 278: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  6391  00320C  0E01               	movlw	high _serialInputFifo
  6392  00320E  0100               	movlb	0	; () banked
  6393  003210  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6394  003212  0ED6               	movlw	low _serialInputFifo
  6395  003214  6F60               	movwf	?_fifo_init& (0+255),b
  6396  003216  0E02               	movlw	high _serial_inputBuffer
  6397  003218  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6398  00321A  0E00               	movlw	low _serial_inputBuffer
  6399  00321C  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6400  00321E  6B65               	clrf	(?_fifo_init+5)& (0+255),b
  6401  003220  0E80               	movlw	128
  6402  003222  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6403  003224  ECCB  F02A         	call	_fifo_init	;wreg free
  6404                           
  6405                           ; BSR set to: 0
  6406                           ;main.c: 279: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  6407  003228  0E01               	movlw	high _canInputFifo
  6408  00322A  0100               	movlb	0	; () banked
  6409  00322C  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6410  00322E  0EC6               	movlw	low _canInputFifo
  6411  003230  6F60               	movwf	?_fifo_init& (0+255),b
  6412  003232  0E04               	movlw	high _can_inputBuffer
  6413  003234  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6414  003236  0E00               	movlw	low _can_inputBuffer
  6415  003238  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6416  00323A  0E01               	movlw	1
  6417  00323C  6F65               	movwf	(?_fifo_init+5)& (0+255),b
  6418  00323E  0EEE               	movlw	238
  6419  003240  6F64               	movwf	(?_fifo_init+4)& (0+255),b
  6420  003242  ECCB  F02A         	call	_fifo_init	;wreg free
  6421                           
  6422                           ; BSR set to: 0
  6423                           ;main.c: 282: init_crc8();
  6424  003246  ECFC  F027         	call	_init_crc8	;wreg free
  6425                           
  6426                           ; BSR set to: 1
  6427                           ;main.c: 286: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  6428                           ;main.c: 287: ( 0xaa != Read_b_eep(0x02) ) ) {
  6429  00324A  0100               	movlb	0	; () banked
  6430  00324C  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6431  00324E  0E01               	movlw	1
  6432  003250  6F60               	movwf	?_Read_b_eep& (0+255),b
  6433  003252  EC6E  F02C         	call	_Read_b_eep	;wreg free
  6434  003256  0A55               	xorlw	85
  6435  003258  E108               	bnz	l13376
  6436  00325A  0100               	movlb	0	; () banked
  6437  00325C  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
  6438  00325E  0E02               	movlw	2
  6439  003260  6F60               	movwf	?_Read_b_eep& (0+255),b
  6440  003262  EC6E  F02C         	call	_Read_b_eep	;wreg free
  6441  003266  0AAA               	xorlw	170
  6442  003268  A4D8               	btfss	status,2,c
  6443  00326A                     l13376:
  6444                           
  6445                           ;main.c: 288: vscp_restoreDefaults();
  6446  00326A  EC80  F02C         	call	_vscp_restoreDefaults	;wreg free
  6447                           
  6448                           ;main.c: 289: }
  6449                           ;main.c: 292: init();
  6450  00326E  EC22  F02A         	call	_init	;wreg free
  6451                           
  6452                           ; BSR set to: 0
  6453                           ;main.c: 296: _delay((unsigned long)((10)*(40000000/4000.0)));
  6454  003272  0E82               	movlw	130
  6455  003274  6FE2               	movwf	??_main& (0+255),b
  6456  003276  0EDD               	movlw	221
  6457  003278                     u22777:
  6458  003278  2EE8               	decfsz	wreg,f,c
  6459  00327A  D7FE               	goto	u22777
  6460  00327C  2FE2               	decfsz	??_main& (0+255),f,b
  6461  00327E  D7FC               	goto	u22777
  6462  003280  D000               	nop2	
  6463                           
  6464                           ;main.c: 300: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6465  003282  0E79               	movlw	high STR_1
  6466  003284  0100               	movlb	0	; () banked
  6467  003286  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6468  003288  0E30               	movlw	low STR_1
  6469  00328A  6F61               	movwf	?_putsUSART& (0+255),b
  6470  00328C  EC84  F029         	call	_putsUSART	;wreg free
  6471                           
  6472                           ;main.c: 301: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  6473  003290  0E72               	movlw	high STR_2
  6474  003292  0100               	movlb	0	; () banked
  6475  003294  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6476  003296  0ED2               	movlw	low STR_2
  6477  003298  6F61               	movwf	?_putsUSART& (0+255),b
  6478  00329A  EC84  F029         	call	_putsUSART	;wreg free
  6479                           
  6480                           ;main.c: 302: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  6481  00329E  0E79               	movlw	high STR_3
  6482  0032A0  0100               	movlb	0	; () banked
  6483  0032A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6484  0032A4  0E9E               	movlw	low STR_3
  6485  0032A6  6F61               	movwf	?_putsUSART& (0+255),b
  6486  0032A8  EC84  F029         	call	_putsUSART	;wreg free
  6487                           
  6488                           ;main.c: 303: printFirmwareVersion();
  6489  0032AC  EC44  F026         	call	_printFirmwareVersion	;wreg free
  6490                           
  6491                           ;main.c: 304: printMode();
  6492  0032B0  EC86  F027         	call	_printMode	;wreg free
  6493                           
  6494                           ;main.c: 308: if ( 0 != mode ) {
  6495  0032B4  0100               	movlb	0	; () banked
  6496  0032B6  51E6               	movf	_mode& (0+255),w,b
  6497  0032B8  E036               	bz	l13410
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;main.c: 310: uint8_t c;
  6501                           ;main.c: 312: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6502  0032BA  0E73               	movlw	high STR_4
  6503  0032BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6504  0032BE  0EEB               	movlw	low STR_4
  6505  0032C0  6F61               	movwf	?_putsUSART& (0+255),b
  6506  0032C2  EC84  F029         	call	_putsUSART	;wreg free
  6507                           
  6508                           ;main.c: 314: timekeeper = 0;
  6509  0032C6  6A22               	clrf	_timekeeper,c	;volatile
  6510  0032C8  6A23               	clrf	_timekeeper+1,c	;volatile
  6511  0032CA  6A24               	clrf	_timekeeper+2,c	;volatile
  6512  0032CC  6A25               	clrf	_timekeeper+3,c	;volatile
  6513                           
  6514                           ;main.c: 315: ledFunctionality = 6;
  6515  0032CE  0E06               	movlw	6
  6516  0032D0  6E30               	movwf	_ledFunctionality,c
  6517                           
  6518                           ;main.c: 316: while (timekeeper < 3000) {
  6519  0032D2  D020               	goto	l13408
  6520  0032D4                     l437:
  6521  0032D4  0004               	clrwdt		;# 
  6522                           
  6523                           ;main.c: 318: (INTCONbits.GIE = 0);
  6524  0032D6  9EF2               	bcf	intcon,7,c	;volatile
  6525                           
  6526                           ;main.c: 319: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6527  0032D8  0E01               	movlw	high _serialInputFifo
  6528  0032DA  0100               	movlb	0	; () banked
  6529  0032DC  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6530  0032DE  0ED6               	movlw	low _serialInputFifo
  6531  0032E0  6F60               	movwf	?_fifo_read& (0+255),b
  6532  0032E2  0E00               	movlw	high main@c
  6533  0032E4  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6534  0032E6  0EE3               	movlw	low main@c
  6535  0032E8  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6536  0032EA  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6537  0032EC  0E01               	movlw	1
  6538  0032EE  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6539  0032F0  ECD5  F020         	call	_fifo_read	;wreg free
  6540  0032F4  0560               	decf	?_fifo_read& (0+255),w,b
  6541  0032F6  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6542  0032F8  E10C               	bnz	l438
  6543                           
  6544                           ; BSR set to: 0
  6545                           ;main.c: 320: (INTCONbits.GIE = 1);
  6546  0032FA  8EF2               	bsf	intcon,7,c	;volatile
  6547                           
  6548                           ; BSR set to: 0
  6549                           ;main.c: 321: if ('v' == c) {
  6550  0032FC  51E3               	movf	main@c& (0+255),w,b
  6551  0032FE  0A76               	xorlw	118
  6552  003300  E108               	bnz	l438
  6553                           
  6554                           ; BSR set to: 0
  6555                           ;main.c: 322: mode = 0;
  6556  003302  6BE6               	clrf	_mode& (0+255),b
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;main.c: 323: putsUSART((char *) "Temporary verbose mode set\r\n");
  6560  003304  0E7B               	movlw	high STR_5
  6561  003306  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6562  003308  0E2B               	movlw	low STR_5
  6563  00330A  6F61               	movwf	?_putsUSART& (0+255),b
  6564  00330C  EC84  F029         	call	_putsUSART	;wreg free
  6565                           
  6566                           ;main.c: 324: break;
  6567  003310  D00A               	goto	l13410
  6568  003312                     l438:
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;main.c: 325: }
  6572                           ;main.c: 326: }
  6573                           ;main.c: 327: (INTCONbits.GIE = 1);
  6574  003312  8EF2               	bsf	intcon,7,c	;volatile
  6575  003314                     l13408:
  6576  003314  0EB8               	movlw	184
  6577  003316  5C22               	subwf	_timekeeper,w,c	;volatile
  6578  003318  0E0B               	movlw	11
  6579  00331A  5823               	subwfb	_timekeeper+1,w,c	;volatile
  6580  00331C  0E00               	movlw	0
  6581  00331E  5824               	subwfb	_timekeeper+2,w,c	;volatile
  6582  003320  0E00               	movlw	0
  6583  003322  5825               	subwfb	_timekeeper+3,w,c	;volatile
  6584  003324  E3D7               	bnc	l437
  6585  003326                     l13410:
  6586                           
  6587                           ;main.c: 328: }
  6588                           ;main.c: 329: }
  6589                           ;main.c: 331: ledFunctionality = 1;
  6590  003326  0E01               	movlw	1
  6591  003328  6E30               	movwf	_ledFunctionality,c
  6592  00332A                     l441:
  6593  00332A  0004               	clrwdt		;# 
  6594                           
  6595                           ;main.c: 342: if (COMSTATbits.TXBO) {
  6596  00332C  AA74               	btfss	3956,5,c	;volatile
  6597  00332E  D002               	goto	l442
  6598                           
  6599                           ;main.c: 344: ledFunctionality = 6;
  6600  003330  0E06               	movlw	6
  6601  003332  D009               	goto	L1
  6602  003334                     l442:
  6603                           
  6604                           ;main.c: 346: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6605  003334  B874               	btfsc	3956,4,c	;volatile
  6606  003336  D002               	goto	l13418
  6607  003338  A674               	btfss	3956,3,c	;volatile
  6608  00333A  D002               	goto	l444
  6609  00333C                     l13418:
  6610                           
  6611                           ;main.c: 348: ledFunctionality = 5;
  6612  00333C  0E05               	movlw	5
  6613  00333E  D003               	goto	L1
  6614  003340                     l444:
  6615                           
  6616                           ;main.c: 352: ledFunctionality = 4;
  6617  003340  0E04               	movlw	4
  6618                           
  6619                           ;main.c: 350: else if (COMSTATbits.EWARN) {
  6620  003342  A074               	btfss	3956,0,c	;volatile
  6621                           
  6622                           ;main.c: 354: else {
  6623                           ;main.c: 356: ledFunctionality = 1;
  6624                           
  6625                           ;main.c: 353: }
  6626  003344  0E01               	movlw	1
  6627  003346                     L1:
  6628  003346  6E30               	movwf	_ledFunctionality,c
  6629                           
  6630                           ;main.c: 357: }
  6631                           ;main.c: 360: if (COMSTATbits.RXBnOVFL) {
  6632  003348  AC74               	btfss	3956,6,c	;volatile
  6633  00334A  D007               	goto	l13430
  6634                           
  6635                           ;main.c: 361: can_receiveOverruns++;
  6636  00334C  0101               	movlb	1	; () banked
  6637  00334E  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  6638  003350  0E00               	movlw	0
  6639  003352  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6640  003354  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6641  003356  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6642                           
  6643                           ; BSR set to: 1
  6644                           ;main.c: 362: COMSTATbits.RXBnOVFL = 0;
  6645  003358  9C74               	bcf	3956,6,c	;volatile
  6646  00335A                     l13430:
  6647                           
  6648                           ;main.c: 363: }
  6649                           ;main.c: 367: if ( RCSTAbits.OERR ) {
  6650  00335A  A2AB               	btfss	4011,1,c	;volatile
  6651  00335C  D002               	goto	l451
  6652                           
  6653                           ;main.c: 368: RCSTAbits.CREN = 0;
  6654  00335E  98AB               	bcf	4011,4,c	;volatile
  6655                           
  6656                           ;main.c: 369: RCSTAbits.CREN = 1;
  6657  003360  88AB               	bsf	4011,4,c	;volatile
  6658  003362                     l451:
  6659                           
  6660                           ;main.c: 370: }
  6661                           ;main.c: 372: if (0 == mode) {
  6662  003362  0100               	movlb	0	; () banked
  6663  003364  67E6               	tstfsz	_mode& (0+255),b
  6664  003366  D003               	goto	l13436
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;main.c: 373: doModeVerbose();
  6668  003368  EC7F  F001         	call	_doModeVerbose	;wreg free
  6669                           
  6670                           ;main.c: 374: }
  6671  00336C  D7DE               	goto	l441
  6672  00336E                     l13436:
  6673                           
  6674                           ; BSR set to: 0
  6675                           ;main.c: 375: else if (1 == mode) {
  6676  00336E  05E6               	decf	_mode& (0+255),w,b
  6677  003370  E103               	bnz	l13440
  6678  003372                     l13438:
  6679                           
  6680                           ; BSR set to: 0
  6681                           ;main.c: 376: doModeVscp();
  6682  003372  ECAF  F015         	call	_doModeVscp	;wreg free
  6683                           
  6684                           ;main.c: 377: }
  6685  003376  D7D9               	goto	l441
  6686  003378                     l13440:
  6687                           
  6688                           ; BSR set to: 0
  6689                           ;main.c: 378: else if (2 == mode) {
  6690  003378  51E6               	movf	_mode& (0+255),w,b
  6691  00337A  0A02               	xorlw	2
  6692  00337C  E103               	bnz	l13444
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;main.c: 379: doModeSLCAN();
  6696  00337E  EC2D  F00F         	call	_doModeSLCAN	;wreg free
  6697                           
  6698                           ;main.c: 380: }
  6699  003382  D7D3               	goto	l441
  6700  003384                     l13444:
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;main.c: 381: else if (3 == mode) {
  6704  003384  51E6               	movf	_mode& (0+255),w,b
  6705  003386  0A03               	xorlw	3
  6706  003388  E1F4               	bnz	l13438
  6707                           
  6708                           ; BSR set to: 0
  6709                           ;main.c: 382: doModeVscpNode();
  6710  00338A  EC87  F02C         	call	_doModeVscpNode	;wreg free
  6711                           
  6712                           ;main.c: 383: }
  6713  00338E  D7CD               	goto	l441
  6714  003390                     __end_of_main:
  6715                           	opt stack 0
  6716                           tblptru	equ	0xFF8
  6717                           tblptrh	equ	0xFF7
  6718                           tblptrl	equ	0xFF6
  6719                           tablat	equ	0xFF5
  6720                           prodh	equ	0xFF4
  6721                           prodl	equ	0xFF3
  6722                           intcon	equ	0xFF2
  6723                           indf0	equ	0xFEF
  6724                           postinc0	equ	0xFEE
  6725                           fsr0h	equ	0xFEA
  6726                           fsr0l	equ	0xFE9
  6727                           wreg	equ	0xFE8
  6728                           indf1	equ	0xFE7
  6729                           postinc1	equ	0xFE6
  6730                           postdec1	equ	0xFE5
  6731                           fsr1h	equ	0xFE2
  6732                           fsr1l	equ	0xFE1
  6733                           indf2	equ	0xFDF
  6734                           postinc2	equ	0xFDE
  6735                           postdec2	equ	0xFDD
  6736                           plusw2	equ	0xFDB
  6737                           fsr2h	equ	0xFDA
  6738                           fsr2l	equ	0xFD9
  6739                           status	equ	0xFD8
  6740                           
  6741 ;; *************** function _doModeVscpNode *****************
  6742 ;; Defined at:
  6743 ;;		line 1566 in file "main.c"
  6744 ;; Parameters:    Size  Location     Type
  6745 ;;		None
  6746 ;; Auto vars:     Size  Location     Type
  6747 ;;		None
  6748 ;; Return value:  Size  Location     Type
  6749 ;;		None               void
  6750 ;; Registers used:
  6751 ;;		None
  6752 ;; Tracked objects:
  6753 ;;		On entry : F/0
  6754 ;;		On exit  : F/0
  6755 ;;		Unchanged: F/0
  6756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6757 ;;      Params:         0       0       0       0       0       0       0
  6758 ;;      Locals:         0       0       0       0       0       0       0
  6759 ;;      Temps:          0       0       0       0       0       0       0
  6760 ;;      Totals:         0       0       0       0       0       0       0
  6761 ;;Total ram usage:        0 bytes
  6762 ;; Hardware stack levels used:    1
  6763 ;; Hardware stack levels required when called:    3
  6764 ;; This function calls:
  6765 ;;		Nothing
  6766 ;; This function is called by:
  6767 ;;		_main
  6768 ;; This function uses a non-reentrant model
  6769 ;;
  6770                           
  6771                           	psect	text1
  6772  00590E                     __ptext1:
  6773                           	opt stack 0
  6774  00590E                     _doModeVscpNode:
  6775                           	opt stack 27
  6776                           
  6777                           ; BSR set to: 0
  6778                           
  6779                           ; BSR set to: 0
  6780                           ;incstack = 0
  6781                           ;incstack = 0
  6782  00590E  0012               	return	
  6783  005910                     __end_of_doModeVscpNode:
  6784                           	opt stack 0
  6785                           tblptru	equ	0xFF8
  6786                           tblptrh	equ	0xFF7
  6787                           tblptrl	equ	0xFF6
  6788                           tablat	equ	0xFF5
  6789                           prodh	equ	0xFF4
  6790                           prodl	equ	0xFF3
  6791                           intcon	equ	0xFF2
  6792                           indf0	equ	0xFEF
  6793                           postinc0	equ	0xFEE
  6794                           fsr0h	equ	0xFEA
  6795                           fsr0l	equ	0xFE9
  6796                           wreg	equ	0xFE8
  6797                           indf1	equ	0xFE7
  6798                           postinc1	equ	0xFE6
  6799                           postdec1	equ	0xFE5
  6800                           fsr1h	equ	0xFE2
  6801                           fsr1l	equ	0xFE1
  6802                           indf2	equ	0xFDF
  6803                           postinc2	equ	0xFDE
  6804                           postdec2	equ	0xFDD
  6805                           plusw2	equ	0xFDB
  6806                           fsr2h	equ	0xFDA
  6807                           fsr2l	equ	0xFD9
  6808                           status	equ	0xFD8
  6809                           
  6810 ;; *************** function _doModeSLCAN *****************
  6811 ;; Defined at:
  6812 ;;		line 1348 in file "main.c"
  6813 ;; Parameters:    Size  Location     Type
  6814 ;;		None
  6815 ;; Auto vars:     Size  Location     Type
  6816 ;;  id              4   61[BANK0 ] unsigned long 
  6817 ;;  dlc             1   65[BANK0 ] unsigned char 
  6818 ;;  rv              1   67[BANK0 ] enum E15660
  6819 ;;  c               1   66[BANK0 ] unsigned char 
  6820 ;; Return value:  Size  Location     Type
  6821 ;;		None               void
  6822 ;; Registers used:
  6823 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6824 ;; Tracked objects:
  6825 ;;		On entry : F/0
  6826 ;;		On exit  : F/0
  6827 ;;		Unchanged: 0/0
  6828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6829 ;;      Params:         0       0       0       0       0       0       0
  6830 ;;      Locals:         0       7       0       0       0       0       0
  6831 ;;      Temps:          0       7       0       0       0       0       0
  6832 ;;      Totals:         0      14       0       0       0       0       0
  6833 ;;Total ram usage:       14 bytes
  6834 ;; Hardware stack levels used:    1
  6835 ;; Hardware stack levels required when called:    7
  6836 ;; This function calls:
  6837 ;;		_putsUSART
  6838 ;;		_fifo_read
  6839 ;;		_Busy_eep
  6840 ;;		_Write_b_eep
  6841 ;;		_ECANSetOperationMode
  6842 ;;		_memset
  6843 ;;		_receiveSendEventSLCAN
  6844 ;;		_strlen
  6845 ;;		_hexStringToBytes
  6846 ;;		_memcpy
  6847 ;;		_sendCANFrame
  6848 ;; This function is called by:
  6849 ;;		_main
  6850 ;; This function uses a non-reentrant model
  6851 ;;
  6852                           
  6853                           	psect	text2
  6854  001E5A                     __ptext2:
  6855                           	opt stack 0
  6856  001E5A                     _doModeSLCAN:
  6857                           	opt stack 23
  6858                           
  6859                           ; BSR set to: 0
  6860                           ;main.c: 1349: uint8_t c;
  6861                           ;main.c: 1350: BOOL rv = 0;
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;incstack = 0
  6865                           ;incstack = 0
  6866  001E5A  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6867                           
  6868                           ; BSR set to: 0
  6869                           ;main.c: 1353: receiveSendEventSLCAN();
  6870  001E5C  EC3B  F018         	call	_receiveSendEventSLCAN	;wreg free
  6871                           
  6872                           ;main.c: 1356: (INTCONbits.GIE = 0);
  6873  001E60  9EF2               	bcf	intcon,7,c	;volatile
  6874                           
  6875                           ;main.c: 1358: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  6876  001E62  0E01               	movlw	high _serialInputFifo
  6877  001E64  0100               	movlb	0	; () banked
  6878  001E66  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6879  001E68  0ED6               	movlw	low _serialInputFifo
  6880  001E6A  6F60               	movwf	?_fifo_read& (0+255),b
  6881  001E6C  0E00               	movlw	high doModeSLCAN@c
  6882  001E6E  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  6883  001E70  0EA2               	movlw	low doModeSLCAN@c
  6884  001E72  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6885  001E74  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  6886  001E76  0E01               	movlw	1
  6887  001E78  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  6888  001E7A  ECD5  F020         	call	_fifo_read	;wreg free
  6889  001E7E  0560               	decf	?_fifo_read& (0+255),w,b
  6890  001E80  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6891  001E82  E001 D1D0          	bnz	l14518
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;main.c: 1361: (INTCONbits.GIE = 1);
  6895  001E86  8EF2               	bsf	intcon,7,c	;volatile
  6896                           
  6897                           ; BSR set to: 0
  6898                           ;main.c: 1363: if (0x0d != c) {
  6899  001E88  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  6900  001E8A  0A0D               	xorlw	13
  6901  001E8C  E101 D17F          	bz	l14506
  6902                           
  6903                           ; BSR set to: 0
  6904                           ;main.c: 1364: cmdbuf[ pos ] = c;
  6905  001E90  EC89  F016         	call	PL24	;call to abstracted procedure
  6906  001E94  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  6907                           
  6908                           ; BSR set to: 0
  6909                           ;main.c: 1365: pos++;
  6910  001E98  2BE7               	incf	_pos& (0+255),f,b
  6911  001E9A  D1C6               	goto	l726
  6912  001E9C                     l14378:
  6913                           
  6914                           ; BSR set to: 0
  6915                           ;main.c: 1373: if (1 == strlen(cmdbuf)) {
  6916  001E9C  0E01               	movlw	high _cmdbuf
  6917  001E9E  0100               	movlb	0	; () banked
  6918  001EA0  6F61               	movwf	(?_strlen+1)& (0+255),b
  6919  001EA2  0E26               	movlw	low _cmdbuf
  6920  001EA4  6F60               	movwf	?_strlen& (0+255),b
  6921  001EA6  ECAB  F02A         	call	_strlen	;wreg free
  6922  001EAA  0560               	decf	?_strlen& (0+255),w,b
  6923  001EAC  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6924  001EAE  E001 D19D          	bnz	l14508
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;main.c: 1374: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6928  001EB2  0E7D               	movlw	high STR_133
  6929  001EB4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6930  001EB6  0E5B               	movlw	low STR_133
  6931  001EB8  6F61               	movwf	?_putsUSART& (0+255),b
  6932  001EBA  EC84  F029         	call	_putsUSART	;wreg free
  6933  001EBE                     l14382:
  6934                           
  6935                           ;main.c: 1375: rv = 1;
  6936  001EBE  0E01               	movlw	1
  6937  001EC0  D11D               	goto	L4
  6938  001EC2                     l14384:
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;main.c: 1381: if (1 == strlen(cmdbuf)) {
  6942  001EC2  0E01               	movlw	high _cmdbuf
  6943  001EC4  0100               	movlb	0	; () banked
  6944  001EC6  6F61               	movwf	(?_strlen+1)& (0+255),b
  6945  001EC8  0E26               	movlw	low _cmdbuf
  6946  001ECA  6F60               	movwf	?_strlen& (0+255),b
  6947  001ECC  ECAB  F02A         	call	_strlen	;wreg free
  6948  001ED0  0560               	decf	?_strlen& (0+255),w,b
  6949  001ED2  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6950  001ED4  E001 D18A          	bnz	l14508
  6951                           
  6952                           ; BSR set to: 0
  6953                           ;main.c: 1382: putsUSART((char *) "V1011\r\n");
  6954  001ED8  0E7E               	movlw	high STR_134
  6955  001EDA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6956  001EDC  0ED6               	movlw	low STR_134
  6957  001EDE  6F61               	movwf	?_putsUSART& (0+255),b
  6958  001EE0  EC84  F029         	call	_putsUSART	;wreg free
  6959  001EE4  D7EC               	goto	l14382
  6960  001EE6                     l14390:
  6961                           
  6962                           ; BSR set to: 0
  6963                           ;main.c: 1389: if (1 == strlen(cmdbuf)) {
  6964  001EE6  0E01               	movlw	high _cmdbuf
  6965  001EE8  0100               	movlb	0	; () banked
  6966  001EEA  6F61               	movwf	(?_strlen+1)& (0+255),b
  6967  001EEC  0E26               	movlw	low _cmdbuf
  6968  001EEE  6F60               	movwf	?_strlen& (0+255),b
  6969  001EF0  ECAB  F02A         	call	_strlen	;wreg free
  6970  001EF4  0560               	decf	?_strlen& (0+255),w,b
  6971  001EF6  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6972  001EF8  E001 D178          	bnz	l14508
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;main.c: 1390: putsUSART((char *) "N1977\r\n");
  6976  001EFC  0E7E               	movlw	high STR_135
  6977  001EFE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6978  001F00  0EDE               	movlw	low STR_135
  6979  001F02  6F61               	movwf	?_putsUSART& (0+255),b
  6980  001F04  EC84  F029         	call	_putsUSART	;wreg free
  6981  001F08  D7DA               	goto	l14382
  6982  001F0A                     l14396:
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;main.c: 1399: bInitiated = 1;
  6986  001F0A  0E01               	movlw	1
  6987  001F0C  6E2D               	movwf	_bInitiated,c
  6988                           
  6989                           ;main.c: 1400: rv = 1;
  6990  001F0E  D0C1               	goto	L3
  6991  001F10                     l736:
  6992                           
  6993                           ; BSR set to: 0
  6994                           ;main.c: 1405: if (!bOpen) {
  6995  001F10  67E5               	tstfsz	_bOpen& (0+255),b
  6996  001F12  D003               	goto	l14400
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;main.c: 1406: bInitiated = 1;
  7000  001F14  0E01               	movlw	1
  7001  001F16  6E2D               	movwf	_bInitiated,c
  7002                           
  7003                           ;main.c: 1407: rv = 1;
  7004  001F18  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7005  001F1A                     l14400:
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;main.c: 1412: if (1 == strlen(cmdbuf)) {
  7009  001F1A  0E01               	movlw	high _cmdbuf
  7010  001F1C  0100               	movlb	0	; () banked
  7011  001F1E  6F61               	movwf	(?_strlen+1)& (0+255),b
  7012  001F20  0E26               	movlw	low _cmdbuf
  7013  001F22  6F60               	movwf	?_strlen& (0+255),b
  7014  001F24  ECAB  F02A         	call	_strlen	;wreg free
  7015  001F28  0560               	decf	?_strlen& (0+255),w,b
  7016  001F2A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7017  001F2C  E001 D15E          	bnz	l14508
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;main.c: 1413: if (!bOpen && bInitiated) {
  7021  001F30  67E5               	tstfsz	_bOpen& (0+255),b
  7022  001F32  D15C               	goto	l14508
  7023                           
  7024                           ; BSR set to: 0
  7025  001F34  502D               	movf	_bInitiated,w,c
  7026  001F36  E101 D159          	bz	l14508
  7027                           
  7028                           ; BSR set to: 0
  7029                           ;main.c: 1414: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  7030  001F3A  0E00               	movlw	0
  7031  001F3C  EC43  F02C         	call	_ECANSetOperationMode
  7032                           
  7033                           ; BSR set to: 0
  7034                           ;main.c: 1415: bOpen = 1;
  7035  001F40  0E01               	movlw	1
  7036  001F42  6FE5               	movwf	_bOpen& (0+255),b
  7037  001F44  D7BC               	goto	l14382
  7038  001F46                     l14412:
  7039                           
  7040                           ; BSR set to: 0
  7041                           ;main.c: 1423: if (1 == strlen(cmdbuf)) {
  7042  001F46  0E01               	movlw	high _cmdbuf
  7043  001F48  0100               	movlb	0	; () banked
  7044  001F4A  6F61               	movwf	(?_strlen+1)& (0+255),b
  7045  001F4C  0E26               	movlw	low _cmdbuf
  7046  001F4E  6F60               	movwf	?_strlen& (0+255),b
  7047  001F50  ECAB  F02A         	call	_strlen	;wreg free
  7048  001F54  0560               	decf	?_strlen& (0+255),w,b
  7049  001F56  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7050  001F58  E001 D148          	bnz	l14508
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;main.c: 1424: if (bOpen) {
  7054  001F5C  51E5               	movf	_bOpen& (0+255),w,b
  7055  001F5E  E0AF               	bz	l14382
  7056                           
  7057                           ; BSR set to: 0
  7058                           ;main.c: 1425: ECANSetOperationMode(0x20);
  7059  001F60  0E20               	movlw	32
  7060  001F62  EC43  F02C         	call	_ECANSetOperationMode
  7061                           
  7062                           ; BSR set to: 0
  7063                           ;main.c: 1426: bOpen = 0;
  7064  001F66  6BE5               	clrf	_bOpen& (0+255),b
  7065  001F68  D7AA               	goto	l14382
  7066  001F6A                     l14422:
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;main.c: 1439: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7070  001F6A  51E5               	movf	_bOpen& (0+255),w,b
  7071  001F6C  E101 D13E          	bz	l14508
  7072                           
  7073                           ; BSR set to: 0
  7074  001F70  0E01               	movlw	high _cmdbuf
  7075  001F72  0100               	movlb	0	; () banked
  7076  001F74  6F61               	movwf	(?_strlen+1)& (0+255),b
  7077  001F76  0E26               	movlw	low _cmdbuf
  7078  001F78  6F60               	movwf	?_strlen& (0+255),b
  7079  001F7A  ECAB  F02A         	call	_strlen	;wreg free
  7080  001F7E  0E0A               	movlw	10
  7081  001F80  5D60               	subwf	?_strlen& (0+255),w,b
  7082  001F82  0E00               	movlw	0
  7083  001F84  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7084  001F86  E201 D131          	bnc	l14508
  7085                           
  7086                           ; BSR set to: 0
  7087                           ;main.c: 1441: uint32_t id;
  7088                           ;main.c: 1442: uint8_t dlc;
  7089                           ;main.c: 1444: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7090  001F8A  0E01               	movlw	high _wrkbuf
  7091  001F8C  0100               	movlb	0	; () banked
  7092  001F8E  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  7093  001F90  0E76               	movlw	low _wrkbuf
  7094  001F92  6F64               	movwf	?_hexStringToBytes& (0+255),b
  7095  001F94  0E50               	movlw	80
  7096  001F96  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  7097  001F98  0E01               	movlw	high _cmdbuf
  7098  001F9A  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  7099  001F9C  0E26               	movlw	low _cmdbuf
  7100  001F9E  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  7101  001FA0  EC64  F025         	call	_hexStringToBytes	;wreg free
  7102  001FA4  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7103  001FA6  0E05               	movlw	5
  7104  001FA8  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  7105  001FAA  E201 D11F          	bnc	l14508
  7106                           
  7107                           ; BSR set to: 0
  7108                           ;main.c: 1446: }
  7109                           ;main.c: 1448: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7110  001FAE  C179  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  7111  001FB2  0E08               	movlw	8
  7112  001FB4  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7113  001FB6  C178  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7114  001FBA  0E10               	movlw	16
  7115  001FBC  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7116  001FBE  C177  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7117  001FC2  0E18               	movlw	24
  7118  001FC4  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7119  001FC6  C176  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  7120  001FCA  0100               	movlb	0	; () banked
  7121  001FCC  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7122  001FCE  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7123  001FD0  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7124  001FD2  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7125  001FD4  D001               	goto	u19460
  7126  001FD6                     u19465:
  7127  001FD6  D929               	call	PL78	;call to abstracted procedure
  7128  001FD8                     u19460:
  7129  001FD8  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7130  001FDA  D7FD               	goto	u19465
  7131  001FDC  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7132  001FDE  D001               	goto	u19470
  7133  001FE0                     u19475:
  7134  001FE0  D924               	call	PL78	;call to abstracted procedure
  7135  001FE2                     u19470:
  7136  001FE2  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7137  001FE4  D7FD               	goto	u19475
  7138  001FE6  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  7139  001FE8  D001               	goto	u19480
  7140  001FEA                     u19485:
  7141  001FEA  D91F               	call	PL78	;call to abstracted procedure
  7142  001FEC                     u19480:
  7143  001FEC  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7144  001FEE  D7FD               	goto	u19485
  7145  001FF0  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7146  001FF4  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7147  001FF8  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7148  001FFC  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;main.c: 1449: dlc = vscpData[4];
  7152  002000  C038  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;main.c: 1452: if (dlc > 8) break;
  7156  002004  0E08               	movlw	8
  7157  002006  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7158  002008  D001               	goto	l14438
  7159  00200A  D0F0               	goto	l14508
  7160  00200C                     l14438:
  7161                           
  7162                           ; BSR set to: 0
  7163                           ;main.c: 1453: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7164  00200C  90D8               	bcf	status,0,c
  7165  00200E  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7166  002010  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7167  002012  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7168  002014  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7169  002016  0E0A               	movlw	10
  7170  002018  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7171  00201A  0E00               	movlw	0
  7172  00201C  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7173  00201E  0E01               	movlw	high _cmdbuf
  7174  002020  0100               	movlb	0	; () banked
  7175  002022  6F61               	movwf	(?_strlen+1)& (0+255),b
  7176  002024  0E26               	movlw	low _cmdbuf
  7177  002026  6F60               	movwf	?_strlen& (0+255),b
  7178  002028  ECAB  F02A         	call	_strlen	;wreg free
  7179  00202C  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7180  00202E  5D60               	subwf	?_strlen& (0+255),w,b
  7181  002030  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7182  002032  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7183  002034  E201 D0DA          	bnc	l14508
  7184                           
  7185                           ; BSR set to: 0
  7186                           ;main.c: 1455: memcpy(vscpData, vscpData + 5, dlc);
  7187  002038  0E34               	movlw	low _vscpData
  7188  00203A  6F60               	movwf	?_memcpy& (0+255),b
  7189  00203C  0E00               	movlw	high _vscpData
  7190  00203E  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7191  002040  0E0F               	movlw	15
  7192  002042  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7193  002044  0E5F               	movlw	__accesstop+-1
  7194  002046  6560               	cpfsgt	?_memcpy& (0+255),b
  7195  002048  6B61               	clrf	(?_memcpy+1)& (0+255),b
  7196  00204A  0E39               	movlw	low (_vscpData+5)
  7197  00204C  6F62               	movwf	(?_memcpy+2)& (0+255),b
  7198  00204E  0E00               	movlw	high (_vscpData+5)
  7199  002050  6F63               	movwf	(?_memcpy+3)& (0+255),b
  7200  002052  0E0F               	movlw	15
  7201  002054  6F63               	movwf	(?_memcpy+3)& (0+255),b
  7202  002056  0E5F               	movlw	__accesstop+-1
  7203  002058  6562               	cpfsgt	(?_memcpy+2)& (0+255),b
  7204  00205A  6B63               	clrf	(?_memcpy+3)& (0+255),b
  7205  00205C  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7206  002060  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7207  002062  EC8A  F02A         	call	_memcpy	;wreg free
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;main.c: 1457: rv = sendCANFrame(id, dlc, vscpData);
  7211  002066  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7212  00206A  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7213  00206E  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7214  002072  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7215  002076  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7216  00207A  0E34               	movlw	low _vscpData
  7217  00207C  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7218  00207E  0E00               	movlw	high _vscpData
  7219  002080  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7220  002082  0E0F               	movlw	15
  7221  002084  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7222  002086  0E5F               	movlw	__accesstop+-1
  7223  002088  6594               	cpfsgt	(?_sendCANFrame+5)& (0+255),b
  7224  00208A  6B95               	clrf	(?_sendCANFrame+6)& (0+255),b
  7225  00208C  EC48  F02B         	call	_sendCANFrame	;wreg free
  7226  002090  D035               	goto	L4
  7227  002092                     L3:
  7228  002092  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7229  002094  D0AB               	goto	l14508
  7230  002096                     l14446:
  7231                           
  7232                           ; BSR set to: 0
  7233                           ;main.c: 1472: if (bOpen && (strlen(cmdbuf) == 1)) {
  7234  002096  51E5               	movf	_bOpen& (0+255),w,b
  7235  002098  E101 D0A8          	bz	l14508
  7236                           
  7237                           ; BSR set to: 0
  7238  00209C  0E01               	movlw	high _cmdbuf
  7239  00209E  0100               	movlb	0	; () banked
  7240  0020A0  6F61               	movwf	(?_strlen+1)& (0+255),b
  7241  0020A2  0E26               	movlw	low _cmdbuf
  7242  0020A4  6F60               	movwf	?_strlen& (0+255),b
  7243  0020A6  ECAB  F02A         	call	_strlen	;wreg free
  7244  0020AA  0560               	decf	?_strlen& (0+255),w,b
  7245  0020AC  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7246  0020AE  E001 D09D          	bnz	l14508
  7247                           
  7248                           ; BSR set to: 0
  7249                           ;main.c: 1473: putsUSART((char *) "F00\r\n");
  7250  0020B2  0E7F               	movlw	high STR_136
  7251  0020B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7252  0020B6  0E7A               	movlw	low STR_136
  7253  0020B8  6F61               	movwf	?_putsUSART& (0+255),b
  7254  0020BA  EC84  F029         	call	_putsUSART	;wreg free
  7255  0020BE  D096               	goto	l14508
  7256  0020C0                     l14456:
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;main.c: 1489: if (2 == strlen(cmdbuf)) {
  7260  0020C0  0E01               	movlw	high _cmdbuf
  7261  0020C2  0100               	movlb	0	; () banked
  7262  0020C4  6F61               	movwf	(?_strlen+1)& (0+255),b
  7263  0020C6  0E26               	movlw	low _cmdbuf
  7264  0020C8  6F60               	movwf	?_strlen& (0+255),b
  7265  0020CA  ECAB  F02A         	call	_strlen	;wreg free
  7266  0020CE  5160               	movf	?_strlen& (0+255),w,b
  7267  0020D0  0A02               	xorlw	2
  7268  0020D2  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7269  0020D4  E001 D08A          	bnz	l14508
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;main.c: 1490: if (!bOpen) {
  7273  0020D8  67E5               	tstfsz	_bOpen& (0+255),b
  7274  0020DA  D088               	goto	l14508
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;main.c: 1491: if ('0' == cmdbuf[1]) {
  7278  0020DC  0101               	movlb	1	; () banked
  7279  0020DE  5127               	movf	(_cmdbuf+1)& (0+255),w,b
  7280  0020E0  0A30               	xorlw	48
  7281  0020E2  E10E               	bnz	l14468
  7282                           
  7283                           ; BSR set to: 1
  7284                           ;main.c: 1492: nTimeStamp = 0;
  7285  0020E4  6A31               	clrf	_nTimeStamp,c
  7286                           
  7287                           ; BSR set to: 1
  7288                           ;main.c: 1494: (Busy_eep(), Write_b_eep(0x05,0));
  7289  0020E6  EC84  F02C         	call	_Busy_eep	;wreg free
  7290  0020EA  0100               	movlb	0	; () banked
  7291  0020EC  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7292  0020EE  0E05               	movlw	5
  7293  0020F0  6F60               	movwf	?_Write_b_eep& (0+255),b
  7294  0020F2  0E00               	movlw	0
  7295  0020F4  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
  7296  0020F6  EC9D  F02B         	call	_Write_b_eep	;wreg free
  7297  0020FA  D6E1               	goto	l14382
  7298  0020FC                     L4:
  7299  0020FC  0100               	movlb	0	; () banked
  7300  0020FE  D7C9               	goto	L3
  7301  002100                     l14468:
  7302                           
  7303                           ; BSR set to: 1
  7304  002100  5127               	movf	(_cmdbuf+1)& (0+255),w,b
  7305  002102  0A31               	xorlw	49
  7306  002104  E10D               	bnz	l761
  7307                           
  7308                           ; BSR set to: 1
  7309                           ;main.c: 1497: nTimeStamp = 1;
  7310  002106  0E01               	movlw	1
  7311  002108  6E31               	movwf	_nTimeStamp,c
  7312                           
  7313                           ; BSR set to: 1
  7314                           ;main.c: 1499: (Busy_eep(), Write_b_eep(0x05,1));
  7315  00210A  EC84  F02C         	call	_Busy_eep	;wreg free
  7316  00210E  0100               	movlb	0	; () banked
  7317  002110  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
  7318  002112  0E05               	movlw	5
  7319  002114  6F60               	movwf	?_Write_b_eep& (0+255),b
  7320  002116  0E01               	movlw	1
  7321  002118  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
  7322  00211A  EC9D  F02B         	call	_Write_b_eep	;wreg free
  7323  00211E  D6CF               	goto	l14382
  7324  002120                     l761:
  7325                           
  7326                           ; BSR set to: 1
  7327                           ;main.c: 1503: rv = 0;
  7328  002120  0100               	movlb	0	; () banked
  7329  002122  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7330  002124  D063               	goto	l14508
  7331  002126                     l14476:
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;main.c: 1511: (Busy_eep(), Write_b_eep(0x01,0xFF));
  7335  002126  EC84  F02C         	call	_Busy_eep	;wreg free
  7336  00212A  EC1E  F023         	call	PL60	;call to abstracted procedure
  7337  00212E  EC9D  F02B         	call	_Write_b_eep	;wreg free
  7338  002132  00FF               	reset		;# 
  7339                           
  7340                           ;main.c: 1513: break;
  7341  002134  D05B               	goto	l14508
  7342  002136                     l14480:
  7343                           
  7344                           ; BSR set to: 0
  7345                           ;main.c: 1517: if ( 'v' == cmdbuf[1] &&
  7346                           ;main.c: 1518: 's' == cmdbuf[2] &&
  7347                           ;main.c: 1519: 'c' == cmdbuf[3] &&
  7348                           ;main.c: 1520: 'p' == cmdbuf[4] ) {
  7349  002136  0101               	movlb	1	; () banked
  7350  002138  5127               	movf	(_cmdbuf+1)& (0+255),w,b
  7351  00213A  0A76               	xorlw	118
  7352  00213C  E10D               	bnz	l14490
  7353                           
  7354                           ; BSR set to: 1
  7355  00213E  5128               	movf	(_cmdbuf+2)& (0+255),w,b
  7356  002140  0A73               	xorlw	115
  7357  002142  E10A               	bnz	l14490
  7358                           
  7359                           ; BSR set to: 1
  7360  002144  5129               	movf	(_cmdbuf+3)& (0+255),w,b
  7361  002146  0A63               	xorlw	99
  7362  002148  E107               	bnz	l14490
  7363                           
  7364                           ; BSR set to: 1
  7365  00214A  512A               	movf	(_cmdbuf+4)& (0+255),w,b
  7366  00214C  0A70               	xorlw	112
  7367  00214E  E104               	bnz	l14490
  7368                           
  7369                           ; BSR set to: 1
  7370                           ;main.c: 1521: mode = 1;
  7371  002150  0E01               	movlw	1
  7372  002152  0100               	movlb	0	; () banked
  7373  002154  6FE6               	movwf	_mode& (0+255),b
  7374                           
  7375                           ;main.c: 1522: }
  7376  002156  D04A               	goto	l14508
  7377  002158                     l14490:
  7378                           
  7379                           ; BSR set to: 1
  7380                           ;main.c: 1523: else if ( 'v' == cmdbuf[1] &&
  7381                           ;main.c: 1524: 'e' == cmdbuf[2] &&
  7382                           ;main.c: 1525: 'r' == cmdbuf[3] &&
  7383                           ;main.c: 1526: 'b' == cmdbuf[4] ) {
  7384  002158  5127               	movf	(_cmdbuf+1)& (0+255),w,b
  7385  00215A  0A76               	xorlw	118
  7386  00215C  E147               	bnz	l14508
  7387                           
  7388                           ; BSR set to: 1
  7389  00215E  5128               	movf	(_cmdbuf+2)& (0+255),w,b
  7390  002160  0A65               	xorlw	101
  7391  002162  E144               	bnz	l14508
  7392                           
  7393                           ; BSR set to: 1
  7394  002164  5129               	movf	(_cmdbuf+3)& (0+255),w,b
  7395  002166  0A72               	xorlw	114
  7396  002168  E141               	bnz	l14508
  7397                           
  7398                           ; BSR set to: 1
  7399  00216A  512A               	movf	(_cmdbuf+4)& (0+255),w,b
  7400  00216C  0A62               	xorlw	98
  7401  00216E  E13E               	bnz	l14508
  7402                           
  7403                           ; BSR set to: 1
  7404                           ;main.c: 1527: mode = 0;
  7405  002170  0100               	movlb	0	; () banked
  7406  002172  6BE6               	clrf	_mode& (0+255),b
  7407  002174  D03B               	goto	l14508
  7408  002176                     l14500:
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;main.c: 1532: {
  7412                           ;main.c: 1534: if (0 == strlen(cmdbuf)) {
  7413  002176  0E01               	movlw	high _cmdbuf
  7414  002178  0100               	movlb	0	; () banked
  7415  00217A  6F61               	movwf	(?_strlen+1)& (0+255),b
  7416  00217C  0E26               	movlw	low _cmdbuf
  7417  00217E  6F60               	movwf	?_strlen& (0+255),b
  7418  002180  ECAB  F02A         	call	_strlen	;wreg free
  7419  002184  5161               	movf	(?_strlen+1)& (0+255),w,b
  7420  002186  1160               	iorwf	?_strlen& (0+255),w,b
  7421  002188  E101 D699          	bz	l14382
  7422  00218C  D02F               	goto	l14508
  7423  00218E                     l14506:
  7424                           
  7425                           ; BSR set to: 0
  7426  00218E  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7427                           
  7428                           ; Switch size 1, requested type "space"
  7429                           ; Number of cases is 17, Range of values is 64 to 116
  7430                           ; switch strategies available:
  7431                           ; Name         Instructions Cycles
  7432                           ; simple_byte           52    27 (average)
  7433                           ;	Chosen strategy is simple_byte
  7434  002190  0A40               	xorlw	64	; case 64
  7435  002192  E0D1               	bz	l14480
  7436  002194  0A02               	xorlw	2	; case 66
  7437  002196  E0C7               	bz	l14476
  7438  002198  0A01               	xorlw	1	; case 67
  7439  00219A  E101 D6D4          	bz	l14412
  7440  00219E  0A05               	xorlw	5	; case 70
  7441  0021A0  E101 D779          	bz	l14446
  7442  0021A4  0A0C               	xorlw	12	; case 74
  7443  0021A6  E101 D679          	bz	l14378
  7444  0021AA  0A07               	xorlw	7	; case 77
  7445  0021AC  E101 D687          	bz	l14382
  7446  0021B0  0A03               	xorlw	3	; case 78
  7447  0021B2  E101 D698          	bz	l14390
  7448  0021B6  0A01               	xorlw	1	; case 79
  7449  0021B8  E101 D6AF          	bz	l14400
  7450  0021BC  0A1D               	xorlw	29	; case 82
  7451  0021BE  E016               	bz	l14508
  7452  0021C0  0A01               	xorlw	1	; case 83
  7453  0021C2  E101 D6A2          	bz	l14396
  7454  0021C6  0A07               	xorlw	7	; case 84
  7455  0021C8  E101 D6CF          	bz	l14422
  7456  0021CC  0A02               	xorlw	2	; case 86
  7457  0021CE  E101 D678          	bz	l14384
  7458  0021D2  0A0C               	xorlw	12	; case 90
  7459  0021D4  E101 D774          	bz	l14456
  7460  0021D8  0A37               	xorlw	55	; case 109
  7461  0021DA  E101 D670          	bz	l14382
  7462  0021DE  0A1F               	xorlw	31	; case 114
  7463  0021E0  E005               	bz	l14508
  7464  0021E2  0A01               	xorlw	1	; case 115
  7465  0021E4  E101 D694          	bz	l736
  7466  0021E8  0A07               	xorlw	7	; case 116
  7467  0021EA  E1C5               	bnz	l14500
  7468  0021EC                     l14508:
  7469                           
  7470                           ;main.c: 1542: if (rv) {
  7471  0021EC  0100               	movlb	0	; () banked
  7472  0021EE  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7473  0021F0  E007               	bz	l14512
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;main.c: 1544: putsUSART((char *) "\r");
  7477  0021F2  0E7F               	movlw	high STR_137
  7478  0021F4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7479  0021F6  0EF3               	movlw	low STR_137
  7480  0021F8  6F61               	movwf	?_putsUSART& (0+255),b
  7481  0021FA  EC84  F029         	call	_putsUSART	;wreg free
  7482                           
  7483                           ;main.c: 1545: }
  7484  0021FE  D006               	goto	l14514
  7485  002200                     l14512:
  7486                           
  7487                           ; BSR set to: 0
  7488                           ;main.c: 1546: else {
  7489                           ;main.c: 1548: putsUSART((char *) "\a");
  7490  002200  0E7F               	movlw	high STR_138
  7491  002202  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7492  002204  0EF1               	movlw	low STR_138
  7493  002206  6F61               	movwf	?_putsUSART& (0+255),b
  7494  002208  EC84  F029         	call	_putsUSART	;wreg free
  7495  00220C                     l14514:
  7496                           
  7497                           ;main.c: 1549: }
  7498                           ;main.c: 1552: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7499  00220C  0E01               	movlw	high _cmdbuf
  7500  00220E  0100               	movlb	0	; () banked
  7501  002210  6F61               	movwf	(?_memset+1)& (0+255),b
  7502  002212  0E26               	movlw	low _cmdbuf
  7503  002214  6F60               	movwf	?_memset& (0+255),b
  7504  002216  6B63               	clrf	(?_memset+3)& (0+255),b
  7505  002218  6B62               	clrf	(?_memset+2)& (0+255),b
  7506  00221A  6B65               	clrf	(?_memset+5)& (0+255),b
  7507  00221C  0E50               	movlw	80
  7508  00221E  6F64               	movwf	(?_memset+4)& (0+255),b
  7509  002220  ECFE  F02B         	call	_memset	;wreg free
  7510                           
  7511                           ; BSR set to: 0
  7512                           ;main.c: 1553: pos = 0;
  7513  002224  6BE7               	clrf	_pos& (0+255),b
  7514  002226                     l14518:
  7515                           
  7516                           ; BSR set to: 0
  7517                           ;main.c: 1555: }
  7518                           ;main.c: 1558: (INTCONbits.GIE = 1);
  7519  002226  8EF2               	bsf	intcon,7,c	;volatile
  7520  002228                     l726:
  7521                           
  7522                           ; BSR set to: 0
  7523  002228  0012               	return	
  7524  00222A                     __end_of_doModeSLCAN:
  7525                           	opt stack 0
  7526  00222A                     PL78:
  7527                           	opt stack 23
  7528  00222A  90D8               	bcf	status,0,c
  7529  00222C  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7530  00222E  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7531  002230  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7532  002232  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7533  002234  0012               	return	
  7534  002236                     __end_ofPL78:
  7535                           	opt stack 0
  7536                           tblptru	equ	0xFF8
  7537                           tblptrh	equ	0xFF7
  7538                           tblptrl	equ	0xFF6
  7539                           tablat	equ	0xFF5
  7540                           prodh	equ	0xFF4
  7541                           prodl	equ	0xFF3
  7542                           intcon	equ	0xFF2
  7543                           indf0	equ	0xFEF
  7544                           postinc0	equ	0xFEE
  7545                           fsr0h	equ	0xFEA
  7546                           fsr0l	equ	0xFE9
  7547                           wreg	equ	0xFE8
  7548                           indf1	equ	0xFE7
  7549                           postinc1	equ	0xFE6
  7550                           postdec1	equ	0xFE5
  7551                           fsr1h	equ	0xFE2
  7552                           fsr1l	equ	0xFE1
  7553                           indf2	equ	0xFDF
  7554                           postinc2	equ	0xFDE
  7555                           postdec2	equ	0xFDD
  7556                           plusw2	equ	0xFDB
  7557                           fsr2h	equ	0xFDA
  7558                           fsr2l	equ	0xFD9
  7559                           status	equ	0xFD8
  7560                           
  7561 ;; *************** function _hexStringToBytes *****************
  7562 ;; Defined at:
  7563 ;;		line 35 in file "hexutils.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7566 ;;		 -> wrkbuf(80), 
  7567 ;;  size            1    6[BANK0 ] unsigned char 
  7568 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7569 ;;		 -> cmdbuf(80), 
  7570 ;; Auto vars:     Size  Location     Type
  7571 ;;  i               2   16[BANK0 ] int 
  7572 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7573 ;;		 -> cmdbuf(80), 
  7574 ;;  len             2   12[BANK0 ] int 
  7575 ;; Return value:  Size  Location     Type
  7576 ;;                  1    wreg      unsigned char 
  7577 ;; Registers used:
  7578 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7579 ;; Tracked objects:
  7580 ;;		On entry : F/0
  7581 ;;		On exit  : F/0
  7582 ;;		Unchanged: 0/0
  7583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7584 ;;      Params:         0       5       0       0       0       0       0
  7585 ;;      Locals:         0       6       0       0       0       0       0
  7586 ;;      Temps:          0       3       0       0       0       0       0
  7587 ;;      Totals:         0      14       0       0       0       0       0
  7588 ;;Total ram usage:       14 bytes
  7589 ;; Hardware stack levels used:    1
  7590 ;; Hardware stack levels required when called:    4
  7591 ;; This function calls:
  7592 ;;		_strlen
  7593 ;;		_nibbleFromChar
  7594 ;; This function is called by:
  7595 ;;		_doModeSLCAN
  7596 ;; This function uses a non-reentrant model
  7597 ;;
  7598                           
  7599                           	psect	text3
  7600  004AC8                     __ptext3:
  7601                           	opt stack 0
  7602  004AC8                     _hexStringToBytes:
  7603                           	opt stack 25
  7604                           
  7605                           ; BSR set to: 0
  7606                           ;hexutils.c: 36: uint8_t *p;
  7607                           ;hexutils.c: 37: int len, i;
  7608                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7609                           
  7610                           ; BSR set to: 0
  7611                           ;incstack = 0
  7612                           ;incstack = 0
  7613  004AC8  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7614  004ACC  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7615  004AD0  ECAB  F02A         	call	_strlen	;wreg free
  7616  004AD4  90D8               	bcf	status,0,c
  7617  004AD6  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7618  004AD8  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7619  004ADA  3160               	rrcf	?_strlen& (0+255),w,b
  7620  004ADC  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7621                           
  7622                           ; BSR set to: 0
  7623                           ;hexutils.c: 40: if (len > size) return 0;
  7624  004ADE  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7625  004AE0  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7626  004AE2  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7627  004AE4  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7628  004AE6  0A80               	xorlw	128
  7629  004AE8  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7630  004AEA  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7631  004AEC  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7632  004AEE  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7633  004AF0  0A80               	xorlw	128
  7634  004AF2  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7635  004AF4  E202               	bc	l1594
  7636                           
  7637                           ; BSR set to: 0
  7638  004AF6  0E00               	movlw	0
  7639  004AF8  D033               	goto	l1595
  7640  004AFA                     l1594:
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7644  004AFA  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7645  004AFC  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7646  004AFE  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7647  004B02  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7648  004B06  D022               	goto	l16080
  7649  004B08                     l16074:
  7650                           
  7651                           ; BSR set to: 0
  7652                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7653  004B08  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7654  004B0A  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7655  004B0C  6ED9               	movwf	fsr2l,c
  7656  004B0E  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7657  004B10  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7658  004B12  6EDA               	movwf	fsr2h,c
  7659  004B14  EE10 F001          	lfsr	1,1
  7660  004B18  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7661  004B1A  26E1               	addwf	fsr1l,f,c
  7662  004B1C  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7663  004B1E  22E2               	addwfc	fsr1h,f,c
  7664  004B20  50E7               	movf	indf1,w,c
  7665  004B22  ECEB  F02A         	call	_nibbleFromChar
  7666  004B26  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7667  004B28  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7668  004B2C  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7669  004B30  50E7               	movf	indf1,w,c
  7670  004B32  ECEB  F02A         	call	_nibbleFromChar
  7671  004B36  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7672  004B38  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7673  004B3A  0BF0               	andlw	240
  7674  004B3C  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7675  004B3E  6EDF               	movwf	indf2,c
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;hexutils.c: 43: p += 2;
  7679  004B40  0E02               	movlw	2
  7680  004B42  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7681  004B44  0E00               	movlw	0
  7682  004B46  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7683                           
  7684                           ; BSR set to: 0
  7685  004B48  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7686  004B4A  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7687  004B4C                     l16080:
  7688                           
  7689                           ; BSR set to: 0
  7690  004B4C  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7691  004B4E  0A80               	xorlw	128
  7692  004B50  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7693  004B52  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7694  004B54  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7695  004B56  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7696  004B58  0A80               	xorlw	128
  7697  004B5A  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7698  004B5C  E3D5               	bnc	l16074
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;hexutils.c: 44: }
  7702                           ;hexutils.c: 46: return i;
  7703  004B5E  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7704  004B60                     l1595:
  7705                           
  7706                           ; BSR set to: 0
  7707  004B60  0012               	return	
  7708  004B62                     __end_of_hexStringToBytes:
  7709                           	opt stack 0
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           intcon	equ	0xFF2
  7717                           indf0	equ	0xFEF
  7718                           postinc0	equ	0xFEE
  7719                           fsr0h	equ	0xFEA
  7720                           fsr0l	equ	0xFE9
  7721                           wreg	equ	0xFE8
  7722                           indf1	equ	0xFE7
  7723                           postinc1	equ	0xFE6
  7724                           postdec1	equ	0xFE5
  7725                           fsr1h	equ	0xFE2
  7726                           fsr1l	equ	0xFE1
  7727                           indf2	equ	0xFDF
  7728                           postinc2	equ	0xFDE
  7729                           postdec2	equ	0xFDD
  7730                           plusw2	equ	0xFDB
  7731                           fsr2h	equ	0xFDA
  7732                           fsr2l	equ	0xFD9
  7733                           status	equ	0xFD8
  7734                           
  7735 ;; *************** function _nibbleFromChar *****************
  7736 ;; Defined at:
  7737 ;;		line 20 in file "hexutils.c"
  7738 ;; Parameters:    Size  Location     Type
  7739 ;;  c               1    wreg     unsigned char 
  7740 ;; Auto vars:     Size  Location     Type
  7741 ;;  c               1    0[BANK0 ] unsigned char 
  7742 ;; Return value:  Size  Location     Type
  7743 ;;                  1    wreg      unsigned char 
  7744 ;; Registers used:
  7745 ;;		wreg, status,2, status,0
  7746 ;; Tracked objects:
  7747 ;;		On entry : F/0
  7748 ;;		On exit  : F/0
  7749 ;;		Unchanged: 0/0
  7750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7751 ;;      Params:         0       0       0       0       0       0       0
  7752 ;;      Locals:         0       1       0       0       0       0       0
  7753 ;;      Temps:          0       0       0       0       0       0       0
  7754 ;;      Totals:         0       1       0       0       0       0       0
  7755 ;;Total ram usage:        1 bytes
  7756 ;; Hardware stack levels used:    1
  7757 ;; Hardware stack levels required when called:    3
  7758 ;; This function calls:
  7759 ;;		Nothing
  7760 ;; This function is called by:
  7761 ;;		_hexStringToBytes
  7762 ;; This function uses a non-reentrant model
  7763 ;;
  7764                           
  7765                           	psect	text4
  7766  0055D6                     __ptext4:
  7767                           	opt stack 0
  7768  0055D6                     _nibbleFromChar:
  7769                           	opt stack 25
  7770                           
  7771                           ; BSR set to: 0
  7772                           ;incstack = 0
  7773                           ;incstack = 0
  7774                           ;nibbleFromChar@c stored from wreg
  7775  0055D6  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7779  0055DA  0E2F               	movlw	47
  7780  0055DC  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7781  0055DE  D006               	goto	l16280
  7782                           
  7783                           ; BSR set to: 0
  7784  0055E0  0E3A               	movlw	58
  7785  0055E2  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7786  0055E4  D003               	goto	l16280
  7787                           
  7788                           ; BSR set to: 0
  7789  0055E6  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7790  0055E8  0FD0               	addlw	208
  7791  0055EA  D013               	goto	l1589
  7792  0055EC                     l16280:
  7793                           
  7794                           ; BSR set to: 0
  7795                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7796  0055EC  0E60               	movlw	96
  7797  0055EE  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7798  0055F0  D006               	goto	l16288
  7799                           
  7800                           ; BSR set to: 0
  7801  0055F2  0E67               	movlw	103
  7802  0055F4  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7803  0055F6  D003               	goto	l16288
  7804                           
  7805                           ; BSR set to: 0
  7806  0055F8  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7807  0055FA  0FA9               	addlw	169
  7808  0055FC  D00A               	goto	l1589
  7809  0055FE                     l16288:
  7810                           
  7811                           ; BSR set to: 0
  7812                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7813  0055FE  0E40               	movlw	64
  7814  005600  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7815  005602  D006               	goto	l16296
  7816                           
  7817                           ; BSR set to: 0
  7818  005604  0E47               	movlw	71
  7819  005606  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7820  005608  D003               	goto	l16296
  7821                           
  7822                           ; BSR set to: 0
  7823  00560A  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7824  00560C  0FC9               	addlw	201
  7825  00560E  D001               	goto	l1589
  7826  005610                     l16296:
  7827                           
  7828                           ; BSR set to: 0
  7829                           ;hexutils.c: 24: return 255;
  7830  005610  0EFF               	movlw	255
  7831  005612                     l1589:
  7832                           
  7833                           ; BSR set to: 0
  7834  005612  0012               	return	
  7835  005614                     __end_of_nibbleFromChar:
  7836                           	opt stack 0
  7837                           tblptru	equ	0xFF8
  7838                           tblptrh	equ	0xFF7
  7839                           tblptrl	equ	0xFF6
  7840                           tablat	equ	0xFF5
  7841                           prodh	equ	0xFF4
  7842                           prodl	equ	0xFF3
  7843                           intcon	equ	0xFF2
  7844                           indf0	equ	0xFEF
  7845                           postinc0	equ	0xFEE
  7846                           fsr0h	equ	0xFEA
  7847                           fsr0l	equ	0xFE9
  7848                           wreg	equ	0xFE8
  7849                           indf1	equ	0xFE7
  7850                           postinc1	equ	0xFE6
  7851                           postdec1	equ	0xFE5
  7852                           fsr1h	equ	0xFE2
  7853                           fsr1l	equ	0xFE1
  7854                           indf2	equ	0xFDF
  7855                           postinc2	equ	0xFDE
  7856                           postdec2	equ	0xFDD
  7857                           plusw2	equ	0xFDB
  7858                           fsr2h	equ	0xFDA
  7859                           fsr2l	equ	0xFD9
  7860                           status	equ	0xFD8
  7861                           
  7862 ;; *************** function _receiveSendEventSLCAN *****************
  7863 ;; Defined at:
  7864 ;;		line 2155 in file "main.c"
  7865 ;; Parameters:    Size  Location     Type
  7866 ;;		None
  7867 ;; Auto vars:     Size  Location     Type
  7868 ;;  id              4   38[BANK0 ] unsigned long 
  7869 ;;  i               2   43[BANK0 ] int 
  7870 ;;  dlc             1   42[BANK0 ] unsigned char 
  7871 ;; Return value:  Size  Location     Type
  7872 ;;                  1    wreg      enum E15660
  7873 ;; Registers used:
  7874 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7875 ;; Tracked objects:
  7876 ;;		On entry : F/0
  7877 ;;		On exit  : 0/0
  7878 ;;		Unchanged: 0/0
  7879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7880 ;;      Params:         0       0       0       0       0       0       0
  7881 ;;      Locals:         0       7       0       0       0       0       0
  7882 ;;      Temps:          0       3       0       0       0       0       0
  7883 ;;      Totals:         0      10       0       0       0       0       0
  7884 ;;Total ram usage:       10 bytes
  7885 ;; Hardware stack levels used:    1
  7886 ;; Hardware stack levels required when called:    6
  7887 ;; This function calls:
  7888 ;;		_putsUSART
  7889 ;;		_WriteUSART
  7890 ;;		_strlen
  7891 ;;		_getCANFrame
  7892 ;;		_ultoa
  7893 ;;		_itoa
  7894 ;; This function is called by:
  7895 ;;		_doModeSLCAN
  7896 ;; This function uses a non-reentrant model
  7897 ;;
  7898                           
  7899                           	psect	text5
  7900  003076                     __ptext5:
  7901                           	opt stack 0
  7902  003076                     _receiveSendEventSLCAN:
  7903                           	opt stack 23
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;main.c: 2156: int i;
  7907                           ;main.c: 2157: uint8_t dlc;
  7908                           ;main.c: 2158: uint32_t id;
  7909                           ;main.c: 2160: if (getCANFrame(&id, &dlc, vscpData)) {
  7910                           
  7911                           ; BSR set to: 0
  7912                           ;incstack = 0
  7913                           ;incstack = 0
  7914  003076  0E8A               	movlw	low receiveSendEventSLCAN@dlc
  7915  003078  6F6E               	movwf	?_getCANFrame& (0+255),b
  7916  00307A  0E34               	movlw	low _vscpData
  7917  00307C  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
  7918  00307E  0E00               	movlw	high _vscpData
  7919  003080  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
  7920  003082  0E0F               	movlw	15
  7921  003084  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
  7922  003086  0E5F               	movlw	__accesstop+-1
  7923  003088  656F               	cpfsgt	(?_getCANFrame+1)& (0+255),b
  7924  00308A  6B70               	clrf	(?_getCANFrame+2)& (0+255),b
  7925  00308C  0E86               	movlw	receiveSendEventSLCAN@id& (0+255)
  7926  00308E  EC15  F025         	call	_getCANFrame
  7927  003092  0900               	iorlw	0
  7928  003094  E101 D0AE          	bz	l1072
  7929                           
  7930                           ; BSR set to: 0
  7931                           ;main.c: 2163: cntRxFrames++;
  7932  003098  0101               	movlb	1	; () banked
  7933  00309A  2B0C               	incf	_cntRxFrames& (0+255),f,b
  7934  00309C  0E00               	movlw	0
  7935  00309E  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7936  0030A0  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7937  0030A2  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7938                           
  7939                           ;main.c: 2164: cntRxBytes += dlc;
  7940  0030A4  0100               	movlb	0	; () banked
  7941  0030A6  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7942  0030A8  0101               	movlb	1	; () banked
  7943  0030AA  2708               	addwf	_cntRxBytes& (0+255),f,b
  7944  0030AC  0E00               	movlw	0
  7945  0030AE  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7946  0030B0  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7947  0030B2  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7948  0030B4                     l1045:
  7949  0030B4  A2AC               	btfss	4012,1,c	;volatile
  7950  0030B6  D7FE               	goto	l1045
  7951                           
  7952                           ;main.c: 2167: WriteUSART('T');
  7953  0030B8  0E54               	movlw	84
  7954  0030BA  EC5B  F02C         	call	_WriteUSART
  7955                           
  7956                           ;main.c: 2169: ultoa(wrkbuf, id, 16);
  7957  0030BE  0E01               	movlw	high _wrkbuf
  7958  0030C0  0100               	movlb	0	; () banked
  7959  0030C2  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7960  0030C4  0E76               	movlw	low _wrkbuf
  7961  0030C6  6F76               	movwf	?_ultoa& (0+255),b
  7962  0030C8  C086  F078         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  7963  0030CC  C087  F079         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  7964  0030D0  C088  F07A         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  7965  0030D4  C089  F07B         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  7966  0030D8  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7967  0030DA  0E10               	movlw	16
  7968  0030DC  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7969  0030DE  EC8E  F01F         	call	_ultoa	;wreg free
  7970                           
  7971                           ; BSR set to: 0
  7972                           ;main.c: 2171: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7973  0030E2  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7974  0030E4  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7975  0030E6                     l1050:
  7976                           
  7977                           ; BSR set to: 0
  7978  0030E6  A2AC               	btfss	4012,1,c	;volatile
  7979  0030E8  D7FE               	goto	l1050
  7980                           
  7981                           ; BSR set to: 0
  7982                           ;main.c: 2173: WriteUSART('0');
  7983  0030EA  0E30               	movlw	48
  7984  0030EC  EC5B  F02C         	call	_WriteUSART
  7985                           
  7986                           ; BSR set to: 0
  7987  0030F0  D882               	call	PL80	;call to abstracted procedure
  7988  0030F2  B4D8               	btfsc	status,2,c
  7989  0030F4  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7990  0030F6  E3F7               	bnc	l1050
  7991                           
  7992                           ; BSR set to: 0
  7993                           ;main.c: 2174: }
  7994                           ;main.c: 2175: putsUSART(wrkbuf);
  7995  0030F8  0E01               	movlw	high _wrkbuf
  7996  0030FA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7997  0030FC  0E76               	movlw	low _wrkbuf
  7998  0030FE  6F61               	movwf	?_putsUSART& (0+255),b
  7999  003100  EC84  F029         	call	_putsUSART	;wreg free
  8000                           
  8001                           ;main.c: 2178: itoa(wrkbuf, dlc, 16);
  8002  003104  0E01               	movlw	high _wrkbuf
  8003  003106  0100               	movlb	0	; () banked
  8004  003108  6F71               	movwf	(?_itoa+1)& (0+255),b
  8005  00310A  0E76               	movlw	low _wrkbuf
  8006  00310C  6F70               	movwf	?_itoa& (0+255),b
  8007  00310E  C08A  F072         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  8008  003112  6B73               	clrf	(?_itoa+3)& (0+255),b
  8009  003114  6B75               	clrf	(?_itoa+5)& (0+255),b
  8010  003116  0E10               	movlw	16
  8011  003118  6F74               	movwf	(?_itoa+4)& (0+255),b
  8012  00311A  EC81  F02B         	call	_itoa	;wreg free
  8013  00311E                     l1053:
  8014                           
  8015                           ; BSR set to: 0
  8016  00311E  A2AC               	btfss	4012,1,c	;volatile
  8017  003120  D7FE               	goto	l1053
  8018                           
  8019                           ; BSR set to: 0
  8020                           ;main.c: 2180: WriteUSART(wrkbuf[0]);
  8021  003122  0101               	movlb	1	; () banked
  8022  003124  5176               	movf	_wrkbuf& (0+255),w,b
  8023  003126  EC5B  F02C         	call	_WriteUSART
  8024                           
  8025                           ;main.c: 2183: for (i = 0; i < dlc; i++) {
  8026  00312A  0100               	movlb	0	; () banked
  8027  00312C  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8028  00312E  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8029  003130  D02B               	goto	l16032
  8030  003132                     l16020:
  8031                           
  8032                           ; BSR set to: 0
  8033                           ;main.c: 2184: itoa(wrkbuf, vscpData[i], 16);
  8034  003132  0E01               	movlw	high _wrkbuf
  8035  003134  0100               	movlb	0	; () banked
  8036  003136  6F71               	movwf	(?_itoa+1)& (0+255),b
  8037  003138  0E76               	movlw	low _wrkbuf
  8038  00313A  6F70               	movwf	?_itoa& (0+255),b
  8039  00313C  518B               	movf	receiveSendEventSLCAN@i& (0+255),w,b
  8040  00313E  0F34               	addlw	low _vscpData
  8041  003140  6ED9               	movwf	fsr2l,c
  8042  003142  6ADA               	clrf	fsr2h,c
  8043  003144  50DF               	movf	indf2,w,c
  8044  003146  6F72               	movwf	(?_itoa+2)& (0+255),b
  8045  003148  6B73               	clrf	(?_itoa+3)& (0+255),b
  8046  00314A  6B75               	clrf	(?_itoa+5)& (0+255),b
  8047  00314C  0E10               	movlw	16
  8048  00314E  6F74               	movwf	(?_itoa+4)& (0+255),b
  8049  003150  EC81  F02B         	call	_itoa	;wreg free
  8050                           
  8051                           ; BSR set to: 0
  8052                           ;main.c: 2186: if (2 != strlen(wrkbuf)) {
  8053  003154  0E01               	movlw	high _wrkbuf
  8054  003156  0100               	movlb	0	; () banked
  8055  003158  6F61               	movwf	(?_strlen+1)& (0+255),b
  8056  00315A  0E76               	movlw	low _wrkbuf
  8057  00315C  6F60               	movwf	?_strlen& (0+255),b
  8058  00315E  ECAB  F02A         	call	_strlen	;wreg free
  8059  003162  5160               	movf	?_strlen& (0+255),w,b
  8060  003164  0A02               	xorlw	2
  8061  003166  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  8062  003168  E005               	bz	l16028
  8063  00316A                     l1059:
  8064                           
  8065                           ; BSR set to: 0
  8066  00316A  A2AC               	btfss	4012,1,c	;volatile
  8067  00316C  D7FE               	goto	l1059
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;main.c: 2188: WriteUSART('0');
  8071  00316E  0E30               	movlw	48
  8072  003170  EC5B  F02C         	call	_WriteUSART
  8073  003174                     l16028:
  8074                           
  8075                           ;main.c: 2189: }
  8076                           ;main.c: 2191: putsUSART(wrkbuf);
  8077  003174  0E01               	movlw	high _wrkbuf
  8078  003176  0100               	movlb	0	; () banked
  8079  003178  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8080  00317A  0E76               	movlw	low _wrkbuf
  8081  00317C  6F61               	movwf	?_putsUSART& (0+255),b
  8082  00317E  EC84  F029         	call	_putsUSART	;wreg free
  8083  003182  0100               	movlb	0	; () banked
  8084  003184  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8085  003186  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8086  003188                     l16032:
  8087                           
  8088                           ; BSR set to: 0
  8089  003188  518A               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8090  00318A  6F83               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8091  00318C  6B84               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8092  00318E  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8093  003190  0A80               	xorlw	128
  8094  003192  6F85               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8095  003194  5183               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8096  003196  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8097  003198  5184               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8098  00319A  0A80               	xorlw	128
  8099  00319C  5985               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8100  00319E  E3C9               	bnc	l16020
  8101                           
  8102                           ; BSR set to: 0
  8103                           ;main.c: 2192: }
  8104                           ;main.c: 2195: if (nTimeStamp) {
  8105  0031A0  5031               	movf	_nTimeStamp,w,c
  8106  0031A2  E023               	bz	l1069
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;main.c: 2196: ultoa(wrkbuf, timer, 16);
  8110  0031A4  0E01               	movlw	high _wrkbuf
  8111  0031A6  0100               	movlb	0	; () banked
  8112  0031A8  6F77               	movwf	(?_ultoa+1)& (0+255),b
  8113  0031AA  0E76               	movlw	low _wrkbuf
  8114  0031AC  6F76               	movwf	?_ultoa& (0+255),b
  8115  0031AE  C118  F078         	movff	_timer,?_ultoa+2	;volatile
  8116  0031B2  C119  F079         	movff	_timer+1,?_ultoa+3	;volatile
  8117  0031B6  C11A  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  8118  0031BA  C11B  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  8119  0031BE  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  8120  0031C0  0E10               	movlw	16
  8121  0031C2  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  8122  0031C4  EC8E  F01F         	call	_ultoa	;wreg free
  8123                           
  8124                           ; BSR set to: 0
  8125                           ;main.c: 2198: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8126  0031C8  6B8B               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8127  0031CA  6B8C               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8128  0031CC                     l1066:
  8129                           
  8130                           ; BSR set to: 0
  8131  0031CC  A2AC               	btfss	4012,1,c	;volatile
  8132  0031CE  D7FE               	goto	l1066
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;main.c: 2200: WriteUSART('0');
  8136  0031D0  0E30               	movlw	48
  8137  0031D2  EC5B  F02C         	call	_WriteUSART
  8138                           
  8139                           ; BSR set to: 0
  8140  0031D6  D80F               	call	PL80	;call to abstracted procedure
  8141  0031D8  B4D8               	btfsc	status,2,c
  8142  0031DA  5D8B               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8143  0031DC  E3F7               	bnc	l1066
  8144                           
  8145                           ; BSR set to: 0
  8146                           ;main.c: 2201: }
  8147                           ;main.c: 2202: putsUSART(wrkbuf);
  8148  0031DE  0E01               	movlw	high _wrkbuf
  8149  0031E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  8150  0031E2  0E76               	movlw	low _wrkbuf
  8151  0031E4  6F61               	movwf	?_putsUSART& (0+255),b
  8152  0031E6  EC84  F029         	call	_putsUSART	;wreg free
  8153  0031EA                     l1069:
  8154  0031EA  A2AC               	btfss	4012,1,c	;volatile
  8155  0031EC  D7FE               	goto	l1069
  8156                           
  8157                           ;main.c: 2206: WriteUSART(0x0d);
  8158  0031EE  0E0D               	movlw	13
  8159  0031F0  EC5B  F02C         	call	_WriteUSART
  8160  0031F4                     l1072:
  8161  0031F4  0012               	return	
  8162  0031F6                     __end_of_receiveSendEventSLCAN:
  8163                           	opt stack 0
  8164  0031F6                     PL80:
  8165                           	opt stack 23
  8166  0031F6  0100               	movlb	0	; () banked
  8167  0031F8  4B8B               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8168  0031FA  2B8C               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8169  0031FC  518C               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8170  0031FE  0A80               	xorlw	128
  8171  003200  0F80               	addlw	-128
  8172  003202  0CB8               	retlw	184
  8173  003204                     __end_ofPL80:
  8174                           	opt stack 0
  8175                           tblptru	equ	0xFF8
  8176                           tblptrh	equ	0xFF7
  8177                           tblptrl	equ	0xFF6
  8178                           tablat	equ	0xFF5
  8179                           prodh	equ	0xFF4
  8180                           prodl	equ	0xFF3
  8181                           intcon	equ	0xFF2
  8182                           indf0	equ	0xFEF
  8183                           postinc0	equ	0xFEE
  8184                           fsr0h	equ	0xFEA
  8185                           fsr0l	equ	0xFE9
  8186                           wreg	equ	0xFE8
  8187                           indf1	equ	0xFE7
  8188                           postinc1	equ	0xFE6
  8189                           postdec1	equ	0xFE5
  8190                           fsr1h	equ	0xFE2
  8191                           fsr1l	equ	0xFE1
  8192                           indf2	equ	0xFDF
  8193                           postinc2	equ	0xFDE
  8194                           postdec2	equ	0xFDD
  8195                           plusw2	equ	0xFDB
  8196                           fsr2h	equ	0xFDA
  8197                           fsr2l	equ	0xFD9
  8198                           status	equ	0xFD8
  8199                           
  8200 ;; *************** function _ultoa *****************
  8201 ;; Defined at:
  8202 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8203 ;; Parameters:    Size  Location     Type
  8204 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  8205 ;;		 -> wrkbuf(80), 
  8206 ;;  val             4   24[BANK0 ] unsigned long 
  8207 ;;  base            2   28[BANK0 ] int 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  v               4   30[BANK0 ] unsigned long 
  8210 ;;  c               1   34[BANK0 ] unsigned char 
  8211 ;; Return value:  Size  Location     Type
  8212 ;;                  2   22[BANK0 ] PTR unsigned char 
  8213 ;; Registers used:
  8214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8215 ;; Tracked objects:
  8216 ;;		On entry : F/0
  8217 ;;		On exit  : F/0
  8218 ;;		Unchanged: 0/0
  8219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8220 ;;      Params:         0       8       0       0       0       0       0
  8221 ;;      Locals:         0       5       0       0       0       0       0
  8222 ;;      Temps:          0       0       0       0       0       0       0
  8223 ;;      Totals:         0      13       0       0       0       0       0
  8224 ;;Total ram usage:       13 bytes
  8225 ;; Hardware stack levels used:    1
  8226 ;; Hardware stack levels required when called:    4
  8227 ;; This function calls:
  8228 ;;		___lldiv
  8229 ;;		___llmod
  8230 ;; This function is called by:
  8231 ;;		_receiveSendEventSLCAN
  8232 ;; This function uses a non-reentrant model
  8233 ;;
  8234                           
  8235                           	psect	text6
  8236  003F1C                     __ptext6:
  8237                           	opt stack 0
  8238  003F1C                     _ultoa:
  8239                           	opt stack 24
  8240                           
  8241                           ; BSR set to: 0
  8242                           
  8243                           ;incstack = 0
  8244                           ;incstack = 0
  8245  003F1C  C078  F07E         	movff	ultoa@val,ultoa@v
  8246  003F20  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8247  003F24  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8248  003F28  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8249  003F2C                     l16194:
  8250                           
  8251                           ; BSR set to: 0
  8252  003F2C  C07E  F060         	movff	ultoa@v,?___lldiv
  8253  003F30  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8254  003F34  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8255  003F38  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8256  003F3C  D858               	call	PL66	;call to abstracted procedure
  8257  003F3E  EC4B  F027         	call	___lldiv	;wreg free
  8258  003F42  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8259  003F46  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8260  003F4A  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8261  003F4E  C060  F07E         	movff	?___lldiv,ultoa@v
  8262                           
  8263                           ; BSR set to: 0
  8264  003F52  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8265  003F54  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8266                           
  8267                           ; BSR set to: 0
  8268  003F56  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8269  003F58  117E               	iorwf	ultoa@v& (0+255),w,b
  8270  003F5A  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8271  003F5C  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8272  003F5E  E1E6               	bnz	l16194
  8273                           
  8274                           ; BSR set to: 0
  8275  003F60  C076  FFD9         	movff	ultoa@buf,fsr2l
  8276  003F64  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8277  003F68  6ADF               	clrf	indf2,c
  8278                           
  8279                           ; BSR set to: 0
  8280  003F6A  0776               	decf	ultoa@buf& (0+255),f,b
  8281  003F6C  A0D8               	btfss	status,0,c
  8282  003F6E  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8283  003F70                     l16204:
  8284                           
  8285                           ; BSR set to: 0
  8286  003F70  C078  F06D         	movff	ultoa@val,?___llmod
  8287  003F74  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8288  003F78  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8289  003F7C  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8290  003F80  C07C  F071         	movff	ultoa@base,?___llmod+4
  8291  003F84  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8292  003F88  0E00               	movlw	0
  8293  003F8A  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8294  003F8C  0EFF               	movlw	-1
  8295  003F8E  6F73               	movwf	(?___llmod+6)& (0+255),b
  8296  003F90  6F74               	movwf	(?___llmod+7)& (0+255),b
  8297  003F92  ECC9  F028         	call	___llmod	;wreg free
  8298  003F96  516D               	movf	?___llmod& (0+255),w,b
  8299  003F98  6F82               	movwf	ultoa@c& (0+255),b
  8300                           
  8301                           ; BSR set to: 0
  8302  003F9A  C078  F060         	movff	ultoa@val,?___lldiv
  8303  003F9E  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8304  003FA2  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8305  003FA6  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8306  003FAA  D821               	call	PL66	;call to abstracted procedure
  8307  003FAC  EC4B  F027         	call	___lldiv	;wreg free
  8308  003FB0  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8309  003FB4  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8310  003FB8  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8311  003FBC  C060  F078         	movff	?___lldiv,ultoa@val
  8312                           
  8313                           ; BSR set to: 0
  8314  003FC0  0E09               	movlw	9
  8315  003FC2  6582               	cpfsgt	ultoa@c& (0+255),b
  8316  003FC4  D002               	goto	l2423
  8317                           
  8318                           ; BSR set to: 0
  8319  003FC6  0E07               	movlw	7
  8320  003FC8  2782               	addwf	ultoa@c& (0+255),f,b
  8321  003FCA                     l2423:
  8322                           
  8323                           ; BSR set to: 0
  8324  003FCA  0E30               	movlw	48
  8325  003FCC  2782               	addwf	ultoa@c& (0+255),f,b
  8326                           
  8327                           ; BSR set to: 0
  8328  003FCE  C076  FFD9         	movff	ultoa@buf,fsr2l
  8329  003FD2  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8330  003FD6  C082  FFDF         	movff	ultoa@c,indf2
  8331                           
  8332                           ; BSR set to: 0
  8333  003FDA  0776               	decf	ultoa@buf& (0+255),f,b
  8334  003FDC  A0D8               	btfss	status,0,c
  8335  003FDE  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8336                           
  8337                           ; BSR set to: 0
  8338  003FE0  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8339  003FE2  1178               	iorwf	ultoa@val& (0+255),w,b
  8340  003FE4  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8341  003FE6  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8342  003FE8  B4D8               	btfsc	status,2,c
  8343                           
  8344                           ; BSR set to: 0
  8345  003FEA  0012               	return	
  8346  003FEC  D7C1               	goto	l16204
  8347  003FEE                     __end_of_ultoa:
  8348                           	opt stack 0
  8349  003FEE                     PL66:
  8350                           	opt stack 24
  8351  003FEE  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8352  003FF2  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8353  003FF6  0E00               	movlw	0
  8354  003FF8  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8355  003FFA  0EFF               	movlw	-1
  8356  003FFC  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8357  003FFE  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8358  004000  0012               	return	
  8359  004002                     __end_ofPL66:
  8360                           	opt stack 0
  8361                           tblptru	equ	0xFF8
  8362                           tblptrh	equ	0xFF7
  8363                           tblptrl	equ	0xFF6
  8364                           tablat	equ	0xFF5
  8365                           prodh	equ	0xFF4
  8366                           prodl	equ	0xFF3
  8367                           intcon	equ	0xFF2
  8368                           indf0	equ	0xFEF
  8369                           postinc0	equ	0xFEE
  8370                           fsr0h	equ	0xFEA
  8371                           fsr0l	equ	0xFE9
  8372                           wreg	equ	0xFE8
  8373                           indf1	equ	0xFE7
  8374                           postinc1	equ	0xFE6
  8375                           postdec1	equ	0xFE5
  8376                           fsr1h	equ	0xFE2
  8377                           fsr1l	equ	0xFE1
  8378                           indf2	equ	0xFDF
  8379                           postinc2	equ	0xFDE
  8380                           postdec2	equ	0xFDD
  8381                           plusw2	equ	0xFDB
  8382                           fsr2h	equ	0xFDA
  8383                           fsr2l	equ	0xFD9
  8384                           status	equ	0xFD8
  8385                           
  8386 ;; *************** function _doModeVscp *****************
  8387 ;; Defined at:
  8388 ;;		line 1119 in file "main.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;		None
  8391 ;; Auto vars:     Size  Location     Type
  8392 ;;  c               1   87[BANK0 ] unsigned char 
  8393 ;; Return value:  Size  Location     Type
  8394 ;;		None               void
  8395 ;; Registers used:
  8396 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8397 ;; Tracked objects:
  8398 ;;		On entry : 0/0
  8399 ;;		On exit  : 0/0
  8400 ;;		Unchanged: 0/0
  8401 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8402 ;;      Params:         0       0       0       0       0       0       0
  8403 ;;      Locals:         0       1       0       0       0       0       0
  8404 ;;      Temps:          0       0       0       0       0       0       0
  8405 ;;      Totals:         0       1       0       0       0       0       0
  8406 ;;Total ram usage:        1 bytes
  8407 ;; Hardware stack levels used:    1
  8408 ;; Hardware stack levels required when called:    7
  8409 ;; This function calls:
  8410 ;;		_fifo_read
  8411 ;;		_ECANSetOperationMode
  8412 ;;		_receiveSendMultiEventCANAL
  8413 ;;		_receiveSendEventCANAL
  8414 ;;		_calcCRC
  8415 ;;		_sendVSCPDriverNack
  8416 ;;		_sendVSCPDriverAck
  8417 ;;		_receiveVSCPModeCanalMsg
  8418 ;;		_receiveVSCPModeMultiCanalMsg
  8419 ;;		_sendVSCPModeCapabilities
  8420 ;;		_sendVSCPDriverCommandReply
  8421 ;;		_sendVSCPDriverErrorFrame
  8422 ;; This function is called by:
  8423 ;;		_main
  8424 ;; This function uses a non-reentrant model
  8425 ;;
  8426                           
  8427                           	psect	text7
  8428  002B5E                     __ptext7:
  8429                           	opt stack 0
  8430  002B5E                     _doModeVscp:
  8431                           	opt stack 23
  8432                           
  8433                           ;main.c: 1120: uint8_t c;
  8434                           ;main.c: 1123: if ( caps.maxCanalFrames > 1 ) {
  8435                           
  8436                           ; BSR set to: 0
  8437                           ;incstack = 0
  8438                           ;incstack = 0
  8439  002B5E  0101               	movlb	1	; () banked
  8440  002B60  EE21  F0E3         	lfsr	2,_caps+1
  8441  002B64  0E01               	movlw	1
  8442  002B66  64DF               	cpfsgt	indf2,c
  8443  002B68  D003               	goto	l14208
  8444                           
  8445                           ; BSR set to: 1
  8446                           ;main.c: 1126: receiveSendMultiEventCANAL();
  8447  002B6A  ECC8  F019         	call	_receiveSendMultiEventCANAL	;wreg free
  8448                           
  8449                           ;main.c: 1127: }
  8450  002B6E  D002               	goto	l14210
  8451  002B70                     l14208:
  8452                           
  8453                           ; BSR set to: 1
  8454                           ;main.c: 1128: else {
  8455                           ;main.c: 1131: receiveSendEventCANAL();
  8456  002B70  EC41  F01B         	call	_receiveSendEventCANAL	;wreg free
  8457  002B74                     l14210:
  8458                           
  8459                           ;main.c: 1132: }
  8460                           ;main.c: 1135: (INTCONbits.GIE = 0);
  8461  002B74  9EF2               	bcf	intcon,7,c	;volatile
  8462                           
  8463                           ;main.c: 1137: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  8464  002B76  0E01               	movlw	high _serialInputFifo
  8465  002B78  0100               	movlb	0	; () banked
  8466  002B7A  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8467  002B7C  0ED6               	movlw	low _serialInputFifo
  8468  002B7E  6F60               	movwf	?_fifo_read& (0+255),b
  8469  002B80  0E00               	movlw	high doModeVscp@c
  8470  002B82  6F63               	movwf	(?_fifo_read+3)& (0+255),b
  8471  002B84  0EB7               	movlw	low doModeVscp@c
  8472  002B86  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8473  002B88  6B65               	clrf	(?_fifo_read+5)& (0+255),b
  8474  002B8A  0E01               	movlw	1
  8475  002B8C  6F64               	movwf	(?_fifo_read+4)& (0+255),b
  8476  002B8E  ECD5  F020         	call	_fifo_read	;wreg free
  8477  002B92  0560               	decf	?_fifo_read& (0+255),w,b
  8478  002B94  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8479  002B96  E001 D0BA          	bnz	l14358
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;main.c: 1140: (INTCONbits.GIE = 1);
  8483  002B9A  8EF2               	bsf	intcon,7,c	;volatile
  8484                           
  8485                           ; BSR set to: 0
  8486                           ;main.c: 1143: if ( pos >= sizeof( cmdbuf ) ) {
  8487  002B9C  0E4F               	movlw	79
  8488  002B9E  65E7               	cpfsgt	_pos& (0+255),b
  8489  002BA0  D003               	goto	l670
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;main.c: 1145: pos = 0;
  8493  002BA2  6BE7               	clrf	_pos& (0+255),b
  8494                           
  8495                           ;main.c: 1146: bDLE = 0;
  8496  002BA4  6A2C               	clrf	_bDLE,c
  8497                           
  8498                           ;main.c: 1147: stateVscpDriver = 0;
  8499  002BA6  6A33               	clrf	_stateVscpDriver,c
  8500  002BA8                     l670:
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;main.c: 1148: }
  8504                           ;main.c: 1150: if ( 0 == stateVscpDriver ) {
  8505  002BA8  6633               	tstfsz	_stateVscpDriver,c
  8506  002BAA  D00D               	goto	l14232
  8507                           
  8508                           ; BSR set to: 0
  8509                           ;main.c: 1152: if ( bDLE ) {
  8510  002BAC  502C               	movf	_bDLE,w,c
  8511  002BAE  E008               	bz	l14228
  8512                           
  8513                           ; BSR set to: 0
  8514                           ;main.c: 1154: bDLE = 0;
  8515  002BB0  6A2C               	clrf	_bDLE,c
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;main.c: 1157: if ( 0x02 == c ) {
  8519  002BB2  51B7               	movf	doModeVscp@c& (0+255),w,b
  8520  002BB4  0A02               	xorlw	2
  8521  002BB6  E124               	bnz	l14268
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;main.c: 1158: stateVscpDriver = 1;
  8525  002BB8  0E01               	movlw	1
  8526  002BBA  6E33               	movwf	_stateVscpDriver,c
  8527                           
  8528                           ; BSR set to: 0
  8529                           ;main.c: 1159: pos = 0;
  8530  002BBC  6BE7               	clrf	_pos& (0+255),b
  8531  002BBE  D020               	goto	l14268
  8532  002BC0                     l14228:
  8533                           
  8534                           ; BSR set to: 0
  8535                           ;main.c: 1162: else {
  8536                           ;main.c: 1163: bDLE = 1;
  8537  002BC0  0E01               	movlw	1
  8538  002BC2  6E2C               	movwf	_bDLE,c
  8539  002BC4  D0A5               	goto	l675
  8540  002BC6                     l14232:
  8541                           
  8542                           ; BSR set to: 0
  8543                           ;main.c: 1167: else if ( 1 == stateVscpDriver ) {
  8544  002BC6  0433               	decf	_stateVscpDriver,w,c
  8545  002BC8  E11B               	bnz	l14268
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;main.c: 1170: if ( bDLE ) {
  8549  002BCA  502C               	movf	_bDLE,w,c
  8550  002BCC  E015               	bz	l14252
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;main.c: 1173: bDLE = 0;
  8554  002BCE  6A2C               	clrf	_bDLE,c
  8555                           
  8556                           ; BSR set to: 0
  8557                           ;main.c: 1176: if ( 0x03 == c ) {
  8558  002BD0  51B7               	movf	doModeVscp@c& (0+255),w,b
  8559  002BD2  0A03               	xorlw	3
  8560  002BD4  E103               	bnz	l14242
  8561                           
  8562                           ; BSR set to: 0
  8563                           ;main.c: 1177: stateVscpDriver = 2;
  8564  002BD6  0E02               	movlw	2
  8565  002BD8  6E33               	movwf	_stateVscpDriver,c
  8566                           
  8567                           ;main.c: 1178: }
  8568  002BDA  D012               	goto	l14268
  8569  002BDC                     l14242:
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;main.c: 1180: else if (0x10 == c) {
  8573  002BDC  51B7               	movf	doModeVscp@c& (0+255),w,b
  8574  002BDE  0A10               	xorlw	16
  8575  002BE0  E10F               	bnz	l14268
  8576  002BE2                     u19090:
  8577                           
  8578                           ; BSR set to: 0
  8579                           ;main.c: 1182: cmdbuf[ pos++ ] = c;
  8580  002BE2  D897               	call	PL24	;call to abstracted procedure
  8581  002BE4  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8582                           
  8583                           ; BSR set to: 0
  8584  002BE8  2BE7               	incf	_pos& (0+255),f,b
  8585                           
  8586                           ; BSR set to: 0
  8587                           ;main.c: 1183: if ( pos >= sizeof( cmdbuf ) ) {
  8588  002BEA  0E4F               	movlw	79
  8589  002BEC  65E7               	cpfsgt	_pos& (0+255),b
  8590  002BEE  D090               	goto	l675
  8591                           
  8592                           ; BSR set to: 0
  8593                           ;main.c: 1186: bDLE = 0;
  8594  002BF0  6A2C               	clrf	_bDLE,c
  8595                           
  8596                           ;main.c: 1187: pos = 0;
  8597  002BF2  6BE7               	clrf	_pos& (0+255),b
  8598                           
  8599                           ;main.c: 1188: stateVscpDriver = 0;
  8600  002BF4  6A33               	clrf	_stateVscpDriver,c
  8601  002BF6  D08C               	goto	l675
  8602  002BF8                     l14252:
  8603                           
  8604                           ; BSR set to: 0
  8605                           ;main.c: 1193: else {
  8606                           ;main.c: 1194: if (0x10 == c) {
  8607  002BF8  51B7               	movf	doModeVscp@c& (0+255),w,b
  8608  002BFA  0A10               	xorlw	16
  8609  002BFC  E0E1               	bz	l14228
  8610  002BFE  D7F1               	goto	u19090
  8611  002C00                     l14268:
  8612                           
  8613                           ; BSR set to: 0
  8614                           ;main.c: 1210: }
  8615                           ;main.c: 1211: }
  8616                           ;main.c: 1212: }
  8617                           ;main.c: 1214: if (2 == stateVscpDriver) {
  8618  002C00  5033               	movf	_stateVscpDriver,w,c
  8619  002C02  0A02               	xorlw	2
  8620  002C04  E001 D083          	bnz	l14358
  8621                           
  8622                           ; BSR set to: 0
  8623                           ;main.c: 1217: stateVscpDriver = 0;
  8624  002C08  6A33               	clrf	_stateVscpDriver,c
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;main.c: 1229: if (calcCRC(cmdbuf, pos)) {
  8628  002C0A  0E01               	movlw	high _cmdbuf
  8629  002C0C  0100               	movlb	0	; () banked
  8630  002C0E  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8631  002C10  0E26               	movlw	low _cmdbuf
  8632  002C12  6F6C               	movwf	?_calcCRC& (0+255),b
  8633  002C14  C0E7  F06E         	movff	_pos,?_calcCRC+2
  8634  002C18  ECD0  F02B         	call	_calcCRC	;wreg free
  8635  002C1C  0900               	iorlw	0
  8636  002C1E  E003               	bz	l688
  8637                           
  8638                           ; BSR set to: 0
  8639                           ;main.c: 1230: sendVSCPDriverNack();
  8640  002C20  EC75  F024         	call	_sendVSCPDriverNack	;wreg free
  8641  002C24  D075               	goto	l675
  8642  002C26                     l688:
  8643                           
  8644                           ; BSR set to: 0
  8645                           ;main.c: 1232: }
  8646                           ;main.c: 1235: if (0 ==
  8647                           ;main.c: 1236: cmdbuf[ 0 ]) {
  8648  002C26  0101               	movlb	1	; () banked
  8649  002C28  6726               	tstfsz	_cmdbuf& (0+255),b
  8650  002C2A  D003               	goto	l14280
  8651  002C2C                     l14278:
  8652                           
  8653                           ;main.c: 1237: sendVSCPDriverAck();
  8654  002C2C  EC25  F024         	call	_sendVSCPDriverAck	;wreg free
  8655                           
  8656                           ;main.c: 1238: }
  8657  002C30  D06B               	goto	l14354
  8658  002C32                     l14280:
  8659                           
  8660                           ; BSR set to: 1
  8661                           ;main.c: 1240: else if (1 ==
  8662                           ;main.c: 1241: cmdbuf[ 0 ]) {
  8663  002C32  0526               	decf	_cmdbuf& (0+255),w,b
  8664  002C34  E103               	bnz	l14284
  8665  002C36                     l14282:
  8666                           
  8667                           ;main.c: 1242: sendVSCPDriverNack();
  8668  002C36  EC75  F024         	call	_sendVSCPDriverNack	;wreg free
  8669                           
  8670                           ;main.c: 1243: }
  8671  002C3A  D066               	goto	l14354
  8672  002C3C                     l14284:
  8673                           
  8674                           ; BSR set to: 1
  8675                           ;main.c: 1245: else if (2 ==
  8676                           ;main.c: 1246: cmdbuf[ 0 ]) {
  8677  002C3C  5126               	movf	_cmdbuf& (0+255),w,b
  8678  002C3E  0A02               	xorlw	2
  8679  002C40  E105               	bnz	l14292
  8680                           
  8681                           ; BSR set to: 1
  8682                           ;main.c: 1247: if ( receiveVSCPModeCanalMsg() ) {
  8683  002C42  EC19  F01F         	call	_receiveVSCPModeCanalMsg	;wreg free
  8684  002C46  0900               	iorlw	0
  8685  002C48  E1F1               	bnz	l14278
  8686  002C4A  D7F5               	goto	l14282
  8687  002C4C                     l14292:
  8688                           
  8689                           ; BSR set to: 1
  8690                           ;main.c: 1255: else if (6 ==
  8691                           ;main.c: 1256: cmdbuf[ 0 ]) {
  8692  002C4C  5126               	movf	_cmdbuf& (0+255),w,b
  8693  002C4E  0A06               	xorlw	6
  8694  002C50  E103               	bnz	l14300
  8695                           
  8696                           ; BSR set to: 1
  8697                           ;main.c: 1257: if (receiveVSCPModeMultiCanalMsg()) {
  8698  002C52  EC88  F02C         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8699  002C56  D7F7               	goto	L5
  8700  002C58                     l14300:
  8701                           
  8702                           ; BSR set to: 1
  8703                           ;main.c: 1265: else if (6 ==
  8704                           ;main.c: 1266: cmdbuf[ 0 ]) {
  8705  002C58  5126               	movf	_cmdbuf& (0+255),w,b
  8706  002C5A  0A06               	xorlw	6
  8707  002C5C  E0EC               	bz	l14282
  8708                           
  8709                           ; BSR set to: 1
  8710                           ;main.c: 1270: else if (3 ==
  8711                           ;main.c: 1271: cmdbuf[ 0 ]) {
  8712  002C5E  5126               	movf	_cmdbuf& (0+255),w,b
  8713  002C60  0A03               	xorlw	3
  8714  002C62  E0E9               	bz	l14282
  8715                           
  8716                           ; BSR set to: 1
  8717                           ;main.c: 1275: else if (4 ==
  8718                           ;main.c: 1276: cmdbuf[ 0 ]) {
  8719  002C64  5126               	movf	_cmdbuf& (0+255),w,b
  8720  002C66  0A04               	xorlw	4
  8721  002C68  E0E6               	bz	l14282
  8722                           
  8723                           ; BSR set to: 1
  8724                           ;main.c: 1280: else if (8 ==
  8725                           ;main.c: 1281: cmdbuf[ 0 ]) {
  8726  002C6A  5126               	movf	_cmdbuf& (0+255),w,b
  8727  002C6C  0A08               	xorlw	8
  8728  002C6E  E107               	bnz	l14318
  8729                           
  8730                           ; BSR set to: 1
  8731                           ;main.c: 1282: caps.maxVscpFrames = cmdbuf[ 5 ];
  8732  002C70  C12B  F1E2         	movff	_cmdbuf+5,_caps
  8733                           
  8734                           ;main.c: 1283: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8735  002C74  C12C  F1E3         	movff	_cmdbuf+6,_caps+1
  8736                           
  8737                           ; BSR set to: 1
  8738                           ;main.c: 1284: sendVSCPModeCapabilities();
  8739  002C78  EC24  F023         	call	_sendVSCPModeCapabilities	;wreg free
  8740                           
  8741                           ;main.c: 1285: }
  8742  002C7C  D045               	goto	l14354
  8743  002C7E                     l14318:
  8744                           
  8745                           ; BSR set to: 1
  8746                           ;main.c: 1287: else if (255 ==
  8747                           ;main.c: 1288: cmdbuf[ 0 ]) {
  8748  002C7E  2926               	incf	_cmdbuf& (0+255),w,b
  8749  002C80  E140               	bnz	l14352
  8750                           
  8751                           ; BSR set to: 1
  8752                           ;main.c: 1290: if (cmdbuf[ 5 ] ==
  8753                           ;main.c: 1291: 0) {
  8754  002C82  672B               	tstfsz	(_cmdbuf+5)& (0+255),b
  8755  002C84  D006               	goto	l14324
  8756                           
  8757                           ; BSR set to: 1
  8758                           ;main.c: 1292: sendVSCPDriverCommandReply(0, 0);
  8759  002C86  0E00               	movlw	0
  8760  002C88  0100               	movlb	0	; () banked
  8761  002C8A  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8762  002C8C  EC6C  F020         	call	_sendVSCPDriverCommandReply
  8763                           
  8764                           ;main.c: 1293: }
  8765  002C90  D03B               	goto	l14354
  8766  002C92                     l14324:
  8767                           
  8768                           ; BSR set to: 1
  8769                           ;main.c: 1295: else if (cmdbuf[ 5 ] ==
  8770                           ;main.c: 1296: 1) {
  8771  002C92  052B               	decf	(_cmdbuf+5)& (0+255),w,b
  8772  002C94  E109               	bnz	l14330
  8773                           
  8774                           ; BSR set to: 1
  8775                           ;main.c: 1297: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8776  002C96  0E00               	movlw	0
  8777  002C98  EC43  F02C         	call	_ECANSetOperationMode
  8778                           
  8779                           ; BSR set to: 0
  8780                           ;main.c: 1298: sendVSCPDriverCommandReply(0, 1);
  8781  002C9C  0E01               	movlw	1
  8782  002C9E  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8783  002CA0  0E00               	movlw	0
  8784  002CA2  EC6C  F020         	call	_sendVSCPDriverCommandReply
  8785                           
  8786                           ;main.c: 1299: }
  8787  002CA6  D030               	goto	l14354
  8788  002CA8                     l14330:
  8789                           
  8790                           ; BSR set to: 1
  8791                           ;main.c: 1301: else if (cmdbuf[ 5 ] ==
  8792                           ;main.c: 1302: 2) {
  8793  002CA8  512B               	movf	(_cmdbuf+5)& (0+255),w,b
  8794  002CAA  0A02               	xorlw	2
  8795  002CAC  E109               	bnz	l14336
  8796                           
  8797                           ; BSR set to: 1
  8798                           ;main.c: 1303: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8799  002CAE  0E40               	movlw	64
  8800  002CB0  EC43  F02C         	call	_ECANSetOperationMode
  8801                           
  8802                           ; BSR set to: 0
  8803                           ;main.c: 1304: sendVSCPDriverCommandReply(0, 2);
  8804  002CB4  0E02               	movlw	2
  8805  002CB6  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8806  002CB8  0E00               	movlw	0
  8807  002CBA  EC6C  F020         	call	_sendVSCPDriverCommandReply
  8808                           
  8809                           ;main.c: 1305: }
  8810  002CBE  D024               	goto	l14354
  8811  002CC0                     l14336:
  8812                           
  8813                           ; BSR set to: 1
  8814                           ;main.c: 1307: else if (cmdbuf[ 5 ] ==
  8815                           ;main.c: 1308: 3) {
  8816  002CC0  512B               	movf	(_cmdbuf+5)& (0+255),w,b
  8817  002CC2  0A03               	xorlw	3
  8818  002CC4  E109               	bnz	l14342
  8819                           
  8820                           ; BSR set to: 1
  8821                           ;main.c: 1309: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8822  002CC6  0E60               	movlw	96
  8823  002CC8  EC43  F02C         	call	_ECANSetOperationMode
  8824                           
  8825                           ; BSR set to: 0
  8826                           ;main.c: 1310: sendVSCPDriverCommandReply(0, 3);
  8827  002CCC  0E03               	movlw	3
  8828  002CCE  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8829  002CD0  0E00               	movlw	0
  8830  002CD2  EC6C  F020         	call	_sendVSCPDriverCommandReply
  8831                           
  8832                           ;main.c: 1311: }
  8833  002CD6  D018               	goto	l14354
  8834  002CD8                     l14342:
  8835                           
  8836                           ; BSR set to: 1
  8837                           ;main.c: 1313: else if (cmdbuf[ 5 ] ==
  8838                           ;main.c: 1314: 4) {
  8839  002CD8  512B               	movf	(_cmdbuf+5)& (0+255),w,b
  8840  002CDA  0A04               	xorlw	4
  8841  002CDC  E109               	bnz	l14348
  8842                           
  8843                           ; BSR set to: 1
  8844                           ;main.c: 1315: ECANSetOperationMode(0x20);
  8845  002CDE  0E20               	movlw	32
  8846  002CE0  EC43  F02C         	call	_ECANSetOperationMode
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;main.c: 1316: sendVSCPDriverCommandReply(0, 4);
  8850  002CE4  0E04               	movlw	4
  8851  002CE6  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8852  002CE8  0E00               	movlw	0
  8853  002CEA  EC6C  F020         	call	_sendVSCPDriverCommandReply
  8854                           
  8855                           ;main.c: 1317: }
  8856  002CEE  D00C               	goto	l14354
  8857  002CF0                     l14348:
  8858                           
  8859                           ; BSR set to: 1
  8860                           ;main.c: 1319: else if (cmdbuf[ 5 ] ==
  8861                           ;main.c: 1320: 5) {
  8862  002CF0  512B               	movf	(_cmdbuf+5)& (0+255),w,b
  8863  002CF2  0A05               	xorlw	5
  8864  002CF4  E109               	bnz	l14354
  8865                           
  8866                           ; BSR set to: 1
  8867                           ;main.c: 1321: sendVSCPDriverCommandReply(0, 0);
  8868  002CF6  0E00               	movlw	0
  8869  002CF8  0100               	movlb	0	; () banked
  8870  002CFA  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8871  002CFC  EC6C  F020         	call	_sendVSCPDriverCommandReply
  8872  002D00  D003               	goto	l14354
  8873  002D02                     l14352:
  8874                           
  8875                           ; BSR set to: 1
  8876                           ;main.c: 1326: else {
  8877                           ;main.c: 1328: sendVSCPDriverErrorFrame(2);
  8878  002D02  0E02               	movlw	2
  8879  002D04  EC0B  F022         	call	_sendVSCPDriverErrorFrame
  8880  002D08                     l14354:
  8881                           
  8882                           ;main.c: 1329: }
  8883                           ;main.c: 1332: pos = 0;
  8884  002D08  0100               	movlb	0	; () banked
  8885  002D0A  6BE7               	clrf	_pos& (0+255),b
  8886                           
  8887                           ; BSR set to: 0
  8888                           ;main.c: 1333: stateVscpDriver = 0;
  8889  002D0C  6A33               	clrf	_stateVscpDriver,c
  8890  002D0E                     l14358:
  8891                           
  8892                           ; BSR set to: 0
  8893                           ;main.c: 1335: }
  8894                           ;main.c: 1337: }
  8895                           ;main.c: 1340: (INTCONbits.GIE = 1);
  8896  002D0E  8EF2               	bsf	intcon,7,c	;volatile
  8897  002D10                     l675:
  8898  002D10  0012               	return	
  8899  002D12                     __end_of_doModeVscp:
  8900                           	opt stack 0
  8901  002D12                     PL24:
  8902                           	opt stack 20
  8903  002D12  0E26               	movlw	low _cmdbuf
  8904  002D14  0100               	movlb	0	; () banked
  8905  002D16  25E7               	addwf	_pos& (0+255),w,b
  8906  002D18  6ED9               	movwf	fsr2l,c
  8907  002D1A  6ADA               	clrf	fsr2h,c
  8908  002D1C  0E01               	movlw	high _cmdbuf
  8909  002D1E  22DA               	addwfc	fsr2h,f,c
  8910  002D20  0012               	return	
  8911  002D22                     __end_ofPL24:
  8912                           	opt stack 0
  8913                           tblptru	equ	0xFF8
  8914                           tblptrh	equ	0xFF7
  8915                           tblptrl	equ	0xFF6
  8916                           tablat	equ	0xFF5
  8917                           prodh	equ	0xFF4
  8918                           prodl	equ	0xFF3
  8919                           intcon	equ	0xFF2
  8920                           indf0	equ	0xFEF
  8921                           postinc0	equ	0xFEE
  8922                           fsr0h	equ	0xFEA
  8923                           fsr0l	equ	0xFE9
  8924                           wreg	equ	0xFE8
  8925                           indf1	equ	0xFE7
  8926                           postinc1	equ	0xFE6
  8927                           postdec1	equ	0xFE5
  8928                           fsr1h	equ	0xFE2
  8929                           fsr1l	equ	0xFE1
  8930                           indf2	equ	0xFDF
  8931                           postinc2	equ	0xFDE
  8932                           postdec2	equ	0xFDD
  8933                           plusw2	equ	0xFDB
  8934                           fsr2h	equ	0xFDA
  8935                           fsr2l	equ	0xFD9
  8936                           status	equ	0xFD8
  8937                           
  8938 ;; *************** function _sendVSCPDriverErrorFrame *****************
  8939 ;; Defined at:
  8940 ;;		line 1601 in file "main.c"
  8941 ;; Parameters:    Size  Location     Type
  8942 ;;  errorcode       1    wreg     unsigned char 
  8943 ;; Auto vars:     Size  Location     Type
  8944 ;;  errorcode       1   15[BANK0 ] unsigned char 
  8945 ;;  crc             1   16[BANK0 ] unsigned char 
  8946 ;; Return value:  Size  Location     Type
  8947 ;;		None               void
  8948 ;; Registers used:
  8949 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8950 ;; Tracked objects:
  8951 ;;		On entry : F/1
  8952 ;;		On exit  : 0/0
  8953 ;;		Unchanged: 0/0
  8954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8955 ;;      Params:         0       0       0       0       0       0       0
  8956 ;;      Locals:         0       2       0       0       0       0       0
  8957 ;;      Temps:          0       0       0       0       0       0       0
  8958 ;;      Totals:         0       2       0       0       0       0       0
  8959 ;;Total ram usage:        2 bytes
  8960 ;; Hardware stack levels used:    1
  8961 ;; Hardware stack levels required when called:    6
  8962 ;; This function calls:
  8963 ;;		_WriteUSART
  8964 ;;		_sendEscapedUartData
  8965 ;;		_crc8
  8966 ;; This function is called by:
  8967 ;;		_doModeVscp
  8968 ;; This function uses a non-reentrant model
  8969 ;;
  8970                           
  8971                           	psect	text8
  8972  004416                     __ptext8:
  8973                           	opt stack 0
  8974  004416                     _sendVSCPDriverErrorFrame:
  8975                           	opt stack 23
  8976                           
  8977                           ;incstack = 0
  8978                           ;incstack = 0
  8979                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  8980  004416  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  8981                           
  8982                           ; BSR set to: 1
  8983                           ;main.c: 1602: uint8_t crc = 0;
  8984  00441A  0100               	movlb	0	; () banked
  8985  00441C  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  8986  00441E                     l793:
  8987  00441E  A2AC               	btfss	4012,1,c	;volatile
  8988  004420  D7FE               	goto	l793
  8989                           
  8990                           ;main.c: 1606: WriteUSART(0x10);
  8991  004422  0E10               	movlw	16
  8992  004424  EC5B  F02C         	call	_WriteUSART
  8993  004428                     l796:
  8994  004428  A2AC               	btfss	4012,1,c	;volatile
  8995  00442A  D7FE               	goto	l796
  8996                           
  8997                           ;main.c: 1608: WriteUSART(0x02);
  8998  00442C  0E02               	movlw	2
  8999  00442E  EC5B  F02C         	call	_WriteUSART
  9000  004432                     l799:
  9001  004432  A2AC               	btfss	4012,1,c	;volatile
  9002  004434  D7FE               	goto	l799
  9003                           
  9004                           ;main.c: 1612: WriteUSART(253);
  9005  004436  0EFD               	movlw	253
  9006  004438  EC5B  F02C         	call	_WriteUSART
  9007                           
  9008                           ;main.c: 1613: crc8(&crc, 253);
  9009  00443C  0100               	movlb	0	; () banked
  9010  00443E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9011  004440  6F68               	movwf	(?_crc8+1)& (0+255),b
  9012  004442  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9013  004444  6F67               	movwf	?_crc8& (0+255),b
  9014  004446  0EFD               	movlw	253
  9015  004448  6F69               	movwf	(?_crc8+2)& (0+255),b
  9016  00444A  EC65  F02B         	call	_crc8	;wreg free
  9017  00444E                     l802:
  9018  00444E  A2AC               	btfss	4012,1,c	;volatile
  9019  004450  D7FE               	goto	l802
  9020                           
  9021                           ;main.c: 1617: WriteUSART(0);
  9022  004452  0E00               	movlw	0
  9023  004454  EC5B  F02C         	call	_WriteUSART
  9024                           
  9025                           ;main.c: 1618: crc8(&crc, 0);
  9026  004458  D836               	call	PL82	;call to abstracted procedure
  9027  00445A  EC65  F02B         	call	_crc8	;wreg free
  9028                           
  9029                           ; BSR set to: 0
  9030                           ;main.c: 1621: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9031  00445E  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9032  004460  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9033  004462  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9034  004464  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9035  004466  0101               	movlb	1	; () banked
  9036  004468  5128               	movf	(_cmdbuf+2)& (0+255),w,b
  9037  00446A  ECFA  F028         	call	_sendEscapedUartData
  9038  00446E                     l805:
  9039  00446E  A2AC               	btfss	4012,1,c	;volatile
  9040  004470  D7FE               	goto	l805
  9041                           
  9042                           ;main.c: 1625: WriteUSART(0);
  9043  004472  0E00               	movlw	0
  9044  004474  EC5B  F02C         	call	_WriteUSART
  9045                           
  9046                           ;main.c: 1626: crc8(&crc, 0);
  9047  004478  D826               	call	PL82	;call to abstracted procedure
  9048  00447A  EC65  F02B         	call	_crc8	;wreg free
  9049  00447E                     l808:
  9050  00447E  A2AC               	btfss	4012,1,c	;volatile
  9051  004480  D7FE               	goto	l808
  9052                           
  9053                           ;main.c: 1628: WriteUSART(1);
  9054  004482  0E01               	movlw	1
  9055  004484  EC5B  F02C         	call	_WriteUSART
  9056                           
  9057                           ;main.c: 1629: crc8(&crc, 1);
  9058  004488  0100               	movlb	0	; () banked
  9059  00448A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9060  00448C  6F68               	movwf	(?_crc8+1)& (0+255),b
  9061  00448E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9062  004490  6F67               	movwf	?_crc8& (0+255),b
  9063  004492  0E01               	movlw	1
  9064  004494  6F69               	movwf	(?_crc8+2)& (0+255),b
  9065  004496  EC65  F02B         	call	_crc8	;wreg free
  9066                           
  9067                           ; BSR set to: 0
  9068                           ;main.c: 1632: sendEscapedUartData(errorcode, &crc);
  9069  00449A  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9070  00449C  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9071  00449E  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9072  0044A0  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9073  0044A2  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9074  0044A4  ECFA  F028         	call	_sendEscapedUartData
  9075                           
  9076                           ; BSR set to: 0
  9077                           ;main.c: 1635: sendEscapedUartData(crc, (0));
  9078  0044A8  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9079  0044AA  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9080  0044AC  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9081  0044AE  ECFA  F028         	call	_sendEscapedUartData
  9082  0044B2                     l811:
  9083  0044B2  A2AC               	btfss	4012,1,c	;volatile
  9084  0044B4  D7FE               	goto	l811
  9085                           
  9086                           ;main.c: 1639: WriteUSART(0x10);
  9087  0044B6  0E10               	movlw	16
  9088  0044B8  EC5B  F02C         	call	_WriteUSART
  9089  0044BC                     l814:
  9090  0044BC  A2AC               	btfss	4012,1,c	;volatile
  9091  0044BE  D7FE               	goto	l814
  9092                           
  9093                           ;main.c: 1641: WriteUSART(0x03);
  9094  0044C0  0E03               	movlw	3
  9095  0044C2  EF5B  F02C         	goto	_WriteUSART
  9096  0044C6                     __end_of_sendVSCPDriverErrorFrame:
  9097                           	opt stack 0
  9098  0044C6                     PL82:
  9099                           	opt stack 23
  9100  0044C6  0100               	movlb	0	; () banked
  9101  0044C8  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9102  0044CA  6F68               	movwf	(?_crc8+1)& (0+255),b
  9103  0044CC  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9104  0044CE  6F67               	movwf	?_crc8& (0+255),b
  9105  0044D0  6B69               	clrf	(?_crc8+2)& (0+255),b
  9106  0044D2  0C00               	retlw	0
  9107  0044D4                     __end_ofPL82:
  9108                           	opt stack 0
  9109                           tblptru	equ	0xFF8
  9110                           tblptrh	equ	0xFF7
  9111                           tblptrl	equ	0xFF6
  9112                           tablat	equ	0xFF5
  9113                           prodh	equ	0xFF4
  9114                           prodl	equ	0xFF3
  9115                           intcon	equ	0xFF2
  9116                           indf0	equ	0xFEF
  9117                           postinc0	equ	0xFEE
  9118                           fsr0h	equ	0xFEA
  9119                           fsr0l	equ	0xFE9
  9120                           wreg	equ	0xFE8
  9121                           indf1	equ	0xFE7
  9122                           postinc1	equ	0xFE6
  9123                           postdec1	equ	0xFE5
  9124                           fsr1h	equ	0xFE2
  9125                           fsr1l	equ	0xFE1
  9126                           indf2	equ	0xFDF
  9127                           postinc2	equ	0xFDE
  9128                           postdec2	equ	0xFDD
  9129                           plusw2	equ	0xFDB
  9130                           fsr2h	equ	0xFDA
  9131                           fsr2l	equ	0xFD9
  9132                           status	equ	0xFD8
  9133                           
  9134 ;; *************** function _sendVSCPDriverCommandReply *****************
  9135 ;; Defined at:
  9136 ;;		line 1738 in file "main.c"
  9137 ;; Parameters:    Size  Location     Type
  9138 ;;  cmdReplyCode    1    wreg     unsigned char 
  9139 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  9140 ;; Auto vars:     Size  Location     Type
  9141 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  9142 ;;  crc             1   17[BANK0 ] unsigned char 
  9143 ;; Return value:  Size  Location     Type
  9144 ;;		None               void
  9145 ;; Registers used:
  9146 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : F/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9152 ;;      Params:         0       1       0       0       0       0       0
  9153 ;;      Locals:         0       2       0       0       0       0       0
  9154 ;;      Temps:          0       0       0       0       0       0       0
  9155 ;;      Totals:         0       3       0       0       0       0       0
  9156 ;;Total ram usage:        3 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:    6
  9159 ;; This function calls:
  9160 ;;		_WriteUSART
  9161 ;;		_sendEscapedUartData
  9162 ;;		_crc8
  9163 ;; This function is called by:
  9164 ;;		_doModeVscp
  9165 ;; This function uses a non-reentrant model
  9166 ;;
  9167                           
  9168                           	psect	text9
  9169  0040D8                     __ptext9:
  9170                           	opt stack 0
  9171  0040D8                     _sendVSCPDriverCommandReply:
  9172                           	opt stack 23
  9173                           
  9174                           ;incstack = 0
  9175                           ;incstack = 0
  9176                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  9177  0040D8  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  9178                           
  9179                           ; BSR set to: 0
  9180                           ;main.c: 1739: uint8_t crc = 0;
  9181  0040DC  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  9182  0040DE                     l874:
  9183                           
  9184                           ; BSR set to: 0
  9185  0040DE  A2AC               	btfss	4012,1,c	;volatile
  9186  0040E0  D7FE               	goto	l874
  9187                           
  9188                           ; BSR set to: 0
  9189                           ;main.c: 1743: WriteUSART(0x10);
  9190  0040E2  0E10               	movlw	16
  9191  0040E4  EC5B  F02C         	call	_WriteUSART
  9192  0040E8                     l877:
  9193  0040E8  A2AC               	btfss	4012,1,c	;volatile
  9194  0040EA  D7FE               	goto	l877
  9195                           
  9196                           ;main.c: 1745: WriteUSART(0x02);
  9197  0040EC  0E02               	movlw	2
  9198  0040EE  EC5B  F02C         	call	_WriteUSART
  9199  0040F2                     l880:
  9200  0040F2  A2AC               	btfss	4012,1,c	;volatile
  9201  0040F4  D7FE               	goto	l880
  9202                           
  9203                           ;main.c: 1749: WriteUSART(254);
  9204  0040F6  0EFE               	movlw	254
  9205  0040F8  EC5B  F02C         	call	_WriteUSART
  9206                           
  9207                           ;main.c: 1750: crc8(&crc, 254);
  9208  0040FC  0100               	movlb	0	; () banked
  9209  0040FE  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9210  004100  6F68               	movwf	(?_crc8+1)& (0+255),b
  9211  004102  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9212  004104  6F67               	movwf	?_crc8& (0+255),b
  9213  004106  0EFE               	movlw	254
  9214  004108  6F69               	movwf	(?_crc8+2)& (0+255),b
  9215  00410A  EC65  F02B         	call	_crc8	;wreg free
  9216  00410E                     l883:
  9217                           
  9218                           ; BSR set to: 0
  9219  00410E  A2AC               	btfss	4012,1,c	;volatile
  9220  004110  D7FE               	goto	l883
  9221                           
  9222                           ; BSR set to: 0
  9223                           ;main.c: 1754: WriteUSART(0);
  9224  004112  0E00               	movlw	0
  9225  004114  EC5B  F02C         	call	_WriteUSART
  9226                           
  9227                           ;main.c: 1755: crc8(&crc, 0);
  9228  004118  D841               	call	PL84	;call to abstracted procedure
  9229  00411A  EC65  F02B         	call	_crc8	;wreg free
  9230                           
  9231                           ; BSR set to: 0
  9232                           ;main.c: 1758: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9233  00411E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9234  004120  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9235  004122  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9236  004124  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9237  004126  0101               	movlb	1	; () banked
  9238  004128  5128               	movf	(_cmdbuf+2)& (0+255),w,b
  9239  00412A  ECFA  F028         	call	_sendEscapedUartData
  9240  00412E                     l886:
  9241                           
  9242                           ; BSR set to: 0
  9243  00412E  A2AC               	btfss	4012,1,c	;volatile
  9244  004130  D7FE               	goto	l886
  9245                           
  9246                           ; BSR set to: 0
  9247                           ;main.c: 1762: WriteUSART(0);
  9248  004132  0E00               	movlw	0
  9249  004134  EC5B  F02C         	call	_WriteUSART
  9250                           
  9251                           ;main.c: 1763: crc8(&crc, 0);
  9252  004138  D831               	call	PL84	;call to abstracted procedure
  9253  00413A  EC65  F02B         	call	_crc8	;wreg free
  9254  00413E                     l889:
  9255                           
  9256                           ; BSR set to: 0
  9257  00413E  A2AC               	btfss	4012,1,c	;volatile
  9258  004140  D7FE               	goto	l889
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;main.c: 1765: WriteUSART(2);
  9262  004142  0E02               	movlw	2
  9263  004144  EC5B  F02C         	call	_WriteUSART
  9264                           
  9265                           ;main.c: 1766: crc8(&crc, 2);
  9266  004148  0100               	movlb	0	; () banked
  9267  00414A  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9268  00414C  6F68               	movwf	(?_crc8+1)& (0+255),b
  9269  00414E  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9270  004150  6F67               	movwf	?_crc8& (0+255),b
  9271  004152  0E02               	movlw	2
  9272  004154  6F69               	movwf	(?_crc8+2)& (0+255),b
  9273  004156  EC65  F02B         	call	_crc8	;wreg free
  9274  00415A                     l892:
  9275                           
  9276                           ; BSR set to: 0
  9277  00415A  A2AC               	btfss	4012,1,c	;volatile
  9278  00415C  D7FE               	goto	l892
  9279                           
  9280                           ; BSR set to: 0
  9281                           ;main.c: 1770: sendEscapedUartData(cmdReplyCode, &crc);
  9282  00415E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9283  004160  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9284  004162  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9285  004164  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9286  004166  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9287  004168  ECFA  F028         	call	_sendEscapedUartData
  9288  00416C                     l895:
  9289                           
  9290                           ; BSR set to: 0
  9291  00416C  A2AC               	btfss	4012,1,c	;volatile
  9292  00416E  D7FE               	goto	l895
  9293                           
  9294                           ; BSR set to: 0
  9295                           ;main.c: 1774: sendEscapedUartData(cmdCode, &crc);
  9296  004170  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9297  004172  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9298  004174  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9299  004176  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9300  004178  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9301  00417A  ECFA  F028         	call	_sendEscapedUartData
  9302                           
  9303                           ;main.c: 1777: sendEscapedUartData(crc, (0));
  9304  00417E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9305  004180  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9306  004182  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9307  004184  ECFA  F028         	call	_sendEscapedUartData
  9308  004188                     l898:
  9309                           
  9310                           ; BSR set to: 0
  9311  004188  A2AC               	btfss	4012,1,c	;volatile
  9312  00418A  D7FE               	goto	l898
  9313                           
  9314                           ; BSR set to: 0
  9315                           ;main.c: 1781: WriteUSART(0x10);
  9316  00418C  0E10               	movlw	16
  9317  00418E  EC5B  F02C         	call	_WriteUSART
  9318  004192                     l901:
  9319  004192  A2AC               	btfss	4012,1,c	;volatile
  9320  004194  D7FE               	goto	l901
  9321                           
  9322                           ;main.c: 1783: WriteUSART(0x03);
  9323  004196  0E03               	movlw	3
  9324  004198  EF5B  F02C         	goto	_WriteUSART
  9325  00419C                     __end_of_sendVSCPDriverCommandReply:
  9326                           	opt stack 0
  9327  00419C                     PL84:
  9328                           	opt stack 23
  9329  00419C  0100               	movlb	0	; () banked
  9330  00419E  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9331  0041A0  6F68               	movwf	(?_crc8+1)& (0+255),b
  9332  0041A2  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  9333  0041A4  6F67               	movwf	?_crc8& (0+255),b
  9334  0041A6  6B69               	clrf	(?_crc8+2)& (0+255),b
  9335  0041A8  0C00               	retlw	0
  9336  0041AA                     __end_ofPL84:
  9337                           	opt stack 0
  9338                           tblptru	equ	0xFF8
  9339                           tblptrh	equ	0xFF7
  9340                           tblptrl	equ	0xFF6
  9341                           tablat	equ	0xFF5
  9342                           prodh	equ	0xFF4
  9343                           prodl	equ	0xFF3
  9344                           intcon	equ	0xFF2
  9345                           indf0	equ	0xFEF
  9346                           postinc0	equ	0xFEE
  9347                           fsr0h	equ	0xFEA
  9348                           fsr0l	equ	0xFE9
  9349                           wreg	equ	0xFE8
  9350                           indf1	equ	0xFE7
  9351                           postinc1	equ	0xFE6
  9352                           postdec1	equ	0xFE5
  9353                           fsr1h	equ	0xFE2
  9354                           fsr1l	equ	0xFE1
  9355                           indf2	equ	0xFDF
  9356                           postinc2	equ	0xFDE
  9357                           postdec2	equ	0xFDD
  9358                           plusw2	equ	0xFDB
  9359                           fsr2h	equ	0xFDA
  9360                           fsr2l	equ	0xFD9
  9361                           status	equ	0xFD8
  9362                           
  9363 ;; *************** function _sendVSCPModeCapabilities *****************
  9364 ;; Defined at:
  9365 ;;		line 2107 in file "main.c"
  9366 ;; Parameters:    Size  Location     Type
  9367 ;;		None
  9368 ;; Auto vars:     Size  Location     Type
  9369 ;;  crc             1   15[BANK0 ] unsigned char 
  9370 ;; Return value:  Size  Location     Type
  9371 ;;                  1    wreg      enum E15660
  9372 ;; Registers used:
  9373 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9374 ;; Tracked objects:
  9375 ;;		On entry : F/1
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9379 ;;      Params:         0       0       0       0       0       0       0
  9380 ;;      Locals:         0       1       0       0       0       0       0
  9381 ;;      Temps:          0       0       0       0       0       0       0
  9382 ;;      Totals:         0       1       0       0       0       0       0
  9383 ;;Total ram usage:        1 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    6
  9386 ;; This function calls:
  9387 ;;		_WriteUSART
  9388 ;;		_sendEscapedUartData
  9389 ;;		_crc8
  9390 ;; This function is called by:
  9391 ;;		_doModeVscp
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           	psect	text10
  9396  004648                     __ptext10:
  9397                           	opt stack 0
  9398  004648                     _sendVSCPModeCapabilities:
  9399                           	opt stack 23
  9400                           
  9401                           ; BSR set to: 1
  9402                           ;main.c: 2108: uint8_t crc = 0;
  9403                           
  9404                           ;incstack = 0
  9405                           ;incstack = 0
  9406  004648  0100               	movlb	0	; () banked
  9407  00464A  6B6F               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9408  00464C                     l1023:
  9409  00464C  A2AC               	btfss	4012,1,c	;volatile
  9410  00464E  D7FE               	goto	l1023
  9411                           
  9412                           ;main.c: 2112: WriteUSART(0x10);
  9413  004650  0E10               	movlw	16
  9414  004652  EC5B  F02C         	call	_WriteUSART
  9415  004656                     l1026:
  9416  004656  A2AC               	btfss	4012,1,c	;volatile
  9417  004658  D7FE               	goto	l1026
  9418                           
  9419                           ;main.c: 2114: WriteUSART(0x02);
  9420  00465A  0E02               	movlw	2
  9421  00465C  EC5B  F02C         	call	_WriteUSART
  9422  004660                     l1029:
  9423  004660  A2AC               	btfss	4012,1,c	;volatile
  9424  004662  D7FE               	goto	l1029
  9425                           
  9426                           ;main.c: 2118: WriteUSART(9);
  9427  004664  0E09               	movlw	9
  9428  004666  EC5B  F02C         	call	_WriteUSART
  9429                           
  9430                           ;main.c: 2119: crc8(&crc, 9);
  9431  00466A  0100               	movlb	0	; () banked
  9432  00466C  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9433  00466E  6F68               	movwf	(?_crc8+1)& (0+255),b
  9434  004670  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9435  004672  6F67               	movwf	?_crc8& (0+255),b
  9436  004674  0E09               	movlw	9
  9437  004676  6F69               	movwf	(?_crc8+2)& (0+255),b
  9438  004678  EC65  F02B         	call	_crc8	;wreg free
  9439  00467C                     l1032:
  9440  00467C  A2AC               	btfss	4012,1,c	;volatile
  9441  00467E  D7FE               	goto	l1032
  9442                           
  9443                           ;main.c: 2123: WriteUSART(0);
  9444  004680  0E00               	movlw	0
  9445  004682  EC5B  F02C         	call	_WriteUSART
  9446                           
  9447                           ;main.c: 2124: crc8(&crc, 0);
  9448  004686  0100               	movlb	0	; () banked
  9449  004688  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9450  00468A  6F68               	movwf	(?_crc8+1)& (0+255),b
  9451  00468C  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9452  00468E  6F67               	movwf	?_crc8& (0+255),b
  9453  004690  0E00               	movlw	0
  9454  004692  6B69               	clrf	(?_crc8+2)& (0+255),b
  9455  004694  EC65  F02B         	call	_crc8	;wreg free
  9456                           
  9457                           ; BSR set to: 0
  9458                           ;main.c: 2127: sendEscapedUartData(sequencyno, &crc );
  9459  004698  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9460  00469A  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9461  00469C  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9462  00469E  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9463  0046A0  5032               	movf	_sequencyno,w,c
  9464  0046A2  ECFA  F028         	call	_sendEscapedUartData
  9465                           
  9466                           ; BSR set to: 0
  9467                           ;main.c: 2128: sequencyno++;
  9468  0046A6  2A32               	incf	_sequencyno,f,c
  9469                           
  9470                           ; BSR set to: 0
  9471                           ;main.c: 2131: sendEscapedUartData( 0, &crc );
  9472  0046A8  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9473  0046AA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9474  0046AC  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9475  0046AE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9476  0046B0  0E00               	movlw	0
  9477  0046B2  ECFA  F028         	call	_sendEscapedUartData
  9478                           
  9479                           ; BSR set to: 0
  9480                           ;main.c: 2132: sendEscapedUartData( 2, &crc );
  9481  0046B6  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9482  0046B8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9483  0046BA  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9484  0046BC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9485  0046BE  0E02               	movlw	2
  9486  0046C0  ECFA  F028         	call	_sendEscapedUartData
  9487                           
  9488                           ; BSR set to: 0
  9489                           ;main.c: 2135: sendEscapedUartData( 1, &crc );
  9490  0046C4  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9491  0046C6  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9492  0046C8  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9493  0046CA  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9494  0046CC  0E01               	movlw	1
  9495  0046CE  ECFA  F028         	call	_sendEscapedUartData
  9496                           
  9497                           ; BSR set to: 0
  9498                           ;main.c: 2136: sendEscapedUartData( 0, &crc );
  9499  0046D2  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9500  0046D4  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9501  0046D6  0E6F               	movlw	low sendVSCPModeCapabilities@crc
  9502  0046D8  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9503  0046DA  0E00               	movlw	0
  9504  0046DC  ECFA  F028         	call	_sendEscapedUartData
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;main.c: 2139: sendEscapedUartData(crc, (0));
  9508  0046E0  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9509  0046E2  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9510  0046E4  516F               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9511  0046E6  ECFA  F028         	call	_sendEscapedUartData
  9512  0046EA                     l1035:
  9513  0046EA  A2AC               	btfss	4012,1,c	;volatile
  9514  0046EC  D7FE               	goto	l1035
  9515                           
  9516                           ;main.c: 2143: WriteUSART(0x10);
  9517  0046EE  0E10               	movlw	16
  9518  0046F0  EC5B  F02C         	call	_WriteUSART
  9519  0046F4                     l1038:
  9520  0046F4  A2AC               	btfss	4012,1,c	;volatile
  9521  0046F6  D7FE               	goto	l1038
  9522                           
  9523                           ;main.c: 2145: WriteUSART(0x03);
  9524  0046F8  0E03               	movlw	3
  9525  0046FA  EF5B  F02C         	goto	_WriteUSART
  9526  0046FE                     __end_of_sendVSCPModeCapabilities:
  9527                           	opt stack 0
  9528                           tblptru	equ	0xFF8
  9529                           tblptrh	equ	0xFF7
  9530                           tblptrl	equ	0xFF6
  9531                           tablat	equ	0xFF5
  9532                           prodh	equ	0xFF4
  9533                           prodl	equ	0xFF3
  9534                           intcon	equ	0xFF2
  9535                           indf0	equ	0xFEF
  9536                           postinc0	equ	0xFEE
  9537                           fsr0h	equ	0xFEA
  9538                           fsr0l	equ	0xFE9
  9539                           wreg	equ	0xFE8
  9540                           indf1	equ	0xFE7
  9541                           postinc1	equ	0xFE6
  9542                           postdec1	equ	0xFE5
  9543                           fsr1h	equ	0xFE2
  9544                           fsr1l	equ	0xFE1
  9545                           indf2	equ	0xFDF
  9546                           postinc2	equ	0xFDE
  9547                           postdec2	equ	0xFDD
  9548                           plusw2	equ	0xFDB
  9549                           fsr2h	equ	0xFDA
  9550                           fsr2l	equ	0xFD9
  9551                           status	equ	0xFD8
  9552                           
  9553 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9554 ;; Defined at:
  9555 ;;		line 2241 in file "main.c"
  9556 ;; Parameters:    Size  Location     Type
  9557 ;;		None
  9558 ;; Auto vars:     Size  Location     Type
  9559 ;;		None
  9560 ;; Return value:  Size  Location     Type
  9561 ;;                  1    wreg      enum E15660
  9562 ;; Registers used:
  9563 ;;		wreg
  9564 ;; Tracked objects:
  9565 ;;		On entry : F/1
  9566 ;;		On exit  : F/1
  9567 ;;		Unchanged: F/0
  9568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9569 ;;      Params:         0       0       0       0       0       0       0
  9570 ;;      Locals:         0       0       0       0       0       0       0
  9571 ;;      Temps:          0       0       0       0       0       0       0
  9572 ;;      Totals:         0       0       0       0       0       0       0
  9573 ;;Total ram usage:        0 bytes
  9574 ;; Hardware stack levels used:    1
  9575 ;; Hardware stack levels required when called:    3
  9576 ;; This function calls:
  9577 ;;		Nothing
  9578 ;; This function is called by:
  9579 ;;		_doModeVscp
  9580 ;; This function uses a non-reentrant model
  9581 ;;
  9582                           
  9583                           	psect	text11
  9584  005910                     __ptext11:
  9585                           	opt stack 0
  9586  005910                     _receiveVSCPModeMultiCanalMsg:
  9587                           	opt stack 26
  9588                           
  9589                           ; BSR set to: 1
  9590                           
  9591                           ; BSR set to: 1
  9592                           ;main.c: 2243: return 0;
  9593                           
  9594                           ;incstack = 0
  9595                           ;incstack = 0
  9596  005910  0C00               	retlw	0
  9597  005912                     __end_of_receiveVSCPModeMultiCanalMsg:
  9598                           	opt stack 0
  9599                           tblptru	equ	0xFF8
  9600                           tblptrh	equ	0xFF7
  9601                           tblptrl	equ	0xFF6
  9602                           tablat	equ	0xFF5
  9603                           prodh	equ	0xFF4
  9604                           prodl	equ	0xFF3
  9605                           intcon	equ	0xFF2
  9606                           indf0	equ	0xFEF
  9607                           postinc0	equ	0xFEE
  9608                           fsr0h	equ	0xFEA
  9609                           fsr0l	equ	0xFE9
  9610                           wreg	equ	0xFE8
  9611                           indf1	equ	0xFE7
  9612                           postinc1	equ	0xFE6
  9613                           postdec1	equ	0xFE5
  9614                           fsr1h	equ	0xFE2
  9615                           fsr1l	equ	0xFE1
  9616                           indf2	equ	0xFDF
  9617                           postinc2	equ	0xFDE
  9618                           postdec2	equ	0xFDD
  9619                           plusw2	equ	0xFDB
  9620                           fsr2h	equ	0xFDA
  9621                           fsr2l	equ	0xFD9
  9622                           status	equ	0xFD8
  9623                           
  9624 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9625 ;; Defined at:
  9626 ;;		line 2217 in file "main.c"
  9627 ;; Parameters:    Size  Location     Type
  9628 ;;		None
  9629 ;; Auto vars:     Size  Location     Type
  9630 ;;  data            8   74[BANK0 ] unsigned char [8]
  9631 ;;  id              4   82[BANK0 ] unsigned long 
  9632 ;;  dlc             1   86[BANK0 ] unsigned char 
  9633 ;; Return value:  Size  Location     Type
  9634 ;;                  1    wreg      enum E15660
  9635 ;; Registers used:
  9636 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9637 ;; Tracked objects:
  9638 ;;		On entry : F/1
  9639 ;;		On exit  : E/0
  9640 ;;		Unchanged: 0/0
  9641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9642 ;;      Params:         0       0       0       0       0       0       0
  9643 ;;      Locals:         0      13       0       0       0       0       0
  9644 ;;      Temps:          0      20       0       0       0       0       0
  9645 ;;      Totals:         0      33       0       0       0       0       0
  9646 ;;Total ram usage:       33 bytes
  9647 ;; Hardware stack levels used:    1
  9648 ;; Hardware stack levels required when called:    6
  9649 ;; This function calls:
  9650 ;;		_memcpy
  9651 ;;		_sendCANFrame
  9652 ;; This function is called by:
  9653 ;;		_doModeVscp
  9654 ;; This function uses a non-reentrant model
  9655 ;;
  9656                           
  9657                           	psect	text12
  9658  003E32                     __ptext12:
  9659                           	opt stack 0
  9660  003E32                     _receiveVSCPModeCanalMsg:
  9661                           	opt stack 23
  9662                           
  9663                           ; BSR set to: 1
  9664                           ;main.c: 2218: uint32_t id;
  9665                           ;main.c: 2219: uint8_t dlc;
  9666                           ;main.c: 2220: uint8_t data[8];
  9667                           ;main.c: 2222: id = ((uint32_t) cmdbuf[5] << 26) |
  9668                           ;main.c: 2223: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9669                           ;main.c: 2224: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9670                           ;main.c: 2225: cmdbuf[5 + 3];
  9671                           
  9672                           ; BSR set to: 1
  9673                           ;incstack = 0
  9674                           ;incstack = 0
  9675  003E32  C12D  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9676  003E36  0100               	movlb	0	; () banked
  9677  003E38  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9678  003E3A  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9679  003E3C  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9680  003E3E  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9681  003E42  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9682  003E46  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9683  003E4A  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9684  003E4C  C12C  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9685  003E50  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9686  003E52  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9687  003E54  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9688  003E56  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9689  003E5A  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9690  003E5E  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9691  003E60  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9692  003E62  C12B  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9693  003E66  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9694  003E68  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9695  003E6A  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9696  003E6C  0E1A               	movlw	26
  9697  003E6E                     u21715:
  9698  003E6E  90D8               	bcf	status,0,c
  9699  003E70  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9700  003E72  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9701  003E74  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9702  003E76  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9703  003E78  2EE8               	decfsz	wreg,f,c
  9704  003E7A  D7F9               	goto	u21715
  9705  003E7C  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9706  003E7E  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9707  003E80  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9708  003E82  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9709  003E84  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9710  003E86  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9711  003E88  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9712  003E8A  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9713  003E8C  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9714  003E8E  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9715  003E90  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9716  003E92  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9717  003E94  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9718  003E96  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9719  003E98  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9720  003E9A  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9721  003E9C  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9722  003E9E  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9723  003EA0  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9724  003EA2  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9725  003EA4  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9726  003EA6  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9727  003EA8  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9728  003EAA  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9729  003EAC  0101               	movlb	1	; () banked
  9730  003EAE  512E               	movf	(_cmdbuf+8)& (0+255),w,b
  9731  003EB0  0100               	movlb	0	; () banked
  9732  003EB2  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9733  003EB4  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9734  003EB6  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9735  003EB8  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9736  003EBA  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9737  003EBC  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9738  003EBE  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9739  003EC0  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9740                           
  9741                           ;main.c: 2226: dlc = ( cmdbuf[4] - 4 ) & 0x07;
  9742  003EC2  0101               	movlb	1	; () banked
  9743  003EC4  512A               	movf	(_cmdbuf+4)& (0+255),w,b
  9744  003EC6  0FFC               	addlw	252
  9745  003EC8  0B07               	andlw	7
  9746  003ECA  0100               	movlb	0	; () banked
  9747  003ECC  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9748                           
  9749                           ; BSR set to: 0
  9750                           ;main.c: 2227: if ( dlc > 8 ) {
  9751  003ECE  0E08               	movlw	8
  9752  003ED0  65B6               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9753  003ED2  D002               	goto	l15884
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;main.c: 2228: return 0;
  9757  003ED4  0E00               	movlw	0
  9758  003ED6  D021               	goto	l1076
  9759  003ED8                     l15884:
  9760                           
  9761                           ; BSR set to: 0
  9762                           ;main.c: 2229: }
  9763                           ;main.c: 2230: memcpy( data, cmdbuf + 5 + 4, dlc );
  9764  003ED8  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9765  003EDA  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9766  003EDC  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9767  003EDE  6F60               	movwf	?_memcpy& (0+255),b
  9768  003EE0  0E2F               	movlw	low (_cmdbuf+9)
  9769  003EE2  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9770  003EE4  0E01               	movlw	high (_cmdbuf+9)
  9771  003EE6  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9772  003EE8  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9773  003EEC  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9774  003EF0  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9775  003EF4  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9776  003EF6  EC8A  F02A         	call	_memcpy	;wreg free
  9777                           
  9778                           ; BSR set to: 0
  9779                           ;main.c: 2232: return sendCANFrame(id, dlc, data);
  9780  003EFA  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9781  003EFE  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9782  003F02  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9783  003F06  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9784  003F0A  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9785  003F0E  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9786  003F10  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9787  003F12  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9788  003F14  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9789  003F16  EC48  F02B         	call	_sendCANFrame	;wreg free
  9790  003F1A                     l1076:
  9791  003F1A  0012               	return	
  9792  003F1C                     __end_of_receiveVSCPModeCanalMsg:
  9793                           	opt stack 0
  9794                           tblptru	equ	0xFF8
  9795                           tblptrh	equ	0xFF7
  9796                           tblptrl	equ	0xFF6
  9797                           tablat	equ	0xFF5
  9798                           prodh	equ	0xFF4
  9799                           prodl	equ	0xFF3
  9800                           intcon	equ	0xFF2
  9801                           indf0	equ	0xFEF
  9802                           postinc0	equ	0xFEE
  9803                           fsr0h	equ	0xFEA
  9804                           fsr0l	equ	0xFE9
  9805                           wreg	equ	0xFE8
  9806                           indf1	equ	0xFE7
  9807                           postinc1	equ	0xFE6
  9808                           postdec1	equ	0xFE5
  9809                           fsr1h	equ	0xFE2
  9810                           fsr1l	equ	0xFE1
  9811                           indf2	equ	0xFDF
  9812                           postinc2	equ	0xFDE
  9813                           postdec2	equ	0xFDD
  9814                           plusw2	equ	0xFDB
  9815                           fsr2h	equ	0xFDA
  9816                           fsr2l	equ	0xFD9
  9817                           status	equ	0xFD8
  9818                           
  9819 ;; *************** function _memcpy *****************
  9820 ;; Defined at:
  9821 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9822 ;; Parameters:    Size  Location     Type
  9823 ;;  d1              2    0[BANK0 ] PTR void 
  9824 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9825 ;;  s1              2    2[BANK0 ] PTR const void 
  9826 ;;		 -> vscpData(8), cmdbuf(80), 
  9827 ;;  n               2    4[BANK0 ] unsigned int 
  9828 ;; Auto vars:     Size  Location     Type
  9829 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9830 ;;		 -> vscpData(8), cmdbuf(80), 
  9831 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9832 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9833 ;; Return value:  Size  Location     Type
  9834 ;;                  2    0[BANK0 ] PTR void 
  9835 ;; Registers used:
  9836 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9837 ;; Tracked objects:
  9838 ;;		On entry : F/0
  9839 ;;		On exit  : F/0
  9840 ;;		Unchanged: 0/0
  9841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9842 ;;      Params:         0       6       0       0       0       0       0
  9843 ;;      Locals:         0       4       0       0       0       0       0
  9844 ;;      Temps:          0       0       0       0       0       0       0
  9845 ;;      Totals:         0      10       0       0       0       0       0
  9846 ;;Total ram usage:       10 bytes
  9847 ;; Hardware stack levels used:    1
  9848 ;; Hardware stack levels required when called:    3
  9849 ;; This function calls:
  9850 ;;		Nothing
  9851 ;; This function is called by:
  9852 ;;		_doModeSLCAN
  9853 ;;		_receiveVSCPModeCanalMsg
  9854 ;; This function uses a non-reentrant model
  9855 ;;
  9856                           
  9857                           	psect	text13
  9858  005514                     __ptext13:
  9859                           	opt stack 0
  9860  005514                     _memcpy:
  9861                           	opt stack 26
  9862                           
  9863                           ; BSR set to: 0
  9864                           
  9865                           ;incstack = 0
  9866                           ;incstack = 0
  9867  005514  C062  F068         	movff	memcpy@s1,memcpy@s
  9868  005518  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9869  00551C  C060  F066         	movff	memcpy@d1,memcpy@d
  9870  005520  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9871  005524  D00E               	goto	l16094
  9872  005526                     l16088:
  9873                           
  9874                           ; BSR set to: 0
  9875  005526  C068  FFD9         	movff	memcpy@s,fsr2l
  9876  00552A  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9877  00552E  C066  FFE1         	movff	memcpy@d,fsr1l
  9878  005532  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9879  005536  CFDF FFE7          	movff	indf2,indf1
  9880                           
  9881                           ; BSR set to: 0
  9882  00553A  4B68               	infsnz	memcpy@s& (0+255),f,b
  9883  00553C  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9884                           
  9885                           ; BSR set to: 0
  9886  00553E  4B66               	infsnz	memcpy@d& (0+255),f,b
  9887  005540  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9888  005542                     l16094:
  9889                           
  9890                           ; BSR set to: 0
  9891  005542  0764               	decf	memcpy@n& (0+255),f,b
  9892  005544  A0D8               	btfss	status,0,c
  9893  005546  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9894  005548  0100               	movlb	0	; () banked
  9895  00554A  2964               	incf	memcpy@n& (0+255),w,b
  9896  00554C  B4D8               	btfsc	status,2,c
  9897  00554E  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9898  005550  B4D8               	btfsc	status,2,c
  9899                           
  9900                           ; BSR set to: 0
  9901  005552  0012               	return	
  9902  005554  D7E8               	goto	l16088
  9903  005556                     __end_of_memcpy:
  9904                           	opt stack 0
  9905                           tblptru	equ	0xFF8
  9906                           tblptrh	equ	0xFF7
  9907                           tblptrl	equ	0xFF6
  9908                           tablat	equ	0xFF5
  9909                           prodh	equ	0xFF4
  9910                           prodl	equ	0xFF3
  9911                           intcon	equ	0xFF2
  9912                           indf0	equ	0xFEF
  9913                           postinc0	equ	0xFEE
  9914                           fsr0h	equ	0xFEA
  9915                           fsr0l	equ	0xFE9
  9916                           wreg	equ	0xFE8
  9917                           indf1	equ	0xFE7
  9918                           postinc1	equ	0xFE6
  9919                           postdec1	equ	0xFE5
  9920                           fsr1h	equ	0xFE2
  9921                           fsr1l	equ	0xFE1
  9922                           indf2	equ	0xFDF
  9923                           postinc2	equ	0xFDE
  9924                           postdec2	equ	0xFDD
  9925                           plusw2	equ	0xFDB
  9926                           fsr2h	equ	0xFDA
  9927                           fsr2l	equ	0xFD9
  9928                           status	equ	0xFD8
  9929                           
  9930 ;; *************** function _sendVSCPDriverAck *****************
  9931 ;; Defined at:
  9932 ;;		line 1649 in file "main.c"
  9933 ;; Parameters:    Size  Location     Type
  9934 ;;		None
  9935 ;; Auto vars:     Size  Location     Type
  9936 ;;  crc             1   15[BANK0 ] unsigned char 
  9937 ;; Return value:  Size  Location     Type
  9938 ;;		None               void
  9939 ;; Registers used:
  9940 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9941 ;; Tracked objects:
  9942 ;;		On entry : E/1
  9943 ;;		On exit  : 0/0
  9944 ;;		Unchanged: 0/0
  9945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9946 ;;      Params:         0       0       0       0       0       0       0
  9947 ;;      Locals:         0       1       0       0       0       0       0
  9948 ;;      Temps:          0       0       0       0       0       0       0
  9949 ;;      Totals:         0       1       0       0       0       0       0
  9950 ;;Total ram usage:        1 bytes
  9951 ;; Hardware stack levels used:    1
  9952 ;; Hardware stack levels required when called:    6
  9953 ;; This function calls:
  9954 ;;		_WriteUSART
  9955 ;;		_sendEscapedUartData
  9956 ;;		_crc8
  9957 ;; This function is called by:
  9958 ;;		_doModeVscp
  9959 ;; This function uses a non-reentrant model
  9960 ;;
  9961                           
  9962                           	psect	text14
  9963  00484A                     __ptext14:
  9964                           	opt stack 0
  9965  00484A                     _sendVSCPDriverAck:
  9966                           	opt stack 23
  9967                           
  9968                           ;main.c: 1650: uint8_t crc = 0;
  9969                           
  9970                           ; BSR set to: 0
  9971                           ;incstack = 0
  9972                           ;incstack = 0
  9973  00484A  0100               	movlb	0	; () banked
  9974  00484C  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9975  00484E                     l820:
  9976  00484E  A2AC               	btfss	4012,1,c	;volatile
  9977  004850  D7FE               	goto	l820
  9978                           
  9979                           ;main.c: 1654: WriteUSART(0x10);
  9980  004852  0E10               	movlw	16
  9981  004854  EC5B  F02C         	call	_WriteUSART
  9982  004858                     l823:
  9983  004858  A2AC               	btfss	4012,1,c	;volatile
  9984  00485A  D7FE               	goto	l823
  9985                           
  9986                           ;main.c: 1656: WriteUSART(0x02);
  9987  00485C  0E02               	movlw	2
  9988  00485E  EC5B  F02C         	call	_WriteUSART
  9989  004862                     l826:
  9990  004862  A2AC               	btfss	4012,1,c	;volatile
  9991  004864  D7FE               	goto	l826
  9992                           
  9993                           ;main.c: 1660: WriteUSART(251);
  9994  004866  0EFB               	movlw	251
  9995  004868  EC5B  F02C         	call	_WriteUSART
  9996                           
  9997                           ;main.c: 1661: crc8(&crc, 251);
  9998  00486C  0100               	movlb	0	; () banked
  9999  00486E  0E00               	movlw	high sendVSCPDriverAck@crc
 10000  004870  6F68               	movwf	(?_crc8+1)& (0+255),b
 10001  004872  0E6F               	movlw	low sendVSCPDriverAck@crc
 10002  004874  6F67               	movwf	?_crc8& (0+255),b
 10003  004876  0EFB               	movlw	251
 10004  004878  6F69               	movwf	(?_crc8+2)& (0+255),b
 10005  00487A  EC65  F02B         	call	_crc8	;wreg free
 10006  00487E                     l829:
 10007  00487E  A2AC               	btfss	4012,1,c	;volatile
 10008  004880  D7FE               	goto	l829
 10009                           
 10010                           ;main.c: 1665: WriteUSART(0);
 10011  004882  0E00               	movlw	0
 10012  004884  EC5B  F02C         	call	_WriteUSART
 10013                           
 10014                           ;main.c: 1666: crc8(&crc, 0);
 10015  004888  D829               	call	PL44	;call to abstracted procedure
 10016  00488A  EC65  F02B         	call	_crc8	;wreg free
 10017                           
 10018                           ; BSR set to: 0
 10019                           ;main.c: 1669: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10020  00488E  0E00               	movlw	high sendVSCPDriverAck@crc
 10021  004890  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10022  004892  0E6F               	movlw	low sendVSCPDriverAck@crc
 10023  004894  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10024  004896  0101               	movlb	1	; () banked
 10025  004898  5128               	movf	(_cmdbuf+2)& (0+255),w,b
 10026  00489A  ECFA  F028         	call	_sendEscapedUartData
 10027  00489E                     l832:
 10028  00489E  A2AC               	btfss	4012,1,c	;volatile
 10029  0048A0  D7FE               	goto	l832
 10030                           
 10031                           ;main.c: 1673: WriteUSART(0);
 10032  0048A2  0E00               	movlw	0
 10033  0048A4  EC5B  F02C         	call	_WriteUSART
 10034                           
 10035                           ;main.c: 1674: crc8(&crc, 0);
 10036  0048A8  D819               	call	PL44	;call to abstracted procedure
 10037  0048AA  EC65  F02B         	call	_crc8	;wreg free
 10038  0048AE                     l835:
 10039  0048AE  A2AC               	btfss	4012,1,c	;volatile
 10040  0048B0  D7FE               	goto	l835
 10041                           
 10042                           ;main.c: 1676: WriteUSART(0);
 10043  0048B2  0E00               	movlw	0
 10044  0048B4  EC5B  F02C         	call	_WriteUSART
 10045                           
 10046                           ;main.c: 1677: crc8(&crc, 0);
 10047  0048B8  D811               	call	PL44	;call to abstracted procedure
 10048  0048BA  EC65  F02B         	call	_crc8	;wreg free
 10049                           
 10050                           ; BSR set to: 0
 10051                           ;main.c: 1680: sendEscapedUartData(crc, (0));
 10052  0048BE  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10053  0048C0  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10054  0048C2  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
 10055  0048C4  ECFA  F028         	call	_sendEscapedUartData
 10056  0048C8                     l838:
 10057  0048C8  A2AC               	btfss	4012,1,c	;volatile
 10058  0048CA  D7FE               	goto	l838
 10059                           
 10060                           ;main.c: 1684: WriteUSART(0x10);
 10061  0048CC  0E10               	movlw	16
 10062  0048CE  EC5B  F02C         	call	_WriteUSART
 10063  0048D2                     l841:
 10064  0048D2  A2AC               	btfss	4012,1,c	;volatile
 10065  0048D4  D7FE               	goto	l841
 10066                           
 10067                           ;main.c: 1686: WriteUSART(0x03);
 10068  0048D6  0E03               	movlw	3
 10069  0048D8  EF5B  F02C         	goto	_WriteUSART
 10070  0048DC                     __end_of_sendVSCPDriverAck:
 10071                           	opt stack 0
 10072  0048DC                     PL44:
 10073                           	opt stack 23
 10074  0048DC  0100               	movlb	0	; () banked
 10075  0048DE  0E00               	movlw	high sendVSCPDriverAck@crc
 10076  0048E0  6F68               	movwf	(?_crc8+1)& (0+255),b
 10077  0048E2  0E6F               	movlw	low sendVSCPDriverAck@crc
 10078  0048E4  6F67               	movwf	?_crc8& (0+255),b
 10079  0048E6  6B69               	clrf	(?_crc8+2)& (0+255),b
 10080  0048E8  0C00               	retlw	0
 10081  0048EA                     __end_ofPL44:
 10082                           	opt stack 0
 10083                           tblptru	equ	0xFF8
 10084                           tblptrh	equ	0xFF7
 10085                           tblptrl	equ	0xFF6
 10086                           tablat	equ	0xFF5
 10087                           prodh	equ	0xFF4
 10088                           prodl	equ	0xFF3
 10089                           intcon	equ	0xFF2
 10090                           indf0	equ	0xFEF
 10091                           postinc0	equ	0xFEE
 10092                           fsr0h	equ	0xFEA
 10093                           fsr0l	equ	0xFE9
 10094                           wreg	equ	0xFE8
 10095                           indf1	equ	0xFE7
 10096                           postinc1	equ	0xFE6
 10097                           postdec1	equ	0xFE5
 10098                           fsr1h	equ	0xFE2
 10099                           fsr1l	equ	0xFE1
 10100                           indf2	equ	0xFDF
 10101                           postinc2	equ	0xFDE
 10102                           postdec2	equ	0xFDD
 10103                           plusw2	equ	0xFDB
 10104                           fsr2h	equ	0xFDA
 10105                           fsr2l	equ	0xFD9
 10106                           status	equ	0xFD8
 10107                           
 10108 ;; *************** function _sendVSCPDriverNack *****************
 10109 ;; Defined at:
 10110 ;;		line 1693 in file "main.c"
 10111 ;; Parameters:    Size  Location     Type
 10112 ;;		None
 10113 ;; Auto vars:     Size  Location     Type
 10114 ;;  crc             1   15[BANK0 ] unsigned char 
 10115 ;; Return value:  Size  Location     Type
 10116 ;;		None               void
 10117 ;; Registers used:
 10118 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10119 ;; Tracked objects:
 10120 ;;		On entry : E/0
 10121 ;;		On exit  : 0/0
 10122 ;;		Unchanged: 0/0
 10123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10124 ;;      Params:         0       0       0       0       0       0       0
 10125 ;;      Locals:         0       1       0       0       0       0       0
 10126 ;;      Temps:          0       0       0       0       0       0       0
 10127 ;;      Totals:         0       1       0       0       0       0       0
 10128 ;;Total ram usage:        1 bytes
 10129 ;; Hardware stack levels used:    1
 10130 ;; Hardware stack levels required when called:    6
 10131 ;; This function calls:
 10132 ;;		_WriteUSART
 10133 ;;		_sendEscapedUartData
 10134 ;;		_crc8
 10135 ;; This function is called by:
 10136 ;;		_doModeVscp
 10137 ;; This function uses a non-reentrant model
 10138 ;;
 10139                           
 10140                           	psect	text15
 10141  0048EA                     __ptext15:
 10142                           	opt stack 0
 10143  0048EA                     _sendVSCPDriverNack:
 10144                           	opt stack 23
 10145                           
 10146                           ;main.c: 1694: uint8_t crc = 0;
 10147                           
 10148                           ;incstack = 0
 10149                           ;incstack = 0
 10150  0048EA  0100               	movlb	0	; () banked
 10151  0048EC  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
 10152  0048EE                     l847:
 10153  0048EE  A2AC               	btfss	4012,1,c	;volatile
 10154  0048F0  D7FE               	goto	l847
 10155                           
 10156                           ;main.c: 1698: WriteUSART(0x10);
 10157  0048F2  0E10               	movlw	16
 10158  0048F4  EC5B  F02C         	call	_WriteUSART
 10159  0048F8                     l850:
 10160  0048F8  A2AC               	btfss	4012,1,c	;volatile
 10161  0048FA  D7FE               	goto	l850
 10162                           
 10163                           ;main.c: 1700: WriteUSART(0x02);
 10164  0048FC  0E02               	movlw	2
 10165  0048FE  EC5B  F02C         	call	_WriteUSART
 10166  004902                     l853:
 10167  004902  A2AC               	btfss	4012,1,c	;volatile
 10168  004904  D7FE               	goto	l853
 10169                           
 10170                           ;main.c: 1704: WriteUSART(252);
 10171  004906  0EFC               	movlw	252
 10172  004908  EC5B  F02C         	call	_WriteUSART
 10173                           
 10174                           ;main.c: 1705: crc8(&crc, 252);
 10175  00490C  0100               	movlb	0	; () banked
 10176  00490E  0E00               	movlw	high sendVSCPDriverNack@crc
 10177  004910  6F68               	movwf	(?_crc8+1)& (0+255),b
 10178  004912  0E6F               	movlw	low sendVSCPDriverNack@crc
 10179  004914  6F67               	movwf	?_crc8& (0+255),b
 10180  004916  0EFC               	movlw	252
 10181  004918  6F69               	movwf	(?_crc8+2)& (0+255),b
 10182  00491A  EC65  F02B         	call	_crc8	;wreg free
 10183  00491E                     l856:
 10184  00491E  A2AC               	btfss	4012,1,c	;volatile
 10185  004920  D7FE               	goto	l856
 10186                           
 10187                           ;main.c: 1709: WriteUSART(0);
 10188  004922  0E00               	movlw	0
 10189  004924  EC5B  F02C         	call	_WriteUSART
 10190                           
 10191                           ;main.c: 1710: crc8(&crc, 0);
 10192  004928  D829               	call	PL42	;call to abstracted procedure
 10193  00492A  EC65  F02B         	call	_crc8	;wreg free
 10194                           
 10195                           ; BSR set to: 0
 10196                           ;main.c: 1713: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10197  00492E  0E00               	movlw	high sendVSCPDriverNack@crc
 10198  004930  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10199  004932  0E6F               	movlw	low sendVSCPDriverNack@crc
 10200  004934  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10201  004936  0101               	movlb	1	; () banked
 10202  004938  5128               	movf	(_cmdbuf+2)& (0+255),w,b
 10203  00493A  ECFA  F028         	call	_sendEscapedUartData
 10204  00493E                     l859:
 10205  00493E  A2AC               	btfss	4012,1,c	;volatile
 10206  004940  D7FE               	goto	l859
 10207                           
 10208                           ;main.c: 1717: WriteUSART(0);
 10209  004942  0E00               	movlw	0
 10210  004944  EC5B  F02C         	call	_WriteUSART
 10211                           
 10212                           ;main.c: 1718: crc8(&crc, 0);
 10213  004948  D819               	call	PL42	;call to abstracted procedure
 10214  00494A  EC65  F02B         	call	_crc8	;wreg free
 10215  00494E                     l862:
 10216  00494E  A2AC               	btfss	4012,1,c	;volatile
 10217  004950  D7FE               	goto	l862
 10218                           
 10219                           ;main.c: 1720: WriteUSART(0);
 10220  004952  0E00               	movlw	0
 10221  004954  EC5B  F02C         	call	_WriteUSART
 10222                           
 10223                           ;main.c: 1721: crc8(&crc, 0);
 10224  004958  D811               	call	PL42	;call to abstracted procedure
 10225  00495A  EC65  F02B         	call	_crc8	;wreg free
 10226                           
 10227                           ; BSR set to: 0
 10228                           ;main.c: 1724: sendEscapedUartData(crc, (0));
 10229  00495E  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10230  004960  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10231  004962  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 10232  004964  ECFA  F028         	call	_sendEscapedUartData
 10233  004968                     l865:
 10234  004968  A2AC               	btfss	4012,1,c	;volatile
 10235  00496A  D7FE               	goto	l865
 10236                           
 10237                           ;main.c: 1728: WriteUSART(0x10);
 10238  00496C  0E10               	movlw	16
 10239  00496E  EC5B  F02C         	call	_WriteUSART
 10240  004972                     l868:
 10241  004972  A2AC               	btfss	4012,1,c	;volatile
 10242  004974  D7FE               	goto	l868
 10243                           
 10244                           ;main.c: 1730: WriteUSART(0x03);
 10245  004976  0E03               	movlw	3
 10246  004978  EF5B  F02C         	goto	_WriteUSART
 10247  00497C                     __end_of_sendVSCPDriverNack:
 10248                           	opt stack 0
 10249  00497C                     PL42:
 10250                           	opt stack 23
 10251  00497C  0100               	movlb	0	; () banked
 10252  00497E  0E00               	movlw	high sendVSCPDriverNack@crc
 10253  004980  6F68               	movwf	(?_crc8+1)& (0+255),b
 10254  004982  0E6F               	movlw	low sendVSCPDriverNack@crc
 10255  004984  6F67               	movwf	?_crc8& (0+255),b
 10256  004986  6B69               	clrf	(?_crc8+2)& (0+255),b
 10257  004988  0C00               	retlw	0
 10258  00498A                     __end_ofPL42:
 10259                           	opt stack 0
 10260                           tblptru	equ	0xFF8
 10261                           tblptrh	equ	0xFF7
 10262                           tblptrl	equ	0xFF6
 10263                           tablat	equ	0xFF5
 10264                           prodh	equ	0xFF4
 10265                           prodl	equ	0xFF3
 10266                           intcon	equ	0xFF2
 10267                           indf0	equ	0xFEF
 10268                           postinc0	equ	0xFEE
 10269                           fsr0h	equ	0xFEA
 10270                           fsr0l	equ	0xFE9
 10271                           wreg	equ	0xFE8
 10272                           indf1	equ	0xFE7
 10273                           postinc1	equ	0xFE6
 10274                           postdec1	equ	0xFE5
 10275                           fsr1h	equ	0xFE2
 10276                           fsr1l	equ	0xFE1
 10277                           indf2	equ	0xFDF
 10278                           postinc2	equ	0xFDE
 10279                           postdec2	equ	0xFDD
 10280                           plusw2	equ	0xFDB
 10281                           fsr2h	equ	0xFDA
 10282                           fsr2l	equ	0xFD9
 10283                           status	equ	0xFD8
 10284                           
 10285 ;; *************** function _calcCRC *****************
 10286 ;; Defined at:
 10287 ;;		line 2453 in file "main.c"
 10288 ;; Parameters:    Size  Location     Type
 10289 ;;  p               2   12[BANK0 ] PTR unsigned char 
 10290 ;;		 -> cmdbuf(80), 
 10291 ;;  len             1   14[BANK0 ] unsigned char 
 10292 ;; Auto vars:     Size  Location     Type
 10293 ;;  crc             1   16[BANK0 ] unsigned char 
 10294 ;;  j               1   15[BANK0 ] unsigned char 
 10295 ;; Return value:  Size  Location     Type
 10296 ;;                  1    wreg      unsigned char 
 10297 ;; Registers used:
 10298 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10299 ;; Tracked objects:
 10300 ;;		On entry : F/0
 10301 ;;		On exit  : F/0
 10302 ;;		Unchanged: 0/0
 10303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10304 ;;      Params:         0       3       0       0       0       0       0
 10305 ;;      Locals:         0       2       0       0       0       0       0
 10306 ;;      Temps:          0       0       0       0       0       0       0
 10307 ;;      Totals:         0       5       0       0       0       0       0
 10308 ;;Total ram usage:        5 bytes
 10309 ;; Hardware stack levels used:    1
 10310 ;; Hardware stack levels required when called:    5
 10311 ;; This function calls:
 10312 ;;		_crc8
 10313 ;; This function is called by:
 10314 ;;		_doModeVscp
 10315 ;; This function uses a non-reentrant model
 10316 ;;
 10317                           
 10318                           	psect	text16
 10319  0057A0                     __ptext16:
 10320                           	opt stack 0
 10321  0057A0                     _calcCRC:
 10322                           	opt stack 24
 10323                           
 10324                           ; BSR set to: 0
 10325                           ;main.c: 2454: uint8_t j;
 10326                           ;main.c: 2455: uint8_t crc = 0;
 10327                           
 10328                           ;incstack = 0
 10329                           ;incstack = 0
 10330  0057A0  6B70               	clrf	calcCRC@crc& (0+255),b
 10331                           
 10332                           ;main.c: 2457: for (j = 0; j < len; j++) {
 10333  0057A2  6B6F               	clrf	calcCRC@j& (0+255),b
 10334  0057A4  D00F               	goto	l15810
 10335  0057A6                     l15806:
 10336                           
 10337                           ; BSR set to: 0
 10338                           ;main.c: 2458: crc8(&crc, p[j]);
 10339  0057A6  0E00               	movlw	high calcCRC@crc
 10340  0057A8  6F68               	movwf	(?_crc8+1)& (0+255),b
 10341  0057AA  0E70               	movlw	low calcCRC@crc
 10342  0057AC  6F67               	movwf	?_crc8& (0+255),b
 10343  0057AE  516F               	movf	calcCRC@j& (0+255),w,b
 10344  0057B0  256C               	addwf	calcCRC@p& (0+255),w,b
 10345  0057B2  6ED9               	movwf	fsr2l,c
 10346  0057B4  0E00               	movlw	0
 10347  0057B6  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10348  0057B8  6EDA               	movwf	fsr2h,c
 10349  0057BA  50DF               	movf	indf2,w,c
 10350  0057BC  6F69               	movwf	(?_crc8+2)& (0+255),b
 10351  0057BE  EC65  F02B         	call	_crc8	;wreg free
 10352                           
 10353                           ; BSR set to: 0
 10354  0057C2  2B6F               	incf	calcCRC@j& (0+255),f,b
 10355  0057C4                     l15810:
 10356                           
 10357                           ; BSR set to: 0
 10358  0057C4  516E               	movf	calcCRC@len& (0+255),w,b
 10359  0057C6  5D6F               	subwf	calcCRC@j& (0+255),w,b
 10360  0057C8  E3EE               	bnc	l15806
 10361                           
 10362                           ; BSR set to: 0
 10363                           ;main.c: 2459: }
 10364                           ;main.c: 2461: return crc;
 10365  0057CA  5170               	movf	calcCRC@crc& (0+255),w,b
 10366                           
 10367                           ; BSR set to: 0
 10368  0057CC  0012               	return	
 10369  0057CE                     __end_of_calcCRC:
 10370                           	opt stack 0
 10371                           tblptru	equ	0xFF8
 10372                           tblptrh	equ	0xFF7
 10373                           tblptrl	equ	0xFF6
 10374                           tablat	equ	0xFF5
 10375                           prodh	equ	0xFF4
 10376                           prodl	equ	0xFF3
 10377                           intcon	equ	0xFF2
 10378                           indf0	equ	0xFEF
 10379                           postinc0	equ	0xFEE
 10380                           fsr0h	equ	0xFEA
 10381                           fsr0l	equ	0xFE9
 10382                           wreg	equ	0xFE8
 10383                           indf1	equ	0xFE7
 10384                           postinc1	equ	0xFE6
 10385                           postdec1	equ	0xFE5
 10386                           fsr1h	equ	0xFE2
 10387                           fsr1l	equ	0xFE1
 10388                           indf2	equ	0xFDF
 10389                           postinc2	equ	0xFDE
 10390                           postdec2	equ	0xFDD
 10391                           plusw2	equ	0xFDB
 10392                           fsr2h	equ	0xFDA
 10393                           fsr2l	equ	0xFD9
 10394                           status	equ	0xFD8
 10395                           
 10396 ;; *************** function _receiveSendEventCANAL *****************
 10397 ;; Defined at:
 10398 ;;		line 1845 in file "main.c"
 10399 ;; Parameters:    Size  Location     Type
 10400 ;;		None
 10401 ;; Auto vars:     Size  Location     Type
 10402 ;;  crc             1   32[BANK0 ] unsigned char 
 10403 ;;  data            8   18[BANK0 ] unsigned char [8]
 10404 ;;  id              4   27[BANK0 ] unsigned long 
 10405 ;;  dlc             1   31[BANK0 ] unsigned char 
 10406 ;;  i               1   26[BANK0 ] unsigned char 
 10407 ;; Return value:  Size  Location     Type
 10408 ;;                  1    wreg      enum E15660
 10409 ;; Registers used:
 10410 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10411 ;; Tracked objects:
 10412 ;;		On entry : F/1
 10413 ;;		On exit  : 0/0
 10414 ;;		Unchanged: 0/0
 10415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10416 ;;      Params:         0       0       0       0       0       0       0
 10417 ;;      Locals:         0      15       0       0       0       0       0
 10418 ;;      Temps:          0       0       0       0       0       0       0
 10419 ;;      Totals:         0      15       0       0       0       0       0
 10420 ;;Total ram usage:       15 bytes
 10421 ;; Hardware stack levels used:    1
 10422 ;; Hardware stack levels required when called:    6
 10423 ;; This function calls:
 10424 ;;		_WriteUSART
 10425 ;;		_sendEscapedUartData
 10426 ;;		_crc8
 10427 ;;		_getCANFrame
 10428 ;; This function is called by:
 10429 ;;		_doModeVscp
 10430 ;; This function uses a non-reentrant model
 10431 ;;
 10432                           
 10433                           	psect	text17
 10434  003682                     __ptext17:
 10435                           	opt stack 0
 10436  003682                     _receiveSendEventCANAL:
 10437                           	opt stack 23
 10438                           
 10439                           ; BSR set to: 1
 10440                           ;main.c: 1846: uint8_t i;
 10441                           ;main.c: 1847: uint32_t id;
 10442                           ;main.c: 1848: uint8_t dlc;
 10443                           ;main.c: 1849: uint8_t data[8];
 10444                           ;main.c: 1851: if ( getCANFrame( &id, &dlc, &data ) ) {
 10445                           
 10446                           ; BSR set to: 0
 10447                           ;incstack = 0
 10448                           ;incstack = 0
 10449  003682  0100               	movlb	0	; () banked
 10450  003684  0E7F               	movlw	low receiveSendEventCANAL@dlc
 10451  003686  6F6E               	movwf	?_getCANFrame& (0+255),b
 10452  003688  0E00               	movlw	high receiveSendEventCANAL@data
 10453  00368A  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 10454  00368C  0E72               	movlw	low receiveSendEventCANAL@data
 10455  00368E  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 10456  003690  0E7B               	movlw	receiveSendEventCANAL@id& (0+255)
 10457  003692  EC15  F025         	call	_getCANFrame
 10458  003696  0900               	iorlw	0
 10459  003698  E101 D092          	bz	l963
 10460                           
 10461                           ; BSR set to: 0
 10462                           ;main.c: 1853: uint8_t crc = 0;
 10463  00369C  6B80               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;main.c: 1856: cntRxFrames++;
 10467  00369E  0101               	movlb	1	; () banked
 10468  0036A0  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10469  0036A2  0E00               	movlw	0
 10470  0036A4  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10471  0036A6  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10472  0036A8  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10473                           
 10474                           ;main.c: 1857: cntRxBytes += dlc;
 10475  0036AA  0100               	movlb	0	; () banked
 10476  0036AC  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10477  0036AE  0101               	movlb	1	; () banked
 10478  0036B0  2708               	addwf	_cntRxBytes& (0+255),f,b
 10479  0036B2  0E00               	movlw	0
 10480  0036B4  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10481  0036B6  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10482  0036B8  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10483  0036BA                     l942:
 10484                           
 10485                           ; BSR set to: 1
 10486  0036BA  A2AC               	btfss	4012,1,c	;volatile
 10487  0036BC  D7FE               	goto	l942
 10488                           
 10489                           ; BSR set to: 1
 10490                           ;main.c: 1861: WriteUSART(0x10);
 10491  0036BE  0E10               	movlw	16
 10492  0036C0  EC5B  F02C         	call	_WriteUSART
 10493  0036C4                     l945:
 10494  0036C4  A2AC               	btfss	4012,1,c	;volatile
 10495  0036C6  D7FE               	goto	l945
 10496                           
 10497                           ;main.c: 1863: WriteUSART(0x02);
 10498  0036C8  0E02               	movlw	2
 10499  0036CA  EC5B  F02C         	call	_WriteUSART
 10500  0036CE                     l948:
 10501  0036CE  A2AC               	btfss	4012,1,c	;volatile
 10502  0036D0  D7FE               	goto	l948
 10503                           
 10504                           ;main.c: 1867: WriteUSART(2);
 10505  0036D2  0E02               	movlw	2
 10506  0036D4  EC5B  F02C         	call	_WriteUSART
 10507                           
 10508                           ;main.c: 1868: crc8(&crc, 2);
 10509  0036D8  0100               	movlb	0	; () banked
 10510  0036DA  0E00               	movlw	high receiveSendEventCANAL@crc
 10511  0036DC  6F68               	movwf	(?_crc8+1)& (0+255),b
 10512  0036DE  0E80               	movlw	low receiveSendEventCANAL@crc
 10513  0036E0  6F67               	movwf	?_crc8& (0+255),b
 10514  0036E2  0E02               	movlw	2
 10515  0036E4  6F69               	movwf	(?_crc8+2)& (0+255),b
 10516  0036E6  EC65  F02B         	call	_crc8	;wreg free
 10517  0036EA                     l951:
 10518  0036EA  A2AC               	btfss	4012,1,c	;volatile
 10519  0036EC  D7FE               	goto	l951
 10520                           
 10521                           ;main.c: 1872: WriteUSART(0);
 10522  0036EE  0E00               	movlw	0
 10523  0036F0  EC5B  F02C         	call	_WriteUSART
 10524                           
 10525                           ;main.c: 1873: crc8(&crc, 0);
 10526  0036F4  0100               	movlb	0	; () banked
 10527  0036F6  0E00               	movlw	high receiveSendEventCANAL@crc
 10528  0036F8  6F68               	movwf	(?_crc8+1)& (0+255),b
 10529  0036FA  0E80               	movlw	low receiveSendEventCANAL@crc
 10530  0036FC  6F67               	movwf	?_crc8& (0+255),b
 10531  0036FE  0E00               	movlw	0
 10532  003700  6B69               	clrf	(?_crc8+2)& (0+255),b
 10533  003702  EC65  F02B         	call	_crc8	;wreg free
 10534                           
 10535                           ; BSR set to: 0
 10536                           ;main.c: 1876: sendEscapedUartData(sequencyno, &crc);
 10537  003706  0E00               	movlw	high receiveSendEventCANAL@crc
 10538  003708  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10539  00370A  0E80               	movlw	low receiveSendEventCANAL@crc
 10540  00370C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10541  00370E  5032               	movf	_sequencyno,w,c
 10542  003710  ECFA  F028         	call	_sendEscapedUartData
 10543                           
 10544                           ; BSR set to: 0
 10545                           ;main.c: 1877: sequencyno++;
 10546  003714  2A32               	incf	_sequencyno,f,c
 10547                           
 10548                           ; BSR set to: 0
 10549                           ;main.c: 1880: sendEscapedUartData(0, &crc);
 10550  003716  0E00               	movlw	high receiveSendEventCANAL@crc
 10551  003718  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10552  00371A  0E80               	movlw	low receiveSendEventCANAL@crc
 10553  00371C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10554  00371E  0E00               	movlw	0
 10555  003720  ECFA  F028         	call	_sendEscapedUartData
 10556                           
 10557                           ; BSR set to: 0
 10558                           ;main.c: 1881: sendEscapedUartData(5 + dlc, &crc);
 10559  003724  0E00               	movlw	high receiveSendEventCANAL@crc
 10560  003726  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10561  003728  0E80               	movlw	low receiveSendEventCANAL@crc
 10562  00372A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10563  00372C  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10564  00372E  0F05               	addlw	5
 10565  003730  ECFA  F028         	call	_sendEscapedUartData
 10566                           
 10567                           ; BSR set to: 0
 10568                           ;main.c: 1887: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10569  003734  0E00               	movlw	high receiveSendEventCANAL@crc
 10570  003736  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10571  003738  0E80               	movlw	low receiveSendEventCANAL@crc
 10572  00373A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10573  00373C  0100               	movlb	0	; () banked
 10574  00373E  517E               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10575  003740  ECFA  F028         	call	_sendEscapedUartData
 10576                           
 10577                           ; BSR set to: 0
 10578                           ;main.c: 1888: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10579  003744  0E00               	movlw	high receiveSendEventCANAL@crc
 10580  003746  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10581  003748  0E80               	movlw	low receiveSendEventCANAL@crc
 10582  00374A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10583  00374C  0100               	movlb	0	; () banked
 10584  00374E  517D               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10585  003750  ECFA  F028         	call	_sendEscapedUartData
 10586                           
 10587                           ; BSR set to: 0
 10588                           ;main.c: 1889: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10589  003754  0E00               	movlw	high receiveSendEventCANAL@crc
 10590  003756  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10591  003758  0E80               	movlw	low receiveSendEventCANAL@crc
 10592  00375A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10593  00375C  0100               	movlb	0	; () banked
 10594  00375E  517C               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10595  003760  ECFA  F028         	call	_sendEscapedUartData
 10596                           
 10597                           ; BSR set to: 0
 10598                           ;main.c: 1890: sendEscapedUartData((id & 0xff), &crc);
 10599  003764  0E00               	movlw	high receiveSendEventCANAL@crc
 10600  003766  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10601  003768  0E80               	movlw	low receiveSendEventCANAL@crc
 10602  00376A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10603  00376C  517B               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10604  00376E  ECFA  F028         	call	_sendEscapedUartData
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;main.c: 1893: sendEscapedUartData(dlc, &crc);
 10608  003772  0E00               	movlw	high receiveSendEventCANAL@crc
 10609  003774  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10610  003776  0E80               	movlw	low receiveSendEventCANAL@crc
 10611  003778  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10612  00377A  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10613  00377C  ECFA  F028         	call	_sendEscapedUartData
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;main.c: 1896: for (i = 0; i < dlc; i++) {
 10617  003780  6B7A               	clrf	receiveSendEventCANAL@i& (0+255),b
 10618  003782  D00C               	goto	l15794
 10619  003784                     l15790:
 10620                           
 10621                           ; BSR set to: 0
 10622                           ;main.c: 1897: sendEscapedUartData( data[ i ], &crc );
 10623  003784  0E00               	movlw	high receiveSendEventCANAL@crc
 10624  003786  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10625  003788  0E80               	movlw	low receiveSendEventCANAL@crc
 10626  00378A  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10627  00378C  517A               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10628  00378E  0F72               	addlw	low receiveSendEventCANAL@data
 10629  003790  6ED9               	movwf	fsr2l,c
 10630  003792  6ADA               	clrf	fsr2h,c
 10631  003794  50DF               	movf	indf2,w,c
 10632  003796  ECFA  F028         	call	_sendEscapedUartData
 10633                           
 10634                           ; BSR set to: 0
 10635  00379A  2B7A               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10636  00379C                     l15794:
 10637                           
 10638                           ; BSR set to: 0
 10639  00379C  517F               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10640  00379E  5D7A               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10641  0037A0  E3F1               	bnc	l15790
 10642                           
 10643                           ; BSR set to: 0
 10644                           ;main.c: 1898: }
 10645                           ;main.c: 1903: sendEscapedUartData(crc, (0));
 10646  0037A2  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10647  0037A4  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10648  0037A6  5180               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10649  0037A8  ECFA  F028         	call	_sendEscapedUartData
 10650  0037AC                     l957:
 10651  0037AC  A2AC               	btfss	4012,1,c	;volatile
 10652  0037AE  D7FE               	goto	l957
 10653                           
 10654                           ;main.c: 1907: WriteUSART(0x10);
 10655  0037B0  0E10               	movlw	16
 10656  0037B2  EC5B  F02C         	call	_WriteUSART
 10657  0037B6                     l960:
 10658  0037B6  A2AC               	btfss	4012,1,c	;volatile
 10659  0037B8  D7FE               	goto	l960
 10660                           
 10661                           ;main.c: 1909: WriteUSART(0x03);
 10662  0037BA  0E03               	movlw	3
 10663  0037BC  EC5B  F02C         	call	_WriteUSART
 10664  0037C0                     l963:
 10665  0037C0  0012               	return	
 10666  0037C2                     __end_of_receiveSendEventCANAL:
 10667                           	opt stack 0
 10668                           tblptru	equ	0xFF8
 10669                           tblptrh	equ	0xFF7
 10670                           tblptrl	equ	0xFF6
 10671                           tablat	equ	0xFF5
 10672                           prodh	equ	0xFF4
 10673                           prodl	equ	0xFF3
 10674                           intcon	equ	0xFF2
 10675                           indf0	equ	0xFEF
 10676                           postinc0	equ	0xFEE
 10677                           fsr0h	equ	0xFEA
 10678                           fsr0l	equ	0xFE9
 10679                           wreg	equ	0xFE8
 10680                           indf1	equ	0xFE7
 10681                           postinc1	equ	0xFE6
 10682                           postdec1	equ	0xFE5
 10683                           fsr1h	equ	0xFE2
 10684                           fsr1l	equ	0xFE1
 10685                           indf2	equ	0xFDF
 10686                           postinc2	equ	0xFDE
 10687                           postdec2	equ	0xFDD
 10688                           plusw2	equ	0xFDB
 10689                           fsr2h	equ	0xFDA
 10690                           fsr2l	equ	0xFD9
 10691                           status	equ	0xFD8
 10692                           
 10693 ;; *************** function _receiveSendMultiEventCANAL *****************
 10694 ;; Defined at:
 10695 ;;		line 1922 in file "main.c"
 10696 ;; Parameters:    Size  Location     Type
 10697 ;;		None
 10698 ;; Auto vars:     Size  Location     Type
 10699 ;;  crc             1   33[BANK0 ] unsigned char 
 10700 ;;  data            8   18[BANK0 ] unsigned char [8]
 10701 ;;  id              4   28[BANK0 ] unsigned long 
 10702 ;;  pos             1   34[BANK0 ] unsigned char 
 10703 ;;  dlc             1   32[BANK0 ] unsigned char 
 10704 ;;  i               1   27[BANK0 ] unsigned char 
 10705 ;;  msgcount        1   26[BANK0 ] unsigned char 
 10706 ;; Return value:  Size  Location     Type
 10707 ;;                  1    wreg      enum E15660
 10708 ;; Registers used:
 10709 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10710 ;; Tracked objects:
 10711 ;;		On entry : F/1
 10712 ;;		On exit  : 0/0
 10713 ;;		Unchanged: 0/0
 10714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10715 ;;      Params:         0       0       0       0       0       0       0
 10716 ;;      Locals:         0      17       0       0       0       0       0
 10717 ;;      Temps:          0       0       0       0       0       0       0
 10718 ;;      Totals:         0      17       0       0       0       0       0
 10719 ;;Total ram usage:       17 bytes
 10720 ;; Hardware stack levels used:    1
 10721 ;; Hardware stack levels required when called:    6
 10722 ;; This function calls:
 10723 ;;		_WriteUSART
 10724 ;;		_sendEscapedUartData
 10725 ;;		_crc8
 10726 ;;		_getCANFrame
 10727 ;; This function is called by:
 10728 ;;		_doModeVscp
 10729 ;; This function uses a non-reentrant model
 10730 ;;
 10731                           
 10732                           	psect	text18
 10733  003390                     __ptext18:
 10734                           	opt stack 0
 10735  003390                     _receiveSendMultiEventCANAL:
 10736                           	opt stack 23
 10737                           
 10738                           ; BSR set to: 1
 10739                           ;main.c: 1923: uint8_t i;
 10740                           ;main.c: 1924: uint8_t pos=0;
 10741                           
 10742                           ;incstack = 0
 10743                           ;incstack = 0
 10744  003390  0100               	movlb	0	; () banked
 10745  003392  6B82               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10746                           
 10747                           ;main.c: 1925: uint8_t msgcount=0;
 10748  003394  6B7A               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;main.c: 1926: uint32_t id;
 10752                           ;main.c: 1927: uint8_t dlc;
 10753                           ;main.c: 1928: uint8_t data[8];
 10754                           ;main.c: 1930: if ( getCANFrame( &id, &dlc, &data ) ) {
 10755  003396  0E80               	movlw	low receiveSendMultiEventCANAL@dlc
 10756  003398  D8B6               	call	PL90	;call to abstracted procedure
 10757  00339A  EC15  F025         	call	_getCANFrame
 10758  00339E  0900               	iorlw	0
 10759  0033A0  E101 D0A8          	bz	l995
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;main.c: 1932: uint8_t crc = 0;
 10763  0033A4  6B81               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10764                           
 10765                           ; BSR set to: 0
 10766                           ;main.c: 1935: cntRxFrames++;
 10767  0033A6  0101               	movlb	1	; () banked
 10768  0033A8  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10769  0033AA  0E00               	movlw	0
 10770  0033AC  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10771  0033AE  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10772  0033B0  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10773                           
 10774                           ;main.c: 1936: cntRxBytes += dlc;
 10775  0033B2  0100               	movlb	0	; () banked
 10776  0033B4  5180               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10777  0033B6  0101               	movlb	1	; () banked
 10778  0033B8  2708               	addwf	_cntRxBytes& (0+255),f,b
 10779  0033BA  0E00               	movlw	0
 10780  0033BC  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10781  0033BE  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10782  0033C0  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10783  0033C2                     l967:
 10784                           
 10785                           ; BSR set to: 1
 10786  0033C2  A2AC               	btfss	4012,1,c	;volatile
 10787  0033C4  D7FE               	goto	l967
 10788                           
 10789                           ; BSR set to: 1
 10790                           ;main.c: 1940: WriteUSART(0x10);
 10791  0033C6  0E10               	movlw	16
 10792  0033C8  EC5B  F02C         	call	_WriteUSART
 10793  0033CC                     l970:
 10794  0033CC  A2AC               	btfss	4012,1,c	;volatile
 10795  0033CE  D7FE               	goto	l970
 10796                           
 10797                           ;main.c: 1942: WriteUSART(0x02);
 10798  0033D0  0E02               	movlw	2
 10799  0033D2  EC5B  F02C         	call	_WriteUSART
 10800  0033D6                     l973:
 10801  0033D6  A2AC               	btfss	4012,1,c	;volatile
 10802  0033D8  D7FE               	goto	l973
 10803                           
 10804                           ;main.c: 1946: WriteUSART(6);
 10805  0033DA  0E06               	movlw	6
 10806  0033DC  EC5B  F02C         	call	_WriteUSART
 10807                           
 10808                           ;main.c: 1947: crc8(&crc, 6);
 10809  0033E0  0100               	movlb	0	; () banked
 10810  0033E2  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10811  0033E4  6F68               	movwf	(?_crc8+1)& (0+255),b
 10812  0033E6  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10813  0033E8  6F67               	movwf	?_crc8& (0+255),b
 10814  0033EA  0E06               	movlw	6
 10815  0033EC  6F69               	movwf	(?_crc8+2)& (0+255),b
 10816  0033EE  EC65  F02B         	call	_crc8	;wreg free
 10817  0033F2                     l976:
 10818  0033F2  A2AC               	btfss	4012,1,c	;volatile
 10819  0033F4  D7FE               	goto	l976
 10820                           
 10821                           ;main.c: 1951: WriteUSART(0);
 10822  0033F6  0E00               	movlw	0
 10823  0033F8  EC5B  F02C         	call	_WriteUSART
 10824                           
 10825                           ;main.c: 1952: crc8(&crc, 0);
 10826  0033FC  0100               	movlb	0	; () banked
 10827  0033FE  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10828  003400  6F68               	movwf	(?_crc8+1)& (0+255),b
 10829  003402  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10830  003404  6F67               	movwf	?_crc8& (0+255),b
 10831  003406  0E00               	movlw	0
 10832  003408  6B69               	clrf	(?_crc8+2)& (0+255),b
 10833  00340A  EC65  F02B         	call	_crc8	;wreg free
 10834                           
 10835                           ; BSR set to: 0
 10836                           ;main.c: 1955: sendEscapedUartData(sequencyno, &crc);
 10837  00340E  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10838  003410  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10839  003412  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10840  003414  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10841  003416  5032               	movf	_sequencyno,w,c
 10842  003418  ECFA  F028         	call	_sendEscapedUartData
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;main.c: 1956: sequencyno++;
 10846  00341C  2A32               	incf	_sequencyno,f,c
 10847  00341E                     l15696:
 10848                           
 10849                           ; BSR set to: 0
 10850                           ;main.c: 1966: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10851  00341E  0E76               	movlw	low _wrkbuf
 10852  003420  0100               	movlb	0	; () banked
 10853  003422  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10854  003424  6ED9               	movwf	fsr2l,c
 10855  003426  6ADA               	clrf	fsr2h,c
 10856  003428  0E01               	movlw	high _wrkbuf
 10857  00342A  22DA               	addwfc	fsr2h,f,c
 10858  00342C  C07F  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;main.c: 1967: pos++;
 10862                           
 10863                           ; BSR set to: 0
 10864                           ;main.c: 1968: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10865  003430  D862               	call	PL22	;call to abstracted procedure
 10866  003432  C07E  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10867                           
 10868                           ; BSR set to: 0
 10869                           ;main.c: 1969: pos++;
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;main.c: 1970: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10873  003436  D85F               	call	PL22	;call to abstracted procedure
 10874  003438  C07D  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10875                           
 10876                           ; BSR set to: 0
 10877                           ;main.c: 1971: pos++;
 10878                           
 10879                           ; BSR set to: 0
 10880                           ;main.c: 1972: wrkbuf[ pos ] = id & 0xff;
 10881  00343C  D85C               	call	PL22	;call to abstracted procedure
 10882  00343E  C07C  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10883                           
 10884                           ; BSR set to: 0
 10885                           ;main.c: 1973: pos++;
 10886                           
 10887                           ; BSR set to: 0
 10888                           ;main.c: 1976: wrkbuf[ pos ] = dlc;
 10889  003442  D859               	call	PL22	;call to abstracted procedure
 10890  003444  C080  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10891                           
 10892                           ; BSR set to: 0
 10893                           ;main.c: 1977: pos++;
 10894  003448  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10895                           
 10896                           ; BSR set to: 0
 10897                           ;main.c: 1980: for (i = 0; i < dlc; i++) {
 10898  00344A  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10899  00344C  D00F               	goto	l15724
 10900  00344E                     l15718:
 10901                           
 10902                           ; BSR set to: 0
 10903                           ;main.c: 1981: wrkbuf[ pos ] = data[ i ];
 10904  00344E  517B               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10905  003450  0F72               	addlw	low receiveSendMultiEventCANAL@data
 10906  003452  6ED9               	movwf	fsr2l,c
 10907  003454  6ADA               	clrf	fsr2h,c
 10908  003456  0E76               	movlw	low _wrkbuf
 10909  003458  0100               	movlb	0	; () banked
 10910  00345A  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10911  00345C  6EE1               	movwf	fsr1l,c
 10912  00345E  6AE2               	clrf	fsr1h,c
 10913  003460  0E01               	movlw	high _wrkbuf
 10914  003462  22E2               	addwfc	fsr1h,f,c
 10915  003464  CFDF FFE7          	movff	indf2,indf1
 10916                           
 10917                           ; BSR set to: 1
 10918                           ;main.c: 1982: pos++;
 10919  003468  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10920                           
 10921                           ; BSR set to: 0
 10922  00346A  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10923  00346C                     l15724:
 10924                           
 10925                           ; BSR set to: 0
 10926  00346C  5180               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10927  00346E  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10928  003470  E3EE               	bnc	l15718
 10929                           
 10930                           ; BSR set to: 0
 10931                           ;main.c: 1983: }
 10932                           ;main.c: 1985: msgcount++;
 10933  003472  2B7A               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 10934                           
 10935                           ; BSR set to: 0
 10936                           ;main.c: 1987: } while ( ( msgcount < caps.maxCanalFrames ) &&
 10937                           ;main.c: 1988: ( msgcount < 5 ) &&
 10938                           ;main.c: 1989: getCANFrame( &id, &dlc, &data ) );
 10939  003474  0101               	movlb	1	; () banked
 10940  003476  51E3               	movf	(_caps+1)& (0+255),w,b
 10941  003478  0100               	movlb	0	; () banked
 10942  00347A  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10943  00347C  D009               	goto	l15734
 10944                           
 10945                           ; BSR set to: 0
 10946  00347E  0E05               	movlw	5
 10947  003480  617A               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10948  003482  D006               	goto	l15734
 10949                           
 10950                           ; BSR set to: 0
 10951  003484  0E80               	movlw	low receiveSendMultiEventCANAL@dlc
 10952  003486  D83F               	call	PL90	;call to abstracted procedure
 10953  003488  EC15  F025         	call	_getCANFrame
 10954  00348C  0900               	iorlw	0
 10955  00348E  E1C7               	bnz	l15696
 10956  003490                     l15734:
 10957                           
 10958                           ; BSR set to: 0
 10959                           ;main.c: 1994: sendEscapedUartData(0, &crc);
 10960  003490  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10961  003492  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10962  003494  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10963  003496  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10964  003498  0E00               	movlw	0
 10965  00349A  ECFA  F028         	call	_sendEscapedUartData
 10966                           
 10967                           ;main.c: 1995: sendEscapedUartData(pos, &crc);
 10968  00349E  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10969  0034A0  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10970  0034A2  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10971  0034A4  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10972  0034A6  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10973  0034A8  ECFA  F028         	call	_sendEscapedUartData
 10974                           
 10975                           ; BSR set to: 0
 10976                           ;main.c: 1998: for (i = 0; i < pos; i++) {
 10977  0034AC  6B7B               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10978  0034AE  D010               	goto	l15742
 10979  0034B0                     l15738:
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;main.c: 1999: sendEscapedUartData( wrkbuf[ i ], &crc);
 10983  0034B0  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10984  0034B2  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10985  0034B4  0E81               	movlw	low receiveSendMultiEventCANAL@crc
 10986  0034B6  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10987  0034B8  0E76               	movlw	low _wrkbuf
 10988  0034BA  0100               	movlb	0	; () banked
 10989  0034BC  257B               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10990  0034BE  6ED9               	movwf	fsr2l,c
 10991  0034C0  6ADA               	clrf	fsr2h,c
 10992  0034C2  0101               	movlb	1	; () banked
 10993  0034C4  0E01               	movlw	high _wrkbuf
 10994  0034C6  22DA               	addwfc	fsr2h,f,c
 10995  0034C8  50DF               	movf	indf2,w,c
 10996  0034CA  ECFA  F028         	call	_sendEscapedUartData
 10997                           
 10998                           ; BSR set to: 0
 10999  0034CE  2B7B               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 11000  0034D0                     l15742:
 11001                           
 11002                           ; BSR set to: 0
 11003  0034D0  5182               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11004  0034D2  5D7B               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 11005  0034D4  E3ED               	bnc	l15738
 11006                           
 11007                           ; BSR set to: 0
 11008                           ;main.c: 2000: }
 11009                           ;main.c: 2003: sendEscapedUartData(crc, (0));
 11010  0034D6  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 11011  0034D8  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 11012  0034DA  5181               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 11013  0034DC  ECFA  F028         	call	_sendEscapedUartData
 11014  0034E0                     l989:
 11015  0034E0  A2AC               	btfss	4012,1,c	;volatile
 11016  0034E2  D7FE               	goto	l989
 11017                           
 11018                           ;main.c: 2007: WriteUSART(0x10);
 11019  0034E4  0E10               	movlw	16
 11020  0034E6  EC5B  F02C         	call	_WriteUSART
 11021  0034EA                     l992:
 11022  0034EA  A2AC               	btfss	4012,1,c	;volatile
 11023  0034EC  D7FE               	goto	l992
 11024                           
 11025                           ;main.c: 2009: WriteUSART(0x03);
 11026  0034EE  0E03               	movlw	3
 11027  0034F0  EC5B  F02C         	call	_WriteUSART
 11028  0034F4                     l995:
 11029  0034F4  0012               	return	
 11030  0034F6                     __end_of_receiveSendMultiEventCANAL:
 11031                           	opt stack 0
 11032  0034F6                     PL22:
 11033                           	opt stack 23
 11034  0034F6  2B82               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 11035  0034F8  0E76               	movlw	low _wrkbuf
 11036  0034FA  2582               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 11037  0034FC  6ED9               	movwf	fsr2l,c
 11038  0034FE  6ADA               	clrf	fsr2h,c
 11039  003500  0E01               	movlw	high _wrkbuf
 11040  003502  22DA               	addwfc	fsr2h,f,c
 11041  003504  0012               	return	
 11042  003506                     __end_ofPL22:
 11043                           	opt stack 0
 11044  003506                     PL90:
 11045                           	opt stack 23
 11046  003506  6F6E               	movwf	?_getCANFrame& (0+255),b
 11047  003508  0E00               	movlw	high receiveSendMultiEventCANAL@data
 11048  00350A  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 11049  00350C  0E72               	movlw	low receiveSendMultiEventCANAL@data
 11050  00350E  6F6F               	movwf	(?_getCANFrame+1)& (0+255),b
 11051  003510  0E7C               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 11052  003512  0012               	return	
 11053  003514                     __end_ofPL90:
 11054                           	opt stack 0
 11055                           tblptru	equ	0xFF8
 11056                           tblptrh	equ	0xFF7
 11057                           tblptrl	equ	0xFF6
 11058                           tablat	equ	0xFF5
 11059                           prodh	equ	0xFF4
 11060                           prodl	equ	0xFF3
 11061                           intcon	equ	0xFF2
 11062                           indf0	equ	0xFEF
 11063                           postinc0	equ	0xFEE
 11064                           fsr0h	equ	0xFEA
 11065                           fsr0l	equ	0xFE9
 11066                           wreg	equ	0xFE8
 11067                           indf1	equ	0xFE7
 11068                           postinc1	equ	0xFE6
 11069                           postdec1	equ	0xFE5
 11070                           fsr1h	equ	0xFE2
 11071                           fsr1l	equ	0xFE1
 11072                           indf2	equ	0xFDF
 11073                           postinc2	equ	0xFDE
 11074                           postdec2	equ	0xFDD
 11075                           plusw2	equ	0xFDB
 11076                           fsr2h	equ	0xFDA
 11077                           fsr2l	equ	0xFD9
 11078                           status	equ	0xFD8
 11079                           
 11080 ;; *************** function _sendEscapedUartData *****************
 11081 ;; Defined at:
 11082 ;;		line 1575 in file "main.c"
 11083 ;; Parameters:    Size  Location     Type
 11084 ;;  c               1    wreg     unsigned char 
 11085 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 11086 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11087 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11088 ;;		 -> NULL(0), 
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;  c               1   14[BANK0 ] unsigned char 
 11091 ;; Return value:  Size  Location     Type
 11092 ;;		None               void
 11093 ;; Registers used:
 11094 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11095 ;; Tracked objects:
 11096 ;;		On entry : E/1
 11097 ;;		On exit  : F/0
 11098 ;;		Unchanged: 0/0
 11099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11100 ;;      Params:         0       2       0       0       0       0       0
 11101 ;;      Locals:         0       1       0       0       0       0       0
 11102 ;;      Temps:          0       0       0       0       0       0       0
 11103 ;;      Totals:         0       3       0       0       0       0       0
 11104 ;;Total ram usage:        3 bytes
 11105 ;; Hardware stack levels used:    1
 11106 ;; Hardware stack levels required when called:    5
 11107 ;; This function calls:
 11108 ;;		_WriteUSART
 11109 ;;		_crc8
 11110 ;; This function is called by:
 11111 ;;		_sendVSCPDriverErrorFrame
 11112 ;;		_sendVSCPDriverAck
 11113 ;;		_sendVSCPDriverNack
 11114 ;;		_sendVSCPDriverCommandReply
 11115 ;;		_receiveSendEventCANAL
 11116 ;;		_receiveSendMultiEventCANAL
 11117 ;;		_sendVSCPModeCapabilities
 11118 ;; This function uses a non-reentrant model
 11119 ;;
 11120                           
 11121                           	psect	text19
 11122  0051F4                     __ptext19:
 11123                           	opt stack 0
 11124  0051F4                     _sendEscapedUartData:
 11125                           	opt stack 23
 11126                           
 11127                           ;incstack = 0
 11128                           ;incstack = 0
 11129                           ;sendEscapedUartData@c stored from wreg
 11130  0051F4  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 11131                           
 11132                           ;main.c: 1576: if (0x10 == c) {
 11133  0051F8  0100               	movlb	0	; () banked
 11134  0051FA  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11135  0051FC  0A10               	xorlw	16
 11136  0051FE  E117               	bnz	l786
 11137  005200                     l778:
 11138  005200  A2AC               	btfss	4012,1,c	;volatile
 11139  005202  D7FE               	goto	l778
 11140                           
 11141                           ;main.c: 1579: WriteUSART(0x10);
 11142  005204  0E10               	movlw	16
 11143  005206  EC5B  F02C         	call	_WriteUSART
 11144  00520A                     l781:
 11145  00520A  A2AC               	btfss	4012,1,c	;volatile
 11146  00520C  D7FE               	goto	l781
 11147                           
 11148                           ;main.c: 1583: WriteUSART(0x10);
 11149  00520E  0E10               	movlw	16
 11150  005210  EC5B  F02C         	call	_WriteUSART
 11151                           
 11152                           ;main.c: 1584: if ((0) != pcrc) crc8(pcrc, 0x10);
 11153  005214  0100               	movlb	0	; () banked
 11154  005216  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11155  005218  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11156  00521A  E01B               	bz	l790
 11157                           
 11158                           ; BSR set to: 0
 11159  00521C  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11160  005220  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11161  005224  0E10               	movlw	16
 11162  005226  6F69               	movwf	(?_crc8+2)& (0+255),b
 11163  005228  EC65  F02B         	call	_crc8	;wreg free
 11164  00522C  D012               	goto	l790
 11165  00522E                     l786:
 11166  00522E  A2AC               	btfss	4012,1,c	;volatile
 11167  005230  D7FE               	goto	l786
 11168                           
 11169                           ;main.c: 1590: WriteUSART(c);
 11170  005232  0100               	movlb	0	; () banked
 11171  005234  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 11172  005236  EC5B  F02C         	call	_WriteUSART
 11173                           
 11174                           ;main.c: 1591: if ((0) != pcrc) crc8(pcrc, c);
 11175  00523A  0100               	movlb	0	; () banked
 11176  00523C  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11177  00523E  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11178  005240  E008               	bz	l790
 11179                           
 11180                           ; BSR set to: 0
 11181  005242  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 11182  005246  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11183  00524A  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 11184  00524E  EC65  F02B         	call	_crc8	;wreg free
 11185  005252                     l790:
 11186                           
 11187                           ; BSR set to: 0
 11188  005252  0012               	return	
 11189  005254                     __end_of_sendEscapedUartData:
 11190                           	opt stack 0
 11191                           tblptru	equ	0xFF8
 11192                           tblptrh	equ	0xFF7
 11193                           tblptrl	equ	0xFF6
 11194                           tablat	equ	0xFF5
 11195                           prodh	equ	0xFF4
 11196                           prodl	equ	0xFF3
 11197                           intcon	equ	0xFF2
 11198                           indf0	equ	0xFEF
 11199                           postinc0	equ	0xFEE
 11200                           fsr0h	equ	0xFEA
 11201                           fsr0l	equ	0xFE9
 11202                           wreg	equ	0xFE8
 11203                           indf1	equ	0xFE7
 11204                           postinc1	equ	0xFE6
 11205                           postdec1	equ	0xFE5
 11206                           fsr1h	equ	0xFE2
 11207                           fsr1l	equ	0xFE1
 11208                           indf2	equ	0xFDF
 11209                           postinc2	equ	0xFDE
 11210                           postdec2	equ	0xFDD
 11211                           plusw2	equ	0xFDB
 11212                           fsr2h	equ	0xFDA
 11213                           fsr2l	equ	0xFD9
 11214                           status	equ	0xFD8
 11215                           
 11216 ;; *************** function _crc8 *****************
 11217 ;; Defined at:
 11218 ;;		line 47 in file "crc8.c"
 11219 ;; Parameters:    Size  Location     Type
 11220 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 11221 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11222 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11223 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11224 ;;  m               1    9[BANK0 ] unsigned char 
 11225 ;; Auto vars:     Size  Location     Type
 11226 ;;		None
 11227 ;; Return value:  Size  Location     Type
 11228 ;;		None               void
 11229 ;; Registers used:
 11230 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11231 ;; Tracked objects:
 11232 ;;		On entry : F/0
 11233 ;;		On exit  : F/0
 11234 ;;		Unchanged: 0/0
 11235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11236 ;;      Params:         0       3       0       0       0       0       0
 11237 ;;      Locals:         0       0       0       0       0       0       0
 11238 ;;      Temps:          0       2       0       0       0       0       0
 11239 ;;      Totals:         0       5       0       0       0       0       0
 11240 ;;Total ram usage:        5 bytes
 11241 ;; Hardware stack levels used:    1
 11242 ;; Hardware stack levels required when called:    4
 11243 ;; This function calls:
 11244 ;;		_init_crc8
 11245 ;; This function is called by:
 11246 ;;		_sendEscapedUartData
 11247 ;;		_sendVSCPDriverErrorFrame
 11248 ;;		_sendVSCPDriverAck
 11249 ;;		_sendVSCPDriverNack
 11250 ;;		_sendVSCPDriverCommandReply
 11251 ;;		_receiveSendEventCANAL
 11252 ;;		_receiveSendMultiEventCANAL
 11253 ;;		_sendVSCPModeCapabilities
 11254 ;;		_calcCRC
 11255 ;; This function uses a non-reentrant model
 11256 ;;
 11257                           
 11258                           	psect	text20
 11259  0056CA                     __ptext20:
 11260                           	opt stack 0
 11261  0056CA                     _crc8:
 11262                           	opt stack 24
 11263                           
 11264                           ; BSR set to: 0
 11265                           ;crc8.c: 48: if ( !made_table ) {
 11266                           
 11267                           ; BSR set to: 0
 11268                           ;incstack = 0
 11269                           ;incstack = 0
 11270  0056CA  0101               	movlb	1	; () banked
 11271  0056CC  5125               	movf	(_made_table+1)& (0+255),w,b
 11272  0056CE  1124               	iorwf	_made_table& (0+255),w,b
 11273  0056D0  B4D8               	btfsc	status,2,c
 11274                           
 11275                           ; BSR set to: 1
 11276                           ;crc8.c: 49: init_crc8();
 11277  0056D2  ECFC  F027         	call	_init_crc8	;wreg free
 11278                           
 11279                           ; BSR set to: 1
 11280                           ;crc8.c: 50: }
 11281                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11282  0056D6  C067  FFD9         	movff	crc8@crc,fsr2l
 11283  0056DA  C068  FFDA         	movff	crc8@crc+1,fsr2h
 11284  0056DE  50DF               	movf	indf2,w,c
 11285  0056E0  0100               	movlb	0	; () banked
 11286  0056E2  1969               	xorwf	crc8@m& (0+255),w,b
 11287  0056E4  6F6A               	movwf	??_crc8& (0+255),b
 11288  0056E6  6B6B               	clrf	(??_crc8+1)& (0+255),b
 11289  0056E8  0E00               	movlw	low _crc8_table
 11290  0056EA  256A               	addwf	??_crc8& (0+255),w,b
 11291  0056EC  6ED9               	movwf	fsr2l,c
 11292  0056EE  0E03               	movlw	high _crc8_table
 11293  0056F0  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 11294  0056F2  6EDA               	movwf	fsr2h,c
 11295  0056F4  C067  FFE1         	movff	crc8@crc,fsr1l
 11296  0056F8  C068  FFE2         	movff	crc8@crc+1,fsr1h
 11297  0056FC  CFDF FFE7          	movff	indf2,indf1
 11298                           
 11299                           ; BSR set to: 0
 11300  005700  0012               	return	
 11301  005702                     __end_of_crc8:
 11302                           	opt stack 0
 11303                           tblptru	equ	0xFF8
 11304                           tblptrh	equ	0xFF7
 11305                           tblptrl	equ	0xFF6
 11306                           tablat	equ	0xFF5
 11307                           prodh	equ	0xFF4
 11308                           prodl	equ	0xFF3
 11309                           intcon	equ	0xFF2
 11310                           indf0	equ	0xFEF
 11311                           postinc0	equ	0xFEE
 11312                           fsr0h	equ	0xFEA
 11313                           fsr0l	equ	0xFE9
 11314                           wreg	equ	0xFE8
 11315                           indf1	equ	0xFE7
 11316                           postinc1	equ	0xFE6
 11317                           postdec1	equ	0xFE5
 11318                           fsr1h	equ	0xFE2
 11319                           fsr1l	equ	0xFE1
 11320                           indf2	equ	0xFDF
 11321                           postinc2	equ	0xFDE
 11322                           postdec2	equ	0xFDD
 11323                           plusw2	equ	0xFDB
 11324                           fsr2h	equ	0xFDA
 11325                           fsr2l	equ	0xFD9
 11326                           status	equ	0xFD8
 11327                           
 11328 ;; *************** function _init_crc8 *****************
 11329 ;; Defined at:
 11330 ;;		line 25 in file "crc8.c"
 11331 ;; Parameters:    Size  Location     Type
 11332 ;;		None
 11333 ;; Auto vars:     Size  Location     Type
 11334 ;;  i               2    5[BANK0 ] int 
 11335 ;;  j               2    2[BANK0 ] int 
 11336 ;;  crc             1    4[BANK0 ] unsigned char 
 11337 ;; Return value:  Size  Location     Type
 11338 ;;		None               void
 11339 ;; Registers used:
 11340 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11341 ;; Tracked objects:
 11342 ;;		On entry : E/0
 11343 ;;		On exit  : F/1
 11344 ;;		Unchanged: 0/0
 11345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11346 ;;      Params:         0       0       0       0       0       0       0
 11347 ;;      Locals:         0       7       0       0       0       0       0
 11348 ;;      Temps:          0       0       0       0       0       0       0
 11349 ;;      Totals:         0       7       0       0       0       0       0
 11350 ;;Total ram usage:        7 bytes
 11351 ;; Hardware stack levels used:    1
 11352 ;; Hardware stack levels required when called:    3
 11353 ;; This function calls:
 11354 ;;		Nothing
 11355 ;; This function is called by:
 11356 ;;		_main
 11357 ;;		_crc8
 11358 ;; This function uses a non-reentrant model
 11359 ;;
 11360                           
 11361                           	psect	text21
 11362  004FF8                     __ptext21:
 11363                           	opt stack 0
 11364  004FF8                     _init_crc8:
 11365                           	opt stack 24
 11366                           
 11367                           ;crc8.c: 26: int i,j;
 11368                           ;crc8.c: 27: unsigned char crc;
 11369                           ;crc8.c: 29: if (!made_table) {
 11370                           
 11371                           ; BSR set to: 0
 11372                           ;incstack = 0
 11373                           ;incstack = 0
 11374  004FF8  0101               	movlb	1	; () banked
 11375  004FFA  5125               	movf	(_made_table+1)& (0+255),w,b
 11376  004FFC  1124               	iorwf	_made_table& (0+255),w,b
 11377  004FFE  E133               	bnz	l1575
 11378                           
 11379                           ; BSR set to: 1
 11380                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11381  005000  0100               	movlb	0	; () banked
 11382  005002  6B65               	clrf	init_crc8@i& (0+255),b
 11383  005004  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 11384  005006                     l1567:
 11385                           
 11386                           ; BSR set to: 0
 11387                           ;crc8.c: 31: crc = i;
 11388  005006  C065  F064         	movff	init_crc8@i,init_crc8@crc
 11389                           
 11390                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11391  00500A  6B62               	clrf	init_crc8@j& (0+255),b
 11392  00500C  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 11393  00500E                     l1569:
 11394                           
 11395                           ; BSR set to: 0
 11396                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11397  00500E  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 11398  005010  D003               	goto	l13468
 11399                           
 11400                           ; BSR set to: 0
 11401  005012  6B60               	clrf	_init_crc8$2024& (0+255),b
 11402  005014  6B61               	clrf	(_init_crc8$2024+1)& (0+255),b
 11403  005016  D003               	goto	l13470
 11404  005018                     l13468:
 11405                           
 11406                           ; BSR set to: 0
 11407  005018  6B61               	clrf	(_init_crc8$2024+1)& (0+255),b
 11408  00501A  0E07               	movlw	7
 11409  00501C  6F60               	movwf	_init_crc8$2024& (0+255),b
 11410  00501E                     l13470:
 11411                           
 11412                           ; BSR set to: 0
 11413  00501E  5164               	movf	init_crc8@crc& (0+255),w,b
 11414  005020  2564               	addwf	init_crc8@crc& (0+255),w,b
 11415  005022  1960               	xorwf	_init_crc8$2024& (0+255),w,b
 11416  005024  6F64               	movwf	init_crc8@crc& (0+255),b
 11417                           
 11418                           ; BSR set to: 0
 11419  005026  4B62               	infsnz	init_crc8@j& (0+255),f,b
 11420  005028  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 11421                           
 11422                           ; BSR set to: 0
 11423  00502A  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 11424  00502C  0A80               	xorlw	128
 11425  00502E  0F80               	addlw	-128
 11426  005030  0E08               	movlw	8
 11427  005032  B4D8               	btfsc	status,2,c
 11428  005034  5D62               	subwf	init_crc8@j& (0+255),w,b
 11429  005036  E3EB               	bnc	l1569
 11430                           
 11431                           ; BSR set to: 0
 11432                           ;crc8.c: 34: }
 11433                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11434  005038  0E00               	movlw	low _crc8_table
 11435  00503A  0100               	movlb	0	; () banked
 11436  00503C  2565               	addwf	init_crc8@i& (0+255),w,b
 11437  00503E  6ED9               	movwf	fsr2l,c
 11438  005040  0E03               	movlw	high _crc8_table
 11439  005042  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 11440  005044  6EDA               	movwf	fsr2h,c
 11441  005046  C064  FFDF         	movff	init_crc8@crc,indf2
 11442                           
 11443                           ; BSR set to: 0
 11444  00504A  4B65               	infsnz	init_crc8@i& (0+255),f,b
 11445  00504C  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 11446                           
 11447                           ; BSR set to: 0
 11448  00504E  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 11449  005050  0A80               	xorlw	128
 11450  005052  0F7F               	addlw	-129
 11451  005054  0E00               	movlw	0
 11452  005056  B4D8               	btfsc	status,2,c
 11453  005058  5D65               	subwf	init_crc8@i& (0+255),w,b
 11454  00505A  E3D5               	bnc	l1567
 11455                           
 11456                           ; BSR set to: 0
 11457                           ;crc8.c: 37: }
 11458                           ;crc8.c: 38: made_table=1;
 11459  00505C  0E00               	movlw	0
 11460  00505E  0101               	movlb	1	; () banked
 11461  005060  6F25               	movwf	(_made_table+1)& (0+255),b
 11462  005062  0E01               	movlw	1
 11463  005064  6F24               	movwf	_made_table& (0+255),b
 11464  005066                     l1575:
 11465                           
 11466                           ; BSR set to: 1
 11467  005066  0012               	return	
 11468  005068                     __end_of_init_crc8:
 11469                           	opt stack 0
 11470                           tblptru	equ	0xFF8
 11471                           tblptrh	equ	0xFF7
 11472                           tblptrl	equ	0xFF6
 11473                           tablat	equ	0xFF5
 11474                           prodh	equ	0xFF4
 11475                           prodl	equ	0xFF3
 11476                           intcon	equ	0xFF2
 11477                           indf0	equ	0xFEF
 11478                           postinc0	equ	0xFEE
 11479                           fsr0h	equ	0xFEA
 11480                           fsr0l	equ	0xFE9
 11481                           wreg	equ	0xFE8
 11482                           indf1	equ	0xFE7
 11483                           postinc1	equ	0xFE6
 11484                           postdec1	equ	0xFE5
 11485                           fsr1h	equ	0xFE2
 11486                           fsr1l	equ	0xFE1
 11487                           indf2	equ	0xFDF
 11488                           postinc2	equ	0xFDE
 11489                           postdec2	equ	0xFDD
 11490                           plusw2	equ	0xFDB
 11491                           fsr2h	equ	0xFDA
 11492                           fsr2l	equ	0xFD9
 11493                           status	equ	0xFD8
 11494                           
 11495 ;; *************** function _doModeVerbose *****************
 11496 ;; Defined at:
 11497 ;;		line 517 in file "main.c"
 11498 ;; Parameters:    Size  Location     Type
 11499 ;;		None
 11500 ;; Auto vars:     Size  Location     Type
 11501 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11502 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11503 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11504 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11505 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11506 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11507 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11508 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11509 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11510 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11511 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11512 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11513 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11514 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11515 ;;  id              4   35[BANK2 ] unsigned long 
 11516 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11517 ;;		 -> NULL(0), cmdbuf(80), 
 11518 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11519 ;;  maskno          1   40[BANK2 ] unsigned char 
 11520 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 11521 ;;  mask_type       1   18[BANK2 ] unsigned char 
 11522 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 11523 ;;  id              4    0[BANK2 ] unsigned long 
 11524 ;;  p               2   57[BANK2 ] PTR unsigned char 
 11525 ;;		 -> NULL(0), cmdbuf(80), 
 11526 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11527 ;;  filterno        1   39[BANK2 ] unsigned char 
 11528 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 11529 ;;  filter_type     1   15[BANK2 ] unsigned char 
 11530 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 11531 ;;  nodeid          1   47[BANK2 ] unsigned char 
 11532 ;;  p               2   52[BANK2 ] PTR unsigned char 
 11533 ;;		 -> NULL(0), cmdbuf(80), 
 11534 ;;  value           1   42[BANK2 ] unsigned char 
 11535 ;;  reg             1   34[BANK2 ] unsigned char 
 11536 ;;  page            1   33[BANK2 ] unsigned char 
 11537 ;;  nodeid          1   13[BANK2 ] unsigned char 
 11538 ;;  p               2   50[BANK2 ] PTR unsigned char 
 11539 ;;		 -> NULL(0), cmdbuf(80), 
 11540 ;;  value           1   49[BANK2 ] unsigned char 
 11541 ;;  i               1   48[BANK2 ] unsigned char 
 11542 ;;  reg             1   46[BANK2 ] unsigned char 
 11543 ;;  page            1   45[BANK2 ] unsigned char 
 11544 ;;  count           1   43[BANK2 ] unsigned char 
 11545 ;;  rv              1   32[BANK2 ] enum E15660
 11546 ;;  nodeid          1   12[BANK2 ] unsigned char 
 11547 ;;  p               2   55[BANK2 ] PTR unsigned char 
 11548 ;;		 -> NULL(0), cmdbuf(80), 
 11549 ;;  ifmode          1   54[BANK2 ] enum E16362
 11550 ;;  c               1   44[BANK2 ] unsigned char 
 11551 ;;  i               1   41[BANK2 ] unsigned char 
 11552 ;; Return value:  Size  Location     Type
 11553 ;;		None               void
 11554 ;; Registers used:
 11555 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11556 ;; Tracked objects:
 11557 ;;		On entry : F/0
 11558 ;;		On exit  : 0/0
 11559 ;;		Unchanged: 0/0
 11560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11561 ;;      Params:         0       0       0       0       0       0       0
 11562 ;;      Locals:         0       0       0      61       0       0       0
 11563 ;;      Temps:          0      20       0       0       0       0       0
 11564 ;;      Totals:         0      20       0      61       0       0       0
 11565 ;;Total ram usage:       81 bytes
 11566 ;; Hardware stack levels used:    1
 11567 ;; Hardware stack levels required when called:   10
 11568 ;; This function calls:
 11569 ;;		_putsUSART
 11570 ;;		_printFirmwareVersion
 11571 ;;		_fifo_read
 11572 ;;		_Busy_eep
 11573 ;;		_Write_b_eep
 11574 ;;		_receivePrintEventVerbose
 11575 ;;		_stristr
 11576 ;;		_ECANSetOperationMode
 11577 ;;		_strtok
 11578 ;;		_atoi
 11579 ;;		_memset
 11580 ;;		_sendVSCPFrame
 11581 ;;		_printStatistics
 11582 ;;		_printErrors
 11583 ;;		_printHelp
 11584 ;;		_findNodes
 11585 ;;		_strcpy
 11586 ;;		_strchr
 11587 ;;		_readRegisterExtended
 11588 ;;		_sprintf
 11589 ;;		_WriteUSART
 11590 ;;		_printBinary
 11591 ;;		_writeRegisterExtended
 11592 ;;		_printNodeFirmwareVersion
 11593 ;;		_printGUID
 11594 ;;		_printMDF
 11595 ;;		_setFilter
 11596 ;;		__CANIDToRegs
 11597 ;; This function is called by:
 11598 ;;		_main
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602                           	psect	text22
 11603  0002FE                     __ptext22:
 11604                           	opt stack 0
 11605  0002FE                     _doModeVerbose:
 11606                           	opt stack 20
 11607                           
 11608                           ; BSR set to: 0
 11609                           ;main.c: 518: uint8_t c;
 11610                           ;main.c: 519: uint8_t i;
 11611                           ;main.c: 522: if (!bSilent) {
 11612                           
 11613                           ; BSR set to: 1
 11614                           ;incstack = 0
 11615                           ;incstack = 0
 11616  0002FE  662E               	tstfsz	_bSilent,c
 11617  000300  D002               	goto	l13580
 11618                           
 11619                           ; BSR set to: 0
 11620                           ;main.c: 523: receivePrintEventVerbose();
 11621  000302  EC79  F012         	call	_receivePrintEventVerbose	;wreg free
 11622  000306                     l13580:
 11623                           
 11624                           ;main.c: 524: }
 11625                           ;main.c: 527: (INTCONbits.GIE = 0);
 11626  000306  9EF2               	bcf	intcon,7,c	;volatile
 11627                           
 11628                           ;main.c: 529: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11629  000308  0E01               	movlw	high _serialInputFifo
 11630  00030A  0100               	movlb	0	; () banked
 11631  00030C  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 11632  00030E  0ED6               	movlw	low _serialInputFifo
 11633  000310  6F60               	movwf	?_fifo_read& (0+255),b
 11634  000312  0E02               	movlw	high doModeVerbose@c
 11635  000314  6F63               	movwf	(?_fifo_read+3)& (0+255),b
 11636  000316  0EAC               	movlw	low doModeVerbose@c
 11637  000318  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 11638  00031A  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 11639  00031C  0E01               	movlw	1
 11640  00031E  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 11641  000320  ECD5  F020         	call	_fifo_read	;wreg free
 11642  000324  0560               	decf	?_fifo_read& (0+255),w,b
 11643  000326  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 11644  000328  E002 EFF8  F00A    	bnz	l14202
 11645                           
 11646                           ; BSR set to: 0
 11647                           ;main.c: 532: (INTCONbits.GIE = 1);
 11648  00032E  8EF2               	bsf	intcon,7,c	;volatile
 11649                           
 11650                           ; BSR set to: 0
 11651                           ;main.c: 535: cmdbuf[ pos++ ] = c;
 11652  000330  EC89  F016         	call	PL24	;call to abstracted procedure
 11653  000334  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 11654                           
 11655                           ; BSR set to: 2
 11656  000338  2BE7               	incf	_pos& (0+255),f,b
 11657                           
 11658                           ; BSR set to: 0
 11659                           ;main.c: 536: if (pos >= sizeof( cmdbuf ) ) {
 11660  00033A  0E4F               	movlw	79
 11661  00033C  65E7               	cpfsgt	_pos& (0+255),b
 11662  00033E  D001               	goto	l13594
 11663                           
 11664                           ; BSR set to: 0
 11665                           ;main.c: 539: pos = 0;
 11666  000340  6BE7               	clrf	_pos& (0+255),b
 11667  000342                     l13594:
 11668                           
 11669                           ; BSR set to: 0
 11670                           ;main.c: 540: }
 11671                           ;main.c: 543: if (0x0d == c) {
 11672  000342  0102               	movlb	2	; () banked
 11673  000344  51AC               	movf	doModeVerbose@c& (0+255),w,b
 11674  000346  0A0D               	xorlw	13
 11675  000348  E002 EFF8  F00A    	bnz	l14202
 11676                           
 11677                           ; BSR set to: 2
 11678                           ;main.c: 545: cmdbuf[ pos ] = 0;
 11679  00034E  EC89  F016         	call	PL24	;call to abstracted procedure
 11680  000352  6ADF               	clrf	indf2,c
 11681                           
 11682                           ; BSR set to: 1
 11683                           ;main.c: 548: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11684  000354  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11685  000356  0E26               	movlw	low _cmdbuf
 11686  000358  6F6D               	movwf	?_stristr& (0+255),b
 11687  00035A  0E7F               	movlw	high STR_6
 11688  00035C  6F70               	movwf	(?_stristr+3)& (0+255),b
 11689  00035E  0ED0               	movlw	low STR_6
 11690  000360  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11691  000362  EC0F  F027         	call	_stristr	;wreg free
 11692  000366  0E26               	movlw	low _cmdbuf
 11693  000368  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11694  00036A  0E01               	movlw	high _cmdbuf
 11695  00036C  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11696  00036E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11697  000370  E102               	bnz	u18095
 11698  000372  516D               	movf	?_stristr& (0+255),w,b
 11699  000374  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11700  000376                     u18095:
 11701  000376  E112               	bnz	l13606
 11702                           
 11703                           ; BSR set to: 0
 11704                           ;main.c: 549: putsUSART((char *) "Will enter bootloader now...\r\n");
 11705  000378  0E7A               	movlw	high STR_7
 11706  00037A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11707  00037C  0EED               	movlw	low STR_7
 11708  00037E  6F61               	movwf	?_putsUSART& (0+255),b
 11709  000380  EC84  F029         	call	_putsUSART	;wreg free
 11710                           
 11711                           ;main.c: 550: (Busy_eep(), Write_b_eep(0x00,0xFF));
 11712  000384  EC84  F02C         	call	_Busy_eep	;wreg free
 11713  000388  0100               	movlb	0	; () banked
 11714  00038A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 11715  00038C  6B60               	clrf	?_Write_b_eep& (0+255),b
 11716  00038E  0EFF               	movlw	255
 11717  000390  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 11718  000392  EC9D  F02B         	call	_Write_b_eep	;wreg free
 11719  000396  00FF               	reset		;# 
 11720                           
 11721                           ;main.c: 552: }
 11722  000398  EFEB  F00A         	goto	l14198
 11723  00039C                     l13606:
 11724                           
 11725                           ; BSR set to: 0
 11726                           ;main.c: 554: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11727  00039C  0E01               	movlw	high _cmdbuf
 11728  00039E  0100               	movlb	0	; () banked
 11729  0003A0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11730  0003A2  0E26               	movlw	low _cmdbuf
 11731  0003A4  6F6D               	movwf	?_stristr& (0+255),b
 11732  0003A6  0E7F               	movlw	high STR_8
 11733  0003A8  6F70               	movwf	(?_stristr+3)& (0+255),b
 11734  0003AA  0EB7               	movlw	low STR_8
 11735  0003AC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11736  0003AE  EC0F  F027         	call	_stristr	;wreg free
 11737  0003B2  0E26               	movlw	low _cmdbuf
 11738  0003B4  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11739  0003B6  0E01               	movlw	high _cmdbuf
 11740  0003B8  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11741  0003BA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11742  0003BC  E102               	bnz	u18105
 11743  0003BE  516D               	movf	?_stristr& (0+255),w,b
 11744  0003C0  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11745  0003C2                     u18105:
 11746  0003C2  E10C               	bnz	l13614
 11747                           
 11748                           ; BSR set to: 0
 11749                           ;main.c: 555: bSilent = 0;
 11750  0003C4  6A2E               	clrf	_bSilent,c
 11751                           
 11752                           ; BSR set to: 0
 11753                           ;main.c: 556: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11754  0003C6  0E00               	movlw	0
 11755  0003C8  EC43  F02C         	call	_ECANSetOperationMode
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;main.c: 557: putsUSART((char *) "+OK\r\n");
 11759  0003CC  0E7F               	movlw	high STR_9
 11760  0003CE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11761  0003D0  0E80               	movlw	low STR_9
 11762  0003D2  6F61               	movwf	?_putsUSART& (0+255),b
 11763  0003D4  EC84  F029         	call	_putsUSART	;wreg free
 11764                           
 11765                           ;main.c: 558: }
 11766  0003D8  EFEB  F00A         	goto	l14198
 11767  0003DC                     l13614:
 11768                           
 11769                           ; BSR set to: 0
 11770                           ;main.c: 560: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11771  0003DC  0E01               	movlw	high _cmdbuf
 11772  0003DE  0100               	movlb	0	; () banked
 11773  0003E0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11774  0003E2  0E26               	movlw	low _cmdbuf
 11775  0003E4  6F6D               	movwf	?_stristr& (0+255),b
 11776  0003E6  0E7F               	movlw	high STR_10
 11777  0003E8  6F70               	movwf	(?_stristr+3)& (0+255),b
 11778  0003EA  0E5E               	movlw	low STR_10
 11779  0003EC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11780  0003EE  EC0F  F027         	call	_stristr	;wreg free
 11781  0003F2  0E26               	movlw	low _cmdbuf
 11782  0003F4  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11783  0003F6  0E01               	movlw	high _cmdbuf
 11784  0003F8  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11785  0003FA  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11786  0003FC  E102               	bnz	u18115
 11787  0003FE  516D               	movf	?_stristr& (0+255),w,b
 11788  000400  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11789  000402                     u18115:
 11790  000402  E10D               	bnz	l13622
 11791                           
 11792                           ; BSR set to: 0
 11793                           ;main.c: 561: bSilent = 1;
 11794  000404  0E01               	movlw	1
 11795  000406  6E2E               	movwf	_bSilent,c
 11796                           
 11797                           ; BSR set to: 0
 11798                           ;main.c: 562: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11799  000408  0E00               	movlw	0
 11800  00040A  EC43  F02C         	call	_ECANSetOperationMode
 11801                           
 11802                           ; BSR set to: 0
 11803                           ;main.c: 563: putsUSART((char *) "+OK\r\n");
 11804  00040E  0E7F               	movlw	high STR_9
 11805  000410  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11806  000412  0E80               	movlw	low STR_9
 11807  000414  6F61               	movwf	?_putsUSART& (0+255),b
 11808  000416  EC84  F029         	call	_putsUSART	;wreg free
 11809                           
 11810                           ;main.c: 564: }
 11811  00041A  EFEB  F00A         	goto	l14198
 11812  00041E                     l13622:
 11813                           
 11814                           ; BSR set to: 0
 11815                           ;main.c: 566: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11816  00041E  0E01               	movlw	high _cmdbuf
 11817  000420  0100               	movlb	0	; () banked
 11818  000422  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11819  000424  0E26               	movlw	low _cmdbuf
 11820  000426  6F6D               	movwf	?_stristr& (0+255),b
 11821  000428  0E7F               	movlw	high STR_12
 11822  00042A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11823  00042C  0E92               	movlw	low STR_12
 11824  00042E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11825  000430  EC0F  F027         	call	_stristr	;wreg free
 11826  000434  0E26               	movlw	low _cmdbuf
 11827  000436  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11828  000438  0E01               	movlw	high _cmdbuf
 11829  00043A  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11830  00043C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11831  00043E  E102               	bnz	u18125
 11832  000440  516D               	movf	?_stristr& (0+255),w,b
 11833  000442  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11834  000444                     u18125:
 11835  000444  E10D               	bnz	l13630
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;main.c: 567: bSilent = 1;
 11839  000446  0E01               	movlw	1
 11840  000448  6E2E               	movwf	_bSilent,c
 11841                           
 11842                           ; BSR set to: 0
 11843                           ;main.c: 568: ECANSetOperationMode(0x20);
 11844  00044A  0E20               	movlw	32
 11845  00044C  EC43  F02C         	call	_ECANSetOperationMode
 11846                           
 11847                           ; BSR set to: 0
 11848                           ;main.c: 569: putsUSART((char *) "+OK\r\n");
 11849  000450  0E7F               	movlw	high STR_9
 11850  000452  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11851  000454  0E80               	movlw	low STR_9
 11852  000456  6F61               	movwf	?_putsUSART& (0+255),b
 11853  000458  EC84  F029         	call	_putsUSART	;wreg free
 11854                           
 11855                           ;main.c: 570: }
 11856  00045C  EFEB  F00A         	goto	l14198
 11857  000460                     l13630:
 11858                           
 11859                           ; BSR set to: 0
 11860                           ;main.c: 572: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11861  000460  0E01               	movlw	high _cmdbuf
 11862  000462  0100               	movlb	0	; () banked
 11863  000464  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11864  000466  0E26               	movlw	low _cmdbuf
 11865  000468  6F6D               	movwf	?_stristr& (0+255),b
 11866  00046A  0E7E               	movlw	high STR_14
 11867  00046C  6F70               	movwf	(?_stristr+3)& (0+255),b
 11868  00046E  0ECD               	movlw	low STR_14
 11869  000470  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11870  000472  EC0F  F027         	call	_stristr	;wreg free
 11871  000476  0E26               	movlw	low _cmdbuf
 11872  000478  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11873  00047A  0E01               	movlw	high _cmdbuf
 11874  00047C  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11875  00047E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11876  000480  E102               	bnz	u18135
 11877  000482  516D               	movf	?_stristr& (0+255),w,b
 11878  000484  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11879  000486                     u18135:
 11880  000486  E10C               	bnz	l13638
 11881                           
 11882                           ; BSR set to: 0
 11883                           ;main.c: 573: bSilent = 0;
 11884  000488  6A2E               	clrf	_bSilent,c
 11885                           
 11886                           ; BSR set to: 0
 11887                           ;main.c: 574: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11888  00048A  0E40               	movlw	64
 11889  00048C  EC43  F02C         	call	_ECANSetOperationMode
 11890                           
 11891                           ; BSR set to: 0
 11892                           ;main.c: 575: putsUSART((char *) "+OK\r\n");
 11893  000490  0E7F               	movlw	high STR_9
 11894  000492  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11895  000494  0E80               	movlw	low STR_9
 11896  000496  6F61               	movwf	?_putsUSART& (0+255),b
 11897  000498  EC84  F029         	call	_putsUSART	;wreg free
 11898                           
 11899                           ;main.c: 576: }
 11900  00049C  EFEB  F00A         	goto	l14198
 11901  0004A0                     l13638:
 11902                           
 11903                           ; BSR set to: 0
 11904                           ;main.c: 578: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11905  0004A0  0E01               	movlw	high _cmdbuf
 11906  0004A2  0100               	movlb	0	; () banked
 11907  0004A4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11908  0004A6  0E26               	movlw	low _cmdbuf
 11909  0004A8  6F6D               	movwf	?_stristr& (0+255),b
 11910  0004AA  0E7F               	movlw	high STR_16
 11911  0004AC  6F70               	movwf	(?_stristr+3)& (0+255),b
 11912  0004AE  0E50               	movlw	low STR_16
 11913  0004B0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11914  0004B2  EC0F  F027         	call	_stristr	;wreg free
 11915  0004B6  0E26               	movlw	low _cmdbuf
 11916  0004B8  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11917  0004BA  0E01               	movlw	high _cmdbuf
 11918  0004BC  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11919  0004BE  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11920  0004C0  E102               	bnz	u18145
 11921  0004C2  516D               	movf	?_stristr& (0+255),w,b
 11922  0004C4  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11923  0004C6                     u18145:
 11924  0004C6  E10C               	bnz	l13646
 11925                           
 11926                           ; BSR set to: 0
 11927                           ;main.c: 579: bSilent = 0;
 11928  0004C8  6A2E               	clrf	_bSilent,c
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;main.c: 580: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11932  0004CA  0E60               	movlw	96
 11933  0004CC  EC43  F02C         	call	_ECANSetOperationMode
 11934                           
 11935                           ; BSR set to: 0
 11936                           ;main.c: 581: putsUSART((char *) "+OK\r\n");
 11937  0004D0  0E7F               	movlw	high STR_9
 11938  0004D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11939  0004D4  0E80               	movlw	low STR_9
 11940  0004D6  6F61               	movwf	?_putsUSART& (0+255),b
 11941  0004D8  EC84  F029         	call	_putsUSART	;wreg free
 11942                           
 11943                           ;main.c: 582: }
 11944  0004DC  EFEB  F00A         	goto	l14198
 11945  0004E0                     l13646:
 11946                           
 11947                           ; BSR set to: 0
 11948                           ;main.c: 584: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 11949  0004E0  0E01               	movlw	high _cmdbuf
 11950  0004E2  0100               	movlb	0	; () banked
 11951  0004E4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11952  0004E6  0E26               	movlw	low _cmdbuf
 11953  0004E8  6F6D               	movwf	?_stristr& (0+255),b
 11954  0004EA  0E7F               	movlw	high STR_18
 11955  0004EC  6F70               	movwf	(?_stristr+3)& (0+255),b
 11956  0004EE  0E0E               	movlw	low STR_18
 11957  0004F0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11958  0004F2  EC0F  F027         	call	_stristr	;wreg free
 11959  0004F6  0E26               	movlw	low _cmdbuf
 11960  0004F8  6FC9               	movwf	??_doModeVerbose& (0+255),b
 11961  0004FA  0E01               	movlw	high _cmdbuf
 11962  0004FC  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 11963  0004FE  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 11964  000500  E102               	bnz	u18155
 11965  000502  516D               	movf	?_stristr& (0+255),w,b
 11966  000504  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 11967  000506                     u18155:
 11968  000506  E10B               	bnz	l13652
 11969                           
 11970                           ; BSR set to: 0
 11971                           ;main.c: 585: printFirmwareVersion();
 11972  000508  EC44  F026         	call	_printFirmwareVersion	;wreg free
 11973                           
 11974                           ;main.c: 586: putsUSART((char *) "+OK\r\n");
 11975  00050C  0E7F               	movlw	high STR_9
 11976  00050E  0100               	movlb	0	; () banked
 11977  000510  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11978  000512  0E80               	movlw	low STR_9
 11979  000514  6F61               	movwf	?_putsUSART& (0+255),b
 11980  000516  EC84  F029         	call	_putsUSART	;wreg free
 11981                           
 11982                           ;main.c: 587: }
 11983  00051A  EFEB  F00A         	goto	l14198
 11984  00051E                     l13652:
 11985                           
 11986                           ; BSR set to: 0
 11987                           ;main.c: 589: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11988  00051E  0E01               	movlw	high _cmdbuf
 11989  000520  0100               	movlb	0	; () banked
 11990  000522  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11991  000524  0E26               	movlw	low _cmdbuf
 11992  000526  6F6D               	movwf	?_stristr& (0+255),b
 11993  000528  0E7F               	movlw	high STR_20
 11994  00052A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11995  00052C  0E49               	movlw	low STR_20
 11996  00052E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11997  000530  EC0F  F027         	call	_stristr	;wreg free
 11998  000534  0E26               	movlw	low _cmdbuf
 11999  000536  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12000  000538  0E01               	movlw	high _cmdbuf
 12001  00053A  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12002  00053C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12003  00053E  E102               	bnz	u18165
 12004  000540  516D               	movf	?_stristr& (0+255),w,b
 12005  000542  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12006  000544                     u18165:
 12007  000544  E165               	bnz	l13688
 12008                           
 12009                           ; BSR set to: 0
 12010                           ;main.c: 590: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 12011  000546  506F               	movf	3951,w,c	;volatile
 12012  000548  0BE0               	andlw	224
 12013  00054A  0102               	movlb	2	; () banked
 12014  00054C  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 12015                           
 12016                           ; BSR set to: 2
 12017                           ;main.c: 591: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 12018  00054E  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 12019  000550  D00B               	goto	l13662
 12020                           
 12021                           ; BSR set to: 2
 12022  000552  662E               	tstfsz	_bSilent,c
 12023  000554  D009               	goto	l13662
 12024                           
 12025                           ; BSR set to: 2
 12026                           ;main.c: 592: putsUSART((char *) "+OK - Normal mode\r\n");
 12027  000556  0E7D               	movlw	high STR_21
 12028  000558  0100               	movlb	0	; () banked
 12029  00055A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12030  00055C  0E83               	movlw	low STR_21
 12031  00055E  6F61               	movwf	?_putsUSART& (0+255),b
 12032  000560  EC84  F029         	call	_putsUSART	;wreg free
 12033                           
 12034                           ;main.c: 593: }
 12035  000564  EFEB  F00A         	goto	l14198
 12036  000568                     l13662:
 12037                           
 12038                           ; BSR set to: 2
 12039                           ;main.c: 594: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 12040  000568  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12041  00056A  0E01               	movlw	1
 12042  00056C  A4D8               	btfss	status,2,c
 12043  00056E  0E00               	movlw	0
 12044  000570  142E               	andwf	_bSilent,w,c
 12045  000572  E009               	bz	l13666
 12046                           
 12047                           ; BSR set to: 2
 12048                           ;main.c: 595: putsUSART((char *) "+OK - Silent mode\r\n");
 12049  000574  0E7D               	movlw	high STR_22
 12050  000576  0100               	movlb	0	; () banked
 12051  000578  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12052  00057A  0E97               	movlw	low STR_22
 12053  00057C  6F61               	movwf	?_putsUSART& (0+255),b
 12054  00057E  EC84  F029         	call	_putsUSART	;wreg free
 12055                           
 12056                           ;main.c: 596: }
 12057  000582  EFEB  F00A         	goto	l14198
 12058  000586                     l13666:
 12059                           
 12060                           ; BSR set to: 2
 12061                           ;main.c: 597: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 12062  000586  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12063  000588  0A20               	xorlw	32
 12064  00058A  E109               	bnz	l13670
 12065                           
 12066                           ; BSR set to: 2
 12067                           ;main.c: 598: putsUSART((char *) "+OK - Sleep mode\r\n");
 12068  00058C  0E7D               	movlw	high STR_23
 12069  00058E  0100               	movlb	0	; () banked
 12070  000590  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12071  000592  0ED3               	movlw	low STR_23
 12072  000594  6F61               	movwf	?_putsUSART& (0+255),b
 12073  000596  EC84  F029         	call	_putsUSART	;wreg free
 12074                           
 12075                           ;main.c: 599: }
 12076  00059A  EFEB  F00A         	goto	l14198
 12077  00059E                     l13670:
 12078                           
 12079                           ; BSR set to: 2
 12080                           ;main.c: 600: else if (ECAN_OP_MODE_LOOP == ifmode) {
 12081  00059E  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12082  0005A0  0A40               	xorlw	64
 12083  0005A2  E109               	bnz	l13674
 12084                           
 12085                           ; BSR set to: 2
 12086                           ;main.c: 601: putsUSART((char *) "+OK - Loopback mode\r\n");
 12087  0005A4  0E7D               	movlw	high STR_24
 12088  0005A6  0100               	movlb	0	; () banked
 12089  0005A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12090  0005AA  0E06               	movlw	low STR_24
 12091  0005AC  6F61               	movwf	?_putsUSART& (0+255),b
 12092  0005AE  EC84  F029         	call	_putsUSART	;wreg free
 12093                           
 12094                           ;main.c: 602: }
 12095  0005B2  EFEB  F00A         	goto	l14198
 12096  0005B6                     l13674:
 12097                           
 12098                           ; BSR set to: 2
 12099                           ;main.c: 603: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12100  0005B6  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12101  0005B8  0A60               	xorlw	96
 12102  0005BA  E109               	bnz	l13678
 12103                           
 12104                           ; BSR set to: 2
 12105                           ;main.c: 604: putsUSART((char *) "+OK - Listen only mode\r\n");
 12106  0005BC  0E7B               	movlw	high STR_25
 12107  0005BE  0100               	movlb	0	; () banked
 12108  0005C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12109  0005C2  0ECF               	movlw	low STR_25
 12110  0005C4  6F61               	movwf	?_putsUSART& (0+255),b
 12111  0005C6  EC84  F029         	call	_putsUSART	;wreg free
 12112                           
 12113                           ;main.c: 605: }
 12114  0005CA  EFEB  F00A         	goto	l14198
 12115  0005CE                     l13678:
 12116                           
 12117                           ; BSR set to: 2
 12118                           ;main.c: 606: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12119  0005CE  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12120  0005D0  0A80               	xorlw	128
 12121  0005D2  E109               	bnz	l13682
 12122                           
 12123                           ; BSR set to: 2
 12124                           ;main.c: 607: putsUSART((char *) "+OK - Closed mode\r\n");
 12125  0005D4  0E7D               	movlw	high STR_26
 12126  0005D6  0100               	movlb	0	; () banked
 12127  0005D8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12128  0005DA  0E6F               	movlw	low STR_26
 12129  0005DC  6F61               	movwf	?_putsUSART& (0+255),b
 12130  0005DE  EC84  F029         	call	_putsUSART	;wreg free
 12131                           
 12132                           ;main.c: 608: }
 12133  0005E2  EFEB  F00A         	goto	l14198
 12134  0005E6                     l13682:
 12135                           
 12136                           ; BSR set to: 2
 12137                           ;main.c: 609: else if (ECAN_OP_MODE_BITS == ifmode) {
 12138  0005E6  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12139  0005E8  0AE0               	xorlw	224
 12140  0005EA  E109               	bnz	l13686
 12141                           
 12142                           ; BSR set to: 2
 12143                           ;main.c: 610: putsUSART((char *) "+OK - Bits mode\r\n");
 12144  0005EC  0E7D               	movlw	high STR_27
 12145  0005EE  0100               	movlb	0	; () banked
 12146  0005F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12147  0005F2  0EE6               	movlw	low STR_27
 12148  0005F4  6F61               	movwf	?_putsUSART& (0+255),b
 12149  0005F6  EC84  F029         	call	_putsUSART	;wreg free
 12150                           
 12151                           ;main.c: 611: }
 12152  0005FA  EFEB  F00A         	goto	l14198
 12153  0005FE                     l13686:
 12154                           
 12155                           ; BSR set to: 2
 12156                           ;main.c: 612: else {
 12157                           ;main.c: 613: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12158  0005FE  0E7C               	movlw	high STR_28
 12159  000600  0100               	movlb	0	; () banked
 12160  000602  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12161  000604  0E49               	movlw	low STR_28
 12162  000606  6F61               	movwf	?_putsUSART& (0+255),b
 12163  000608  EC84  F029         	call	_putsUSART	;wreg free
 12164  00060C  EFEB  F00A         	goto	l14198
 12165  000610                     l13688:
 12166                           
 12167                           ; BSR set to: 0
 12168                           ;main.c: 618: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12169  000610  0E01               	movlw	high _cmdbuf
 12170  000612  0100               	movlb	0	; () banked
 12171  000614  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12172  000616  0E26               	movlw	low _cmdbuf
 12173  000618  6F6D               	movwf	?_stristr& (0+255),b
 12174  00061A  0E7F               	movlw	high STR_29
 12175  00061C  6F70               	movwf	(?_stristr+3)& (0+255),b
 12176  00061E  0EEB               	movlw	low STR_29
 12177  000620  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12178  000622  EC0F  F027         	call	_stristr	;wreg free
 12179  000626  0E26               	movlw	low _cmdbuf
 12180  000628  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12181  00062A  0E01               	movlw	high _cmdbuf
 12182  00062C  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12183  00062E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12184  000630  E102               	bnz	u18265
 12185  000632  516D               	movf	?_stristr& (0+255),w,b
 12186  000634  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12187  000636                     u18265:
 12188  000636  E001 D0D8          	bnz	l13742
 12189                           
 12190                           ; BSR set to: 0
 12191                           ;main.c: 620: char *p = strtok(cmdbuf, ",");
 12192  00063A  EC49  F00B         	call	PL28	;call to abstracted procedure
 12193  00063E  ECFB  F025         	call	_strtok	;wreg free
 12194  000642  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12195  000646  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12196                           
 12197                           ; BSR set to: 0
 12198                           ;main.c: 623: vscpPriority = 3;
 12199  00064A  0E03               	movlw	3
 12200  00064C  6FEA               	movwf	_vscpPriority& (0+255),b
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;main.c: 624: if ((0) != p) {
 12204  00064E  0102               	movlb	2	; () banked
 12205  000650  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12206  000652  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12207  000654  E008               	bz	l13698
 12208                           
 12209                           ; BSR set to: 2
 12210                           ;main.c: 625: vscpPriority = atoi(p);
 12211  000656  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12212  00065A  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12213  00065E  EC9E  F01D         	call	_atoi	;wreg free
 12214  000662  5166               	movf	?_atoi& (0+255),w,b
 12215  000664  6FEA               	movwf	_vscpPriority& (0+255),b
 12216  000666                     l13698:
 12217                           
 12218                           ;main.c: 626: }
 12219                           ;main.c: 629: vscpClass = 0;
 12220  000666  6A3C               	clrf	_vscpClass,c
 12221  000668  6A3D               	clrf	_vscpClass+1,c
 12222                           
 12223                           ;main.c: 630: if ((0) != (p = strtok((0), ","))) {
 12224  00066A  0100               	movlb	0	; () banked
 12225  00066C  EC08  F00B         	call	PL4	;call to abstracted procedure
 12226  000670  ECFB  F025         	call	_strtok	;wreg free
 12227  000674  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12228  000678  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12229  00067C  0102               	movlb	2	; () banked
 12230  00067E  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12231  000680  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12232  000682  E00A               	bz	l13704
 12233                           
 12234                           ; BSR set to: 2
 12235                           ;main.c: 631: vscpClass = atoi(p);
 12236  000684  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12237  000688  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12238  00068C  EC9E  F01D         	call	_atoi	;wreg free
 12239  000690  C066  F03C         	movff	?_atoi,_vscpClass
 12240  000694  C067  F03D         	movff	?_atoi+1,_vscpClass+1
 12241  000698                     l13704:
 12242                           
 12243                           ;main.c: 632: }
 12244                           ;main.c: 635: vscpType = 0;
 12245  000698  0100               	movlb	0	; () banked
 12246  00069A  6BEC               	clrf	_vscpType& (0+255),b
 12247                           
 12248                           ; BSR set to: 0
 12249                           ;main.c: 636: if ((0) != (p = strtok((0), ","))) {
 12250  00069C  EC08  F00B         	call	PL4	;call to abstracted procedure
 12251  0006A0  ECFB  F025         	call	_strtok	;wreg free
 12252  0006A4  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12253  0006A8  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12254  0006AC  0102               	movlb	2	; () banked
 12255  0006AE  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12256  0006B0  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12257  0006B2  E008               	bz	l13710
 12258                           
 12259                           ; BSR set to: 2
 12260                           ;main.c: 637: vscpType = atoi(p);
 12261  0006B4  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12262  0006B8  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12263  0006BC  EC9E  F01D         	call	_atoi	;wreg free
 12264  0006C0  5166               	movf	?_atoi& (0+255),w,b
 12265  0006C2  6FEC               	movwf	_vscpType& (0+255),b
 12266  0006C4                     l13710:
 12267                           
 12268                           ;main.c: 638: }
 12269                           ;main.c: 641: vscpNodeId = 0;
 12270  0006C4  0100               	movlb	0	; () banked
 12271  0006C6  6BE9               	clrf	_vscpNodeId& (0+255),b
 12272                           
 12273                           ; BSR set to: 0
 12274                           ;main.c: 642: if ((0) != (p = strtok((0), ","))) {
 12275  0006C8  EC08  F00B         	call	PL4	;call to abstracted procedure
 12276  0006CC  ECFB  F025         	call	_strtok	;wreg free
 12277  0006D0  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12278  0006D4  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12279  0006D8  0102               	movlb	2	; () banked
 12280  0006DA  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12281  0006DC  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12282  0006DE  E008               	bz	l13716
 12283                           
 12284                           ; BSR set to: 2
 12285                           ;main.c: 643: vscpNodeId = atoi(p);
 12286  0006E0  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12287  0006E4  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12288  0006E8  EC9E  F01D         	call	_atoi	;wreg free
 12289  0006EC  5166               	movf	?_atoi& (0+255),w,b
 12290  0006EE  6FE9               	movwf	_vscpNodeId& (0+255),b
 12291  0006F0                     l13716:
 12292                           
 12293                           ;main.c: 644: }
 12294                           ;main.c: 647: vscpSize = 0;
 12295  0006F0  0100               	movlb	0	; () banked
 12296  0006F2  6BEB               	clrf	_vscpSize& (0+255),b
 12297                           
 12298                           ; BSR set to: 0
 12299                           ;main.c: 648: if ((0) != (p = strtok((0), ","))) {
 12300  0006F4  EC08  F00B         	call	PL4	;call to abstracted procedure
 12301  0006F8  ECFB  F025         	call	_strtok	;wreg free
 12302  0006FC  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12303  000700  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12304  000704  0102               	movlb	2	; () banked
 12305  000706  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12306  000708  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12307  00070A  E008               	bz	l13722
 12308                           
 12309                           ; BSR set to: 2
 12310                           ;main.c: 649: vscpSize = atoi(p);
 12311  00070C  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12312  000710  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12313  000714  EC9E  F01D         	call	_atoi	;wreg free
 12314  000718  5166               	movf	?_atoi& (0+255),w,b
 12315  00071A  6FEB               	movwf	_vscpSize& (0+255),b
 12316  00071C                     l13722:
 12317                           
 12318                           ;main.c: 650: }
 12319                           ;main.c: 652: memset( vscpData, 0, 8 );
 12320  00071C  0E34               	movlw	low _vscpData
 12321  00071E  0100               	movlb	0	; () banked
 12322  000720  6F60               	movwf	?_memset& (0+255),b
 12323  000722  0E00               	movlw	high _vscpData
 12324  000724  6F61               	movwf	(?_memset+1)& (0+255),b
 12325  000726  0E0F               	movlw	15
 12326  000728  6F61               	movwf	(?_memset+1)& (0+255),b
 12327  00072A  0E5F               	movlw	__accesstop+-1
 12328  00072C  6560               	cpfsgt	?_memset& (0+255),b
 12329  00072E  6B61               	clrf	(?_memset+1)& (0+255),b
 12330  000730  6B63               	clrf	(?_memset+3)& (0+255),b
 12331  000732  6B62               	clrf	(?_memset+2)& (0+255),b
 12332  000734  6B65               	clrf	(?_memset+5)& (0+255),b
 12333  000736  0E08               	movlw	8
 12334  000738  6F64               	movwf	(?_memset+4)& (0+255),b
 12335  00073A  ECFE  F02B         	call	_memset	;wreg free
 12336                           
 12337                           ; BSR set to: 0
 12338                           ;main.c: 653: for (i = 0; i < vscpSize; i++) {
 12339  00073E  0102               	movlb	2	; () banked
 12340  000740  6BA9               	clrf	doModeVerbose@i& (0+255),b
 12341  000742  D01B               	goto	l13732
 12342  000744                     l13726:
 12343                           
 12344                           ; BSR set to: 2
 12345                           ;main.c: 654: if ((0) != (p = strtok((0), ","))) {
 12346  000744  0100               	movlb	0	; () banked
 12347  000746  EC08  F00B         	call	PL4	;call to abstracted procedure
 12348  00074A  ECFB  F025         	call	_strtok	;wreg free
 12349  00074E  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 12350  000752  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12351  000756  0102               	movlb	2	; () banked
 12352  000758  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12353  00075A  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12354  00075C  E013               	bz	l13734
 12355                           
 12356                           ; BSR set to: 2
 12357                           ;main.c: 655: vscpData[ i ] = atoi(p);
 12358  00075E  51A9               	movf	doModeVerbose@i& (0+255),w,b
 12359  000760  0F34               	addlw	low _vscpData
 12360  000762  6ED9               	movwf	fsr2l,c
 12361  000764  6ADA               	clrf	fsr2h,c
 12362  000766  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 12363  00076A  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 12364  00076E  EC9E  F01D         	call	_atoi	;wreg free
 12365  000772  5166               	movf	?_atoi& (0+255),w,b
 12366  000774  6EDF               	movwf	indf2,c
 12367                           
 12368                           ; BSR set to: 0
 12369                           
 12370                           ;main.c: 656: }
 12371  000776  0102               	movlb	2	; () banked
 12372  000778  2BA9               	incf	doModeVerbose@i& (0+255),f,b
 12373  00077A                     l13732:
 12374                           
 12375                           ; BSR set to: 2
 12376  00077A  0100               	movlb	0	; () banked
 12377  00077C  51EB               	movf	_vscpSize& (0+255),w,b
 12378  00077E  0102               	movlb	2	; () banked
 12379  000780  5DA9               	subwf	doModeVerbose@i& (0+255),w,b
 12380  000782  E3E0               	bnc	l13726
 12381  000784                     l13734:
 12382                           
 12383                           ; BSR set to: 2
 12384                           ;main.c: 659: }
 12385                           ;main.c: 660: }
 12386                           ;main.c: 662: if ( sendVSCPFrame(vscpClass,
 12387                           ;main.c: 663: vscpType,
 12388                           ;main.c: 664: vscpNodeId,
 12389                           ;main.c: 665: vscpPriority,
 12390                           ;main.c: 666: vscpSize,
 12391                           ;main.c: 667: vscpData ) ) {
 12392  000784  C03C  F096         	movff	_vscpClass,?_sendVSCPFrame
 12393  000788  C03D  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12394  00078C  C0EC  F098         	movff	_vscpType,?_sendVSCPFrame+2
 12395  000790  C0E9  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12396  000794  C0EA  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 12397  000798  C0EB  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 12398  00079C  0E34               	movlw	low _vscpData
 12399  00079E  0100               	movlb	0	; () banked
 12400  0007A0  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12401  0007A2  EC6A  F022         	call	_sendVSCPFrame	;wreg free
 12402  0007A6  0900               	iorlw	0
 12403  0007A8  E017               	bz	l13740
 12404                           
 12405                           ;main.c: 669: cntTxFrames++;
 12406  0007AA  0101               	movlb	1	; () banked
 12407  0007AC  2B14               	incf	_cntTxFrames& (0+255),f,b
 12408  0007AE  0E00               	movlw	0
 12409  0007B0  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12410  0007B2  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12411  0007B4  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12412                           
 12413                           ;main.c: 670: cntTxBytes += vscpSize;
 12414  0007B6  0100               	movlb	0	; () banked
 12415  0007B8  51EB               	movf	_vscpSize& (0+255),w,b
 12416  0007BA  0101               	movlb	1	; () banked
 12417  0007BC  2710               	addwf	_cntTxBytes& (0+255),f,b
 12418  0007BE  0E00               	movlw	0
 12419  0007C0  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12420  0007C2  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12421  0007C4  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12422                           
 12423                           ; BSR set to: 1
 12424                           ;main.c: 671: putsUSART((char *) "+OK\r\n");
 12425  0007C6  0E7F               	movlw	high STR_9
 12426  0007C8  0100               	movlb	0	; () banked
 12427  0007CA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12428  0007CC  0E80               	movlw	low STR_9
 12429  0007CE  6F61               	movwf	?_putsUSART& (0+255),b
 12430  0007D0  EC84  F029         	call	_putsUSART	;wreg free
 12431                           
 12432                           ;main.c: 672: }
 12433  0007D4  EFEB  F00A         	goto	l14198
 12434  0007D8                     l13740:
 12435                           
 12436                           ;main.c: 673: else {
 12437                           ;main.c: 674: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12438  0007D8  0E7A               	movlw	high STR_37
 12439  0007DA  0100               	movlb	0	; () banked
 12440  0007DC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12441  0007DE  0E49               	movlw	low STR_37
 12442  0007E0  6F61               	movwf	?_putsUSART& (0+255),b
 12443  0007E2  EC84  F029         	call	_putsUSART	;wreg free
 12444  0007E6  EFEB  F00A         	goto	l14198
 12445  0007EA                     l13742:
 12446                           
 12447                           ; BSR set to: 0
 12448                           ;main.c: 678: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12449  0007EA  0E01               	movlw	high _cmdbuf
 12450  0007EC  0100               	movlb	0	; () banked
 12451  0007EE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12452  0007F0  0E26               	movlw	low _cmdbuf
 12453  0007F2  6F6D               	movwf	?_stristr& (0+255),b
 12454  0007F4  0E7F               	movlw	high STR_38
 12455  0007F6  6F70               	movwf	(?_stristr+3)& (0+255),b
 12456  0007F8  0EE8               	movlw	low STR_38
 12457  0007FA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12458  0007FC  EC0F  F027         	call	_stristr	;wreg free
 12459  000800  0E26               	movlw	low _cmdbuf
 12460  000802  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12461  000804  0E01               	movlw	high _cmdbuf
 12462  000806  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12463  000808  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12464  00080A  E102               	bnz	u18355
 12465  00080C  516D               	movf	?_stristr& (0+255),w,b
 12466  00080E  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12467  000810                     u18355:
 12468  000810  E116               	bnz	l13750
 12469                           
 12470                           ; BSR set to: 0
 12471                           ;main.c: 679: if (receivePrintEventVerbose()) {
 12472  000812  EC79  F012         	call	_receivePrintEventVerbose	;wreg free
 12473  000816  0900               	iorlw	0
 12474  000818  E009               	bz	l13748
 12475                           
 12476                           ;main.c: 680: putsUSART((char *) "+OK\r\n");
 12477  00081A  0E7F               	movlw	high STR_9
 12478  00081C  0100               	movlb	0	; () banked
 12479  00081E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12480  000820  0E80               	movlw	low STR_9
 12481  000822  6F61               	movwf	?_putsUSART& (0+255),b
 12482  000824  EC84  F029         	call	_putsUSART	;wreg free
 12483                           
 12484                           ;main.c: 681: }
 12485  000828  EFEB  F00A         	goto	l14198
 12486  00082C                     l13748:
 12487                           
 12488                           ;main.c: 682: else {
 12489                           ;main.c: 683: putsUSART((char *) "+OK - no events\r\n");
 12490  00082C  0E7D               	movlw	high STR_40
 12491  00082E  0100               	movlb	0	; () banked
 12492  000830  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12493  000832  0EF8               	movlw	low STR_40
 12494  000834  6F61               	movwf	?_putsUSART& (0+255),b
 12495  000836  EC84  F029         	call	_putsUSART	;wreg free
 12496  00083A  EFEB  F00A         	goto	l14198
 12497  00083E                     l13750:
 12498                           
 12499                           ; BSR set to: 0
 12500                           ;main.c: 687: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12501  00083E  0E01               	movlw	high _cmdbuf
 12502  000840  0100               	movlb	0	; () banked
 12503  000842  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12504  000844  0E26               	movlw	low _cmdbuf
 12505  000846  6F6D               	movwf	?_stristr& (0+255),b
 12506  000848  0E7F               	movlw	high STR_41
 12507  00084A  6F70               	movwf	(?_stristr+3)& (0+255),b
 12508  00084C  0ECB               	movlw	low STR_41
 12509  00084E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12510  000850  EC0F  F027         	call	_stristr	;wreg free
 12511  000854  0E26               	movlw	low _cmdbuf
 12512  000856  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12513  000858  0E01               	movlw	high _cmdbuf
 12514  00085A  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12515  00085C  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12516  00085E  E102               	bnz	u18375
 12517  000860  516D               	movf	?_stristr& (0+255),w,b
 12518  000862  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12519  000864                     u18375:
 12520  000864  E10B               	bnz	l13756
 12521                           
 12522                           ; BSR set to: 0
 12523                           ;main.c: 688: printStatistics();
 12524  000866  EC70  F017         	call	_printStatistics	;wreg free
 12525                           
 12526                           ;main.c: 689: putsUSART((char *) "+OK\r\n");
 12527  00086A  0E7F               	movlw	high STR_9
 12528  00086C  0100               	movlb	0	; () banked
 12529  00086E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12530  000870  0E80               	movlw	low STR_9
 12531  000872  6F61               	movwf	?_putsUSART& (0+255),b
 12532  000874  EC84  F029         	call	_putsUSART	;wreg free
 12533                           
 12534                           ;main.c: 690: }
 12535  000878  EFEB  F00A         	goto	l14198
 12536  00087C                     l13756:
 12537                           
 12538                           ; BSR set to: 0
 12539                           ;main.c: 692: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12540  00087C  0E01               	movlw	high _cmdbuf
 12541  00087E  0100               	movlb	0	; () banked
 12542  000880  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12543  000882  0E26               	movlw	low _cmdbuf
 12544  000884  6F6D               	movwf	?_stristr& (0+255),b
 12545  000886  0E7F               	movlw	high STR_43
 12546  000888  6F70               	movwf	(?_stristr+3)& (0+255),b
 12547  00088A  0ED9               	movlw	low STR_43
 12548  00088C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12549  00088E  EC0F  F027         	call	_stristr	;wreg free
 12550  000892  0E26               	movlw	low _cmdbuf
 12551  000894  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12552  000896  0E01               	movlw	high _cmdbuf
 12553  000898  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12554  00089A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12555  00089C  E102               	bnz	u18385
 12556  00089E  516D               	movf	?_stristr& (0+255),w,b
 12557  0008A0  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12558  0008A2                     u18385:
 12559  0008A2  E10B               	bnz	l13762
 12560                           
 12561                           ; BSR set to: 0
 12562                           ;main.c: 693: printErrors();
 12563  0008A4  EC1B  F011         	call	_printErrors	;wreg free
 12564                           
 12565                           ;main.c: 694: putsUSART((char *) "+OK\r\n");
 12566  0008A8  0E7F               	movlw	high STR_9
 12567  0008AA  0100               	movlb	0	; () banked
 12568  0008AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12569  0008AE  0E80               	movlw	low STR_9
 12570  0008B0  6F61               	movwf	?_putsUSART& (0+255),b
 12571  0008B2  EC84  F029         	call	_putsUSART	;wreg free
 12572                           
 12573                           ;main.c: 695: }
 12574  0008B6  EFEB  F00A         	goto	l14198
 12575  0008BA                     l13762:
 12576                           
 12577                           ; BSR set to: 0
 12578                           ;main.c: 697: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12579  0008BA  0E01               	movlw	high _cmdbuf
 12580  0008BC  0100               	movlb	0	; () banked
 12581  0008BE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12582  0008C0  0E26               	movlw	low _cmdbuf
 12583  0008C2  6F6D               	movwf	?_stristr& (0+255),b
 12584  0008C4  0E7F               	movlw	high STR_45
 12585  0008C6  6F70               	movwf	(?_stristr+3)& (0+255),b
 12586  0008C8  0EC6               	movlw	low STR_45
 12587  0008CA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12588  0008CC  EC0F  F027         	call	_stristr	;wreg free
 12589  0008D0  0E26               	movlw	low _cmdbuf
 12590  0008D2  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12591  0008D4  0E01               	movlw	high _cmdbuf
 12592  0008D6  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12593  0008D8  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12594  0008DA  E102               	bnz	u18395
 12595  0008DC  516D               	movf	?_stristr& (0+255),w,b
 12596  0008DE  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12597  0008E0                     u18395:
 12598  0008E0  E10B               	bnz	l13766
 12599                           
 12600                           ; BSR set to: 0
 12601                           ;main.c: 698: printHelp();
 12602  0008E2  EC91  F016         	call	_printHelp	;wreg free
 12603                           
 12604                           ;main.c: 699: putsUSART((char *) "+OK\r\n");
 12605  0008E6  0E7F               	movlw	high STR_9
 12606  0008E8  0100               	movlb	0	; () banked
 12607  0008EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12608  0008EC  0E80               	movlw	low STR_9
 12609  0008EE  6F61               	movwf	?_putsUSART& (0+255),b
 12610  0008F0  EC84  F029         	call	_putsUSART	;wreg free
 12611                           
 12612                           ;main.c: 700: }
 12613  0008F4  EFEB  F00A         	goto	l14198
 12614  0008F8                     l13766:
 12615                           
 12616                           ; BSR set to: 0
 12617                           ;main.c: 702: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12618  0008F8  0E01               	movlw	high _cmdbuf
 12619  0008FA  0100               	movlb	0	; () banked
 12620  0008FC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12621  0008FE  0E26               	movlw	low _cmdbuf
 12622  000900  6F6D               	movwf	?_stristr& (0+255),b
 12623  000902  0E7F               	movlw	high STR_47
 12624  000904  6F70               	movwf	(?_stristr+3)& (0+255),b
 12625  000906  0EA3               	movlw	low STR_47
 12626  000908  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12627  00090A  EC0F  F027         	call	_stristr	;wreg free
 12628  00090E  0E26               	movlw	low _cmdbuf
 12629  000910  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12630  000912  0E01               	movlw	high _cmdbuf
 12631  000914  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12632  000916  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12633  000918  E102               	bnz	u18405
 12634  00091A  516D               	movf	?_stristr& (0+255),w,b
 12635  00091C  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12636  00091E                     u18405:
 12637  00091E  E10B               	bnz	l13772
 12638                           
 12639                           ; BSR set to: 0
 12640                           ;main.c: 703: findNodes();
 12641  000920  ECA2  F01E         	call	_findNodes	;wreg free
 12642                           
 12643                           ;main.c: 704: putsUSART((char *) "+OK\r\n");
 12644  000924  0E7F               	movlw	high STR_9
 12645  000926  0100               	movlb	0	; () banked
 12646  000928  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12647  00092A  0E80               	movlw	low STR_9
 12648  00092C  6F61               	movwf	?_putsUSART& (0+255),b
 12649  00092E  EC84  F029         	call	_putsUSART	;wreg free
 12650                           
 12651                           ;main.c: 705: }
 12652  000932  EFEB  F00A         	goto	l14198
 12653  000936                     l13772:
 12654                           
 12655                           ; BSR set to: 0
 12656                           ;main.c: 708: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12657  000936  0E01               	movlw	high _cmdbuf
 12658  000938  0100               	movlb	0	; () banked
 12659  00093A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12660  00093C  0E26               	movlw	low _cmdbuf
 12661  00093E  6F6D               	movwf	?_stristr& (0+255),b
 12662  000940  0E7F               	movlw	high STR_49
 12663  000942  6F70               	movwf	(?_stristr+3)& (0+255),b
 12664  000944  0EA8               	movlw	low STR_49
 12665  000946  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12666  000948  EC0F  F027         	call	_stristr	;wreg free
 12667  00094C  0E26               	movlw	low _cmdbuf
 12668  00094E  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12669  000950  0E01               	movlw	high _cmdbuf
 12670  000952  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12671  000954  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 12672  000956  E102               	bnz	u18415
 12673  000958  516D               	movf	?_stristr& (0+255),w,b
 12674  00095A  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 12675  00095C                     u18415:
 12676  00095C  E001 D1B4          	bnz	l13902
 12677                           
 12678                           ; BSR set to: 0
 12679                           ;main.c: 710: uint8_t i;
 12680                           ;main.c: 711: uint8_t nodeid;
 12681                           ;main.c: 712: uint8_t page = 0;
 12682  000960  0102               	movlb	2	; () banked
 12683  000962  6BAD               	clrf	doModeVerbose@page& (0+255),b
 12684                           
 12685                           ; BSR set to: 2
 12686                           ;main.c: 713: uint8_t reg;
 12687                           ;main.c: 714: uint8_t value;
 12688                           ;main.c: 715: uint8_t count = 1;
 12689  000964  0E01               	movlw	1
 12690  000966  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12691                           
 12692                           ; BSR set to: 2
 12693                           ;main.c: 717: strcpy(cmdbuf, cmdbuf + 5);
 12694  000968  ECFA  F00A         	call	PL2	;call to abstracted procedure
 12695  00096C  ECE7  F02B         	call	_strcpy	;wreg free
 12696                           
 12697                           ; BSR set to: 0
 12698                           ;main.c: 718: char *p = strtok(cmdbuf, " ");
 12699  000970  0E01               	movlw	high _cmdbuf
 12700  000972  EC53  F00B         	call	PL32	;call to abstracted procedure
 12701  000976  ECFB  F025         	call	_strtok	;wreg free
 12702  00097A  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1179
 12703  00097E  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1179+1
 12704                           
 12705                           ; BSR set to: 0
 12706                           ;main.c: 719: if ((0) != p) {
 12707  000982  0102               	movlb	2	; () banked
 12708  000984  51B3               	movf	(doModeVerbose@p_1179+1)& (0+255),w,b
 12709  000986  11B2               	iorwf	doModeVerbose@p_1179& (0+255),w,b
 12710  000988  E00A               	bz	l13786
 12711                           
 12712                           ; BSR set to: 2
 12713                           ;main.c: 720: nodeid = atoi(p);
 12714  00098A  C2B2  F066         	movff	doModeVerbose@p_1179,?_atoi
 12715  00098E  C2B3  F067         	movff	doModeVerbose@p_1179+1,?_atoi+1
 12716  000992  EC9E  F01D         	call	_atoi	;wreg free
 12717  000996  5166               	movf	?_atoi& (0+255),w,b
 12718  000998  0102               	movlb	2	; () banked
 12719  00099A  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 12720                           
 12721                           ;main.c: 721: }
 12722  00099C  D009               	goto	l13790
 12723  00099E                     l13786:
 12724                           
 12725                           ; BSR set to: 2
 12726                           ;main.c: 722: else {
 12727                           ;main.c: 723: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12728  00099E  0E7C               	movlw	high STR_51
 12729  0009A0  0100               	movlb	0	; () banked
 12730  0009A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12731  0009A4  0E31               	movlw	low STR_51
 12732  0009A6  6F61               	movwf	?_putsUSART& (0+255),b
 12733  0009A8  EC84  F029         	call	_putsUSART	;wreg free
 12734  0009AC  EFF9  F00A         	goto	l541
 12735  0009B0                     l13790:
 12736                           
 12737                           ; BSR set to: 2
 12738                           ;main.c: 725: }
 12739                           ;main.c: 727: if ((0) != (p = strtok((0), " "))) {
 12740  0009B0  EC41  F00B         	call	PL26	;call to abstracted procedure
 12741  0009B4  ECFB  F025         	call	_strtok	;wreg free
 12742  0009B8  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1179
 12743  0009BC  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1179+1
 12744  0009C0  0102               	movlb	2	; () banked
 12745  0009C2  51B3               	movf	(doModeVerbose@p_1179+1)& (0+255),w,b
 12746  0009C4  11B2               	iorwf	doModeVerbose@p_1179& (0+255),w,b
 12747  0009C6  E034               	bz	l13798
 12748                           
 12749                           ; BSR set to: 2
 12750                           ;main.c: 729: char *preg;
 12751                           ;main.c: 730: if (preg = strchr(p, ':')) {
 12752  0009C8  C2B2  F060         	movff	doModeVerbose@p_1179,?_strchr
 12753  0009CC  C2B3  F061         	movff	doModeVerbose@p_1179+1,?_strchr+1
 12754  0009D0  0100               	movlb	0	; () banked
 12755  0009D2  6B63               	clrf	(?_strchr+3)& (0+255),b
 12756  0009D4  0E3A               	movlw	58
 12757  0009D6  6F62               	movwf	(?_strchr+2)& (0+255),b
 12758  0009D8  EC98  F028         	call	_strchr	;wreg free
 12759  0009DC  C060  F284         	movff	?_strchr,doModeVerbose@preg
 12760  0009E0  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12761  0009E4  0102               	movlb	2	; () banked
 12762  0009E6  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12763  0009E8  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12764  0009EA  E018               	bz	l13796
 12765                           
 12766                           ; BSR set to: 2
 12767                           ;main.c: 731: page = atoi(p);
 12768  0009EC  C2B2  F066         	movff	doModeVerbose@p_1179,?_atoi
 12769  0009F0  C2B3  F067         	movff	doModeVerbose@p_1179+1,?_atoi+1
 12770  0009F4  EC9E  F01D         	call	_atoi	;wreg free
 12771  0009F8  5166               	movf	?_atoi& (0+255),w,b
 12772  0009FA  0102               	movlb	2	; () banked
 12773  0009FC  6FAD               	movwf	doModeVerbose@page& (0+255),b
 12774                           
 12775                           ;main.c: 732: reg = atoi(preg + 1);
 12776  0009FE  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12777  000A00  0100               	movlb	0	; () banked
 12778  000A02  6FC9               	movwf	??_doModeVerbose& (0+255),b
 12779  000A04  0E00               	movlw	0
 12780  000A06  0102               	movlb	2	; () banked
 12781  000A08  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12782  000A0A  0100               	movlb	0	; () banked
 12783  000A0C  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 12784  000A0E  C0C9  F066         	movff	??_doModeVerbose,?_atoi
 12785  000A12  C0CA  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12786  000A16  EC9E  F01D         	call	_atoi	;wreg free
 12787  000A1A  D006               	goto	L6
 12788  000A1C                     l13796:
 12789                           
 12790                           ; BSR set to: 2
 12791                           ;main.c: 734: else {
 12792                           ;main.c: 735: reg = atoi(p);
 12793  000A1C  C2B2  F066         	movff	doModeVerbose@p_1179,?_atoi
 12794  000A20  C2B3  F067         	movff	doModeVerbose@p_1179+1,?_atoi+1
 12795  000A24  EC9E  F01D         	call	_atoi	;wreg free
 12796  000A28                     L6:
 12797  000A28  5166               	movf	?_atoi& (0+255),w,b
 12798  000A2A  0102               	movlb	2	; () banked
 12799  000A2C  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 12800  000A2E  D009               	goto	l13802
 12801  000A30                     l13798:
 12802                           
 12803                           ; BSR set to: 2
 12804                           ;main.c: 740: else {
 12805                           ;main.c: 741: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12806  000A30  0E7A               	movlw	high STR_53
 12807  000A32  0100               	movlb	0	; () banked
 12808  000A34  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12809  000A36  0EAC               	movlw	low STR_53
 12810  000A38  6F61               	movwf	?_putsUSART& (0+255),b
 12811  000A3A  EC84  F029         	call	_putsUSART	;wreg free
 12812  000A3E  EFF9  F00A         	goto	l541
 12813  000A42                     l13802:
 12814                           
 12815                           ; BSR set to: 2
 12816                           ;main.c: 743: }
 12817                           ;main.c: 746: if ((0) != (p = strtok((0), " "))) {
 12818  000A42  EC41  F00B         	call	PL26	;call to abstracted procedure
 12819  000A46  ECFB  F025         	call	_strtok	;wreg free
 12820  000A4A  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1179
 12821  000A4E  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1179+1
 12822  000A52  0102               	movlb	2	; () banked
 12823  000A54  51B3               	movf	(doModeVerbose@p_1179+1)& (0+255),w,b
 12824  000A56  11B2               	iorwf	doModeVerbose@p_1179& (0+255),w,b
 12825  000A58  E00D               	bz	l546
 12826                           
 12827                           ; BSR set to: 2
 12828                           ;main.c: 747: count = atoi(p);
 12829  000A5A  C2B2  F066         	movff	doModeVerbose@p_1179,?_atoi
 12830  000A5E  C2B3  F067         	movff	doModeVerbose@p_1179+1,?_atoi+1
 12831  000A62  EC9E  F01D         	call	_atoi	;wreg free
 12832  000A66  5166               	movf	?_atoi& (0+255),w,b
 12833  000A68  0102               	movlb	2	; () banked
 12834  000A6A  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12835                           
 12836                           ; BSR set to: 2
 12837                           ;main.c: 748: if (0 == count) count = 1;
 12838  000A6C  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 12839  000A6E  D002               	goto	l546
 12840                           
 12841                           ; BSR set to: 2
 12842  000A70  0E01               	movlw	1
 12843  000A72  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12844  000A74                     l546:
 12845                           
 12846                           ; BSR set to: 2
 12847                           ;main.c: 749: }
 12848                           ;main.c: 751: BOOL rv = 1;
 12849  000A74  0E01               	movlw	1
 12850  000A76  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 12851                           
 12852                           ; BSR set to: 2
 12853                           ;main.c: 752: for (i = 0; i < count; i++) {
 12854  000A78  6BB0               	clrf	doModeVerbose@i_1173& (0+255),b
 12855  000A7A  D10E               	goto	l13894
 12856  000A7C                     l13812:
 12857                           
 12858                           ; BSR set to: 2
 12859                           ;main.c: 754: if (readRegisterExtended(nodeid,
 12860                           ;main.c: 755: page,
 12861                           ;main.c: 756: (reg + i) & 0xff,
 12862                           ;main.c: 757: rwtimeout,
 12863                           ;main.c: 758: &value)) {
 12864  000A7C  0100               	movlb	0	; () banked
 12865  000A7E  C2AD  F0B5         	movff	doModeVerbose@page,?_readRegisterExtended
 12866  000A82  6BB6               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12867  000A84  0102               	movlb	2	; () banked
 12868  000A86  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 12869  000A88  25B0               	addwf	doModeVerbose@i_1173& (0+255),w,b
 12870  000A8A  0100               	movlb	0	; () banked
 12871  000A8C  6FB7               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12872  000A8E  C0E8  F0B8         	movff	_rwtimeout,?_readRegisterExtended+3
 12873  000A92  6BB9               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12874  000A94  0E02               	movlw	high doModeVerbose@value
 12875  000A96  6FBB               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12876  000A98  0EB1               	movlw	low doModeVerbose@value
 12877  000A9A  6FBA               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12878  000A9C  0102               	movlb	2	; () banked
 12879  000A9E  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 12880  000AA0  ECA5  F021         	call	_readRegisterExtended
 12881  000AA4  0900               	iorlw	0
 12882  000AA6  E101 D09D          	bz	l550
 12883                           
 12884                           ;main.c: 759: putsUSART((char *) "Value for reg ");
 12885  000AAA  0E7E               	movlw	high STR_55
 12886  000AAC  0100               	movlb	0	; () banked
 12887  000AAE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12888  000AB0  0E5E               	movlw	low STR_55
 12889  000AB2  6F61               	movwf	?_putsUSART& (0+255),b
 12890  000AB4  EC84  F029         	call	_putsUSART	;wreg free
 12891                           
 12892                           ;main.c: 760: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12893  000AB8  0100               	movlb	0	; () banked
 12894  000ABA  67E4               	tstfsz	_bHex& (0+255),b
 12895  000ABC  D005               	goto	l13820
 12896                           
 12897                           ; BSR set to: 0
 12898  000ABE  0E7F               	movlw	high STR_57
 12899  000AC0  0102               	movlb	2	; () banked
 12900  000AC2  6F95               	movwf	(_doModeVerbose$1191+1)& (0+255),b
 12901  000AC4  0EEE               	movlw	low STR_57
 12902  000AC6  D004               	goto	L7
 12903  000AC8                     l13820:
 12904                           
 12905                           ; BSR set to: 0
 12906  000AC8  0E7F               	movlw	high STR_56
 12907  000ACA  0102               	movlb	2	; () banked
 12908  000ACC  6F95               	movwf	(_doModeVerbose$1191+1)& (0+255),b
 12909  000ACE  0E65               	movlw	low STR_56
 12910  000AD0                     L7:
 12911  000AD0  6F94               	movwf	_doModeVerbose$1191& (0+255),b
 12912                           
 12913                           ; BSR set to: 2
 12914  000AD2  0E01               	movlw	high _wrkbuf
 12915  000AD4  0100               	movlb	0	; () banked
 12916  000AD6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12917  000AD8  0E76               	movlw	low _wrkbuf
 12918  000ADA  6F76               	movwf	?_sprintf& (0+255),b
 12919  000ADC  C294  F078         	movff	_doModeVerbose$1191,?_sprintf+2
 12920  000AE0  C295  F079         	movff	_doModeVerbose$1191+1,?_sprintf+3
 12921  000AE4  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12922  000AE8  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12923  000AEA  EC8D  F00B         	call	_sprintf	;wreg free
 12924                           
 12925                           ; BSR set to: 0
 12926                           ;main.c: 761: putsUSART(wrkbuf);
 12927  000AEE  0E01               	movlw	high _wrkbuf
 12928  000AF0  0100               	movlb	0	; () banked
 12929  000AF2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12930  000AF4  0E76               	movlw	low _wrkbuf
 12931  000AF6  6F61               	movwf	?_putsUSART& (0+255),b
 12932  000AF8  EC84  F029         	call	_putsUSART	;wreg free
 12933  000AFC                     l555:
 12934  000AFC  A2AC               	btfss	4012,1,c	;volatile
 12935  000AFE  D7FE               	goto	l555
 12936                           
 12937                           ;main.c: 763: WriteUSART(':');
 12938  000B00  0E3A               	movlw	58
 12939  000B02  EC5B  F02C         	call	_WriteUSART
 12940                           
 12941                           ;main.c: 764: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12942  000B06  0100               	movlb	0	; () banked
 12943  000B08  67E4               	tstfsz	_bHex& (0+255),b
 12944  000B0A  D005               	goto	l13832
 12945                           
 12946                           ; BSR set to: 0
 12947  000B0C  0E7F               	movlw	high STR_57
 12948  000B0E  0102               	movlb	2	; () banked
 12949  000B10  6F97               	movwf	(_doModeVerbose$1203+1)& (0+255),b
 12950  000B12  0EEE               	movlw	low STR_57
 12951  000B14  D004               	goto	L8
 12952  000B16                     l13832:
 12953                           
 12954                           ; BSR set to: 0
 12955  000B16  0E7F               	movlw	high STR_56
 12956  000B18  0102               	movlb	2	; () banked
 12957  000B1A  6F97               	movwf	(_doModeVerbose$1203+1)& (0+255),b
 12958  000B1C  0E65               	movlw	low STR_56
 12959  000B1E                     L8:
 12960  000B1E  6F96               	movwf	_doModeVerbose$1203& (0+255),b
 12961                           
 12962                           ; BSR set to: 2
 12963  000B20  0E01               	movlw	high _wrkbuf
 12964  000B22  0100               	movlb	0	; () banked
 12965  000B24  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12966  000B26  0E76               	movlw	low _wrkbuf
 12967  000B28  6F76               	movwf	?_sprintf& (0+255),b
 12968  000B2A  C296  F078         	movff	_doModeVerbose$1203,?_sprintf+2
 12969  000B2E  C297  F079         	movff	_doModeVerbose$1203+1,?_sprintf+3
 12970  000B32  EC5C  F00B         	call	PL38	;call to abstracted procedure
 12971  000B36  EC8D  F00B         	call	_sprintf	;wreg free
 12972                           
 12973                           ; BSR set to: 0
 12974                           ;main.c: 765: putsUSART(wrkbuf);
 12975  000B3A  0E01               	movlw	high _wrkbuf
 12976  000B3C  0100               	movlb	0	; () banked
 12977  000B3E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12978  000B40  0E76               	movlw	low _wrkbuf
 12979  000B42  6F61               	movwf	?_putsUSART& (0+255),b
 12980  000B44  EC84  F029         	call	_putsUSART	;wreg free
 12981                           
 12982                           ;main.c: 766: putsUSART((char *) " = ");
 12983  000B48  0E7E               	movlw	high (STR_243+4)
 12984  000B4A  0100               	movlb	0	; () banked
 12985  000B4C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12986  000B4E  0EEA               	movlw	low (STR_243+4)
 12987  000B50  6F61               	movwf	?_putsUSART& (0+255),b
 12988  000B52  EC84  F029         	call	_putsUSART	;wreg free
 12989                           
 12990                           ;main.c: 767: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 12991  000B56  0100               	movlb	0	; () banked
 12992  000B58  67E4               	tstfsz	_bHex& (0+255),b
 12993  000B5A  D005               	goto	l13844
 12994                           
 12995                           ; BSR set to: 0
 12996  000B5C  0E7F               	movlw	high STR_57
 12997  000B5E  0102               	movlb	2	; () banked
 12998  000B60  6F99               	movwf	(_doModeVerbose$1208+1)& (0+255),b
 12999  000B62  0EEE               	movlw	low STR_57
 13000  000B64  D004               	goto	L9
 13001  000B66                     l13844:
 13002                           
 13003                           ; BSR set to: 0
 13004  000B66  0E7F               	movlw	high STR_56
 13005  000B68  0102               	movlb	2	; () banked
 13006  000B6A  6F99               	movwf	(_doModeVerbose$1208+1)& (0+255),b
 13007  000B6C  0E65               	movlw	low STR_56
 13008  000B6E                     L9:
 13009  000B6E  6F98               	movwf	_doModeVerbose$1208& (0+255),b
 13010                           
 13011                           ; BSR set to: 2
 13012  000B70  0E01               	movlw	high _wrkbuf
 13013  000B72  0100               	movlb	0	; () banked
 13014  000B74  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13015  000B76  0E76               	movlw	low _wrkbuf
 13016  000B78  6F76               	movwf	?_sprintf& (0+255),b
 13017  000B7A  C298  F078         	movff	_doModeVerbose$1208,?_sprintf+2
 13018  000B7E  C299  F079         	movff	_doModeVerbose$1208+1,?_sprintf+3
 13019  000B82  C2B1  F07A         	movff	doModeVerbose@value,?_sprintf+4
 13020  000B86  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13021  000B88  EC8D  F00B         	call	_sprintf	;wreg free
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;main.c: 768: putsUSART(wrkbuf);
 13025  000B8C  0E01               	movlw	high _wrkbuf
 13026  000B8E  0100               	movlb	0	; () banked
 13027  000B90  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13028  000B92  0E76               	movlw	low _wrkbuf
 13029  000B94  6F61               	movwf	?_putsUSART& (0+255),b
 13030  000B96  EC84  F029         	call	_putsUSART	;wreg free
 13031  000B9A                     l566:
 13032  000B9A  A2AC               	btfss	4012,1,c	;volatile
 13033  000B9C  D7FE               	goto	l566
 13034                           
 13035                           ;main.c: 770: WriteUSART(' ');
 13036  000B9E  0E20               	movlw	32
 13037  000BA0  EC5B  F02C         	call	_WriteUSART
 13038  000BA4                     l569:
 13039  000BA4  A2AC               	btfss	4012,1,c	;volatile
 13040  000BA6  D7FE               	goto	l569
 13041                           
 13042                           ;main.c: 772: if ((value > 32) && (value < 127)) {
 13043  000BA8  0E20               	movlw	32
 13044  000BAA  0102               	movlb	2	; () banked
 13045  000BAC  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 13046  000BAE  D007               	goto	l13858
 13047                           
 13048                           ; BSR set to: 2
 13049  000BB0  0E7F               	movlw	127
 13050  000BB2  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 13051  000BB4  D004               	goto	l13858
 13052                           
 13053                           ; BSR set to: 2
 13054                           ;main.c: 773: WriteUSART(value);
 13055  000BB6  51B1               	movf	doModeVerbose@value& (0+255),w,b
 13056  000BB8  EC5B  F02C         	call	_WriteUSART
 13057                           
 13058                           ;main.c: 774: }
 13059  000BBC  D003               	goto	l574
 13060  000BBE                     l13858:
 13061                           
 13062                           ; BSR set to: 2
 13063                           ;main.c: 775: else {
 13064                           ;main.c: 776: WriteUSART('.');
 13065  000BBE  0E2E               	movlw	46
 13066  000BC0  EC5B  F02C         	call	_WriteUSART
 13067  000BC4                     l574:
 13068  000BC4  A2AC               	btfss	4012,1,c	;volatile
 13069  000BC6  D7FE               	goto	l574
 13070                           
 13071                           ;main.c: 779: WriteUSART(' ');
 13072  000BC8  0E20               	movlw	32
 13073  000BCA  EC5B  F02C         	call	_WriteUSART
 13074                           
 13075                           ;main.c: 780: printBinary(value);
 13076  000BCE  0102               	movlb	2	; () banked
 13077  000BD0  51B1               	movf	doModeVerbose@value& (0+255),w,b
 13078  000BD2  ECD8  F029         	call	_printBinary
 13079                           
 13080                           ; BSR set to: 0
 13081                           ;main.c: 781: putsUSART((char *) "\r\n");
 13082  000BD6  0E74               	movlw	high (STR_197+50)
 13083  000BD8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13084  000BDA  0EC0               	movlw	low (STR_197+50)
 13085  000BDC  6F61               	movwf	?_putsUSART& (0+255),b
 13086  000BDE  EC84  F029         	call	_putsUSART	;wreg free
 13087                           
 13088                           ;main.c: 782: }
 13089  000BE2  D058               	goto	l13892
 13090  000BE4                     l550:
 13091                           
 13092                           ;main.c: 783: else {
 13093                           ;main.c: 784: rv = 0;
 13094  000BE4  0102               	movlb	2	; () banked
 13095  000BE6  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 13096                           
 13097                           ; BSR set to: 2
 13098                           ;main.c: 785: putsUSART((char *) "-ERROR - Unable to read register ");
 13099  000BE8  0E7A               	movlw	high STR_64
 13100  000BEA  0100               	movlb	0	; () banked
 13101  000BEC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13102  000BEE  0E06               	movlw	low STR_64
 13103  000BF0  6F61               	movwf	?_putsUSART& (0+255),b
 13104  000BF2  EC84  F029         	call	_putsUSART	;wreg free
 13105                           
 13106                           ;main.c: 786: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 13107  000BF6  0100               	movlb	0	; () banked
 13108  000BF8  67E4               	tstfsz	_bHex& (0+255),b
 13109  000BFA  D005               	goto	l13872
 13110                           
 13111                           ; BSR set to: 0
 13112  000BFC  0E7F               	movlw	high STR_57
 13113  000BFE  0102               	movlb	2	; () banked
 13114  000C00  6F9B               	movwf	(_doModeVerbose$1214+1)& (0+255),b
 13115  000C02  0EEE               	movlw	low STR_57
 13116  000C04  D004               	goto	L10
 13117  000C06                     l13872:
 13118                           
 13119                           ; BSR set to: 0
 13120  000C06  0E7F               	movlw	high STR_56
 13121  000C08  0102               	movlb	2	; () banked
 13122  000C0A  6F9B               	movwf	(_doModeVerbose$1214+1)& (0+255),b
 13123  000C0C  0E65               	movlw	low STR_56
 13124  000C0E                     L10:
 13125  000C0E  6F9A               	movwf	_doModeVerbose$1214& (0+255),b
 13126                           
 13127                           ; BSR set to: 2
 13128  000C10  0E01               	movlw	high _wrkbuf
 13129  000C12  0100               	movlb	0	; () banked
 13130  000C14  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13131  000C16  0E76               	movlw	low _wrkbuf
 13132  000C18  6F76               	movwf	?_sprintf& (0+255),b
 13133  000C1A  C29A  F078         	movff	_doModeVerbose$1214,?_sprintf+2
 13134  000C1E  C29B  F079         	movff	_doModeVerbose$1214+1,?_sprintf+3
 13135  000C22  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 13136  000C26  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13137  000C28  EC8D  F00B         	call	_sprintf	;wreg free
 13138                           
 13139                           ; BSR set to: 0
 13140                           ;main.c: 787: putsUSART(wrkbuf);
 13141  000C2C  0E01               	movlw	high _wrkbuf
 13142  000C2E  0100               	movlb	0	; () banked
 13143  000C30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13144  000C32  0E76               	movlw	low _wrkbuf
 13145  000C34  6F61               	movwf	?_putsUSART& (0+255),b
 13146  000C36  EC84  F029         	call	_putsUSART	;wreg free
 13147  000C3A                     l582:
 13148  000C3A  A2AC               	btfss	4012,1,c	;volatile
 13149  000C3C  D7FE               	goto	l582
 13150                           
 13151                           ;main.c: 789: WriteUSART(':');
 13152  000C3E  0E3A               	movlw	58
 13153  000C40  EC5B  F02C         	call	_WriteUSART
 13154                           
 13155                           ;main.c: 790: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13156  000C44  0100               	movlb	0	; () banked
 13157  000C46  67E4               	tstfsz	_bHex& (0+255),b
 13158  000C48  D005               	goto	l13884
 13159                           
 13160                           ; BSR set to: 0
 13161  000C4A  0E7F               	movlw	high STR_57
 13162  000C4C  0102               	movlb	2	; () banked
 13163  000C4E  6F9D               	movwf	(_doModeVerbose$1218+1)& (0+255),b
 13164  000C50  0EEE               	movlw	low STR_57
 13165  000C52  D004               	goto	L11
 13166  000C54                     l13884:
 13167                           
 13168                           ; BSR set to: 0
 13169  000C54  0E7F               	movlw	high STR_56
 13170  000C56  0102               	movlb	2	; () banked
 13171  000C58  6F9D               	movwf	(_doModeVerbose$1218+1)& (0+255),b
 13172  000C5A  0E65               	movlw	low STR_56
 13173  000C5C                     L11:
 13174  000C5C  6F9C               	movwf	_doModeVerbose$1218& (0+255),b
 13175                           
 13176                           ; BSR set to: 2
 13177  000C5E  0E01               	movlw	high _wrkbuf
 13178  000C60  0100               	movlb	0	; () banked
 13179  000C62  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13180  000C64  0E76               	movlw	low _wrkbuf
 13181  000C66  6F76               	movwf	?_sprintf& (0+255),b
 13182  000C68  C29C  F078         	movff	_doModeVerbose$1218,?_sprintf+2
 13183  000C6C  C29D  F079         	movff	_doModeVerbose$1218+1,?_sprintf+3
 13184  000C70  EC5C  F00B         	call	PL38	;call to abstracted procedure
 13185  000C74  EC8D  F00B         	call	_sprintf	;wreg free
 13186                           
 13187                           ; BSR set to: 0
 13188                           ;main.c: 791: putsUSART(wrkbuf);
 13189  000C78  0E01               	movlw	high _wrkbuf
 13190  000C7A  0100               	movlb	0	; () banked
 13191  000C7C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13192  000C7E  0E76               	movlw	low _wrkbuf
 13193  000C80  6F61               	movwf	?_putsUSART& (0+255),b
 13194  000C82  EC84  F029         	call	_putsUSART	;wreg free
 13195                           
 13196                           ;main.c: 792: putsUSART((char *) "\r\n");
 13197  000C86  0E74               	movlw	high (STR_197+50)
 13198  000C88  0100               	movlb	0	; () banked
 13199  000C8A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13200  000C8C  0EC0               	movlw	low (STR_197+50)
 13201  000C8E  6F61               	movwf	?_putsUSART& (0+255),b
 13202  000C90  EC84  F029         	call	_putsUSART	;wreg free
 13203  000C94                     l13892:
 13204  000C94  0102               	movlb	2	; () banked
 13205  000C96  2BB0               	incf	doModeVerbose@i_1173& (0+255),f,b
 13206  000C98                     l13894:
 13207                           
 13208                           ; BSR set to: 2
 13209  000C98  51AB               	movf	doModeVerbose@count& (0+255),w,b
 13210  000C9A  5DB0               	subwf	doModeVerbose@i_1173& (0+255),w,b
 13211  000C9C  E201 D6EE          	bnc	l13812
 13212                           
 13213                           ; BSR set to: 2
 13214                           ;main.c: 793: }
 13215                           ;main.c: 794: }
 13216                           ;main.c: 796: if (rv) {
 13217  000CA0  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 13218  000CA2  E009               	bz	l13900
 13219                           
 13220                           ; BSR set to: 2
 13221                           ;main.c: 797: putsUSART((char *) "+OK\r\n");
 13222  000CA4  0E7F               	movlw	high STR_9
 13223  000CA6  0100               	movlb	0	; () banked
 13224  000CA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13225  000CAA  0E80               	movlw	low STR_9
 13226  000CAC  6F61               	movwf	?_putsUSART& (0+255),b
 13227  000CAE  EC84  F029         	call	_putsUSART	;wreg free
 13228                           
 13229                           ;main.c: 798: }
 13230  000CB2  EFEB  F00A         	goto	l14198
 13231  000CB6                     l13900:
 13232                           
 13233                           ; BSR set to: 2
 13234                           ;main.c: 799: else {
 13235                           ;main.c: 800: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13236  000CB6  0E74               	movlw	high STR_71
 13237  000CB8  0100               	movlb	0	; () banked
 13238  000CBA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13239  000CBC  0E58               	movlw	low STR_71
 13240  000CBE  6F61               	movwf	?_putsUSART& (0+255),b
 13241  000CC0  EC84  F029         	call	_putsUSART	;wreg free
 13242  000CC4  EFEB  F00A         	goto	l14198
 13243  000CC8                     l13902:
 13244                           
 13245                           ; BSR set to: 0
 13246                           ;main.c: 806: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13247  000CC8  0E01               	movlw	high _cmdbuf
 13248  000CCA  0100               	movlb	0	; () banked
 13249  000CCC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13250  000CCE  0E26               	movlw	low _cmdbuf
 13251  000CD0  6F6D               	movwf	?_stristr& (0+255),b
 13252  000CD2  0E7F               	movlw	high STR_72
 13253  000CD4  6F70               	movwf	(?_stristr+3)& (0+255),b
 13254  000CD6  0EAD               	movlw	low STR_72
 13255  000CD8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13256  000CDA  EC0F  F027         	call	_stristr	;wreg free
 13257  000CDE  0E26               	movlw	low _cmdbuf
 13258  000CE0  6FC9               	movwf	??_doModeVerbose& (0+255),b
 13259  000CE2  0E01               	movlw	high _cmdbuf
 13260  000CE4  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 13261  000CE6  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13262  000CE8  E102               	bnz	u18625
 13263  000CEA  516D               	movf	?_stristr& (0+255),w,b
 13264  000CEC  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 13265  000CEE                     u18625:
 13266  000CEE  E001 D0B0          	bnz	l13944
 13267                           
 13268                           ; BSR set to: 0
 13269                           ;main.c: 808: uint8_t nodeid;
 13270                           ;main.c: 809: uint8_t page = 0;
 13271  000CF2  0102               	movlb	2	; () banked
 13272  000CF4  6BA1               	clrf	doModeVerbose@page_1224& (0+255),b
 13273                           
 13274                           ; BSR set to: 2
 13275                           ;main.c: 810: uint8_t reg;
 13276                           ;main.c: 811: uint8_t value;
 13277                           ;main.c: 813: strcpy(cmdbuf, cmdbuf + 5);
 13278  000CF6  ECFA  F00A         	call	PL2	;call to abstracted procedure
 13279  000CFA  ECE7  F02B         	call	_strcpy	;wreg free
 13280                           
 13281                           ; BSR set to: 0
 13282                           ;main.c: 814: char *p = strtok(cmdbuf, " ");
 13283  000CFE  0E01               	movlw	high _cmdbuf
 13284  000D00  EC53  F00B         	call	PL32	;call to abstracted procedure
 13285  000D04  ECFB  F025         	call	_strtok	;wreg free
 13286  000D08  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1227
 13287  000D0C  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1227+1
 13288                           
 13289                           ; BSR set to: 0
 13290                           ;main.c: 815: if ((0) != p) {
 13291  000D10  0102               	movlb	2	; () banked
 13292  000D12  51B5               	movf	(doModeVerbose@p_1227+1)& (0+255),w,b
 13293  000D14  11B4               	iorwf	doModeVerbose@p_1227& (0+255),w,b
 13294  000D16  E00A               	bz	l13914
 13295                           
 13296                           ; BSR set to: 2
 13297                           ;main.c: 816: nodeid = atoi(p);
 13298  000D18  C2B4  F066         	movff	doModeVerbose@p_1227,?_atoi
 13299  000D1C  C2B5  F067         	movff	doModeVerbose@p_1227+1,?_atoi+1
 13300  000D20  EC9E  F01D         	call	_atoi	;wreg free
 13301  000D24  5166               	movf	?_atoi& (0+255),w,b
 13302  000D26  0102               	movlb	2	; () banked
 13303  000D28  6F8D               	movwf	doModeVerbose@nodeid_1223& (0+255),b
 13304                           
 13305                           ;main.c: 817: }
 13306  000D2A  D009               	goto	l13918
 13307  000D2C                     l13914:
 13308                           
 13309                           ; BSR set to: 2
 13310                           ;main.c: 818: else {
 13311                           ;main.c: 819: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13312  000D2C  0E7C               	movlw	high STR_51
 13313  000D2E  0100               	movlb	0	; () banked
 13314  000D30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13315  000D32  0E31               	movlw	low STR_51
 13316  000D34  6F61               	movwf	?_putsUSART& (0+255),b
 13317  000D36  EC84  F029         	call	_putsUSART	;wreg free
 13318  000D3A  EFF9  F00A         	goto	l541
 13319  000D3E                     l13918:
 13320                           
 13321                           ; BSR set to: 2
 13322                           ;main.c: 821: }
 13323                           ;main.c: 823: if ( (0) != ( p = strtok((0), " ") ) ) {
 13324  000D3E  EC41  F00B         	call	PL26	;call to abstracted procedure
 13325  000D42  ECFB  F025         	call	_strtok	;wreg free
 13326  000D46  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1227
 13327  000D4A  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1227+1
 13328  000D4E  0102               	movlb	2	; () banked
 13329  000D50  51B5               	movf	(doModeVerbose@p_1227+1)& (0+255),w,b
 13330  000D52  11B4               	iorwf	doModeVerbose@p_1227& (0+255),w,b
 13331  000D54  E034               	bz	l13926
 13332                           
 13333                           ; BSR set to: 2
 13334                           ;main.c: 825: char *preg;
 13335                           ;main.c: 826: if (preg = strchr(p, ':')) {
 13336  000D56  C2B4  F060         	movff	doModeVerbose@p_1227,?_strchr
 13337  000D5A  C2B5  F061         	movff	doModeVerbose@p_1227+1,?_strchr+1
 13338  000D5E  0100               	movlb	0	; () banked
 13339  000D60  6B63               	clrf	(?_strchr+3)& (0+255),b
 13340  000D62  0E3A               	movlw	58
 13341  000D64  6F62               	movwf	(?_strchr+2)& (0+255),b
 13342  000D66  EC98  F028         	call	_strchr	;wreg free
 13343  000D6A  C060  F286         	movff	?_strchr,doModeVerbose@preg_1231
 13344  000D6E  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1231+1
 13345  000D72  0102               	movlb	2	; () banked
 13346  000D74  5187               	movf	(doModeVerbose@preg_1231+1)& (0+255),w,b
 13347  000D76  1186               	iorwf	doModeVerbose@preg_1231& (0+255),w,b
 13348  000D78  E018               	bz	l13924
 13349                           
 13350                           ; BSR set to: 2
 13351                           ;main.c: 827: page = atoi(p);
 13352  000D7A  C2B4  F066         	movff	doModeVerbose@p_1227,?_atoi
 13353  000D7E  C2B5  F067         	movff	doModeVerbose@p_1227+1,?_atoi+1
 13354  000D82  EC9E  F01D         	call	_atoi	;wreg free
 13355  000D86  5166               	movf	?_atoi& (0+255),w,b
 13356  000D88  0102               	movlb	2	; () banked
 13357  000D8A  6FA1               	movwf	doModeVerbose@page_1224& (0+255),b
 13358                           
 13359                           ;main.c: 828: reg = atoi(preg + 1);
 13360  000D8C  2986               	incf	doModeVerbose@preg_1231& (0+255),w,b
 13361  000D8E  0100               	movlb	0	; () banked
 13362  000D90  6FC9               	movwf	??_doModeVerbose& (0+255),b
 13363  000D92  0E00               	movlw	0
 13364  000D94  0102               	movlb	2	; () banked
 13365  000D96  2187               	addwfc	(doModeVerbose@preg_1231+1)& (0+255),w,b
 13366  000D98  0100               	movlb	0	; () banked
 13367  000D9A  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 13368  000D9C  C0C9  F066         	movff	??_doModeVerbose,?_atoi
 13369  000DA0  C0CA  F067         	movff	??_doModeVerbose+1,?_atoi+1
 13370  000DA4  EC9E  F01D         	call	_atoi	;wreg free
 13371  000DA8  D006               	goto	L12
 13372  000DAA                     l13924:
 13373                           
 13374                           ; BSR set to: 2
 13375                           ;main.c: 830: else {
 13376                           ;main.c: 831: reg = atoi(p);
 13377  000DAA  C2B4  F066         	movff	doModeVerbose@p_1227,?_atoi
 13378  000DAE  C2B5  F067         	movff	doModeVerbose@p_1227+1,?_atoi+1
 13379  000DB2  EC9E  F01D         	call	_atoi	;wreg free
 13380  000DB6                     L12:
 13381  000DB6  5166               	movf	?_atoi& (0+255),w,b
 13382  000DB8  0102               	movlb	2	; () banked
 13383  000DBA  6FA2               	movwf	doModeVerbose@reg_1225& (0+255),b
 13384  000DBC  D009               	goto	l13930
 13385  000DBE                     l13926:
 13386                           
 13387                           ; BSR set to: 2
 13388                           ;main.c: 835: else {
 13389                           ;main.c: 836: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13390  000DBE  0E7A               	movlw	high STR_53
 13391  000DC0  0100               	movlb	0	; () banked
 13392  000DC2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13393  000DC4  0EAC               	movlw	low STR_53
 13394  000DC6  6F61               	movwf	?_putsUSART& (0+255),b
 13395  000DC8  EC84  F029         	call	_putsUSART	;wreg free
 13396  000DCC  EFF9  F00A         	goto	l541
 13397  000DD0                     l13930:
 13398                           
 13399                           ; BSR set to: 2
 13400                           ;main.c: 838: }
 13401                           ;main.c: 841: if ((0) != (p = strtok((0), " "))) {
 13402  000DD0  EC41  F00B         	call	PL26	;call to abstracted procedure
 13403  000DD4  ECFB  F025         	call	_strtok	;wreg free
 13404  000DD8  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1227
 13405  000DDC  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1227+1
 13406  000DE0  0102               	movlb	2	; () banked
 13407  000DE2  51B5               	movf	(doModeVerbose@p_1227+1)& (0+255),w,b
 13408  000DE4  11B4               	iorwf	doModeVerbose@p_1227& (0+255),w,b
 13409  000DE6  E00A               	bz	l13934
 13410                           
 13411                           ; BSR set to: 2
 13412                           ;main.c: 842: value = atoi(p);
 13413  000DE8  C2B4  F066         	movff	doModeVerbose@p_1227,?_atoi
 13414  000DEC  C2B5  F067         	movff	doModeVerbose@p_1227+1,?_atoi+1
 13415  000DF0  EC9E  F01D         	call	_atoi	;wreg free
 13416  000DF4  5166               	movf	?_atoi& (0+255),w,b
 13417  000DF6  0102               	movlb	2	; () banked
 13418  000DF8  6FAA               	movwf	doModeVerbose@value_1226& (0+255),b
 13419                           
 13420                           ;main.c: 843: }
 13421  000DFA  D008               	goto	l13938
 13422  000DFC                     l13934:
 13423                           
 13424                           ; BSR set to: 2
 13425                           ;main.c: 844: else {
 13426                           ;main.c: 845: putsUSART((char *) "-ERROR - Need a value\r\n");
 13427  000DFC  0E7C               	movlw	high STR_78
 13428  000DFE  0100               	movlb	0	; () banked
 13429  000E00  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13430  000E02  0E61               	movlw	low STR_78
 13431  000E04  6F61               	movwf	?_putsUSART& (0+255),b
 13432  000E06  EC84  F029         	call	_putsUSART	;wreg free
 13433  000E0A  D3F3               	goto	l541
 13434  000E0C                     l13938:
 13435                           
 13436                           ; BSR set to: 2
 13437                           ;main.c: 847: }
 13438                           ;main.c: 849: if (writeRegisterExtended(nodeid,
 13439                           ;main.c: 850: page,
 13440                           ;main.c: 851: reg,
 13441                           ;main.c: 852: rwtimeout,
 13442                           ;main.c: 853: &value)) {
 13443  000E0C  0100               	movlb	0	; () banked
 13444  000E0E  C2A1  F0B5         	movff	doModeVerbose@page_1224,?_writeRegisterExtended
 13445  000E12  6BB6               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13446  000E14  C2A2  F0B7         	movff	doModeVerbose@reg_1225,?_writeRegisterExtended+2
 13447  000E18  C0E8  F0B8         	movff	_rwtimeout,?_writeRegisterExtended+3
 13448  000E1C  6BB9               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13449  000E1E  0E02               	movlw	high doModeVerbose@value_1226
 13450  000E20  6FBB               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13451  000E22  0EAA               	movlw	low doModeVerbose@value_1226
 13452  000E24  6FBA               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13453  000E26  0102               	movlb	2	; () banked
 13454  000E28  518D               	movf	doModeVerbose@nodeid_1223& (0+255),w,b
 13455  000E2A  EC01  F020         	call	_writeRegisterExtended
 13456  000E2E  0900               	iorlw	0
 13457  000E30  E008               	bz	l13942
 13458                           
 13459                           ;main.c: 854: putsUSART((char *) "+OK - Value written successfully\r\n");
 13460  000E32  0E79               	movlw	high STR_79
 13461  000E34  0100               	movlb	0	; () banked
 13462  000E36  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13463  000E38  0EC1               	movlw	low STR_79
 13464  000E3A  6F61               	movwf	?_putsUSART& (0+255),b
 13465  000E3C  EC84  F029         	call	_putsUSART	;wreg free
 13466                           
 13467                           ;main.c: 855: }
 13468  000E40  D3CA               	goto	l14198
 13469  000E42                     l13942:
 13470                           
 13471                           ;main.c: 856: else {
 13472                           ;main.c: 857: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 13473  000E42  0E7A               	movlw	high STR_80
 13474  000E44  0100               	movlb	0	; () banked
 13475  000E46  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13476  000E48  0E8B               	movlw	low STR_80
 13477  000E4A  6F61               	movwf	?_putsUSART& (0+255),b
 13478  000E4C  EC84  F029         	call	_putsUSART	;wreg free
 13479  000E50  D3C2               	goto	l14198
 13480  000E52                     l13944:
 13481                           
 13482                           ; BSR set to: 0
 13483                           ;main.c: 863: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13484  000E52  0E01               	movlw	high _cmdbuf
 13485  000E54  0100               	movlb	0	; () banked
 13486  000E56  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13487  000E58  0E26               	movlw	low _cmdbuf
 13488  000E5A  6F6D               	movwf	?_stristr& (0+255),b
 13489  000E5C  0E7F               	movlw	high STR_81
 13490  000E5E  6F70               	movwf	(?_stristr+3)& (0+255),b
 13491  000E60  0EBC               	movlw	low STR_81
 13492  000E62  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13493  000E64  EC0F  F027         	call	_stristr	;wreg free
 13494  000E68  0E26               	movlw	low _cmdbuf
 13495  000E6A  6FC9               	movwf	??_doModeVerbose& (0+255),b
 13496  000E6C  0E01               	movlw	high _cmdbuf
 13497  000E6E  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 13498  000E70  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13499  000E72  E102               	bnz	u18685
 13500  000E74  516D               	movf	?_stristr& (0+255),w,b
 13501  000E76  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 13502  000E78                     u18685:
 13503  000E78  E151               	bnz	l13972
 13504                           
 13505                           ; BSR set to: 0
 13506                           ;main.c: 864: uint8_t nodeid;
 13507                           ;main.c: 866: strcpy(cmdbuf, cmdbuf + 5);
 13508  000E7A  DBBC               	call	PL2	;call to abstracted procedure
 13509  000E7C  ECE7  F02B         	call	_strcpy	;wreg free
 13510                           
 13511                           ; BSR set to: 0
 13512                           ;main.c: 867: nodeid = atoi(cmdbuf);
 13513  000E80  0E01               	movlw	high _cmdbuf
 13514  000E82  0100               	movlb	0	; () banked
 13515  000E84  6F67               	movwf	(?_atoi+1)& (0+255),b
 13516  000E86  0E26               	movlw	low _cmdbuf
 13517  000E88  6F66               	movwf	?_atoi& (0+255),b
 13518  000E8A  EC9E  F01D         	call	_atoi	;wreg free
 13519  000E8E  5166               	movf	?_atoi& (0+255),w,b
 13520  000E90  0102               	movlb	2	; () banked
 13521  000E92  6FAF               	movwf	doModeVerbose@nodeid_1238& (0+255),b
 13522                           
 13523                           ; BSR set to: 2
 13524                           ;main.c: 869: putsUSART((char *) "Info for node id = ");
 13525  000E94  0E7D               	movlw	high STR_82
 13526  000E96  0100               	movlb	0	; () banked
 13527  000E98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13528  000E9A  0EAB               	movlw	low STR_82
 13529  000E9C  6F61               	movwf	?_putsUSART& (0+255),b
 13530  000E9E  EC84  F029         	call	_putsUSART	;wreg free
 13531                           
 13532                           ;main.c: 870: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13533  000EA2  0100               	movlb	0	; () banked
 13534  000EA4  67E4               	tstfsz	_bHex& (0+255),b
 13535  000EA6  D005               	goto	l13956
 13536                           
 13537                           ; BSR set to: 0
 13538  000EA8  0E7F               	movlw	high STR_57
 13539  000EAA  0102               	movlb	2	; () banked
 13540  000EAC  6F9F               	movwf	(_doModeVerbose$1243+1)& (0+255),b
 13541  000EAE  0EEE               	movlw	low STR_57
 13542  000EB0  D004               	goto	L13
 13543  000EB2                     l13956:
 13544                           
 13545                           ; BSR set to: 0
 13546  000EB2  0E7F               	movlw	high STR_56
 13547  000EB4  0102               	movlb	2	; () banked
 13548  000EB6  6F9F               	movwf	(_doModeVerbose$1243+1)& (0+255),b
 13549  000EB8  0E65               	movlw	low STR_56
 13550  000EBA                     L13:
 13551  000EBA  6F9E               	movwf	_doModeVerbose$1243& (0+255),b
 13552                           
 13553                           ; BSR set to: 2
 13554  000EBC  0E01               	movlw	high _wrkbuf
 13555  000EBE  0100               	movlb	0	; () banked
 13556  000EC0  6F77               	movwf	(?_sprintf+1)& (0+255),b
 13557  000EC2  0E76               	movlw	low _wrkbuf
 13558  000EC4  6F76               	movwf	?_sprintf& (0+255),b
 13559  000EC6  C29E  F078         	movff	_doModeVerbose$1243,?_sprintf+2
 13560  000ECA  C29F  F079         	movff	_doModeVerbose$1243+1,?_sprintf+3
 13561  000ECE  C2AF  F07A         	movff	doModeVerbose@nodeid_1238,?_sprintf+4
 13562  000ED2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13563  000ED4  EC8D  F00B         	call	_sprintf	;wreg free
 13564                           
 13565                           ; BSR set to: 0
 13566                           ;main.c: 871: putsUSART(wrkbuf);
 13567  000ED8  0E01               	movlw	high _wrkbuf
 13568  000EDA  0100               	movlb	0	; () banked
 13569  000EDC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13570  000EDE  0E76               	movlw	low _wrkbuf
 13571  000EE0  6F61               	movwf	?_putsUSART& (0+255),b
 13572  000EE2  EC84  F029         	call	_putsUSART	;wreg free
 13573                           
 13574                           ;main.c: 872: putsUSART((char *) "\r\n");
 13575  000EE6  0E74               	movlw	high (STR_197+50)
 13576  000EE8  0100               	movlb	0	; () banked
 13577  000EEA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13578  000EEC  0EC0               	movlw	low (STR_197+50)
 13579  000EEE  6F61               	movwf	?_putsUSART& (0+255),b
 13580  000EF0  EC84  F029         	call	_putsUSART	;wreg free
 13581                           
 13582                           ;main.c: 873: printNodeFirmwareVersion(nodeid);
 13583  000EF4  0102               	movlb	2	; () banked
 13584  000EF6  51AF               	movf	doModeVerbose@nodeid_1238& (0+255),w,b
 13585  000EF8  EC3E  F021         	call	_printNodeFirmwareVersion
 13586                           
 13587                           ;main.c: 874: printGUID(nodeid);
 13588  000EFC  0102               	movlb	2	; () banked
 13589  000EFE  51AF               	movf	doModeVerbose@nodeid_1238& (0+255),w,b
 13590  000F00  EC21  F01E         	call	_printGUID
 13591                           
 13592                           ;main.c: 875: printMDF(nodeid);
 13593  000F04  0102               	movlb	2	; () banked
 13594  000F06  51AF               	movf	doModeVerbose@nodeid_1238& (0+255),w,b
 13595  000F08  ECB1  F025         	call	_printMDF
 13596                           
 13597                           ;main.c: 876: putsUSART((char *) "+OK\r\n");
 13598  000F0C  0E7F               	movlw	high STR_9
 13599  000F0E  0100               	movlb	0	; () banked
 13600  000F10  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13601  000F12  0E80               	movlw	low STR_9
 13602  000F14  6F61               	movwf	?_putsUSART& (0+255),b
 13603  000F16  EC84  F029         	call	_putsUSART	;wreg free
 13604                           
 13605                           ;main.c: 877: }
 13606  000F1A  D35D               	goto	l14198
 13607  000F1C                     l13972:
 13608                           
 13609                           ; BSR set to: 0
 13610                           ;main.c: 881: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13611  000F1C  0E01               	movlw	high _cmdbuf
 13612  000F1E  0100               	movlb	0	; () banked
 13613  000F20  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13614  000F22  0E26               	movlw	low _cmdbuf
 13615  000F24  6F6D               	movwf	?_stristr& (0+255),b
 13616  000F26  0E7F               	movlw	high STR_87
 13617  000F28  6F70               	movwf	(?_stristr+3)& (0+255),b
 13618  000F2A  0E57               	movlw	low STR_87
 13619  000F2C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13620  000F2E  EC0F  F027         	call	_stristr	;wreg free
 13621  000F32  0E26               	movlw	low _cmdbuf
 13622  000F34  6FC9               	movwf	??_doModeVerbose& (0+255),b
 13623  000F36  0E01               	movlw	high _cmdbuf
 13624  000F38  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 13625  000F3A  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13626  000F3C  E102               	bnz	u18705
 13627  000F3E  516D               	movf	?_stristr& (0+255),w,b
 13628  000F40  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 13629  000F42                     u18705:
 13630  000F42  E001 D0D5          	bnz	l14040
 13631                           
 13632                           ; BSR set to: 0
 13633                           ;main.c: 883: uint8_t filterno;
 13634                           ;main.c: 884: uint8_t filter_priority;
 13635                           ;main.c: 885: uint16_t filter_class;
 13636                           ;main.c: 886: uint8_t filter_type;
 13637                           ;main.c: 887: uint8_t filter_nodeid;
 13638                           ;main.c: 889: strcpy(cmdbuf, cmdbuf + 8);
 13639  000F46  0E01               	movlw	high _cmdbuf
 13640  000F48  DB6A               	call	PL6	;call to abstracted procedure
 13641  000F4A  ECE7  F02B         	call	_strcpy	;wreg free
 13642                           
 13643                           ; BSR set to: 0
 13644                           ;main.c: 890: char *p = strtok(cmdbuf, ",");
 13645  000F4E  DBA1               	call	PL28	;call to abstracted procedure
 13646  000F50  ECFB  F025         	call	_strtok	;wreg free
 13647  000F54  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1252
 13648  000F58  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1252+1
 13649                           
 13650                           ; BSR set to: 0
 13651                           ;main.c: 891: if ((0) != p) {
 13652  000F5C  0102               	movlb	2	; () banked
 13653  000F5E  51BA               	movf	(doModeVerbose@p_1252+1)& (0+255),w,b
 13654  000F60  11B9               	iorwf	doModeVerbose@p_1252& (0+255),w,b
 13655  000F62  E014               	bz	l13988
 13656                           
 13657                           ; BSR set to: 2
 13658                           ;main.c: 892: filterno = atoi(p);
 13659  000F64  C2B9  F066         	movff	doModeVerbose@p_1252,?_atoi
 13660  000F68  C2BA  F067         	movff	doModeVerbose@p_1252+1,?_atoi+1
 13661  000F6C  EC9E  F01D         	call	_atoi	;wreg free
 13662  000F70  5166               	movf	?_atoi& (0+255),w,b
 13663  000F72  0102               	movlb	2	; () banked
 13664  000F74  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 13665                           
 13666                           ; BSR set to: 2
 13667                           ;main.c: 893: if (filterno > 15) {
 13668  000F76  0E0F               	movlw	15
 13669  000F78  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13670  000F7A  D010               	goto	l13992
 13671                           
 13672                           ; BSR set to: 2
 13673                           ;main.c: 894: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13674  000F7C  0E72               	movlw	high STR_89
 13675  000F7E  0100               	movlb	0	; () banked
 13676  000F80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13677  000F82  0E18               	movlw	low STR_89
 13678  000F84  6F61               	movwf	?_putsUSART& (0+255),b
 13679  000F86  EC84  F029         	call	_putsUSART	;wreg free
 13680  000F8A  D333               	goto	l541
 13681  000F8C                     l13988:
 13682                           
 13683                           ; BSR set to: 2
 13684                           ;main.c: 898: else {
 13685                           ;main.c: 899: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13686  000F8C  0E77               	movlw	high STR_90
 13687  000F8E  0100               	movlb	0	; () banked
 13688  000F90  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13689  000F92  0EFB               	movlw	low STR_90
 13690  000F94  6F61               	movwf	?_putsUSART& (0+255),b
 13691  000F96  EC84  F029         	call	_putsUSART	;wreg free
 13692  000F9A  D32B               	goto	l541
 13693  000F9C                     l13992:
 13694                           
 13695                           ; BSR set to: 2
 13696                           ;main.c: 901: }
 13697                           ;main.c: 904: p = strtok((0), ",");
 13698  000F9C  0100               	movlb	0	; () banked
 13699  000F9E  DB38               	call	PL4	;call to abstracted procedure
 13700  000FA0  ECFB  F025         	call	_strtok	;wreg free
 13701  000FA4  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1252
 13702  000FA8  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1252+1
 13703                           
 13704                           ; BSR set to: 0
 13705                           ;main.c: 905: if ((0) != p) {
 13706  000FAC  0102               	movlb	2	; () banked
 13707  000FAE  51BA               	movf	(doModeVerbose@p_1252+1)& (0+255),w,b
 13708  000FB0  11B9               	iorwf	doModeVerbose@p_1252& (0+255),w,b
 13709  000FB2  E00A               	bz	l13998
 13710                           
 13711                           ; BSR set to: 2
 13712                           ;main.c: 906: filter_priority = atoi(p);
 13713  000FB4  C2B9  F066         	movff	doModeVerbose@p_1252,?_atoi
 13714  000FB8  C2BA  F067         	movff	doModeVerbose@p_1252+1,?_atoi+1
 13715  000FBC  EC9E  F01D         	call	_atoi	;wreg free
 13716  000FC0  5166               	movf	?_atoi& (0+255),w,b
 13717  000FC2  0102               	movlb	2	; () banked
 13718  000FC4  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 13719                           
 13720                           ;main.c: 907: }
 13721  000FC6  D008               	goto	l14002
 13722  000FC8                     l13998:
 13723                           
 13724                           ; BSR set to: 2
 13725                           ;main.c: 908: else {
 13726                           ;main.c: 909: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 13727  000FC8  0E77               	movlw	high STR_92
 13728  000FCA  0100               	movlb	0	; () banked
 13729  000FCC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13730  000FCE  0E30               	movlw	low STR_92
 13731  000FD0  6F61               	movwf	?_putsUSART& (0+255),b
 13732  000FD2  EC84  F029         	call	_putsUSART	;wreg free
 13733  000FD6  D30D               	goto	l541
 13734  000FD8                     l14002:
 13735                           
 13736                           ; BSR set to: 2
 13737                           ;main.c: 911: }
 13738                           ;main.c: 914: p = strtok((0), ",");
 13739  000FD8  0100               	movlb	0	; () banked
 13740  000FDA  DB1A               	call	PL4	;call to abstracted procedure
 13741  000FDC  ECFB  F025         	call	_strtok	;wreg free
 13742  000FE0  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1252
 13743  000FE4  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1252+1
 13744                           
 13745                           ; BSR set to: 0
 13746                           ;main.c: 915: if ((0) != p) {
 13747  000FE8  0102               	movlb	2	; () banked
 13748  000FEA  51BA               	movf	(doModeVerbose@p_1252+1)& (0+255),w,b
 13749  000FEC  11B9               	iorwf	doModeVerbose@p_1252& (0+255),w,b
 13750  000FEE  E00B               	bz	l14008
 13751                           
 13752                           ; BSR set to: 2
 13753                           ;main.c: 916: filter_class = atoi(p);
 13754  000FF0  C2B9  F066         	movff	doModeVerbose@p_1252,?_atoi
 13755  000FF4  C2BA  F067         	movff	doModeVerbose@p_1252+1,?_atoi+1
 13756  000FF8  EC9E  F01D         	call	_atoi	;wreg free
 13757  000FFC  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 13758  001000  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 13759                           
 13760                           ;main.c: 917: }
 13761  001004  D008               	goto	l14012
 13762  001006                     l14008:
 13763                           
 13764                           ; BSR set to: 2
 13765                           ;main.c: 918: else {
 13766                           ;main.c: 919: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 13767  001006  0E78               	movlw	high STR_94
 13768  001008  0100               	movlb	0	; () banked
 13769  00100A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13770  00100C  0E97               	movlw	low STR_94
 13771  00100E  6F61               	movwf	?_putsUSART& (0+255),b
 13772  001010  EC84  F029         	call	_putsUSART	;wreg free
 13773  001014  D2EE               	goto	l541
 13774  001016                     l14012:
 13775                           
 13776                           ; BSR set to: 0
 13777                           ;main.c: 921: }
 13778                           ;main.c: 924: p = strtok((0), ",");
 13779  001016  DAFC               	call	PL4	;call to abstracted procedure
 13780  001018  ECFB  F025         	call	_strtok	;wreg free
 13781  00101C  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1252
 13782  001020  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1252+1
 13783                           
 13784                           ; BSR set to: 0
 13785                           ;main.c: 925: if ((0) != p) {
 13786  001024  0102               	movlb	2	; () banked
 13787  001026  51BA               	movf	(doModeVerbose@p_1252+1)& (0+255),w,b
 13788  001028  11B9               	iorwf	doModeVerbose@p_1252& (0+255),w,b
 13789  00102A  E00A               	bz	l14018
 13790                           
 13791                           ; BSR set to: 2
 13792                           ;main.c: 926: filter_type = atoi(p);
 13793  00102C  C2B9  F066         	movff	doModeVerbose@p_1252,?_atoi
 13794  001030  C2BA  F067         	movff	doModeVerbose@p_1252+1,?_atoi+1
 13795  001034  EC9E  F01D         	call	_atoi	;wreg free
 13796  001038  5166               	movf	?_atoi& (0+255),w,b
 13797  00103A  0102               	movlb	2	; () banked
 13798  00103C  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 13799                           
 13800                           ;main.c: 927: }
 13801  00103E  D008               	goto	l14022
 13802  001040                     l14018:
 13803                           
 13804                           ; BSR set to: 2
 13805                           ;main.c: 928: else {
 13806                           ;main.c: 929: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 13807  001040  0E78               	movlw	high STR_96
 13808  001042  0100               	movlb	0	; () banked
 13809  001044  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13810  001046  0EE5               	movlw	low STR_96
 13811  001048  6F61               	movwf	?_putsUSART& (0+255),b
 13812  00104A  EC84  F029         	call	_putsUSART	;wreg free
 13813  00104E  D2D1               	goto	l541
 13814  001050                     l14022:
 13815                           
 13816                           ; BSR set to: 2
 13817                           ;main.c: 931: }
 13818                           ;main.c: 934: p = strtok((0), ",");
 13819  001050  0100               	movlb	0	; () banked
 13820  001052  DADE               	call	PL4	;call to abstracted procedure
 13821  001054  ECFB  F025         	call	_strtok	;wreg free
 13822  001058  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1252
 13823  00105C  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1252+1
 13824                           
 13825                           ; BSR set to: 0
 13826                           ;main.c: 935: if ((0) != p) {
 13827  001060  0102               	movlb	2	; () banked
 13828  001062  51BA               	movf	(doModeVerbose@p_1252+1)& (0+255),w,b
 13829  001064  11B9               	iorwf	doModeVerbose@p_1252& (0+255),w,b
 13830  001066  E00A               	bz	l14028
 13831                           
 13832                           ; BSR set to: 2
 13833                           ;main.c: 936: filter_nodeid = atoi(p);
 13834  001068  C2B9  F066         	movff	doModeVerbose@p_1252,?_atoi
 13835  00106C  C2BA  F067         	movff	doModeVerbose@p_1252+1,?_atoi+1
 13836  001070  EC9E  F01D         	call	_atoi	;wreg free
 13837  001074  5166               	movf	?_atoi& (0+255),w,b
 13838  001076  0102               	movlb	2	; () banked
 13839  001078  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 13840                           
 13841                           ;main.c: 937: }
 13842  00107A  D008               	goto	l14032
 13843  00107C                     l14028:
 13844                           
 13845                           ; BSR set to: 2
 13846                           ;main.c: 938: else {
 13847                           ;main.c: 939: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 13848  00107C  0E77               	movlw	high STR_98
 13849  00107E  0100               	movlb	0	; () banked
 13850  001080  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13851  001082  0E5A               	movlw	low STR_98
 13852  001084  6F61               	movwf	?_putsUSART& (0+255),b
 13853  001086  EC84  F029         	call	_putsUSART	;wreg free
 13854  00108A  D2B3               	goto	l541
 13855  00108C                     l14032:
 13856                           
 13857                           ; BSR set to: 2
 13858                           ;main.c: 941: }
 13859                           ;main.c: 944: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13860  00108C  0E80               	movlw	128
 13861  00108E  EC43  F02C         	call	_ECANSetOperationMode
 13862                           
 13863                           ; BSR set to: 0
 13864                           ;main.c: 946: uint32_t id = ((uint32_t) filter_priority << 26) |
 13865                           ;main.c: 947: ((uint32_t) filter_class << 16) |
 13866                           ;main.c: 948: ((uint32_t) filter_type << 8) |
 13867                           ;main.c: 949: filter_nodeid;
 13868  001092  C28F  F0C9         	movff	doModeVerbose@filter_type,??_doModeVerbose
 13869  001096  DB1D               	call	PL40	;call to abstracted procedure
 13870  001098  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 13871  00109A  0100               	movlb	0	; () banked
 13872  00109C  6FCD               	movwf	(??_doModeVerbose+4)& (0+255),b
 13873  00109E  0102               	movlb	2	; () banked
 13874  0010A0  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 13875  0010A2  DB30               	call	PL54	;call to abstracted procedure
 13876  0010A4  C28E  F0D1         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 13877  0010A8  DAC7               	call	PL8	;call to abstracted procedure
 13878  0010AA  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 13879  0010AC  0100               	movlb	0	; () banked
 13880  0010AE  11D9               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13881  0010B0  0102               	movlb	2	; () banked
 13882  0010B2  6F80               	movwf	doModeVerbose@id& (0+255),b
 13883  0010B4  0100               	movlb	0	; () banked
 13884  0010B6  51DA               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13885  0010B8  0102               	movlb	2	; () banked
 13886  0010BA  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 13887  0010BC  0100               	movlb	0	; () banked
 13888  0010BE  51DB               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13889  0010C0  0102               	movlb	2	; () banked
 13890  0010C2  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 13891  0010C4  0100               	movlb	0	; () banked
 13892  0010C6  51DC               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13893  0010C8  0102               	movlb	2	; () banked
 13894  0010CA  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 13895                           
 13896                           ; BSR set to: 2
 13897                           ;main.c: 950: setFilter(filterno, id);
 13898  0010CC  C280  F060         	movff	doModeVerbose@id,?_setFilter
 13899  0010D0  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 13900  0010D4  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 13901  0010D8  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 13902  0010DC  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 13903  0010DE  ECC0  F014         	call	_setFilter
 13904                           
 13905                           ; BSR set to: 0
 13906                           ;main.c: 951: putsUSART((char *) "+OK\r\n");
 13907  0010E2  0E7F               	movlw	high STR_9
 13908  0010E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13909  0010E6  0E80               	movlw	low STR_9
 13910  0010E8  6F61               	movwf	?_putsUSART& (0+255),b
 13911  0010EA  EC84  F029         	call	_putsUSART	;wreg free
 13912                           
 13913                           ;main.c: 952: }
 13914  0010EE  D273               	goto	l14198
 13915  0010F0                     l14040:
 13916                           
 13917                           ; BSR set to: 0
 13918                           ;main.c: 956: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 13919  0010F0  0E01               	movlw	high _cmdbuf
 13920  0010F2  0100               	movlb	0	; () banked
 13921  0010F4  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13922  0010F6  0E26               	movlw	low _cmdbuf
 13923  0010F8  6F6D               	movwf	?_stristr& (0+255),b
 13924  0010FA  0E7F               	movlw	high STR_100
 13925  0010FC  6F70               	movwf	(?_stristr+3)& (0+255),b
 13926  0010FE  0EB2               	movlw	low STR_100
 13927  001100  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13928  001102  EC0F  F027         	call	_stristr	;wreg free
 13929  001106  0E26               	movlw	low _cmdbuf
 13930  001108  6FC9               	movwf	??_doModeVerbose& (0+255),b
 13931  00110A  0E01               	movlw	high _cmdbuf
 13932  00110C  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 13933  00110E  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 13934  001110  E102               	bnz	u18785
 13935  001112  516D               	movf	?_stristr& (0+255),w,b
 13936  001114  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 13937  001116                     u18785:
 13938  001116  E001 D0DC          	bnz	l14112
 13939                           
 13940                           ; BSR set to: 0
 13941                           ;main.c: 958: uint8_t maskno;
 13942                           ;main.c: 959: uint8_t mask_priority;
 13943                           ;main.c: 960: uint16_t mask_class;
 13944                           ;main.c: 961: uint8_t mask_type;
 13945                           ;main.c: 962: uint8_t mask_nodeid;
 13946                           ;main.c: 964: strcpy(cmdbuf, cmdbuf + 8);
 13947  00111A  0E01               	movlw	high _cmdbuf
 13948  00111C  DA80               	call	PL6	;call to abstracted procedure
 13949  00111E  ECE7  F02B         	call	_strcpy	;wreg free
 13950                           
 13951                           ; BSR set to: 0
 13952                           ;main.c: 965: char *p = strtok(cmdbuf, ",");
 13953  001122  DAB7               	call	PL28	;call to abstracted procedure
 13954  001124  ECFB  F025         	call	_strtok	;wreg free
 13955  001128  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1272
 13956  00112C  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1272+1
 13957                           
 13958                           ; BSR set to: 0
 13959                           ;main.c: 966: if ((0) != p) {
 13960  001130  0102               	movlb	2	; () banked
 13961  001132  51BC               	movf	(doModeVerbose@p_1272+1)& (0+255),w,b
 13962  001134  11BB               	iorwf	doModeVerbose@p_1272& (0+255),w,b
 13963  001136  E014               	bz	l14056
 13964                           
 13965                           ; BSR set to: 2
 13966                           ;main.c: 967: maskno = atoi(p);
 13967  001138  C2BB  F066         	movff	doModeVerbose@p_1272,?_atoi
 13968  00113C  C2BC  F067         	movff	doModeVerbose@p_1272+1,?_atoi+1
 13969  001140  EC9E  F01D         	call	_atoi	;wreg free
 13970  001144  5166               	movf	?_atoi& (0+255),w,b
 13971  001146  0102               	movlb	2	; () banked
 13972  001148  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 13973                           
 13974                           ; BSR set to: 2
 13975                           ;main.c: 968: if (maskno > 1) {
 13976  00114A  0E01               	movlw	1
 13977  00114C  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 13978  00114E  D010               	goto	l14060
 13979                           
 13980                           ; BSR set to: 2
 13981                           ;main.c: 969: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 13982  001150  0E75               	movlw	high STR_102
 13983  001152  0100               	movlb	0	; () banked
 13984  001154  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13985  001156  0E2A               	movlw	low STR_102
 13986  001158  6F61               	movwf	?_putsUSART& (0+255),b
 13987  00115A  EC84  F029         	call	_putsUSART	;wreg free
 13988  00115E  D249               	goto	l541
 13989  001160                     l14056:
 13990                           
 13991                           ; BSR set to: 2
 13992                           ;main.c: 973: else {
 13993                           ;main.c: 974: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 13994  001160  0E79               	movlw	high STR_103
 13995  001162  0100               	movlb	0	; () banked
 13996  001164  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13997  001166  0E0B               	movlw	low STR_103
 13998  001168  6F61               	movwf	?_putsUSART& (0+255),b
 13999  00116A  EC84  F029         	call	_putsUSART	;wreg free
 14000  00116E  D241               	goto	l541
 14001  001170                     l14060:
 14002                           
 14003                           ; BSR set to: 2
 14004                           ;main.c: 976: }
 14005                           ;main.c: 979: p = strtok((0), ",");
 14006  001170  0100               	movlb	0	; () banked
 14007  001172  DA4E               	call	PL4	;call to abstracted procedure
 14008  001174  ECFB  F025         	call	_strtok	;wreg free
 14009  001178  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1272
 14010  00117C  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1272+1
 14011                           
 14012                           ; BSR set to: 0
 14013                           ;main.c: 980: if ((0) != p) {
 14014  001180  0102               	movlb	2	; () banked
 14015  001182  51BC               	movf	(doModeVerbose@p_1272+1)& (0+255),w,b
 14016  001184  11BB               	iorwf	doModeVerbose@p_1272& (0+255),w,b
 14017  001186  E00A               	bz	l14066
 14018                           
 14019                           ; BSR set to: 2
 14020                           ;main.c: 981: mask_priority = atoi(p);
 14021  001188  C2BB  F066         	movff	doModeVerbose@p_1272,?_atoi
 14022  00118C  C2BC  F067         	movff	doModeVerbose@p_1272+1,?_atoi+1
 14023  001190  EC9E  F01D         	call	_atoi	;wreg free
 14024  001194  5166               	movf	?_atoi& (0+255),w,b
 14025  001196  0102               	movlb	2	; () banked
 14026  001198  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 14027                           
 14028                           ;main.c: 982: }
 14029  00119A  D008               	goto	l14070
 14030  00119C                     l14066:
 14031                           
 14032                           ; BSR set to: 2
 14033                           ;main.c: 983: else {
 14034                           ;main.c: 984: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 14035  00119C  0E77               	movlw	high STR_105
 14036  00119E  0100               	movlb	0	; () banked
 14037  0011A0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14038  0011A2  0EAB               	movlw	low STR_105
 14039  0011A4  6F61               	movwf	?_putsUSART& (0+255),b
 14040  0011A6  EC84  F029         	call	_putsUSART	;wreg free
 14041  0011AA  D223               	goto	l541
 14042  0011AC                     l14070:
 14043                           
 14044                           ; BSR set to: 2
 14045                           ;main.c: 986: }
 14046                           ;main.c: 989: p = strtok((0), ",");
 14047  0011AC  0100               	movlb	0	; () banked
 14048  0011AE  DA30               	call	PL4	;call to abstracted procedure
 14049  0011B0  ECFB  F025         	call	_strtok	;wreg free
 14050  0011B4  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1272
 14051  0011B8  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1272+1
 14052                           
 14053                           ; BSR set to: 0
 14054                           ;main.c: 990: if ((0) != p) {
 14055  0011BC  0102               	movlb	2	; () banked
 14056  0011BE  51BC               	movf	(doModeVerbose@p_1272+1)& (0+255),w,b
 14057  0011C0  11BB               	iorwf	doModeVerbose@p_1272& (0+255),w,b
 14058  0011C2  E00B               	bz	l14076
 14059                           
 14060                           ; BSR set to: 2
 14061                           ;main.c: 991: mask_class = atoi(p);
 14062  0011C4  C2BB  F066         	movff	doModeVerbose@p_1272,?_atoi
 14063  0011C8  C2BC  F067         	movff	doModeVerbose@p_1272+1,?_atoi+1
 14064  0011CC  EC9E  F01D         	call	_atoi	;wreg free
 14065  0011D0  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 14066  0011D4  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 14067                           
 14068                           ;main.c: 992: }
 14069  0011D8  D008               	goto	l14080
 14070  0011DA                     l14076:
 14071                           
 14072                           ; BSR set to: 2
 14073                           ;main.c: 993: else {
 14074                           ;main.c: 994: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 14075  0011DA  0E79               	movlw	high STR_107
 14076  0011DC  0100               	movlb	0	; () banked
 14077  0011DE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14078  0011E0  0E55               	movlw	low STR_107
 14079  0011E2  6F61               	movwf	?_putsUSART& (0+255),b
 14080  0011E4  EC84  F029         	call	_putsUSART	;wreg free
 14081  0011E8  D204               	goto	l541
 14082  0011EA                     l14080:
 14083                           
 14084                           ; BSR set to: 0
 14085                           ;main.c: 996: }
 14086                           ;main.c: 999: p = strtok((0), ",");
 14087  0011EA  DA12               	call	PL4	;call to abstracted procedure
 14088  0011EC  ECFB  F025         	call	_strtok	;wreg free
 14089  0011F0  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1272
 14090  0011F4  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1272+1
 14091                           
 14092                           ; BSR set to: 0
 14093                           ;main.c: 1000: if ((0) != p) {
 14094  0011F8  0102               	movlb	2	; () banked
 14095  0011FA  51BC               	movf	(doModeVerbose@p_1272+1)& (0+255),w,b
 14096  0011FC  11BB               	iorwf	doModeVerbose@p_1272& (0+255),w,b
 14097  0011FE  E00A               	bz	l14086
 14098                           
 14099                           ; BSR set to: 2
 14100                           ;main.c: 1001: mask_type = atoi(p);
 14101  001200  C2BB  F066         	movff	doModeVerbose@p_1272,?_atoi
 14102  001204  C2BC  F067         	movff	doModeVerbose@p_1272+1,?_atoi+1
 14103  001208  EC9E  F01D         	call	_atoi	;wreg free
 14104  00120C  5166               	movf	?_atoi& (0+255),w,b
 14105  00120E  0102               	movlb	2	; () banked
 14106  001210  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 14107                           
 14108                           ;main.c: 1002: }
 14109  001212  D008               	goto	l14090
 14110  001214                     l14086:
 14111                           
 14112                           ; BSR set to: 2
 14113                           ;main.c: 1003: else {
 14114                           ;main.c: 1004: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 14115  001214  0E79               	movlw	high STR_109
 14116  001216  0100               	movlb	0	; () banked
 14117  001218  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14118  00121A  0E7A               	movlw	low STR_109
 14119  00121C  6F61               	movwf	?_putsUSART& (0+255),b
 14120  00121E  EC84  F029         	call	_putsUSART	;wreg free
 14121  001222  D1E7               	goto	l541
 14122  001224                     l14090:
 14123                           
 14124                           ; BSR set to: 2
 14125                           ;main.c: 1006: }
 14126                           ;main.c: 1009: p = strtok((0), ",");
 14127  001224  0100               	movlb	0	; () banked
 14128  001226  D9F4               	call	PL4	;call to abstracted procedure
 14129  001228  ECFB  F025         	call	_strtok	;wreg free
 14130  00122C  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1272
 14131  001230  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1272+1
 14132                           
 14133                           ; BSR set to: 0
 14134                           ;main.c: 1010: if ((0) != p) {
 14135  001234  0102               	movlb	2	; () banked
 14136  001236  51BC               	movf	(doModeVerbose@p_1272+1)& (0+255),w,b
 14137  001238  11BB               	iorwf	doModeVerbose@p_1272& (0+255),w,b
 14138  00123A  E00A               	bz	l14096
 14139                           
 14140                           ; BSR set to: 2
 14141                           ;main.c: 1011: mask_nodeid = atoi(p);
 14142  00123C  C2BB  F066         	movff	doModeVerbose@p_1272,?_atoi
 14143  001240  C2BC  F067         	movff	doModeVerbose@p_1272+1,?_atoi+1
 14144  001244  EC9E  F01D         	call	_atoi	;wreg free
 14145  001248  5166               	movf	?_atoi& (0+255),w,b
 14146  00124A  0102               	movlb	2	; () banked
 14147  00124C  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14148                           
 14149                           ;main.c: 1012: }
 14150  00124E  D008               	goto	l14100
 14151  001250                     l14096:
 14152                           
 14153                           ; BSR set to: 2
 14154                           ;main.c: 1013: else {
 14155                           ;main.c: 1014: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14156  001250  0E78               	movlw	high STR_111
 14157  001252  0100               	movlb	0	; () banked
 14158  001254  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14159  001256  0E70               	movlw	low STR_111
 14160  001258  6F61               	movwf	?_putsUSART& (0+255),b
 14161  00125A  EC84  F029         	call	_putsUSART	;wreg free
 14162  00125E  D1C9               	goto	l541
 14163  001260                     l14100:
 14164                           
 14165                           ; BSR set to: 2
 14166                           ;main.c: 1016: }
 14167                           ;main.c: 1018: uint32_t id = ((uint32_t) mask_priority << 26) |
 14168                           ;main.c: 1019: ((uint32_t) mask_class << 16) |
 14169                           ;main.c: 1020: ((uint32_t) mask_type << 8) |
 14170                           ;main.c: 1021: mask_nodeid;
 14171  001260  C292  F0C9         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14172  001264  DA36               	call	PL40	;call to abstracted procedure
 14173  001266  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14174  001268  0100               	movlb	0	; () banked
 14175  00126A  6FCD               	movwf	(??_doModeVerbose+4)& (0+255),b
 14176  00126C  0102               	movlb	2	; () banked
 14177  00126E  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14178  001270  DA49               	call	PL54	;call to abstracted procedure
 14179  001272  C291  F0D1         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14180  001276  D9E0               	call	PL8	;call to abstracted procedure
 14181  001278  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14182  00127A  0100               	movlb	0	; () banked
 14183  00127C  11D9               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14184  00127E  0102               	movlb	2	; () banked
 14185  001280  6FA3               	movwf	doModeVerbose@id_1284& (0+255),b
 14186  001282  0100               	movlb	0	; () banked
 14187  001284  51DA               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14188  001286  0102               	movlb	2	; () banked
 14189  001288  6FA4               	movwf	(doModeVerbose@id_1284+1)& (0+255),b
 14190  00128A  0100               	movlb	0	; () banked
 14191  00128C  51DB               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14192  00128E  0102               	movlb	2	; () banked
 14193  001290  6FA5               	movwf	(doModeVerbose@id_1284+2)& (0+255),b
 14194  001292  0100               	movlb	0	; () banked
 14195  001294  51DC               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14196  001296  0102               	movlb	2	; () banked
 14197  001298  6FA6               	movwf	(doModeVerbose@id_1284+3)& (0+255),b
 14198                           
 14199                           ; BSR set to: 2
 14200                           ;main.c: 1024: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14201  00129A  0E80               	movlw	128
 14202  00129C  EC43  F02C         	call	_ECANSetOperationMode
 14203                           
 14204                           ; BSR set to: 0
 14205                           ;main.c: 1026: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14206                           ;main.c: 1027: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14207  0012A0  0102               	movlb	2	; () banked
 14208  0012A2  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 14209  0012A4  E008               	bz	l14108
 14210                           
 14211                           ; BSR set to: 2
 14212  0012A6  0E0F               	movlw	15	;volatile
 14213  0012A8  0100               	movlb	0	; () banked
 14214  0012AA  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14215  0012AC  0E18               	movlw	24	;volatile
 14216  0012AE  DA1E               	call	PL50	;call to abstracted procedure
 14217  0012B0  EC14  F01D         	call	__CANIDToRegs	;wreg free
 14218  0012B4  D007               	goto	l14110
 14219  0012B6                     l14108:
 14220                           
 14221                           ; BSR set to: 2
 14222  0012B6  0E0F               	movlw	15	;volatile
 14223  0012B8  0100               	movlb	0	; () banked
 14224  0012BA  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 14225  0012BC  0E1C               	movlw	28	;volatile
 14226  0012BE  DA16               	call	PL50	;call to abstracted procedure
 14227  0012C0  EC14  F01D         	call	__CANIDToRegs	;wreg free
 14228  0012C4                     l14110:
 14229                           
 14230                           ; BSR set to: 0
 14231                           ;main.c: 1028: putsUSART((char *) "+OK\r\n");
 14232  0012C4  0E7F               	movlw	high STR_9
 14233  0012C6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14234  0012C8  0E80               	movlw	low STR_9
 14235  0012CA  6F61               	movwf	?_putsUSART& (0+255),b
 14236  0012CC  EC84  F029         	call	_putsUSART	;wreg free
 14237                           
 14238                           ;main.c: 1029: }
 14239  0012D0  D182               	goto	l14198
 14240  0012D2                     l14112:
 14241                           
 14242                           ; BSR set to: 0
 14243                           ;main.c: 1036: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14244  0012D2  0E01               	movlw	high _cmdbuf
 14245  0012D4  0100               	movlb	0	; () banked
 14246  0012D6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14247  0012D8  0E26               	movlw	low _cmdbuf
 14248  0012DA  6F6D               	movwf	?_stristr& (0+255),b
 14249  0012DC  0E7F               	movlw	high STR_113
 14250  0012DE  6F70               	movwf	(?_stristr+3)& (0+255),b
 14251  0012E0  0E9E               	movlw	low STR_113
 14252  0012E2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14253  0012E4  EC0F  F027         	call	_stristr	;wreg free
 14254  0012E8  0E26               	movlw	low _cmdbuf
 14255  0012EA  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14256  0012EC  0E01               	movlw	high _cmdbuf
 14257  0012EE  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14258  0012F0  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14259  0012F2  E102               	bnz	u18875
 14260  0012F4  516D               	movf	?_stristr& (0+255),w,b
 14261  0012F6  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 14262  0012F8                     u18875:
 14263  0012F8  E001 D15A          	bnz	l14192
 14264                           
 14265                           ; BSR set to: 0
 14266                           ;main.c: 1039: strcpy(cmdbuf, cmdbuf + 4);
 14267  0012FC  0E01               	movlw	high _cmdbuf
 14268  0012FE  0100               	movlb	0	; () banked
 14269  001300  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14270  001302  0E26               	movlw	low _cmdbuf
 14271  001304  6F60               	movwf	?_strcpy& (0+255),b
 14272  001306  0E2A               	movlw	low (_cmdbuf+4)
 14273  001308  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14274  00130A  0E01               	movlw	high (_cmdbuf+4)
 14275  00130C  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14276  00130E  C0C9  F062         	movff	??_doModeVerbose,?_strcpy+2
 14277  001312  C0CA  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14278  001316  ECE7  F02B         	call	_strcpy	;wreg free
 14279                           
 14280                           ; BSR set to: 0
 14281                           ;main.c: 1042: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14282  00131A  0E01               	movlw	high _cmdbuf
 14283  00131C  0100               	movlb	0	; () banked
 14284  00131E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14285  001320  0E26               	movlw	low _cmdbuf
 14286  001322  6F6D               	movwf	?_stristr& (0+255),b
 14287  001324  0E7F               	movlw	high STR_114
 14288  001326  6F70               	movwf	(?_stristr+3)& (0+255),b
 14289  001328  0EDD               	movlw	low STR_114
 14290  00132A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14291  00132C  EC0F  F027         	call	_stristr	;wreg free
 14292  001330  0E26               	movlw	low _cmdbuf
 14293  001332  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14294  001334  0E01               	movlw	high _cmdbuf
 14295  001336  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14296  001338  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14297  00133A  E102               	bnz	u18885
 14298  00133C  516D               	movf	?_stristr& (0+255),w,b
 14299  00133E  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 14300  001340                     u18885:
 14301  001340  E114               	bnz	l14124
 14302                           
 14303                           ; BSR set to: 0
 14304                           ;main.c: 1043: bHex = 1;
 14305  001342  0E01               	movlw	1
 14306  001344  6FE4               	movwf	_bHex& (0+255),b
 14307                           
 14308                           ; BSR set to: 0
 14309                           ;main.c: 1044: (Busy_eep(), Write_b_eep(0x06,1));
 14310  001346  EC84  F02C         	call	_Busy_eep	;wreg free
 14311  00134A  0100               	movlb	0	; () banked
 14312  00134C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14313  00134E  0E06               	movlw	6
 14314  001350  6F60               	movwf	?_Write_b_eep& (0+255),b
 14315  001352  0E01               	movlw	1
 14316  001354  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14317  001356  EC9D  F02B         	call	_Write_b_eep	;wreg free
 14318                           
 14319                           ;main.c: 1045: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14320  00135A  0E77               	movlw	high STR_115
 14321  00135C  0100               	movlb	0	; () banked
 14322  00135E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14323  001360  0E04               	movlw	low STR_115
 14324  001362  6F61               	movwf	?_putsUSART& (0+255),b
 14325  001364  EC84  F029         	call	_putsUSART	;wreg free
 14326                           
 14327                           ;main.c: 1046: }
 14328  001368  D136               	goto	l14198
 14329  00136A                     l14124:
 14330                           
 14331                           ; BSR set to: 0
 14332                           ;main.c: 1048: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14333  00136A  0E01               	movlw	high _cmdbuf
 14334  00136C  0100               	movlb	0	; () banked
 14335  00136E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14336  001370  0E26               	movlw	low _cmdbuf
 14337  001372  6F6D               	movwf	?_stristr& (0+255),b
 14338  001374  0E7F               	movlw	high STR_116
 14339  001376  6F70               	movwf	(?_stristr+3)& (0+255),b
 14340  001378  0E06               	movlw	low STR_116
 14341  00137A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14342  00137C  EC0F  F027         	call	_stristr	;wreg free
 14343  001380  0E26               	movlw	low _cmdbuf
 14344  001382  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14345  001384  0E01               	movlw	high _cmdbuf
 14346  001386  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14347  001388  196E               	xorwf	(?_stristr+1)& (0+255),w,b
 14348  00138A  E102               	bnz	u18895
 14349  00138C  516D               	movf	?_stristr& (0+255),w,b
 14350  00138E  19C9               	xorwf	??_doModeVerbose& (0+255),w,b
 14351  001390                     u18895:
 14352  001390  E113               	bnz	l14134
 14353                           
 14354                           ; BSR set to: 0
 14355                           ;main.c: 1049: bHex = 0;
 14356  001392  6BE4               	clrf	_bHex& (0+255),b
 14357                           
 14358                           ; BSR set to: 0
 14359                           ;main.c: 1050: (Busy_eep(), Write_b_eep(0x06,0));
 14360  001394  EC84  F02C         	call	_Busy_eep	;wreg free
 14361  001398  0100               	movlb	0	; () banked
 14362  00139A  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14363  00139C  0E06               	movlw	6
 14364  00139E  6F60               	movwf	?_Write_b_eep& (0+255),b
 14365  0013A0  0E00               	movlw	0
 14366  0013A2  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14367  0013A4  EC9D  F02B         	call	_Write_b_eep	;wreg free
 14368                           
 14369                           ;main.c: 1051: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14370  0013A8  0E77               	movlw	high STR_117
 14371  0013AA  0100               	movlb	0	; () banked
 14372  0013AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14373  0013AE  0ED3               	movlw	low STR_117
 14374  0013B0  6F61               	movwf	?_putsUSART& (0+255),b
 14375  0013B2  EC84  F029         	call	_putsUSART	;wreg free
 14376                           
 14377                           ;main.c: 1052: }
 14378  0013B6  D10F               	goto	l14198
 14379  0013B8                     l14134:
 14380                           
 14381                           ; BSR set to: 0
 14382                           ;main.c: 1053: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14383  0013B8  0E01               	movlw	high _cmdbuf
 14384  0013BA  0100               	movlb	0	; () banked
 14385  0013BC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14386  0013BE  0E26               	movlw	low _cmdbuf
 14387  0013C0  6F6D               	movwf	?_stristr& (0+255),b
 14388  0013C2  0E7E               	movlw	high STR_118
 14389  0013C4  6F70               	movwf	(?_stristr+3)& (0+255),b
 14390  0013C6  0E87               	movlw	low STR_118
 14391  0013C8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14392  0013CA  EC0F  F027         	call	_stristr	;wreg free
 14393  0013CE  516E               	movf	(?_stristr+1)& (0+255),w,b
 14394  0013D0  116D               	iorwf	?_stristr& (0+255),w,b
 14395  0013D2  E02E               	bz	l14148
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;main.c: 1054: strcpy(cmdbuf, cmdbuf + 10);
 14399  0013D4  0E01               	movlw	high _cmdbuf
 14400  0013D6  0100               	movlb	0	; () banked
 14401  0013D8  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14402  0013DA  0E26               	movlw	low _cmdbuf
 14403  0013DC  6F60               	movwf	?_strcpy& (0+255),b
 14404  0013DE  0E30               	movlw	low (_cmdbuf+10)
 14405  0013E0  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14406  0013E2  0E01               	movlw	high (_cmdbuf+10)
 14407  0013E4  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14408  0013E6  C0C9  F062         	movff	??_doModeVerbose,?_strcpy+2
 14409  0013EA  C0CA  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14410  0013EE  ECE7  F02B         	call	_strcpy	;wreg free
 14411                           
 14412                           ; BSR set to: 0
 14413                           ;main.c: 1055: rwtimeout = atoi(cmdbuf);
 14414  0013F2  0E01               	movlw	high _cmdbuf
 14415  0013F4  0100               	movlb	0	; () banked
 14416  0013F6  6F67               	movwf	(?_atoi+1)& (0+255),b
 14417  0013F8  0E26               	movlw	low _cmdbuf
 14418  0013FA  6F66               	movwf	?_atoi& (0+255),b
 14419  0013FC  EC9E  F01D         	call	_atoi	;wreg free
 14420  001400  5166               	movf	?_atoi& (0+255),w,b
 14421  001402  6FE8               	movwf	_rwtimeout& (0+255),b
 14422                           
 14423                           ; BSR set to: 0
 14424                           ;main.c: 1056: if (rwtimeout < 10u) {
 14425  001404  0E0A               	movlw	10
 14426  001406  61E8               	cpfslt	_rwtimeout& (0+255),b
 14427  001408  D001               	goto	l14144
 14428                           
 14429                           ; BSR set to: 0
 14430                           ;main.c: 1057: rwtimeout = 10u;
 14431  00140A  6FE8               	movwf	_rwtimeout& (0+255),b
 14432  00140C                     l14144:
 14433                           
 14434                           ; BSR set to: 0
 14435                           ;main.c: 1058: }
 14436                           ;main.c: 1059: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 14437  00140C  EC84  F02C         	call	_Busy_eep	;wreg free
 14438  001410  0100               	movlb	0	; () banked
 14439  001412  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14440  001414  0E09               	movlw	9
 14441  001416  6F60               	movwf	?_Write_b_eep& (0+255),b
 14442  001418  C0E8  F062         	movff	_rwtimeout,?_Write_b_eep+2
 14443  00141C  EC9D  F02B         	call	_Write_b_eep	;wreg free
 14444                           
 14445                           ;main.c: 1060: putsUSART((char *) "+OK\r\n");
 14446  001420  0E7F               	movlw	high STR_9
 14447  001422  0100               	movlb	0	; () banked
 14448  001424  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14449  001426  0E80               	movlw	low STR_9
 14450  001428  6F61               	movwf	?_putsUSART& (0+255),b
 14451  00142A  EC84  F029         	call	_putsUSART	;wreg free
 14452                           
 14453                           ;main.c: 1061: }
 14454  00142E  D0D3               	goto	l14198
 14455  001430                     l14148:
 14456                           
 14457                           ; BSR set to: 0
 14458                           ;main.c: 1062: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14459  001430  0E01               	movlw	high _cmdbuf
 14460  001432  0100               	movlb	0	; () banked
 14461  001434  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14462  001436  0E26               	movlw	low _cmdbuf
 14463  001438  6F6D               	movwf	?_stristr& (0+255),b
 14464  00143A  0E7E               	movlw	high STR_120
 14465  00143C  6F70               	movwf	(?_stristr+3)& (0+255),b
 14466  00143E  0EBB               	movlw	low STR_120
 14467  001440  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14468  001442  EC0F  F027         	call	_stristr	;wreg free
 14469  001446  516E               	movf	(?_stristr+1)& (0+255),w,b
 14470  001448  116D               	iorwf	?_stristr& (0+255),w,b
 14471  00144A  E005               	bz	l14152
 14472                           
 14473                           ; BSR set to: 0
 14474                           ;main.c: 1063: strcpy(cmdbuf, cmdbuf + 8);
 14475  00144C  0E01               	movlw	high _cmdbuf
 14476  00144E  D8E7               	call	PL6	;call to abstracted procedure
 14477  001450  ECE7  F02B         	call	_strcpy	;wreg free
 14478                           
 14479                           ;main.c: 1064: }
 14480  001454  D0C0               	goto	l14198
 14481  001456                     l14152:
 14482                           
 14483                           ; BSR set to: 0
 14484                           ;main.c: 1065: else if (0 != stristr(cmdbuf, "MODE ")) {
 14485  001456  0E01               	movlw	high _cmdbuf
 14486  001458  0100               	movlb	0	; () banked
 14487  00145A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14488  00145C  0E26               	movlw	low _cmdbuf
 14489  00145E  6F6D               	movwf	?_stristr& (0+255),b
 14490  001460  0E7F               	movlw	high STR_121
 14491  001462  6F70               	movwf	(?_stristr+3)& (0+255),b
 14492  001464  0E86               	movlw	low STR_121
 14493  001466  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14494  001468  EC0F  F027         	call	_stristr	;wreg free
 14495  00146C  516E               	movf	(?_stristr+1)& (0+255),w,b
 14496  00146E  116D               	iorwf	?_stristr& (0+255),w,b
 14497  001470  E068               	bz	l14182
 14498                           
 14499                           ; BSR set to: 0
 14500                           ;main.c: 1066: strcpy(cmdbuf, cmdbuf + 5);
 14501  001472  D8C0               	call	PL2	;call to abstracted procedure
 14502  001474  ECE7  F02B         	call	_strcpy	;wreg free
 14503                           
 14504                           ; BSR set to: 0
 14505                           ;main.c: 1067: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14506  001478  0E01               	movlw	high _cmdbuf
 14507  00147A  0100               	movlb	0	; () banked
 14508  00147C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14509  00147E  0E26               	movlw	low _cmdbuf
 14510  001480  6F6D               	movwf	?_stristr& (0+255),b
 14511  001482  0E7E               	movlw	high STR_122
 14512  001484  6F70               	movwf	(?_stristr+3)& (0+255),b
 14513  001486  0EFE               	movlw	low STR_122
 14514  001488  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14515  00148A  EC0F  F027         	call	_stristr	;wreg free
 14516  00148E  516E               	movf	(?_stristr+1)& (0+255),w,b
 14517  001490  116D               	iorwf	?_stristr& (0+255),w,b
 14518  001492  E013               	bz	l14166
 14519                           
 14520                           ; BSR set to: 0
 14521                           ;main.c: 1068: mode = 0;
 14522  001494  6BE6               	clrf	_mode& (0+255),b
 14523                           
 14524                           ; BSR set to: 0
 14525                           ;main.c: 1069: (Busy_eep(), Write_b_eep(0x03,0));
 14526  001496  EC84  F02C         	call	_Busy_eep	;wreg free
 14527  00149A  0100               	movlb	0	; () banked
 14528  00149C  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14529  00149E  0E03               	movlw	3
 14530  0014A0  6F60               	movwf	?_Write_b_eep& (0+255),b
 14531  0014A2  0E00               	movlw	0
 14532  0014A4  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 14533  0014A6  EC9D  F02B         	call	_Write_b_eep	;wreg free
 14534                           
 14535                           ;main.c: 1070: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14536  0014AA  0E7B               	movlw	high STR_123
 14537  0014AC  0100               	movlb	0	; () banked
 14538  0014AE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14539  0014B0  0E48               	movlw	low STR_123
 14540  0014B2  6F61               	movwf	?_putsUSART& (0+255),b
 14541  0014B4  EC84  F029         	call	_putsUSART	;wreg free
 14542                           
 14543                           ;main.c: 1071: }
 14544  0014B8  D08E               	goto	l14198
 14545  0014BA                     l14166:
 14546                           
 14547                           ; BSR set to: 0
 14548                           ;main.c: 1072: else if (0 != stristr(cmdbuf, "VSCP")) {
 14549  0014BA  0E01               	movlw	high _cmdbuf
 14550  0014BC  0100               	movlb	0	; () banked
 14551  0014BE  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14552  0014C0  0E26               	movlw	low _cmdbuf
 14553  0014C2  6F6D               	movwf	?_stristr& (0+255),b
 14554  0014C4  0E7F               	movlw	high STR_124
 14555  0014C6  6F70               	movwf	(?_stristr+3)& (0+255),b
 14556  0014C8  0EC1               	movlw	low STR_124
 14557  0014CA  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14558  0014CC  EC0F  F027         	call	_stristr	;wreg free
 14559  0014D0  516E               	movf	(?_stristr+1)& (0+255),w,b
 14560  0014D2  116D               	iorwf	?_stristr& (0+255),w,b
 14561  0014D4  E014               	bz	l14174
 14562                           
 14563                           ; BSR set to: 0
 14564                           ;main.c: 1073: mode = 1;
 14565  0014D6  0E01               	movlw	1
 14566  0014D8  6FE6               	movwf	_mode& (0+255),b
 14567                           
 14568                           ; BSR set to: 0
 14569                           ;main.c: 1074: (Busy_eep(), Write_b_eep(0x03,1));
 14570  0014DA  EC84  F02C         	call	_Busy_eep	;wreg free
 14571  0014DE  0100               	movlb	0	; () banked
 14572  0014E0  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14573  0014E2  0E03               	movlw	3
 14574  0014E4  6F60               	movwf	?_Write_b_eep& (0+255),b
 14575  0014E6  0E01               	movlw	1
 14576  0014E8  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14577  0014EA  EC9D  F02B         	call	_Write_b_eep	;wreg free
 14578                           
 14579                           ;main.c: 1075: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14580  0014EE  0E7A               	movlw	high STR_125
 14581  0014F0  0100               	movlb	0	; () banked
 14582  0014F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14583  0014F4  0ECD               	movlw	low STR_125
 14584  0014F6  6F61               	movwf	?_putsUSART& (0+255),b
 14585  0014F8  EC84  F029         	call	_putsUSART	;wreg free
 14586                           
 14587                           ;main.c: 1076: }
 14588  0014FC  D06C               	goto	l14198
 14589  0014FE                     l14174:
 14590                           
 14591                           ; BSR set to: 0
 14592                           ;main.c: 1077: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14593  0014FE  0E01               	movlw	high _cmdbuf
 14594  001500  0100               	movlb	0	; () banked
 14595  001502  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14596  001504  0E26               	movlw	low _cmdbuf
 14597  001506  6F6D               	movwf	?_stristr& (0+255),b
 14598  001508  0E7F               	movlw	high STR_126
 14599  00150A  6F70               	movwf	(?_stristr+3)& (0+255),b
 14600  00150C  0E98               	movlw	low STR_126
 14601  00150E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14602  001510  EC0F  F027         	call	_stristr	;wreg free
 14603  001514  516E               	movf	(?_stristr+1)& (0+255),w,b
 14604  001516  116D               	iorwf	?_stristr& (0+255),w,b
 14605  001518  E05E               	bz	l14198
 14606                           
 14607                           ; BSR set to: 0
 14608                           ;main.c: 1078: mode = 2;
 14609  00151A  0E02               	movlw	2
 14610  00151C  6FE6               	movwf	_mode& (0+255),b
 14611                           
 14612                           ; BSR set to: 0
 14613                           ;main.c: 1079: (Busy_eep(), Write_b_eep(0x03,2));
 14614  00151E  EC84  F02C         	call	_Busy_eep	;wreg free
 14615  001522  0100               	movlb	0	; () banked
 14616  001524  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 14617  001526  0E03               	movlw	3
 14618  001528  6F60               	movwf	?_Write_b_eep& (0+255),b
 14619  00152A  0E02               	movlw	2
 14620  00152C  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 14621  00152E  EC9D  F02B         	call	_Write_b_eep	;wreg free
 14622                           
 14623                           ;main.c: 1080: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14624  001532  0E7B               	movlw	high STR_127
 14625  001534  0100               	movlb	0	; () banked
 14626  001536  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14627  001538  0EB5               	movlw	low STR_127
 14628  00153A  6F61               	movwf	?_putsUSART& (0+255),b
 14629  00153C  EC84  F029         	call	_putsUSART	;wreg free
 14630  001540  D04A               	goto	l14198
 14631  001542                     l14182:
 14632                           
 14633                           ; BSR set to: 0
 14634                           ;main.c: 1084: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14635  001542  0E01               	movlw	high _cmdbuf
 14636  001544  0100               	movlb	0	; () banked
 14637  001546  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14638  001548  0E26               	movlw	low _cmdbuf
 14639  00154A  6F6D               	movwf	?_stristr& (0+255),b
 14640  00154C  0E7E               	movlw	high STR_128
 14641  00154E  6F70               	movwf	(?_stristr+3)& (0+255),b
 14642  001550  0EEE               	movlw	low STR_128
 14643  001552  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14644  001554  EC0F  F027         	call	_stristr	;wreg free
 14645  001558  516E               	movf	(?_stristr+1)& (0+255),w,b
 14646  00155A  116D               	iorwf	?_stristr& (0+255),w,b
 14647  00155C  E010               	bz	l14186
 14648                           
 14649                           ; BSR set to: 0
 14650                           ;main.c: 1085: strcpy(cmdbuf, cmdbuf + 7);
 14651  00155E  0E01               	movlw	high _cmdbuf
 14652  001560  0100               	movlb	0	; () banked
 14653  001562  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14654  001564  0E26               	movlw	low _cmdbuf
 14655  001566  6F60               	movwf	?_strcpy& (0+255),b
 14656  001568  0E2D               	movlw	low (_cmdbuf+7)
 14657  00156A  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14658  00156C  0E01               	movlw	high (_cmdbuf+7)
 14659  00156E  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14660  001570  C0C9  F062         	movff	??_doModeVerbose,?_strcpy+2
 14661  001574  C0CA  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14662  001578  ECE7  F02B         	call	_strcpy	;wreg free
 14663                           
 14664                           ;main.c: 1086: }
 14665  00157C  D02C               	goto	l14198
 14666  00157E                     l14186:
 14667                           
 14668                           ; BSR set to: 0
 14669                           ;main.c: 1088: else if (0 != stristr(cmdbuf, "MASK ")) {
 14670  00157E  0E01               	movlw	high _cmdbuf
 14671  001580  0100               	movlb	0	; () banked
 14672  001582  6F6E               	movwf	(?_stristr+1)& (0+255),b
 14673  001584  0E26               	movlw	low _cmdbuf
 14674  001586  6F6D               	movwf	?_stristr& (0+255),b
 14675  001588  0E7F               	movlw	high STR_129
 14676  00158A  6F70               	movwf	(?_stristr+3)& (0+255),b
 14677  00158C  0E8C               	movlw	low STR_129
 14678  00158E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 14679  001590  EC0F  F027         	call	_stristr	;wreg free
 14680  001594  516E               	movf	(?_stristr+1)& (0+255),w,b
 14681  001596  116D               	iorwf	?_stristr& (0+255),w,b
 14682  001598  E004               	bz	l14190
 14683                           
 14684                           ; BSR set to: 0
 14685                           ;main.c: 1089: strcpy(cmdbuf, cmdbuf + 5);
 14686  00159A  D82C               	call	PL2	;call to abstracted procedure
 14687  00159C  ECE7  F02B         	call	_strcpy	;wreg free
 14688                           
 14689                           ;main.c: 1090: }
 14690  0015A0  D01A               	goto	l14198
 14691  0015A2                     l14190:
 14692                           
 14693                           ; BSR set to: 0
 14694                           ;main.c: 1091: else {
 14695                           ;main.c: 1092: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14696  0015A2  0E7A               	movlw	high STR_130
 14697  0015A4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14698  0015A6  0E6A               	movlw	low STR_130
 14699  0015A8  6F61               	movwf	?_putsUSART& (0+255),b
 14700  0015AA  EC84  F029         	call	_putsUSART	;wreg free
 14701  0015AE  D013               	goto	l14198
 14702  0015B0                     l14192:
 14703                           
 14704                           ; BSR set to: 0
 14705                           ;main.c: 1096: else {
 14706                           ;main.c: 1097: if ( 0x0d == cmdbuf[ 0 ] ) {
 14707  0015B0  0101               	movlb	1	; () banked
 14708  0015B2  5126               	movf	_cmdbuf& (0+255),w,b
 14709  0015B4  0A0D               	xorlw	13
 14710  0015B6  E108               	bnz	l14196
 14711                           
 14712                           ; BSR set to: 1
 14713                           ;main.c: 1098: putsUSART((char *) "+OK\r\n");
 14714  0015B8  0E7F               	movlw	high STR_9
 14715  0015BA  0100               	movlb	0	; () banked
 14716  0015BC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14717  0015BE  0E80               	movlw	low STR_9
 14718  0015C0  6F61               	movwf	?_putsUSART& (0+255),b
 14719  0015C2  EC84  F029         	call	_putsUSART	;wreg free
 14720                           
 14721                           ;main.c: 1099: }
 14722  0015C6  D007               	goto	l14198
 14723  0015C8                     l14196:
 14724                           
 14725                           ; BSR set to: 1
 14726                           ;main.c: 1100: else {
 14727                           ;main.c: 1101: putsUSART((char *) "-ERROR - Unknown command\r\n");
 14728  0015C8  0E7B               	movlw	high STR_132
 14729  0015CA  0100               	movlb	0	; () banked
 14730  0015CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 14731  0015CE  0E7F               	movlw	low STR_132
 14732  0015D0  6F61               	movwf	?_putsUSART& (0+255),b
 14733  0015D2  EC84  F029         	call	_putsUSART	;wreg free
 14734  0015D6                     l14198:
 14735                           
 14736                           ;main.c: 1102: }
 14737                           ;main.c: 1103: }
 14738                           ;main.c: 1105: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 14739  0015D6  0E01               	movlw	high _cmdbuf
 14740  0015D8  0100               	movlb	0	; () banked
 14741  0015DA  6F61               	movwf	(?_memset+1)& (0+255),b
 14742  0015DC  0E26               	movlw	low _cmdbuf
 14743  0015DE  6F60               	movwf	?_memset& (0+255),b
 14744  0015E0  6B63               	clrf	(?_memset+3)& (0+255),b
 14745  0015E2  6B62               	clrf	(?_memset+2)& (0+255),b
 14746  0015E4  6B65               	clrf	(?_memset+5)& (0+255),b
 14747  0015E6  0E50               	movlw	80
 14748  0015E8  6F64               	movwf	(?_memset+4)& (0+255),b
 14749  0015EA  ECFE  F02B         	call	_memset	;wreg free
 14750                           
 14751                           ; BSR set to: 0
 14752                           ;main.c: 1106: pos = 0;
 14753  0015EE  6BE7               	clrf	_pos& (0+255),b
 14754  0015F0                     l14202:
 14755                           
 14756                           ;main.c: 1107: }
 14757                           ;main.c: 1108: }
 14758                           ;main.c: 1111: (INTCONbits.GIE = 1);
 14759  0015F0  8EF2               	bsf	intcon,7,c	;volatile
 14760  0015F2                     l541:
 14761  0015F2  0012               	return	
 14762  0015F4                     __end_of_doModeVerbose:
 14763                           	opt stack 0
 14764  0015F4                     PL2:
 14765                           	opt stack 20
 14766  0015F4  0E01               	movlw	high _cmdbuf
 14767  0015F6  0100               	movlb	0	; () banked
 14768  0015F8  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14769  0015FA  0E26               	movlw	low _cmdbuf
 14770  0015FC  6F60               	movwf	?_strcpy& (0+255),b
 14771  0015FE  0E2B               	movlw	low (_cmdbuf+5)
 14772  001600  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14773  001602  0E01               	movlw	high (_cmdbuf+5)
 14774  001604  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14775  001606  C0C9  F062         	movff	??_doModeVerbose,?_strcpy+2
 14776  00160A  C0CA  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14777  00160E  0012               	return	
 14778  001610                     __end_ofPL2:
 14779                           	opt stack 0
 14780  001610                     PL4:
 14781                           	opt stack 20
 14782  001610  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14783  001612  6B6C               	clrf	?_strtok& (0+255),b
 14784  001614  0E7F               	movlw	high STR_30
 14785  001616  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14786  001618  0EF5               	movlw	low STR_30
 14787  00161A  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14788  00161C  0012               	return	
 14789  00161E                     __end_ofPL4:
 14790                           	opt stack 0
 14791  00161E                     PL6:
 14792                           	opt stack 20
 14793  00161E  0100               	movlb	0	; () banked
 14794  001620  6F61               	movwf	(?_strcpy+1)& (0+255),b
 14795  001622  0E26               	movlw	low _cmdbuf
 14796  001624  6F60               	movwf	?_strcpy& (0+255),b
 14797  001626  0E2E               	movlw	low (_cmdbuf+8)
 14798  001628  6FC9               	movwf	??_doModeVerbose& (0+255),b
 14799  00162A  0E01               	movlw	high (_cmdbuf+8)
 14800  00162C  6FCA               	movwf	(??_doModeVerbose+1)& (0+255),b
 14801  00162E  C0C9  F062         	movff	??_doModeVerbose,?_strcpy+2
 14802  001632  C0CA  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 14803  001636  0012               	return	
 14804  001638                     __end_ofPL6:
 14805                           	opt stack 0
 14806  001638                     PL8:
 14807                           	opt stack 20
 14808  001638  6BD2               	clrf	(??_doModeVerbose+9)& (0+255),b
 14809  00163A  6BD3               	clrf	(??_doModeVerbose+10)& (0+255),b
 14810  00163C  6BD4               	clrf	(??_doModeVerbose+11)& (0+255),b
 14811  00163E  0E1A               	movlw	26
 14812  001640                     u18775:
 14813  001640  90D8               	bcf	status,0,c
 14814  001642  37D1               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 14815  001644  37D2               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 14816  001646  37D3               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 14817  001648  37D4               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 14818  00164A  2EE8               	decfsz	wreg,f,c
 14819  00164C  D7F9               	goto	u18775
 14820  00164E  51CD               	movf	(??_doModeVerbose+4)& (0+255),w,b
 14821  001650  11D1               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 14822  001652  6FD5               	movwf	(??_doModeVerbose+12)& (0+255),b
 14823  001654  51CE               	movf	(??_doModeVerbose+5)& (0+255),w,b
 14824  001656  11D2               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 14825  001658  6FD6               	movwf	(??_doModeVerbose+13)& (0+255),b
 14826  00165A  51CF               	movf	(??_doModeVerbose+6)& (0+255),w,b
 14827  00165C  11D3               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 14828  00165E  6FD7               	movwf	(??_doModeVerbose+14)& (0+255),b
 14829  001660  51D0               	movf	(??_doModeVerbose+7)& (0+255),w,b
 14830  001662  11D4               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 14831  001664  6FD8               	movwf	(??_doModeVerbose+15)& (0+255),b
 14832  001666  51C9               	movf	??_doModeVerbose& (0+255),w,b
 14833  001668  11D5               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 14834  00166A  6FD9               	movwf	(??_doModeVerbose+16)& (0+255),b
 14835  00166C  51CA               	movf	(??_doModeVerbose+1)& (0+255),w,b
 14836  00166E  11D6               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 14837  001670  6FDA               	movwf	(??_doModeVerbose+17)& (0+255),b
 14838  001672  51CB               	movf	(??_doModeVerbose+2)& (0+255),w,b
 14839  001674  11D7               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 14840  001676  6FDB               	movwf	(??_doModeVerbose+18)& (0+255),b
 14841  001678  51CC               	movf	(??_doModeVerbose+3)& (0+255),w,b
 14842  00167A  11D8               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 14843  00167C  6FDC               	movwf	(??_doModeVerbose+19)& (0+255),b
 14844  00167E  0102               	movlb	2	; () banked
 14845  001680  0012               	return	
 14846  001682                     __end_ofPL8:
 14847                           	opt stack 0
 14848  001682                     PL26:
 14849                           	opt stack 20
 14850  001682  0100               	movlb	0	; () banked
 14851  001684  6B6D               	clrf	(?_strtok+1)& (0+255),b
 14852  001686  6B6C               	clrf	?_strtok& (0+255),b
 14853  001688  0E7F               	movlw	high (STR_256+5)
 14854  00168A  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14855  00168C  0E2B               	movlw	low (STR_256+5)
 14856  00168E  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14857  001690  0012               	return	
 14858  001692                     __end_ofPL26:
 14859                           	opt stack 0
 14860  001692                     PL28:
 14861                           	opt stack 20
 14862  001692  0E01               	movlw	high _cmdbuf
 14863  001694  0100               	movlb	0	; () banked
 14864  001696  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14865  001698  0E26               	movlw	low _cmdbuf
 14866  00169A  6F6C               	movwf	?_strtok& (0+255),b
 14867  00169C  0E7F               	movlw	high STR_30
 14868  00169E  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14869  0016A0  0EF5               	movlw	low STR_30
 14870  0016A2  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14871  0016A4  0012               	return	
 14872  0016A6                     __end_ofPL28:
 14873                           	opt stack 0
 14874  0016A6                     PL32:
 14875                           	opt stack 20
 14876  0016A6  0100               	movlb	0	; () banked
 14877  0016A8  6F6D               	movwf	(?_strtok+1)& (0+255),b
 14878  0016AA  0E26               	movlw	low _cmdbuf
 14879  0016AC  6F6C               	movwf	?_strtok& (0+255),b
 14880  0016AE  0E7F               	movlw	high (STR_256+5)
 14881  0016B0  6F6F               	movwf	(?_strtok+3)& (0+255),b
 14882  0016B2  0E2B               	movlw	low (STR_256+5)
 14883  0016B4  6F6E               	movwf	(?_strtok+2)& (0+255),b
 14884  0016B6  0012               	return	
 14885  0016B8                     __end_ofPL32:
 14886                           	opt stack 0
 14887  0016B8                     PL38:
 14888                           	opt stack 20
 14889  0016B8  0102               	movlb	2	; () banked
 14890  0016BA  51B0               	movf	doModeVerbose@i_1173& (0+255),w,b
 14891  0016BC  C2AE  F0C9         	movff	doModeVerbose@reg,??_doModeVerbose
 14892  0016C0  0100               	movlb	0	; () banked
 14893  0016C2  6BCA               	clrf	(??_doModeVerbose+1)& (0+255),b
 14894  0016C4  27C9               	addwf	??_doModeVerbose& (0+255),f,b
 14895  0016C6  0E00               	movlw	0
 14896  0016C8  23CA               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 14897  0016CA  51C9               	movf	??_doModeVerbose& (0+255),w,b
 14898  0016CC  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 14899  0016CE  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 14900  0016D0  0012               	return	
 14901  0016D2                     __end_ofPL38:
 14902                           	opt stack 0
 14903  0016D2                     PL40:
 14904                           	opt stack 20
 14905  0016D2  0100               	movlb	0	; () banked
 14906  0016D4  6BCA               	clrf	(??_doModeVerbose+1)& (0+255),b
 14907  0016D6  6BCB               	clrf	(??_doModeVerbose+2)& (0+255),b
 14908  0016D8  6BCC               	clrf	(??_doModeVerbose+3)& (0+255),b
 14909  0016DA  C0CB  F0CC         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 14910  0016DE  C0CA  F0CB         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 14911  0016E2  C0C9  F0CA         	movff	??_doModeVerbose,??_doModeVerbose+1
 14912  0016E6  6BC9               	clrf	??_doModeVerbose& (0+255),b
 14913  0016E8  0102               	movlb	2	; () banked
 14914  0016EA  0012               	return	
 14915  0016EC                     __end_ofPL40:
 14916                           	opt stack 0
 14917  0016EC                     PL50:
 14918                           	opt stack 20
 14919  0016EC  6F60               	movwf	?__CANIDToRegs& (0+255),b
 14920  0016EE  C2A3  F062         	movff	doModeVerbose@id_1284,?__CANIDToRegs+2
 14921  0016F2  C2A4  F063         	movff	doModeVerbose@id_1284+1,?__CANIDToRegs+3
 14922  0016F6  C2A5  F064         	movff	doModeVerbose@id_1284+2,?__CANIDToRegs+4
 14923  0016FA  C2A6  F065         	movff	doModeVerbose@id_1284+3,?__CANIDToRegs+5
 14924  0016FE  0E01               	movlw	1
 14925  001700  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 14926  001702  0C01               	retlw	1
 14927  001704                     __end_ofPL50:
 14928                           	opt stack 0
 14929  001704                     PL54:
 14930                           	opt stack 20
 14931  001704  0100               	movlb	0	; () banked
 14932  001706  6FCE               	movwf	(??_doModeVerbose+5)& (0+255),b
 14933  001708  6BCF               	clrf	(??_doModeVerbose+6)& (0+255),b
 14934  00170A  6BD0               	clrf	(??_doModeVerbose+7)& (0+255),b
 14935  00170C  C0CE  F0D0         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 14936  001710  C0CD  F0CF         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 14937  001714  6BCE               	clrf	(??_doModeVerbose+5)& (0+255),b
 14938  001716  6BCD               	clrf	(??_doModeVerbose+4)& (0+255),b
 14939  001718  0012               	return	
 14940  00171A                     __end_ofPL54:
 14941                           	opt stack 0
 14942                           tblptru	equ	0xFF8
 14943                           tblptrh	equ	0xFF7
 14944                           tblptrl	equ	0xFF6
 14945                           tablat	equ	0xFF5
 14946                           prodh	equ	0xFF4
 14947                           prodl	equ	0xFF3
 14948                           intcon	equ	0xFF2
 14949                           indf0	equ	0xFEF
 14950                           postinc0	equ	0xFEE
 14951                           fsr0h	equ	0xFEA
 14952                           fsr0l	equ	0xFE9
 14953                           wreg	equ	0xFE8
 14954                           indf1	equ	0xFE7
 14955                           postinc1	equ	0xFE6
 14956                           postdec1	equ	0xFE5
 14957                           fsr1h	equ	0xFE2
 14958                           fsr1l	equ	0xFE1
 14959                           indf2	equ	0xFDF
 14960                           postinc2	equ	0xFDE
 14961                           postdec2	equ	0xFDD
 14962                           plusw2	equ	0xFDB
 14963                           fsr2h	equ	0xFDA
 14964                           fsr2l	equ	0xFD9
 14965                           status	equ	0xFD8
 14966                           
 14967 ;; *************** function _setFilter *****************
 14968 ;; Defined at:
 14969 ;;		line 2839 in file "main.c"
 14970 ;; Parameters:    Size  Location     Type
 14971 ;;  filter          1    wreg     unsigned char 
 14972 ;;  val             4    0[BANK0 ] unsigned long 
 14973 ;; Auto vars:     Size  Location     Type
 14974 ;;  filter          1   10[BANK0 ] unsigned char 
 14975 ;;  eidl            1   14[BANK0 ] unsigned char 
 14976 ;;  eidh            1   13[BANK0 ] unsigned char 
 14977 ;;  sidl            1   12[BANK0 ] unsigned char 
 14978 ;;  sidh            1   11[BANK0 ] unsigned char 
 14979 ;; Return value:  Size  Location     Type
 14980 ;;		None               void
 14981 ;; Registers used:
 14982 ;;		wreg, status,2, status,0
 14983 ;; Tracked objects:
 14984 ;;		On entry : F/2
 14985 ;;		On exit  : F/0
 14986 ;;		Unchanged: 0/0
 14987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14988 ;;      Params:         0       4       0       0       0       0       0
 14989 ;;      Locals:         0       5       0       0       0       0       0
 14990 ;;      Temps:          0       6       0       0       0       0       0
 14991 ;;      Totals:         0      15       0       0       0       0       0
 14992 ;;Total ram usage:       15 bytes
 14993 ;; Hardware stack levels used:    1
 14994 ;; Hardware stack levels required when called:    3
 14995 ;; This function calls:
 14996 ;;		Nothing
 14997 ;; This function is called by:
 14998 ;;		_doModeVerbose
 14999 ;; This function uses a non-reentrant model
 15000 ;;
 15001                           
 15002                           	psect	text23
 15003  002980                     __ptext23:
 15004                           	opt stack 0
 15005  002980                     _setFilter:
 15006                           	opt stack 26
 15007                           
 15008                           ;incstack = 0
 15009                           ;incstack = 0
 15010                           ;setFilter@filter stored from wreg
 15011  002980  CFE8 F06A          	movff	wreg,setFilter@filter
 15012                           
 15013                           ; BSR set to: 2
 15014                           ;main.c: 2840: uint8_t sidh = (long) val >> 21L;
 15015  002984  0E15               	movlw	21
 15016  002986  0100               	movlb	0	; () banked
 15017  002988  6F64               	movwf	??_setFilter& (0+255),b
 15018  00298A  C060  F065         	movff	setFilter@val,??_setFilter+1
 15019  00298E  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 15020  002992  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 15021  002996  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 15022  00299A                     u15885:
 15023  00299A  6764               	tstfsz	??_setFilter& (0+255),b
 15024  00299C  D001               	goto	u15886
 15025  00299E  D007               	goto	u15887
 15026  0029A0                     u15886:
 15027  0029A0  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 15028  0029A2  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 15029  0029A4  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 15030  0029A6  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 15031  0029A8  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 15032  0029AA  2F64               	decfsz	??_setFilter& (0+255),f,b
 15033  0029AC  D7F6               	goto	u15885
 15034  0029AE                     u15887:
 15035  0029AE  5165               	movf	(??_setFilter+1)& (0+255),w,b
 15036  0029B0  6F6B               	movwf	setFilter@sidh& (0+255),b
 15037                           
 15038                           ;main.c: 2841: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 15039                           ;main.c: 2842: ((long) (val) & 0x03L) |
 15040                           ;main.c: 2843: 0x08;
 15041  0029B2  C060  F064         	movff	setFilter@val,??_setFilter
 15042  0029B6  0E03               	movlw	3
 15043  0029B8  1764               	andwf	??_setFilter& (0+255),f,b
 15044  0029BA  0E0D               	movlw	13
 15045  0029BC  6F65               	movwf	(??_setFilter+1)& (0+255),b
 15046  0029BE  C060  F066         	movff	setFilter@val,??_setFilter+2
 15047  0029C2  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 15048  0029C6  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 15049  0029CA  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 15050  0029CE                     u15895:
 15051  0029CE  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 15052  0029D0  D001               	goto	u15896
 15053  0029D2  D007               	goto	u15897
 15054  0029D4                     u15896:
 15055  0029D4  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 15056  0029D6  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 15057  0029D8  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 15058  0029DA  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 15059  0029DC  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 15060  0029DE  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 15061  0029E0  D7F6               	goto	u15895
 15062  0029E2                     u15897:
 15063  0029E2  5166               	movf	(??_setFilter+2)& (0+255),w,b
 15064  0029E4  0BE0               	andlw	224
 15065  0029E6  1164               	iorwf	??_setFilter& (0+255),w,b
 15066  0029E8  0908               	iorlw	8
 15067  0029EA  6F6C               	movwf	setFilter@sidl& (0+255),b
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;main.c: 2844: uint8_t eidh = (long) val >> 8L;
 15071  0029EC  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 15072                           
 15073                           ; BSR set to: 0
 15074                           ;main.c: 2845: uint8_t eidl = val;
 15075  0029F0  C060  F06E         	movff	setFilter@val,setFilter@eidl
 15076                           
 15077                           ;main.c: 2847: switch (filter) {
 15078  0029F4  D090               	goto	l12338
 15079  0029F6                     l1254:
 15080                           
 15081                           ; BSR set to: 0
 15082                           ;main.c: 2850: RXF0SIDH = sidh;
 15083  0029F6  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 15084                           
 15085                           ;main.c: 2851: RXF0SIDL = sidl;
 15086  0029FA  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 15087                           
 15088                           ;main.c: 2852: RXF0EIDH = eidh;
 15089  0029FE  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 15090                           
 15091                           ;main.c: 2853: RXF0EIDL = eidl;
 15092  002A02  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 15093                           
 15094                           ;main.c: 2854: break;
 15095  002A06  D0AA               	goto	l1271
 15096  002A08                     l1256:
 15097                           
 15098                           ; BSR set to: 0
 15099                           ;main.c: 2857: RXF1SIDH = sidh;
 15100  002A08  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 15101                           
 15102                           ;main.c: 2858: RXF1SIDL = sidl;
 15103  002A0C  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 15104                           
 15105                           ;main.c: 2859: RXF1EIDH = eidh;
 15106  002A10  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 15107                           
 15108                           ;main.c: 2860: RXF1EIDL = eidl;
 15109  002A14  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 15110                           
 15111                           ;main.c: 2861: break;
 15112  002A18  D0A1               	goto	l1271
 15113  002A1A                     l1257:
 15114                           
 15115                           ; BSR set to: 0
 15116                           ;main.c: 2864: RXF2SIDH = sidh;
 15117  002A1A  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 15118                           
 15119                           ;main.c: 2865: RXF2SIDL = sidl;
 15120  002A1E  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 15121                           
 15122                           ;main.c: 2866: RXF2EIDH = eidh;
 15123  002A22  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 15124                           
 15125                           ;main.c: 2867: RXF2EIDL = eidl;
 15126  002A26  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 15127                           
 15128                           ;main.c: 2868: break;
 15129  002A2A  D098               	goto	l1271
 15130  002A2C                     l1258:
 15131                           
 15132                           ; BSR set to: 0
 15133                           ;main.c: 2871: RXF3SIDH = sidh;
 15134  002A2C  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 15135                           
 15136                           ;main.c: 2872: RXF3SIDL = sidl;
 15137  002A30  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 15138                           
 15139                           ;main.c: 2873: RXF3EIDH = eidh;
 15140  002A34  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 15141                           
 15142                           ;main.c: 2874: RXF3EIDL = eidl;
 15143  002A38  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 15144                           
 15145                           ;main.c: 2875: break;
 15146  002A3C  D08F               	goto	l1271
 15147  002A3E                     l1259:
 15148                           
 15149                           ; BSR set to: 0
 15150                           ;main.c: 2878: RXF4SIDH = sidh;
 15151  002A3E  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 15152                           
 15153                           ;main.c: 2879: RXF4SIDL = sidl;
 15154  002A42  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 15155                           
 15156                           ;main.c: 2880: RXF4EIDH = eidh;
 15157  002A46  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 15158                           
 15159                           ;main.c: 2881: RXF4EIDL = eidl;
 15160  002A4A  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 15161                           
 15162                           ;main.c: 2882: break;
 15163  002A4E  D086               	goto	l1271
 15164  002A50                     l1260:
 15165                           
 15166                           ; BSR set to: 0
 15167                           ;main.c: 2885: RXF5SIDH = sidh;
 15168  002A50  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 15169                           
 15170                           ;main.c: 2886: RXF5SIDL = sidl;
 15171  002A54  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 15172                           
 15173                           ;main.c: 2887: RXF5EIDH = eidh;
 15174  002A58  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 15175                           
 15176                           ;main.c: 2888: RXF5EIDL = eidl;
 15177  002A5C  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 15178                           
 15179                           ;main.c: 2889: break;
 15180  002A60  D07D               	goto	l1271
 15181  002A62                     l1261:
 15182                           
 15183                           ; BSR set to: 0
 15184                           ;main.c: 2892: RXF6SIDH = sidh;
 15185  002A62  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 15186                           
 15187                           ;main.c: 2893: RXF6SIDL = sidl;
 15188  002A66  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 15189                           
 15190                           ;main.c: 2894: RXF6EIDH = eidh;
 15191  002A6A  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 15192                           
 15193                           ;main.c: 2895: RXF6EIDL = eidl;
 15194  002A6E  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 15195                           
 15196                           ;main.c: 2896: break;
 15197  002A72  D074               	goto	l1271
 15198  002A74                     l1262:
 15199                           
 15200                           ; BSR set to: 0
 15201                           ;main.c: 2899: RXF7SIDH = sidh;
 15202  002A74  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 15203                           
 15204                           ;main.c: 2900: RXF7SIDL = sidl;
 15205  002A78  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 15206                           
 15207                           ;main.c: 2901: RXF7EIDH = eidh;
 15208  002A7C  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 15209                           
 15210                           ;main.c: 2902: RXF7EIDL = eidl;
 15211  002A80  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 15212                           
 15213                           ;main.c: 2903: break;
 15214  002A84  D06B               	goto	l1271
 15215  002A86                     l1263:
 15216                           
 15217                           ; BSR set to: 0
 15218                           ;main.c: 2906: RXF8SIDH = sidh;
 15219  002A86  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 15220                           
 15221                           ;main.c: 2907: RXF8SIDL = sidl;
 15222  002A8A  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 15223                           
 15224                           ;main.c: 2908: RXF8EIDH = eidh;
 15225  002A8E  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 15226                           
 15227                           ;main.c: 2909: RXF8EIDL = eidl;
 15228  002A92  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 15229                           
 15230                           ;main.c: 2910: break;
 15231  002A96  D062               	goto	l1271
 15232  002A98                     l1264:
 15233                           
 15234                           ; BSR set to: 0
 15235                           ;main.c: 2913: RXF9SIDH = sidh;
 15236  002A98  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 15237                           
 15238                           ;main.c: 2914: RXF9SIDL = sidl;
 15239  002A9C  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 15240                           
 15241                           ;main.c: 2915: RXF9EIDH = eidh;
 15242  002AA0  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 15243                           
 15244                           ;main.c: 2916: RXF9EIDL = eidl;
 15245  002AA4  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 15246                           
 15247                           ;main.c: 2917: break;
 15248  002AA8  D059               	goto	l1271
 15249  002AAA                     l1265:
 15250                           
 15251                           ; BSR set to: 0
 15252                           ;main.c: 2920: RXF10SIDH = sidh;
 15253  002AAA  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 15254                           
 15255                           ;main.c: 2921: RXF10SIDL = sidl;
 15256  002AAE  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 15257                           
 15258                           ;main.c: 2922: RXF10EIDH = eidh;
 15259  002AB2  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 15260                           
 15261                           ;main.c: 2923: RXF10EIDL = eidl;
 15262  002AB6  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 15263                           
 15264                           ;main.c: 2924: break;
 15265  002ABA  D050               	goto	l1271
 15266  002ABC                     l1266:
 15267                           
 15268                           ; BSR set to: 0
 15269                           ;main.c: 2927: RXF11SIDH = sidh;
 15270  002ABC  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 15271                           
 15272                           ;main.c: 2928: RXF11SIDL = sidl;
 15273  002AC0  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 15274                           
 15275                           ;main.c: 2929: RXF11EIDH = eidh;
 15276  002AC4  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 15277                           
 15278                           ;main.c: 2930: RXF11EIDL = eidl;
 15279  002AC8  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 15280                           
 15281                           ;main.c: 2931: break;
 15282  002ACC  D047               	goto	l1271
 15283  002ACE                     l1267:
 15284                           
 15285                           ; BSR set to: 0
 15286                           ;main.c: 2934: RXF12SIDH = sidh;
 15287  002ACE  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 15288                           
 15289                           ;main.c: 2935: RXF12SIDL = sidl;
 15290  002AD2  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 15291                           
 15292                           ;main.c: 2936: RXF12EIDH = eidh;
 15293  002AD6  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 15294                           
 15295                           ;main.c: 2937: RXF12EIDL = eidl;
 15296  002ADA  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 15297                           
 15298                           ;main.c: 2938: break;
 15299  002ADE  D03E               	goto	l1271
 15300  002AE0                     l1268:
 15301                           
 15302                           ; BSR set to: 0
 15303                           ;main.c: 2941: RXF13SIDH = sidh;
 15304  002AE0  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 15305                           
 15306                           ;main.c: 2942: RXF13SIDL = sidl;
 15307  002AE4  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 15308                           
 15309                           ;main.c: 2943: RXF13EIDH = eidh;
 15310  002AE8  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 15311                           
 15312                           ;main.c: 2944: RXF13EIDL = eidl;
 15313  002AEC  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 15314                           
 15315                           ;main.c: 2945: break;
 15316  002AF0  D035               	goto	l1271
 15317  002AF2                     l1269:
 15318                           
 15319                           ; BSR set to: 0
 15320                           ;main.c: 2948: RXF14SIDH = sidh;
 15321  002AF2  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 15322                           
 15323                           ;main.c: 2949: RXF14SIDL = sidl;
 15324  002AF6  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 15325                           
 15326                           ;main.c: 2950: RXF14EIDH = eidh;
 15327  002AFA  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 15328                           
 15329                           ;main.c: 2951: RXF14EIDL = eidl;
 15330  002AFE  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 15331                           
 15332                           ;main.c: 2952: break;
 15333  002B02  D02C               	goto	l1271
 15334  002B04                     l1270:
 15335                           
 15336                           ; BSR set to: 0
 15337                           ;main.c: 2955: RXF15SIDH = sidh;
 15338  002B04  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 15339                           
 15340                           ;main.c: 2956: RXF15SIDL = sidl;
 15341  002B08  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 15342                           
 15343                           ;main.c: 2957: RXF15EIDH = eidh;
 15344  002B0C  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 15345                           
 15346                           ;main.c: 2958: RXF15EIDL = eidl;
 15347  002B10  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 15348                           
 15349                           ;main.c: 2959: break;
 15350  002B14  D023               	goto	l1271
 15351  002B16                     l12338:
 15352                           
 15353                           ; BSR set to: 0
 15354  002B16  516A               	movf	setFilter@filter& (0+255),w,b
 15355                           
 15356                           ; Switch size 1, requested type "space"
 15357                           ; Number of cases is 16, Range of values is 0 to 15
 15358                           ; switch strategies available:
 15359                           ; Name         Instructions Cycles
 15360                           ; simple_byte           49    25 (average)
 15361                           ;	Chosen strategy is simple_byte
 15362  002B18  E101 D76D          	bz	l1254
 15363  002B1C  0A01               	xorlw	1	; case 1
 15364  002B1E  E101 D773          	bz	l1256
 15365  002B22  0A03               	xorlw	3	; case 2
 15366  002B24  E101 D779          	bz	l1257
 15367  002B28  0A01               	xorlw	1	; case 3
 15368  002B2A  E080               	bz	l1258
 15369  002B2C  0A07               	xorlw	7	; case 4
 15370  002B2E  E087               	bz	l1259
 15371  002B30  0A01               	xorlw	1	; case 5
 15372  002B32  E08E               	bz	l1260
 15373  002B34  0A03               	xorlw	3	; case 6
 15374  002B36  E095               	bz	l1261
 15375  002B38  0A01               	xorlw	1	; case 7
 15376  002B3A  E09C               	bz	l1262
 15377  002B3C  0A0F               	xorlw	15	; case 8
 15378  002B3E  E0A3               	bz	l1263
 15379  002B40  0A01               	xorlw	1	; case 9
 15380  002B42  E0AA               	bz	l1264
 15381  002B44  0A03               	xorlw	3	; case 10
 15382  002B46  E0B1               	bz	l1265
 15383  002B48  0A01               	xorlw	1	; case 11
 15384  002B4A  E0B8               	bz	l1266
 15385  002B4C  0A07               	xorlw	7	; case 12
 15386  002B4E  E0BF               	bz	l1267
 15387  002B50  0A01               	xorlw	1	; case 13
 15388  002B52  E0C6               	bz	l1268
 15389  002B54  0A03               	xorlw	3	; case 14
 15390  002B56  E0CD               	bz	l1269
 15391  002B58  0A01               	xorlw	1	; case 15
 15392  002B5A  E0D4               	bz	l1270
 15393  002B5C                     l1271:
 15394                           
 15395                           ; BSR set to: 0
 15396  002B5C  0012               	return	
 15397  002B5E                     __end_of_setFilter:
 15398                           	opt stack 0
 15399                           tblptru	equ	0xFF8
 15400                           tblptrh	equ	0xFF7
 15401                           tblptrl	equ	0xFF6
 15402                           tablat	equ	0xFF5
 15403                           prodh	equ	0xFF4
 15404                           prodl	equ	0xFF3
 15405                           intcon	equ	0xFF2
 15406                           indf0	equ	0xFEF
 15407                           postinc0	equ	0xFEE
 15408                           fsr0h	equ	0xFEA
 15409                           fsr0l	equ	0xFE9
 15410                           wreg	equ	0xFE8
 15411                           indf1	equ	0xFE7
 15412                           postinc1	equ	0xFE6
 15413                           postdec1	equ	0xFE5
 15414                           fsr1h	equ	0xFE2
 15415                           fsr1l	equ	0xFE1
 15416                           indf2	equ	0xFDF
 15417                           postinc2	equ	0xFDE
 15418                           postdec2	equ	0xFDD
 15419                           plusw2	equ	0xFDB
 15420                           fsr2h	equ	0xFDA
 15421                           fsr2l	equ	0xFD9
 15422                           status	equ	0xFD8
 15423                           
 15424 ;; *************** function _writeRegisterExtended *****************
 15425 ;; Defined at:
 15426 ;;		line 2402 in file "main.c"
 15427 ;; Parameters:    Size  Location     Type
 15428 ;;  nodeid          1    wreg     unsigned char 
 15429 ;;  page            2   85[BANK0 ] unsigned short 
 15430 ;;  reg             1   87[BANK0 ] unsigned char 
 15431 ;;  timeout         2   88[BANK0 ] unsigned short 
 15432 ;;  value           2   90[BANK0 ] PTR unsigned char 
 15433 ;;		 -> doModeVerbose@value_1226(1), 
 15434 ;; Auto vars:     Size  Location     Type
 15435 ;;  nodeid          1   96[BANK0 ] unsigned char 
 15436 ;; Return value:  Size  Location     Type
 15437 ;;                  1    wreg      enum E15660
 15438 ;; Registers used:
 15439 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15440 ;; Tracked objects:
 15441 ;;		On entry : F/2
 15442 ;;		On exit  : E/0
 15443 ;;		Unchanged: 0/0
 15444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15445 ;;      Params:         0       7       0       0       0       0       0
 15446 ;;      Locals:         0       1       0       0       0       0       0
 15447 ;;      Temps:          0       4       0       0       0       0       0
 15448 ;;      Totals:         0      12       0       0       0       0       0
 15449 ;;Total ram usage:       12 bytes
 15450 ;; Hardware stack levels used:    1
 15451 ;; Hardware stack levels required when called:    7
 15452 ;; This function calls:
 15453 ;;		_sendVSCPFrame
 15454 ;;		_getVSCPFrame
 15455 ;; This function is called by:
 15456 ;;		_doModeVerbose
 15457 ;; This function uses a non-reentrant model
 15458 ;;
 15459                           
 15460                           	psect	text24
 15461  004002                     __ptext24:
 15462                           	opt stack 0
 15463  004002                     _writeRegisterExtended:
 15464                           	opt stack 22
 15465                           
 15466                           ; BSR set to: 0
 15467                           ;incstack = 0
 15468                           ;incstack = 0
 15469                           ;writeRegisterExtended@nodeid stored from wreg
 15470  004002  CFE8 F0C0          	movff	wreg,writeRegisterExtended@nodeid
 15471                           
 15472                           ; BSR set to: 2
 15473                           ;main.c: 2403: vscpData[ 0 ] = nodeid;
 15474  004006  C0C0  F034         	movff	writeRegisterExtended@nodeid,_vscpData
 15475                           
 15476                           ; BSR set to: 2
 15477                           ;main.c: 2404: vscpData[ 1 ] = page >> 8;
 15478  00400A  0100               	movlb	0	; () banked
 15479  00400C  51B6               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15480  00400E  6E35               	movwf	_vscpData+1,c
 15481                           
 15482                           ; BSR set to: 0
 15483                           ;main.c: 2405: vscpData[ 2 ] = page & 0xff;
 15484  004010  C0B5  F036         	movff	writeRegisterExtended@page,_vscpData+2
 15485                           
 15486                           ; BSR set to: 0
 15487                           ;main.c: 2406: vscpData[ 3 ] = reg;
 15488  004014  C0B7  F037         	movff	writeRegisterExtended@reg,_vscpData+3
 15489                           
 15490                           ; BSR set to: 0
 15491                           ;main.c: 2407: vscpData[ 4 ] = *value;
 15492  004018  C0BA  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15493  00401C  C0BB  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15494  004020  50DF               	movf	indf2,w,c
 15495  004022  6E38               	movwf	_vscpData+4,c
 15496                           
 15497                           ; BSR set to: 0
 15498                           ;main.c: 2409: if (sendVSCPFrame(0,
 15499                           ;main.c: 2410: 38,
 15500                           ;main.c: 2411: 0,
 15501                           ;main.c: 2412: 0,
 15502                           ;main.c: 2413: 5,
 15503                           ;main.c: 2414: vscpData)) {
 15504  004024  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15505  004026  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15506  004028  0E26               	movlw	38
 15507  00402A  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15508  00402C  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15509  00402E  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15510  004030  0E05               	movlw	5
 15511  004032  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15512  004034  0E34               	movlw	low _vscpData
 15513  004036  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15514  004038  EC6A  F022         	call	_sendVSCPFrame	;wreg free
 15515  00403C  0900               	iorlw	0
 15516  00403E  E04A               	bz	l15580
 15517                           
 15518                           ;main.c: 2416: timekeeper = 0;
 15519  004040  6A22               	clrf	_timekeeper,c	;volatile
 15520  004042  6A23               	clrf	_timekeeper+1,c	;volatile
 15521  004044  6A24               	clrf	_timekeeper+2,c	;volatile
 15522  004046  6A25               	clrf	_timekeeper+3,c	;volatile
 15523                           
 15524                           ;main.c: 2417: while (timekeeper < timeout) {
 15525  004048  D035               	goto	l15578
 15526  00404A                     l1111:
 15527                           
 15528                           ; BSR set to: 0
 15529  00404A  0004               	clrwdt		;# 
 15530                           
 15531                           ;main.c: 2421: if (getVSCPFrame(&vscpClass,
 15532                           ;main.c: 2422: &vscpType,
 15533                           ;main.c: 2423: &vscpNodeId,
 15534                           ;main.c: 2424: &vscpPriority,
 15535                           ;main.c: 2425: &vscpSize,
 15536                           ;main.c: 2426: vscpData)) {
 15537  00404C  0100               	movlb	0	; () banked
 15538  00404E  0EEC               	movlw	low _vscpType
 15539  004050  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15540  004052  0EE9               	movlw	low _vscpNodeId
 15541  004054  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15542  004056  0EEA               	movlw	low _vscpPriority
 15543  004058  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15544  00405A  0EEB               	movlw	low _vscpSize
 15545  00405C  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15546  00405E  0E34               	movlw	low _vscpData
 15547  004060  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15548  004062  0E3C               	movlw	_vscpClass& (0+255)
 15549  004064  EC8D  F026         	call	_getVSCPFrame
 15550  004068  0900               	iorlw	0
 15551  00406A  E024               	bz	l15578
 15552                           
 15553                           ; BSR set to: 0
 15554                           ;main.c: 2428: if ((nodeid == vscpNodeId) &&
 15555                           ;main.c: 2429: (5 == vscpSize) &&
 15556                           ;main.c: 2430: (0 == vscpData[ 0 ]) &&
 15557                           ;main.c: 2431: ((page >> 8) == vscpData[ 1 ]) &&
 15558                           ;main.c: 2432: ((page & 0xff) == vscpData[ 2 ]) &&
 15559                           ;main.c: 2433: (reg == vscpData[ 3 ]) &&
 15560                           ;main.c: 2434: (*value == vscpData[ 4 ])) {
 15561  00406C  51E9               	movf	_vscpNodeId& (0+255),w,b
 15562  00406E  63C0               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15563  004070  D021               	goto	l15578
 15564                           
 15565                           ; BSR set to: 0
 15566  004072  51EB               	movf	_vscpSize& (0+255),w,b
 15567  004074  0A05               	xorlw	5
 15568  004076  E11E               	bnz	l15578
 15569                           
 15570                           ; BSR set to: 0
 15571  004078  6634               	tstfsz	_vscpData,c
 15572  00407A  D01C               	goto	l15578
 15573                           
 15574                           ; BSR set to: 0
 15575  00407C  51B6               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15576  00407E  1835               	xorwf	_vscpData+1,w,c
 15577  004080  E119               	bnz	l15578
 15578                           
 15579                           ; BSR set to: 0
 15580  004082  51B5               	movf	writeRegisterExtended@page& (0+255),w,b
 15581  004084  EE20  F036         	lfsr	2,_vscpData+2
 15582  004088  62DF               	cpfseq	indf2,c
 15583  00408A  D014               	goto	l15578
 15584                           
 15585                           ; BSR set to: 0
 15586  00408C  51B7               	movf	writeRegisterExtended@reg& (0+255),w,b
 15587  00408E  EE20  F037         	lfsr	2,_vscpData+3
 15588  004092  62DF               	cpfseq	indf2,c
 15589  004094  D00F               	goto	l15578
 15590                           
 15591                           ; BSR set to: 0
 15592  004096  5038               	movf	_vscpData+4,w,c
 15593  004098  C0BA  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15594  00409C  C0BB  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15595  0040A0  62DF               	cpfseq	indf2,c
 15596  0040A2  D008               	goto	l15578
 15597                           
 15598                           ; BSR set to: 0
 15599                           ;main.c: 2435: *value = vscpData[ 1 ];
 15600  0040A4  C0BA  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15601  0040A8  C0BB  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15602  0040AC  C035  FFDF         	movff	_vscpData+1,indf2
 15603                           
 15604                           ; BSR set to: 0
 15605                           ;main.c: 2436: return 1;
 15606  0040B0  0E01               	movlw	1
 15607  0040B2  D011               	goto	l1114
 15608  0040B4                     l15578:
 15609  0040B4  0100               	movlb	0	; () banked
 15610  0040B6  51B8               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15611  0040B8  6FBC               	movwf	??_writeRegisterExtended& (0+255),b
 15612  0040BA  51B9               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15613  0040BC  6FBD               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15614  0040BE  6BBE               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15615  0040C0  6BBF               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15616  0040C2  51BC               	movf	??_writeRegisterExtended& (0+255),w,b
 15617  0040C4  5C22               	subwf	_timekeeper,w,c	;volatile
 15618  0040C6  51BD               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15619  0040C8  5823               	subwfb	_timekeeper+1,w,c	;volatile
 15620  0040CA  51BE               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15621  0040CC  5824               	subwfb	_timekeeper+2,w,c	;volatile
 15622  0040CE  51BF               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15623  0040D0  5825               	subwfb	_timekeeper+3,w,c	;volatile
 15624  0040D2  E3BB               	bnc	l1111
 15625  0040D4                     l15580:
 15626                           
 15627                           ;main.c: 2437: }
 15628                           ;main.c: 2439: }
 15629                           ;main.c: 2441: }
 15630                           ;main.c: 2443: }
 15631                           ;main.c: 2445: return 0;
 15632  0040D4  0E00               	movlw	0
 15633  0040D6                     l1114:
 15634  0040D6  0012               	return	
 15635  0040D8                     __end_of_writeRegisterExtended:
 15636                           	opt stack 0
 15637                           tblptru	equ	0xFF8
 15638                           tblptrh	equ	0xFF7
 15639                           tblptrl	equ	0xFF6
 15640                           tablat	equ	0xFF5
 15641                           prodh	equ	0xFF4
 15642                           prodl	equ	0xFF3
 15643                           intcon	equ	0xFF2
 15644                           indf0	equ	0xFEF
 15645                           postinc0	equ	0xFEE
 15646                           fsr0h	equ	0xFEA
 15647                           fsr0l	equ	0xFE9
 15648                           wreg	equ	0xFE8
 15649                           indf1	equ	0xFE7
 15650                           postinc1	equ	0xFE6
 15651                           postdec1	equ	0xFE5
 15652                           fsr1h	equ	0xFE2
 15653                           fsr1l	equ	0xFE1
 15654                           indf2	equ	0xFDF
 15655                           postinc2	equ	0xFDE
 15656                           postdec2	equ	0xFDD
 15657                           plusw2	equ	0xFDB
 15658                           fsr2h	equ	0xFDA
 15659                           fsr2l	equ	0xFD9
 15660                           status	equ	0xFD8
 15661                           
 15662 ;; *************** function _printBinary *****************
 15663 ;; Defined at:
 15664 ;;		line 2489 in file "main.c"
 15665 ;; Parameters:    Size  Location     Type
 15666 ;;  value           1    wreg     unsigned char 
 15667 ;; Auto vars:     Size  Location     Type
 15668 ;;  value           1    3[BANK0 ] unsigned char 
 15669 ;;  i               2    4[BANK0 ] int 
 15670 ;; Return value:  Size  Location     Type
 15671 ;;		None               void
 15672 ;; Registers used:
 15673 ;;		wreg, status,2, status,0, cstack
 15674 ;; Tracked objects:
 15675 ;;		On entry : F/2
 15676 ;;		On exit  : F/0
 15677 ;;		Unchanged: 0/0
 15678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15679 ;;      Params:         0       0       0       0       0       0       0
 15680 ;;      Locals:         0       3       0       0       0       0       0
 15681 ;;      Temps:          0       2       0       0       0       0       0
 15682 ;;      Totals:         0       5       0       0       0       0       0
 15683 ;;Total ram usage:        5 bytes
 15684 ;; Hardware stack levels used:    1
 15685 ;; Hardware stack levels required when called:    4
 15686 ;; This function calls:
 15687 ;;		_WriteUSART
 15688 ;; This function is called by:
 15689 ;;		_doModeVerbose
 15690 ;; This function uses a non-reentrant model
 15691 ;;
 15692                           
 15693                           	psect	text25
 15694  0053B0                     __ptext25:
 15695                           	opt stack 0
 15696  0053B0                     _printBinary:
 15697                           	opt stack 25
 15698                           
 15699                           ;incstack = 0
 15700                           ;incstack = 0
 15701                           ;printBinary@value stored from wreg
 15702  0053B0  CFE8 F063          	movff	wreg,printBinary@value
 15703                           
 15704                           ; BSR set to: 2
 15705                           ;main.c: 2490: int i;
 15706                           ;main.c: 2492: for (i = 7; i >= 0; i--) {
 15707  0053B4  0100               	movlb	0	; () banked
 15708  0053B6  6B65               	clrf	(printBinary@i+1)& (0+255),b
 15709  0053B8  0E07               	movlw	7
 15710  0053BA  6F64               	movwf	printBinary@i& (0+255),b
 15711  0053BC                     l15530:
 15712                           
 15713                           ; BSR set to: 0
 15714                           ;main.c: 2493: if (value & (1 << i)) {
 15715  0053BC  C064  F061         	movff	printBinary@i,??_printBinary
 15716  0053C0  0E01               	movlw	1
 15717  0053C2  6F62               	movwf	(??_printBinary+1)& (0+255),b
 15718  0053C4  2B61               	incf	??_printBinary& (0+255),f,b
 15719  0053C6  D002               	goto	u21104
 15720  0053C8                     u21105:
 15721  0053C8  90D8               	bcf	status,0,c
 15722  0053CA  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 15723  0053CC                     u21104:
 15724  0053CC  2F61               	decfsz	??_printBinary& (0+255),f,b
 15725  0053CE  D7FC               	goto	u21105
 15726  0053D0  5162               	movf	(??_printBinary+1)& (0+255),w,b
 15727  0053D2  1563               	andwf	printBinary@value& (0+255),w,b
 15728  0053D4  E006               	bz	l1134
 15729  0053D6                     l1130:
 15730  0053D6  A2AC               	btfss	4012,1,c	;volatile
 15731  0053D8  D7FE               	goto	l1130
 15732                           
 15733                           ;main.c: 2495: WriteUSART('1');
 15734  0053DA  0E31               	movlw	49
 15735  0053DC  EC5B  F02C         	call	_WriteUSART
 15736                           
 15737                           ;main.c: 2496: } else {
 15738  0053E0  D005               	goto	l15538
 15739  0053E2                     l1134:
 15740  0053E2  A2AC               	btfss	4012,1,c	;volatile
 15741  0053E4  D7FE               	goto	l1134
 15742                           
 15743                           ;main.c: 2498: WriteUSART('0');
 15744  0053E6  0E30               	movlw	48
 15745  0053E8  EC5B  F02C         	call	_WriteUSART
 15746  0053EC                     l15538:
 15747  0053EC  0100               	movlb	0	; () banked
 15748  0053EE  0764               	decf	printBinary@i& (0+255),f,b
 15749  0053F0  A0D8               	btfss	status,0,c
 15750  0053F2  0765               	decf	(printBinary@i+1)& (0+255),f,b
 15751                           
 15752                           ; BSR set to: 0
 15753  0053F4  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 15754                           
 15755                           ; BSR set to: 0
 15756  0053F6  0012               	return	
 15757  0053F8  D7E1               	goto	l15530
 15758  0053FA                     __end_of_printBinary:
 15759                           	opt stack 0
 15760                           tblptru	equ	0xFF8
 15761                           tblptrh	equ	0xFF7
 15762                           tblptrl	equ	0xFF6
 15763                           tablat	equ	0xFF5
 15764                           prodh	equ	0xFF4
 15765                           prodl	equ	0xFF3
 15766                           intcon	equ	0xFF2
 15767                           indf0	equ	0xFEF
 15768                           postinc0	equ	0xFEE
 15769                           fsr0h	equ	0xFEA
 15770                           fsr0l	equ	0xFE9
 15771                           wreg	equ	0xFE8
 15772                           indf1	equ	0xFE7
 15773                           postinc1	equ	0xFE6
 15774                           postdec1	equ	0xFE5
 15775                           fsr1h	equ	0xFE2
 15776                           fsr1l	equ	0xFE1
 15777                           indf2	equ	0xFDF
 15778                           postinc2	equ	0xFDE
 15779                           postdec2	equ	0xFDD
 15780                           plusw2	equ	0xFDB
 15781                           fsr2h	equ	0xFDA
 15782                           fsr2l	equ	0xFD9
 15783                           status	equ	0xFD8
 15784                           
 15785 ;; *************** function _readRegisterExtended *****************
 15786 ;; Defined at:
 15787 ;;		line 2301 in file "main.c"
 15788 ;; Parameters:    Size  Location     Type
 15789 ;;  nodeid          1    wreg     unsigned char 
 15790 ;;  page            2   85[BANK0 ] unsigned short 
 15791 ;;  reg             1   87[BANK0 ] unsigned char 
 15792 ;;  timeout         2   88[BANK0 ] unsigned short 
 15793 ;;  value           2   90[BANK0 ] PTR unsigned char 
 15794 ;;		 -> doModeVerbose@value(1), 
 15795 ;; Auto vars:     Size  Location     Type
 15796 ;;  nodeid          1   96[BANK0 ] unsigned char 
 15797 ;; Return value:  Size  Location     Type
 15798 ;;                  1    wreg      enum E15660
 15799 ;; Registers used:
 15800 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15801 ;; Tracked objects:
 15802 ;;		On entry : F/2
 15803 ;;		On exit  : E/0
 15804 ;;		Unchanged: 0/0
 15805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15806 ;;      Params:         0       7       0       0       0       0       0
 15807 ;;      Locals:         0       1       0       0       0       0       0
 15808 ;;      Temps:          0       4       0       0       0       0       0
 15809 ;;      Totals:         0      12       0       0       0       0       0
 15810 ;;Total ram usage:       12 bytes
 15811 ;; Hardware stack levels used:    1
 15812 ;; Hardware stack levels required when called:    7
 15813 ;; This function calls:
 15814 ;;		_sendVSCPFrame
 15815 ;;		_getVSCPFrame
 15816 ;; This function is called by:
 15817 ;;		_doModeVerbose
 15818 ;; This function uses a non-reentrant model
 15819 ;;
 15820                           
 15821                           	psect	text26
 15822  00434A                     __ptext26:
 15823                           	opt stack 0
 15824  00434A                     _readRegisterExtended:
 15825                           	opt stack 22
 15826                           
 15827                           ; BSR set to: 0
 15828                           ;incstack = 0
 15829                           ;incstack = 0
 15830                           ;readRegisterExtended@nodeid stored from wreg
 15831  00434A  CFE8 F0C0          	movff	wreg,readRegisterExtended@nodeid
 15832                           
 15833                           ; BSR set to: 2
 15834                           ;main.c: 2302: vscpData[ 0 ] = nodeid;
 15835  00434E  C0C0  F034         	movff	readRegisterExtended@nodeid,_vscpData
 15836                           
 15837                           ; BSR set to: 2
 15838                           ;main.c: 2303: vscpData[ 1 ] = page >> 8;
 15839  004352  0100               	movlb	0	; () banked
 15840  004354  51B6               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15841  004356  6E35               	movwf	_vscpData+1,c
 15842                           
 15843                           ; BSR set to: 0
 15844                           ;main.c: 2304: vscpData[ 2 ] = page & 0xff;
 15845  004358  C0B5  F036         	movff	readRegisterExtended@page,_vscpData+2
 15846                           
 15847                           ; BSR set to: 0
 15848                           ;main.c: 2305: vscpData[ 3 ] = reg;
 15849  00435C  C0B7  F037         	movff	readRegisterExtended@reg,_vscpData+3
 15850                           
 15851                           ; BSR set to: 0
 15852                           ;main.c: 2306: vscpData[ 4 ] = 1;
 15853  004360  0E01               	movlw	1
 15854  004362  6E38               	movwf	_vscpData+4,c
 15855                           
 15856                           ; BSR set to: 0
 15857                           ;main.c: 2308: if (sendVSCPFrame(0,
 15858                           ;main.c: 2309: 37,
 15859                           ;main.c: 2310: 0,
 15860                           ;main.c: 2311: 0,
 15861                           ;main.c: 2312: 5,
 15862                           ;main.c: 2313: vscpData)) {
 15863  004364  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15864  004366  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 15865  004368  0E25               	movlw	37
 15866  00436A  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15867  00436C  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15868  00436E  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15869  004370  0E05               	movlw	5
 15870  004372  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15871  004374  0E34               	movlw	low _vscpData
 15872  004376  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15873  004378  EC6A  F022         	call	_sendVSCPFrame	;wreg free
 15874  00437C  0900               	iorlw	0
 15875  00437E  E049               	bz	l15170
 15876                           
 15877                           ;main.c: 2315: timekeeper = 0;
 15878  004380  6A22               	clrf	_timekeeper,c	;volatile
 15879  004382  6A23               	clrf	_timekeeper+1,c	;volatile
 15880  004384  6A24               	clrf	_timekeeper+2,c	;volatile
 15881  004386  6A25               	clrf	_timekeeper+3,c	;volatile
 15882                           
 15883                           ;main.c: 2316: while (timekeeper < timeout) {
 15884  004388  D034               	goto	l15168
 15885  00438A                     l1093:
 15886                           
 15887                           ; BSR set to: 0
 15888  00438A  0004               	clrwdt		;# 
 15889                           
 15890                           ;main.c: 2320: if (getVSCPFrame(&vscpClass,
 15891                           ;main.c: 2321: &vscpType,
 15892                           ;main.c: 2322: &vscpNodeId,
 15893                           ;main.c: 2323: &vscpPriority,
 15894                           ;main.c: 2324: &vscpSize,
 15895                           ;main.c: 2325: vscpData)) {
 15896  00438C  0100               	movlb	0	; () banked
 15897  00438E  0EEC               	movlw	low _vscpType
 15898  004390  6F72               	movwf	?_getVSCPFrame& (0+255),b
 15899  004392  0EE9               	movlw	low _vscpNodeId
 15900  004394  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15901  004396  0EEA               	movlw	low _vscpPriority
 15902  004398  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15903  00439A  0EEB               	movlw	low _vscpSize
 15904  00439C  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15905  00439E  0E34               	movlw	low _vscpData
 15906  0043A0  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15907  0043A2  0E3C               	movlw	_vscpClass& (0+255)
 15908  0043A4  EC8D  F026         	call	_getVSCPFrame
 15909  0043A8  0900               	iorlw	0
 15910  0043AA  E023               	bz	l15168
 15911                           
 15912                           ; BSR set to: 0
 15913                           ;main.c: 2326: if ((nodeid == vscpNodeId) &&
 15914                           ;main.c: 2327: (0 == vscpClass) &&
 15915                           ;main.c: 2328: (39 == vscpType) &&
 15916                           ;main.c: 2329: (5 == vscpSize) &&
 15917                           ;main.c: 2330: (0 == vscpData[ 0 ]) &&
 15918                           ;main.c: 2331: ((page >> 8) == vscpData[ 1 ]) &&
 15919                           ;main.c: 2332: ((page & 0xff) == vscpData[ 2 ]) &&
 15920                           ;main.c: 2333: (reg == vscpData[ 3 ])) {
 15921  0043AC  51E9               	movf	_vscpNodeId& (0+255),w,b
 15922  0043AE  63C0               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 15923  0043B0  D020               	goto	l15168
 15924                           
 15925                           ; BSR set to: 0
 15926  0043B2  503D               	movf	_vscpClass+1,w,c
 15927  0043B4  103C               	iorwf	_vscpClass,w,c
 15928  0043B6  E11D               	bnz	l15168
 15929                           
 15930                           ; BSR set to: 0
 15931  0043B8  51EC               	movf	_vscpType& (0+255),w,b
 15932  0043BA  0A27               	xorlw	39
 15933  0043BC  E11A               	bnz	l15168
 15934                           
 15935                           ; BSR set to: 0
 15936  0043BE  51EB               	movf	_vscpSize& (0+255),w,b
 15937  0043C0  0A05               	xorlw	5
 15938  0043C2  E117               	bnz	l15168
 15939                           
 15940                           ; BSR set to: 0
 15941  0043C4  6634               	tstfsz	_vscpData,c
 15942  0043C6  D015               	goto	l15168
 15943                           
 15944                           ; BSR set to: 0
 15945  0043C8  51B6               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15946  0043CA  1835               	xorwf	_vscpData+1,w,c
 15947  0043CC  E112               	bnz	l15168
 15948                           
 15949                           ; BSR set to: 0
 15950  0043CE  51B5               	movf	readRegisterExtended@page& (0+255),w,b
 15951  0043D0  EE20  F036         	lfsr	2,_vscpData+2
 15952  0043D4  62DF               	cpfseq	indf2,c
 15953  0043D6  D00D               	goto	l15168
 15954                           
 15955                           ; BSR set to: 0
 15956  0043D8  51B7               	movf	readRegisterExtended@reg& (0+255),w,b
 15957  0043DA  EE20  F037         	lfsr	2,_vscpData+3
 15958  0043DE  62DF               	cpfseq	indf2,c
 15959  0043E0  D008               	goto	l15168
 15960                           
 15961                           ; BSR set to: 0
 15962                           ;main.c: 2334: *value = vscpData[ 4 ];
 15963  0043E2  C0BA  FFD9         	movff	readRegisterExtended@value,fsr2l
 15964  0043E6  C0BB  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 15965  0043EA  C038  FFDF         	movff	_vscpData+4,indf2
 15966                           
 15967                           ; BSR set to: 0
 15968                           ;main.c: 2335: return 1;
 15969  0043EE  0E01               	movlw	1
 15970  0043F0  D011               	goto	l1096
 15971  0043F2                     l15168:
 15972  0043F2  0100               	movlb	0	; () banked
 15973  0043F4  51B8               	movf	readRegisterExtended@timeout& (0+255),w,b
 15974  0043F6  6FBC               	movwf	??_readRegisterExtended& (0+255),b
 15975  0043F8  51B9               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 15976  0043FA  6FBD               	movwf	(??_readRegisterExtended+1)& (0+255),b
 15977  0043FC  6BBE               	clrf	(??_readRegisterExtended+2)& (0+255),b
 15978  0043FE  6BBF               	clrf	(??_readRegisterExtended+3)& (0+255),b
 15979  004400  51BC               	movf	??_readRegisterExtended& (0+255),w,b
 15980  004402  5C22               	subwf	_timekeeper,w,c	;volatile
 15981  004404  51BD               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 15982  004406  5823               	subwfb	_timekeeper+1,w,c	;volatile
 15983  004408  51BE               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 15984  00440A  5824               	subwfb	_timekeeper+2,w,c	;volatile
 15985  00440C  51BF               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 15986  00440E  5825               	subwfb	_timekeeper+3,w,c	;volatile
 15987  004410  E3BC               	bnc	l1093
 15988  004412                     l15170:
 15989                           
 15990                           ;main.c: 2336: }
 15991                           ;main.c: 2337: }
 15992                           ;main.c: 2338: }
 15993                           ;main.c: 2339: }
 15994                           ;main.c: 2341: return 0;
 15995  004412  0E00               	movlw	0
 15996  004414                     l1096:
 15997  004414  0012               	return	
 15998  004416                     __end_of_readRegisterExtended:
 15999                           	opt stack 0
 16000                           tblptru	equ	0xFF8
 16001                           tblptrh	equ	0xFF7
 16002                           tblptrl	equ	0xFF6
 16003                           tablat	equ	0xFF5
 16004                           prodh	equ	0xFF4
 16005                           prodl	equ	0xFF3
 16006                           intcon	equ	0xFF2
 16007                           indf0	equ	0xFEF
 16008                           postinc0	equ	0xFEE
 16009                           fsr0h	equ	0xFEA
 16010                           fsr0l	equ	0xFE9
 16011                           wreg	equ	0xFE8
 16012                           indf1	equ	0xFE7
 16013                           postinc1	equ	0xFE6
 16014                           postdec1	equ	0xFE5
 16015                           fsr1h	equ	0xFE2
 16016                           fsr1l	equ	0xFE1
 16017                           indf2	equ	0xFDF
 16018                           postinc2	equ	0xFDE
 16019                           postdec2	equ	0xFDD
 16020                           plusw2	equ	0xFDB
 16021                           fsr2h	equ	0xFDA
 16022                           fsr2l	equ	0xFD9
 16023                           status	equ	0xFD8
 16024                           
 16025 ;; *************** function _strcpy *****************
 16026 ;; Defined at:
 16027 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 16028 ;; Parameters:    Size  Location     Type
 16029 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16030 ;;		 -> cmdbuf(80), 
 16031 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16032 ;;		 -> cmdbuf(80), 
 16033 ;; Auto vars:     Size  Location     Type
 16034 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16035 ;;		 -> cmdbuf(80), 
 16036 ;; Return value:  Size  Location     Type
 16037 ;;                  2    0[BANK0 ] PTR unsigned char 
 16038 ;; Registers used:
 16039 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 16040 ;; Tracked objects:
 16041 ;;		On entry : F/0
 16042 ;;		On exit  : F/0
 16043 ;;		Unchanged: 0/0
 16044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16045 ;;      Params:         0       4       0       0       0       0       0
 16046 ;;      Locals:         0       2       0       0       0       0       0
 16047 ;;      Temps:          0       0       0       0       0       0       0
 16048 ;;      Totals:         0       6       0       0       0       0       0
 16049 ;;Total ram usage:        6 bytes
 16050 ;; Hardware stack levels used:    1
 16051 ;; Hardware stack levels required when called:    3
 16052 ;; This function calls:
 16053 ;;		Nothing
 16054 ;; This function is called by:
 16055 ;;		_doModeVerbose
 16056 ;; This function uses a non-reentrant model
 16057 ;;
 16058                           
 16059                           	psect	text27
 16060  0057CE                     __ptext27:
 16061                           	opt stack 0
 16062  0057CE                     _strcpy:
 16063                           	opt stack 26
 16064                           
 16065                           ; BSR set to: 0
 16066                           
 16067                           ;incstack = 0
 16068                           ;incstack = 0
 16069  0057CE  C060  F064         	movff	strcpy@to,strcpy@cp
 16070  0057D2  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 16071  0057D6  D004               	goto	l15128
 16072  0057D8                     l15126:
 16073                           
 16074                           ; BSR set to: 0
 16075  0057D8  4B64               	infsnz	strcpy@cp& (0+255),f,b
 16076  0057DA  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 16077  0057DC  4B62               	infsnz	strcpy@from& (0+255),f,b
 16078  0057DE  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 16079  0057E0                     l15128:
 16080                           
 16081                           ; BSR set to: 0
 16082  0057E0  C062  FFD9         	movff	strcpy@from,fsr2l
 16083  0057E4  C063  FFDA         	movff	strcpy@from+1,fsr2h
 16084  0057E8  C064  FFE1         	movff	strcpy@cp,fsr1l
 16085  0057EC  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 16086  0057F0  CFDF FFE7          	movff	indf2,indf1
 16087  0057F4  50E7               	movf	indf1,w,c
 16088  0057F6  B4D8               	btfsc	status,2,c
 16089                           
 16090                           ; BSR set to: 0
 16091  0057F8  0012               	return	
 16092  0057FA  D7EE               	goto	l15126
 16093  0057FC                     __end_of_strcpy:
 16094                           	opt stack 0
 16095                           tblptru	equ	0xFF8
 16096                           tblptrh	equ	0xFF7
 16097                           tblptrl	equ	0xFF6
 16098                           tablat	equ	0xFF5
 16099                           prodh	equ	0xFF4
 16100                           prodl	equ	0xFF3
 16101                           intcon	equ	0xFF2
 16102                           indf0	equ	0xFEF
 16103                           postinc0	equ	0xFEE
 16104                           fsr0h	equ	0xFEA
 16105                           fsr0l	equ	0xFE9
 16106                           wreg	equ	0xFE8
 16107                           indf1	equ	0xFE7
 16108                           postinc1	equ	0xFE6
 16109                           postdec1	equ	0xFE5
 16110                           fsr1h	equ	0xFE2
 16111                           fsr1l	equ	0xFE1
 16112                           indf2	equ	0xFDF
 16113                           postinc2	equ	0xFDE
 16114                           postdec2	equ	0xFDD
 16115                           plusw2	equ	0xFDB
 16116                           fsr2h	equ	0xFDA
 16117                           fsr2l	equ	0xFD9
 16118                           status	equ	0xFD8
 16119                           
 16120 ;; *************** function _findNodes *****************
 16121 ;; Defined at:
 16122 ;;		line 2640 in file "main.c"
 16123 ;; Parameters:    Size  Location     Type
 16124 ;;		None
 16125 ;; Auto vars:     Size  Location     Type
 16126 ;;  i               1  104[BANK0 ] unsigned char 
 16127 ;;  value           1  103[BANK0 ] unsigned char 
 16128 ;;  nFound          1  102[BANK0 ] unsigned char 
 16129 ;; Return value:  Size  Location     Type
 16130 ;;		None               void
 16131 ;; Registers used:
 16132 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 16133 ;; Tracked objects:
 16134 ;;		On entry : F/0
 16135 ;;		On exit  : 0/0
 16136 ;;		Unchanged: 0/0
 16137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16138 ;;      Params:         0       0       0       0       0       0       0
 16139 ;;      Locals:         0       5       0       0       0       0       0
 16140 ;;      Temps:          0       0       0       0       0       0       0
 16141 ;;      Totals:         0       5       0       0       0       0       0
 16142 ;;Total ram usage:        5 bytes
 16143 ;; Hardware stack levels used:    1
 16144 ;; Hardware stack levels required when called:    9
 16145 ;; This function calls:
 16146 ;;		_putsUSART
 16147 ;;		_printNodeFirmwareVersion
 16148 ;;		_printGUID
 16149 ;;		_printMDF
 16150 ;;		_itoa
 16151 ;;		_readRegister
 16152 ;; This function is called by:
 16153 ;;		_doModeVerbose
 16154 ;; This function uses a non-reentrant model
 16155 ;;
 16156                           
 16157                           	psect	text28
 16158  003D44                     __ptext28:
 16159                           	opt stack 0
 16160  003D44                     _findNodes:
 16161                           	opt stack 20
 16162                           
 16163                           ; BSR set to: 0
 16164                           ;main.c: 2641: uint8_t nFound = 0;
 16165                           
 16166                           ; BSR set to: 0
 16167                           ;incstack = 0
 16168                           ;incstack = 0
 16169  003D44  6BC6               	clrf	findNodes@nFound& (0+255),b
 16170                           
 16171                           ; BSR set to: 0
 16172                           ;main.c: 2642: uint8_t i;
 16173                           ;main.c: 2643: uint8_t value;
 16174                           ;main.c: 2645: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16175  003D46  0E71               	movlw	high STR_238
 16176  003D48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16177  003D4A  0E4F               	movlw	low STR_238
 16178  003D4C  6F61               	movwf	?_putsUSART& (0+255),b
 16179  003D4E  EC84  F029         	call	_putsUSART	;wreg free
 16180                           
 16181                           ;main.c: 2647: for (i = 1; i != 0; i++) {
 16182  003D52  0E01               	movlw	1
 16183  003D54  0100               	movlb	0	; () banked
 16184  003D56  6FC8               	movwf	findNodes@i& (0+255),b
 16185  003D58                     l1195:
 16186                           
 16187                           ; BSR set to: 0
 16188  003D58  0004               	clrwdt		;# 
 16189                           
 16190                           ;main.c: 2651: if (readRegister(i,
 16191                           ;main.c: 2652: 0xE0,
 16192                           ;main.c: 2653: rwtimeout,
 16193                           ;main.c: 2654: &value)) {
 16194  003D5A  0EE0               	movlw	224
 16195  003D5C  0100               	movlb	0	; () banked
 16196  003D5E  6FB5               	movwf	?_readRegister& (0+255),b
 16197  003D60  C0E8  F0B6         	movff	_rwtimeout,?_readRegister+1
 16198  003D64  6BB7               	clrf	(?_readRegister+2)& (0+255),b
 16199  003D66  0EC7               	movlw	low findNodes@value
 16200  003D68  6FB8               	movwf	(?_readRegister+3)& (0+255),b
 16201  003D6A  51C8               	movf	findNodes@i& (0+255),w,b
 16202  003D6C  ECD3  F023         	call	_readRegister
 16203  003D70  0900               	iorlw	0
 16204  003D72  E041               	bz	l15114
 16205                           
 16206                           ;main.c: 2655: putsUSART((char *) "Node found with node id = ");
 16207  003D74  0E7B               	movlw	high STR_239
 16208  003D76  0100               	movlb	0	; () banked
 16209  003D78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16210  003D7A  0E9A               	movlw	low STR_239
 16211  003D7C  6F61               	movwf	?_putsUSART& (0+255),b
 16212  003D7E  EC84  F029         	call	_putsUSART	;wreg free
 16213                           
 16214                           ;main.c: 2656: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16215  003D82  0100               	movlb	0	; () banked
 16216  003D84  67E4               	tstfsz	_bHex& (0+255),b
 16217  003D86  D003               	goto	l15096
 16218                           
 16219                           ; BSR set to: 0
 16220  003D88  6BC5               	clrf	(_findNodes$1535+1)& (0+255),b
 16221  003D8A  0E0A               	movlw	10
 16222  003D8C  D002               	goto	L14
 16223  003D8E                     l15096:
 16224                           
 16225                           ; BSR set to: 0
 16226  003D8E  6BC5               	clrf	(_findNodes$1535+1)& (0+255),b
 16227  003D90  0E10               	movlw	16
 16228  003D92                     L14:
 16229  003D92  6FC4               	movwf	_findNodes$1535& (0+255),b
 16230                           
 16231                           ; BSR set to: 0
 16232  003D94  0E01               	movlw	high _wrkbuf
 16233  003D96  0100               	movlb	0	; () banked
 16234  003D98  6F71               	movwf	(?_itoa+1)& (0+255),b
 16235  003D9A  0E76               	movlw	low _wrkbuf
 16236  003D9C  6F70               	movwf	?_itoa& (0+255),b
 16237  003D9E  C0E9  F072         	movff	_vscpNodeId,?_itoa+2
 16238  003DA2  6B73               	clrf	(?_itoa+3)& (0+255),b
 16239  003DA4  C0C4  F074         	movff	_findNodes$1535,?_itoa+4
 16240  003DA8  C0C5  F075         	movff	_findNodes$1535+1,?_itoa+5
 16241  003DAC  EC81  F02B         	call	_itoa	;wreg free
 16242                           
 16243                           ; BSR set to: 0
 16244                           ;main.c: 2657: putsUSART(wrkbuf);
 16245  003DB0  0E01               	movlw	high _wrkbuf
 16246  003DB2  0100               	movlb	0	; () banked
 16247  003DB4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16248  003DB6  0E76               	movlw	low _wrkbuf
 16249  003DB8  6F61               	movwf	?_putsUSART& (0+255),b
 16250  003DBA  EC84  F029         	call	_putsUSART	;wreg free
 16251                           
 16252                           ;main.c: 2658: putsUSART((char *) "\r\n");
 16253  003DBE  0E74               	movlw	high (STR_197+50)
 16254  003DC0  0100               	movlb	0	; () banked
 16255  003DC2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16256  003DC4  0EC0               	movlw	low (STR_197+50)
 16257  003DC6  6F61               	movwf	?_putsUSART& (0+255),b
 16258  003DC8  EC84  F029         	call	_putsUSART	;wreg free
 16259                           
 16260                           ;main.c: 2659: printNodeFirmwareVersion(i);
 16261  003DCC  0100               	movlb	0	; () banked
 16262  003DCE  51C8               	movf	findNodes@i& (0+255),w,b
 16263  003DD0  EC3E  F021         	call	_printNodeFirmwareVersion
 16264                           
 16265                           ;main.c: 2660: printGUID(i);
 16266  003DD4  0100               	movlb	0	; () banked
 16267  003DD6  51C8               	movf	findNodes@i& (0+255),w,b
 16268  003DD8  EC21  F01E         	call	_printGUID
 16269                           
 16270                           ;main.c: 2661: printMDF(i);
 16271  003DDC  0100               	movlb	0	; () banked
 16272  003DDE  51C8               	movf	findNodes@i& (0+255),w,b
 16273  003DE0  ECB1  F025         	call	_printMDF
 16274                           
 16275                           ;main.c: 2662: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16276  003DE4  0E71               	movlw	high STR_238
 16277  003DE6  0100               	movlb	0	; () banked
 16278  003DE8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16279  003DEA  0E4F               	movlw	low STR_238
 16280  003DEC  6F61               	movwf	?_putsUSART& (0+255),b
 16281  003DEE  EC84  F029         	call	_putsUSART	;wreg free
 16282                           
 16283                           ;main.c: 2663: nFound++;
 16284  003DF2  0100               	movlb	0	; () banked
 16285  003DF4  2BC6               	incf	findNodes@nFound& (0+255),f,b
 16286  003DF6                     l15114:
 16287  003DF6  0100               	movlb	0	; () banked
 16288  003DF8  2BC8               	incf	findNodes@i& (0+255),f,b
 16289                           
 16290                           ; BSR set to: 0
 16291  003DFA  67C8               	tstfsz	findNodes@i& (0+255),b
 16292  003DFC  D7AD               	goto	l1195
 16293                           
 16294                           ; BSR set to: 0
 16295                           ;main.c: 2664: }
 16296                           ;main.c: 2666: }
 16297                           ;main.c: 2668: itoa(wrkbuf, nFound, 10);
 16298  003DFE  0E01               	movlw	high _wrkbuf
 16299  003E00  6F71               	movwf	(?_itoa+1)& (0+255),b
 16300  003E02  0E76               	movlw	low _wrkbuf
 16301  003E04  6F70               	movwf	?_itoa& (0+255),b
 16302  003E06  C0C6  F072         	movff	findNodes@nFound,?_itoa+2
 16303  003E0A  6B73               	clrf	(?_itoa+3)& (0+255),b
 16304  003E0C  6B75               	clrf	(?_itoa+5)& (0+255),b
 16305  003E0E  0E0A               	movlw	10
 16306  003E10  6F74               	movwf	(?_itoa+4)& (0+255),b
 16307  003E12  EC81  F02B         	call	_itoa	;wreg free
 16308                           
 16309                           ; BSR set to: 0
 16310                           ;main.c: 2669: putsUSART(wrkbuf);
 16311  003E16  0E01               	movlw	high _wrkbuf
 16312  003E18  0100               	movlb	0	; () banked
 16313  003E1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16314  003E1C  0E76               	movlw	low _wrkbuf
 16315  003E1E  6F61               	movwf	?_putsUSART& (0+255),b
 16316  003E20  EC84  F029         	call	_putsUSART	;wreg free
 16317                           
 16318                           ;main.c: 2670: putsUSART((char *) " nodes found\r\n");
 16319  003E24  0E7E               	movlw	high STR_242
 16320  003E26  0100               	movlb	0	; () banked
 16321  003E28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16322  003E2A  0E4F               	movlw	low STR_242
 16323  003E2C  6F61               	movwf	?_putsUSART& (0+255),b
 16324  003E2E  EF84  F029         	goto	_putsUSART	;wreg free
 16325  003E32                     __end_of_findNodes:
 16326                           	opt stack 0
 16327                           tblptru	equ	0xFF8
 16328                           tblptrh	equ	0xFF7
 16329                           tblptrl	equ	0xFF6
 16330                           tablat	equ	0xFF5
 16331                           prodh	equ	0xFF4
 16332                           prodl	equ	0xFF3
 16333                           intcon	equ	0xFF2
 16334                           indf0	equ	0xFEF
 16335                           postinc0	equ	0xFEE
 16336                           fsr0h	equ	0xFEA
 16337                           fsr0l	equ	0xFE9
 16338                           wreg	equ	0xFE8
 16339                           indf1	equ	0xFE7
 16340                           postinc1	equ	0xFE6
 16341                           postdec1	equ	0xFE5
 16342                           fsr1h	equ	0xFE2
 16343                           fsr1l	equ	0xFE1
 16344                           indf2	equ	0xFDF
 16345                           postinc2	equ	0xFDE
 16346                           postdec2	equ	0xFDD
 16347                           plusw2	equ	0xFDB
 16348                           fsr2h	equ	0xFDA
 16349                           fsr2l	equ	0xFD9
 16350                           status	equ	0xFD8
 16351                           
 16352 ;; *************** function _printMDF *****************
 16353 ;; Defined at:
 16354 ;;		line 2721 in file "main.c"
 16355 ;; Parameters:    Size  Location     Type
 16356 ;;  nodeid          1    wreg     unsigned char 
 16357 ;; Auto vars:     Size  Location     Type
 16358 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16359 ;;  p               2   96[BANK0 ] PTR unsigned char 
 16360 ;;		 -> wrkbuf(80), 
 16361 ;;  i               1   98[BANK0 ] unsigned char 
 16362 ;;  value           1   95[BANK0 ] unsigned char 
 16363 ;; Return value:  Size  Location     Type
 16364 ;;		None               void
 16365 ;; Registers used:
 16366 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16367 ;; Tracked objects:
 16368 ;;		On entry : D/2
 16369 ;;		On exit  : 0/0
 16370 ;;		Unchanged: 0/0
 16371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16372 ;;      Params:         0       0       0       0       0       0       0
 16373 ;;      Locals:         0       5       0       0       0       0       0
 16374 ;;      Temps:          0       0       0       0       0       0       0
 16375 ;;      Totals:         0       5       0       0       0       0       0
 16376 ;;Total ram usage:        5 bytes
 16377 ;; Hardware stack levels used:    1
 16378 ;; Hardware stack levels required when called:    8
 16379 ;; This function calls:
 16380 ;;		_putsUSART
 16381 ;;		_memset
 16382 ;;		_readRegister
 16383 ;; This function is called by:
 16384 ;;		_doModeVerbose
 16385 ;;		_findNodes
 16386 ;; This function uses a non-reentrant model
 16387 ;;
 16388                           
 16389                           	psect	text29
 16390  004B62                     __ptext29:
 16391                           	opt stack 0
 16392  004B62                     _printMDF:
 16393                           	opt stack 21
 16394                           
 16395                           ;incstack = 0
 16396                           ;incstack = 0
 16397                           ;printMDF@nodeid stored from wreg
 16398  004B62  CFE8 F0BE          	movff	wreg,printMDF@nodeid
 16399                           
 16400                           ;main.c: 2722: uint8_t i;
 16401                           ;main.c: 2723: uint8_t value;
 16402                           ;main.c: 2724: char *p = wrkbuf;
 16403  004B66  0E01               	movlw	high _wrkbuf
 16404  004B68  0100               	movlb	0	; () banked
 16405  004B6A  6FC1               	movwf	(printMDF@p+1)& (0+255),b
 16406  004B6C  0E76               	movlw	low _wrkbuf
 16407  004B6E  6FC0               	movwf	printMDF@p& (0+255),b
 16408                           
 16409                           ; BSR set to: 0
 16410                           ;main.c: 2725: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16411  004B70  0E01               	movlw	high _wrkbuf
 16412  004B72  6F61               	movwf	(?_memset+1)& (0+255),b
 16413  004B74  0E76               	movlw	low _wrkbuf
 16414  004B76  6F60               	movwf	?_memset& (0+255),b
 16415  004B78  6B63               	clrf	(?_memset+3)& (0+255),b
 16416  004B7A  6B62               	clrf	(?_memset+2)& (0+255),b
 16417  004B7C  6B65               	clrf	(?_memset+5)& (0+255),b
 16418  004B7E  0E50               	movlw	80
 16419  004B80  6F64               	movwf	(?_memset+4)& (0+255),b
 16420  004B82  ECFE  F02B         	call	_memset	;wreg free
 16421                           
 16422                           ; BSR set to: 0
 16423                           ;main.c: 2726: putsUSART((char *) "MDF = http://");
 16424  004B86  0E7E               	movlw	high STR_248
 16425  004B88  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16426  004B8A  0E6D               	movlw	low STR_248
 16427  004B8C  6F61               	movwf	?_putsUSART& (0+255),b
 16428  004B8E  EC84  F029         	call	_putsUSART	;wreg free
 16429                           
 16430                           ;main.c: 2728: for (i = 0; i < 32; i++) {
 16431  004B92  0100               	movlb	0	; () banked
 16432  004B94  6BC2               	clrf	printMDF@i& (0+255),b
 16433  004B96                     l15656:
 16434                           
 16435                           ; BSR set to: 0
 16436                           ;main.c: 2729: if (readRegister(nodeid,
 16437                           ;main.c: 2730: 0xE0 + i,
 16438                           ;main.c: 2731: rwtimeout,
 16439                           ;main.c: 2732: &value)) {
 16440  004B96  51C2               	movf	printMDF@i& (0+255),w,b
 16441  004B98  0FE0               	addlw	224
 16442  004B9A  6FB5               	movwf	?_readRegister& (0+255),b
 16443  004B9C  C0E8  F0B6         	movff	_rwtimeout,?_readRegister+1
 16444  004BA0  6BB7               	clrf	(?_readRegister+2)& (0+255),b
 16445  004BA2  0EBF               	movlw	low printMDF@value
 16446  004BA4  6FB8               	movwf	(?_readRegister+3)& (0+255),b
 16447  004BA6  51BE               	movf	printMDF@nodeid& (0+255),w,b
 16448  004BA8  ECD3  F023         	call	_readRegister
 16449  004BAC  0900               	iorlw	0
 16450  004BAE  E00A               	bz	l15662
 16451                           
 16452                           ;main.c: 2733: *p = value;
 16453  004BB0  C0C0  FFD9         	movff	printMDF@p,fsr2l
 16454  004BB4  C0C1  FFDA         	movff	printMDF@p+1,fsr2h
 16455  004BB8  C0BF  FFDF         	movff	printMDF@value,indf2
 16456  004BBC                     l15660:
 16457                           
 16458                           ;main.c: 2734: p++;
 16459  004BBC  0100               	movlb	0	; () banked
 16460  004BBE  4BC0               	infsnz	printMDF@p& (0+255),f,b
 16461  004BC0  2BC1               	incf	(printMDF@p+1)& (0+255),f,b
 16462                           
 16463                           ;main.c: 2736: }
 16464  004BC2  D007               	goto	l15666
 16465  004BC4                     l15662:
 16466                           
 16467                           ;main.c: 2737: else {
 16468                           ;main.c: 2738: *p = '?';
 16469  004BC4  C0C0  FFD9         	movff	printMDF@p,fsr2l
 16470  004BC8  C0C1  FFDA         	movff	printMDF@p+1,fsr2h
 16471  004BCC  0E3F               	movlw	63
 16472  004BCE  6EDF               	movwf	indf2,c
 16473  004BD0  D7F5               	goto	l15660
 16474  004BD2                     l15666:
 16475                           
 16476                           ; BSR set to: 0
 16477  004BD2  2BC2               	incf	printMDF@i& (0+255),f,b
 16478                           
 16479                           ; BSR set to: 0
 16480  004BD4  0E1F               	movlw	31
 16481  004BD6  65C2               	cpfsgt	printMDF@i& (0+255),b
 16482  004BD8  D7DE               	goto	l15656
 16483                           
 16484                           ; BSR set to: 0
 16485                           ;main.c: 2740: }
 16486                           ;main.c: 2741: }
 16487                           ;main.c: 2743: putsUSART(wrkbuf);
 16488  004BDA  0E01               	movlw	high _wrkbuf
 16489  004BDC  0100               	movlb	0	; () banked
 16490  004BDE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16491  004BE0  0E76               	movlw	low _wrkbuf
 16492  004BE2  6F61               	movwf	?_putsUSART& (0+255),b
 16493  004BE4  EC84  F029         	call	_putsUSART	;wreg free
 16494                           
 16495                           ;main.c: 2744: putsUSART((char *) "\r\n");
 16496  004BE8  0E74               	movlw	high (STR_197+50)
 16497  004BEA  0100               	movlb	0	; () banked
 16498  004BEC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16499  004BEE  0EC0               	movlw	low (STR_197+50)
 16500  004BF0  6F61               	movwf	?_putsUSART& (0+255),b
 16501  004BF2  EF84  F029         	goto	_putsUSART	;wreg free
 16502  004BF6                     __end_of_printMDF:
 16503                           	opt stack 0
 16504                           tblptru	equ	0xFF8
 16505                           tblptrh	equ	0xFF7
 16506                           tblptrl	equ	0xFF6
 16507                           tablat	equ	0xFF5
 16508                           prodh	equ	0xFF4
 16509                           prodl	equ	0xFF3
 16510                           intcon	equ	0xFF2
 16511                           indf0	equ	0xFEF
 16512                           postinc0	equ	0xFEE
 16513                           fsr0h	equ	0xFEA
 16514                           fsr0l	equ	0xFE9
 16515                           wreg	equ	0xFE8
 16516                           indf1	equ	0xFE7
 16517                           postinc1	equ	0xFE6
 16518                           postdec1	equ	0xFE5
 16519                           fsr1h	equ	0xFE2
 16520                           fsr1l	equ	0xFE1
 16521                           indf2	equ	0xFDF
 16522                           postinc2	equ	0xFDE
 16523                           postdec2	equ	0xFDD
 16524                           plusw2	equ	0xFDB
 16525                           fsr2h	equ	0xFDA
 16526                           fsr2l	equ	0xFD9
 16527                           status	equ	0xFD8
 16528                           
 16529 ;; *************** function _printGUID *****************
 16530 ;; Defined at:
 16531 ;;		line 2680 in file "main.c"
 16532 ;; Parameters:    Size  Location     Type
 16533 ;;  nodeid          1    wreg     unsigned char 
 16534 ;; Auto vars:     Size  Location     Type
 16535 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16536 ;;  buf             3   95[BANK0 ] unsigned char [3]
 16537 ;;  i               1   99[BANK0 ] unsigned char 
 16538 ;;  value           1   98[BANK0 ] unsigned char 
 16539 ;; Return value:  Size  Location     Type
 16540 ;;		None               void
 16541 ;; Registers used:
 16542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16543 ;; Tracked objects:
 16544 ;;		On entry : D/2
 16545 ;;		On exit  : 0/0
 16546 ;;		Unchanged: 0/0
 16547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16548 ;;      Params:         0       0       0       0       0       0       0
 16549 ;;      Locals:         0       6       0       0       0       0       0
 16550 ;;      Temps:          0       0       0       0       0       0       0
 16551 ;;      Totals:         0       6       0       0       0       0       0
 16552 ;;Total ram usage:        6 bytes
 16553 ;; Hardware stack levels used:    1
 16554 ;; Hardware stack levels required when called:    8
 16555 ;; This function calls:
 16556 ;;		_putsUSART
 16557 ;;		_memset
 16558 ;;		_strlen
 16559 ;;		_itoa
 16560 ;;		_readRegister
 16561 ;;		_strcat
 16562 ;; This function is called by:
 16563 ;;		_doModeVerbose
 16564 ;;		_findNodes
 16565 ;; This function uses a non-reentrant model
 16566 ;;
 16567                           
 16568                           	psect	text30
 16569  003C42                     __ptext30:
 16570                           	opt stack 0
 16571  003C42                     _printGUID:
 16572                           	opt stack 21
 16573                           
 16574                           ;incstack = 0
 16575                           ;incstack = 0
 16576                           ;printGUID@nodeid stored from wreg
 16577  003C42  CFE8 F0BE          	movff	wreg,printGUID@nodeid
 16578                           
 16579                           ;main.c: 2681: uint8_t i;
 16580                           ;main.c: 2682: uint8_t value;
 16581                           ;main.c: 2683: char buf[3];
 16582                           ;main.c: 2685: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16583  003C46  0E01               	movlw	high _wrkbuf
 16584  003C48  0100               	movlb	0	; () banked
 16585  003C4A  6F61               	movwf	(?_memset+1)& (0+255),b
 16586  003C4C  0E76               	movlw	low _wrkbuf
 16587  003C4E  6F60               	movwf	?_memset& (0+255),b
 16588  003C50  6B63               	clrf	(?_memset+3)& (0+255),b
 16589  003C52  6B62               	clrf	(?_memset+2)& (0+255),b
 16590  003C54  6B65               	clrf	(?_memset+5)& (0+255),b
 16591  003C56  0E50               	movlw	80
 16592  003C58  6F64               	movwf	(?_memset+4)& (0+255),b
 16593  003C5A  ECFE  F02B         	call	_memset	;wreg free
 16594                           
 16595                           ; BSR set to: 0
 16596                           ;main.c: 2686: putsUSART((char *) "GUID = ");
 16597  003C5E  0E7E               	movlw	high STR_243
 16598  003C60  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16599  003C62  0EE6               	movlw	low STR_243
 16600  003C64  6F61               	movwf	?_putsUSART& (0+255),b
 16601  003C66  EC84  F029         	call	_putsUSART	;wreg free
 16602                           
 16603                           ;main.c: 2688: for (i = 0; i < 16; i++) {
 16604  003C6A  0100               	movlb	0	; () banked
 16605  003C6C  6BC3               	clrf	printGUID@i& (0+255),b
 16606  003C6E                     l15622:
 16607                           
 16608                           ; BSR set to: 0
 16609                           ;main.c: 2689: if (readRegister(nodeid,
 16610                           ;main.c: 2690: 0xD0 + i,
 16611                           ;main.c: 2691: rwtimeout,
 16612                           ;main.c: 2692: &value)) {
 16613  003C6E  51C3               	movf	printGUID@i& (0+255),w,b
 16614  003C70  0FD0               	addlw	208
 16615  003C72  6FB5               	movwf	?_readRegister& (0+255),b
 16616  003C74  C0E8  F0B6         	movff	_rwtimeout,?_readRegister+1
 16617  003C78  6BB7               	clrf	(?_readRegister+2)& (0+255),b
 16618  003C7A  0EC2               	movlw	low printGUID@value
 16619  003C7C  6FB8               	movwf	(?_readRegister+3)& (0+255),b
 16620  003C7E  51BE               	movf	printGUID@nodeid& (0+255),w,b
 16621  003C80  ECD3  F023         	call	_readRegister
 16622  003C84  0900               	iorlw	0
 16623  003C86  E029               	bz	l15632
 16624                           
 16625                           ;main.c: 2693: itoa(buf, value, 16);
 16626  003C88  0100               	movlb	0	; () banked
 16627  003C8A  0E00               	movlw	high printGUID@buf
 16628  003C8C  6F71               	movwf	(?_itoa+1)& (0+255),b
 16629  003C8E  0EBF               	movlw	low printGUID@buf
 16630  003C90  6F70               	movwf	?_itoa& (0+255),b
 16631  003C92  C0C2  F072         	movff	printGUID@value,?_itoa+2
 16632  003C96  6B73               	clrf	(?_itoa+3)& (0+255),b
 16633  003C98  6B75               	clrf	(?_itoa+5)& (0+255),b
 16634  003C9A  0E10               	movlw	16
 16635  003C9C  6F74               	movwf	(?_itoa+4)& (0+255),b
 16636  003C9E  EC81  F02B         	call	_itoa	;wreg free
 16637                           
 16638                           ; BSR set to: 0
 16639                           ;main.c: 2694: if (1 == strlen(buf)) {
 16640  003CA2  0E00               	movlw	high printGUID@buf
 16641  003CA4  6F61               	movwf	(?_strlen+1)& (0+255),b
 16642  003CA6  0EBF               	movlw	low printGUID@buf
 16643  003CA8  6F60               	movwf	?_strlen& (0+255),b
 16644  003CAA  ECAB  F02A         	call	_strlen	;wreg free
 16645  003CAE  0560               	decf	?_strlen& (0+255),w,b
 16646  003CB0  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 16647  003CB2  E10F               	bnz	l15630
 16648                           
 16649                           ; BSR set to: 0
 16650                           ;main.c: 2695: strcat(wrkbuf, "0");
 16651  003CB4  0E01               	movlw	high _wrkbuf
 16652  003CB6  0100               	movlb	0	; () banked
 16653  003CB8  6F61               	movwf	(?_strcat+1)& (0+255),b
 16654  003CBA  0E76               	movlw	low _wrkbuf
 16655  003CBC  6F60               	movwf	?_strcat& (0+255),b
 16656  003CBE  0E7F               	movlw	high STR_244
 16657  003CC0  6F63               	movwf	(?_strcat+3)& (0+255),b
 16658  003CC2  0EF9               	movlw	low STR_244
 16659  003CC4  6F62               	movwf	(?_strcat+2)& (0+255),b
 16660  003CC6  EC58  F029         	call	_strcat	;wreg free
 16661                           
 16662                           ;main.c: 2696: strcat(wrkbuf, buf);
 16663  003CCA  D832               	call	PL68	;call to abstracted procedure
 16664  003CCC  EC58  F029         	call	_strcat	;wreg free
 16665                           
 16666                           ;main.c: 2697: } else {
 16667  003CD0  D00F               	goto	l15634
 16668  003CD2                     l15630:
 16669                           
 16670                           ; BSR set to: 0
 16671                           ;main.c: 2698: strcat(wrkbuf, buf);
 16672  003CD2  D82E               	call	PL68	;call to abstracted procedure
 16673  003CD4  EC58  F029         	call	_strcat	;wreg free
 16674  003CD8  D00B               	goto	l15634
 16675  003CDA                     l15632:
 16676                           
 16677                           ;main.c: 2702: strcat(wrkbuf, "--");
 16678  003CDA  0E01               	movlw	high _wrkbuf
 16679  003CDC  0100               	movlb	0	; () banked
 16680  003CDE  6F61               	movwf	(?_strcat+1)& (0+255),b
 16681  003CE0  0E76               	movlw	low _wrkbuf
 16682  003CE2  6F60               	movwf	?_strcat& (0+255),b
 16683  003CE4  0E7F               	movlw	high STR_245
 16684  003CE6  6F63               	movwf	(?_strcat+3)& (0+255),b
 16685  003CE8  0EE5               	movlw	low STR_245
 16686  003CEA  6F62               	movwf	(?_strcat+2)& (0+255),b
 16687  003CEC  EC58  F029         	call	_strcat	;wreg free
 16688  003CF0                     l15634:
 16689                           
 16690                           ;main.c: 2703: }
 16691                           ;main.c: 2705: if (i < 15) {
 16692  003CF0  0E0F               	movlw	15
 16693  003CF2  0100               	movlb	0	; () banked
 16694  003CF4  61C3               	cpfslt	printGUID@i& (0+255),b
 16695  003CF6  D00A               	goto	l15638
 16696                           
 16697                           ; BSR set to: 0
 16698                           ;main.c: 2706: strcat(wrkbuf, ":");
 16699  003CF8  0E01               	movlw	high _wrkbuf
 16700  003CFA  6F61               	movwf	(?_strcat+1)& (0+255),b
 16701  003CFC  0E76               	movlw	low _wrkbuf
 16702  003CFE  6F60               	movwf	?_strcat& (0+255),b
 16703  003D00  0E7F               	movlw	high STR_246
 16704  003D02  6F63               	movwf	(?_strcat+3)& (0+255),b
 16705  003D04  0EFB               	movlw	low STR_246
 16706  003D06  6F62               	movwf	(?_strcat+2)& (0+255),b
 16707  003D08  EC58  F029         	call	_strcat	;wreg free
 16708  003D0C                     l15638:
 16709  003D0C  0100               	movlb	0	; () banked
 16710  003D0E  2BC3               	incf	printGUID@i& (0+255),f,b
 16711                           
 16712                           ; BSR set to: 0
 16713  003D10  0E0F               	movlw	15
 16714  003D12  65C3               	cpfsgt	printGUID@i& (0+255),b
 16715  003D14  D7AC               	goto	l15622
 16716                           
 16717                           ; BSR set to: 0
 16718                           ;main.c: 2707: }
 16719                           ;main.c: 2709: }
 16720                           ;main.c: 2711: putsUSART(wrkbuf);
 16721  003D16  0E01               	movlw	high _wrkbuf
 16722  003D18  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16723  003D1A  0E76               	movlw	low _wrkbuf
 16724  003D1C  6F61               	movwf	?_putsUSART& (0+255),b
 16725  003D1E  EC84  F029         	call	_putsUSART	;wreg free
 16726                           
 16727                           ;main.c: 2712: putsUSART((char *) "\r\n");
 16728  003D22  0E74               	movlw	high (STR_197+50)
 16729  003D24  0100               	movlb	0	; () banked
 16730  003D26  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16731  003D28  0EC0               	movlw	low (STR_197+50)
 16732  003D2A  6F61               	movwf	?_putsUSART& (0+255),b
 16733  003D2C  EF84  F029         	goto	_putsUSART	;wreg free
 16734  003D30                     __end_of_printGUID:
 16735                           	opt stack 0
 16736  003D30                     PL68:
 16737                           	opt stack 21
 16738  003D30  0E01               	movlw	high _wrkbuf
 16739  003D32  0100               	movlb	0	; () banked
 16740  003D34  6F61               	movwf	(?_strcat+1)& (0+255),b
 16741  003D36  0E76               	movlw	low _wrkbuf
 16742  003D38  6F60               	movwf	?_strcat& (0+255),b
 16743  003D3A  0E00               	movlw	high printGUID@buf
 16744  003D3C  6F63               	movwf	(?_strcat+3)& (0+255),b
 16745  003D3E  0EBF               	movlw	low printGUID@buf
 16746  003D40  6F62               	movwf	(?_strcat+2)& (0+255),b
 16747  003D42  0012               	return	
 16748  003D44                     __end_ofPL68:
 16749                           	opt stack 0
 16750                           tblptru	equ	0xFF8
 16751                           tblptrh	equ	0xFF7
 16752                           tblptrl	equ	0xFF6
 16753                           tablat	equ	0xFF5
 16754                           prodh	equ	0xFF4
 16755                           prodl	equ	0xFF3
 16756                           intcon	equ	0xFF2
 16757                           indf0	equ	0xFEF
 16758                           postinc0	equ	0xFEE
 16759                           fsr0h	equ	0xFEA
 16760                           fsr0l	equ	0xFE9
 16761                           wreg	equ	0xFE8
 16762                           indf1	equ	0xFE7
 16763                           postinc1	equ	0xFE6
 16764                           postdec1	equ	0xFE5
 16765                           fsr1h	equ	0xFE2
 16766                           fsr1l	equ	0xFE1
 16767                           indf2	equ	0xFDF
 16768                           postinc2	equ	0xFDE
 16769                           postdec2	equ	0xFDD
 16770                           plusw2	equ	0xFDB
 16771                           fsr2h	equ	0xFDA
 16772                           fsr2l	equ	0xFD9
 16773                           status	equ	0xFD8
 16774                           
 16775 ;; *************** function _printNodeFirmwareVersion *****************
 16776 ;; Defined at:
 16777 ;;		line 2752 in file "main.c"
 16778 ;; Parameters:    Size  Location     Type
 16779 ;;  nodeid          1    wreg     unsigned char 
 16780 ;; Auto vars:     Size  Location     Type
 16781 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16782 ;;  buf             3   95[BANK0 ] unsigned char [3]
 16783 ;;  i               1   99[BANK0 ] unsigned char 
 16784 ;;  value           1   98[BANK0 ] unsigned char 
 16785 ;; Return value:  Size  Location     Type
 16786 ;;		None               void
 16787 ;; Registers used:
 16788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16789 ;; Tracked objects:
 16790 ;;		On entry : D/2
 16791 ;;		On exit  : 0/0
 16792 ;;		Unchanged: 0/0
 16793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16794 ;;      Params:         0       0       0       0       0       0       0
 16795 ;;      Locals:         0       6       0       0       0       0       0
 16796 ;;      Temps:          0       0       0       0       0       0       0
 16797 ;;      Totals:         0       6       0       0       0       0       0
 16798 ;;Total ram usage:        6 bytes
 16799 ;; Hardware stack levels used:    1
 16800 ;; Hardware stack levels required when called:    8
 16801 ;; This function calls:
 16802 ;;		_putsUSART
 16803 ;;		_memset
 16804 ;;		_itoa
 16805 ;;		_readRegister
 16806 ;;		_strcat
 16807 ;; This function is called by:
 16808 ;;		_doModeVerbose
 16809 ;;		_findNodes
 16810 ;; This function uses a non-reentrant model
 16811 ;;
 16812                           
 16813                           	psect	text31
 16814  00427C                     __ptext31:
 16815                           	opt stack 0
 16816  00427C                     _printNodeFirmwareVersion:
 16817                           	opt stack 21
 16818                           
 16819                           ;incstack = 0
 16820                           ;incstack = 0
 16821                           ;printNodeFirmwareVersion@nodeid stored from wreg
 16822  00427C  CFE8 F0BE          	movff	wreg,printNodeFirmwareVersion@nodeid
 16823                           
 16824                           ;main.c: 2753: uint8_t i;
 16825                           ;main.c: 2754: uint8_t value;
 16826                           ;main.c: 2755: char buf[3];
 16827                           ;main.c: 2757: memset( wrkbuf, 0, sizeof(wrkbuf) );
 16828  004280  0E01               	movlw	high _wrkbuf
 16829  004282  0100               	movlb	0	; () banked
 16830  004284  6F61               	movwf	(?_memset+1)& (0+255),b
 16831  004286  0E76               	movlw	low _wrkbuf
 16832  004288  6F60               	movwf	?_memset& (0+255),b
 16833  00428A  6B63               	clrf	(?_memset+3)& (0+255),b
 16834  00428C  6B62               	clrf	(?_memset+2)& (0+255),b
 16835  00428E  6B65               	clrf	(?_memset+5)& (0+255),b
 16836  004290  0E50               	movlw	80
 16837  004292  6F64               	movwf	(?_memset+4)& (0+255),b
 16838  004294  ECFE  F02B         	call	_memset	;wreg free
 16839                           
 16840                           ; BSR set to: 0
 16841                           ;main.c: 2758: putsUSART((char *) "Firmware version = ");
 16842  004298  0E7D               	movlw	high STR_250
 16843  00429A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16844  00429C  0EBF               	movlw	low STR_250
 16845  00429E  6F61               	movwf	?_putsUSART& (0+255),b
 16846  0042A0  EC84  F029         	call	_putsUSART	;wreg free
 16847                           
 16848                           ;main.c: 2760: for (i = 0; i < 3; i++) {
 16849  0042A4  0100               	movlb	0	; () banked
 16850  0042A6  6BC3               	clrf	printNodeFirmwareVersion@i& (0+255),b
 16851  0042A8                     l15594:
 16852                           
 16853                           ; BSR set to: 0
 16854                           ;main.c: 2761: if (readRegister(nodeid,
 16855                           ;main.c: 2762: 0x94 + i,
 16856                           ;main.c: 2763: rwtimeout,
 16857                           ;main.c: 2764: &value)) {
 16858  0042A8  51C3               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 16859  0042AA  0F94               	addlw	148
 16860  0042AC  6FB5               	movwf	?_readRegister& (0+255),b
 16861  0042AE  C0E8  F0B6         	movff	_rwtimeout,?_readRegister+1
 16862  0042B2  6BB7               	clrf	(?_readRegister+2)& (0+255),b
 16863  0042B4  0EC2               	movlw	low printNodeFirmwareVersion@value
 16864  0042B6  6FB8               	movwf	(?_readRegister+3)& (0+255),b
 16865  0042B8  51BE               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 16866  0042BA  ECD3  F023         	call	_readRegister
 16867  0042BE  0900               	iorlw	0
 16868  0042C0  E019               	bz	l15600
 16869                           
 16870                           ;main.c: 2765: itoa(buf, value, 16);
 16871  0042C2  0100               	movlb	0	; () banked
 16872  0042C4  0E00               	movlw	high printNodeFirmwareVersion@buf
 16873  0042C6  6F71               	movwf	(?_itoa+1)& (0+255),b
 16874  0042C8  0EBF               	movlw	low printNodeFirmwareVersion@buf
 16875  0042CA  6F70               	movwf	?_itoa& (0+255),b
 16876  0042CC  C0C2  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 16877  0042D0  6B73               	clrf	(?_itoa+3)& (0+255),b
 16878  0042D2  6B75               	clrf	(?_itoa+5)& (0+255),b
 16879  0042D4  0E10               	movlw	16
 16880  0042D6  6F74               	movwf	(?_itoa+4)& (0+255),b
 16881  0042D8  EC81  F02B         	call	_itoa	;wreg free
 16882                           
 16883                           ; BSR set to: 0
 16884                           ;main.c: 2766: strcat(wrkbuf, buf);
 16885  0042DC  0E01               	movlw	high _wrkbuf
 16886  0042DE  0100               	movlb	0	; () banked
 16887  0042E0  6F61               	movwf	(?_strcat+1)& (0+255),b
 16888  0042E2  0E76               	movlw	low _wrkbuf
 16889  0042E4  6F60               	movwf	?_strcat& (0+255),b
 16890  0042E6  0E00               	movlw	high printNodeFirmwareVersion@buf
 16891  0042E8  6F63               	movwf	(?_strcat+3)& (0+255),b
 16892  0042EA  0EBF               	movlw	low printNodeFirmwareVersion@buf
 16893  0042EC  6F62               	movwf	(?_strcat+2)& (0+255),b
 16894  0042EE  EC58  F029         	call	_strcat	;wreg free
 16895                           
 16896                           ;main.c: 2767: }
 16897  0042F2  D00B               	goto	l15602
 16898  0042F4                     l15600:
 16899                           
 16900                           ;main.c: 2768: else {
 16901                           ;main.c: 2769: strcat(wrkbuf, "?");
 16902  0042F4  0E01               	movlw	high _wrkbuf
 16903  0042F6  0100               	movlb	0	; () banked
 16904  0042F8  6F61               	movwf	(?_strcat+1)& (0+255),b
 16905  0042FA  0E76               	movlw	low _wrkbuf
 16906  0042FC  6F60               	movwf	?_strcat& (0+255),b
 16907  0042FE  0E7F               	movlw	high STR_251
 16908  004300  6F63               	movwf	(?_strcat+3)& (0+255),b
 16909  004302  0EFD               	movlw	low STR_251
 16910  004304  6F62               	movwf	(?_strcat+2)& (0+255),b
 16911  004306  EC58  F029         	call	_strcat	;wreg free
 16912  00430A                     l15602:
 16913                           
 16914                           ;main.c: 2770: }
 16915                           ;main.c: 2772: if (i < 2) {
 16916  00430A  0E02               	movlw	2
 16917  00430C  0100               	movlb	0	; () banked
 16918  00430E  61C3               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 16919  004310  D00A               	goto	l15606
 16920                           
 16921                           ; BSR set to: 0
 16922                           ;main.c: 2773: strcat(wrkbuf, ".");
 16923  004312  0E01               	movlw	high _wrkbuf
 16924  004314  6F61               	movwf	(?_strcat+1)& (0+255),b
 16925  004316  0E76               	movlw	low _wrkbuf
 16926  004318  6F60               	movwf	?_strcat& (0+255),b
 16927  00431A  0E7F               	movlw	high STR_252
 16928  00431C  6F63               	movwf	(?_strcat+3)& (0+255),b
 16929  00431E  0EF7               	movlw	low STR_252
 16930  004320  6F62               	movwf	(?_strcat+2)& (0+255),b
 16931  004322  EC58  F029         	call	_strcat	;wreg free
 16932  004326                     l15606:
 16933  004326  0100               	movlb	0	; () banked
 16934  004328  2BC3               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 16935                           
 16936                           ; BSR set to: 0
 16937  00432A  0E02               	movlw	2
 16938  00432C  65C3               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 16939  00432E  D7BC               	goto	l15594
 16940                           
 16941                           ; BSR set to: 0
 16942                           ;main.c: 2774: }
 16943                           ;main.c: 2776: }
 16944                           ;main.c: 2778: putsUSART(wrkbuf);
 16945  004330  0E01               	movlw	high _wrkbuf
 16946  004332  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16947  004334  0E76               	movlw	low _wrkbuf
 16948  004336  6F61               	movwf	?_putsUSART& (0+255),b
 16949  004338  EC84  F029         	call	_putsUSART	;wreg free
 16950                           
 16951                           ;main.c: 2779: putsUSART((char *) "\r\n");
 16952  00433C  0E74               	movlw	high (STR_197+50)
 16953  00433E  0100               	movlb	0	; () banked
 16954  004340  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 16955  004342  0EC0               	movlw	low (STR_197+50)
 16956  004344  6F61               	movwf	?_putsUSART& (0+255),b
 16957  004346  EF84  F029         	goto	_putsUSART	;wreg free
 16958  00434A                     __end_of_printNodeFirmwareVersion:
 16959                           	opt stack 0
 16960                           tblptru	equ	0xFF8
 16961                           tblptrh	equ	0xFF7
 16962                           tblptrl	equ	0xFF6
 16963                           tablat	equ	0xFF5
 16964                           prodh	equ	0xFF4
 16965                           prodl	equ	0xFF3
 16966                           intcon	equ	0xFF2
 16967                           indf0	equ	0xFEF
 16968                           postinc0	equ	0xFEE
 16969                           fsr0h	equ	0xFEA
 16970                           fsr0l	equ	0xFE9
 16971                           wreg	equ	0xFE8
 16972                           indf1	equ	0xFE7
 16973                           postinc1	equ	0xFE6
 16974                           postdec1	equ	0xFE5
 16975                           fsr1h	equ	0xFE2
 16976                           fsr1l	equ	0xFE1
 16977                           indf2	equ	0xFDF
 16978                           postinc2	equ	0xFDE
 16979                           postdec2	equ	0xFDD
 16980                           plusw2	equ	0xFDB
 16981                           fsr2h	equ	0xFDA
 16982                           fsr2l	equ	0xFD9
 16983                           status	equ	0xFD8
 16984                           
 16985 ;; *************** function _strcat *****************
 16986 ;; Defined at:
 16987 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 16988 ;; Parameters:    Size  Location     Type
 16989 ;;  to              2    0[BANK0 ] PTR unsigned char 
 16990 ;;		 -> wrkbuf(80), 
 16991 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 16992 ;;		 -> STR_252(2), STR_251(2), printNodeFirmwareVersion@buf(3), STR_246(2), 
 16993 ;;		 -> STR_245(3), STR_244(2), printGUID@buf(3), 
 16994 ;; Auto vars:     Size  Location     Type
 16995 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 16996 ;;		 -> wrkbuf(80), 
 16997 ;; Return value:  Size  Location     Type
 16998 ;;                  2    0[BANK0 ] PTR unsigned char 
 16999 ;; Registers used:
 17000 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 17001 ;; Tracked objects:
 17002 ;;		On entry : F/0
 17003 ;;		On exit  : 0/0
 17004 ;;		Unchanged: 0/0
 17005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17006 ;;      Params:         0       4       0       0       0       0       0
 17007 ;;      Locals:         0       2       0       0       0       0       0
 17008 ;;      Temps:          0       0       0       0       0       0       0
 17009 ;;      Totals:         0       6       0       0       0       0       0
 17010 ;;Total ram usage:        6 bytes
 17011 ;; Hardware stack levels used:    1
 17012 ;; Hardware stack levels required when called:    3
 17013 ;; This function calls:
 17014 ;;		Nothing
 17015 ;; This function is called by:
 17016 ;;		_printGUID
 17017 ;;		_printNodeFirmwareVersion
 17018 ;; This function uses a non-reentrant model
 17019 ;;
 17020                           
 17021                           	psect	text32
 17022  0052B0                     __ptext32:
 17023                           	opt stack 0
 17024  0052B0                     _strcat:
 17025                           	opt stack 25
 17026                           
 17027                           ; BSR set to: 0
 17028                           
 17029                           ;incstack = 0
 17030                           ;incstack = 0
 17031  0052B0  C060  F064         	movff	strcat@to,strcat@cp
 17032  0052B4  C061  F065         	movff	strcat@to+1,strcat@cp+1
 17033  0052B8  D002               	goto	l16266
 17034  0052BA                     l16264:
 17035                           
 17036                           ; BSR set to: 0
 17037  0052BA  4B64               	infsnz	strcat@cp& (0+255),f,b
 17038  0052BC  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17039  0052BE                     l16266:
 17040                           
 17041                           ; BSR set to: 0
 17042  0052BE  C064  FFD9         	movff	strcat@cp,fsr2l
 17043  0052C2  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17044  0052C6  50DF               	movf	indf2,w,c
 17045  0052C8  E006               	bz	l16270
 17046  0052CA  D7F7               	goto	l16264
 17047  0052CC                     l16268:
 17048  0052CC  0100               	movlb	0	; () banked
 17049  0052CE  4B64               	infsnz	strcat@cp& (0+255),f,b
 17050  0052D0  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 17051  0052D2  4B62               	infsnz	strcat@from& (0+255),f,b
 17052  0052D4  2B63               	incf	(strcat@from+1)& (0+255),f,b
 17053  0052D6                     l16270:
 17054                           
 17055                           ; BSR set to: 0
 17056  0052D6  C062  FFF6         	movff	strcat@from,tblptrl
 17057  0052DA  C063  FFF7         	movff	strcat@from+1,tblptrh
 17058  0052DE  6AF8               	clrf	tblptru,c
 17059  0052E0  C064  FFD9         	movff	strcat@cp,fsr2l
 17060  0052E4  C065  FFDA         	movff	strcat@cp+1,fsr2h
 17061  0052E8  0E05               	movlw	(high __ramtop+-1)
 17062  0052EA  64F7               	cpfsgt	tblptrh,c
 17063  0052EC  D003               	bra	u22437
 17064  0052EE  0008               	tblrd		*
 17065  0052F0  50F5               	movf	tablat,w,c
 17066  0052F2  D005               	bra	u22430
 17067  0052F4                     u22437:
 17068  0052F4  CFF6 FFE9          	movff	tblptrl,fsr0l
 17069  0052F8  CFF7 FFEA          	movff	tblptrh,fsr0h
 17070  0052FC  50EF               	movf	indf0,w,c
 17071  0052FE                     u22430:
 17072  0052FE  6EDF               	movwf	indf2,c
 17073  005300  50DF               	movf	indf2,w,c
 17074  005302  B4D8               	btfsc	status,2,c
 17075  005304  0012               	return	
 17076  005306  D7E2               	goto	l16268
 17077  005308                     __end_of_strcat:
 17078                           	opt stack 0
 17079                           tblptru	equ	0xFF8
 17080                           tblptrh	equ	0xFF7
 17081                           tblptrl	equ	0xFF6
 17082                           tablat	equ	0xFF5
 17083                           prodh	equ	0xFF4
 17084                           prodl	equ	0xFF3
 17085                           intcon	equ	0xFF2
 17086                           indf0	equ	0xFEF
 17087                           postinc0	equ	0xFEE
 17088                           fsr0h	equ	0xFEA
 17089                           fsr0l	equ	0xFE9
 17090                           wreg	equ	0xFE8
 17091                           indf1	equ	0xFE7
 17092                           postinc1	equ	0xFE6
 17093                           postdec1	equ	0xFE5
 17094                           fsr1h	equ	0xFE2
 17095                           fsr1l	equ	0xFE1
 17096                           indf2	equ	0xFDF
 17097                           postinc2	equ	0xFDE
 17098                           postdec2	equ	0xFDD
 17099                           plusw2	equ	0xFDB
 17100                           fsr2h	equ	0xFDA
 17101                           fsr2l	equ	0xFD9
 17102                           status	equ	0xFD8
 17103                           
 17104 ;; *************** function _readRegister *****************
 17105 ;; Defined at:
 17106 ;;		line 2255 in file "main.c"
 17107 ;; Parameters:    Size  Location     Type
 17108 ;;  nodeid          1    wreg     unsigned char 
 17109 ;;  reg             1   85[BANK0 ] unsigned char 
 17110 ;;  timeout         2   86[BANK0 ] unsigned short 
 17111 ;;  value           1   88[BANK0 ] PTR unsigned char 
 17112 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 17113 ;; Auto vars:     Size  Location     Type
 17114 ;;  nodeid          1   93[BANK0 ] unsigned char 
 17115 ;; Return value:  Size  Location     Type
 17116 ;;                  1    wreg      enum E15660
 17117 ;; Registers used:
 17118 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17119 ;; Tracked objects:
 17120 ;;		On entry : F/0
 17121 ;;		On exit  : E/0
 17122 ;;		Unchanged: 0/0
 17123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17124 ;;      Params:         0       4       0       0       0       0       0
 17125 ;;      Locals:         0       1       0       0       0       0       0
 17126 ;;      Temps:          0       4       0       0       0       0       0
 17127 ;;      Totals:         0       9       0       0       0       0       0
 17128 ;;Total ram usage:        9 bytes
 17129 ;; Hardware stack levels used:    1
 17130 ;; Hardware stack levels required when called:    7
 17131 ;; This function calls:
 17132 ;;		_sendVSCPFrame
 17133 ;;		_getVSCPFrame
 17134 ;; This function is called by:
 17135 ;;		_findNodes
 17136 ;;		_printGUID
 17137 ;;		_printMDF
 17138 ;;		_printNodeFirmwareVersion
 17139 ;; This function uses a non-reentrant model
 17140 ;;
 17141                           
 17142                           	psect	text33
 17143  0047A6                     __ptext33:
 17144                           	opt stack 0
 17145  0047A6                     _readRegister:
 17146                           	opt stack 21
 17147                           
 17148                           ;incstack = 0
 17149                           ;incstack = 0
 17150                           ;readRegister@nodeid stored from wreg
 17151  0047A6  CFE8 F0BD          	movff	wreg,readRegister@nodeid
 17152                           
 17153                           ; BSR set to: 0
 17154                           ;main.c: 2256: vscpData[ 0 ] = nodeid;
 17155  0047AA  C0BD  F034         	movff	readRegister@nodeid,_vscpData
 17156                           
 17157                           ; BSR set to: 0
 17158                           ;main.c: 2257: vscpData[ 1 ] = reg;
 17159  0047AE  C0B5  F035         	movff	readRegister@reg,_vscpData+1
 17160                           
 17161                           ; BSR set to: 0
 17162                           ;main.c: 2259: if (sendVSCPFrame(0,
 17163                           ;main.c: 2260: 9,
 17164                           ;main.c: 2261: 0,
 17165                           ;main.c: 2262: 0,
 17166                           ;main.c: 2263: 2,
 17167                           ;main.c: 2264: vscpData)) {
 17168  0047B2  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17169  0047B4  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 17170  0047B6  0E09               	movlw	9
 17171  0047B8  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17172  0047BA  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17173  0047BC  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17174  0047BE  0E02               	movlw	2
 17175  0047C0  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17176  0047C2  0E34               	movlw	low _vscpData
 17177  0047C4  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17178  0047C6  EC6A  F022         	call	_sendVSCPFrame	;wreg free
 17179  0047CA  0900               	iorlw	0
 17180  0047CC  E03C               	bz	l16258
 17181                           
 17182                           ;main.c: 2266: timekeeper = 0;
 17183  0047CE  6A22               	clrf	_timekeeper,c	;volatile
 17184  0047D0  6A23               	clrf	_timekeeper+1,c	;volatile
 17185  0047D2  6A24               	clrf	_timekeeper+2,c	;volatile
 17186  0047D4  6A25               	clrf	_timekeeper+3,c	;volatile
 17187                           
 17188                           ;main.c: 2267: while (timekeeper < timeout) {
 17189  0047D6  D027               	goto	l16256
 17190  0047D8                     l1084:
 17191                           
 17192                           ; BSR set to: 0
 17193  0047D8  0004               	clrwdt		;# 
 17194                           
 17195                           ;main.c: 2271: if (getVSCPFrame(&vscpClass,
 17196                           ;main.c: 2272: &vscpType,
 17197                           ;main.c: 2273: &vscpNodeId,
 17198                           ;main.c: 2274: &vscpPriority,
 17199                           ;main.c: 2275: &vscpSize,
 17200                           ;main.c: 2276: vscpData)) {
 17201  0047DA  0100               	movlb	0	; () banked
 17202  0047DC  0EEC               	movlw	low _vscpType
 17203  0047DE  6F72               	movwf	?_getVSCPFrame& (0+255),b
 17204  0047E0  0EE9               	movlw	low _vscpNodeId
 17205  0047E2  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17206  0047E4  0EEA               	movlw	low _vscpPriority
 17207  0047E6  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17208  0047E8  0EEB               	movlw	low _vscpSize
 17209  0047EA  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17210  0047EC  0E34               	movlw	low _vscpData
 17211  0047EE  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17212  0047F0  0E3C               	movlw	_vscpClass& (0+255)
 17213  0047F2  EC8D  F026         	call	_getVSCPFrame
 17214  0047F6  0900               	iorlw	0
 17215  0047F8  E016               	bz	l16256
 17216                           
 17217                           ; BSR set to: 0
 17218                           ;main.c: 2277: if ((nodeid == vscpNodeId) &&
 17219                           ;main.c: 2278: (0 == vscpClass) &&
 17220                           ;main.c: 2279: (10 == vscpType) &&
 17221                           ;main.c: 2280: (2 == vscpSize) &&
 17222                           ;main.c: 2281: (reg == vscpData[ 0 ])) {
 17223  0047FA  51E9               	movf	_vscpNodeId& (0+255),w,b
 17224  0047FC  63BD               	cpfseq	readRegister@nodeid& (0+255),b
 17225  0047FE  D013               	goto	l16256
 17226                           
 17227                           ; BSR set to: 0
 17228  004800  503D               	movf	_vscpClass+1,w,c
 17229  004802  103C               	iorwf	_vscpClass,w,c
 17230  004804  E110               	bnz	l16256
 17231                           
 17232                           ; BSR set to: 0
 17233  004806  51EC               	movf	_vscpType& (0+255),w,b
 17234  004808  0A0A               	xorlw	10
 17235  00480A  E10D               	bnz	l16256
 17236                           
 17237                           ; BSR set to: 0
 17238  00480C  51EB               	movf	_vscpSize& (0+255),w,b
 17239  00480E  0A02               	xorlw	2
 17240  004810  E10A               	bnz	l16256
 17241                           
 17242                           ; BSR set to: 0
 17243  004812  5034               	movf	_vscpData,w,c
 17244  004814  63B5               	cpfseq	readRegister@reg& (0+255),b
 17245  004816  D007               	goto	l16256
 17246                           
 17247                           ; BSR set to: 0
 17248                           ;main.c: 2282: *value = vscpData[ 1 ];
 17249  004818  51B8               	movf	readRegister@value& (0+255),w,b
 17250  00481A  6ED9               	movwf	fsr2l,c
 17251  00481C  6ADA               	clrf	fsr2h,c
 17252  00481E  C035  FFDF         	movff	_vscpData+1,indf2
 17253                           
 17254                           ; BSR set to: 0
 17255                           ;main.c: 2283: return 1;
 17256  004822  0E01               	movlw	1
 17257  004824  D011               	goto	l1087
 17258  004826                     l16256:
 17259  004826  0100               	movlb	0	; () banked
 17260  004828  51B6               	movf	readRegister@timeout& (0+255),w,b
 17261  00482A  6FB9               	movwf	??_readRegister& (0+255),b
 17262  00482C  51B7               	movf	(readRegister@timeout+1)& (0+255),w,b
 17263  00482E  6FBA               	movwf	(??_readRegister+1)& (0+255),b
 17264  004830  6BBB               	clrf	(??_readRegister+2)& (0+255),b
 17265  004832  6BBC               	clrf	(??_readRegister+3)& (0+255),b
 17266  004834  51B9               	movf	??_readRegister& (0+255),w,b
 17267  004836  5C22               	subwf	_timekeeper,w,c	;volatile
 17268  004838  51BA               	movf	(??_readRegister+1)& (0+255),w,b
 17269  00483A  5823               	subwfb	_timekeeper+1,w,c	;volatile
 17270  00483C  51BB               	movf	(??_readRegister+2)& (0+255),w,b
 17271  00483E  5824               	subwfb	_timekeeper+2,w,c	;volatile
 17272  004840  51BC               	movf	(??_readRegister+3)& (0+255),w,b
 17273  004842  5825               	subwfb	_timekeeper+3,w,c	;volatile
 17274  004844  E3C9               	bnc	l1084
 17275  004846                     l16258:
 17276                           
 17277                           ;main.c: 2284: }
 17278                           ;main.c: 2285: }
 17279                           ;main.c: 2286: }
 17280                           ;main.c: 2287: }
 17281                           ;main.c: 2289: return 0;
 17282  004846  0E00               	movlw	0
 17283  004848                     l1087:
 17284  004848  0012               	return	
 17285  00484A                     __end_of_readRegister:
 17286                           	opt stack 0
 17287                           tblptru	equ	0xFF8
 17288                           tblptrh	equ	0xFF7
 17289                           tblptrl	equ	0xFF6
 17290                           tablat	equ	0xFF5
 17291                           prodh	equ	0xFF4
 17292                           prodl	equ	0xFF3
 17293                           intcon	equ	0xFF2
 17294                           indf0	equ	0xFEF
 17295                           postinc0	equ	0xFEE
 17296                           fsr0h	equ	0xFEA
 17297                           fsr0l	equ	0xFE9
 17298                           wreg	equ	0xFE8
 17299                           indf1	equ	0xFE7
 17300                           postinc1	equ	0xFE6
 17301                           postdec1	equ	0xFE5
 17302                           fsr1h	equ	0xFE2
 17303                           fsr1l	equ	0xFE1
 17304                           indf2	equ	0xFDF
 17305                           postinc2	equ	0xFDE
 17306                           postdec2	equ	0xFDD
 17307                           plusw2	equ	0xFDB
 17308                           fsr2h	equ	0xFDA
 17309                           fsr2l	equ	0xFD9
 17310                           status	equ	0xFD8
 17311                           
 17312 ;; *************** function _sendVSCPFrame *****************
 17313 ;; Defined at:
 17314 ;;		line 2976 in file "main.c"
 17315 ;; Parameters:    Size  Location     Type
 17316 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 17317 ;;  vscptype        1   56[BANK0 ] unsigned char 
 17318 ;;  nodeid          1   57[BANK0 ] unsigned char 
 17319 ;;  priority        1   58[BANK0 ] unsigned char 
 17320 ;;  size            1   59[BANK0 ] unsigned char 
 17321 ;;  pData           1   60[BANK0 ] PTR unsigned char 
 17322 ;;		 -> vscpData(8), 
 17323 ;; Auto vars:     Size  Location     Type
 17324 ;;  id              4   81[BANK0 ] unsigned long 
 17325 ;; Return value:  Size  Location     Type
 17326 ;;                  1    wreg      unsigned char 
 17327 ;; Registers used:
 17328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17329 ;; Tracked objects:
 17330 ;;		On entry : F/0
 17331 ;;		On exit  : E/0
 17332 ;;		Unchanged: 0/0
 17333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17334 ;;      Params:         0       7       0       0       0       0       0
 17335 ;;      Locals:         0       4       0       0       0       0       0
 17336 ;;      Temps:          0      20       0       0       0       0       0
 17337 ;;      Totals:         0      31       0       0       0       0       0
 17338 ;;Total ram usage:       31 bytes
 17339 ;; Hardware stack levels used:    1
 17340 ;; Hardware stack levels required when called:    6
 17341 ;; This function calls:
 17342 ;;		_sendCANFrame
 17343 ;; This function is called by:
 17344 ;;		_doModeVerbose
 17345 ;;		_readRegister
 17346 ;;		_readRegisterExtended
 17347 ;;		_writeRegisterExtended
 17348 ;; This function uses a non-reentrant model
 17349 ;;
 17350                           
 17351                           	psect	text34
 17352  0044D4                     __ptext34:
 17353                           	opt stack 0
 17354  0044D4                     _sendVSCPFrame:
 17355                           	opt stack 21
 17356                           
 17357                           ; BSR set to: 0
 17358                           ;main.c: 2977: uint32_t id = ((uint32_t) priority << 26) |
 17359                           ;main.c: 2978: ((uint32_t) vscpclass << 16) |
 17360                           ;main.c: 2979: ((uint32_t) vscptype << 8) |
 17361                           ;main.c: 2980: nodeid;
 17362                           
 17363                           ;incstack = 0
 17364                           ;incstack = 0
 17365  0044D4  C098  F09D         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17366  0044D8  6B9E               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17367  0044DA  6B9F               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17368  0044DC  6BA0               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17369  0044DE  C09F  F0A0         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17370  0044E2  C09E  F09F         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17371  0044E6  C09D  F09E         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17372  0044EA  6B9D               	clrf	??_sendVSCPFrame& (0+255),b
 17373  0044EC  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17374  0044EE  6FA1               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17375  0044F0  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17376  0044F2  6FA2               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17377  0044F4  6BA3               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17378  0044F6  6BA4               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17379  0044F8  C0A2  F0A4         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17380  0044FC  C0A1  F0A3         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17381  004500  6BA2               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17382  004502  6BA1               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17383  004504  C09A  F0A5         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17384  004508  6BA6               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17385  00450A  6BA7               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17386  00450C  6BA8               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17387  00450E  0E1A               	movlw	26
 17388  004510                     u20145:
 17389  004510  90D8               	bcf	status,0,c
 17390  004512  37A5               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17391  004514  37A6               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17392  004516  37A7               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17393  004518  37A8               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17394  00451A  2EE8               	decfsz	wreg,f,c
 17395  00451C  D7F9               	goto	u20145
 17396  00451E  51A1               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17397  004520  11A5               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17398  004522  6FA9               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17399  004524  51A2               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17400  004526  11A6               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17401  004528  6FAA               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17402  00452A  51A3               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17403  00452C  11A7               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17404  00452E  6FAB               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17405  004530  51A4               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17406  004532  11A8               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17407  004534  6FAC               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17408  004536  519D               	movf	??_sendVSCPFrame& (0+255),w,b
 17409  004538  11A9               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17410  00453A  6FAD               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17411  00453C  519E               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17412  00453E  11AA               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17413  004540  6FAE               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17414  004542  519F               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17415  004544  11AB               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17416  004546  6FAF               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17417  004548  51A0               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17418  00454A  11AC               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17419  00454C  6FB0               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17420  00454E  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17421  004550  11AD               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17422  004552  6FB1               	movwf	sendVSCPFrame@id& (0+255),b
 17423  004554  51AE               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17424  004556  6FB2               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17425  004558  51AF               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17426  00455A  6FB3               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17427  00455C  51B0               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17428  00455E  6FB4               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17429                           
 17430                           ; BSR set to: 0
 17431                           ;main.c: 2982: if (!sendCANFrame(id, size, pData)) {
 17432  004560  C0B1  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 17433  004564  C0B2  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17434  004568  C0B3  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17435  00456C  C0B4  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17436  004570  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17437  004574  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17438  004578  0E0F               	movlw	15
 17439  00457A  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
 17440  00457C  0E5F               	movlw	__accesstop+-1
 17441  00457E  6594               	cpfsgt	(?_sendCANFrame+5)& (0+255),b
 17442  004580  6B95               	clrf	(?_sendCANFrame+6)& (0+255),b
 17443  004582  EC48  F02B         	call	_sendCANFrame	;wreg free
 17444  004586  0900               	iorlw	0
 17445                           
 17446                           ;main.c: 2984: return 0;
 17447  004588  0E00               	movlw	0
 17448  00458A  A4D8               	btfss	status,2,c
 17449                           
 17450                           ;main.c: 2985: }
 17451                           ;main.c: 2987: return 1;
 17452  00458C  0E01               	movlw	1
 17453  00458E  0012               	return	
 17454  004590                     __end_of_sendVSCPFrame:
 17455                           	opt stack 0
 17456                           tblptru	equ	0xFF8
 17457                           tblptrh	equ	0xFF7
 17458                           tblptrl	equ	0xFF6
 17459                           tablat	equ	0xFF5
 17460                           prodh	equ	0xFF4
 17461                           prodl	equ	0xFF3
 17462                           intcon	equ	0xFF2
 17463                           indf0	equ	0xFEF
 17464                           postinc0	equ	0xFEE
 17465                           fsr0h	equ	0xFEA
 17466                           fsr0l	equ	0xFE9
 17467                           wreg	equ	0xFE8
 17468                           indf1	equ	0xFE7
 17469                           postinc1	equ	0xFE6
 17470                           postdec1	equ	0xFE5
 17471                           fsr1h	equ	0xFE2
 17472                           fsr1l	equ	0xFE1
 17473                           indf2	equ	0xFDF
 17474                           postinc2	equ	0xFDE
 17475                           postdec2	equ	0xFDD
 17476                           plusw2	equ	0xFDB
 17477                           fsr2h	equ	0xFDA
 17478                           fsr2l	equ	0xFD9
 17479                           status	equ	0xFD8
 17480                           
 17481 ;; *************** function _sendCANFrame *****************
 17482 ;; Defined at:
 17483 ;;		line 3022 in file "main.c"
 17484 ;; Parameters:    Size  Location     Type
 17485 ;;  id              4   47[BANK0 ] unsigned long 
 17486 ;;  dlc             1   51[BANK0 ] unsigned char 
 17487 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 17488 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17489 ;; Auto vars:     Size  Location     Type
 17490 ;;		None
 17491 ;; Return value:  Size  Location     Type
 17492 ;;                  1    wreg      unsigned char 
 17493 ;; Registers used:
 17494 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17495 ;; Tracked objects:
 17496 ;;		On entry : F/0
 17497 ;;		On exit  : E/0
 17498 ;;		Unchanged: 0/0
 17499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17500 ;;      Params:         0       7       0       0       0       0       0
 17501 ;;      Locals:         0       0       0       0       0       0       0
 17502 ;;      Temps:          0       0       0       0       0       0       0
 17503 ;;      Totals:         0       7       0       0       0       0       0
 17504 ;;Total ram usage:        7 bytes
 17505 ;; Hardware stack levels used:    1
 17506 ;; Hardware stack levels required when called:    5
 17507 ;; This function calls:
 17508 ;;		_ECANSendMessage
 17509 ;; This function is called by:
 17510 ;;		_doModeSLCAN
 17511 ;;		_receiveVSCPModeCanalMsg
 17512 ;;		_sendVSCPFrame
 17513 ;; This function uses a non-reentrant model
 17514 ;;
 17515                           
 17516                           	psect	text35
 17517  005690                     __ptext35:
 17518                           	opt stack 0
 17519  005690                     _sendCANFrame:
 17520                           	opt stack 24
 17521                           
 17522                           ; BSR set to: 0
 17523                           ;main.c: 3023: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17524                           
 17525                           ;incstack = 0
 17526                           ;incstack = 0
 17527  005690  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 17528  005694  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17529  005698  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17530  00569C  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17531  0056A0  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17532  0056A4  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17533  0056A8  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17534  0056AC  0E20               	movlw	32
 17535  0056AE  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17536  0056B0  EC8A  F01A         	call	_ECANSendMessage	;wreg free
 17537  0056B4  0900               	iorlw	0
 17538  0056B6  E107               	bnz	l16104
 17539                           
 17540                           ; BSR set to: 0
 17541                           ;main.c: 3025: can_transmitOverruns++;
 17542  0056B8  0101               	movlb	1	; () banked
 17543  0056BA  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 17544  0056BC  0E00               	movlw	0
 17545  0056BE  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 17546  0056C0  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 17547  0056C2  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 17548                           
 17549                           ; BSR set to: 1
 17550                           ;main.c: 3026: return 0;
 17551  0056C4  D001               	goto	l1283
 17552  0056C6                     l16104:
 17553                           
 17554                           ; BSR set to: 0
 17555                           ;main.c: 3027: }
 17556                           ;main.c: 3029: return 1;
 17557  0056C6  0E01               	movlw	1
 17558  0056C8                     l1283:
 17559  0056C8  0012               	return	
 17560  0056CA                     __end_of_sendCANFrame:
 17561                           	opt stack 0
 17562                           tblptru	equ	0xFF8
 17563                           tblptrh	equ	0xFF7
 17564                           tblptrl	equ	0xFF6
 17565                           tablat	equ	0xFF5
 17566                           prodh	equ	0xFF4
 17567                           prodl	equ	0xFF3
 17568                           intcon	equ	0xFF2
 17569                           indf0	equ	0xFEF
 17570                           postinc0	equ	0xFEE
 17571                           fsr0h	equ	0xFEA
 17572                           fsr0l	equ	0xFE9
 17573                           wreg	equ	0xFE8
 17574                           indf1	equ	0xFE7
 17575                           postinc1	equ	0xFE6
 17576                           postdec1	equ	0xFE5
 17577                           fsr1h	equ	0xFE2
 17578                           fsr1l	equ	0xFE1
 17579                           indf2	equ	0xFDF
 17580                           postinc2	equ	0xFDE
 17581                           postdec2	equ	0xFDD
 17582                           plusw2	equ	0xFDB
 17583                           fsr2h	equ	0xFDA
 17584                           fsr2l	equ	0xFD9
 17585                           status	equ	0xFD8
 17586                           
 17587 ;; *************** function _ECANSendMessage *****************
 17588 ;; Defined at:
 17589 ;;		line 617 in file "ECAN.c"
 17590 ;; Parameters:    Size  Location     Type
 17591 ;;  id              4   10[BANK0 ] unsigned long 
 17592 ;;  data            2   14[BANK0 ] PTR unsigned char 
 17593 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17594 ;;  dataLen         1   16[BANK0 ] unsigned char 
 17595 ;;  msgFlags        1   17[BANK0 ] enum E16306
 17596 ;; Auto vars:     Size  Location     Type
 17597 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 17598 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17599 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17600 ;;		 -> B0CON(1), 
 17601 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 17602 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17603 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17604 ;;		 -> B0CON(1), 
 17605 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 17606 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17607 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17608 ;;		 -> B0CON(1), 
 17609 ;;  i               1   44[BANK0 ] unsigned char 
 17610 ;;  temp            1   43[BANK0 ] unsigned char 
 17611 ;;  tempBSEL0       1   40[BANK0 ] struct .
 17612 ;;  j               1   39[BANK0 ] unsigned char 
 17613 ;;  buffers         1   38[BANK0 ] unsigned char 
 17614 ;;  mode            1   37[BANK0 ] unsigned char 
 17615 ;; Return value:  Size  Location     Type
 17616 ;;                  1    wreg      enum E15660
 17617 ;; Registers used:
 17618 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17619 ;; Tracked objects:
 17620 ;;		On entry : F/0
 17621 ;;		On exit  : F/0
 17622 ;;		Unchanged: 0/0
 17623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17624 ;;      Params:         0       8       0       0       0       0       0
 17625 ;;      Locals:         0      28       0       0       0       0       0
 17626 ;;      Temps:          0       1       0       0       0       0       0
 17627 ;;      Totals:         0      37       0       0       0       0       0
 17628 ;;Total ram usage:       37 bytes
 17629 ;; Hardware stack levels used:    1
 17630 ;; Hardware stack levels required when called:    4
 17631 ;; This function calls:
 17632 ;;		__CANIDToRegs
 17633 ;; This function is called by:
 17634 ;;		_sendCANFrame
 17635 ;; This function uses a non-reentrant model
 17636 ;;
 17637                           
 17638                           	psect	text36
 17639  003514                     __ptext36:
 17640                           	opt stack 0
 17641  003514                     _ECANSendMessage:
 17642                           	opt stack 24
 17643                           
 17644                           ; BSR set to: 0
 17645                           ;ECAN.c: 619: BYTE mode;
 17646                           ;ECAN.c: 620: BYTE buffers;
 17647                           ;ECAN.c: 628: BYTE i,j;
 17648                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17649                           ;ECAN.c: 630: BYTE* pb[9];
 17650                           ;ECAN.c: 631: BYTE temp;
 17651                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17652                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17653                           
 17654                           ;incstack = 0
 17655                           ;incstack = 0
 17656  003514  0E0F               	movlw	15	;volatile
 17657  003516  0100               	movlb	0	; () banked
 17658  003518  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17659  00351A  0E40               	movlw	64	;volatile
 17660  00351C  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 17661                           
 17662                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17663  00351E  0E0F               	movlw	15	;volatile
 17664  003520  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17665  003522  0E30               	movlw	48	;volatile
 17666  003524  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17667                           
 17668                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17669  003526  0E0F               	movlw	15	;volatile
 17670  003528  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17671  00352A  0E20               	movlw	32	;volatile
 17672  00352C  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17673                           
 17674                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17675  00352E  0E0E               	movlw	14	;volatile
 17676  003530  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17677  003532  0E20               	movlw	32	;volatile
 17678  003534  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17679                           
 17680                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17681  003536  0E0E               	movlw	14	;volatile
 17682  003538  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17683  00353A  0E30               	movlw	48	;volatile
 17684  00353C  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17685                           
 17686                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17687  00353E  0E0E               	movlw	14	;volatile
 17688  003540  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17689  003542  0E40               	movlw	64	;volatile
 17690  003544  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17691                           
 17692                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17693  003546  0E0E               	movlw	14	;volatile
 17694  003548  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17695  00354A  0E50               	movlw	80	;volatile
 17696  00354C  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17697                           
 17698                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17699  00354E  0E0E               	movlw	14	;volatile
 17700  003550  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17701  003552  0E60               	movlw	96	;volatile
 17702  003554  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17703                           
 17704                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17705  003556  0E0E               	movlw	14	;volatile
 17706  003558  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17707  00355A  0E70               	movlw	112	;volatile
 17708  00355C  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17709                           
 17710                           ; BSR set to: 0
 17711                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17712  00355E  5077               	movf	3959,w,c	;volatile
 17713  003560  0BC0               	andlw	192
 17714  003562  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 17715                           
 17716                           ; BSR set to: 0
 17717                           ;ECAN.c: 660: if ( mode == 0x00 )
 17718  003564  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 17719  003566  D002               	goto	l12974
 17720                           
 17721                           ; BSR set to: 0
 17722                           ;ECAN.c: 661: buffers = 2;
 17723  003568  0E02               	movlw	2
 17724  00356A  D001               	goto	L15
 17725  00356C                     l12974:
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;ECAN.c: 662: else
 17729                           ;ECAN.c: 663: buffers = 8;
 17730  00356C  0E08               	movlw	8
 17731  00356E                     L15:
 17732  00356E  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 17733                           
 17734                           ; BSR set to: 0
 17735                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17736  003570  010D               	movlb	13	; () banked
 17737  003572  90D8               	bcf	status,0,c
 17738  003574  31F8               	rrcf	248,w,b	;volatile
 17739  003576  0100               	movlb	0	; () banked
 17740  003578  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17741                           
 17742                           ; BSR set to: 0
 17743                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17744  00357A  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 17745  00357C  D07D               	goto	l13034
 17746  00357E                     l12980:
 17747                           
 17748                           ; BSR set to: 0
 17749                           ;ECAN.c: 688: {
 17750                           ;ECAN.c: 693: ptr = pb[i];
 17751  00357E  518C               	movf	ECANSendMessage@i& (0+255),w,b
 17752  003580  0D02               	mullw	2
 17753  003582  50F3               	movf	prodl,w,c
 17754  003584  0F73               	addlw	low ECANSendMessage@pb
 17755  003586  6ED9               	movwf	fsr2l,c
 17756  003588  6ADA               	clrf	fsr2h,c
 17757  00358A  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 17758  00358E  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 17759                           
 17760                           ; BSR set to: 0
 17761                           ;ECAN.c: 694: tempPtr = ptr;
 17762  003592  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17763  003596  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17764                           
 17765                           ; BSR set to: 0
 17766                           ;ECAN.c: 702: if ( i > 2 )
 17767  00359A  0E02               	movlw	2
 17768  00359C  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 17769  00359E  D004               	goto	l12992
 17770                           
 17771                           ; BSR set to: 0
 17772                           ;ECAN.c: 703: {
 17773                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17774  0035A0  90D8               	bcf	status,0,c
 17775  0035A2  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17776                           
 17777                           ; BSR set to: 0
 17778                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17779  0035A4  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17780  0035A6  D067               	goto	l13032
 17781  0035A8                     l12992:
 17782                           
 17783                           ; BSR set to: 0
 17784                           ;ECAN.c: 714: }
 17785                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 17786  0035A8  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17787  0035AC  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17788  0035B0  50DF               	movf	indf2,w,c
 17789  0035B2  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17790  0035B4  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 17791  0035B6  D05F               	goto	l13032
 17792                           
 17793                           ; BSR set to: 0
 17794                           ;ECAN.c: 721: {
 17795                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 17796  0035B8  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17797  0035BC  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17798  0035C0  0EFC               	movlw	252
 17799  0035C2  16DF               	andwf	indf2,f,c
 17800                           
 17801                           ; BSR set to: 0
 17802                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 17803  0035C4  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 17804  0035C8  0E03               	movlw	3
 17805  0035CA  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 17806  0035CC  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17807  0035D0  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17808  0035D4  5172               	movf	??_ECANSendMessage& (0+255),w,b
 17809  0035D6  12DF               	iorwf	indf2,f,c
 17810                           
 17811                           ; BSR set to: 0
 17812                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 17813  0035D8  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 17814  0035DA  D004               	goto	l1451
 17815                           
 17816                           ; BSR set to: 0
 17817                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 17818  0035DC  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17819  0035DE  0940               	iorlw	64
 17820  0035E0  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17821  0035E2  D002               	goto	l13002
 17822  0035E4                     l1451:
 17823                           
 17824                           ; BSR set to: 0
 17825                           ;ECAN.c: 729: else
 17826                           ;ECAN.c: 730: temp = dataLen;
 17827  0035E4  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 17828  0035E8                     l13002:
 17829                           
 17830                           ; BSR set to: 0
 17831                           ;ECAN.c: 732: *(ptr+5) = temp;
 17832  0035E8  EE20 F005          	lfsr	2,5
 17833  0035EC  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 17834  0035EE  26D9               	addwf	fsr2l,f,c
 17835  0035F0  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 17836  0035F2  22DA               	addwfc	fsr2h,f,c
 17837  0035F4  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 17841  0035F8  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 17842  0035FA  D003               	goto	l1453
 17843                           
 17844                           ; BSR set to: 0
 17845                           ;ECAN.c: 736: temp = 1;
 17846  0035FC  0E01               	movlw	1
 17847  0035FE  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 17848  003600  D001               	goto	l13008
 17849  003602                     l1453:
 17850                           
 17851                           ; BSR set to: 0
 17852                           ;ECAN.c: 738: else
 17853                           ;ECAN.c: 739: temp = 0;
 17854  003602  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 17855  003604                     l13008:
 17856                           
 17857                           ; BSR set to: 0
 17858                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 17859  003604  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 17860  003606  6F60               	movwf	?__CANIDToRegs& (0+255),b
 17861  003608  0E00               	movlw	0
 17862  00360A  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 17863  00360C  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 17864  00360E  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 17865  003612  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 17866  003616  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 17867  00361A  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 17868  00361E  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 17869  003622  EC14  F01D         	call	__CANIDToRegs	;wreg free
 17870                           
 17871                           ; BSR set to: 0
 17872                           ;ECAN.c: 745: ptr += 6;
 17873  003626  0E06               	movlw	6
 17874  003628  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 17875  00362A  0E00               	movlw	0
 17876  00362C  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 17877                           
 17878                           ; BSR set to: 0
 17879                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 17880  00362E  6B87               	clrf	ECANSendMessage@j& (0+255),b
 17881  003630  D00F               	goto	l13022
 17882  003632                     l13014:
 17883                           
 17884                           ; BSR set to: 0
 17885                           ;ECAN.c: 748: *ptr++ = *data++;
 17886  003632  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 17887  003636  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 17888  00363A  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 17889  00363E  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 17890  003642  CFDF FFE7          	movff	indf2,indf1
 17891                           
 17892                           ; BSR set to: 0
 17893  003646  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 17894  003648  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 17895                           
 17896                           ; BSR set to: 0
 17897  00364A  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 17898  00364C  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 17899                           
 17900                           ; BSR set to: 0
 17901  00364E  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 17902  003650                     l13022:
 17903                           
 17904                           ; BSR set to: 0
 17905  003650  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17906  003652  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 17907  003654  E3EE               	bnc	l13014
 17908                           
 17909                           ; BSR set to: 0
 17910                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 17911  003656  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17912  00365A  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17913  00365E  50DF               	movf	indf2,w,c
 17914  003660  6F72               	movwf	??_ECANSendMessage& (0+255),b
 17915  003662  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 17916  003664  D006               	goto	l13028
 17917                           
 17918                           ; BSR set to: 0
 17919                           ;ECAN.c: 753: *tempPtr |= 0x08;
 17920  003666  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17921  00366A  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17922  00366E  0E00               	movlw	0
 17923  003670  86DB               	bsf	plusw2,3,c
 17924  003672                     l13028:
 17925                           
 17926                           ; BSR set to: 0
 17927                           ;ECAN.c: 755: return TRUE;
 17928  003672  0E01               	movlw	1
 17929  003674  D005               	goto	l1459
 17930  003676                     l13032:
 17931                           
 17932                           ; BSR set to: 0
 17933  003676  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 17934  003678                     l13034:
 17935                           
 17936                           ; BSR set to: 0
 17937  003678  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 17938  00367A  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 17939  00367C  E380               	bnc	l12980
 17940                           
 17941                           ; BSR set to: 0
 17942                           ;ECAN.c: 756: }
 17943                           ;ECAN.c: 757: }
 17944                           ;ECAN.c: 760: return FALSE;
 17945  00367E  0E00               	movlw	0
 17946  003680                     l1459:
 17947                           
 17948                           ; BSR set to: 0
 17949  003680  0012               	return	
 17950  003682                     __end_of_ECANSendMessage:
 17951                           	opt stack 0
 17952                           tblptru	equ	0xFF8
 17953                           tblptrh	equ	0xFF7
 17954                           tblptrl	equ	0xFF6
 17955                           tablat	equ	0xFF5
 17956                           prodh	equ	0xFF4
 17957                           prodl	equ	0xFF3
 17958                           intcon	equ	0xFF2
 17959                           indf0	equ	0xFEF
 17960                           postinc0	equ	0xFEE
 17961                           fsr0h	equ	0xFEA
 17962                           fsr0l	equ	0xFE9
 17963                           wreg	equ	0xFE8
 17964                           indf1	equ	0xFE7
 17965                           postinc1	equ	0xFE6
 17966                           postdec1	equ	0xFE5
 17967                           fsr1h	equ	0xFE2
 17968                           fsr1l	equ	0xFE1
 17969                           indf2	equ	0xFDF
 17970                           postinc2	equ	0xFDE
 17971                           postdec2	equ	0xFDD
 17972                           plusw2	equ	0xFDB
 17973                           fsr2h	equ	0xFDA
 17974                           fsr2l	equ	0xFD9
 17975                           status	equ	0xFD8
 17976                           
 17977 ;; *************** function __CANIDToRegs *****************
 17978 ;; Defined at:
 17979 ;;		line 1101 in file "ECAN.c"
 17980 ;; Parameters:    Size  Location     Type
 17981 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 17982 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17983 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17984 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 17985 ;;  val             4    2[BANK0 ] unsigned long 
 17986 ;;  type            1    6[BANK0 ] unsigned char 
 17987 ;; Auto vars:     Size  Location     Type
 17988 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 17989 ;;		 -> _CANIDToRegs@val(4), 
 17990 ;; Return value:  Size  Location     Type
 17991 ;;		None               void
 17992 ;; Registers used:
 17993 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17994 ;; Tracked objects:
 17995 ;;		On entry : F/0
 17996 ;;		On exit  : F/0
 17997 ;;		Unchanged: 0/0
 17998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17999 ;;      Params:         0       7       0       0       0       0       0
 18000 ;;      Locals:         0       1       0       0       0       0       0
 18001 ;;      Temps:          0       2       0       0       0       0       0
 18002 ;;      Totals:         0      10       0       0       0       0       0
 18003 ;;Total ram usage:       10 bytes
 18004 ;; Hardware stack levels used:    1
 18005 ;; Hardware stack levels required when called:    3
 18006 ;; This function calls:
 18007 ;;		Nothing
 18008 ;; This function is called by:
 18009 ;;		_doModeVerbose
 18010 ;;		_ECANSendMessage
 18011 ;; This function uses a non-reentrant model
 18012 ;;
 18013                           
 18014                           	psect	text37
 18015  003A28                     __ptext37:
 18016                           	opt stack 0
 18017  003A28                     __CANIDToRegs:
 18018                           	opt stack 24
 18019                           
 18020                           ; BSR set to: 0
 18021                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 18022                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 18023                           
 18024                           ; BSR set to: 0
 18025                           ;incstack = 0
 18026                           ;incstack = 0
 18027  003A28  0E62               	movlw	low __CANIDToRegs@val
 18028  003A2A  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 18029                           
 18030                           ; BSR set to: 0
 18031                           ;ECAN.c: 1106: if ( type == 0 )
 18032  003A2C  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 18033  003A2E  D022               	goto	l12350
 18034                           
 18035                           ; BSR set to: 0
 18036                           ;ECAN.c: 1107: {
 18037                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 18038  003A30  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18039  003A32  6ED9               	movwf	fsr2l,c
 18040  003A34  6ADA               	clrf	fsr2h,c
 18041  003A36  50DF               	movf	indf2,w,c
 18042  003A38  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18043  003A3A  90D8               	bcf	status,0,c
 18044  003A3C  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18045  003A3E  90D8               	bcf	status,0,c
 18046  003A40  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18047  003A42  90D8               	bcf	status,0,c
 18048  003A44  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 18049                           
 18050                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 18051  003A46  D862               	call	PL48	;call to abstracted procedure
 18052  003A48  2AD9               	incf	fsr2l,f,c
 18053  003A4A  6ADA               	clrf	fsr2h,c
 18054  003A4C  D872               	call	PL96	;call to abstracted procedure
 18055  003A4E                     u15915:
 18056  003A4E  90D8               	bcf	status,0,c
 18057  003A50  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18058  003A52  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18059  003A54  D7FC               	goto	u15915
 18060  003A56  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18061                           
 18062                           ; BSR set to: 0
 18063                           ;ECAN.c: 1111: ptr++;
 18064                           
 18065                           ; BSR set to: 0
 18066                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 18067  003A5A  D846               	call	PL30	;call to abstracted procedure
 18068  003A5C  D86A               	call	PL96	;call to abstracted procedure
 18069  003A5E                     u15925:
 18070  003A5E  90D8               	bcf	status,0,c
 18071  003A60  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18072  003A62  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18073  003A64  D7FC               	goto	u15925
 18074  003A66  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18075  003A68  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18076  003A6C  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18077  003A70  6EDF               	movwf	indf2,c
 18078                           
 18079                           ;ECAN.c: 1113: }
 18080  003A72  D039               	goto	l1513
 18081  003A74                     l12350:
 18082                           
 18083                           ; BSR set to: 0
 18084                           ;ECAN.c: 1114: else
 18085                           ;ECAN.c: 1115: {
 18086                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 18087  003A74  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18088  003A76  D842               	call	PL46	;call to abstracted procedure
 18089  003A78  0E05               	movlw	5
 18090  003A7A  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18091  003A7C                     u15935:
 18092  003A7C  90D8               	bcf	status,0,c
 18093  003A7E  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 18094  003A80  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 18095  003A82  D7FC               	goto	u15935
 18096  003A84  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18097                           
 18098                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 18099  003A86  D842               	call	PL48	;call to abstracted procedure
 18100  003A88  0E03               	movlw	3
 18101  003A8A  D849               	call	PL70	;call to abstracted procedure
 18102  003A8C  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18103  003A8E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18104                           
 18105                           ; BSR set to: 0
 18106                           ;ECAN.c: 1119: ptr++;
 18107                           
 18108                           ; BSR set to: 0
 18109                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 18110  003A92  D82A               	call	PL30	;call to abstracted procedure
 18111  003A94  0E02               	movlw	2
 18112  003A96  D843               	call	PL70	;call to abstracted procedure
 18113  003A98  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 18114  003A9A  0BE0               	andlw	224
 18115  003A9C  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18116  003AA0  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18117  003AA4  6EDF               	movwf	indf2,c
 18118                           
 18119                           ; BSR set to: 0
 18120                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 18121  003AA6  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18122  003AAA  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18123  003AAE  0E00               	movlw	0
 18124  003AB0  86DB               	bsf	plusw2,3,c
 18125                           
 18126                           ; BSR set to: 0
 18127                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 18128  003AB2  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18129  003AB4  D823               	call	PL46	;call to abstracted procedure
 18130  003AB6  0E03               	movlw	3
 18131  003AB8  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 18132  003ABA  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18133                           
 18134                           ;ECAN.c: 1124: ptr++;
 18135                           
 18136                           ; BSR set to: 0
 18137                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 18138  003ABE  D814               	call	PL30	;call to abstracted procedure
 18139  003AC0  2AD9               	incf	fsr2l,f,c
 18140  003AC2  6ADA               	clrf	fsr2h,c
 18141  003AC4  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18142  003AC8  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18143  003ACC  CFDF FFE7          	movff	indf2,indf1
 18144                           
 18145                           ; BSR set to: 0
 18146                           ;ECAN.c: 1126: ptr++;
 18147  003AD0  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18148  003AD2  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18149                           
 18150                           ; BSR set to: 0
 18151                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 18152  003AD4  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18153  003AD6  6ED9               	movwf	fsr2l,c
 18154  003AD8  6ADA               	clrf	fsr2h,c
 18155  003ADA  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18156  003ADE  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18157  003AE2  CFDF FFE7          	movff	indf2,indf1
 18158  003AE6                     l1513:
 18159                           
 18160                           ; BSR set to: 0
 18161  003AE6  0012               	return	
 18162  003AE8                     __end_of__CANIDToRegs:
 18163                           	opt stack 0
 18164  003AE8                     PL30:
 18165                           	opt stack 24
 18166  003AE8  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18167  003AEC  5167               	movf	??__CANIDToRegs& (0+255),w,b
 18168  003AEE  12DF               	iorwf	indf2,f,c
 18169  003AF0  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 18170  003AF2  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 18171  003AF4  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18172  003AF6  6ED9               	movwf	fsr2l,c
 18173  003AF8  6ADA               	clrf	fsr2h,c
 18174  003AFA  0012               	return	
 18175  003AFC                     __end_ofPL30:
 18176                           	opt stack 0
 18177  003AFC                     PL46:
 18178                           	opt stack 24
 18179  003AFC  6ED9               	movwf	fsr2l,c
 18180  003AFE  6ADA               	clrf	fsr2h,c
 18181  003B00  0E02               	movlw	2
 18182  003B02  26D9               	addwf	fsr2l,f,c
 18183  003B04  6ADA               	clrf	fsr2h,c
 18184  003B06  50DF               	movf	indf2,w,c
 18185  003B08  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18186  003B0A  0012               	return	
 18187  003B0C                     __end_ofPL46:
 18188                           	opt stack 0
 18189  003B0C                     PL48:
 18190                           	opt stack 24
 18191  003B0C  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18192  003B10  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18193  003B14  6EDF               	movwf	indf2,c
 18194  003B16  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 18195  003B18  6ED9               	movwf	fsr2l,c
 18196  003B1A  6ADA               	clrf	fsr2h,c
 18197  003B1C  0012               	return	
 18198  003B1E                     __end_ofPL48:
 18199                           	opt stack 0
 18200  003B1E                     PL70:
 18201                           	opt stack 24
 18202  003B1E  26D9               	addwf	fsr2l,f,c
 18203  003B20  6ADA               	clrf	fsr2h,c
 18204  003B22  50DF               	movf	indf2,w,c
 18205  003B24  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18206  003B26  90D8               	bcf	status,0,c
 18207  003B28  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18208  003B2A  90D8               	bcf	status,0,c
 18209  003B2C  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 18210  003B2E  90D8               	bcf	status,0,c
 18211  003B30  0012               	return	
 18212  003B32                     __end_ofPL70:
 18213                           	opt stack 0
 18214  003B32                     PL96:
 18215                           	opt stack 24
 18216  003B32  50DF               	movf	indf2,w,c
 18217  003B34  6F67               	movwf	??__CANIDToRegs& (0+255),b
 18218  003B36  0E05               	movlw	5
 18219  003B38  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 18220  003B3A  0C05               	retlw	5
 18221  003B3C                     __end_ofPL96:
 18222                           	opt stack 0
 18223                           tblptru	equ	0xFF8
 18224                           tblptrh	equ	0xFF7
 18225                           tblptrl	equ	0xFF6
 18226                           tablat	equ	0xFF5
 18227                           prodh	equ	0xFF4
 18228                           prodl	equ	0xFF3
 18229                           intcon	equ	0xFF2
 18230                           indf0	equ	0xFEF
 18231                           postinc0	equ	0xFEE
 18232                           fsr0h	equ	0xFEA
 18233                           fsr0l	equ	0xFE9
 18234                           wreg	equ	0xFE8
 18235                           indf1	equ	0xFE7
 18236                           postinc1	equ	0xFE6
 18237                           postdec1	equ	0xFE5
 18238                           fsr1h	equ	0xFE2
 18239                           fsr1l	equ	0xFE1
 18240                           indf2	equ	0xFDF
 18241                           postinc2	equ	0xFDE
 18242                           postdec2	equ	0xFDD
 18243                           plusw2	equ	0xFDB
 18244                           fsr2h	equ	0xFDA
 18245                           fsr2l	equ	0xFD9
 18246                           status	equ	0xFD8
 18247                           
 18248 ;; *************** function _memset *****************
 18249 ;; Defined at:
 18250 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18251 ;; Parameters:    Size  Location     Type
 18252 ;;  p1              2    0[BANK0 ] PTR void 
 18253 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18254 ;;  c               2    2[BANK0 ] int 
 18255 ;;  n               2    4[BANK0 ] unsigned int 
 18256 ;; Auto vars:     Size  Location     Type
 18257 ;;  p               2    6[BANK0 ] PTR unsigned char 
 18258 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18259 ;; Return value:  Size  Location     Type
 18260 ;;                  2    0[BANK0 ] PTR void 
 18261 ;; Registers used:
 18262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18263 ;; Tracked objects:
 18264 ;;		On entry : F/0
 18265 ;;		On exit  : F/0
 18266 ;;		Unchanged: 0/0
 18267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18268 ;;      Params:         0       6       0       0       0       0       0
 18269 ;;      Locals:         0       2       0       0       0       0       0
 18270 ;;      Temps:          0       0       0       0       0       0       0
 18271 ;;      Totals:         0       8       0       0       0       0       0
 18272 ;;Total ram usage:        8 bytes
 18273 ;; Hardware stack levels used:    1
 18274 ;; Hardware stack levels required when called:    3
 18275 ;; This function calls:
 18276 ;;		Nothing
 18277 ;; This function is called by:
 18278 ;;		_doModeVerbose
 18279 ;;		_doModeSLCAN
 18280 ;;		_printGUID
 18281 ;;		_printMDF
 18282 ;;		_printNodeFirmwareVersion
 18283 ;; This function uses a non-reentrant model
 18284 ;;
 18285                           
 18286                           	psect	text38
 18287  0057FC                     __ptext38:
 18288                           	opt stack 0
 18289  0057FC                     _memset:
 18290                           	opt stack 26
 18291                           
 18292                           ; BSR set to: 0
 18293                           
 18294                           ; BSR set to: 0
 18295                           ;incstack = 0
 18296                           ;incstack = 0
 18297  0057FC  C060  F066         	movff	memset@p1,memset@p
 18298  005800  C061  F067         	movff	memset@p1+1,memset@p+1
 18299  005804  D008               	goto	l14900
 18300  005806                     l14896:
 18301                           
 18302                           ; BSR set to: 0
 18303  005806  C066  FFD9         	movff	memset@p,fsr2l
 18304  00580A  C067  FFDA         	movff	memset@p+1,fsr2h
 18305  00580E  C062  FFDF         	movff	memset@c,indf2
 18306                           
 18307                           ; BSR set to: 0
 18308  005812  4B66               	infsnz	memset@p& (0+255),f,b
 18309  005814  2B67               	incf	(memset@p+1)& (0+255),f,b
 18310  005816                     l14900:
 18311                           
 18312                           ; BSR set to: 0
 18313  005816  0764               	decf	memset@n& (0+255),f,b
 18314  005818  A0D8               	btfss	status,0,c
 18315  00581A  0765               	decf	(memset@n+1)& (0+255),f,b
 18316  00581C  0100               	movlb	0	; () banked
 18317  00581E  2964               	incf	memset@n& (0+255),w,b
 18318  005820  B4D8               	btfsc	status,2,c
 18319  005822  2965               	incf	(memset@n+1)& (0+255),w,b
 18320  005824  B4D8               	btfsc	status,2,c
 18321                           
 18322                           ; BSR set to: 0
 18323  005826  0012               	return	
 18324  005828  D7EE               	goto	l14896
 18325  00582A                     __end_of_memset:
 18326                           	opt stack 0
 18327                           tblptru	equ	0xFF8
 18328                           tblptrh	equ	0xFF7
 18329                           tblptrl	equ	0xFF6
 18330                           tablat	equ	0xFF5
 18331                           prodh	equ	0xFF4
 18332                           prodl	equ	0xFF3
 18333                           intcon	equ	0xFF2
 18334                           indf0	equ	0xFEF
 18335                           postinc0	equ	0xFEE
 18336                           fsr0h	equ	0xFEA
 18337                           fsr0l	equ	0xFE9
 18338                           wreg	equ	0xFE8
 18339                           indf1	equ	0xFE7
 18340                           postinc1	equ	0xFE6
 18341                           postdec1	equ	0xFE5
 18342                           fsr1h	equ	0xFE2
 18343                           fsr1l	equ	0xFE1
 18344                           indf2	equ	0xFDF
 18345                           postinc2	equ	0xFDE
 18346                           postdec2	equ	0xFDD
 18347                           plusw2	equ	0xFDB
 18348                           fsr2h	equ	0xFDA
 18349                           fsr2l	equ	0xFD9
 18350                           status	equ	0xFD8
 18351                           
 18352 ;; *************** function _printHelp *****************
 18353 ;; Defined at:
 18354 ;;		line 2599 in file "main.c"
 18355 ;; Parameters:    Size  Location     Type
 18356 ;;		None
 18357 ;; Auto vars:     Size  Location     Type
 18358 ;;		None
 18359 ;; Return value:  Size  Location     Type
 18360 ;;		None               void
 18361 ;; Registers used:
 18362 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18363 ;; Tracked objects:
 18364 ;;		On entry : F/0
 18365 ;;		On exit  : 0/0
 18366 ;;		Unchanged: 0/0
 18367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18368 ;;      Params:         0       0       0       0       0       0       0
 18369 ;;      Locals:         0       0       0       0       0       0       0
 18370 ;;      Temps:          0       0       0       0       0       0       0
 18371 ;;      Totals:         0       0       0       0       0       0       0
 18372 ;;Total ram usage:        0 bytes
 18373 ;; Hardware stack levels used:    1
 18374 ;; Hardware stack levels required when called:    5
 18375 ;; This function calls:
 18376 ;;		_putsUSART
 18377 ;; This function is called by:
 18378 ;;		_doModeVerbose
 18379 ;; This function uses a non-reentrant model
 18380 ;;
 18381                           
 18382                           	psect	text39
 18383  002D22                     __ptext39:
 18384                           	opt stack 0
 18385  002D22                     _printHelp:
 18386                           	opt stack 24
 18387                           
 18388                           ; BSR set to: 0
 18389                           ;main.c: 2600: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18390                           
 18391                           ; BSR set to: 0
 18392                           ;incstack = 0
 18393                           ;incstack = 0
 18394  002D22  0E78               	movlw	high STR_206
 18395  002D24  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18396  002D26  0E49               	movlw	low STR_206
 18397  002D28  6F61               	movwf	?_putsUSART& (0+255),b
 18398  002D2A  EC84  F029         	call	_putsUSART	;wreg free
 18399                           
 18400                           ;main.c: 2601: putsUSART((char *) "------------------------------------\r\n");
 18401  002D2E  0E71               	movlw	high (STR_238+28)
 18402  002D30  0100               	movlb	0	; () banked
 18403  002D32  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18404  002D34  0E6B               	movlw	low (STR_238+28)
 18405  002D36  6F61               	movwf	?_putsUSART& (0+255),b
 18406  002D38  EC84  F029         	call	_putsUSART	;wreg free
 18407                           
 18408                           ;main.c: 2602: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18409  002D3C  0E7B               	movlw	high STR_208
 18410  002D3E  0100               	movlb	0	; () banked
 18411  002D40  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18412  002D42  0E64               	movlw	low STR_208
 18413  002D44  6F61               	movwf	?_putsUSART& (0+255),b
 18414  002D46  EC84  F029         	call	_putsUSART	;wreg free
 18415                           
 18416                           ;main.c: 2603: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18417  002D4A  0E76               	movlw	high STR_209
 18418  002D4C  0100               	movlb	0	; () banked
 18419  002D4E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18420  002D50  0ED8               	movlw	low STR_209
 18421  002D52  6F61               	movwf	?_putsUSART& (0+255),b
 18422  002D54  EC84  F029         	call	_putsUSART	;wreg free
 18423                           
 18424                           ;main.c: 2604: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18425  002D58  0E76               	movlw	high STR_210
 18426  002D5A  0100               	movlb	0	; () banked
 18427  002D5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18428  002D5E  0E7E               	movlw	low STR_210
 18429  002D60  6F61               	movwf	?_putsUSART& (0+255),b
 18430  002D62  EC84  F029         	call	_putsUSART	;wreg free
 18431                           
 18432                           ;main.c: 2605: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18433  002D66  0E74               	movlw	high STR_211
 18434  002D68  0100               	movlb	0	; () banked
 18435  002D6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18436  002D6C  0EF7               	movlw	low STR_211
 18437  002D6E  6F61               	movwf	?_putsUSART& (0+255),b
 18438  002D70  EC84  F029         	call	_putsUSART	;wreg free
 18439                           
 18440                           ;main.c: 2606: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18441  002D74  0E75               	movlw	high STR_212
 18442  002D76  0100               	movlb	0	; () banked
 18443  002D78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18444  002D7A  0E5C               	movlw	low STR_212
 18445  002D7C  6F61               	movwf	?_putsUSART& (0+255),b
 18446  002D7E  EC84  F029         	call	_putsUSART	;wreg free
 18447                           
 18448                           ;main.c: 2607: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18449  002D82  0E7B               	movlw	high STR_213
 18450  002D84  0100               	movlb	0	; () banked
 18451  002D86  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18452  002D88  0E0C               	movlw	low STR_213
 18453  002D8A  6F61               	movwf	?_putsUSART& (0+255),b
 18454  002D8C  EC84  F029         	call	_putsUSART	;wreg free
 18455                           
 18456                           ;main.c: 2608: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18457  002D90  0E75               	movlw	high STR_214
 18458  002D92  0100               	movlb	0	; () banked
 18459  002D94  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18460  002D96  0E8E               	movlw	low STR_214
 18461  002D98  6F61               	movwf	?_putsUSART& (0+255),b
 18462  002D9A  EC84  F029         	call	_putsUSART	;wreg free
 18463                           
 18464                           ;main.c: 2609: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18465  002D9E  0E76               	movlw	high STR_215
 18466  002DA0  0100               	movlb	0	; () banked
 18467  002DA2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18468  002DA4  0EAC               	movlw	low STR_215
 18469  002DA6  6F61               	movwf	?_putsUSART& (0+255),b
 18470  002DA8  EC84  F029         	call	_putsUSART	;wreg free
 18471                           
 18472                           ;main.c: 2610: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18473  002DAC  0E7C               	movlw	high STR_216
 18474  002DAE  0100               	movlb	0	; () banked
 18475  002DB0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18476  002DB2  0E01               	movlw	low STR_216
 18477  002DB4  6F61               	movwf	?_putsUSART& (0+255),b
 18478  002DB6  EC84  F029         	call	_putsUSART	;wreg free
 18479                           
 18480                           ;main.c: 2611: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18481  002DBA  0E73               	movlw	high STR_217
 18482  002DBC  0100               	movlb	0	; () banked
 18483  002DBE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18484  002DC0  0E45               	movlw	low STR_217
 18485  002DC2  6F61               	movwf	?_putsUSART& (0+255),b
 18486  002DC4  EC84  F029         	call	_putsUSART	;wreg free
 18487                           
 18488                           ;main.c: 2612: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18489  002DC8  0E7C               	movlw	high STR_218
 18490  002DCA  0100               	movlb	0	; () banked
 18491  002DCC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18492  002DCE  0EC1               	movlw	low STR_218
 18493  002DD0  6F61               	movwf	?_putsUSART& (0+255),b
 18494  002DD2  EC84  F029         	call	_putsUSART	;wreg free
 18495                           
 18496                           ;main.c: 2613: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18497  002DD6  0E7A               	movlw	high STR_219
 18498  002DD8  0100               	movlb	0	; () banked
 18499  002DDA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18500  002DDC  0E28               	movlw	low STR_219
 18501  002DDE  6F61               	movwf	?_putsUSART& (0+255),b
 18502  002DE0  EC84  F029         	call	_putsUSART	;wreg free
 18503                           
 18504                           ;main.c: 2614: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18505  002DE4  0E78               	movlw	high STR_220
 18506  002DE6  0100               	movlb	0	; () banked
 18507  002DE8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18508  002DEA  0E22               	movlw	low STR_220
 18509  002DEC  6F61               	movwf	?_putsUSART& (0+255),b
 18510  002DEE  EC84  F029         	call	_putsUSART	;wreg free
 18511                           
 18512                           ;main.c: 2615: putsUSART((char *) "HELP - Display this help information.\r\n");
 18513  002DF2  0E77               	movlw	high STR_221
 18514  002DF4  0100               	movlb	0	; () banked
 18515  002DF6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18516  002DF8  0E83               	movlw	low STR_221
 18517  002DFA  6F61               	movwf	?_putsUSART& (0+255),b
 18518  002DFC  EC84  F029         	call	_putsUSART	;wreg free
 18519                           
 18520                           ;main.c: 2616: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18521  002E00  0E76               	movlw	high STR_222
 18522  002E02  0100               	movlb	0	; () banked
 18523  002E04  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18524  002E06  0E4F               	movlw	low STR_222
 18525  002E08  6F61               	movwf	?_putsUSART& (0+255),b
 18526  002E0A  EC84  F029         	call	_putsUSART	;wreg free
 18527                           
 18528                           ;main.c: 2617: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 18529  002E0E  0E71               	movlw	high STR_223
 18530  002E10  0100               	movlb	0	; () banked
 18531  002E12  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18532  002E14  0E0A               	movlw	low STR_223
 18533  002E16  6F61               	movwf	?_putsUSART& (0+255),b
 18534  002E18  EC84  F029         	call	_putsUSART	;wreg free
 18535                           
 18536                           ;main.c: 2618: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 18537  002E1C  0E71               	movlw	high STR_224
 18538  002E1E  0100               	movlb	0	; () banked
 18539  002E20  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18540  002E22  0ED5               	movlw	low STR_224
 18541  002E24  6F61               	movwf	?_putsUSART& (0+255),b
 18542  002E26  EC84  F029         	call	_putsUSART	;wreg free
 18543                           
 18544                           ;main.c: 2619: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18545  002E2A  0E70               	movlw	high STR_225
 18546  002E2C  0100               	movlb	0	; () banked
 18547  002E2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18548  002E30  0E76               	movlw	low STR_225
 18549  002E32  6F61               	movwf	?_putsUSART& (0+255),b
 18550  002E34  EC84  F029         	call	_putsUSART	;wreg free
 18551                           
 18552                           ;main.c: 2620: putsUSART((char *) "FILTER - Set filter .\r\n");
 18553  002E38  0E7C               	movlw	high STR_226
 18554  002E3A  0100               	movlb	0	; () banked
 18555  002E3C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18556  002E3E  0E19               	movlw	low STR_226
 18557  002E40  6F61               	movwf	?_putsUSART& (0+255),b
 18558  002E42  EC84  F029         	call	_putsUSART	;wreg free
 18559                           
 18560                           ;main.c: 2621: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18561  002E46  0E70               	movlw	high STR_227
 18562  002E48  0100               	movlb	0	; () banked
 18563  002E4A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18564  002E4C  0E28               	movlw	low STR_227
 18565  002E4E  6F61               	movwf	?_putsUSART& (0+255),b
 18566  002E50  EC84  F029         	call	_putsUSART	;wreg free
 18567                           
 18568                           ;main.c: 2622: putsUSART((char *) "MASK - Set mask .\r\n");
 18569  002E54  0E7D               	movlw	high STR_228
 18570  002E56  0100               	movlb	0	; () banked
 18571  002E58  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18572  002E5A  0E47               	movlw	low STR_228
 18573  002E5C  6F61               	movwf	?_putsUSART& (0+255),b
 18574  002E5E  EC84  F029         	call	_putsUSART	;wreg free
 18575                           
 18576                           ;main.c: 2623: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18577  002E62  0E70               	movlw	high STR_229
 18578  002E64  0100               	movlb	0	; () banked
 18579  002E66  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18580  002E68  0EC3               	movlw	low STR_229
 18581  002E6A  6F61               	movwf	?_putsUSART& (0+255),b
 18582  002E6C  EC84  F029         	call	_putsUSART	;wreg free
 18583                           
 18584                           ;main.c: 2624: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18585  002E70  0E79               	movlw	high STR_230
 18586  002E72  0100               	movlb	0	; () banked
 18587  002E74  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18588  002E76  0EE4               	movlw	low STR_230
 18589  002E78  6F61               	movwf	?_putsUSART& (0+255),b
 18590  002E7A  EC84  F029         	call	_putsUSART	;wreg free
 18591                           
 18592                           ;main.c: 2625: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18593  002E7E  0E76               	movlw	high STR_231
 18594  002E80  0100               	movlb	0	; () banked
 18595  002E82  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18596  002E84  0E20               	movlw	low STR_231
 18597  002E86  6F61               	movwf	?_putsUSART& (0+255),b
 18598  002E88  EC84  F029         	call	_putsUSART	;wreg free
 18599                           
 18600                           ;main.c: 2626: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18601  002E8C  0E75               	movlw	high STR_232
 18602  002E8E  0100               	movlb	0	; () banked
 18603  002E90  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18604  002E92  0EF1               	movlw	low STR_232
 18605  002E94  6F61               	movwf	?_putsUSART& (0+255),b
 18606  002E96  EC84  F029         	call	_putsUSART	;wreg free
 18607                           
 18608                           ;main.c: 2627: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 18609  002E9A  0E71               	movlw	high STR_233
 18610  002E9C  0100               	movlb	0	; () banked
 18611  002E9E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18612  002EA0  0E92               	movlw	low STR_233
 18613  002EA2  6F61               	movwf	?_putsUSART& (0+255),b
 18614  002EA4  EC84  F029         	call	_putsUSART	;wreg free
 18615                           
 18616                           ;main.c: 2628: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18617  002EA8  0E75               	movlw	high STR_234
 18618  002EAA  0100               	movlb	0	; () banked
 18619  002EAC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18620  002EAE  0EC0               	movlw	low STR_234
 18621  002EB0  6F61               	movwf	?_putsUSART& (0+255),b
 18622  002EB2  EC84  F029         	call	_putsUSART	;wreg free
 18623                           
 18624                           ;main.c: 2629: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18625  002EB6  0E73               	movlw	high STR_235
 18626  002EB8  0100               	movlb	0	; () banked
 18627  002EBA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18628  002EBC  0EB4               	movlw	low STR_235
 18629  002EBE  6F61               	movwf	?_putsUSART& (0+255),b
 18630  002EC0  EC84  F029         	call	_putsUSART	;wreg free
 18631                           
 18632                           ;main.c: 2630: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18633  002EC4  0E72               	movlw	high STR_236
 18634  002EC6  0100               	movlb	0	; () banked
 18635  002EC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18636  002ECA  0E5A               	movlw	low STR_236
 18637  002ECC  6F61               	movwf	?_putsUSART& (0+255),b
 18638  002ECE  EC84  F029         	call	_putsUSART	;wreg free
 18639                           
 18640                           ;main.c: 2631: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18641  002ED2  0E78               	movlw	high STR_237
 18642  002ED4  0100               	movlb	0	; () banked
 18643  002ED6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18644  002ED8  0EBE               	movlw	low STR_237
 18645  002EDA  6F61               	movwf	?_putsUSART& (0+255),b
 18646  002EDC  EF84  F029         	goto	_putsUSART	;wreg free
 18647  002EE0                     __end_of_printHelp:
 18648                           	opt stack 0
 18649                           tblptru	equ	0xFF8
 18650                           tblptrh	equ	0xFF7
 18651                           tblptrl	equ	0xFF6
 18652                           tablat	equ	0xFF5
 18653                           prodh	equ	0xFF4
 18654                           prodl	equ	0xFF3
 18655                           intcon	equ	0xFF2
 18656                           indf0	equ	0xFEF
 18657                           postinc0	equ	0xFEE
 18658                           fsr0h	equ	0xFEA
 18659                           fsr0l	equ	0xFE9
 18660                           wreg	equ	0xFE8
 18661                           indf1	equ	0xFE7
 18662                           postinc1	equ	0xFE6
 18663                           postdec1	equ	0xFE5
 18664                           fsr1h	equ	0xFE2
 18665                           fsr1l	equ	0xFE1
 18666                           indf2	equ	0xFDF
 18667                           postinc2	equ	0xFDE
 18668                           postdec2	equ	0xFDD
 18669                           plusw2	equ	0xFDB
 18670                           fsr2h	equ	0xFDA
 18671                           fsr2l	equ	0xFD9
 18672                           status	equ	0xFD8
 18673                           
 18674 ;; *************** function _printErrors *****************
 18675 ;; Defined at:
 18676 ;;		line 2535 in file "main.c"
 18677 ;; Parameters:    Size  Location     Type
 18678 ;;		None
 18679 ;; Auto vars:     Size  Location     Type
 18680 ;;		None
 18681 ;; Return value:  Size  Location     Type
 18682 ;;		None               void
 18683 ;; Registers used:
 18684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18685 ;; Tracked objects:
 18686 ;;		On entry : F/0
 18687 ;;		On exit  : 0/0
 18688 ;;		Unchanged: 0/0
 18689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18690 ;;      Params:         0       0       0       0       0       0       0
 18691 ;;      Locals:         0      12       0       0       0       0       0
 18692 ;;      Temps:          0       0       0       0       0       0       0
 18693 ;;      Totals:         0      12       0       0       0       0       0
 18694 ;;Total ram usage:       12 bytes
 18695 ;; Hardware stack levels used:    1
 18696 ;; Hardware stack levels required when called:    5
 18697 ;; This function calls:
 18698 ;;		_putsUSART
 18699 ;;		_sprintf
 18700 ;; This function is called by:
 18701 ;;		_doModeVerbose
 18702 ;; This function uses a non-reentrant model
 18703 ;;
 18704                           
 18705                           	psect	text40
 18706  002236                     __ptext40:
 18707                           	opt stack 0
 18708  002236                     _printErrors:
 18709                           	opt stack 24
 18710                           
 18711                           ; BSR set to: 0
 18712                           ;main.c: 2536: putsUSART((char *) "CAN Receive overruns: ");
 18713                           
 18714                           ;incstack = 0
 18715                           ;incstack = 0
 18716  002236  0E7C               	movlw	high STR_176
 18717  002238  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18718  00223A  0ED8               	movlw	low STR_176
 18719  00223C  6F61               	movwf	?_putsUSART& (0+255),b
 18720  00223E  EC84  F029         	call	_putsUSART	;wreg free
 18721                           
 18722                           ;main.c: 2537: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18723  002242  0100               	movlb	0	; () banked
 18724  002244  67E4               	tstfsz	_bHex& (0+255),b
 18725  002246  D004               	goto	l14976
 18726                           
 18727                           ; BSR set to: 0
 18728  002248  0E7F               	movlw	high STR_162
 18729  00224A  6F95               	movwf	(_printErrors$1458+1)& (0+255),b
 18730  00224C  0EE1               	movlw	low STR_162
 18731  00224E  D003               	goto	L16
 18732  002250                     l14976:
 18733                           
 18734                           ; BSR set to: 0
 18735  002250  0E7F               	movlw	high STR_177
 18736  002252  6F95               	movwf	(_printErrors$1458+1)& (0+255),b
 18737  002254  0E16               	movlw	low STR_177
 18738  002256                     L16:
 18739  002256  6F94               	movwf	_printErrors$1458& (0+255),b
 18740                           
 18741                           ; BSR set to: 0
 18742  002258  0E01               	movlw	high _wrkbuf
 18743  00225A  0100               	movlb	0	; () banked
 18744  00225C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18745  00225E  0E76               	movlw	low _wrkbuf
 18746  002260  6F76               	movwf	?_sprintf& (0+255),b
 18747  002262  C094  F078         	movff	_printErrors$1458,?_sprintf+2
 18748  002266  C095  F079         	movff	_printErrors$1458+1,?_sprintf+3
 18749  00226A  C100  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 18750  00226E  C101  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 18751  002272  C102  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 18752  002276  C103  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 18753  00227A  EC8D  F00B         	call	_sprintf	;wreg free
 18754                           
 18755                           ; BSR set to: 0
 18756                           ;main.c: 2538: putsUSART(wrkbuf);
 18757  00227E  0E01               	movlw	high _wrkbuf
 18758  002280  0100               	movlb	0	; () banked
 18759  002282  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18760  002284  0E76               	movlw	low _wrkbuf
 18761  002286  6F61               	movwf	?_putsUSART& (0+255),b
 18762  002288  EC84  F029         	call	_putsUSART	;wreg free
 18763                           
 18764                           ;main.c: 2539: putsUSART((char *) "\r\n");
 18765  00228C  0E74               	movlw	high (STR_197+50)
 18766  00228E  0100               	movlb	0	; () banked
 18767  002290  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18768  002292  0EC0               	movlw	low (STR_197+50)
 18769  002294  6F61               	movwf	?_putsUSART& (0+255),b
 18770  002296  EC84  F029         	call	_putsUSART	;wreg free
 18771                           
 18772                           ;main.c: 2541: putsUSART((char *) "CAN Transmit overruns: ");
 18773  00229A  0E7C               	movlw	high STR_180
 18774  00229C  0100               	movlb	0	; () banked
 18775  00229E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18776  0022A0  0EA9               	movlw	low STR_180
 18777  0022A2  6F61               	movwf	?_putsUSART& (0+255),b
 18778  0022A4  EC84  F029         	call	_putsUSART	;wreg free
 18779                           
 18780                           ;main.c: 2542: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18781  0022A8  0100               	movlb	0	; () banked
 18782  0022AA  67E4               	tstfsz	_bHex& (0+255),b
 18783  0022AC  D004               	goto	l14990
 18784                           
 18785                           ; BSR set to: 0
 18786  0022AE  0E7F               	movlw	high STR_162
 18787  0022B0  6F97               	movwf	(_printErrors$1464+1)& (0+255),b
 18788  0022B2  0EE1               	movlw	low STR_162
 18789  0022B4  D003               	goto	L17
 18790  0022B6                     l14990:
 18791                           
 18792                           ; BSR set to: 0
 18793  0022B6  0E7F               	movlw	high STR_177
 18794  0022B8  6F97               	movwf	(_printErrors$1464+1)& (0+255),b
 18795  0022BA  0E16               	movlw	low STR_177
 18796  0022BC                     L17:
 18797  0022BC  6F96               	movwf	_printErrors$1464& (0+255),b
 18798                           
 18799                           ; BSR set to: 0
 18800  0022BE  0E01               	movlw	high _wrkbuf
 18801  0022C0  0100               	movlb	0	; () banked
 18802  0022C2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18803  0022C4  0E76               	movlw	low _wrkbuf
 18804  0022C6  6F76               	movwf	?_sprintf& (0+255),b
 18805  0022C8  C096  F078         	movff	_printErrors$1464,?_sprintf+2
 18806  0022CC  C097  F079         	movff	_printErrors$1464+1,?_sprintf+3
 18807  0022D0  C104  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 18808  0022D4  C105  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 18809  0022D8  C106  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 18810  0022DC  C107  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 18811  0022E0  EC8D  F00B         	call	_sprintf	;wreg free
 18812                           
 18813                           ; BSR set to: 0
 18814                           ;main.c: 2543: putsUSART(wrkbuf);
 18815  0022E4  0E01               	movlw	high _wrkbuf
 18816  0022E6  0100               	movlb	0	; () banked
 18817  0022E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18818  0022EA  0E76               	movlw	low _wrkbuf
 18819  0022EC  6F61               	movwf	?_putsUSART& (0+255),b
 18820  0022EE  EC84  F029         	call	_putsUSART	;wreg free
 18821                           
 18822                           ;main.c: 2544: putsUSART((char *) "\r\n");
 18823  0022F2  0E74               	movlw	high (STR_197+50)
 18824  0022F4  0100               	movlb	0	; () banked
 18825  0022F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18826  0022F8  0EC0               	movlw	low (STR_197+50)
 18827  0022FA  6F61               	movwf	?_putsUSART& (0+255),b
 18828  0022FC  EC84  F029         	call	_putsUSART	;wreg free
 18829                           
 18830                           ;main.c: 2546: putsUSART((char *) "UART Receive overruns: ");
 18831  002300  0E7C               	movlw	high STR_184
 18832  002302  0100               	movlb	0	; () banked
 18833  002304  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18834  002306  0E91               	movlw	low STR_184
 18835  002308  6F61               	movwf	?_putsUSART& (0+255),b
 18836  00230A  EC84  F029         	call	_putsUSART	;wreg free
 18837                           
 18838                           ;main.c: 2547: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18839  00230E  0100               	movlb	0	; () banked
 18840  002310  67E4               	tstfsz	_bHex& (0+255),b
 18841  002312  D004               	goto	l15004
 18842                           
 18843                           ; BSR set to: 0
 18844  002314  0E7F               	movlw	high STR_162
 18845  002316  6F99               	movwf	(_printErrors$1470+1)& (0+255),b
 18846  002318  0EE1               	movlw	low STR_162
 18847  00231A  D003               	goto	L18
 18848  00231C                     l15004:
 18849                           
 18850                           ; BSR set to: 0
 18851  00231C  0E7F               	movlw	high STR_177
 18852  00231E  6F99               	movwf	(_printErrors$1470+1)& (0+255),b
 18853  002320  0E16               	movlw	low STR_177
 18854  002322                     L18:
 18855  002322  6F98               	movwf	_printErrors$1470& (0+255),b
 18856                           
 18857                           ; BSR set to: 0
 18858  002324  0E01               	movlw	high _wrkbuf
 18859  002326  0100               	movlb	0	; () banked
 18860  002328  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18861  00232A  0E76               	movlw	low _wrkbuf
 18862  00232C  6F76               	movwf	?_sprintf& (0+255),b
 18863  00232E  C098  F078         	movff	_printErrors$1470,?_sprintf+2
 18864  002332  C099  F079         	movff	_printErrors$1470+1,?_sprintf+3
 18865  002336  C11C  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 18866  00233A  C11D  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18867  00233E  C11E  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18868  002342  C11F  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18869  002346  EC8D  F00B         	call	_sprintf	;wreg free
 18870                           
 18871                           ; BSR set to: 0
 18872                           ;main.c: 2548: putsUSART(wrkbuf);
 18873  00234A  0E01               	movlw	high _wrkbuf
 18874  00234C  0100               	movlb	0	; () banked
 18875  00234E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18876  002350  0E76               	movlw	low _wrkbuf
 18877  002352  6F61               	movwf	?_putsUSART& (0+255),b
 18878  002354  EC84  F029         	call	_putsUSART	;wreg free
 18879                           
 18880                           ;main.c: 2549: putsUSART((char *) "\r\n");
 18881  002358  0E74               	movlw	high (STR_197+50)
 18882  00235A  0100               	movlb	0	; () banked
 18883  00235C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18884  00235E  0EC0               	movlw	low (STR_197+50)
 18885  002360  6F61               	movwf	?_putsUSART& (0+255),b
 18886  002362  EC84  F029         	call	_putsUSART	;wreg free
 18887                           
 18888                           ;main.c: 2551: putsUSART((char *) "UART Receive overruns: ");
 18889  002366  0E7C               	movlw	high STR_184
 18890  002368  0100               	movlb	0	; () banked
 18891  00236A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18892  00236C  0E91               	movlw	low STR_184
 18893  00236E  6F61               	movwf	?_putsUSART& (0+255),b
 18894  002370  EC84  F029         	call	_putsUSART	;wreg free
 18895                           
 18896                           ;main.c: 2552: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18897  002374  0100               	movlb	0	; () banked
 18898  002376  67E4               	tstfsz	_bHex& (0+255),b
 18899  002378  D004               	goto	l15018
 18900                           
 18901                           ; BSR set to: 0
 18902  00237A  0E7F               	movlw	high STR_162
 18903  00237C  6F9B               	movwf	(_printErrors$1476+1)& (0+255),b
 18904  00237E  0EE1               	movlw	low STR_162
 18905  002380  D003               	goto	L19
 18906  002382                     l15018:
 18907                           
 18908                           ; BSR set to: 0
 18909  002382  0E7F               	movlw	high STR_177
 18910  002384  6F9B               	movwf	(_printErrors$1476+1)& (0+255),b
 18911  002386  0E16               	movlw	low STR_177
 18912  002388                     L19:
 18913  002388  6F9A               	movwf	_printErrors$1476& (0+255),b
 18914                           
 18915                           ; BSR set to: 0
 18916  00238A  0E01               	movlw	high _wrkbuf
 18917  00238C  0100               	movlb	0	; () banked
 18918  00238E  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18919  002390  0E76               	movlw	low _wrkbuf
 18920  002392  6F76               	movwf	?_sprintf& (0+255),b
 18921  002394  C09A  F078         	movff	_printErrors$1476,?_sprintf+2
 18922  002398  C09B  F079         	movff	_printErrors$1476+1,?_sprintf+3
 18923  00239C  C120  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 18924  0023A0  C121  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18925  0023A4  C122  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18926  0023A8  C123  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18927  0023AC  EC8D  F00B         	call	_sprintf	;wreg free
 18928                           
 18929                           ; BSR set to: 0
 18930                           ;main.c: 2553: putsUSART(wrkbuf);
 18931  0023B0  0E01               	movlw	high _wrkbuf
 18932  0023B2  0100               	movlb	0	; () banked
 18933  0023B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18934  0023B6  0E76               	movlw	low _wrkbuf
 18935  0023B8  6F61               	movwf	?_putsUSART& (0+255),b
 18936  0023BA  EC84  F029         	call	_putsUSART	;wreg free
 18937                           
 18938                           ;main.c: 2554: putsUSART((char *) "\r\n");
 18939  0023BE  0E74               	movlw	high (STR_197+50)
 18940  0023C0  0100               	movlb	0	; () banked
 18941  0023C2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18942  0023C4  0EC0               	movlw	low (STR_197+50)
 18943  0023C6  6F61               	movwf	?_putsUSART& (0+255),b
 18944  0023C8  EC84  F029         	call	_putsUSART	;wreg free
 18945                           
 18946                           ;main.c: 2556: putsUSART((char *) "Transmit Error Counter: ");
 18947  0023CC  0E7B               	movlw	high STR_192
 18948  0023CE  0100               	movlb	0	; () banked
 18949  0023D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18950  0023D2  0EE8               	movlw	low STR_192
 18951  0023D4  6F61               	movwf	?_putsUSART& (0+255),b
 18952  0023D6  EC84  F029         	call	_putsUSART	;wreg free
 18953                           
 18954                           ;main.c: 2557: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18955  0023DA  0100               	movlb	0	; () banked
 18956  0023DC  67E4               	tstfsz	_bHex& (0+255),b
 18957  0023DE  D004               	goto	l15032
 18958                           
 18959                           ; BSR set to: 0
 18960  0023E0  0E7F               	movlw	high STR_57
 18961  0023E2  6F9D               	movwf	(_printErrors$1482+1)& (0+255),b
 18962  0023E4  0EEE               	movlw	low STR_57
 18963  0023E6  D003               	goto	L20
 18964  0023E8                     l15032:
 18965                           
 18966                           ; BSR set to: 0
 18967  0023E8  0E7F               	movlw	high STR_56
 18968  0023EA  6F9D               	movwf	(_printErrors$1482+1)& (0+255),b
 18969  0023EC  0E65               	movlw	low STR_56
 18970  0023EE                     L20:
 18971  0023EE  6F9C               	movwf	_printErrors$1482& (0+255),b
 18972                           
 18973                           ; BSR set to: 0
 18974  0023F0  0E01               	movlw	high _wrkbuf
 18975  0023F2  0100               	movlb	0	; () banked
 18976  0023F4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18977  0023F6  0E76               	movlw	low _wrkbuf
 18978  0023F8  6F76               	movwf	?_sprintf& (0+255),b
 18979  0023FA  C09C  F078         	movff	_printErrors$1482,?_sprintf+2
 18980  0023FE  C09D  F079         	movff	_printErrors$1482+1,?_sprintf+3
 18981  002402  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 18982  002406  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18983  002408  EC8D  F00B         	call	_sprintf	;wreg free
 18984                           
 18985                           ; BSR set to: 0
 18986                           ;main.c: 2558: putsUSART(wrkbuf);
 18987  00240C  0E01               	movlw	high _wrkbuf
 18988  00240E  0100               	movlb	0	; () banked
 18989  002410  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18990  002412  0E76               	movlw	low _wrkbuf
 18991  002414  6F61               	movwf	?_putsUSART& (0+255),b
 18992  002416  EC84  F029         	call	_putsUSART	;wreg free
 18993                           
 18994                           ;main.c: 2559: putsUSART((char *) "\r\n");
 18995  00241A  0E74               	movlw	high (STR_197+50)
 18996  00241C  0100               	movlb	0	; () banked
 18997  00241E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18998  002420  0EC0               	movlw	low (STR_197+50)
 18999  002422  6F61               	movwf	?_putsUSART& (0+255),b
 19000  002424  EC84  F029         	call	_putsUSART	;wreg free
 19001                           
 19002                           ;main.c: 2561: if (COMSTATbits.TXWARN) {
 19003  002428  A474               	btfss	3956,2,c	;volatile
 19004  00242A  D007               	goto	l15044
 19005                           
 19006                           ;main.c: 2562: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 19007  00242C  0E72               	movlw	high STR_196
 19008  00242E  0100               	movlb	0	; () banked
 19009  002430  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19010  002432  0E98               	movlw	low STR_196
 19011  002434  6F61               	movwf	?_putsUSART& (0+255),b
 19012  002436  EC84  F029         	call	_putsUSART	;wreg free
 19013  00243A                     l15044:
 19014                           
 19015                           ;main.c: 2563: }
 19016                           ;main.c: 2565: if (COMSTATbits.TXBO) {
 19017  00243A  AA74               	btfss	3956,5,c	;volatile
 19018  00243C  D007               	goto	l15048
 19019                           
 19020                           ;main.c: 2566: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 19021  00243E  0E74               	movlw	high STR_197
 19022  002440  0100               	movlb	0	; () banked
 19023  002442  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19024  002444  0E8E               	movlw	low STR_197
 19025  002446  6F61               	movwf	?_putsUSART& (0+255),b
 19026  002448  EC84  F029         	call	_putsUSART	;wreg free
 19027  00244C                     l15048:
 19028                           
 19029                           ;main.c: 2567: }
 19030                           ;main.c: 2569: if (COMSTATbits.TXBP) {
 19031  00244C  A874               	btfss	3956,4,c	;volatile
 19032  00244E  D007               	goto	l1181
 19033                           
 19034                           ;main.c: 2570: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 19035  002450  0E73               	movlw	high STR_198
 19036  002452  0100               	movlb	0	; () banked
 19037  002454  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19038  002456  0E0C               	movlw	low STR_198
 19039  002458  6F61               	movwf	?_putsUSART& (0+255),b
 19040  00245A  EC84  F029         	call	_putsUSART	;wreg free
 19041  00245E                     l1181:
 19042                           
 19043                           ;main.c: 2571: }
 19044                           ;main.c: 2574: putsUSART((char *) "Receive Error Counter: ");
 19045  00245E  0E7C               	movlw	high STR_199
 19046  002460  0100               	movlb	0	; () banked
 19047  002462  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19048  002464  0E79               	movlw	low STR_199
 19049  002466  6F61               	movwf	?_putsUSART& (0+255),b
 19050  002468  EC84  F029         	call	_putsUSART	;wreg free
 19051                           
 19052                           ;main.c: 2575: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 19053  00246C  0100               	movlb	0	; () banked
 19054  00246E  67E4               	tstfsz	_bHex& (0+255),b
 19055  002470  D004               	goto	l15056
 19056                           
 19057                           ; BSR set to: 0
 19058  002472  0E7F               	movlw	high STR_57
 19059  002474  6F9F               	movwf	(_printErrors$1491+1)& (0+255),b
 19060  002476  0EEE               	movlw	low STR_57
 19061  002478  D003               	goto	L21
 19062  00247A                     l15056:
 19063                           
 19064                           ; BSR set to: 0
 19065  00247A  0E7F               	movlw	high STR_56
 19066  00247C  6F9F               	movwf	(_printErrors$1491+1)& (0+255),b
 19067  00247E  0E65               	movlw	low STR_56
 19068  002480                     L21:
 19069  002480  6F9E               	movwf	_printErrors$1491& (0+255),b
 19070                           
 19071                           ; BSR set to: 0
 19072  002482  0E01               	movlw	high _wrkbuf
 19073  002484  0100               	movlb	0	; () banked
 19074  002486  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19075  002488  0E76               	movlw	low _wrkbuf
 19076  00248A  6F76               	movwf	?_sprintf& (0+255),b
 19077  00248C  C09E  F078         	movff	_printErrors$1491,?_sprintf+2
 19078  002490  C09F  F079         	movff	_printErrors$1491+1,?_sprintf+3
 19079  002494  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 19080  002498  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19081  00249A  EC8D  F00B         	call	_sprintf	;wreg free
 19082                           
 19083                           ; BSR set to: 0
 19084                           ;main.c: 2576: putsUSART(wrkbuf);
 19085  00249E  0E01               	movlw	high _wrkbuf
 19086  0024A0  0100               	movlb	0	; () banked
 19087  0024A2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19088  0024A4  0E76               	movlw	low _wrkbuf
 19089  0024A6  6F61               	movwf	?_putsUSART& (0+255),b
 19090  0024A8  EC84  F029         	call	_putsUSART	;wreg free
 19091                           
 19092                           ;main.c: 2577: putsUSART((char *) "\r\n");
 19093  0024AC  0E74               	movlw	high (STR_197+50)
 19094  0024AE  0100               	movlb	0	; () banked
 19095  0024B0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19096  0024B2  0EC0               	movlw	low (STR_197+50)
 19097  0024B4  6F61               	movwf	?_putsUSART& (0+255),b
 19098  0024B6  EC84  F029         	call	_putsUSART	;wreg free
 19099                           
 19100                           ;main.c: 2579: if (COMSTATbits.RXWARN) {
 19101  0024BA  A274               	btfss	3956,1,c	;volatile
 19102  0024BC  D007               	goto	l15068
 19103                           
 19104                           ;main.c: 2580: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 19105  0024BE  0E73               	movlw	high STR_203
 19106  0024C0  0100               	movlb	0	; () banked
 19107  0024C2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19108  0024C4  0E7D               	movlw	low STR_203
 19109  0024C6  6F61               	movwf	?_putsUSART& (0+255),b
 19110  0024C8  EC84  F029         	call	_putsUSART	;wreg free
 19111  0024CC                     l15068:
 19112                           
 19113                           ;main.c: 2581: }
 19114                           ;main.c: 2583: if (COMSTATbits.RXBP) {
 19115  0024CC  A674               	btfss	3956,3,c	;volatile
 19116  0024CE  D007               	goto	l15072
 19117                           
 19118                           ;main.c: 2584: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 19119  0024D0  0E74               	movlw	high STR_204
 19120  0024D2  0100               	movlb	0	; () banked
 19121  0024D4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19122  0024D6  0E22               	movlw	low STR_204
 19123  0024D8  6F61               	movwf	?_putsUSART& (0+255),b
 19124  0024DA  EC84  F029         	call	_putsUSART	;wreg free
 19125  0024DE                     l15072:
 19126                           
 19127                           ;main.c: 2585: }
 19128                           ;main.c: 2587: if (COMSTATbits.EWARN) {
 19129  0024DE  A074               	btfss	3956,0,c	;volatile
 19130  0024E0  D007               	goto	l1189
 19131                           
 19132                           ;main.c: 2588: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 19133  0024E2  0E74               	movlw	high STR_205
 19134  0024E4  0100               	movlb	0	; () banked
 19135  0024E6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19136  0024E8  0EC3               	movlw	low STR_205
 19137  0024EA  6F61               	movwf	?_putsUSART& (0+255),b
 19138  0024EC  EC84  F029         	call	_putsUSART	;wreg free
 19139  0024F0                     l1189:
 19140  0024F0  0012               	return	
 19141  0024F2                     __end_of_printErrors:
 19142                           	opt stack 0
 19143                           tblptru	equ	0xFF8
 19144                           tblptrh	equ	0xFF7
 19145                           tblptrl	equ	0xFF6
 19146                           tablat	equ	0xFF5
 19147                           prodh	equ	0xFF4
 19148                           prodl	equ	0xFF3
 19149                           intcon	equ	0xFF2
 19150                           indf0	equ	0xFEF
 19151                           postinc0	equ	0xFEE
 19152                           fsr0h	equ	0xFEA
 19153                           fsr0l	equ	0xFE9
 19154                           wreg	equ	0xFE8
 19155                           indf1	equ	0xFE7
 19156                           postinc1	equ	0xFE6
 19157                           postdec1	equ	0xFE5
 19158                           fsr1h	equ	0xFE2
 19159                           fsr1l	equ	0xFE1
 19160                           indf2	equ	0xFDF
 19161                           postinc2	equ	0xFDE
 19162                           postdec2	equ	0xFDD
 19163                           plusw2	equ	0xFDB
 19164                           fsr2h	equ	0xFDA
 19165                           fsr2l	equ	0xFD9
 19166                           status	equ	0xFD8
 19167                           
 19168 ;; *************** function _printStatistics *****************
 19169 ;; Defined at:
 19170 ;;		line 2508 in file "main.c"
 19171 ;; Parameters:    Size  Location     Type
 19172 ;;		None
 19173 ;; Auto vars:     Size  Location     Type
 19174 ;;		None
 19175 ;; Return value:  Size  Location     Type
 19176 ;;		None               void
 19177 ;; Registers used:
 19178 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19179 ;; Tracked objects:
 19180 ;;		On entry : F/0
 19181 ;;		On exit  : 0/0
 19182 ;;		Unchanged: 0/0
 19183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19184 ;;      Params:         0       0       0       0       0       0       0
 19185 ;;      Locals:         0       8       0       0       0       0       0
 19186 ;;      Temps:          0       0       0       0       0       0       0
 19187 ;;      Totals:         0       8       0       0       0       0       0
 19188 ;;Total ram usage:        8 bytes
 19189 ;; Hardware stack levels used:    1
 19190 ;; Hardware stack levels required when called:    5
 19191 ;; This function calls:
 19192 ;;		_putsUSART
 19193 ;;		_sprintf
 19194 ;; This function is called by:
 19195 ;;		_doModeVerbose
 19196 ;; This function uses a non-reentrant model
 19197 ;;
 19198                           
 19199                           	psect	text41
 19200  002EE0                     __ptext41:
 19201                           	opt stack 0
 19202  002EE0                     _printStatistics:
 19203                           	opt stack 24
 19204                           
 19205                           ; BSR set to: 0
 19206                           ;main.c: 2509: putsUSART((char *) "Sent CAN frames: ");
 19207                           
 19208                           ;incstack = 0
 19209                           ;incstack = 0
 19210  002EE0  0E7E               	movlw	high STR_160
 19211  002EE2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19212  002EE4  0E0A               	movlw	low STR_160
 19213  002EE6  6F61               	movwf	?_putsUSART& (0+255),b
 19214  002EE8  EC84  F029         	call	_putsUSART	;wreg free
 19215                           
 19216                           ;main.c: 2510: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19217  002EEC  0100               	movlb	0	; () banked
 19218  002EEE  67E4               	tstfsz	_bHex& (0+255),b
 19219  002EF0  D004               	goto	l14920
 19220                           
 19221                           ; BSR set to: 0
 19222  002EF2  0E7F               	movlw	high STR_162
 19223  002EF4  6F95               	movwf	(_printStatistics$1433+1)& (0+255),b
 19224  002EF6  0EE1               	movlw	low STR_162
 19225  002EF8  D003               	goto	L22
 19226  002EFA                     l14920:
 19227                           
 19228                           ; BSR set to: 0
 19229  002EFA  0E7F               	movlw	high STR_161
 19230  002EFC  6F95               	movwf	(_printStatistics$1433+1)& (0+255),b
 19231  002EFE  0E73               	movlw	low STR_161
 19232  002F00                     L22:
 19233  002F00  6F94               	movwf	_printStatistics$1433& (0+255),b
 19234                           
 19235                           ; BSR set to: 0
 19236  002F02  0E01               	movlw	high _wrkbuf
 19237  002F04  0100               	movlb	0	; () banked
 19238  002F06  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19239  002F08  0E76               	movlw	low _wrkbuf
 19240  002F0A  6F76               	movwf	?_sprintf& (0+255),b
 19241  002F0C  C094  F078         	movff	_printStatistics$1433,?_sprintf+2
 19242  002F10  C095  F079         	movff	_printStatistics$1433+1,?_sprintf+3
 19243  002F14  C114  F07A         	movff	_cntTxFrames,?_sprintf+4
 19244  002F18  C115  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 19245  002F1C  C116  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 19246  002F20  C117  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 19247  002F24  EC8D  F00B         	call	_sprintf	;wreg free
 19248                           
 19249                           ; BSR set to: 0
 19250                           ;main.c: 2511: putsUSART(wrkbuf);
 19251  002F28  0E01               	movlw	high _wrkbuf
 19252  002F2A  0100               	movlb	0	; () banked
 19253  002F2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19254  002F2E  0E76               	movlw	low _wrkbuf
 19255  002F30  6F61               	movwf	?_putsUSART& (0+255),b
 19256  002F32  EC84  F029         	call	_putsUSART	;wreg free
 19257                           
 19258                           ;main.c: 2512: putsUSART((char *) "\r\n");
 19259  002F36  0E74               	movlw	high (STR_197+50)
 19260  002F38  0100               	movlb	0	; () banked
 19261  002F3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19262  002F3C  0EC0               	movlw	low (STR_197+50)
 19263  002F3E  6F61               	movwf	?_putsUSART& (0+255),b
 19264  002F40  EC84  F029         	call	_putsUSART	;wreg free
 19265                           
 19266                           ;main.c: 2514: putsUSART((char *) "Sent CAN bytes: ");
 19267  002F44  0E7E               	movlw	high STR_164
 19268  002F46  0100               	movlb	0	; () banked
 19269  002F48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19270  002F4A  0E3E               	movlw	low STR_164
 19271  002F4C  6F61               	movwf	?_putsUSART& (0+255),b
 19272  002F4E  EC84  F029         	call	_putsUSART	;wreg free
 19273                           
 19274                           ;main.c: 2515: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19275  002F52  0100               	movlb	0	; () banked
 19276  002F54  67E4               	tstfsz	_bHex& (0+255),b
 19277  002F56  D004               	goto	l14934
 19278                           
 19279                           ; BSR set to: 0
 19280  002F58  0E7F               	movlw	high STR_162
 19281  002F5A  6F97               	movwf	(_printStatistics$1439+1)& (0+255),b
 19282  002F5C  0EE1               	movlw	low STR_162
 19283  002F5E  D003               	goto	L23
 19284  002F60                     l14934:
 19285                           
 19286                           ; BSR set to: 0
 19287  002F60  0E7F               	movlw	high STR_161
 19288  002F62  6F97               	movwf	(_printStatistics$1439+1)& (0+255),b
 19289  002F64  0E73               	movlw	low STR_161
 19290  002F66                     L23:
 19291  002F66  6F96               	movwf	_printStatistics$1439& (0+255),b
 19292                           
 19293                           ; BSR set to: 0
 19294  002F68  0E01               	movlw	high _wrkbuf
 19295  002F6A  0100               	movlb	0	; () banked
 19296  002F6C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19297  002F6E  0E76               	movlw	low _wrkbuf
 19298  002F70  6F76               	movwf	?_sprintf& (0+255),b
 19299  002F72  C096  F078         	movff	_printStatistics$1439,?_sprintf+2
 19300  002F76  C097  F079         	movff	_printStatistics$1439+1,?_sprintf+3
 19301  002F7A  C110  F07A         	movff	_cntTxBytes,?_sprintf+4
 19302  002F7E  C111  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 19303  002F82  C112  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 19304  002F86  C113  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 19305  002F8A  EC8D  F00B         	call	_sprintf	;wreg free
 19306                           
 19307                           ; BSR set to: 0
 19308                           ;main.c: 2516: putsUSART(wrkbuf);
 19309  002F8E  0E01               	movlw	high _wrkbuf
 19310  002F90  0100               	movlb	0	; () banked
 19311  002F92  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19312  002F94  0E76               	movlw	low _wrkbuf
 19313  002F96  6F61               	movwf	?_putsUSART& (0+255),b
 19314  002F98  EC84  F029         	call	_putsUSART	;wreg free
 19315                           
 19316                           ;main.c: 2517: putsUSART((char *) "\r\n");
 19317  002F9C  0E74               	movlw	high (STR_197+50)
 19318  002F9E  0100               	movlb	0	; () banked
 19319  002FA0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19320  002FA2  0EC0               	movlw	low (STR_197+50)
 19321  002FA4  6F61               	movwf	?_putsUSART& (0+255),b
 19322  002FA6  EC84  F029         	call	_putsUSART	;wreg free
 19323                           
 19324                           ;main.c: 2519: putsUSART((char *) "Received CAN frames: ");
 19325  002FAA  0E7D               	movlw	high STR_168
 19326  002FAC  0100               	movlb	0	; () banked
 19327  002FAE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19328  002FB0  0E1C               	movlw	low STR_168
 19329  002FB2  6F61               	movwf	?_putsUSART& (0+255),b
 19330  002FB4  EC84  F029         	call	_putsUSART	;wreg free
 19331                           
 19332                           ;main.c: 2520: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19333  002FB8  0100               	movlb	0	; () banked
 19334  002FBA  67E4               	tstfsz	_bHex& (0+255),b
 19335  002FBC  D004               	goto	l14948
 19336                           
 19337                           ; BSR set to: 0
 19338  002FBE  0E7F               	movlw	high STR_162
 19339  002FC0  6F99               	movwf	(_printStatistics$1445+1)& (0+255),b
 19340  002FC2  0EE1               	movlw	low STR_162
 19341  002FC4  D003               	goto	L24
 19342  002FC6                     l14948:
 19343                           
 19344                           ; BSR set to: 0
 19345  002FC6  0E7F               	movlw	high STR_161
 19346  002FC8  6F99               	movwf	(_printStatistics$1445+1)& (0+255),b
 19347  002FCA  0E73               	movlw	low STR_161
 19348  002FCC                     L24:
 19349  002FCC  6F98               	movwf	_printStatistics$1445& (0+255),b
 19350                           
 19351                           ; BSR set to: 0
 19352  002FCE  0E01               	movlw	high _wrkbuf
 19353  002FD0  0100               	movlb	0	; () banked
 19354  002FD2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19355  002FD4  0E76               	movlw	low _wrkbuf
 19356  002FD6  6F76               	movwf	?_sprintf& (0+255),b
 19357  002FD8  C098  F078         	movff	_printStatistics$1445,?_sprintf+2
 19358  002FDC  C099  F079         	movff	_printStatistics$1445+1,?_sprintf+3
 19359  002FE0  C10C  F07A         	movff	_cntRxFrames,?_sprintf+4
 19360  002FE4  C10D  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 19361  002FE8  C10E  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 19362  002FEC  C10F  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 19363  002FF0  EC8D  F00B         	call	_sprintf	;wreg free
 19364                           
 19365                           ; BSR set to: 0
 19366                           ;main.c: 2521: putsUSART(wrkbuf);
 19367  002FF4  0E01               	movlw	high _wrkbuf
 19368  002FF6  0100               	movlb	0	; () banked
 19369  002FF8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19370  002FFA  0E76               	movlw	low _wrkbuf
 19371  002FFC  6F61               	movwf	?_putsUSART& (0+255),b
 19372  002FFE  EC84  F029         	call	_putsUSART	;wreg free
 19373                           
 19374                           ;main.c: 2522: putsUSART((char *) "\r\n");
 19375  003002  0E74               	movlw	high (STR_197+50)
 19376  003004  0100               	movlb	0	; () banked
 19377  003006  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19378  003008  0EC0               	movlw	low (STR_197+50)
 19379  00300A  6F61               	movwf	?_putsUSART& (0+255),b
 19380  00300C  EC84  F029         	call	_putsUSART	;wreg free
 19381                           
 19382                           ;main.c: 2524: putsUSART((char *) "Received CAN bytes: ");
 19383  003010  0E7D               	movlw	high STR_172
 19384  003012  0100               	movlb	0	; () banked
 19385  003014  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19386  003016  0E32               	movlw	low STR_172
 19387  003018  6F61               	movwf	?_putsUSART& (0+255),b
 19388  00301A  EC84  F029         	call	_putsUSART	;wreg free
 19389                           
 19390                           ;main.c: 2525: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19391  00301E  0100               	movlb	0	; () banked
 19392  003020  67E4               	tstfsz	_bHex& (0+255),b
 19393  003022  D004               	goto	l14962
 19394                           
 19395                           ; BSR set to: 0
 19396  003024  0E7F               	movlw	high STR_162
 19397  003026  6F9B               	movwf	(_printStatistics$1451+1)& (0+255),b
 19398  003028  0EE1               	movlw	low STR_162
 19399  00302A  D003               	goto	L25
 19400  00302C                     l14962:
 19401                           
 19402                           ; BSR set to: 0
 19403  00302C  0E7F               	movlw	high STR_161
 19404  00302E  6F9B               	movwf	(_printStatistics$1451+1)& (0+255),b
 19405  003030  0E73               	movlw	low STR_161
 19406  003032                     L25:
 19407  003032  6F9A               	movwf	_printStatistics$1451& (0+255),b
 19408                           
 19409                           ; BSR set to: 0
 19410  003034  0E01               	movlw	high _wrkbuf
 19411  003036  0100               	movlb	0	; () banked
 19412  003038  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19413  00303A  0E76               	movlw	low _wrkbuf
 19414  00303C  6F76               	movwf	?_sprintf& (0+255),b
 19415  00303E  C09A  F078         	movff	_printStatistics$1451,?_sprintf+2
 19416  003042  C09B  F079         	movff	_printStatistics$1451+1,?_sprintf+3
 19417  003046  C108  F07A         	movff	_cntRxBytes,?_sprintf+4
 19418  00304A  C109  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 19419  00304E  C10A  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 19420  003052  C10B  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 19421  003056  EC8D  F00B         	call	_sprintf	;wreg free
 19422                           
 19423                           ; BSR set to: 0
 19424                           ;main.c: 2526: putsUSART(wrkbuf);
 19425  00305A  0E01               	movlw	high _wrkbuf
 19426  00305C  0100               	movlb	0	; () banked
 19427  00305E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19428  003060  0E76               	movlw	low _wrkbuf
 19429  003062  6F61               	movwf	?_putsUSART& (0+255),b
 19430  003064  EC84  F029         	call	_putsUSART	;wreg free
 19431                           
 19432                           ;main.c: 2527: putsUSART((char *) "\r\n");
 19433  003068  0E74               	movlw	high (STR_197+50)
 19434  00306A  0100               	movlb	0	; () banked
 19435  00306C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19436  00306E  0EC0               	movlw	low (STR_197+50)
 19437  003070  6F61               	movwf	?_putsUSART& (0+255),b
 19438  003072  EF84  F029         	goto	_putsUSART	;wreg free
 19439  003076                     __end_of_printStatistics:
 19440                           	opt stack 0
 19441                           tblptru	equ	0xFF8
 19442                           tblptrh	equ	0xFF7
 19443                           tblptrl	equ	0xFF6
 19444                           tablat	equ	0xFF5
 19445                           prodh	equ	0xFF4
 19446                           prodl	equ	0xFF3
 19447                           intcon	equ	0xFF2
 19448                           indf0	equ	0xFEF
 19449                           postinc0	equ	0xFEE
 19450                           fsr0h	equ	0xFEA
 19451                           fsr0l	equ	0xFE9
 19452                           wreg	equ	0xFE8
 19453                           indf1	equ	0xFE7
 19454                           postinc1	equ	0xFE6
 19455                           postdec1	equ	0xFE5
 19456                           fsr1h	equ	0xFE2
 19457                           fsr1l	equ	0xFE1
 19458                           indf2	equ	0xFDF
 19459                           postinc2	equ	0xFDE
 19460                           postdec2	equ	0xFDD
 19461                           plusw2	equ	0xFDB
 19462                           fsr2h	equ	0xFDA
 19463                           fsr2l	equ	0xFD9
 19464                           status	equ	0xFD8
 19465                           
 19466 ;; *************** function _atoi *****************
 19467 ;; Defined at:
 19468 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19469 ;; Parameters:    Size  Location     Type
 19470 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 19471 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19472 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19473 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19474 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19475 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19476 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19477 ;; Auto vars:     Size  Location     Type
 19478 ;;  a               2   11[BANK0 ] int 
 19479 ;;  sign            1   10[BANK0 ] unsigned char 
 19480 ;; Return value:  Size  Location     Type
 19481 ;;                  2    6[BANK0 ] int 
 19482 ;; Registers used:
 19483 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19484 ;; Tracked objects:
 19485 ;;		On entry : D/2
 19486 ;;		On exit  : F/0
 19487 ;;		Unchanged: 0/0
 19488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19489 ;;      Params:         0       2       0       0       0       0       0
 19490 ;;      Locals:         0       3       0       0       0       0       0
 19491 ;;      Temps:          0       2       0       0       0       0       0
 19492 ;;      Totals:         0       7       0       0       0       0       0
 19493 ;;Total ram usage:        7 bytes
 19494 ;; Hardware stack levels used:    1
 19495 ;; Hardware stack levels required when called:    4
 19496 ;; This function calls:
 19497 ;;		_isdigit
 19498 ;;		___wmul
 19499 ;; This function is called by:
 19500 ;;		_doModeVerbose
 19501 ;; This function uses a non-reentrant model
 19502 ;;
 19503                           
 19504                           	psect	text42
 19505  003B3C                     __ptext42:
 19506                           	opt stack 0
 19507  003B3C                     _atoi:
 19508                           	opt stack 25
 19509                           
 19510                           ;incstack = 0
 19511                           ;incstack = 0
 19512  003B3C  D003               	goto	l14872
 19513  003B3E                     l14870:
 19514  003B3E  0100               	movlb	0	; () banked
 19515  003B40  4B66               	infsnz	atoi@s& (0+255),f,b
 19516  003B42  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19517  003B44                     l14872:
 19518  003B44  0100               	movlb	0	; () banked
 19519  003B46  D876               	call	PL16	;call to abstracted procedure
 19520  003B48  64EA               	cpfsgt	fsr0h,c
 19521  003B4A  D003               	bra	u20017
 19522  003B4C  6EEA               	movwf	fsr0h,c
 19523  003B4E  50EF               	movf	indf0,w,c
 19524  003B50  D003               	bra	u20010
 19525  003B52                     u20017:
 19526  003B52  6EF7               	movwf	tblptrh,c
 19527  003B54  0008               	tblrd		*
 19528  003B56  50F5               	movf	tablat,w,c
 19529  003B58                     u20010:
 19530  003B58  0A20               	xorlw	32
 19531  003B5A  E0F1               	bz	l14870
 19532  003B5C  0100               	movlb	0	; () banked
 19533  003B5E  D86A               	call	PL16	;call to abstracted procedure
 19534  003B60  64EA               	cpfsgt	fsr0h,c
 19535  003B62  D003               	bra	u20037
 19536  003B64  6EEA               	movwf	fsr0h,c
 19537  003B66  50EF               	movf	indf0,w,c
 19538  003B68  D003               	bra	u20030
 19539  003B6A                     u20037:
 19540  003B6A  6EF7               	movwf	tblptrh,c
 19541  003B6C  0008               	tblrd		*
 19542  003B6E  50F5               	movf	tablat,w,c
 19543  003B70                     u20030:
 19544  003B70  0A09               	xorlw	9
 19545  003B72  E0E5               	bz	l14870
 19546  003B74  0100               	movlb	0	; () banked
 19547  003B76  6B6B               	clrf	atoi@a& (0+255),b
 19548  003B78  6B6C               	clrf	(atoi@a+1)& (0+255),b
 19549  003B7A  6B6A               	clrf	atoi@sign& (0+255),b
 19550                           
 19551                           ; BSR set to: 0
 19552  003B7C  D85B               	call	PL16	;call to abstracted procedure
 19553  003B7E  64EA               	cpfsgt	fsr0h,c
 19554  003B80  D003               	bra	u20057
 19555  003B82  6EEA               	movwf	fsr0h,c
 19556  003B84  50EF               	movf	indf0,w,c
 19557  003B86  D003               	bra	u20050
 19558  003B88                     u20057:
 19559  003B88  6EF7               	movwf	tblptrh,c
 19560  003B8A  0008               	tblrd		*
 19561  003B8C  50F5               	movf	tablat,w,c
 19562  003B8E                     u20050:
 19563  003B8E  0A2D               	xorlw	45
 19564  003B90  E103               	bnz	l14880
 19565  003B92  0100               	movlb	0	; () banked
 19566  003B94  2B6A               	incf	atoi@sign& (0+255),f,b
 19567  003B96  D00D               	goto	L26
 19568  003B98                     l14880:
 19569  003B98  0100               	movlb	0	; () banked
 19570  003B9A  D84C               	call	PL16	;call to abstracted procedure
 19571  003B9C  64EA               	cpfsgt	fsr0h,c
 19572  003B9E  D003               	bra	u20077
 19573  003BA0  6EEA               	movwf	fsr0h,c
 19574  003BA2  50EF               	movf	indf0,w,c
 19575  003BA4  D003               	bra	u20070
 19576  003BA6                     u20077:
 19577  003BA6  6EF7               	movwf	tblptrh,c
 19578  003BA8  0008               	tblrd		*
 19579  003BAA  50F5               	movf	tablat,w,c
 19580  003BAC                     u20070:
 19581  003BAC  0A2B               	xorlw	43
 19582  003BAE  E121               	bnz	l14888
 19583  003BB0                     l14882:
 19584  003BB0  0100               	movlb	0	; () banked
 19585  003BB2                     L26:
 19586  003BB2  4B66               	infsnz	atoi@s& (0+255),f,b
 19587  003BB4  2B67               	incf	(atoi@s+1)& (0+255),f,b
 19588  003BB6  D01D               	goto	l14888
 19589  003BB8                     l14884:
 19590                           
 19591                           ; BSR set to: 0
 19592  003BB8  C06B  F060         	movff	atoi@a,?___wmul
 19593  003BBC  C06C  F061         	movff	atoi@a+1,?___wmul+1
 19594  003BC0  6B63               	clrf	(?___wmul+3)& (0+255),b
 19595  003BC2  0E0A               	movlw	10
 19596  003BC4  6F62               	movwf	(?___wmul+2)& (0+255),b
 19597  003BC6  ECB7  F02B         	call	___wmul	;wreg free
 19598  003BCA  D834               	call	PL16	;call to abstracted procedure
 19599  003BCC  64EA               	cpfsgt	fsr0h,c
 19600  003BCE  D003               	bra	u20097
 19601  003BD0  6EEA               	movwf	fsr0h,c
 19602  003BD2  50EF               	movf	indf0,w,c
 19603  003BD4  D003               	bra	u20090
 19604  003BD6                     u20097:
 19605  003BD6  6EF7               	movwf	tblptrh,c
 19606  003BD8  0008               	tblrd		*
 19607  003BDA  50F5               	movf	tablat,w,c
 19608  003BDC                     u20090:
 19609  003BDC  0100               	movlb	0	; () banked
 19610  003BDE  2760               	addwf	?___wmul& (0+255),f,b
 19611  003BE0  0E00               	movlw	0
 19612  003BE2  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 19613  003BE4  0ED0               	movlw	208
 19614  003BE6  2560               	addwf	?___wmul& (0+255),w,b
 19615  003BE8  6F6B               	movwf	atoi@a& (0+255),b
 19616  003BEA  0EFF               	movlw	255
 19617  003BEC  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 19618  003BEE  6F6C               	movwf	(atoi@a+1)& (0+255),b
 19619  003BF0  D7DF               	goto	l14882
 19620  003BF2                     l14888:
 19621  003BF2  0100               	movlb	0	; () banked
 19622  003BF4  D81F               	call	PL16	;call to abstracted procedure
 19623  003BF6  64EA               	cpfsgt	fsr0h,c
 19624  003BF8  D003               	bra	u20107
 19625  003BFA  6EEA               	movwf	fsr0h,c
 19626  003BFC  50EF               	movf	indf0,w,c
 19627  003BFE  D003               	bra	u20100
 19628  003C00                     u20107:
 19629  003C00  6EF7               	movwf	tblptrh,c
 19630  003C02  0008               	tblrd		*
 19631  003C04  50F5               	movf	tablat,w,c
 19632  003C06                     u20100:
 19633  003C06  EC15  F02C         	call	_isdigit
 19634  003C0A  E2D6               	bc	l14884
 19635                           
 19636                           ; BSR set to: 0
 19637  003C0C  516A               	movf	atoi@sign& (0+255),w,b
 19638  003C0E  E00D               	bz	l2048
 19639                           
 19640                           ; BSR set to: 0
 19641  003C10  C06B  F068         	movff	atoi@a,??_atoi
 19642  003C14  C06C  F069         	movff	atoi@a+1,??_atoi+1
 19643  003C18  1F68               	comf	??_atoi& (0+255),f,b
 19644  003C1A  1F69               	comf	(??_atoi+1)& (0+255),f,b
 19645  003C1C  4B68               	infsnz	??_atoi& (0+255),f,b
 19646  003C1E  2B69               	incf	(??_atoi+1)& (0+255),f,b
 19647  003C20  C068  F066         	movff	??_atoi,?_atoi
 19648  003C24  C069  F067         	movff	??_atoi+1,?_atoi+1
 19649  003C28  D004               	goto	l2049
 19650  003C2A                     l2048:
 19651                           
 19652                           ; BSR set to: 0
 19653  003C2A  C06B  F066         	movff	atoi@a,?_atoi
 19654  003C2E  C06C  F067         	movff	atoi@a+1,?_atoi+1
 19655  003C32                     l2049:
 19656                           
 19657                           ; BSR set to: 0
 19658  003C32  0012               	return	
 19659  003C34                     __end_of_atoi:
 19660                           	opt stack 0
 19661  003C34                     PL16:
 19662                           	opt stack 25
 19663  003C34  5166               	movf	atoi@s& (0+255),w,b
 19664  003C36  6EF6               	movwf	tblptrl,c
 19665  003C38  6EE9               	movwf	fsr0l,c
 19666  003C3A  0E05               	movlw	(high __ramtop+-1)
 19667  003C3C  6EEA               	movwf	fsr0h,c
 19668  003C3E  5167               	movf	(atoi@s+1)& (0+255),w,b
 19669  003C40  0012               	return	
 19670  003C42                     __end_ofPL16:
 19671                           	opt stack 0
 19672                           tblptru	equ	0xFF8
 19673                           tblptrh	equ	0xFF7
 19674                           tblptrl	equ	0xFF6
 19675                           tablat	equ	0xFF5
 19676                           prodh	equ	0xFF4
 19677                           prodl	equ	0xFF3
 19678                           intcon	equ	0xFF2
 19679                           indf0	equ	0xFEF
 19680                           postinc0	equ	0xFEE
 19681                           fsr0h	equ	0xFEA
 19682                           fsr0l	equ	0xFE9
 19683                           wreg	equ	0xFE8
 19684                           indf1	equ	0xFE7
 19685                           postinc1	equ	0xFE6
 19686                           postdec1	equ	0xFE5
 19687                           fsr1h	equ	0xFE2
 19688                           fsr1l	equ	0xFE1
 19689                           indf2	equ	0xFDF
 19690                           postinc2	equ	0xFDE
 19691                           postdec2	equ	0xFDD
 19692                           plusw2	equ	0xFDB
 19693                           fsr2h	equ	0xFDA
 19694                           fsr2l	equ	0xFD9
 19695                           status	equ	0xFD8
 19696                           
 19697 ;; *************** function _strtok *****************
 19698 ;; Defined at:
 19699 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19700 ;; Parameters:    Size  Location     Type
 19701 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 19702 ;;		 -> NULL(0), cmdbuf(80), 
 19703 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 19704 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19705 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19706 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19707 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19708 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19709 ;;		 -> STR_31(2), STR_30(2), 
 19710 ;; Auto vars:     Size  Location     Type
 19711 ;;		None
 19712 ;; Return value:  Size  Location     Type
 19713 ;;                  2   12[BANK0 ] PTR unsigned char 
 19714 ;; Registers used:
 19715 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19716 ;; Tracked objects:
 19717 ;;		On entry : F/0
 19718 ;;		On exit  : F/0
 19719 ;;		Unchanged: 0/0
 19720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19721 ;;      Params:         0       4       0       0       0       0       0
 19722 ;;      Locals:         0       0       0       0       0       0       0
 19723 ;;      Temps:          0       0       0       0       0       0       0
 19724 ;;      Totals:         0       4       0       0       0       0       0
 19725 ;;Total ram usage:        4 bytes
 19726 ;; Hardware stack levels used:    1
 19727 ;; Hardware stack levels required when called:    5
 19728 ;; This function calls:
 19729 ;;		_strspn
 19730 ;;		_strcspn
 19731 ;; This function is called by:
 19732 ;;		_doModeVerbose
 19733 ;; This function uses a non-reentrant model
 19734 ;;
 19735                           
 19736                           	psect	text43
 19737  004BF6                     __ptext43:
 19738                           	opt stack 0
 19739  004BF6                     _strtok:
 19740                           	opt stack 24
 19741                           
 19742                           ; BSR set to: 0
 19743                           
 19744                           ; BSR set to: 0
 19745                           ;incstack = 0
 19746                           ;incstack = 0
 19747  004BF6  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19748  004BF8  116C               	iorwf	strtok@s1& (0+255),w,b
 19749  004BFA  E104               	bnz	l14850
 19750                           
 19751                           ; BSR set to: 0
 19752  004BFC  C028  F06C         	movff	strtok@sp,strtok@s1
 19753  004C00  C029  F06D         	movff	strtok@sp+1,strtok@s1+1
 19754  004C04                     l14850:
 19755                           
 19756                           ; BSR set to: 0
 19757  004C04  516D               	movf	(strtok@s1+1)& (0+255),w,b
 19758  004C06  116C               	iorwf	strtok@s1& (0+255),w,b
 19759  004C08  E016               	bz	L27
 19760                           
 19761                           ; BSR set to: 0
 19762                           
 19763                           ; BSR set to: 0
 19764  004C0A  C06C  F066         	movff	strtok@s1,?_strspn
 19765  004C0E  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 19766  004C12  C06E  F068         	movff	strtok@s2,?_strspn+2
 19767  004C16  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 19768  004C1A  EC68  F02A         	call	_strspn	;wreg free
 19769  004C1E  5166               	movf	?_strspn& (0+255),w,b
 19770  004C20  276C               	addwf	strtok@s1& (0+255),f,b
 19771  004C22  5167               	movf	(?_strspn+1)& (0+255),w,b
 19772  004C24  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 19773                           
 19774                           ; BSR set to: 0
 19775  004C26  C06C  FFD9         	movff	strtok@s1,fsr2l
 19776  004C2A  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 19777  004C2E  50DF               	movf	indf2,w,c
 19778  004C30  E105               	bnz	l14860
 19779                           
 19780                           ; BSR set to: 0
 19781  004C32  6A28               	clrf	strtok@sp,c
 19782  004C34  6A29               	clrf	strtok@sp+1,c
 19783  004C36                     L27:
 19784  004C36  6B6C               	clrf	?_strtok& (0+255),b
 19785  004C38  6B6D               	clrf	(?_strtok+1)& (0+255),b
 19786  004C3A  D025               	goto	l2541
 19787  004C3C                     l14860:
 19788                           
 19789                           ; BSR set to: 0
 19790  004C3C  C06C  F066         	movff	strtok@s1,?_strcspn
 19791  004C40  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 19792  004C44  C06E  F068         	movff	strtok@s2,?_strcspn+2
 19793  004C48  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 19794  004C4C  EC46  F02A         	call	_strcspn	;wreg free
 19795  004C50  5166               	movf	?_strcspn& (0+255),w,b
 19796  004C52  256C               	addwf	strtok@s1& (0+255),w,b
 19797  004C54  6E28               	movwf	strtok@sp,c
 19798  004C56  5167               	movf	(?_strcspn+1)& (0+255),w,b
 19799  004C58  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 19800  004C5A  6E29               	movwf	strtok@sp+1,c
 19801                           
 19802                           ; BSR set to: 0
 19803  004C5C  C028  FFD9         	movff	strtok@sp,fsr2l
 19804  004C60  C029  FFDA         	movff	strtok@sp+1,fsr2h
 19805  004C64  50DF               	movf	indf2,w,c
 19806  004C66  E009               	bz	l2543
 19807                           
 19808                           ; BSR set to: 0
 19809  004C68  C028  FFD9         	movff	strtok@sp,fsr2l
 19810  004C6C  C029  FFDA         	movff	strtok@sp+1,fsr2h
 19811  004C70  0E00               	movlw	0
 19812  004C72  6EDF               	movwf	indf2,c
 19813                           
 19814                           ; BSR set to: 0
 19815  004C74  4A28               	infsnz	strtok@sp,f,c
 19816  004C76  2A29               	incf	strtok@sp+1,f,c
 19817  004C78  D002               	goto	l2544
 19818  004C7A                     l2543:
 19819                           
 19820                           ; BSR set to: 0
 19821  004C7A  6A28               	clrf	strtok@sp,c
 19822  004C7C  6A29               	clrf	strtok@sp+1,c
 19823  004C7E                     l2544:
 19824                           
 19825                           ; BSR set to: 0
 19826  004C7E  C06C  F06C         	movff	strtok@s1,?_strtok
 19827  004C82  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 19828  004C86                     l2541:
 19829                           
 19830                           ; BSR set to: 0
 19831  004C86  0012               	return	
 19832  004C88                     __end_of_strtok:
 19833                           	opt stack 0
 19834                           tblptru	equ	0xFF8
 19835                           tblptrh	equ	0xFF7
 19836                           tblptrl	equ	0xFF6
 19837                           tablat	equ	0xFF5
 19838                           prodh	equ	0xFF4
 19839                           prodl	equ	0xFF3
 19840                           intcon	equ	0xFF2
 19841                           indf0	equ	0xFEF
 19842                           postinc0	equ	0xFEE
 19843                           fsr0h	equ	0xFEA
 19844                           fsr0l	equ	0xFE9
 19845                           wreg	equ	0xFE8
 19846                           indf1	equ	0xFE7
 19847                           postinc1	equ	0xFE6
 19848                           postdec1	equ	0xFE5
 19849                           fsr1h	equ	0xFE2
 19850                           fsr1l	equ	0xFE1
 19851                           indf2	equ	0xFDF
 19852                           postinc2	equ	0xFDE
 19853                           postdec2	equ	0xFDD
 19854                           plusw2	equ	0xFDB
 19855                           fsr2h	equ	0xFDA
 19856                           fsr2l	equ	0xFD9
 19857                           status	equ	0xFD8
 19858                           
 19859 ;; *************** function _strcspn *****************
 19860 ;; Defined at:
 19861 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19862 ;; Parameters:    Size  Location     Type
 19863 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19864 ;;		 -> NULL(0), cmdbuf(80), 
 19865 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19866 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19867 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19868 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19869 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19870 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19871 ;;		 -> STR_31(2), STR_30(2), 
 19872 ;; Auto vars:     Size  Location     Type
 19873 ;;  i               2   10[BANK0 ] unsigned int 
 19874 ;; Return value:  Size  Location     Type
 19875 ;;                  2    6[BANK0 ] unsigned int 
 19876 ;; Registers used:
 19877 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19878 ;; Tracked objects:
 19879 ;;		On entry : F/0
 19880 ;;		On exit  : F/0
 19881 ;;		Unchanged: 0/0
 19882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19883 ;;      Params:         0       4       0       0       0       0       0
 19884 ;;      Locals:         0       2       0       0       0       0       0
 19885 ;;      Temps:          0       0       0       0       0       0       0
 19886 ;;      Totals:         0       6       0       0       0       0       0
 19887 ;;Total ram usage:        6 bytes
 19888 ;; Hardware stack levels used:    1
 19889 ;; Hardware stack levels required when called:    4
 19890 ;; This function calls:
 19891 ;;		_strchr
 19892 ;; This function is called by:
 19893 ;;		_strtok
 19894 ;; This function uses a non-reentrant model
 19895 ;;
 19896                           
 19897                           	psect	text44
 19898  00548C                     __ptext44:
 19899                           	opt stack 0
 19900  00548C                     _strcspn:
 19901                           	opt stack 24
 19902                           
 19903                           ; BSR set to: 0
 19904                           
 19905                           ; BSR set to: 0
 19906                           ;incstack = 0
 19907                           ;incstack = 0
 19908  00548C  6B6A               	clrf	strcspn@i& (0+255),b
 19909  00548E  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 19910  005490  D004               	goto	l16452
 19911  005492                     l16450:
 19912                           
 19913                           ; BSR set to: 0
 19914  005492  4B66               	infsnz	strcspn@s1& (0+255),f,b
 19915  005494  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 19916  005496  4B6A               	infsnz	strcspn@i& (0+255),f,b
 19917  005498  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 19918  00549A                     l16452:
 19919                           
 19920                           ; BSR set to: 0
 19921  00549A  C066  FFD9         	movff	strcspn@s1,fsr2l
 19922  00549E  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19923  0054A2  50DF               	movf	indf2,w,c
 19924  0054A4  E010               	bz	l2568
 19925                           
 19926                           ; BSR set to: 0
 19927  0054A6  C068  F060         	movff	strcspn@s2,?_strchr
 19928  0054AA  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 19929  0054AE  C066  FFD9         	movff	strcspn@s1,fsr2l
 19930  0054B2  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 19931  0054B6  50DF               	movf	indf2,w,c
 19932  0054B8  6F62               	movwf	(?_strchr+2)& (0+255),b
 19933  0054BA  6B63               	clrf	(?_strchr+3)& (0+255),b
 19934  0054BC  EC98  F028         	call	_strchr	;wreg free
 19935  0054C0  5161               	movf	(?_strchr+1)& (0+255),w,b
 19936  0054C2  1160               	iorwf	?_strchr& (0+255),w,b
 19937  0054C4  E0E6               	bz	l16450
 19938  0054C6                     l2568:
 19939                           
 19940                           ; BSR set to: 0
 19941  0054C6  C06A  F066         	movff	strcspn@i,?_strcspn
 19942  0054CA  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 19943                           
 19944                           ; BSR set to: 0
 19945  0054CE  0012               	return	
 19946  0054D0                     __end_of_strcspn:
 19947                           	opt stack 0
 19948                           tblptru	equ	0xFF8
 19949                           tblptrh	equ	0xFF7
 19950                           tblptrl	equ	0xFF6
 19951                           tablat	equ	0xFF5
 19952                           prodh	equ	0xFF4
 19953                           prodl	equ	0xFF3
 19954                           intcon	equ	0xFF2
 19955                           indf0	equ	0xFEF
 19956                           postinc0	equ	0xFEE
 19957                           fsr0h	equ	0xFEA
 19958                           fsr0l	equ	0xFE9
 19959                           wreg	equ	0xFE8
 19960                           indf1	equ	0xFE7
 19961                           postinc1	equ	0xFE6
 19962                           postdec1	equ	0xFE5
 19963                           fsr1h	equ	0xFE2
 19964                           fsr1l	equ	0xFE1
 19965                           indf2	equ	0xFDF
 19966                           postinc2	equ	0xFDE
 19967                           postdec2	equ	0xFDD
 19968                           plusw2	equ	0xFDB
 19969                           fsr2h	equ	0xFDA
 19970                           fsr2l	equ	0xFD9
 19971                           status	equ	0xFD8
 19972                           
 19973 ;; *************** function _strspn *****************
 19974 ;; Defined at:
 19975 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19976 ;; Parameters:    Size  Location     Type
 19977 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19978 ;;		 -> NULL(0), cmdbuf(80), 
 19979 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19980 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19981 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19982 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19983 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19984 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19985 ;;		 -> STR_31(2), STR_30(2), 
 19986 ;; Auto vars:     Size  Location     Type
 19987 ;;  i               2   10[BANK0 ] unsigned int 
 19988 ;; Return value:  Size  Location     Type
 19989 ;;                  2    6[BANK0 ] unsigned int 
 19990 ;; Registers used:
 19991 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19992 ;; Tracked objects:
 19993 ;;		On entry : F/0
 19994 ;;		On exit  : F/0
 19995 ;;		Unchanged: 0/0
 19996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19997 ;;      Params:         0       4       0       0       0       0       0
 19998 ;;      Locals:         0       2       0       0       0       0       0
 19999 ;;      Temps:          0       0       0       0       0       0       0
 20000 ;;      Totals:         0       6       0       0       0       0       0
 20001 ;;Total ram usage:        6 bytes
 20002 ;; Hardware stack levels used:    1
 20003 ;; Hardware stack levels required when called:    4
 20004 ;; This function calls:
 20005 ;;		_strchr
 20006 ;; This function is called by:
 20007 ;;		_strtok
 20008 ;; This function uses a non-reentrant model
 20009 ;;
 20010                           
 20011                           	psect	text45
 20012  0054D0                     __ptext45:
 20013                           	opt stack 0
 20014  0054D0                     _strspn:
 20015                           	opt stack 24
 20016                           
 20017                           ; BSR set to: 0
 20018                           
 20019                           ; BSR set to: 0
 20020                           ;incstack = 0
 20021                           ;incstack = 0
 20022  0054D0  6B6A               	clrf	strspn@i& (0+255),b
 20023  0054D2  6B6B               	clrf	(strspn@i+1)& (0+255),b
 20024  0054D4  D004               	goto	l16444
 20025  0054D6                     l16442:
 20026                           
 20027                           ; BSR set to: 0
 20028  0054D6  4B66               	infsnz	strspn@s1& (0+255),f,b
 20029  0054D8  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 20030  0054DA  4B6A               	infsnz	strspn@i& (0+255),f,b
 20031  0054DC  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 20032  0054DE                     l16444:
 20033                           
 20034                           ; BSR set to: 0
 20035  0054DE  C066  FFD9         	movff	strspn@s1,fsr2l
 20036  0054E2  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20037  0054E6  50DF               	movf	indf2,w,c
 20038  0054E8  E010               	bz	l2587
 20039                           
 20040                           ; BSR set to: 0
 20041  0054EA  C068  F060         	movff	strspn@s2,?_strchr
 20042  0054EE  C069  F061         	movff	strspn@s2+1,?_strchr+1
 20043  0054F2  C066  FFD9         	movff	strspn@s1,fsr2l
 20044  0054F6  C067  FFDA         	movff	strspn@s1+1,fsr2h
 20045  0054FA  50DF               	movf	indf2,w,c
 20046  0054FC  6F62               	movwf	(?_strchr+2)& (0+255),b
 20047  0054FE  6B63               	clrf	(?_strchr+3)& (0+255),b
 20048  005500  EC98  F028         	call	_strchr	;wreg free
 20049  005504  5161               	movf	(?_strchr+1)& (0+255),w,b
 20050  005506  1160               	iorwf	?_strchr& (0+255),w,b
 20051  005508  E1E6               	bnz	l16442
 20052  00550A                     l2587:
 20053                           
 20054                           ; BSR set to: 0
 20055  00550A  C06A  F066         	movff	strspn@i,?_strspn
 20056  00550E  C06B  F067         	movff	strspn@i+1,?_strspn+1
 20057                           
 20058                           ; BSR set to: 0
 20059  005512  0012               	return	
 20060  005514                     __end_of_strspn:
 20061                           	opt stack 0
 20062                           tblptru	equ	0xFF8
 20063                           tblptrh	equ	0xFF7
 20064                           tblptrl	equ	0xFF6
 20065                           tablat	equ	0xFF5
 20066                           prodh	equ	0xFF4
 20067                           prodl	equ	0xFF3
 20068                           intcon	equ	0xFF2
 20069                           indf0	equ	0xFEF
 20070                           postinc0	equ	0xFEE
 20071                           fsr0h	equ	0xFEA
 20072                           fsr0l	equ	0xFE9
 20073                           wreg	equ	0xFE8
 20074                           indf1	equ	0xFE7
 20075                           postinc1	equ	0xFE6
 20076                           postdec1	equ	0xFE5
 20077                           fsr1h	equ	0xFE2
 20078                           fsr1l	equ	0xFE1
 20079                           indf2	equ	0xFDF
 20080                           postinc2	equ	0xFDE
 20081                           postdec2	equ	0xFDD
 20082                           plusw2	equ	0xFDB
 20083                           fsr2h	equ	0xFDA
 20084                           fsr2l	equ	0xFD9
 20085                           status	equ	0xFD8
 20086                           
 20087 ;; *************** function _strchr *****************
 20088 ;; Defined at:
 20089 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 20090 ;; Parameters:    Size  Location     Type
 20091 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 20092 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 20093 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 20094 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 20095 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 20096 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 20097 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 20098 ;;  chr             2    2[BANK0 ] int 
 20099 ;; Auto vars:     Size  Location     Type
 20100 ;;		None
 20101 ;; Return value:  Size  Location     Type
 20102 ;;                  2    0[BANK0 ] PTR unsigned char 
 20103 ;; Registers used:
 20104 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20105 ;; Tracked objects:
 20106 ;;		On entry : F/0
 20107 ;;		On exit  : F/0
 20108 ;;		Unchanged: 0/0
 20109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20110 ;;      Params:         0       4       0       0       0       0       0
 20111 ;;      Locals:         0       0       0       0       0       0       0
 20112 ;;      Temps:          0       2       0       0       0       0       0
 20113 ;;      Totals:         0       6       0       0       0       0       0
 20114 ;;Total ram usage:        6 bytes
 20115 ;; Hardware stack levels used:    1
 20116 ;; Hardware stack levels required when called:    3
 20117 ;; This function calls:
 20118 ;;		Nothing
 20119 ;; This function is called by:
 20120 ;;		_doModeVerbose
 20121 ;;		_strcspn
 20122 ;;		_strspn
 20123 ;; This function uses a non-reentrant model
 20124 ;;
 20125                           
 20126                           	psect	text46
 20127  005130                     __ptext46:
 20128                           	opt stack 0
 20129  005130                     _strchr:
 20130                           	opt stack 26
 20131  005130                     l2489:
 20132                           
 20133                           ; BSR set to: 0
 20134  005130  0100               	movlb	0	; () banked
 20135  005132  5160               	movf	strchr@ptr& (0+255),w,b
 20136  005134  6EF6               	movwf	tblptrl,c
 20137  005136  6EE9               	movwf	fsr0l,c
 20138  005138  0E05               	movlw	(high __ramtop+-1)
 20139  00513A  6EEA               	movwf	fsr0h,c
 20140  00513C  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20141  00513E  64EA               	cpfsgt	fsr0h,c
 20142  005140  D003               	bra	u14877
 20143  005142  6EEA               	movwf	fsr0h,c
 20144  005144  50EF               	movf	indf0,w,c
 20145  005146  D003               	bra	u14870
 20146  005148                     u14877:
 20147  005148  6EF7               	movwf	tblptrh,c
 20148  00514A  0008               	tblrd		*
 20149  00514C  50F5               	movf	tablat,w,c
 20150  00514E                     u14870:
 20151  00514E  0100               	movlb	0	; () banked
 20152  005150  1962               	xorwf	strchr@chr& (0+255),w,b
 20153  005152  E105               	bnz	l11786
 20154                           
 20155                           ; BSR set to: 0
 20156  005154  C060  F060         	movff	strchr@ptr,?_strchr
 20157  005158  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 20158  00515C  D019               	goto	l2491
 20159  00515E                     l11786:
 20160                           
 20161                           ; BSR set to: 0
 20162  00515E  5160               	movf	strchr@ptr& (0+255),w,b
 20163  005160  6F64               	movwf	??_strchr& (0+255),b
 20164  005162  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 20165  005164  6F65               	movwf	(??_strchr+1)& (0+255),b
 20166  005166  4B60               	infsnz	strchr@ptr& (0+255),f,b
 20167  005168  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 20168  00516A  5164               	movf	??_strchr& (0+255),w,b
 20169  00516C  6EF6               	movwf	tblptrl,c
 20170  00516E  6EE9               	movwf	fsr0l,c
 20171  005170  0E05               	movlw	(high __ramtop+-1)
 20172  005172  6EEA               	movwf	fsr0h,c
 20173  005174  5165               	movf	(??_strchr+1)& (0+255),w,b
 20174  005176  64EA               	cpfsgt	fsr0h,c
 20175  005178  D003               	bra	u14897
 20176  00517A  6EEA               	movwf	fsr0h,c
 20177  00517C  50EF               	movf	indf0,w,c
 20178  00517E  D003               	bra	u14890
 20179  005180                     u14897:
 20180  005180  6EF7               	movwf	tblptrh,c
 20181  005182  0008               	tblrd		*
 20182  005184  50F5               	movf	tablat,w,c
 20183  005186                     u14890:
 20184  005186  0900               	iorlw	0
 20185  005188  E1D3               	bnz	l2489
 20186  00518A  0100               	movlb	0	; () banked
 20187  00518C  6B60               	clrf	?_strchr& (0+255),b
 20188  00518E  6B61               	clrf	(?_strchr+1)& (0+255),b
 20189  005190                     l2491:
 20190                           
 20191                           ; BSR set to: 0
 20192  005190  0012               	return	
 20193  005192                     __end_of_strchr:
 20194                           	opt stack 0
 20195                           tblptru	equ	0xFF8
 20196                           tblptrh	equ	0xFF7
 20197                           tblptrl	equ	0xFF6
 20198                           tablat	equ	0xFF5
 20199                           prodh	equ	0xFF4
 20200                           prodl	equ	0xFF3
 20201                           intcon	equ	0xFF2
 20202                           indf0	equ	0xFEF
 20203                           postinc0	equ	0xFEE
 20204                           fsr0h	equ	0xFEA
 20205                           fsr0l	equ	0xFE9
 20206                           wreg	equ	0xFE8
 20207                           indf1	equ	0xFE7
 20208                           postinc1	equ	0xFE6
 20209                           postdec1	equ	0xFE5
 20210                           fsr1h	equ	0xFE2
 20211                           fsr1l	equ	0xFE1
 20212                           indf2	equ	0xFDF
 20213                           postinc2	equ	0xFDE
 20214                           postdec2	equ	0xFDD
 20215                           plusw2	equ	0xFDB
 20216                           fsr2h	equ	0xFDA
 20217                           fsr2l	equ	0xFD9
 20218                           status	equ	0xFD8
 20219                           
 20220 ;; *************** function _stristr *****************
 20221 ;; Defined at:
 20222 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 20223 ;; Parameters:    Size  Location     Type
 20224 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 20225 ;;		 -> NULL(0), cmdbuf(80), 
 20226 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 20227 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20228 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20229 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20230 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20231 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20232 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20233 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20234 ;;		 -> STR_8(5), STR_6(5), 
 20235 ;; Auto vars:     Size  Location     Type
 20236 ;;		None
 20237 ;; Return value:  Size  Location     Type
 20238 ;;                  2   13[BANK0 ] PTR unsigned char 
 20239 ;; Registers used:
 20240 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20241 ;; Tracked objects:
 20242 ;;		On entry : F/0
 20243 ;;		On exit  : F/0
 20244 ;;		Unchanged: 0/0
 20245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20246 ;;      Params:         0       4       0       0       0       0       0
 20247 ;;      Locals:         0       0       0       0       0       0       0
 20248 ;;      Temps:          0       0       0       0       0       0       0
 20249 ;;      Totals:         0       4       0       0       0       0       0
 20250 ;;Total ram usage:        4 bytes
 20251 ;; Hardware stack levels used:    1
 20252 ;; Hardware stack levels required when called:    5
 20253 ;; This function calls:
 20254 ;;		_strlen
 20255 ;;		_strnicmp
 20256 ;;		_strichr
 20257 ;; This function is called by:
 20258 ;;		_doModeVerbose
 20259 ;; This function uses a non-reentrant model
 20260 ;;
 20261                           
 20262                           	psect	text47
 20263  004E1E                     __ptext47:
 20264                           	opt stack 0
 20265  004E1E                     _stristr:
 20266                           	opt stack 24
 20267                           
 20268                           ; BSR set to: 0
 20269                           
 20270                           ; BSR set to: 0
 20271                           ;incstack = 0
 20272                           ;incstack = 0
 20273  004E1E  D02F               	goto	l14838
 20274  004E20                     l14832:
 20275                           
 20276                           ; BSR set to: 0
 20277  004E20  C06D  F064         	movff	stristr@s1,?_strnicmp
 20278  004E24  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 20279  004E28  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 20280  004E2C  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 20281  004E30  C06F  F060         	movff	stristr@s2,?_strlen
 20282  004E34  C070  F061         	movff	stristr@s2+1,?_strlen+1
 20283  004E38  ECAB  F02A         	call	_strlen	;wreg free
 20284  004E3C  C060  F068         	movff	?_strlen,?_strnicmp+4
 20285  004E40  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 20286  004E44  EC34  F028         	call	_strnicmp	;wreg free
 20287  004E48  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 20288  004E4A  1164               	iorwf	?_strnicmp& (0+255),w,b
 20289  004E4C  E105               	bnz	l14836
 20290                           
 20291                           ; BSR set to: 0
 20292  004E4E  C06D  F06D         	movff	stristr@s1,?_stristr
 20293  004E52  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 20294  004E56  D01E               	goto	l2510
 20295  004E58                     l14836:
 20296                           
 20297                           ; BSR set to: 0
 20298  004E58  296D               	incf	stristr@s1& (0+255),w,b
 20299  004E5A  6F61               	movwf	?_strichr& (0+255),b
 20300  004E5C  0E00               	movlw	0
 20301  004E5E  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 20302  004E60  6F62               	movwf	(?_strichr+1)& (0+255),b
 20303  004E62  C06F  FFF6         	movff	stristr@s2,tblptrl
 20304  004E66  C070  FFF7         	movff	stristr@s2+1,tblptrh
 20305  004E6A  0008               	tblrd		*
 20306  004E6C  50F5               	movf	tablat,w,c
 20307  004E6E  6F63               	movwf	(?_strichr+2)& (0+255),b
 20308  004E70  6B64               	clrf	(?_strichr+3)& (0+255),b
 20309  004E72  EC0A  F02B         	call	_strichr	;wreg free
 20310  004E76  C061  F06D         	movff	?_strichr,stristr@s1
 20311  004E7A  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 20312  004E7E                     l14838:
 20313                           
 20314                           ; BSR set to: 0
 20315  004E7E  516E               	movf	(stristr@s1+1)& (0+255),w,b
 20316  004E80  116D               	iorwf	stristr@s1& (0+255),w,b
 20317  004E82  E006               	bz	l2513
 20318                           
 20319                           ; BSR set to: 0
 20320  004E84  C06D  FFD9         	movff	stristr@s1,fsr2l
 20321  004E88  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 20322  004E8C  50DF               	movf	indf2,w,c
 20323  004E8E  E1C8               	bnz	l14832
 20324  004E90                     l2513:
 20325                           
 20326                           ; BSR set to: 0
 20327  004E90  6B6D               	clrf	?_stristr& (0+255),b
 20328  004E92  6B6E               	clrf	(?_stristr+1)& (0+255),b
 20329  004E94                     l2510:
 20330                           
 20331                           ; BSR set to: 0
 20332  004E94  0012               	return	
 20333  004E96                     __end_of_stristr:
 20334                           	opt stack 0
 20335                           tblptru	equ	0xFF8
 20336                           tblptrh	equ	0xFF7
 20337                           tblptrl	equ	0xFF6
 20338                           tablat	equ	0xFF5
 20339                           prodh	equ	0xFF4
 20340                           prodl	equ	0xFF3
 20341                           intcon	equ	0xFF2
 20342                           indf0	equ	0xFEF
 20343                           postinc0	equ	0xFEE
 20344                           fsr0h	equ	0xFEA
 20345                           fsr0l	equ	0xFE9
 20346                           wreg	equ	0xFE8
 20347                           indf1	equ	0xFE7
 20348                           postinc1	equ	0xFE6
 20349                           postdec1	equ	0xFE5
 20350                           fsr1h	equ	0xFE2
 20351                           fsr1l	equ	0xFE1
 20352                           indf2	equ	0xFDF
 20353                           postinc2	equ	0xFDE
 20354                           postdec2	equ	0xFDD
 20355                           plusw2	equ	0xFDB
 20356                           fsr2h	equ	0xFDA
 20357                           fsr2l	equ	0xFD9
 20358                           status	equ	0xFD8
 20359                           
 20360 ;; *************** function _strichr *****************
 20361 ;; Defined at:
 20362 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20363 ;; Parameters:    Size  Location     Type
 20364 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 20365 ;;		 -> NULL(0), cmdbuf(80), 
 20366 ;;  chr             2    3[BANK0 ] int 
 20367 ;; Auto vars:     Size  Location     Type
 20368 ;;		None
 20369 ;; Return value:  Size  Location     Type
 20370 ;;                  2    1[BANK0 ] PTR unsigned char 
 20371 ;; Registers used:
 20372 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20373 ;; Tracked objects:
 20374 ;;		On entry : F/0
 20375 ;;		On exit  : F/0
 20376 ;;		Unchanged: 0/0
 20377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20378 ;;      Params:         0       4       0       0       0       0       0
 20379 ;;      Locals:         0       0       0       0       0       0       0
 20380 ;;      Temps:          0       0       0       0       0       0       0
 20381 ;;      Totals:         0       4       0       0       0       0       0
 20382 ;;Total ram usage:        4 bytes
 20383 ;; Hardware stack levels used:    1
 20384 ;; Hardware stack levels required when called:    4
 20385 ;; This function calls:
 20386 ;;		_toupper
 20387 ;; This function is called by:
 20388 ;;		_stristr
 20389 ;; This function uses a non-reentrant model
 20390 ;;
 20391                           
 20392                           	psect	text48
 20393  005614                     __ptext48:
 20394                           	opt stack 0
 20395  005614                     _strichr:
 20396                           	opt stack 24
 20397                           
 20398                           ; BSR set to: 0
 20399                           
 20400                           ; BSR set to: 0
 20401                           ;incstack = 0
 20402                           ;incstack = 0
 20403  005614  5163               	movf	strichr@chr& (0+255),w,b
 20404  005616  EC50  F02C         	call	_toupper
 20405  00561A  6F63               	movwf	strichr@chr& (0+255),b
 20406  00561C  6B64               	clrf	(strichr@chr+1)& (0+255),b
 20407  00561E  D010               	goto	l16428
 20408  005620                     l16422:
 20409                           
 20410                           ; BSR set to: 0
 20411  005620  C061  FFD9         	movff	strichr@ptr,fsr2l
 20412  005624  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20413  005628  50DF               	movf	indf2,w,c
 20414  00562A  EC50  F02C         	call	_toupper
 20415  00562E  1963               	xorwf	strichr@chr& (0+255),w,b
 20416  005630  E105               	bnz	l16426
 20417                           
 20418                           ; BSR set to: 0
 20419  005632  C061  F061         	movff	strichr@ptr,?_strichr
 20420  005636  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 20421  00563A  D00A               	goto	l2577
 20422  00563C                     l16426:
 20423                           
 20424                           ; BSR set to: 0
 20425  00563C  4B61               	infsnz	strichr@ptr& (0+255),f,b
 20426  00563E  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 20427  005640                     l16428:
 20428                           
 20429                           ; BSR set to: 0
 20430  005640  C061  FFD9         	movff	strichr@ptr,fsr2l
 20431  005644  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 20432  005648  50DF               	movf	indf2,w,c
 20433  00564A  E1EA               	bnz	l16422
 20434                           
 20435                           ; BSR set to: 0
 20436  00564C  6B61               	clrf	?_strichr& (0+255),b
 20437  00564E  6B62               	clrf	(?_strichr+1)& (0+255),b
 20438  005650                     l2577:
 20439                           
 20440                           ; BSR set to: 0
 20441  005650  0012               	return	
 20442  005652                     __end_of_strichr:
 20443                           	opt stack 0
 20444                           tblptru	equ	0xFF8
 20445                           tblptrh	equ	0xFF7
 20446                           tblptrl	equ	0xFF6
 20447                           tablat	equ	0xFF5
 20448                           prodh	equ	0xFF4
 20449                           prodl	equ	0xFF3
 20450                           intcon	equ	0xFF2
 20451                           indf0	equ	0xFEF
 20452                           postinc0	equ	0xFEE
 20453                           fsr0h	equ	0xFEA
 20454                           fsr0l	equ	0xFE9
 20455                           wreg	equ	0xFE8
 20456                           indf1	equ	0xFE7
 20457                           postinc1	equ	0xFE6
 20458                           postdec1	equ	0xFE5
 20459                           fsr1h	equ	0xFE2
 20460                           fsr1l	equ	0xFE1
 20461                           indf2	equ	0xFDF
 20462                           postinc2	equ	0xFDE
 20463                           postdec2	equ	0xFDD
 20464                           plusw2	equ	0xFDB
 20465                           fsr2h	equ	0xFDA
 20466                           fsr2l	equ	0xFD9
 20467                           status	equ	0xFD8
 20468                           
 20469 ;; *************** function _strnicmp *****************
 20470 ;; Defined at:
 20471 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20472 ;; Parameters:    Size  Location     Type
 20473 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 20474 ;;		 -> NULL(0), cmdbuf(80), 
 20475 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 20476 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20477 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20478 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20479 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20480 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20481 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20482 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20483 ;;		 -> STR_8(5), STR_6(5), 
 20484 ;;  len             2    8[BANK0 ] unsigned int 
 20485 ;; Auto vars:     Size  Location     Type
 20486 ;;  r               1   12[BANK0 ] char 
 20487 ;; Return value:  Size  Location     Type
 20488 ;;                  2    4[BANK0 ] int 
 20489 ;; Registers used:
 20490 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20491 ;; Tracked objects:
 20492 ;;		On entry : F/0
 20493 ;;		On exit  : F/0
 20494 ;;		Unchanged: 0/0
 20495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20496 ;;      Params:         0       6       0       0       0       0       0
 20497 ;;      Locals:         0       1       0       0       0       0       0
 20498 ;;      Temps:          0       2       0       0       0       0       0
 20499 ;;      Totals:         0       9       0       0       0       0       0
 20500 ;;Total ram usage:        9 bytes
 20501 ;; Hardware stack levels used:    1
 20502 ;; Hardware stack levels required when called:    4
 20503 ;; This function calls:
 20504 ;;		_toupper
 20505 ;; This function is called by:
 20506 ;;		_stristr
 20507 ;; This function uses a non-reentrant model
 20508 ;;
 20509                           
 20510                           	psect	text49
 20511  005068                     __ptext49:
 20512                           	opt stack 0
 20513  005068                     _strnicmp:
 20514                           	opt stack 24
 20515                           
 20516                           ; BSR set to: 0
 20517                           
 20518                           ; BSR set to: 0
 20519                           ;incstack = 0
 20520                           ;incstack = 0
 20521  005068  D027               	goto	l16418
 20522  00506A                     l16408:
 20523                           
 20524                           ; BSR set to: 0
 20525  00506A  C066  FFF6         	movff	strnicmp@s2,tblptrl
 20526  00506E  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 20527  005072  0008               	tblrd		*
 20528  005074  50F5               	movf	tablat,w,c
 20529  005076  EC50  F02C         	call	_toupper
 20530  00507A  6F6A               	movwf	??_strnicmp& (0+255),b
 20531  00507C  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20532  005080  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20533  005084  50DF               	movf	indf2,w,c
 20534  005086  EC50  F02C         	call	_toupper
 20535  00508A  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 20536  00508C  516A               	movf	??_strnicmp& (0+255),w,b
 20537  00508E  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 20538  005090  6F6C               	movwf	strnicmp@r& (0+255),b
 20539  005092  0100               	movlb	0	; () banked
 20540  005094  676C               	tstfsz	strnicmp@r& (0+255),b
 20541  005096  D006               	goto	l16412
 20542                           
 20543                           ; BSR set to: 0
 20544  005098  C064  FFD9         	movff	strnicmp@s1,fsr2l
 20545  00509C  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 20546  0050A0  50DF               	movf	indf2,w,c
 20547  0050A2  E106               	bnz	l16416
 20548  0050A4                     l16412:
 20549                           
 20550                           ; BSR set to: 0
 20551  0050A4  516C               	movf	strnicmp@r& (0+255),w,b
 20552  0050A6  6F64               	movwf	?_strnicmp& (0+255),b
 20553  0050A8  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20554  0050AA  BF64               	btfsc	?_strnicmp& (0+255),7,b
 20555  0050AC  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 20556  0050AE  D00E               	goto	l2529
 20557  0050B0                     l16416:
 20558                           
 20559                           ; BSR set to: 0
 20560  0050B0  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 20561  0050B2  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 20562  0050B4  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 20563  0050B6  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 20564  0050B8                     l16418:
 20565                           
 20566                           ; BSR set to: 0
 20567  0050B8  0768               	decf	strnicmp@len& (0+255),f,b
 20568  0050BA  A0D8               	btfss	status,0,c
 20569  0050BC  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 20570  0050BE  0100               	movlb	0	; () banked
 20571  0050C0  2968               	incf	strnicmp@len& (0+255),w,b
 20572  0050C2  B4D8               	btfsc	status,2,c
 20573  0050C4  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 20574  0050C6  E1D1               	bnz	l16408
 20575                           
 20576                           ; BSR set to: 0
 20577  0050C8  6B64               	clrf	?_strnicmp& (0+255),b
 20578  0050CA  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 20579  0050CC                     l2529:
 20580                           
 20581                           ; BSR set to: 0
 20582  0050CC  0012               	return	
 20583  0050CE                     __end_of_strnicmp:
 20584                           	opt stack 0
 20585                           tblptru	equ	0xFF8
 20586                           tblptrh	equ	0xFF7
 20587                           tblptrl	equ	0xFF6
 20588                           tablat	equ	0xFF5
 20589                           prodh	equ	0xFF4
 20590                           prodl	equ	0xFF3
 20591                           intcon	equ	0xFF2
 20592                           indf0	equ	0xFEF
 20593                           postinc0	equ	0xFEE
 20594                           fsr0h	equ	0xFEA
 20595                           fsr0l	equ	0xFE9
 20596                           wreg	equ	0xFE8
 20597                           indf1	equ	0xFE7
 20598                           postinc1	equ	0xFE6
 20599                           postdec1	equ	0xFE5
 20600                           fsr1h	equ	0xFE2
 20601                           fsr1l	equ	0xFE1
 20602                           indf2	equ	0xFDF
 20603                           postinc2	equ	0xFDE
 20604                           postdec2	equ	0xFDD
 20605                           plusw2	equ	0xFDB
 20606                           fsr2h	equ	0xFDA
 20607                           fsr2l	equ	0xFD9
 20608                           status	equ	0xFD8
 20609                           
 20610 ;; *************** function _toupper *****************
 20611 ;; Defined at:
 20612 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20613 ;; Parameters:    Size  Location     Type
 20614 ;;  c               1    wreg     unsigned char 
 20615 ;; Auto vars:     Size  Location     Type
 20616 ;;  c               1    0[BANK0 ] unsigned char 
 20617 ;; Return value:  Size  Location     Type
 20618 ;;                  1    wreg      unsigned char 
 20619 ;; Registers used:
 20620 ;;		wreg, status,2, status,0
 20621 ;; Tracked objects:
 20622 ;;		On entry : F/0
 20623 ;;		On exit  : F/0
 20624 ;;		Unchanged: 0/0
 20625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20626 ;;      Params:         0       0       0       0       0       0       0
 20627 ;;      Locals:         0       1       0       0       0       0       0
 20628 ;;      Temps:          0       0       0       0       0       0       0
 20629 ;;      Totals:         0       1       0       0       0       0       0
 20630 ;;Total ram usage:        1 bytes
 20631 ;; Hardware stack levels used:    1
 20632 ;; Hardware stack levels required when called:    3
 20633 ;; This function calls:
 20634 ;;		Nothing
 20635 ;; This function is called by:
 20636 ;;		_strnicmp
 20637 ;;		_strichr
 20638 ;; This function uses a non-reentrant model
 20639 ;;
 20640                           
 20641                           	psect	text50
 20642  0058A0                     __ptext50:
 20643                           	opt stack 0
 20644  0058A0                     _toupper:
 20645                           	opt stack 24
 20646                           
 20647                           ; BSR set to: 0
 20648                           ;incstack = 0
 20649                           ;incstack = 0
 20650                           ;toupper@c stored from wreg
 20651  0058A0  CFE8 F060          	movff	wreg,toupper@c
 20652                           
 20653                           ; BSR set to: 0
 20654  0058A4  0E7B               	movlw	123
 20655  0058A6  6160               	cpfslt	toupper@c& (0+255),b
 20656  0058A8  D004               	goto	l16436
 20657                           
 20658                           ; BSR set to: 0
 20659  0058AA  0E60               	movlw	96
 20660  0058AC  6560               	cpfsgt	toupper@c& (0+255),b
 20661  0058AE  D001               	goto	l16436
 20662                           
 20663                           ; BSR set to: 0
 20664  0058B0  9B60               	bcf	toupper@c& (0+255),5,b
 20665  0058B2                     l16436:
 20666                           
 20667                           ; BSR set to: 0
 20668  0058B2  5160               	movf	toupper@c& (0+255),w,b
 20669                           
 20670                           ; BSR set to: 0
 20671  0058B4  0012               	return	
 20672  0058B6                     __end_of_toupper:
 20673                           	opt stack 0
 20674                           tblptru	equ	0xFF8
 20675                           tblptrh	equ	0xFF7
 20676                           tblptrl	equ	0xFF6
 20677                           tablat	equ	0xFF5
 20678                           prodh	equ	0xFF4
 20679                           prodl	equ	0xFF3
 20680                           intcon	equ	0xFF2
 20681                           indf0	equ	0xFEF
 20682                           postinc0	equ	0xFEE
 20683                           fsr0h	equ	0xFEA
 20684                           fsr0l	equ	0xFE9
 20685                           wreg	equ	0xFE8
 20686                           indf1	equ	0xFE7
 20687                           postinc1	equ	0xFE6
 20688                           postdec1	equ	0xFE5
 20689                           fsr1h	equ	0xFE2
 20690                           fsr1l	equ	0xFE1
 20691                           indf2	equ	0xFDF
 20692                           postinc2	equ	0xFDE
 20693                           postdec2	equ	0xFDD
 20694                           plusw2	equ	0xFDB
 20695                           fsr2h	equ	0xFDA
 20696                           fsr2l	equ	0xFD9
 20697                           status	equ	0xFD8
 20698                           
 20699 ;; *************** function _strlen *****************
 20700 ;; Defined at:
 20701 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20702 ;; Parameters:    Size  Location     Type
 20703 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 20704 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20705 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20706 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20707 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20708 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20709 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20710 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20711 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20712 ;;		 -> cmdbuf(80), 
 20713 ;; Auto vars:     Size  Location     Type
 20714 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 20715 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20716 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20717 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20718 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20719 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20720 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20721 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20722 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20723 ;;		 -> cmdbuf(80), 
 20724 ;; Return value:  Size  Location     Type
 20725 ;;                  2    0[BANK0 ] unsigned int 
 20726 ;; Registers used:
 20727 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20728 ;; Tracked objects:
 20729 ;;		On entry : F/0
 20730 ;;		On exit  : F/0
 20731 ;;		Unchanged: 0/0
 20732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20733 ;;      Params:         0       2       0       0       0       0       0
 20734 ;;      Locals:         0       2       0       0       0       0       0
 20735 ;;      Temps:          0       0       0       0       0       0       0
 20736 ;;      Totals:         0       4       0       0       0       0       0
 20737 ;;Total ram usage:        4 bytes
 20738 ;; Hardware stack levels used:    1
 20739 ;; Hardware stack levels required when called:    3
 20740 ;; This function calls:
 20741 ;;		Nothing
 20742 ;; This function is called by:
 20743 ;;		_doModeSLCAN
 20744 ;;		_receiveSendEventSLCAN
 20745 ;;		_printGUID
 20746 ;;		_hexStringToBytes
 20747 ;;		_stristr
 20748 ;; This function uses a non-reentrant model
 20749 ;;
 20750                           
 20751                           	psect	text51
 20752  005556                     __ptext51:
 20753                           	opt stack 0
 20754  005556                     _strlen:
 20755                           	opt stack 25
 20756                           
 20757                           ; BSR set to: 0
 20758                           
 20759                           ; BSR set to: 0
 20760                           ;incstack = 0
 20761                           ;incstack = 0
 20762  005556  C060  F062         	movff	strlen@s,strlen@cp
 20763  00555A  C061  F063         	movff	strlen@s+1,strlen@cp+1
 20764  00555E  D003               	goto	l16060
 20765  005560                     l16058:
 20766  005560  0100               	movlb	0	; () banked
 20767  005562  4B62               	infsnz	strlen@cp& (0+255),f,b
 20768  005564  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 20769  005566                     l16060:
 20770                           
 20771                           ; BSR set to: 0
 20772  005566  5162               	movf	strlen@cp& (0+255),w,b
 20773  005568  6EF6               	movwf	tblptrl,c
 20774  00556A  6EE9               	movwf	fsr0l,c
 20775  00556C  0E05               	movlw	(high __ramtop+-1)
 20776  00556E  6EEA               	movwf	fsr0h,c
 20777  005570  5163               	movf	(strlen@cp+1)& (0+255),w,b
 20778  005572  64EA               	cpfsgt	fsr0h,c
 20779  005574  D003               	bra	u22097
 20780  005576  6EEA               	movwf	fsr0h,c
 20781  005578  50EF               	movf	indf0,w,c
 20782  00557A  D003               	bra	u22090
 20783  00557C                     u22097:
 20784  00557C  6EF7               	movwf	tblptrh,c
 20785  00557E  0008               	tblrd		*
 20786  005580  50F5               	movf	tablat,w,c
 20787  005582                     u22090:
 20788  005582  0900               	iorlw	0
 20789  005584  E1ED               	bnz	l16058
 20790  005586  0100               	movlb	0	; () banked
 20791  005588  5160               	movf	strlen@s& (0+255),w,b
 20792  00558A  5D62               	subwf	strlen@cp& (0+255),w,b
 20793  00558C  6F60               	movwf	?_strlen& (0+255),b
 20794  00558E  5161               	movf	(strlen@s+1)& (0+255),w,b
 20795  005590  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 20796  005592  6F61               	movwf	(?_strlen+1)& (0+255),b
 20797                           
 20798                           ; BSR set to: 0
 20799  005594  0012               	return	
 20800  005596                     __end_of_strlen:
 20801                           	opt stack 0
 20802                           tblptru	equ	0xFF8
 20803                           tblptrh	equ	0xFF7
 20804                           tblptrl	equ	0xFF6
 20805                           tablat	equ	0xFF5
 20806                           prodh	equ	0xFF4
 20807                           prodl	equ	0xFF3
 20808                           intcon	equ	0xFF2
 20809                           indf0	equ	0xFEF
 20810                           postinc0	equ	0xFEE
 20811                           fsr0h	equ	0xFEA
 20812                           fsr0l	equ	0xFE9
 20813                           wreg	equ	0xFE8
 20814                           indf1	equ	0xFE7
 20815                           postinc1	equ	0xFE6
 20816                           postdec1	equ	0xFE5
 20817                           fsr1h	equ	0xFE2
 20818                           fsr1l	equ	0xFE1
 20819                           indf2	equ	0xFDF
 20820                           postinc2	equ	0xFDE
 20821                           postdec2	equ	0xFDD
 20822                           plusw2	equ	0xFDB
 20823                           fsr2h	equ	0xFDA
 20824                           fsr2l	equ	0xFD9
 20825                           status	equ	0xFD8
 20826                           
 20827 ;; *************** function _receivePrintEventVerbose *****************
 20828 ;; Defined at:
 20829 ;;		line 1791 in file "main.c"
 20830 ;; Parameters:    Size  Location     Type
 20831 ;;		None
 20832 ;; Auto vars:     Size  Location     Type
 20833 ;;  i               1   69[BANK0 ] unsigned char 
 20834 ;; Return value:  Size  Location     Type
 20835 ;;                  1    wreg      enum E15660
 20836 ;; Registers used:
 20837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20838 ;; Tracked objects:
 20839 ;;		On entry : F/0
 20840 ;;		On exit  : 0/0
 20841 ;;		Unchanged: 0/0
 20842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20843 ;;      Params:         0       0       0       0       0       0       0
 20844 ;;      Locals:         0      13       0       0       0       0       0
 20845 ;;      Temps:          0       5       0       0       0       0       0
 20846 ;;      Totals:         0      18       0       0       0       0       0
 20847 ;;Total ram usage:       18 bytes
 20848 ;; Hardware stack levels used:    1
 20849 ;; Hardware stack levels required when called:    6
 20850 ;; This function calls:
 20851 ;;		_putsUSART
 20852 ;;		_sprintf
 20853 ;;		_getVSCPFrame
 20854 ;; This function is called by:
 20855 ;;		_doModeVerbose
 20856 ;; This function uses a non-reentrant model
 20857 ;;
 20858                           
 20859                           	psect	text52
 20860  0024F2                     __ptext52:
 20861                           	opt stack 0
 20862  0024F2                     _receivePrintEventVerbose:
 20863                           	opt stack 23
 20864                           
 20865                           ; BSR set to: 0
 20866                           ;main.c: 1792: uint8_t i;
 20867                           ;main.c: 1794: if (getVSCPFrame(&vscpClass,
 20868                           ;main.c: 1795: &vscpType,
 20869                           ;main.c: 1796: &vscpNodeId,
 20870                           ;main.c: 1797: &vscpPriority,
 20871                           ;main.c: 1798: &vscpSize,
 20872                           ;main.c: 1799: vscpData)) {
 20873                           
 20874                           ; BSR set to: 0
 20875                           ;incstack = 0
 20876                           ;incstack = 0
 20877  0024F2  0EEC               	movlw	low _vscpType
 20878  0024F4  6F72               	movwf	?_getVSCPFrame& (0+255),b
 20879  0024F6  0EE9               	movlw	low _vscpNodeId
 20880  0024F8  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20881  0024FA  0EEA               	movlw	low _vscpPriority
 20882  0024FC  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20883  0024FE  0EEB               	movlw	low _vscpSize
 20884  002500  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20885  002502  0E34               	movlw	low _vscpData
 20886  002504  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20887  002506  0E3C               	movlw	_vscpClass& (0+255)
 20888  002508  EC8D  F026         	call	_getVSCPFrame
 20889  00250C  0900               	iorlw	0
 20890  00250E  E101 D12F          	bz	l14826
 20891                           
 20892                           ; BSR set to: 0
 20893                           ;main.c: 1802: cntRxFrames++;
 20894  002512  0101               	movlb	1	; () banked
 20895  002514  2B0C               	incf	_cntRxFrames& (0+255),f,b
 20896  002516  0E00               	movlw	0
 20897  002518  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20898  00251A  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20899  00251C  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20900                           
 20901                           ;main.c: 1803: cntRxBytes += vscpSize;
 20902  00251E  0100               	movlb	0	; () banked
 20903  002520  51EB               	movf	_vscpSize& (0+255),w,b
 20904  002522  0101               	movlb	1	; () banked
 20905  002524  2708               	addwf	_cntRxBytes& (0+255),f,b
 20906  002526  0E00               	movlw	0
 20907  002528  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20908  00252A  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20909  00252C  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20910                           
 20911                           ; BSR set to: 1
 20912                           ;main.c: 1805: putsUSART((char *) "<Prio=");
 20913  00252E  0E7F               	movlw	high STR_139
 20914  002530  0100               	movlb	0	; () banked
 20915  002532  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20916  002534  0E42               	movlw	low STR_139
 20917  002536  6F61               	movwf	?_putsUSART& (0+255),b
 20918  002538  EC84  F029         	call	_putsUSART	;wreg free
 20919                           
 20920                           ;main.c: 1806: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20921  00253C  0100               	movlb	0	; () banked
 20922  00253E  67E4               	tstfsz	_bHex& (0+255),b
 20923  002540  D004               	goto	l14744
 20924                           
 20925                           ; BSR set to: 0
 20926  002542  0E7F               	movlw	high STR_57
 20927  002544  6F9A               	movwf	(_receivePrintEventVerbose$1340+1)& (0+255),b
 20928  002546  0EEE               	movlw	low STR_57
 20929  002548  D003               	goto	L28
 20930  00254A                     l14744:
 20931                           
 20932                           ; BSR set to: 0
 20933  00254A  0E7F               	movlw	high STR_56
 20934  00254C  6F9A               	movwf	(_receivePrintEventVerbose$1340+1)& (0+255),b
 20935  00254E  0E65               	movlw	low STR_56
 20936  002550                     L28:
 20937  002550  6F99               	movwf	_receivePrintEventVerbose$1340& (0+255),b
 20938                           
 20939                           ; BSR set to: 0
 20940  002552  0E01               	movlw	high _wrkbuf
 20941  002554  0100               	movlb	0	; () banked
 20942  002556  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20943  002558  0E76               	movlw	low _wrkbuf
 20944  00255A  6F76               	movwf	?_sprintf& (0+255),b
 20945  00255C  C099  F078         	movff	_receivePrintEventVerbose$1340,?_sprintf+2
 20946  002560  C09A  F079         	movff	_receivePrintEventVerbose$1340+1,?_sprintf+3
 20947  002564  C0EA  F07A         	movff	_vscpPriority,?_sprintf+4
 20948  002568  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20949  00256A  EC8D  F00B         	call	_sprintf	;wreg free
 20950                           
 20951                           ; BSR set to: 0
 20952                           ;main.c: 1807: putsUSART(wrkbuf);
 20953  00256E  0E01               	movlw	high _wrkbuf
 20954  002570  0100               	movlb	0	; () banked
 20955  002572  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20956  002574  0E76               	movlw	low _wrkbuf
 20957  002576  6F61               	movwf	?_putsUSART& (0+255),b
 20958  002578  EC84  F029         	call	_putsUSART	;wreg free
 20959                           
 20960                           ;main.c: 1808: putsUSART((char *) ",class=");
 20961  00257C  0E7E               	movlw	high STR_142
 20962  00257E  0100               	movlb	0	; () banked
 20963  002580  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20964  002582  0EF6               	movlw	low STR_142
 20965  002584  6F61               	movwf	?_putsUSART& (0+255),b
 20966  002586  EC84  F029         	call	_putsUSART	;wreg free
 20967                           
 20968                           ;main.c: 1809: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20969  00258A  0100               	movlb	0	; () banked
 20970  00258C  67E4               	tstfsz	_bHex& (0+255),b
 20971  00258E  D004               	goto	l14756
 20972                           
 20973                           ; BSR set to: 0
 20974  002590  0E7F               	movlw	high STR_57
 20975  002592  6F9C               	movwf	(_receivePrintEventVerbose$1345+1)& (0+255),b
 20976  002594  0EEE               	movlw	low STR_57
 20977  002596  D003               	goto	L29
 20978  002598                     l14756:
 20979                           
 20980                           ; BSR set to: 0
 20981  002598  0E7F               	movlw	high STR_143
 20982  00259A  6F9C               	movwf	(_receivePrintEventVerbose$1345+1)& (0+255),b
 20983  00259C  0E6C               	movlw	low STR_143
 20984  00259E                     L29:
 20985  00259E  6F9B               	movwf	_receivePrintEventVerbose$1345& (0+255),b
 20986                           
 20987                           ; BSR set to: 0
 20988  0025A0  0E01               	movlw	high _wrkbuf
 20989  0025A2  0100               	movlb	0	; () banked
 20990  0025A4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20991  0025A6  0E76               	movlw	low _wrkbuf
 20992  0025A8  6F76               	movwf	?_sprintf& (0+255),b
 20993  0025AA  C09B  F078         	movff	_receivePrintEventVerbose$1345,?_sprintf+2
 20994  0025AE  C09C  F079         	movff	_receivePrintEventVerbose$1345+1,?_sprintf+3
 20995  0025B2  C03C  F07A         	movff	_vscpClass,?_sprintf+4
 20996  0025B6  C03D  F07B         	movff	_vscpClass+1,?_sprintf+5
 20997  0025BA  EC8D  F00B         	call	_sprintf	;wreg free
 20998                           
 20999                           ; BSR set to: 0
 21000                           ;main.c: 1810: putsUSART(wrkbuf);
 21001  0025BE  0E01               	movlw	high _wrkbuf
 21002  0025C0  0100               	movlb	0	; () banked
 21003  0025C2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21004  0025C4  0E76               	movlw	low _wrkbuf
 21005  0025C6  6F61               	movwf	?_putsUSART& (0+255),b
 21006  0025C8  EC84  F029         	call	_putsUSART	;wreg free
 21007                           
 21008                           ;main.c: 1811: putsUSART((char *) ",type=");
 21009  0025CC  0E7F               	movlw	high STR_145
 21010  0025CE  0100               	movlb	0	; () banked
 21011  0025D0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21012  0025D2  0E34               	movlw	low STR_145
 21013  0025D4  6F61               	movwf	?_putsUSART& (0+255),b
 21014  0025D6  EC84  F029         	call	_putsUSART	;wreg free
 21015                           
 21016                           ;main.c: 1812: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 21017  0025DA  0100               	movlb	0	; () banked
 21018  0025DC  67E4               	tstfsz	_bHex& (0+255),b
 21019  0025DE  D004               	goto	l14768
 21020                           
 21021                           ; BSR set to: 0
 21022  0025E0  0E7F               	movlw	high STR_57
 21023  0025E2  6F9E               	movwf	(_receivePrintEventVerbose$1350+1)& (0+255),b
 21024  0025E4  0EEE               	movlw	low STR_57
 21025  0025E6  D003               	goto	L30
 21026  0025E8                     l14768:
 21027                           
 21028                           ; BSR set to: 0
 21029  0025E8  0E7F               	movlw	high STR_56
 21030  0025EA  6F9E               	movwf	(_receivePrintEventVerbose$1350+1)& (0+255),b
 21031  0025EC  0E65               	movlw	low STR_56
 21032  0025EE                     L30:
 21033  0025EE  6F9D               	movwf	_receivePrintEventVerbose$1350& (0+255),b
 21034                           
 21035                           ; BSR set to: 0
 21036  0025F0  0E01               	movlw	high _wrkbuf
 21037  0025F2  0100               	movlb	0	; () banked
 21038  0025F4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21039  0025F6  0E76               	movlw	low _wrkbuf
 21040  0025F8  6F76               	movwf	?_sprintf& (0+255),b
 21041  0025FA  C09D  F078         	movff	_receivePrintEventVerbose$1350,?_sprintf+2
 21042  0025FE  C09E  F079         	movff	_receivePrintEventVerbose$1350+1,?_sprintf+3
 21043  002602  C0EC  F07A         	movff	_vscpType,?_sprintf+4
 21044  002606  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21045  002608  EC8D  F00B         	call	_sprintf	;wreg free
 21046                           
 21047                           ; BSR set to: 0
 21048                           ;main.c: 1813: putsUSART(wrkbuf);
 21049  00260C  0E01               	movlw	high _wrkbuf
 21050  00260E  0100               	movlb	0	; () banked
 21051  002610  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21052  002612  0E76               	movlw	low _wrkbuf
 21053  002614  6F61               	movwf	?_putsUSART& (0+255),b
 21054  002616  EC84  F029         	call	_putsUSART	;wreg free
 21055                           
 21056                           ;main.c: 1814: putsUSART((char *) ",nodeid=");
 21057  00261A  0E7E               	movlw	high STR_148
 21058  00261C  0100               	movlb	0	; () banked
 21059  00261E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21060  002620  0EC4               	movlw	low STR_148
 21061  002622  6F61               	movwf	?_putsUSART& (0+255),b
 21062  002624  EC84  F029         	call	_putsUSART	;wreg free
 21063                           
 21064                           ;main.c: 1815: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 21065  002628  0100               	movlb	0	; () banked
 21066  00262A  67E4               	tstfsz	_bHex& (0+255),b
 21067  00262C  D004               	goto	l14780
 21068                           
 21069                           ; BSR set to: 0
 21070  00262E  0E7F               	movlw	high STR_57
 21071  002630  6FA0               	movwf	(_receivePrintEventVerbose$1355+1)& (0+255),b
 21072  002632  0EEE               	movlw	low STR_57
 21073  002634  D003               	goto	L31
 21074  002636                     l14780:
 21075                           
 21076                           ; BSR set to: 0
 21077  002636  0E7F               	movlw	high STR_56
 21078  002638  6FA0               	movwf	(_receivePrintEventVerbose$1355+1)& (0+255),b
 21079  00263A  0E65               	movlw	low STR_56
 21080  00263C                     L31:
 21081  00263C  6F9F               	movwf	_receivePrintEventVerbose$1355& (0+255),b
 21082                           
 21083                           ; BSR set to: 0
 21084  00263E  0E01               	movlw	high _wrkbuf
 21085  002640  0100               	movlb	0	; () banked
 21086  002642  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21087  002644  0E76               	movlw	low _wrkbuf
 21088  002646  6F76               	movwf	?_sprintf& (0+255),b
 21089  002648  C09F  F078         	movff	_receivePrintEventVerbose$1355,?_sprintf+2
 21090  00264C  C0A0  F079         	movff	_receivePrintEventVerbose$1355+1,?_sprintf+3
 21091  002650  C0E9  F07A         	movff	_vscpNodeId,?_sprintf+4
 21092  002654  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21093  002656  EC8D  F00B         	call	_sprintf	;wreg free
 21094                           
 21095                           ; BSR set to: 0
 21096                           ;main.c: 1816: putsUSART(wrkbuf);
 21097  00265A  0E01               	movlw	high _wrkbuf
 21098  00265C  0100               	movlb	0	; () banked
 21099  00265E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21100  002660  0E76               	movlw	low _wrkbuf
 21101  002662  6F61               	movwf	?_putsUSART& (0+255),b
 21102  002664  EC84  F029         	call	_putsUSART	;wreg free
 21103                           
 21104                           ;main.c: 1817: putsUSART((char *) ",size=");
 21105  002668  0E7F               	movlw	high STR_151
 21106  00266A  0100               	movlb	0	; () banked
 21107  00266C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21108  00266E  0E3B               	movlw	low STR_151
 21109  002670  6F61               	movwf	?_putsUSART& (0+255),b
 21110  002672  EC84  F029         	call	_putsUSART	;wreg free
 21111                           
 21112                           ;main.c: 1818: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 21113  002676  0100               	movlb	0	; () banked
 21114  002678  67E4               	tstfsz	_bHex& (0+255),b
 21115  00267A  D004               	goto	l14792
 21116                           
 21117                           ; BSR set to: 0
 21118  00267C  0E7F               	movlw	high STR_57
 21119  00267E  6FA2               	movwf	(_receivePrintEventVerbose$1360+1)& (0+255),b
 21120  002680  0EEE               	movlw	low STR_57
 21121  002682  D003               	goto	L32
 21122  002684                     l14792:
 21123                           
 21124                           ; BSR set to: 0
 21125  002684  0E7F               	movlw	high STR_56
 21126  002686  6FA2               	movwf	(_receivePrintEventVerbose$1360+1)& (0+255),b
 21127  002688  0E65               	movlw	low STR_56
 21128  00268A                     L32:
 21129  00268A  6FA1               	movwf	_receivePrintEventVerbose$1360& (0+255),b
 21130                           
 21131                           ; BSR set to: 0
 21132  00268C  0E01               	movlw	high _wrkbuf
 21133  00268E  0100               	movlb	0	; () banked
 21134  002690  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21135  002692  0E76               	movlw	low _wrkbuf
 21136  002694  6F76               	movwf	?_sprintf& (0+255),b
 21137  002696  C0A1  F078         	movff	_receivePrintEventVerbose$1360,?_sprintf+2
 21138  00269A  C0A2  F079         	movff	_receivePrintEventVerbose$1360+1,?_sprintf+3
 21139  00269E  C0EB  F07A         	movff	_vscpSize,?_sprintf+4
 21140  0026A2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21141  0026A4  EC8D  F00B         	call	_sprintf	;wreg free
 21142                           
 21143                           ; BSR set to: 0
 21144                           ;main.c: 1819: putsUSART(wrkbuf);
 21145  0026A8  0E01               	movlw	high _wrkbuf
 21146  0026AA  0100               	movlb	0	; () banked
 21147  0026AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21148  0026AE  0E76               	movlw	low _wrkbuf
 21149  0026B0  6F61               	movwf	?_putsUSART& (0+255),b
 21150  0026B2  EC84  F029         	call	_putsUSART	;wreg free
 21151                           
 21152                           ;main.c: 1820: if (vscpSize > 0) {
 21153  0026B6  0100               	movlb	0	; () banked
 21154  0026B8  51EB               	movf	_vscpSize& (0+255),w,b
 21155  0026BA  E04B               	bz	l14820
 21156                           
 21157                           ; BSR set to: 0
 21158                           ;main.c: 1821: putsUSART((char *) ",Data=");
 21159  0026BC  0E7F               	movlw	high STR_154
 21160  0026BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21161  0026C0  0E2D               	movlw	low STR_154
 21162  0026C2  6F61               	movwf	?_putsUSART& (0+255),b
 21163  0026C4  EC84  F029         	call	_putsUSART	;wreg free
 21164                           
 21165                           ;main.c: 1822: for (i = 0; i < vscpSize; i++) {
 21166  0026C8  0100               	movlb	0	; () banked
 21167  0026CA  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 21168  0026CC  D03E               	goto	l14818
 21169  0026CE                     l930:
 21170                           
 21171                           ; BSR set to: 0
 21172                           ;main.c: 1824: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 21173  0026CE  67E4               	tstfsz	_bHex& (0+255),b
 21174  0026D0  D004               	goto	l14806
 21175                           
 21176                           ; BSR set to: 0
 21177  0026D2  0E7F               	movlw	high STR_57
 21178  0026D4  6FA4               	movwf	(_receivePrintEventVerbose$1365+1)& (0+255),b
 21179  0026D6  0EEE               	movlw	low STR_57
 21180  0026D8  D003               	goto	L33
 21181  0026DA                     l14806:
 21182                           
 21183                           ; BSR set to: 0
 21184  0026DA  0E7F               	movlw	high STR_56
 21185  0026DC  6FA4               	movwf	(_receivePrintEventVerbose$1365+1)& (0+255),b
 21186  0026DE  0E65               	movlw	low STR_56
 21187  0026E0                     L33:
 21188  0026E0  6FA3               	movwf	_receivePrintEventVerbose$1365& (0+255),b
 21189                           
 21190                           ; BSR set to: 0
 21191  0026E2  0E01               	movlw	high _wrkbuf
 21192  0026E4  0100               	movlb	0	; () banked
 21193  0026E6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 21194  0026E8  0E76               	movlw	low _wrkbuf
 21195  0026EA  6F76               	movwf	?_sprintf& (0+255),b
 21196  0026EC  C0A3  F078         	movff	_receivePrintEventVerbose$1365,?_sprintf+2
 21197  0026F0  C0A4  F079         	movff	_receivePrintEventVerbose$1365+1,?_sprintf+3
 21198  0026F4  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21199  0026F6  0F34               	addlw	low _vscpData
 21200  0026F8  6ED9               	movwf	fsr2l,c
 21201  0026FA  6ADA               	clrf	fsr2h,c
 21202  0026FC  50DF               	movf	indf2,w,c
 21203  0026FE  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 21204  002700  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 21205  002702  EC8D  F00B         	call	_sprintf	;wreg free
 21206                           
 21207                           ; BSR set to: 0
 21208                           ;main.c: 1825: putsUSART(wrkbuf);
 21209  002706  0E01               	movlw	high _wrkbuf
 21210  002708  0100               	movlb	0	; () banked
 21211  00270A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21212  00270C  0E76               	movlw	low _wrkbuf
 21213  00270E  6F61               	movwf	?_putsUSART& (0+255),b
 21214  002710  EC84  F029         	call	_putsUSART	;wreg free
 21215                           
 21216                           ;main.c: 1826: if (i < (vscpSize - 1)) {
 21217  002714  0EFF               	movlw	255
 21218  002716  0100               	movlb	0	; () banked
 21219  002718  25EB               	addwf	_vscpSize& (0+255),w,b
 21220  00271A  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 21221  00271C  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 21222  00271E  0EFF               	movlw	255
 21223  002720  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 21224  002722  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 21225  002724  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 21226  002726  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 21227  002728  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 21228  00272A  0A80               	xorlw	128
 21229  00272C  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 21230  00272E  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 21231  002730  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 21232  002732  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 21233  002734  0A80               	xorlw	128
 21234  002736  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 21235  002738  E206               	bc	l14816
 21236                           
 21237                           ; BSR set to: 0
 21238                           ;main.c: 1827: putsUSART((char *) ",");
 21239  00273A  0E7F               	movlw	high STR_30
 21240  00273C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21241  00273E  0EF5               	movlw	low STR_30
 21242  002740  6F61               	movwf	?_putsUSART& (0+255),b
 21243  002742  EC84  F029         	call	_putsUSART	;wreg free
 21244  002746                     l14816:
 21245  002746  0100               	movlb	0	; () banked
 21246  002748  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 21247  00274A                     l14818:
 21248                           
 21249                           ; BSR set to: 0
 21250  00274A  51EB               	movf	_vscpSize& (0+255),w,b
 21251  00274C  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 21252  00274E  E207               	bc	l937
 21253  002750  D7BE               	goto	l930
 21254  002752                     l14820:
 21255                           
 21256                           ; BSR set to: 0
 21257                           ;main.c: 1831: putsUSART((char *) ",Data=none");
 21258  002752  0E7E               	movlw	high STR_158
 21259  002754  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21260  002756  0E92               	movlw	low STR_158
 21261  002758  6F61               	movwf	?_putsUSART& (0+255),b
 21262  00275A  EC84  F029         	call	_putsUSART	;wreg free
 21263  00275E                     l937:
 21264                           
 21265                           ;main.c: 1832: }
 21266                           ;main.c: 1833: putsUSART((char *) ">\r\n");
 21267  00275E  0E7F               	movlw	high STR_159
 21268  002760  0100               	movlb	0	; () banked
 21269  002762  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 21270  002764  0ED5               	movlw	low STR_159
 21271  002766  6F61               	movwf	?_putsUSART& (0+255),b
 21272  002768  EC84  F029         	call	_putsUSART	;wreg free
 21273                           
 21274                           ;main.c: 1834: return 1;
 21275  00276C  0E01               	movlw	1
 21276  00276E  D001               	goto	l938
 21277  002770                     l14826:
 21278                           
 21279                           ; BSR set to: 0
 21280                           ;main.c: 1835: }
 21281                           ;main.c: 1837: return 0;
 21282  002770  0E00               	movlw	0
 21283  002772                     l938:
 21284  002772  0012               	return	
 21285  002774                     __end_of_receivePrintEventVerbose:
 21286                           	opt stack 0
 21287                           tblptru	equ	0xFF8
 21288                           tblptrh	equ	0xFF7
 21289                           tblptrl	equ	0xFF6
 21290                           tablat	equ	0xFF5
 21291                           prodh	equ	0xFF4
 21292                           prodl	equ	0xFF3
 21293                           intcon	equ	0xFF2
 21294                           indf0	equ	0xFEF
 21295                           postinc0	equ	0xFEE
 21296                           fsr0h	equ	0xFEA
 21297                           fsr0l	equ	0xFE9
 21298                           wreg	equ	0xFE8
 21299                           indf1	equ	0xFE7
 21300                           postinc1	equ	0xFE6
 21301                           postdec1	equ	0xFE5
 21302                           fsr1h	equ	0xFE2
 21303                           fsr1l	equ	0xFE1
 21304                           indf2	equ	0xFDF
 21305                           postinc2	equ	0xFDE
 21306                           postdec2	equ	0xFDD
 21307                           plusw2	equ	0xFDB
 21308                           fsr2h	equ	0xFDA
 21309                           fsr2l	equ	0xFD9
 21310                           status	equ	0xFD8
 21311                           
 21312 ;; *************** function _getVSCPFrame *****************
 21313 ;; Defined at:
 21314 ;;		line 3001 in file "main.c"
 21315 ;; Parameters:    Size  Location     Type
 21316 ;;  pvscpclass      1    wreg     PTR unsigned short 
 21317 ;;		 -> vscpClass(2), 
 21318 ;;  pvscptype       1   18[BANK0 ] PTR unsigned char 
 21319 ;;		 -> vscpType(1), 
 21320 ;;  pNodeId         1   19[BANK0 ] PTR unsigned char 
 21321 ;;		 -> vscpNodeId(1), 
 21322 ;;  pPriority       1   20[BANK0 ] PTR unsigned char 
 21323 ;;		 -> vscpPriority(1), 
 21324 ;;  pSize           1   21[BANK0 ] PTR unsigned char 
 21325 ;;		 -> vscpSize(1), 
 21326 ;;  pData           1   22[BANK0 ] PTR unsigned char 
 21327 ;;		 -> vscpData(8), 
 21328 ;; Auto vars:     Size  Location     Type
 21329 ;;  pvscpclass      1   27[BANK0 ] PTR unsigned short 
 21330 ;;		 -> vscpClass(2), 
 21331 ;;  id              4   28[BANK0 ] unsigned long 
 21332 ;; Return value:  Size  Location     Type
 21333 ;;                  1    wreg      unsigned char 
 21334 ;; Registers used:
 21335 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21336 ;; Tracked objects:
 21337 ;;		On entry : F/0
 21338 ;;		On exit  : F/0
 21339 ;;		Unchanged: 0/0
 21340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21341 ;;      Params:         0       5       0       0       0       0       0
 21342 ;;      Locals:         0       5       0       0       0       0       0
 21343 ;;      Temps:          0       4       0       0       0       0       0
 21344 ;;      Totals:         0      14       0       0       0       0       0
 21345 ;;Total ram usage:       14 bytes
 21346 ;; Hardware stack levels used:    1
 21347 ;; Hardware stack levels required when called:    5
 21348 ;; This function calls:
 21349 ;;		_getCANFrame
 21350 ;; This function is called by:
 21351 ;;		_receivePrintEventVerbose
 21352 ;;		_readRegister
 21353 ;;		_readRegisterExtended
 21354 ;;		_writeRegisterExtended
 21355 ;; This function uses a non-reentrant model
 21356 ;;
 21357                           
 21358                           	psect	text53
 21359  004D1A                     __ptext53:
 21360                           	opt stack 0
 21361  004D1A                     _getVSCPFrame:
 21362                           	opt stack 22
 21363                           
 21364                           ;incstack = 0
 21365                           ;incstack = 0
 21366                           ;getVSCPFrame@pvscpclass stored from wreg
 21367  004D1A  CFE8 F07B          	movff	wreg,getVSCPFrame@pvscpclass
 21368                           
 21369                           ; BSR set to: 0
 21370                           ;main.c: 3002: uint32_t id;
 21371                           ;main.c: 3004: if (!getCANFrame(&id, pSize, pData)) {
 21372  004D1E  C075  F06E         	movff	getVSCPFrame@pSize,?_getCANFrame
 21373  004D22  C076  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+1
 21374  004D26  0E0F               	movlw	15
 21375  004D28  6F70               	movwf	(?_getCANFrame+2)& (0+255),b
 21376  004D2A  0E5F               	movlw	__accesstop+-1
 21377  004D2C  656F               	cpfsgt	(?_getCANFrame+1)& (0+255),b
 21378  004D2E  6B70               	clrf	(?_getCANFrame+2)& (0+255),b
 21379  004D30  0E7C               	movlw	getVSCPFrame@id& (0+255)
 21380  004D32  EC15  F025         	call	_getCANFrame
 21381  004D36  0900               	iorlw	0
 21382  004D38  E102               	bnz	l16138
 21383                           
 21384                           ; BSR set to: 0
 21385                           ;main.c: 3005: return 0;
 21386  004D3A  0E00               	movlw	0
 21387  004D3C  D02F               	goto	l1279
 21388  004D3E                     l16138:
 21389                           
 21390                           ; BSR set to: 0
 21391                           ;main.c: 3006: }
 21392                           ;main.c: 3008: *pNodeId = id & 0x0ff;
 21393  004D3E  5173               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 21394  004D40  6ED9               	movwf	fsr2l,c
 21395  004D42  6ADA               	clrf	fsr2h,c
 21396  004D44  C07C  FFDF         	movff	getVSCPFrame@id,indf2
 21397                           
 21398                           ;main.c: 3009: *pvscptype = (id >> 8) & 0xff;
 21399  004D48  5172               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 21400  004D4A  6ED9               	movwf	fsr2l,c
 21401  004D4C  6ADA               	clrf	fsr2h,c
 21402  004D4E  C07D  FFDF         	movff	getVSCPFrame@id+1,indf2
 21403                           
 21404                           ; BSR set to: 0
 21405                           ;main.c: 3010: *pvscpclass = (id >> 16) & 0x1ff;
 21406  004D52  0100               	movlb	0	; () banked
 21407  004D54  517E               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21408  004D56  6F77               	movwf	??_getVSCPFrame& (0+255),b
 21409  004D58  0E01               	movlw	1
 21410  004D5A  157F               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21411  004D5C  6F78               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21412  004D5E  517B               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 21413  004D60  6ED9               	movwf	fsr2l,c
 21414  004D62  6ADA               	clrf	fsr2h,c
 21415  004D64  C077  FFDE         	movff	??_getVSCPFrame,postinc2
 21416  004D68  C078  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21417                           
 21418                           ; BSR set to: 0
 21419                           ;main.c: 3011: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21420  004D6C  5174               	movf	getVSCPFrame@pPriority& (0+255),w,b
 21421  004D6E  6ED9               	movwf	fsr2l,c
 21422  004D70  6ADA               	clrf	fsr2h,c
 21423  004D72  C07C  F077         	movff	getVSCPFrame@id,??_getVSCPFrame
 21424  004D76  C07D  F078         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21425  004D7A  C07E  F079         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21426  004D7E  C07F  F07A         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21427  004D82  0E1B               	movlw	27
 21428  004D84  D005               	goto	u22240
 21429  004D86                     u22245:
 21430  004D86  90D8               	bcf	status,0,c
 21431  004D88  337A               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21432  004D8A  3379               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21433  004D8C  3378               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21434  004D8E  3377               	rrcf	??_getVSCPFrame& (0+255),f,b
 21435  004D90                     u22240:
 21436  004D90  2EE8               	decfsz	wreg,f,c
 21437  004D92  D7F9               	goto	u22245
 21438  004D94  5177               	movf	??_getVSCPFrame& (0+255),w,b
 21439  004D96  0B07               	andlw	7
 21440  004D98  6EDF               	movwf	indf2,c
 21441                           
 21442                           ; BSR set to: 0
 21443                           ;main.c: 3013: return 1;
 21444  004D9A  0E01               	movlw	1
 21445  004D9C                     l1279:
 21446                           
 21447                           ; BSR set to: 0
 21448  004D9C  0012               	return	
 21449  004D9E                     __end_of_getVSCPFrame:
 21450                           	opt stack 0
 21451                           tblptru	equ	0xFF8
 21452                           tblptrh	equ	0xFF7
 21453                           tblptrl	equ	0xFF6
 21454                           tablat	equ	0xFF5
 21455                           prodh	equ	0xFF4
 21456                           prodl	equ	0xFF3
 21457                           intcon	equ	0xFF2
 21458                           indf0	equ	0xFEF
 21459                           postinc0	equ	0xFEE
 21460                           fsr0h	equ	0xFEA
 21461                           fsr0l	equ	0xFE9
 21462                           wreg	equ	0xFE8
 21463                           indf1	equ	0xFE7
 21464                           postinc1	equ	0xFE6
 21465                           postdec1	equ	0xFE5
 21466                           fsr1h	equ	0xFE2
 21467                           fsr1l	equ	0xFE1
 21468                           indf2	equ	0xFDF
 21469                           postinc2	equ	0xFDE
 21470                           postdec2	equ	0xFDD
 21471                           plusw2	equ	0xFDB
 21472                           fsr2h	equ	0xFDA
 21473                           fsr2l	equ	0xFD9
 21474                           status	equ	0xFD8
 21475                           
 21476 ;; *************** function _getCANFrame *****************
 21477 ;; Defined at:
 21478 ;;		line 3037 in file "main.c"
 21479 ;; Parameters:    Size  Location     Type
 21480 ;;  pid             1    wreg     PTR unsigned long 
 21481 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21482 ;;  pdlc            1   14[BANK0 ] PTR unsigned char 
 21483 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21484 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 21485 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21486 ;; Auto vars:     Size  Location     Type
 21487 ;;  pid             1   17[BANK0 ] PTR unsigned long 
 21488 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21489 ;; Return value:  Size  Location     Type
 21490 ;;                  1    wreg      unsigned char 
 21491 ;; Registers used:
 21492 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21493 ;; Tracked objects:
 21494 ;;		On entry : F/0
 21495 ;;		On exit  : F/0
 21496 ;;		Unchanged: 0/0
 21497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21498 ;;      Params:         0       3       0       0       0       0       0
 21499 ;;      Locals:         0       1       0       0       0       0       0
 21500 ;;      Temps:          0       0       0       0       0       0       0
 21501 ;;      Totals:         0       4       0       0       0       0       0
 21502 ;;Total ram usage:        4 bytes
 21503 ;; Hardware stack levels used:    1
 21504 ;; Hardware stack levels required when called:    4
 21505 ;; This function calls:
 21506 ;;		_fifo_read
 21507 ;; This function is called by:
 21508 ;;		_receiveSendEventCANAL
 21509 ;;		_receiveSendMultiEventCANAL
 21510 ;;		_receiveSendEventSLCAN
 21511 ;;		_getVSCPFrame
 21512 ;; This function uses a non-reentrant model
 21513 ;;
 21514                           
 21515                           	psect	text54
 21516  004A2A                     __ptext54:
 21517                           	opt stack 0
 21518  004A2A                     _getCANFrame:
 21519                           	opt stack 24
 21520                           
 21521                           ; BSR set to: 0
 21522                           ;incstack = 0
 21523                           ;incstack = 0
 21524                           ;getCANFrame@pid stored from wreg
 21525  004A2A  CFE8 F071          	movff	wreg,getCANFrame@pid
 21526                           
 21527                           ; BSR set to: 0
 21528                           ;main.c: 3058: if ( fifo_canrxcount ) {
 21529  004A2E  502F               	movf	_fifo_canrxcount,w,c	;volatile
 21530  004A30  E013               	bz	l16156
 21531                           
 21532                           ; BSR set to: 0
 21533                           ;main.c: 3061: (INTCONbits.GIE = 0);
 21534  004A32  9EF2               	bcf	intcon,7,c	;volatile
 21535                           
 21536                           ; BSR set to: 0
 21537                           ;main.c: 3062: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21538  004A34  0E01               	movlw	high _canInputFifo
 21539  004A36  0100               	movlb	0	; () banked
 21540  004A38  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21541  004A3A  0EC6               	movlw	low _canInputFifo
 21542  004A3C  6F60               	movwf	?_fifo_read& (0+255),b
 21543  004A3E  C071  F062         	movff	getCANFrame@pid,?_fifo_read+2
 21544  004A42  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21545  004A44  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21546  004A46  0E04               	movlw	4
 21547  004A48  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21548  004A4A  ECD5  F020         	call	_fifo_read	;wreg free
 21549  004A4E  5160               	movf	?_fifo_read& (0+255),w,b
 21550  004A50  0A04               	xorlw	4
 21551  004A52  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21552  004A54  E003               	bz	l16160
 21553  004A56                     l16154:
 21554                           
 21555                           ; BSR set to: 0
 21556                           ;main.c: 3063: (INTCONbits.GIE = 1);
 21557  004A56  8EF2               	bsf	intcon,7,c	;volatile
 21558  004A58                     l16156:
 21559                           
 21560                           ; BSR set to: 0
 21561                           ;main.c: 3064: return 0;
 21562  004A58  0E00               	movlw	0
 21563  004A5A  D035               	goto	l1288
 21564  004A5C                     l16160:
 21565                           
 21566                           ; BSR set to: 0
 21567                           ;main.c: 3065: }
 21568                           ;main.c: 3068: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21569  004A5C  0E01               	movlw	high _canInputFifo
 21570  004A5E  0100               	movlb	0	; () banked
 21571  004A60  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21572  004A62  0EC6               	movlw	low _canInputFifo
 21573  004A64  6F60               	movwf	?_fifo_read& (0+255),b
 21574  004A66  C06E  F062         	movff	getCANFrame@pdlc,?_fifo_read+2
 21575  004A6A  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 21576  004A6C  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21577  004A6E  0E01               	movlw	1
 21578  004A70  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21579  004A72  ECD5  F020         	call	_fifo_read	;wreg free
 21580  004A76  0560               	decf	?_fifo_read& (0+255),w,b
 21581  004A78  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21582  004A7A  E1ED               	bnz	l16154
 21583                           
 21584                           ; BSR set to: 0
 21585                           ;main.c: 3071: }
 21586                           ;main.c: 3074: if ( *pdlc > 8 ) {
 21587  004A7C  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21588  004A7E  6ED9               	movwf	fsr2l,c
 21589  004A80  6ADA               	clrf	fsr2h,c
 21590  004A82  0E08               	movlw	8
 21591  004A84  64DF               	cpfsgt	indf2,c
 21592  004A86  D004               	goto	l16172
 21593                           
 21594                           ; BSR set to: 0
 21595                           ;main.c: 3075: *pdlc = 0;
 21596  004A88  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21597  004A8A  6ED9               	movwf	fsr2l,c
 21598  004A8C  6ADA               	clrf	fsr2h,c
 21599  004A8E  6ADF               	clrf	indf2,c
 21600  004A90                     l16172:
 21601                           
 21602                           ; BSR set to: 0
 21603                           ;main.c: 3076: }
 21604                           ;main.c: 3079: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21605  004A90  0E01               	movlw	high _canInputFifo
 21606  004A92  0100               	movlb	0	; () banked
 21607  004A94  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 21608  004A96  0EC6               	movlw	low _canInputFifo
 21609  004A98  6F60               	movwf	?_fifo_read& (0+255),b
 21610  004A9A  C06F  F062         	movff	getCANFrame@pdata,?_fifo_read+2
 21611  004A9E  C070  F063         	movff	getCANFrame@pdata+1,?_fifo_read+3
 21612  004AA2  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21613  004AA4  6ED9               	movwf	fsr2l,c
 21614  004AA6  6ADA               	clrf	fsr2h,c
 21615  004AA8  50DF               	movf	indf2,w,c
 21616  004AAA  6F64               	movwf	(?_fifo_read+4)& (0+255),b
 21617  004AAC  6B65               	clrf	(?_fifo_read+5)& (0+255),b
 21618  004AAE  ECD5  F020         	call	_fifo_read	;wreg free
 21619  004AB2  516E               	movf	getCANFrame@pdlc& (0+255),w,b
 21620  004AB4  6ED9               	movwf	fsr2l,c
 21621  004AB6  6ADA               	clrf	fsr2h,c
 21622  004AB8  50DF               	movf	indf2,w,c
 21623  004ABA  1960               	xorwf	?_fifo_read& (0+255),w,b
 21624  004ABC  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 21625  004ABE  E1CB               	bnz	l16154
 21626                           
 21627                           ; BSR set to: 0
 21628                           ;main.c: 3082: }
 21629                           ;main.c: 3084: fifo_canrxcount--;
 21630  004AC0  062F               	decf	_fifo_canrxcount,f,c	;volatile
 21631                           
 21632                           ; BSR set to: 0
 21633                           ;main.c: 3086: (INTCONbits.GIE = 1);
 21634  004AC2  8EF2               	bsf	intcon,7,c	;volatile
 21635                           
 21636                           ; BSR set to: 0
 21637                           ;main.c: 3088: return 1;
 21638  004AC4  0E01               	movlw	1
 21639  004AC6                     l1288:
 21640                           
 21641                           ; BSR set to: 0
 21642  004AC6  0012               	return	
 21643  004AC8                     __end_of_getCANFrame:
 21644                           	opt stack 0
 21645                           tblptru	equ	0xFF8
 21646                           tblptrh	equ	0xFF7
 21647                           tblptrl	equ	0xFF6
 21648                           tablat	equ	0xFF5
 21649                           prodh	equ	0xFF4
 21650                           prodl	equ	0xFF3
 21651                           intcon	equ	0xFF2
 21652                           indf0	equ	0xFEF
 21653                           postinc0	equ	0xFEE
 21654                           fsr0h	equ	0xFEA
 21655                           fsr0l	equ	0xFE9
 21656                           wreg	equ	0xFE8
 21657                           indf1	equ	0xFE7
 21658                           postinc1	equ	0xFE6
 21659                           postdec1	equ	0xFE5
 21660                           fsr1h	equ	0xFE2
 21661                           fsr1l	equ	0xFE1
 21662                           indf2	equ	0xFDF
 21663                           postinc2	equ	0xFDE
 21664                           postdec2	equ	0xFDD
 21665                           plusw2	equ	0xFDB
 21666                           fsr2h	equ	0xFDA
 21667                           fsr2l	equ	0xFD9
 21668                           status	equ	0xFD8
 21669                           
 21670 ;; *************** function _fifo_read *****************
 21671 ;; Defined at:
 21672 ;;		line 29 in file "fifo.c"
 21673 ;; Parameters:    Size  Location     Type
 21674 ;;  f               2    0[BANK0 ] PTR struct .
 21675 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21676 ;;  buf             2    2[BANK0 ] PTR const void 
 21677 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21678 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21679 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21680 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21681 ;;  nbytes          2    4[BANK0 ] unsigned short 
 21682 ;; Auto vars:     Size  Location     Type
 21683 ;;  i               2   12[BANK0 ] unsigned short 
 21684 ;;  p               2   10[BANK0 ] PTR unsigned char 
 21685 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21686 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21687 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21688 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21689 ;; Return value:  Size  Location     Type
 21690 ;;                  2    0[BANK0 ] unsigned short 
 21691 ;; Registers used:
 21692 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21693 ;; Tracked objects:
 21694 ;;		On entry : F/0
 21695 ;;		On exit  : F/0
 21696 ;;		Unchanged: 0/0
 21697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21698 ;;      Params:         0       6       0       0       0       0       0
 21699 ;;      Locals:         0       4       0       0       0       0       0
 21700 ;;      Temps:          0       4       0       0       0       0       0
 21701 ;;      Totals:         0      14       0       0       0       0       0
 21702 ;;Total ram usage:       14 bytes
 21703 ;; Hardware stack levels used:    1
 21704 ;; Hardware stack levels required when called:    3
 21705 ;; This function calls:
 21706 ;;		Nothing
 21707 ;; This function is called by:
 21708 ;;		_main
 21709 ;;		_doModeVerbose
 21710 ;;		_doModeVscp
 21711 ;;		_doModeSLCAN
 21712 ;;		_getCANFrame
 21713 ;; This function uses a non-reentrant model
 21714 ;;
 21715                           
 21716                           	psect	text55
 21717  0041AA                     __ptext55:
 21718                           	opt stack 0
 21719  0041AA                     _fifo_read:
 21720                           	opt stack 24
 21721                           
 21722                           ; BSR set to: 0
 21723                           ;fifo.c: 30: uint16_t i;
 21724                           ;fifo.c: 31: uint8_t *p;
 21725                           ;fifo.c: 32: p = buf;
 21726                           
 21727                           ; BSR set to: 0
 21728                           ;incstack = 0
 21729                           ;incstack = 0
 21730  0041AA  C062  F06A         	movff	fifo_read@buf,fifo_read@p
 21731  0041AE  C063  F06B         	movff	fifo_read@buf+1,fifo_read@p+1
 21732                           
 21733                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21734  0041B2  6B6C               	clrf	fifo_read@i& (0+255),b
 21735  0041B4  6B6D               	clrf	(fifo_read@i+1)& (0+255),b
 21736  0041B6  D04A               	goto	l10224
 21737  0041B8                     l10210:
 21738                           
 21739                           ; BSR set to: 0
 21740                           ;fifo.c: 36: if ( f->tail != f->head ) {
 21741  0041B8  EE20 F002          	lfsr	2,2
 21742  0041BC  D851               	call	PL34	;call to abstracted procedure
 21743  0041BE  18E5               	xorwf	postdec1,w,c
 21744  0041C0  CFDF FFE8          	movff	indf2,wreg
 21745  0041C4  B4D8               	btfsc	status,2,c
 21746  0041C6  18E7               	xorwf	indf1,w,c
 21747  0041C8  E03A               	bz	l1539
 21748                           
 21749                           ; BSR set to: 0
 21750                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21751  0041CA  EE20 F004          	lfsr	2,4
 21752  0041CE  5160               	movf	fifo_read@f& (0+255),w,b
 21753  0041D0  26D9               	addwf	fsr2l,f,c
 21754  0041D2  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21755  0041D4  22DA               	addwfc	fsr2h,f,c
 21756  0041D6  CFDE F066          	movff	postinc2,??_fifo_read
 21757  0041DA  CFDD F067          	movff	postdec2,??_fifo_read+1
 21758  0041DE  C060  FFD9         	movff	fifo_read@f,fsr2l
 21759  0041E2  C061  FFDA         	movff	fifo_read@f+1,fsr2h
 21760  0041E6  CFDE F068          	movff	postinc2,??_fifo_read+2
 21761  0041EA  CFDD F069          	movff	postdec2,??_fifo_read+3
 21762  0041EE  5166               	movf	??_fifo_read& (0+255),w,b
 21763  0041F0  2568               	addwf	(??_fifo_read+2)& (0+255),w,b
 21764  0041F2  6ED9               	movwf	fsr2l,c
 21765  0041F4  5167               	movf	(??_fifo_read+1)& (0+255),w,b
 21766  0041F6  2169               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21767  0041F8  6EDA               	movwf	fsr2h,c
 21768  0041FA  C06A  FFE1         	movff	fifo_read@p,fsr1l
 21769  0041FE  C06B  FFE2         	movff	fifo_read@p+1,fsr1h
 21770  004202  CFDF FFE7          	movff	indf2,indf1
 21771                           
 21772                           ; BSR set to: 0
 21773  004206  4B6A               	infsnz	fifo_read@p& (0+255),f,b
 21774  004208  2B6B               	incf	(fifo_read@p+1)& (0+255),f,b
 21775                           
 21776                           ; BSR set to: 0
 21777                           ;fifo.c: 38: f->tail++;
 21778  00420A  EE20 F004          	lfsr	2,4
 21779  00420E  5160               	movf	fifo_read@f& (0+255),w,b
 21780  004210  26D9               	addwf	fsr2l,f,c
 21781  004212  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21782  004214  22DA               	addwfc	fsr2h,f,c
 21783  004216  2ADE               	incf	postinc2,f,c
 21784  004218  0E00               	movlw	0
 21785  00421A  22DD               	addwfc	postdec2,f,c
 21786                           
 21787                           ; BSR set to: 0
 21788                           ;fifo.c: 39: if (f->tail >= f->size) {
 21789  00421C  EE20 F006          	lfsr	2,6
 21790  004220  D81F               	call	PL34	;call to abstracted procedure
 21791  004222  5CE5               	subwf	postdec1,w,c
 21792  004224  E102               	bnz	u12535
 21793  004226  50DF               	movf	indf2,w,c
 21794  004228  5CE7               	subwf	indf1,w,c
 21795  00422A                     u12535:
 21796  00422A  E30E               	bnc	l10222
 21797                           
 21798                           ; BSR set to: 0
 21799                           ;fifo.c: 40: f->tail = 0;
 21800  00422C  EE20 F004          	lfsr	2,4
 21801  004230  5160               	movf	fifo_read@f& (0+255),w,b
 21802  004232  26D9               	addwf	fsr2l,f,c
 21803  004234  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21804  004236  22DA               	addwfc	fsr2h,f,c
 21805  004238  6ADE               	clrf	postinc2,c
 21806  00423A  6ADD               	clrf	postdec2,c
 21807  00423C  D005               	goto	l10222
 21808  00423E                     l1539:
 21809                           
 21810                           ; BSR set to: 0
 21811                           ;fifo.c: 43: else {
 21812                           ;fifo.c: 44: return i;
 21813  00423E  C06C  F060         	movff	fifo_read@i,?_fifo_read
 21814  004242  C06D  F061         	movff	fifo_read@i+1,?_fifo_read+1
 21815  004246  D00B               	goto	l1542
 21816  004248                     l10222:
 21817                           
 21818                           ; BSR set to: 0
 21819  004248  4B6C               	infsnz	fifo_read@i& (0+255),f,b
 21820  00424A  2B6D               	incf	(fifo_read@i+1)& (0+255),f,b
 21821  00424C                     l10224:
 21822                           
 21823                           ; BSR set to: 0
 21824  00424C  5164               	movf	fifo_read@nbytes& (0+255),w,b
 21825  00424E  5D6C               	subwf	fifo_read@i& (0+255),w,b
 21826  004250  5165               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 21827  004252  596D               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21828  004254  E3B1               	bnc	l10210
 21829                           
 21830                           ; BSR set to: 0
 21831                           ;fifo.c: 45: }
 21832                           ;fifo.c: 47: }
 21833                           ;fifo.c: 49: return nbytes;
 21834  004256  C064  F060         	movff	fifo_read@nbytes,?_fifo_read
 21835  00425A  C065  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21836  00425E                     l1542:
 21837                           
 21838                           ; BSR set to: 0
 21839  00425E  0012               	return	
 21840  004260                     __end_of_fifo_read:
 21841                           	opt stack 0
 21842  004260                     PL34:
 21843                           	opt stack 24
 21844  004260  5160               	movf	fifo_read@f& (0+255),w,b
 21845  004262  26D9               	addwf	fsr2l,f,c
 21846  004264  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21847  004266  22DA               	addwfc	fsr2h,f,c
 21848  004268  EE10 F004          	lfsr	1,4
 21849  00426C  5160               	movf	fifo_read@f& (0+255),w,b
 21850  00426E  26E1               	addwf	fsr1l,f,c
 21851  004270  5161               	movf	(fifo_read@f+1)& (0+255),w,b
 21852  004272  22E2               	addwfc	fsr1h,f,c
 21853  004274  52E6               	movf	postinc1,f,c
 21854  004276  52DE               	movf	postinc2,f,c
 21855  004278  50DD               	movf	postdec2,w,c
 21856  00427A  0012               	return	
 21857  00427C                     __end_ofPL34:
 21858                           	opt stack 0
 21859                           tblptru	equ	0xFF8
 21860                           tblptrh	equ	0xFF7
 21861                           tblptrl	equ	0xFF6
 21862                           tablat	equ	0xFF5
 21863                           prodh	equ	0xFF4
 21864                           prodl	equ	0xFF3
 21865                           intcon	equ	0xFF2
 21866                           indf0	equ	0xFEF
 21867                           postinc0	equ	0xFEE
 21868                           fsr0h	equ	0xFEA
 21869                           fsr0l	equ	0xFE9
 21870                           wreg	equ	0xFE8
 21871                           indf1	equ	0xFE7
 21872                           postinc1	equ	0xFE6
 21873                           postdec1	equ	0xFE5
 21874                           fsr1h	equ	0xFE2
 21875                           fsr1l	equ	0xFE1
 21876                           indf2	equ	0xFDF
 21877                           postinc2	equ	0xFDE
 21878                           postdec2	equ	0xFDD
 21879                           plusw2	equ	0xFDB
 21880                           fsr2h	equ	0xFDA
 21881                           fsr2l	equ	0xFD9
 21882                           status	equ	0xFD8
 21883                           
 21884 ;; *************** function _sprintf *****************
 21885 ;; Defined at:
 21886 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21887 ;; Parameters:    Size  Location     Type
 21888 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 21889 ;;		 -> wrkbuf(80), 
 21890 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 21891 ;;		 -> STR_201(3), STR_200(7), STR_194(3), STR_193(7), 
 21892 ;;		 -> STR_190(4), STR_189(8), STR_186(4), STR_185(8), 
 21893 ;;		 -> STR_182(4), STR_181(8), STR_178(4), STR_177(8), 
 21894 ;;		 -> STR_174(4), STR_173(7), STR_170(4), STR_169(7), 
 21895 ;;		 -> STR_166(4), STR_165(7), STR_162(4), STR_161(7), 
 21896 ;;		 -> STR_156(3), STR_155(7), STR_153(3), STR_152(7), 
 21897 ;;		 -> STR_150(3), STR_149(7), STR_147(3), STR_146(7), 
 21898 ;;		 -> STR_144(3), STR_143(7), STR_141(3), STR_140(7), 
 21899 ;;		 -> STR_84(3), STR_83(7), STR_68(3), STR_67(7), 
 21900 ;;		 -> STR_66(3), STR_65(7), STR_62(3), STR_61(7), 
 21901 ;;		 -> STR_59(3), STR_58(7), STR_57(3), STR_56(7), 
 21902 ;; Auto vars:     Size  Location     Type
 21903 ;;  idx             1   33[BANK0 ] unsigned char 
 21904 ;;  _val            4   45[BANK0 ] struct .
 21905 ;;  flag            2   50[BANK0 ] unsigned short 
 21906 ;;  width           2   43[BANK0 ] int 
 21907 ;;  prec            2   41[BANK0 ] int 
 21908 ;;  c               1   49[BANK0 ] char 
 21909 ;;  ap              1   40[BANK0 ] PTR void [1]
 21910 ;;		 -> ?_sprintf(2), 
 21911 ;; Return value:  Size  Location     Type
 21912 ;;                  2   22[BANK0 ] int 
 21913 ;; Registers used:
 21914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21915 ;; Tracked objects:
 21916 ;;		On entry : F/0
 21917 ;;		On exit  : F/0
 21918 ;;		Unchanged: 0/0
 21919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21920 ;;      Params:         0       8       0       0       0       0       0
 21921 ;;      Locals:         0      19       0       0       0       0       0
 21922 ;;      Temps:          0       3       0       0       0       0       0
 21923 ;;      Totals:         0      30       0       0       0       0       0
 21924 ;;Total ram usage:       30 bytes
 21925 ;; Hardware stack levels used:    1
 21926 ;; Hardware stack levels required when called:    4
 21927 ;; This function calls:
 21928 ;;		_isdigit
 21929 ;;		___lldiv
 21930 ;;		___llmod
 21931 ;;		___wmul
 21932 ;; This function is called by:
 21933 ;;		_doModeVerbose
 21934 ;;		_receivePrintEventVerbose
 21935 ;;		_printStatistics
 21936 ;;		_printErrors
 21937 ;; This function uses a non-reentrant model
 21938 ;;
 21939                           
 21940                           	psect	text56
 21941  00171A                     __ptext56:
 21942                           	opt stack 0
 21943  00171A                     _sprintf:
 21944                           	opt stack 25
 21945                           
 21946                           ; BSR set to: 0
 21947                           ;doprnt.c: 494: va_list ap;
 21948                           ;doprnt.c: 499: signed char c;
 21949                           ;doprnt.c: 501: int width;
 21950                           ;doprnt.c: 504: int prec;
 21951                           ;doprnt.c: 508: unsigned short flag;
 21952                           ;doprnt.c: 527: union {
 21953                           ;doprnt.c: 528: unsigned long _val;
 21954                           ;doprnt.c: 529: struct {
 21955                           ;doprnt.c: 530: const char * _cp;
 21956                           ;doprnt.c: 531: unsigned _len;
 21957                           ;doprnt.c: 532: } _str;
 21958                           ;doprnt.c: 533: } _val;
 21959                           ;doprnt.c: 542: *ap = __va_start();
 21960                           
 21961                           ; BSR set to: 0
 21962                           ;incstack = 0
 21963                           ;incstack = 0
 21964  00171A  0E7A               	movlw	low (?_sprintf+4)
 21965  00171C  6F88               	movwf	sprintf@ap& (0+255),b
 21966                           
 21967                           ;doprnt.c: 545: while(c = *f++) {
 21968  00171E  D32C               	goto	l15510
 21969  001720                     l15176:
 21970                           
 21971                           ; BSR set to: 0
 21972                           ;doprnt.c: 547: if(c != '%')
 21973  001720  5191               	movf	sprintf@c& (0+255),w,b
 21974  001722  0A25               	xorlw	37
 21975  001724  E009               	bz	l1626
 21976                           
 21977                           ; BSR set to: 0
 21978                           ;doprnt.c: 549: {
 21979                           ;doprnt.c: 550: ((*sp++ = (c)));
 21980  001726  C076  FFD9         	movff	sprintf@sp,fsr2l
 21981  00172A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21982  00172E  C091  FFDF         	movff	sprintf@c,indf2
 21983                           
 21984                           ; BSR set to: 0
 21985  001732  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21986  001734  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21987                           
 21988                           ;doprnt.c: 551: continue;
 21989  001736  D320               	goto	l15510
 21990  001738                     l1626:
 21991                           
 21992                           ; BSR set to: 0
 21993                           ;doprnt.c: 552: }
 21994                           ;doprnt.c: 555: width = 0;
 21995  001738  6B8B               	clrf	sprintf@width& (0+255),b
 21996  00173A  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21997                           
 21998                           ;doprnt.c: 557: flag = 0;
 21999  00173C  6B92               	clrf	sprintf@flag& (0+255),b
 22000  00173E  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 22001  001740  D009               	goto	l15192
 22002  001742                     l15182:
 22003                           
 22004                           ; BSR set to: 0
 22005                           ;doprnt.c: 563: flag |= 0x08;
 22006  001742  8792               	bsf	sprintf@flag& (0+255),3,b
 22007  001744  D005               	goto	L34
 22008  001746                     l15184:
 22009                           
 22010                           ; BSR set to: 0
 22011                           ;doprnt.c: 570: flag |= 0x01;
 22012  001746  8192               	bsf	sprintf@flag& (0+255),0,b
 22013  001748  D003               	goto	L34
 22014  00174A                     l15186:
 22015                           
 22016                           ; BSR set to: 0
 22017                           ;doprnt.c: 583: flag |= 0x800;
 22018  00174A  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 22019  00174C  D001               	goto	L34
 22020  00174E                     l15188:
 22021                           
 22022                           ; BSR set to: 0
 22023                           ;doprnt.c: 589: flag |= 0x04;
 22024  00174E  8592               	bsf	sprintf@flag& (0+255),2,b
 22025  001750                     L34:
 22026                           
 22027                           ;doprnt.c: 590: f++;
 22028  001750  4B78               	infsnz	sprintf@f& (0+255),f,b
 22029  001752  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22030  001754                     l15192:
 22031                           
 22032                           ; BSR set to: 0
 22033  001754  C078  FFF6         	movff	sprintf@f,tblptrl
 22034  001758  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22035  00175C  0008               	tblrd		*
 22036  00175E  50F5               	movf	tablat,w,c
 22037                           
 22038                           ; Switch size 1, requested type "space"
 22039                           ; Number of cases is 4, Range of values is 32 to 48
 22040                           ; switch strategies available:
 22041                           ; Name         Instructions Cycles
 22042                           ; simple_byte           13     7 (average)
 22043                           ;	Chosen strategy is simple_byte
 22044  001760  0A20               	xorlw	32	; case 32
 22045  001762  E0F1               	bz	l15184
 22046  001764  0A03               	xorlw	3	; case 35
 22047  001766  E0F1               	bz	l15186
 22048  001768  0A0E               	xorlw	14	; case 45
 22049  00176A  E0EB               	bz	l15182
 22050  00176C  0A1D               	xorlw	29	; case 48
 22051  00176E  E0EF               	bz	l15188
 22052                           
 22053                           ; BSR set to: 0
 22054                           ;doprnt.c: 602: if(flag & 0x08)
 22055  001770  B792               	btfsc	sprintf@flag& (0+255),3,b
 22056                           
 22057                           ; BSR set to: 0
 22058                           ;doprnt.c: 603: flag &= ~0x04;
 22059  001772  9592               	bcf	sprintf@flag& (0+255),2,b
 22060                           
 22061                           ; BSR set to: 0
 22062                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 22063  001774  C078  FFF6         	movff	sprintf@f,tblptrl
 22064  001778  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22065  00177C  0008               	tblrd		*
 22066  00177E  50F5               	movf	tablat,w,c
 22067  001780  EC15  F02C         	call	_isdigit
 22068  001784  E325               	bnc	l15208
 22069                           
 22070                           ; BSR set to: 0
 22071                           ;doprnt.c: 607: width = 0;
 22072  001786  6B8B               	clrf	sprintf@width& (0+255),b
 22073  001788  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22074  00178A                     l15200:
 22075                           
 22076                           ; BSR set to: 0
 22077                           ;doprnt.c: 609: width *= 10;
 22078  00178A  C08B  F060         	movff	sprintf@width,?___wmul
 22079  00178E  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 22080  001792  6B63               	clrf	(?___wmul+3)& (0+255),b
 22081  001794  0E0A               	movlw	10
 22082  001796  6F62               	movwf	(?___wmul+2)& (0+255),b
 22083  001798  ECB7  F02B         	call	___wmul	;wreg free
 22084  00179C  C060  F08B         	movff	?___wmul,sprintf@width
 22085  0017A0  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 22086                           
 22087                           ; BSR set to: 0
 22088                           ;doprnt.c: 610: width += *f++ - '0';
 22089  0017A4  C078  FFF6         	movff	sprintf@f,tblptrl
 22090  0017A8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22091  0017AC  0008               	tblrd		*
 22092  0017AE  CFF5 F07E          	movff	tablat,??_sprintf
 22093  0017B2  0ED0               	movlw	208
 22094  0017B4  257E               	addwf	??_sprintf& (0+255),w,b
 22095  0017B6  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22096  0017B8  6B80               	clrf	(??_sprintf+2)& (0+255),b
 22097  0017BA  0EFF               	movlw	255
 22098  0017BC  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 22099  0017BE  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22100  0017C0  278B               	addwf	sprintf@width& (0+255),f,b
 22101  0017C2  5180               	movf	(??_sprintf+2)& (0+255),w,b
 22102  0017C4  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22103                           
 22104                           ; BSR set to: 0
 22105                           
 22106                           ; BSR set to: 0
 22107                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 22108  0017C6  DB36               	call	PL76	;call to abstracted procedure
 22109  0017C8  EC15  F02C         	call	_isdigit
 22110  0017CC  E314               	bnc	l15216
 22111  0017CE  D7DD               	goto	l15200
 22112  0017D0                     l15208:
 22113                           
 22114                           ; BSR set to: 0
 22115  0017D0  C078  FFF6         	movff	sprintf@f,tblptrl
 22116  0017D4  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22117  0017D8  0008               	tblrd		*
 22118  0017DA  50F5               	movf	tablat,w,c
 22119  0017DC  0A2A               	xorlw	42
 22120  0017DE  E10B               	bnz	l15216
 22121                           
 22122                           ; BSR set to: 0
 22123                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 22124  0017E0  5188               	movf	sprintf@ap& (0+255),w,b
 22125  0017E2  6ED9               	movwf	fsr2l,c
 22126  0017E4  6ADA               	clrf	fsr2h,c
 22127  0017E6  CFDE F08B          	movff	postinc2,sprintf@width
 22128  0017EA  CFDD F08C          	movff	postdec2,sprintf@width+1
 22129                           
 22130                           ; BSR set to: 0
 22131  0017EE  0E02               	movlw	2
 22132  0017F0  2788               	addwf	sprintf@ap& (0+255),f,b
 22133                           
 22134                           ; BSR set to: 0
 22135                           ;doprnt.c: 615: f++;
 22136  0017F2  4B78               	infsnz	sprintf@f& (0+255),f,b
 22137  0017F4  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22138  0017F6                     l15216:
 22139                           
 22140                           ; BSR set to: 0
 22141                           ;doprnt.c: 617: }
 22142                           ;doprnt.c: 620: if(*f == '.') {
 22143  0017F6  C078  FFF6         	movff	sprintf@f,tblptrl
 22144  0017FA  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22145  0017FE  0008               	tblrd		*
 22146  001800  50F5               	movf	tablat,w,c
 22147  001802  0A2E               	xorlw	46
 22148  001804  E137               	bnz	l1642
 22149                           
 22150                           ; BSR set to: 0
 22151                           ;doprnt.c: 621: flag |= 0x4000;
 22152  001806  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 22153                           
 22154                           ;doprnt.c: 622: f++;
 22155                           
 22156                           ; BSR set to: 0
 22157                           ;doprnt.c: 624: if(*f == '*') {
 22158  001808  DB15               	call	PL76	;call to abstracted procedure
 22159  00180A  0A2A               	xorlw	42
 22160  00180C  E10C               	bnz	l1643
 22161                           
 22162                           ; BSR set to: 0
 22163                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 22164  00180E  5188               	movf	sprintf@ap& (0+255),w,b
 22165  001810  6ED9               	movwf	fsr2l,c
 22166  001812  6ADA               	clrf	fsr2h,c
 22167  001814  CFDE F089          	movff	postinc2,sprintf@prec
 22168  001818  CFDD F08A          	movff	postdec2,sprintf@prec+1
 22169                           
 22170                           ; BSR set to: 0
 22171  00181C  0E02               	movlw	2
 22172  00181E  2788               	addwf	sprintf@ap& (0+255),f,b
 22173                           
 22174                           ; BSR set to: 0
 22175                           ;doprnt.c: 626: f++;
 22176  001820  4B78               	infsnz	sprintf@f& (0+255),f,b
 22177  001822  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22178                           
 22179                           ;doprnt.c: 627: } else
 22180  001824  D088               	goto	l15286
 22181  001826                     l1643:
 22182                           
 22183                           ; BSR set to: 0
 22184                           ;doprnt.c: 629: {
 22185                           ;doprnt.c: 630: prec = 0;
 22186  001826  6B89               	clrf	sprintf@prec& (0+255),b
 22187  001828  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22188                           
 22189                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 22190  00182A  D01A               	goto	l15232
 22191  00182C                     l15228:
 22192                           
 22193                           ; BSR set to: 0
 22194                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 22195  00182C  C089  F060         	movff	sprintf@prec,?___wmul
 22196  001830  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 22197  001834  6B63               	clrf	(?___wmul+3)& (0+255),b
 22198  001836  0E0A               	movlw	10
 22199  001838  6F62               	movwf	(?___wmul+2)& (0+255),b
 22200  00183A  ECB7  F02B         	call	___wmul	;wreg free
 22201  00183E  C078  FFF6         	movff	sprintf@f,tblptrl
 22202  001842  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22203  001846  0008               	tblrd		*
 22204  001848  50F5               	movf	tablat,w,c
 22205  00184A  2760               	addwf	?___wmul& (0+255),f,b
 22206  00184C  0E00               	movlw	0
 22207  00184E  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 22208  001850  0ED0               	movlw	208
 22209  001852  2560               	addwf	?___wmul& (0+255),w,b
 22210  001854  6F89               	movwf	sprintf@prec& (0+255),b
 22211  001856  0EFF               	movlw	255
 22212  001858  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 22213  00185A  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 22214                           
 22215                           ; BSR set to: 0
 22216  00185C  4B78               	infsnz	sprintf@f& (0+255),f,b
 22217  00185E  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22218  001860                     l15232:
 22219                           
 22220                           ; BSR set to: 0
 22221  001860  C078  FFF6         	movff	sprintf@f,tblptrl
 22222  001864  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22223  001868  0008               	tblrd		*
 22224  00186A  50F5               	movf	tablat,w,c
 22225  00186C  EC15  F02C         	call	_isdigit
 22226  001870  E362               	bnc	l15286
 22227  001872  D7DC               	goto	l15228
 22228  001874                     l1642:
 22229                           
 22230                           ; BSR set to: 0
 22231                           ;doprnt.c: 635: prec = 0;
 22232  001874  6B89               	clrf	sprintf@prec& (0+255),b
 22233  001876  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22234  001878  D05E               	goto	l15286
 22235  00187A                     l15234:
 22236                           
 22237                           ; BSR set to: 0
 22238                           ;doprnt.c: 652: flag |= 0x10;
 22239  00187A  8992               	bsf	sprintf@flag& (0+255),4,b
 22240                           
 22241                           ;doprnt.c: 653: goto loop;
 22242  00187C  D05C               	goto	l15286
 22243  00187E                     l15236:
 22244                           
 22245                           ; BSR set to: 0
 22246                           ;doprnt.c: 700: flag |= 0x40;
 22247  00187E  8D92               	bsf	sprintf@flag& (0+255),6,b
 22248                           
 22249                           ;doprnt.c: 702: break;
 22250  001880  D06F               	goto	l15288
 22251  001882                     l15238:
 22252                           
 22253                           ; BSR set to: 0
 22254                           ;doprnt.c: 723: flag |= 0x20;
 22255  001882  8B92               	bsf	sprintf@flag& (0+255),5,b
 22256  001884                     l1659:
 22257                           
 22258                           ; BSR set to: 0
 22259                           ;doprnt.c: 730: flag |= 0x80;
 22260  001884  8F92               	bsf	sprintf@flag& (0+255),7,b
 22261                           
 22262                           ;doprnt.c: 732: break;
 22263  001886  D06C               	goto	l15288
 22264  001888                     l15240:
 22265                           
 22266                           ; BSR set to: 0
 22267                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 22268  001888  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22269  00188A  1189               	iorwf	sprintf@prec& (0+255),w,b
 22270  00188C  E009               	bz	l15246
 22271                           
 22272                           ; BSR set to: 0
 22273  00188E  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 22274  001890  5D89               	subwf	sprintf@prec& (0+255),w,b
 22275  001892  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 22276  001894  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 22277  001896  E204               	bc	l15246
 22278                           
 22279                           ; BSR set to: 0
 22280                           ;doprnt.c: 763: _val._str._len = prec;
 22281  001898  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 22282  00189C  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 22283  0018A0                     l15246:
 22284                           
 22285                           ; BSR set to: 0
 22286                           ;doprnt.c: 766: if(width > _val._str._len)
 22287  0018A0  518B               	movf	sprintf@width& (0+255),w,b
 22288  0018A2  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 22289  0018A4  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22290  0018A6  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22291  0018A8  E207               	bc	l1662
 22292                           
 22293                           ; BSR set to: 0
 22294                           ;doprnt.c: 767: width -= _val._str._len;
 22295  0018AA  EE20  F08E         	lfsr	2,sprintf@_val+1
 22296  0018AE  50DE               	movf	postinc2,w,c
 22297  0018B0  5F8B               	subwf	sprintf@width& (0+255),f,b
 22298  0018B2  50DD               	movf	postdec2,w,c
 22299  0018B4  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22300  0018B6  D002               	goto	l1663
 22301  0018B8                     l1662:
 22302                           
 22303                           ; BSR set to: 0
 22304                           ;doprnt.c: 768: else
 22305                           ;doprnt.c: 769: width = 0;
 22306  0018B8  6B8B               	clrf	sprintf@width& (0+255),b
 22307  0018BA  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22308  0018BC                     l1663:
 22309                           
 22310                           ; BSR set to: 0
 22311                           ;doprnt.c: 771: if(!(flag & 0x08))
 22312  0018BC  A792               	btfss	sprintf@flag& (0+255),3,b
 22313  0018BE  D004               	goto	l15256
 22314  0018C0  D015               	goto	l15264
 22315  0018C2                     l15252:
 22316                           
 22317                           ; BSR set to: 0
 22318                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22319  0018C2  DAB1               	call	PL62	;call to abstracted procedure
 22320                           
 22321                           ; BSR set to: 0
 22322  0018C4  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22323  0018C6  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22324  0018C8                     l15256:
 22325                           
 22326                           ; BSR set to: 0
 22327  0018C8  078B               	decf	sprintf@width& (0+255),f,b
 22328  0018CA  DAC2               	call	PL98	;call to abstracted procedure
 22329  0018CC  B4D8               	btfsc	status,2,c
 22330  0018CE  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22331  0018D0  E00D               	bz	l15264
 22332  0018D2  D7F7               	goto	l15252
 22333  0018D4                     l15258:
 22334                           
 22335                           ; BSR set to: 0
 22336                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22337  0018D4  518D               	movf	sprintf@_val& (0+255),w,b
 22338  0018D6  6ED9               	movwf	fsr2l,c
 22339  0018D8  6ADA               	clrf	fsr2h,c
 22340  0018DA  C076  FFE1         	movff	sprintf@sp,fsr1l
 22341  0018DE  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 22342  0018E2  CFDF FFE7          	movff	indf2,indf1
 22343                           
 22344                           ; BSR set to: 0
 22345  0018E6  2B8D               	incf	sprintf@_val& (0+255),f,b
 22346                           
 22347                           ; BSR set to: 0
 22348  0018E8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22349  0018EA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22350  0018EC                     l15264:
 22351                           
 22352                           ; BSR set to: 0
 22353  0018EC  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 22354  0018EE  A0D8               	btfss	status,0,c
 22355  0018F0  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 22356  0018F2  0100               	movlb	0	; () banked
 22357  0018F4  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 22358  0018F6  B4D8               	btfsc	status,2,c
 22359  0018F8  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 22360  0018FA  E1EC               	bnz	l15258
 22361                           
 22362                           ; BSR set to: 0
 22363                           ;doprnt.c: 779: if(flag & 0x08)
 22364  0018FC  B792               	btfsc	sprintf@flag& (0+255),3,b
 22365  0018FE  D004               	goto	l15272
 22366  001900  D23B               	goto	l15510
 22367  001902                     l15268:
 22368                           
 22369                           ; BSR set to: 0
 22370                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22371  001902  DA91               	call	PL62	;call to abstracted procedure
 22372                           
 22373                           ; BSR set to: 0
 22374  001904  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22375  001906  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22376  001908                     l15272:
 22377                           
 22378                           ; BSR set to: 0
 22379  001908  078B               	decf	sprintf@width& (0+255),f,b
 22380  00190A  DAA2               	call	PL98	;call to abstracted procedure
 22381  00190C  B4D8               	btfsc	status,2,c
 22382  00190E  298C               	incf	(sprintf@width+1)& (0+255),w,b
 22383  001910  E101 D232          	bz	l15510
 22384  001914  D7F6               	goto	l15268
 22385  001916                     l15274:
 22386                           
 22387                           ; BSR set to: 0
 22388                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22389  001916  5188               	movf	sprintf@ap& (0+255),w,b
 22390  001918  6ED9               	movwf	fsr2l,c
 22391  00191A  6ADA               	clrf	fsr2h,c
 22392  00191C  50DF               	movf	indf2,w,c
 22393  00191E  6F91               	movwf	sprintf@c& (0+255),b
 22394                           
 22395                           ; BSR set to: 0
 22396  001920  0E02               	movlw	2
 22397  001922  2788               	addwf	sprintf@ap& (0+255),f,b
 22398  001924                     l15278:
 22399                           
 22400                           ; BSR set to: 0
 22401                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22402  001924  0E91               	movlw	low sprintf@c
 22403  001926  6F8D               	movwf	sprintf@_val& (0+255),b
 22404                           
 22405                           ; BSR set to: 0
 22406                           ;doprnt.c: 815: _val._str._len = 1;
 22407  001928  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22408  00192A  0E01               	movlw	1
 22409  00192C  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 22410                           
 22411                           ;doprnt.c: 816: goto dostring;
 22412  00192E  D7AC               	goto	l15240
 22413  001930                     l15282:
 22414                           
 22415                           ; BSR set to: 0
 22416                           ;doprnt.c: 827: flag |= 0xC0;
 22417  001930  0EC0               	movlw	192
 22418  001932  1392               	iorwf	sprintf@flag& (0+255),f,b
 22419                           
 22420                           ;doprnt.c: 828: break;
 22421  001934  D015               	goto	l15288
 22422  001936                     l15286:
 22423                           
 22424                           ; BSR set to: 0
 22425  001936  DA6C               	call	PL58	;call to abstracted procedure
 22426  001938  5191               	movf	sprintf@c& (0+255),w,b
 22427                           
 22428                           ; Switch size 1, requested type "space"
 22429                           ; Number of cases is 9, Range of values is 0 to 120
 22430                           ; switch strategies available:
 22431                           ; Name         Instructions Cycles
 22432                           ; simple_byte           28    15 (average)
 22433                           ;	Chosen strategy is simple_byte
 22434  00193A  E101 D220          	bz	l15512
 22435  00193E  0A58               	xorlw	88	; case 88
 22436  001940  E0A0               	bz	l15238
 22437  001942  0A3B               	xorlw	59	; case 99
 22438  001944  E0E8               	bz	l15274
 22439  001946  0A07               	xorlw	7	; case 100
 22440  001948  E00B               	bz	l15288
 22441  00194A  0A0D               	xorlw	13	; case 105
 22442  00194C  E009               	bz	l15288
 22443  00194E  0A05               	xorlw	5	; case 108
 22444  001950  E094               	bz	l15234
 22445  001952  0A03               	xorlw	3	; case 111
 22446  001954  E094               	bz	l15236
 22447  001956  0A1A               	xorlw	26	; case 117
 22448  001958  E0EB               	bz	l15282
 22449  00195A  0A0D               	xorlw	13	; case 120
 22450  00195C  E093               	bz	l1659
 22451  00195E  D7E2               	goto	l15278
 22452  001960                     l15288:
 22453                           
 22454                           ; BSR set to: 0
 22455                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22456  001960  5192               	movf	sprintf@flag& (0+255),w,b
 22457  001962  0BC0               	andlw	192
 22458  001964  E120               	bnz	l1678
 22459                           
 22460                           ; BSR set to: 0
 22461                           ;doprnt.c: 1260: {
 22462                           ;doprnt.c: 1262: if(flag & 0x10)
 22463  001966  A992               	btfss	sprintf@flag& (0+255),4,b
 22464  001968  D003               	goto	l15296
 22465                           
 22466                           ; BSR set to: 0
 22467                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22468  00196A  5188               	movf	sprintf@ap& (0+255),w,b
 22469                           
 22470                           ; BSR set to: 0
 22471  00196C  DA46               	call	PL52	;call to abstracted procedure
 22472  00196E  D00D               	goto	L35
 22473  001970                     l15296:
 22474                           
 22475                           ; BSR set to: 0
 22476                           ;doprnt.c: 1264: else
 22477                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22478  001970  5188               	movf	sprintf@ap& (0+255),w,b
 22479  001972  6ED9               	movwf	fsr2l,c
 22480  001974  6ADA               	clrf	fsr2h,c
 22481  001976  CFDE F08D          	movff	postinc2,sprintf@_val
 22482  00197A  CFDD F08E          	movff	postdec2,sprintf@_val+1
 22483  00197E  0E00               	movlw	0
 22484  001980  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22485  001982  0EFF               	movlw	-1
 22486  001984  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 22487  001986  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 22488                           
 22489                           ; BSR set to: 0
 22490  001988  0E02               	movlw	2
 22491  00198A                     L35:
 22492  00198A  2788               	addwf	sprintf@ap& (0+255),f,b
 22493                           
 22494                           ; BSR set to: 0
 22495                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22496  00198C  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 22497  00198E  D01F               	goto	l15314
 22498                           
 22499                           ; BSR set to: 0
 22500                           ;doprnt.c: 1269: flag |= 0x03;
 22501  001990  0E03               	movlw	3
 22502  001992  1392               	iorwf	sprintf@flag& (0+255),f,b
 22503                           
 22504                           ; BSR set to: 0
 22505                           ;doprnt.c: 1270: _val._val = -_val._val;
 22506  001994  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 22507  001996  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 22508  001998  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 22509  00199A  6D8D               	negf	sprintf@_val& (0+255),b
 22510  00199C  0E00               	movlw	0
 22511  00199E  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22512  0019A0  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22513  0019A2  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22514  0019A4  D014               	goto	l15314
 22515  0019A6                     l1678:
 22516                           
 22517                           ; BSR set to: 0
 22518                           ;doprnt.c: 1275: else
 22519                           ;doprnt.c: 1280: {
 22520                           ;doprnt.c: 1288: if(flag & 0x10)
 22521  0019A6  A992               	btfss	sprintf@flag& (0+255),4,b
 22522  0019A8  D003               	goto	l15310
 22523                           
 22524                           ; BSR set to: 0
 22525                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22526  0019AA  5188               	movf	sprintf@ap& (0+255),w,b
 22527                           
 22528                           ; BSR set to: 0
 22529  0019AC  DA26               	call	PL52	;call to abstracted procedure
 22530  0019AE  D00E               	goto	L36
 22531  0019B0                     l15310:
 22532                           
 22533                           ; BSR set to: 0
 22534                           ;doprnt.c: 1290: else
 22535                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22536  0019B0  5188               	movf	sprintf@ap& (0+255),w,b
 22537  0019B2  6ED9               	movwf	fsr2l,c
 22538  0019B4  6ADA               	clrf	fsr2h,c
 22539  0019B6  CFDE F07E          	movff	postinc2,??_sprintf
 22540  0019BA  CFDD F07F          	movff	postdec2,??_sprintf+1
 22541  0019BE  C07E  F08D         	movff	??_sprintf,sprintf@_val
 22542  0019C2  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 22543  0019C6  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 22544  0019C8  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 22545                           
 22546                           ; BSR set to: 0
 22547  0019CA  0E02               	movlw	2
 22548  0019CC                     L36:
 22549  0019CC  2788               	addwf	sprintf@ap& (0+255),f,b
 22550  0019CE                     l15314:
 22551                           
 22552                           ; BSR set to: 0
 22553                           ;doprnt.c: 1294: }
 22554                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22555  0019CE  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22556  0019D0  1189               	iorwf	sprintf@prec& (0+255),w,b
 22557  0019D2  E15C               	bnz	l15364
 22558                           
 22559                           ; BSR set to: 0
 22560  0019D4  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 22561  0019D6  118D               	iorwf	sprintf@_val& (0+255),w,b
 22562  0019D8  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22563  0019DA  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22564  0019DC  E157               	bnz	l15364
 22565                           
 22566                           ; BSR set to: 0
 22567                           ;doprnt.c: 1298: prec++;
 22568  0019DE  4B89               	infsnz	sprintf@prec& (0+255),f,b
 22569  0019E0  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 22570  0019E2  D054               	goto	l15364
 22571  0019E4                     l15320:
 22572                           
 22573                           ; BSR set to: 0
 22574                           ;doprnt.c: 1309: case 0xC0:
 22575                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22576  0019E4  0E01               	movlw	1
 22577  0019E6  6F91               	movwf	sprintf@c& (0+255),b
 22578  0019E8                     l15322:
 22579                           
 22580                           ; BSR set to: 0
 22581  0019E8  5191               	movf	sprintf@c& (0+255),w,b
 22582  0019EA  0A0A               	xorlw	10
 22583  0019EC  E058               	bz	l15366
 22584                           
 22585                           ; BSR set to: 0
 22586                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22587  0019EE  5191               	movf	sprintf@c& (0+255),w,b
 22588  0019F0  0D04               	mullw	4
 22589  0019F2  0EE0               	movlw	low _dpowers
 22590  0019F4  24F3               	addwf	prodl,w,c
 22591  0019F6  6EF6               	movwf	tblptrl,c
 22592  0019F8  0E6F               	movlw	high _dpowers
 22593  0019FA  20F4               	addwfc	prodh,w,c
 22594  0019FC  6EF7               	movwf	tblptrh,c
 22595  0019FE  0009               	tblrd		*+
 22596  001A00  50F5               	movf	tablat,w,c
 22597  001A02  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22598  001A04  0009               	tblrd		*+
 22599  001A06  50F5               	movf	tablat,w,c
 22600  001A08  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22601  001A0A  0009               	tblrd		*+
 22602  001A0C  50F5               	movf	tablat,w,c
 22603  001A0E  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22604  001A10  0009               	tblrd		*+
 22605  001A12  50F5               	movf	tablat,w,c
 22606  001A14  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22607  001A16  E343               	bnc	l15366
 22608                           
 22609                           ; BSR set to: 0
 22610  001A18  2B91               	incf	sprintf@c& (0+255),f,b
 22611  001A1A  D7E6               	goto	l15322
 22612  001A1C                     l15334:
 22613                           
 22614                           ; BSR set to: 0
 22615                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22616  001A1C  0E01               	movlw	1
 22617  001A1E  6F91               	movwf	sprintf@c& (0+255),b
 22618  001A20                     l15336:
 22619                           
 22620                           ; BSR set to: 0
 22621  001A20  5191               	movf	sprintf@c& (0+255),w,b
 22622  001A22  0A08               	xorlw	8
 22623  001A24  E03C               	bz	l15366
 22624                           
 22625                           ; BSR set to: 0
 22626                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22627  001A26  5191               	movf	sprintf@c& (0+255),w,b
 22628  001A28  0D04               	mullw	4
 22629  001A2A  0E08               	movlw	low _hexpowers
 22630  001A2C  24F3               	addwf	prodl,w,c
 22631  001A2E  6EF6               	movwf	tblptrl,c
 22632  001A30  0E70               	movlw	high _hexpowers
 22633  001A32  20F4               	addwfc	prodh,w,c
 22634  001A34  6EF7               	movwf	tblptrh,c
 22635  001A36  0009               	tblrd		*+
 22636  001A38  50F5               	movf	tablat,w,c
 22637  001A3A  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22638  001A3C  0009               	tblrd		*+
 22639  001A3E  50F5               	movf	tablat,w,c
 22640  001A40  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22641  001A42  0009               	tblrd		*+
 22642  001A44  50F5               	movf	tablat,w,c
 22643  001A46  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22644  001A48  0009               	tblrd		*+
 22645  001A4A  50F5               	movf	tablat,w,c
 22646  001A4C  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22647  001A4E  E327               	bnc	l15366
 22648                           
 22649                           ; BSR set to: 0
 22650  001A50  2B91               	incf	sprintf@c& (0+255),f,b
 22651  001A52  D7E6               	goto	l15336
 22652  001A54                     l15348:
 22653                           
 22654                           ; BSR set to: 0
 22655                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22656  001A54  0E01               	movlw	1
 22657  001A56  6F91               	movwf	sprintf@c& (0+255),b
 22658  001A58                     l15350:
 22659                           
 22660                           ; BSR set to: 0
 22661  001A58  5191               	movf	sprintf@c& (0+255),w,b
 22662  001A5A  0A0C               	xorlw	12
 22663  001A5C  E020               	bz	l15366
 22664                           
 22665                           ; BSR set to: 0
 22666                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22667  001A5E  5191               	movf	sprintf@c& (0+255),w,b
 22668  001A60  0D04               	mullw	4
 22669  001A62  0EB0               	movlw	low _octpowers
 22670  001A64  24F3               	addwf	prodl,w,c
 22671  001A66  6EF6               	movwf	tblptrl,c
 22672  001A68  0E6F               	movlw	high _octpowers
 22673  001A6A  20F4               	addwfc	prodh,w,c
 22674  001A6C  6EF7               	movwf	tblptrh,c
 22675  001A6E  0009               	tblrd		*+
 22676  001A70  50F5               	movf	tablat,w,c
 22677  001A72  5D8D               	subwf	sprintf@_val& (0+255),w,b
 22678  001A74  0009               	tblrd		*+
 22679  001A76  50F5               	movf	tablat,w,c
 22680  001A78  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22681  001A7A  0009               	tblrd		*+
 22682  001A7C  50F5               	movf	tablat,w,c
 22683  001A7E  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22684  001A80  0009               	tblrd		*+
 22685  001A82  50F5               	movf	tablat,w,c
 22686  001A84  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22687  001A86  E30B               	bnc	l15366
 22688                           
 22689                           ; BSR set to: 0
 22690  001A88  2B91               	incf	sprintf@c& (0+255),f,b
 22691  001A8A  D7E6               	goto	l15350
 22692  001A8C                     l15364:
 22693                           
 22694                           ; BSR set to: 0
 22695  001A8C  5192               	movf	sprintf@flag& (0+255),w,b
 22696  001A8E  0BC0               	andlw	192
 22697                           
 22698                           ; Switch size 1, requested type "space"
 22699                           ; Number of cases is 4, Range of values is 0 to 192
 22700                           ; switch strategies available:
 22701                           ; Name         Instructions Cycles
 22702                           ; simple_byte           13     7 (average)
 22703                           ;	Chosen strategy is simple_byte
 22704  001A90  E0A9               	bz	l15320
 22705  001A92  0A40               	xorlw	64	; case 64
 22706  001A94  E0DF               	bz	l15348
 22707  001A96  0AC0               	xorlw	192	; case 128
 22708  001A98  E0C1               	bz	l15334
 22709  001A9A  0A40               	xorlw	64	; case 192
 22710  001A9C  E0A3               	bz	l15320
 22711  001A9E                     l15366:
 22712                           
 22713                           ; BSR set to: 0
 22714                           ;doprnt.c: 1346: if(c < prec)
 22715  001A9E  0E80               	movlw	128
 22716  001AA0  BF91               	btfsc	sprintf@c& (0+255),7,b
 22717  001AA2  0E7F               	movlw	127
 22718  001AA4  6F7E               	movwf	??_sprintf& (0+255),b
 22719  001AA6  5189               	movf	sprintf@prec& (0+255),w,b
 22720  001AA8  5D91               	subwf	sprintf@c& (0+255),w,b
 22721  001AAA  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22722  001AAC  0A80               	xorlw	128
 22723  001AAE  597E               	subwfb	??_sprintf& (0+255),w,b
 22724  001AB0  E203               	bc	l15370
 22725                           
 22726                           ; BSR set to: 0
 22727                           ;doprnt.c: 1347: c = prec;
 22728  001AB2  C089  F091         	movff	sprintf@prec,sprintf@c
 22729  001AB6  D00F               	goto	l15374
 22730  001AB8                     l15370:
 22731                           
 22732                           ; BSR set to: 0
 22733                           ;doprnt.c: 1348: else if(prec < c)
 22734  001AB8  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22735  001ABA  0A80               	xorlw	128
 22736  001ABC  6F7E               	movwf	??_sprintf& (0+255),b
 22737  001ABE  5191               	movf	sprintf@c& (0+255),w,b
 22738  001AC0  5D89               	subwf	sprintf@prec& (0+255),w,b
 22739  001AC2  0E80               	movlw	128
 22740  001AC4  BF91               	btfsc	sprintf@c& (0+255),7,b
 22741  001AC6  0E7F               	movlw	127
 22742  001AC8  597E               	subwfb	??_sprintf& (0+255),w,b
 22743  001ACA  E205               	bc	l15374
 22744                           
 22745                           ; BSR set to: 0
 22746                           ;doprnt.c: 1349: prec = c;
 22747  001ACC  5191               	movf	sprintf@c& (0+255),w,b
 22748  001ACE  6F89               	movwf	sprintf@prec& (0+255),b
 22749  001AD0  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 22750  001AD2  BF89               	btfsc	sprintf@prec& (0+255),7,b
 22751  001AD4  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22752  001AD6                     l15374:
 22753                           
 22754                           ; BSR set to: 0
 22755                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22756  001AD6  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22757  001AD8  118B               	iorwf	sprintf@width& (0+255),w,b
 22758  001ADA  E006               	bz	l15380
 22759                           
 22760                           ; BSR set to: 0
 22761  001ADC  5192               	movf	sprintf@flag& (0+255),w,b
 22762  001ADE  0B03               	andlw	3
 22763  001AE0  E003               	bz	l15380
 22764                           
 22765                           ; BSR set to: 0
 22766                           ;doprnt.c: 1353: width--;
 22767  001AE2  078B               	decf	sprintf@width& (0+255),f,b
 22768  001AE4  A0D8               	btfss	status,0,c
 22769  001AE6  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22770  001AE8                     l15380:
 22771                           
 22772                           ; BSR set to: 0
 22773                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22774  001AE8  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 22775  001AEA  D010               	goto	l15386
 22776                           
 22777                           ; BSR set to: 0
 22778                           ;doprnt.c: 1356: if(width > prec)
 22779  001AEC  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22780  001AEE  0A80               	xorlw	128
 22781  001AF0  6F7E               	movwf	??_sprintf& (0+255),b
 22782  001AF2  518B               	movf	sprintf@width& (0+255),w,b
 22783  001AF4  5D89               	subwf	sprintf@prec& (0+255),w,b
 22784  001AF6  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22785  001AF8  0A80               	xorlw	128
 22786  001AFA  597E               	subwfb	??_sprintf& (0+255),w,b
 22787  001AFC  E205               	bc	l1706
 22788                           
 22789                           ; BSR set to: 0
 22790                           ;doprnt.c: 1357: width -= prec;
 22791  001AFE  5189               	movf	sprintf@prec& (0+255),w,b
 22792  001B00  5F8B               	subwf	sprintf@width& (0+255),f,b
 22793  001B02  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 22794  001B04  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22795  001B06  D002               	goto	l15386
 22796  001B08                     l1706:
 22797                           
 22798                           ; BSR set to: 0
 22799                           ;doprnt.c: 1358: else
 22800                           ;doprnt.c: 1359: width = 0;
 22801  001B08  6B8B               	clrf	sprintf@width& (0+255),b
 22802  001B0A  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22803  001B0C                     l15386:
 22804                           
 22805                           ; BSR set to: 0
 22806                           ;doprnt.c: 1360: }
 22807                           ;doprnt.c: 1364: if((flag & (
 22808                           ;doprnt.c: 1366: 0x04|
 22809                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22810  001B0C  0EC4               	movlw	196
 22811  001B0E  D94D               	call	PL14	;call to abstracted procedure
 22812  001B10  0E40               	movlw	64
 22813  001B12  B4D8               	btfsc	status,2,c
 22814  001B14  197E               	xorwf	??_sprintf& (0+255),w,b
 22815  001B16  E107               	bnz	l15392
 22816                           
 22817                           ; BSR set to: 0
 22818                           ;doprnt.c: 1369: if(width)
 22819  001B18  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22820  001B1A  118B               	iorwf	sprintf@width& (0+255),w,b
 22821  001B1C  E018               	bz	l15398
 22822                           
 22823                           ; BSR set to: 0
 22824                           ;doprnt.c: 1370: width--;
 22825  001B1E  078B               	decf	sprintf@width& (0+255),f,b
 22826  001B20  A0D8               	btfss	status,0,c
 22827  001B22  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22828  001B24  D014               	goto	l15398
 22829  001B26                     l15392:
 22830                           
 22831                           ; BSR set to: 0
 22832                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22833  001B26  0EC0               	movlw	192
 22834  001B28  D940               	call	PL14	;call to abstracted procedure
 22835  001B2A  0E80               	movlw	128
 22836  001B2C  B4D8               	btfsc	status,2,c
 22837  001B2E  197E               	xorwf	??_sprintf& (0+255),w,b
 22838  001B30  E10E               	bnz	l15398
 22839                           
 22840                           ; BSR set to: 0
 22841                           ;doprnt.c: 1379: if(width > 2)
 22842  001B32  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22843  001B34  0A80               	xorlw	128
 22844  001B36  0F80               	addlw	-128
 22845  001B38  0E03               	movlw	3
 22846  001B3A  B4D8               	btfsc	status,2,c
 22847  001B3C  5D8B               	subwf	sprintf@width& (0+255),w,b
 22848  001B3E  E305               	bnc	l1712
 22849                           
 22850                           ; BSR set to: 0
 22851                           ;doprnt.c: 1380: width -= 2;
 22852  001B40  0EFE               	movlw	254
 22853  001B42  278B               	addwf	sprintf@width& (0+255),f,b
 22854  001B44  0EFF               	movlw	255
 22855  001B46  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 22856  001B48  D002               	goto	l15398
 22857  001B4A                     l1712:
 22858                           
 22859                           ; BSR set to: 0
 22860                           ;doprnt.c: 1381: else
 22861                           ;doprnt.c: 1382: width = 0;
 22862  001B4A  6B8B               	clrf	sprintf@width& (0+255),b
 22863  001B4C  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22864  001B4E                     l15398:
 22865                           
 22866                           ; BSR set to: 0
 22867                           ;doprnt.c: 1383: }
 22868                           ;doprnt.c: 1388: if(width > c)
 22869  001B4E  0E80               	movlw	128
 22870  001B50  BF91               	btfsc	sprintf@c& (0+255),7,b
 22871  001B52  0E7F               	movlw	127
 22872  001B54  6F7E               	movwf	??_sprintf& (0+255),b
 22873  001B56  518B               	movf	sprintf@width& (0+255),w,b
 22874  001B58  5D91               	subwf	sprintf@c& (0+255),w,b
 22875  001B5A  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22876  001B5C  0A80               	xorlw	128
 22877  001B5E  597E               	subwfb	??_sprintf& (0+255),w,b
 22878  001B60  E207               	bc	l1714
 22879                           
 22880                           ; BSR set to: 0
 22881                           ;doprnt.c: 1389: width -= c;
 22882  001B62  5191               	movf	sprintf@c& (0+255),w,b
 22883  001B64  5F8B               	subwf	sprintf@width& (0+255),f,b
 22884  001B66  0E00               	movlw	0
 22885  001B68  BF91               	btfsc	sprintf@c& (0+255),7,b
 22886  001B6A  0EFF               	movlw	255
 22887  001B6C  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 22888  001B6E  D002               	goto	l1715
 22889  001B70                     l1714:
 22890                           
 22891                           ; BSR set to: 0
 22892                           ;doprnt.c: 1390: else
 22893                           ;doprnt.c: 1391: width = 0;
 22894  001B70  6B8B               	clrf	sprintf@width& (0+255),b
 22895  001B72  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 22896  001B74                     l1715:
 22897                           
 22898                           ; BSR set to: 0
 22899                           ;doprnt.c: 1394: if(flag & 0x04) {
 22900  001B74  A592               	btfss	sprintf@flag& (0+255),2,b
 22901  001B76  D03C               	goto	l15436
 22902                           
 22903                           ; BSR set to: 0
 22904                           ;doprnt.c: 1399: if(flag & 0x03)
 22905  001B78  5192               	movf	sprintf@flag& (0+255),w,b
 22906  001B7A  0B03               	andlw	3
 22907  001B7C  E009               	bz	l1717
 22908                           
 22909                           ; BSR set to: 0
 22910                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22911  001B7E  C076  FFD9         	movff	sprintf@sp,fsr2l
 22912  001B82  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22913  001B86  0E2D               	movlw	45
 22914  001B88  6EDF               	movwf	indf2,c
 22915  001B8A                     l15406:
 22916                           
 22917                           ; BSR set to: 0
 22918  001B8A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22919  001B8C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22920  001B8E  D022               	goto	l15428
 22921  001B90                     l1717:
 22922                           
 22923                           ; BSR set to: 0
 22924                           ;doprnt.c: 1403: else
 22925                           ;doprnt.c: 1406: if(flag & 0x01)
 22926  001B90  A192               	btfss	sprintf@flag& (0+255),0,b
 22927  001B92  D006               	goto	l15412
 22928                           
 22929                           ; BSR set to: 0
 22930                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22931  001B94  C076  FFD9         	movff	sprintf@sp,fsr2l
 22932  001B98  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22933  001B9C  0E20               	movlw	32
 22934  001B9E  D7F4               	goto	L37
 22935  001BA0                     l15412:
 22936                           
 22937                           ; BSR set to: 0
 22938                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22939  001BA0  0EC0               	movlw	192
 22940  001BA2  D903               	call	PL14	;call to abstracted procedure
 22941  001BA4  0E80               	movlw	128
 22942  001BA6  B4D8               	btfsc	status,2,c
 22943  001BA8  197E               	xorwf	??_sprintf& (0+255),w,b
 22944  001BAA  E114               	bnz	l15428
 22945                           
 22946                           ; BSR set to: 0
 22947                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22948  001BAC  C076  FFD9         	movff	sprintf@sp,fsr2l
 22949  001BB0  D94A               	call	PL86	;call to abstracted procedure
 22950                           
 22951                           ; BSR set to: 0
 22952  001BB2  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22953  001BB4  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22954                           
 22955                           ; BSR set to: 0
 22956                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22957  001BB6  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22958  001BB8  D003               	goto	l15422
 22959                           
 22960                           ; BSR set to: 0
 22961  001BBA  6B83               	clrf	(_sprintf$2086+1)& (0+255),b
 22962  001BBC  0E78               	movlw	120
 22963  001BBE  D002               	goto	L38
 22964  001BC0                     l15422:
 22965                           
 22966                           ; BSR set to: 0
 22967  001BC0  6B83               	clrf	(_sprintf$2086+1)& (0+255),b
 22968  001BC2  0E58               	movlw	88
 22969  001BC4                     L38:
 22970  001BC4  6F82               	movwf	_sprintf$2086& (0+255),b
 22971                           
 22972                           ; BSR set to: 0
 22973  001BC6  C076  FFD9         	movff	sprintf@sp,fsr2l
 22974  001BCA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22975  001BCE  C082  FFDF         	movff	_sprintf$2086,indf2
 22976  001BD2  D7DB               	goto	l15406
 22977  001BD4                     l15428:
 22978                           
 22979                           ; BSR set to: 0
 22980                           ;doprnt.c: 1419: }
 22981                           ;doprnt.c: 1422: if(width)
 22982  001BD4  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22983  001BD6  118B               	iorwf	sprintf@width& (0+255),w,b
 22984  001BD8  E101 D0B9          	bz	l15500
 22985                           
 22986                           ; BSR set to: 0
 22987                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22988  001BDC  C076  FFD9         	movff	sprintf@sp,fsr2l
 22989  001BE0  D932               	call	PL86	;call to abstracted procedure
 22990                           
 22991                           ; BSR set to: 0
 22992  001BE2  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22993  001BE4  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22994                           
 22995                           ; BSR set to: 0
 22996                           ;doprnt.c: 1425: while(--width);
 22997  001BE6  078B               	decf	sprintf@width& (0+255),f,b
 22998  001BE8  A0D8               	btfss	status,0,c
 22999  001BEA  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23000  001BEC  0100               	movlb	0	; () banked
 23001  001BEE  D7F2               	goto	l15428
 23002  001BF0                     l15436:
 23003                           
 23004                           ; BSR set to: 0
 23005                           ;doprnt.c: 1429: {
 23006                           ;doprnt.c: 1431: if(width
 23007                           ;doprnt.c: 1433: && !(flag & 0x08)
 23008                           ;doprnt.c: 1435: )
 23009  001BF0  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23010  001BF2  118B               	iorwf	sprintf@width& (0+255),w,b
 23011  001BF4  A4D8               	btfss	status,2,c
 23012                           
 23013                           ; BSR set to: 0
 23014  001BF6  B792               	btfsc	sprintf@flag& (0+255),3,b
 23015  001BF8  D004               	goto	l15446
 23016  001BFA                     l15440:
 23017                           
 23018                           ; BSR set to: 0
 23019                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 23020  001BFA  C076  FFD9         	movff	sprintf@sp,fsr2l
 23021                           
 23022                           ; BSR set to: 0
 23023                           
 23024                           ; BSR set to: 0
 23025                           ;doprnt.c: 1438: while(--width);
 23026  001BFE  D8F0               	call	PL36	;call to abstracted procedure
 23027  001C00  E1FC               	bnz	l15440
 23028  001C02                     l15446:
 23029                           
 23030                           ; BSR set to: 0
 23031                           ;doprnt.c: 1445: if(flag & 0x03)
 23032  001C02  5192               	movf	sprintf@flag& (0+255),w,b
 23033  001C04  0B03               	andlw	3
 23034  001C06  E009               	bz	l1733
 23035                           
 23036                           ; BSR set to: 0
 23037                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 23038  001C08  C076  FFD9         	movff	sprintf@sp,fsr2l
 23039  001C0C  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23040  001C10  0E2D               	movlw	45
 23041  001C12  6EDF               	movwf	indf2,c
 23042                           
 23043                           ; BSR set to: 0
 23044  001C14  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23045  001C16  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23046  001C18  D008               	goto	l15456
 23047  001C1A                     l1733:
 23048                           
 23049                           ; BSR set to: 0
 23050                           ;doprnt.c: 1450: else if(flag & 0x01)
 23051  001C1A  A192               	btfss	sprintf@flag& (0+255),0,b
 23052  001C1C  D006               	goto	l15456
 23053                           
 23054                           ; BSR set to: 0
 23055                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 23056  001C1E  C076  FFD9         	movff	sprintf@sp,fsr2l
 23057  001C22  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23058  001C26  0E20               	movlw	32
 23059  001C28  D7F4               	goto	L39
 23060  001C2A                     l15456:
 23061                           
 23062                           ; BSR set to: 0
 23063                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 23064  001C2A  0EC0               	movlw	192
 23065  001C2C  D8BE               	call	PL14	;call to abstracted procedure
 23066  001C2E  0E40               	movlw	64
 23067  001C30  B4D8               	btfsc	status,2,c
 23068  001C32  197E               	xorwf	??_sprintf& (0+255),w,b
 23069  001C34  E106               	bnz	l15462
 23070                           
 23071                           ; BSR set to: 0
 23072                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 23073  001C36  C076  FFD9         	movff	sprintf@sp,fsr2l
 23074  001C3A  D905               	call	PL86	;call to abstracted procedure
 23075  001C3C                     l15460:
 23076                           
 23077                           ; BSR set to: 0
 23078  001C3C  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23079  001C3E  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23080  001C40  D086               	goto	l15500
 23081  001C42                     l15462:
 23082                           
 23083                           ; BSR set to: 0
 23084                           ;doprnt.c: 1457: else
 23085                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 23086  001C42  0EC0               	movlw	192
 23087  001C44  D8B2               	call	PL14	;call to abstracted procedure
 23088  001C46  0E80               	movlw	128
 23089  001C48  B4D8               	btfsc	status,2,c
 23090  001C4A  197E               	xorwf	??_sprintf& (0+255),w,b
 23091  001C4C  E001 D07F          	bnz	l15500
 23092                           
 23093                           ; BSR set to: 0
 23094                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 23095  001C50  C076  FFD9         	movff	sprintf@sp,fsr2l
 23096  001C54  D8F8               	call	PL86	;call to abstracted procedure
 23097                           
 23098                           ; BSR set to: 0
 23099  001C56  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23100  001C58  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23101                           
 23102                           ; BSR set to: 0
 23103                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 23104  001C5A  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23105  001C5C  D003               	goto	l15472
 23106                           
 23107                           ; BSR set to: 0
 23108  001C5E  6B85               	clrf	(_sprintf$2087+1)& (0+255),b
 23109  001C60  0E78               	movlw	120
 23110  001C62  D002               	goto	L40
 23111  001C64                     l15472:
 23112                           
 23113                           ; BSR set to: 0
 23114  001C64  6B85               	clrf	(_sprintf$2087+1)& (0+255),b
 23115  001C66  0E58               	movlw	88
 23116  001C68                     L40:
 23117  001C68  6F84               	movwf	_sprintf$2087& (0+255),b
 23118                           
 23119                           ; BSR set to: 0
 23120  001C6A  C076  FFD9         	movff	sprintf@sp,fsr2l
 23121  001C6E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23122  001C72  C084  FFDF         	movff	_sprintf$2087,indf2
 23123  001C76  D7E2               	goto	l15460
 23124  001C78                     l15478:
 23125                           
 23126                           ; BSR set to: 0
 23127                           ;doprnt.c: 1493: case 0xC0:
 23128                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 23129  001C78  C089  F07E         	movff	sprintf@prec,??_sprintf
 23130  001C7C  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23131  001C80  90D8               	bcf	status,0,c
 23132  001C82  377E               	rlcf	??_sprintf& (0+255),f,b
 23133  001C84  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23134  001C86  90D8               	bcf	status,0,c
 23135  001C88  377E               	rlcf	??_sprintf& (0+255),f,b
 23136  001C8A  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23137  001C8C  0EE0               	movlw	low _dpowers
 23138  001C8E  257E               	addwf	??_sprintf& (0+255),w,b
 23139  001C90  6EF6               	movwf	tblptrl,c
 23140  001C92  0E6F               	movlw	high _dpowers
 23141  001C94  D87B               	call	PL10	;call to abstracted procedure
 23142  001C96  C08D  F060         	movff	sprintf@_val,?___lldiv
 23143  001C9A  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23144  001C9E  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23145  001CA2  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23146  001CA6  EC4B  F027         	call	___lldiv	;wreg free
 23147  001CAA  C063  F070         	movff	?___lldiv+3,?___llmod+3
 23148  001CAE  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 23149  001CB2  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 23150  001CB6  C060  F06D         	movff	?___lldiv,?___llmod
 23151  001CBA  0E0A               	movlw	10
 23152  001CBC  6F71               	movwf	(?___llmod+4)& (0+255),b
 23153  001CBE  0E00               	movlw	0
 23154  001CC0  6B72               	clrf	(?___llmod+5)& (0+255),b
 23155  001CC2  6B73               	clrf	(?___llmod+6)& (0+255),b
 23156  001CC4  6B74               	clrf	(?___llmod+7)& (0+255),b
 23157  001CC6  ECC9  F028         	call	___llmod	;wreg free
 23158  001CCA  516D               	movf	?___llmod& (0+255),w,b
 23159  001CCC  D02D               	goto	L41
 23160  001CCE                     l15480:
 23161                           
 23162                           ; BSR set to: 0
 23163                           ;doprnt.c: 1506: {
 23164                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 23165  001CCE  D875               	call	PL18	;call to abstracted procedure
 23166  001CD0  0E08               	movlw	low _hexpowers
 23167  001CD2  257E               	addwf	??_sprintf& (0+255),w,b
 23168  001CD4  6EF6               	movwf	tblptrl,c
 23169  001CD6  0E70               	movlw	high _hexpowers
 23170  001CD8  D859               	call	PL10	;call to abstracted procedure
 23171  001CDA  EC4B  F027         	call	___lldiv	;wreg free
 23172  001CDE  5160               	movf	?___lldiv& (0+255),w,b
 23173  001CE0  0B0F               	andlw	15
 23174  001CE2  6F81               	movwf	sprintf@idx& (0+255),b
 23175                           
 23176                           ; BSR set to: 0
 23177                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 23178  001CE4  BB92               	btfsc	sprintf@flag& (0+255),5,b
 23179  001CE6  D004               	goto	l15486
 23180                           
 23181                           ; BSR set to: 0
 23182  001CE8  0E7E               	movlw	high STR_264
 23183  001CEA  6F87               	movwf	(_sprintf$2093+1)& (0+255),b
 23184  001CEC  0E2D               	movlw	low STR_264
 23185  001CEE  D003               	goto	L42
 23186  001CF0                     l15486:
 23187                           
 23188                           ; BSR set to: 0
 23189  001CF0  0E7E               	movlw	high STR_263
 23190  001CF2  6F87               	movwf	(_sprintf$2093+1)& (0+255),b
 23191  001CF4  0E1C               	movlw	low STR_263
 23192  001CF6                     L42:
 23193  001CF6  6F86               	movwf	_sprintf$2093& (0+255),b
 23194                           
 23195                           ; BSR set to: 0
 23196  001CF8  5181               	movf	sprintf@idx& (0+255),w,b
 23197  001CFA  2586               	addwf	_sprintf$2093& (0+255),w,b
 23198  001CFC  6F7E               	movwf	??_sprintf& (0+255),b
 23199  001CFE  0E00               	movlw	0
 23200  001D00  2187               	addwfc	(_sprintf$2093+1)& (0+255),w,b
 23201  001D02  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23202  001D04  C07E  FFF6         	movff	??_sprintf,tblptrl
 23203  001D08  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 23204  001D0C  0008               	tblrd		*
 23205  001D0E  CFF5 F091          	movff	tablat,sprintf@c
 23206                           
 23207                           ;doprnt.c: 1515: }
 23208                           ;doprnt.c: 1517: break;
 23209  001D12  D016               	goto	l15496
 23210  001D14                     l15490:
 23211                           
 23212                           ; BSR set to: 0
 23213                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 23214  001D14  D852               	call	PL18	;call to abstracted procedure
 23215  001D16  0EB0               	movlw	low _octpowers
 23216  001D18  257E               	addwf	??_sprintf& (0+255),w,b
 23217  001D1A  6EF6               	movwf	tblptrl,c
 23218  001D1C  0E6F               	movlw	high _octpowers
 23219  001D1E  D836               	call	PL10	;call to abstracted procedure
 23220  001D20  EC4B  F027         	call	___lldiv	;wreg free
 23221  001D24  5160               	movf	?___lldiv& (0+255),w,b
 23222  001D26  0B07               	andlw	7
 23223  001D28                     L41:
 23224  001D28  0F30               	addlw	48
 23225  001D2A  6F91               	movwf	sprintf@c& (0+255),b
 23226                           
 23227                           ;doprnt.c: 1527: break;
 23228  001D2C  D009               	goto	l15496
 23229  001D2E                     l15494:
 23230                           
 23231                           ; BSR set to: 0
 23232  001D2E  5192               	movf	sprintf@flag& (0+255),w,b
 23233  001D30  0BC0               	andlw	192
 23234                           
 23235                           ; Switch size 1, requested type "space"
 23236                           ; Number of cases is 4, Range of values is 0 to 192
 23237                           ; switch strategies available:
 23238                           ; Name         Instructions Cycles
 23239                           ; simple_byte           13     7 (average)
 23240                           ;	Chosen strategy is simple_byte
 23241  001D32  E0A2               	bz	l15478
 23242  001D34  0A40               	xorlw	64	; case 64
 23243  001D36  E0EE               	bz	l15490
 23244  001D38  0AC0               	xorlw	192	; case 128
 23245  001D3A  E0C9               	bz	l15480
 23246  001D3C  0A40               	xorlw	64	; case 192
 23247  001D3E  E09C               	bz	l15478
 23248  001D40                     l15496:
 23249                           
 23250                           ; BSR set to: 0
 23251                           ;doprnt.c: 1531: ((*sp++ = (c)));
 23252  001D40  C076  FFD9         	movff	sprintf@sp,fsr2l
 23253  001D44  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23254  001D48  C091  FFDF         	movff	sprintf@c,indf2
 23255  001D4C  D777               	goto	l15460
 23256  001D4E                     l15500:
 23257                           
 23258                           ; BSR set to: 0
 23259  001D4E  0789               	decf	sprintf@prec& (0+255),f,b
 23260  001D50  A0D8               	btfss	status,0,c
 23261  001D52  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 23262  001D54  0100               	movlb	0	; () banked
 23263  001D56  2989               	incf	sprintf@prec& (0+255),w,b
 23264  001D58  B4D8               	btfsc	status,2,c
 23265  001D5A  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 23266  001D5C  E1E8               	bnz	l15494
 23267                           
 23268                           ; BSR set to: 0
 23269                           ;doprnt.c: 1532: }
 23270                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 23271  001D5E  A792               	btfss	sprintf@flag& (0+255),3,b
 23272  001D60  D00B               	goto	l15510
 23273                           
 23274                           ; BSR set to: 0
 23275  001D62  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23276  001D64  0A80               	xorlw	128
 23277  001D66  0F80               	addlw	-128
 23278  001D68  0E01               	movlw	1
 23279  001D6A  B4D8               	btfsc	status,2,c
 23280  001D6C  5D8B               	subwf	sprintf@width& (0+255),w,b
 23281  001D6E  E304               	bnc	l15510
 23282  001D70                     l15504:
 23283                           
 23284                           ; BSR set to: 0
 23285                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 23286  001D70  C076  FFD9         	movff	sprintf@sp,fsr2l
 23287                           
 23288                           ; BSR set to: 0
 23289                           
 23290                           ; BSR set to: 0
 23291                           ;doprnt.c: 1538: while(--width);
 23292  001D74  D835               	call	PL36	;call to abstracted procedure
 23293  001D76  E1FC               	bnz	l15504
 23294  001D78                     l15510:
 23295                           
 23296                           ; BSR set to: 0
 23297  001D78  D84B               	call	PL58	;call to abstracted procedure
 23298  001D7A  6791               	tstfsz	sprintf@c& (0+255),b
 23299  001D7C  D4D1               	goto	l15176
 23300  001D7E                     l15512:
 23301                           
 23302                           ; BSR set to: 0
 23303                           ;doprnt.c: 1545: *sp = 0;
 23304  001D7E  C076  FFD9         	movff	sprintf@sp,fsr2l
 23305  001D82  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23306  001D86  0E00               	movlw	0
 23307  001D88  6EDF               	movwf	indf2,c
 23308                           
 23309                           ; BSR set to: 0
 23310  001D8A  0C00               	retlw	0
 23311  001D8C                     __end_of_sprintf:
 23312                           	opt stack 0
 23313  001D8C                     PL10:
 23314                           	opt stack 25
 23315  001D8C  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 23316  001D8E  6EF7               	movwf	tblptrh,c
 23317  001D90  0009               	tblrd		*+
 23318  001D92  CFF5 F064          	movff	tablat,?___lldiv+4
 23319  001D96  0009               	tblrd		*+
 23320  001D98  CFF5 F065          	movff	tablat,?___lldiv+5
 23321  001D9C  0009               	tblrd		*+
 23322  001D9E  CFF5 F066          	movff	tablat,?___lldiv+6
 23323  001DA2  000A               	tblrd		*-
 23324  001DA4  CFF5 F067          	movff	tablat,?___lldiv+7
 23325  001DA8  0012               	return	
 23326  001DAA                     __end_ofPL10:
 23327                           	opt stack 0
 23328  001DAA                     PL14:
 23329                           	opt stack 25
 23330  001DAA  1592               	andwf	sprintf@flag& (0+255),w,b
 23331  001DAC  6F7E               	movwf	??_sprintf& (0+255),b
 23332  001DAE  0E08               	movlw	8
 23333  001DB0  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 23334  001DB2  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 23335  001DB4  517F               	movf	(??_sprintf+1)& (0+255),w,b
 23336  001DB6  0A08               	xorlw	8
 23337  001DB8  0012               	return	
 23338  001DBA                     __end_ofPL14:
 23339                           	opt stack 0
 23340  001DBA                     PL18:
 23341                           	opt stack 25
 23342  001DBA  C08D  F060         	movff	sprintf@_val,?___lldiv
 23343  001DBE  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 23344  001DC2  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 23345  001DC6  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 23346  001DCA  C089  F07E         	movff	sprintf@prec,??_sprintf
 23347  001DCE  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 23348  001DD2  90D8               	bcf	status,0,c
 23349  001DD4  377E               	rlcf	??_sprintf& (0+255),f,b
 23350  001DD6  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23351  001DD8  90D8               	bcf	status,0,c
 23352  001DDA  377E               	rlcf	??_sprintf& (0+255),f,b
 23353  001DDC  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 23354  001DDE  0012               	return	
 23355  001DE0                     __end_ofPL18:
 23356                           	opt stack 0
 23357  001DE0                     PL36:
 23358                           	opt stack 25
 23359  001DE0  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23360  001DE4  0E20               	movlw	32
 23361  001DE6  6EDF               	movwf	indf2,c
 23362  001DE8  4B76               	infsnz	sprintf@sp& (0+255),f,b
 23363  001DEA  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 23364  001DEC  078B               	decf	sprintf@width& (0+255),f,b
 23365  001DEE  A0D8               	btfss	status,0,c
 23366  001DF0  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23367  001DF2  0100               	movlb	0	; () banked
 23368  001DF4  518C               	movf	(sprintf@width+1)& (0+255),w,b
 23369  001DF6  118B               	iorwf	sprintf@width& (0+255),w,b
 23370  001DF8  0012               	return	
 23371  001DFA                     __end_ofPL36:
 23372                           	opt stack 0
 23373  001DFA                     PL52:
 23374                           	opt stack 25
 23375  001DFA  6ED9               	movwf	fsr2l,c
 23376  001DFC  6ADA               	clrf	fsr2h,c
 23377  001DFE  CFDE F08D          	movff	postinc2,sprintf@_val
 23378  001E02  CFDE F08E          	movff	postinc2,sprintf@_val+1
 23379  001E06  CFDE F08F          	movff	postinc2,sprintf@_val+2
 23380  001E0A  CFDE F090          	movff	postinc2,sprintf@_val+3
 23381  001E0E  0C04               	retlw	4
 23382  001E10                     __end_ofPL52:
 23383                           	opt stack 0
 23384  001E10                     PL58:
 23385                           	opt stack 25
 23386  001E10  C078  FFF6         	movff	sprintf@f,tblptrl
 23387  001E14  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23388  001E18  4B78               	infsnz	sprintf@f& (0+255),f,b
 23389  001E1A  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23390  001E1C  0008               	tblrd		*
 23391  001E1E  CFF5 F091          	movff	tablat,sprintf@c
 23392  001E22  0100               	movlb	0	; () banked
 23393  001E24  0012               	return	
 23394  001E26                     __end_ofPL58:
 23395                           	opt stack 0
 23396  001E26                     PL62:
 23397                           	opt stack 25
 23398  001E26  C076  FFD9         	movff	sprintf@sp,fsr2l
 23399  001E2A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23400  001E2E  0E20               	movlw	32
 23401  001E30  6EDF               	movwf	indf2,c
 23402  001E32  0C20               	retlw	32
 23403  001E34                     __end_ofPL62:
 23404                           	opt stack 0
 23405  001E34                     PL76:
 23406                           	opt stack 25
 23407  001E34  4B78               	infsnz	sprintf@f& (0+255),f,b
 23408  001E36  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 23409  001E38  C078  FFF6         	movff	sprintf@f,tblptrl
 23410  001E3C  C079  FFF7         	movff	sprintf@f+1,tblptrh
 23411  001E40  0008               	tblrd		*
 23412  001E42  50F5               	movf	tablat,w,c
 23413  001E44  0012               	return	
 23414  001E46                     __end_ofPL76:
 23415                           	opt stack 0
 23416  001E46                     PL86:
 23417                           	opt stack 25
 23418  001E46  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 23419  001E4A  0E30               	movlw	48
 23420  001E4C  6EDF               	movwf	indf2,c
 23421  001E4E  0C30               	retlw	48
 23422  001E50                     __end_ofPL86:
 23423                           	opt stack 0
 23424  001E50                     PL98:
 23425                           	opt stack 25
 23426  001E50  A0D8               	btfss	status,0,c
 23427  001E52  078C               	decf	(sprintf@width+1)& (0+255),f,b
 23428  001E54  0100               	movlb	0	; () banked
 23429  001E56  298B               	incf	sprintf@width& (0+255),w,b
 23430  001E58  0012               	return	
 23431  001E5A                     __end_ofPL98:
 23432                           	opt stack 0
 23433                           tblptru	equ	0xFF8
 23434                           tblptrh	equ	0xFF7
 23435                           tblptrl	equ	0xFF6
 23436                           tablat	equ	0xFF5
 23437                           prodh	equ	0xFF4
 23438                           prodl	equ	0xFF3
 23439                           intcon	equ	0xFF2
 23440                           indf0	equ	0xFEF
 23441                           postinc0	equ	0xFEE
 23442                           fsr0h	equ	0xFEA
 23443                           fsr0l	equ	0xFE9
 23444                           wreg	equ	0xFE8
 23445                           indf1	equ	0xFE7
 23446                           postinc1	equ	0xFE6
 23447                           postdec1	equ	0xFE5
 23448                           fsr1h	equ	0xFE2
 23449                           fsr1l	equ	0xFE1
 23450                           indf2	equ	0xFDF
 23451                           postinc2	equ	0xFDE
 23452                           postdec2	equ	0xFDD
 23453                           plusw2	equ	0xFDB
 23454                           fsr2h	equ	0xFDA
 23455                           fsr2l	equ	0xFD9
 23456                           status	equ	0xFD8
 23457                           
 23458 ;; *************** function ___wmul *****************
 23459 ;; Defined at:
 23460 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23461 ;; Parameters:    Size  Location     Type
 23462 ;;  multiplier      2    0[BANK0 ] unsigned int 
 23463 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 23464 ;; Auto vars:     Size  Location     Type
 23465 ;;  product         2    4[BANK0 ] unsigned int 
 23466 ;; Return value:  Size  Location     Type
 23467 ;;                  2    0[BANK0 ] unsigned int 
 23468 ;; Registers used:
 23469 ;;		wreg, status,2, status,0, prodl, prodh
 23470 ;; Tracked objects:
 23471 ;;		On entry : F/0
 23472 ;;		On exit  : F/0
 23473 ;;		Unchanged: 0/0
 23474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23475 ;;      Params:         0       4       0       0       0       0       0
 23476 ;;      Locals:         0       2       0       0       0       0       0
 23477 ;;      Temps:          0       0       0       0       0       0       0
 23478 ;;      Totals:         0       6       0       0       0       0       0
 23479 ;;Total ram usage:        6 bytes
 23480 ;; Hardware stack levels used:    1
 23481 ;; Hardware stack levels required when called:    3
 23482 ;; This function calls:
 23483 ;;		Nothing
 23484 ;; This function is called by:
 23485 ;;		_sprintf
 23486 ;;		_atoi
 23487 ;; This function uses a non-reentrant model
 23488 ;;
 23489                           
 23490                           	psect	text57
 23491  00576E                     __ptext57:
 23492                           	opt stack 0
 23493  00576E                     ___wmul:
 23494                           	opt stack 25
 23495                           
 23496                           ; BSR set to: 0
 23497                           
 23498                           ; BSR set to: 0
 23499                           ;incstack = 0
 23500                           ;incstack = 0
 23501  00576E  5160               	movf	___wmul@multiplier& (0+255),w,b
 23502  005770  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23503  005772  CFF3 F064          	movff	prodl,___wmul@product
 23504  005776  CFF4 F065          	movff	prodh,___wmul@product+1
 23505  00577A  5160               	movf	___wmul@multiplier& (0+255),w,b
 23506  00577C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 23507  00577E  D808               	call	PL88	;call to abstracted procedure
 23508  005780  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 23509  005782  0362               	mulwf	___wmul@multiplicand& (0+255),b
 23510  005784  D805               	call	PL88	;call to abstracted procedure
 23511                           
 23512                           ; BSR set to: 0
 23513  005786  C064  F060         	movff	___wmul@product,?___wmul
 23514  00578A  C065  F061         	movff	___wmul@product+1,?___wmul+1
 23515                           
 23516                           ; BSR set to: 0
 23517  00578E  0012               	return	
 23518  005790                     __end_of___wmul:
 23519                           	opt stack 0
 23520  005790                     PL88:
 23521                           	opt stack 25
 23522  005790  CFF3 FFF4          	movff	prodl,prodh
 23523  005794  6AF3               	clrf	prodl,c
 23524  005796  50F3               	movf	prodl,w,c
 23525  005798  2764               	addwf	___wmul@product& (0+255),f,b
 23526  00579A  50F4               	movf	prodh,w,c
 23527  00579C  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 23528  00579E  0012               	return	
 23529  0057A0                     __end_ofPL88:
 23530                           	opt stack 0
 23531                           tblptru	equ	0xFF8
 23532                           tblptrh	equ	0xFF7
 23533                           tblptrl	equ	0xFF6
 23534                           tablat	equ	0xFF5
 23535                           prodh	equ	0xFF4
 23536                           prodl	equ	0xFF3
 23537                           intcon	equ	0xFF2
 23538                           indf0	equ	0xFEF
 23539                           postinc0	equ	0xFEE
 23540                           fsr0h	equ	0xFEA
 23541                           fsr0l	equ	0xFE9
 23542                           wreg	equ	0xFE8
 23543                           indf1	equ	0xFE7
 23544                           postinc1	equ	0xFE6
 23545                           postdec1	equ	0xFE5
 23546                           fsr1h	equ	0xFE2
 23547                           fsr1l	equ	0xFE1
 23548                           indf2	equ	0xFDF
 23549                           postinc2	equ	0xFDE
 23550                           postdec2	equ	0xFDD
 23551                           plusw2	equ	0xFDB
 23552                           fsr2h	equ	0xFDA
 23553                           fsr2l	equ	0xFD9
 23554                           status	equ	0xFD8
 23555                           
 23556 ;; *************** function ___llmod *****************
 23557 ;; Defined at:
 23558 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23559 ;; Parameters:    Size  Location     Type
 23560 ;;  dividend        4   13[BANK0 ] unsigned long 
 23561 ;;  divisor         4   17[BANK0 ] unsigned long 
 23562 ;; Auto vars:     Size  Location     Type
 23563 ;;  counter         1   21[BANK0 ] unsigned char 
 23564 ;; Return value:  Size  Location     Type
 23565 ;;                  4   13[BANK0 ] unsigned long 
 23566 ;; Registers used:
 23567 ;;		wreg, status,2, status,0
 23568 ;; Tracked objects:
 23569 ;;		On entry : F/0
 23570 ;;		On exit  : F/0
 23571 ;;		Unchanged: 0/0
 23572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23573 ;;      Params:         0       8       0       0       0       0       0
 23574 ;;      Locals:         0       1       0       0       0       0       0
 23575 ;;      Temps:          0       0       0       0       0       0       0
 23576 ;;      Totals:         0       9       0       0       0       0       0
 23577 ;;Total ram usage:        9 bytes
 23578 ;; Hardware stack levels used:    1
 23579 ;; Hardware stack levels required when called:    3
 23580 ;; This function calls:
 23581 ;;		Nothing
 23582 ;; This function is called by:
 23583 ;;		_sprintf
 23584 ;;		_ultoa
 23585 ;; This function uses a non-reentrant model
 23586 ;;
 23587                           
 23588                           	psect	text58
 23589  005192                     __ptext58:
 23590                           	opt stack 0
 23591  005192                     ___llmod:
 23592                           	opt stack 24
 23593                           
 23594                           ; BSR set to: 0
 23595                           
 23596                           ; BSR set to: 0
 23597                           ;incstack = 0
 23598                           ;incstack = 0
 23599  005192  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23600  005194  1171               	iorwf	___llmod@divisor& (0+255),w,b
 23601  005196  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23602  005198  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23603  00519A  E023               	bz	l2365
 23604                           
 23605                           ; BSR set to: 0
 23606  00519C  0E01               	movlw	1
 23607  00519E  6F75               	movwf	___llmod@counter& (0+255),b
 23608  0051A0  D006               	goto	l16358
 23609  0051A2                     l16356:
 23610                           
 23611                           ; BSR set to: 0
 23612  0051A2  90D8               	bcf	status,0,c
 23613  0051A4  3771               	rlcf	___llmod@divisor& (0+255),f,b
 23614  0051A6  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23615  0051A8  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23616  0051AA  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23617  0051AC  2B75               	incf	___llmod@counter& (0+255),f,b
 23618  0051AE                     l16358:
 23619                           
 23620                           ; BSR set to: 0
 23621  0051AE  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23622  0051B0  D7F8               	goto	l16356
 23623  0051B2                     l16360:
 23624                           
 23625                           ; BSR set to: 0
 23626  0051B2  5171               	movf	___llmod@divisor& (0+255),w,b
 23627  0051B4  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 23628  0051B6  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23629  0051B8  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23630  0051BA  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23631  0051BC  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23632  0051BE  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23633  0051C0  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23634  0051C2  E308               	bnc	l16364
 23635                           
 23636                           ; BSR set to: 0
 23637  0051C4  5171               	movf	___llmod@divisor& (0+255),w,b
 23638  0051C6  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 23639  0051C8  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 23640  0051CA  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23641  0051CC  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 23642  0051CE  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23643  0051D0  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 23644  0051D2  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23645  0051D4                     l16364:
 23646                           
 23647                           ; BSR set to: 0
 23648  0051D4  90D8               	bcf	status,0,c
 23649  0051D6  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23650  0051D8  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23651  0051DA  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23652  0051DC  3371               	rrcf	___llmod@divisor& (0+255),f,b
 23653                           
 23654                           ; BSR set to: 0
 23655  0051DE  2F75               	decfsz	___llmod@counter& (0+255),f,b
 23656  0051E0  D7E8               	goto	l16360
 23657  0051E2                     l2365:
 23658                           
 23659                           ; BSR set to: 0
 23660  0051E2  C06D  F06D         	movff	___llmod@dividend,?___llmod
 23661  0051E6  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 23662  0051EA  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 23663  0051EE  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 23664                           
 23665                           ; BSR set to: 0
 23666  0051F2  0012               	return	
 23667  0051F4                     __end_of___llmod:
 23668                           	opt stack 0
 23669                           tblptru	equ	0xFF8
 23670                           tblptrh	equ	0xFF7
 23671                           tblptrl	equ	0xFF6
 23672                           tablat	equ	0xFF5
 23673                           prodh	equ	0xFF4
 23674                           prodl	equ	0xFF3
 23675                           intcon	equ	0xFF2
 23676                           indf0	equ	0xFEF
 23677                           postinc0	equ	0xFEE
 23678                           fsr0h	equ	0xFEA
 23679                           fsr0l	equ	0xFE9
 23680                           wreg	equ	0xFE8
 23681                           indf1	equ	0xFE7
 23682                           postinc1	equ	0xFE6
 23683                           postdec1	equ	0xFE5
 23684                           fsr1h	equ	0xFE2
 23685                           fsr1l	equ	0xFE1
 23686                           indf2	equ	0xFDF
 23687                           postinc2	equ	0xFDE
 23688                           postdec2	equ	0xFDD
 23689                           plusw2	equ	0xFDB
 23690                           fsr2h	equ	0xFDA
 23691                           fsr2l	equ	0xFD9
 23692                           status	equ	0xFD8
 23693                           
 23694 ;; *************** function ___lldiv *****************
 23695 ;; Defined at:
 23696 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23697 ;; Parameters:    Size  Location     Type
 23698 ;;  dividend        4    0[BANK0 ] unsigned long 
 23699 ;;  divisor         4    4[BANK0 ] unsigned long 
 23700 ;; Auto vars:     Size  Location     Type
 23701 ;;  quotient        4    9[BANK0 ] unsigned long 
 23702 ;;  counter         1    8[BANK0 ] unsigned char 
 23703 ;; Return value:  Size  Location     Type
 23704 ;;                  4    0[BANK0 ] unsigned long 
 23705 ;; Registers used:
 23706 ;;		wreg, status,2, status,0
 23707 ;; Tracked objects:
 23708 ;;		On entry : F/0
 23709 ;;		On exit  : F/0
 23710 ;;		Unchanged: 0/0
 23711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23712 ;;      Params:         0       8       0       0       0       0       0
 23713 ;;      Locals:         0       5       0       0       0       0       0
 23714 ;;      Temps:          0       0       0       0       0       0       0
 23715 ;;      Totals:         0      13       0       0       0       0       0
 23716 ;;Total ram usage:       13 bytes
 23717 ;; Hardware stack levels used:    1
 23718 ;; Hardware stack levels required when called:    3
 23719 ;; This function calls:
 23720 ;;		Nothing
 23721 ;; This function is called by:
 23722 ;;		_sprintf
 23723 ;;		_ultoa
 23724 ;; This function uses a non-reentrant model
 23725 ;;
 23726                           
 23727                           	psect	text59
 23728  004E96                     __ptext59:
 23729                           	opt stack 0
 23730  004E96                     ___lldiv:
 23731                           	opt stack 24
 23732                           
 23733                           ; BSR set to: 0
 23734                           
 23735                           ; BSR set to: 0
 23736                           ;incstack = 0
 23737                           ;incstack = 0
 23738  004E96  6B69               	clrf	___lldiv@quotient& (0+255),b
 23739  004E98  6B6A               	clrf	(___lldiv@quotient+1)& (0+255),b
 23740  004E9A  6B6B               	clrf	(___lldiv@quotient+2)& (0+255),b
 23741  004E9C  6B6C               	clrf	(___lldiv@quotient+3)& (0+255),b
 23742                           
 23743                           ; BSR set to: 0
 23744  004E9E  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23745  004EA0  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 23746  004EA2  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23747  004EA4  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23748  004EA6  E029               	bz	l2355
 23749                           
 23750                           ; BSR set to: 0
 23751  004EA8  0E01               	movlw	1
 23752  004EAA  6F68               	movwf	___lldiv@counter& (0+255),b
 23753  004EAC  D006               	goto	l16338
 23754  004EAE                     l16336:
 23755                           
 23756                           ; BSR set to: 0
 23757  004EAE  90D8               	bcf	status,0,c
 23758  004EB0  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 23759  004EB2  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23760  004EB4  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23761  004EB6  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23762  004EB8  2B68               	incf	___lldiv@counter& (0+255),f,b
 23763  004EBA                     l16338:
 23764                           
 23765                           ; BSR set to: 0
 23766  004EBA  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23767  004EBC  D7F8               	goto	l16336
 23768  004EBE                     l16340:
 23769                           
 23770                           ; BSR set to: 0
 23771  004EBE  90D8               	bcf	status,0,c
 23772  004EC0  3769               	rlcf	___lldiv@quotient& (0+255),f,b
 23773  004EC2  376A               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23774  004EC4  376B               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23775  004EC6  376C               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23776                           
 23777                           ; BSR set to: 0
 23778  004EC8  5164               	movf	___lldiv@divisor& (0+255),w,b
 23779  004ECA  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 23780  004ECC  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23781  004ECE  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23782  004ED0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23783  004ED2  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23784  004ED4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23785  004ED6  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23786  004ED8  E309               	bnc	l16348
 23787                           
 23788                           ; BSR set to: 0
 23789  004EDA  5164               	movf	___lldiv@divisor& (0+255),w,b
 23790  004EDC  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 23791  004EDE  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23792  004EE0  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23793  004EE2  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23794  004EE4  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23795  004EE6  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23796  004EE8  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23797                           
 23798                           ; BSR set to: 0
 23799  004EEA  8169               	bsf	___lldiv@quotient& (0+255),0,b
 23800  004EEC                     l16348:
 23801                           
 23802                           ; BSR set to: 0
 23803  004EEC  90D8               	bcf	status,0,c
 23804  004EEE  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23805  004EF0  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23806  004EF2  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23807  004EF4  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 23808                           
 23809                           ; BSR set to: 0
 23810  004EF6  2F68               	decfsz	___lldiv@counter& (0+255),f,b
 23811  004EF8  D7E2               	goto	l16340
 23812  004EFA                     l2355:
 23813                           
 23814                           ; BSR set to: 0
 23815  004EFA  C069  F060         	movff	___lldiv@quotient,?___lldiv
 23816  004EFE  C06A  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 23817  004F02  C06B  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 23818  004F06  C06C  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 23819                           
 23820                           ; BSR set to: 0
 23821  004F0A  0012               	return	
 23822  004F0C                     __end_of___lldiv:
 23823                           	opt stack 0
 23824                           tblptru	equ	0xFF8
 23825                           tblptrh	equ	0xFF7
 23826                           tblptrl	equ	0xFF6
 23827                           tablat	equ	0xFF5
 23828                           prodh	equ	0xFF4
 23829                           prodl	equ	0xFF3
 23830                           intcon	equ	0xFF2
 23831                           indf0	equ	0xFEF
 23832                           postinc0	equ	0xFEE
 23833                           fsr0h	equ	0xFEA
 23834                           fsr0l	equ	0xFE9
 23835                           wreg	equ	0xFE8
 23836                           indf1	equ	0xFE7
 23837                           postinc1	equ	0xFE6
 23838                           postdec1	equ	0xFE5
 23839                           fsr1h	equ	0xFE2
 23840                           fsr1l	equ	0xFE1
 23841                           indf2	equ	0xFDF
 23842                           postinc2	equ	0xFDE
 23843                           postdec2	equ	0xFDD
 23844                           plusw2	equ	0xFDB
 23845                           fsr2h	equ	0xFDA
 23846                           fsr2l	equ	0xFD9
 23847                           status	equ	0xFD8
 23848                           
 23849 ;; *************** function _isdigit *****************
 23850 ;; Defined at:
 23851 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23852 ;; Parameters:    Size  Location     Type
 23853 ;;  c               1    wreg     unsigned char 
 23854 ;; Auto vars:     Size  Location     Type
 23855 ;;  c               1    2[BANK0 ] unsigned char 
 23856 ;; Return value:  Size  Location     Type
 23857 ;;		None               void
 23858 ;; Registers used:
 23859 ;;		wreg, status,2, status,0
 23860 ;; Tracked objects:
 23861 ;;		On entry : 0/0
 23862 ;;		On exit  : F/0
 23863 ;;		Unchanged: 0/0
 23864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23865 ;;      Params:         0       0       0       0       0       0       0
 23866 ;;      Locals:         0       2       0       0       0       0       0
 23867 ;;      Temps:          0       1       0       0       0       0       0
 23868 ;;      Totals:         0       3       0       0       0       0       0
 23869 ;;Total ram usage:        3 bytes
 23870 ;; Hardware stack levels used:    1
 23871 ;; Hardware stack levels required when called:    3
 23872 ;; This function calls:
 23873 ;;		Nothing
 23874 ;; This function is called by:
 23875 ;;		_sprintf
 23876 ;;		_atoi
 23877 ;; This function uses a non-reentrant model
 23878 ;;
 23879                           
 23880                           	psect	text60
 23881  00582A                     __ptext60:
 23882                           	opt stack 0
 23883  00582A                     _isdigit:
 23884                           	opt stack 25
 23885                           
 23886                           ; BSR set to: 0
 23887                           ;incstack = 0
 23888                           ;incstack = 0
 23889                           ;isdigit@c stored from wreg
 23890  00582A  CFE8 F062          	movff	wreg,isdigit@c
 23891  00582E  0100               	movlb	0	; () banked
 23892  005830  6B61               	clrf	_isdigit$2933& (0+255),b
 23893                           
 23894                           ; BSR set to: 0
 23895  005832  0E3A               	movlw	58
 23896  005834  6162               	cpfslt	isdigit@c& (0+255),b
 23897  005836  D005               	goto	l13076
 23898                           
 23899                           ; BSR set to: 0
 23900  005838  0E2F               	movlw	47
 23901  00583A  6562               	cpfsgt	isdigit@c& (0+255),b
 23902  00583C  D002               	goto	l13076
 23903                           
 23904                           ; BSR set to: 0
 23905  00583E  0E01               	movlw	1
 23906  005840  6F61               	movwf	_isdigit$2933& (0+255),b
 23907  005842                     l13076:
 23908                           
 23909                           ; BSR set to: 0
 23910  005842  C061  F060         	movff	_isdigit$2933,??_isdigit
 23911  005846  3160               	rrcf	??_isdigit& (0+255),w,b
 23912                           
 23913                           ; BSR set to: 0
 23914  005848  0012               	return	
 23915  00584A                     __end_of_isdigit:
 23916                           	opt stack 0
 23917                           tblptru	equ	0xFF8
 23918                           tblptrh	equ	0xFF7
 23919                           tblptrl	equ	0xFF6
 23920                           tablat	equ	0xFF5
 23921                           prodh	equ	0xFF4
 23922                           prodl	equ	0xFF3
 23923                           intcon	equ	0xFF2
 23924                           indf0	equ	0xFEF
 23925                           postinc0	equ	0xFEE
 23926                           fsr0h	equ	0xFEA
 23927                           fsr0l	equ	0xFE9
 23928                           wreg	equ	0xFE8
 23929                           indf1	equ	0xFE7
 23930                           postinc1	equ	0xFE6
 23931                           postdec1	equ	0xFE5
 23932                           fsr1h	equ	0xFE2
 23933                           fsr1l	equ	0xFE1
 23934                           indf2	equ	0xFDF
 23935                           postinc2	equ	0xFDE
 23936                           postdec2	equ	0xFDD
 23937                           plusw2	equ	0xFDB
 23938                           fsr2h	equ	0xFDA
 23939                           fsr2l	equ	0xFD9
 23940                           status	equ	0xFD8
 23941                           
 23942 ;; *************** function _printFirmwareVersion *****************
 23943 ;; Defined at:
 23944 ;;		line 2797 in file "main.c"
 23945 ;; Parameters:    Size  Location     Type
 23946 ;;		None
 23947 ;; Auto vars:     Size  Location     Type
 23948 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 23949 ;; Return value:  Size  Location     Type
 23950 ;;		None               void
 23951 ;; Registers used:
 23952 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23953 ;; Tracked objects:
 23954 ;;		On entry : 0/0
 23955 ;;		On exit  : 0/0
 23956 ;;		Unchanged: 0/0
 23957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23958 ;;      Params:         0       0       0       0       0       0       0
 23959 ;;      Locals:         0      20       0       0       0       0       0
 23960 ;;      Temps:          0       0       0       0       0       0       0
 23961 ;;      Totals:         0      20       0       0       0       0       0
 23962 ;;Total ram usage:       20 bytes
 23963 ;; Hardware stack levels used:    1
 23964 ;; Hardware stack levels required when called:    6
 23965 ;; This function calls:
 23966 ;;		_putsUSART
 23967 ;;		_WriteUSART
 23968 ;;		_itoa
 23969 ;; This function is called by:
 23970 ;;		_main
 23971 ;;		_doModeVerbose
 23972 ;; This function uses a non-reentrant model
 23973 ;;
 23974                           
 23975                           	psect	text61
 23976  004C88                     __ptext61:
 23977                           	opt stack 0
 23978  004C88                     _printFirmwareVersion:
 23979                           	opt stack 23
 23980                           
 23981                           ;main.c: 2798: char wrkbuf[20];
 23982                           ;main.c: 2799: putsUSART((char *) "Version: ");
 23983                           
 23984                           ; BSR set to: 0
 23985                           ;incstack = 0
 23986                           ;incstack = 0
 23987  004C88  0E7E               	movlw	high STR_254
 23988  004C8A  0100               	movlb	0	; () banked
 23989  004C8C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23990  004C8E  0E9D               	movlw	low STR_254
 23991  004C90  6F61               	movwf	?_putsUSART& (0+255),b
 23992  004C92  EC84  F029         	call	_putsUSART	;wreg free
 23993                           
 23994                           ;main.c: 2800: itoa(wrkbuf, 1, 10);
 23995  004C96  0100               	movlb	0	; () banked
 23996  004C98  D835               	call	PL56	;call to abstracted procedure
 23997  004C9A  EC81  F02B         	call	_itoa	;wreg free
 23998                           
 23999                           ; BSR set to: 0
 24000                           ;main.c: 2801: putsUSART(wrkbuf);
 24001  004C9E  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24002  004CA0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24003  004CA2  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24004  004CA4  6F61               	movwf	?_putsUSART& (0+255),b
 24005  004CA6  EC84  F029         	call	_putsUSART	;wreg free
 24006  004CAA                     l1233:
 24007  004CAA  A2AC               	btfss	4012,1,c	;volatile
 24008  004CAC  D7FE               	goto	l1233
 24009                           
 24010                           ;main.c: 2803: WriteUSART('.');
 24011  004CAE  0E2E               	movlw	46
 24012  004CB0  EC5B  F02C         	call	_WriteUSART
 24013                           
 24014                           ;main.c: 2804: itoa(wrkbuf, 1, 10);
 24015  004CB4  0100               	movlb	0	; () banked
 24016  004CB6  D826               	call	PL56	;call to abstracted procedure
 24017  004CB8  EC81  F02B         	call	_itoa	;wreg free
 24018                           
 24019                           ; BSR set to: 0
 24020                           ;main.c: 2805: putsUSART(wrkbuf);
 24021  004CBC  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24022  004CBE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24023  004CC0  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24024  004CC2  6F61               	movwf	?_putsUSART& (0+255),b
 24025  004CC4  EC84  F029         	call	_putsUSART	;wreg free
 24026  004CC8                     l1236:
 24027  004CC8  A2AC               	btfss	4012,1,c	;volatile
 24028  004CCA  D7FE               	goto	l1236
 24029                           
 24030                           ;main.c: 2807: WriteUSART('.');
 24031  004CCC  0E2E               	movlw	46
 24032  004CCE  EC5B  F02C         	call	_WriteUSART
 24033                           
 24034                           ;main.c: 2808: itoa(wrkbuf, 0, 10);
 24035  004CD2  0100               	movlb	0	; () banked
 24036  004CD4  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24037  004CD6  6F71               	movwf	(?_itoa+1)& (0+255),b
 24038  004CD8  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24039  004CDA  6F70               	movwf	?_itoa& (0+255),b
 24040  004CDC  6B73               	clrf	(?_itoa+3)& (0+255),b
 24041  004CDE  6B72               	clrf	(?_itoa+2)& (0+255),b
 24042  004CE0  6B75               	clrf	(?_itoa+5)& (0+255),b
 24043  004CE2  0E0A               	movlw	10
 24044  004CE4  6F74               	movwf	(?_itoa+4)& (0+255),b
 24045  004CE6  EC81  F02B         	call	_itoa	;wreg free
 24046                           
 24047                           ; BSR set to: 0
 24048                           ;main.c: 2809: putsUSART(wrkbuf);
 24049  004CEA  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24050  004CEC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24051  004CEE  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24052  004CF0  6F61               	movwf	?_putsUSART& (0+255),b
 24053  004CF2  EC84  F029         	call	_putsUSART	;wreg free
 24054                           
 24055                           ;main.c: 2810: putsUSART((char *) "\r\n");
 24056  004CF6  0E74               	movlw	high (STR_197+50)
 24057  004CF8  0100               	movlb	0	; () banked
 24058  004CFA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24059  004CFC  0EC0               	movlw	low (STR_197+50)
 24060  004CFE  6F61               	movwf	?_putsUSART& (0+255),b
 24061  004D00  EF84  F029         	goto	_putsUSART	;wreg free
 24062  004D04                     __end_of_printFirmwareVersion:
 24063                           	opt stack 0
 24064  004D04                     PL56:
 24065                           	opt stack 23
 24066  004D04  0E00               	movlw	high printFirmwareVersion@wrkbuf
 24067  004D06  6F71               	movwf	(?_itoa+1)& (0+255),b
 24068  004D08  0E78               	movlw	low printFirmwareVersion@wrkbuf
 24069  004D0A  6F70               	movwf	?_itoa& (0+255),b
 24070  004D0C  6B73               	clrf	(?_itoa+3)& (0+255),b
 24071  004D0E  0E01               	movlw	1
 24072  004D10  6F72               	movwf	(?_itoa+2)& (0+255),b
 24073  004D12  6B75               	clrf	(?_itoa+5)& (0+255),b
 24074  004D14  0E0A               	movlw	10
 24075  004D16  6F74               	movwf	(?_itoa+4)& (0+255),b
 24076  004D18  0C0A               	retlw	10
 24077  004D1A                     __end_ofPL56:
 24078                           	opt stack 0
 24079                           tblptru	equ	0xFF8
 24080                           tblptrh	equ	0xFF7
 24081                           tblptrl	equ	0xFF6
 24082                           tablat	equ	0xFF5
 24083                           prodh	equ	0xFF4
 24084                           prodl	equ	0xFF3
 24085                           intcon	equ	0xFF2
 24086                           indf0	equ	0xFEF
 24087                           postinc0	equ	0xFEE
 24088                           fsr0h	equ	0xFEA
 24089                           fsr0l	equ	0xFE9
 24090                           wreg	equ	0xFE8
 24091                           indf1	equ	0xFE7
 24092                           postinc1	equ	0xFE6
 24093                           postdec1	equ	0xFE5
 24094                           fsr1h	equ	0xFE2
 24095                           fsr1l	equ	0xFE1
 24096                           indf2	equ	0xFDF
 24097                           postinc2	equ	0xFDE
 24098                           postdec2	equ	0xFDD
 24099                           plusw2	equ	0xFDB
 24100                           fsr2h	equ	0xFDA
 24101                           fsr2l	equ	0xFD9
 24102                           status	equ	0xFD8
 24103                           
 24104 ;; *************** function _itoa *****************
 24105 ;; Defined at:
 24106 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24107 ;; Parameters:    Size  Location     Type
 24108 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 24109 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24110 ;;  val             2   18[BANK0 ] int 
 24111 ;;  base            2   20[BANK0 ] int 
 24112 ;; Auto vars:     Size  Location     Type
 24113 ;;  cp              2    0        PTR unsigned char 
 24114 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24115 ;; Return value:  Size  Location     Type
 24116 ;;                  2   16[BANK0 ] PTR unsigned char 
 24117 ;; Registers used:
 24118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24119 ;; Tracked objects:
 24120 ;;		On entry : F/0
 24121 ;;		On exit  : F/0
 24122 ;;		Unchanged: 0/0
 24123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24124 ;;      Params:         0       6       0       0       0       0       0
 24125 ;;      Locals:         0       2       0       0       0       0       0
 24126 ;;      Temps:          0       0       0       0       0       0       0
 24127 ;;      Totals:         0       8       0       0       0       0       0
 24128 ;;Total ram usage:        8 bytes
 24129 ;; Hardware stack levels used:    1
 24130 ;; Hardware stack levels required when called:    5
 24131 ;; This function calls:
 24132 ;;		_utoa
 24133 ;; This function is called by:
 24134 ;;		_receiveSendEventSLCAN
 24135 ;;		_findNodes
 24136 ;;		_printGUID
 24137 ;;		_printNodeFirmwareVersion
 24138 ;;		_printFirmwareVersion
 24139 ;; This function uses a non-reentrant model
 24140 ;;
 24141                           
 24142                           	psect	text62
 24143  005702                     __ptext62:
 24144                           	opt stack 0
 24145  005702                     _itoa:
 24146                           	opt stack 23
 24147                           
 24148                           ; BSR set to: 0
 24149                           
 24150                           ;incstack = 0
 24151                           ;incstack = 0
 24152  005702  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 24153  005704  D00C               	goto	l16226
 24154                           
 24155                           ; BSR set to: 0
 24156  005706  C070  FFD9         	movff	itoa@buf,fsr2l
 24157  00570A  C071  FFDA         	movff	itoa@buf+1,fsr2h
 24158  00570E  0E2D               	movlw	45
 24159  005710  6EDF               	movwf	indf2,c
 24160                           
 24161                           ; BSR set to: 0
 24162  005712  4B70               	infsnz	itoa@buf& (0+255),f,b
 24163  005714  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 24164                           
 24165                           ; BSR set to: 0
 24166  005716  6D72               	negf	itoa@val& (0+255),b
 24167  005718  1F73               	comf	(itoa@val+1)& (0+255),f,b
 24168  00571A  B0D8               	btfsc	status,0,c
 24169  00571C  2B73               	incf	(itoa@val+1)& (0+255),f,b
 24170  00571E                     l16226:
 24171                           
 24172                           ; BSR set to: 0
 24173  00571E  C070  F067         	movff	itoa@buf,?_utoa
 24174  005722  C071  F068         	movff	itoa@buf+1,?_utoa+1
 24175  005726  C072  F069         	movff	itoa@val,?_utoa+2
 24176  00572A  C073  F06A         	movff	itoa@val+1,?_utoa+3
 24177  00572E  C074  F06B         	movff	itoa@base,?_utoa+4
 24178  005732  C075  F06C         	movff	itoa@base+1,?_utoa+5
 24179  005736  EFC5  F024         	goto	_utoa	;wreg free
 24180  00573A                     __end_of_itoa:
 24181                           	opt stack 0
 24182                           tblptru	equ	0xFF8
 24183                           tblptrh	equ	0xFF7
 24184                           tblptrl	equ	0xFF6
 24185                           tablat	equ	0xFF5
 24186                           prodh	equ	0xFF4
 24187                           prodl	equ	0xFF3
 24188                           intcon	equ	0xFF2
 24189                           indf0	equ	0xFEF
 24190                           postinc0	equ	0xFEE
 24191                           fsr0h	equ	0xFEA
 24192                           fsr0l	equ	0xFE9
 24193                           wreg	equ	0xFE8
 24194                           indf1	equ	0xFE7
 24195                           postinc1	equ	0xFE6
 24196                           postdec1	equ	0xFE5
 24197                           fsr1h	equ	0xFE2
 24198                           fsr1l	equ	0xFE1
 24199                           indf2	equ	0xFDF
 24200                           postinc2	equ	0xFDE
 24201                           postdec2	equ	0xFDD
 24202                           plusw2	equ	0xFDB
 24203                           fsr2h	equ	0xFDA
 24204                           fsr2l	equ	0xFD9
 24205                           status	equ	0xFD8
 24206                           
 24207 ;; *************** function _utoa *****************
 24208 ;; Defined at:
 24209 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 24210 ;; Parameters:    Size  Location     Type
 24211 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 24212 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 24213 ;;  val             2    9[BANK0 ] unsigned int 
 24214 ;;  base            2   11[BANK0 ] int 
 24215 ;; Auto vars:     Size  Location     Type
 24216 ;;  v               2   13[BANK0 ] unsigned int 
 24217 ;;  c               1   15[BANK0 ] unsigned char 
 24218 ;; Return value:  Size  Location     Type
 24219 ;;                  2    7[BANK0 ] PTR unsigned char 
 24220 ;; Registers used:
 24221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24222 ;; Tracked objects:
 24223 ;;		On entry : F/0
 24224 ;;		On exit  : F/0
 24225 ;;		Unchanged: 0/0
 24226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24227 ;;      Params:         0       6       0       0       0       0       0
 24228 ;;      Locals:         0       3       0       0       0       0       0
 24229 ;;      Temps:          0       0       0       0       0       0       0
 24230 ;;      Totals:         0       9       0       0       0       0       0
 24231 ;;Total ram usage:        9 bytes
 24232 ;; Hardware stack levels used:    1
 24233 ;; Hardware stack levels required when called:    4
 24234 ;; This function calls:
 24235 ;;		___lwdiv
 24236 ;;		___lwmod
 24237 ;; This function is called by:
 24238 ;;		_itoa
 24239 ;; This function uses a non-reentrant model
 24240 ;;
 24241                           
 24242                           	psect	text63
 24243  00498A                     __ptext63:
 24244                           	opt stack 0
 24245  00498A                     _utoa:
 24246                           	opt stack 23
 24247                           
 24248                           ; BSR set to: 0
 24249                           
 24250                           ; BSR set to: 0
 24251                           ;incstack = 0
 24252                           ;incstack = 0
 24253  00498A  C069  F06D         	movff	utoa@val,utoa@v
 24254  00498E  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 24255  004992                     l16302:
 24256                           
 24257                           ; BSR set to: 0
 24258  004992  C06D  F060         	movff	utoa@v,?___lwdiv
 24259  004996  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 24260  00499A  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24261  00499E  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24262  0049A2  ECFD  F029         	call	___lwdiv	;wreg free
 24263  0049A6  C060  F06D         	movff	?___lwdiv,utoa@v
 24264  0049AA  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 24265                           
 24266                           ; BSR set to: 0
 24267  0049AE  4B67               	infsnz	utoa@buf& (0+255),f,b
 24268  0049B0  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24269                           
 24270                           ; BSR set to: 0
 24271  0049B2  516E               	movf	(utoa@v+1)& (0+255),w,b
 24272  0049B4  116D               	iorwf	utoa@v& (0+255),w,b
 24273  0049B6  E1ED               	bnz	l16302
 24274                           
 24275                           ; BSR set to: 0
 24276  0049B8  C067  FFD9         	movff	utoa@buf,fsr2l
 24277  0049BC  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24278  0049C0  0E00               	movlw	0
 24279  0049C2  6ADF               	clrf	indf2,c
 24280                           
 24281                           ; BSR set to: 0
 24282  0049C4  0767               	decf	utoa@buf& (0+255),f,b
 24283  0049C6  A0D8               	btfss	status,0,c
 24284  0049C8  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24285  0049CA                     l16312:
 24286                           
 24287                           ; BSR set to: 0
 24288  0049CA  C069  F060         	movff	utoa@val,?___lwmod
 24289  0049CE  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 24290  0049D2  C06B  F062         	movff	utoa@base,?___lwmod+2
 24291  0049D6  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 24292  0049DA  EC29  F02B         	call	___lwmod	;wreg free
 24293  0049DE  5160               	movf	?___lwmod& (0+255),w,b
 24294  0049E0  6F6F               	movwf	utoa@c& (0+255),b
 24295                           
 24296                           ; BSR set to: 0
 24297  0049E2  C069  F060         	movff	utoa@val,?___lwdiv
 24298  0049E6  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 24299  0049EA  C06B  F062         	movff	utoa@base,?___lwdiv+2
 24300  0049EE  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 24301  0049F2  ECFD  F029         	call	___lwdiv	;wreg free
 24302  0049F6  C060  F069         	movff	?___lwdiv,utoa@val
 24303  0049FA  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 24304                           
 24305                           ; BSR set to: 0
 24306  0049FE  0E09               	movlw	9
 24307  004A00  656F               	cpfsgt	utoa@c& (0+255),b
 24308  004A02  D002               	goto	l2324
 24309                           
 24310                           ; BSR set to: 0
 24311  004A04  0E07               	movlw	7
 24312  004A06  276F               	addwf	utoa@c& (0+255),f,b
 24313  004A08                     l2324:
 24314                           
 24315                           ; BSR set to: 0
 24316  004A08  0E30               	movlw	48
 24317  004A0A  276F               	addwf	utoa@c& (0+255),f,b
 24318                           
 24319                           ; BSR set to: 0
 24320  004A0C  C067  FFD9         	movff	utoa@buf,fsr2l
 24321  004A10  C068  FFDA         	movff	utoa@buf+1,fsr2h
 24322  004A14  C06F  FFDF         	movff	utoa@c,indf2
 24323                           
 24324                           ; BSR set to: 0
 24325  004A18  0767               	decf	utoa@buf& (0+255),f,b
 24326  004A1A  A0D8               	btfss	status,0,c
 24327  004A1C  0768               	decf	(utoa@buf+1)& (0+255),f,b
 24328                           
 24329                           ; BSR set to: 0
 24330  004A1E  516A               	movf	(utoa@val+1)& (0+255),w,b
 24331  004A20  1169               	iorwf	utoa@val& (0+255),w,b
 24332  004A22  E1D3               	bnz	l16312
 24333                           
 24334                           ; BSR set to: 0
 24335                           ;	Return value of _utoa is never used
 24336  004A24  4B67               	infsnz	utoa@buf& (0+255),f,b
 24337  004A26  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 24338                           
 24339                           ; BSR set to: 0
 24340  004A28  0012               	return	
 24341  004A2A                     __end_of_utoa:
 24342                           	opt stack 0
 24343                           tblptru	equ	0xFF8
 24344                           tblptrh	equ	0xFF7
 24345                           tblptrl	equ	0xFF6
 24346                           tablat	equ	0xFF5
 24347                           prodh	equ	0xFF4
 24348                           prodl	equ	0xFF3
 24349                           intcon	equ	0xFF2
 24350                           indf0	equ	0xFEF
 24351                           postinc0	equ	0xFEE
 24352                           fsr0h	equ	0xFEA
 24353                           fsr0l	equ	0xFE9
 24354                           wreg	equ	0xFE8
 24355                           indf1	equ	0xFE7
 24356                           postinc1	equ	0xFE6
 24357                           postdec1	equ	0xFE5
 24358                           fsr1h	equ	0xFE2
 24359                           fsr1l	equ	0xFE1
 24360                           indf2	equ	0xFDF
 24361                           postinc2	equ	0xFDE
 24362                           postdec2	equ	0xFDD
 24363                           plusw2	equ	0xFDB
 24364                           fsr2h	equ	0xFDA
 24365                           fsr2l	equ	0xFD9
 24366                           status	equ	0xFD8
 24367                           
 24368 ;; *************** function ___lwmod *****************
 24369 ;; Defined at:
 24370 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24371 ;; Parameters:    Size  Location     Type
 24372 ;;  dividend        2    0[BANK0 ] unsigned int 
 24373 ;;  divisor         2    2[BANK0 ] unsigned int 
 24374 ;; Auto vars:     Size  Location     Type
 24375 ;;  counter         1    4[BANK0 ] unsigned char 
 24376 ;; Return value:  Size  Location     Type
 24377 ;;                  2    0[BANK0 ] unsigned int 
 24378 ;; Registers used:
 24379 ;;		wreg, status,2, status,0
 24380 ;; Tracked objects:
 24381 ;;		On entry : F/0
 24382 ;;		On exit  : F/0
 24383 ;;		Unchanged: 0/0
 24384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24385 ;;      Params:         0       4       0       0       0       0       0
 24386 ;;      Locals:         0       1       0       0       0       0       0
 24387 ;;      Temps:          0       0       0       0       0       0       0
 24388 ;;      Totals:         0       5       0       0       0       0       0
 24389 ;;Total ram usage:        5 bytes
 24390 ;; Hardware stack levels used:    1
 24391 ;; Hardware stack levels required when called:    3
 24392 ;; This function calls:
 24393 ;;		Nothing
 24394 ;; This function is called by:
 24395 ;;		_utoa
 24396 ;; This function uses a non-reentrant model
 24397 ;;
 24398                           
 24399                           	psect	text64
 24400  005652                     __ptext64:
 24401                           	opt stack 0
 24402  005652                     ___lwmod:
 24403                           	opt stack 23
 24404                           
 24405                           ; BSR set to: 0
 24406                           
 24407                           ; BSR set to: 0
 24408                           ;incstack = 0
 24409                           ;incstack = 0
 24410  005652  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24411  005654  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 24412  005656  E017               	bz	l2448
 24413                           
 24414                           ; BSR set to: 0
 24415  005658  0E01               	movlw	1
 24416  00565A  6F64               	movwf	___lwmod@counter& (0+255),b
 24417  00565C  D004               	goto	l16396
 24418  00565E                     l16394:
 24419                           
 24420                           ; BSR set to: 0
 24421  00565E  90D8               	bcf	status,0,c
 24422  005660  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 24423  005662  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 24424  005664  2B64               	incf	___lwmod@counter& (0+255),f,b
 24425  005666                     l16396:
 24426                           
 24427                           ; BSR set to: 0
 24428  005666  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 24429  005668  D7FA               	goto	l16394
 24430  00566A                     l16398:
 24431                           
 24432                           ; BSR set to: 0
 24433  00566A  5162               	movf	___lwmod@divisor& (0+255),w,b
 24434  00566C  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 24435  00566E  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24436  005670  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 24437  005672  E304               	bnc	l16402
 24438                           
 24439                           ; BSR set to: 0
 24440  005674  5162               	movf	___lwmod@divisor& (0+255),w,b
 24441  005676  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 24442  005678  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 24443  00567A  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 24444  00567C                     l16402:
 24445                           
 24446                           ; BSR set to: 0
 24447  00567C  90D8               	bcf	status,0,c
 24448  00567E  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 24449  005680  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 24450                           
 24451                           ; BSR set to: 0
 24452  005682  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 24453  005684  D7F2               	goto	l16398
 24454  005686                     l2448:
 24455                           
 24456                           ; BSR set to: 0
 24457  005686  C060  F060         	movff	___lwmod@dividend,?___lwmod
 24458  00568A  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 24459                           
 24460                           ; BSR set to: 0
 24461  00568E  0012               	return	
 24462  005690                     __end_of___lwmod:
 24463                           	opt stack 0
 24464                           tblptru	equ	0xFF8
 24465                           tblptrh	equ	0xFF7
 24466                           tblptrl	equ	0xFF6
 24467                           tablat	equ	0xFF5
 24468                           prodh	equ	0xFF4
 24469                           prodl	equ	0xFF3
 24470                           intcon	equ	0xFF2
 24471                           indf0	equ	0xFEF
 24472                           postinc0	equ	0xFEE
 24473                           fsr0h	equ	0xFEA
 24474                           fsr0l	equ	0xFE9
 24475                           wreg	equ	0xFE8
 24476                           indf1	equ	0xFE7
 24477                           postinc1	equ	0xFE6
 24478                           postdec1	equ	0xFE5
 24479                           fsr1h	equ	0xFE2
 24480                           fsr1l	equ	0xFE1
 24481                           indf2	equ	0xFDF
 24482                           postinc2	equ	0xFDE
 24483                           postdec2	equ	0xFDD
 24484                           plusw2	equ	0xFDB
 24485                           fsr2h	equ	0xFDA
 24486                           fsr2l	equ	0xFD9
 24487                           status	equ	0xFD8
 24488                           
 24489 ;; *************** function ___lwdiv *****************
 24490 ;; Defined at:
 24491 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24492 ;; Parameters:    Size  Location     Type
 24493 ;;  dividend        2    0[BANK0 ] unsigned int 
 24494 ;;  divisor         2    2[BANK0 ] unsigned int 
 24495 ;; Auto vars:     Size  Location     Type
 24496 ;;  quotient        2    5[BANK0 ] unsigned int 
 24497 ;;  counter         1    4[BANK0 ] unsigned char 
 24498 ;; Return value:  Size  Location     Type
 24499 ;;                  2    0[BANK0 ] unsigned int 
 24500 ;; Registers used:
 24501 ;;		wreg, status,2, status,0
 24502 ;; Tracked objects:
 24503 ;;		On entry : F/0
 24504 ;;		On exit  : F/0
 24505 ;;		Unchanged: 0/0
 24506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24507 ;;      Params:         0       4       0       0       0       0       0
 24508 ;;      Locals:         0       3       0       0       0       0       0
 24509 ;;      Temps:          0       0       0       0       0       0       0
 24510 ;;      Totals:         0       7       0       0       0       0       0
 24511 ;;Total ram usage:        7 bytes
 24512 ;; Hardware stack levels used:    1
 24513 ;; Hardware stack levels required when called:    3
 24514 ;; This function calls:
 24515 ;;		Nothing
 24516 ;; This function is called by:
 24517 ;;		_utoa
 24518 ;; This function uses a non-reentrant model
 24519 ;;
 24520                           
 24521                           	psect	text65
 24522  0053FA                     __ptext65:
 24523                           	opt stack 0
 24524  0053FA                     ___lwdiv:
 24525                           	opt stack 23
 24526                           
 24527                           ; BSR set to: 0
 24528                           
 24529                           ; BSR set to: 0
 24530                           ;incstack = 0
 24531                           ;incstack = 0
 24532  0053FA  6B65               	clrf	___lwdiv@quotient& (0+255),b
 24533  0053FC  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 24534                           
 24535                           ; BSR set to: 0
 24536  0053FE  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24537  005400  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 24538  005402  E01B               	bz	l2438
 24539                           
 24540                           ; BSR set to: 0
 24541  005404  0E01               	movlw	1
 24542  005406  6F64               	movwf	___lwdiv@counter& (0+255),b
 24543  005408  D004               	goto	l16376
 24544  00540A                     l16374:
 24545                           
 24546                           ; BSR set to: 0
 24547  00540A  90D8               	bcf	status,0,c
 24548  00540C  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 24549  00540E  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 24550  005410  2B64               	incf	___lwdiv@counter& (0+255),f,b
 24551  005412                     l16376:
 24552                           
 24553                           ; BSR set to: 0
 24554  005412  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 24555  005414  D7FA               	goto	l16374
 24556  005416                     l16378:
 24557                           
 24558                           ; BSR set to: 0
 24559  005416  90D8               	bcf	status,0,c
 24560  005418  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 24561  00541A  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 24562                           
 24563                           ; BSR set to: 0
 24564  00541C  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24565  00541E  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 24566  005420  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24567  005422  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 24568  005424  E305               	bnc	l16386
 24569                           
 24570                           ; BSR set to: 0
 24571  005426  5162               	movf	___lwdiv@divisor& (0+255),w,b
 24572  005428  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 24573  00542A  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 24574  00542C  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 24575                           
 24576                           ; BSR set to: 0
 24577  00542E  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 24578  005430                     l16386:
 24579                           
 24580                           ; BSR set to: 0
 24581  005430  90D8               	bcf	status,0,c
 24582  005432  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 24583  005434  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 24584                           
 24585                           ; BSR set to: 0
 24586  005436  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 24587  005438  D7EE               	goto	l16378
 24588  00543A                     l2438:
 24589                           
 24590                           ; BSR set to: 0
 24591  00543A  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 24592  00543E  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24593                           
 24594                           ; BSR set to: 0
 24595  005442  0012               	return	
 24596  005444                     __end_of___lwdiv:
 24597                           	opt stack 0
 24598                           tblptru	equ	0xFF8
 24599                           tblptrh	equ	0xFF7
 24600                           tblptrl	equ	0xFF6
 24601                           tablat	equ	0xFF5
 24602                           prodh	equ	0xFF4
 24603                           prodl	equ	0xFF3
 24604                           intcon	equ	0xFF2
 24605                           indf0	equ	0xFEF
 24606                           postinc0	equ	0xFEE
 24607                           fsr0h	equ	0xFEA
 24608                           fsr0l	equ	0xFE9
 24609                           wreg	equ	0xFE8
 24610                           indf1	equ	0xFE7
 24611                           postinc1	equ	0xFE6
 24612                           postdec1	equ	0xFE5
 24613                           fsr1h	equ	0xFE2
 24614                           fsr1l	equ	0xFE1
 24615                           indf2	equ	0xFDF
 24616                           postinc2	equ	0xFDE
 24617                           postdec2	equ	0xFDD
 24618                           plusw2	equ	0xFDB
 24619                           fsr2h	equ	0xFDA
 24620                           fsr2l	equ	0xFD9
 24621                           status	equ	0xFD8
 24622                           
 24623 ;; *************** function _printMode *****************
 24624 ;; Defined at:
 24625 ;;		line 2818 in file "main.c"
 24626 ;; Parameters:    Size  Location     Type
 24627 ;;		None
 24628 ;; Auto vars:     Size  Location     Type
 24629 ;;		None
 24630 ;; Return value:  Size  Location     Type
 24631 ;;		None               void
 24632 ;; Registers used:
 24633 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24634 ;; Tracked objects:
 24635 ;;		On entry : 0/0
 24636 ;;		On exit  : 0/0
 24637 ;;		Unchanged: 0/0
 24638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24639 ;;      Params:         0       0       0       0       0       0       0
 24640 ;;      Locals:         0       0       0       0       0       0       0
 24641 ;;      Temps:          0       0       0       0       0       0       0
 24642 ;;      Totals:         0       0       0       0       0       0       0
 24643 ;;Total ram usage:        0 bytes
 24644 ;; Hardware stack levels used:    1
 24645 ;; Hardware stack levels required when called:    5
 24646 ;; This function calls:
 24647 ;;		_putsUSART
 24648 ;; This function is called by:
 24649 ;;		_main
 24650 ;; This function uses a non-reentrant model
 24651 ;;
 24652                           
 24653                           	psect	text66
 24654  004F0C                     __ptext66:
 24655                           	opt stack 0
 24656  004F0C                     _printMode:
 24657                           	opt stack 25
 24658                           
 24659                           ;main.c: 2819: putsUSART((char *) "Mode: ");
 24660                           
 24661                           ; BSR set to: 0
 24662                           ;incstack = 0
 24663                           ;incstack = 0
 24664  004F0C  0E7F               	movlw	high STR_256
 24665  004F0E  0100               	movlb	0	; () banked
 24666  004F10  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24667  004F12  0E26               	movlw	low STR_256
 24668  004F14  6F61               	movwf	?_putsUSART& (0+255),b
 24669  004F16  EC84  F029         	call	_putsUSART	;wreg free
 24670                           
 24671                           ;main.c: 2820: if (0 == mode) {
 24672  004F1A  0100               	movlb	0	; () banked
 24673  004F1C  67E6               	tstfsz	_mode& (0+255),b
 24674  004F1E  D007               	goto	l13562
 24675                           
 24676                           ; BSR set to: 0
 24677                           ;main.c: 2821: putsUSART((char *) "Verbose");
 24678  004F20  0E7F               	movlw	high STR_257
 24679  004F22  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24680  004F24  0E1E               	movlw	low STR_257
 24681  004F26  6F61               	movwf	?_putsUSART& (0+255),b
 24682  004F28  EC84  F029         	call	_putsUSART	;wreg free
 24683                           
 24684                           ;main.c: 2822: } else if (1 == mode) {
 24685  004F2C  D023               	goto	l1243
 24686  004F2E                     l13562:
 24687                           
 24688                           ; BSR set to: 0
 24689  004F2E  05E6               	decf	_mode& (0+255),w,b
 24690  004F30  E107               	bnz	l13566
 24691                           
 24692                           ; BSR set to: 0
 24693                           ;main.c: 2823: putsUSART((char *) "VSCP Driver");
 24694  004F32  0E7E               	movlw	high STR_258
 24695  004F34  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24696  004F36  0E7B               	movlw	low STR_258
 24697  004F38  6F61               	movwf	?_putsUSART& (0+255),b
 24698  004F3A  EC84  F029         	call	_putsUSART	;wreg free
 24699                           
 24700                           ;main.c: 2824: } else if (2 == mode) {
 24701  004F3E  D01A               	goto	l1243
 24702  004F40                     l13566:
 24703                           
 24704                           ; BSR set to: 0
 24705  004F40  51E6               	movf	_mode& (0+255),w,b
 24706  004F42  0A02               	xorlw	2
 24707  004F44  E107               	bnz	l13570
 24708                           
 24709                           ; BSR set to: 0
 24710                           ;main.c: 2825: putsUSART((char *) "SL Driver");
 24711  004F46  0E7E               	movlw	high STR_259
 24712  004F48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24713  004F4A  0EB1               	movlw	low STR_259
 24714  004F4C  6F61               	movwf	?_putsUSART& (0+255),b
 24715  004F4E  EC84  F029         	call	_putsUSART	;wreg free
 24716                           
 24717                           ;main.c: 2826: } else if (3 == mode) {
 24718  004F52  D010               	goto	l1243
 24719  004F54                     l13570:
 24720                           
 24721                           ; BSR set to: 0
 24722  004F54  51E6               	movf	_mode& (0+255),w,b
 24723  004F56  0A03               	xorlw	3
 24724  004F58  E107               	bnz	l13574
 24725                           
 24726                           ; BSR set to: 0
 24727                           ;main.c: 2827: putsUSART((char *) "VSCP Node");
 24728  004F5A  0E7E               	movlw	high STR_260
 24729  004F5C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24730  004F5E  0EA7               	movlw	low STR_260
 24731  004F60  6F61               	movwf	?_putsUSART& (0+255),b
 24732  004F62  EC84  F029         	call	_putsUSART	;wreg free
 24733                           
 24734                           ;main.c: 2828: } else {
 24735  004F66  D006               	goto	l1243
 24736  004F68                     l13574:
 24737                           
 24738                           ; BSR set to: 0
 24739                           ;main.c: 2829: putsUSART((char *) "Unknown (Verbose used)");
 24740  004F68  0E7C               	movlw	high STR_261
 24741  004F6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24742  004F6C  0EEF               	movlw	low STR_261
 24743  004F6E  6F61               	movwf	?_putsUSART& (0+255),b
 24744  004F70  EC84  F029         	call	_putsUSART	;wreg free
 24745  004F74                     l1243:
 24746                           
 24747                           ;main.c: 2830: }
 24748                           ;main.c: 2831: putsUSART((char *) "\r\n");
 24749  004F74  0E74               	movlw	high (STR_197+50)
 24750  004F76  0100               	movlb	0	; () banked
 24751  004F78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 24752  004F7A  0EC0               	movlw	low (STR_197+50)
 24753  004F7C  6F61               	movwf	?_putsUSART& (0+255),b
 24754  004F7E  EF84  F029         	goto	_putsUSART	;wreg free
 24755  004F82                     __end_of_printMode:
 24756                           	opt stack 0
 24757                           tblptru	equ	0xFF8
 24758                           tblptrh	equ	0xFF7
 24759                           tblptrl	equ	0xFF6
 24760                           tablat	equ	0xFF5
 24761                           prodh	equ	0xFF4
 24762                           prodl	equ	0xFF3
 24763                           intcon	equ	0xFF2
 24764                           indf0	equ	0xFEF
 24765                           postinc0	equ	0xFEE
 24766                           fsr0h	equ	0xFEA
 24767                           fsr0l	equ	0xFE9
 24768                           wreg	equ	0xFE8
 24769                           indf1	equ	0xFE7
 24770                           postinc1	equ	0xFE6
 24771                           postdec1	equ	0xFE5
 24772                           fsr1h	equ	0xFE2
 24773                           fsr1l	equ	0xFE1
 24774                           indf2	equ	0xFDF
 24775                           postinc2	equ	0xFDE
 24776                           postdec2	equ	0xFDD
 24777                           plusw2	equ	0xFDB
 24778                           fsr2h	equ	0xFDA
 24779                           fsr2l	equ	0xFD9
 24780                           status	equ	0xFD8
 24781                           
 24782 ;; *************** function _putsUSART *****************
 24783 ;; Defined at:
 24784 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 24785 ;; Parameters:    Size  Location     Type
 24786 ;;  data            2    1[BANK0 ] PTR unsigned char 
 24787 ;;		 -> STR_262(3), STR_261(23), STR_260(10), STR_259(10), 
 24788 ;;		 -> STR_258(12), STR_257(8), STR_256(7), STR_255(3), 
 24789 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_254(10), STR_253(3), STR_250(20), 
 24790 ;;		 -> STR_249(3), STR_248(14), STR_247(3), STR_243(8), 
 24791 ;;		 -> STR_242(15), STR_241(67), STR_240(3), STR_239(27), 
 24792 ;;		 -> STR_238(67), STR_237(39), STR_236(62), STR_235(55), 
 24793 ;;		 -> STR_234(49), STR_233(67), STR_232(47), STR_231(47), 
 24794 ;;		 -> STR_230(34), STR_229(71), STR_228(20), STR_227(78), 
 24795 ;;		 -> STR_226(24), STR_225(77), STR_224(67), STR_223(69), 
 24796 ;;		 -> STR_222(47), STR_221(40), STR_220(39), STR_219(33), 
 24797 ;;		 -> STR_218(23), STR_217(56), STR_216(24), STR_215(44), 
 24798 ;;		 -> STR_214(50), STR_213(31), STR_212(50), STR_211(51), 
 24799 ;;		 -> STR_210(46), STR_209(44), STR_208(27), STR_207(39), 
 24800 ;;		 -> STR_206(39), STR_205(52), STR_204(54), STR_203(55), 
 24801 ;;		 -> STR_202(3), STR_199(24), STR_198(57), STR_197(53), 
 24802 ;;		 -> STR_196(58), STR_195(3), STR_192(25), STR_191(3), 
 24803 ;;		 -> STR_188(24), STR_187(3), STR_184(24), STR_183(3), 
 24804 ;;		 -> STR_180(24), STR_179(3), STR_176(23), STR_175(3), 
 24805 ;;		 -> STR_172(21), STR_171(3), STR_168(22), STR_167(3), 
 24806 ;;		 -> STR_164(17), STR_163(3), STR_160(18), STR_159(4), 
 24807 ;;		 -> STR_158(11), STR_157(2), STR_154(7), STR_151(7), 
 24808 ;;		 -> STR_148(9), STR_145(7), STR_142(8), STR_139(7), 
 24809 ;;		 -> STR_138(2), STR_137(2), STR_136(6), STR_135(8), 
 24810 ;;		 -> STR_134(8), STR_133(20), STR_132(27), STR_131(6), 
 24811 ;;		 -> STR_130(33), STR_127(26), STR_125(32), STR_123(28), 
 24812 ;;		 -> STR_119(6), STR_117(40), STR_115(44), STR_112(6), 
 24813 ;;		 -> STR_111(39), STR_109(36), STR_107(37), STR_105(40), 
 24814 ;;		 -> STR_103(37), STR_102(50), STR_99(6), STR_98(41), 
 24815 ;;		 -> STR_96(38), STR_94(39), STR_92(42), STR_90(39), 
 24816 ;;		 -> STR_89(66), STR_86(6), STR_85(3), STR_82(20), 
 24817 ;;		 -> STR_80(33), STR_79(35), STR_78(24), STR_76(33), 
 24818 ;;		 -> STR_74(24), STR_71(54), STR_70(6), STR_69(3), 
 24819 ;;		 -> STR_64(34), STR_63(3), STR_60(4), wrkbuf(80), 
 24820 ;;		 -> STR_55(15), STR_53(33), STR_51(24), STR_48(6), 
 24821 ;;		 -> STR_46(6), STR_44(6), STR_42(6), STR_40(18), 
 24822 ;;		 -> STR_39(6), STR_37(33), STR_36(6), STR_28(24), 
 24823 ;;		 -> STR_27(18), STR_26(20), STR_25(25), STR_24(22), 
 24824 ;;		 -> STR_23(19), STR_22(20), STR_21(20), STR_19(6), 
 24825 ;;		 -> STR_17(6), STR_15(6), STR_13(6), STR_11(6), 
 24826 ;;		 -> STR_9(6), STR_7(31), STR_5(29), STR_4(55), 
 24827 ;;		 -> STR_3(35), STR_2(58), STR_1(37), 
 24828 ;; Auto vars:     Size  Location     Type
 24829 ;;		None
 24830 ;; Return value:  Size  Location     Type
 24831 ;;		None               void
 24832 ;; Registers used:
 24833 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24834 ;; Tracked objects:
 24835 ;;		On entry : F/0
 24836 ;;		On exit  : 0/0
 24837 ;;		Unchanged: 0/0
 24838 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24839 ;;      Params:         0       2       0       0       0       0       0
 24840 ;;      Locals:         0       0       0       0       0       0       0
 24841 ;;      Temps:          0       2       0       0       0       0       0
 24842 ;;      Totals:         0       4       0       0       0       0       0
 24843 ;;Total ram usage:        4 bytes
 24844 ;; Hardware stack levels used:    1
 24845 ;; Hardware stack levels required when called:    4
 24846 ;; This function calls:
 24847 ;;		_WriteUSART
 24848 ;; This function is called by:
 24849 ;;		_main
 24850 ;;		_doModeVerbose
 24851 ;;		_doModeSLCAN
 24852 ;;		_receivePrintEventVerbose
 24853 ;;		_receiveSendEventSLCAN
 24854 ;;		_printStatistics
 24855 ;;		_printErrors
 24856 ;;		_printHelp
 24857 ;;		_findNodes
 24858 ;;		_printGUID
 24859 ;;		_printMDF
 24860 ;;		_printNodeFirmwareVersion
 24861 ;;		_printFirmwareVersion
 24862 ;;		_printMode
 24863 ;; This function uses a non-reentrant model
 24864 ;;
 24865                           
 24866                           	psect	text67
 24867  005308                     __ptext67:
 24868                           	opt stack 0
 24869  005308                     _putsUSART:
 24870                           	opt stack 24
 24871  005308                     l1856:
 24872  005308  A2AC               	btfss	4012,1,c	;volatile
 24873  00530A  D7FE               	goto	l1856
 24874  00530C  0100               	movlb	0	; () banked
 24875  00530E  5161               	movf	putsUSART@data& (0+255),w,b
 24876  005310  6EF6               	movwf	tblptrl,c
 24877  005312  6EE9               	movwf	fsr0l,c
 24878  005314  0E05               	movlw	(high __ramtop+-1)
 24879  005316  6EEA               	movwf	fsr0h,c
 24880  005318  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24881  00531A  64EA               	cpfsgt	fsr0h,c
 24882  00531C  D003               	bra	u17967
 24883  00531E  6EEA               	movwf	fsr0h,c
 24884  005320  50EF               	movf	indf0,w,c
 24885  005322  D003               	bra	u17960
 24886  005324                     u17967:
 24887  005324  6EF7               	movwf	tblptrh,c
 24888  005326  0008               	tblrd		*
 24889  005328  50F5               	movf	tablat,w,c
 24890  00532A                     u17960:
 24891  00532A  EC5B  F02C         	call	_WriteUSART
 24892  00532E  0100               	movlb	0	; () banked
 24893  005330  5161               	movf	putsUSART@data& (0+255),w,b
 24894  005332  6F63               	movwf	??_putsUSART& (0+255),b
 24895  005334  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 24896  005336  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 24897  005338  4B61               	infsnz	putsUSART@data& (0+255),f,b
 24898  00533A  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 24899  00533C  5163               	movf	??_putsUSART& (0+255),w,b
 24900  00533E  6EF6               	movwf	tblptrl,c
 24901  005340  6EE9               	movwf	fsr0l,c
 24902  005342  0E05               	movlw	(high __ramtop+-1)
 24903  005344  6EEA               	movwf	fsr0h,c
 24904  005346  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 24905  005348  64EA               	cpfsgt	fsr0h,c
 24906  00534A  D003               	bra	u17977
 24907  00534C  6EEA               	movwf	fsr0h,c
 24908  00534E  50EF               	movf	indf0,w,c
 24909  005350  D003               	bra	u17970
 24910  005352                     u17977:
 24911  005352  6EF7               	movwf	tblptrh,c
 24912  005354  0008               	tblrd		*
 24913  005356  50F5               	movf	tablat,w,c
 24914  005358                     u17970:
 24915  005358  0900               	iorlw	0
 24916  00535A  B4D8               	btfsc	status,2,c
 24917  00535C  0012               	return	
 24918  00535E  D7D4               	goto	l1856
 24919  005360                     __end_of_putsUSART:
 24920                           	opt stack 0
 24921                           tblptru	equ	0xFF8
 24922                           tblptrh	equ	0xFF7
 24923                           tblptrl	equ	0xFF6
 24924                           tablat	equ	0xFF5
 24925                           prodh	equ	0xFF4
 24926                           prodl	equ	0xFF3
 24927                           intcon	equ	0xFF2
 24928                           indf0	equ	0xFEF
 24929                           postinc0	equ	0xFEE
 24930                           fsr0h	equ	0xFEA
 24931                           fsr0l	equ	0xFE9
 24932                           wreg	equ	0xFE8
 24933                           indf1	equ	0xFE7
 24934                           postinc1	equ	0xFE6
 24935                           postdec1	equ	0xFE5
 24936                           fsr1h	equ	0xFE2
 24937                           fsr1l	equ	0xFE1
 24938                           indf2	equ	0xFDF
 24939                           postinc2	equ	0xFDE
 24940                           postdec2	equ	0xFDD
 24941                           plusw2	equ	0xFDB
 24942                           fsr2h	equ	0xFDA
 24943                           fsr2l	equ	0xFD9
 24944                           status	equ	0xFD8
 24945                           
 24946 ;; *************** function _WriteUSART *****************
 24947 ;; Defined at:
 24948 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24949 ;; Parameters:    Size  Location     Type
 24950 ;;  data            1    wreg     unsigned char 
 24951 ;; Auto vars:     Size  Location     Type
 24952 ;;  data            1    0[BANK0 ] unsigned char 
 24953 ;; Return value:  Size  Location     Type
 24954 ;;		None               void
 24955 ;; Registers used:
 24956 ;;		wreg
 24957 ;; Tracked objects:
 24958 ;;		On entry : 0/1
 24959 ;;		On exit  : 0/0
 24960 ;;		Unchanged: 0/0
 24961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24962 ;;      Params:         0       0       0       0       0       0       0
 24963 ;;      Locals:         0       1       0       0       0       0       0
 24964 ;;      Temps:          0       0       0       0       0       0       0
 24965 ;;      Totals:         0       1       0       0       0       0       0
 24966 ;;Total ram usage:        1 bytes
 24967 ;; Hardware stack levels used:    1
 24968 ;; Hardware stack levels required when called:    3
 24969 ;; This function calls:
 24970 ;;		Nothing
 24971 ;; This function is called by:
 24972 ;;		_doModeVerbose
 24973 ;;		_sendEscapedUartData
 24974 ;;		_sendVSCPDriverErrorFrame
 24975 ;;		_sendVSCPDriverAck
 24976 ;;		_sendVSCPDriverNack
 24977 ;;		_sendVSCPDriverCommandReply
 24978 ;;		_receiveSendEventCANAL
 24979 ;;		_receiveSendMultiEventCANAL
 24980 ;;		_sendVSCPModeCapabilities
 24981 ;;		_receiveSendEventSLCAN
 24982 ;;		_printBinary
 24983 ;;		_printFirmwareVersion
 24984 ;;		_putsUSART
 24985 ;; This function uses a non-reentrant model
 24986 ;;
 24987                           
 24988                           	psect	text68
 24989  0058B6                     __ptext68:
 24990                           	opt stack 0
 24991  0058B6                     _WriteUSART:
 24992                           	opt stack 25
 24993                           
 24994                           ;incstack = 0
 24995                           ;incstack = 0
 24996                           ;WriteUSART@data stored from wreg
 24997  0058B6  CFE8 F060          	movff	wreg,WriteUSART@data
 24998  0058BA  ACAC               	btfss	4012,6,c	;volatile
 24999  0058BC  D003               	goto	l15522
 25000  0058BE  90AC               	bcf	4012,0,c	;volatile
 25001  0058C0  B22A               	btfsc	_USART_Status,1,c
 25002  0058C2  80AC               	bsf	4012,0,c	;volatile
 25003  0058C4                     l15522:
 25004  0058C4  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 25005  0058C8  0012               	return	
 25006  0058CA                     __end_of_WriteUSART:
 25007                           	opt stack 0
 25008                           tblptru	equ	0xFF8
 25009                           tblptrh	equ	0xFF7
 25010                           tblptrl	equ	0xFF6
 25011                           tablat	equ	0xFF5
 25012                           prodh	equ	0xFF4
 25013                           prodl	equ	0xFF3
 25014                           intcon	equ	0xFF2
 25015                           indf0	equ	0xFEF
 25016                           postinc0	equ	0xFEE
 25017                           fsr0h	equ	0xFEA
 25018                           fsr0l	equ	0xFE9
 25019                           wreg	equ	0xFE8
 25020                           indf1	equ	0xFE7
 25021                           postinc1	equ	0xFE6
 25022                           postdec1	equ	0xFE5
 25023                           fsr1h	equ	0xFE2
 25024                           fsr1l	equ	0xFE1
 25025                           indf2	equ	0xFDF
 25026                           postinc2	equ	0xFDE
 25027                           postdec2	equ	0xFDD
 25028                           plusw2	equ	0xFDB
 25029                           fsr2h	equ	0xFDA
 25030                           fsr2l	equ	0xFD9
 25031                           status	equ	0xFD8
 25032                           
 25033 ;; *************** function _init *****************
 25034 ;; Defined at:
 25035 ;;		line 400 in file "main.c"
 25036 ;; Parameters:    Size  Location     Type
 25037 ;;		None
 25038 ;; Auto vars:     Size  Location     Type
 25039 ;;		None
 25040 ;; Return value:  Size  Location     Type
 25041 ;;		None               void
 25042 ;; Registers used:
 25043 ;;		wreg, status,2, status,0, cstack
 25044 ;; Tracked objects:
 25045 ;;		On entry : 0/1
 25046 ;;		On exit  : F/0
 25047 ;;		Unchanged: 0/0
 25048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25049 ;;      Params:         0       0       0       0       0       0       0
 25050 ;;      Locals:         0       0       0       0       0       0       0
 25051 ;;      Temps:          0       0       0       0       0       0       0
 25052 ;;      Totals:         0       0       0       0       0       0       0
 25053 ;;Total ram usage:        0 bytes
 25054 ;; Hardware stack levels used:    1
 25055 ;; Hardware stack levels required when called:    5
 25056 ;; This function calls:
 25057 ;;		_WriteTimer0
 25058 ;;		_init_app_ram
 25059 ;;		_OpenUSART
 25060 ;;		_OpenTimer0
 25061 ;;		_ECANInitialize
 25062 ;; This function is called by:
 25063 ;;		_main
 25064 ;; This function uses a non-reentrant model
 25065 ;;
 25066                           
 25067                           	psect	text69
 25068  005444                     __ptext69:
 25069                           	opt stack 0
 25070  005444                     _init:
 25071                           	opt stack 25
 25072                           
 25073                           ;main.c: 402: init_app_ram();
 25074                           
 25075                           ;incstack = 0
 25076                           ;incstack = 0
 25077  005444  ECB0  F029         	call	_init_app_ram	;wreg free
 25078                           
 25079                           ; BSR set to: 0
 25080                           ;main.c: 405: OSCCONbits.IRCF0 = 1;
 25081  005448  88D3               	bsf	4051,4,c	;volatile
 25082                           
 25083                           ; BSR set to: 0
 25084                           ;main.c: 406: OSCCONbits.IRCF1 = 1;
 25085  00544A  8AD3               	bsf	4051,5,c	;volatile
 25086                           
 25087                           ; BSR set to: 0
 25088                           ;main.c: 407: OSCCONbits.IRCF2 = 1;
 25089  00544C  8CD3               	bsf	4051,6,c	;volatile
 25090                           
 25091                           ; BSR set to: 0
 25092                           ;main.c: 408: OSCTUNEbits.PLLEN = 1;
 25093  00544E  8C9B               	bsf	3995,6,c	;volatile
 25094                           
 25095                           ; BSR set to: 0
 25096                           ;main.c: 410: TRISBbits.RB2 = 0;
 25097  005450  9493               	bcf	3987,2,c	;volatile
 25098                           
 25099                           ; BSR set to: 0
 25100                           ;main.c: 411: TRISBbits.RB3 = 1;
 25101  005452  8693               	bsf	3987,3,c	;volatile
 25102                           
 25103                           ; BSR set to: 0
 25104                           ;main.c: 413: TRISCbits.RC1 = 0;
 25105  005454  9294               	bcf	3988,1,c	;volatile
 25106                           
 25107                           ; BSR set to: 0
 25108                           ;main.c: 414: TRISCbits.RC6 = 0;
 25109  005456  9C94               	bcf	3988,6,c	;volatile
 25110                           
 25111                           ; BSR set to: 0
 25112                           ;main.c: 415: TRISCbits.RC7 = 1;
 25113  005458  8E94               	bsf	3988,7,c	;volatile
 25114                           
 25115                           ;main.c: 419: OpenUSART( 0b01111111 &
 25116                           ;main.c: 420: 0b11111111 &
 25117                           ;main.c: 421: 0b11111110 &
 25118                           ;main.c: 422: 0b11111101 &
 25119                           ;main.c: 423: 0b11111111,
 25120                           ;main.c: 424: 21 );
 25121  00545A  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 25122  00545C  0E15               	movlw	21
 25123  00545E  6F60               	movwf	?_OpenUSART& (0+255),b
 25124  005460  0E7C               	movlw	124
 25125  005462  EC2A  F029         	call	_OpenUSART
 25126                           
 25127                           ; BSR set to: 0
 25128                           ;main.c: 426: RCIF = 0;
 25129  005466  9A9E               	bcf	3998,5,c	;volatile
 25130                           
 25131                           ; BSR set to: 0
 25132                           ;main.c: 427: RCIP = 0;
 25133  005468  9A9F               	bcf	3999,5,c	;volatile
 25134                           
 25135                           ; BSR set to: 0
 25136                           ;main.c: 428: RCIE = 1;
 25137  00546A  8A9D               	bsf	3997,5,c	;volatile
 25138                           
 25139                           ; BSR set to: 0
 25140                           ;main.c: 429: PEIE = 1;
 25141  00546C  8CF2               	bsf	intcon,6,c	;volatile
 25142                           
 25143                           ; BSR set to: 0
 25144                           ;main.c: 432: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 25145  00546E  0E92               	movlw	146
 25146  005470  EC25  F02C         	call	_OpenTimer0
 25147                           
 25148                           ; BSR set to: 0
 25149                           ;main.c: 433: WriteTimer0(0xfb1d);
 25150  005474  0EFB               	movlw	251
 25151  005476  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 25152  005478  0E1D               	movlw	29
 25153  00547A  6F60               	movwf	?_WriteTimer0& (0+255),b
 25154  00547C  EC65  F02C         	call	_WriteTimer0	;wreg free
 25155                           
 25156                           ;main.c: 436: ECANInitialize();
 25157  005480  ECCF  F026         	call	_ECANInitialize	;wreg free
 25158                           
 25159                           ; BSR set to: 0
 25160                           ;main.c: 460: RXBnIE = 1;
 25161  005484  82A3               	bsf	4003,1,c	;volatile
 25162                           
 25163                           ; BSR set to: 0
 25164                           ;main.c: 461: ERRIE = 1;
 25165  005486  8AA3               	bsf	4003,5,c	;volatile
 25166                           
 25167                           ; BSR set to: 0
 25168                           ;main.c: 463: (INTCONbits.GIE = 1);
 25169  005488  8EF2               	bsf	intcon,7,c	;volatile
 25170                           
 25171                           ; BSR set to: 0
 25172  00548A  0012               	return	
 25173  00548C                     __end_of_init:
 25174                           	opt stack 0
 25175                           tblptru	equ	0xFF8
 25176                           tblptrh	equ	0xFF7
 25177                           tblptrl	equ	0xFF6
 25178                           tablat	equ	0xFF5
 25179                           prodh	equ	0xFF4
 25180                           prodl	equ	0xFF3
 25181                           intcon	equ	0xFF2
 25182                           indf0	equ	0xFEF
 25183                           postinc0	equ	0xFEE
 25184                           fsr0h	equ	0xFEA
 25185                           fsr0l	equ	0xFE9
 25186                           wreg	equ	0xFE8
 25187                           indf1	equ	0xFE7
 25188                           postinc1	equ	0xFE6
 25189                           postdec1	equ	0xFE5
 25190                           fsr1h	equ	0xFE2
 25191                           fsr1l	equ	0xFE1
 25192                           indf2	equ	0xFDF
 25193                           postinc2	equ	0xFDE
 25194                           postdec2	equ	0xFDD
 25195                           plusw2	equ	0xFDB
 25196                           fsr2h	equ	0xFDA
 25197                           fsr2l	equ	0xFD9
 25198                           status	equ	0xFD8
 25199                           
 25200 ;; *************** function _ECANInitialize *****************
 25201 ;; Defined at:
 25202 ;;		line 168 in file "ECAN.c"
 25203 ;; Parameters:    Size  Location     Type
 25204 ;;		None
 25205 ;; Auto vars:     Size  Location     Type
 25206 ;;		None
 25207 ;; Return value:  Size  Location     Type
 25208 ;;		None               void
 25209 ;; Registers used:
 25210 ;;		wreg, status,2, status,0, cstack
 25211 ;; Tracked objects:
 25212 ;;		On entry : F/0
 25213 ;;		On exit  : F/0
 25214 ;;		Unchanged: 0/0
 25215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25216 ;;      Params:         0       0       0       0       0       0       0
 25217 ;;      Locals:         0       0       0       0       0       0       0
 25218 ;;      Temps:          0       0       0       0       0       0       0
 25219 ;;      Totals:         0       0       0       0       0       0       0
 25220 ;;Total ram usage:        0 bytes
 25221 ;; Hardware stack levels used:    1
 25222 ;; Hardware stack levels required when called:    4
 25223 ;; This function calls:
 25224 ;;		_ECANSetOperationMode
 25225 ;; This function is called by:
 25226 ;;		_init
 25227 ;; This function uses a non-reentrant model
 25228 ;;
 25229                           
 25230                           	psect	text70
 25231  004D9E                     __ptext70:
 25232                           	opt stack 0
 25233  004D9E                     _ECANInitialize:
 25234                           	opt stack 25
 25235                           
 25236                           ; BSR set to: 0
 25237                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 25238                           
 25239                           ; BSR set to: 0
 25240                           ;incstack = 0
 25241                           ;incstack = 0
 25242  004D9E  0E80               	movlw	128
 25243  004DA0  EC43  F02C         	call	_ECANSetOperationMode
 25244                           
 25245                           ; BSR set to: 0
 25246                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 25247  004DA4  0E09               	movlw	9
 25248  004DA6  6E70               	movwf	3952,c	;volatile
 25249                           
 25250                           ; BSR set to: 0
 25251                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 25252  004DA8  0EFC               	movlw	252
 25253  004DAA  6E71               	movwf	3953,c	;volatile
 25254                           
 25255                           ; BSR set to: 0
 25256                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 25257                           ;ECAN.c: 181: (0 << 6) |
 25258                           ;ECAN.c: 182: (2-1);
 25259  004DAC  0E01               	movlw	1
 25260  004DAE  6E72               	movwf	3954,c	;volatile
 25261                           
 25262                           ; BSR set to: 0
 25263                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 25264  004DB0  0E20               	movlw	32
 25265  004DB2  6E73               	movwf	3955,c	;volatile
 25266                           
 25267                           ; BSR set to: 0
 25268                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 25269  004DB4  8E77               	bsf	3959,7,c	;volatile
 25270                           
 25271                           ; BSR set to: 0
 25272                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 25273  004DB6  9C77               	bcf	3959,6,c	;volatile
 25274                           
 25275                           ; BSR set to: 0
 25276                           ;ECAN.c: 205: RXB0CON = 0;
 25277  004DB8  6A60               	clrf	3936,c	;volatile
 25278                           
 25279                           ; BSR set to: 0
 25280                           ;ECAN.c: 211: RXB1CON = 0;
 25281  004DBA  010F               	movlb	15	; () banked
 25282  004DBC  6B50               	clrf	80,b	;volatile
 25283                           
 25284                           ; BSR set to: 15
 25285                           ;ECAN.c: 221: B0CON = 0;
 25286  004DBE  010E               	movlb	14	; () banked
 25287  004DC0  6B20               	clrf	32,b	;volatile
 25288                           
 25289                           ; BSR set to: 14
 25290                           ;ECAN.c: 231: B1CON = 0;
 25291  004DC2  6B30               	clrf	48,b	;volatile
 25292                           
 25293                           ; BSR set to: 14
 25294                           ;ECAN.c: 241: B2CON = 0;
 25295  004DC4  6B40               	clrf	64,b	;volatile
 25296                           
 25297                           ; BSR set to: 14
 25298                           ;ECAN.c: 251: B3CON = 0;
 25299  004DC6  6B50               	clrf	80,b	;volatile
 25300                           
 25301                           ; BSR set to: 14
 25302                           ;ECAN.c: 261: B4CON = 0;
 25303  004DC8  6B60               	clrf	96,b	;volatile
 25304                           
 25305                           ; BSR set to: 14
 25306                           ;ECAN.c: 271: B5CON = 0;
 25307  004DCA  6B70               	clrf	112,b	;volatile
 25308                           
 25309                           ; BSR set to: 14
 25310                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 25311  004DCC  010D               	movlb	13	; () banked
 25312  004DCE  6BF8               	clrf	248,b	;volatile
 25313                           
 25314                           ; BSR set to: 13
 25315                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 25316  004DD0  010F               	movlb	15	; () banked
 25317  004DD2  6B00               	clrf	0,b	;volatile
 25318                           
 25319                           ; BSR set to: 15
 25320  004DD4  0E08               	movlw	8
 25321  004DD6  6F01               	movwf	1,b	;volatile
 25322                           
 25323                           ; BSR set to: 15
 25324  004DD8  6B02               	clrf	2,b	;volatile
 25325                           
 25326                           ; BSR set to: 15
 25327  004DDA  6B03               	clrf	3,b	;volatile
 25328                           
 25329                           ; BSR set to: 15
 25330                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 25331  004DDC  0E01               	movlw	1
 25332  004DDE  010D               	movlb	13	; () banked
 25333  004DE0  6FD4               	movwf	212,b	;volatile
 25334                           
 25335                           ; BSR set to: 13
 25336                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 25337  004DE2  6BD5               	clrf	213,b	;volatile
 25338                           
 25339                           ; BSR set to: 13
 25340                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25341  004DE4  6BE0               	clrf	224,b	;volatile
 25342                           
 25343                           ; BSR set to: 13
 25344                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25345  004DE6  0E11               	movlw	17
 25346  004DE8  6FE1               	movwf	225,b	;volatile
 25347                           
 25348                           ; BSR set to: 13
 25349                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25350  004DEA  6FE2               	movwf	226,b	;volatile
 25351                           
 25352                           ; BSR set to: 13
 25353                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25354  004DEC  6BE3               	clrf	227,b	;volatile
 25355                           
 25356                           ; BSR set to: 13
 25357                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25358  004DEE  6BE4               	clrf	228,b	;volatile
 25359                           
 25360                           ; BSR set to: 13
 25361                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25362  004DF0  6BE5               	clrf	229,b	;volatile
 25363                           
 25364                           ; BSR set to: 13
 25365                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25366  004DF2  6BE6               	clrf	230,b	;volatile
 25367                           
 25368                           ; BSR set to: 13
 25369                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25370  004DF4  6BE7               	clrf	231,b	;volatile
 25371                           
 25372                           ; BSR set to: 13
 25373                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25374  004DF6  0E54               	movlw	84
 25375  004DF8  6FF0               	movwf	240,b	;volatile
 25376                           
 25377                           ; BSR set to: 13
 25378                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25379  004DFA  0E05               	movlw	5
 25380  004DFC  6FF1               	movwf	241,b	;volatile
 25381                           
 25382                           ; BSR set to: 13
 25383                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25384  004DFE  6BF2               	clrf	242,b	;volatile
 25385                           
 25386                           ; BSR set to: 13
 25387                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25388  004E00  6BF2               	clrf	242,b	;volatile
 25389                           
 25390                           ; BSR set to: 13
 25391                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25392  004E02  010F               	movlb	15	; () banked
 25393  004E04  6B18               	clrf	24,b	;volatile
 25394                           
 25395                           ; BSR set to: 15
 25396  004E06  6B19               	clrf	25,b	;volatile
 25397                           
 25398                           ; BSR set to: 15
 25399  004E08  6B1A               	clrf	26,b	;volatile
 25400                           
 25401                           ; BSR set to: 15
 25402  004E0A  6B1B               	clrf	27,b	;volatile
 25403                           
 25404                           ; BSR set to: 15
 25405                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25406  004E0C  8719               	bsf	25,3,b	;volatile
 25407                           
 25408                           ; BSR set to: 15
 25409                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25410  004E0E  6B1C               	clrf	28,b	;volatile
 25411                           
 25412                           ; BSR set to: 15
 25413  004E10  6B1D               	clrf	29,b	;volatile
 25414                           
 25415                           ; BSR set to: 15
 25416  004E12  6B1E               	clrf	30,b	;volatile
 25417                           
 25418                           ; BSR set to: 15
 25419  004E14  6B1F               	clrf	31,b	;volatile
 25420                           
 25421                           ; BSR set to: 15
 25422                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25423  004E16  871D               	bsf	29,3,b	;volatile
 25424                           
 25425                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25426  004E18  0E20               	movlw	32
 25427  004E1A  EF43  F02C         	goto	_ECANSetOperationMode
 25428  004E1E                     __end_of_ECANInitialize:
 25429                           	opt stack 0
 25430                           tblptru	equ	0xFF8
 25431                           tblptrh	equ	0xFF7
 25432                           tblptrl	equ	0xFF6
 25433                           tablat	equ	0xFF5
 25434                           prodh	equ	0xFF4
 25435                           prodl	equ	0xFF3
 25436                           intcon	equ	0xFF2
 25437                           indf0	equ	0xFEF
 25438                           postinc0	equ	0xFEE
 25439                           fsr0h	equ	0xFEA
 25440                           fsr0l	equ	0xFE9
 25441                           wreg	equ	0xFE8
 25442                           indf1	equ	0xFE7
 25443                           postinc1	equ	0xFE6
 25444                           postdec1	equ	0xFE5
 25445                           fsr1h	equ	0xFE2
 25446                           fsr1l	equ	0xFE1
 25447                           indf2	equ	0xFDF
 25448                           postinc2	equ	0xFDE
 25449                           postdec2	equ	0xFDD
 25450                           plusw2	equ	0xFDB
 25451                           fsr2h	equ	0xFDA
 25452                           fsr2l	equ	0xFD9
 25453                           status	equ	0xFD8
 25454                           
 25455 ;; *************** function _ECANSetOperationMode *****************
 25456 ;; Defined at:
 25457 ;;		line 1014 in file "ECAN.c"
 25458 ;; Parameters:    Size  Location     Type
 25459 ;;  mode            1    wreg     enum E16337
 25460 ;; Auto vars:     Size  Location     Type
 25461 ;;  mode            1    0[BANK0 ] enum E16337
 25462 ;; Return value:  Size  Location     Type
 25463 ;;		None               void
 25464 ;; Registers used:
 25465 ;;		wreg, status,2, status,0
 25466 ;; Tracked objects:
 25467 ;;		On entry : 0/0
 25468 ;;		On exit  : F/0
 25469 ;;		Unchanged: 0/0
 25470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25471 ;;      Params:         0       0       0       0       0       0       0
 25472 ;;      Locals:         0       1       0       0       0       0       0
 25473 ;;      Temps:          0       0       0       0       0       0       0
 25474 ;;      Totals:         0       1       0       0       0       0       0
 25475 ;;Total ram usage:        1 bytes
 25476 ;; Hardware stack levels used:    1
 25477 ;; Hardware stack levels required when called:    3
 25478 ;; This function calls:
 25479 ;;		Nothing
 25480 ;; This function is called by:
 25481 ;;		_doModeVerbose
 25482 ;;		_doModeVscp
 25483 ;;		_doModeSLCAN
 25484 ;;		_ECANInitialize
 25485 ;; This function uses a non-reentrant model
 25486 ;;
 25487                           
 25488                           	psect	text71
 25489  005886                     __ptext71:
 25490                           	opt stack 0
 25491  005886                     _ECANSetOperationMode:
 25492                           	opt stack 26
 25493                           
 25494                           ; BSR set to: 0
 25495                           ;incstack = 0
 25496                           ;incstack = 0
 25497                           ;ECANSetOperationMode@mode stored from wreg
 25498  005886  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 25499                           
 25500                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25501  00588A  0E1F               	movlw	31
 25502  00588C  166F               	andwf	3951,f,c	;volatile
 25503                           
 25504                           ;ECAN.c: 1016: CANCON |= mode;
 25505  00588E  0100               	movlb	0	; () banked
 25506  005890  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 25507  005892  126F               	iorwf	3951,f,c	;volatile
 25508  005894                     l14844:
 25509                           
 25510                           ; BSR set to: 0
 25511  005894  506F               	movf	3951,w,c	;volatile
 25512  005896  0BE0               	andlw	224
 25513  005898  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 25514  00589A  B4D8               	btfsc	status,2,c
 25515                           
 25516                           ; BSR set to: 0
 25517  00589C  0012               	return	
 25518  00589E  D7FA               	goto	l14844
 25519  0058A0                     __end_of_ECANSetOperationMode:
 25520                           	opt stack 0
 25521                           tblptru	equ	0xFF8
 25522                           tblptrh	equ	0xFF7
 25523                           tblptrl	equ	0xFF6
 25524                           tablat	equ	0xFF5
 25525                           prodh	equ	0xFF4
 25526                           prodl	equ	0xFF3
 25527                           intcon	equ	0xFF2
 25528                           indf0	equ	0xFEF
 25529                           postinc0	equ	0xFEE
 25530                           fsr0h	equ	0xFEA
 25531                           fsr0l	equ	0xFE9
 25532                           wreg	equ	0xFE8
 25533                           indf1	equ	0xFE7
 25534                           postinc1	equ	0xFE6
 25535                           postdec1	equ	0xFE5
 25536                           fsr1h	equ	0xFE2
 25537                           fsr1l	equ	0xFE1
 25538                           indf2	equ	0xFDF
 25539                           postinc2	equ	0xFDE
 25540                           postdec2	equ	0xFDD
 25541                           plusw2	equ	0xFDB
 25542                           fsr2h	equ	0xFDA
 25543                           fsr2l	equ	0xFD9
 25544                           status	equ	0xFD8
 25545                           
 25546 ;; *************** function _OpenTimer0 *****************
 25547 ;; Defined at:
 25548 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25549 ;; Parameters:    Size  Location     Type
 25550 ;;  config          1    wreg     unsigned char 
 25551 ;; Auto vars:     Size  Location     Type
 25552 ;;  config          1    0[BANK0 ] unsigned char 
 25553 ;; Return value:  Size  Location     Type
 25554 ;;		None               void
 25555 ;; Registers used:
 25556 ;;		wreg, status,2, status,0
 25557 ;; Tracked objects:
 25558 ;;		On entry : F/0
 25559 ;;		On exit  : F/0
 25560 ;;		Unchanged: 0/0
 25561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25562 ;;      Params:         0       0       0       0       0       0       0
 25563 ;;      Locals:         0       1       0       0       0       0       0
 25564 ;;      Temps:          0       0       0       0       0       0       0
 25565 ;;      Totals:         0       1       0       0       0       0       0
 25566 ;;Total ram usage:        1 bytes
 25567 ;; Hardware stack levels used:    1
 25568 ;; Hardware stack levels required when called:    3
 25569 ;; This function calls:
 25570 ;;		Nothing
 25571 ;; This function is called by:
 25572 ;;		_init
 25573 ;; This function uses a non-reentrant model
 25574 ;;
 25575                           
 25576                           	psect	text72
 25577  00584A                     __ptext72:
 25578                           	opt stack 0
 25579  00584A                     _OpenTimer0:
 25580                           	opt stack 26
 25581                           
 25582                           ; BSR set to: 0
 25583                           ;incstack = 0
 25584                           ;incstack = 0
 25585                           ;OpenTimer0@config stored from wreg
 25586  00584A  CFE8 F060          	movff	wreg,OpenTimer0@config
 25587                           
 25588                           ; BSR set to: 0
 25589  00584E  5160               	movf	OpenTimer0@config& (0+255),w,b
 25590  005850  0B7F               	andlw	127
 25591  005852  6ED5               	movwf	4053,c	;volatile
 25592                           
 25593                           ; BSR set to: 0
 25594  005854  6AD7               	clrf	4055,c	;volatile
 25595                           
 25596                           ; BSR set to: 0
 25597  005856  6AD6               	clrf	4054,c	;volatile
 25598                           
 25599                           ; BSR set to: 0
 25600  005858  94F2               	bcf	intcon,2,c	;volatile
 25601                           
 25602                           ; BSR set to: 0
 25603  00585A  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 25604  00585C  D002               	goto	l1806
 25605                           
 25606                           ; BSR set to: 0
 25607  00585E  8AF2               	bsf	intcon,5,c	;volatile
 25608  005860  D001               	goto	l1807
 25609  005862                     l1806:
 25610                           
 25611                           ; BSR set to: 0
 25612  005862  9AF2               	bcf	intcon,5,c	;volatile
 25613  005864                     l1807:
 25614                           
 25615                           ; BSR set to: 0
 25616  005864  8ED5               	bsf	4053,7,c	;volatile
 25617                           
 25618                           ; BSR set to: 0
 25619  005866  0012               	return	
 25620  005868                     __end_of_OpenTimer0:
 25621                           	opt stack 0
 25622                           tblptru	equ	0xFF8
 25623                           tblptrh	equ	0xFF7
 25624                           tblptrl	equ	0xFF6
 25625                           tablat	equ	0xFF5
 25626                           prodh	equ	0xFF4
 25627                           prodl	equ	0xFF3
 25628                           intcon	equ	0xFF2
 25629                           indf0	equ	0xFEF
 25630                           postinc0	equ	0xFEE
 25631                           fsr0h	equ	0xFEA
 25632                           fsr0l	equ	0xFE9
 25633                           wreg	equ	0xFE8
 25634                           indf1	equ	0xFE7
 25635                           postinc1	equ	0xFE6
 25636                           postdec1	equ	0xFE5
 25637                           fsr1h	equ	0xFE2
 25638                           fsr1l	equ	0xFE1
 25639                           indf2	equ	0xFDF
 25640                           postinc2	equ	0xFDE
 25641                           postdec2	equ	0xFDD
 25642                           plusw2	equ	0xFDB
 25643                           fsr2h	equ	0xFDA
 25644                           fsr2l	equ	0xFD9
 25645                           status	equ	0xFD8
 25646                           
 25647 ;; *************** function _OpenUSART *****************
 25648 ;; Defined at:
 25649 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25650 ;; Parameters:    Size  Location     Type
 25651 ;;  config          1    wreg     unsigned char 
 25652 ;;  spbrg           2    0[BANK0 ] unsigned int 
 25653 ;; Auto vars:     Size  Location     Type
 25654 ;;  config          1    2[BANK0 ] unsigned char 
 25655 ;; Return value:  Size  Location     Type
 25656 ;;		None               void
 25657 ;; Registers used:
 25658 ;;		wreg, status,2
 25659 ;; Tracked objects:
 25660 ;;		On entry : F/0
 25661 ;;		On exit  : F/0
 25662 ;;		Unchanged: 0/0
 25663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25664 ;;      Params:         0       2       0       0       0       0       0
 25665 ;;      Locals:         0       1       0       0       0       0       0
 25666 ;;      Temps:          0       0       0       0       0       0       0
 25667 ;;      Totals:         0       3       0       0       0       0       0
 25668 ;;Total ram usage:        3 bytes
 25669 ;; Hardware stack levels used:    1
 25670 ;; Hardware stack levels required when called:    3
 25671 ;; This function calls:
 25672 ;;		Nothing
 25673 ;; This function is called by:
 25674 ;;		_init
 25675 ;; This function uses a non-reentrant model
 25676 ;;
 25677                           
 25678                           	psect	text73
 25679  005254                     __ptext73:
 25680                           	opt stack 0
 25681  005254                     _OpenUSART:
 25682                           	opt stack 26
 25683                           
 25684                           ; BSR set to: 0
 25685                           ;incstack = 0
 25686                           ;incstack = 0
 25687                           ;OpenUSART@config stored from wreg
 25688  005254  CFE8 F062          	movff	wreg,OpenUSART@config
 25689                           
 25690                           ; BSR set to: 0
 25691  005258  6AAC               	clrf	4012,c	;volatile
 25692  00525A  6AAB               	clrf	4011,c	;volatile
 25693                           
 25694                           ; BSR set to: 0
 25695  00525C  B162               	btfsc	OpenUSART@config& (0+255),0,b
 25696                           
 25697                           ; BSR set to: 0
 25698  00525E  88AC               	bsf	4012,4,c	;volatile
 25699                           
 25700                           ; BSR set to: 0
 25701  005260  A362               	btfss	OpenUSART@config& (0+255),1,b
 25702  005262  D002               	goto	l14534
 25703                           
 25704                           ; BSR set to: 0
 25705  005264  8CAC               	bsf	4012,6,c	;volatile
 25706  005266  8CAB               	bsf	4011,6,c	;volatile
 25707  005268                     l14534:
 25708                           
 25709                           ; BSR set to: 0
 25710  005268  B562               	btfsc	OpenUSART@config& (0+255),2,b
 25711                           
 25712                           ; BSR set to: 0
 25713  00526A  8EAC               	bsf	4012,7,c	;volatile
 25714                           
 25715                           ; BSR set to: 0
 25716  00526C  A762               	btfss	OpenUSART@config& (0+255),3,b
 25717  00526E  D002               	goto	l1839
 25718                           
 25719                           ; BSR set to: 0
 25720  005270  88AB               	bsf	4011,4,c	;volatile
 25721  005272  D001               	goto	l14542
 25722  005274                     l1839:
 25723                           
 25724                           ; BSR set to: 0
 25725  005274  8AAB               	bsf	4011,5,c	;volatile
 25726  005276                     l14542:
 25727                           
 25728                           ; BSR set to: 0
 25729  005276  B962               	btfsc	OpenUSART@config& (0+255),4,b
 25730                           
 25731                           ; BSR set to: 0
 25732  005278  84AC               	bsf	4012,2,c	;volatile
 25733                           
 25734                           ; BSR set to: 0
 25735  00527A  989E               	bcf	3998,4,c	;volatile
 25736                           
 25737                           ; BSR set to: 0
 25738  00527C  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 25739                           
 25740                           ; BSR set to: 0
 25741  00527E  86AB               	bsf	4011,3,c	;volatile
 25742                           
 25743                           ; BSR set to: 0
 25744  005280  AD62               	btfss	OpenUSART@config& (0+255),6,b
 25745  005282  D002               	goto	l1843
 25746                           
 25747                           ; BSR set to: 0
 25748  005284  8A9D               	bsf	3997,5,c	;volatile
 25749  005286  D001               	goto	l1844
 25750  005288                     l1843:
 25751                           
 25752                           ; BSR set to: 0
 25753  005288  9A9D               	bcf	3997,5,c	;volatile
 25754  00528A                     l1844:
 25755                           
 25756                           ; BSR set to: 0
 25757  00528A  9A9E               	bcf	3998,5,c	;volatile
 25758                           
 25759                           ; BSR set to: 0
 25760  00528C  AF62               	btfss	OpenUSART@config& (0+255),7,b
 25761  00528E  D002               	goto	l1845
 25762                           
 25763                           ; BSR set to: 0
 25764  005290  889D               	bsf	3997,4,c	;volatile
 25765  005292  D001               	goto	l1846
 25766  005294                     l1845:
 25767                           
 25768                           ; BSR set to: 0
 25769  005294  989D               	bcf	3997,4,c	;volatile
 25770  005296                     l1846:
 25771                           
 25772                           ; BSR set to: 0
 25773  005296  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 25774                           
 25775                           ; BSR set to: 0
 25776  00529A  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 25777  00529C  6EB0               	movwf	4016,c	;volatile
 25778                           
 25779                           ; BSR set to: 0
 25780  00529E  8AAC               	bsf	4012,5,c	;volatile
 25781                           
 25782                           ; BSR set to: 0
 25783  0052A0  8EAB               	bsf	4011,7,c	;volatile
 25784                           
 25785                           ; BSR set to: 0
 25786  0052A2  9C94               	bcf	3988,6,c	;volatile
 25787                           
 25788                           ; BSR set to: 0
 25789  0052A4  8E94               	bsf	3988,7,c	;volatile
 25790                           
 25791                           ; BSR set to: 0
 25792  0052A6  B8AC               	btfsc	4012,4,c	;volatile
 25793                           
 25794                           ; BSR set to: 0
 25795  0052A8  BEAC               	btfsc	4012,7,c	;volatile
 25796  0052AA  D001               	goto	l1848
 25797                           
 25798                           ; BSR set to: 0
 25799  0052AC  8C94               	bsf	3988,6,c	;volatile
 25800  0052AE                     l1848:
 25801                           
 25802                           ; BSR set to: 0
 25803  0052AE  0012               	return	
 25804  0052B0                     __end_of_OpenUSART:
 25805                           	opt stack 0
 25806                           tblptru	equ	0xFF8
 25807                           tblptrh	equ	0xFF7
 25808                           tblptrl	equ	0xFF6
 25809                           tablat	equ	0xFF5
 25810                           prodh	equ	0xFF4
 25811                           prodl	equ	0xFF3
 25812                           intcon	equ	0xFF2
 25813                           indf0	equ	0xFEF
 25814                           postinc0	equ	0xFEE
 25815                           fsr0h	equ	0xFEA
 25816                           fsr0l	equ	0xFE9
 25817                           wreg	equ	0xFE8
 25818                           indf1	equ	0xFE7
 25819                           postinc1	equ	0xFE6
 25820                           postdec1	equ	0xFE5
 25821                           fsr1h	equ	0xFE2
 25822                           fsr1l	equ	0xFE1
 25823                           indf2	equ	0xFDF
 25824                           postinc2	equ	0xFDE
 25825                           postdec2	equ	0xFDD
 25826                           plusw2	equ	0xFDB
 25827                           fsr2h	equ	0xFDA
 25828                           fsr2l	equ	0xFD9
 25829                           status	equ	0xFD8
 25830                           
 25831 ;; *************** function _WriteTimer0 *****************
 25832 ;; Defined at:
 25833 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25834 ;; Parameters:    Size  Location     Type
 25835 ;;  timer0          2    0[BANK0 ] unsigned int 
 25836 ;; Auto vars:     Size  Location     Type
 25837 ;;  timer           2    2[BANK0 ] struct Timers
 25838 ;; Return value:  Size  Location     Type
 25839 ;;		None               void
 25840 ;; Registers used:
 25841 ;;		None
 25842 ;; Tracked objects:
 25843 ;;		On entry : F/0
 25844 ;;		On exit  : F/0
 25845 ;;		Unchanged: F/0
 25846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25847 ;;      Params:         0       2       0       0       0       0       0
 25848 ;;      Locals:         0       2       0       0       0       0       0
 25849 ;;      Temps:          0       0       0       0       0       0       0
 25850 ;;      Totals:         0       4       0       0       0       0       0
 25851 ;;Total ram usage:        4 bytes
 25852 ;; Hardware stack levels used:    1
 25853 ;; Hardware stack levels required when called:    3
 25854 ;; This function calls:
 25855 ;;		Nothing
 25856 ;; This function is called by:
 25857 ;;		_init
 25858 ;; This function uses a non-reentrant model
 25859 ;;
 25860                           
 25861                           	psect	text74
 25862  0058CA                     __ptext74:
 25863                           	opt stack 0
 25864  0058CA                     _WriteTimer0:
 25865                           	opt stack 26
 25866                           
 25867                           ; BSR set to: 0
 25868                           
 25869                           ; BSR set to: 0
 25870                           ;incstack = 0
 25871                           ;incstack = 0
 25872  0058CA  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 25873  0058CE  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 25874  0058D2  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 25875  0058D6  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 25876                           
 25877                           ; BSR set to: 0
 25878  0058DA  0012               	return	
 25879  0058DC                     __end_of_WriteTimer0:
 25880                           	opt stack 0
 25881                           tblptru	equ	0xFF8
 25882                           tblptrh	equ	0xFF7
 25883                           tblptrl	equ	0xFF6
 25884                           tablat	equ	0xFF5
 25885                           prodh	equ	0xFF4
 25886                           prodl	equ	0xFF3
 25887                           intcon	equ	0xFF2
 25888                           indf0	equ	0xFEF
 25889                           postinc0	equ	0xFEE
 25890                           fsr0h	equ	0xFEA
 25891                           fsr0l	equ	0xFE9
 25892                           wreg	equ	0xFE8
 25893                           indf1	equ	0xFE7
 25894                           postinc1	equ	0xFE6
 25895                           postdec1	equ	0xFE5
 25896                           fsr1h	equ	0xFE2
 25897                           fsr1l	equ	0xFE1
 25898                           indf2	equ	0xFDF
 25899                           postinc2	equ	0xFDE
 25900                           postdec2	equ	0xFDD
 25901                           plusw2	equ	0xFDB
 25902                           fsr2h	equ	0xFDA
 25903                           fsr2l	equ	0xFD9
 25904                           status	equ	0xFD8
 25905                           
 25906 ;; *************** function _vscp_restoreDefaults *****************
 25907 ;; Defined at:
 25908 ;;		line 2787 in file "main.c"
 25909 ;; Parameters:    Size  Location     Type
 25910 ;;		None
 25911 ;; Auto vars:     Size  Location     Type
 25912 ;;		None
 25913 ;; Return value:  Size  Location     Type
 25914 ;;		None               void
 25915 ;; Registers used:
 25916 ;;		wreg, status,2, status,0, cstack
 25917 ;; Tracked objects:
 25918 ;;		On entry : 0/1
 25919 ;;		On exit  : F/0
 25920 ;;		Unchanged: 0/0
 25921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25922 ;;      Params:         0       0       0       0       0       0       0
 25923 ;;      Locals:         0       0       0       0       0       0       0
 25924 ;;      Temps:          0       0       0       0       0       0       0
 25925 ;;      Totals:         0       0       0       0       0       0       0
 25926 ;;Total ram usage:        0 bytes
 25927 ;; Hardware stack levels used:    1
 25928 ;; Hardware stack levels required when called:    5
 25929 ;; This function calls:
 25930 ;;		_init_app_ram
 25931 ;;		_init_app_eeprom
 25932 ;; This function is called by:
 25933 ;;		_main
 25934 ;; This function uses a non-reentrant model
 25935 ;;
 25936                           
 25937                           	psect	text75
 25938  005900                     __ptext75:
 25939                           	opt stack 0
 25940  005900                     _vscp_restoreDefaults:
 25941                           	opt stack 25
 25942                           
 25943                           ;main.c: 2788: init_app_eeprom();
 25944                           
 25945                           ; BSR set to: 0
 25946                           ;incstack = 0
 25947                           ;incstack = 0
 25948  005900  ECC8  F022         	call	_init_app_eeprom	;wreg free
 25949                           
 25950                           ; BSR set to: 0
 25951                           ;main.c: 2789: init_app_ram();
 25952  005904  EFB0  F029         	goto	_init_app_ram	;wreg free
 25953  005908                     __end_of_vscp_restoreDefaults:
 25954                           	opt stack 0
 25955                           tblptru	equ	0xFF8
 25956                           tblptrh	equ	0xFF7
 25957                           tblptrl	equ	0xFF6
 25958                           tablat	equ	0xFF5
 25959                           prodh	equ	0xFF4
 25960                           prodl	equ	0xFF3
 25961                           intcon	equ	0xFF2
 25962                           indf0	equ	0xFEF
 25963                           postinc0	equ	0xFEE
 25964                           fsr0h	equ	0xFEA
 25965                           fsr0l	equ	0xFE9
 25966                           wreg	equ	0xFE8
 25967                           indf1	equ	0xFE7
 25968                           postinc1	equ	0xFE6
 25969                           postdec1	equ	0xFE5
 25970                           fsr1h	equ	0xFE2
 25971                           fsr1l	equ	0xFE1
 25972                           indf2	equ	0xFDF
 25973                           postinc2	equ	0xFDE
 25974                           postdec2	equ	0xFDD
 25975                           plusw2	equ	0xFDB
 25976                           fsr2h	equ	0xFDA
 25977                           fsr2l	equ	0xFD9
 25978                           status	equ	0xFD8
 25979                           
 25980 ;; *************** function _init_app_eeprom *****************
 25981 ;; Defined at:
 25982 ;;		line 490 in file "main.c"
 25983 ;; Parameters:    Size  Location     Type
 25984 ;;		None
 25985 ;; Auto vars:     Size  Location     Type
 25986 ;;  i               1    4[BANK0 ] unsigned char 
 25987 ;; Return value:  Size  Location     Type
 25988 ;;		None               void
 25989 ;; Registers used:
 25990 ;;		wreg, status,2, status,0, cstack
 25991 ;; Tracked objects:
 25992 ;;		On entry : 0/1
 25993 ;;		On exit  : F/0
 25994 ;;		Unchanged: 0/0
 25995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25996 ;;      Params:         0       0       0       0       0       0       0
 25997 ;;      Locals:         0       1       0       0       0       0       0
 25998 ;;      Temps:          0       0       0       0       0       0       0
 25999 ;;      Totals:         0       1       0       0       0       0       0
 26000 ;;Total ram usage:        1 bytes
 26001 ;; Hardware stack levels used:    1
 26002 ;; Hardware stack levels required when called:    4
 26003 ;; This function calls:
 26004 ;;		_Busy_eep
 26005 ;;		_Write_b_eep
 26006 ;; This function is called by:
 26007 ;;		_vscp_restoreDefaults
 26008 ;; This function uses a non-reentrant model
 26009 ;;
 26010                           
 26011                           	psect	text76
 26012  004590                     __ptext76:
 26013                           	opt stack 0
 26014  004590                     _init_app_eeprom:
 26015                           	opt stack 25
 26016                           
 26017                           ;main.c: 491: uint8_t i;
 26018                           ;main.c: 493: (Busy_eep(), Write_b_eep(0x01,0x55));
 26019                           
 26020                           ; BSR set to: 0
 26021                           ;incstack = 0
 26022                           ;incstack = 0
 26023  004590  EC84  F02C         	call	_Busy_eep	;wreg free
 26024  004594  0100               	movlb	0	; () banked
 26025  004596  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26026  004598  0E01               	movlw	1
 26027  00459A  6F60               	movwf	?_Write_b_eep& (0+255),b
 26028  00459C  0E55               	movlw	85
 26029  00459E  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26030  0045A0  EC9D  F02B         	call	_Write_b_eep	;wreg free
 26031                           
 26032                           ;main.c: 494: (Busy_eep(), Write_b_eep(0x02,0xAA));
 26033  0045A4  EC84  F02C         	call	_Busy_eep	;wreg free
 26034  0045A8  0100               	movlb	0	; () banked
 26035  0045AA  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26036  0045AC  0E02               	movlw	2
 26037  0045AE  6F60               	movwf	?_Write_b_eep& (0+255),b
 26038  0045B0  0EAA               	movlw	170
 26039  0045B2  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26040  0045B4  EC9D  F02B         	call	_Write_b_eep	;wreg free
 26041                           
 26042                           ;main.c: 495: (Busy_eep(), Write_b_eep(0x03,0));
 26043  0045B8  EC84  F02C         	call	_Busy_eep	;wreg free
 26044  0045BC  0100               	movlb	0	; () banked
 26045  0045BE  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26046  0045C0  0E03               	movlw	3
 26047  0045C2  6F60               	movwf	?_Write_b_eep& (0+255),b
 26048  0045C4  0E00               	movlw	0
 26049  0045C6  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26050  0045C8  EC9D  F02B         	call	_Write_b_eep	;wreg free
 26051                           
 26052                           ;main.c: 496: (Busy_eep(), Write_b_eep(0x05,0));
 26053  0045CC  EC84  F02C         	call	_Busy_eep	;wreg free
 26054  0045D0  0100               	movlb	0	; () banked
 26055  0045D2  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26056  0045D4  0E05               	movlw	5
 26057  0045D6  6F60               	movwf	?_Write_b_eep& (0+255),b
 26058  0045D8  0E00               	movlw	0
 26059  0045DA  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26060  0045DC  EC9D  F02B         	call	_Write_b_eep	;wreg free
 26061                           
 26062                           ;main.c: 497: (Busy_eep(), Write_b_eep(0x06,0));
 26063  0045E0  EC84  F02C         	call	_Busy_eep	;wreg free
 26064  0045E4  0100               	movlb	0	; () banked
 26065  0045E6  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26066  0045E8  0E06               	movlw	6
 26067  0045EA  6F60               	movwf	?_Write_b_eep& (0+255),b
 26068  0045EC  0E00               	movlw	0
 26069  0045EE  6B62               	clrf	(?_Write_b_eep+2)& (0+255),b
 26070  0045F0  EC9D  F02B         	call	_Write_b_eep	;wreg free
 26071                           
 26072                           ;main.c: 498: (Busy_eep(), Write_b_eep(0x09,10u));
 26073  0045F4  EC84  F02C         	call	_Busy_eep	;wreg free
 26074  0045F8  0100               	movlb	0	; () banked
 26075  0045FA  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26076  0045FC  0E09               	movlw	9
 26077  0045FE  6F60               	movwf	?_Write_b_eep& (0+255),b
 26078  004600  0E0A               	movlw	10
 26079  004602  6F62               	movwf	(?_Write_b_eep+2)& (0+255),b
 26080  004604  EC9D  F02B         	call	_Write_b_eep	;wreg free
 26081                           
 26082                           ;main.c: 501: for (i = 0x20; i < (0x5C + 4); i++) {
 26083  004608  0E20               	movlw	32
 26084  00460A  0100               	movlb	0	; () banked
 26085  00460C  6F64               	movwf	init_app_eeprom@i& (0+255),b
 26086  00460E                     l14698:
 26087                           
 26088                           ; BSR set to: 0
 26089                           ;main.c: 502: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26090  00460E  EC84  F02C         	call	_Busy_eep	;wreg free
 26091  004612  D814               	call	PL60	;call to abstracted procedure
 26092  004614  EC9D  F02B         	call	_Write_b_eep	;wreg free
 26093  004618  0100               	movlb	0	; () banked
 26094  00461A  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 26095                           
 26096                           ; BSR set to: 0
 26097  00461C  0E5F               	movlw	95
 26098  00461E  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 26099  004620  D7F6               	goto	l14698
 26100                           
 26101                           ; BSR set to: 0
 26102                           ;main.c: 503: }
 26103                           ;main.c: 506: for (i = 0x60; i < (0x64 + 4); i++) {
 26104  004622  0E60               	movlw	96
 26105  004624  6F64               	movwf	init_app_eeprom@i& (0+255),b
 26106  004626                     l14712:
 26107                           
 26108                           ; BSR set to: 0
 26109                           ;main.c: 507: (Busy_eep(), Write_b_eep(0x01,0xFF));
 26110  004626  EC84  F02C         	call	_Busy_eep	;wreg free
 26111  00462A  D808               	call	PL60	;call to abstracted procedure
 26112  00462C  EC9D  F02B         	call	_Write_b_eep	;wreg free
 26113  004630  0100               	movlb	0	; () banked
 26114  004632  2B64               	incf	init_app_eeprom@i& (0+255),f,b
 26115                           
 26116                           ; BSR set to: 0
 26117  004634  0E67               	movlw	103
 26118  004636  6564               	cpfsgt	init_app_eeprom@i& (0+255),b
 26119  004638  D7F6               	goto	l14712
 26120                           
 26121                           ; BSR set to: 0
 26122  00463A  0C67               	retlw	103
 26123  00463C                     __end_of_init_app_eeprom:
 26124                           	opt stack 0
 26125  00463C                     PL60:
 26126                           	opt stack 25
 26127  00463C  0100               	movlb	0	; () banked
 26128  00463E  6B61               	clrf	(?_Write_b_eep+1)& (0+255),b
 26129  004640  0E01               	movlw	1
 26130  004642  6F60               	movwf	?_Write_b_eep& (0+255),b
 26131  004644  6962               	setf	(?_Write_b_eep+2)& (0+255),b
 26132  004646  0CFF               	retlw	255
 26133  004648                     __end_ofPL60:
 26134                           	opt stack 0
 26135                           tblptru	equ	0xFF8
 26136                           tblptrh	equ	0xFF7
 26137                           tblptrl	equ	0xFF6
 26138                           tablat	equ	0xFF5
 26139                           prodh	equ	0xFF4
 26140                           prodl	equ	0xFF3
 26141                           intcon	equ	0xFF2
 26142                           indf0	equ	0xFEF
 26143                           postinc0	equ	0xFEE
 26144                           fsr0h	equ	0xFEA
 26145                           fsr0l	equ	0xFE9
 26146                           wreg	equ	0xFE8
 26147                           indf1	equ	0xFE7
 26148                           postinc1	equ	0xFE6
 26149                           postdec1	equ	0xFE5
 26150                           fsr1h	equ	0xFE2
 26151                           fsr1l	equ	0xFE1
 26152                           indf2	equ	0xFDF
 26153                           postinc2	equ	0xFDE
 26154                           postdec2	equ	0xFDD
 26155                           plusw2	equ	0xFDB
 26156                           fsr2h	equ	0xFDA
 26157                           fsr2l	equ	0xFD9
 26158                           status	equ	0xFD8
 26159                           
 26160 ;; *************** function _Write_b_eep *****************
 26161 ;; Defined at:
 26162 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 26163 ;; Parameters:    Size  Location     Type
 26164 ;;  badd            2    0[BANK0 ] unsigned int 
 26165 ;;  bdat            1    2[BANK0 ] unsigned char 
 26166 ;; Auto vars:     Size  Location     Type
 26167 ;;  GIE_BIT_VAL     1    3[BANK0 ] unsigned char 
 26168 ;; Return value:  Size  Location     Type
 26169 ;;		None               void
 26170 ;; Registers used:
 26171 ;;		wreg, status,2
 26172 ;; Tracked objects:
 26173 ;;		On entry : F/0
 26174 ;;		On exit  : 0/0
 26175 ;;		Unchanged: 0/0
 26176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26177 ;;      Params:         0       3       0       0       0       0       0
 26178 ;;      Locals:         0       1       0       0       0       0       0
 26179 ;;      Temps:          0       0       0       0       0       0       0
 26180 ;;      Totals:         0       4       0       0       0       0       0
 26181 ;;Total ram usage:        4 bytes
 26182 ;; Hardware stack levels used:    1
 26183 ;; Hardware stack levels required when called:    3
 26184 ;; This function calls:
 26185 ;;		Nothing
 26186 ;; This function is called by:
 26187 ;;		_init_app_eeprom
 26188 ;;		_doModeVerbose
 26189 ;;		_doModeSLCAN
 26190 ;; This function uses a non-reentrant model
 26191 ;;
 26192                           
 26193                           	psect	text77
 26194  00573A                     __ptext77:
 26195                           	opt stack 0
 26196  00573A                     _Write_b_eep:
 26197                           	opt stack 26
 26198                           
 26199                           ; BSR set to: 0
 26200                           
 26201                           ; BSR set to: 0
 26202                           ;incstack = 0
 26203                           ;incstack = 0
 26204  00573A  C060  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 26205  00573E  C062  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 26206  005742  9EA6               	bcf	4006,7,c	;volatile
 26207  005744  9CA6               	bcf	4006,6,c	;volatile
 26208  005746  84A6               	bsf	4006,2,c	;volatile
 26209                           
 26210                           ; BSR set to: 0
 26211  005748  0E00               	movlw	0
 26212  00574A  BEF2               	btfsc	intcon,7,c	;volatile
 26213  00574C  0E01               	movlw	1
 26214  00574E  6F63               	movwf	Write_b_eep@GIE_BIT_VAL& (0+255),b
 26215                           
 26216                           ; BSR set to: 0
 26217  005750  9EF2               	bcf	intcon,7,c	;volatile
 26218                           
 26219                           ; BSR set to: 0
 26220  005752  0E55               	movlw	85
 26221  005754  6EA7               	movwf	4007,c	;volatile
 26222                           
 26223                           ; BSR set to: 0
 26224  005756  0EAA               	movlw	170
 26225  005758  6EA7               	movwf	4007,c	;volatile
 26226                           
 26227                           ; BSR set to: 0
 26228  00575A  82A6               	bsf	4006,1,c	;volatile
 26229  00575C                     l1790:
 26230                           
 26231                           ; BSR set to: 0
 26232  00575C  B2A6               	btfsc	4006,1,c	;volatile
 26233  00575E  D7FE               	goto	l1790
 26234                           
 26235                           ; BSR set to: 0
 26236  005760  B163               	btfsc	Write_b_eep@GIE_BIT_VAL& (0+255),0,b
 26237  005762  D002               	bra	u19825
 26238  005764  9EF2               	bcf	intcon,7,c	;volatile
 26239  005766  D001               	bra	u19826
 26240  005768                     u19825:
 26241  005768  8EF2               	bsf	intcon,7,c	;volatile
 26242  00576A                     u19826:
 26243  00576A  94A6               	bcf	4006,2,c	;volatile
 26244  00576C  0012               	return	
 26245  00576E                     __end_of_Write_b_eep:
 26246                           	opt stack 0
 26247                           tblptru	equ	0xFF8
 26248                           tblptrh	equ	0xFF7
 26249                           tblptrl	equ	0xFF6
 26250                           tablat	equ	0xFF5
 26251                           prodh	equ	0xFF4
 26252                           prodl	equ	0xFF3
 26253                           intcon	equ	0xFF2
 26254                           indf0	equ	0xFEF
 26255                           postinc0	equ	0xFEE
 26256                           fsr0h	equ	0xFEA
 26257                           fsr0l	equ	0xFE9
 26258                           wreg	equ	0xFE8
 26259                           indf1	equ	0xFE7
 26260                           postinc1	equ	0xFE6
 26261                           postdec1	equ	0xFE5
 26262                           fsr1h	equ	0xFE2
 26263                           fsr1l	equ	0xFE1
 26264                           indf2	equ	0xFDF
 26265                           postinc2	equ	0xFDE
 26266                           postdec2	equ	0xFDD
 26267                           plusw2	equ	0xFDB
 26268                           fsr2h	equ	0xFDA
 26269                           fsr2l	equ	0xFD9
 26270                           status	equ	0xFD8
 26271                           
 26272 ;; *************** function _Busy_eep *****************
 26273 ;; Defined at:
 26274 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 26275 ;; Parameters:    Size  Location     Type
 26276 ;;		None
 26277 ;; Auto vars:     Size  Location     Type
 26278 ;;		None
 26279 ;; Return value:  Size  Location     Type
 26280 ;;		None               void
 26281 ;; Registers used:
 26282 ;;		None
 26283 ;; Tracked objects:
 26284 ;;		On entry : 0/1
 26285 ;;		On exit  : 0/0
 26286 ;;		Unchanged: 0/0
 26287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26288 ;;      Params:         0       0       0       0       0       0       0
 26289 ;;      Locals:         0       0       0       0       0       0       0
 26290 ;;      Temps:          0       0       0       0       0       0       0
 26291 ;;      Totals:         0       0       0       0       0       0       0
 26292 ;;Total ram usage:        0 bytes
 26293 ;; Hardware stack levels used:    1
 26294 ;; Hardware stack levels required when called:    3
 26295 ;; This function calls:
 26296 ;;		Nothing
 26297 ;; This function is called by:
 26298 ;;		_init_app_eeprom
 26299 ;;		_doModeVerbose
 26300 ;;		_doModeSLCAN
 26301 ;; This function uses a non-reentrant model
 26302 ;;
 26303                           
 26304                           	psect	text78
 26305  005908                     __ptext78:
 26306                           	opt stack 0
 26307  005908                     _Busy_eep:
 26308                           	opt stack 26
 26309  005908                     l1765:
 26310  005908  A2A6               	btfss	4006,1,c	;volatile
 26311  00590A  0012               	return	
 26312  00590C  D7FD               	goto	l1765
 26313  00590E                     __end_of_Busy_eep:
 26314                           	opt stack 0
 26315                           tblptru	equ	0xFF8
 26316                           tblptrh	equ	0xFF7
 26317                           tblptrl	equ	0xFF6
 26318                           tablat	equ	0xFF5
 26319                           prodh	equ	0xFF4
 26320                           prodl	equ	0xFF3
 26321                           intcon	equ	0xFF2
 26322                           indf0	equ	0xFEF
 26323                           postinc0	equ	0xFEE
 26324                           fsr0h	equ	0xFEA
 26325                           fsr0l	equ	0xFE9
 26326                           wreg	equ	0xFE8
 26327                           indf1	equ	0xFE7
 26328                           postinc1	equ	0xFE6
 26329                           postdec1	equ	0xFE5
 26330                           fsr1h	equ	0xFE2
 26331                           fsr1l	equ	0xFE1
 26332                           indf2	equ	0xFDF
 26333                           postinc2	equ	0xFDE
 26334                           postdec2	equ	0xFDD
 26335                           plusw2	equ	0xFDB
 26336                           fsr2h	equ	0xFDA
 26337                           fsr2l	equ	0xFD9
 26338                           status	equ	0xFD8
 26339                           
 26340 ;; *************** function _init_app_ram *****************
 26341 ;; Defined at:
 26342 ;;		line 472 in file "main.c"
 26343 ;; Parameters:    Size  Location     Type
 26344 ;;		None
 26345 ;; Auto vars:     Size  Location     Type
 26346 ;;		None
 26347 ;; Return value:  Size  Location     Type
 26348 ;;		None               void
 26349 ;; Registers used:
 26350 ;;		wreg, status,2, cstack
 26351 ;; Tracked objects:
 26352 ;;		On entry : 0/1
 26353 ;;		On exit  : F/0
 26354 ;;		Unchanged: 0/0
 26355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26356 ;;      Params:         0       0       0       0       0       0       0
 26357 ;;      Locals:         0       0       0       0       0       0       0
 26358 ;;      Temps:          0       0       0       0       0       0       0
 26359 ;;      Totals:         0       0       0       0       0       0       0
 26360 ;;Total ram usage:        0 bytes
 26361 ;; Hardware stack levels used:    1
 26362 ;; Hardware stack levels required when called:    4
 26363 ;; This function calls:
 26364 ;;		_Read_b_eep
 26365 ;; This function is called by:
 26366 ;;		_init
 26367 ;;		_vscp_restoreDefaults
 26368 ;; This function uses a non-reentrant model
 26369 ;;
 26370                           
 26371                           	psect	text79
 26372  005360                     __ptext79:
 26373                           	opt stack 0
 26374  005360                     _init_app_ram:
 26375                           	opt stack 25
 26376                           
 26377                           ;main.c: 474: can_receiveOverruns = 0;
 26378                           
 26379                           ;incstack = 0
 26380                           ;incstack = 0
 26381  005360  0101               	movlb	1	; () banked
 26382  005362  6B00               	clrf	_can_receiveOverruns& (0+255),b
 26383  005364  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26384  005366  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26385  005368  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26386                           
 26387                           ;main.c: 475: can_transmitOverruns = 0;
 26388  00536A  6B04               	clrf	_can_transmitOverruns& (0+255),b
 26389  00536C  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 26390  00536E  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 26391  005370  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 26392                           
 26393                           ;main.c: 476: uart_receiveOverruns = 0;
 26394  005372  6B1C               	clrf	_uart_receiveOverruns& (0+255),b
 26395  005374  6B1D               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 26396  005376  6B1E               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 26397  005378  6B1F               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 26398                           
 26399                           ;main.c: 477: uart_transmitOverruns = 0;
 26400  00537A  6B20               	clrf	_uart_transmitOverruns& (0+255),b
 26401  00537C  6B21               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 26402  00537E  6B22               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 26403  005380  6B23               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 26404                           
 26405                           ; BSR set to: 1
 26406                           ;main.c: 479: bHex = Read_b_eep(0x06);
 26407  005382  0100               	movlb	0	; () banked
 26408  005384  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26409  005386  0E06               	movlw	6
 26410  005388  6F60               	movwf	?_Read_b_eep& (0+255),b
 26411  00538A  EC6E  F02C         	call	_Read_b_eep	;wreg free
 26412  00538E  0100               	movlb	0	; () banked
 26413  005390  6FE4               	movwf	_bHex& (0+255),b
 26414                           
 26415                           ;main.c: 480: mode = Read_b_eep(0x03);
 26416  005392  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26417  005394  0E03               	movlw	3
 26418  005396  6F60               	movwf	?_Read_b_eep& (0+255),b
 26419  005398  EC6E  F02C         	call	_Read_b_eep	;wreg free
 26420  00539C  0100               	movlb	0	; () banked
 26421  00539E  6FE6               	movwf	_mode& (0+255),b
 26422                           
 26423                           ;main.c: 482: rwtimeout = Read_b_eep(0x09);
 26424  0053A0  6B61               	clrf	(?_Read_b_eep+1)& (0+255),b
 26425  0053A2  0E09               	movlw	9
 26426  0053A4  6F60               	movwf	?_Read_b_eep& (0+255),b
 26427  0053A6  EC6E  F02C         	call	_Read_b_eep	;wreg free
 26428  0053AA  0100               	movlb	0	; () banked
 26429  0053AC  6FE8               	movwf	_rwtimeout& (0+255),b
 26430                           
 26431                           ; BSR set to: 0
 26432  0053AE  0012               	return	
 26433  0053B0                     __end_of_init_app_ram:
 26434                           	opt stack 0
 26435                           tblptru	equ	0xFF8
 26436                           tblptrh	equ	0xFF7
 26437                           tblptrl	equ	0xFF6
 26438                           tablat	equ	0xFF5
 26439                           prodh	equ	0xFF4
 26440                           prodl	equ	0xFF3
 26441                           intcon	equ	0xFF2
 26442                           indf0	equ	0xFEF
 26443                           postinc0	equ	0xFEE
 26444                           fsr0h	equ	0xFEA
 26445                           fsr0l	equ	0xFE9
 26446                           wreg	equ	0xFE8
 26447                           indf1	equ	0xFE7
 26448                           postinc1	equ	0xFE6
 26449                           postdec1	equ	0xFE5
 26450                           fsr1h	equ	0xFE2
 26451                           fsr1l	equ	0xFE1
 26452                           indf2	equ	0xFDF
 26453                           postinc2	equ	0xFDE
 26454                           postdec2	equ	0xFDD
 26455                           plusw2	equ	0xFDB
 26456                           fsr2h	equ	0xFDA
 26457                           fsr2l	equ	0xFD9
 26458                           status	equ	0xFD8
 26459                           
 26460 ;; *************** function _Read_b_eep *****************
 26461 ;; Defined at:
 26462 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 26463 ;; Parameters:    Size  Location     Type
 26464 ;;  badd            2    0[BANK0 ] unsigned int 
 26465 ;; Auto vars:     Size  Location     Type
 26466 ;;		None
 26467 ;; Return value:  Size  Location     Type
 26468 ;;                  1    wreg      unsigned char 
 26469 ;; Registers used:
 26470 ;;		wreg, status,2
 26471 ;; Tracked objects:
 26472 ;;		On entry : F/0
 26473 ;;		On exit  : 0/0
 26474 ;;		Unchanged: 0/0
 26475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26476 ;;      Params:         0       2       0       0       0       0       0
 26477 ;;      Locals:         0       0       0       0       0       0       0
 26478 ;;      Temps:          0       0       0       0       0       0       0
 26479 ;;      Totals:         0       2       0       0       0       0       0
 26480 ;;Total ram usage:        2 bytes
 26481 ;; Hardware stack levels used:    1
 26482 ;; Hardware stack levels required when called:    3
 26483 ;; This function calls:
 26484 ;;		Nothing
 26485 ;; This function is called by:
 26486 ;;		_main
 26487 ;;		_init_app_ram
 26488 ;; This function uses a non-reentrant model
 26489 ;;
 26490                           
 26491                           	psect	text80
 26492  0058DC                     __ptext80:
 26493                           	opt stack 0
 26494  0058DC                     _Read_b_eep:
 26495                           	opt stack 25
 26496                           
 26497                           ; BSR set to: 0
 26498                           
 26499                           ; BSR set to: 0
 26500                           ;incstack = 0
 26501                           ;incstack = 0
 26502  0058DC  C060  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 26503  0058E0  9CA6               	bcf	4006,6,c	;volatile
 26504  0058E2  9EA6               	bcf	4006,7,c	;volatile
 26505  0058E4  80A6               	bsf	4006,0,c	;volatile
 26506  0058E6  F000               	nop		;# 
 26507  0058E8  F000               	nop		;# 
 26508  0058EA  50A8               	movf	4008,w,c	;volatile
 26509  0058EC  0012               	return	
 26510  0058EE                     __end_of_Read_b_eep:
 26511                           	opt stack 0
 26512                           tblptru	equ	0xFF8
 26513                           tblptrh	equ	0xFF7
 26514                           tblptrl	equ	0xFF6
 26515                           tablat	equ	0xFF5
 26516                           prodh	equ	0xFF4
 26517                           prodl	equ	0xFF3
 26518                           intcon	equ	0xFF2
 26519                           indf0	equ	0xFEF
 26520                           postinc0	equ	0xFEE
 26521                           fsr0h	equ	0xFEA
 26522                           fsr0l	equ	0xFE9
 26523                           wreg	equ	0xFE8
 26524                           indf1	equ	0xFE7
 26525                           postinc1	equ	0xFE6
 26526                           postdec1	equ	0xFE5
 26527                           fsr1h	equ	0xFE2
 26528                           fsr1l	equ	0xFE1
 26529                           indf2	equ	0xFDF
 26530                           postinc2	equ	0xFDE
 26531                           postdec2	equ	0xFDD
 26532                           plusw2	equ	0xFDB
 26533                           fsr2h	equ	0xFDA
 26534                           fsr2l	equ	0xFD9
 26535                           status	equ	0xFD8
 26536                           
 26537 ;; *************** function _fifo_init *****************
 26538 ;; Defined at:
 26539 ;;		line 14 in file "fifo.c"
 26540 ;; Parameters:    Size  Location     Type
 26541 ;;  f               2    0[BANK0 ] PTR struct .
 26542 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26543 ;;  buf             2    2[BANK0 ] PTR const void 
 26544 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 26545 ;;  size            2    4[BANK0 ] unsigned short 
 26546 ;; Auto vars:     Size  Location     Type
 26547 ;;		None
 26548 ;; Return value:  Size  Location     Type
 26549 ;;		None               void
 26550 ;; Registers used:
 26551 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26552 ;; Tracked objects:
 26553 ;;		On entry : F/0
 26554 ;;		On exit  : F/0
 26555 ;;		Unchanged: 0/0
 26556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26557 ;;      Params:         0       6       0       0       0       0       0
 26558 ;;      Locals:         0       0       0       0       0       0       0
 26559 ;;      Temps:          0       0       0       0       0       0       0
 26560 ;;      Totals:         0       6       0       0       0       0       0
 26561 ;;Total ram usage:        6 bytes
 26562 ;; Hardware stack levels used:    1
 26563 ;; Hardware stack levels required when called:    3
 26564 ;; This function calls:
 26565 ;;		Nothing
 26566 ;; This function is called by:
 26567 ;;		_main
 26568 ;; This function uses a non-reentrant model
 26569 ;;
 26570                           
 26571                           	psect	text81
 26572  005596                     __ptext81:
 26573                           	opt stack 0
 26574  005596                     _fifo_init:
 26575                           	opt stack 27
 26576                           
 26577                           ; BSR set to: 0
 26578                           ;fifo.c: 15: f->head = 0;
 26579                           
 26580                           ;incstack = 0
 26581                           ;incstack = 0
 26582  005596  EE20 F002          	lfsr	2,2
 26583  00559A  D816               	call	PL94	;call to abstracted procedure
 26584                           
 26585                           ;fifo.c: 16: f->tail = 0;
 26586  00559C  EE20 F004          	lfsr	2,4
 26587  0055A0  D813               	call	PL94	;call to abstracted procedure
 26588                           
 26589                           ;fifo.c: 17: f->size = size;
 26590  0055A2  EE20 F006          	lfsr	2,6
 26591  0055A6  5160               	movf	fifo_init@f& (0+255),w,b
 26592  0055A8  26D9               	addwf	fsr2l,f,c
 26593  0055AA  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 26594  0055AC  22DA               	addwfc	fsr2h,f,c
 26595  0055AE  C064  FFDE         	movff	fifo_init@size,postinc2
 26596  0055B2  C065  FFDD         	movff	fifo_init@size+1,postdec2
 26597                           
 26598                           ; BSR set to: 0
 26599                           ;fifo.c: 18: f->buf = buf;
 26600  0055B6  C060  FFD9         	movff	fifo_init@f,fsr2l
 26601  0055BA  C061  FFDA         	movff	fifo_init@f+1,fsr2h
 26602  0055BE  C062  FFDE         	movff	fifo_init@buf,postinc2
 26603  0055C2  C063  FFDD         	movff	fifo_init@buf+1,postdec2
 26604                           
 26605                           ; BSR set to: 0
 26606  0055C6  0012               	return	
 26607  0055C8                     __end_of_fifo_init:
 26608                           	opt stack 0
 26609  0055C8                     PL94:
 26610                           	opt stack 27
 26611  0055C8  5160               	movf	fifo_init@f& (0+255),w,b
 26612  0055CA  26D9               	addwf	fsr2l,f,c
 26613  0055CC  5161               	movf	(fifo_init@f+1)& (0+255),w,b
 26614  0055CE  22DA               	addwfc	fsr2h,f,c
 26615  0055D0  6ADE               	clrf	postinc2,c
 26616  0055D2  6ADD               	clrf	postdec2,c
 26617  0055D4  0012               	return	
 26618  0055D6                     __end_ofPL94:
 26619                           	opt stack 0
 26620                           tblptru	equ	0xFF8
 26621                           tblptrh	equ	0xFF7
 26622                           tblptrl	equ	0xFF6
 26623                           tablat	equ	0xFF5
 26624                           prodh	equ	0xFF4
 26625                           prodl	equ	0xFF3
 26626                           intcon	equ	0xFF2
 26627                           indf0	equ	0xFEF
 26628                           postinc0	equ	0xFEE
 26629                           fsr0h	equ	0xFEA
 26630                           fsr0l	equ	0xFE9
 26631                           wreg	equ	0xFE8
 26632                           indf1	equ	0xFE7
 26633                           postinc1	equ	0xFE6
 26634                           postdec1	equ	0xFE5
 26635                           fsr1h	equ	0xFE2
 26636                           fsr1l	equ	0xFE1
 26637                           indf2	equ	0xFDF
 26638                           postinc2	equ	0xFDE
 26639                           postdec2	equ	0xFDD
 26640                           plusw2	equ	0xFDB
 26641                           fsr2h	equ	0xFDA
 26642                           fsr2l	equ	0xFD9
 26643                           status	equ	0xFD8
 26644                           
 26645 ;; *************** function _Interrupt *****************
 26646 ;; Defined at:
 26647 ;;		line 144 in file "main.c"
 26648 ;; Parameters:    Size  Location     Type
 26649 ;;		None
 26650 ;; Auto vars:     Size  Location     Type
 26651 ;;  fail            1   32[COMRAM] unsigned char 
 26652 ;;  c               1   31[COMRAM] unsigned char 
 26653 ;; Return value:  Size  Location     Type
 26654 ;;		None               void
 26655 ;; Registers used:
 26656 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26657 ;; Tracked objects:
 26658 ;;		On entry : 0/0
 26659 ;;		On exit  : 0/0
 26660 ;;		Unchanged: 0/0
 26661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26662 ;;      Params:         0       0       0       0       0       0       0
 26663 ;;      Locals:         2       0       0       0       0       0       0
 26664 ;;      Temps:          9       0       0       0       0       0       0
 26665 ;;      Totals:        11       0       0       0       0       0       0
 26666 ;;Total ram usage:       11 bytes
 26667 ;; Hardware stack levels used:    1
 26668 ;; Hardware stack levels required when called:    2
 26669 ;; This function calls:
 26670 ;;		_ReadUSART
 26671 ;;		_fifo_write
 26672 ;;		_ECANReceiveMessage
 26673 ;;		_fifo_getFree
 26674 ;;		i1_WriteTimer0
 26675 ;; This function is called by:
 26676 ;;		Interrupt level 1
 26677 ;; This function uses a non-reentrant model
 26678 ;;
 26679                           
 26680                           	psect	intcodelo
 26681  000018                     __pintcodelo:
 26682                           	opt stack 0
 26683  000018                     _Interrupt:
 26684                           	opt stack 20
 26685                           
 26686                           ; BSR set to: 0
 26687                           ;incstack = 0
 26688  000018  CFD8 F019          	movff	status,??_Interrupt+2
 26689  00001C  CFE8 F01A          	movff	wreg,??_Interrupt+3
 26690  000020  CFE0 F01B          	movff	bsr,??_Interrupt+4
 26691  000024  CFE1 F01C          	movff	fsr1l,??_Interrupt+5
 26692  000028  CFE2 F01D          	movff	fsr1h,??_Interrupt+6
 26693  00002C  CFD9 F01E          	movff	fsr2l,??_Interrupt+7
 26694  000030  CFDA F01F          	movff	fsr2h,??_Interrupt+8
 26695  000034                     
 26696                           ;main.c: 145: uint8_t c;
 26697                           ;main.c: 148: if ( 1 == PIR1bits.RCIF ) {
 26698  000034  AA9E               	btfss	3998,5,c	;volatile
 26699  000036  D001               	goto	i1u1748_21
 26700  000038  D001               	goto	i1u1748_20
 26701  00003A                     i1u1748_21:
 26702  00003A  D02B               	goto	i1l399
 26703  00003C                     i1u1748_20:
 26704  00003C                     
 26705                           ;main.c: 150: c = ReadUSART();
 26706  00003C  EC34  F02C         	call	_ReadUSART	;wreg free
 26707  000040  6E20               	movwf	Interrupt@c,c
 26708  000042                     
 26709                           ;main.c: 152: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 26710  000042  0101               	movlb	1	; () banked
 26711  000044  0E01               	movlw	high _serialInputFifo
 26712  000046  6E02               	movwf	?_fifo_write+1,c
 26713  000048  0ED6               	movlw	low _serialInputFifo
 26714  00004A  6E01               	movwf	?_fifo_write,c
 26715  00004C  0E20               	movlw	low Interrupt@c
 26716  00004E  6E03               	movwf	?_fifo_write+2,c
 26717  000050  0E00               	movlw	high Interrupt@c
 26718  000052  6E04               	movwf	?_fifo_write+3,c
 26719  000054  0E0F               	movlw	15
 26720  000056  6E04               	movwf	?_fifo_write+3,c
 26721  000058  0E5F               	movlw	__accesstop+-1
 26722  00005A  6403               	cpfsgt	?_fifo_write+2,c
 26723  00005C  6A04               	clrf	?_fifo_write+3,c
 26724  00005E  0E01               	movlw	1
 26725  000060  6E05               	movwf	?_fifo_write+4,c
 26726  000062  0E00               	movlw	0
 26727  000064  6E06               	movwf	?_fifo_write+5,c
 26728  000066  0E00               	movlw	0
 26729  000068  6E07               	movwf	?_fifo_write+6,c
 26730  00006A  0E00               	movlw	0
 26731  00006C  6E08               	movwf	?_fifo_write+7,c
 26732  00006E  EC7E  F01C         	call	_fifo_write	;wreg free
 26733  000072  0401               	decf	?_fifo_write,w,c
 26734  000074  1002               	iorwf	?_fifo_write+1,w,c
 26735  000076  B4D8               	btfsc	status,2,c
 26736  000078  D001               	goto	i1u1749_21
 26737  00007A  D001               	goto	i1u1749_20
 26738  00007C                     i1u1749_21:
 26739  00007C  D008               	goto	i1l13252
 26740  00007E                     i1u1749_20:
 26741  00007E                     
 26742                           ; BSR set to: 1
 26743                           ;main.c: 154: uart_receiveOverruns++;
 26744  00007E  0E01               	movlw	1
 26745  000080  271C               	addwf	_uart_receiveOverruns& (0+255),f,b
 26746  000082  0E00               	movlw	0
 26747  000084  231D               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 26748  000086  0E00               	movlw	0
 26749  000088  231E               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 26750  00008A  0E00               	movlw	0
 26751  00008C  231F               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 26752  00008E                     i1l13252:
 26753                           
 26754                           ; BSR set to: 1
 26755                           ;main.c: 155: }
 26756                           ;main.c: 158: PIR1bits.RCIF = 0;
 26757  00008E  9A9E               	bcf	3998,5,c	;volatile
 26758                           
 26759                           ;main.c: 160: }
 26760  000090  D07D               	goto	i1l401
 26761  000092                     i1l399:
 26762                           
 26763                           ;main.c: 162: else if (1 == INTCONbits.TMR0IF) {
 26764  000092  A4F2               	btfss	intcon,2,c	;volatile
 26765  000094  D001               	goto	i1u1750_21
 26766  000096  D001               	goto	i1u1750_20
 26767  000098                     i1u1750_21:
 26768  000098  D079               	goto	i1l401
 26769  00009A                     i1u1750_20:
 26770  00009A                     
 26771                           ;main.c: 164: WriteTimer0(0xfb1d);
 26772  00009A  0EFB               	movlw	251
 26773  00009C  6E02               	movwf	?i1_WriteTimer0+1,c
 26774  00009E  0E1D               	movlw	29
 26775  0000A0  6E01               	movwf	?i1_WriteTimer0,c
 26776  0000A2  EC77  F02C         	call	i1_WriteTimer0	;wreg free
 26777  0000A6                     
 26778                           ;main.c: 166: timer++;
 26779  0000A6  0E01               	movlw	1
 26780  0000A8  0101               	movlb	1	; () banked
 26781  0000AA  2718               	addwf	_timer& (0+255),f,b	;volatile
 26782  0000AC  0E00               	movlw	0
 26783  0000AE  2319               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 26784  0000B0  0E00               	movlw	0
 26785  0000B2  231A               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 26786  0000B4  0E00               	movlw	0
 26787  0000B6  231B               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 26788  0000B8                     
 26789                           ; BSR set to: 1
 26790                           ;main.c: 167: timekeeper++;
 26791  0000B8  0E01               	movlw	1
 26792  0000BA  2622               	addwf	_timekeeper,f,c	;volatile
 26793  0000BC  0E00               	movlw	0
 26794  0000BE  2223               	addwfc	_timekeeper+1,f,c	;volatile
 26795  0000C0  0E00               	movlw	0
 26796  0000C2  2224               	addwfc	_timekeeper+2,f,c	;volatile
 26797  0000C4  0E00               	movlw	0
 26798  0000C6  2225               	addwfc	_timekeeper+3,f,c	;volatile
 26799  0000C8                     
 26800                           ; BSR set to: 1
 26801                           ;main.c: 170: status_led_cnt++;
 26802  0000C8  4A26               	infsnz	_status_led_cnt,f,c	;volatile
 26803  0000CA  2A27               	incf	_status_led_cnt+1,f,c	;volatile
 26804  0000CC                     
 26805                           ; BSR set to: 1
 26806                           ;main.c: 171: if ((2 == ledFunctionality) &&
 26807                           ;main.c: 172: (status_led_cnt > 1000)) {
 26808  0000CC  5030               	movf	_ledFunctionality,w,c
 26809  0000CE  0A02               	xorlw	2
 26810  0000D0  A4D8               	btfss	status,2,c
 26811  0000D2  D001               	goto	i1u1751_21
 26812  0000D4  D001               	goto	i1u1751_20
 26813  0000D6                     i1u1751_21:
 26814  0000D6  D00C               	goto	i1l13268
 26815  0000D8                     i1u1751_20:
 26816  0000D8                     
 26817                           ; BSR set to: 1
 26818  0000D8  0EE9               	movlw	233
 26819  0000DA  5C26               	subwf	_status_led_cnt,w,c	;volatile
 26820  0000DC  0E03               	movlw	3
 26821  0000DE  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 26822  0000E0  A0D8               	btfss	status,0,c
 26823  0000E2  D001               	goto	i1u1752_21
 26824  0000E4  D001               	goto	i1u1752_20
 26825  0000E6                     i1u1752_21:
 26826  0000E6  D004               	goto	i1l13268
 26827  0000E8                     i1u1752_20:
 26828  0000E8                     i1l13266:
 26829                           
 26830                           ; BSR set to: 1
 26831                           ;main.c: 173: LATC1 = ~LATC1;
 26832  0000E8  728B               	btg	3979,1,c	;volatile
 26833                           
 26834                           ;main.c: 174: status_led_cnt = 0;
 26835  0000EA  6A26               	clrf	_status_led_cnt,c	;volatile
 26836  0000EC  6A27               	clrf	_status_led_cnt+1,c	;volatile
 26837                           
 26838                           ;main.c: 175: }
 26839  0000EE  D04D               	goto	i1l404
 26840  0000F0                     i1l13268:
 26841                           
 26842                           ; BSR set to: 1
 26843                           ;main.c: 176: else if ((3 == ledFunctionality) &&
 26844                           ;main.c: 177: (status_led_cnt > 400)) {
 26845  0000F0  5030               	movf	_ledFunctionality,w,c
 26846  0000F2  0A03               	xorlw	3
 26847  0000F4  A4D8               	btfss	status,2,c
 26848  0000F6  D001               	goto	i1u1753_21
 26849  0000F8  D001               	goto	i1u1753_20
 26850  0000FA                     i1u1753_21:
 26851  0000FA  D009               	goto	i1l13274
 26852  0000FC                     i1u1753_20:
 26853  0000FC                     
 26854                           ; BSR set to: 1
 26855  0000FC  0E91               	movlw	145
 26856  0000FE  5C26               	subwf	_status_led_cnt,w,c	;volatile
 26857  000100  0E01               	movlw	1
 26858  000102  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 26859  000104  A0D8               	btfss	status,0,c
 26860  000106  D001               	goto	i1u1754_21
 26861  000108  D001               	goto	i1u1754_20
 26862  00010A                     i1u1754_21:
 26863  00010A  D001               	goto	i1l13274
 26864  00010C                     i1u1754_20:
 26865  00010C  D7ED               	goto	i1l13266
 26866  00010E                     i1l13274:
 26867                           
 26868                           ; BSR set to: 1
 26869                           ;main.c: 181: else if ((4 == ledFunctionality) &&
 26870                           ;main.c: 182: (status_led_cnt > 100)) {
 26871  00010E  5030               	movf	_ledFunctionality,w,c
 26872  000110  0A04               	xorlw	4
 26873  000112  A4D8               	btfss	status,2,c
 26874  000114  D001               	goto	i1u1755_21
 26875  000116  D001               	goto	i1u1755_20
 26876  000118                     i1u1755_21:
 26877  000118  D009               	goto	i1l13280
 26878  00011A                     i1u1755_20:
 26879  00011A                     
 26880                           ; BSR set to: 1
 26881  00011A  0E65               	movlw	101
 26882  00011C  5C26               	subwf	_status_led_cnt,w,c	;volatile
 26883  00011E  0E00               	movlw	0
 26884  000120  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 26885  000122  A0D8               	btfss	status,0,c
 26886  000124  D001               	goto	i1u1756_21
 26887  000126  D001               	goto	i1u1756_20
 26888  000128                     i1u1756_21:
 26889  000128  D001               	goto	i1l13280
 26890  00012A                     i1u1756_20:
 26891  00012A  D7DE               	goto	i1l13266
 26892  00012C                     i1l13280:
 26893                           
 26894                           ; BSR set to: 1
 26895                           ;main.c: 186: else if ((5 == ledFunctionality) &&
 26896                           ;main.c: 187: (status_led_cnt > 70)) {
 26897  00012C  5030               	movf	_ledFunctionality,w,c
 26898  00012E  0A05               	xorlw	5
 26899  000130  A4D8               	btfss	status,2,c
 26900  000132  D001               	goto	i1u1757_21
 26901  000134  D001               	goto	i1u1757_20
 26902  000136                     i1u1757_21:
 26903  000136  D009               	goto	i1l13286
 26904  000138                     i1u1757_20:
 26905  000138                     
 26906                           ; BSR set to: 1
 26907  000138  0E47               	movlw	71
 26908  00013A  5C26               	subwf	_status_led_cnt,w,c	;volatile
 26909  00013C  0E00               	movlw	0
 26910  00013E  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 26911  000140  A0D8               	btfss	status,0,c
 26912  000142  D001               	goto	i1u1758_21
 26913  000144  D001               	goto	i1u1758_20
 26914  000146                     i1u1758_21:
 26915  000146  D001               	goto	i1l13286
 26916  000148                     i1u1758_20:
 26917  000148  D7CF               	goto	i1l13266
 26918  00014A                     i1l13286:
 26919                           
 26920                           ; BSR set to: 1
 26921                           ;main.c: 191: else if ((6 == ledFunctionality) &&
 26922                           ;main.c: 192: (status_led_cnt > 40)) {
 26923  00014A  5030               	movf	_ledFunctionality,w,c
 26924  00014C  0A06               	xorlw	6
 26925  00014E  A4D8               	btfss	status,2,c
 26926  000150  D001               	goto	i1u1759_21
 26927  000152  D001               	goto	i1u1759_20
 26928  000154                     i1u1759_21:
 26929  000154  D009               	goto	i1l13292
 26930  000156                     i1u1759_20:
 26931  000156                     
 26932                           ; BSR set to: 1
 26933  000156  0E29               	movlw	41
 26934  000158  5C26               	subwf	_status_led_cnt,w,c	;volatile
 26935  00015A  0E00               	movlw	0
 26936  00015C  5827               	subwfb	_status_led_cnt+1,w,c	;volatile
 26937  00015E  A0D8               	btfss	status,0,c
 26938  000160  D001               	goto	i1u1760_21
 26939  000162  D001               	goto	i1u1760_20
 26940  000164                     i1u1760_21:
 26941  000164  D001               	goto	i1l13292
 26942  000166                     i1u1760_20:
 26943  000166  D7C0               	goto	i1l13266
 26944  000168                     i1l13292:
 26945                           
 26946                           ; BSR set to: 1
 26947                           ;main.c: 196: else if (1 == ledFunctionality) {
 26948  000168  0430               	decf	_ledFunctionality,w,c
 26949  00016A  A4D8               	btfss	status,2,c
 26950  00016C  D001               	goto	i1u1761_21
 26951  00016E  D001               	goto	i1u1761_20
 26952  000170                     i1u1761_21:
 26953  000170  D004               	goto	i1l413
 26954  000172                     i1u1761_20:
 26955  000172                     
 26956                           ; BSR set to: 1
 26957                           ;main.c: 197: LATC1 = 1;
 26958  000172  828B               	bsf	3979,1,c	;volatile
 26959                           
 26960                           ;main.c: 198: status_led_cnt = 0;
 26961  000174  6A26               	clrf	_status_led_cnt,c	;volatile
 26962  000176  6A27               	clrf	_status_led_cnt+1,c	;volatile
 26963                           
 26964                           ;main.c: 199: }
 26965  000178  D008               	goto	i1l404
 26966  00017A                     i1l413:
 26967                           
 26968                           ; BSR set to: 1
 26969                           ;main.c: 200: else if (0 == ledFunctionality) {
 26970  00017A  6630               	tstfsz	_ledFunctionality,c
 26971  00017C  D001               	goto	i1u1762_21
 26972  00017E  D001               	goto	i1u1762_20
 26973  000180                     i1u1762_21:
 26974  000180  D004               	goto	i1l410
 26975  000182                     i1u1762_20:
 26976  000182                     
 26977                           ; BSR set to: 1
 26978                           ;main.c: 201: LATC1 = 0;
 26979  000182  928B               	bcf	3979,1,c	;volatile
 26980                           
 26981                           ;main.c: 202: status_led_cnt = 0;
 26982  000184  6A26               	clrf	_status_led_cnt,c	;volatile
 26983  000186  6A27               	clrf	_status_led_cnt+1,c	;volatile
 26984  000188  D000               	goto	i1l404
 26985  00018A                     i1l410:
 26986  00018A                     i1l404:
 26987                           
 26988                           ; BSR set to: 1
 26989                           ;main.c: 203: }
 26990                           ;main.c: 205: INTCONbits.TMR0IF = 0;
 26991  00018A  94F2               	bcf	intcon,2,c	;volatile
 26992  00018C                     i1l401:
 26993                           
 26994                           ;main.c: 206: }
 26995                           ;main.c: 209: if ( 1 == IRXIF ) {
 26996  00018C  AEA4               	btfss	4004,7,c	;volatile
 26997  00018E  D001               	goto	i1u1763_21
 26998  000190  D001               	goto	i1u1763_20
 26999  000192                     i1u1763_21:
 27000  000192  D001               	goto	i1l416
 27001  000194                     i1u1763_20:
 27002  000194                     
 27003                           ;main.c: 211: IRXIF = 0;
 27004  000194  9EA4               	bcf	4004,7,c	;volatile
 27005  000196                     i1l416:
 27006                           
 27007                           ;main.c: 212: }
 27008                           ;main.c: 215: if ( RXBnIF ) {
 27009  000196  A2A4               	btfss	4004,1,c	;volatile
 27010  000198  D001               	goto	i1u1764_21
 27011  00019A  D001               	goto	i1u1764_20
 27012  00019C                     i1u1764_21:
 27013  00019C  D09F               	goto	i1l429
 27014  00019E                     i1u1764_20:
 27015  00019E                     
 27016                           ;main.c: 217: if ( ECANReceiveMessage((unsigned long *)&id,
 27017                           ;main.c: 218: (BYTE*)&data,
 27018                           ;main.c: 219: (BYTE*)&dlc,
 27019                           ;main.c: 220: &flags) ) {
 27020  00019E  0101               	movlb	1	; () banked
 27021  0001A0  0E01               	movlw	high _id
 27022  0001A2  6E0B               	movwf	?_ECANReceiveMessage+1,c
 27023  0001A4  0EDE               	movlw	low _id
 27024  0001A6  6E0A               	movwf	?_ECANReceiveMessage,c
 27025  0001A8  0E01               	movlw	high _data
 27026  0001AA  6E0D               	movwf	?_ECANReceiveMessage+3,c
 27027  0001AC  0ECE               	movlw	low _data
 27028  0001AE  6E0C               	movwf	?_ECANReceiveMessage+2,c
 27029  0001B0  0E3E               	movlw	low _dlc
 27030  0001B2  6E0E               	movwf	?_ECANReceiveMessage+4,c
 27031  0001B4  0E3F               	movlw	low _flags
 27032  0001B6  6E0F               	movwf	?_ECANReceiveMessage+5,c
 27033  0001B8  ECBA  F013         	call	_ECANReceiveMessage	;wreg free
 27034  0001BC  0900               	iorlw	0
 27035  0001BE  B4D8               	btfsc	status,2,c
 27036  0001C0  D001               	goto	i1u1765_21
 27037  0001C2  D001               	goto	i1u1765_20
 27038  0001C4                     i1u1765_21:
 27039  0001C4  D08A               	goto	i1l13334
 27040  0001C6                     i1u1765_20:
 27041  0001C6                     
 27042                           ;main.c: 223: if ( flags & ECAN_RX_OVERFLOW ) {
 27043  0001C6  A63F               	btfss	_flags,3,c
 27044  0001C8  D001               	goto	i1u1766_21
 27045  0001CA  D001               	goto	i1u1766_20
 27046  0001CC                     i1u1766_21:
 27047  0001CC  D00E               	goto	i1l419
 27048  0001CE                     i1u1766_20:
 27049  0001CE                     
 27050                           ;main.c: 224: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 27051  0001CE  AA3F               	btfss	_flags,5,c
 27052  0001D0  D001               	goto	i1u1767_21
 27053  0001D2  D001               	goto	i1u1767_20
 27054  0001D4                     i1u1767_21:
 27055  0001D4  D082               	goto	i1l13334
 27056  0001D6                     i1u1767_20:
 27057  0001D6                     i1l13306:
 27058  0001D6  0E01               	movlw	1
 27059  0001D8  0101               	movlb	1	; () banked
 27060  0001DA  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 27061  0001DC  0E00               	movlw	0
 27062  0001DE  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 27063  0001E0  0E00               	movlw	0
 27064  0001E2  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 27065  0001E4  0E00               	movlw	0
 27066  0001E6  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 27067  0001E8  D078               	goto	i1l13334
 27068  0001EA                     i1l419:
 27069                           
 27070                           ;main.c: 226: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 27071                           ;main.c: 227: ( flags & ECAN_RX_XTD_FRAME ) ) {
 27072  0001EA  BC3F               	btfsc	_flags,6,c
 27073  0001EC  D001               	goto	i1u1768_21
 27074  0001EE  D001               	goto	i1u1768_20
 27075  0001F0                     i1u1768_21:
 27076  0001F0  D074               	goto	i1l13334
 27077  0001F2                     i1u1768_20:
 27078  0001F2  AA3F               	btfss	_flags,5,c
 27079  0001F4  D001               	goto	i1u1769_21
 27080  0001F6  D001               	goto	i1u1769_20
 27081  0001F8                     i1u1769_21:
 27082  0001F8  D070               	goto	i1l13334
 27083  0001FA                     i1u1769_20:
 27084  0001FA                     
 27085                           ;main.c: 229: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 27086  0001FA  503E               	movf	_dlc,w,c
 27087  0001FC  6E17               	movwf	??_Interrupt& (0+255),c
 27088  0001FE  6A18               	clrf	(??_Interrupt+1)& (0+255),c
 27089  000200  0E05               	movlw	5
 27090  000202  2617               	addwf	??_Interrupt,f,c
 27091  000204  0E00               	movlw	0
 27092  000206  2218               	addwfc	??_Interrupt+1,f,c
 27093  000208  0101               	movlb	1	; () banked
 27094  00020A  0E01               	movlw	high _canInputFifo
 27095  00020C  6E02               	movwf	?_fifo_getFree+1,c
 27096  00020E  0EC6               	movlw	low _canInputFifo
 27097  000210  6E01               	movwf	?_fifo_getFree,c
 27098  000212  EC7F  F023         	call	_fifo_getFree	;wreg free
 27099  000216  5017               	movf	??_Interrupt,w,c
 27100  000218  5C01               	subwf	?_fifo_getFree,w,c
 27101  00021A  5018               	movf	??_Interrupt+1,w,c
 27102  00021C  5802               	subwfb	?_fifo_getFree+1,w,c
 27103  00021E  A0D8               	btfss	status,0,c
 27104  000220  D001               	goto	i1u1770_21
 27105  000222  D001               	goto	i1u1770_20
 27106  000224                     i1u1770_21:
 27107  000224  D7D8               	goto	i1l13306
 27108  000226                     i1u1770_20:
 27109  000226                     
 27110                           ; BSR set to: 1
 27111                           ;main.c: 230: uint8_t fail = 0;
 27112  000226  6A21               	clrf	Interrupt@fail,c
 27113  000228                     
 27114                           ; BSR set to: 1
 27115                           ;main.c: 231: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 27116  000228  0E01               	movlw	high _canInputFifo
 27117  00022A  6E02               	movwf	?_fifo_write+1,c
 27118  00022C  0EC6               	movlw	low _canInputFifo
 27119  00022E  6E01               	movwf	?_fifo_write,c
 27120  000230  0E01               	movlw	high _id
 27121  000232  6E04               	movwf	?_fifo_write+3,c
 27122  000234  0EDE               	movlw	low _id
 27123  000236  6E03               	movwf	?_fifo_write+2,c
 27124  000238  0E04               	movlw	4
 27125  00023A  6E05               	movwf	?_fifo_write+4,c
 27126  00023C  0E00               	movlw	0
 27127  00023E  6E06               	movwf	?_fifo_write+5,c
 27128  000240  0E00               	movlw	0
 27129  000242  6E07               	movwf	?_fifo_write+6,c
 27130  000244  0E00               	movlw	0
 27131  000246  6E08               	movwf	?_fifo_write+7,c
 27132  000248  EC7E  F01C         	call	_fifo_write	;wreg free
 27133  00024C  5001               	movf	?_fifo_write,w,c
 27134  00024E  0A04               	xorlw	4
 27135  000250  1002               	iorwf	?_fifo_write+1,w,c
 27136  000252  B4D8               	btfsc	status,2,c
 27137  000254  D001               	goto	i1u1771_21
 27138  000256  D001               	goto	i1u1771_20
 27139  000258                     i1u1771_21:
 27140  000258  D002               	goto	i1l13318
 27141  00025A                     i1u1771_20:
 27142  00025A                     
 27143                           ; BSR set to: 1
 27144                           ;main.c: 232: fail = 1;
 27145  00025A  0E01               	movlw	1
 27146  00025C  6E21               	movwf	Interrupt@fail,c
 27147  00025E                     i1l13318:
 27148                           
 27149                           ; BSR set to: 1
 27150                           ;main.c: 233: }
 27151                           ;main.c: 234: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 27152  00025E  0E01               	movlw	high _canInputFifo
 27153  000260  6E02               	movwf	?_fifo_write+1,c
 27154  000262  0EC6               	movlw	low _canInputFifo
 27155  000264  6E01               	movwf	?_fifo_write,c
 27156  000266  0E3E               	movlw	low _dlc
 27157  000268  6E03               	movwf	?_fifo_write+2,c
 27158  00026A  0E00               	movlw	high _dlc
 27159  00026C  6E04               	movwf	?_fifo_write+3,c
 27160  00026E  0E0F               	movlw	15
 27161  000270  6E04               	movwf	?_fifo_write+3,c
 27162  000272  0E5F               	movlw	__accesstop+-1
 27163  000274  6403               	cpfsgt	?_fifo_write+2,c
 27164  000276  6A04               	clrf	?_fifo_write+3,c
 27165  000278  0E01               	movlw	1
 27166  00027A  6E05               	movwf	?_fifo_write+4,c
 27167  00027C  0E00               	movlw	0
 27168  00027E  6E06               	movwf	?_fifo_write+5,c
 27169  000280  0E00               	movlw	0
 27170  000282  6E07               	movwf	?_fifo_write+6,c
 27171  000284  0E00               	movlw	0
 27172  000286  6E08               	movwf	?_fifo_write+7,c
 27173  000288  EC7E  F01C         	call	_fifo_write	;wreg free
 27174  00028C  0401               	decf	?_fifo_write,w,c
 27175  00028E  1002               	iorwf	?_fifo_write+1,w,c
 27176  000290  B4D8               	btfsc	status,2,c
 27177  000292  D001               	goto	i1u1772_21
 27178  000294  D001               	goto	i1u1772_20
 27179  000296                     i1u1772_21:
 27180  000296  D002               	goto	i1l13322
 27181  000298                     i1u1772_20:
 27182  000298                     
 27183                           ; BSR set to: 1
 27184                           ;main.c: 235: fail = 1;
 27185  000298  0E01               	movlw	1
 27186  00029A  6E21               	movwf	Interrupt@fail,c
 27187  00029C                     i1l13322:
 27188                           
 27189                           ; BSR set to: 1
 27190                           ;main.c: 236: }
 27191                           ;main.c: 237: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 27192  00029C  0E01               	movlw	high _canInputFifo
 27193  00029E  6E02               	movwf	?_fifo_write+1,c
 27194  0002A0  0EC6               	movlw	low _canInputFifo
 27195  0002A2  6E01               	movwf	?_fifo_write,c
 27196  0002A4  0E01               	movlw	high _data
 27197  0002A6  6E04               	movwf	?_fifo_write+3,c
 27198  0002A8  0ECE               	movlw	low _data
 27199  0002AA  6E03               	movwf	?_fifo_write+2,c
 27200  0002AC  503E               	movf	_dlc,w,c
 27201  0002AE  6E05               	movwf	?_fifo_write+4,c
 27202  0002B0  6A06               	clrf	?_fifo_write+5,c
 27203  0002B2  6A07               	clrf	?_fifo_write+6,c
 27204  0002B4  6A08               	clrf	?_fifo_write+7,c
 27205  0002B6  EC7E  F01C         	call	_fifo_write	;wreg free
 27206  0002BA  503E               	movf	_dlc,w,c
 27207  0002BC  1801               	xorwf	?_fifo_write,w,c
 27208  0002BE  1002               	iorwf	?_fifo_write+1,w,c
 27209  0002C0  B4D8               	btfsc	status,2,c
 27210  0002C2  D001               	goto	i1u1773_21
 27211  0002C4  D001               	goto	i1u1773_20
 27212  0002C6                     i1u1773_21:
 27213  0002C6  D002               	goto	i1l13326
 27214  0002C8                     i1u1773_20:
 27215  0002C8                     
 27216                           ; BSR set to: 1
 27217                           ;main.c: 238: fail = 1;
 27218  0002C8  0E01               	movlw	1
 27219  0002CA  6E21               	movwf	Interrupt@fail,c
 27220  0002CC                     i1l13326:
 27221                           
 27222                           ; BSR set to: 1
 27223                           ;main.c: 239: }
 27224                           ;main.c: 241: fifo_canrxcount++;
 27225  0002CC  2A2F               	incf	_fifo_canrxcount,f,c	;volatile
 27226  0002CE                     
 27227                           ; BSR set to: 1
 27228                           ;main.c: 243: if ( fail ) {
 27229  0002CE  5021               	movf	Interrupt@fail,w,c
 27230  0002D0  B4D8               	btfsc	status,2,c
 27231  0002D2  D001               	goto	i1u1774_21
 27232  0002D4  D001               	goto	i1u1774_20
 27233  0002D6                     i1u1774_21:
 27234  0002D6  D001               	goto	i1l13334
 27235  0002D8                     i1u1774_20:
 27236  0002D8  D77E               	goto	i1l13306
 27237  0002DA                     i1l13334:
 27238                           
 27239                           ;main.c: 250: }
 27240                           ;main.c: 252: }
 27241                           ;main.c: 254: }
 27242                           ;main.c: 257: RXBnIF = 0;
 27243  0002DA  92A4               	bcf	4004,1,c	;volatile
 27244  0002DC                     i1l429:
 27245  0002DC  C01F  FFDA         	movff	??_Interrupt+8,fsr2h
 27246  0002E0  C01E  FFD9         	movff	??_Interrupt+7,fsr2l
 27247  0002E4  C01D  FFE2         	movff	??_Interrupt+6,fsr1h
 27248  0002E8  C01C  FFE1         	movff	??_Interrupt+5,fsr1l
 27249  0002EC  C01B  FFE0         	movff	??_Interrupt+4,bsr
 27250  0002F0  C01A  FFE8         	movff	??_Interrupt+3,wreg
 27251  0002F4  C019  FFD8         	movff	??_Interrupt+2,status
 27252  0002F8  0010               	retfie	
 27253  0002FA                     __end_of_Interrupt:
 27254                           	opt stack 0
 27255                           tblptru	equ	0xFF8
 27256                           tblptrh	equ	0xFF7
 27257                           tblptrl	equ	0xFF6
 27258                           tablat	equ	0xFF5
 27259                           prodh	equ	0xFF4
 27260                           prodl	equ	0xFF3
 27261                           intcon	equ	0xFF2
 27262                           indf0	equ	0xFEF
 27263                           postinc0	equ	0xFEE
 27264                           fsr0h	equ	0xFEA
 27265                           fsr0l	equ	0xFE9
 27266                           wreg	equ	0xFE8
 27267                           indf1	equ	0xFE7
 27268                           postinc1	equ	0xFE6
 27269                           postdec1	equ	0xFE5
 27270                           fsr1h	equ	0xFE2
 27271                           fsr1l	equ	0xFE1
 27272                           bsr	equ	0xFE0
 27273                           indf2	equ	0xFDF
 27274                           postinc2	equ	0xFDE
 27275                           postdec2	equ	0xFDD
 27276                           plusw2	equ	0xFDB
 27277                           fsr2h	equ	0xFDA
 27278                           fsr2l	equ	0xFD9
 27279                           status	equ	0xFD8
 27280                           
 27281 ;; *************** function i1_WriteTimer0 *****************
 27282 ;; Defined at:
 27283 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 27284 ;; Parameters:    Size  Location     Type
 27285 ;;  timer0          2    0[COMRAM] unsigned int 
 27286 ;; Auto vars:     Size  Location     Type
 27287 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 27288 ;; Return value:  Size  Location     Type
 27289 ;;		None               void
 27290 ;; Registers used:
 27291 ;;		None
 27292 ;; Tracked objects:
 27293 ;;		On entry : 0/0
 27294 ;;		On exit  : 0/0
 27295 ;;		Unchanged: 0/0
 27296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27297 ;;      Params:         2       0       0       0       0       0       0
 27298 ;;      Locals:         2       0       0       0       0       0       0
 27299 ;;      Temps:          0       0       0       0       0       0       0
 27300 ;;      Totals:         4       0       0       0       0       0       0
 27301 ;;Total ram usage:        4 bytes
 27302 ;; Hardware stack levels used:    1
 27303 ;; This function calls:
 27304 ;;		Nothing
 27305 ;; This function is called by:
 27306 ;;		_Interrupt
 27307 ;; This function uses a non-reentrant model
 27308 ;;
 27309                           
 27310                           	psect	text83
 27311  0058EE                     __ptext83:
 27312                           	opt stack 0
 27313  0058EE                     i1_WriteTimer0:
 27314                           	opt stack 21
 27315                           
 27316                           ;incstack = 0
 27317                           ;incstack = 0
 27318  0058EE  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 27319  0058F2  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 27320  0058F6  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 27321  0058FA  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 27322  0058FE  0012               	return	
 27323  005900                     __end_ofi1_WriteTimer0:
 27324                           	opt stack 0
 27325                           tblptru	equ	0xFF8
 27326                           tblptrh	equ	0xFF7
 27327                           tblptrl	equ	0xFF6
 27328                           tablat	equ	0xFF5
 27329                           prodh	equ	0xFF4
 27330                           prodl	equ	0xFF3
 27331                           intcon	equ	0xFF2
 27332                           indf0	equ	0xFEF
 27333                           postinc0	equ	0xFEE
 27334                           fsr0h	equ	0xFEA
 27335                           fsr0l	equ	0xFE9
 27336                           wreg	equ	0xFE8
 27337                           indf1	equ	0xFE7
 27338                           postinc1	equ	0xFE6
 27339                           postdec1	equ	0xFE5
 27340                           fsr1h	equ	0xFE2
 27341                           fsr1l	equ	0xFE1
 27342                           bsr	equ	0xFE0
 27343                           indf2	equ	0xFDF
 27344                           postinc2	equ	0xFDE
 27345                           postdec2	equ	0xFDD
 27346                           plusw2	equ	0xFDB
 27347                           fsr2h	equ	0xFDA
 27348                           fsr2l	equ	0xFD9
 27349                           status	equ	0xFD8
 27350                           
 27351 ;; *************** function _fifo_getFree *****************
 27352 ;; Defined at:
 27353 ;;		line 97 in file "fifo.c"
 27354 ;; Parameters:    Size  Location     Type
 27355 ;;  f               2    0[COMRAM] PTR struct .
 27356 ;;		 -> canInputFifo(8), 
 27357 ;; Auto vars:     Size  Location     Type
 27358 ;;		None
 27359 ;; Return value:  Size  Location     Type
 27360 ;;                  2    0[COMRAM] unsigned short 
 27361 ;; Registers used:
 27362 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27363 ;; Tracked objects:
 27364 ;;		On entry : F/1
 27365 ;;		On exit  : F/1
 27366 ;;		Unchanged: F/0
 27367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27368 ;;      Params:         2       0       0       0       0       0       0
 27369 ;;      Locals:         0       0       0       0       0       0       0
 27370 ;;      Temps:          8       0       0       0       0       0       0
 27371 ;;      Totals:        10       0       0       0       0       0       0
 27372 ;;Total ram usage:       10 bytes
 27373 ;; Hardware stack levels used:    1
 27374 ;; This function calls:
 27375 ;;		Nothing
 27376 ;; This function is called by:
 27377 ;;		_Interrupt
 27378 ;; This function uses a non-reentrant model
 27379 ;;
 27380                           
 27381                           	psect	text84
 27382  0046FE                     __ptext84:
 27383                           	opt stack 0
 27384  0046FE                     _fifo_getFree:
 27385                           	opt stack 21
 27386                           
 27387                           ; BSR set to: 1
 27388                           ;fifo.c: 98: if (f->head < f->tail) {
 27389                           
 27390                           ;incstack = 0
 27391                           ;incstack = 0
 27392  0046FE  EE20 F004          	lfsr	2,4
 27393  004702  5001               	movf	fifo_getFree@f,w,c
 27394  004704  26D9               	addwf	fsr2l,f,c
 27395  004706  5002               	movf	fifo_getFree@f+1,w,c
 27396  004708  22DA               	addwfc	fsr2h,f,c
 27397  00470A  EE10 F002          	lfsr	1,2
 27398  00470E  5001               	movf	fifo_getFree@f,w,c
 27399  004710  26E1               	addwf	fsr1l,f,c
 27400  004712  5002               	movf	fifo_getFree@f+1,w,c
 27401  004714  22E2               	addwfc	fsr1h,f,c
 27402  004716  52E6               	movf	postinc1,f,c
 27403  004718  52DE               	movf	postinc2,f,c
 27404  00471A  50DD               	movf	postdec2,w,c
 27405  00471C  5CE5               	subwf	postdec1,w,c
 27406  00471E  E102               	bnz	i1u635_25
 27407  004720  50DF               	movf	indf2,w,c
 27408  004722  5CE7               	subwf	indf1,w,c
 27409  004724                     i1u635_25:
 27410  004724  E213               	bc	i1l6436
 27411                           
 27412                           ; BSR set to: 1
 27413                           ;fifo.c: 99: return (f->tail - f->head);
 27414  004726  EE20 F002          	lfsr	2,2
 27415  00472A  D834               	call	PL74	;call to abstracted procedure
 27416  00472C  EE20 F004          	lfsr	2,4
 27417  004730  5001               	movf	fifo_getFree@f,w,c
 27418  004732  26D9               	addwf	fsr2l,f,c
 27419  004734  5002               	movf	fifo_getFree@f+1,w,c
 27420  004736  22DA               	addwfc	fsr2h,f,c
 27421  004738  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27422  00473C  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27423  004740  5003               	movf	??_fifo_getFree,w,c
 27424  004742  5C05               	subwf	??_fifo_getFree+2,w,c
 27425  004744  6E01               	movwf	?_fifo_getFree,c
 27426  004746  5004               	movf	??_fifo_getFree+1,w,c
 27427  004748  5806               	subwfb	??_fifo_getFree+3,w,c
 27428  00474A  D022               	goto	L43
 27429  00474C                     i1l6436:
 27430                           
 27431                           ; BSR set to: 1
 27432                           ;fifo.c: 101: else {
 27433                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 27434  00474C  EE20 F004          	lfsr	2,4
 27435  004750  D821               	call	PL74	;call to abstracted procedure
 27436  004752  EE20 F002          	lfsr	2,2
 27437  004756  5001               	movf	fifo_getFree@f,w,c
 27438  004758  26D9               	addwf	fsr2l,f,c
 27439  00475A  5002               	movf	fifo_getFree@f+1,w,c
 27440  00475C  22DA               	addwfc	fsr2h,f,c
 27441  00475E  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27442  004762  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27443  004766  EE20 F006          	lfsr	2,6
 27444  00476A  5001               	movf	fifo_getFree@f,w,c
 27445  00476C  26D9               	addwf	fsr2l,f,c
 27446  00476E  5002               	movf	fifo_getFree@f+1,w,c
 27447  004770  22DA               	addwfc	fsr2h,f,c
 27448  004772  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 27449  004776  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 27450  00477A  5005               	movf	??_fifo_getFree+2,w,c
 27451  00477C  5C07               	subwf	??_fifo_getFree+4,w,c
 27452  00477E  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 27453  004780  5006               	movf	??_fifo_getFree+3,w,c
 27454  004782  5808               	subwfb	??_fifo_getFree+5,w,c
 27455  004784  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 27456  004786  5003               	movf	??_fifo_getFree,w,c
 27457  004788  2409               	addwf	??_fifo_getFree+6,w,c
 27458  00478A  6E01               	movwf	?_fifo_getFree,c
 27459  00478C  5004               	movf	??_fifo_getFree+1,w,c
 27460  00478E  200A               	addwfc	??_fifo_getFree+7,w,c
 27461  004790                     L43:
 27462  004790  6E02               	movwf	?_fifo_getFree+1,c
 27463                           
 27464                           ; BSR set to: 1
 27465  004792  0012               	return	
 27466  004794                     __end_of_fifo_getFree:
 27467                           	opt stack 0
 27468  004794                     PL74:
 27469                           	opt stack 21
 27470  004794  5001               	movf	fifo_getFree@f,w,c
 27471  004796  26D9               	addwf	fsr2l,f,c
 27472  004798  5002               	movf	fifo_getFree@f+1,w,c
 27473  00479A  22DA               	addwfc	fsr2h,f,c
 27474  00479C  CFDE F003          	movff	postinc2,??_fifo_getFree
 27475  0047A0  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27476  0047A4  0012               	return	
 27477  0047A6                     __end_ofPL74:
 27478                           	opt stack 0
 27479                           tblptru	equ	0xFF8
 27480                           tblptrh	equ	0xFF7
 27481                           tblptrl	equ	0xFF6
 27482                           tablat	equ	0xFF5
 27483                           prodh	equ	0xFF4
 27484                           prodl	equ	0xFF3
 27485                           intcon	equ	0xFF2
 27486                           indf0	equ	0xFEF
 27487                           postinc0	equ	0xFEE
 27488                           fsr0h	equ	0xFEA
 27489                           fsr0l	equ	0xFE9
 27490                           wreg	equ	0xFE8
 27491                           indf1	equ	0xFE7
 27492                           postinc1	equ	0xFE6
 27493                           postdec1	equ	0xFE5
 27494                           fsr1h	equ	0xFE2
 27495                           fsr1l	equ	0xFE1
 27496                           bsr	equ	0xFE0
 27497                           indf2	equ	0xFDF
 27498                           postinc2	equ	0xFDE
 27499                           postdec2	equ	0xFDD
 27500                           plusw2	equ	0xFDB
 27501                           fsr2h	equ	0xFDA
 27502                           fsr2l	equ	0xFD9
 27503                           status	equ	0xFD8
 27504                           
 27505 ;; *************** function _ECANReceiveMessage *****************
 27506 ;; Defined at:
 27507 ;;		line 803 in file "ECAN.c"
 27508 ;; Parameters:    Size  Location     Type
 27509 ;;  id              2    9[COMRAM] PTR unsigned long 
 27510 ;;		 -> id(4), 
 27511 ;;  data            2   11[COMRAM] PTR unsigned char 
 27512 ;;		 -> data(8), 
 27513 ;;  dataLen         1   13[COMRAM] PTR unsigned char 
 27514 ;;		 -> dlc(1), 
 27515 ;;  msgFlags        1   14[COMRAM] PTR enum E16324
 27516 ;;		 -> flags(1), 
 27517 ;; Auto vars:     Size  Location     Type
 27518 ;;  ptr             2   20[COMRAM] PTR unsigned char 
 27519 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27520 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27521 ;;  savedPtr        2   15[COMRAM] PTR unsigned char 
 27522 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27523 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27524 ;;  temp            1   19[COMRAM] struct .
 27525 ;;  mode            1   18[COMRAM] unsigned char 
 27526 ;;  i               1   17[COMRAM] unsigned char 
 27527 ;; Return value:  Size  Location     Type
 27528 ;;                  1    wreg      enum E15660
 27529 ;; Registers used:
 27530 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27531 ;; Tracked objects:
 27532 ;;		On entry : F/1
 27533 ;;		On exit  : 0/0
 27534 ;;		Unchanged: 0/0
 27535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27536 ;;      Params:         6       0       0       0       0       0       0
 27537 ;;      Locals:         7       0       0       0       0       0       0
 27538 ;;      Temps:          0       0       0       0       0       0       0
 27539 ;;      Totals:        13       0       0       0       0       0       0
 27540 ;;Total ram usage:       13 bytes
 27541 ;; Hardware stack levels used:    1
 27542 ;; Hardware stack levels required when called:    1
 27543 ;; This function calls:
 27544 ;;		__ECANPointBuffer
 27545 ;;		__RegsToCANID
 27546 ;; This function is called by:
 27547 ;;		_Interrupt
 27548 ;; This function uses a non-reentrant model
 27549 ;;
 27550                           
 27551                           	psect	text85
 27552  002774                     __ptext85:
 27553                           	opt stack 0
 27554  002774                     _ECANReceiveMessage:
 27555                           	opt stack 20
 27556                           
 27557                           ; BSR set to: 1
 27558                           ;ECAN.c: 805: BYTE mode;
 27559                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27560                           ;ECAN.c: 809: char i;
 27561                           ;ECAN.c: 810: BYTE_VAL temp;
 27562                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27563                           
 27564                           ; BSR set to: 1
 27565                           ;incstack = 0
 27566                           ;incstack = 0
 27567  002774  6A2B               	clrf	__ECANRxFilterHitInfo,c
 27568                           
 27569                           ; BSR set to: 1
 27570                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27571  002776  5077               	movf	3959,w,c	;volatile
 27572  002778  0BC0               	andlw	192
 27573  00277A  6E13               	movwf	ECANReceiveMessage@mode,c
 27574                           
 27575                           ; BSR set to: 1
 27576                           ;ECAN.c: 816: if ( mode == 0x00 )
 27577  00277C  6613               	tstfsz	ECANReceiveMessage@mode,c
 27578  00277E  D032               	goto	i1l9772
 27579                           
 27580                           ; BSR set to: 1
 27581                           ;ECAN.c: 822: {
 27582                           ;ECAN.c: 824: if ( RXB0FUL )
 27583  002780  AE60               	btfss	3936,7,c	;volatile
 27584  002782  D012               	goto	i1l1464
 27585                           
 27586                           ; BSR set to: 1
 27587                           ;ECAN.c: 825: {
 27588                           ;ECAN.c: 827: RXB0IF = 0;
 27589  002784  90A4               	bcf	4004,0,c	;volatile
 27590                           
 27591                           ;ECAN.c: 830: if ( RXB0OVFL )
 27592  002786  AE74               	btfss	3956,7,c	;volatile
 27593  002788  D006               	goto	i1l9748
 27594                           
 27595                           ; BSR set to: 1
 27596                           ;ECAN.c: 831: {
 27597                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27598  00278A  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27599  00278C  6ED9               	movwf	fsr2l,c
 27600  00278E  6ADA               	clrf	fsr2h,c
 27601  002790  0E00               	movlw	0
 27602  002792  86DB               	bsf	plusw2,3,c
 27603                           
 27604                           ; BSR set to: 1
 27605                           ;ECAN.c: 833: RXB0OVFL = 0;
 27606  002794  9E74               	bcf	3956,7,c	;volatile
 27607  002796                     i1l9748:
 27608                           
 27609                           ; BSR set to: 1
 27610                           ;ECAN.c: 834: }
 27611                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27612  002796  A060               	btfss	3936,0,c	;volatile
 27613  002798  D002               	bra	i1u1169_25
 27614  00279A  802B               	bsf	__ECANRxFilterHitInfo,0,c
 27615  00279C  D001               	bra	i1u1169_27
 27616  00279E                     i1u1169_25:
 27617  00279E  902B               	bcf	__ECANRxFilterHitInfo,0,c
 27618  0027A0                     i1u1169_27:
 27619                           
 27620                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27621  0027A0  0E0F               	movlw	15	;volatile
 27622  0027A2  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27623  0027A4  0E60               	movlw	96	;volatile
 27624  0027A6  D01A               	goto	L44
 27625  0027A8                     i1l1464:
 27626                           
 27627                           ; BSR set to: 1
 27628                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27629  0027A8  010F               	movlb	15	; () banked
 27630  0027AA  AF50               	btfss	80,7,b	;volatile
 27631  0027AC  D019               	goto	i1l9766
 27632                           
 27633                           ; BSR set to: 15
 27634                           ;ECAN.c: 842: {
 27635                           ;ECAN.c: 844: RXB1IF = 0;
 27636  0027AE  92A4               	bcf	4004,1,c	;volatile
 27637                           
 27638                           ;ECAN.c: 847: if ( RXB1OVFL )
 27639  0027B0  AC74               	btfss	3956,6,c	;volatile
 27640  0027B2  D006               	goto	i1l9758
 27641                           
 27642                           ; BSR set to: 15
 27643                           ;ECAN.c: 848: {
 27644                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27645  0027B4  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27646  0027B6  6ED9               	movwf	fsr2l,c
 27647  0027B8  6ADA               	clrf	fsr2h,c
 27648  0027BA  0E00               	movlw	0
 27649  0027BC  86DB               	bsf	plusw2,3,c
 27650                           
 27651                           ; BSR set to: 15
 27652                           ;ECAN.c: 850: RXB1OVFL = 0;
 27653  0027BE  9C74               	bcf	3956,6,c	;volatile
 27654  0027C0                     i1l9758:
 27655                           
 27656                           ; BSR set to: 15
 27657                           ;ECAN.c: 851: }
 27658                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27659  0027C0  5150               	movf	80,w,b	;volatile
 27660  0027C2  0B07               	andlw	7
 27661  0027C4  6E2B               	movwf	__ECANRxFilterHitInfo,c
 27662                           
 27663                           ; BSR set to: 15
 27664                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27665  0027C6  0E02               	movlw	2
 27666  0027C8  602B               	cpfslt	__ECANRxFilterHitInfo,c
 27667  0027CA  D005               	goto	i1l9764
 27668                           
 27669                           ; BSR set to: 15
 27670                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27671  0027CC  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27672  0027CE  6ED9               	movwf	fsr2l,c
 27673  0027D0  6ADA               	clrf	fsr2h,c
 27674  0027D2  0E00               	movlw	0
 27675  0027D4  8EDB               	bsf	plusw2,7,c
 27676  0027D6                     i1l9764:
 27677                           
 27678                           ; BSR set to: 15
 27679                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27680  0027D6  0E0F               	movlw	15	;volatile
 27681  0027D8  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27682  0027DA  0E50               	movlw	80	;volatile
 27683  0027DC                     L44:
 27684  0027DC  6E15               	movwf	ECANReceiveMessage@ptr,c
 27685                           
 27686                           ;ECAN.c: 860: }
 27687  0027DE  D065               	goto	i1l9826
 27688  0027E0                     i1l9766:
 27689                           
 27690                           ;ECAN.c: 861: else
 27691                           ;ECAN.c: 862: return FALSE;
 27692  0027E0  0E00               	movlw	0
 27693  0027E2  D0C6               	goto	i1l1471
 27694  0027E4                     i1l9772:
 27695                           
 27696                           ; BSR set to: 1
 27697                           ;ECAN.c: 869: else if ( mode == 0x40 )
 27698  0027E4  5013               	movf	ECANReceiveMessage@mode,w,c
 27699  0027E6  0A40               	xorlw	64
 27700  0027E8  E146               	bnz	i1l1474
 27701                           
 27702                           ; BSR set to: 1
 27703                           ;ECAN.c: 875: {
 27704                           ;ECAN.c: 876: if ( RXB0FUL )
 27705  0027EA  AE60               	btfss	3936,7,c	;volatile
 27706  0027EC  D004               	goto	i1l1475
 27707                           
 27708                           ; BSR set to: 1
 27709                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 27710  0027EE  0E0F               	movlw	15	;volatile
 27711  0027F0  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27712  0027F2  0E60               	movlw	96	;volatile
 27713  0027F4  D03E               	goto	L51
 27714  0027F6                     i1l1475:
 27715                           
 27716                           ; BSR set to: 1
 27717                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 27718  0027F6  010F               	movlb	15	; () banked
 27719  0027F8  AF50               	btfss	80,7,b	;volatile
 27720  0027FA  D004               	goto	i1l1477
 27721                           
 27722                           ; BSR set to: 15
 27723                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 27724  0027FC  0E0F               	movlw	15	;volatile
 27725  0027FE  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27726  002800  0E50               	movlw	80	;volatile
 27727  002802  D037               	goto	L51
 27728  002804                     i1l1477:
 27729                           
 27730                           ; BSR set to: 15
 27731                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 27732  002804  010D               	movlb	13
 27733  002806  B5F8               	btfsc	248,2,b	;volatile
 27734  002808  D007               	goto	i1l1479
 27735  00280A  010E               	movlb	14
 27736  00280C  AF20               	btfss	32,7,b	;volatile
 27737  00280E  D004               	goto	i1l1479
 27738                           
 27739                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 27740  002810  0E0E               	movlw	14	;volatile
 27741  002812  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27742  002814  0E20               	movlw	32	;volatile
 27743  002816  D02D               	goto	L51
 27744  002818                     i1l1479:
 27745                           
 27746                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 27747  002818  010D               	movlb	13
 27748  00281A  B7F8               	btfsc	248,3,b	;volatile
 27749  00281C  D007               	goto	i1l1481
 27750  00281E  010E               	movlb	14
 27751  002820  AF30               	btfss	48,7,b	;volatile
 27752  002822  D004               	goto	i1l1481
 27753                           
 27754                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 27755  002824  0E0E               	movlw	14	;volatile
 27756  002826  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27757  002828  0E30               	movlw	48	;volatile
 27758  00282A  D023               	goto	L51
 27759  00282C                     i1l1481:
 27760                           
 27761                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 27762  00282C  010D               	movlb	13
 27763  00282E  B9F8               	btfsc	248,4,b	;volatile
 27764  002830  D007               	goto	i1l1483
 27765  002832  010E               	movlb	14
 27766  002834  AF40               	btfss	64,7,b	;volatile
 27767  002836  D004               	goto	i1l1483
 27768                           
 27769                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 27770  002838  0E0E               	movlw	14	;volatile
 27771  00283A  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27772  00283C  0E40               	movlw	64	;volatile
 27773  00283E  D019               	goto	L51
 27774  002840                     i1l1483:
 27775                           
 27776                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 27777  002840  010D               	movlb	13
 27778  002842  BBF8               	btfsc	248,5,b	;volatile
 27779  002844  D005               	goto	i1l1485
 27780  002846  010E               	movlb	14
 27781  002848  AF50               	btfss	80,7,b	;volatile
 27782  00284A  D002               	goto	i1l1485
 27783                           
 27784                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 27785  00284C  0E0E               	movlw	14	;volatile
 27786  00284E  D7D7               	goto	L52
 27787  002850                     i1l1485:
 27788                           
 27789                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 27790  002850  010D               	movlb	13
 27791  002852  BDF8               	btfsc	248,6,b	;volatile
 27792  002854  D005               	goto	i1l1487
 27793  002856  010E               	movlb	14
 27794  002858  AF60               	btfss	96,7,b	;volatile
 27795  00285A  D002               	goto	i1l1487
 27796                           
 27797                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 27798  00285C  0E0E               	movlw	14	;volatile
 27799  00285E  D7C8               	goto	L53
 27800  002860                     i1l1487:
 27801                           
 27802                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 27803  002860  010D               	movlb	13
 27804  002862  BFF8               	btfsc	248,7,b	;volatile
 27805  002864  D7BD               	goto	i1l9766
 27806  002866  010E               	movlb	14
 27807  002868  AF70               	btfss	112,7,b	;volatile
 27808  00286A  D7BA               	goto	i1l9766
 27809                           
 27810                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 27811  00286C  0E0E               	movlw	14	;volatile
 27812  00286E  6E16               	movwf	ECANReceiveMessage@ptr+1,c
 27813  002870  0E70               	movlw	112	;volatile
 27814  002872                     L51:
 27815  002872  6E15               	movwf	ECANReceiveMessage@ptr,c
 27816  002874  D00A               	goto	i1l9816
 27817  002876                     i1l1474:
 27818                           
 27819                           ; BSR set to: 1
 27820                           ;ECAN.c: 910: else
 27821                           ;ECAN.c: 915: {
 27822                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 27823  002876  AE74               	btfss	3956,7,c	;volatile
 27824  002878  D7B3               	goto	i1l9766
 27825                           
 27826                           ; BSR set to: 1
 27827                           ;ECAN.c: 919: {
 27828                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 27829  00287A  506F               	movf	3951,w,c	;volatile
 27830  00287C  0B07               	andlw	7
 27831  00287E  ECC1  F027         	call	__ECANPointBuffer
 27832  002882  C001  F015         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 27833  002886  C002  F016         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 27834  00288A                     i1l9816:
 27835                           
 27836                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 27837  00288A  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27838  00288E  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27839  002892  50DF               	movf	indf2,w,c
 27840  002894  0B1F               	andlw	31
 27841  002896  6E2B               	movwf	__ECANRxFilterHitInfo,c
 27842                           
 27843                           ;ECAN.c: 934: RXB1IF = 0;
 27844  002898  92A4               	bcf	4004,1,c	;volatile
 27845                           
 27846                           ;ECAN.c: 936: if ( RXB1OVFL )
 27847  00289A  AC74               	btfss	3956,6,c	;volatile
 27848  00289C  D006               	goto	i1l9826
 27849                           
 27850                           ;ECAN.c: 937: {
 27851                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 27852  00289E  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27853  0028A0  6ED9               	movwf	fsr2l,c
 27854  0028A2  6ADA               	clrf	fsr2h,c
 27855  0028A4  0E00               	movlw	0
 27856  0028A6  86DB               	bsf	plusw2,3,c
 27857                           
 27858                           ;ECAN.c: 939: RXB1OVFL = 0;
 27859  0028A8  9C74               	bcf	3956,6,c	;volatile
 27860  0028AA                     i1l9826:
 27861                           
 27862                           ;ECAN.c: 944: savedPtr = ptr;
 27863  0028AA  C015  F010         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 27864  0028AE  C016  F011         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 27865                           
 27866                           ;ECAN.c: 945: *msgFlags = 0;
 27867  0028B2  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27868  0028B4  6ED9               	movwf	fsr2l,c
 27869  0028B6  6ADA               	clrf	fsr2h,c
 27870  0028B8  6ADF               	clrf	indf2,c
 27871                           
 27872                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 27873  0028BA  EE20 F005          	lfsr	2,5
 27874  0028BE  D859               	call	PL92	;call to abstracted procedure
 27875                           
 27876                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 27877  0028C0  500E               	movf	ECANReceiveMessage@dataLen,w,c
 27878  0028C2  6ED9               	movwf	fsr2l,c
 27879  0028C4  6ADA               	clrf	fsr2h,c
 27880  0028C6  5014               	movf	ECANReceiveMessage@temp,w,c
 27881  0028C8  0B0F               	andlw	15
 27882  0028CA  6EDF               	movwf	indf2,c
 27883                           
 27884                           ;ECAN.c: 952: if ( temp.bits.b6 )
 27885  0028CC  AC14               	btfss	ECANReceiveMessage@temp,6,c
 27886  0028CE  D005               	goto	i1l1495
 27887                           
 27888                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 27889  0028D0  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27890  0028D2  6ED9               	movwf	fsr2l,c
 27891  0028D4  6ADA               	clrf	fsr2h,c
 27892  0028D6  0E00               	movlw	0
 27893  0028D8  8CDB               	bsf	plusw2,6,c
 27894  0028DA                     i1l1495:
 27895                           
 27896                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 27897  0028DA  EE20 F002          	lfsr	2,2
 27898  0028DE  D849               	call	PL92	;call to abstracted procedure
 27899                           
 27900                           ;ECAN.c: 957: if ( temp.bits.b3 )
 27901  0028E0  A614               	btfss	ECANReceiveMessage@temp,3,c
 27902  0028E2  D008               	goto	i1l1496
 27903                           
 27904                           ;ECAN.c: 958: {
 27905                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 27906  0028E4  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27907  0028E6  6ED9               	movwf	fsr2l,c
 27908  0028E8  6ADA               	clrf	fsr2h,c
 27909  0028EA  0E00               	movlw	0
 27910  0028EC  8ADB               	bsf	plusw2,5,c
 27911                           
 27912                           ;ECAN.c: 960: temp.Val = 1;
 27913  0028EE  0E01               	movlw	1
 27914  0028F0  6E14               	movwf	ECANReceiveMessage@temp,c
 27915                           
 27916                           ;ECAN.c: 961: }
 27917  0028F2  D001               	goto	i1l9844
 27918  0028F4                     i1l1496:
 27919                           
 27920                           ;ECAN.c: 962: else
 27921                           ;ECAN.c: 963: temp.Val = 0;
 27922  0028F4  6A14               	clrf	ECANReceiveMessage@temp,c
 27923  0028F6                     i1l9844:
 27924                           
 27925                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 27926  0028F6  2815               	incf	ECANReceiveMessage@ptr,w,c
 27927  0028F8  6E01               	movwf	?__RegsToCANID,c
 27928  0028FA  0E00               	movlw	0
 27929  0028FC  2016               	addwfc	ECANReceiveMessage@ptr+1,w,c
 27930  0028FE  6E02               	movwf	?__RegsToCANID+1,c
 27931  002900  C00A  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 27932  002904  C00B  F004         	movff	ECANReceiveMessage@id+1,?__RegsToCANID+3
 27933  002908  C014  F005         	movff	ECANReceiveMessage@temp,?__RegsToCANID+4
 27934  00290C  ECE1  F01B         	call	__RegsToCANID	;wreg free
 27935                           
 27936                           ;ECAN.c: 968: ptr += 6;
 27937  002910  0E06               	movlw	6
 27938  002912  2615               	addwf	ECANReceiveMessage@ptr,f,c
 27939  002914  0E00               	movlw	0
 27940  002916  2216               	addwfc	ECANReceiveMessage@ptr+1,f,c
 27941                           
 27942                           ;ECAN.c: 969: temp.Val = *dataLen;
 27943  002918  500E               	movf	ECANReceiveMessage@dataLen,w,c
 27944  00291A  6ED9               	movwf	fsr2l,c
 27945  00291C  6ADA               	clrf	fsr2h,c
 27946  00291E  50DF               	movf	indf2,w,c
 27947  002920  6E14               	movwf	ECANReceiveMessage@temp,c
 27948                           
 27949                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 27950  002922  6A12               	clrf	ECANReceiveMessage@i,c
 27951  002924  D00F               	goto	i1l9860
 27952  002926                     i1l9852:
 27953                           
 27954                           ;ECAN.c: 971: *data++ = *ptr++;
 27955  002926  C015  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27956  00292A  C016  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27957  00292E  C00C  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 27958  002932  C00D  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 27959  002936  CFDF FFE7          	movff	indf2,indf1
 27960  00293A  4A15               	infsnz	ECANReceiveMessage@ptr,f,c
 27961  00293C  2A16               	incf	ECANReceiveMessage@ptr+1,f,c
 27962  00293E  4A0C               	infsnz	ECANReceiveMessage@data,f,c
 27963  002940  2A0D               	incf	ECANReceiveMessage@data+1,f,c
 27964  002942  2A12               	incf	ECANReceiveMessage@i,f,c
 27965  002944                     i1l9860:
 27966  002944  5014               	movf	ECANReceiveMessage@temp,w,c
 27967  002946  5C12               	subwf	ECANReceiveMessage@i,w,c
 27968  002948  E3EE               	bnc	i1l9852
 27969                           
 27970                           ;ECAN.c: 974: if ( IRXIF )
 27971  00294A  AEA4               	btfss	4004,7,c	;volatile
 27972  00294C  D006               	goto	i1l9866
 27973                           
 27974                           ;ECAN.c: 975: {
 27975                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 27976  00294E  500F               	movf	ECANReceiveMessage@msgFlags,w,c
 27977  002950  6ED9               	movwf	fsr2l,c
 27978  002952  6ADA               	clrf	fsr2h,c
 27979  002954  0E00               	movlw	0
 27980  002956  88DB               	bsf	plusw2,4,c
 27981                           
 27982                           ;ECAN.c: 977: IRXIF = 0;
 27983  002958  9EA4               	bcf	4004,7,c	;volatile
 27984  00295A                     i1l9866:
 27985                           
 27986                           ;ECAN.c: 978: }
 27987                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 27988  00295A  C010  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 27989  00295E  C011  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 27990  002962  0E7F               	movlw	127
 27991  002964  16DF               	andwf	indf2,f,c
 27992                           
 27993                           ;ECAN.c: 985: if ( mode == 0x80 )
 27994  002966  5013               	movf	ECANReceiveMessage@mode,w,c
 27995  002968  0A80               	xorlw	128
 27996  00296A  B4D8               	btfsc	status,2,c
 27997                           
 27998                           ;ECAN.c: 986: FIFOEMPTY = 0;
 27999  00296C  9E74               	bcf	3956,7,c	;volatile
 28000                           
 28001                           ;ECAN.c: 992: return TRUE;
 28002  00296E  0E01               	movlw	1
 28003  002970                     i1l1471:
 28004  002970  0012               	return	
 28005  002972                     __end_of_ECANReceiveMessage:
 28006                           	opt stack 0
 28007  002972                     PL92:
 28008                           	opt stack 20
 28009  002972  5015               	movf	ECANReceiveMessage@ptr,w,c
 28010  002974  26D9               	addwf	fsr2l,f,c
 28011  002976  5016               	movf	ECANReceiveMessage@ptr+1,w,c
 28012  002978  22DA               	addwfc	fsr2h,f,c
 28013  00297A  50DF               	movf	indf2,w,c
 28014  00297C  6E14               	movwf	ECANReceiveMessage@temp,c
 28015  00297E  0012               	return	
 28016  002980                     __end_ofPL92:
 28017                           	opt stack 0
 28018                           tblptru	equ	0xFF8
 28019                           tblptrh	equ	0xFF7
 28020                           tblptrl	equ	0xFF6
 28021                           tablat	equ	0xFF5
 28022                           prodh	equ	0xFF4
 28023                           prodl	equ	0xFF3
 28024                           intcon	equ	0xFF2
 28025                           indf0	equ	0xFEF
 28026                           postinc0	equ	0xFEE
 28027                           fsr0h	equ	0xFEA
 28028                           fsr0l	equ	0xFE9
 28029                           wreg	equ	0xFE8
 28030                           indf1	equ	0xFE7
 28031                           postinc1	equ	0xFE6
 28032                           postdec1	equ	0xFE5
 28033                           fsr1h	equ	0xFE2
 28034                           fsr1l	equ	0xFE1
 28035                           bsr	equ	0xFE0
 28036                           indf2	equ	0xFDF
 28037                           postinc2	equ	0xFDE
 28038                           postdec2	equ	0xFDD
 28039                           plusw2	equ	0xFDB
 28040                           fsr2h	equ	0xFDA
 28041                           fsr2l	equ	0xFD9
 28042                           status	equ	0xFD8
 28043                           
 28044 ;; *************** function __RegsToCANID *****************
 28045 ;; Defined at:
 28046 ;;		line 1158 in file "ECAN.c"
 28047 ;; Parameters:    Size  Location     Type
 28048 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 28049 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28050 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28051 ;;  val             2    2[COMRAM] PTR unsigned long 
 28052 ;;		 -> id(4), 
 28053 ;;  type            1    4[COMRAM] unsigned char 
 28054 ;; Auto vars:     Size  Location     Type
 28055 ;;  Value           2    7[COMRAM] PTR struct _CAN_MESSAGE_
 28056 ;;		 -> id(4), 
 28057 ;; Return value:  Size  Location     Type
 28058 ;;		None               void
 28059 ;; Registers used:
 28060 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28061 ;; Tracked objects:
 28062 ;;		On entry : 0/1
 28063 ;;		On exit  : 0/0
 28064 ;;		Unchanged: 0/0
 28065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28066 ;;      Params:         5       0       0       0       0       0       0
 28067 ;;      Locals:         2       0       0       0       0       0       0
 28068 ;;      Temps:          2       0       0       0       0       0       0
 28069 ;;      Totals:         9       0       0       0       0       0       0
 28070 ;;Total ram usage:        9 bytes
 28071 ;; Hardware stack levels used:    1
 28072 ;; This function calls:
 28073 ;;		Nothing
 28074 ;; This function is called by:
 28075 ;;		_ECANReceiveMessage
 28076 ;; This function uses a non-reentrant model
 28077 ;;
 28078                           
 28079                           	psect	text86
 28080  0037C2                     __ptext86:
 28081                           	opt stack 0
 28082  0037C2                     __RegsToCANID:
 28083                           	opt stack 20
 28084                           
 28085                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 28086                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 28087                           
 28088                           ;incstack = 0
 28089                           ;incstack = 0
 28090  0037C2  C003  F008         	movff	__RegsToCANID@val,__RegsToCANID@Value
 28091  0037C6  C004  F009         	movff	__RegsToCANID@val+1,__RegsToCANID@Value+1
 28092                           
 28093                           ;ECAN.c: 1163: if ( type == 0 )
 28094  0037CA  6605               	tstfsz	__RegsToCANID@type,c
 28095  0037CC  D038               	goto	i1l9516
 28096                           
 28097                           ;ECAN.c: 1164: {
 28098                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 28099  0037CE  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28100  0037D2  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28101  0037D6  50DF               	movf	indf2,w,c
 28102  0037D8  6E06               	movwf	??__RegsToCANID& (0+255),c
 28103  0037DA  90D8               	bcf	status,0,c
 28104  0037DC  3606               	rlcf	??__RegsToCANID,f,c
 28105  0037DE  90D8               	bcf	status,0,c
 28106  0037E0  3606               	rlcf	??__RegsToCANID,f,c
 28107  0037E2  90D8               	bcf	status,0,c
 28108  0037E4  3406               	rlcf	??__RegsToCANID,w,c
 28109  0037E6  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 28110  0037EA  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 28111  0037EE  6EDF               	movwf	indf2,c
 28112                           
 28113                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 28114  0037F0  EE20 F001          	lfsr	2,1
 28115  0037F4  D864               	call	PL20	;call to abstracted procedure
 28116  0037F6  0E05               	movlw	5
 28117  0037F8  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28118  0037FA                     i1u1129_25:
 28119  0037FA  90D8               	bcf	status,0,c
 28120  0037FC  3206               	rrcf	??__RegsToCANID,f,c
 28121  0037FE  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28122  003800  D7FC               	goto	i1u1129_25
 28123  003802  5006               	movf	??__RegsToCANID,w,c
 28124                           
 28125                           ;ECAN.c: 1168: ptr++;
 28126                           
 28127                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 28128  003804  D867               	call	PL64	;call to abstracted procedure
 28129  003806  0E05               	movlw	5
 28130  003808  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28131  00380A                     i1u1130_25:
 28132  00380A  90D8               	bcf	status,0,c
 28133  00380C  3206               	rrcf	??__RegsToCANID,f,c
 28134  00380E  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28135  003810  D7FC               	goto	i1u1130_25
 28136  003812  C008  FFD9         	movff	__RegsToCANID@Value,fsr2l
 28137  003816  C009  FFDA         	movff	__RegsToCANID@Value+1,fsr2h
 28138  00381A  5006               	movf	??__RegsToCANID,w,c
 28139  00381C  12DF               	iorwf	indf2,f,c
 28140                           
 28141                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 28142  00381E  EE20 F002          	lfsr	2,2
 28143  003822  5008               	movf	__RegsToCANID@Value,w,c
 28144  003824  26D9               	addwf	fsr2l,f,c
 28145  003826  5009               	movf	__RegsToCANID@Value+1,w,c
 28146  003828  22DA               	addwfc	fsr2h,f,c
 28147  00382A  6ADF               	clrf	indf2,c
 28148                           
 28149                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 28150  00382C  EE20 F003          	lfsr	2,3
 28151  003830  5008               	movf	__RegsToCANID@Value,w,c
 28152  003832  26D9               	addwf	fsr2l,f,c
 28153  003834  5009               	movf	__RegsToCANID@Value+1,w,c
 28154  003836  22DA               	addwfc	fsr2h,f,c
 28155  003838  0E00               	movlw	0
 28156  00383A  6EDF               	movwf	indf2,c
 28157                           
 28158                           ;ECAN.c: 1172: }
 28159  00383C  D03F               	goto	i1l1518
 28160  00383E                     i1l9516:
 28161                           
 28162                           ;ECAN.c: 1173: else
 28163                           ;ECAN.c: 1174: {
 28164                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 28165  00383E  EE20 F002          	lfsr	2,2
 28166  003842  D83D               	call	PL20	;call to abstracted procedure
 28167  003844  0E05               	movlw	5
 28168  003846  6E07               	movwf	(??__RegsToCANID+1)& (0+255),c
 28169  003848                     i1u1131_25:
 28170  003848  90D8               	bcf	status,0,c
 28171  00384A  3606               	rlcf	??__RegsToCANID,f,c
 28172  00384C  2E07               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 28173  00384E  D7FC               	goto	i1u1131_25
 28174  003850  5006               	movf	??__RegsToCANID,w,c
 28175  003852  6EDF               	movwf	indf2,c
 28176                           
 28177                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 28178  003854  EE20 F003          	lfsr	2,3
 28179  003858  D832               	call	PL20	;call to abstracted procedure
 28180  00385A  90D8               	bcf	status,0,c
 28181  00385C  3206               	rrcf	??__RegsToCANID,f,c
 28182  00385E  90D8               	bcf	status,0,c
 28183  003860  3206               	rrcf	??__RegsToCANID,f,c
 28184  003862  90D8               	bcf	status,0,c
 28185  003864  3006               	rrcf	??__RegsToCANID,w,c
 28186                           
 28187                           ;ECAN.c: 1178: ptr++;
 28188                           
 28189                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 28190  003866  D836               	call	PL64	;call to abstracted procedure
 28191  003868  0E03               	movlw	3
 28192  00386A  D83E               	call	PL72	;call to abstracted procedure
 28193                           
 28194                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 28195  00386C  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28196  003870  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28197  003874  50DF               	movf	indf2,w,c
 28198  003876  6E06               	movwf	??__RegsToCANID& (0+255),c
 28199  003878  90D8               	bcf	status,0,c
 28200  00387A  3206               	rrcf	??__RegsToCANID,f,c
 28201  00387C  90D8               	bcf	status,0,c
 28202  00387E  3206               	rrcf	??__RegsToCANID,f,c
 28203  003880  90D8               	bcf	status,0,c
 28204  003882  3206               	rrcf	??__RegsToCANID,f,c
 28205  003884  0E1C               	movlw	28
 28206  003886  D830               	call	PL72	;call to abstracted procedure
 28207                           
 28208                           ;ECAN.c: 1182: ptr++;
 28209  003888  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28210  00388A  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28211                           
 28212                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 28213  00388C  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28214  003890  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28215  003894  EE10 F001          	lfsr	1,1
 28216  003898  5008               	movf	__RegsToCANID@Value,w,c
 28217  00389A  26E1               	addwf	fsr1l,f,c
 28218  00389C  5009               	movf	__RegsToCANID@Value+1,w,c
 28219  00389E  22E2               	addwfc	fsr1h,f,c
 28220  0038A0  CFDF FFE7          	movff	indf2,indf1
 28221                           
 28222                           ;ECAN.c: 1184: ptr++;
 28223  0038A4  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28224  0038A6  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28225                           
 28226                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 28227  0038A8  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28228  0038AC  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28229  0038B0  C008  FFE1         	movff	__RegsToCANID@Value,fsr1l
 28230  0038B4  C009  FFE2         	movff	__RegsToCANID@Value+1,fsr1h
 28231  0038B8  CFDF FFE7          	movff	indf2,indf1
 28232  0038BC                     i1l1518:
 28233  0038BC  0012               	return	
 28234  0038BE                     __end_of__RegsToCANID:
 28235                           	opt stack 0
 28236  0038BE                     PL20:
 28237                           	opt stack 20
 28238  0038BE  5008               	movf	__RegsToCANID@Value,w,c
 28239  0038C0  26D9               	addwf	fsr2l,f,c
 28240  0038C2  5009               	movf	__RegsToCANID@Value+1,w,c
 28241  0038C4  22DA               	addwfc	fsr2h,f,c
 28242  0038C6  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 28243  0038CA  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 28244  0038CE  50E7               	movf	indf1,w,c
 28245  0038D0  6E06               	movwf	??__RegsToCANID& (0+255),c
 28246  0038D2  0012               	return	
 28247  0038D4                     __end_ofPL20:
 28248                           	opt stack 0
 28249  0038D4                     PL64:
 28250                           	opt stack 20
 28251  0038D4  6EDF               	movwf	indf2,c
 28252  0038D6  4A01               	infsnz	__RegsToCANID@ptr,f,c
 28253  0038D8  2A02               	incf	__RegsToCANID@ptr+1,f,c
 28254  0038DA  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 28255  0038DE  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 28256  0038E2  50DF               	movf	indf2,w,c
 28257  0038E4  6E06               	movwf	??__RegsToCANID& (0+255),c
 28258  0038E6  0012               	return	
 28259  0038E8                     __end_ofPL64:
 28260                           	opt stack 0
 28261  0038E8                     PL72:
 28262                           	opt stack 20
 28263  0038E8  1606               	andwf	??__RegsToCANID,f,c
 28264  0038EA  EE20 F002          	lfsr	2,2
 28265  0038EE  5008               	movf	__RegsToCANID@Value,w,c
 28266  0038F0  26D9               	addwf	fsr2l,f,c
 28267  0038F2  5009               	movf	__RegsToCANID@Value+1,w,c
 28268  0038F4  22DA               	addwfc	fsr2h,f,c
 28269  0038F6  5006               	movf	??__RegsToCANID,w,c
 28270  0038F8  12DF               	iorwf	indf2,f,c
 28271  0038FA  0012               	return	
 28272  0038FC                     __end_ofPL72:
 28273                           	opt stack 0
 28274                           tblptru	equ	0xFF8
 28275                           tblptrh	equ	0xFF7
 28276                           tblptrl	equ	0xFF6
 28277                           tablat	equ	0xFF5
 28278                           prodh	equ	0xFF4
 28279                           prodl	equ	0xFF3
 28280                           intcon	equ	0xFF2
 28281                           indf0	equ	0xFEF
 28282                           postinc0	equ	0xFEE
 28283                           fsr0h	equ	0xFEA
 28284                           fsr0l	equ	0xFE9
 28285                           wreg	equ	0xFE8
 28286                           indf1	equ	0xFE7
 28287                           postinc1	equ	0xFE6
 28288                           postdec1	equ	0xFE5
 28289                           fsr1h	equ	0xFE2
 28290                           fsr1l	equ	0xFE1
 28291                           bsr	equ	0xFE0
 28292                           indf2	equ	0xFDF
 28293                           postinc2	equ	0xFDE
 28294                           postdec2	equ	0xFDD
 28295                           plusw2	equ	0xFDB
 28296                           fsr2h	equ	0xFDA
 28297                           fsr2l	equ	0xFD9
 28298                           status	equ	0xFD8
 28299                           
 28300 ;; *************** function __ECANPointBuffer *****************
 28301 ;; Defined at:
 28302 ;;		line 1209 in file "ECAN.c"
 28303 ;; Parameters:    Size  Location     Type
 28304 ;;  b               1    wreg     unsigned char 
 28305 ;; Auto vars:     Size  Location     Type
 28306 ;;  b               1    3[COMRAM] unsigned char 
 28307 ;;  pt              2    4[COMRAM] PTR unsigned char 
 28308 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 28309 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 28310 ;; Return value:  Size  Location     Type
 28311 ;;                  2    0[COMRAM] PTR unsigned char 
 28312 ;; Registers used:
 28313 ;;		wreg, status,2, status,0
 28314 ;; Tracked objects:
 28315 ;;		On entry : F/1
 28316 ;;		On exit  : 0/0
 28317 ;;		Unchanged: 0/0
 28318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28319 ;;      Params:         3       0       0       0       0       0       0
 28320 ;;      Locals:         3       0       0       0       0       0       0
 28321 ;;      Temps:          0       0       0       0       0       0       0
 28322 ;;      Totals:         6       0       0       0       0       0       0
 28323 ;;Total ram usage:        6 bytes
 28324 ;; Hardware stack levels used:    1
 28325 ;; This function calls:
 28326 ;;		Nothing
 28327 ;; This function is called by:
 28328 ;;		_ECANReceiveMessage
 28329 ;; This function uses a non-reentrant model
 28330 ;;
 28331                           
 28332                           	psect	text87
 28333  004F82                     __ptext87:
 28334                           	opt stack 0
 28335  004F82                     __ECANPointBuffer:
 28336                           	opt stack 20
 28337                           
 28338                           ;incstack = 0
 28339                           ;incstack = 0
 28340                           ;__ECANPointBuffer@b stored from wreg
 28341  004F82  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 28342                           
 28343                           ; BSR set to: 1
 28344                           ;ECAN.c: 1210: BYTE* pt;
 28345                           ;ECAN.c: 1212: switch(b)
 28346  004F86  D024               	goto	i1l9500
 28347  004F88                     i1l9482:
 28348                           
 28349                           ; BSR set to: 1
 28350                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 28351  004F88  0E0F               	movlw	15	;volatile
 28352  004F8A  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28353  004F8C  0E60               	movlw	96	;volatile
 28354  004F8E  D01E               	goto	L60
 28355  004F90                     i1l9484:
 28356                           
 28357                           ; BSR set to: 1
 28358                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 28359  004F90  010F               	movlb	15	; () banked
 28360  004F92  0E0F               	movlw	15	;volatile
 28361  004F94  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28362  004F96  0E50               	movlw	80	;volatile
 28363  004F98  D019               	goto	L60
 28364  004F9A                     i1l9486:
 28365                           
 28366                           ; BSR set to: 1
 28367                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 28368  004F9A  010E               	movlb	14	; () banked
 28369  004F9C  0E0E               	movlw	14	;volatile
 28370  004F9E  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28371  004FA0  0E20               	movlw	32	;volatile
 28372  004FA2  D014               	goto	L60
 28373  004FA4                     i1l9488:
 28374                           
 28375                           ; BSR set to: 1
 28376                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 28377  004FA4  010E               	movlb	14	; () banked
 28378  004FA6  0E0E               	movlw	14	;volatile
 28379  004FA8  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28380  004FAA  0E30               	movlw	48	;volatile
 28381  004FAC  D00F               	goto	L60
 28382  004FAE                     i1l9490:
 28383                           
 28384                           ; BSR set to: 1
 28385                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28386  004FAE  010E               	movlb	14	; () banked
 28387  004FB0  0E0E               	movlw	14	;volatile
 28388  004FB2  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28389  004FB4  0E40               	movlw	64	;volatile
 28390  004FB6  D00A               	goto	L60
 28391  004FB8                     i1l9492:
 28392                           
 28393                           ; BSR set to: 1
 28394                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28395  004FB8  010E               	movlb	14	; () banked
 28396  004FBA  0E0E               	movlw	14	;volatile
 28397  004FBC  D7EB               	goto	L61
 28398  004FBE                     i1l9494:
 28399                           
 28400                           ; BSR set to: 1
 28401                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28402  004FBE  010E               	movlb	14	; () banked
 28403  004FC0  0E0E               	movlw	14	;volatile
 28404  004FC2  D7E3               	goto	L62
 28405  004FC4                     i1l9496:
 28406                           
 28407                           ; BSR set to: 1
 28408                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28409  004FC4  010E               	movlb	14	; () banked
 28410  004FC6  0E0E               	movlw	14	;volatile
 28411  004FC8  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28412  004FCA  0E70               	movlw	112	;volatile
 28413  004FCC                     L60:
 28414  004FCC  6E05               	movwf	__ECANPointBuffer@pt,c
 28415                           
 28416                           ;ECAN.c: 1237: break;
 28417  004FCE  D00F               	goto	i1l1523
 28418  004FD0                     i1l9500:
 28419                           
 28420                           ; BSR set to: 1
 28421  004FD0  5004               	movf	__ECANPointBuffer@b,w,c
 28422                           
 28423                           ; Switch size 1, requested type "space"
 28424                           ; Number of cases is 7, Range of values is 0 to 6
 28425                           ; switch strategies available:
 28426                           ; Name         Instructions Cycles
 28427                           ; simple_byte           22    12 (average)
 28428                           ;	Chosen strategy is simple_byte
 28429  004FD2  E0DA               	bz	i1l9482
 28430  004FD4  0A01               	xorlw	1	; case 1
 28431  004FD6  E0DC               	bz	i1l9484
 28432  004FD8  0A03               	xorlw	3	; case 2
 28433  004FDA  E0DF               	bz	i1l9486
 28434  004FDC  0A01               	xorlw	1	; case 3
 28435  004FDE  E0E2               	bz	i1l9488
 28436  004FE0  0A07               	xorlw	7	; case 4
 28437  004FE2  E0E5               	bz	i1l9490
 28438  004FE4  0A01               	xorlw	1	; case 5
 28439  004FE6  E0E8               	bz	i1l9492
 28440  004FE8  0A03               	xorlw	3	; case 6
 28441  004FEA  E0E9               	bz	i1l9494
 28442  004FEC  D7EB               	goto	i1l9496
 28443  004FEE                     i1l1523:
 28444                           
 28445                           ;ECAN.c: 1239: return (pt);
 28446  004FEE  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28447  004FF2  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28448  004FF6  0012               	return	
 28449  004FF8                     __end_of__ECANPointBuffer:
 28450                           	opt stack 0
 28451                           tblptru	equ	0xFF8
 28452                           tblptrh	equ	0xFF7
 28453                           tblptrl	equ	0xFF6
 28454                           tablat	equ	0xFF5
 28455                           prodh	equ	0xFF4
 28456                           prodl	equ	0xFF3
 28457                           intcon	equ	0xFF2
 28458                           indf0	equ	0xFEF
 28459                           postinc0	equ	0xFEE
 28460                           fsr0h	equ	0xFEA
 28461                           fsr0l	equ	0xFE9
 28462                           wreg	equ	0xFE8
 28463                           indf1	equ	0xFE7
 28464                           postinc1	equ	0xFE6
 28465                           postdec1	equ	0xFE5
 28466                           fsr1h	equ	0xFE2
 28467                           fsr1l	equ	0xFE1
 28468                           bsr	equ	0xFE0
 28469                           indf2	equ	0xFDF
 28470                           postinc2	equ	0xFDE
 28471                           postdec2	equ	0xFDD
 28472                           plusw2	equ	0xFDB
 28473                           fsr2h	equ	0xFDA
 28474                           fsr2l	equ	0xFD9
 28475                           status	equ	0xFD8
 28476                           
 28477 ;; *************** function _fifo_write *****************
 28478 ;; Defined at:
 28479 ;;		line 61 in file "fifo.c"
 28480 ;; Parameters:    Size  Location     Type
 28481 ;;  f               2    0[COMRAM] PTR struct .
 28482 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28483 ;;  buf             2    2[COMRAM] PTR const void 
 28484 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 28485 ;;  nbytes          4    4[COMRAM] unsigned long 
 28486 ;; Auto vars:     Size  Location     Type
 28487 ;;  i               4   14[COMRAM] unsigned long 
 28488 ;;  p               2   12[COMRAM] PTR const unsigned char 
 28489 ;;		 -> dlc(1), data(8), id(4), Interrupt@c(1), 
 28490 ;; Return value:  Size  Location     Type
 28491 ;;                  2    0[COMRAM] unsigned short 
 28492 ;; Registers used:
 28493 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28494 ;; Tracked objects:
 28495 ;;		On entry : F/1
 28496 ;;		On exit  : F/1
 28497 ;;		Unchanged: F/0
 28498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28499 ;;      Params:         8       0       0       0       0       0       0
 28500 ;;      Locals:         6       0       0       0       0       0       0
 28501 ;;      Temps:          4       0       0       0       0       0       0
 28502 ;;      Totals:        18       0       0       0       0       0       0
 28503 ;;Total ram usage:       18 bytes
 28504 ;; Hardware stack levels used:    1
 28505 ;; This function calls:
 28506 ;;		Nothing
 28507 ;; This function is called by:
 28508 ;;		_Interrupt
 28509 ;; This function uses a non-reentrant model
 28510 ;;
 28511                           
 28512                           	psect	text88
 28513  0038FC                     __ptext88:
 28514                           	opt stack 0
 28515  0038FC                     _fifo_write:
 28516                           	opt stack 21
 28517                           
 28518                           ; BSR set to: 1
 28519                           ;fifo.c: 62: uint32_t i;
 28520                           ;fifo.c: 63: const uint8_t *p;
 28521                           ;fifo.c: 64: p = buf;
 28522                           
 28523                           ;incstack = 0
 28524                           ;incstack = 0
 28525  0038FC  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 28526  003900  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 28527                           
 28528                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28529  003904  6A0F               	clrf	fifo_write@i,c
 28530  003906  6A10               	clrf	fifo_write@i+1,c
 28531  003908  6A11               	clrf	fifo_write@i+2,c
 28532  00390A  6A12               	clrf	fifo_write@i+3,c
 28533  00390C  D068               	goto	i1l6424
 28534  00390E                     i1l6404:
 28535                           
 28536                           ; BSR set to: 1
 28537                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 28538                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 28539  00390E  EE20 F004          	lfsr	2,4
 28540  003912  5001               	movf	fifo_write@f,w,c
 28541  003914  D872               	call	PL12	;call to abstracted procedure
 28542  003916  E102               	bnz	i1u630_25
 28543  003918  5009               	movf	??_fifo_write,w,c
 28544  00391A  180B               	xorwf	??_fifo_write+2,w,c
 28545  00391C                     i1u630_25:
 28546  00391C  E011               	bz	i1l1550
 28547                           
 28548                           ; BSR set to: 1
 28549  00391E  EE20 F006          	lfsr	2,6
 28550  003922  5001               	movf	fifo_write@f,w,c
 28551  003924  D86A               	call	PL12	;call to abstracted procedure
 28552  003926  E102               	bnz	i1u631_25
 28553  003928  5009               	movf	??_fifo_write,w,c
 28554  00392A  180B               	xorwf	??_fifo_write+2,w,c
 28555  00392C                     i1u631_25:
 28556  00392C  E10E               	bnz	i1l6412
 28557                           
 28558                           ; BSR set to: 1
 28559  00392E  EE20 F004          	lfsr	2,4
 28560  003932  5001               	movf	fifo_write@f,w,c
 28561  003934  26D9               	addwf	fsr2l,f,c
 28562  003936  5002               	movf	fifo_write@f+1,w,c
 28563  003938  22DA               	addwfc	fsr2h,f,c
 28564  00393A  50DE               	movf	postinc2,w,c
 28565  00393C  10DD               	iorwf	postdec2,w,c
 28566  00393E  E105               	bnz	i1l6412
 28567  003940                     i1l1550:
 28568                           
 28569                           ; BSR set to: 1
 28570                           ;fifo.c: 71: return i;
 28571  003940  C00F  F001         	movff	fifo_write@i,?_fifo_write
 28572  003944  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 28573  003948  D057               	goto	i1l1551
 28574  00394A                     i1l6412:
 28575                           
 28576                           ; BSR set to: 1
 28577                           ;fifo.c: 73: else {
 28578                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28579  00394A  C00D  FFD9         	movff	fifo_write@p,fsr2l
 28580  00394E  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 28581  003952  EE10 F002          	lfsr	1,2
 28582  003956  5001               	movf	fifo_write@f,w,c
 28583  003958  26E1               	addwf	fsr1l,f,c
 28584  00395A  5002               	movf	fifo_write@f+1,w,c
 28585  00395C  22E2               	addwfc	fsr1h,f,c
 28586  00395E  CFE6 F009          	movff	postinc1,??_fifo_write
 28587  003962  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 28588  003966  C001  FFE1         	movff	fifo_write@f,fsr1l
 28589  00396A  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 28590  00396E  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 28591  003972  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 28592  003976  5009               	movf	??_fifo_write,w,c
 28593  003978  240B               	addwf	??_fifo_write+2,w,c
 28594  00397A  6EE1               	movwf	fsr1l,c
 28595  00397C  500A               	movf	??_fifo_write+1,w,c
 28596  00397E  200C               	addwfc	??_fifo_write+3,w,c
 28597  003980  6EE2               	movwf	fsr1h,c
 28598  003982  CFDF FFE7          	movff	indf2,indf1
 28599                           
 28600                           ; BSR set to: 1
 28601  003986  4A0D               	infsnz	fifo_write@p,f,c
 28602  003988  2A0E               	incf	fifo_write@p+1,f,c
 28603                           
 28604                           ; BSR set to: 1
 28605                           ;fifo.c: 75: f->head++;
 28606  00398A  EE20 F002          	lfsr	2,2
 28607  00398E  5001               	movf	fifo_write@f,w,c
 28608  003990  26D9               	addwf	fsr2l,f,c
 28609  003992  5002               	movf	fifo_write@f+1,w,c
 28610  003994  22DA               	addwfc	fsr2h,f,c
 28611  003996  2ADE               	incf	postinc2,f,c
 28612  003998  0E00               	movlw	0
 28613  00399A  22DD               	addwfc	postdec2,f,c
 28614                           
 28615                           ; BSR set to: 1
 28616                           ;fifo.c: 77: if (f->head >= f->size) {
 28617  00399C  EE20 F006          	lfsr	2,6
 28618  0039A0  5001               	movf	fifo_write@f,w,c
 28619  0039A2  26D9               	addwf	fsr2l,f,c
 28620  0039A4  5002               	movf	fifo_write@f+1,w,c
 28621  0039A6  22DA               	addwfc	fsr2h,f,c
 28622  0039A8  EE10 F002          	lfsr	1,2
 28623  0039AC  5001               	movf	fifo_write@f,w,c
 28624  0039AE  26E1               	addwf	fsr1l,f,c
 28625  0039B0  5002               	movf	fifo_write@f+1,w,c
 28626  0039B2  22E2               	addwfc	fsr1h,f,c
 28627  0039B4  52E6               	movf	postinc1,f,c
 28628  0039B6  52DE               	movf	postinc2,f,c
 28629  0039B8  50DD               	movf	postdec2,w,c
 28630  0039BA  5CE5               	subwf	postdec1,w,c
 28631  0039BC  E102               	bnz	i1u633_25
 28632  0039BE  50DF               	movf	indf2,w,c
 28633  0039C0  5CE7               	subwf	indf1,w,c
 28634  0039C2                     i1u633_25:
 28635  0039C2  E308               	bnc	i1l6422
 28636                           
 28637                           ; BSR set to: 1
 28638                           ;fifo.c: 78: f->head = 0;
 28639  0039C4  EE20 F002          	lfsr	2,2
 28640  0039C8  5001               	movf	fifo_write@f,w,c
 28641  0039CA  26D9               	addwf	fsr2l,f,c
 28642  0039CC  5002               	movf	fifo_write@f+1,w,c
 28643  0039CE  22DA               	addwfc	fsr2h,f,c
 28644  0039D0  6ADE               	clrf	postinc2,c
 28645  0039D2  6ADD               	clrf	postdec2,c
 28646  0039D4                     i1l6422:
 28647                           
 28648                           ; BSR set to: 1
 28649  0039D4  2A0F               	incf	fifo_write@i,f,c
 28650  0039D6  0E00               	movlw	0
 28651  0039D8  2210               	addwfc	fifo_write@i+1,f,c
 28652  0039DA  2211               	addwfc	fifo_write@i+2,f,c
 28653  0039DC  2212               	addwfc	fifo_write@i+3,f,c
 28654  0039DE                     i1l6424:
 28655                           
 28656                           ; BSR set to: 1
 28657  0039DE  5005               	movf	fifo_write@nbytes,w,c
 28658  0039E0  5C0F               	subwf	fifo_write@i,w,c
 28659  0039E2  5006               	movf	fifo_write@nbytes+1,w,c
 28660  0039E4  5810               	subwfb	fifo_write@i+1,w,c
 28661  0039E6  5007               	movf	fifo_write@nbytes+2,w,c
 28662  0039E8  5811               	subwfb	fifo_write@i+2,w,c
 28663  0039EA  5008               	movf	fifo_write@nbytes+3,w,c
 28664  0039EC  5812               	subwfb	fifo_write@i+3,w,c
 28665  0039EE  E38F               	bnc	i1l6404
 28666                           
 28667                           ; BSR set to: 1
 28668                           ;fifo.c: 79: }
 28669                           ;fifo.c: 80: }
 28670                           ;fifo.c: 82: }
 28671                           ;fifo.c: 84: return nbytes;
 28672  0039F0  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 28673  0039F4  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28674  0039F8                     i1l1551:
 28675                           
 28676                           ; BSR set to: 1
 28677  0039F8  0012               	return	
 28678  0039FA                     __end_of_fifo_write:
 28679                           	opt stack 0
 28680  0039FA                     PL12:
 28681                           	opt stack 21
 28682  0039FA  26D9               	addwf	fsr2l,f,c
 28683  0039FC  5002               	movf	fifo_write@f+1,w,c
 28684  0039FE  22DA               	addwfc	fsr2h,f,c
 28685  003A00  CFDE F009          	movff	postinc2,??_fifo_write
 28686  003A04  CFDD F00A          	movff	postdec2,??_fifo_write+1
 28687  003A08  EE20 F002          	lfsr	2,2
 28688  003A0C  5001               	movf	fifo_write@f,w,c
 28689  003A0E  26D9               	addwf	fsr2l,f,c
 28690  003A10  5002               	movf	fifo_write@f+1,w,c
 28691  003A12  22DA               	addwfc	fsr2h,f,c
 28692  003A14  CFDE F00B          	movff	postinc2,??_fifo_write+2
 28693  003A18  CFDD F00C          	movff	postdec2,??_fifo_write+3
 28694  003A1C  2A0B               	incf	??_fifo_write+2,f,c
 28695  003A1E  0E00               	movlw	0
 28696  003A20  220C               	addwfc	??_fifo_write+3,f,c
 28697  003A22  500A               	movf	??_fifo_write+1,w,c
 28698  003A24  180C               	xorwf	??_fifo_write+3,w,c
 28699  003A26  0012               	return	
 28700  003A28                     __end_ofPL12:
 28701                           	opt stack 0
 28702                           tblptru	equ	0xFF8
 28703                           tblptrh	equ	0xFF7
 28704                           tblptrl	equ	0xFF6
 28705                           tablat	equ	0xFF5
 28706                           prodh	equ	0xFF4
 28707                           prodl	equ	0xFF3
 28708                           intcon	equ	0xFF2
 28709                           indf0	equ	0xFEF
 28710                           postinc0	equ	0xFEE
 28711                           fsr0h	equ	0xFEA
 28712                           fsr0l	equ	0xFE9
 28713                           wreg	equ	0xFE8
 28714                           indf1	equ	0xFE7
 28715                           postinc1	equ	0xFE6
 28716                           postdec1	equ	0xFE5
 28717                           fsr1h	equ	0xFE2
 28718                           fsr1l	equ	0xFE1
 28719                           bsr	equ	0xFE0
 28720                           indf2	equ	0xFDF
 28721                           postinc2	equ	0xFDE
 28722                           postdec2	equ	0xFDD
 28723                           plusw2	equ	0xFDB
 28724                           fsr2h	equ	0xFDA
 28725                           fsr2l	equ	0xFD9
 28726                           status	equ	0xFD8
 28727                           
 28728 ;; *************** function _ReadUSART *****************
 28729 ;; Defined at:
 28730 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 28731 ;; Parameters:    Size  Location     Type
 28732 ;;		None
 28733 ;; Auto vars:     Size  Location     Type
 28734 ;;  data            1    0[COMRAM] unsigned char 
 28735 ;; Return value:  Size  Location     Type
 28736 ;;                  1    wreg      unsigned char 
 28737 ;; Registers used:
 28738 ;;		wreg, status,2, status,0
 28739 ;; Tracked objects:
 28740 ;;		On entry : 0/0
 28741 ;;		On exit  : 0/0
 28742 ;;		Unchanged: 0/0
 28743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28744 ;;      Params:         0       0       0       0       0       0       0
 28745 ;;      Locals:         1       0       0       0       0       0       0
 28746 ;;      Temps:          0       0       0       0       0       0       0
 28747 ;;      Totals:         1       0       0       0       0       0       0
 28748 ;;Total ram usage:        1 bytes
 28749 ;; Hardware stack levels used:    1
 28750 ;; This function calls:
 28751 ;;		Nothing
 28752 ;; This function is called by:
 28753 ;;		_Interrupt
 28754 ;; This function uses a non-reentrant model
 28755 ;;
 28756                           
 28757                           	psect	text89
 28758  005868                     __ptext89:
 28759                           	opt stack 0
 28760  005868                     _ReadUSART:
 28761                           	opt stack 21
 28762                           
 28763                           ; BSR set to: 1
 28764                           ;incstack = 0
 28765                           ;incstack = 0
 28766  005868  0EF2               	movlw	242
 28767  00586A  162A               	andwf	_USART_Status,f,c
 28768  00586C  ACAB               	btfss	4011,6,c	;volatile
 28769  00586E  D003               	goto	i1l1869
 28770  005870  902A               	bcf	_USART_Status,0,c
 28771  005872  B0AB               	btfsc	4011,0,c	;volatile
 28772  005874  802A               	bsf	_USART_Status,0,c
 28773  005876                     i1l1869:
 28774  005876  B4AB               	btfsc	4011,2,c	;volatile
 28775  005878  842A               	bsf	_USART_Status,2,c
 28776  00587A  B2AB               	btfsc	4011,1,c	;volatile
 28777  00587C  862A               	bsf	_USART_Status,3,c
 28778  00587E  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 28779  005882  5001               	movf	ReadUSART@data,w,c
 28780  005884  0012               	return	
 28781  005886                     __end_of_ReadUSART:
 28782                           	opt stack 0
 28783                           tblptru	equ	0xFF8
 28784                           tblptrh	equ	0xFF7
 28785                           tblptrl	equ	0xFF6
 28786                           tablat	equ	0xFF5
 28787                           prodh	equ	0xFF4
 28788                           prodl	equ	0xFF3
 28789                           intcon	equ	0xFF2
 28790                           indf0	equ	0xFEF
 28791                           postinc0	equ	0xFEE
 28792                           fsr0h	equ	0xFEA
 28793                           fsr0l	equ	0xFE9
 28794                           wreg	equ	0xFE8
 28795                           indf1	equ	0xFE7
 28796                           postinc1	equ	0xFE6
 28797                           postdec1	equ	0xFE5
 28798                           fsr1h	equ	0xFE2
 28799                           fsr1l	equ	0xFE1
 28800                           bsr	equ	0xFE0
 28801                           indf2	equ	0xFDF
 28802                           postinc2	equ	0xFDE
 28803                           postdec2	equ	0xFDD
 28804                           plusw2	equ	0xFDB
 28805                           fsr2h	equ	0xFDA
 28806                           fsr2l	equ	0xFD9
 28807                           status	equ	0xFD8
 28808                           tblptru	equ	0xFF8
 28809                           tblptrh	equ	0xFF7
 28810                           tblptrl	equ	0xFF6
 28811                           tablat	equ	0xFF5
 28812                           prodh	equ	0xFF4
 28813                           prodl	equ	0xFF3
 28814                           intcon	equ	0xFF2
 28815                           indf0	equ	0xFEF
 28816                           postinc0	equ	0xFEE
 28817                           fsr0h	equ	0xFEA
 28818                           fsr0l	equ	0xFE9
 28819                           wreg	equ	0xFE8
 28820                           indf1	equ	0xFE7
 28821                           postinc1	equ	0xFE6
 28822                           postdec1	equ	0xFE5
 28823                           fsr1h	equ	0xFE2
 28824                           fsr1l	equ	0xFE1
 28825                           bsr	equ	0xFE0
 28826                           indf2	equ	0xFDF
 28827                           postinc2	equ	0xFDE
 28828                           postdec2	equ	0xFDD
 28829                           plusw2	equ	0xFDB
 28830                           fsr2h	equ	0xFDA
 28831                           fsr2l	equ	0xFD9
 28832                           status	equ	0xFD8
 28833                           
 28834                           	psect	rparam
 28835  0000                     tblptru	equ	0xFF8
 28836                           tblptrh	equ	0xFF7
 28837                           tblptrl	equ	0xFF6
 28838                           tablat	equ	0xFF5
 28839                           prodh	equ	0xFF4
 28840                           prodl	equ	0xFF3
 28841                           intcon	equ	0xFF2
 28842                           indf0	equ	0xFEF
 28843                           postinc0	equ	0xFEE
 28844                           fsr0h	equ	0xFEA
 28845                           fsr0l	equ	0xFE9
 28846                           wreg	equ	0xFE8
 28847                           indf1	equ	0xFE7
 28848                           postinc1	equ	0xFE6
 28849                           postdec1	equ	0xFE5
 28850                           fsr1h	equ	0xFE2
 28851                           fsr1l	equ	0xFE1
 28852                           bsr	equ	0xFE0
 28853                           indf2	equ	0xFDF
 28854                           postinc2	equ	0xFDE
 28855                           postdec2	equ	0xFDD
 28856                           plusw2	equ	0xFDB
 28857                           fsr2h	equ	0xFDA
 28858                           fsr2l	equ	0xFD9
 28859                           status	equ	0xFD8
 28860                           tblptru	equ	0xFF8
 28861                           tblptrh	equ	0xFF7
 28862                           tblptrl	equ	0xFF6
 28863                           tablat	equ	0xFF5
 28864                           prodh	equ	0xFF4
 28865                           prodl	equ	0xFF3
 28866                           intcon	equ	0xFF2
 28867                           indf0	equ	0xFEF
 28868                           postinc0	equ	0xFEE
 28869                           fsr0h	equ	0xFEA
 28870                           fsr0l	equ	0xFE9
 28871                           wreg	equ	0xFE8
 28872                           indf1	equ	0xFE7
 28873                           postinc1	equ	0xFE6
 28874                           postdec1	equ	0xFE5
 28875                           fsr1h	equ	0xFE2
 28876                           fsr1l	equ	0xFE1
 28877                           bsr	equ	0xFE0
 28878                           indf2	equ	0xFDF
 28879                           postinc2	equ	0xFDE
 28880                           postdec2	equ	0xFDD
 28881                           plusw2	equ	0xFDB
 28882                           fsr2h	equ	0xFDA
 28883                           fsr2l	equ	0xFD9
 28884                           status	equ	0xFD8


Data Sizes:
    Strings     4055
    Constant    120
    Data        0
    BSS         1143
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     33      63
    BANK0           160    132     141
    BANK1           256      0     228
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_252(CODE[2]), STR_251(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_246(CODE[2]), 
		 -> STR_245(CODE[3]), STR_244(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_262(CODE[3]), STR_261(CODE[23]), STR_260(CODE[10]), STR_259(CODE[10]), 
		 -> STR_258(CODE[12]), STR_257(CODE[8]), STR_256(CODE[7]), STR_255(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_254(CODE[10]), STR_253(CODE[3]), STR_250(CODE[20]), 
		 -> STR_249(CODE[3]), STR_248(CODE[14]), STR_247(CODE[3]), STR_243(CODE[8]), 
		 -> STR_242(CODE[15]), STR_241(CODE[67]), STR_240(CODE[3]), STR_239(CODE[27]), 
		 -> STR_238(CODE[67]), STR_237(CODE[39]), STR_236(CODE[62]), STR_235(CODE[55]), 
		 -> STR_234(CODE[49]), STR_233(CODE[67]), STR_232(CODE[47]), STR_231(CODE[47]), 
		 -> STR_230(CODE[34]), STR_229(CODE[71]), STR_228(CODE[20]), STR_227(CODE[78]), 
		 -> STR_226(CODE[24]), STR_225(CODE[77]), STR_224(CODE[67]), STR_223(CODE[69]), 
		 -> STR_222(CODE[47]), STR_221(CODE[40]), STR_220(CODE[39]), STR_219(CODE[33]), 
		 -> STR_218(CODE[23]), STR_217(CODE[56]), STR_216(CODE[24]), STR_215(CODE[44]), 
		 -> STR_214(CODE[50]), STR_213(CODE[31]), STR_212(CODE[50]), STR_211(CODE[51]), 
		 -> STR_210(CODE[46]), STR_209(CODE[44]), STR_208(CODE[27]), STR_207(CODE[39]), 
		 -> STR_206(CODE[39]), STR_205(CODE[52]), STR_204(CODE[54]), STR_203(CODE[55]), 
		 -> STR_202(CODE[3]), STR_199(CODE[24]), STR_198(CODE[57]), STR_197(CODE[53]), 
		 -> STR_196(CODE[58]), STR_195(CODE[3]), STR_192(CODE[25]), STR_191(CODE[3]), 
		 -> STR_188(CODE[24]), STR_187(CODE[3]), STR_184(CODE[24]), STR_183(CODE[3]), 
		 -> STR_180(CODE[24]), STR_179(CODE[3]), STR_176(CODE[23]), STR_175(CODE[3]), 
		 -> STR_172(CODE[21]), STR_171(CODE[3]), STR_168(CODE[22]), STR_167(CODE[3]), 
		 -> STR_164(CODE[17]), STR_163(CODE[3]), STR_160(CODE[18]), STR_159(CODE[4]), 
		 -> STR_158(CODE[11]), STR_157(CODE[2]), STR_154(CODE[7]), STR_151(CODE[7]), 
		 -> STR_148(CODE[9]), STR_145(CODE[7]), STR_142(CODE[8]), STR_139(CODE[7]), 
		 -> STR_138(CODE[2]), STR_137(CODE[2]), STR_136(CODE[6]), STR_135(CODE[8]), 
		 -> STR_134(CODE[8]), STR_133(CODE[20]), STR_132(CODE[27]), STR_131(CODE[6]), 
		 -> STR_130(CODE[33]), STR_127(CODE[26]), STR_125(CODE[32]), STR_123(CODE[28]), 
		 -> STR_119(CODE[6]), STR_117(CODE[40]), STR_115(CODE[44]), STR_112(CODE[6]), 
		 -> STR_111(CODE[39]), STR_109(CODE[36]), STR_107(CODE[37]), STR_105(CODE[40]), 
		 -> STR_103(CODE[37]), STR_102(CODE[50]), STR_99(CODE[6]), STR_98(CODE[41]), 
		 -> STR_96(CODE[38]), STR_94(CODE[39]), STR_92(CODE[42]), STR_90(CODE[39]), 
		 -> STR_89(CODE[66]), STR_86(CODE[6]), STR_85(CODE[3]), STR_82(CODE[20]), 
		 -> STR_80(CODE[33]), STR_79(CODE[35]), STR_78(CODE[24]), STR_76(CODE[33]), 
		 -> STR_74(CODE[24]), STR_71(CODE[54]), STR_70(CODE[6]), STR_69(CODE[3]), 
		 -> STR_64(CODE[34]), STR_63(CODE[3]), STR_60(CODE[4]), wrkbuf(BANK1[80]), 
		 -> STR_55(CODE[15]), STR_53(CODE[33]), STR_51(CODE[24]), STR_48(CODE[6]), 
		 -> STR_46(CODE[6]), STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), 
		 -> STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), 
		 -> STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), 
		 -> STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), 
		 -> STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), 
		 -> STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), 
		 -> STR_3(CODE[35]), STR_2(CODE[58]), STR_1(CODE[37]), 

    sprintf$2093	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_264(CODE[17]), STR_263(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_201(CODE[3]), STR_200(CODE[7]), STR_194(CODE[3]), STR_193(CODE[7]), 
		 -> STR_190(CODE[4]), STR_189(CODE[8]), STR_186(CODE[4]), STR_185(CODE[8]), 
		 -> STR_182(CODE[4]), STR_181(CODE[8]), STR_178(CODE[4]), STR_177(CODE[8]), 
		 -> STR_174(CODE[4]), STR_173(CODE[7]), STR_170(CODE[4]), STR_169(CODE[7]), 
		 -> STR_166(CODE[4]), STR_165(CODE[7]), STR_162(CODE[4]), STR_161(CODE[7]), 
		 -> STR_156(CODE[3]), STR_155(CODE[7]), STR_153(CODE[3]), STR_152(CODE[7]), 
		 -> STR_150(CODE[3]), STR_149(CODE[7]), STR_147(CODE[3]), STR_146(CODE[7]), 
		 -> STR_144(CODE[3]), STR_143(CODE[7]), STR_141(CODE[3]), STR_140(CODE[7]), 
		 -> STR_84(CODE[3]), STR_83(CODE[7]), STR_68(CODE[3]), STR_67(CODE[7]), 
		 -> STR_66(CODE[3]), STR_65(CODE[7]), STR_62(CODE[3]), STR_61(CODE[7]), 
		 -> STR_59(CODE[3]), STR_58(CODE[7]), STR_57(CODE[3]), STR_56(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2073$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(BANK1[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(COMRAM[8]), 
		 -> vscpSize(BANK0[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(COMRAM[8]), 
		 -> vscpSize(BANK0[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(2) Largest target is 4
		 -> id(BANK1[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(2) Largest target is 4
		 -> id(BANK1[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(COMRAM[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK0[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(BANK0[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(BANK0[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(BANK0[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 8
		 -> vscpData(COMRAM[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(BANK0[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(1) Largest target is 8
		 -> vscpData(COMRAM[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1491	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_201(CODE[3]), STR_200(CODE[7]), 

    printErrors$1482	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_194(CODE[3]), STR_193(CODE[7]), 

    printErrors$1476	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_190(CODE[4]), STR_189(CODE[8]), 

    printErrors$1470	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_186(CODE[4]), STR_185(CODE[8]), 

    printErrors$1464	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_182(CODE[4]), STR_181(CODE[8]), 

    printErrors$1458	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_178(CODE[4]), STR_177(CODE[8]), 

    printStatistics$1451	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_174(CODE[4]), STR_173(CODE[7]), 

    printStatistics$1445	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_170(CODE[4]), STR_169(CODE[7]), 

    printStatistics$1439	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_166(CODE[4]), STR_165(CODE[7]), 

    printStatistics$1433	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_162(CODE[4]), STR_161(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1226(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1365	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_156(CODE[3]), STR_155(CODE[7]), 

    receivePrintEventVerbose$1360	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[3]), STR_152(CODE[7]), 

    receivePrintEventVerbose$1355	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_150(CODE[3]), STR_149(CODE[7]), 

    receivePrintEventVerbose$1350	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1345	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1340	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(COMRAM[8]), 

    doModeVerbose@p_1272	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1252	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1243	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_84(CODE[3]), STR_83(CODE[7]), 

    doModeVerbose@preg_1231	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1227	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1218	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_68(CODE[3]), STR_67(CODE[7]), 

    doModeVerbose$1214	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1208	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1203	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_59(CODE[3]), STR_58(CODE[7]), 

    doModeVerbose$1191	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_57(CODE[3]), STR_56(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1179	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(COMRAM[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _init_app_ram->_Read_b_eep

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  132081
                                            125 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9556
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5    1050
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     378
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4556
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8    1274
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   21256
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
           _sendVSCPDriverErrorFrame
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1926
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    2010
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1926
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2536
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1842
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     882
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    3506
                                             18 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    3950
                                             18 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     930
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     594
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     468
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   96496
                                            105 BANK0     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4030
                                             85 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     222
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3946
                                             85 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     152
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   23342
                                            100 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    4470
                                             94 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    6606
                                             94 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    6336
                                             94 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     200
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3778
                                             85 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       31    24      7    2312
                                             54 BANK0     31    24      7
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2012
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     188
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    7545
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    7437
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     891
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1010
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     310
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1236
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     180
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    8897
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        14     9      5    1214
                                             18 BANK0     14     9      5
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     1      3     740
                                             14 BANK0      4     1      3
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     446
                                              0 BANK0     14     8      6
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    7095
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     324
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     324
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     342
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    2068
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1600
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1280
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     324
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     342
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0     126
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2     126
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      42
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     777
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      84
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      84
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     420
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     147
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     372
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     330
                                              4 BANK0      1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3     138
                                              0 BANK0      4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      42
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      42
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     252
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           11    11      0    2084
                                             22 COMRAM    11    11      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       10     8      2     154
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 13     7      6    1180
                                              9 COMRAM    13     7      6
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        9     4      5     489
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     3D      BD       9       73.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E4       7       89.1%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     84      8D       5       88.1%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     21      3F       1       66.3%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     36D       3        0.0%
DATA                 0      0     569      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Oct 05 22:24:42 2015

        ??_receiveVSCPModeMultiCanalMsg 0060                   __end_of_doModeVerbose 15F4  
                          printBinary@i 0064                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                        ??_fifo_getFree 0003                   __end_of_sendVSCPFrame 4590  
            doModeVerbose@filter_nodeid 0290                                      PL2 15F4  
                                    PL4 1610                                      PL6 161E  
                                    PL8 1638                                      _id 01DE  
                                    bsr 000FE0                     ___wmul@multiplicand 0062  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 5910  
                                   PL10 1D8C                                     PL20 38BE  
                                   PL12 39FA                                     PL30 3AE8  
                                   PL22 34F6                                     PL14 1DAA  
                                   PL40 16D2                                     PL32 16A6  
                                   PL24 2D12                                     PL16 3C34  
                                   PL50 16EC                                     PL42 497C  
                                   PL34 4260                                     PL26 1682  
                                   PL18 1DBA                                     PL60 463C  
                                   PL52 1DFA                                     PL44 48DC  
                                   PL36 1DE0                                     PL28 1692  
                                   PL70 3B1E                                     PL62 1E26  
                                   PL54 1704                                     PL46 3AFC  
                                   PL38 16B8                                     PL80 31F6  
                                   PL72 38E8                                     PL64 38D4  
                                   PL56 4D04                                     PL48 3B0C  
                                   PL90 3506                                     PL82 44C6  
                                   PL74 4794                                     PL66 3FEE  
                                   PL58 1E10                                     PL92 2972  
                                   PL84 419C                                     PL76 1E34  
                                   PL68 3D30                                     PL94 55C8  
                                   PL86 1E46                                     PL78 222A  
                                   PL96 3B32                                     PL88 5790  
                                   PL98 1E50                 sendEscapedUartData@pcrc 006C  
                                   l441 332A                                     l442 3334  
                                   l451 3362                                     l444 3340  
                                   l541 15F2                                     l437 32D4  
                                   l550 0BE4                                     l438 3312  
                                   l546 0A74                                     l802 444E  
                                   l555 0AFC                                     l811 44B2  
                                   l820 484E                                     l901 4192  
                                   l805 446E                                     l582 0C3A  
                                   l574 0BC4                                     l566 0B9A  
                                   l814 44BC                                     l670 2BA8  
                                   l726 2228                                     l823 4858  
                                   l832 489E                                     l808 447E  
                                   l736 1F10                                     l569 0BA4  
                                   l841 48D2                                     l761 2120  
                                   l930 26CE                                     l850 48F8  
                                   l826 4862                                     l835 48AE  
                                   l675 2D10                                     l781 520A  
                                   l853 4902                                     l829 487E  
                                   l790 5252                                     l942 36BA  
                                   l862 494E                                     l838 48C8  
                                   l951 36EA                                     l847 48EE  
                                   l960 37B6                                     l856 491E  
                                   l880 40F2                                     l688 2C26  
                                   l937 275E                                     l945 36C4  
                                   l865 4968                                     l793 441E  
                                   l938 2772                                     l778 5200  
                                   l786 522E                                     l970 33CC  
                                   l874 40DE                                     l963 37C0  
                                   l859 493E                                     l883 410E  
                                   l948 36CE                                     l868 4972  
                                   l892 415A                                     l796 4428  
                                   l973 33D6                                     l957 37AC  
                                   l877 40E8                                     l886 412E  
                                   l967 33C2                                     l895 416C  
                                   l799 4432                                     l992 34EA  
                                   l976 33F2                                     l889 413E  
                                   l898 4188                                     l995 34F4  
                                   l989 34E0                            __CFG_CPB$OFF 000000  
                        getVSCPFrame@id 007C                           fifo_write@buf 0003  
                 ?_vscp_restoreDefaults 0001                    __size_of_WriteTimer0 0012  
                                   _dlc 003E                                     _pos 00E7  
                  __size_of_Write_b_eep 0034          __size_of_writeRegisterExtended 00D6  
                                   wreg 000FE8           __end_of_writeRegisterExtended 40D8  
                          __CFG_LVP$OFF 000000                            __CFG_WDT$OFF 000000  
                                  l1111 404A                                    l1023 464C  
                                  l1032 467C                                    l1130 53D6  
                                  l1114 40D6                                    l1026 4656  
                                  l1050 30E6                                    l1035 46EA  
                                  l1029 4660                                    l1053 311E  
                                  l1045 30B4                                    l1134 53E2  
                                  l1038 46F4                                    l1072 31F4  
                                  l1233 4CAA                                    l1066 31CC  
                                  l1243 4F74                                    l1059 316A  
                                  l1236 4CC8                                    l1084 47D8  
                                  l1260 2A50                                    l1076 3F1A  
                                  l1181 245E                                    l1093 438A  
                                  l1261 2A62                                    l1069 31EA  
                                  l1270 2B04                                    l1262 2A74  
                                  l1254 29F6                                    l1087 4848  
                                  l1263 2A86                                    l1271 2B5C  
                                  l2048 3C2A                                    l1096 4414  
                                  l1264 2A98                                    l1256 2A08  
                                  l2049 3C32                                    l1513 3AE6  
                                  l1265 2AAA                                    l1257 2A1A  
                                  l1266 2ABC                                    l1258 2A2C  
                                  l1451 35E4                                    l1283 56C8  
                                  l1195 3D58                                    l1267 2ACE  
                                  l1259 2A3E                                    l2324 4A08  
                                  l1268 2AE0                                    l1189 24F0  
                                  l1453 3602                                    l1269 2AF2  
                                  l1542 425E                                    l2510 4E94  
                                  l1279 4D9C                                    l2423 3FCA  
                                  l1712 1B4A                                    l1288 4AC6  
                                  l2513 4E90                                    l1714 1B70  
                                  l1706 1B08                                    l1642 1874  
                                  l1626 1738                                    l2355 4EFA  
                                  l1715 1B74                                    l1643 1826  
                                  l1539 423E                                    l1459 3680  
                                  l2365 51E2                                    l1733 1C1A  
                                  l1717 1B90                                    l2541 4C86  
                                  l1806 5862                                    l2438 543A  
                                  l1662 18B8                                    l1807 5864  
                                  l1663 18BC                                    l2543 4C7A  
                                  l1567 5006                                    l1575 5066  
                                  l2448 5686                                    l2544 4C7E  
                                  l2529 50CC                                    l1569 500E  
                                  l1594 4AFA                                    l1843 5288  
                                  l1659 1884                                    l2491 5190  
                                  l1595 4B60                                    l1844 528A  
                                  l1765 5908                                    l1845 5294  
                                  l1589 5612                                    l1790 575C  
                                  l1846 5296                                    l1678 19A6  
                                  l1839 5274                                    l1848 52AE  
                                  l1856 5308                                    l2568 54C6  
                                  l2577 5650                                    l2489 5130  
                                  l2587 550A                                    STR_1 7930  
                                  STR_2 72D2                                    STR_3 799E  
                                  STR_4 73EB                                    STR_5 7B2B  
                                  STR_6 7FD0                                    STR_7 7AED  
                                  STR_8 7FB7                                    STR_9 7F80  
                                  _PEIE 007F96                          sendCANFrame@id 008F  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 0061  
                                  _bDLE 002C                            __CFG_PWRT$ON 000000  
            __end_of_sendVSCPDriverNack 497C                                    _bHex 00E4  
          doModeVerbose@filter_priority 028E                                    _crc8 56CA  
                                  _data 01CE                                    _caps 01E2  
                                  _atoi 3B3C                                    _main 3204  
                                  _init 5444                                    _mode 00E6  
                                  _itoa 5702                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 498A                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 02FA                            _sprintf$2093 0086  
                          _sprintf$2086 0082                            _sprintf$2087 0084  
          receiveSendMultiEventCANAL@id 007C               ECANReceiveMessage@dataLen 000E  
    __end_of_receiveSendMultiEventCANAL 34F6              _receiveSendMultiEventCANAL 3390  
                    doModeVerbose@count 02AB                   getVSCPFrame@pPriority 0074  
                    doModeVerbose@value 02B1                    __end_of_getVSCPFrame 4D9E  
                      __RegsToCANID@val 0003                        __RegsToCANID@ptr 0001  
                  __size_of_getCANFrame 009E                ?_receiveVSCPModeCanalMsg 0001  
                       ?_doModeVscpNode 0001                                   l10210 41B8  
                                 l10222 4248                                   l10224 424C  
                                 _B0CON 000E20                                   l13002 35E8  
                                 l13014 3632                                   l13022 3650  
                                 l13008 3604                                   l13032 3676  
                                 _B1CON 000E30                                   l13034 3678  
                                 l14002 0FD8                                   l13028 3672  
                                 l14100 1260                                   l14012 1016  
                                 l12350 3A74                                   l14110 12C4  
                                 l14022 1050                                   l14112 12D2  
                                 l14032 108C                                   l14008 1006  
                                 l14040 10F0                                   _B2CON 000E40  
                                 l12338 2B16                                   l14018 1040  
                                 l14202 15F0                                   l14210 2B74  
                                 l13410 3326                                   l13076 5842  
                                 l15004 231C                                   l14124 136A  
                                 l14108 12B6                                   l14060 1170  
                                 l14028 107C                                   l14300 2C58  
                                 l14134 13B8                                   l14070 11AC  
                                 l13430 335A                                   l15200 178A  
                                 l15032 23E8                                   l14152 1456  
                                 l14144 140C                                   l14080 11EA  
                                 l14056 1160                                   l14232 2BC6  
                                 l14208 2B70                                   l14400 1F1A  
                                 l13440 3378                                   l13408 3314  
                                 _B3CON 000E50                                   l15018 2382  
                                 l15114 3DF6                                   l14090 1224  
                                 l14066 119C                                   l14330 2CA8  
                                 l14242 2BDC                                   l13418 333C  
                                 l15044 243A                                   l14148 1430  
                                 l14076 11DA                                   l14324 2C92  
                                 l14252 2BF8                                   l14228 2BC0  
                                 l16020 3132                                   l14500 2176  
                                 l14412 1F46                                   l13444 3384  
                                 l13436 336E                                   l15310 19B0  
                                 l15126 57D8                                   l14190 15A2  
                                 l14174 14FE                                   l14166 14BA  
                                 l14182 1542                                   l14086 1214  
                                 l13710 06C4                                   l13630 0460  
                                 l13622 041E                                   l13614 03DC  
                                 l13606 039C                                   l13470 501E  
                                 l14342 2CD8                                   l14318 2C7E  
                                 l14422 1F6A                                   l13438 3372  
                                 l15320 19E4                                   l15240 1888  
                                 l15232 1860                                   l15216 17F6  
                                 l15208 17D0                                   l15072 24DE  
                                 l15056 247A                                   l15048 244C  
                                 l16104 56C6                                   l15128 57E0  
                                 l14192 15B0                                   l14096 1250  
                                 l13704 0698                                   l14336 2CC0  
                                 l14352 2D02                                   l14280 2C32  
                                 l16032 3188                                   l14512 2200  
                                 l13376 326A                                   _B4CON 000E60  
                                 l13570 4F54                                   l13562 4F2E  
                                 l15322 19E8                                   l15314 19CE  
                                 l15234 187A                                   l11786 515E  
                                 l15170 4412                                   l14186 157E  
                                 l13802 0A42                                   l13722 071C  
                                 l14282 2C36                                   l14354 2D08  
                                 l14514 220C                                   l14506 218E  
                                 l15500 1D4E                                   l15412 1BA0  
                                 l15252 18C2                                   l15236 187E  
                                 l15228 182C                                   l16060 5566  
                                 l15068 24CC                                   l14196 15C8  
                                 l13900 0CB6                                   l13820 0AC8  
                                 l13812 0A7C                                   l13740 07D8  
                                 l13732 077A                                   l13716 06F0  
                                 l13652 051E                                   l13580 0306  
                                 l13468 5018                                   l14348 2CF0  
                                 l14292 2C4C                                   l14284 2C3C  
                                 l14268 2C00                                   l16204 3F70  
                                 l16028 3174                                   l14508 21EC  
                                 l14542 5276                                   l14534 5268  
                                 l13574 4F68                                   l13566 4F40  
                                 l16302 4992                                   l15422 1BC0  
                                 l15406 1B8A                                   l15350 1A58  
                                 l15334 1A1C                                   l15246 18A0  
                                 l15238 1882                                   l15182 1742  
                                 l15510 1D78                                   l13902 0CC8  
                                 l13750 083E                                   l13734 0784  
                                 l13726 0744                                   l13742 07EA  
                                 l13670 059E                                   l13662 0568  
                                 l13646 04E0                                   l13638 04A0  
                                 l14198 15D6                                   l14278 2C2C  
                                 l14358 2D0E                                   l14446 2096  
                                 l14438 200C                                   l14390 1EE6  
                                 l14382 1EBE                                   l14518 2226  
                                 l14712 4626                                   l16312 49CA  
                                 l15504 1D70                                   l15440 1BFA  
                                 l15336 1A20                                   l15512 1D7E  
                                 l15272 1908                                   l15256 18C8  
                                 l15264 18EC                                   l15184 1746  
                                 l15192 1754                                   l15176 1720  
                                 l16160 4A5C                                   l15600 42F4  
                                 l15096 3D8E                                   l15168 43F2  
                                 l13832 0B16                                   l16080 4B4C  
                                 l14480 2136                                   l14456 20C0  
                                 l14384 1EC2                                   _B5CON 000E70  
                                 l15522 58C4                                   l16402 567C  
                                 l16226 571E                                   l15370 1AB8  
                                 l15282 1930                                   l15274 1916  
                                 l15258 18D4                                   l15186 174A  
                                 l16154 4A56                                   l16138 4D3E  
                                 l16058 5560                                   l15602 430A  
                                 l15530 53BC                                   l13930 0DD0  
                                 l13914 0D2C                                   l13762 08BA  
                                 l13682 05E6                                   l13674 05B6  
                                 l13666 0586                                   l13594 0342  
                                 l16074 4B08                                   l14490 2158  
                                 l14378 1E9C                                   l16340 4EBE  
                                 l15460 1C3C                                   l15428 1BD4  
                                 l15436 1BF0                                   l15380 1AE8  
                                 l15348 1A54                                   l15364 1A8C  
                                 l15268 1902                                   l15188 174E  
                                 l16172 4A90                                   l16156 4A58  
                                 l14820 2752                                   l16412 50A4  
                                 l14900 5816                                   l12980 357E  
                                 l13924 0DAA                                   l13844 0B66  
                                 l13772 0936                                   l13756 087C  
                                 l13748 082C                                   l14476 2126  
                                 l14468 2100                                   l14396 1F0A  
                                 l15462 1C42                                   l15446 1C02  
                                 l15374 1AD6                                   l15366 1A9E  
                                 l15278 1924                                   l15286 1936  
                                 l14806 26DA                                   l16422 5620  
                                 l12974 356C                                   l16270 52D6  
                                 l15606 4326                                   l15630 3CD2  
                                 l15622 3C6E                                   l13942 0E42  
                                 l13934 0DFC                                   l13926 0DBE  
                                 l13918 0D3E                                   l13790 09B0  
                                 l13766 08F8                                   l13686 05FE  
                                 l13678 05CE                                   l16094 5542  
                                 l16336 4EAE                                   l16360 51B2  
                                 l15480 1CCE                                   l15472 1C64  
                                 l15456 1C2A                                   l15392 1B26  
                                 l15296 1970                                   l15288 1960  
                                 l14816 2746                                   l14744 254A  
                                 l16416 50B0                                   l16408 506A  
                                 l14832 4E20                                   l14920 2EFA  
                                 l12992 35A8                                   l16256 4826  
                                 l16264 52BA                                   l15632 3CDA  
                                 l13944 0E52                                   l13872 0C06  
                                 l13688 0610                                   l16088 5526  
                                 l16280 55EC                                   l16338 4EBA  
                                 l15490 1D14                                   l15386 1B0C  
                                 l14818 274A                                   l14826 2770  
                                 l16418 50B8                                   l16426 563C  
                                 l16442 54D6                                   l16450 5492  
                                 l14850 4C04                                   l16258 4846  
                                 l16266 52BE                                   l15634 3CF0  
                                 l15538 53EC                                   l13938 0E0C  
                                 l13858 0BBE                                   l13786 099E  
                                 l13698 0666                                   l15810 57C4  
                                 l16194 3F2C                                   l14844 5894  
                                 l16348 4EEC                                   l16364 51D4  
                                 l16356 51A2                                   l14780 2636  
                                 l14756 2598                                   l16436 58B2  
                                 l16428 5640                                   l14836 4E58  
                                 l16444 54DE                                   l16452 549A  
                                 l14860 4C3C                                   l16268 52CC  
                                 l15660 4BBC                                   l15580 40D4  
                                 l13956 0EB2                                   l13972 0F1C  
                                 l13884 0C54                                   l13892 0C94  
                                 l13796 0A1C                                   l15724 346C  
                                 l16374 540A                                   l16358 51AE  
                                 l15494 1D2E                                   l15486 1CF0  
                                 l15478 1C78                                   l15398 1B4E  
                                 l14838 4E7E                                   l14870 3B3E  
                                 l14934 2F60                                   l15638 3D0C  
                                 l15662 4BC4                                   l13894 0C98  
                                 l13798 0A30                                   l15742 34D0  
                                 l15734 3490                                   l15718 344E  
                                 l15806 57A6                                   ?_crc8 0067  
                                 l16376 5412                                   l15496 1D40  
                                 l14792 2684                                   l14768 25E8  
                                 l14880 3B98                                   l14872 3B44  
                                 l15656 4B96                                   l13992 0F9C  
                                 l16296 5610                                   l16288 55FE  
                                 l14698 460E                                   l16386 5430  
                                 l16378 5416                                   l16394 565E  
                                 l14882 3BB0                                   l14962 302C  
                                 l15594 42A8                                   l15666 4BD2  
                                 l15578 40B4                                   l15738 34B0  
                                 l16396 5666                                   l14884 3BB8  
                                 l14948 2FC6                                   l13988 0F8C  
                                 l16398 566A                                   l14990 22B6  
                                 l13998 0FC8                                   l15790 3784  
                                 l14888 3BF2                                   l14976 2250  
                                 l14896 5806                                   l15696 341E  
                                 l15794 379C                                   l15884 3ED8  
                  __size_of_doModeSLCAN 03D0                                   ?_atoi 0066  
                                 ?_main 00DD                                   ?_init 0001  
                                 ?_itoa 0070                           i1_WriteTimer0 58EE  
                                 _EEADR 000FA9                                   STR_10 7F5E  
                                 STR_11 7F80                                   STR_12 7F92  
                                 STR_20 7F49                                   STR_13 7F80  
                                 STR_21 7D83                                   STR_30 7FF5  
                                 STR_14 7ECD                                   STR_22 7D97  
                                 STR_15 7F80                                   STR_31 7FF5  
                                 STR_23 7DD3                                   STR_32 7FF5  
                                 STR_16 7F50                                   STR_40 7DF8  
                                 STR_24 7D06                                   STR_17 7F80  
                                 STR_33 7FF5                                   STR_41 7FCB  
                                 STR_25 7BCF                                   STR_42 7F80  
                                 STR_50 7F2B                                   STR_34 7FF5  
                                 STR_18 7F0E                                   STR_26 7D6F  
                                 STR_19 7F80                                   STR_35 7FF5  
                                 STR_43 7FD9                                   STR_27 7DE6  
                                 STR_51 7C31                                   STR_44 7F80  
                                 STR_36 7F80                                   STR_52 7F2B  
                                 STR_60 7EEA                                   STR_28 7C49  
                                 STR_61 7F65                                   STR_29 7FEB  
                                 STR_45 7FC6                                   STR_53 7AAC  
                                 STR_37 7A49                                   STR_70 7F80  
                                 STR_46 7F80                                   STR_54 7F2B  
                                 STR_62 7FEE                                   STR_38 7FE8  
                                 STR_63 74C0                                   STR_39 7F80  
                                 STR_47 7FA3                                   STR_55 7E5E  
                                 STR_71 7458                                   STR_48 7F80  
                                 STR_72 7FAD                                   STR_56 7F65  
                                 STR_80 7A8B                                   STR_64 7A06  
                                 STR_73 7F2B                                   STR_65 7F65  
                                 STR_57 7FEE                                   STR_81 7FBC  
                                 STR_49 7FA8                                   STR_74 7C31  
                                 STR_58 7F65                                   STR_66 7FEE  
                                 STR_82 7DAB                                   STR_90 77FB  
                                 STR_75 7F2B                                   STR_91 7FF5  
                                 STR_83 7F65                                   STR_67 7F65  
                                 STR_59 7FEE                                   STR_76 7AAC  
                                 STR_84 7FEE                                   STR_68 7FEE  
                                 STR_92 7730                                   STR_85 74C0  
                                 STR_69 74C0                                   STR_77 7F2B  
                                 STR_93 7FF5                                   STR_86 7F80  
                                 STR_78 7C61                                   STR_94 7897  
                                 STR_95 7FF5                                   STR_87 7F57  
                                 STR_79 79C1                                   STR_88 7FF5  
                                 STR_96 78E5                                   STR_97 7FF5  
                                 STR_89 7218                                   STR_98 775A  
                                 STR_99 7F80            __end_of_printFirmwareVersion 4D04  
                                 _BSEL0 000DF8                         __end_of___lldiv 4F0C  
                                 ?_utoa 0067                                   u20010 3B58  
                                 u20100 3C06                                   u20030 3B70  
                       __end_of_calcCRC 57CE                                   _T0CON 000FD5  
                                 u20017 3B52                                   u20050 3B8E  
                                 u20107 3C00                                   u20037 3B6A  
                                 u20070 3BAC                                   u21104 53CC  
                       __end_of___llmod 51F4                                   u20057 3B88  
                                 u20145 4510                                   u21105 53C8  
                                 u20090 3BDC                                   u20077 3BA6  
                                 u20097 3BD6                                   u12535 422A  
                                 _LATC1 007C59                                   u22240 4D90  
                                 u22090 5582                                   u22245 4D86  
                                 u22430 52FE                                   u22097 557C  
                                 u21715 3E6E                                   u22437 52F4  
                                 u18105 03C2                                   u18115 0402  
                                 u18125 0444                                   u14870 514E  
                                 u18135 0486                                   u18145 04C6  
                                 u22777 3278                                   u14890 5186  
                                 u15915 3A4E                                   u18155 0506  
                                 u14877 5148                                   u15925 3A5E  
                                 u18405 091E                                   u18165 0544  
                                 u15935 3A7C                                   u18415 095C  
                                 u18095 0376                                   u14897 5180  
                                 u18265 0636                                   u19090 2BE2  
                       __end_of___lwdiv 5444                                   u18355 0810  
                                 u15885 299A                                   u15886 29A0  
                                 u15895 29CE                                   u15887 29AE  
                                 u18375 0864                                   _ERRIE 007D1D  
                                 u15896 29D4                                   u15897 29E2  
                                 u18705 0F42                                   u18625 0CEE  
                                 u18385 08A2                                   u18395 08E0  
                                 u19460 1FD8                                   u19470 1FE2  
                                 u17960 532A                                   u19480 1FEC  
                                 u19465 1FD6                                   u17970 5358  
                                 u19475 1FE0                                   u18685 0E78  
                                 u19485 1FEA                                   u17967 5324  
                                 u18775 1640                            _vscpPriority 00EA  
                                 i1l401 018C                                   u19825 5768  
                                 u17977 5352                                   u18785 1116  
                                 i1l410 018A                                   u19826 576A  
                                 u18875 12F8                                   i1l404 018A  
                                 i1l413 017A                                   u18885 1340  
                                 u18895 1390                                   i1l416 0196  
                       __end_of___lwmod 5690                                   i1l419 01EA  
                                 i1l429 02DC                                   i1l399 0092  
                       sendCANFrame@dlc 0093                                   _MSEL0 000DF0  
                                 _MSEL1 000DF1                                   _MSEL2 000DF2  
                                 _RCREG 000FAE                                   _IRXIF 007D27  
                                 _RCSTA 000FAB                        printBinary@value 0063  
                                 _TMR0H 000FD7                                   _TMR0L 000FD6  
                                 _SPBRG 000FAF                writeRegisterExtended@reg 00B7  
                                 _TXREG 000FAD                                   _TXSTA 000FAC  
                        __CFG_EBTR0$OFF 000000                          __CFG_EBTR1$OFF 000000  
                        __CFG_EBTR2$OFF 000000                          __CFG_EBTR3$OFF 000000  
                                 _bOpen 00E5                 readRegisterExtended@reg 00B7  
                         __CFG_WRTD$OFF 000000                          Read_b_eep@badd 0060  
                        __CFG_EBTRB$OFF 000000                        _hexStringToBytes 4AC8  
                                 crc8@m 0069                                   _flags 003F  
                       __end_of_dpowers 7008                  Write_b_eep@GIE_BIT_VAL 0063  
                       __end_of_isdigit 584A                                   _timer 0118  
                                 atoi@a 006B                                   atoi@s 0066  
                                 main@c 00E3                                   _ultoa 3F1C  
                            Interrupt@c 0020              ??_printNodeFirmwareVersion 00BE  
                      _printErrors$1470 0098                        _printErrors$1464 0096  
                                 tablat 000FF5                        _printErrors$1482 009C  
                      _printErrors$1458 0094                        _printErrors$1491 009E  
                      _printErrors$1476 009A                 ??_receiveSendEventCANAL 0072  
           __end_of_sendEscapedUartData 5254                                   plusw2 000FDB  
                                 utoa@c 006F                                   utoa@v 006D  
                                 status 000FD8                         __end_of_sprintf 1D8C  
               ??_receiveSendEventSLCAN 0083                         __end_of_strichr 5652  
                       __end_of_strcspn 54D0                         __end_of_toupper 58B6  
                       __end_of_stristr 4E96       __size_of_receivePrintEventVerbose 0282  
                   doModeVerbose@i_1173 02B0               ?_receivePrintEventVerbose 0001  
                   doModeVerbose@p_1227 02B4                     doModeVerbose@p_1252 02B9  
                   doModeVerbose@p_1272 02BB                     doModeVerbose@p_1179 02B2  
                        WriteUSART@data 0060                    _ECANSetOperationMode 5886  
                          _canInputFifo 01C6                         __initialization 50CE  
                doModeVerbose@page_1224 02A1           receiveSendMultiEventCANAL@dlc 0080  
                          __end_of_crc8 5702           receiveSendMultiEventCANAL@crc 0081  
                          __end_of_atoi 3C34           receiveSendMultiEventCANAL@pos 0082  
                          __end_of_main 3390                            __end_of_init 548C  
                          __end_of_itoa 573A                            __end_of_utoa 4A2A  
                   doModeVerbose@ifmode 02B6                              _Read_b_eep 58DC  
                   doModeVerbose@maskno 02A8                        __end_of_Busy_eep 590E  
                   doModeVerbose@nodeid 028C                           doModeSLCAN@id 009D  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 00A3  
                     ??_ECANSendMessage 0072                          ?i1_WriteTimer0 0001  
            writeRegisterExtended@value 00BA                                  ??_crc8 006A  
                 getVSCPFrame@pvscptype 0072                                  ??_atoi 0068  
                ??_vscp_restoreDefaults 0065                                  ??_main 00E2  
                     readRegister@value 00B8                                  ??_init 0064  
                                ??_itoa 0076                                  ??_utoa 006D  
                doModeVerbose@mask_type 0292                           __activetblptr 000002  
                       _stateVscpDriver 0033                       __RegsToCANID@type 0005  
                  _can_transmitOverruns 0104              ECANReceiveMessage@msgFlags 000F  
                         ?_readRegister 00B5               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1231 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00B8  
            ECANReceiveMessage@savedPtr 0010                                  _CANCON 000F6F  
                      ___llmod@dividend 006D                                  STR_100 7FB2  
                                STR_101 7FF5                                  STR_110 7FF5  
                                STR_102 752A                                  STR_103 790B  
                                STR_111 7870                                  STR_112 7F80  
                                STR_104 7FF5                                  STR_200 7F65  
                                STR_120 7EBB                                  STR_201 7FEE  
                                STR_113 7F9E                                  STR_121 7F86  
                                STR_105 77AB                                  STR_202 74C0  
                                STR_106 7FF5                                  STR_114 7FDD  
                                STR_122 7EFE                                  STR_130 7A6A  
                                STR_210 767E                                  STR_131 7F80  
                                STR_123 7B48                                  STR_107 7955  
                                STR_115 7704                                  STR_211 74F7  
                                STR_203 737D                                  STR_108 7FF5  
                                STR_140 7F65                                  STR_124 7FC1  
                                STR_116 7F06                                  STR_132 7B7F  
                                STR_220 7822                                  STR_212 755C  
                                STR_204 7422                                  STR_141 7FEE  
                                STR_133 7D5B                                  STR_213 7B0C  
                                STR_125 7ACD                                  STR_109 797A  
                                STR_117 77D3                                  STR_221 7783  
                                STR_205 74C3                                  STR_150 7FEE  
                                STR_126 7F98                                  STR_142 7EF6  
                                STR_134 7ED6                                  STR_118 7E87  
                                STR_230 79E4                                  STR_206 7849  
                                STR_222 764F                                  STR_214 758E  
                                STR_207 716B                                  STR_119 7F80  
                                STR_143 7F6C                                  STR_151 7F3B  
                                STR_135 7EDE                                  STR_127 7BB5  
                                STR_215 76AC                                  STR_231 7620  
                                STR_223 710A                                  STR_240 74C0  
                                STR_152 7F65                                  STR_144 7FEE  
                                STR_136 7F7A                                  STR_128 7EEE  
                                STR_160 7E0A                                  STR_216 7C01  
                                STR_208 7B64                                  STR_232 75F1  
                                STR_224 71D5                                  STR_241 714F  
                                STR_153 7FEE                                  STR_137 7FF3  
                                STR_129 7F8C                                  STR_161 7F73  
                                STR_145 7F34                                  STR_209 76D8  
                                STR_217 7345                                  STR_233 7192  
                                STR_225 7076                                  STR_146 7F65  
                                STR_170 7FE1                                  STR_138 7FF1  
                                STR_162 7FE1                                  STR_154 7F2D  
                                STR_242 7E4F                                  STR_250 7DBF  
                                STR_218 7CC1                                  STR_226 7C19  
                                STR_234 75C0                                  STR_171 74C0  
                                STR_163 74C0                                  STR_155 7F65  
                                STR_147 7FEE                                  STR_251 7FFD  
                                STR_139 7F42                                  STR_243 7EE6  
                                STR_219 7A28                                  STR_235 73B4  
                                STR_227 7028                                  STR_156 7FEE  
                                STR_244 7FF9                                  STR_252 7FF7  
                                STR_148 7EC4                                  STR_260 7EA7  
                                STR_164 7E3E                                  STR_228 7D47  
                                STR_172 7D32                                  STR_180 7CA9  
                                STR_236 725A                                  STR_253 74C0  
                                STR_157 7FF5                                  STR_149 7F65  
                                STR_173 7F73                                  STR_165 7F73  
                                STR_181 7F16                                  STR_245 7FE5  
                                STR_261 7CEF                                  STR_237 78BE  
                                STR_229 70C3                                  _EEDATA 000FA8  
                                STR_262 74C0                                  STR_190 7FE1  
                                STR_182 7FE1                                  STR_174 7FE1  
                                STR_166 7FE1                                  STR_246 7FFB  
                                STR_254 7E9D                                  STR_158 7E92  
                                STR_238 714F                                  STR_255 74C0  
                                STR_247 74C0                                  STR_191 74C0  
                                STR_183 74C0                                  STR_175 74C0  
                                STR_167 74C0                                  STR_159 7FD5  
                                STR_263 7E1C                                  STR_239 7B9A  
                                STR_256 7F26                                  STR_248 7E6D  
                                STR_264 7E2D                                  STR_168 7D1C  
                                STR_176 7CD8                                  STR_184 7C91  
                                STR_192 7BE8                                  STR_249 74C0  
                                STR_193 7F65                                  STR_169 7F73  
                                STR_185 7F16                                  STR_257 7F1E  
                                STR_177 7F16                                  STR_194 7FEE  
                                STR_186 7FE1                                  STR_178 7FE1  
                                STR_258 7E7B                                  STR_195 74C0  
                                STR_187 74C0                                  STR_179 74C0  
                                STR_259 7EB1                                  STR_188 7C91  
                                STR_196 7298                                  STR_189 7F16  
                                STR_197 748E                                  STR_198 730C  
                                STR_199 7C79                                  _EECON2 000FA7  
          __end_of_readRegisterExtended 4416                                  _CIOCON 000F73  
                                ?_ultoa 0076            ??_sendVSCPDriverCommandReply 0070  
                  __end_of_fifo_getFree 4794                           ?_init_app_ram 0001  
                                i1l1523 4FEE                                  _MDSEL0 007BBE  
                                _MDSEL1 007BBF                                  i1l1550 3940  
                                i1l1518 38BC                                  i1l1551 39F8  
                                i1l1471 2970                                  i1l1464 27A8  
                                i1l1481 282C                                  i1l1474 2876  
                                i1l1483 2840                                  i1l1475 27F6  
                                i1l1485 2850                                  i1l1477 2804  
                                i1l1495 28DA                                  i1l1487 2860  
                                i1l1479 2818                                  i1l1496 28F4  
                                i1l1869 5876                                  i1l6412 394A  
                                i1l6404 390E                                  i1l6422 39D4  
                                i1l6424 39DE                              _OpenTimer0 584A  
                                i1l6436 474C                                  i1l9500 4FD0  
                                i1l9516 383E                                  i1l9490 4FAE  
                                i1l9482 4F88                                  i1l9492 4FB8  
                                i1l9484 4F90                                  i1l9494 4FBE  
                                i1l9486 4F9A                                  i1l9496 4FC4  
                                i1l9488 4FA4                                  i1l9816 288A  
                                i1l9826 28AA                                  i1l9852 2926  
                                i1l9860 2944                                  i1l9844 28F6  
                                i1l9764 27D6                                  i1l9748 2796  
                                i1l9772 27E4                                  i1l9758 27C0  
                                i1l9766 27E0                                  i1l9866 295A  
                       _init_app_eeprom 4590                      __size_of_ReadUSART 001E  
                                _RXB0IF 007D20                                  _RXB1IF 007D21  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 000C  
                ECANReceiveMessage@mode 0013                  ECANReceiveMessage@temp 0014  
                                _RXBnIE 007D19                                  _RXBnIF 007D21  
                     getVSCPFrame@pData 0076              ??_sendVSCPDriverErrorFrame 006F  
                     getVSCPFrame@pSize 0075                      _doModeVerbose$1203 0296  
                    _doModeVerbose$1214 029A                      _doModeVerbose$1208 0298  
                    _doModeVerbose$1218 029C                      _doModeVerbose$1243 029E  
                    _doModeVerbose$1191 0294                   ?_ECANSetOperationMode 0001  
                    __CANIDToRegs@Value 0069                      __size_of_Interrupt 02E2  
              readRegisterExtended@page 00B5                      __size_of_OpenUSART 005C  
                      fifo_write@nbytes 0005                          getCANFrame@pid 0071  
                                ___wmul 576E                              _bInitiated 002D  
                        __CFG_STVREN$ON 000000                               ??___lldiv 0068  
                             ??_calcCRC 006F                                  _cmdbuf 0126  
                             ??___llmod 0075                        OpenTimer0@config 0060  
                receiveSendEventCANAL@i 007A                               ??___lwdiv 0064  
                             ??___lwmod 0064           _receivePrintEventVerbose$1340 0099  
         _receivePrintEventVerbose$1350 009D           _receivePrintEventVerbose$1360 00A1  
         _receivePrintEventVerbose$1345 009B           _receivePrintEventVerbose$1355 009F  
         _receivePrintEventVerbose$1365 00A3                                  _memcpy 5514  
                                _memset 57FC                                  clear_0 50D6  
                                clear_1 50EA                                  clear_2 50FC  
                                clear_3 5108                                  clear_4 5114  
                                clear_5 5120                           ?_sendCANFrame 008F  
                                _strcat 52B0                                  _strchr 5130  
                                _strcpy 57CE                                  _strlen 5556  
                                _wrkbuf 0176                                  _strtok 4BF6  
                                _strspn 54D0     __size_of_sendVSCPDriverCommandReply 00C4  
                             ??_isdigit 0060                  receiveSendEventSLCAN@i 008B  
                      __end_of_printMDF 4BF6                            __mediumconst 6FB0  
                        ??_readRegister 00B9                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 0082                                  ultoa@v 007E  
                          ?_printErrors 0001                               ??_sprintf 007E  
                             ??_strichr 0065                               ??_strcspn 006A  
                             ??_toupper 0060                          ??_init_app_ram 0062  
                             ??_stristr 0071              ??_sendVSCPModeCapabilities 006F  
            doModeVerbose@mask_priority 0291                        __end_of_strnicmp 50CE  
                            __accesstop 0060                 __end_of__initialization 5126  
                  _printFirmwareVersion 4C88                   __size_of_getVSCPFrame 0084  
             receiveSendEventCANAL@data 0072                    doModeVerbose@id_1284 02A3  
                            _WriteUSART 58B6                          __pcstackCOMRAM 0001  
              __size_of_printStatistics 0196                    _printStatistics$1433 0094  
                  _printStatistics$1451 009A                    _printStatistics$1445 0098  
                  _printStatistics$1439 0096                   _uart_transmitOverruns 0120  
                           ?_Read_b_eep 0060                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 3FEE                              __end_ofPL2 1610  
                            __end_ofPL4 161E                              __end_ofPL6 1638  
                            __end_ofPL8 1682                          ??_sendCANFrame 0096  
                     __end_of_ReadUSART 5886                           ?__RegsToCANID 0001  
           __size_of_ECANReceiveMessage 01FE                      sendVSCPFrame@pData 009C  
                       readRegister@reg 00B5                    sendVSCPDriverAck@crc 006F  
                    __size_of_findNodes 00EE                          doModeSLCAN@dlc 00A1  
                    __size_of_fifo_init 0032                      __size_of_fifo_read 00B6  
                getVSCPFrame@pvscpclass 007B                         _fifo_canrxcount 002F  
               __end_of_init_app_eeprom 463C                       __end_of_Interrupt 02FA  
                         ReadUSART@data 0001                      readRegister@nodeid 00BD  
                        _status_led_cnt 0026                      __RegsToCANID@Value 0008  
                            _crc8_table 0300                       __end_of_OpenUSART 52B0  
               doModeVerbose@mask_class 028A               printNodeFirmwareVersion@i 00C3  
                       setFilter@filter 006A                            sprintf@width 008B  
      __end_of_printNodeFirmwareVersion 434A                              _doModeVscp 2B5E  
                               ??_ultoa 007E                            _getVSCPFrame 4D1A  
                            __pbssBANK0 00E4                              __pbssBANK1 0100  
                            __pbssBANK2 0200                              __pbssBANK3 0300  
                           ?_OpenTimer0 0001                              calcCRC@crc 0070  
                             ?_Busy_eep 0001                              calcCRC@len 006E  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0060  
                    __size_of_init_crc8 0070                           setFilter@eidh 006D  
                         setFilter@eidl 006E                           setFilter@sidh 006B  
                         setFilter@sidl 006C                        ??_doModeVscpNode 0060  
                            _nTimeStamp 0031             ?_receiveSendMultiEventCANAL 0001  
              __end_of_hexStringToBytes 4B62                ECANSetOperationMode@mode 0060  
                               ?___wmul 0060                      __size_of_setFilter 01DE  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 002B                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 48EA                                 _B5RXFUL 007387  
                      WriteTimer0@timer 0062                           putsUSART@data 0061  
                  _readRegisterExtended 434A                                 ?_memcpy 0060  
                               _ECANCON 000F77                                 ?_memset 0060  
                         ??_WriteTimer0 0062                          ??__RegsToCANID 0006  
                         ??_Write_b_eep 0063                   sendVSCPFrame@priority 009A  
                               _BRGCON1 000F70                                 _BRGCON2 000F71  
                               _BRGCON3 000F72                                 ?_strcat 0060  
                               ?_strchr 0060                                 ?_strcpy 0060  
                               ?_strlen 0060                                 ?_strtok 006C  
                               ?_strspn 0066                              _cntRxBytes 0108  
                            _cntTxBytes 0110                      __size_of_printGUID 00EE  
                               i1l13300 019E                                 i1l13310 01FA  
                               i1l13302 01C6                                 i1l13320 0298  
                               i1l13312 0226                                 i1l13304 01CE  
                   ?_sendVSCPDriverNack 0001                                 i1l13322 029C  
                               i1l13314 0228                                 i1l13306 01D6  
                               i1l13250 007E                                 i1l13324 02C8  
                               i1l13316 025A                                 i1l13308 01F2  
                               i1l13260 00C8                                 i1l13252 008E  
                               i1l13244 0034                                 i1l13326 02CC  
                               i1l13318 025E                                 i1l13334 02DA  
                               i1l13270 00FC                                 i1l13262 00CC  
                               i1l13254 009A                                 i1l13246 003C  
                               i1l13328 02CE                                 i1l13280 012C  
                               i1l13264 00D8                                 i1l13256 00A6  
                               i1l13248 0042                                 i1l13282 0138  
                               i1l13274 010E                                 i1l13266 00E8  
                               i1l13258 00B8                                 i1l13292 0168  
                               i1l13276 011A                                 i1l13268 00F0  
                               i1l13294 0172                                 i1l13286 014A  
                               i1l13296 0182                                 i1l13288 0156  
                               i1l13298 0194                              _fifo_write 38FC  
                    __size_of_printHelp 01BE                      __size_of_printMode 0076  
                 sendVSCPFrame@vscptype 0098                   __size_of_fifo_getFree 0096  
               doModeVerbose@value_1226 02AA                       sendCANFrame@pdata 0094  
                            _made_table 0124                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 4F82                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0058      __end_of_sendVSCPDriverCommandReply 419C  
            _sendVSCPDriverCommandReply 40D8                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 4002  
      __size_of_receiveVSCPModeCanalMsg 00EA                  __size_of_doModeVerbose 12F6  
                  sendEscapedUartData@c 006E                  __size_of_sendVSCPFrame 00BC  
                   __size_of_Read_b_eep 0012                              ??_Busy_eep 0060  
      __end_of_sendVSCPDriverErrorFrame 44C6          __size_of_receiveSendEventCANAL 0140  
         __end_of_receiveSendEventCANAL 37C2                    ??_sendVSCPDriverNack 006F  
            printFirmwareVersion@wrkbuf 0078          __size_of_receiveSendEventSLCAN 0180  
                       _ECANSendMessage 3514           __end_of_receiveSendEventSLCAN 31F6  
                               __Hparam 0000                       __end_of_findNodes 3E32  
                               __Lparam 0000                       __end_of_fifo_init 55C8  
                     __end_of_fifo_read 4260                           ??_getCANFrame 0071  
                           ?_WriteUSART 0001              receiveVSCPModeCanalMsg@dlc 00B6  
                  __end_of_readRegister 484A                               ?_printMDF 0001  
                               _bSilent 002E               receiveVSCPModeCanalMsg@id 00B2  
                         ??_doModeSLCAN 0096                                 ___lldiv 4E96  
                       __size_of___wmul 0022                                 _calcCRC 57A0  
                       getCANFrame@pdlc 006E                                 ___llmod 5192  
                               ___lwdiv 53FA                               _FIFOEMPTY 007BA7  
                               ___lwmod 5652                   ?_readRegisterExtended 00B5  
           printNodeFirmwareVersion@buf 00BF                    __end_of_init_app_ram 53B0  
                          _fifo_getFree 46FE                            init_crc8@crc 0064  
                               __pcinit 50CE                         __size_of_memcpy 0042  
                       __size_of_memset 002E                                 __ramtop 0600  
                   __size_of_OpenTimer0 001E                               ?_strnicmp 0064  
                               __ptext0 3204                                 __ptext1 590E  
                               __ptext2 1E5A                                 __ptext3 4AC8  
                               __ptext4 55D6                 receiveSendEventCANAL@id 007B  
                               __ptext5 3076                                 __ptext6 3F1C  
                               __ptext7 2B5E                                 __ptext8 4416  
                               __ptext9 40D8                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C2                       ??_printStatistics 0094  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 002E  
                       __size_of_strlen 0040                       __end_of_hexpowers 7028  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 6FE0                       __end_of_init_crc8 5068  
                               _isdigit 582A          printNodeFirmwareVersion@nodeid 00BE  
                   __end_of_WriteTimer0 58DC                          _nibbleFromChar 55D6  
                      ?_init_app_eeprom 0001                     __end_of_Write_b_eep 576E  
                               _sprintf 171A        __end_of_sendVSCPModeCapabilities 46FE  
                     __end_of_setFilter 2B5E                                 _strichr 5614  
                        doModeVerbose@c 02AC                          doModeVerbose@i 02A9  
                        doModeVerbose@p 02B7                                 _strcspn 548C  
                               _toupper 58A0                             ?_doModeVscp 0001  
                               _stristr 4E1E                    __size_of_printBinary 004A  
                  end_of_initialization 5126                       __end_of_octpowers 6FE0  
                  __size_of_printErrors 02BC                                 memcpy@d 0066  
                               memcpy@n 0064                                 memcpy@s 0068  
                ??_printFirmwareVersion 0078                                 itoa@buf 0070  
                             i1u1130_25 380A                               i1u1131_25 3848  
                               memset@c 0062                                 itoa@val 0072  
                               memset@n 0064                                 memset@p 0066  
                             i1u1129_25 37FA                           __Lmediumconst 6FB0  
                  __end_of_sendCANFrame 56CA                               i1u1169_25 279E  
                             i1u1169_27 27A0                               i1u1750_20 009A  
                             i1u1750_21 0098                               i1u1751_20 00D8  
                             i1u1751_21 00D6                               i1u1760_20 0166  
                             i1u1752_20 00E8                               i1u1760_21 0164  
                             i1u1752_21 00E6                               i1u1761_20 0172  
                             i1u1753_20 00FC                               i1u1761_21 0170  
                             i1u1753_21 00FA                               i1u1770_20 0226  
                             i1u1762_20 0182                               i1u1754_20 010C  
                             i1u1770_21 0224                               i1u1762_21 0180  
                             i1u1754_21 010A                               i1u1771_20 025A  
                             i1u1763_20 0194                               i1u1755_20 011A  
                             i1u1771_21 0258                               i1u1763_21 0192  
                             i1u1755_21 0118                               i1u1772_20 0298  
                             i1u1764_20 019E                               i1u1756_20 012A  
                             i1u1748_20 003C                               i1u1772_21 0296  
                             i1u1764_21 019C                               i1u1756_21 0128  
                             i1u1748_21 003A                               i1u1773_20 02C8  
                             i1u1765_20 01C6                               i1u1757_20 0138  
                             i1u1749_20 007E                               i1u1773_21 02C6  
                             i1u1765_21 01C4                               i1u1757_21 0136  
                             i1u1749_21 007C                               i1u1774_20 02D8  
                             i1u1766_20 01CE                               i1u1758_20 0148  
                             i1u1774_21 02D6                               i1u1766_21 01CC  
                             i1u1758_21 0146                               i1u1767_20 01D6  
                             i1u1759_20 0156                               i1u1767_21 01D4  
                             i1u1759_21 0154                               i1u1768_20 01F2  
                             i1u1768_21 01F0                               i1u1769_20 01FA  
                             i1u1769_21 01F8                     _can_receiveOverruns 0100  
               receiveSendEventSLCAN@id 0086                       __end_of_printGUID 3D30  
                       ___lldiv@divisor 0064                       __end_of_printHelp 2EE0  
                       ___lldiv@counter 0068                       __end_of_printMode 4F82  
                     ECANSendMessage@id 006A                       ECANSendMessage@pb 0073  
          __size_of_sendEscapedUartData 0060                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 00BE  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0080  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 5360  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 02FE  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00CE  
                               utoa@val 0069               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 44D4                                 strlen@s 0060  
                            _sequencyno 0032                              _timekeeper 0022  
                             _RXM0EXIDM 0078CB                                 strspn@i 006A  
                            ??_strnicmp 006A                     __end_of_getCANFrame 4AC8  
                            findNodes@i 00C8                  __end_of_nibbleFromChar 5614  
                   __end_of_doModeSLCAN 222A                             ?_fifo_write 0001  
                            fifo_init@f 0060           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 0060                              fifo_read@i 006C  
                            fifo_read@p 006A                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B5  
     sendVSCPDriverCommandReply@cmdCode 006F                     __size_of_WriteUSART 0014  
           sendVSCPModeCapabilities@crc 006F                 __end_of_ECANSendMessage 3682  
                  _uart_receiveOverruns 011C                _receivePrintEventVerbose 24F2  
                            _vscpNodeId 00E9                           ?__CANIDToRegs 0060  
                  __end_of__RegsToCANID 38BE                               _TXSTAbits 000FAC  
                    i1WriteTimer0@timer 0003                       doModeVerbose@page 02AD  
                     doModeVerbose@preg 0284                          _init_crc8$2024 0060  
                ??_readRegisterExtended 00BC                          ?_doModeVerbose 0001  
                          ??_Read_b_eep 0062                          ?_sendVSCPFrame 0096  
                        __end_of___wmul 5790                     __size_of_doModeVscp 01B4  
                           _WriteTimer0 58CA                             _Write_b_eep 573A  
                        __end_of_memcpy 5556                          __end_of_memset 582A  
     __size_of_sendVSCPDriverErrorFrame 00B0               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                          __end_of_strcat 5308  
                        __end_of_strchr 5192                          __end_of_strcpy 57FC  
                        __end_of_strlen 5596                doModeVerbose@filter_type 028F  
                        __end_of_strtok 4C88                          __end_of_strspn 5514  
                           __end_ofPL10 1DAA                             __end_ofPL20 38D4  
                           __end_ofPL12 3A28                             __end_ofPL30 3AFC  
                           __end_ofPL22 3506                             __end_ofPL14 1DBA  
                           __end_ofPL40 16EC                             __end_ofPL32 16B8  
                           __end_ofPL24 2D22                             __end_ofPL16 3C42  
                           __end_ofPL50 1704                             __end_ofPL42 498A  
                           __end_ofPL34 427C                             __end_ofPL26 1692  
                           __end_ofPL18 1DE0                             __end_ofPL60 4648  
                           __end_ofPL52 1E10                             __end_ofPL44 48EA  
                           __end_ofPL36 1DFA                             __end_ofPL28 16A6  
                           __end_ofPL70 3B32                             __end_ofPL62 1E34  
                           __end_ofPL54 171A                             __end_ofPL46 3B0C  
                           __end_ofPL38 16D2                             __end_ofPL80 3204  
                           __end_ofPL72 38FC                             __end_ofPL64 38E8  
                           __end_ofPL56 4D1A                             __end_ofPL48 3B1E  
                           __end_ofPL90 3514                             __end_ofPL82 44D4  
                           __end_ofPL74 47A6                             __end_ofPL66 4002  
                           __end_ofPL58 1E26                             __end_ofPL92 2980  
                           __end_ofPL84 41AA                             __end_ofPL76 1E46  
                           __end_ofPL68 3D44                             __end_ofPL94 55D6  
                           __end_ofPL86 1E50                             __end_ofPL78 2236  
                           __end_ofPL96 3B3C                             __end_ofPL88 57A0  
                           __end_ofPL98 1E5A                     start_initialization 50CE  
                             _ReadUSART 5868                         findNodes@nFound 00C6  
                 doModeVerbose@reg_1225 02A2                   doModeVerbose@filterno 02A7  
               _receiveVSCPModeCanalMsg 3E32                     __CFG_BOREN$BOACTIVE 000000  
                          doModeSLCAN@c 00A2                            ??_OpenTimer0 0060  
sendVSCPDriverCommandReply@cmdReplyCode 0070                               _Interrupt 0018  
                        ??__CANIDToRegs 0067              readRegisterExtended@nodeid 00C0  
                             _OpenUSART 5254                      __end_of_Read_b_eep 58EE  
                   sendVSCPFrame@nodeid 0099                         ___llmod@divisor 0071  
                 __size_of_readRegister 00A4                         ___llmod@counter 0075  
                     __size_of_Busy_eep 0006                   ECANReceiveMessage@ptr 0015  
                   __size_of_fifo_write 00FE                   __size_of_init_app_ram 0050  
                        _findNodes$1535 00C4                __end_of__ECANPointBuffer 4FF8  
                     __CANIDToRegs@type 0066                              init_crc8@i 0065  
                            init_crc8@j 0062                             _getCANFrame 4A2A  
                              ??___wmul 0064       __size_of_sendVSCPModeCapabilities 00B6  
                     ?_hexStringToBytes 0064                             _doModeSLCAN 1E5A  
             ?_sendVSCPModeCapabilities 0001              __end_of_ECANReceiveMessage 2972  
                              ??_memcpy 0066                     readRegister@timeout 00B6  
                              ??_memset 0066                   sendVSCPDriverNack@crc 006F  
              doModeVerbose@mask_nodeid 0293                   __end_ofi1_WriteTimer0 5900  
                    ??_hexStringToBytes 0069                                ??_strcat 0064  
                              ??_strchr 0064                                ??_strcpy 0064  
                              ??_strlen 0062                      __end_of_OpenTimer0 5868  
                              ??_strtok 0070                                ??_strspn 006A  
                           __pbssBIGRAM 0400                             __pbssCOMRAM 0022  
                            ?_ReadUSART 0001                           __pcstackBANK0 0060  
                         __pcstackBANK2 0280                     __end_of__stringdata 7FFF  
                          _readRegister 47A6                   __size_of_sendCANFrame 003A  
                          _isdigit$2933 0061             ?_sendVSCPDriverCommandReply 006F  
           sendVSCPDriverErrorFrame@crc 0070                        ?_ECANSendMessage 006A  
                     sendVSCPFrame@size 009B                            _init_app_ram 5360  
                            ?_Interrupt 0001                              ?_OpenUSART 0060  
                           sprintf@_val 008D                             sprintf@flag 0092  
                           sprintf@prec 0089                               __pnvBANK1 01E2  
                      _ledFunctionality 0030                doModeVerbose@nodeid_1223 028D  
              doModeVerbose@nodeid_1238 02AF                            setFilter@val 0060  
                      ___lwdiv@dividend 0060                         ??_doModeVerbose 00C9  
         __size_of_ECANSetOperationMode 001A                         _printStatistics 2EE0  
                          ??_WriteUSART 0060                         ??_sendVSCPFrame 009D  
                        _ECANInitialize 4D9E                       _sendVSCPDriverAck 484A  
                         __pmediumconst 6FB0                                ?___lldiv 0060  
                              ?_calcCRC 006C                                ?___llmod 006D  
                             _findNodes 3D44                                ?___lwdiv 0060  
                              ?___lwmod 0060                               _fifo_init 5596  
                             _fifo_read 41AA                      ?_sendVSCPDriverAck 0001  
                     __size_of_printMDF 0094                             __pintcodelo 0018  
                          _sendCANFrame 5690                       WriteTimer0@timer0 0060  
                           _COMSTATbits 000F74                                ?_isdigit 0001  
             ??_receiveVSCPModeCanalMsg 0096                     ??_sendVSCPDriverAck 006F  
                     __size_of_strnicmp 0066                         printGUID@nodeid 00BE  
                   _sendEscapedUartData 51F4                               _hexpowers 7008  
                      ___lwdiv@quotient 0065                               _init_crc8 4FF8  
                 __size_of__RegsToCANID 00FC               doModeVerbose@filter_class 0288  
                              ?_sprintf 0076                                ?_strichr 0061  
                           _cntRxFrames 010C                            ??_doModeVscp 00B7  
                              ?_strcspn 0066                                ?_toupper 0001  
                              ?_stristr 006D                      __end_of_WriteUSART 58CA  
                        __size_of_ultoa 00D2                             _cntTxFrames 0114  
                       _can_inputBuffer 0400                          ___wmul@product 0064  
                sendVSCPFrame@vscpclass 0096                               _setFilter 2980  
                           strnicmp@len 0068                               _octpowers 6FB0  
                              _PIE1bits 000F9D             __size_of_sendVSCPDriverNack 0092  
                __end_of_ECANInitialize 4E1E               __end_of_sendVSCPDriverAck 48DC  
                              i1u630_25 391C                                i1u631_25 392C  
                              i1u633_25 39C2                                i1u635_25 4724  
                              _PIR1bits 000F9E                   _receiveSendEventCANAL 3682  
                      ECANSendMessage@i 008C                        ECANSendMessage@j 0087  
                  ?_sendEscapedUartData 006C                   _receiveSendEventSLCAN 3076  
                              _RXF0EIDH 000F02                                _RXF0EIDL 000F03  
                              _RXB0OVFL 007BA7                                _RXF1EIDH 000F06  
                              _RXF1EIDL 000F07                                _RXB1OVFL 007BA6  
                              _RXF2EIDH 000F0A                                _RXF2EIDL 000F0B  
                              _RXF3EIDH 000F0E                                _RXF3EIDL 000F0F  
                              _RXF4EIDH 000F12                                _RXF4EIDL 000F13  
                              _RXF5EIDH 000F16                                _RXF5EIDL 000F17  
                              _RXF6EIDH 000D62             receiveSendMultiEventCANAL@i 007B  
                              _RXF6EIDL 000D63                       hexStringToBytes@i 0070  
                              _RXF7EIDH 000D66                                _RXF0SIDH 000F00  
                     hexStringToBytes@p 006E                                _RXF7EIDL 000D67  
                              _RXF0SIDL 000F01                               _printGUID 3C42  
                              _RXF8EIDH 000D6A                                _RXF1SIDH 000F04  
                              _RXF8EIDL 000D6B                                _RXF1SIDL 000F05  
                              _RXF9EIDH 000D72                                _RXF2SIDH 000F08  
                              _RXF9EIDL 000D73                                _RXF2SIDL 000F09  
                              _RXF3SIDH 000F0C                                _RXF3SIDL 000F0D  
                            printGUID@i 00C3                                _RXF4SIDH 000F10  
                              _RXF4SIDL 000F11                                _RXF5SIDH 000F14  
                              _RXF5SIDL 000F15                                _RXF6SIDH 000D60  
                              _RXF6SIDL 000D61                                _RXM0EIDH 000F1A  
                              _RXF7SIDH 000D64                                _RXM0EIDL 000F1B  
                              _RXF7SIDL 000D65                                _RXM1EIDH 000F1E  
                              _RXF8SIDH 000D68                                _RXM1EIDL 000F1F  
                              _RXF8SIDL 000D69                                _RXF9SIDH 000D70  
                              _RXF9SIDL 000D71                                _RXFBCON0 000DE0  
                              _RXFBCON1 000DE1                                _RXFBCON2 000DE2  
                              _RXFBCON3 000DE3                                _RXFBCON4 000DE4  
                              _RXFBCON5 000DE5                                _RXFBCON6 000DE6  
                              _RXFBCON7 000DE7                              ?_findNodes 0001  
                             _printHelp 2D22                                _RXM0SIDH 000F18  
                              _RXM0SIDL 000F19                                _RXM1SIDH 000F1C  
                              _RXM1SIDL 000F1D                               _printMode 4F0C  
                            ?_fifo_init 0060                              ?_fifo_read 0060  
                              _RXERRCNT 000F75                      __end_of_doModeVscp 2D12  
                              _TXERRCNT 000F76                    __end_of__CANIDToRegs 3AE8  
                             _putsUSART 5308                             __stringdata 7028  
                     ___wmul@multiplier 0060                            __RegsToCANID 37C2  
                             _vscpClass 003C                 ??_writeRegisterExtended 00BC  
                       Write_b_eep@badd 0060                         Write_b_eep@bdat 0062  
                          ??_fifo_write 0009                 __size_of_doModeVscpNode 0002  
            ??_receivePrintEventVerbose 0094                             ??_ReadUSART 0001  
                   getVSCPFrame@pNodeId 0073                           ??_printBinary 0061  
                      doModeVerbose@reg 02AE                           ??_printErrors 0094  
                            ?_init_crc8 0001                      _serial_inputBuffer 0200  
                             _rwtimeout 00E8               writeRegisterExtended@page 00B5  
  __end_of_receiveVSCPModeMultiCanalMsg 5912   __size_of_receiveVSCPModeMultiCanalMsg 0002  
          _receiveVSCPModeMultiCanalMsg 5910                             ??_Interrupt 0017  
               __end_of_printStatistics 3076                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00B8                                _Busy_eep 5908  
              __size_of_init_app_eeprom 00AC                              ?_setFilter 0060  
                       OpenUSART@config 0062                          findNodes@value 00C7  
          __end_of_vscp_restoreDefaults 5908                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 007C         __end_of_receiveVSCPModeCanalMsg 3F1C  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000A                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 39FA                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00AA                              ?_printGUID 0001  
                           doModeVscp@c 00B7                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 006F  
                          ?_Write_b_eep 0060                              ?_putsUSART 0061  
                       fifo_read@nbytes 0064                              sprintf@idx 0081  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 4648  
                              __ptext11 5910                                __ptext20 56CA  
                              __ptext12 3E32                                __ptext21 4FF8  
                              __ptext13 5514                                __ptext30 3C42  
                              __ptext22 02FE                                __ptext14 484A  
                              __ptext31 427C                                __ptext23 2980  
                              __ptext15 48EA                                __ptext40 2236  
                              __ptext32 52B0                                __ptext24 4002  
                              __ptext16 57A0                                __ptext41 2EE0  
                              __ptext33 47A6                                __ptext25 53B0  
                              __ptext17 3682                                __ptext50 58A0  
                              __ptext42 3B3C                                __ptext34 44D4  
                              __ptext26 434A                                __ptext18 3390  
                              __ptext51 5556                                __ptext43 4BF6  
                              __ptext35 5690                                __ptext27 57CE  
                              __ptext19 51F4                                __ptext60 582A  
                              __ptext52 24F2                                __ptext44 548C  
                              __ptext36 3514                                __ptext28 3D44  
                              __ptext61 4C88                                __ptext53 4D1A  
                              __ptext45 54D0                                __ptext37 3A28  
                              __ptext29 4B62                                __ptext70 4D9E  
                              __ptext62 5702                                __ptext54 4A2A  
                              __ptext46 5130                                __ptext38 57FC  
                              __ptext71 5886                                __ptext63 498A  
                              __ptext55 41AA                                __ptext47 4E1E  
                              __ptext39 2D22                                __ptext80 58DC  
                              __ptext72 584A                                __ptext64 5652  
                              __ptext56 171A                                __ptext48 5614  
                              __ptext81 5596                                __ptext73 5254  
                              __ptext65 53FA                                __ptext57 576E  
                              __ptext49 5068                                __ptext74 58CA  
                              __ptext66 4F0C                                __ptext58 5192  
                              __ptext83 58EE                                __ptext75 5900  
                              __ptext67 5308                                __ptext59 4E96  
                              __ptext84 46FE                                __ptext76 4590  
                              __ptext68 58B6                                __ptext85 2774  
                              __ptext77 573A                                __ptext69 5444  
                              __ptext86 37C2                                __ptext78 5908  
                              __ptext87 4F82                                __ptext79 5360  
                              __ptext88 38FC                                __ptext89 5868  
              receiveSendEventCANAL@dlc 007F                receiveSendEventCANAL@crc 0080  
                        printMDF@nodeid 00BE                           ?_getVSCPFrame 0072  
                            strichr@chr 0063                        __size_of_sprintf 0672  
                            strichr@ptr 0061                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C2                     __end_of_printBinary 53FA  
                         __size_of_crc8 0038                           __size_of_atoi 00F8  
                         __size_of_main 018C                           __size_of_init 0048  
                         __size_of_itoa 0038           ?_receiveVSCPModeMultiCanalMsg 0001  
                   __end_of_printErrors 24F2                           __size_of_utoa 00A0  
                ?_receiveSendEventCANAL 0001                              strnicmp@s1 0064  
                            strnicmp@s2 0066              __size_of_sendVSCPDriverAck 0092  
        receiveSendMultiEventCANAL@data 0072                  ?_receiveSendEventSLCAN 0001  
              _printNodeFirmwareVersion 427C                     ECANSendMessage@data 006E  
              ECANSendMessage@tempBSEL0 0088                                _printMDF 4B62  
                             printMDF@i 00C2                               printMDF@p 00C0  
                          ?_getCANFrame 006E                     ECANSendMessage@mode 0085  
                   ECANSendMessage@temp 008B                       ?__ECANPointBuffer 0001  
          ??_receiveSendMultiEventCANAL 0072                                atoi@sign 006A  
                           ??_findNodes 00C4                            ?_doModeSLCAN 0001  
                           ??_fifo_init 0066                             ??_fifo_read 0066  
                              _vscpData 0034           __size_of_readRegisterExtended 00CC  
                              main@argc 00DD                                main@argv 00DF  
                              _vscpSize 00EB                      ??__ECANPointBuffer 0004  
                              _vscpType 00EC                             _RXB0FILHIT0 007B00  
     sendVSCPDriverErrorFrame@errorcode 006F                         doModeVerbose@id 0280  
                       doModeVerbose@rv 02A0                                _strnicmp 5068  
                      init_app_eeprom@i 0064             writeRegisterExtended@nodeid 00C0  
                         Interrupt@fail 0021                         _serialInputFifo 01D6  
                           _RXB1CONbits 000F50                             _OSCTUNEbits 000F9B  
                            _INTCONbits 000FF2                          OpenUSART@spbrg 0060  
                   ECANReceiveMessage@i 0012                                memcpy@d1 0060  
                              memcpy@s1 0062               receivePrintEventVerbose@i 00A5  
                              itoa@base 0074                                isdigit@c 0062  
                    _ECANReceiveMessage 2774                                memset@p1 0060  
                           ??_init_crc8 0060                               ultoa@base 007C  
                        ??_getVSCPFrame 0077               __size_of_hexStringToBytes 009A  
                       sendVSCPFrame@id 00B1                                intlevel1 0000  
                             sprintf@ap 0088                               sprintf@sp 0076  
                  hexStringToBytes@size 0066                               strchr@chr 0062  
                      ?_printStatistics 0001                receiveSendEventSLCAN@dlc 008A  
                      ___lwmod@dividend 0060                               strchr@ptr 0060  
                   ?_ECANReceiveMessage 000A                        ___lldiv@dividend 0060  
                           ??_setFilter 0064                           printMDF@value 00BF  
   __size_of_receiveSendMultiEventCANAL 0166                           fifo_getFree@f 0001  
                             strcspn@s1 0066                               strcspn@s2 0068  
    receiveSendMultiEventCANAL@msgcount 007A                 ECANSendMessage@msgFlags 0071  
                            _OSCCONbits 000FD3                               strnicmp@r 006C  
                             stristr@s1 006D                               stristr@s2 006F  
                    ECANSendMessage@ptr 008D                       ??_init_app_eeprom 0064  
                 __size_of__CANIDToRegs 00C0                             ??_printGUID 00BE  
                           ??_printHelp 0065                             ??_printMode 0065  
              _sendVSCPDriverErrorFrame 4416                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 0070                     __ECANPointBuffer@pt 0005  
                  ??_ECANReceiveMessage 0010                             ??_putsUSART 0063  
                              utoa@base 006B                                ultoa@buf 0076  
                              ultoa@val 0078                           fifo_init@size 0064  
                              sprintf@c 0091                                sprintf@f 0078  
                   hexStringToBytes@buf 0064                                strcat@cp 0064  
                   hexStringToBytes@len 006C                          _doModeVscpNode 590E  
                              strcat@to 0060        __end_of_receivePrintEventVerbose 2774  
                ECANSendMessage@buffers 0086                        ___lldiv@quotient 0069  
                       ___lwmod@divisor 0062            __end_of_ECANSetOperationMode 58A0  
                  _vscp_restoreDefaults 5900                            printGUID@buf 00BF  
                              strcpy@cp 0064                                strlen@cp 0062  
                              strcpy@to 0060                         ___lwmod@counter 0064  
                              strcspn@i 006A                                toupper@c 0060  
                           _printBinary 53B0                                strtok@s1 006C  
                              strtok@s2 006E                                strspn@s1 0066  
                              strspn@s2 0068                              _RXM1EXIDEN 0078EB  
                              strtok@sp 0028                  ECANSendMessage@tempPtr 0089  
                           _printErrors 2236                            fifo_init@buf 0062  
                          fifo_read@buf 0062           sendVSCPDriverCommandReply@crc 0071  
                          __CANIDToRegs 3A28                  __size_ofi1_WriteTimer0 0012  
                          _USART_Status 002A               readRegisterExtended@value 00BA  
              _sendVSCPModeCapabilities 4648                __size_of_ECANSendMessage 016E  
