

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Mon Feb 23 22:24:59 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    13                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	text82,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   104                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   105                           	psect	pa_nodes,global,class=CODE,delta=1
   106  0000                     tblptru	equ	0xFF8
   107                           tblptrh	equ	0xFF7
   108                           tblptrl	equ	0xFF6
   109                           tablat	equ	0xFF5
   110                           prodh	equ	0xFF4
   111                           prodl	equ	0xFF3
   112                           intcon	equ	0xFF2
   113                           indf0	equ	0xFEF
   114                           fsr0h	equ	0xFEA
   115                           fsr0l	equ	0xFE9
   116                           wreg	equ	0xFE8
   117                           indf1	equ	0xFE7
   118                           postinc1	equ	0xFE6
   119                           postdec1	equ	0xFE5
   120                           fsr1h	equ	0xFE2
   121                           fsr1l	equ	0xFE1
   122                           indf2	equ	0xFDF
   123                           postinc2	equ	0xFDE
   124                           postdec2	equ	0xFDD
   125                           plusw2	equ	0xFDB
   126                           fsr2h	equ	0xFDA
   127                           fsr2l	equ	0xFD9
   128                           status	equ	0xFD8
   129                           
   130                           	psect	mediumconst
   131  006FD8                     __pmediumconst:
   132                           	opt stack 0
   133  006FD8                     _octpowers:
   134                           	opt stack 0
   135  006FD8  0001               	dw	1
   136  006FDA  0000               	dw	0
   137  006FDC  0008               	dw	8
   138  006FDE  0000               	dw	0
   139  006FE0  0040               	dw	64
   140  006FE2  0000               	dw	0
   141  006FE4  0200               	dw	512
   142  006FE6  0000               	dw	0
   143  006FE8  1000               	dw	4096
   144  006FEA  0000               	dw	0
   145  006FEC  8000               	dw	32768
   146  006FEE  0000               	dw	0
   147  006FF0  0000               	dw	0
   148  006FF2  0004               	dw	4
   149  006FF4  0000               	dw	0
   150  006FF6  0020               	dw	32
   151  006FF8  0000               	dw	0
   152  006FFA  0100               	dw	256
   153  006FFC  0000               	dw	0
   154  006FFE  0800               	dw	2048
   155  007000  0000               	dw	0
   156  007002  4000               	dw	16384
   157  007004  0000               	dw	0
   158  007006  0000               	dw	0
   159  007008                     __end_of_octpowers:
   160                           	opt stack 0
   161  007008                     _dpowers:
   162                           	opt stack 0
   163  007008  0001               	dw	1
   164  00700A  0000               	dw	0
   165  00700C  000A               	dw	10
   166  00700E  0000               	dw	0
   167  007010  0064               	dw	100
   168  007012  0000               	dw	0
   169  007014  03E8               	dw	1000
   170  007016  0000               	dw	0
   171  007018  2710               	dw	10000
   172  00701A  0000               	dw	0
   173  00701C  86A0               	dw	34464
   174  00701E  0001               	dw	1
   175  007020  4240               	dw	16960
   176  007022  000F               	dw	15
   177  007024  9680               	dw	38528
   178  007026  0098               	dw	152
   179  007028  E100               	dw	57600
   180  00702A  05F5               	dw	1525
   181  00702C  CA00               	dw	51712
   182  00702E  3B9A               	dw	15258
   183  007030                     __end_of_dpowers:
   184                           	opt stack 0
   185  007030                     _hexpowers:
   186                           	opt stack 0
   187  007030  0001               	dw	1
   188  007032  0000               	dw	0
   189  007034  0010               	dw	16
   190  007036  0000               	dw	0
   191  007038  0100               	dw	256
   192  00703A  0000               	dw	0
   193  00703C  1000               	dw	4096
   194  00703E  0000               	dw	0
   195  007040  0000               	dw	0
   196  007042  0001               	dw	1
   197  007044  0000               	dw	0
   198  007046  0010               	dw	16
   199  007048  0000               	dw	0
   200  00704A  0100               	dw	256
   201  00704C  0000               	dw	0
   202  00704E  1000               	dw	4096
   203  007050                     __end_of_hexpowers:
   204                           	opt stack 0
   205  0000                     _BRGCON1	set	3952
   206  0000                     _BRGCON2	set	3953
   207  0000                     _BRGCON3	set	3954
   208  0000                     _BSEL0	set	3576
   209  0000                     _CANCON	set	3951
   210  0000                     _CIOCON	set	3955
   211  0000                     _COMSTATbits	set	3956
   212  0000                     _ECANCON	set	3959
   213  0000                     _EEADR	set	4009
   214  0000                     _EECON1bits	set	4006
   215  0000                     _EECON2	set	4007
   216  0000                     _EEDATA	set	4008
   217  0000                     _INTCONbits	set	4082
   218  0000                     _MSEL0	set	3568
   219  0000                     _MSEL1	set	3569
   220  0000                     _MSEL2	set	3570
   221  0000                     _OSCCONbits	set	4051
   222  0000                     _OSCTUNEbits	set	3995
   223  0000                     _PIE1bits	set	3997
   224  0000                     _PIR1bits	set	3998
   225  0000                     _PIR2bits	set	4001
   226  0000                     _PIR3bits	set	4004
   227  0000                     _RCREG	set	4014
   228  0000                     _RCSTA	set	4011
   229  0000                     _RCSTAbits	set	4011
   230  0000                     _RXB1CONbits	set	3920
   231  0000                     _RXERRCNT	set	3957
   232  0000                     _RXF0EIDH	set	3842
   233  0000                     _RXF0EIDL	set	3843
   234  0000                     _RXF0SIDH	set	3840
   235  0000                     _RXF0SIDL	set	3841
   236  0000                     _RXF10EIDH	set	3446
   237  0000                     _RXF10EIDL	set	3447
   238  0000                     _RXF10SIDH	set	3444
   239  0000                     _RXF10SIDL	set	3445
   240  0000                     _RXF11EIDH	set	3450
   241  0000                     _RXF11EIDL	set	3451
   242  0000                     _RXF11SIDH	set	3448
   243  0000                     _RXF11SIDL	set	3449
   244  0000                     _RXF12EIDH	set	3458
   245  0000                     _RXF12EIDL	set	3459
   246  0000                     _RXF12SIDH	set	3456
   247  0000                     _RXF12SIDL	set	3457
   248  0000                     _RXF13EIDH	set	3462
   249  0000                     _RXF13EIDL	set	3463
   250  0000                     _RXF13SIDH	set	3460
   251  0000                     _RXF13SIDL	set	3461
   252  0000                     _RXF14EIDH	set	3466
   253  0000                     _RXF14EIDL	set	3467
   254  0000                     _RXF14SIDH	set	3464
   255  0000                     _RXF14SIDL	set	3465
   256  0000                     _RXF15EIDH	set	3474
   257  0000                     _RXF15EIDL	set	3475
   258  0000                     _RXF15SIDH	set	3472
   259  0000                     _RXF15SIDL	set	3473
   260  0000                     _RXF1EIDH	set	3846
   261  0000                     _RXF1EIDL	set	3847
   262  0000                     _RXF1SIDH	set	3844
   263  0000                     _RXF1SIDL	set	3845
   264  0000                     _RXF2EIDH	set	3850
   265  0000                     _RXF2EIDL	set	3851
   266  0000                     _RXF2SIDH	set	3848
   267  0000                     _RXF2SIDL	set	3849
   268  0000                     _RXF3EIDH	set	3854
   269  0000                     _RXF3EIDL	set	3855
   270  0000                     _RXF3SIDH	set	3852
   271  0000                     _RXF3SIDL	set	3853
   272  0000                     _RXF4EIDH	set	3858
   273  0000                     _RXF4EIDL	set	3859
   274  0000                     _RXF4SIDH	set	3856
   275  0000                     _RXF4SIDL	set	3857
   276  0000                     _RXF5EIDH	set	3862
   277  0000                     _RXF5EIDL	set	3863
   278  0000                     _RXF5SIDH	set	3860
   279  0000                     _RXF5SIDL	set	3861
   280  0000                     _RXF6EIDH	set	3426
   281  0000                     _RXF6EIDL	set	3427
   282  0000                     _RXF6SIDH	set	3424
   283  0000                     _RXF6SIDL	set	3425
   284  0000                     _RXF7EIDH	set	3430
   285  0000                     _RXF7EIDL	set	3431
   286  0000                     _RXF7SIDH	set	3428
   287  0000                     _RXF7SIDL	set	3429
   288  0000                     _RXF8EIDH	set	3434
   289  0000                     _RXF8EIDL	set	3435
   290  0000                     _RXF8SIDH	set	3432
   291  0000                     _RXF8SIDL	set	3433
   292  0000                     _RXF9EIDH	set	3442
   293  0000                     _RXF9EIDL	set	3443
   294  0000                     _RXF9SIDH	set	3440
   295  0000                     _RXF9SIDL	set	3441
   296  0000                     _RXFBCON0	set	3552
   297  0000                     _RXFBCON1	set	3553
   298  0000                     _RXFBCON2	set	3554
   299  0000                     _RXFBCON3	set	3555
   300  0000                     _RXFBCON4	set	3556
   301  0000                     _RXFBCON5	set	3557
   302  0000                     _RXFBCON6	set	3558
   303  0000                     _RXFBCON7	set	3559
   304  0000                     _RXFCON0	set	3540
   305  0000                     _RXFCON1	set	3541
   306  0000                     _RXM0EIDH	set	3866
   307  0000                     _RXM0EIDL	set	3867
   308  0000                     _RXM0SIDL	set	3865
   309  0000                     _RXM1EIDH	set	3870
   310  0000                     _RXM1EIDL	set	3871
   311  0000                     _RXM1SIDL	set	3869
   312  0000                     _SPBRG	set	4015
   313  0000                     _SPBRGH	set	4016
   314  0000                     _T0CON	set	4053
   315  0000                     _T0CONbits	set	4053
   316  0000                     _TMR0H	set	4055
   317  0000                     _TMR0L	set	4054
   318  0000                     _TRISBbits	set	3987
   319  0000                     _TRISCbits	set	3988
   320  0000                     _TXERRCNT	set	3958
   321  0000                     _TXREG	set	4013
   322  0000                     _TXSTA	set	4012
   323  0000                     _TXSTAbits	set	4012
   324  0000                     _B0RXFUL	set	28935
   325  0000                     _B0TXEN	set	28610
   326  0000                     _B1RXFUL	set	29063
   327  0000                     _B1TXEN	set	28611
   328  0000                     _B2RXFUL	set	29191
   329  0000                     _B2TXEN	set	28612
   330  0000                     _B3RXFUL	set	29319
   331  0000                     _B3TXEN	set	28613
   332  0000                     _B4RXFUL	set	29447
   333  0000                     _B4TXEN	set	28614
   334  0000                     _B5RXFUL	set	29575
   335  0000                     _B5TXEN	set	28615
   336  0000                     _FIFOEMPTY	set	31655
   337  0000                     _IRXIF	set	32039
   338  0000                     _LATC1	set	31833
   339  0000                     _MDSEL0	set	31678
   340  0000                     _MDSEL1	set	31679
   341  0000                     _PEIE	set	32662
   342  0000                     _RCIE	set	31981
   343  0000                     _RCIF	set	31989
   344  0000                     _RCIP	set	31997
   345  0000                     _RXB0FILHIT0	set	31488
   346  0000                     _RXB0FUL	set	31495
   347  0000                     _RXB0IF	set	32032
   348  0000                     _RXB0OVFL	set	31655
   349  0000                     _RXB1IF	set	32033
   350  0000                     _RXB1OVFL	set	31654
   351  0000                     _RXM0EXIDM	set	30923
   352  0000                     _RXM1EXIDEN	set	30955
   353  0000                     _B0CON	set	3616
   354  0000                     _B1CON	set	3632
   355  0000                     _B2CON	set	3648
   356  0000                     _B3CON	set	3664
   357  0000                     _B4CON	set	3680
   358  0000                     _B5CON	set	3696
   359  0000                     _RXB0CON	set	3936
   360  0000                     _RXB1CON	set	3920
   361  0000                     _RXM0SIDH	set	3864
   362  0000                     _RXM1SIDH	set	3868
   363  0000                     _TXB0CON	set	3904
   364  0000                     _TXB1CON	set	3888
   365  0000                     _TXB2CON	set	3872
   366  007050                     __stringdata:
   367                           	opt stack 0
   368  007050                     STR_218:
   369  007050  20                 	db	32
   370  007051  20                 	db	32
   371  007052  20                 	db	32
   372  007053  20                 	db	32
   373  007054  20                 	db	32
   374  007055  20                 	db	32
   375  007056  20                 	db	32
   376  007057  20                 	db	32
   377  007058  20                 	db	32
   378  007059  46                 	db	70	;'F'
   379  00705A  6F                 	db	111	;'o'
   380  00705B  72                 	db	114	;'r'
   381  00705C  6D                 	db	109	;'m'
   382  00705D  61                 	db	97	;'a'
   383  00705E  74                 	db	116	;'t'
   384  00705F  3A                 	db	58	;':'
   385  007060  20                 	db	32
   386  007061  66                 	db	102	;'f'
   387  007062  69                 	db	105	;'i'
   388  007063  6C                 	db	108	;'l'
   389  007064  74                 	db	116	;'t'
   390  007065  65                 	db	101	;'e'
   391  007066  72                 	db	114	;'r'
   392  007067  20                 	db	32
   393  007068  66                 	db	102	;'f'
   394  007069  69                 	db	105	;'i'
   395  00706A  6C                 	db	108	;'l'
   396  00706B  74                 	db	116	;'t'
   397  00706C  65                 	db	101	;'e'
   398  00706D  72                 	db	114	;'r'
   399  00706E  6E                 	db	110	;'n'
   400  00706F  6F                 	db	111	;'o'
   401  007070  2C                 	db	44
   402  007071  70                 	db	112	;'p'
   403  007072  72                 	db	114	;'r'
   404  007073  69                 	db	105	;'i'
   405  007074  6F                 	db	111	;'o'
   406  007075  2C                 	db	44
   407  007076  63                 	db	99	;'c'
   408  007077  6C                 	db	108	;'l'
   409  007078  61                 	db	97	;'a'
   410  007079  73                 	db	115	;'s'
   411  00707A  73                 	db	115	;'s'
   412  00707B  2C                 	db	44
   413  00707C  74                 	db	116	;'t'
   414  00707D  79                 	db	121	;'y'
   415  00707E  70                 	db	112	;'p'
   416  00707F  65                 	db	101	;'e'
   417  007080  2C                 	db	44
   418  007081  6E                 	db	110	;'n'
   419  007082  6F                 	db	111	;'o'
   420  007083  64                 	db	100	;'d'
   421  007084  65                 	db	101	;'e'
   422  007085  69                 	db	105	;'i'
   423  007086  64                 	db	100	;'d'
   424  007087  20                 	db	32
   425  007088  20                 	db	32
   426  007089  28                 	db	40
   427  00708A  66                 	db	102	;'f'
   428  00708B  69                 	db	105	;'i'
   429  00708C  6C                 	db	108	;'l'
   430  00708D  74                 	db	116	;'t'
   431  00708E  65                 	db	101	;'e'
   432  00708F  72                 	db	114	;'r'
   433  007090  6E                 	db	110	;'n'
   434  007091  6F                 	db	111	;'o'
   435  007092  20                 	db	32
   436  007093  3D                 	db	61	;'='
   437  007094  20                 	db	32
   438  007095  30                 	db	48	;'0'
   439  007096  2D                 	db	45
   440  007097  31                 	db	49	;'1'
   441  007098  35                 	db	53	;'5'
   442  007099  29                 	db	41
   443  00709A  2E                 	db	46
   444  00709B  0D                 	db	13
   445  00709C  0A                 	db	10
   446  00709D  00                 	db	0
   447  00709E                     STR_216:
   448  00709E  49                 	db	73	;'I'
   449  00709F  4E                 	db	78	;'N'
   450  0070A0  46                 	db	70	;'F'
   451  0070A1  4F                 	db	79	;'O'
   452  0070A2  20                 	db	32
   453  0070A3  2D                 	db	45
   454  0070A4  20                 	db	32
   455  0070A5  47                 	db	71	;'G'
   456  0070A6  65                 	db	101	;'e'
   457  0070A7  74                 	db	116	;'t'
   458  0070A8  20                 	db	32
   459  0070A9  69                 	db	105	;'i'
   460  0070AA  6E                 	db	110	;'n'
   461  0070AB  66                 	db	102	;'f'
   462  0070AC  6F                 	db	111	;'o'
   463  0070AD  20                 	db	32
   464  0070AE  61                 	db	97	;'a'
   465  0070AF  62                 	db	98	;'b'
   466  0070B0  6F                 	db	111	;'o'
   467  0070B1  75                 	db	117	;'u'
   468  0070B2  74                 	db	116	;'t'
   469  0070B3  20                 	db	32
   470  0070B4  61                 	db	97	;'a'
   471  0070B5  6E                 	db	110	;'n'
   472  0070B6  20                 	db	32
   473  0070B7  65                 	db	101	;'e'
   474  0070B8  78                 	db	120	;'x'
   475  0070B9  69                 	db	105	;'i'
   476  0070BA  73                 	db	115	;'s'
   477  0070BB  74                 	db	116	;'t'
   478  0070BC  65                 	db	101	;'e'
   479  0070BD  6E                 	db	110	;'n'
   480  0070BE  74                 	db	116	;'t'
   481  0070BF  20                 	db	32
   482  0070C0  6E                 	db	110	;'n'
   483  0070C1  6F                 	db	111	;'o'
   484  0070C2  64                 	db	100	;'d'
   485  0070C3  65                 	db	101	;'e'
   486  0070C4  20                 	db	32
   487  0070C5  6F                 	db	111	;'o'
   488  0070C6  6E                 	db	110	;'n'
   489  0070C7  20                 	db	32
   490  0070C8  74                 	db	116	;'t'
   491  0070C9  68                 	db	104	;'h'
   492  0070CA  65                 	db	101	;'e'
   493  0070CB  20                 	db	32
   494  0070CC  62                 	db	98	;'b'
   495  0070CD  75                 	db	117	;'u'
   496  0070CE  73                 	db	115	;'s'
   497  0070CF  20                 	db	32
   498  0070D0  28                 	db	40
   499  0070D1  46                 	db	70	;'F'
   500  0070D2  6F                 	db	111	;'o'
   501  0070D3  72                 	db	114	;'r'
   502  0070D4  6D                 	db	109	;'m'
   503  0070D5  61                 	db	97	;'a'
   504  0070D6  74                 	db	116	;'t'
   505  0070D7  3A                 	db	58	;':'
   506  0070D8  20                 	db	32
   507  0070D9  69                 	db	105	;'i'
   508  0070DA  6E                 	db	110	;'n'
   509  0070DB  66                 	db	102	;'f'
   510  0070DC  6F                 	db	111	;'o'
   511  0070DD  20                 	db	32
   512  0070DE  6E                 	db	110	;'n'
   513  0070DF  69                 	db	105	;'i'
   514  0070E0  63                 	db	99	;'c'
   515  0070E1  6B                 	db	107	;'k'
   516  0070E2  6E                 	db	110	;'n'
   517  0070E3  61                 	db	97	;'a'
   518  0070E4  6D                 	db	109	;'m'
   519  0070E5  65                 	db	101	;'e'
   520  0070E6  29                 	db	41
   521  0070E7  2E                 	db	46
   522  0070E8  0D                 	db	13
   523  0070E9  0A                 	db	10
   524  0070EA  00                 	db	0
   525  0070EB                     STR_220:
   526  0070EB  20                 	db	32
   527  0070EC  20                 	db	32
   528  0070ED  20                 	db	32
   529  0070EE  20                 	db	32
   530  0070EF  20                 	db	32
   531  0070F0  20                 	db	32
   532  0070F1  20                 	db	32
   533  0070F2  46                 	db	70	;'F'
   534  0070F3  6F                 	db	111	;'o'
   535  0070F4  72                 	db	114	;'r'
   536  0070F5  6D                 	db	109	;'m'
   537  0070F6  61                 	db	97	;'a'
   538  0070F7  74                 	db	116	;'t'
   539  0070F8  3A                 	db	58	;':'
   540  0070F9  20                 	db	32
   541  0070FA  6D                 	db	109	;'m'
   542  0070FB  61                 	db	97	;'a'
   543  0070FC  73                 	db	115	;'s'
   544  0070FD  6B                 	db	107	;'k'
   545  0070FE  20                 	db	32
   546  0070FF  6D                 	db	109	;'m'
   547  007100  61                 	db	97	;'a'
   548  007101  73                 	db	115	;'s'
   549  007102  6B                 	db	107	;'k'
   550  007103  6E                 	db	110	;'n'
   551  007104  6F                 	db	111	;'o'
   552  007105  2C                 	db	44
   553  007106  70                 	db	112	;'p'
   554  007107  72                 	db	114	;'r'
   555  007108  69                 	db	105	;'i'
   556  007109  6F                 	db	111	;'o'
   557  00710A  2C                 	db	44
   558  00710B  63                 	db	99	;'c'
   559  00710C  6C                 	db	108	;'l'
   560  00710D  61                 	db	97	;'a'
   561  00710E  73                 	db	115	;'s'
   562  00710F  73                 	db	115	;'s'
   563  007110  2C                 	db	44
   564  007111  74                 	db	116	;'t'
   565  007112  79                 	db	121	;'y'
   566  007113  70                 	db	112	;'p'
   567  007114  65                 	db	101	;'e'
   568  007115  2C                 	db	44
   569  007116  6E                 	db	110	;'n'
   570  007117  6F                 	db	111	;'o'
   571  007118  64                 	db	100	;'d'
   572  007119  65                 	db	101	;'e'
   573  00711A  69                 	db	105	;'i'
   574  00711B  64                 	db	100	;'d'
   575  00711C  20                 	db	32
   576  00711D  28                 	db	40
   577  00711E  6D                 	db	109	;'m'
   578  00711F  61                 	db	97	;'a'
   579  007120  73                 	db	115	;'s'
   580  007121  6B                 	db	107	;'k'
   581  007122  6E                 	db	110	;'n'
   582  007123  6F                 	db	111	;'o'
   583  007124  20                 	db	32
   584  007125  3D                 	db	61	;'='
   585  007126  20                 	db	32
   586  007127  30                 	db	48	;'0'
   587  007128  20                 	db	32
   588  007129  6F                 	db	111	;'o'
   589  00712A  72                 	db	114	;'r'
   590  00712B  20                 	db	32
   591  00712C  31                 	db	49	;'1'
   592  00712D  29                 	db	41
   593  00712E  2E                 	db	46
   594  00712F  0D                 	db	13
   595  007130  0A                 	db	10
   596  007131  00                 	db	0
   597  007132                     STR_214:
   598  007132  52                 	db	82	;'R'
   599  007133  52                 	db	82	;'R'
   600  007134  45                 	db	69	;'E'
   601  007135  47                 	db	71	;'G'
   602  007136  20                 	db	32
   603  007137  2D                 	db	45
   604  007138  20                 	db	32
   605  007139  52                 	db	82	;'R'
   606  00713A  65                 	db	101	;'e'
   607  00713B  61                 	db	97	;'a'
   608  00713C  64                 	db	100	;'d'
   609  00713D  20                 	db	32
   610  00713E  72                 	db	114	;'r'
   611  00713F  65                 	db	101	;'e'
   612  007140  67                 	db	103	;'g'
   613  007141  69                 	db	105	;'i'
   614  007142  73                 	db	115	;'s'
   615  007143  74                 	db	116	;'t'
   616  007144  65                 	db	101	;'e'
   617  007145  72                 	db	114	;'r'
   618  007146  28                 	db	40
   619  007147  73                 	db	115	;'s'
   620  007148  29                 	db	41
   621  007149  20                 	db	32
   622  00714A  6F                 	db	111	;'o'
   623  00714B  66                 	db	102	;'f'
   624  00714C  20                 	db	32
   625  00714D  6E                 	db	110	;'n'
   626  00714E  6F                 	db	111	;'o'
   627  00714F  64                 	db	100	;'d'
   628  007150  65                 	db	101	;'e'
   629  007151  20                 	db	32
   630  007152  28                 	db	40
   631  007153  46                 	db	70	;'F'
   632  007154  6F                 	db	111	;'o'
   633  007155  72                 	db	114	;'r'
   634  007156  6D                 	db	109	;'m'
   635  007157  61                 	db	97	;'a'
   636  007158  74                 	db	116	;'t'
   637  007159  3A                 	db	58	;':'
   638  00715A  20                 	db	32
   639  00715B  72                 	db	114	;'r'
   640  00715C  72                 	db	114	;'r'
   641  00715D  65                 	db	101	;'e'
   642  00715E  67                 	db	103	;'g'
   643  00715F  20                 	db	32
   644  007160  5B                 	db	91	;'['
   645  007161  70                 	db	112	;'p'
   646  007162  61                 	db	97	;'a'
   647  007163  67                 	db	103	;'g'
   648  007164  65                 	db	101	;'e'
   649  007165  3A                 	db	58	;':'
   650  007166  5D                 	db	93	;']'
   651  007167  72                 	db	114	;'r'
   652  007168  65                 	db	101	;'e'
   653  007169  67                 	db	103	;'g'
   654  00716A  20                 	db	32
   655  00716B  5B                 	db	91	;'['
   656  00716C  63                 	db	99	;'c'
   657  00716D  6F                 	db	111	;'o'
   658  00716E  75                 	db	117	;'u'
   659  00716F  6E                 	db	110	;'n'
   660  007170  74                 	db	116	;'t'
   661  007171  5D                 	db	93	;']'
   662  007172  29                 	db	41
   663  007173  2E                 	db	46
   664  007174  0D                 	db	13
   665  007175  0A                 	db	10
   666  007176  00                 	db	0
   667  007177                     STR_229:
   668  007177  2D                 	db	45
   669  007178  2D                 	db	45
   670  007179  2D                 	db	45
   671  00717A  2D                 	db	45
   672  00717B  2D                 	db	45
   673  00717C  2D                 	db	45
   674  00717D  2D                 	db	45
   675  00717E  2D                 	db	45
   676  00717F  2D                 	db	45
   677  007180  2D                 	db	45
   678  007181  2D                 	db	45
   679  007182  2D                 	db	45
   680  007183  2D                 	db	45
   681  007184  2D                 	db	45
   682  007185  2D                 	db	45
   683  007186  2D                 	db	45
   684  007187  2D                 	db	45
   685  007188  2D                 	db	45
   686  007189  2D                 	db	45
   687  00718A  2D                 	db	45
   688  00718B  2D                 	db	45
   689  00718C  2D                 	db	45
   690  00718D  2D                 	db	45
   691  00718E  2D                 	db	45
   692  00718F  2D                 	db	45
   693  007190  2D                 	db	45
   694  007191  2D                 	db	45
   695  007192  2D                 	db	45
   696  007193  2D                 	db	45
   697  007194  2D                 	db	45
   698  007195  2D                 	db	45
   699  007196  2D                 	db	45
   700  007197  2D                 	db	45
   701  007198  2D                 	db	45
   702  007199  2D                 	db	45
   703  00719A  2D                 	db	45
   704  00719B  2D                 	db	45
   705  00719C  2D                 	db	45
   706  00719D  2D                 	db	45
   707  00719E  2D                 	db	45
   708  00719F  2D                 	db	45
   709  0071A0  2D                 	db	45
   710  0071A1  2D                 	db	45
   711  0071A2  2D                 	db	45
   712  0071A3  2D                 	db	45
   713  0071A4  2D                 	db	45
   714  0071A5  2D                 	db	45
   715  0071A6  2D                 	db	45
   716  0071A7  2D                 	db	45
   717  0071A8  2D                 	db	45
   718  0071A9  2D                 	db	45
   719  0071AA  2D                 	db	45
   720  0071AB  2D                 	db	45
   721  0071AC  2D                 	db	45
   722  0071AD  2D                 	db	45
   723  0071AE  2D                 	db	45
   724  0071AF  2D                 	db	45
   725  0071B0  2D                 	db	45
   726  0071B1  2D                 	db	45
   727  0071B2  2D                 	db	45
   728  0071B3  2D                 	db	45
   729  0071B4  2D                 	db	45
   730  0071B5  2D                 	db	45
   731  0071B6  2D                 	db	45
   732  0071B7  0D                 	db	13
   733  0071B8  0A                 	db	10
   734  0071B9  00                 	db	0
   735  0071BA                     STR_224:
   736  0071BA  20                 	db	32
   737  0071BB  20                 	db	32
   738  0071BC  20                 	db	32
   739  0071BD  20                 	db	32
   740  0071BE  52                 	db	82	;'R'
   741  0071BF  57                 	db	87	;'W'
   742  0071C0  54                 	db	84	;'T'
   743  0071C1  49                 	db	73	;'I'
   744  0071C2  4D                 	db	77	;'M'
   745  0071C3  45                 	db	69	;'E'
   746  0071C4  4F                 	db	79	;'O'
   747  0071C5  55                 	db	85	;'U'
   748  0071C6  54                 	db	84	;'T'
   749  0071C7  20                 	db	32
   750  0071C8  2D                 	db	45
   751  0071C9  20                 	db	32
   752  0071CA  53                 	db	83	;'S'
   753  0071CB  65                 	db	101	;'e'
   754  0071CC  74                 	db	116	;'t'
   755  0071CD  20                 	db	32
   756  0071CE  72                 	db	114	;'r'
   757  0071CF  65                 	db	101	;'e'
   758  0071D0  67                 	db	103	;'g'
   759  0071D1  69                 	db	105	;'i'
   760  0071D2  73                 	db	115	;'s'
   761  0071D3  74                 	db	116	;'t'
   762  0071D4  65                 	db	101	;'e'
   763  0071D5  72                 	db	114	;'r'
   764  0071D6  20                 	db	32
   765  0071D7  72                 	db	114	;'r'
   766  0071D8  65                 	db	101	;'e'
   767  0071D9  61                 	db	97	;'a'
   768  0071DA  64                 	db	100	;'d'
   769  0071DB  2F                 	db	47
   770  0071DC  77                 	db	119	;'w'
   771  0071DD  72                 	db	114	;'r'
   772  0071DE  69                 	db	105	;'i'
   773  0071DF  74                 	db	116	;'t'
   774  0071E0  65                 	db	101	;'e'
   775  0071E1  20                 	db	32
   776  0071E2  74                 	db	116	;'t'
   777  0071E3  69                 	db	105	;'i'
   778  0071E4  6D                 	db	109	;'m'
   779  0071E5  65                 	db	101	;'e'
   780  0071E6  6F                 	db	111	;'o'
   781  0071E7  75                 	db	117	;'u'
   782  0071E8  74                 	db	116	;'t'
   783  0071E9  2E                 	db	46
   784  0071EA  20                 	db	32
   785  0071EB  44                 	db	68	;'D'
   786  0071EC  65                 	db	101	;'e'
   787  0071ED  66                 	db	102	;'f'
   788  0071EE  61                 	db	97	;'a'
   789  0071EF  75                 	db	117	;'u'
   790  0071F0  6C                 	db	108	;'l'
   791  0071F1  74                 	db	116	;'t'
   792  0071F2  3D                 	db	61	;'='
   793  0071F3  31                 	db	49	;'1'
   794  0071F4  30                 	db	48	;'0'
   795  0071F5  20                 	db	32
   796  0071F6  6D                 	db	109	;'m'
   797  0071F7  73                 	db	115	;'s'
   798  0071F8  20                 	db	32
   799  0071F9  2E                 	db	46
   800  0071FA  0D                 	db	13
   801  0071FB  0A                 	db	10
   802  0071FC  00                 	db	0
   803  0071FD                     STR_215:
   804  0071FD  57                 	db	87	;'W'
   805  0071FE  52                 	db	82	;'R'
   806  0071FF  45                 	db	69	;'E'
   807  007200  47                 	db	71	;'G'
   808  007201  20                 	db	32
   809  007202  2D                 	db	45
   810  007203  20                 	db	32
   811  007204  57                 	db	87	;'W'
   812  007205  72                 	db	114	;'r'
   813  007206  69                 	db	105	;'i'
   814  007207  74                 	db	116	;'t'
   815  007208  65                 	db	101	;'e'
   816  007209  20                 	db	32
   817  00720A  72                 	db	114	;'r'
   818  00720B  65                 	db	101	;'e'
   819  00720C  67                 	db	103	;'g'
   820  00720D  69                 	db	105	;'i'
   821  00720E  73                 	db	115	;'s'
   822  00720F  74                 	db	116	;'t'
   823  007210  65                 	db	101	;'e'
   824  007211  72                 	db	114	;'r'
   825  007212  20                 	db	32
   826  007213  6F                 	db	111	;'o'
   827  007214  66                 	db	102	;'f'
   828  007215  20                 	db	32
   829  007216  6E                 	db	110	;'n'
   830  007217  6F                 	db	111	;'o'
   831  007218  64                 	db	100	;'d'
   832  007219  65                 	db	101	;'e'
   833  00721A  20                 	db	32
   834  00721B  28                 	db	40
   835  00721C  46                 	db	70	;'F'
   836  00721D  6F                 	db	111	;'o'
   837  00721E  72                 	db	114	;'r'
   838  00721F  6D                 	db	109	;'m'
   839  007220  61                 	db	97	;'a'
   840  007221  74                 	db	116	;'t'
   841  007222  3A                 	db	58	;':'
   842  007223  20                 	db	32
   843  007224  77                 	db	119	;'w'
   844  007225  72                 	db	114	;'r'
   845  007226  65                 	db	101	;'e'
   846  007227  67                 	db	103	;'g'
   847  007228  20                 	db	32
   848  007229  5B                 	db	91	;'['
   849  00722A  70                 	db	112	;'p'
   850  00722B  61                 	db	97	;'a'
   851  00722C  67                 	db	103	;'g'
   852  00722D  65                 	db	101	;'e'
   853  00722E  3A                 	db	58	;':'
   854  00722F  5D                 	db	93	;']'
   855  007230  72                 	db	114	;'r'
   856  007231  65                 	db	101	;'e'
   857  007232  67                 	db	103	;'g'
   858  007233  20                 	db	32
   859  007234  63                 	db	99	;'c'
   860  007235  6F                 	db	111	;'o'
   861  007236  6E                 	db	110	;'n'
   862  007237  74                 	db	116	;'t'
   863  007238  65                 	db	101	;'e'
   864  007239  6E                 	db	110	;'n'
   865  00723A  74                 	db	116	;'t'
   866  00723B  29                 	db	41
   867  00723C  2E                 	db	46
   868  00723D  0D                 	db	13
   869  00723E  0A                 	db	10
   870  00723F  00                 	db	0
   871  007240                     STR_84:
   872  007240  2D                 	db	45
   873  007241  45                 	db	69	;'E'
   874  007242  52                 	db	82	;'R'
   875  007243  52                 	db	82	;'R'
   876  007244  4F                 	db	79	;'O'
   877  007245  52                 	db	82	;'R'
   878  007246  20                 	db	32
   879  007247  2D                 	db	45
   880  007248  20                 	db	32
   881  007249  46                 	db	70	;'F'
   882  00724A  69                 	db	105	;'i'
   883  00724B  6C                 	db	108	;'l'
   884  00724C  74                 	db	116	;'t'
   885  00724D  65                 	db	101	;'e'
   886  00724E  72                 	db	114	;'r'
   887  00724F  20                 	db	32
   888  007250  6E                 	db	110	;'n'
   889  007251  75                 	db	117	;'u'
   890  007252  6D                 	db	109	;'m'
   891  007253  62                 	db	98	;'b'
   892  007254  65                 	db	101	;'e'
   893  007255  72                 	db	114	;'r'
   894  007256  20                 	db	32
   895  007257  63                 	db	99	;'c'
   896  007258  61                 	db	97	;'a'
   897  007259  6E                 	db	110	;'n'
   898  00725A  20                 	db	32
   899  00725B  6F                 	db	111	;'o'
   900  00725C  6E                 	db	110	;'n'
   901  00725D  6C                 	db	108	;'l'
   902  00725E  79                 	db	121	;'y'
   903  00725F  20                 	db	32
   904  007260  62                 	db	98	;'b'
   905  007261  65                 	db	101	;'e'
   906  007262  20                 	db	32
   907  007263  73                 	db	115	;'s'
   908  007264  65                 	db	101	;'e'
   909  007265  74                 	db	116	;'t'
   910  007266  20                 	db	32
   911  007267  74                 	db	116	;'t'
   912  007268  6F                 	db	111	;'o'
   913  007269  20                 	db	32
   914  00726A  61                 	db	97	;'a'
   915  00726B  20                 	db	32
   916  00726C  76                 	db	118	;'v'
   917  00726D  61                 	db	97	;'a'
   918  00726E  6C                 	db	108	;'l'
   919  00726F  75                 	db	117	;'u'
   920  007270  65                 	db	101	;'e'
   921  007271  20                 	db	32
   922  007272  62                 	db	98	;'b'
   923  007273  65                 	db	101	;'e'
   924  007274  74                 	db	116	;'t'
   925  007275  77                 	db	119	;'w'
   926  007276  65                 	db	101	;'e'
   927  007277  65                 	db	101	;'e'
   928  007278  6E                 	db	110	;'n'
   929  007279  20                 	db	32
   930  00727A  30                 	db	48	;'0'
   931  00727B  2D                 	db	45
   932  00727C  31                 	db	49	;'1'
   933  00727D  35                 	db	53	;'5'
   934  00727E  2E                 	db	46
   935  00727F  0D                 	db	13
   936  007280  0A                 	db	10
   937  007281  00                 	db	0
   938  007282                     STR_227:
   939  007282  20                 	db	32
   940  007283  20                 	db	32
   941  007284  20                 	db	32
   942  007285  20                 	db	32
   943  007286  4D                 	db	77	;'M'
   944  007287  4F                 	db	79	;'O'
   945  007288  44                 	db	68	;'D'
   946  007289  45                 	db	69	;'E'
   947  00728A  20                 	db	32
   948  00728B  2D                 	db	45
   949  00728C  20                 	db	32
   950  00728D  53                 	db	83	;'S'
   951  00728E  65                 	db	101	;'e'
   952  00728F  74                 	db	116	;'t'
   953  007290  20                 	db	32
   954  007291  61                 	db	97	;'a'
   955  007292  64                 	db	100	;'d'
   956  007293  61                 	db	97	;'a'
   957  007294  70                 	db	112	;'p'
   958  007295  74                 	db	116	;'t'
   959  007296  65                 	db	101	;'e'
   960  007297  72                 	db	114	;'r'
   961  007298  20                 	db	32
   962  007299  6D                 	db	109	;'m'
   963  00729A  6F                 	db	111	;'o'
   964  00729B  64                 	db	100	;'d'
   965  00729C  65                 	db	101	;'e'
   966  00729D  20                 	db	32
   967  00729E  74                 	db	116	;'t'
   968  00729F  68                 	db	104	;'h'
   969  0072A0  61                 	db	97	;'a'
   970  0072A1  74                 	db	116	;'t'
   971  0072A2  20                 	db	32
   972  0072A3  73                 	db	115	;'s'
   973  0072A4  68                 	db	104	;'h'
   974  0072A5  6F                 	db	111	;'o'
   975  0072A6  75                 	db	117	;'u'
   976  0072A7  6C                 	db	108	;'l'
   977  0072A8  64                 	db	100	;'d'
   978  0072A9  20                 	db	32
   979  0072AA  62                 	db	98	;'b'
   980  0072AB  65                 	db	101	;'e'
   981  0072AC  20                 	db	32
   982  0072AD  75                 	db	117	;'u'
   983  0072AE  73                 	db	115	;'s'
   984  0072AF  65                 	db	101	;'e'
   985  0072B0  64                 	db	100	;'d'
   986  0072B1  20                 	db	32
   987  0072B2  6F                 	db	111	;'o'
   988  0072B3  6E                 	db	110	;'n'
   989  0072B4  20                 	db	32
   990  0072B5  73                 	db	115	;'s'
   991  0072B6  74                 	db	116	;'t'
   992  0072B7  61                 	db	97	;'a'
   993  0072B8  72                 	db	114	;'r'
   994  0072B9  74                 	db	116	;'t'
   995  0072BA  75                 	db	117	;'u'
   996  0072BB  70                 	db	112	;'p'
   997  0072BC  2E                 	db	46
   998  0072BD  0D                 	db	13
   999  0072BE  0A                 	db	10
  1000  0072BF  00                 	db	0
  1001  0072C0                     STR_187:
  1002  0072C0  54                 	db	84	;'T'
  1003  0072C1  72                 	db	114	;'r'
  1004  0072C2  61                 	db	97	;'a'
  1005  0072C3  6E                 	db	110	;'n'
  1006  0072C4  73                 	db	115	;'s'
  1007  0072C5  6D                 	db	109	;'m'
  1008  0072C6  69                 	db	105	;'i'
  1009  0072C7  74                 	db	116	;'t'
  1010  0072C8  74                 	db	116	;'t'
  1011  0072C9  65                 	db	101	;'e'
  1012  0072CA  72                 	db	114	;'r'
  1013  0072CB  20                 	db	32
  1014  0072CC  69                 	db	105	;'i'
  1015  0072CD  6E                 	db	110	;'n'
  1016  0072CE  20                 	db	32
  1017  0072CF  45                 	db	69	;'E'
  1018  0072D0  72                 	db	114	;'r'
  1019  0072D1  72                 	db	114	;'r'
  1020  0072D2  6F                 	db	111	;'o'
  1021  0072D3  72                 	db	114	;'r'
  1022  0072D4  20                 	db	32
  1023  0072D5  53                 	db	83	;'S'
  1024  0072D6  74                 	db	116	;'t'
  1025  0072D7  61                 	db	97	;'a'
  1026  0072D8  74                 	db	116	;'t'
  1027  0072D9  65                 	db	101	;'e'
  1028  0072DA  20                 	db	32
  1029  0072DB  57                 	db	87	;'W'
  1030  0072DC  61                 	db	97	;'a'
  1031  0072DD  72                 	db	114	;'r'
  1032  0072DE  6E                 	db	110	;'n'
  1033  0072DF  69                 	db	105	;'i'
  1034  0072E0  6E                 	db	110	;'n'
  1035  0072E1  67                 	db	103	;'g'
  1036  0072E2  20                 	db	32
  1037  0072E3  28                 	db	40
  1038  0072E4  31                 	db	49	;'1'
  1039  0072E5  32                 	db	50	;'2'
  1040  0072E6  38                 	db	56	;'8'
  1041  0072E7  20                 	db	32
  1042  0072E8  3E                 	db	62	;'>'
  1043  0072E9  20                 	db	32
  1044  0072EA  54                 	db	84	;'T'
  1045  0072EB  45                 	db	69	;'E'
  1046  0072EC  52                 	db	82	;'R'
  1047  0072ED  52                 	db	82	;'R'
  1048  0072EE  43                 	db	67	;'C'
  1049  0072EF  4E                 	db	78	;'N'
  1050  0072F0  54                 	db	84	;'T'
  1051  0072F1  20                 	db	32
  1052  0072F2  3F                 	db	63	;'?'
  1053  0072F3  20                 	db	32
  1054  0072F4  39                 	db	57	;'9'
  1055  0072F5  36                 	db	54	;'6'
  1056  0072F6  29                 	db	41
  1057  0072F7  0D                 	db	13
  1058  0072F8  0A                 	db	10
  1059  0072F9  00                 	db	0
  1060  0072FA                     STR_189:
  1061  0072FA  54                 	db	84	;'T'
  1062  0072FB  72                 	db	114	;'r'
  1063  0072FC  61                 	db	97	;'a'
  1064  0072FD  6E                 	db	110	;'n'
  1065  0072FE  73                 	db	115	;'s'
  1066  0072FF  6D                 	db	109	;'m'
  1067  007300  69                 	db	105	;'i'
  1068  007301  74                 	db	116	;'t'
  1069  007302  74                 	db	116	;'t'
  1070  007303  65                 	db	101	;'e'
  1071  007304  72                 	db	114	;'r'
  1072  007305  20                 	db	32
  1073  007306  69                 	db	105	;'i'
  1074  007307  6E                 	db	110	;'n'
  1075  007308  20                 	db	32
  1076  007309  45                 	db	69	;'E'
  1077  00730A  72                 	db	114	;'r'
  1078  00730B  72                 	db	114	;'r'
  1079  00730C  6F                 	db	111	;'o'
  1080  00730D  72                 	db	114	;'r'
  1081  00730E  20                 	db	32
  1082  00730F  53                 	db	83	;'S'
  1083  007310  74                 	db	116	;'t'
  1084  007311  61                 	db	97	;'a'
  1085  007312  74                 	db	116	;'t'
  1086  007313  65                 	db	101	;'e'
  1087  007314  20                 	db	32
  1088  007315  42                 	db	66	;'B'
  1089  007316  75                 	db	117	;'u'
  1090  007317  73                 	db	115	;'s'
  1091  007318  20                 	db	32
  1092  007319  50                 	db	80	;'P'
  1093  00731A  61                 	db	97	;'a'
  1094  00731B  73                 	db	115	;'s'
  1095  00731C  73                 	db	115	;'s'
  1096  00731D  69                 	db	105	;'i'
  1097  00731E  76                 	db	118	;'v'
  1098  00731F  65                 	db	101	;'e'
  1099  007320  20                 	db	32
  1100  007321  28                 	db	40
  1101  007322  54                 	db	84	;'T'
  1102  007323  45                 	db	69	;'E'
  1103  007324  52                 	db	82	;'R'
  1104  007325  52                 	db	82	;'R'
  1105  007326  43                 	db	67	;'C'
  1106  007327  4E                 	db	78	;'N'
  1107  007328  54                 	db	84	;'T'
  1108  007329  20                 	db	32
  1109  00732A  3F                 	db	63	;'?'
  1110  00732B  20                 	db	32
  1111  00732C  31                 	db	49	;'1'
  1112  00732D  32                 	db	50	;'2'
  1113  00732E  38                 	db	56	;'8'
  1114  00732F  29                 	db	41
  1115  007330  0D                 	db	13
  1116  007331  0A                 	db	10
  1117  007332  00                 	db	0
  1118  007333                     STR_208:
  1119  007333  20                 	db	32
  1120  007334  20                 	db	32
  1121  007335  20                 	db	32
  1122  007336  20                 	db	32
  1123  007337  20                 	db	32
  1124  007338  46                 	db	70	;'F'
  1125  007339  6F                 	db	111	;'o'
  1126  00733A  72                 	db	114	;'r'
  1127  00733B  6D                 	db	109	;'m'
  1128  00733C  61                 	db	97	;'a'
  1129  00733D  74                 	db	116	;'t'
  1130  00733E  3A                 	db	58	;':'
  1131  00733F  20                 	db	32
  1132  007340  70                 	db	112	;'p'
  1133  007341  72                 	db	114	;'r'
  1134  007342  69                 	db	105	;'i'
  1135  007343  6F                 	db	111	;'o'
  1136  007344  72                 	db	114	;'r'
  1137  007345  69                 	db	105	;'i'
  1138  007346  74                 	db	116	;'t'
  1139  007347  79                 	db	121	;'y'
  1140  007348  2C                 	db	44
  1141  007349  63                 	db	99	;'c'
  1142  00734A  6C                 	db	108	;'l'
  1143  00734B  61                 	db	97	;'a'
  1144  00734C  73                 	db	115	;'s'
  1145  00734D  73                 	db	115	;'s'
  1146  00734E  2C                 	db	44
  1147  00734F  74                 	db	116	;'t'
  1148  007350  79                 	db	121	;'y'
  1149  007351  70                 	db	112	;'p'
  1150  007352  65                 	db	101	;'e'
  1151  007353  2C                 	db	44
  1152  007354  6E                 	db	110	;'n'
  1153  007355  6F                 	db	111	;'o'
  1154  007356  64                 	db	100	;'d'
  1155  007357  65                 	db	101	;'e'
  1156  007358  69                 	db	105	;'i'
  1157  007359  64                 	db	100	;'d'
  1158  00735A  2C                 	db	44
  1159  00735B  63                 	db	99	;'c'
  1160  00735C  6F                 	db	111	;'o'
  1161  00735D  75                 	db	117	;'u'
  1162  00735E  6E                 	db	110	;'n'
  1163  00735F  74                 	db	116	;'t'
  1164  007360  2C                 	db	44
  1165  007361  64                 	db	100	;'d'
  1166  007362  61                 	db	97	;'a'
  1167  007363  74                 	db	116	;'t'
  1168  007364  61                 	db	97	;'a'
  1169  007365  2C                 	db	44
  1170  007366  2C                 	db	44
  1171  007367  2C                 	db	44
  1172  007368  0D                 	db	13
  1173  007369  0A                 	db	10
  1174  00736A  00                 	db	0
  1175  00736B                     STR_194:
  1176  00736B  52                 	db	82	;'R'
  1177  00736C  65                 	db	101	;'e'
  1178  00736D  63                 	db	99	;'c'
  1179  00736E  65                 	db	101	;'e'
  1180  00736F  69                 	db	105	;'i'
  1181  007370  76                 	db	118	;'v'
  1182  007371  65                 	db	101	;'e'
  1183  007372  72                 	db	114	;'r'
  1184  007373  20                 	db	32
  1185  007374  69                 	db	105	;'i'
  1186  007375  6E                 	db	110	;'n'
  1187  007376  20                 	db	32
  1188  007377  45                 	db	69	;'E'
  1189  007378  72                 	db	114	;'r'
  1190  007379  72                 	db	114	;'r'
  1191  00737A  6F                 	db	111	;'o'
  1192  00737B  72                 	db	114	;'r'
  1193  00737C  20                 	db	32
  1194  00737D  53                 	db	83	;'S'
  1195  00737E  74                 	db	116	;'t'
  1196  00737F  61                 	db	97	;'a'
  1197  007380  74                 	db	116	;'t'
  1198  007381  65                 	db	101	;'e'
  1199  007382  20                 	db	32
  1200  007383  57                 	db	87	;'W'
  1201  007384  61                 	db	97	;'a'
  1202  007385  72                 	db	114	;'r'
  1203  007386  6E                 	db	110	;'n'
  1204  007387  69                 	db	105	;'i'
  1205  007388  6E                 	db	110	;'n'
  1206  007389  67                 	db	103	;'g'
  1207  00738A  20                 	db	32
  1208  00738B  28                 	db	40
  1209  00738C  31                 	db	49	;'1'
  1210  00738D  32                 	db	50	;'2'
  1211  00738E  38                 	db	56	;'8'
  1212  00738F  20                 	db	32
  1213  007390  3E                 	db	62	;'>'
  1214  007391  20                 	db	32
  1215  007392  52                 	db	82	;'R'
  1216  007393  45                 	db	69	;'E'
  1217  007394  52                 	db	82	;'R'
  1218  007395  52                 	db	82	;'R'
  1219  007396  43                 	db	67	;'C'
  1220  007397  4E                 	db	78	;'N'
  1221  007398  54                 	db	84	;'T'
  1222  007399  20                 	db	32
  1223  00739A  3F                 	db	63	;'?'
  1224  00739B  20                 	db	32
  1225  00739C  39                 	db	57	;'9'
  1226  00739D  36                 	db	54	;'6'
  1227  00739E  29                 	db	41
  1228  00739F  0D                 	db	13
  1229  0073A0  0A                 	db	10
  1230  0073A1  00                 	db	0
  1231  0073A2                     STR_226:
  1232  0073A2  20                 	db	32
  1233  0073A3  20                 	db	32
  1234  0073A4  20                 	db	32
  1235  0073A5  20                 	db	32
  1236  0073A6  53                 	db	83	;'S'
  1237  0073A7  54                 	db	84	;'T'
  1238  0073A8  41                 	db	65	;'A'
  1239  0073A9  52                 	db	82	;'R'
  1240  0073AA  54                 	db	84	;'T'
  1241  0073AB  49                 	db	73	;'I'
  1242  0073AC  46                 	db	70	;'F'
  1243  0073AD  20                 	db	32
  1244  0073AE  2D                 	db	45
  1245  0073AF  20                 	db	32
  1246  0073B0  53                 	db	83	;'S'
  1247  0073B1  65                 	db	101	;'e'
  1248  0073B2  74                 	db	116	;'t'
  1249  0073B3  20                 	db	32
  1250  0073B4  69                 	db	105	;'i'
  1251  0073B5  6E                 	db	110	;'n'
  1252  0073B6  74                 	db	116	;'t'
  1253  0073B7  65                 	db	101	;'e'
  1254  0073B8  72                 	db	114	;'r'
  1255  0073B9  66                 	db	102	;'f'
  1256  0073BA  61                 	db	97	;'a'
  1257  0073BB  63                 	db	99	;'c'
  1258  0073BC  65                 	db	101	;'e'
  1259  0073BD  20                 	db	32
  1260  0073BE  73                 	db	115	;'s'
  1261  0073BF  74                 	db	116	;'t'
  1262  0073C0  61                 	db	97	;'a'
  1263  0073C1  74                 	db	116	;'t'
  1264  0073C2  65                 	db	101	;'e'
  1265  0073C3  20                 	db	32
  1266  0073C4  74                 	db	116	;'t'
  1267  0073C5  6F                 	db	111	;'o'
  1268  0073C6  20                 	db	32
  1269  0073C7  75                 	db	117	;'u'
  1270  0073C8  73                 	db	115	;'s'
  1271  0073C9  65                 	db	101	;'e'
  1272  0073CA  20                 	db	32
  1273  0073CB  6F                 	db	111	;'o'
  1274  0073CC  6E                 	db	110	;'n'
  1275  0073CD  20                 	db	32
  1276  0073CE  73                 	db	115	;'s'
  1277  0073CF  74                 	db	116	;'t'
  1278  0073D0  61                 	db	97	;'a'
  1279  0073D1  72                 	db	114	;'r'
  1280  0073D2  74                 	db	116	;'t'
  1281  0073D3  75                 	db	117	;'u'
  1282  0073D4  70                 	db	112	;'p'
  1283  0073D5  2E                 	db	46
  1284  0073D6  0D                 	db	13
  1285  0073D7  0A                 	db	10
  1286  0073D8  00                 	db	0
  1287  0073D9  50                 	db	80	;'P'
  1288  0073DA  72                 	db	114	;'r'
  1289  0073DB  65                 	db	101	;'e'
  1290  0073DC  73                 	db	115	;'s'
  1291  0073DD  73                 	db	115	;'s'
  1292  0073DE  20                 	db	32
  1293  0073DF  27                 	db	39
  1294  0073E0  76                 	db	118	;'v'
  1295  0073E1  27                 	db	39
  1296  0073E2  20                 	db	32
  1297  0073E3  77                 	db	119	;'w'
  1298  0073E4  69                 	db	105	;'i'
  1299  0073E5  74                 	db	116	;'t'
  1300  0073E6  68                 	db	104	;'h'
  1301  0073E7  69                 	db	105	;'i'
  1302  0073E8  6E                 	db	110	;'n'
  1303  0073E9  20                 	db	32
  1304  0073EA  74                 	db	116	;'t'
  1305  0073EB  68                 	db	104	;'h'
  1306  0073EC  72                 	db	114	;'r'
  1307  0073ED  65                 	db	101	;'e'
  1308  0073EE  65                 	db	101	;'e'
  1309  0073EF  20                 	db	32
  1310  0073F0  73                 	db	115	;'s'
  1311  0073F1  65                 	db	101	;'e'
  1312  0073F2  63                 	db	99	;'c'
  1313  0073F3  6F                 	db	111	;'o'
  1314  0073F4  6E                 	db	110	;'n'
  1315  0073F5  64                 	db	100	;'d'
  1316  0073F6  73                 	db	115	;'s'
  1317  0073F7  20                 	db	32
  1318  0073F8  74                 	db	116	;'t'
  1319  0073F9  6F                 	db	111	;'o'
  1320  0073FA  20                 	db	32
  1321  0073FB  65                 	db	101	;'e'
  1322  0073FC  6E                 	db	110	;'n'
  1323  0073FD  74                 	db	116	;'t'
  1324  0073FE  65                 	db	101	;'e'
  1325  0073FF  72                 	db	114	;'r'
  1326  007400  20                 	db	32
  1327  007401  76                 	db	118	;'v'
  1328  007402  65                 	db	101	;'e'
  1329  007403  72                 	db	114	;'r'
  1330  007404  62                 	db	98	;'b'
  1331  007405  6F                 	db	111	;'o'
  1332  007406  73                 	db	115	;'s'
  1333  007407  65                 	db	101	;'e'
  1334  007408  20                 	db	32
  1335  007409  6D                 	db	109	;'m'
  1336  00740A  6F                 	db	111	;'o'
  1337  00740B  64                 	db	100	;'d'
  1338  00740C  65                 	db	101	;'e'
  1339  00740D  0D                 	db	13
  1340  00740E  0A                 	db	10
  1341  00740F  00                 	db	0
  1342  007410                     STR_195:
  1343  007410  52                 	db	82	;'R'
  1344  007411  65                 	db	101	;'e'
  1345  007412  63                 	db	99	;'c'
  1346  007413  65                 	db	101	;'e'
  1347  007414  69                 	db	105	;'i'
  1348  007415  76                 	db	118	;'v'
  1349  007416  65                 	db	101	;'e'
  1350  007417  72                 	db	114	;'r'
  1351  007418  20                 	db	32
  1352  007419  69                 	db	105	;'i'
  1353  00741A  6E                 	db	110	;'n'
  1354  00741B  20                 	db	32
  1355  00741C  45                 	db	69	;'E'
  1356  00741D  72                 	db	114	;'r'
  1357  00741E  72                 	db	114	;'r'
  1358  00741F  6F                 	db	111	;'o'
  1359  007420  72                 	db	114	;'r'
  1360  007421  20                 	db	32
  1361  007422  53                 	db	83	;'S'
  1362  007423  74                 	db	116	;'t'
  1363  007424  61                 	db	97	;'a'
  1364  007425  74                 	db	116	;'t'
  1365  007426  65                 	db	101	;'e'
  1366  007427  20                 	db	32
  1367  007428  42                 	db	66	;'B'
  1368  007429  75                 	db	117	;'u'
  1369  00742A  73                 	db	115	;'s'
  1370  00742B  20                 	db	32
  1371  00742C  50                 	db	80	;'P'
  1372  00742D  61                 	db	97	;'a'
  1373  00742E  73                 	db	115	;'s'
  1374  00742F  73                 	db	115	;'s'
  1375  007430  69                 	db	105	;'i'
  1376  007431  76                 	db	118	;'v'
  1377  007432  65                 	db	101	;'e'
  1378  007433  20                 	db	32
  1379  007434  28                 	db	40
  1380  007435  52                 	db	82	;'R'
  1381  007436  45                 	db	69	;'E'
  1382  007437  52                 	db	82	;'R'
  1383  007438  52                 	db	82	;'R'
  1384  007439  43                 	db	67	;'C'
  1385  00743A  4E                 	db	78	;'N'
  1386  00743B  54                 	db	84	;'T'
  1387  00743C  20                 	db	32
  1388  00743D  3F                 	db	63	;'?'
  1389  00743E  20                 	db	32
  1390  00743F  31                 	db	49	;'1'
  1391  007440  32                 	db	50	;'2'
  1392  007441  38                 	db	56	;'8'
  1393  007442  29                 	db	41
  1394  007443  0D                 	db	13
  1395  007444  0A                 	db	10
  1396  007445  00                 	db	0
  1397  007446                     STR_67:
  1398  007446  2D                 	db	45
  1399  007447  45                 	db	69	;'E'
  1400  007448  52                 	db	82	;'R'
  1401  007449  52                 	db	82	;'R'
  1402  00744A  4F                 	db	79	;'O'
  1403  00744B  52                 	db	82	;'R'
  1404  00744C  20                 	db	32
  1405  00744D  2D                 	db	45
  1406  00744E  20                 	db	32
  1407  00744F  4F                 	db	79	;'O'
  1408  007450  6E                 	db	110	;'n'
  1409  007451  65                 	db	101	;'e'
  1410  007452  20                 	db	32
  1411  007453  6F                 	db	111	;'o'
  1412  007454  72                 	db	114	;'r'
  1413  007455  20                 	db	32
  1414  007456  6D                 	db	109	;'m'
  1415  007457  6F                 	db	111	;'o'
  1416  007458  72                 	db	114	;'r'
  1417  007459  65                 	db	101	;'e'
  1418  00745A  20                 	db	32
  1419  00745B  72                 	db	114	;'r'
  1420  00745C  65                 	db	101	;'e'
  1421  00745D  67                 	db	103	;'g'
  1422  00745E  69                 	db	105	;'i'
  1423  00745F  73                 	db	115	;'s'
  1424  007460  74                 	db	116	;'t'
  1425  007461  65                 	db	101	;'e'
  1426  007462  72                 	db	114	;'r'
  1427  007463  28                 	db	40
  1428  007464  73                 	db	115	;'s'
  1429  007465  29                 	db	41
  1430  007466  20                 	db	32
  1431  007467  63                 	db	99	;'c'
  1432  007468  6F                 	db	111	;'o'
  1433  007469  75                 	db	117	;'u'
  1434  00746A  6C                 	db	108	;'l'
  1435  00746B  64                 	db	100	;'d'
  1436  00746C  20                 	db	32
  1437  00746D  6E                 	db	110	;'n'
  1438  00746E  6F                 	db	111	;'o'
  1439  00746F  74                 	db	116	;'t'
  1440  007470  20                 	db	32
  1441  007471  62                 	db	98	;'b'
  1442  007472  65                 	db	101	;'e'
  1443  007473  20                 	db	32
  1444  007474  72                 	db	114	;'r'
  1445  007475  65                 	db	101	;'e'
  1446  007476  61                 	db	97	;'a'
  1447  007477  64                 	db	100	;'d'
  1448  007478  2E                 	db	46
  1449  007479  0D                 	db	13
  1450  00747A  0A                 	db	10
  1451  00747B  00                 	db	0
  1452  00747C                     STR_188:
  1453  00747C  54                 	db	84	;'T'
  1454  00747D  72                 	db	114	;'r'
  1455  00747E  61                 	db	97	;'a'
  1456  00747F  6E                 	db	110	;'n'
  1457  007480  73                 	db	115	;'s'
  1458  007481  6D                 	db	109	;'m'
  1459  007482  69                 	db	105	;'i'
  1460  007483  74                 	db	116	;'t'
  1461  007484  74                 	db	116	;'t'
  1462  007485  65                 	db	101	;'e'
  1463  007486  72                 	db	114	;'r'
  1464  007487  20                 	db	32
  1465  007488  69                 	db	105	;'i'
  1466  007489  6E                 	db	110	;'n'
  1467  00748A  20                 	db	32
  1468  00748B  45                 	db	69	;'E'
  1469  00748C  72                 	db	114	;'r'
  1470  00748D  72                 	db	114	;'r'
  1471  00748E  6F                 	db	111	;'o'
  1472  00748F  72                 	db	114	;'r'
  1473  007490  20                 	db	32
  1474  007491  53                 	db	83	;'S'
  1475  007492  74                 	db	116	;'t'
  1476  007493  61                 	db	97	;'a'
  1477  007494  74                 	db	116	;'t'
  1478  007495  65                 	db	101	;'e'
  1479  007496  20                 	db	32
  1480  007497  42                 	db	66	;'B'
  1481  007498  75                 	db	117	;'u'
  1482  007499  73                 	db	115	;'s'
  1483  00749A  20                 	db	32
  1484  00749B  4F                 	db	79	;'O'
  1485  00749C  46                 	db	70	;'F'
  1486  00749D  46                 	db	70	;'F'
  1487  00749E  20                 	db	32
  1488  00749F  28                 	db	40
  1489  0074A0  54                 	db	84	;'T'
  1490  0074A1  45                 	db	69	;'E'
  1491  0074A2  52                 	db	82	;'R'
  1492  0074A3  52                 	db	82	;'R'
  1493  0074A4  43                 	db	67	;'C'
  1494  0074A5  4E                 	db	78	;'N'
  1495  0074A6  54                 	db	84	;'T'
  1496  0074A7  20                 	db	32
  1497  0074A8  3F                 	db	63	;'?'
  1498  0074A9  20                 	db	32
  1499  0074AA  32                 	db	50	;'2'
  1500  0074AB  35                 	db	53	;'5'
  1501  0074AC  36                 	db	54	;'6'
  1502  0074AD  29                 	db	41
  1503  0074AE  0D                 	db	13
  1504  0074AF  0A                 	db	10
  1505  0074B0  00                 	db	0
  1506  0074B1                     STR_2:
  1507  0074B1  43                 	db	67	;'C'
  1508  0074B2  6F                 	db	111	;'o'
  1509  0074B3  70                 	db	112	;'p'
  1510  0074B4  79                 	db	121	;'y'
  1511  0074B5  72                 	db	114	;'r'
  1512  0074B6  69                 	db	105	;'i'
  1513  0074B7  67                 	db	103	;'g'
  1514  0074B8  68                 	db	104	;'h'
  1515  0074B9  74                 	db	116	;'t'
  1516  0074BA  20                 	db	32
  1517  0074BB  28                 	db	40
  1518  0074BC  43                 	db	67	;'C'
  1519  0074BD  29                 	db	41
  1520  0074BE  20                 	db	32
  1521  0074BF  32                 	db	50	;'2'
  1522  0074C0  30                 	db	48	;'0'
  1523  0074C1  31                 	db	49	;'1'
  1524  0074C2  34                 	db	52	;'4'
  1525  0074C3  2D                 	db	45
  1526  0074C4  32                 	db	50	;'2'
  1527  0074C5  30                 	db	48	;'0'
  1528  0074C6  31                 	db	49	;'1'
  1529  0074C7  35                 	db	53	;'5'
  1530  0074C8  20                 	db	32
  1531  0074C9  47                 	db	71	;'G'
  1532  0074CA  72                 	db	114	;'r'
  1533  0074CB  6F                 	db	111	;'o'
  1534  0074CC  64                 	db	100	;'d'
  1535  0074CD  61                 	db	97	;'a'
  1536  0074CE  6E                 	db	110	;'n'
  1537  0074CF  73                 	db	115	;'s'
  1538  0074D0  20                 	db	32
  1539  0074D1  50                 	db	80	;'P'
  1540  0074D2  61                 	db	97	;'a'
  1541  0074D3  72                 	db	114	;'r'
  1542  0074D4  61                 	db	97	;'a'
  1543  0074D5  64                 	db	100	;'d'
  1544  0074D6  69                 	db	105	;'i'
  1545  0074D7  73                 	db	115	;'s'
  1546  0074D8  20                 	db	32
  1547  0074D9  41                 	db	65	;'A'
  1548  0074DA  42                 	db	66	;'B'
  1549  0074DB  2C                 	db	44
  1550  0074DC  20                 	db	32
  1551  0074DD  53                 	db	83	;'S'
  1552  0074DE  77                 	db	119	;'w'
  1553  0074DF  65                 	db	101	;'e'
  1554  0074E0  64                 	db	100	;'d'
  1555  0074E1  65                 	db	101	;'e'
  1556  0074E2  6E                 	db	110	;'n'
  1557  0074E3  0D                 	db	13
  1558  0074E4  0A                 	db	10
  1559  0074E5  00                 	db	0
  1560  0074E6                     STR_196:
  1561  0074E6  54                 	db	84	;'T'
  1562  0074E7  72                 	db	114	;'r'
  1563  0074E8  61                 	db	97	;'a'
  1564  0074E9  6E                 	db	110	;'n'
  1565  0074EA  73                 	db	115	;'s'
  1566  0074EB  6D                 	db	109	;'m'
  1567  0074EC  69                 	db	105	;'i'
  1568  0074ED  74                 	db	116	;'t'
  1569  0074EE  74                 	db	116	;'t'
  1570  0074EF  65                 	db	101	;'e'
  1571  0074F0  72                 	db	114	;'r'
  1572  0074F1  20                 	db	32
  1573  0074F2  6F                 	db	111	;'o'
  1574  0074F3  72                 	db	114	;'r'
  1575  0074F4  20                 	db	32
  1576  0074F5  52                 	db	82	;'R'
  1577  0074F6  65                 	db	101	;'e'
  1578  0074F7  63                 	db	99	;'c'
  1579  0074F8  65                 	db	101	;'e'
  1580  0074F9  69                 	db	105	;'i'
  1581  0074FA  76                 	db	118	;'v'
  1582  0074FB  65                 	db	101	;'e'
  1583  0074FC  72                 	db	114	;'r'
  1584  0074FD  20                 	db	32
  1585  0074FE  69                 	db	105	;'i'
  1586  0074FF  73                 	db	115	;'s'
  1587  007500  20                 	db	32
  1588  007501  69                 	db	105	;'i'
  1589  007502  6E                 	db	110	;'n'
  1590  007503  20                 	db	32
  1591  007504  45                 	db	69	;'E'
  1592  007505  72                 	db	114	;'r'
  1593  007506  72                 	db	114	;'r'
  1594  007507  6F                 	db	111	;'o'
  1595  007508  72                 	db	114	;'r'
  1596  007509  20                 	db	32
  1597  00750A  53                 	db	83	;'S'
  1598  00750B  74                 	db	116	;'t'
  1599  00750C  61                 	db	97	;'a'
  1600  00750D  74                 	db	116	;'t'
  1601  00750E  65                 	db	101	;'e'
  1602  00750F  20                 	db	32
  1603  007510  57                 	db	87	;'W'
  1604  007511  61                 	db	97	;'a'
  1605  007512  72                 	db	114	;'r'
  1606  007513  6E                 	db	110	;'n'
  1607  007514  69                 	db	105	;'i'
  1608  007515  6E                 	db	110	;'n'
  1609  007516  67                 	db	103	;'g'
  1610  007517  0D                 	db	13
  1611  007518  0A                 	db	10
  1612  007519  00                 	db	0
  1613  00751A                     STR_202:
  1614  00751A  4C                 	db	76	;'L'
  1615  00751B  49                 	db	73	;'I'
  1616  00751C  53                 	db	83	;'S'
  1617  00751D  54                 	db	84	;'T'
  1618  00751E  45                 	db	69	;'E'
  1619  00751F  4E                 	db	78	;'N'
  1620  007520  20                 	db	32
  1621  007521  2D                 	db	45
  1622  007522  20                 	db	32
  1623  007523  4F                 	db	79	;'O'
  1624  007524  70                 	db	112	;'p'
  1625  007525  65                 	db	101	;'e'
  1626  007526  6E                 	db	110	;'n'
  1627  007527  20                 	db	32
  1628  007528  43                 	db	67	;'C'
  1629  007529  41                 	db	65	;'A'
  1630  00752A  4E                 	db	78	;'N'
  1631  00752B  20                 	db	32
  1632  00752C  69                 	db	105	;'i'
  1633  00752D  6E                 	db	110	;'n'
  1634  00752E  74                 	db	116	;'t'
  1635  00752F  65                 	db	101	;'e'
  1636  007530  72                 	db	114	;'r'
  1637  007531  66                 	db	102	;'f'
  1638  007532  61                 	db	97	;'a'
  1639  007533  63                 	db	99	;'c'
  1640  007534  65                 	db	101	;'e'
  1641  007535  20                 	db	32
  1642  007536  69                 	db	105	;'i'
  1643  007537  6E                 	db	110	;'n'
  1644  007538  20                 	db	32
  1645  007539  6C                 	db	108	;'l'
  1646  00753A  69                 	db	105	;'i'
  1647  00753B  73                 	db	115	;'s'
  1648  00753C  74                 	db	116	;'t'
  1649  00753D  65                 	db	101	;'e'
  1650  00753E  6E                 	db	110	;'n'
  1651  00753F  20                 	db	32
  1652  007540  6F                 	db	111	;'o'
  1653  007541  6E                 	db	110	;'n'
  1654  007542  6C                 	db	108	;'l'
  1655  007543  79                 	db	121	;'y'
  1656  007544  20                 	db	32
  1657  007545  6D                 	db	109	;'m'
  1658  007546  6F                 	db	111	;'o'
  1659  007547  64                 	db	100	;'d'
  1660  007548  65                 	db	101	;'e'
  1661  007549  2E                 	db	46
  1662  00754A  0D                 	db	13
  1663  00754B  0A                 	db	10
  1664  00754C  00                 	db	0
  1665  00754D                     STR_96:
  1666  00754D  2D                 	db	45
  1667  00754E  45                 	db	69	;'E'
  1668  00754F  52                 	db	82	;'R'
  1669  007550  52                 	db	82	;'R'
  1670  007551  4F                 	db	79	;'O'
  1671  007552  52                 	db	82	;'R'
  1672  007553  20                 	db	32
  1673  007554  2D                 	db	45
  1674  007555  20                 	db	32
  1675  007556  4D                 	db	77	;'M'
  1676  007557  61                 	db	97	;'a'
  1677  007558  73                 	db	115	;'s'
  1678  007559  6B                 	db	107	;'k'
  1679  00755A  20                 	db	32
  1680  00755B  6E                 	db	110	;'n'
  1681  00755C  75                 	db	117	;'u'
  1682  00755D  6D                 	db	109	;'m'
  1683  00755E  62                 	db	98	;'b'
  1684  00755F  65                 	db	101	;'e'
  1685  007560  72                 	db	114	;'r'
  1686  007561  20                 	db	32
  1687  007562  63                 	db	99	;'c'
  1688  007563  61                 	db	97	;'a'
  1689  007564  6E                 	db	110	;'n'
  1690  007565  20                 	db	32
  1691  007566  6F                 	db	111	;'o'
  1692  007567  6E                 	db	110	;'n'
  1693  007568  6C                 	db	108	;'l'
  1694  007569  79                 	db	121	;'y'
  1695  00756A  20                 	db	32
  1696  00756B  62                 	db	98	;'b'
  1697  00756C  65                 	db	101	;'e'
  1698  00756D  20                 	db	32
  1699  00756E  73                 	db	115	;'s'
  1700  00756F  65                 	db	101	;'e'
  1701  007570  74                 	db	116	;'t'
  1702  007571  20                 	db	32
  1703  007572  61                 	db	97	;'a'
  1704  007573  73                 	db	115	;'s'
  1705  007574  20                 	db	32
  1706  007575  30                 	db	48	;'0'
  1707  007576  20                 	db	32
  1708  007577  6F                 	db	111	;'o'
  1709  007578  72                 	db	114	;'r'
  1710  007579  20                 	db	32
  1711  00757A  31                 	db	49	;'1'
  1712  00757B  2E                 	db	46
  1713  00757C  0D                 	db	13
  1714  00757D  0A                 	db	10
  1715  00757E  00                 	db	0
  1716  00757F                     STR_203:
  1717  00757F  4C                 	db	76	;'L'
  1718  007580  4F                 	db	79	;'O'
  1719  007581  4F                 	db	79	;'O'
  1720  007582  50                 	db	80	;'P'
  1721  007583  42                 	db	66	;'B'
  1722  007584  41                 	db	65	;'A'
  1723  007585  43                 	db	67	;'C'
  1724  007586  4B                 	db	75	;'K'
  1725  007587  20                 	db	32
  1726  007588  2D                 	db	45
  1727  007589  20                 	db	32
  1728  00758A  4F                 	db	79	;'O'
  1729  00758B  70                 	db	112	;'p'
  1730  00758C  65                 	db	101	;'e'
  1731  00758D  6E                 	db	110	;'n'
  1732  00758E  20                 	db	32
  1733  00758F  43                 	db	67	;'C'
  1734  007590  41                 	db	65	;'A'
  1735  007591  4E                 	db	78	;'N'
  1736  007592  20                 	db	32
  1737  007593  69                 	db	105	;'i'
  1738  007594  6E                 	db	110	;'n'
  1739  007595  74                 	db	116	;'t'
  1740  007596  65                 	db	101	;'e'
  1741  007597  72                 	db	114	;'r'
  1742  007598  66                 	db	102	;'f'
  1743  007599  61                 	db	97	;'a'
  1744  00759A  63                 	db	99	;'c'
  1745  00759B  65                 	db	101	;'e'
  1746  00759C  20                 	db	32
  1747  00759D  69                 	db	105	;'i'
  1748  00759E  6E                 	db	110	;'n'
  1749  00759F  20                 	db	32
  1750  0075A0  6C                 	db	108	;'l'
  1751  0075A1  6F                 	db	111	;'o'
  1752  0075A2  6F                 	db	111	;'o'
  1753  0075A3  70                 	db	112	;'p'
  1754  0075A4  62                 	db	98	;'b'
  1755  0075A5  61                 	db	97	;'a'
  1756  0075A6  63                 	db	99	;'c'
  1757  0075A7  6B                 	db	107	;'k'
  1758  0075A8  20                 	db	32
  1759  0075A9  6D                 	db	109	;'m'
  1760  0075AA  6F                 	db	111	;'o'
  1761  0075AB  64                 	db	100	;'d'
  1762  0075AC  65                 	db	101	;'e'
  1763  0075AD  2E                 	db	46
  1764  0075AE  0D                 	db	13
  1765  0075AF  0A                 	db	10
  1766  0075B0  00                 	db	0
  1767  0075B1                     STR_205:
  1768  0075B1  56                 	db	86	;'V'
  1769  0075B2  45                 	db	69	;'E'
  1770  0075B3  52                 	db	82	;'R'
  1771  0075B4  53                 	db	83	;'S'
  1772  0075B5  49                 	db	73	;'I'
  1773  0075B6  4F                 	db	79	;'O'
  1774  0075B7  4E                 	db	78	;'N'
  1775  0075B8  20                 	db	32
  1776  0075B9  2D                 	db	45
  1777  0075BA  20                 	db	32
  1778  0075BB  44                 	db	68	;'D'
  1779  0075BC  69                 	db	105	;'i'
  1780  0075BD  73                 	db	115	;'s'
  1781  0075BE  70                 	db	112	;'p'
  1782  0075BF  6C                 	db	108	;'l'
  1783  0075C0  61                 	db	97	;'a'
  1784  0075C1  79                 	db	121	;'y'
  1785  0075C2  20                 	db	32
  1786  0075C3  66                 	db	102	;'f'
  1787  0075C4  69                 	db	105	;'i'
  1788  0075C5  72                 	db	114	;'r'
  1789  0075C6  6D                 	db	109	;'m'
  1790  0075C7  77                 	db	119	;'w'
  1791  0075C8  61                 	db	97	;'a'
  1792  0075C9  72                 	db	114	;'r'
  1793  0075CA  65                 	db	101	;'e'
  1794  0075CB  20                 	db	32
  1795  0075CC  76                 	db	118	;'v'
  1796  0075CD  65                 	db	101	;'e'
  1797  0075CE  72                 	db	114	;'r'
  1798  0075CF  73                 	db	115	;'s'
  1799  0075D0  69                 	db	105	;'i'
  1800  0075D1  6F                 	db	111	;'o'
  1801  0075D2  6E                 	db	110	;'n'
  1802  0075D3  20                 	db	32
  1803  0075D4  69                 	db	105	;'i'
  1804  0075D5  6E                 	db	110	;'n'
  1805  0075D6  66                 	db	102	;'f'
  1806  0075D7  6F                 	db	111	;'o'
  1807  0075D8  72                 	db	114	;'r'
  1808  0075D9  6D                 	db	109	;'m'
  1809  0075DA  61                 	db	97	;'a'
  1810  0075DB  74                 	db	116	;'t'
  1811  0075DC  69                 	db	105	;'i'
  1812  0075DD  6F                 	db	111	;'o'
  1813  0075DE  6E                 	db	110	;'n'
  1814  0075DF  2E                 	db	46
  1815  0075E0  0D                 	db	13
  1816  0075E1  0A                 	db	10
  1817  0075E2  00                 	db	0
  1818  0075E3                     STR_225:
  1819  0075E3  20                 	db	32
  1820  0075E4  20                 	db	32
  1821  0075E5  20                 	db	32
  1822  0075E6  20                 	db	32
  1823  0075E7  20                 	db	32
  1824  0075E8  20                 	db	32
  1825  0075E9  20                 	db	32
  1826  0075EA  20                 	db	32
  1827  0075EB  20                 	db	32
  1828  0075EC  20                 	db	32
  1829  0075ED  20                 	db	32
  1830  0075EE  20                 	db	32
  1831  0075EF  20                 	db	32
  1832  0075F0  20                 	db	32
  1833  0075F1  20                 	db	32
  1834  0075F2  20                 	db	32
  1835  0075F3  46                 	db	70	;'F'
  1836  0075F4  6F                 	db	111	;'o'
  1837  0075F5  72                 	db	114	;'r'
  1838  0075F6  6D                 	db	109	;'m'
  1839  0075F7  61                 	db	97	;'a'
  1840  0075F8  74                 	db	116	;'t'
  1841  0075F9  3A                 	db	58	;':'
  1842  0075FA  20                 	db	32
  1843  0075FB  73                 	db	115	;'s'
  1844  0075FC  65                 	db	101	;'e'
  1845  0075FD  74                 	db	116	;'t'
  1846  0075FE  20                 	db	32
  1847  0075FF  72                 	db	114	;'r'
  1848  007600  77                 	db	119	;'w'
  1849  007601  74                 	db	116	;'t'
  1850  007602  69                 	db	105	;'i'
  1851  007603  6D                 	db	109	;'m'
  1852  007604  65                 	db	101	;'e'
  1853  007605  6F                 	db	111	;'o'
  1854  007606  75                 	db	117	;'u'
  1855  007607  74                 	db	116	;'t'
  1856  007608  20                 	db	32
  1857  007609  74                 	db	116	;'t'
  1858  00760A  69                 	db	105	;'i'
  1859  00760B  6D                 	db	109	;'m'
  1860  00760C  65                 	db	101	;'e'
  1861  00760D  6F                 	db	111	;'o'
  1862  00760E  75                 	db	117	;'u'
  1863  00760F  74                 	db	116	;'t'
  1864  007610  2E                 	db	46
  1865  007611  0D                 	db	13
  1866  007612  0A                 	db	10
  1867  007613  00                 	db	0
  1868  007614                     STR_223:
  1869  007614  20                 	db	32
  1870  007615  20                 	db	32
  1871  007616  20                 	db	32
  1872  007617  20                 	db	32
  1873  007618  44                 	db	68	;'D'
  1874  007619  45                 	db	69	;'E'
  1875  00761A  43                 	db	67	;'C'
  1876  00761B  49                 	db	73	;'I'
  1877  00761C  4D                 	db	77	;'M'
  1878  00761D  41                 	db	65	;'A'
  1879  00761E  4C                 	db	76	;'L'
  1880  00761F  20                 	db	32
  1881  007620  2D                 	db	45
  1882  007621  20                 	db	32
  1883  007622  44                 	db	68	;'D'
  1884  007623  69                 	db	105	;'i'
  1885  007624  73                 	db	115	;'s'
  1886  007625  70                 	db	112	;'p'
  1887  007626  6C                 	db	108	;'l'
  1888  007627  61                 	db	97	;'a'
  1889  007628  79                 	db	121	;'y'
  1890  007629  20                 	db	32
  1891  00762A  6E                 	db	110	;'n'
  1892  00762B  75                 	db	117	;'u'
  1893  00762C  6D                 	db	109	;'m'
  1894  00762D  65                 	db	101	;'e'
  1895  00762E  72                 	db	114	;'r'
  1896  00762F  69                 	db	105	;'i'
  1897  007630  63                 	db	99	;'c'
  1898  007631  61                 	db	97	;'a'
  1899  007632  6C                 	db	108	;'l'
  1900  007633  73                 	db	115	;'s'
  1901  007634  20                 	db	32
  1902  007635  69                 	db	105	;'i'
  1903  007636  6E                 	db	110	;'n'
  1904  007637  20                 	db	32
  1905  007638  64                 	db	100	;'d'
  1906  007639  65                 	db	101	;'e'
  1907  00763A  63                 	db	99	;'c'
  1908  00763B  69                 	db	105	;'i'
  1909  00763C  6D                 	db	109	;'m'
  1910  00763D  61                 	db	97	;'a'
  1911  00763E  6C                 	db	108	;'l'
  1912  00763F  2E                 	db	46
  1913  007640  0D                 	db	13
  1914  007641  0A                 	db	10
  1915  007642  00                 	db	0
  1916  007643                     STR_222:
  1917  007643  20                 	db	32
  1918  007644  20                 	db	32
  1919  007645  20                 	db	32
  1920  007646  20                 	db	32
  1921  007647  48                 	db	72	;'H'
  1922  007648  45                 	db	69	;'E'
  1923  007649  58                 	db	88	;'X'
  1924  00764A  20                 	db	32
  1925  00764B  2D                 	db	45
  1926  00764C  20                 	db	32
  1927  00764D  44                 	db	68	;'D'
  1928  00764E  69                 	db	105	;'i'
  1929  00764F  73                 	db	115	;'s'
  1930  007650  70                 	db	112	;'p'
  1931  007651  6C                 	db	108	;'l'
  1932  007652  61                 	db	97	;'a'
  1933  007653  79                 	db	121	;'y'
  1934  007654  20                 	db	32
  1935  007655  6E                 	db	110	;'n'
  1936  007656  75                 	db	117	;'u'
  1937  007657  6D                 	db	109	;'m'
  1938  007658  65                 	db	101	;'e'
  1939  007659  72                 	db	114	;'r'
  1940  00765A  69                 	db	105	;'i'
  1941  00765B  63                 	db	99	;'c'
  1942  00765C  61                 	db	97	;'a'
  1943  00765D  6C                 	db	108	;'l'
  1944  00765E  73                 	db	115	;'s'
  1945  00765F  20                 	db	32
  1946  007660  69                 	db	105	;'i'
  1947  007661  6E                 	db	110	;'n'
  1948  007662  20                 	db	32
  1949  007663  68                 	db	104	;'h'
  1950  007664  65                 	db	101	;'e'
  1951  007665  78                 	db	120	;'x'
  1952  007666  61                 	db	97	;'a'
  1953  007667  64                 	db	100	;'d'
  1954  007668  65                 	db	101	;'e'
  1955  007669  63                 	db	99	;'c'
  1956  00766A  69                 	db	105	;'i'
  1957  00766B  6D                 	db	109	;'m'
  1958  00766C  61                 	db	97	;'a'
  1959  00766D  6C                 	db	108	;'l'
  1960  00766E  2E                 	db	46
  1961  00766F  0D                 	db	13
  1962  007670  0A                 	db	10
  1963  007671  00                 	db	0
  1964  007672                     STR_213:
  1965  007672  46                 	db	70	;'F'
  1966  007673  49                 	db	73	;'I'
  1967  007674  4E                 	db	78	;'N'
  1968  007675  44                 	db	68	;'D'
  1969  007676  20                 	db	32
  1970  007677  2D                 	db	45
  1971  007678  20                 	db	32
  1972  007679  46                 	db	70	;'F'
  1973  00767A  69                 	db	105	;'i'
  1974  00767B  6E                 	db	110	;'n'
  1975  00767C  64                 	db	100	;'d'
  1976  00767D  20                 	db	32
  1977  00767E  61                 	db	97	;'a'
  1978  00767F  76                 	db	118	;'v'
  1979  007680  61                 	db	97	;'a'
  1980  007681  69                 	db	105	;'i'
  1981  007682  6C                 	db	108	;'l'
  1982  007683  61                 	db	97	;'a'
  1983  007684  62                 	db	98	;'b'
  1984  007685  6C                 	db	108	;'l'
  1985  007686  65                 	db	101	;'e'
  1986  007687  20                 	db	32
  1987  007688  43                 	db	67	;'C'
  1988  007689  41                 	db	65	;'A'
  1989  00768A  4E                 	db	78	;'N'
  1990  00768B  34                 	db	52	;'4'
  1991  00768C  56                 	db	86	;'V'
  1992  00768D  53                 	db	83	;'S'
  1993  00768E  43                 	db	67	;'C'
  1994  00768F  50                 	db	80	;'P'
  1995  007690  20                 	db	32
  1996  007691  6E                 	db	110	;'n'
  1997  007692  6F                 	db	111	;'o'
  1998  007693  64                 	db	100	;'d'
  1999  007694  65                 	db	101	;'e'
  2000  007695  73                 	db	115	;'s'
  2001  007696  20                 	db	32
  2002  007697  6F                 	db	111	;'o'
  2003  007698  6E                 	db	110	;'n'
  2004  007699  20                 	db	32
  2005  00769A  62                 	db	98	;'b'
  2006  00769B  75                 	db	117	;'u'
  2007  00769C  73                 	db	115	;'s'
  2008  00769D  2E                 	db	46
  2009  00769E  0D                 	db	13
  2010  00769F  0A                 	db	10
  2011  0076A0  00                 	db	0
  2012  0076A1                     STR_201:
  2013  0076A1  53                 	db	83	;'S'
  2014  0076A2  49                 	db	73	;'I'
  2015  0076A3  4C                 	db	76	;'L'
  2016  0076A4  45                 	db	69	;'E'
  2017  0076A5  4E                 	db	78	;'N'
  2018  0076A6  54                 	db	84	;'T'
  2019  0076A7  20                 	db	32
  2020  0076A8  2D                 	db	45
  2021  0076A9  20                 	db	32
  2022  0076AA  4F                 	db	79	;'O'
  2023  0076AB  70                 	db	112	;'p'
  2024  0076AC  65                 	db	101	;'e'
  2025  0076AD  6E                 	db	110	;'n'
  2026  0076AE  20                 	db	32
  2027  0076AF  43                 	db	67	;'C'
  2028  0076B0  41                 	db	65	;'A'
  2029  0076B1  4E                 	db	78	;'N'
  2030  0076B2  20                 	db	32
  2031  0076B3  69                 	db	105	;'i'
  2032  0076B4  6E                 	db	110	;'n'
  2033  0076B5  74                 	db	116	;'t'
  2034  0076B6  65                 	db	101	;'e'
  2035  0076B7  72                 	db	114	;'r'
  2036  0076B8  66                 	db	102	;'f'
  2037  0076B9  61                 	db	97	;'a'
  2038  0076BA  63                 	db	99	;'c'
  2039  0076BB  65                 	db	101	;'e'
  2040  0076BC  20                 	db	32
  2041  0076BD  69                 	db	105	;'i'
  2042  0076BE  6E                 	db	110	;'n'
  2043  0076BF  20                 	db	32
  2044  0076C0  73                 	db	115	;'s'
  2045  0076C1  69                 	db	105	;'i'
  2046  0076C2  6C                 	db	108	;'l'
  2047  0076C3  65                 	db	101	;'e'
  2048  0076C4  6E                 	db	110	;'n'
  2049  0076C5  74                 	db	116	;'t'
  2050  0076C6  20                 	db	32
  2051  0076C7  6D                 	db	109	;'m'
  2052  0076C8  6F                 	db	111	;'o'
  2053  0076C9  64                 	db	100	;'d'
  2054  0076CA  65                 	db	101	;'e'
  2055  0076CB  2E                 	db	46
  2056  0076CC  0D                 	db	13
  2057  0076CD  0A                 	db	10
  2058  0076CE  00                 	db	0
  2059  0076CF                     STR_206:
  2060  0076CF  49                 	db	73	;'I'
  2061  0076D0  46                 	db	70	;'F'
  2062  0076D1  4D                 	db	77	;'M'
  2063  0076D2  4F                 	db	79	;'O'
  2064  0076D3  44                 	db	68	;'D'
  2065  0076D4  45                 	db	69	;'E'
  2066  0076D5  20                 	db	32
  2067  0076D6  2D                 	db	45
  2068  0076D7  20                 	db	32
  2069  0076D8  44                 	db	68	;'D'
  2070  0076D9  69                 	db	105	;'i'
  2071  0076DA  73                 	db	115	;'s'
  2072  0076DB  70                 	db	112	;'p'
  2073  0076DC  6C                 	db	108	;'l'
  2074  0076DD  61                 	db	97	;'a'
  2075  0076DE  79                 	db	121	;'y'
  2076  0076DF  20                 	db	32
  2077  0076E0  73                 	db	115	;'s'
  2078  0076E1  65                 	db	101	;'e'
  2079  0076E2  6C                 	db	108	;'l'
  2080  0076E3  65                 	db	101	;'e'
  2081  0076E4  63                 	db	99	;'c'
  2082  0076E5  74                 	db	116	;'t'
  2083  0076E6  65                 	db	101	;'e'
  2084  0076E7  64                 	db	100	;'d'
  2085  0076E8  20                 	db	32
  2086  0076E9  69                 	db	105	;'i'
  2087  0076EA  6E                 	db	110	;'n'
  2088  0076EB  74                 	db	116	;'t'
  2089  0076EC  65                 	db	101	;'e'
  2090  0076ED  72                 	db	114	;'r'
  2091  0076EE  66                 	db	102	;'f'
  2092  0076EF  61                 	db	97	;'a'
  2093  0076F0  63                 	db	99	;'c'
  2094  0076F1  65                 	db	101	;'e'
  2095  0076F2  20                 	db	32
  2096  0076F3  6D                 	db	109	;'m'
  2097  0076F4  6F                 	db	111	;'o'
  2098  0076F5  64                 	db	100	;'d'
  2099  0076F6  65                 	db	101	;'e'
  2100  0076F7  2E                 	db	46
  2101  0076F8  0D                 	db	13
  2102  0076F9  0A                 	db	10
  2103  0076FA  00                 	db	0
  2104  0076FB                     STR_200:
  2105  0076FB  4F                 	db	79	;'O'
  2106  0076FC  50                 	db	80	;'P'
  2107  0076FD  45                 	db	69	;'E'
  2108  0076FE  4E                 	db	78	;'N'
  2109  0076FF  20                 	db	32
  2110  007700  2D                 	db	45
  2111  007701  20                 	db	32
  2112  007702  4F                 	db	79	;'O'
  2113  007703  70                 	db	112	;'p'
  2114  007704  65                 	db	101	;'e'
  2115  007705  6E                 	db	110	;'n'
  2116  007706  20                 	db	32
  2117  007707  43                 	db	67	;'C'
  2118  007708  41                 	db	65	;'A'
  2119  007709  4E                 	db	78	;'N'
  2120  00770A  20                 	db	32
  2121  00770B  69                 	db	105	;'i'
  2122  00770C  6E                 	db	110	;'n'
  2123  00770D  74                 	db	116	;'t'
  2124  00770E  65                 	db	101	;'e'
  2125  00770F  72                 	db	114	;'r'
  2126  007710  66                 	db	102	;'f'
  2127  007711  61                 	db	97	;'a'
  2128  007712  63                 	db	99	;'c'
  2129  007713  65                 	db	101	;'e'
  2130  007714  20                 	db	32
  2131  007715  69                 	db	105	;'i'
  2132  007716  6E                 	db	110	;'n'
  2133  007717  20                 	db	32
  2134  007718  6E                 	db	110	;'n'
  2135  007719  6F                 	db	111	;'o'
  2136  00771A  72                 	db	114	;'r'
  2137  00771B  6D                 	db	109	;'m'
  2138  00771C  61                 	db	97	;'a'
  2139  00771D  6C                 	db	108	;'l'
  2140  00771E  20                 	db	32
  2141  00771F  6D                 	db	109	;'m'
  2142  007720  6F                 	db	111	;'o'
  2143  007721  64                 	db	100	;'d'
  2144  007722  65                 	db	101	;'e'
  2145  007723  2E                 	db	46
  2146  007724  0D                 	db	13
  2147  007725  0A                 	db	10
  2148  007726  00                 	db	0
  2149  007727                     STR_108:
  2150  007727  2B                 	db	43
  2151  007728  4F                 	db	79	;'O'
  2152  007729  4B                 	db	75	;'K'
  2153  00772A  20                 	db	32
  2154  00772B  2D                 	db	45
  2155  00772C  20                 	db	32
  2156  00772D  4E                 	db	78	;'N'
  2157  00772E  75                 	db	117	;'u'
  2158  00772F  6D                 	db	109	;'m'
  2159  007730  65                 	db	101	;'e'
  2160  007731  72                 	db	114	;'r'
  2161  007732  69                 	db	105	;'i'
  2162  007733  63                 	db	99	;'c'
  2163  007734  61                 	db	97	;'a'
  2164  007735  6C                 	db	108	;'l'
  2165  007736  20                 	db	32
  2166  007737  6F                 	db	111	;'o'
  2167  007738  75                 	db	117	;'u'
  2168  007739  74                 	db	116	;'t'
  2169  00773A  70                 	db	112	;'p'
  2170  00773B  75                 	db	117	;'u'
  2171  00773C  74                 	db	116	;'t'
  2172  00773D  20                 	db	32
  2173  00773E  6E                 	db	110	;'n'
  2174  00773F  6F                 	db	111	;'o'
  2175  007740  77                 	db	119	;'w'
  2176  007741  20                 	db	32
  2177  007742  69                 	db	105	;'i'
  2178  007743  6E                 	db	110	;'n'
  2179  007744  20                 	db	32
  2180  007745  68                 	db	104	;'h'
  2181  007746  65                 	db	101	;'e'
  2182  007747  78                 	db	120	;'x'
  2183  007748  61                 	db	97	;'a'
  2184  007749  64                 	db	100	;'d'
  2185  00774A  65                 	db	101	;'e'
  2186  00774B  63                 	db	99	;'c'
  2187  00774C  69                 	db	105	;'i'
  2188  00774D  6D                 	db	109	;'m'
  2189  00774E  61                 	db	97	;'a'
  2190  00774F  6C                 	db	108	;'l'
  2191  007750  0D                 	db	13
  2192  007751  0A                 	db	10
  2193  007752  00                 	db	0
  2194  007753                     STR_87:
  2195  007753  2D                 	db	45
  2196  007754  45                 	db	69	;'E'
  2197  007755  52                 	db	82	;'R'
  2198  007756  52                 	db	82	;'R'
  2199  007757  4F                 	db	79	;'O'
  2200  007758  52                 	db	82	;'R'
  2201  007759  20                 	db	32
  2202  00775A  2D                 	db	45
  2203  00775B  20                 	db	32
  2204  00775C  66                 	db	102	;'f'
  2205  00775D  69                 	db	105	;'i'
  2206  00775E  6C                 	db	108	;'l'
  2207  00775F  74                 	db	116	;'t'
  2208  007760  65                 	db	101	;'e'
  2209  007761  72                 	db	114	;'r'
  2210  007762  20                 	db	32
  2211  007763  66                 	db	102	;'f'
  2212  007764  6F                 	db	111	;'o'
  2213  007765  72                 	db	114	;'r'
  2214  007766  20                 	db	32
  2215  007767  70                 	db	112	;'p'
  2216  007768  72                 	db	114	;'r'
  2217  007769  69                 	db	105	;'i'
  2218  00776A  6F                 	db	111	;'o'
  2219  00776B  72                 	db	114	;'r'
  2220  00776C  69                 	db	105	;'i'
  2221  00776D  74                 	db	116	;'t'
  2222  00776E  79                 	db	121	;'y'
  2223  00776F  20                 	db	32
  2224  007770  69                 	db	105	;'i'
  2225  007771  73                 	db	115	;'s'
  2226  007772  20                 	db	32
  2227  007773  6D                 	db	109	;'m'
  2228  007774  69                 	db	105	;'i'
  2229  007775  73                 	db	115	;'s'
  2230  007776  73                 	db	115	;'s'
  2231  007777  69                 	db	105	;'i'
  2232  007778  6E                 	db	110	;'n'
  2233  007779  67                 	db	103	;'g'
  2234  00777A  0D                 	db	13
  2235  00777B  0A                 	db	10
  2236  00777C  00                 	db	0
  2237  00777D                     STR_93:
  2238  00777D  2D                 	db	45
  2239  00777E  45                 	db	69	;'E'
  2240  00777F  52                 	db	82	;'R'
  2241  007780  52                 	db	82	;'R'
  2242  007781  4F                 	db	79	;'O'
  2243  007782  52                 	db	82	;'R'
  2244  007783  20                 	db	32
  2245  007784  2D                 	db	45
  2246  007785  20                 	db	32
  2247  007786  66                 	db	102	;'f'
  2248  007787  69                 	db	105	;'i'
  2249  007788  6C                 	db	108	;'l'
  2250  007789  74                 	db	116	;'t'
  2251  00778A  65                 	db	101	;'e'
  2252  00778B  72                 	db	114	;'r'
  2253  00778C  20                 	db	32
  2254  00778D  66                 	db	102	;'f'
  2255  00778E  6F                 	db	111	;'o'
  2256  00778F  72                 	db	114	;'r'
  2257  007790  20                 	db	32
  2258  007791  6E                 	db	110	;'n'
  2259  007792  69                 	db	105	;'i'
  2260  007793  64                 	db	100	;'d'
  2261  007794  65                 	db	101	;'e'
  2262  007795  20                 	db	32
  2263  007796  69                 	db	105	;'i'
  2264  007797  64                 	db	100	;'d'
  2265  007798  20                 	db	32
  2266  007799  69                 	db	105	;'i'
  2267  00779A  73                 	db	115	;'s'
  2268  00779B  20                 	db	32
  2269  00779C  6D                 	db	109	;'m'
  2270  00779D  69                 	db	105	;'i'
  2271  00779E  73                 	db	115	;'s'
  2272  00779F  73                 	db	115	;'s'
  2273  0077A0  69                 	db	105	;'i'
  2274  0077A1  6E                 	db	110	;'n'
  2275  0077A2  67                 	db	103	;'g'
  2276  0077A3  0D                 	db	13
  2277  0077A4  0A                 	db	10
  2278  0077A5  00                 	db	0
  2279  0077A6                     STR_212:
  2280  0077A6  48                 	db	72	;'H'
  2281  0077A7  45                 	db	69	;'E'
  2282  0077A8  4C                 	db	76	;'L'
  2283  0077A9  50                 	db	80	;'P'
  2284  0077AA  20                 	db	32
  2285  0077AB  2D                 	db	45
  2286  0077AC  20                 	db	32
  2287  0077AD  44                 	db	68	;'D'
  2288  0077AE  69                 	db	105	;'i'
  2289  0077AF  73                 	db	115	;'s'
  2290  0077B0  70                 	db	112	;'p'
  2291  0077B1  6C                 	db	108	;'l'
  2292  0077B2  61                 	db	97	;'a'
  2293  0077B3  79                 	db	121	;'y'
  2294  0077B4  20                 	db	32
  2295  0077B5  74                 	db	116	;'t'
  2296  0077B6  68                 	db	104	;'h'
  2297  0077B7  69                 	db	105	;'i'
  2298  0077B8  73                 	db	115	;'s'
  2299  0077B9  20                 	db	32
  2300  0077BA  68                 	db	104	;'h'
  2301  0077BB  65                 	db	101	;'e'
  2302  0077BC  6C                 	db	108	;'l'
  2303  0077BD  70                 	db	112	;'p'
  2304  0077BE  20                 	db	32
  2305  0077BF  69                 	db	105	;'i'
  2306  0077C0  6E                 	db	110	;'n'
  2307  0077C1  66                 	db	102	;'f'
  2308  0077C2  6F                 	db	111	;'o'
  2309  0077C3  72                 	db	114	;'r'
  2310  0077C4  6D                 	db	109	;'m'
  2311  0077C5  61                 	db	97	;'a'
  2312  0077C6  74                 	db	116	;'t'
  2313  0077C7  69                 	db	105	;'i'
  2314  0077C8  6F                 	db	111	;'o'
  2315  0077C9  6E                 	db	110	;'n'
  2316  0077CA  2E                 	db	46
  2317  0077CB  0D                 	db	13
  2318  0077CC  0A                 	db	10
  2319  0077CD  00                 	db	0
  2320  0077CE                     STR_99:
  2321  0077CE  2D                 	db	45
  2322  0077CF  45                 	db	69	;'E'
  2323  0077D0  52                 	db	82	;'R'
  2324  0077D1  52                 	db	82	;'R'
  2325  0077D2  4F                 	db	79	;'O'
  2326  0077D3  52                 	db	82	;'R'
  2327  0077D4  20                 	db	32
  2328  0077D5  2D                 	db	45
  2329  0077D6  20                 	db	32
  2330  0077D7  6D                 	db	109	;'m'
  2331  0077D8  61                 	db	97	;'a'
  2332  0077D9  73                 	db	115	;'s'
  2333  0077DA  6B                 	db	107	;'k'
  2334  0077DB  20                 	db	32
  2335  0077DC  66                 	db	102	;'f'
  2336  0077DD  6F                 	db	111	;'o'
  2337  0077DE  72                 	db	114	;'r'
  2338  0077DF  20                 	db	32
  2339  0077E0  70                 	db	112	;'p'
  2340  0077E1  72                 	db	114	;'r'
  2341  0077E2  69                 	db	105	;'i'
  2342  0077E3  6F                 	db	111	;'o'
  2343  0077E4  72                 	db	114	;'r'
  2344  0077E5  69                 	db	105	;'i'
  2345  0077E6  74                 	db	116	;'t'
  2346  0077E7  79                 	db	121	;'y'
  2347  0077E8  20                 	db	32
  2348  0077E9  69                 	db	105	;'i'
  2349  0077EA  73                 	db	115	;'s'
  2350  0077EB  20                 	db	32
  2351  0077EC  6D                 	db	109	;'m'
  2352  0077ED  69                 	db	105	;'i'
  2353  0077EE  73                 	db	115	;'s'
  2354  0077EF  73                 	db	115	;'s'
  2355  0077F0  69                 	db	105	;'i'
  2356  0077F1  6E                 	db	110	;'n'
  2357  0077F2  67                 	db	103	;'g'
  2358  0077F3  0D                 	db	13
  2359  0077F4  0A                 	db	10
  2360  0077F5  00                 	db	0
  2361  0077F6                     STR_110:
  2362  0077F6  2B                 	db	43
  2363  0077F7  4F                 	db	79	;'O'
  2364  0077F8  4B                 	db	75	;'K'
  2365  0077F9  20                 	db	32
  2366  0077FA  2D                 	db	45
  2367  0077FB  20                 	db	32
  2368  0077FC  4E                 	db	78	;'N'
  2369  0077FD  75                 	db	117	;'u'
  2370  0077FE  6D                 	db	109	;'m'
  2371  0077FF  65                 	db	101	;'e'
  2372  007800  72                 	db	114	;'r'
  2373  007801  69                 	db	105	;'i'
  2374  007802  63                 	db	99	;'c'
  2375  007803  61                 	db	97	;'a'
  2376  007804  6C                 	db	108	;'l'
  2377  007805  20                 	db	32
  2378  007806  6F                 	db	111	;'o'
  2379  007807  75                 	db	117	;'u'
  2380  007808  74                 	db	116	;'t'
  2381  007809  70                 	db	112	;'p'
  2382  00780A  75                 	db	117	;'u'
  2383  00780B  74                 	db	116	;'t'
  2384  00780C  20                 	db	32
  2385  00780D  6E                 	db	110	;'n'
  2386  00780E  6F                 	db	111	;'o'
  2387  00780F  77                 	db	119	;'w'
  2388  007810  20                 	db	32
  2389  007811  69                 	db	105	;'i'
  2390  007812  6E                 	db	110	;'n'
  2391  007813  20                 	db	32
  2392  007814  64                 	db	100	;'d'
  2393  007815  65                 	db	101	;'e'
  2394  007816  63                 	db	99	;'c'
  2395  007817  69                 	db	105	;'i'
  2396  007818  6D                 	db	109	;'m'
  2397  007819  61                 	db	97	;'a'
  2398  00781A  6C                 	db	108	;'l'
  2399  00781B  0D                 	db	13
  2400  00781C  0A                 	db	10
  2401  00781D  00                 	db	0
  2402  00781E                     STR_85:
  2403  00781E  2D                 	db	45
  2404  00781F  45                 	db	69	;'E'
  2405  007820  52                 	db	82	;'R'
  2406  007821  52                 	db	82	;'R'
  2407  007822  4F                 	db	79	;'O'
  2408  007823  52                 	db	82	;'R'
  2409  007824  20                 	db	32
  2410  007825  2D                 	db	45
  2411  007826  20                 	db	32
  2412  007827  4E                 	db	78	;'N'
  2413  007828  6F                 	db	111	;'o'
  2414  007829  20                 	db	32
  2415  00782A  66                 	db	102	;'f'
  2416  00782B  69                 	db	105	;'i'
  2417  00782C  6C                 	db	108	;'l'
  2418  00782D  74                 	db	116	;'t'
  2419  00782E  65                 	db	101	;'e'
  2420  00782F  72                 	db	114	;'r'
  2421  007830  20                 	db	32
  2422  007831  6E                 	db	110	;'n'
  2423  007832  75                 	db	117	;'u'
  2424  007833  6D                 	db	109	;'m'
  2425  007834  62                 	db	98	;'b'
  2426  007835  65                 	db	101	;'e'
  2427  007836  72                 	db	114	;'r'
  2428  007837  20                 	db	32
  2429  007838  73                 	db	115	;'s'
  2430  007839  70                 	db	112	;'p'
  2431  00783A  65                 	db	101	;'e'
  2432  00783B  63                 	db	99	;'c'
  2433  00783C  69                 	db	105	;'i'
  2434  00783D  66                 	db	102	;'f'
  2435  00783E  69                 	db	105	;'i'
  2436  00783F  65                 	db	101	;'e'
  2437  007840  64                 	db	100	;'d'
  2438  007841  2E                 	db	46
  2439  007842  0D                 	db	13
  2440  007843  0A                 	db	10
  2441  007844  00                 	db	0
  2442  007845                     STR_211:
  2443  007845  45                 	db	69	;'E'
  2444  007846  52                 	db	82	;'R'
  2445  007847  52                 	db	82	;'R'
  2446  007848  20                 	db	32
  2447  007849  2D                 	db	45
  2448  00784A  20                 	db	32
  2449  00784B  44                 	db	68	;'D'
  2450  00784C  69                 	db	105	;'i'
  2451  00784D  73                 	db	115	;'s'
  2452  00784E  70                 	db	112	;'p'
  2453  00784F  6C                 	db	108	;'l'
  2454  007850  61                 	db	97	;'a'
  2455  007851  79                 	db	121	;'y'
  2456  007852  20                 	db	32
  2457  007853  43                 	db	67	;'C'
  2458  007854  41                 	db	65	;'A'
  2459  007855  4E                 	db	78	;'N'
  2460  007856  20                 	db	32
  2461  007857  65                 	db	101	;'e'
  2462  007858  72                 	db	114	;'r'
  2463  007859  72                 	db	114	;'r'
  2464  00785A  6F                 	db	111	;'o'
  2465  00785B  72                 	db	114	;'r'
  2466  00785C  20                 	db	32
  2467  00785D  69                 	db	105	;'i'
  2468  00785E  6E                 	db	110	;'n'
  2469  00785F  66                 	db	102	;'f'
  2470  007860  6F                 	db	111	;'o'
  2471  007861  72                 	db	114	;'r'
  2472  007862  6D                 	db	109	;'m'
  2473  007863  61                 	db	97	;'a'
  2474  007864  74                 	db	116	;'t'
  2475  007865  69                 	db	105	;'i'
  2476  007866  6F                 	db	111	;'o'
  2477  007867  6E                 	db	110	;'n'
  2478  007868  2E                 	db	46
  2479  007869  0D                 	db	13
  2480  00786A  0A                 	db	10
  2481  00786B  00                 	db	0
  2482  00786C                     STR_197:
  2483  00786C  48                 	db	72	;'H'
  2484  00786D  65                 	db	101	;'e'
  2485  00786E  6C                 	db	108	;'l'
  2486  00786F  70                 	db	112	;'p'
  2487  007870  20                 	db	32
  2488  007871  66                 	db	102	;'f'
  2489  007872  6F                 	db	111	;'o'
  2490  007873  72                 	db	114	;'r'
  2491  007874  20                 	db	32
  2492  007875  74                 	db	116	;'t'
  2493  007876  68                 	db	104	;'h'
  2494  007877  65                 	db	101	;'e'
  2495  007878  20                 	db	32
  2496  007879  46                 	db	70	;'F'
  2497  00787A  72                 	db	114	;'r'
  2498  00787B  61                 	db	97	;'a'
  2499  00787C  6E                 	db	110	;'n'
  2500  00787D  6B                 	db	107	;'k'
  2501  00787E  66                 	db	102	;'f'
  2502  00787F  75                 	db	117	;'u'
  2503  007880  72                 	db	114	;'r'
  2504  007881  74                 	db	116	;'t'
  2505  007882  20                 	db	32
  2506  007883  52                 	db	82	;'R'
  2507  007884  53                 	db	83	;'S'
  2508  007885  2D                 	db	45
  2509  007886  32                 	db	50	;'2'
  2510  007887  33                 	db	51	;'3'
  2511  007888  32                 	db	50	;'2'
  2512  007889  20                 	db	32
  2513  00788A  6D                 	db	109	;'m'
  2514  00788B  6F                 	db	111	;'o'
  2515  00788C  64                 	db	100	;'d'
  2516  00788D  75                 	db	117	;'u'
  2517  00788E  6C                 	db	108	;'l'
  2518  00788F  65                 	db	101	;'e'
  2519  007890  0D                 	db	13
  2520  007891  0A                 	db	10
  2521  007892  00                 	db	0
  2522  007893                     STR_105:
  2523  007893  2D                 	db	45
  2524  007894  45                 	db	69	;'E'
  2525  007895  52                 	db	82	;'R'
  2526  007896  52                 	db	82	;'R'
  2527  007897  4F                 	db	79	;'O'
  2528  007898  52                 	db	82	;'R'
  2529  007899  20                 	db	32
  2530  00789A  2D                 	db	45
  2531  00789B  20                 	db	32
  2532  00789C  6D                 	db	109	;'m'
  2533  00789D  61                 	db	97	;'a'
  2534  00789E  73                 	db	115	;'s'
  2535  00789F  6B                 	db	107	;'k'
  2536  0078A0  20                 	db	32
  2537  0078A1  66                 	db	102	;'f'
  2538  0078A2  6F                 	db	111	;'o'
  2539  0078A3  72                 	db	114	;'r'
  2540  0078A4  20                 	db	32
  2541  0078A5  6E                 	db	110	;'n'
  2542  0078A6  69                 	db	105	;'i'
  2543  0078A7  64                 	db	100	;'d'
  2544  0078A8  65                 	db	101	;'e'
  2545  0078A9  20                 	db	32
  2546  0078AA  69                 	db	105	;'i'
  2547  0078AB  64                 	db	100	;'d'
  2548  0078AC  20                 	db	32
  2549  0078AD  69                 	db	105	;'i'
  2550  0078AE  73                 	db	115	;'s'
  2551  0078AF  20                 	db	32
  2552  0078B0  6D                 	db	109	;'m'
  2553  0078B1  69                 	db	105	;'i'
  2554  0078B2  73                 	db	115	;'s'
  2555  0078B3  73                 	db	115	;'s'
  2556  0078B4  69                 	db	105	;'i'
  2557  0078B5  6E                 	db	110	;'n'
  2558  0078B6  67                 	db	103	;'g'
  2559  0078B7  0D                 	db	13
  2560  0078B8  0A                 	db	10
  2561  0078B9  00                 	db	0
  2562  0078BA                     STR_89:
  2563  0078BA  2D                 	db	45
  2564  0078BB  45                 	db	69	;'E'
  2565  0078BC  52                 	db	82	;'R'
  2566  0078BD  52                 	db	82	;'R'
  2567  0078BE  4F                 	db	79	;'O'
  2568  0078BF  52                 	db	82	;'R'
  2569  0078C0  20                 	db	32
  2570  0078C1  2D                 	db	45
  2571  0078C2  20                 	db	32
  2572  0078C3  66                 	db	102	;'f'
  2573  0078C4  69                 	db	105	;'i'
  2574  0078C5  6C                 	db	108	;'l'
  2575  0078C6  74                 	db	116	;'t'
  2576  0078C7  65                 	db	101	;'e'
  2577  0078C8  72                 	db	114	;'r'
  2578  0078C9  20                 	db	32
  2579  0078CA  66                 	db	102	;'f'
  2580  0078CB  6F                 	db	111	;'o'
  2581  0078CC  72                 	db	114	;'r'
  2582  0078CD  20                 	db	32
  2583  0078CE  63                 	db	99	;'c'
  2584  0078CF  6C                 	db	108	;'l'
  2585  0078D0  61                 	db	97	;'a'
  2586  0078D1  73                 	db	115	;'s'
  2587  0078D2  73                 	db	115	;'s'
  2588  0078D3  20                 	db	32
  2589  0078D4  69                 	db	105	;'i'
  2590  0078D5  73                 	db	115	;'s'
  2591  0078D6  20                 	db	32
  2592  0078D7  6D                 	db	109	;'m'
  2593  0078D8  69                 	db	105	;'i'
  2594  0078D9  73                 	db	115	;'s'
  2595  0078DA  73                 	db	115	;'s'
  2596  0078DB  69                 	db	105	;'i'
  2597  0078DC  6E                 	db	110	;'n'
  2598  0078DD  67                 	db	103	;'g'
  2599  0078DE  0D                 	db	13
  2600  0078DF  0A                 	db	10
  2601  0078E0  00                 	db	0
  2602  0078E1                     STR_228:
  2603  0078E1  20                 	db	32
  2604  0078E2  20                 	db	32
  2605  0078E3  20                 	db	32
  2606  0078E4  20                 	db	32
  2607  0078E5  20                 	db	32
  2608  0078E6  20                 	db	32
  2609  0078E7  20                 	db	32
  2610  0078E8  20                 	db	32
  2611  0078E9  20                 	db	32
  2612  0078EA  20                 	db	32
  2613  0078EB  20                 	db	32
  2614  0078EC  4D                 	db	77	;'M'
  2615  0078ED  6F                 	db	111	;'o'
  2616  0078EE  64                 	db	100	;'d'
  2617  0078EF  65                 	db	101	;'e'
  2618  0078F0  73                 	db	115	;'s'
  2619  0078F1  3A                 	db	58	;':'
  2620  0078F2  20                 	db	32
  2621  0078F3  76                 	db	118	;'v'
  2622  0078F4  65                 	db	101	;'e'
  2623  0078F5  72                 	db	114	;'r'
  2624  0078F6  62                 	db	98	;'b'
  2625  0078F7  6F                 	db	111	;'o'
  2626  0078F8  73                 	db	115	;'s'
  2627  0078F9  65                 	db	101	;'e'
  2628  0078FA  7C                 	db	124
  2629  0078FB  76                 	db	118	;'v'
  2630  0078FC  73                 	db	115	;'s'
  2631  0078FD  63                 	db	99	;'c'
  2632  0078FE  70                 	db	112	;'p'
  2633  0078FF  7C                 	db	124
  2634  007900  73                 	db	115	;'s'
  2635  007901  6C                 	db	108	;'l'
  2636  007902  63                 	db	99	;'c'
  2637  007903  61                 	db	97	;'a'
  2638  007904  6E                 	db	110	;'n'
  2639  007905  0D                 	db	13
  2640  007906  0A                 	db	10
  2641  007907  00                 	db	0
  2642  007908                     STR_91:
  2643  007908  2D                 	db	45
  2644  007909  45                 	db	69	;'E'
  2645  00790A  52                 	db	82	;'R'
  2646  00790B  52                 	db	82	;'R'
  2647  00790C  4F                 	db	79	;'O'
  2648  00790D  52                 	db	82	;'R'
  2649  00790E  20                 	db	32
  2650  00790F  2D                 	db	45
  2651  007910  20                 	db	32
  2652  007911  66                 	db	102	;'f'
  2653  007912  69                 	db	105	;'i'
  2654  007913  6C                 	db	108	;'l'
  2655  007914  74                 	db	116	;'t'
  2656  007915  65                 	db	101	;'e'
  2657  007916  72                 	db	114	;'r'
  2658  007917  20                 	db	32
  2659  007918  66                 	db	102	;'f'
  2660  007919  6F                 	db	111	;'o'
  2661  00791A  72                 	db	114	;'r'
  2662  00791B  20                 	db	32
  2663  00791C  74                 	db	116	;'t'
  2664  00791D  79                 	db	121	;'y'
  2665  00791E  70                 	db	112	;'p'
  2666  00791F  65                 	db	101	;'e'
  2667  007920  20                 	db	32
  2668  007921  69                 	db	105	;'i'
  2669  007922  73                 	db	115	;'s'
  2670  007923  20                 	db	32
  2671  007924  6D                 	db	109	;'m'
  2672  007925  69                 	db	105	;'i'
  2673  007926  73                 	db	115	;'s'
  2674  007927  73                 	db	115	;'s'
  2675  007928  69                 	db	105	;'i'
  2676  007929  6E                 	db	110	;'n'
  2677  00792A  67                 	db	103	;'g'
  2678  00792B  0D                 	db	13
  2679  00792C  0A                 	db	10
  2680  00792D  00                 	db	0
  2681  00792E                     STR_97:
  2682  00792E  2D                 	db	45
  2683  00792F  45                 	db	69	;'E'
  2684  007930  52                 	db	82	;'R'
  2685  007931  52                 	db	82	;'R'
  2686  007932  4F                 	db	79	;'O'
  2687  007933  52                 	db	82	;'R'
  2688  007934  20                 	db	32
  2689  007935  2D                 	db	45
  2690  007936  20                 	db	32
  2691  007937  4E                 	db	78	;'N'
  2692  007938  6F                 	db	111	;'o'
  2693  007939  20                 	db	32
  2694  00793A  6D                 	db	109	;'m'
  2695  00793B  61                 	db	97	;'a'
  2696  00793C  73                 	db	115	;'s'
  2697  00793D  6B                 	db	107	;'k'
  2698  00793E  20                 	db	32
  2699  00793F  6E                 	db	110	;'n'
  2700  007940  75                 	db	117	;'u'
  2701  007941  6D                 	db	109	;'m'
  2702  007942  62                 	db	98	;'b'
  2703  007943  65                 	db	101	;'e'
  2704  007944  72                 	db	114	;'r'
  2705  007945  20                 	db	32
  2706  007946  73                 	db	115	;'s'
  2707  007947  70                 	db	112	;'p'
  2708  007948  65                 	db	101	;'e'
  2709  007949  63                 	db	99	;'c'
  2710  00794A  69                 	db	105	;'i'
  2711  00794B  66                 	db	102	;'f'
  2712  00794C  69                 	db	105	;'i'
  2713  00794D  65                 	db	101	;'e'
  2714  00794E  64                 	db	100	;'d'
  2715  00794F  2E                 	db	46
  2716  007950  0D                 	db	13
  2717  007951  0A                 	db	10
  2718  007952  00                 	db	0
  2719  007953                     STR_1:
  2720  007953  0D                 	db	13
  2721  007954  0A                 	db	10
  2722  007955  46                 	db	70	;'F'
  2723  007956  72                 	db	114	;'r'
  2724  007957  61                 	db	97	;'a'
  2725  007958  6E                 	db	110	;'n'
  2726  007959  6B                 	db	107	;'k'
  2727  00795A  66                 	db	102	;'f'
  2728  00795B  75                 	db	117	;'u'
  2729  00795C  72                 	db	114	;'r'
  2730  00795D  74                 	db	116	;'t'
  2731  00795E  20                 	db	32
  2732  00795F  52                 	db	82	;'R'
  2733  007960  53                 	db	83	;'S'
  2734  007961  2D                 	db	45
  2735  007962  32                 	db	50	;'2'
  2736  007963  33                 	db	51	;'3'
  2737  007964  32                 	db	50	;'2'
  2738  007965  20                 	db	32
  2739  007966  43                 	db	67	;'C'
  2740  007967  41                 	db	65	;'A'
  2741  007968  4E                 	db	78	;'N'
  2742  007969  34                 	db	52	;'4'
  2743  00796A  56                 	db	86	;'V'
  2744  00796B  53                 	db	83	;'S'
  2745  00796C  43                 	db	67	;'C'
  2746  00796D  50                 	db	80	;'P'
  2747  00796E  20                 	db	32
  2748  00796F  6D                 	db	109	;'m'
  2749  007970  6F                 	db	111	;'o'
  2750  007971  64                 	db	100	;'d'
  2751  007972  75                 	db	117	;'u'
  2752  007973  6C                 	db	108	;'l'
  2753  007974  65                 	db	101	;'e'
  2754  007975  0D                 	db	13
  2755  007976  0A                 	db	10
  2756  007977  00                 	db	0
  2757  007978                     STR_101:
  2758  007978  2D                 	db	45
  2759  007979  45                 	db	69	;'E'
  2760  00797A  52                 	db	82	;'R'
  2761  00797B  52                 	db	82	;'R'
  2762  00797C  4F                 	db	79	;'O'
  2763  00797D  52                 	db	82	;'R'
  2764  00797E  20                 	db	32
  2765  00797F  2D                 	db	45
  2766  007980  20                 	db	32
  2767  007981  6D                 	db	109	;'m'
  2768  007982  61                 	db	97	;'a'
  2769  007983  73                 	db	115	;'s'
  2770  007984  6B                 	db	107	;'k'
  2771  007985  20                 	db	32
  2772  007986  66                 	db	102	;'f'
  2773  007987  6F                 	db	111	;'o'
  2774  007988  72                 	db	114	;'r'
  2775  007989  20                 	db	32
  2776  00798A  63                 	db	99	;'c'
  2777  00798B  6C                 	db	108	;'l'
  2778  00798C  61                 	db	97	;'a'
  2779  00798D  73                 	db	115	;'s'
  2780  00798E  73                 	db	115	;'s'
  2781  00798F  20                 	db	32
  2782  007990  69                 	db	105	;'i'
  2783  007991  73                 	db	115	;'s'
  2784  007992  20                 	db	32
  2785  007993  6D                 	db	109	;'m'
  2786  007994  69                 	db	105	;'i'
  2787  007995  73                 	db	115	;'s'
  2788  007996  73                 	db	115	;'s'
  2789  007997  69                 	db	105	;'i'
  2790  007998  6E                 	db	110	;'n'
  2791  007999  67                 	db	103	;'g'
  2792  00799A  0D                 	db	13
  2793  00799B  0A                 	db	10
  2794  00799C  00                 	db	0
  2795  00799D                     STR_103:
  2796  00799D  2D                 	db	45
  2797  00799E  45                 	db	69	;'E'
  2798  00799F  52                 	db	82	;'R'
  2799  0079A0  52                 	db	82	;'R'
  2800  0079A1  4F                 	db	79	;'O'
  2801  0079A2  52                 	db	82	;'R'
  2802  0079A3  20                 	db	32
  2803  0079A4  2D                 	db	45
  2804  0079A5  20                 	db	32
  2805  0079A6  6D                 	db	109	;'m'
  2806  0079A7  61                 	db	97	;'a'
  2807  0079A8  73                 	db	115	;'s'
  2808  0079A9  6B                 	db	107	;'k'
  2809  0079AA  20                 	db	32
  2810  0079AB  66                 	db	102	;'f'
  2811  0079AC  6F                 	db	111	;'o'
  2812  0079AD  72                 	db	114	;'r'
  2813  0079AE  20                 	db	32
  2814  0079AF  74                 	db	116	;'t'
  2815  0079B0  79                 	db	121	;'y'
  2816  0079B1  70                 	db	112	;'p'
  2817  0079B2  65                 	db	101	;'e'
  2818  0079B3  20                 	db	32
  2819  0079B4  69                 	db	105	;'i'
  2820  0079B5  73                 	db	115	;'s'
  2821  0079B6  20                 	db	32
  2822  0079B7  6D                 	db	109	;'m'
  2823  0079B8  69                 	db	105	;'i'
  2824  0079B9  73                 	db	115	;'s'
  2825  0079BA  73                 	db	115	;'s'
  2826  0079BB  69                 	db	105	;'i'
  2827  0079BC  6E                 	db	110	;'n'
  2828  0079BD  67                 	db	103	;'g'
  2829  0079BE  0D                 	db	13
  2830  0079BF  0A                 	db	10
  2831  0079C0  00                 	db	0
  2832  0079C1                     STR_75:
  2833  0079C1  2B                 	db	43
  2834  0079C2  4F                 	db	79	;'O'
  2835  0079C3  4B                 	db	75	;'K'
  2836  0079C4  20                 	db	32
  2837  0079C5  2D                 	db	45
  2838  0079C6  20                 	db	32
  2839  0079C7  56                 	db	86	;'V'
  2840  0079C8  61                 	db	97	;'a'
  2841  0079C9  6C                 	db	108	;'l'
  2842  0079CA  75                 	db	117	;'u'
  2843  0079CB  65                 	db	101	;'e'
  2844  0079CC  20                 	db	32
  2845  0079CD  77                 	db	119	;'w'
  2846  0079CE  72                 	db	114	;'r'
  2847  0079CF  69                 	db	105	;'i'
  2848  0079D0  74                 	db	116	;'t'
  2849  0079D1  74                 	db	116	;'t'
  2850  0079D2  65                 	db	101	;'e'
  2851  0079D3  6E                 	db	110	;'n'
  2852  0079D4  20                 	db	32
  2853  0079D5  73                 	db	115	;'s'
  2854  0079D6  75                 	db	117	;'u'
  2855  0079D7  63                 	db	99	;'c'
  2856  0079D8  63                 	db	99	;'c'
  2857  0079D9  65                 	db	101	;'e'
  2858  0079DA  73                 	db	115	;'s'
  2859  0079DB  73                 	db	115	;'s'
  2860  0079DC  66                 	db	102	;'f'
  2861  0079DD  75                 	db	117	;'u'
  2862  0079DE  6C                 	db	108	;'l'
  2863  0079DF  6C                 	db	108	;'l'
  2864  0079E0  79                 	db	121	;'y'
  2865  0079E1  0D                 	db	13
  2866  0079E2  0A                 	db	10
  2867  0079E3  00                 	db	0
  2868  0079E4                     STR_221:
  2869  0079E4  53                 	db	83	;'S'
  2870  0079E5  45                 	db	69	;'E'
  2871  0079E6  54                 	db	84	;'T'
  2872  0079E7  20                 	db	32
  2873  0079E8  2D                 	db	45
  2874  0079E9  20                 	db	32
  2875  0079EA  50                 	db	80	;'P'
  2876  0079EB  65                 	db	101	;'e'
  2877  0079EC  72                 	db	114	;'r'
  2878  0079ED  73                 	db	115	;'s'
  2879  0079EE  69                 	db	105	;'i'
  2880  0079EF  73                 	db	115	;'s'
  2881  0079F0  74                 	db	116	;'t'
  2882  0079F1  65                 	db	101	;'e'
  2883  0079F2  6E                 	db	110	;'n'
  2884  0079F3  74                 	db	116	;'t'
  2885  0079F4  20                 	db	32
  2886  0079F5  66                 	db	102	;'f'
  2887  0079F6  75                 	db	117	;'u'
  2888  0079F7  6E                 	db	110	;'n'
  2889  0079F8  63                 	db	99	;'c'
  2890  0079F9  74                 	db	116	;'t'
  2891  0079FA  69                 	db	105	;'i'
  2892  0079FB  6F                 	db	111	;'o'
  2893  0079FC  6E                 	db	110	;'n'
  2894  0079FD  61                 	db	97	;'a'
  2895  0079FE  6C                 	db	108	;'l'
  2896  0079FF  69                 	db	105	;'i'
  2897  007A00  74                 	db	116	;'t'
  2898  007A01  79                 	db	121	;'y'
  2899  007A02  2E                 	db	46
  2900  007A03  0D                 	db	13
  2901  007A04  0A                 	db	10
  2902  007A05  00                 	db	0
  2903  007A06                     STR_60:
  2904  007A06  2D                 	db	45
  2905  007A07  45                 	db	69	;'E'
  2906  007A08  52                 	db	82	;'R'
  2907  007A09  52                 	db	82	;'R'
  2908  007A0A  4F                 	db	79	;'O'
  2909  007A0B  52                 	db	82	;'R'
  2910  007A0C  20                 	db	32
  2911  007A0D  2D                 	db	45
  2912  007A0E  20                 	db	32
  2913  007A0F  55                 	db	85	;'U'
  2914  007A10  6E                 	db	110	;'n'
  2915  007A11  61                 	db	97	;'a'
  2916  007A12  62                 	db	98	;'b'
  2917  007A13  6C                 	db	108	;'l'
  2918  007A14  65                 	db	101	;'e'
  2919  007A15  20                 	db	32
  2920  007A16  74                 	db	116	;'t'
  2921  007A17  6F                 	db	111	;'o'
  2922  007A18  20                 	db	32
  2923  007A19  72                 	db	114	;'r'
  2924  007A1A  65                 	db	101	;'e'
  2925  007A1B  61                 	db	97	;'a'
  2926  007A1C  64                 	db	100	;'d'
  2927  007A1D  20                 	db	32
  2928  007A1E  72                 	db	114	;'r'
  2929  007A1F  65                 	db	101	;'e'
  2930  007A20  67                 	db	103	;'g'
  2931  007A21  69                 	db	105	;'i'
  2932  007A22  73                 	db	115	;'s'
  2933  007A23  74                 	db	116	;'t'
  2934  007A24  65                 	db	101	;'e'
  2935  007A25  72                 	db	114	;'r'
  2936  007A26  20                 	db	32
  2937  007A27  00                 	db	0
  2938  007A28                     STR_210:
  2939  007A28  53                 	db	83	;'S'
  2940  007A29  54                 	db	84	;'T'
  2941  007A2A  41                 	db	65	;'A'
  2942  007A2B  54                 	db	84	;'T'
  2943  007A2C  20                 	db	32
  2944  007A2D  2D                 	db	45
  2945  007A2E  20                 	db	32
  2946  007A2F  44                 	db	68	;'D'
  2947  007A30  69                 	db	105	;'i'
  2948  007A31  73                 	db	115	;'s'
  2949  007A32  70                 	db	112	;'p'
  2950  007A33  6C                 	db	108	;'l'
  2951  007A34  61                 	db	97	;'a'
  2952  007A35  79                 	db	121	;'y'
  2953  007A36  20                 	db	32
  2954  007A37  43                 	db	67	;'C'
  2955  007A38  41                 	db	65	;'A'
  2956  007A39  4E                 	db	78	;'N'
  2957  007A3A  20                 	db	32
  2958  007A3B  73                 	db	115	;'s'
  2959  007A3C  74                 	db	116	;'t'
  2960  007A3D  61                 	db	97	;'a'
  2961  007A3E  74                 	db	116	;'t'
  2962  007A3F  69                 	db	105	;'i'
  2963  007A40  73                 	db	115	;'s'
  2964  007A41  74                 	db	116	;'t'
  2965  007A42  69                 	db	105	;'i'
  2966  007A43  63                 	db	99	;'c'
  2967  007A44  73                 	db	115	;'s'
  2968  007A45  2E                 	db	46
  2969  007A46  0D                 	db	13
  2970  007A47  0A                 	db	10
  2971  007A48  00                 	db	0
  2972  007A49                     STR_36:
  2973  007A49  2D                 	db	45
  2974  007A4A  45                 	db	69	;'E'
  2975  007A4B  52                 	db	82	;'R'
  2976  007A4C  52                 	db	82	;'R'
  2977  007A4D  4F                 	db	79	;'O'
  2978  007A4E  52                 	db	82	;'R'
  2979  007A4F  20                 	db	32
  2980  007A50  2D                 	db	45
  2981  007A51  20                 	db	32
  2982  007A52  46                 	db	70	;'F'
  2983  007A53  61                 	db	97	;'a'
  2984  007A54  69                 	db	105	;'i'
  2985  007A55  6C                 	db	108	;'l'
  2986  007A56  65                 	db	101	;'e'
  2987  007A57  64                 	db	100	;'d'
  2988  007A58  20                 	db	32
  2989  007A59  74                 	db	116	;'t'
  2990  007A5A  6F                 	db	111	;'o'
  2991  007A5B  20                 	db	32
  2992  007A5C  73                 	db	115	;'s'
  2993  007A5D  65                 	db	101	;'e'
  2994  007A5E  6E                 	db	110	;'n'
  2995  007A5F  64                 	db	100	;'d'
  2996  007A60  20                 	db	32
  2997  007A61  65                 	db	101	;'e'
  2998  007A62  76                 	db	118	;'v'
  2999  007A63  65                 	db	101	;'e'
  3000  007A64  6E                 	db	110	;'n'
  3001  007A65  74                 	db	116	;'t'
  3002  007A66  2E                 	db	46
  3003  007A67  0D                 	db	13
  3004  007A68  0A                 	db	10
  3005  007A69  00                 	db	0
  3006  007A6A                     STR_122:
  3007  007A6A  2D                 	db	45
  3008  007A6B  45                 	db	69	;'E'
  3009  007A6C  52                 	db	82	;'R'
  3010  007A6D  52                 	db	82	;'R'
  3011  007A6E  4F                 	db	79	;'O'
  3012  007A6F  52                 	db	82	;'R'
  3013  007A70  20                 	db	32
  3014  007A71  2D                 	db	45
  3015  007A72  20                 	db	32
  3016  007A73  55                 	db	85	;'U'
  3017  007A74  6E                 	db	110	;'n'
  3018  007A75  6B                 	db	107	;'k'
  3019  007A76  6E                 	db	110	;'n'
  3020  007A77  6F                 	db	111	;'o'
  3021  007A78  77                 	db	119	;'w'
  3022  007A79  6E                 	db	110	;'n'
  3023  007A7A  20                 	db	32
  3024  007A7B  27                 	db	39
  3025  007A7C  53                 	db	83	;'S'
  3026  007A7D  45                 	db	69	;'E'
  3027  007A7E  54                 	db	84	;'T'
  3028  007A7F  27                 	db	39
  3029  007A80  20                 	db	32
  3030  007A81  63                 	db	99	;'c'
  3031  007A82  6F                 	db	111	;'o'
  3032  007A83  6D                 	db	109	;'m'
  3033  007A84  6D                 	db	109	;'m'
  3034  007A85  61                 	db	97	;'a'
  3035  007A86  6E                 	db	110	;'n'
  3036  007A87  64                 	db	100	;'d'
  3037  007A88  0D                 	db	13
  3038  007A89  0A                 	db	10
  3039  007A8A  00                 	db	0
  3040  007A8B                     STR_76:
  3041  007A8B  2D                 	db	45
  3042  007A8C  45                 	db	69	;'E'
  3043  007A8D  52                 	db	82	;'R'
  3044  007A8E  52                 	db	82	;'R'
  3045  007A8F  4F                 	db	79	;'O'
  3046  007A90  52                 	db	82	;'R'
  3047  007A91  20                 	db	32
  3048  007A92  2D                 	db	45
  3049  007A93  20                 	db	32
  3050  007A94  46                 	db	70	;'F'
  3051  007A95  61                 	db	97	;'a'
  3052  007A96  69                 	db	105	;'i'
  3053  007A97  6C                 	db	108	;'l'
  3054  007A98  65                 	db	101	;'e'
  3055  007A99  64                 	db	100	;'d'
  3056  007A9A  20                 	db	32
  3057  007A9B  74                 	db	116	;'t'
  3058  007A9C  6F                 	db	111	;'o'
  3059  007A9D  20                 	db	32
  3060  007A9E  77                 	db	119	;'w'
  3061  007A9F  72                 	db	114	;'r'
  3062  007AA0  69                 	db	105	;'i'
  3063  007AA1  74                 	db	116	;'t'
  3064  007AA2  65                 	db	101	;'e'
  3065  007AA3  20                 	db	32
  3066  007AA4  76                 	db	118	;'v'
  3067  007AA5  61                 	db	97	;'a'
  3068  007AA6  6C                 	db	108	;'l'
  3069  007AA7  75                 	db	117	;'u'
  3070  007AA8  65                 	db	101	;'e'
  3071  007AA9  0D                 	db	13
  3072  007AAA  0A                 	db	10
  3073  007AAB  00                 	db	0
  3074  007AAC                     STR_49:
  3075  007AAC  2D                 	db	45
  3076  007AAD  45                 	db	69	;'E'
  3077  007AAE  52                 	db	82	;'R'
  3078  007AAF  52                 	db	82	;'R'
  3079  007AB0  4F                 	db	79	;'O'
  3080  007AB1  52                 	db	82	;'R'
  3081  007AB2  20                 	db	32
  3082  007AB3  2D                 	db	45
  3083  007AB4  20                 	db	32
  3084  007AB5  4E                 	db	78	;'N'
  3085  007AB6  65                 	db	101	;'e'
  3086  007AB7  65                 	db	101	;'e'
  3087  007AB8  64                 	db	100	;'d'
  3088  007AB9  73                 	db	115	;'s'
  3089  007ABA  20                 	db	32
  3090  007ABB  5B                 	db	91	;'['
  3091  007ABC  70                 	db	112	;'p'
  3092  007ABD  61                 	db	97	;'a'
  3093  007ABE  67                 	db	103	;'g'
  3094  007ABF  65                 	db	101	;'e'
  3095  007AC0  3A                 	db	58	;':'
  3096  007AC1  5D                 	db	93	;']'
  3097  007AC2  72                 	db	114	;'r'
  3098  007AC3  65                 	db	101	;'e'
  3099  007AC4  67                 	db	103	;'g'
  3100  007AC5  69                 	db	105	;'i'
  3101  007AC6  73                 	db	115	;'s'
  3102  007AC7  74                 	db	116	;'t'
  3103  007AC8  65                 	db	101	;'e'
  3104  007AC9  72                 	db	114	;'r'
  3105  007ACA  0D                 	db	13
  3106  007ACB  0A                 	db	10
  3107  007ACC  00                 	db	0
  3108  007ACD                     STR_117:
  3109  007ACD  2B                 	db	43
  3110  007ACE  4F                 	db	79	;'O'
  3111  007ACF  4B                 	db	75	;'K'
  3112  007AD0  20                 	db	32
  3113  007AD1  2D                 	db	45
  3114  007AD2  20                 	db	32
  3115  007AD3  4D                 	db	77	;'M'
  3116  007AD4  6F                 	db	111	;'o'
  3117  007AD5  64                 	db	100	;'d'
  3118  007AD6  65                 	db	101	;'e'
  3119  007AD7  20                 	db	32
  3120  007AD8  69                 	db	105	;'i'
  3121  007AD9  73                 	db	115	;'s'
  3122  007ADA  20                 	db	32
  3123  007ADB  6E                 	db	110	;'n'
  3124  007ADC  6F                 	db	111	;'o'
  3125  007ADD  77                 	db	119	;'w'
  3126  007ADE  20                 	db	32
  3127  007ADF  56                 	db	86	;'V'
  3128  007AE0  53                 	db	83	;'S'
  3129  007AE1  43                 	db	67	;'C'
  3130  007AE2  50                 	db	80	;'P'
  3131  007AE3  20                 	db	32
  3132  007AE4  44                 	db	68	;'D'
  3133  007AE5  72                 	db	114	;'r'
  3134  007AE6  69                 	db	105	;'i'
  3135  007AE7  76                 	db	118	;'v'
  3136  007AE8  65                 	db	101	;'e'
  3137  007AE9  72                 	db	114	;'r'
  3138  007AEA  0D                 	db	13
  3139  007AEB  0A                 	db	10
  3140  007AEC  00                 	db	0
  3141  007AED                     STR_6:
  3142  007AED  57                 	db	87	;'W'
  3143  007AEE  69                 	db	105	;'i'
  3144  007AEF  6C                 	db	108	;'l'
  3145  007AF0  6C                 	db	108	;'l'
  3146  007AF1  20                 	db	32
  3147  007AF2  65                 	db	101	;'e'
  3148  007AF3  6E                 	db	110	;'n'
  3149  007AF4  74                 	db	116	;'t'
  3150  007AF5  65                 	db	101	;'e'
  3151  007AF6  72                 	db	114	;'r'
  3152  007AF7  20                 	db	32
  3153  007AF8  62                 	db	98	;'b'
  3154  007AF9  6F                 	db	111	;'o'
  3155  007AFA  6F                 	db	111	;'o'
  3156  007AFB  74                 	db	116	;'t'
  3157  007AFC  6C                 	db	108	;'l'
  3158  007AFD  6F                 	db	111	;'o'
  3159  007AFE  61                 	db	97	;'a'
  3160  007AFF  64                 	db	100	;'d'
  3161  007B00  65                 	db	101	;'e'
  3162  007B01  72                 	db	114	;'r'
  3163  007B02  20                 	db	32
  3164  007B03  6E                 	db	110	;'n'
  3165  007B04  6F                 	db	111	;'o'
  3166  007B05  77                 	db	119	;'w'
  3167  007B06  2E                 	db	46
  3168  007B07  2E                 	db	46
  3169  007B08  2E                 	db	46
  3170  007B09  0D                 	db	13
  3171  007B0A  0A                 	db	10
  3172  007B0B  00                 	db	0
  3173  007B0C                     STR_204:
  3174  007B0C  43                 	db	67	;'C'
  3175  007B0D  4C                 	db	76	;'L'
  3176  007B0E  4F                 	db	79	;'O'
  3177  007B0F  53                 	db	83	;'S'
  3178  007B10  45                 	db	69	;'E'
  3179  007B11  20                 	db	32
  3180  007B12  2D                 	db	45
  3181  007B13  20                 	db	32
  3182  007B14  43                 	db	67	;'C'
  3183  007B15  6C                 	db	108	;'l'
  3184  007B16  6F                 	db	111	;'o'
  3185  007B17  73                 	db	115	;'s'
  3186  007B18  65                 	db	101	;'e'
  3187  007B19  20                 	db	32
  3188  007B1A  43                 	db	67	;'C'
  3189  007B1B  41                 	db	65	;'A'
  3190  007B1C  4E                 	db	78	;'N'
  3191  007B1D  20                 	db	32
  3192  007B1E  69                 	db	105	;'i'
  3193  007B1F  6E                 	db	110	;'n'
  3194  007B20  74                 	db	116	;'t'
  3195  007B21  65                 	db	101	;'e'
  3196  007B22  72                 	db	114	;'r'
  3197  007B23  66                 	db	102	;'f'
  3198  007B24  61                 	db	97	;'a'
  3199  007B25  63                 	db	99	;'c'
  3200  007B26  65                 	db	101	;'e'
  3201  007B27  2E                 	db	46
  3202  007B28  0D                 	db	13
  3203  007B29  0A                 	db	10
  3204  007B2A  00                 	db	0
  3205  007B2B                     STR_4:
  3206  007B2B  54                 	db	84	;'T'
  3207  007B2C  65                 	db	101	;'e'
  3208  007B2D  6D                 	db	109	;'m'
  3209  007B2E  70                 	db	112	;'p'
  3210  007B2F  6F                 	db	111	;'o'
  3211  007B30  72                 	db	114	;'r'
  3212  007B31  61                 	db	97	;'a'
  3213  007B32  72                 	db	114	;'r'
  3214  007B33  79                 	db	121	;'y'
  3215  007B34  20                 	db	32
  3216  007B35  76                 	db	118	;'v'
  3217  007B36  65                 	db	101	;'e'
  3218  007B37  72                 	db	114	;'r'
  3219  007B38  62                 	db	98	;'b'
  3220  007B39  6F                 	db	111	;'o'
  3221  007B3A  73                 	db	115	;'s'
  3222  007B3B  65                 	db	101	;'e'
  3223  007B3C  20                 	db	32
  3224  007B3D  6D                 	db	109	;'m'
  3225  007B3E  6F                 	db	111	;'o'
  3226  007B3F  64                 	db	100	;'d'
  3227  007B40  65                 	db	101	;'e'
  3228  007B41  20                 	db	32
  3229  007B42  73                 	db	115	;'s'
  3230  007B43  65                 	db	101	;'e'
  3231  007B44  74                 	db	116	;'t'
  3232  007B45  0D                 	db	13
  3233  007B46  0A                 	db	10
  3234  007B47  00                 	db	0
  3235  007B48                     STR_115:
  3236  007B48  2B                 	db	43
  3237  007B49  4F                 	db	79	;'O'
  3238  007B4A  4B                 	db	75	;'K'
  3239  007B4B  20                 	db	32
  3240  007B4C  2D                 	db	45
  3241  007B4D  20                 	db	32
  3242  007B4E  4D                 	db	77	;'M'
  3243  007B4F  6F                 	db	111	;'o'
  3244  007B50  64                 	db	100	;'d'
  3245  007B51  65                 	db	101	;'e'
  3246  007B52  20                 	db	32
  3247  007B53  69                 	db	105	;'i'
  3248  007B54  73                 	db	115	;'s'
  3249  007B55  20                 	db	32
  3250  007B56  6E                 	db	110	;'n'
  3251  007B57  6F                 	db	111	;'o'
  3252  007B58  77                 	db	119	;'w'
  3253  007B59  20                 	db	32
  3254  007B5A  76                 	db	118	;'v'
  3255  007B5B  65                 	db	101	;'e'
  3256  007B5C  72                 	db	114	;'r'
  3257  007B5D  62                 	db	98	;'b'
  3258  007B5E  6F                 	db	111	;'o'
  3259  007B5F  73                 	db	115	;'s'
  3260  007B60  65                 	db	101	;'e'
  3261  007B61  0D                 	db	13
  3262  007B62  0A                 	db	10
  3263  007B63  00                 	db	0
  3264  007B64                     STR_199:
  3265  007B64  42                 	db	66	;'B'
  3266  007B65  4F                 	db	79	;'O'
  3267  007B66  4F                 	db	79	;'O'
  3268  007B67  54                 	db	84	;'T'
  3269  007B68  20                 	db	32
  3270  007B69  2D                 	db	45
  3271  007B6A  20                 	db	32
  3272  007B6B  45                 	db	69	;'E'
  3273  007B6C  6E                 	db	110	;'n'
  3274  007B6D  74                 	db	116	;'t'
  3275  007B6E  65                 	db	101	;'e'
  3276  007B6F  72                 	db	114	;'r'
  3277  007B70  20                 	db	32
  3278  007B71  62                 	db	98	;'b'
  3279  007B72  6F                 	db	111	;'o'
  3280  007B73  6F                 	db	111	;'o'
  3281  007B74  74                 	db	116	;'t'
  3282  007B75  6C                 	db	108	;'l'
  3283  007B76  6F                 	db	111	;'o'
  3284  007B77  61                 	db	97	;'a'
  3285  007B78  64                 	db	100	;'d'
  3286  007B79  65                 	db	101	;'e'
  3287  007B7A  72                 	db	114	;'r'
  3288  007B7B  2E                 	db	46
  3289  007B7C  0D                 	db	13
  3290  007B7D  0A                 	db	10
  3291  007B7E  00                 	db	0
  3292  007B7F                     STR_123:
  3293  007B7F  2D                 	db	45
  3294  007B80  45                 	db	69	;'E'
  3295  007B81  52                 	db	82	;'R'
  3296  007B82  52                 	db	82	;'R'
  3297  007B83  4F                 	db	79	;'O'
  3298  007B84  52                 	db	82	;'R'
  3299  007B85  20                 	db	32
  3300  007B86  2D                 	db	45
  3301  007B87  20                 	db	32
  3302  007B88  55                 	db	85	;'U'
  3303  007B89  6E                 	db	110	;'n'
  3304  007B8A  6B                 	db	107	;'k'
  3305  007B8B  6E                 	db	110	;'n'
  3306  007B8C  6F                 	db	111	;'o'
  3307  007B8D  77                 	db	119	;'w'
  3308  007B8E  6E                 	db	110	;'n'
  3309  007B8F  20                 	db	32
  3310  007B90  63                 	db	99	;'c'
  3311  007B91  6F                 	db	111	;'o'
  3312  007B92  6D                 	db	109	;'m'
  3313  007B93  6D                 	db	109	;'m'
  3314  007B94  61                 	db	97	;'a'
  3315  007B95  6E                 	db	110	;'n'
  3316  007B96  64                 	db	100	;'d'
  3317  007B97  0D                 	db	13
  3318  007B98  0A                 	db	10
  3319  007B99  00                 	db	0
  3320  007B9A                     STR_230:
  3321  007B9A  4E                 	db	78	;'N'
  3322  007B9B  6F                 	db	111	;'o'
  3323  007B9C  64                 	db	100	;'d'
  3324  007B9D  65                 	db	101	;'e'
  3325  007B9E  20                 	db	32
  3326  007B9F  66                 	db	102	;'f'
  3327  007BA0  6F                 	db	111	;'o'
  3328  007BA1  75                 	db	117	;'u'
  3329  007BA2  6E                 	db	110	;'n'
  3330  007BA3  64                 	db	100	;'d'
  3331  007BA4  20                 	db	32
  3332  007BA5  77                 	db	119	;'w'
  3333  007BA6  69                 	db	105	;'i'
  3334  007BA7  74                 	db	116	;'t'
  3335  007BA8  68                 	db	104	;'h'
  3336  007BA9  20                 	db	32
  3337  007BAA  6E                 	db	110	;'n'
  3338  007BAB  6F                 	db	111	;'o'
  3339  007BAC  64                 	db	100	;'d'
  3340  007BAD  65                 	db	101	;'e'
  3341  007BAE  20                 	db	32
  3342  007BAF  69                 	db	105	;'i'
  3343  007BB0  64                 	db	100	;'d'
  3344  007BB1  20                 	db	32
  3345  007BB2  3D                 	db	61	;'='
  3346  007BB3  20                 	db	32
  3347  007BB4  00                 	db	0
  3348  007BB5                     STR_119:
  3349  007BB5  2B                 	db	43
  3350  007BB6  4F                 	db	79	;'O'
  3351  007BB7  4B                 	db	75	;'K'
  3352  007BB8  20                 	db	32
  3353  007BB9  2D                 	db	45
  3354  007BBA  20                 	db	32
  3355  007BBB  4D                 	db	77	;'M'
  3356  007BBC  6F                 	db	111	;'o'
  3357  007BBD  64                 	db	100	;'d'
  3358  007BBE  65                 	db	101	;'e'
  3359  007BBF  20                 	db	32
  3360  007BC0  69                 	db	105	;'i'
  3361  007BC1  73                 	db	115	;'s'
  3362  007BC2  20                 	db	32
  3363  007BC3  6E                 	db	110	;'n'
  3364  007BC4  6F                 	db	111	;'o'
  3365  007BC5  77                 	db	119	;'w'
  3366  007BC6  20                 	db	32
  3367  007BC7  53                 	db	83	;'S'
  3368  007BC8  4C                 	db	76	;'L'
  3369  007BC9  43                 	db	67	;'C'
  3370  007BCA  41                 	db	65	;'A'
  3371  007BCB  4E                 	db	78	;'N'
  3372  007BCC  0D                 	db	13
  3373  007BCD  0A                 	db	10
  3374  007BCE  00                 	db	0
  3375  007BCF                     STR_24:
  3376  007BCF  2B                 	db	43
  3377  007BD0  4F                 	db	79	;'O'
  3378  007BD1  4B                 	db	75	;'K'
  3379  007BD2  20                 	db	32
  3380  007BD3  2D                 	db	45
  3381  007BD4  20                 	db	32
  3382  007BD5  4C                 	db	76	;'L'
  3383  007BD6  69                 	db	105	;'i'
  3384  007BD7  73                 	db	115	;'s'
  3385  007BD8  74                 	db	116	;'t'
  3386  007BD9  65                 	db	101	;'e'
  3387  007BDA  6E                 	db	110	;'n'
  3388  007BDB  20                 	db	32
  3389  007BDC  6F                 	db	111	;'o'
  3390  007BDD  6E                 	db	110	;'n'
  3391  007BDE  6C                 	db	108	;'l'
  3392  007BDF  79                 	db	121	;'y'
  3393  007BE0  20                 	db	32
  3394  007BE1  6D                 	db	109	;'m'
  3395  007BE2  6F                 	db	111	;'o'
  3396  007BE3  64                 	db	100	;'d'
  3397  007BE4  65                 	db	101	;'e'
  3398  007BE5  0D                 	db	13
  3399  007BE6  0A                 	db	10
  3400  007BE7  00                 	db	0
  3401  007BE8                     STR_183:
  3402  007BE8  54                 	db	84	;'T'
  3403  007BE9  72                 	db	114	;'r'
  3404  007BEA  61                 	db	97	;'a'
  3405  007BEB  6E                 	db	110	;'n'
  3406  007BEC  73                 	db	115	;'s'
  3407  007BED  6D                 	db	109	;'m'
  3408  007BEE  69                 	db	105	;'i'
  3409  007BEF  74                 	db	116	;'t'
  3410  007BF0  20                 	db	32
  3411  007BF1  45                 	db	69	;'E'
  3412  007BF2  72                 	db	114	;'r'
  3413  007BF3  72                 	db	114	;'r'
  3414  007BF4  6F                 	db	111	;'o'
  3415  007BF5  72                 	db	114	;'r'
  3416  007BF6  20                 	db	32
  3417  007BF7  43                 	db	67	;'C'
  3418  007BF8  6F                 	db	111	;'o'
  3419  007BF9  75                 	db	117	;'u'
  3420  007BFA  6E                 	db	110	;'n'
  3421  007BFB  74                 	db	116	;'t'
  3422  007BFC  65                 	db	101	;'e'
  3423  007BFD  72                 	db	114	;'r'
  3424  007BFE  3A                 	db	58	;':'
  3425  007BFF  20                 	db	32
  3426  007C00  00                 	db	0
  3427  007C01                     STR_207:
  3428  007C01  54                 	db	84	;'T'
  3429  007C02  58                 	db	88	;'X'
  3430  007C03  20                 	db	32
  3431  007C04  2D                 	db	45
  3432  007C05  20                 	db	32
  3433  007C06  53                 	db	83	;'S'
  3434  007C07  65                 	db	101	;'e'
  3435  007C08  6E                 	db	110	;'n'
  3436  007C09  64                 	db	100	;'d'
  3437  007C0A  20                 	db	32
  3438  007C0B  43                 	db	67	;'C'
  3439  007C0C  41                 	db	65	;'A'
  3440  007C0D  4E                 	db	78	;'N'
  3441  007C0E  20                 	db	32
  3442  007C0F  66                 	db	102	;'f'
  3443  007C10  72                 	db	114	;'r'
  3444  007C11  61                 	db	97	;'a'
  3445  007C12  6D                 	db	109	;'m'
  3446  007C13  65                 	db	101	;'e'
  3447  007C14  20                 	db	32
  3448  007C15  2E                 	db	46
  3449  007C16  0D                 	db	13
  3450  007C17  0A                 	db	10
  3451  007C18  00                 	db	0
  3452  007C19                     STR_217:
  3453  007C19  46                 	db	70	;'F'
  3454  007C1A  49                 	db	73	;'I'
  3455  007C1B  4C                 	db	76	;'L'
  3456  007C1C  54                 	db	84	;'T'
  3457  007C1D  45                 	db	69	;'E'
  3458  007C1E  52                 	db	82	;'R'
  3459  007C1F  20                 	db	32
  3460  007C20  2D                 	db	45
  3461  007C21  20                 	db	32
  3462  007C22  53                 	db	83	;'S'
  3463  007C23  65                 	db	101	;'e'
  3464  007C24  74                 	db	116	;'t'
  3465  007C25  20                 	db	32
  3466  007C26  66                 	db	102	;'f'
  3467  007C27  69                 	db	105	;'i'
  3468  007C28  6C                 	db	108	;'l'
  3469  007C29  74                 	db	116	;'t'
  3470  007C2A  65                 	db	101	;'e'
  3471  007C2B  72                 	db	114	;'r'
  3472  007C2C  20                 	db	32
  3473  007C2D  2E                 	db	46
  3474  007C2E  0D                 	db	13
  3475  007C2F  0A                 	db	10
  3476  007C30  00                 	db	0
  3477  007C31                     STR_47:
  3478  007C31  2D                 	db	45
  3479  007C32  45                 	db	69	;'E'
  3480  007C33  52                 	db	82	;'R'
  3481  007C34  52                 	db	82	;'R'
  3482  007C35  4F                 	db	79	;'O'
  3483  007C36  52                 	db	82	;'R'
  3484  007C37  20                 	db	32
  3485  007C38  2D                 	db	45
  3486  007C39  20                 	db	32
  3487  007C3A  4E                 	db	78	;'N'
  3488  007C3B  65                 	db	101	;'e'
  3489  007C3C  65                 	db	101	;'e'
  3490  007C3D  64                 	db	100	;'d'
  3491  007C3E  73                 	db	115	;'s'
  3492  007C3F  20                 	db	32
  3493  007C40  6E                 	db	110	;'n'
  3494  007C41  6F                 	db	111	;'o'
  3495  007C42  64                 	db	100	;'d'
  3496  007C43  65                 	db	101	;'e'
  3497  007C44  69                 	db	105	;'i'
  3498  007C45  64                 	db	100	;'d'
  3499  007C46  0D                 	db	13
  3500  007C47  0A                 	db	10
  3501  007C48  00                 	db	0
  3502  007C49                     STR_27:
  3503  007C49  2D                 	db	45
  3504  007C4A  45                 	db	69	;'E'
  3505  007C4B  52                 	db	82	;'R'
  3506  007C4C  52                 	db	82	;'R'
  3507  007C4D  4F                 	db	79	;'O'
  3508  007C4E  52                 	db	82	;'R'
  3509  007C4F  20                 	db	32
  3510  007C50  2D                 	db	45
  3511  007C51  20                 	db	32
  3512  007C52  55                 	db	85	;'U'
  3513  007C53  6E                 	db	110	;'n'
  3514  007C54  6B                 	db	107	;'k'
  3515  007C55  6E                 	db	110	;'n'
  3516  007C56  6F                 	db	111	;'o'
  3517  007C57  77                 	db	119	;'w'
  3518  007C58  6E                 	db	110	;'n'
  3519  007C59  20                 	db	32
  3520  007C5A  6D                 	db	109	;'m'
  3521  007C5B  6F                 	db	111	;'o'
  3522  007C5C  64                 	db	100	;'d'
  3523  007C5D  65                 	db	101	;'e'
  3524  007C5E  0D                 	db	13
  3525  007C5F  0A                 	db	10
  3526  007C60  00                 	db	0
  3527  007C61                     STR_74:
  3528  007C61  2D                 	db	45
  3529  007C62  45                 	db	69	;'E'
  3530  007C63  52                 	db	82	;'R'
  3531  007C64  52                 	db	82	;'R'
  3532  007C65  4F                 	db	79	;'O'
  3533  007C66  52                 	db	82	;'R'
  3534  007C67  20                 	db	32
  3535  007C68  2D                 	db	45
  3536  007C69  20                 	db	32
  3537  007C6A  4E                 	db	78	;'N'
  3538  007C6B  65                 	db	101	;'e'
  3539  007C6C  65                 	db	101	;'e'
  3540  007C6D  64                 	db	100	;'d'
  3541  007C6E  20                 	db	32
  3542  007C6F  61                 	db	97	;'a'
  3543  007C70  20                 	db	32
  3544  007C71  76                 	db	118	;'v'
  3545  007C72  61                 	db	97	;'a'
  3546  007C73  6C                 	db	108	;'l'
  3547  007C74  75                 	db	117	;'u'
  3548  007C75  65                 	db	101	;'e'
  3549  007C76  0D                 	db	13
  3550  007C77  0A                 	db	10
  3551  007C78  00                 	db	0
  3552  007C79                     STR_190:
  3553  007C79  52                 	db	82	;'R'
  3554  007C7A  65                 	db	101	;'e'
  3555  007C7B  63                 	db	99	;'c'
  3556  007C7C  65                 	db	101	;'e'
  3557  007C7D  69                 	db	105	;'i'
  3558  007C7E  76                 	db	118	;'v'
  3559  007C7F  65                 	db	101	;'e'
  3560  007C80  20                 	db	32
  3561  007C81  45                 	db	69	;'E'
  3562  007C82  72                 	db	114	;'r'
  3563  007C83  72                 	db	114	;'r'
  3564  007C84  6F                 	db	111	;'o'
  3565  007C85  72                 	db	114	;'r'
  3566  007C86  20                 	db	32
  3567  007C87  43                 	db	67	;'C'
  3568  007C88  6F                 	db	111	;'o'
  3569  007C89  75                 	db	117	;'u'
  3570  007C8A  6E                 	db	110	;'n'
  3571  007C8B  74                 	db	116	;'t'
  3572  007C8C  65                 	db	101	;'e'
  3573  007C8D  72                 	db	114	;'r'
  3574  007C8E  3A                 	db	58	;':'
  3575  007C8F  20                 	db	32
  3576  007C90  00                 	db	0
  3577  007C91                     STR_175:
  3578  007C91  55                 	db	85	;'U'
  3579  007C92  41                 	db	65	;'A'
  3580  007C93  52                 	db	82	;'R'
  3581  007C94  54                 	db	84	;'T'
  3582  007C95  20                 	db	32
  3583  007C96  52                 	db	82	;'R'
  3584  007C97  65                 	db	101	;'e'
  3585  007C98  63                 	db	99	;'c'
  3586  007C99  65                 	db	101	;'e'
  3587  007C9A  69                 	db	105	;'i'
  3588  007C9B  76                 	db	118	;'v'
  3589  007C9C  65                 	db	101	;'e'
  3590  007C9D  20                 	db	32
  3591  007C9E  6F                 	db	111	;'o'
  3592  007C9F  76                 	db	118	;'v'
  3593  007CA0  65                 	db	101	;'e'
  3594  007CA1  72                 	db	114	;'r'
  3595  007CA2  72                 	db	114	;'r'
  3596  007CA3  75                 	db	117	;'u'
  3597  007CA4  6E                 	db	110	;'n'
  3598  007CA5  73                 	db	115	;'s'
  3599  007CA6  3A                 	db	58	;':'
  3600  007CA7  20                 	db	32
  3601  007CA8  00                 	db	0
  3602  007CA9                     STR_171:
  3603  007CA9  43                 	db	67	;'C'
  3604  007CAA  41                 	db	65	;'A'
  3605  007CAB  4E                 	db	78	;'N'
  3606  007CAC  20                 	db	32
  3607  007CAD  54                 	db	84	;'T'
  3608  007CAE  72                 	db	114	;'r'
  3609  007CAF  61                 	db	97	;'a'
  3610  007CB0  6E                 	db	110	;'n'
  3611  007CB1  73                 	db	115	;'s'
  3612  007CB2  6D                 	db	109	;'m'
  3613  007CB3  69                 	db	105	;'i'
  3614  007CB4  74                 	db	116	;'t'
  3615  007CB5  20                 	db	32
  3616  007CB6  6F                 	db	111	;'o'
  3617  007CB7  76                 	db	118	;'v'
  3618  007CB8  65                 	db	101	;'e'
  3619  007CB9  72                 	db	114	;'r'
  3620  007CBA  72                 	db	114	;'r'
  3621  007CBB  75                 	db	117	;'u'
  3622  007CBC  6E                 	db	110	;'n'
  3623  007CBD  73                 	db	115	;'s'
  3624  007CBE  3A                 	db	58	;':'
  3625  007CBF  20                 	db	32
  3626  007CC0  00                 	db	0
  3627  007CC1                     STR_209:
  3628  007CC1  52                 	db	82	;'R'
  3629  007CC2  58                 	db	88	;'X'
  3630  007CC3  20                 	db	32
  3631  007CC4  2D                 	db	45
  3632  007CC5  20                 	db	32
  3633  007CC6  52                 	db	82	;'R'
  3634  007CC7  65                 	db	101	;'e'
  3635  007CC8  61                 	db	97	;'a'
  3636  007CC9  64                 	db	100	;'d'
  3637  007CCA  20                 	db	32
  3638  007CCB  43                 	db	67	;'C'
  3639  007CCC  41                 	db	65	;'A'
  3640  007CCD  4E                 	db	78	;'N'
  3641  007CCE  20                 	db	32
  3642  007CCF  66                 	db	102	;'f'
  3643  007CD0  72                 	db	114	;'r'
  3644  007CD1  61                 	db	97	;'a'
  3645  007CD2  6D                 	db	109	;'m'
  3646  007CD3  65                 	db	101	;'e'
  3647  007CD4  2E                 	db	46
  3648  007CD5  0D                 	db	13
  3649  007CD6  0A                 	db	10
  3650  007CD7  00                 	db	0
  3651  007CD8                     STR_167:
  3652  007CD8  43                 	db	67	;'C'
  3653  007CD9  41                 	db	65	;'A'
  3654  007CDA  4E                 	db	78	;'N'
  3655  007CDB  20                 	db	32
  3656  007CDC  52                 	db	82	;'R'
  3657  007CDD  65                 	db	101	;'e'
  3658  007CDE  63                 	db	99	;'c'
  3659  007CDF  65                 	db	101	;'e'
  3660  007CE0  69                 	db	105	;'i'
  3661  007CE1  76                 	db	118	;'v'
  3662  007CE2  65                 	db	101	;'e'
  3663  007CE3  20                 	db	32
  3664  007CE4  6F                 	db	111	;'o'
  3665  007CE5  76                 	db	118	;'v'
  3666  007CE6  65                 	db	101	;'e'
  3667  007CE7  72                 	db	114	;'r'
  3668  007CE8  72                 	db	114	;'r'
  3669  007CE9  75                 	db	117	;'u'
  3670  007CEA  6E                 	db	110	;'n'
  3671  007CEB  73                 	db	115	;'s'
  3672  007CEC  3A                 	db	58	;':'
  3673  007CED  20                 	db	32
  3674  007CEE  00                 	db	0
  3675  007CEF                     STR_252:
  3676  007CEF  55                 	db	85	;'U'
  3677  007CF0  6E                 	db	110	;'n'
  3678  007CF1  6B                 	db	107	;'k'
  3679  007CF2  6E                 	db	110	;'n'
  3680  007CF3  6F                 	db	111	;'o'
  3681  007CF4  77                 	db	119	;'w'
  3682  007CF5  6E                 	db	110	;'n'
  3683  007CF6  20                 	db	32
  3684  007CF7  28                 	db	40
  3685  007CF8  56                 	db	86	;'V'
  3686  007CF9  65                 	db	101	;'e'
  3687  007CFA  72                 	db	114	;'r'
  3688  007CFB  62                 	db	98	;'b'
  3689  007CFC  6F                 	db	111	;'o'
  3690  007CFD  73                 	db	115	;'s'
  3691  007CFE  65                 	db	101	;'e'
  3692  007CFF  20                 	db	32
  3693  007D00  75                 	db	117	;'u'
  3694  007D01  73                 	db	115	;'s'
  3695  007D02  65                 	db	101	;'e'
  3696  007D03  64                 	db	100	;'d'
  3697  007D04  29                 	db	41
  3698  007D05  00                 	db	0
  3699  007D06                     STR_23:
  3700  007D06  2B                 	db	43
  3701  007D07  4F                 	db	79	;'O'
  3702  007D08  4B                 	db	75	;'K'
  3703  007D09  20                 	db	32
  3704  007D0A  2D                 	db	45
  3705  007D0B  20                 	db	32
  3706  007D0C  4C                 	db	76	;'L'
  3707  007D0D  6F                 	db	111	;'o'
  3708  007D0E  6F                 	db	111	;'o'
  3709  007D0F  70                 	db	112	;'p'
  3710  007D10  62                 	db	98	;'b'
  3711  007D11  61                 	db	97	;'a'
  3712  007D12  63                 	db	99	;'c'
  3713  007D13  6B                 	db	107	;'k'
  3714  007D14  20                 	db	32
  3715  007D15  6D                 	db	109	;'m'
  3716  007D16  6F                 	db	111	;'o'
  3717  007D17  64                 	db	100	;'d'
  3718  007D18  65                 	db	101	;'e'
  3719  007D19  0D                 	db	13
  3720  007D1A  0A                 	db	10
  3721  007D1B  00                 	db	0
  3722  007D1C                     STR_159:
  3723  007D1C  52                 	db	82	;'R'
  3724  007D1D  65                 	db	101	;'e'
  3725  007D1E  63                 	db	99	;'c'
  3726  007D1F  65                 	db	101	;'e'
  3727  007D20  69                 	db	105	;'i'
  3728  007D21  76                 	db	118	;'v'
  3729  007D22  65                 	db	101	;'e'
  3730  007D23  64                 	db	100	;'d'
  3731  007D24  20                 	db	32
  3732  007D25  43                 	db	67	;'C'
  3733  007D26  41                 	db	65	;'A'
  3734  007D27  4E                 	db	78	;'N'
  3735  007D28  20                 	db	32
  3736  007D29  66                 	db	102	;'f'
  3737  007D2A  72                 	db	114	;'r'
  3738  007D2B  61                 	db	97	;'a'
  3739  007D2C  6D                 	db	109	;'m'
  3740  007D2D  65                 	db	101	;'e'
  3741  007D2E  73                 	db	115	;'s'
  3742  007D2F  3A                 	db	58	;':'
  3743  007D30  20                 	db	32
  3744  007D31  00                 	db	0
  3745  007D32                     STR_163:
  3746  007D32  52                 	db	82	;'R'
  3747  007D33  65                 	db	101	;'e'
  3748  007D34  63                 	db	99	;'c'
  3749  007D35  65                 	db	101	;'e'
  3750  007D36  69                 	db	105	;'i'
  3751  007D37  76                 	db	118	;'v'
  3752  007D38  65                 	db	101	;'e'
  3753  007D39  64                 	db	100	;'d'
  3754  007D3A  20                 	db	32
  3755  007D3B  43                 	db	67	;'C'
  3756  007D3C  41                 	db	65	;'A'
  3757  007D3D  4E                 	db	78	;'N'
  3758  007D3E  20                 	db	32
  3759  007D3F  62                 	db	98	;'b'
  3760  007D40  79                 	db	121	;'y'
  3761  007D41  74                 	db	116	;'t'
  3762  007D42  65                 	db	101	;'e'
  3763  007D43  73                 	db	115	;'s'
  3764  007D44  3A                 	db	58	;':'
  3765  007D45  20                 	db	32
  3766  007D46  00                 	db	0
  3767  007D47                     STR_219:
  3768  007D47  4D                 	db	77	;'M'
  3769  007D48  41                 	db	65	;'A'
  3770  007D49  53                 	db	83	;'S'
  3771  007D4A  4B                 	db	75	;'K'
  3772  007D4B  20                 	db	32
  3773  007D4C  2D                 	db	45
  3774  007D4D  20                 	db	32
  3775  007D4E  53                 	db	83	;'S'
  3776  007D4F  65                 	db	101	;'e'
  3777  007D50  74                 	db	116	;'t'
  3778  007D51  20                 	db	32
  3779  007D52  6D                 	db	109	;'m'
  3780  007D53  61                 	db	97	;'a'
  3781  007D54  73                 	db	115	;'s'
  3782  007D55  6B                 	db	107	;'k'
  3783  007D56  20                 	db	32
  3784  007D57  2E                 	db	46
  3785  007D58  0D                 	db	13
  3786  007D59  0A                 	db	10
  3787  007D5A  00                 	db	0
  3788  007D5B                     STR_124:
  3789  007D5B  4A                 	db	74	;'J'
  3790  007D5C  46                 	db	70	;'F'
  3791  007D5D  72                 	db	114	;'r'
  3792  007D5E  61                 	db	97	;'a'
  3793  007D5F  6E                 	db	110	;'n'
  3794  007D60  6B                 	db	107	;'k'
  3795  007D61  66                 	db	102	;'f'
  3796  007D62  75                 	db	117	;'u'
  3797  007D63  72                 	db	114	;'r'
  3798  007D64  74                 	db	116	;'t'
  3799  007D65  20                 	db	32
  3800  007D66  52                 	db	82	;'R'
  3801  007D67  53                 	db	83	;'S'
  3802  007D68  2D                 	db	45
  3803  007D69  32                 	db	50	;'2'
  3804  007D6A  33                 	db	51	;'3'
  3805  007D6B  32                 	db	50	;'2'
  3806  007D6C  0D                 	db	13
  3807  007D6D  0A                 	db	10
  3808  007D6E  00                 	db	0
  3809  007D6F                     STR_25:
  3810  007D6F  2B                 	db	43
  3811  007D70  4F                 	db	79	;'O'
  3812  007D71  4B                 	db	75	;'K'
  3813  007D72  20                 	db	32
  3814  007D73  2D                 	db	45
  3815  007D74  20                 	db	32
  3816  007D75  43                 	db	67	;'C'
  3817  007D76  6C                 	db	108	;'l'
  3818  007D77  6F                 	db	111	;'o'
  3819  007D78  73                 	db	115	;'s'
  3820  007D79  65                 	db	101	;'e'
  3821  007D7A  64                 	db	100	;'d'
  3822  007D7B  20                 	db	32
  3823  007D7C  6D                 	db	109	;'m'
  3824  007D7D  6F                 	db	111	;'o'
  3825  007D7E  64                 	db	100	;'d'
  3826  007D7F  65                 	db	101	;'e'
  3827  007D80  0D                 	db	13
  3828  007D81  0A                 	db	10
  3829  007D82  00                 	db	0
  3830  007D83                     STR_20:
  3831  007D83  2B                 	db	43
  3832  007D84  4F                 	db	79	;'O'
  3833  007D85  4B                 	db	75	;'K'
  3834  007D86  20                 	db	32
  3835  007D87  2D                 	db	45
  3836  007D88  20                 	db	32
  3837  007D89  4E                 	db	78	;'N'
  3838  007D8A  6F                 	db	111	;'o'
  3839  007D8B  72                 	db	114	;'r'
  3840  007D8C  6D                 	db	109	;'m'
  3841  007D8D  61                 	db	97	;'a'
  3842  007D8E  6C                 	db	108	;'l'
  3843  007D8F  20                 	db	32
  3844  007D90  6D                 	db	109	;'m'
  3845  007D91  6F                 	db	111	;'o'
  3846  007D92  64                 	db	100	;'d'
  3847  007D93  65                 	db	101	;'e'
  3848  007D94  0D                 	db	13
  3849  007D95  0A                 	db	10
  3850  007D96  00                 	db	0
  3851  007D97                     STR_21:
  3852  007D97  2B                 	db	43
  3853  007D98  4F                 	db	79	;'O'
  3854  007D99  4B                 	db	75	;'K'
  3855  007D9A  20                 	db	32
  3856  007D9B  2D                 	db	45
  3857  007D9C  20                 	db	32
  3858  007D9D  53                 	db	83	;'S'
  3859  007D9E  69                 	db	105	;'i'
  3860  007D9F  6C                 	db	108	;'l'
  3861  007DA0  65                 	db	101	;'e'
  3862  007DA1  6E                 	db	110	;'n'
  3863  007DA2  74                 	db	116	;'t'
  3864  007DA3  20                 	db	32
  3865  007DA4  6D                 	db	109	;'m'
  3866  007DA5  6F                 	db	111	;'o'
  3867  007DA6  64                 	db	100	;'d'
  3868  007DA7  65                 	db	101	;'e'
  3869  007DA8  0D                 	db	13
  3870  007DA9  0A                 	db	10
  3871  007DAA  00                 	db	0
  3872  007DAB                     STR_78:
  3873  007DAB  49                 	db	73	;'I'
  3874  007DAC  6E                 	db	110	;'n'
  3875  007DAD  66                 	db	102	;'f'
  3876  007DAE  6F                 	db	111	;'o'
  3877  007DAF  20                 	db	32
  3878  007DB0  66                 	db	102	;'f'
  3879  007DB1  6F                 	db	111	;'o'
  3880  007DB2  72                 	db	114	;'r'
  3881  007DB3  20                 	db	32
  3882  007DB4  6E                 	db	110	;'n'
  3883  007DB5  6F                 	db	111	;'o'
  3884  007DB6  64                 	db	100	;'d'
  3885  007DB7  65                 	db	101	;'e'
  3886  007DB8  20                 	db	32
  3887  007DB9  69                 	db	105	;'i'
  3888  007DBA  64                 	db	100	;'d'
  3889  007DBB  20                 	db	32
  3890  007DBC  3D                 	db	61	;'='
  3891  007DBD  20                 	db	32
  3892  007DBE  00                 	db	0
  3893  007DBF                     STR_241:
  3894  007DBF  46                 	db	70	;'F'
  3895  007DC0  69                 	db	105	;'i'
  3896  007DC1  72                 	db	114	;'r'
  3897  007DC2  6D                 	db	109	;'m'
  3898  007DC3  77                 	db	119	;'w'
  3899  007DC4  61                 	db	97	;'a'
  3900  007DC5  72                 	db	114	;'r'
  3901  007DC6  65                 	db	101	;'e'
  3902  007DC7  20                 	db	32
  3903  007DC8  76                 	db	118	;'v'
  3904  007DC9  65                 	db	101	;'e'
  3905  007DCA  72                 	db	114	;'r'
  3906  007DCB  73                 	db	115	;'s'
  3907  007DCC  69                 	db	105	;'i'
  3908  007DCD  6F                 	db	111	;'o'
  3909  007DCE  6E                 	db	110	;'n'
  3910  007DCF  20                 	db	32
  3911  007DD0  3D                 	db	61	;'='
  3912  007DD1  20                 	db	32
  3913  007DD2  00                 	db	0
  3914  007DD3                     STR_22:
  3915  007DD3  2B                 	db	43
  3916  007DD4  4F                 	db	79	;'O'
  3917  007DD5  4B                 	db	75	;'K'
  3918  007DD6  20                 	db	32
  3919  007DD7  2D                 	db	45
  3920  007DD8  20                 	db	32
  3921  007DD9  53                 	db	83	;'S'
  3922  007DDA  6C                 	db	108	;'l'
  3923  007DDB  65                 	db	101	;'e'
  3924  007DDC  65                 	db	101	;'e'
  3925  007DDD  70                 	db	112	;'p'
  3926  007DDE  20                 	db	32
  3927  007DDF  6D                 	db	109	;'m'
  3928  007DE0  6F                 	db	111	;'o'
  3929  007DE1  64                 	db	100	;'d'
  3930  007DE2  65                 	db	101	;'e'
  3931  007DE3  0D                 	db	13
  3932  007DE4  0A                 	db	10
  3933  007DE5  00                 	db	0
  3934  007DE6                     STR_26:
  3935  007DE6  2B                 	db	43
  3936  007DE7  4F                 	db	79	;'O'
  3937  007DE8  4B                 	db	75	;'K'
  3938  007DE9  20                 	db	32
  3939  007DEA  2D                 	db	45
  3940  007DEB  20                 	db	32
  3941  007DEC  42                 	db	66	;'B'
  3942  007DED  69                 	db	105	;'i'
  3943  007DEE  74                 	db	116	;'t'
  3944  007DEF  73                 	db	115	;'s'
  3945  007DF0  20                 	db	32
  3946  007DF1  6D                 	db	109	;'m'
  3947  007DF2  6F                 	db	111	;'o'
  3948  007DF3  64                 	db	100	;'d'
  3949  007DF4  65                 	db	101	;'e'
  3950  007DF5  0D                 	db	13
  3951  007DF6  0A                 	db	10
  3952  007DF7  00                 	db	0
  3953  007DF8                     STR_39:
  3954  007DF8  2B                 	db	43
  3955  007DF9  4F                 	db	79	;'O'
  3956  007DFA  4B                 	db	75	;'K'
  3957  007DFB  20                 	db	32
  3958  007DFC  2D                 	db	45
  3959  007DFD  20                 	db	32
  3960  007DFE  6E                 	db	110	;'n'
  3961  007DFF  6F                 	db	111	;'o'
  3962  007E00  20                 	db	32
  3963  007E01  65                 	db	101	;'e'
  3964  007E02  76                 	db	118	;'v'
  3965  007E03  65                 	db	101	;'e'
  3966  007E04  6E                 	db	110	;'n'
  3967  007E05  74                 	db	116	;'t'
  3968  007E06  73                 	db	115	;'s'
  3969  007E07  0D                 	db	13
  3970  007E08  0A                 	db	10
  3971  007E09  00                 	db	0
  3972  007E0A                     STR_151:
  3973  007E0A  53                 	db	83	;'S'
  3974  007E0B  65                 	db	101	;'e'
  3975  007E0C  6E                 	db	110	;'n'
  3976  007E0D  74                 	db	116	;'t'
  3977  007E0E  20                 	db	32
  3978  007E0F  43                 	db	67	;'C'
  3979  007E10  41                 	db	65	;'A'
  3980  007E11  4E                 	db	78	;'N'
  3981  007E12  20                 	db	32
  3982  007E13  66                 	db	102	;'f'
  3983  007E14  72                 	db	114	;'r'
  3984  007E15  61                 	db	97	;'a'
  3985  007E16  6D                 	db	109	;'m'
  3986  007E17  65                 	db	101	;'e'
  3987  007E18  73                 	db	115	;'s'
  3988  007E19  3A                 	db	58	;':'
  3989  007E1A  20                 	db	32
  3990  007E1B  00                 	db	0
  3991  007E1C                     STR_254:
  3992  007E1C  30                 	db	48	;'0'
  3993  007E1D  31                 	db	49	;'1'
  3994  007E1E  32                 	db	50	;'2'
  3995  007E1F  33                 	db	51	;'3'
  3996  007E20  34                 	db	52	;'4'
  3997  007E21  35                 	db	53	;'5'
  3998  007E22  36                 	db	54	;'6'
  3999  007E23  37                 	db	55	;'7'
  4000  007E24  38                 	db	56	;'8'
  4001  007E25  39                 	db	57	;'9'
  4002  007E26  41                 	db	65	;'A'
  4003  007E27  42                 	db	66	;'B'
  4004  007E28  43                 	db	67	;'C'
  4005  007E29  44                 	db	68	;'D'
  4006  007E2A  45                 	db	69	;'E'
  4007  007E2B  46                 	db	70	;'F'
  4008  007E2C  00                 	db	0
  4009  007E2D                     STR_255:
  4010  007E2D  30                 	db	48	;'0'
  4011  007E2E  31                 	db	49	;'1'
  4012  007E2F  32                 	db	50	;'2'
  4013  007E30  33                 	db	51	;'3'
  4014  007E31  34                 	db	52	;'4'
  4015  007E32  35                 	db	53	;'5'
  4016  007E33  36                 	db	54	;'6'
  4017  007E34  37                 	db	55	;'7'
  4018  007E35  38                 	db	56	;'8'
  4019  007E36  39                 	db	57	;'9'
  4020  007E37  61                 	db	97	;'a'
  4021  007E38  62                 	db	98	;'b'
  4022  007E39  63                 	db	99	;'c'
  4023  007E3A  64                 	db	100	;'d'
  4024  007E3B  65                 	db	101	;'e'
  4025  007E3C  66                 	db	102	;'f'
  4026  007E3D  00                 	db	0
  4027  007E3E                     STR_155:
  4028  007E3E  53                 	db	83	;'S'
  4029  007E3F  65                 	db	101	;'e'
  4030  007E40  6E                 	db	110	;'n'
  4031  007E41  74                 	db	116	;'t'
  4032  007E42  20                 	db	32
  4033  007E43  43                 	db	67	;'C'
  4034  007E44  41                 	db	65	;'A'
  4035  007E45  4E                 	db	78	;'N'
  4036  007E46  20                 	db	32
  4037  007E47  62                 	db	98	;'b'
  4038  007E48  79                 	db	121	;'y'
  4039  007E49  74                 	db	116	;'t'
  4040  007E4A  65                 	db	101	;'e'
  4041  007E4B  73                 	db	115	;'s'
  4042  007E4C  3A                 	db	58	;':'
  4043  007E4D  20                 	db	32
  4044  007E4E  00                 	db	0
  4045  007E4F                     STR_233:
  4046  007E4F  20                 	db	32
  4047  007E50  6E                 	db	110	;'n'
  4048  007E51  6F                 	db	111	;'o'
  4049  007E52  64                 	db	100	;'d'
  4050  007E53  65                 	db	101	;'e'
  4051  007E54  73                 	db	115	;'s'
  4052  007E55  20                 	db	32
  4053  007E56  66                 	db	102	;'f'
  4054  007E57  6F                 	db	111	;'o'
  4055  007E58  75                 	db	117	;'u'
  4056  007E59  6E                 	db	110	;'n'
  4057  007E5A  64                 	db	100	;'d'
  4058  007E5B  0D                 	db	13
  4059  007E5C  0A                 	db	10
  4060  007E5D  00                 	db	0
  4061  007E5E                     STR_51:
  4062  007E5E  56                 	db	86	;'V'
  4063  007E5F  61                 	db	97	;'a'
  4064  007E60  6C                 	db	108	;'l'
  4065  007E61  75                 	db	117	;'u'
  4066  007E62  65                 	db	101	;'e'
  4067  007E63  20                 	db	32
  4068  007E64  66                 	db	102	;'f'
  4069  007E65  6F                 	db	111	;'o'
  4070  007E66  72                 	db	114	;'r'
  4071  007E67  20                 	db	32
  4072  007E68  72                 	db	114	;'r'
  4073  007E69  65                 	db	101	;'e'
  4074  007E6A  67                 	db	103	;'g'
  4075  007E6B  20                 	db	32
  4076  007E6C  00                 	db	0
  4077  007E6D                     STR_239:
  4078  007E6D  4D                 	db	77	;'M'
  4079  007E6E  44                 	db	68	;'D'
  4080  007E6F  46                 	db	70	;'F'
  4081  007E70  20                 	db	32
  4082  007E71  3D                 	db	61	;'='
  4083  007E72  20                 	db	32
  4084  007E73  68                 	db	104	;'h'
  4085  007E74  74                 	db	116	;'t'
  4086  007E75  74                 	db	116	;'t'
  4087  007E76  70                 	db	112	;'p'
  4088  007E77  3A                 	db	58	;':'
  4089  007E78  2F                 	db	47
  4090  007E79  2F                 	db	47
  4091  007E7A  00                 	db	0
  4092  007E7B                     STR_249:
  4093  007E7B  56                 	db	86	;'V'
  4094  007E7C  53                 	db	83	;'S'
  4095  007E7D  43                 	db	67	;'C'
  4096  007E7E  50                 	db	80	;'P'
  4097  007E7F  20                 	db	32
  4098  007E80  44                 	db	68	;'D'
  4099  007E81  72                 	db	114	;'r'
  4100  007E82  69                 	db	105	;'i'
  4101  007E83  76                 	db	118	;'v'
  4102  007E84  65                 	db	101	;'e'
  4103  007E85  72                 	db	114	;'r'
  4104  007E86  00                 	db	0
  4105  007E87                     STR_111:
  4106  007E87  52                 	db	82	;'R'
  4107  007E88  57                 	db	87	;'W'
  4108  007E89  54                 	db	84	;'T'
  4109  007E8A  49                 	db	73	;'I'
  4110  007E8B  4D                 	db	77	;'M'
  4111  007E8C  45                 	db	69	;'E'
  4112  007E8D  4F                 	db	79	;'O'
  4113  007E8E  55                 	db	85	;'U'
  4114  007E8F  54                 	db	84	;'T'
  4115  007E90  20                 	db	32
  4116  007E91  00                 	db	0
  4117  007E92                     STR_149:
  4118  007E92  2C                 	db	44
  4119  007E93  44                 	db	68	;'D'
  4120  007E94  61                 	db	97	;'a'
  4121  007E95  74                 	db	116	;'t'
  4122  007E96  61                 	db	97	;'a'
  4123  007E97  3D                 	db	61	;'='
  4124  007E98  6E                 	db	110	;'n'
  4125  007E99  6F                 	db	111	;'o'
  4126  007E9A  6E                 	db	110	;'n'
  4127  007E9B  65                 	db	101	;'e'
  4128  007E9C  00                 	db	0
  4129  007E9D                     STR_245:
  4130  007E9D  56                 	db	86	;'V'
  4131  007E9E  65                 	db	101	;'e'
  4132  007E9F  72                 	db	114	;'r'
  4133  007EA0  73                 	db	115	;'s'
  4134  007EA1  69                 	db	105	;'i'
  4135  007EA2  6F                 	db	111	;'o'
  4136  007EA3  6E                 	db	110	;'n'
  4137  007EA4  3A                 	db	58	;':'
  4138  007EA5  20                 	db	32
  4139  007EA6  00                 	db	0
  4140  007EA7                     STR_251:
  4141  007EA7  56                 	db	86	;'V'
  4142  007EA8  53                 	db	83	;'S'
  4143  007EA9  43                 	db	67	;'C'
  4144  007EAA  50                 	db	80	;'P'
  4145  007EAB  20                 	db	32
  4146  007EAC  4E                 	db	78	;'N'
  4147  007EAD  6F                 	db	111	;'o'
  4148  007EAE  64                 	db	100	;'d'
  4149  007EAF  65                 	db	101	;'e'
  4150  007EB0  00                 	db	0
  4151  007EB1                     STR_250:
  4152  007EB1  53                 	db	83	;'S'
  4153  007EB2  4C                 	db	76	;'L'
  4154  007EB3  20                 	db	32
  4155  007EB4  44                 	db	68	;'D'
  4156  007EB5  72                 	db	114	;'r'
  4157  007EB6  69                 	db	105	;'i'
  4158  007EB7  76                 	db	118	;'v'
  4159  007EB8  65                 	db	101	;'e'
  4160  007EB9  72                 	db	114	;'r'
  4161  007EBA  00                 	db	0
  4162  007EBB                     STR_112:
  4163  007EBB  53                 	db	83	;'S'
  4164  007EBC  54                 	db	84	;'T'
  4165  007EBD  41                 	db	65	;'A'
  4166  007EBE  52                 	db	82	;'R'
  4167  007EBF  54                 	db	84	;'T'
  4168  007EC0  49                 	db	73	;'I'
  4169  007EC1  46                 	db	70	;'F'
  4170  007EC2  20                 	db	32
  4171  007EC3  00                 	db	0
  4172  007EC4                     STR_139:
  4173  007EC4  2C                 	db	44
  4174  007EC5  6E                 	db	110	;'n'
  4175  007EC6  6F                 	db	111	;'o'
  4176  007EC7  64                 	db	100	;'d'
  4177  007EC8  65                 	db	101	;'e'
  4178  007EC9  69                 	db	105	;'i'
  4179  007ECA  64                 	db	100	;'d'
  4180  007ECB  3D                 	db	61	;'='
  4181  007ECC  00                 	db	0
  4182  007ECD                     STR_13:
  4183  007ECD  4C                 	db	76	;'L'
  4184  007ECE  4F                 	db	79	;'O'
  4185  007ECF  4F                 	db	79	;'O'
  4186  007ED0  50                 	db	80	;'P'
  4187  007ED1  42                 	db	66	;'B'
  4188  007ED2  41                 	db	65	;'A'
  4189  007ED3  43                 	db	67	;'C'
  4190  007ED4  4B                 	db	75	;'K'
  4191  007ED5  00                 	db	0
  4192  007ED6                     STR_125:
  4193  007ED6  56                 	db	86	;'V'
  4194  007ED7  31                 	db	49	;'1'
  4195  007ED8  30                 	db	48	;'0'
  4196  007ED9  31                 	db	49	;'1'
  4197  007EDA  31                 	db	49	;'1'
  4198  007EDB  0D                 	db	13
  4199  007EDC  0A                 	db	10
  4200  007EDD  00                 	db	0
  4201  007EDE                     STR_126:
  4202  007EDE  4E                 	db	78	;'N'
  4203  007EDF  31                 	db	49	;'1'
  4204  007EE0  39                 	db	57	;'9'
  4205  007EE1  37                 	db	55	;'7'
  4206  007EE2  37                 	db	55	;'7'
  4207  007EE3  0D                 	db	13
  4208  007EE4  0A                 	db	10
  4209  007EE5  00                 	db	0
  4210  007EE6                     STR_234:
  4211  007EE6  47                 	db	71	;'G'
  4212  007EE7  55                 	db	85	;'U'
  4213  007EE8  49                 	db	73	;'I'
  4214  007EE9  44                 	db	68	;'D'
  4215  007EEA  20                 	db	32
  4216  007EEB  3D                 	db	61	;'='
  4217  007EEC  20                 	db	32
  4218  007EED  00                 	db	0
  4219  007EEE                     STR_120:
  4220  007EEE  46                 	db	70	;'F'
  4221  007EEF  49                 	db	73	;'I'
  4222  007EF0  4C                 	db	76	;'L'
  4223  007EF1  54                 	db	84	;'T'
  4224  007EF2  45                 	db	69	;'E'
  4225  007EF3  52                 	db	82	;'R'
  4226  007EF4  20                 	db	32
  4227  007EF5  00                 	db	0
  4228  007EF6                     STR_133:
  4229  007EF6  2C                 	db	44
  4230  007EF7  63                 	db	99	;'c'
  4231  007EF8  6C                 	db	108	;'l'
  4232  007EF9  61                 	db	97	;'a'
  4233  007EFA  73                 	db	115	;'s'
  4234  007EFB  73                 	db	115	;'s'
  4235  007EFC  3D                 	db	61	;'='
  4236  007EFD  00                 	db	0
  4237  007EFE                     STR_114:
  4238  007EFE  56                 	db	86	;'V'
  4239  007EFF  45                 	db	69	;'E'
  4240  007F00  52                 	db	82	;'R'
  4241  007F01  42                 	db	66	;'B'
  4242  007F02  4F                 	db	79	;'O'
  4243  007F03  53                 	db	83	;'S'
  4244  007F04  45                 	db	69	;'E'
  4245  007F05  00                 	db	0
  4246  007F06                     STR_109:
  4247  007F06  44                 	db	68	;'D'
  4248  007F07  45                 	db	69	;'E'
  4249  007F08  43                 	db	67	;'C'
  4250  007F09  49                 	db	73	;'I'
  4251  007F0A  4D                 	db	77	;'M'
  4252  007F0B  41                 	db	65	;'A'
  4253  007F0C  4C                 	db	76	;'L'
  4254  007F0D  00                 	db	0
  4255  007F0E                     STR_17:
  4256  007F0E  56                 	db	86	;'V'
  4257  007F0F  45                 	db	69	;'E'
  4258  007F10  52                 	db	82	;'R'
  4259  007F11  53                 	db	83	;'S'
  4260  007F12  49                 	db	73	;'I'
  4261  007F13  4F                 	db	79	;'O'
  4262  007F14  4E                 	db	78	;'N'
  4263  007F15  00                 	db	0
  4264  007F16                     STR_168:
  4265  007F16  30                 	db	48	;'0'
  4266  007F17  78                 	db	120	;'x'
  4267  007F18  25                 	db	37
  4268  007F19  30                 	db	48	;'0'
  4269  007F1A  38                 	db	56	;'8'
  4270  007F1B  6C                 	db	108	;'l'
  4271  007F1C  58                 	db	88	;'X'
  4272  007F1D  00                 	db	0
  4273  007F1E                     STR_248:
  4274  007F1E  56                 	db	86	;'V'
  4275  007F1F  65                 	db	101	;'e'
  4276  007F20  72                 	db	114	;'r'
  4277  007F21  62                 	db	98	;'b'
  4278  007F22  6F                 	db	111	;'o'
  4279  007F23  73                 	db	115	;'s'
  4280  007F24  65                 	db	101	;'e'
  4281  007F25  00                 	db	0
  4282  007F26                     STR_247:
  4283  007F26  4D                 	db	77	;'M'
  4284  007F27  6F                 	db	111	;'o'
  4285  007F28  64                 	db	100	;'d'
  4286  007F29  65                 	db	101	;'e'
  4287  007F2A  3A                 	db	58	;':'
  4288  007F2B  20                 	db	32
  4289  007F2C  00                 	db	0
  4290  007F2D                     STR_145:
  4291  007F2D  2C                 	db	44
  4292  007F2E  44                 	db	68	;'D'
  4293  007F2F  61                 	db	97	;'a'
  4294  007F30  74                 	db	116	;'t'
  4295  007F31  61                 	db	97	;'a'
  4296  007F32  3D                 	db	61	;'='
  4297  007F33  00                 	db	0
  4298  007F34                     STR_136:
  4299  007F34  2C                 	db	44
  4300  007F35  74                 	db	116	;'t'
  4301  007F36  79                 	db	121	;'y'
  4302  007F37  70                 	db	112	;'p'
  4303  007F38  65                 	db	101	;'e'
  4304  007F39  3D                 	db	61	;'='
  4305  007F3A  00                 	db	0
  4306  007F3B                     STR_142:
  4307  007F3B  2C                 	db	44
  4308  007F3C  73                 	db	115	;'s'
  4309  007F3D  69                 	db	105	;'i'
  4310  007F3E  7A                 	db	122	;'z'
  4311  007F3F  65                 	db	101	;'e'
  4312  007F40  3D                 	db	61	;'='
  4313  007F41  00                 	db	0
  4314  007F42                     STR_130:
  4315  007F42  3C                 	db	60	;'<'
  4316  007F43  50                 	db	80	;'P'
  4317  007F44  72                 	db	114	;'r'
  4318  007F45  69                 	db	105	;'i'
  4319  007F46  6F                 	db	111	;'o'
  4320  007F47  3D                 	db	61	;'='
  4321  007F48  00                 	db	0
  4322  007F49                     STR_19:
  4323  007F49  49                 	db	73	;'I'
  4324  007F4A  46                 	db	70	;'F'
  4325  007F4B  4D                 	db	77	;'M'
  4326  007F4C  4F                 	db	79	;'O'
  4327  007F4D  44                 	db	68	;'D'
  4328  007F4E  45                 	db	69	;'E'
  4329  007F4F  00                 	db	0
  4330  007F50                     STR_15:
  4331  007F50  4C                 	db	76	;'L'
  4332  007F51  49                 	db	73	;'I'
  4333  007F52  53                 	db	83	;'S'
  4334  007F53  54                 	db	84	;'T'
  4335  007F54  45                 	db	69	;'E'
  4336  007F55  4E                 	db	78	;'N'
  4337  007F56  00                 	db	0
  4338  007F57                     STR_82:
  4339  007F57  46                 	db	70	;'F'
  4340  007F58  49                 	db	73	;'I'
  4341  007F59  4C                 	db	76	;'L'
  4342  007F5A  54                 	db	84	;'T'
  4343  007F5B  45                 	db	69	;'E'
  4344  007F5C  52                 	db	82	;'R'
  4345  007F5D  00                 	db	0
  4346  007F5E                     STR_9:
  4347  007F5E  53                 	db	83	;'S'
  4348  007F5F  49                 	db	73	;'I'
  4349  007F60  4C                 	db	76	;'L'
  4350  007F61  45                 	db	69	;'E'
  4351  007F62  4E                 	db	78	;'N'
  4352  007F63  54                 	db	84	;'T'
  4353  007F64  00                 	db	0
  4354  007F65                     STR_52:
  4355  007F65  30                 	db	48	;'0'
  4356  007F66  78                 	db	120	;'x'
  4357  007F67  25                 	db	37
  4358  007F68  30                 	db	48	;'0'
  4359  007F69  32                 	db	50	;'2'
  4360  007F6A  58                 	db	88	;'X'
  4361  007F6B  00                 	db	0
  4362  007F6C                     STR_134:
  4363  007F6C  30                 	db	48	;'0'
  4364  007F6D  78                 	db	120	;'x'
  4365  007F6E  25                 	db	37
  4366  007F6F  30                 	db	48	;'0'
  4367  007F70  34                 	db	52	;'4'
  4368  007F71  58                 	db	88	;'X'
  4369  007F72  00                 	db	0
  4370  007F73                     STR_152:
  4371  007F73  30                 	db	48	;'0'
  4372  007F74  78                 	db	120	;'x'
  4373  007F75  25                 	db	37
  4374  007F76  30                 	db	48	;'0'
  4375  007F77  38                 	db	56	;'8'
  4376  007F78  58                 	db	88	;'X'
  4377  007F79  00                 	db	0
  4378  007F7A                     STR_127:
  4379  007F7A  46                 	db	70	;'F'
  4380  007F7B  30                 	db	48	;'0'
  4381  007F7C  30                 	db	48	;'0'
  4382  007F7D  0D                 	db	13
  4383  007F7E  0A                 	db	10
  4384  007F7F  00                 	db	0
  4385  007F80                     STR_8:
  4386  007F80  2B                 	db	43
  4387  007F81  4F                 	db	79	;'O'
  4388  007F82  4B                 	db	75	;'K'
  4389  007F83  0D                 	db	13
  4390  007F84  0A                 	db	10
  4391  007F85  00                 	db	0
  4392  007F86                     STR_113:
  4393  007F86  4D                 	db	77	;'M'
  4394  007F87  4F                 	db	79	;'O'
  4395  007F88  44                 	db	68	;'D'
  4396  007F89  45                 	db	69	;'E'
  4397  007F8A  20                 	db	32
  4398  007F8B  00                 	db	0
  4399  007F8C                     STR_121:
  4400  007F8C  4D                 	db	77	;'M'
  4401  007F8D  41                 	db	65	;'A'
  4402  007F8E  53                 	db	83	;'S'
  4403  007F8F  4B                 	db	75	;'K'
  4404  007F90  20                 	db	32
  4405  007F91  00                 	db	0
  4406  007F92                     STR_11:
  4407  007F92  43                 	db	67	;'C'
  4408  007F93  4C                 	db	76	;'L'
  4409  007F94  4F                 	db	79	;'O'
  4410  007F95  53                 	db	83	;'S'
  4411  007F96  45                 	db	69	;'E'
  4412  007F97  00                 	db	0
  4413  007F98                     STR_118:
  4414  007F98  53                 	db	83	;'S'
  4415  007F99  4C                 	db	76	;'L'
  4416  007F9A  43                 	db	67	;'C'
  4417  007F9B  41                 	db	65	;'A'
  4418  007F9C  4E                 	db	78	;'N'
  4419  007F9D  00                 	db	0
  4420  007F9E                     STR_106:
  4421  007F9E  53                 	db	83	;'S'
  4422  007F9F  45                 	db	69	;'E'
  4423  007FA0  54                 	db	84	;'T'
  4424  007FA1  20                 	db	32
  4425  007FA2  00                 	db	0
  4426  007FA3                     STR_44:
  4427  007FA3  46                 	db	70	;'F'
  4428  007FA4  49                 	db	73	;'I'
  4429  007FA5  4E                 	db	78	;'N'
  4430  007FA6  44                 	db	68	;'D'
  4431  007FA7  00                 	db	0
  4432  007FA8                     STR_45:
  4433  007FA8  52                 	db	82	;'R'
  4434  007FA9  52                 	db	82	;'R'
  4435  007FAA  45                 	db	69	;'E'
  4436  007FAB  47                 	db	71	;'G'
  4437  007FAC  00                 	db	0
  4438  007FAD                     STR_68:
  4439  007FAD  57                 	db	87	;'W'
  4440  007FAE  52                 	db	82	;'R'
  4441  007FAF  45                 	db	69	;'E'
  4442  007FB0  47                 	db	71	;'G'
  4443  007FB1  00                 	db	0
  4444  007FB2                     STR_94:
  4445  007FB2  4D                 	db	77	;'M'
  4446  007FB3  41                 	db	65	;'A'
  4447  007FB4  53                 	db	83	;'S'
  4448  007FB5  4B                 	db	75	;'K'
  4449  007FB6  00                 	db	0
  4450  007FB7                     STR_7:
  4451  007FB7  4F                 	db	79	;'O'
  4452  007FB8  50                 	db	80	;'P'
  4453  007FB9  45                 	db	69	;'E'
  4454  007FBA  4E                 	db	78	;'N'
  4455  007FBB  00                 	db	0
  4456  007FBC                     STR_77:
  4457  007FBC  49                 	db	73	;'I'
  4458  007FBD  4E                 	db	78	;'N'
  4459  007FBE  46                 	db	70	;'F'
  4460  007FBF  4F                 	db	79	;'O'
  4461  007FC0  00                 	db	0
  4462  007FC1                     STR_116:
  4463  007FC1  56                 	db	86	;'V'
  4464  007FC2  53                 	db	83	;'S'
  4465  007FC3  43                 	db	67	;'C'
  4466  007FC4  50                 	db	80	;'P'
  4467  007FC5  00                 	db	0
  4468  007FC6                     STR_42:
  4469  007FC6  48                 	db	72	;'H'
  4470  007FC7  45                 	db	69	;'E'
  4471  007FC8  4C                 	db	76	;'L'
  4472  007FC9  50                 	db	80	;'P'
  4473  007FCA  00                 	db	0
  4474  007FCB                     STR_40:
  4475  007FCB  53                 	db	83	;'S'
  4476  007FCC  54                 	db	84	;'T'
  4477  007FCD  41                 	db	65	;'A'
  4478  007FCE  54                 	db	84	;'T'
  4479  007FCF  00                 	db	0
  4480  007FD0                     STR_5:
  4481  007FD0  42                 	db	66	;'B'
  4482  007FD1  4F                 	db	79	;'O'
  4483  007FD2  4F                 	db	79	;'O'
  4484  007FD3  54                 	db	84	;'T'
  4485  007FD4  00                 	db	0
  4486  007FD5                     STR_150:
  4487  007FD5  3E                 	db	62	;'>'
  4488  007FD6  0D                 	db	13
  4489  007FD7  0A                 	db	10
  4490  007FD8  00                 	db	0
  4491  007FD9                     STR_41:
  4492  007FD9  45                 	db	69	;'E'
  4493  007FDA  52                 	db	82	;'R'
  4494  007FDB  52                 	db	82	;'R'
  4495  007FDC  00                 	db	0
  4496  007FDD                     STR_107:
  4497  007FDD  48                 	db	72	;'H'
  4498  007FDE  45                 	db	69	;'E'
  4499  007FDF  58                 	db	88	;'X'
  4500  007FE0  00                 	db	0
  4501  007FE1                     STR_153:
  4502  007FE1  25                 	db	37
  4503  007FE2  6C                 	db	108	;'l'
  4504  007FE3  75                 	db	117	;'u'
  4505  007FE4  00                 	db	0
  4506  007FE5                     STR_236:
  4507  007FE5  2D                 	db	45
  4508  007FE6  2D                 	db	45
  4509  007FE7  00                 	db	0
  4510  007FE8                     STR_37:
  4511  007FE8  52                 	db	82	;'R'
  4512  007FE9  58                 	db	88	;'X'
  4513  007FEA  00                 	db	0
  4514  007FEB                     STR_28:
  4515  007FEB  54                 	db	84	;'T'
  4516  007FEC  58                 	db	88	;'X'
  4517  007FED  00                 	db	0
  4518  007FEE                     STR_53:
  4519  007FEE  25                 	db	37
  4520  007FEF  64                 	db	100	;'d'
  4521  007FF0  00                 	db	0
  4522  007FF1                     STR_129:
  4523  007FF1  07                 	db	7
  4524  007FF2  00                 	db	0
  4525  007FF3                     STR_128:
  4526  007FF3  0D                 	db	13
  4527  007FF4  00                 	db	0
  4528  007FF5                     STR_29:
  4529  007FF5  2C                 	db	44
  4530  007FF6  00                 	db	0
  4531  007FF7                     STR_243:
  4532  007FF7  2E                 	db	46
  4533  007FF8  00                 	db	0
  4534  007FF9                     STR_235:
  4535  007FF9  30                 	db	48	;'0'
  4536  007FFA  00                 	db	0
  4537  007FFB                     STR_237:
  4538  007FFB  3A                 	db	58	;':'
  4539  007FFC  00                 	db	0
  4540  007FFD                     STR_242:
  4541  007FFD  3F                 	db	63	;'?'
  4542  007FFE  00                 	db	0
  4543  007FFF                     __end_of__stringdata:
  4544                           	opt stack 0
  4545                           
  4546                           ; #config settings
  4547  007FFF  00                 	db	0	; dummy byte at the end
  4548  0000                     tblptru	equ	0xFF8
  4549                           tblptrh	equ	0xFF7
  4550                           tblptrl	equ	0xFF6
  4551                           tablat	equ	0xFF5
  4552                           prodh	equ	0xFF4
  4553                           prodl	equ	0xFF3
  4554                           intcon	equ	0xFF2
  4555                           indf0	equ	0xFEF
  4556                           fsr0h	equ	0xFEA
  4557                           fsr0l	equ	0xFE9
  4558                           wreg	equ	0xFE8
  4559                           indf1	equ	0xFE7
  4560                           postinc1	equ	0xFE6
  4561                           postdec1	equ	0xFE5
  4562                           fsr1h	equ	0xFE2
  4563                           fsr1l	equ	0xFE1
  4564                           indf2	equ	0xFDF
  4565                           postinc2	equ	0xFDE
  4566                           postdec2	equ	0xFDD
  4567                           plusw2	equ	0xFDB
  4568                           fsr2h	equ	0xFDA
  4569                           fsr2l	equ	0xFD9
  4570                           status	equ	0xFD8
  4571                           
  4572                           	psect	cinit
  4573  004CFA                     __pcinit:
  4574                           	opt stack 0
  4575  004CFA                     start_initialization:
  4576                           	opt stack 0
  4577  004CFA                     __initialization:
  4578                           	opt stack 0
  4579                           
  4580                           ; Clear objects allocated to BIGRAM (494 bytes)
  4581  004CFA  EE04  F000         	lfsr	0,__pbssBIGRAM
  4582  004CFE  EE11 F0EE          	lfsr	1,494
  4583  004D02                     clear_0:
  4584  004D02  6AEE               	clrf	postinc0,c
  4585  004D04  50E5               	movf	postdec1,w,c
  4586  004D06  50E1               	movf	fsr1l,w,c
  4587  004D08  E1FC               	bnz	clear_0
  4588  004D0A  50E2               	movf	fsr1h,w,c
  4589  004D0C  E1FA               	bnz	clear_0
  4590                           
  4591                           ; Clear objects allocated to BANK3 (256 bytes)
  4592  004D0E  EE03  F000         	lfsr	0,__pbssBANK3
  4593  004D12  EE11 F000          	lfsr	1,256
  4594  004D16                     clear_1:
  4595  004D16  6AEE               	clrf	postinc0,c
  4596  004D18  50E5               	movf	postdec1,w,c
  4597  004D1A  50E1               	movf	fsr1l,w,c
  4598  004D1C  E1FC               	bnz	clear_1
  4599  004D1E  50E2               	movf	fsr1h,w,c
  4600  004D20  E1FA               	bnz	clear_1
  4601                           
  4602                           ; Clear objects allocated to BANK2 (128 bytes)
  4603  004D22  EE02  F000         	lfsr	0,__pbssBANK2
  4604  004D26  0E80               	movlw	128
  4605  004D28                     clear_2:
  4606  004D28  6AEE               	clrf	postinc0,c
  4607  004D2A  06E8               	decf	wreg,f,c
  4608  004D2C  E1FD               	bnz	clear_2
  4609                           
  4610                           ; Clear objects allocated to BANK1 (178 bytes)
  4611  004D2E  EE01  F000         	lfsr	0,__pbssBANK1
  4612  004D32  0EB2               	movlw	178
  4613  004D34                     clear_3:
  4614  004D34  6AEE               	clrf	postinc0,c
  4615  004D36  06E8               	decf	wreg,f,c
  4616  004D38  E1FD               	bnz	clear_3
  4617                           
  4618                           ; Clear objects allocated to BANK0 (43 bytes)
  4619  004D3A  EE00  F0D1         	lfsr	0,__pbssBANK0
  4620  004D3E  0E2B               	movlw	43
  4621  004D40                     clear_4:
  4622  004D40  6AEE               	clrf	postinc0,c
  4623  004D42  06E8               	decf	wreg,f,c
  4624  004D44  E1FD               	bnz	clear_4
  4625                           
  4626                           ; Clear objects allocated to COMRAM (29 bytes)
  4627  004D46  EE00  F029         	lfsr	0,__pbssCOMRAM
  4628  004D4A  0E1D               	movlw	29
  4629  004D4C                     clear_5:
  4630  004D4C  6AEE               	clrf	postinc0,c
  4631  004D4E  06E8               	decf	wreg,f,c
  4632  004D50  E1FD               	bnz	clear_5
  4633  004D52                     end_of_initialization:
  4634                           	opt stack 0
  4635  004D52                     __end_of__initialization:
  4636                           	opt stack 0
  4637  004D52  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4638  004D54  6EF8               	movwf	tblptru,c
  4639  004D56  0100               	movlb	0
  4640  004D58  EF85  F019         	goto	_main	;jump to C main() function
  4641                           tblptru	equ	0xFF8
  4642                           tblptrh	equ	0xFF7
  4643                           tblptrl	equ	0xFF6
  4644                           tablat	equ	0xFF5
  4645                           prodh	equ	0xFF4
  4646                           prodl	equ	0xFF3
  4647                           intcon	equ	0xFF2
  4648                           indf0	equ	0xFEF
  4649                           postinc0	equ	0xFEE
  4650                           fsr0h	equ	0xFEA
  4651                           fsr0l	equ	0xFE9
  4652                           wreg	equ	0xFE8
  4653                           indf1	equ	0xFE7
  4654                           postinc1	equ	0xFE6
  4655                           postdec1	equ	0xFE5
  4656                           fsr1h	equ	0xFE2
  4657                           fsr1l	equ	0xFE1
  4658                           indf2	equ	0xFDF
  4659                           postinc2	equ	0xFDE
  4660                           postdec2	equ	0xFDD
  4661                           plusw2	equ	0xFDB
  4662                           fsr2h	equ	0xFDA
  4663                           fsr2l	equ	0xFD9
  4664                           status	equ	0xFD8
  4665                           
  4666                           	psect	bssCOMRAM
  4667  000029                     __pbssCOMRAM:
  4668                           	opt stack 0
  4669  000029                     _uart_transmitOverruns:
  4670                           	opt stack 0
  4671  000029                     	ds	4
  4672  00002D                     _made_table:
  4673                           	opt stack 0
  4674  00002D                     	ds	2
  4675  00002F                     _status_led_cnt:
  4676                           	opt stack 0
  4677  00002F                     	ds	2
  4678  000031                     strtok@sp:
  4679                           	opt stack 0
  4680  000031                     	ds	2
  4681  000033                     _USART_Status:
  4682                           	opt stack 0
  4683  000033                     	ds	1
  4684  000034                     __ECANRxFilterHitInfo:
  4685                           	opt stack 0
  4686  000034                     	ds	1
  4687  000035                     _ledFunctionality:
  4688                           	opt stack 0
  4689  000035                     	ds	1
  4690  000036                     _canInputFifo:
  4691                           	opt stack 0
  4692  000036                     	ds	8
  4693  00003E                     _serialInputFifo:
  4694                           	opt stack 0
  4695  00003E                     	ds	8
  4696                           tblptru	equ	0xFF8
  4697                           tblptrh	equ	0xFF7
  4698                           tblptrl	equ	0xFF6
  4699                           tablat	equ	0xFF5
  4700                           prodh	equ	0xFF4
  4701                           prodl	equ	0xFF3
  4702                           intcon	equ	0xFF2
  4703                           indf0	equ	0xFEF
  4704                           postinc0	equ	0xFEE
  4705                           fsr0h	equ	0xFEA
  4706                           fsr0l	equ	0xFE9
  4707                           wreg	equ	0xFE8
  4708                           indf1	equ	0xFE7
  4709                           postinc1	equ	0xFE6
  4710                           postdec1	equ	0xFE5
  4711                           fsr1h	equ	0xFE2
  4712                           fsr1l	equ	0xFE1
  4713                           indf2	equ	0xFDF
  4714                           postinc2	equ	0xFDE
  4715                           postdec2	equ	0xFDD
  4716                           plusw2	equ	0xFDB
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8
  4720                           
  4721                           	psect	bssBANK0
  4722  0000D1                     __pbssBANK0:
  4723                           	opt stack 0
  4724  0000D1                     _can_receiveOverruns:
  4725                           	opt stack 0
  4726  0000D1                     	ds	4
  4727  0000D5                     _can_transmitOverruns:
  4728                           	opt stack 0
  4729  0000D5                     	ds	4
  4730  0000D9                     _cntRxBytes:
  4731                           	opt stack 0
  4732  0000D9                     	ds	4
  4733  0000DD                     _cntRxFrames:
  4734                           	opt stack 0
  4735  0000DD                     	ds	4
  4736  0000E1                     _cntTxBytes:
  4737                           	opt stack 0
  4738  0000E1                     	ds	4
  4739  0000E5                     _cntTxFrames:
  4740                           	opt stack 0
  4741  0000E5                     	ds	4
  4742  0000E9                     _timekeeper:
  4743                           	opt stack 0
  4744  0000E9                     	ds	4
  4745  0000ED                     _timer:
  4746                           	opt stack 0
  4747  0000ED                     	ds	4
  4748  0000F1                     _uart_receiveOverruns:
  4749                           	opt stack 0
  4750  0000F1                     	ds	4
  4751  0000F5                     _bDLE:
  4752                           	opt stack 0
  4753  0000F5                     	ds	1
  4754  0000F6                     _bInitiated:
  4755                           	opt stack 0
  4756  0000F6                     	ds	1
  4757  0000F7                     _bOpen:
  4758                           	opt stack 0
  4759  0000F7                     	ds	1
  4760  0000F8                     _mode:
  4761                           	opt stack 0
  4762  0000F8                     	ds	1
  4763  0000F9                     _nTimeStamp:
  4764                           	opt stack 0
  4765  0000F9                     	ds	1
  4766  0000FA                     _sequencyno:
  4767                           	opt stack 0
  4768  0000FA                     	ds	1
  4769  0000FB                     _stateVscpDriver:
  4770                           	opt stack 0
  4771  0000FB                     	ds	1
  4772                           tblptru	equ	0xFF8
  4773                           tblptrh	equ	0xFF7
  4774                           tblptrl	equ	0xFF6
  4775                           tablat	equ	0xFF5
  4776                           prodh	equ	0xFF4
  4777                           prodl	equ	0xFF3
  4778                           intcon	equ	0xFF2
  4779                           indf0	equ	0xFEF
  4780                           postinc0	equ	0xFEE
  4781                           fsr0h	equ	0xFEA
  4782                           fsr0l	equ	0xFE9
  4783                           wreg	equ	0xFE8
  4784                           indf1	equ	0xFE7
  4785                           postinc1	equ	0xFE6
  4786                           postdec1	equ	0xFE5
  4787                           fsr1h	equ	0xFE2
  4788                           fsr1l	equ	0xFE1
  4789                           indf2	equ	0xFDF
  4790                           postinc2	equ	0xFDE
  4791                           postdec2	equ	0xFDD
  4792                           plusw2	equ	0xFDB
  4793                           fsr2h	equ	0xFDA
  4794                           fsr2l	equ	0xFD9
  4795                           status	equ	0xFD8
  4796                           
  4797                           	psect	bssBANK1
  4798  000100                     __pbssBANK1:
  4799                           	opt stack 0
  4800  000100                     _bHex:
  4801                           	opt stack 0
  4802  000100                     	ds	1
  4803  000101                     _bSilent:
  4804                           	opt stack 0
  4805  000101                     	ds	1
  4806  000102                     _pos:
  4807                           	opt stack 0
  4808  000102                     	ds	1
  4809  000103                     _rwtimeout:
  4810                           	opt stack 0
  4811  000103                     	ds	1
  4812  000104                     _cmdbuf:
  4813                           	opt stack 0
  4814  000104                     	ds	80
  4815  000154                     _wrkbuf:
  4816                           	opt stack 0
  4817  000154                     	ds	80
  4818  0001A4                     _vscpData:
  4819                           	opt stack 0
  4820  0001A4                     	ds	8
  4821  0001AC                     _vscpClass:
  4822                           	opt stack 0
  4823  0001AC                     	ds	2
  4824  0001AE                     _vscpNodeId:
  4825                           	opt stack 0
  4826  0001AE                     	ds	1
  4827  0001AF                     _vscpPriority:
  4828                           	opt stack 0
  4829  0001AF                     	ds	1
  4830  0001B0                     _vscpSize:
  4831                           	opt stack 0
  4832  0001B0                     	ds	1
  4833  0001B1                     _vscpType:
  4834                           	opt stack 0
  4835  0001B1                     	ds	1
  4836                           tblptru	equ	0xFF8
  4837                           tblptrh	equ	0xFF7
  4838                           tblptrl	equ	0xFF6
  4839                           tablat	equ	0xFF5
  4840                           prodh	equ	0xFF4
  4841                           prodl	equ	0xFF3
  4842                           intcon	equ	0xFF2
  4843                           indf0	equ	0xFEF
  4844                           postinc0	equ	0xFEE
  4845                           fsr0h	equ	0xFEA
  4846                           fsr0l	equ	0xFE9
  4847                           wreg	equ	0xFE8
  4848                           indf1	equ	0xFE7
  4849                           postinc1	equ	0xFE6
  4850                           postdec1	equ	0xFE5
  4851                           fsr1h	equ	0xFE2
  4852                           fsr1l	equ	0xFE1
  4853                           indf2	equ	0xFDF
  4854                           postinc2	equ	0xFDE
  4855                           postdec2	equ	0xFDD
  4856                           plusw2	equ	0xFDB
  4857                           fsr2h	equ	0xFDA
  4858                           fsr2l	equ	0xFD9
  4859                           status	equ	0xFD8
  4860                           
  4861                           	psect	bssBANK2
  4862  000200                     __pbssBANK2:
  4863                           	opt stack 0
  4864  000200                     _inputBuffer:
  4865                           	opt stack 0
  4866  000200                     	ds	128
  4867                           tblptru	equ	0xFF8
  4868                           tblptrh	equ	0xFF7
  4869                           tblptrl	equ	0xFF6
  4870                           tablat	equ	0xFF5
  4871                           prodh	equ	0xFF4
  4872                           prodl	equ	0xFF3
  4873                           intcon	equ	0xFF2
  4874                           indf0	equ	0xFEF
  4875                           postinc0	equ	0xFEE
  4876                           fsr0h	equ	0xFEA
  4877                           fsr0l	equ	0xFE9
  4878                           wreg	equ	0xFE8
  4879                           indf1	equ	0xFE7
  4880                           postinc1	equ	0xFE6
  4881                           postdec1	equ	0xFE5
  4882                           fsr1h	equ	0xFE2
  4883                           fsr1l	equ	0xFE1
  4884                           indf2	equ	0xFDF
  4885                           postinc2	equ	0xFDE
  4886                           postdec2	equ	0xFDD
  4887                           plusw2	equ	0xFDB
  4888                           fsr2h	equ	0xFDA
  4889                           fsr2l	equ	0xFD9
  4890                           status	equ	0xFD8
  4891                           
  4892                           	psect	bssBANK3
  4893  000300                     __pbssBANK3:
  4894                           	opt stack 0
  4895  000300                     _crc8_table:
  4896                           	opt stack 0
  4897  000300                     	ds	256
  4898                           tblptru	equ	0xFF8
  4899                           tblptrh	equ	0xFF7
  4900                           tblptrl	equ	0xFF6
  4901                           tablat	equ	0xFF5
  4902                           prodh	equ	0xFF4
  4903                           prodl	equ	0xFF3
  4904                           intcon	equ	0xFF2
  4905                           indf0	equ	0xFEF
  4906                           postinc0	equ	0xFEE
  4907                           fsr0h	equ	0xFEA
  4908                           fsr0l	equ	0xFE9
  4909                           wreg	equ	0xFE8
  4910                           indf1	equ	0xFE7
  4911                           postinc1	equ	0xFE6
  4912                           postdec1	equ	0xFE5
  4913                           fsr1h	equ	0xFE2
  4914                           fsr1l	equ	0xFE1
  4915                           indf2	equ	0xFDF
  4916                           postinc2	equ	0xFDE
  4917                           postdec2	equ	0xFDD
  4918                           plusw2	equ	0xFDB
  4919                           fsr2h	equ	0xFDA
  4920                           fsr2l	equ	0xFD9
  4921                           status	equ	0xFD8
  4922                           
  4923                           	psect	bssBIGRAM
  4924  000400                     __pbssBIGRAM:
  4925                           	opt stack 0
  4926  000400                     _caninputBuffer:
  4927                           	opt stack 0
  4928  000400                     	ds	494
  4929                           tblptru	equ	0xFF8
  4930                           tblptrh	equ	0xFF7
  4931                           tblptrl	equ	0xFF6
  4932                           tablat	equ	0xFF5
  4933                           prodh	equ	0xFF4
  4934                           prodl	equ	0xFF3
  4935                           intcon	equ	0xFF2
  4936                           indf0	equ	0xFEF
  4937                           postinc0	equ	0xFEE
  4938                           fsr0h	equ	0xFEA
  4939                           fsr0l	equ	0xFE9
  4940                           wreg	equ	0xFE8
  4941                           indf1	equ	0xFE7
  4942                           postinc1	equ	0xFE6
  4943                           postdec1	equ	0xFE5
  4944                           fsr1h	equ	0xFE2
  4945                           fsr1l	equ	0xFE1
  4946                           indf2	equ	0xFDF
  4947                           postinc2	equ	0xFDE
  4948                           postdec2	equ	0xFDD
  4949                           plusw2	equ	0xFDB
  4950                           fsr2h	equ	0xFDA
  4951                           fsr2l	equ	0xFD9
  4952                           status	equ	0xFD8
  4953                           
  4954                           	psect	cstackBANK2
  4955  000280                     __pcstackBANK2:
  4956                           	opt stack 0
  4957  000280                     doModeVerbose@id:
  4958                           	opt stack 0
  4959                           
  4960                           ; 4 bytes @ 0x0
  4961  000280                     	ds	4
  4962  000284                     doModeVerbose@preg:
  4963                           	opt stack 0
  4964                           
  4965                           ; 2 bytes @ 0x4
  4966  000284                     	ds	2
  4967  000286                     doModeVerbose@preg_1185:
  4968                           	opt stack 0
  4969                           
  4970                           ; 2 bytes @ 0x6
  4971  000286                     	ds	2
  4972  000288                     doModeVerbose@filter_class:
  4973                           	opt stack 0
  4974                           
  4975                           ; 2 bytes @ 0x8
  4976  000288                     	ds	2
  4977  00028A                     doModeVerbose@mask_class:
  4978                           	opt stack 0
  4979                           
  4980                           ; 2 bytes @ 0xA
  4981  00028A                     	ds	2
  4982  00028C                     doModeVerbose@nodeid:
  4983                           	opt stack 0
  4984                           
  4985                           ; 1 bytes @ 0xC
  4986  00028C                     	ds	1
  4987  00028D                     doModeVerbose@nodeid_1177:
  4988                           	opt stack 0
  4989                           
  4990                           ; 1 bytes @ 0xD
  4991  00028D                     	ds	1
  4992  00028E                     doModeVerbose@filter_priority:
  4993                           	opt stack 0
  4994                           
  4995                           ; 1 bytes @ 0xE
  4996  00028E                     	ds	1
  4997  00028F                     doModeVerbose@filter_type:
  4998                           	opt stack 0
  4999                           
  5000                           ; 1 bytes @ 0xF
  5001  00028F                     	ds	1
  5002  000290                     doModeVerbose@filter_nodeid:
  5003                           	opt stack 0
  5004                           
  5005                           ; 1 bytes @ 0x10
  5006  000290                     	ds	1
  5007  000291                     doModeVerbose@mask_priority:
  5008                           	opt stack 0
  5009                           
  5010                           ; 1 bytes @ 0x11
  5011  000291                     	ds	1
  5012  000292                     doModeVerbose@mask_type:
  5013                           	opt stack 0
  5014                           
  5015                           ; 1 bytes @ 0x12
  5016  000292                     	ds	1
  5017  000293                     doModeVerbose@mask_nodeid:
  5018                           	opt stack 0
  5019                           
  5020                           ; 1 bytes @ 0x13
  5021  000293                     	ds	1
  5022  000294                     _doModeVerbose$1145:
  5023                           	opt stack 0
  5024                           
  5025                           ; 2 bytes @ 0x14
  5026  000294                     	ds	2
  5027  000296                     _doModeVerbose$1157:
  5028                           	opt stack 0
  5029                           
  5030                           ; 2 bytes @ 0x16
  5031  000296                     	ds	2
  5032  000298                     _doModeVerbose$1162:
  5033                           	opt stack 0
  5034                           
  5035                           ; 2 bytes @ 0x18
  5036  000298                     	ds	2
  5037  00029A                     _doModeVerbose$1168:
  5038                           	opt stack 0
  5039                           
  5040                           ; 2 bytes @ 0x1A
  5041  00029A                     	ds	2
  5042  00029C                     _doModeVerbose$1172:
  5043                           	opt stack 0
  5044                           
  5045                           ; 2 bytes @ 0x1C
  5046  00029C                     	ds	2
  5047  00029E                     _doModeVerbose$1197:
  5048                           	opt stack 0
  5049                           
  5050                           ; 2 bytes @ 0x1E
  5051  00029E                     	ds	2
  5052  0002A0                     doModeVerbose@rv:
  5053                           	opt stack 0
  5054                           
  5055                           ; 1 bytes @ 0x20
  5056  0002A0                     	ds	1
  5057  0002A1                     doModeVerbose@page_1178:
  5058                           	opt stack 0
  5059                           
  5060                           ; 1 bytes @ 0x21
  5061  0002A1                     	ds	1
  5062  0002A2                     doModeVerbose@reg_1179:
  5063                           	opt stack 0
  5064                           
  5065                           ; 1 bytes @ 0x22
  5066  0002A2                     	ds	1
  5067  0002A3                     doModeVerbose@id_1236:
  5068                           	opt stack 0
  5069                           
  5070                           ; 4 bytes @ 0x23
  5071  0002A3                     	ds	4
  5072  0002A7                     doModeVerbose@filterno:
  5073                           	opt stack 0
  5074                           
  5075                           ; 1 bytes @ 0x27
  5076  0002A7                     	ds	1
  5077  0002A8                     doModeVerbose@maskno:
  5078                           	opt stack 0
  5079                           
  5080                           ; 1 bytes @ 0x28
  5081  0002A8                     	ds	1
  5082  0002A9                     doModeVerbose@value_1180:
  5083                           	opt stack 0
  5084                           
  5085                           ; 1 bytes @ 0x29
  5086  0002A9                     	ds	1
  5087  0002AA                     doModeVerbose@i:
  5088                           	opt stack 0
  5089                           
  5090                           ; 1 bytes @ 0x2A
  5091  0002AA                     	ds	1
  5092  0002AB                     doModeVerbose@count:
  5093                           	opt stack 0
  5094                           
  5095                           ; 1 bytes @ 0x2B
  5096  0002AB                     	ds	1
  5097  0002AC                     doModeVerbose@c:
  5098                           	opt stack 0
  5099                           
  5100                           ; 1 bytes @ 0x2C
  5101  0002AC                     	ds	1
  5102  0002AD                     doModeVerbose@page:
  5103                           	opt stack 0
  5104                           
  5105                           ; 1 bytes @ 0x2D
  5106  0002AD                     	ds	1
  5107  0002AE                     doModeVerbose@reg:
  5108                           	opt stack 0
  5109                           
  5110                           ; 1 bytes @ 0x2E
  5111  0002AE                     	ds	1
  5112  0002AF                     doModeVerbose@nodeid_1192:
  5113                           	opt stack 0
  5114                           
  5115                           ; 1 bytes @ 0x2F
  5116  0002AF                     	ds	1
  5117  0002B0                     doModeVerbose@i_1127:
  5118                           	opt stack 0
  5119                           
  5120                           ; 1 bytes @ 0x30
  5121  0002B0                     	ds	1
  5122  0002B1                     doModeVerbose@value:
  5123                           	opt stack 0
  5124                           
  5125                           ; 1 bytes @ 0x31
  5126  0002B1                     	ds	1
  5127  0002B2                     doModeVerbose@p_1133:
  5128                           	opt stack 0
  5129                           
  5130                           ; 2 bytes @ 0x32
  5131  0002B2                     	ds	2
  5132  0002B4                     doModeVerbose@p_1181:
  5133                           	opt stack 0
  5134                           
  5135                           ; 2 bytes @ 0x34
  5136  0002B4                     	ds	2
  5137  0002B6                     doModeVerbose@ifmode:
  5138                           	opt stack 0
  5139                           
  5140                           ; 1 bytes @ 0x36
  5141  0002B6                     	ds	1
  5142  0002B7                     doModeVerbose@p:
  5143                           	opt stack 0
  5144                           
  5145                           ; 2 bytes @ 0x37
  5146  0002B7                     	ds	2
  5147  0002B9                     doModeVerbose@p_1205:
  5148                           	opt stack 0
  5149                           
  5150                           ; 2 bytes @ 0x39
  5151  0002B9                     	ds	2
  5152  0002BB                     doModeVerbose@p_1224:
  5153                           	opt stack 0
  5154                           
  5155                           ; 2 bytes @ 0x3B
  5156  0002BB                     	ds	2
  5157                           tblptru	equ	0xFF8
  5158                           tblptrh	equ	0xFF7
  5159                           tblptrl	equ	0xFF6
  5160                           tablat	equ	0xFF5
  5161                           prodh	equ	0xFF4
  5162                           prodl	equ	0xFF3
  5163                           intcon	equ	0xFF2
  5164                           indf0	equ	0xFEF
  5165                           postinc0	equ	0xFEE
  5166                           fsr0h	equ	0xFEA
  5167                           fsr0l	equ	0xFE9
  5168                           wreg	equ	0xFE8
  5169                           indf1	equ	0xFE7
  5170                           postinc1	equ	0xFE6
  5171                           postdec1	equ	0xFE5
  5172                           fsr1h	equ	0xFE2
  5173                           fsr1l	equ	0xFE1
  5174                           indf2	equ	0xFDF
  5175                           postinc2	equ	0xFDE
  5176                           postdec2	equ	0xFDD
  5177                           plusw2	equ	0xFDB
  5178                           fsr2h	equ	0xFDA
  5179                           fsr2l	equ	0xFD9
  5180                           status	equ	0xFD8
  5181                           
  5182                           	psect	cstackBANK1
  5183  0001B2                     __pcstackBANK1:
  5184                           	opt stack 0
  5185  0001B2                     ??_doModeVerbose:
  5186                           
  5187                           ; 0 bytes @ 0x0
  5188  0001B2                     	ds	20
  5189                           tblptru	equ	0xFF8
  5190                           tblptrh	equ	0xFF7
  5191                           tblptrl	equ	0xFF6
  5192                           tablat	equ	0xFF5
  5193                           prodh	equ	0xFF4
  5194                           prodl	equ	0xFF3
  5195                           intcon	equ	0xFF2
  5196                           indf0	equ	0xFEF
  5197                           postinc0	equ	0xFEE
  5198                           fsr0h	equ	0xFEA
  5199                           fsr0l	equ	0xFE9
  5200                           wreg	equ	0xFE8
  5201                           indf1	equ	0xFE7
  5202                           postinc1	equ	0xFE6
  5203                           postdec1	equ	0xFE5
  5204                           fsr1h	equ	0xFE2
  5205                           fsr1l	equ	0xFE1
  5206                           indf2	equ	0xFDF
  5207                           postinc2	equ	0xFDE
  5208                           postdec2	equ	0xFDD
  5209                           plusw2	equ	0xFDB
  5210                           fsr2h	equ	0xFDA
  5211                           fsr2l	equ	0xFD9
  5212                           status	equ	0xFD8
  5213                           
  5214                           	psect	cstackBANK0
  5215  000060                     __pcstackBANK0:
  5216                           	opt stack 0
  5217  000060                     ?_WriteTimer0:
  5218                           	opt stack 0
  5219  000060                     ?_fifo_init:
  5220                           	opt stack 0
  5221  000060                     ?_OpenUSART:
  5222                           	opt stack 0
  5223  000060                     ?_writeEEPROM:
  5224                           	opt stack 0
  5225  000060                     ?_setFilter:
  5226                           	opt stack 0
  5227  000060                     ?__CANIDToRegs:
  5228                           	opt stack 0
  5229  000060                     ??_isdigit:
  5230  000060                     ?_readEEPROM:
  5231                           	opt stack 0
  5232  000060                     ?_fifo_read:
  5233                           	opt stack 0
  5234  000060                     ?_memset:
  5235                           	opt stack 0
  5236  000060                     ?_strcpy:
  5237                           	opt stack 0
  5238  000060                     ?_strchr:
  5239                           	opt stack 0
  5240  000060                     ?_strlen:
  5241                           	opt stack 0
  5242  000060                     ?_memcpy:
  5243                           	opt stack 0
  5244  000060                     ?_strcat:
  5245                           	opt stack 0
  5246  000060                     ?___lwdiv:
  5247                           	opt stack 0
  5248  000060                     ?___lwmod:
  5249                           	opt stack 0
  5250  000060                     ?___wmul:
  5251                           	opt stack 0
  5252  000060                     ?___lldiv:
  5253                           	opt stack 0
  5254  000060                     ECANSetOperationMode@mode:
  5255                           	opt stack 0
  5256  000060                     nibbleFromChar@c:
  5257                           	opt stack 0
  5258  000060                     OpenTimer0@config:
  5259                           	opt stack 0
  5260  000060                     WriteUSART@data:
  5261                           	opt stack 0
  5262  000060                     toupper@c:
  5263                           	opt stack 0
  5264  000060                     __CANIDToRegs@ptr:
  5265                           	opt stack 0
  5266  000060                     fifo_init@buf:
  5267                           	opt stack 0
  5268  000060                     fifo_read@buf:
  5269                           	opt stack 0
  5270  000060                     writeEEPROM@address:
  5271                           	opt stack 0
  5272  000060                     readEEPROM@address:
  5273                           	opt stack 0
  5274  000060                     _init_crc8$2087:
  5275                           	opt stack 0
  5276  000060                     WriteTimer0@timer0:
  5277                           	opt stack 0
  5278  000060                     OpenUSART@spbrg:
  5279                           	opt stack 0
  5280  000060                     ___lwdiv@dividend:
  5281                           	opt stack 0
  5282  000060                     ___lwmod@dividend:
  5283                           	opt stack 0
  5284  000060                     memcpy@d1:
  5285                           	opt stack 0
  5286  000060                     memset@p1:
  5287                           	opt stack 0
  5288  000060                     strcat@to:
  5289                           	opt stack 0
  5290  000060                     strchr@ptr:
  5291                           	opt stack 0
  5292  000060                     strcpy@to:
  5293                           	opt stack 0
  5294  000060                     strlen@s:
  5295                           	opt stack 0
  5296  000060                     ___wmul@multiplier:
  5297                           	opt stack 0
  5298  000060                     setFilter@val:
  5299                           	opt stack 0
  5300  000060                     ___lldiv@dividend:
  5301                           	opt stack 0
  5302                           
  5303                           ; 4 bytes @ 0x0
  5304  000060                     	ds	1
  5305  000061                     ?_putsUSART:
  5306                           	opt stack 0
  5307  000061                     ??_printBinary:
  5308  000061                     ?_strichr:
  5309                           	opt stack 0
  5310  000061                     _isdigit$2900:
  5311                           	opt stack 0
  5312  000061                     putsUSART@data:
  5313                           	opt stack 0
  5314  000061                     strichr@ptr:
  5315                           	opt stack 0
  5316                           
  5317                           ; 2 bytes @ 0x1
  5318  000061                     	ds	1
  5319  000062                     writeEEPROM@data:
  5320                           	opt stack 0
  5321  000062                     readEEPROM@data:
  5322                           	opt stack 0
  5323  000062                     OpenUSART@config:
  5324                           	opt stack 0
  5325  000062                     isdigit@c:
  5326                           	opt stack 0
  5327  000062                     fifo_init@size:
  5328                           	opt stack 0
  5329  000062                     fifo_read@nbytes:
  5330                           	opt stack 0
  5331  000062                     init_crc8@j:
  5332                           	opt stack 0
  5333  000062                     WriteTimer0@timer:
  5334                           	opt stack 0
  5335  000062                     ___lwdiv@divisor:
  5336                           	opt stack 0
  5337  000062                     ___lwmod@divisor:
  5338                           	opt stack 0
  5339  000062                     memcpy@s1:
  5340                           	opt stack 0
  5341  000062                     memset@c:
  5342                           	opt stack 0
  5343  000062                     strcat@from:
  5344                           	opt stack 0
  5345  000062                     strchr@chr:
  5346                           	opt stack 0
  5347  000062                     strcpy@from:
  5348                           	opt stack 0
  5349  000062                     strlen@cp:
  5350                           	opt stack 0
  5351  000062                     ___wmul@multiplicand:
  5352                           	opt stack 0
  5353  000062                     __CANIDToRegs@val:
  5354                           	opt stack 0
  5355                           
  5356                           ; 4 bytes @ 0x2
  5357  000062                     	ds	1
  5358  000063                     ??_putsUSART:
  5359  000063                     init_app_eeprom@i:
  5360                           	opt stack 0
  5361  000063                     printBinary@value:
  5362                           	opt stack 0
  5363  000063                     strichr@chr:
  5364                           	opt stack 0
  5365                           
  5366                           ; 2 bytes @ 0x3
  5367  000063                     	ds	1
  5368  000064                     ??_fifo_read:
  5369  000064                     ??_strchr:
  5370  000064                     ??_setFilter:
  5371  000064                     ?_hexStringToBytes:
  5372                           	opt stack 0
  5373  000064                     ?_strnicmp:
  5374                           	opt stack 0
  5375  000064                     fifo_init@f:
  5376                           	opt stack 0
  5377  000064                     init_crc8@crc:
  5378                           	opt stack 0
  5379  000064                     ___lwdiv@counter:
  5380                           	opt stack 0
  5381  000064                     ___lwmod@counter:
  5382                           	opt stack 0
  5383  000064                     printBinary@i:
  5384                           	opt stack 0
  5385  000064                     hexStringToBytes@buf:
  5386                           	opt stack 0
  5387  000064                     memcpy@n:
  5388                           	opt stack 0
  5389  000064                     memset@n:
  5390                           	opt stack 0
  5391  000064                     strcat@cp:
  5392                           	opt stack 0
  5393  000064                     strcpy@cp:
  5394                           	opt stack 0
  5395  000064                     strnicmp@s1:
  5396                           	opt stack 0
  5397  000064                     ___wmul@product:
  5398                           	opt stack 0
  5399  000064                     ___lldiv@divisor:
  5400                           	opt stack 0
  5401                           
  5402                           ; 4 bytes @ 0x4
  5403  000064                     	ds	1
  5404  000065                     init_crc8@i:
  5405                           	opt stack 0
  5406  000065                     ___lwdiv@quotient:
  5407                           	opt stack 0
  5408                           
  5409                           ; 2 bytes @ 0x5
  5410  000065                     	ds	1
  5411  000066                     ?_atoi:
  5412                           	opt stack 0
  5413  000066                     ?_strspn:
  5414                           	opt stack 0
  5415  000066                     ?_strcspn:
  5416                           	opt stack 0
  5417  000066                     __CANIDToRegs@type:
  5418                           	opt stack 0
  5419  000066                     hexStringToBytes@size:
  5420                           	opt stack 0
  5421  000066                     atoi@s:
  5422                           	opt stack 0
  5423  000066                     memcpy@d:
  5424                           	opt stack 0
  5425  000066                     memset@p:
  5426                           	opt stack 0
  5427  000066                     strnicmp@s2:
  5428                           	opt stack 0
  5429  000066                     strcspn@s1:
  5430                           	opt stack 0
  5431  000066                     strspn@s1:
  5432                           	opt stack 0
  5433                           
  5434                           ; 2 bytes @ 0x6
  5435  000066                     	ds	1
  5436  000067                     ??__CANIDToRegs:
  5437  000067                     ?_crc8:
  5438                           	opt stack 0
  5439  000067                     ?_utoa:
  5440                           	opt stack 0
  5441  000067                     crc8@crc:
  5442                           	opt stack 0
  5443  000067                     hexStringToBytes@inhex:
  5444                           	opt stack 0
  5445  000067                     utoa@buf:
  5446                           	opt stack 0
  5447                           
  5448                           ; 2 bytes @ 0x7
  5449  000067                     	ds	1
  5450  000068                     ??_atoi:
  5451  000068                     fifo_read@p:
  5452                           	opt stack 0
  5453  000068                     memcpy@s:
  5454                           	opt stack 0
  5455  000068                     strnicmp@len:
  5456                           	opt stack 0
  5457  000068                     strcspn@s2:
  5458                           	opt stack 0
  5459  000068                     strspn@s2:
  5460                           	opt stack 0
  5461  000068                     ___lldiv@quotient:
  5462                           	opt stack 0
  5463                           
  5464                           ; 4 bytes @ 0x8
  5465  000068                     	ds	1
  5466  000069                     ??_hexStringToBytes:
  5467  000069                     __CANIDToRegs@Value:
  5468                           	opt stack 0
  5469  000069                     crc8@m:
  5470                           	opt stack 0
  5471  000069                     utoa@val:
  5472                           	opt stack 0
  5473                           
  5474                           ; 2 bytes @ 0x9
  5475  000069                     	ds	1
  5476  00006A                     ??_crc8:
  5477  00006A                     ??_strnicmp:
  5478  00006A                     ?_ECANSendMessage:
  5479                           	opt stack 0
  5480  00006A                     setFilter@filter:
  5481                           	opt stack 0
  5482  00006A                     atoi@sign:
  5483                           	opt stack 0
  5484  00006A                     fifo_read@i:
  5485                           	opt stack 0
  5486  00006A                     strcspn@i:
  5487                           	opt stack 0
  5488  00006A                     strspn@i:
  5489                           	opt stack 0
  5490  00006A                     ECANSendMessage@id:
  5491                           	opt stack 0
  5492                           
  5493                           ; 4 bytes @ 0xA
  5494  00006A                     	ds	1
  5495  00006B                     setFilter@sidh:
  5496                           	opt stack 0
  5497  00006B                     atoi@a:
  5498                           	opt stack 0
  5499  00006B                     utoa@base:
  5500                           	opt stack 0
  5501                           
  5502                           ; 2 bytes @ 0xB
  5503  00006B                     	ds	1
  5504  00006C                     ?_sendEscapedUartData:
  5505                           	opt stack 0
  5506  00006C                     ?_calcCRC:
  5507                           	opt stack 0
  5508  00006C                     ?_strtok:
  5509                           	opt stack 0
  5510  00006C                     setFilter@sidl:
  5511                           	opt stack 0
  5512  00006C                     fifo_read@f:
  5513                           	opt stack 0
  5514  00006C                     ___lldiv@counter:
  5515                           	opt stack 0
  5516  00006C                     strnicmp@r:
  5517                           	opt stack 0
  5518  00006C                     sendEscapedUartData@pcrc:
  5519                           	opt stack 0
  5520  00006C                     calcCRC@p:
  5521                           	opt stack 0
  5522  00006C                     hexStringToBytes@len:
  5523                           	opt stack 0
  5524  00006C                     strtok@s1:
  5525                           	opt stack 0
  5526                           
  5527                           ; 2 bytes @ 0xC
  5528  00006C                     	ds	1
  5529  00006D                     ?_getCANFrame:
  5530                           	opt stack 0
  5531  00006D                     ?_stristr:
  5532                           	opt stack 0
  5533  00006D                     ?___llmod:
  5534                           	opt stack 0
  5535  00006D                     setFilter@eidh:
  5536                           	opt stack 0
  5537  00006D                     getCANFrame@pdlc:
  5538                           	opt stack 0
  5539  00006D                     utoa@v:
  5540                           	opt stack 0
  5541  00006D                     stristr@s1:
  5542                           	opt stack 0
  5543  00006D                     ___llmod@dividend:
  5544                           	opt stack 0
  5545                           
  5546                           ; 4 bytes @ 0xD
  5547  00006D                     	ds	1
  5548  00006E                     sendEscapedUartData@c:
  5549                           	opt stack 0
  5550  00006E                     calcCRC@len:
  5551                           	opt stack 0
  5552  00006E                     setFilter@eidl:
  5553                           	opt stack 0
  5554  00006E                     ECANSendMessage@data:
  5555                           	opt stack 0
  5556  00006E                     hexStringToBytes@p:
  5557                           	opt stack 0
  5558  00006E                     strtok@s2:
  5559                           	opt stack 0
  5560                           
  5561                           ; 2 bytes @ 0xE
  5562  00006E                     	ds	1
  5563  00006F                     ?_sendVSCPDriverCommandReply:
  5564                           	opt stack 0
  5565  00006F                     sendVSCPDriverErrorFrame@errorcode:
  5566                           	opt stack 0
  5567  00006F                     sendVSCPDriverAck@crc:
  5568                           	opt stack 0
  5569  00006F                     sendVSCPDriverNack@crc:
  5570                           	opt stack 0
  5571  00006F                     sendVSCPDriverCommandReply@cmdCode:
  5572                           	opt stack 0
  5573  00006F                     calcCRC@j:
  5574                           	opt stack 0
  5575  00006F                     utoa@c:
  5576                           	opt stack 0
  5577  00006F                     getCANFrame@pdata:
  5578                           	opt stack 0
  5579  00006F                     stristr@s2:
  5580                           	opt stack 0
  5581                           
  5582                           ; 2 bytes @ 0xF
  5583  00006F                     	ds	1
  5584  000070                     ?_itoa:
  5585                           	opt stack 0
  5586  000070                     sendVSCPDriverErrorFrame@crc:
  5587                           	opt stack 0
  5588  000070                     sendVSCPDriverCommandReply@cmdReplyCode:
  5589                           	opt stack 0
  5590  000070                     calcCRC@crc:
  5591                           	opt stack 0
  5592  000070                     ECANSendMessage@dataLen:
  5593                           	opt stack 0
  5594  000070                     hexStringToBytes@i:
  5595                           	opt stack 0
  5596  000070                     itoa@buf:
  5597                           	opt stack 0
  5598                           
  5599                           ; 2 bytes @ 0x10
  5600  000070                     	ds	1
  5601  000071                     sendVSCPDriverCommandReply@crc:
  5602                           	opt stack 0
  5603  000071                     getCANFrame@pid:
  5604                           	opt stack 0
  5605  000071                     ECANSendMessage@msgFlags:
  5606                           	opt stack 0
  5607  000071                     ___llmod@divisor:
  5608                           	opt stack 0
  5609                           
  5610                           ; 4 bytes @ 0x11
  5611  000071                     	ds	1
  5612  000072                     ??_ECANSendMessage:
  5613  000072                     ?_getVSCPFrame:
  5614                           	opt stack 0
  5615  000072                     getVSCPFrame@pvscpclass:
  5616                           	opt stack 0
  5617  000072                     itoa@val:
  5618                           	opt stack 0
  5619  000072                     receivePrintEventCANAL@data:
  5620                           	opt stack 0
  5621                           
  5622                           ; 8 bytes @ 0x12
  5623  000072                     	ds	1
  5624  000073                     ECANSendMessage@pb:
  5625                           	opt stack 0
  5626                           
  5627                           ; 18 bytes @ 0x13
  5628  000073                     	ds	1
  5629  000074                     getVSCPFrame@pvscptype:
  5630                           	opt stack 0
  5631  000074                     itoa@base:
  5632                           	opt stack 0
  5633                           
  5634                           ; 2 bytes @ 0x14
  5635  000074                     	ds	1
  5636  000075                     ___llmod@counter:
  5637                           	opt stack 0
  5638                           
  5639                           ; 1 bytes @ 0x15
  5640  000075                     	ds	1
  5641  000076                     ?_sprintf:
  5642                           	opt stack 0
  5643  000076                     ?_ultoa:
  5644                           	opt stack 0
  5645  000076                     getVSCPFrame@pNodeId:
  5646                           	opt stack 0
  5647  000076                     sprintf@sp:
  5648                           	opt stack 0
  5649  000076                     ultoa@buf:
  5650                           	opt stack 0
  5651                           
  5652                           ; 2 bytes @ 0x16
  5653  000076                     	ds	2
  5654  000078                     getVSCPFrame@pPriority:
  5655                           	opt stack 0
  5656  000078                     sprintf@f:
  5657                           	opt stack 0
  5658  000078                     ultoa@val:
  5659                           	opt stack 0
  5660  000078                     printFirmwareVersion@wrkbuf:
  5661                           	opt stack 0
  5662                           
  5663                           ; 20 bytes @ 0x18
  5664  000078                     	ds	2
  5665  00007A                     receivePrintEventCANAL@i:
  5666                           	opt stack 0
  5667  00007A                     getVSCPFrame@pSize:
  5668                           	opt stack 0
  5669                           
  5670                           ; 2 bytes @ 0x1A
  5671  00007A                     	ds	1
  5672  00007B                     receivePrintEventCANAL@id:
  5673                           	opt stack 0
  5674                           
  5675                           ; 4 bytes @ 0x1B
  5676  00007B                     	ds	1
  5677  00007C                     getVSCPFrame@pData:
  5678                           	opt stack 0
  5679  00007C                     ultoa@base:
  5680                           	opt stack 0
  5681                           
  5682                           ; 2 bytes @ 0x1C
  5683  00007C                     	ds	2
  5684  00007E                     ??_sprintf:
  5685  00007E                     ??_getVSCPFrame:
  5686  00007E                     ultoa@v:
  5687                           	opt stack 0
  5688                           
  5689                           ; 4 bytes @ 0x1E
  5690  00007E                     	ds	1
  5691  00007F                     receivePrintEventCANAL@dlc:
  5692                           	opt stack 0
  5693                           
  5694                           ; 1 bytes @ 0x1F
  5695  00007F                     	ds	1
  5696  000080                     receivePrintEventCANAL@crc:
  5697                           	opt stack 0
  5698                           
  5699                           ; 1 bytes @ 0x20
  5700  000080                     	ds	1
  5701  000081                     sprintf@idx:
  5702                           	opt stack 0
  5703                           
  5704                           ; 1 bytes @ 0x21
  5705  000081                     	ds	1
  5706  000082                     ultoa@c:
  5707                           	opt stack 0
  5708  000082                     _sprintf$2149:
  5709                           	opt stack 0
  5710  000082                     getVSCPFrame@id:
  5711                           	opt stack 0
  5712                           
  5713                           ; 4 bytes @ 0x22
  5714  000082                     	ds	1
  5715  000083                     ??_receivePrintEventSLCAN:
  5716                           
  5717                           ; 0 bytes @ 0x23
  5718  000083                     	ds	1
  5719  000084                     _sprintf$2150:
  5720                           	opt stack 0
  5721                           
  5722                           ; 2 bytes @ 0x24
  5723  000084                     	ds	1
  5724  000085                     ECANSendMessage@mode:
  5725                           	opt stack 0
  5726                           
  5727                           ; 1 bytes @ 0x25
  5728  000085                     	ds	1
  5729  000086                     ECANSendMessage@buffers:
  5730                           	opt stack 0
  5731  000086                     _sprintf$2156:
  5732                           	opt stack 0
  5733  000086                     receivePrintEventSLCAN@id:
  5734                           	opt stack 0
  5735                           
  5736                           ; 4 bytes @ 0x26
  5737  000086                     	ds	1
  5738  000087                     ECANSendMessage@j:
  5739                           	opt stack 0
  5740                           
  5741                           ; 1 bytes @ 0x27
  5742  000087                     	ds	1
  5743  000088                     ECANSendMessage@tempBSEL0:
  5744                           	opt stack 0
  5745  000088                     sprintf@ap:
  5746                           	opt stack 0
  5747                           
  5748                           ; 1 bytes @ 0x28
  5749  000088                     	ds	1
  5750  000089                     ECANSendMessage@tempPtr:
  5751                           	opt stack 0
  5752  000089                     sprintf@prec:
  5753                           	opt stack 0
  5754                           
  5755                           ; 2 bytes @ 0x29
  5756  000089                     	ds	1
  5757  00008A                     receivePrintEventSLCAN@dlc:
  5758                           	opt stack 0
  5759                           
  5760                           ; 1 bytes @ 0x2A
  5761  00008A                     	ds	1
  5762  00008B                     ECANSendMessage@temp:
  5763                           	opt stack 0
  5764  00008B                     receivePrintEventSLCAN@i:
  5765                           	opt stack 0
  5766  00008B                     sprintf@width:
  5767                           	opt stack 0
  5768                           
  5769                           ; 2 bytes @ 0x2B
  5770  00008B                     	ds	1
  5771  00008C                     ECANSendMessage@i:
  5772                           	opt stack 0
  5773                           
  5774                           ; 1 bytes @ 0x2C
  5775  00008C                     	ds	1
  5776  00008D                     ECANSendMessage@ptr:
  5777                           	opt stack 0
  5778  00008D                     sprintf@_val:
  5779                           	opt stack 0
  5780                           
  5781                           ; 4 bytes @ 0x2D
  5782  00008D                     	ds	2
  5783  00008F                     ?_sendCANFrame:
  5784                           	opt stack 0
  5785  00008F                     sendCANFrame@id:
  5786                           	opt stack 0
  5787                           
  5788                           ; 4 bytes @ 0x2F
  5789  00008F                     	ds	2
  5790  000091                     sprintf@c:
  5791                           	opt stack 0
  5792                           
  5793                           ; 1 bytes @ 0x31
  5794  000091                     	ds	1
  5795  000092                     sprintf@flag:
  5796                           	opt stack 0
  5797                           
  5798                           ; 2 bytes @ 0x32
  5799  000092                     	ds	1
  5800  000093                     sendCANFrame@dlc:
  5801                           	opt stack 0
  5802                           
  5803                           ; 1 bytes @ 0x33
  5804  000093                     	ds	1
  5805  000094                     ??_receivePrintEventVerbose:
  5806  000094                     _printStatistics$1371:
  5807                           	opt stack 0
  5808  000094                     _printErrors$1396:
  5809                           	opt stack 0
  5810  000094                     sendCANFrame@pdata:
  5811                           	opt stack 0
  5812                           
  5813                           ; 2 bytes @ 0x34
  5814  000094                     	ds	2
  5815  000096                     ??_doModeSLCAN:
  5816  000096                     ??_receiveVSCPModeCanalMsg:
  5817  000096                     ?_sendVSCPFrame:
  5818                           	opt stack 0
  5819  000096                     _printStatistics$1377:
  5820                           	opt stack 0
  5821  000096                     _printErrors$1402:
  5822                           	opt stack 0
  5823  000096                     sendVSCPFrame@vscpclass:
  5824                           	opt stack 0
  5825                           
  5826                           ; 2 bytes @ 0x36
  5827  000096                     	ds	2
  5828  000098                     sendVSCPFrame@vscptype:
  5829                           	opt stack 0
  5830  000098                     _printStatistics$1383:
  5831                           	opt stack 0
  5832  000098                     _printErrors$1408:
  5833                           	opt stack 0
  5834                           
  5835                           ; 2 bytes @ 0x38
  5836  000098                     	ds	1
  5837  000099                     sendVSCPFrame@nodeid:
  5838                           	opt stack 0
  5839  000099                     _receivePrintEventVerbose$1289:
  5840                           	opt stack 0
  5841                           
  5842                           ; 2 bytes @ 0x39
  5843  000099                     	ds	1
  5844  00009A                     sendVSCPFrame@priority:
  5845                           	opt stack 0
  5846  00009A                     _printStatistics$1389:
  5847                           	opt stack 0
  5848  00009A                     _printErrors$1414:
  5849                           	opt stack 0
  5850                           
  5851                           ; 2 bytes @ 0x3A
  5852  00009A                     	ds	1
  5853  00009B                     sendVSCPFrame@size:
  5854                           	opt stack 0
  5855  00009B                     _receivePrintEventVerbose$1294:
  5856                           	opt stack 0
  5857                           
  5858                           ; 2 bytes @ 0x3B
  5859  00009B                     	ds	1
  5860  00009C                     _printErrors$1420:
  5861                           	opt stack 0
  5862  00009C                     sendVSCPFrame@pData:
  5863                           	opt stack 0
  5864                           
  5865                           ; 2 bytes @ 0x3C
  5866  00009C                     	ds	1
  5867  00009D                     _receivePrintEventVerbose$1299:
  5868                           	opt stack 0
  5869  00009D                     doModeSLCAN@id:
  5870                           	opt stack 0
  5871                           
  5872                           ; 4 bytes @ 0x3D
  5873  00009D                     	ds	1
  5874  00009E                     ??_sendVSCPFrame:
  5875  00009E                     _printErrors$1429:
  5876                           	opt stack 0
  5877                           
  5878                           ; 2 bytes @ 0x3E
  5879  00009E                     	ds	1
  5880  00009F                     _receivePrintEventVerbose$1304:
  5881                           	opt stack 0
  5882                           
  5883                           ; 2 bytes @ 0x3F
  5884  00009F                     	ds	2
  5885  0000A1                     doModeSLCAN@dlc:
  5886                           	opt stack 0
  5887  0000A1                     _receivePrintEventVerbose$1309:
  5888                           	opt stack 0
  5889                           
  5890                           ; 2 bytes @ 0x41
  5891  0000A1                     	ds	1
  5892  0000A2                     doModeSLCAN@c:
  5893                           	opt stack 0
  5894                           
  5895                           ; 1 bytes @ 0x42
  5896  0000A2                     	ds	1
  5897  0000A3                     doModeSLCAN@rv:
  5898                           	opt stack 0
  5899  0000A3                     _receivePrintEventVerbose$1314:
  5900                           	opt stack 0
  5901                           
  5902                           ; 2 bytes @ 0x43
  5903  0000A3                     	ds	2
  5904  0000A5                     receivePrintEventVerbose@i:
  5905                           	opt stack 0
  5906                           
  5907                           ; 1 bytes @ 0x45
  5908  0000A5                     	ds	5
  5909  0000AA                     receiveVSCPModeCanalMsg@data:
  5910                           	opt stack 0
  5911                           
  5912                           ; 8 bytes @ 0x4A
  5913  0000AA                     	ds	8
  5914  0000B2                     receiveVSCPModeCanalMsg@id:
  5915                           	opt stack 0
  5916  0000B2                     sendVSCPFrame@id:
  5917                           	opt stack 0
  5918                           
  5919                           ; 4 bytes @ 0x52
  5920  0000B2                     	ds	4
  5921  0000B6                     ?_readRegisterExtended:
  5922                           	opt stack 0
  5923  0000B6                     ?_writeRegisterExtended:
  5924                           	opt stack 0
  5925  0000B6                     ?_readRegister:
  5926                           	opt stack 0
  5927  0000B6                     receiveVSCPModeCanalMsg@dlc:
  5928                           	opt stack 0
  5929  0000B6                     readRegister@reg:
  5930                           	opt stack 0
  5931  0000B6                     readRegisterExtended@page:
  5932                           	opt stack 0
  5933  0000B6                     writeRegisterExtended@page:
  5934                           	opt stack 0
  5935                           
  5936                           ; 2 bytes @ 0x56
  5937  0000B6                     	ds	1
  5938  0000B7                     doModeVscp@c:
  5939                           	opt stack 0
  5940  0000B7                     readRegister@timeout:
  5941                           	opt stack 0
  5942                           
  5943                           ; 2 bytes @ 0x57
  5944  0000B7                     	ds	1
  5945  0000B8                     readRegisterExtended@reg:
  5946                           	opt stack 0
  5947  0000B8                     writeRegisterExtended@reg:
  5948                           	opt stack 0
  5949                           
  5950                           ; 1 bytes @ 0x58
  5951  0000B8                     	ds	1
  5952  0000B9                     readRegister@value:
  5953                           	opt stack 0
  5954  0000B9                     readRegisterExtended@timeout:
  5955                           	opt stack 0
  5956  0000B9                     writeRegisterExtended@timeout:
  5957                           	opt stack 0
  5958                           
  5959                           ; 2 bytes @ 0x59
  5960  0000B9                     	ds	1
  5961  0000BA                     ??_readRegister:
  5962                           
  5963                           ; 0 bytes @ 0x5A
  5964  0000BA                     	ds	1
  5965  0000BB                     readRegisterExtended@value:
  5966                           	opt stack 0
  5967  0000BB                     writeRegisterExtended@value:
  5968                           	opt stack 0
  5969                           
  5970                           ; 2 bytes @ 0x5B
  5971  0000BB                     	ds	2
  5972  0000BD                     ??_readRegisterExtended:
  5973  0000BD                     ??_writeRegisterExtended:
  5974                           
  5975                           ; 0 bytes @ 0x5D
  5976  0000BD                     	ds	1
  5977  0000BE                     readRegister@nodeid:
  5978                           	opt stack 0
  5979                           
  5980                           ; 1 bytes @ 0x5E
  5981  0000BE                     	ds	1
  5982  0000BF                     printGUID@nodeid:
  5983                           	opt stack 0
  5984  0000BF                     printMDF@nodeid:
  5985                           	opt stack 0
  5986  0000BF                     printNodeFirmwareVersion@nodeid:
  5987                           	opt stack 0
  5988                           
  5989                           ; 1 bytes @ 0x5F
  5990  0000BF                     	ds	1
  5991  0000C0                     printMDF@value:
  5992                           	opt stack 0
  5993  0000C0                     printGUID@buf:
  5994                           	opt stack 0
  5995  0000C0                     printNodeFirmwareVersion@buf:
  5996                           	opt stack 0
  5997                           
  5998                           ; 3 bytes @ 0x60
  5999  0000C0                     	ds	1
  6000  0000C1                     readRegisterExtended@nodeid:
  6001                           	opt stack 0
  6002  0000C1                     writeRegisterExtended@nodeid:
  6003                           	opt stack 0
  6004  0000C1                     printMDF@p:
  6005                           	opt stack 0
  6006                           
  6007                           ; 2 bytes @ 0x61
  6008  0000C1                     	ds	2
  6009  0000C3                     printGUID@value:
  6010                           	opt stack 0
  6011  0000C3                     printMDF@i:
  6012                           	opt stack 0
  6013  0000C3                     printNodeFirmwareVersion@value:
  6014                           	opt stack 0
  6015                           
  6016                           ; 1 bytes @ 0x63
  6017  0000C3                     	ds	1
  6018  0000C4                     printGUID@i:
  6019                           	opt stack 0
  6020  0000C4                     printNodeFirmwareVersion@i:
  6021                           	opt stack 0
  6022                           
  6023                           ; 1 bytes @ 0x64
  6024  0000C4                     	ds	1
  6025  0000C5                     _findNodes$1473:
  6026                           	opt stack 0
  6027                           
  6028                           ; 2 bytes @ 0x65
  6029  0000C5                     	ds	2
  6030  0000C7                     findNodes@nFound:
  6031                           	opt stack 0
  6032                           
  6033                           ; 1 bytes @ 0x67
  6034  0000C7                     	ds	1
  6035  0000C8                     findNodes@value:
  6036                           	opt stack 0
  6037                           
  6038                           ; 1 bytes @ 0x68
  6039  0000C8                     	ds	1
  6040  0000C9                     findNodes@i:
  6041                           	opt stack 0
  6042                           
  6043                           ; 1 bytes @ 0x69
  6044  0000C9                     	ds	1
  6045  0000CA                     
  6046                           ; 2 bytes @ 0x6A
  6047  0000CA                     	ds	2
  6048  0000CC                     
  6049                           ; 3 bytes @ 0x6C
  6050  0000CC                     	ds	3
  6051  0000CF                     ??_main:
  6052                           
  6053                           ; 0 bytes @ 0x6F
  6054  0000CF                     	ds	1
  6055  0000D0                     main@c:
  6056                           	opt stack 0
  6057                           
  6058                           ; 1 bytes @ 0x70
  6059  0000D0                     	ds	1
  6060                           tblptru	equ	0xFF8
  6061                           tblptrh	equ	0xFF7
  6062                           tblptrl	equ	0xFF6
  6063                           tablat	equ	0xFF5
  6064                           prodh	equ	0xFF4
  6065                           prodl	equ	0xFF3
  6066                           intcon	equ	0xFF2
  6067                           indf0	equ	0xFEF
  6068                           postinc0	equ	0xFEE
  6069                           fsr0h	equ	0xFEA
  6070                           fsr0l	equ	0xFE9
  6071                           wreg	equ	0xFE8
  6072                           indf1	equ	0xFE7
  6073                           postinc1	equ	0xFE6
  6074                           postdec1	equ	0xFE5
  6075                           fsr1h	equ	0xFE2
  6076                           fsr1l	equ	0xFE1
  6077                           indf2	equ	0xFDF
  6078                           postinc2	equ	0xFDE
  6079                           postdec2	equ	0xFDD
  6080                           plusw2	equ	0xFDB
  6081                           fsr2h	equ	0xFDA
  6082                           fsr2l	equ	0xFD9
  6083                           status	equ	0xFD8
  6084                           
  6085                           	psect	cstackCOMRAM
  6086  000001                     __pcstackCOMRAM:
  6087                           	opt stack 0
  6088  000001                     ?__RegsToCANID:
  6089                           	opt stack 0
  6090  000001                     ?i1_WriteTimer0:
  6091                           	opt stack 0
  6092  000001                     ?_fifo_write:
  6093                           	opt stack 0
  6094  000001                     ?_fifo_getFree:
  6095                           	opt stack 0
  6096  000001                     ?__ECANPointBuffer:
  6097                           	opt stack 0
  6098  000001                     fifo_write@buf:
  6099                           	opt stack 0
  6100  000001                     ReadUSART@data:
  6101                           	opt stack 0
  6102  000001                     __RegsToCANID@ptr:
  6103                           	opt stack 0
  6104  000001                     i1WriteTimer0@timer0:
  6105                           	opt stack 0
  6106                           
  6107                           ; 2 bytes @ 0x0
  6108  000001                     	ds	1
  6109  000002                     fifo_write@nbytes:
  6110                           	opt stack 0
  6111                           
  6112                           ; 4 bytes @ 0x1
  6113  000002                     	ds	1
  6114  000003                     ??_fifo_getFree:
  6115  000003                     __RegsToCANID@val:
  6116                           	opt stack 0
  6117  000003                     i1WriteTimer0@timer:
  6118                           	opt stack 0
  6119                           
  6120                           ; 2 bytes @ 0x2
  6121  000003                     	ds	1
  6122  000004                     __RegsToCANID@type:
  6123                           	opt stack 0
  6124  000004                     __ECANPointBuffer@b:
  6125                           	opt stack 0
  6126                           
  6127                           ; 1 bytes @ 0x3
  6128  000004                     	ds	1
  6129  000005                     ??__RegsToCANID:
  6130  000005                     __ECANPointBuffer@pt:
  6131                           	opt stack 0
  6132                           
  6133                           ; 2 bytes @ 0x4
  6134  000005                     	ds	1
  6135  000006                     ??_fifo_write:
  6136                           
  6137                           ; 0 bytes @ 0x5
  6138  000006                     	ds	1
  6139  000007                     __RegsToCANID@Value:
  6140                           	opt stack 0
  6141                           
  6142                           ; 1 bytes @ 0x6
  6143  000007                     	ds	1
  6144  000008                     ?_ECANReceiveMessage:
  6145                           	opt stack 0
  6146  000008                     ECANReceiveMessage@data:
  6147                           	opt stack 0
  6148                           
  6149                           ; 1 bytes @ 0x7
  6150  000008                     	ds	1
  6151  000009                     ECANReceiveMessage@dataLen:
  6152                           	opt stack 0
  6153                           
  6154                           ; 1 bytes @ 0x8
  6155  000009                     	ds	1
  6156  00000A                     ECANReceiveMessage@msgFlags:
  6157                           	opt stack 0
  6158  00000A                     fifo_write@p:
  6159                           	opt stack 0
  6160                           
  6161                           ; 1 bytes @ 0x9
  6162  00000A                     	ds	1
  6163  00000B                     fifo_getFree@f:
  6164                           	opt stack 0
  6165  00000B                     ECANReceiveMessage@savedPtr:
  6166                           	opt stack 0
  6167  00000B                     fifo_write@i:
  6168                           	opt stack 0
  6169                           
  6170                           ; 4 bytes @ 0xA
  6171  00000B                     	ds	2
  6172  00000D                     ECANReceiveMessage@id:
  6173                           	opt stack 0
  6174                           
  6175                           ; 1 bytes @ 0xC
  6176  00000D                     	ds	1
  6177  00000E                     ECANReceiveMessage@i:
  6178                           	opt stack 0
  6179                           
  6180                           ; 1 bytes @ 0xD
  6181  00000E                     	ds	1
  6182  00000F                     ECANReceiveMessage@mode:
  6183                           	opt stack 0
  6184  00000F                     fifo_write@f:
  6185                           	opt stack 0
  6186                           
  6187                           ; 1 bytes @ 0xE
  6188  00000F                     	ds	1
  6189  000010                     ECANReceiveMessage@temp:
  6190                           	opt stack 0
  6191                           
  6192                           ; 1 bytes @ 0xF
  6193  000010                     	ds	1
  6194  000011                     ECANReceiveMessage@ptr:
  6195                           	opt stack 0
  6196                           
  6197                           ; 2 bytes @ 0x10
  6198  000011                     	ds	2
  6199  000013                     ??_Interrupt:
  6200                           
  6201                           ; 0 bytes @ 0x12
  6202  000013                     	ds	7
  6203  00001A                     Interrupt@data:
  6204                           	opt stack 0
  6205                           
  6206                           ; 8 bytes @ 0x19
  6207  00001A                     	ds	8
  6208  000022                     Interrupt@c:
  6209                           	opt stack 0
  6210                           
  6211                           ; 1 bytes @ 0x21
  6212  000022                     	ds	1
  6213  000023                     Interrupt@dlc:
  6214                           	opt stack 0
  6215                           
  6216                           ; 1 bytes @ 0x22
  6217  000023                     	ds	1
  6218  000024                     Interrupt@flags:
  6219                           	opt stack 0
  6220                           
  6221                           ; 1 bytes @ 0x23
  6222  000024                     	ds	1
  6223  000025                     Interrupt@id:
  6224                           	opt stack 0
  6225                           
  6226                           ; 4 bytes @ 0x24
  6227  000025                     	ds	4
  6228                           tblptru	equ	0xFF8
  6229                           tblptrh	equ	0xFF7
  6230                           tblptrl	equ	0xFF6
  6231                           tablat	equ	0xFF5
  6232                           prodh	equ	0xFF4
  6233                           prodl	equ	0xFF3
  6234                           intcon	equ	0xFF2
  6235                           indf0	equ	0xFEF
  6236                           postinc0	equ	0xFEE
  6237                           fsr0h	equ	0xFEA
  6238                           fsr0l	equ	0xFE9
  6239                           wreg	equ	0xFE8
  6240                           indf1	equ	0xFE7
  6241                           postinc1	equ	0xFE6
  6242                           postdec1	equ	0xFE5
  6243                           fsr1h	equ	0xFE2
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           plusw2	equ	0xFDB
  6249                           fsr2h	equ	0xFDA
  6250                           fsr2l	equ	0xFD9
  6251                           status	equ	0xFD8
  6252                           
  6253 ;;
  6254 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6255 ;;
  6256 ;; *************** function _main *****************
  6257 ;; Defined at:
  6258 ;;		line 230 in file "main.c"
  6259 ;; Parameters:    Size  Location     Type
  6260 ;;  argc            2  106[BANK0 ] int 
  6261 ;;  argv            3  108[BANK0 ] PTR PTR unsigned char 
  6262 ;; Auto vars:     Size  Location     Type
  6263 ;;  c               1  112[BANK0 ] unsigned char 
  6264 ;; Return value:  Size  Location     Type
  6265 ;;                  2  106[BANK0 ] int 
  6266 ;; Registers used:
  6267 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6268 ;; Tracked objects:
  6269 ;;		On entry : 0/0
  6270 ;;		On exit  : F/0
  6271 ;;		Unchanged: 0/0
  6272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6273 ;;      Params:         0       5       0       0       0       0       0
  6274 ;;      Locals:         0       1       0       0       0       0       0
  6275 ;;      Temps:          0       1       0       0       0       0       0
  6276 ;;      Totals:         0       7       0       0       0       0       0
  6277 ;;Total ram usage:        7 bytes
  6278 ;; Hardware stack levels required when called:   11
  6279 ;; This function calls:
  6280 ;;		_fifo_init
  6281 ;;		_init_crc8
  6282 ;;		_readEEPROM
  6283 ;;		_vscp_restoreDefaults
  6284 ;;		_init
  6285 ;;		_putsUSART
  6286 ;;		_printFirmwareVersion
  6287 ;;		_printMode
  6288 ;;		_fifo_read
  6289 ;;		_doModeVerbose
  6290 ;;		_doModeVscp
  6291 ;;		_doModeSLCAN
  6292 ;;		_doModeVscpNode
  6293 ;; This function is called by:
  6294 ;;		Startup code after reset
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           	psect	text0
  6299  00330A                     __ptext0:
  6300                           	opt stack 0
  6301  00330A                     _main:
  6302                           	opt stack 20
  6303                           
  6304                           ;main.c: 232: fifo_init( &serialInputFifo, inputBuffer, sizeof ( inputBuffer));
  6305                           
  6306                           ;incstack = 0
  6307                           ;incstack = 0
  6308  00330A  0E02               	movlw	high _inputBuffer
  6309  00330C  0100               	movlb	0	; () banked
  6310  00330E  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6311  003310  0E00               	movlw	low _inputBuffer
  6312  003312  6F60               	movwf	?_fifo_init& (0+255),b
  6313  003314  6B63               	clrf	(?_fifo_init+3)& (0+255),b
  6314  003316  0E80               	movlw	128
  6315  003318  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6316  00331A  0E3E               	movlw	_serialInputFifo& (0+255)
  6317  00331C  ECAF  F028         	call	_fifo_init
  6318                           
  6319                           ;main.c: 233: fifo_init( &canInputFifo, caninputBuffer, sizeof ( caninputBuffer));
  6320  003320  0E04               	movlw	high _caninputBuffer
  6321  003322  6F61               	movwf	(?_fifo_init+1)& (0+255),b
  6322  003324  0E00               	movlw	low _caninputBuffer
  6323  003326  6F60               	movwf	?_fifo_init& (0+255),b
  6324  003328  0E01               	movlw	1
  6325  00332A  6F63               	movwf	(?_fifo_init+3)& (0+255),b
  6326  00332C  0EEE               	movlw	238
  6327  00332E  6F62               	movwf	(?_fifo_init+2)& (0+255),b
  6328  003330  0E36               	movlw	_canInputFifo& (0+255)
  6329  003332  ECAF  F028         	call	_fifo_init
  6330                           
  6331                           ;main.c: 236: init_crc8();
  6332  003336  EC15  F026         	call	_init_crc8	;wreg free
  6333                           
  6334                           ; BSR set to: 0
  6335                           ;main.c: 240: if ( ( 0x55 != readEEPROM(0x01) ) ||
  6336                           ;main.c: 241: ( 0xaa != readEEPROM(0x02) ) ) {
  6337  00333A  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6338  00333C  0E01               	movlw	1
  6339  00333E  6F60               	movwf	?_readEEPROM& (0+255),b
  6340  003340  EC4A  F02A         	call	_readEEPROM	;wreg free
  6341  003344  0A55               	xorlw	85
  6342  003346  E107               	bnz	l9346
  6343                           
  6344                           ; BSR set to: 0
  6345  003348  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
  6346  00334A  0E02               	movlw	2
  6347  00334C  6F60               	movwf	?_readEEPROM& (0+255),b
  6348  00334E  EC4A  F02A         	call	_readEEPROM	;wreg free
  6349  003352  0AAA               	xorlw	170
  6350  003354  A4D8               	btfss	status,2,c
  6351  003356                     l9346:
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;main.c: 242: vscp_restoreDefaults();
  6355  003356  EC5C  F02A         	call	_vscp_restoreDefaults	;wreg free
  6356                           
  6357                           ;main.c: 243: }
  6358                           ;main.c: 246: init();
  6359  00335A  EC07  F028         	call	_init	;wreg free
  6360                           
  6361                           ; BSR set to: 0
  6362                           ;main.c: 250: _delay((unsigned long)((10)*(40000000/4000.0)));
  6363  00335E  0E82               	movlw	130
  6364  003360  6FCF               	movwf	??_main& (0+255),b
  6365  003362  0EDD               	movlw	221
  6366  003364                     u16327:
  6367  003364  2EE8               	decfsz	wreg,f,c
  6368  003366  D7FE               	goto	u16327
  6369  003368  2FCF               	decfsz	??_main& (0+255),f,b
  6370  00336A  D7FC               	goto	u16327
  6371  00336C  D000               	nop2	
  6372                           
  6373                           ;main.c: 254: putsUSART((char *) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6374  00336E  0E79               	movlw	high STR_1
  6375  003370  0100               	movlb	0	; () banked
  6376  003372  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6377  003374  0E53               	movlw	low STR_1
  6378  003376  6F61               	movwf	?_putsUSART& (0+255),b
  6379  003378  EC6A  F027         	call	_putsUSART	;wreg free
  6380                           
  6381                           ;main.c: 255: putsUSART((char *) "Copyright (C) 2014-2015 Grodans Paradis AB, Sweden\r\n
      +                          ");
  6382  00337C  0E74               	movlw	high STR_2
  6383  00337E  0100               	movlb	0	; () banked
  6384  003380  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6385  003382  0EB1               	movlw	low STR_2
  6386  003384  6F61               	movwf	?_putsUSART& (0+255),b
  6387  003386  EC6A  F027         	call	_putsUSART	;wreg free
  6388                           
  6389                           ;main.c: 256: printFirmwareVersion();
  6390  00338A  ECA2  F023         	call	_printFirmwareVersion	;wreg free
  6391                           
  6392                           ;main.c: 257: printMode();
  6393  00338E  EC65  F025         	call	_printMode	;wreg free
  6394                           
  6395                           ;main.c: 261: if (0 && (0 != mode)) {
  6396  003392  D025               	goto	l9378
  6397  003394                     l399:
  6398                           
  6399                           ; BSR set to: 0
  6400  003394  0004               	clrwdt		;# 
  6401                           
  6402                           ;main.c: 272: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6403  003396  0100               	movlb	0	; () banked
  6404  003398  0E00               	movlw	high main@c
  6405  00339A  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6406  00339C  0ED0               	movlw	low main@c
  6407  00339E  6F60               	movwf	?_fifo_read& (0+255),b
  6408  0033A0  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6409  0033A2  0E01               	movlw	1
  6410  0033A4  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6411  0033A6  0E3E               	movlw	_serialInputFifo& (0+255)
  6412  0033A8  EC60  F020         	call	_fifo_read
  6413  0033AC  0560               	decf	?_fifo_read& (0+255),w,b
  6414  0033AE  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6415  0033B0  E10C               	bnz	l400
  6416                           
  6417                           ; BSR set to: 0
  6418                           ;main.c: 273: (INTCONbits.GIE = 1);
  6419  0033B2  8EF2               	bsf	intcon,7,c	;volatile
  6420                           
  6421                           ; BSR set to: 0
  6422                           ;main.c: 274: if ('v' == c) {
  6423  0033B4  51D0               	movf	main@c& (0+255),w,b
  6424  0033B6  0A76               	xorlw	118
  6425  0033B8  E108               	bnz	l400
  6426                           
  6427                           ; BSR set to: 0
  6428                           ;main.c: 275: mode = 0;
  6429  0033BA  6BF8               	clrf	_mode& (0+255),b
  6430                           
  6431                           ; BSR set to: 0
  6432                           ;main.c: 276: putsUSART((char *) "Temporary verbose mode set\r\n");
  6433  0033BC  0E7B               	movlw	high STR_4
  6434  0033BE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6435  0033C0  0E2B               	movlw	low STR_4
  6436  0033C2  6F61               	movwf	?_putsUSART& (0+255),b
  6437  0033C4  EC6A  F027         	call	_putsUSART	;wreg free
  6438                           
  6439                           ;main.c: 277: break;
  6440  0033C8  D00A               	goto	l9378
  6441  0033CA                     l400:
  6442                           
  6443                           ; BSR set to: 0
  6444                           ;main.c: 278: }
  6445                           ;main.c: 279: }
  6446                           ;main.c: 280: (INTCONbits.GIE = 1);
  6447  0033CA  8EF2               	bsf	intcon,7,c	;volatile
  6448                           
  6449                           ; BSR set to: 0
  6450  0033CC  0EB8               	movlw	184
  6451  0033CE  5DE9               	subwf	_timekeeper& (0+255),w,b	;volatile
  6452  0033D0  0E0B               	movlw	11
  6453  0033D2  59EA               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
  6454  0033D4  0E00               	movlw	0
  6455  0033D6  59EB               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
  6456  0033D8  0E00               	movlw	0
  6457  0033DA  59EC               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
  6458  0033DC  E3DB               	bnc	l399
  6459  0033DE                     l9378:
  6460                           
  6461                           ;main.c: 281: }
  6462                           ;main.c: 282: }
  6463                           ;main.c: 284: ledFunctionality = 1;
  6464  0033DE  0E01               	movlw	1
  6465  0033E0  6E35               	movwf	_ledFunctionality,c
  6466  0033E2                     l403:
  6467  0033E2  0004               	clrwdt		;# 
  6468                           
  6469                           ;main.c: 292: if (COMSTATbits.TXBO) {
  6470  0033E4  AA74               	btfss	3956,5,c	;volatile
  6471  0033E6  D002               	goto	l404
  6472                           
  6473                           ;main.c: 294: ledFunctionality = 6;
  6474  0033E8  0E06               	movlw	6
  6475  0033EA  D009               	goto	L1
  6476  0033EC                     l404:
  6477                           
  6478                           ;main.c: 296: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6479  0033EC  B874               	btfsc	3956,4,c	;volatile
  6480  0033EE  D002               	goto	l9386
  6481  0033F0  A674               	btfss	3956,3,c	;volatile
  6482  0033F2  D002               	goto	l406
  6483  0033F4                     l9386:
  6484                           
  6485                           ;main.c: 298: ledFunctionality = 5;
  6486  0033F4  0E05               	movlw	5
  6487  0033F6  D003               	goto	L1
  6488  0033F8                     l406:
  6489                           
  6490                           ;main.c: 302: ledFunctionality = 4;
  6491  0033F8  0E04               	movlw	4
  6492                           
  6493                           ;main.c: 300: else if (COMSTATbits.EWARN) {
  6494  0033FA  A074               	btfss	3956,0,c	;volatile
  6495                           
  6496                           ;main.c: 304: else {
  6497                           ;main.c: 306: ledFunctionality = 1;
  6498                           
  6499                           ;main.c: 303: }
  6500  0033FC  0E01               	movlw	1
  6501  0033FE                     L1:
  6502  0033FE  6E35               	movwf	_ledFunctionality,c
  6503                           
  6504                           ;main.c: 307: }
  6505                           ;main.c: 310: if (COMSTATbits.RXBnOVFL) {
  6506  003400  AC74               	btfss	3956,6,c	;volatile
  6507  003402  D007               	goto	l9398
  6508                           
  6509                           ;main.c: 311: can_receiveOverruns++;
  6510  003404  0100               	movlb	0	; () banked
  6511  003406  2BD1               	incf	_can_receiveOverruns& (0+255),f,b
  6512  003408  0E00               	movlw	0
  6513  00340A  23D2               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6514  00340C  23D3               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6515  00340E  23D4               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6516                           
  6517                           ; BSR set to: 0
  6518                           ;main.c: 312: COMSTATbits.RXBnOVFL = 0;
  6519  003410  9C74               	bcf	3956,6,c	;volatile
  6520  003412                     l9398:
  6521                           
  6522                           ;main.c: 313: }
  6523                           ;main.c: 315: if (0 == mode) {
  6524  003412  0100               	movlb	0	; () banked
  6525  003414  67F8               	tstfsz	_mode& (0+255),b
  6526  003416  D003               	goto	l9402
  6527  003418                     l9400:
  6528                           
  6529                           ; BSR set to: 0
  6530                           ;main.c: 316: doModeVerbose();
  6531  003418  EC17  F001         	call	_doModeVerbose	;wreg free
  6532                           
  6533                           ;main.c: 317: }
  6534  00341C  D7E2               	goto	l403
  6535  00341E                     l9402:
  6536                           
  6537                           ; BSR set to: 0
  6538                           ;main.c: 318: else if (1 == mode) {
  6539  00341E  05F8               	decf	_mode& (0+255),w,b
  6540  003420  E103               	bnz	l9406
  6541                           
  6542                           ; BSR set to: 0
  6543                           ;main.c: 319: doModeVscp();
  6544  003422  EC6B  F017         	call	_doModeVscp	;wreg free
  6545                           
  6546                           ;main.c: 320: }
  6547  003426  D7DD               	goto	l403
  6548  003428                     l9406:
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;main.c: 321: else if (2 == mode) {
  6552  003428  51F8               	movf	_mode& (0+255),w,b
  6553  00342A  0A02               	xorlw	2
  6554  00342C  E103               	bnz	l9410
  6555                           
  6556                           ; BSR set to: 0
  6557                           ;main.c: 322: doModeSLCAN();
  6558  00342E  EC7D  F00E         	call	_doModeSLCAN	;wreg free
  6559                           
  6560                           ;main.c: 323: }
  6561  003432  D7D7               	goto	l403
  6562  003434                     l9410:
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;main.c: 324: else if (3 == mode) {
  6566  003434  51F8               	movf	_mode& (0+255),w,b
  6567  003436  0A03               	xorlw	3
  6568  003438  E1EF               	bnz	l9400
  6569                           
  6570                           ; BSR set to: 0
  6571                           ;main.c: 325: doModeVscpNode();
  6572  00343A  EC60  F02A         	call	_doModeVscpNode	;wreg free
  6573                           
  6574                           ;main.c: 326: }
  6575  00343E  D7D1               	goto	l403
  6576  003440                     __end_of_main:
  6577                           	opt stack 0
  6578                           tblptru	equ	0xFF8
  6579                           tblptrh	equ	0xFF7
  6580                           tblptrl	equ	0xFF6
  6581                           tablat	equ	0xFF5
  6582                           prodh	equ	0xFF4
  6583                           prodl	equ	0xFF3
  6584                           intcon	equ	0xFF2
  6585                           indf0	equ	0xFEF
  6586                           postinc0	equ	0xFEE
  6587                           fsr0h	equ	0xFEA
  6588                           fsr0l	equ	0xFE9
  6589                           wreg	equ	0xFE8
  6590                           indf1	equ	0xFE7
  6591                           postinc1	equ	0xFE6
  6592                           postdec1	equ	0xFE5
  6593                           fsr1h	equ	0xFE2
  6594                           fsr1l	equ	0xFE1
  6595                           indf2	equ	0xFDF
  6596                           postinc2	equ	0xFDE
  6597                           postdec2	equ	0xFDD
  6598                           plusw2	equ	0xFDB
  6599                           fsr2h	equ	0xFDA
  6600                           fsr2l	equ	0xFD9
  6601                           status	equ	0xFD8
  6602                           
  6603 ;; *************** function _doModeVscpNode *****************
  6604 ;; Defined at:
  6605 ;;		line 1426 in file "main.c"
  6606 ;; Parameters:    Size  Location     Type
  6607 ;;		None
  6608 ;; Auto vars:     Size  Location     Type
  6609 ;;		None
  6610 ;; Return value:  Size  Location     Type
  6611 ;;		None               void
  6612 ;; Registers used:
  6613 ;;		None
  6614 ;; Tracked objects:
  6615 ;;		On entry : F/0
  6616 ;;		On exit  : F/0
  6617 ;;		Unchanged: F/0
  6618 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6619 ;;      Params:         0       0       0       0       0       0       0
  6620 ;;      Locals:         0       0       0       0       0       0       0
  6621 ;;      Temps:          0       0       0       0       0       0       0
  6622 ;;      Totals:         0       0       0       0       0       0       0
  6623 ;;Total ram usage:        0 bytes
  6624 ;; Hardware stack levels used:    1
  6625 ;; Hardware stack levels required when called:    3
  6626 ;; This function calls:
  6627 ;;		Nothing
  6628 ;; This function is called by:
  6629 ;;		_main
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           	psect	text1
  6634  0054C0                     __ptext1:
  6635                           	opt stack 0
  6636  0054C0                     _doModeVscpNode:
  6637                           	opt stack 27
  6638                           
  6639                           ; BSR set to: 0
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;incstack = 0
  6643                           ;incstack = 0
  6644  0054C0  0012               	return	
  6645  0054C2                     __end_of_doModeVscpNode:
  6646                           	opt stack 0
  6647                           tblptru	equ	0xFF8
  6648                           tblptrh	equ	0xFF7
  6649                           tblptrl	equ	0xFF6
  6650                           tablat	equ	0xFF5
  6651                           prodh	equ	0xFF4
  6652                           prodl	equ	0xFF3
  6653                           intcon	equ	0xFF2
  6654                           indf0	equ	0xFEF
  6655                           postinc0	equ	0xFEE
  6656                           fsr0h	equ	0xFEA
  6657                           fsr0l	equ	0xFE9
  6658                           wreg	equ	0xFE8
  6659                           indf1	equ	0xFE7
  6660                           postinc1	equ	0xFE6
  6661                           postdec1	equ	0xFE5
  6662                           fsr1h	equ	0xFE2
  6663                           fsr1l	equ	0xFE1
  6664                           indf2	equ	0xFDF
  6665                           postinc2	equ	0xFDE
  6666                           postdec2	equ	0xFDD
  6667                           plusw2	equ	0xFDB
  6668                           fsr2h	equ	0xFDA
  6669                           fsr2l	equ	0xFD9
  6670                           status	equ	0xFD8
  6671                           
  6672 ;; *************** function _doModeSLCAN *****************
  6673 ;; Defined at:
  6674 ;;		line 1224 in file "main.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;		None
  6677 ;; Auto vars:     Size  Location     Type
  6678 ;;  id              4   61[BANK0 ] unsigned long 
  6679 ;;  dlc             1   65[BANK0 ] unsigned char 
  6680 ;;  rv              1   67[BANK0 ] enum E15660
  6681 ;;  c               1   66[BANK0 ] unsigned char 
  6682 ;; Return value:  Size  Location     Type
  6683 ;;		None               void
  6684 ;; Registers used:
  6685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6686 ;; Tracked objects:
  6687 ;;		On entry : F/0
  6688 ;;		On exit  : E/0
  6689 ;;		Unchanged: 0/0
  6690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6691 ;;      Params:         0       0       0       0       0       0       0
  6692 ;;      Locals:         0       7       0       0       0       0       0
  6693 ;;      Temps:          0       7       0       0       0       0       0
  6694 ;;      Totals:         0      14       0       0       0       0       0
  6695 ;;Total ram usage:       14 bytes
  6696 ;; Hardware stack levels used:    1
  6697 ;; Hardware stack levels required when called:    7
  6698 ;; This function calls:
  6699 ;;		_putsUSART
  6700 ;;		_fifo_read
  6701 ;;		_writeEEPROM
  6702 ;;		_ECANSetOperationMode
  6703 ;;		_memset
  6704 ;;		_receivePrintEventSLCAN
  6705 ;;		_strlen
  6706 ;;		_hexStringToBytes
  6707 ;;		_memcpy
  6708 ;;		_sendCANFrame
  6709 ;; This function is called by:
  6710 ;;		_main
  6711 ;; This function uses a non-reentrant model
  6712 ;;
  6713                           
  6714                           	psect	text2
  6715  001CFA                     __ptext2:
  6716                           	opt stack 0
  6717  001CFA                     _doModeSLCAN:
  6718                           	opt stack 23
  6719                           
  6720                           ; BSR set to: 0
  6721                           ;main.c: 1225: uint8_t c;
  6722                           ;main.c: 1226: BOOL rv = 0;
  6723                           
  6724                           ; BSR set to: 0
  6725                           ;incstack = 0
  6726                           ;incstack = 0
  6727  001CFA  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  6728                           
  6729                           ; BSR set to: 0
  6730                           ;main.c: 1229: receivePrintEventSLCAN();
  6731  001CFC  ECA7  F016         	call	_receivePrintEventSLCAN	;wreg free
  6732                           
  6733                           ;main.c: 1232: (INTCONbits.GIE = 0);
  6734  001D00  9EF2               	bcf	intcon,7,c	;volatile
  6735                           
  6736                           ;main.c: 1234: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6737  001D02  0100               	movlb	0	; () banked
  6738  001D04  0E00               	movlw	high doModeSLCAN@c
  6739  001D06  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  6740  001D08  0EA2               	movlw	low doModeSLCAN@c
  6741  001D0A  6F60               	movwf	?_fifo_read& (0+255),b
  6742  001D0C  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  6743  001D0E  0E01               	movlw	1
  6744  001D10  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  6745  001D12  0E3E               	movlw	_serialInputFifo& (0+255)
  6746  001D14  EC60  F020         	call	_fifo_read
  6747  001D18  0560               	decf	?_fifo_read& (0+255),w,b
  6748  001D1A  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  6749  001D1C  E001 D19C          	bnz	l10428
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;main.c: 1237: (INTCONbits.GIE = 1);
  6753  001D20  8EF2               	bsf	intcon,7,c	;volatile
  6754                           
  6755                           ; BSR set to: 0
  6756                           ;main.c: 1239: if (0x0d != c) {
  6757  001D22  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  6758  001D24  0A0D               	xorlw	13
  6759  001D26  E101 D14E          	bz	l10416
  6760                           
  6761                           ; BSR set to: 0
  6762                           ;main.c: 1240: cmdbuf[ pos ] = c;
  6763  001D2A  EC27  F018         	call	PL18	;call to abstracted procedure
  6764  001D2E  C0A2  FFDF         	movff	doModeSLCAN@c,indf2
  6765                           
  6766                           ; BSR set to: 0
  6767                           ;main.c: 1241: pos++;
  6768  001D32  2B02               	incf	_pos& (0+255),f,b
  6769  001D34  D192               	goto	l674
  6770  001D36                     l10310:
  6771                           
  6772                           ; BSR set to: 0
  6773                           ;main.c: 1249: if (1 == strlen(cmdbuf)) {
  6774  001D36  0E01               	movlw	high _cmdbuf
  6775  001D38  0100               	movlb	0	; () banked
  6776  001D3A  6F61               	movwf	(?_strlen+1)& (0+255),b
  6777  001D3C  0E04               	movlw	low _cmdbuf
  6778  001D3E  6F60               	movwf	?_strlen& (0+255),b
  6779  001D40  EC8F  F028         	call	_strlen	;wreg free
  6780  001D44  0560               	decf	?_strlen& (0+255),w,b
  6781  001D46  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6782  001D48  E001 D168          	bnz	l10418
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;main.c: 1250: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6786  001D4C  0E7D               	movlw	high STR_124
  6787  001D4E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6788  001D50  0E5B               	movlw	low STR_124
  6789  001D52  6F61               	movwf	?_putsUSART& (0+255),b
  6790  001D54  EC6A  F027         	call	_putsUSART	;wreg free
  6791  001D58                     l10314:
  6792                           
  6793                           ;main.c: 1251: rv = 1;
  6794  001D58  0E01               	movlw	1
  6795  001D5A  0100               	movlb	0	; () banked
  6796  001D5C  D0DE               	goto	L3
  6797  001D5E                     l10316:
  6798                           
  6799                           ; BSR set to: 0
  6800                           ;main.c: 1257: if (1 == strlen(cmdbuf)) {
  6801  001D5E  0E01               	movlw	high _cmdbuf
  6802  001D60  0100               	movlb	0	; () banked
  6803  001D62  6F61               	movwf	(?_strlen+1)& (0+255),b
  6804  001D64  0E04               	movlw	low _cmdbuf
  6805  001D66  6F60               	movwf	?_strlen& (0+255),b
  6806  001D68  EC8F  F028         	call	_strlen	;wreg free
  6807  001D6C  0560               	decf	?_strlen& (0+255),w,b
  6808  001D6E  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6809  001D70  E001 D154          	bnz	l10418
  6810                           
  6811                           ; BSR set to: 0
  6812                           ;main.c: 1258: putsUSART((char *) "V1011\r\n");
  6813  001D74  0E7E               	movlw	high STR_125
  6814  001D76  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6815  001D78  0ED6               	movlw	low STR_125
  6816  001D7A  6F61               	movwf	?_putsUSART& (0+255),b
  6817  001D7C  EC6A  F027         	call	_putsUSART	;wreg free
  6818  001D80  D7EB               	goto	l10314
  6819  001D82                     l10322:
  6820                           
  6821                           ; BSR set to: 0
  6822                           ;main.c: 1265: if (1 == strlen(cmdbuf)) {
  6823  001D82  0E01               	movlw	high _cmdbuf
  6824  001D84  0100               	movlb	0	; () banked
  6825  001D86  6F61               	movwf	(?_strlen+1)& (0+255),b
  6826  001D88  0E04               	movlw	low _cmdbuf
  6827  001D8A  6F60               	movwf	?_strlen& (0+255),b
  6828  001D8C  EC8F  F028         	call	_strlen	;wreg free
  6829  001D90  0560               	decf	?_strlen& (0+255),w,b
  6830  001D92  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6831  001D94  E001 D142          	bnz	l10418
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;main.c: 1266: putsUSART((char *) "N1977\r\n");
  6835  001D98  0E7E               	movlw	high STR_126
  6836  001D9A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  6837  001D9C  0EDE               	movlw	low STR_126
  6838  001D9E  6F61               	movwf	?_putsUSART& (0+255),b
  6839  001DA0  EC6A  F027         	call	_putsUSART	;wreg free
  6840  001DA4  D7D9               	goto	l10314
  6841  001DA6                     l10328:
  6842                           
  6843                           ; BSR set to: 0
  6844                           ;main.c: 1275: bInitiated = 1;
  6845  001DA6  0E01               	movlw	1
  6846  001DA8  6FF6               	movwf	_bInitiated& (0+255),b
  6847                           
  6848                           ;main.c: 1276: rv = 1;
  6849  001DAA  D0B7               	goto	L3
  6850  001DAC                     l684:
  6851                           
  6852                           ; BSR set to: 0
  6853                           ;main.c: 1281: if (!bOpen) {
  6854  001DAC  67F7               	tstfsz	_bOpen& (0+255),b
  6855  001DAE  D003               	goto	l10332
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;main.c: 1282: bInitiated = 1;
  6859  001DB0  0E01               	movlw	1
  6860  001DB2  6FF6               	movwf	_bInitiated& (0+255),b
  6861                           
  6862                           ;main.c: 1283: rv = 1;
  6863  001DB4  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  6864  001DB6                     l10332:
  6865                           
  6866                           ; BSR set to: 0
  6867                           ;main.c: 1288: if (1 == strlen(cmdbuf)) {
  6868  001DB6  0E01               	movlw	high _cmdbuf
  6869  001DB8  0100               	movlb	0	; () banked
  6870  001DBA  6F61               	movwf	(?_strlen+1)& (0+255),b
  6871  001DBC  0E04               	movlw	low _cmdbuf
  6872  001DBE  6F60               	movwf	?_strlen& (0+255),b
  6873  001DC0  EC8F  F028         	call	_strlen	;wreg free
  6874  001DC4  0560               	decf	?_strlen& (0+255),w,b
  6875  001DC6  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6876  001DC8  E001 D128          	bnz	l10418
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;main.c: 1289: if (!bOpen && bInitiated) {
  6880  001DCC  67F7               	tstfsz	_bOpen& (0+255),b
  6881  001DCE  D126               	goto	l10418
  6882                           
  6883                           ; BSR set to: 0
  6884  001DD0  51F6               	movf	_bInitiated& (0+255),w,b
  6885  001DD2  E101 D123          	bz	l10418
  6886                           
  6887                           ; BSR set to: 0
  6888                           ;main.c: 1290: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  6889  001DD6  0E00               	movlw	0
  6890  001DD8  EC1F  F02A         	call	_ECANSetOperationMode
  6891                           
  6892                           ; BSR set to: 0
  6893                           ;main.c: 1291: bOpen = 1;
  6894  001DDC  0E01               	movlw	1
  6895  001DDE  6FF7               	movwf	_bOpen& (0+255),b
  6896  001DE0  D7BB               	goto	l10314
  6897  001DE2                     l10344:
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;main.c: 1299: if (1 == strlen(cmdbuf)) {
  6901  001DE2  0E01               	movlw	high _cmdbuf
  6902  001DE4  0100               	movlb	0	; () banked
  6903  001DE6  6F61               	movwf	(?_strlen+1)& (0+255),b
  6904  001DE8  0E04               	movlw	low _cmdbuf
  6905  001DEA  6F60               	movwf	?_strlen& (0+255),b
  6906  001DEC  EC8F  F028         	call	_strlen	;wreg free
  6907  001DF0  0560               	decf	?_strlen& (0+255),w,b
  6908  001DF2  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  6909  001DF4  E001 D112          	bnz	l10418
  6910                           
  6911                           ; BSR set to: 0
  6912                           ;main.c: 1300: if (bOpen) {
  6913  001DF8  51F7               	movf	_bOpen& (0+255),w,b
  6914  001DFA  E0AE               	bz	l10314
  6915                           
  6916                           ; BSR set to: 0
  6917                           ;main.c: 1301: ECANSetOperationMode(0x20);
  6918  001DFC  0E20               	movlw	32
  6919  001DFE  EC1F  F02A         	call	_ECANSetOperationMode
  6920                           
  6921                           ; BSR set to: 0
  6922                           ;main.c: 1302: bOpen = 0;
  6923  001E02  6BF7               	clrf	_bOpen& (0+255),b
  6924  001E04  D7A9               	goto	l10314
  6925  001E06                     l10354:
  6926                           
  6927                           ; BSR set to: 0
  6928                           ;main.c: 1315: if (bOpen && (strlen(cmdbuf) >= 10)) {
  6929  001E06  51F7               	movf	_bOpen& (0+255),w,b
  6930  001E08  E101 D108          	bz	l10418
  6931                           
  6932                           ; BSR set to: 0
  6933  001E0C  0E01               	movlw	high _cmdbuf
  6934  001E0E  0100               	movlb	0	; () banked
  6935  001E10  6F61               	movwf	(?_strlen+1)& (0+255),b
  6936  001E12  0E04               	movlw	low _cmdbuf
  6937  001E14  6F60               	movwf	?_strlen& (0+255),b
  6938  001E16  EC8F  F028         	call	_strlen	;wreg free
  6939  001E1A  0E0A               	movlw	10
  6940  001E1C  5D60               	subwf	?_strlen& (0+255),w,b
  6941  001E1E  0E00               	movlw	0
  6942  001E20  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  6943  001E22  E201 D0FB          	bnc	l10418
  6944                           
  6945                           ; BSR set to: 0
  6946                           ;main.c: 1317: uint32_t id;
  6947                           ;main.c: 1318: uint8_t dlc;
  6948                           ;main.c: 1320: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  6949  001E26  0E01               	movlw	high _wrkbuf
  6950  001E28  0100               	movlb	0	; () banked
  6951  001E2A  6F65               	movwf	(?_hexStringToBytes+1)& (0+255),b
  6952  001E2C  0E54               	movlw	low _wrkbuf
  6953  001E2E  6F64               	movwf	?_hexStringToBytes& (0+255),b
  6954  001E30  0E50               	movlw	80
  6955  001E32  6F66               	movwf	(?_hexStringToBytes+2)& (0+255),b
  6956  001E34  0E01               	movlw	high _cmdbuf
  6957  001E36  6F68               	movwf	(?_hexStringToBytes+4)& (0+255),b
  6958  001E38  0E04               	movlw	low _cmdbuf
  6959  001E3A  6F67               	movwf	(?_hexStringToBytes+3)& (0+255),b
  6960  001E3C  ECC1  F022         	call	_hexStringToBytes	;wreg free
  6961  001E40  6F96               	movwf	??_doModeSLCAN& (0+255),b
  6962  001E42  0E05               	movlw	5
  6963  001E44  5D96               	subwf	??_doModeSLCAN& (0+255),w,b
  6964  001E46  E201 D0E9          	bnc	l10418
  6965                           
  6966                           ; BSR set to: 0
  6967                           ;main.c: 1322: }
  6968                           ;main.c: 1324: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  6969  001E4A  C157  F096         	movff	_wrkbuf+3,??_doModeSLCAN
  6970  001E4E  0E08               	movlw	8
  6971  001E50  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  6972  001E52  C156  F097         	movff	_wrkbuf+2,??_doModeSLCAN+1
  6973  001E56  0E10               	movlw	16
  6974  001E58  2797               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  6975  001E5A  C155  F098         	movff	_wrkbuf+1,??_doModeSLCAN+2
  6976  001E5E  0E18               	movlw	24
  6977  001E60  2798               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  6978  001E62  C154  F099         	movff	_wrkbuf,??_doModeSLCAN+3
  6979  001E66  0100               	movlb	0	; () banked
  6980  001E68  6B9A               	clrf	(??_doModeSLCAN+4)& (0+255),b
  6981  001E6A  6B9B               	clrf	(??_doModeSLCAN+5)& (0+255),b
  6982  001E6C  6B9C               	clrf	(??_doModeSLCAN+6)& (0+255),b
  6983  001E6E  2B98               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  6984  001E70  D001               	goto	u12920
  6985  001E72                     u12925:
  6986  001E72  D8F4               	call	PL84	;call to abstracted procedure
  6987  001E74                     u12920:
  6988  001E74  2F98               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  6989  001E76  D7FD               	goto	u12925
  6990  001E78  2B97               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  6991  001E7A  D001               	goto	u12930
  6992  001E7C                     u12935:
  6993  001E7C  D8EF               	call	PL84	;call to abstracted procedure
  6994  001E7E                     u12930:
  6995  001E7E  2F97               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  6996  001E80  D7FD               	goto	u12935
  6997  001E82  2B96               	incf	??_doModeSLCAN& (0+255),f,b
  6998  001E84  D001               	goto	u12940
  6999  001E86                     u12945:
  7000  001E86  D8EA               	call	PL84	;call to abstracted procedure
  7001  001E88                     u12940:
  7002  001E88  2F96               	decfsz	??_doModeSLCAN& (0+255),f,b
  7003  001E8A  D7FD               	goto	u12945
  7004  001E8C  C09C  F0A0         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7005  001E90  C09B  F09F         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7006  001E94  C09A  F09E         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7007  001E98  C099  F09D         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7008                           
  7009                           ; BSR set to: 0
  7010                           ;main.c: 1325: dlc = vscpData[4];
  7011  001E9C  C1A8  F0A1         	movff	_vscpData+4,doModeSLCAN@dlc
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;main.c: 1328: if (dlc > 8) break;
  7015  001EA0  0E08               	movlw	8
  7016  001EA2  65A1               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7017  001EA4  D001               	goto	l10370
  7018  001EA6  D0BA               	goto	l10418
  7019  001EA8                     l10370:
  7020                           
  7021                           ; BSR set to: 0
  7022                           ;main.c: 1329: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7023  001EA8  90D8               	bcf	status,0,c
  7024  001EAA  35A1               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7025  001EAC  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7026  001EAE  6B97               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7027  001EB0  3797               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7028  001EB2  0E0A               	movlw	10
  7029  001EB4  2796               	addwf	??_doModeSLCAN& (0+255),f,b
  7030  001EB6  0E00               	movlw	0
  7031  001EB8  2397               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7032  001EBA  0E01               	movlw	high _cmdbuf
  7033  001EBC  0100               	movlb	0	; () banked
  7034  001EBE  6F61               	movwf	(?_strlen+1)& (0+255),b
  7035  001EC0  0E04               	movlw	low _cmdbuf
  7036  001EC2  6F60               	movwf	?_strlen& (0+255),b
  7037  001EC4  EC8F  F028         	call	_strlen	;wreg free
  7038  001EC8  5196               	movf	??_doModeSLCAN& (0+255),w,b
  7039  001ECA  5D60               	subwf	?_strlen& (0+255),w,b
  7040  001ECC  5197               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7041  001ECE  5961               	subwfb	(?_strlen+1)& (0+255),w,b
  7042  001ED0  E201 D0A4          	bnc	l10418
  7043                           
  7044                           ; BSR set to: 0
  7045                           ;main.c: 1331: memcpy(vscpData, vscpData + 5, dlc);
  7046  001ED4  0E01               	movlw	high _vscpData
  7047  001ED6  0100               	movlb	0	; () banked
  7048  001ED8  6F61               	movwf	(?_memcpy+1)& (0+255),b
  7049  001EDA  0EA4               	movlw	low _vscpData
  7050  001EDC  6F60               	movwf	?_memcpy& (0+255),b
  7051  001EDE  0EA9               	movlw	low (_vscpData+5)
  7052  001EE0  6F96               	movwf	??_doModeSLCAN& (0+255),b
  7053  001EE2  0E01               	movlw	high (_vscpData+5)
  7054  001EE4  6F97               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7055  001EE6  C096  F062         	movff	??_doModeSLCAN,?_memcpy+2
  7056  001EEA  C097  F063         	movff	??_doModeSLCAN+1,?_memcpy+3
  7057  001EEE  C0A1  F064         	movff	doModeSLCAN@dlc,?_memcpy+4
  7058  001EF2  6B65               	clrf	(?_memcpy+5)& (0+255),b
  7059  001EF4  EC6E  F028         	call	_memcpy	;wreg free
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;main.c: 1333: rv = sendCANFrame(id, dlc, vscpData);
  7063  001EF8  C09D  F08F         	movff	doModeSLCAN@id,?_sendCANFrame
  7064  001EFC  C09E  F090         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7065  001F00  C09F  F091         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7066  001F04  C0A0  F092         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7067  001F08  C0A1  F093         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7068  001F0C  0E01               	movlw	high _vscpData
  7069  001F0E  0100               	movlb	0	; () banked
  7070  001F10  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  7071  001F12  0EA4               	movlw	low _vscpData
  7072  001F14  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  7073  001F16  EC2C  F029         	call	_sendCANFrame	;wreg free
  7074  001F1A                     L3:
  7075  001F1A  6FA3               	movwf	doModeSLCAN@rv& (0+255),b
  7076  001F1C  D07F               	goto	l10418
  7077  001F1E                     l10378:
  7078                           
  7079                           ; BSR set to: 0
  7080                           ;main.c: 1348: if (bOpen && (strlen(cmdbuf) == 1)) {
  7081  001F1E  51F7               	movf	_bOpen& (0+255),w,b
  7082  001F20  E07D               	bz	l10418
  7083                           
  7084                           ; BSR set to: 0
  7085  001F22  0E01               	movlw	high _cmdbuf
  7086  001F24  0100               	movlb	0	; () banked
  7087  001F26  6F61               	movwf	(?_strlen+1)& (0+255),b
  7088  001F28  0E04               	movlw	low _cmdbuf
  7089  001F2A  6F60               	movwf	?_strlen& (0+255),b
  7090  001F2C  EC8F  F028         	call	_strlen	;wreg free
  7091  001F30  0560               	decf	?_strlen& (0+255),w,b
  7092  001F32  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7093  001F34  E173               	bnz	l10418
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;main.c: 1349: putsUSART((char *) "F00\r\n");
  7097  001F36  0E7F               	movlw	high STR_127
  7098  001F38  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7099  001F3A  0E7A               	movlw	low STR_127
  7100  001F3C  6F61               	movwf	?_putsUSART& (0+255),b
  7101  001F3E  EC6A  F027         	call	_putsUSART	;wreg free
  7102  001F42  D06C               	goto	l10418
  7103  001F44                     l10388:
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;main.c: 1365: if (2 == strlen(cmdbuf)) {
  7107  001F44  0E01               	movlw	high _cmdbuf
  7108  001F46  0100               	movlb	0	; () banked
  7109  001F48  6F61               	movwf	(?_strlen+1)& (0+255),b
  7110  001F4A  0E04               	movlw	low _cmdbuf
  7111  001F4C  6F60               	movwf	?_strlen& (0+255),b
  7112  001F4E  EC8F  F028         	call	_strlen	;wreg free
  7113  001F52  5160               	movf	?_strlen& (0+255),w,b
  7114  001F54  0A02               	xorlw	2
  7115  001F56  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7116  001F58  E161               	bnz	l10418
  7117                           
  7118                           ; BSR set to: 0
  7119                           ;main.c: 1366: if (!bOpen) {
  7120  001F5A  67F7               	tstfsz	_bOpen& (0+255),b
  7121  001F5C  D05F               	goto	l10418
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;main.c: 1367: if ('0' == cmdbuf[1]) {
  7125  001F5E  0101               	movlb	1	; () banked
  7126  001F60  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7127  001F62  0A30               	xorlw	48
  7128  001F64  E10A               	bnz	l10400
  7129                           
  7130                           ; BSR set to: 1
  7131                           ;main.c: 1368: nTimeStamp = 0;
  7132  001F66  0100               	movlb	0	; () banked
  7133  001F68  6BF9               	clrf	_nTimeStamp& (0+255),b
  7134                           
  7135                           ; BSR set to: 0
  7136                           ;main.c: 1370: writeEEPROM(0x05, 0);
  7137  001F6A  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7138  001F6C  0E05               	movlw	5
  7139  001F6E  6F60               	movwf	?_writeEEPROM& (0+255),b
  7140  001F70  0E00               	movlw	0
  7141  001F72  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
  7142  001F74  ECDE  F029         	call	_writeEEPROM	;wreg free
  7143  001F78  D6EF               	goto	l10314
  7144  001F7A                     l10400:
  7145                           
  7146                           ; BSR set to: 1
  7147  001F7A  5105               	movf	(_cmdbuf+1)& (0+255),w,b
  7148  001F7C  0A31               	xorlw	49
  7149  001F7E  E10B               	bnz	l709
  7150                           
  7151                           ; BSR set to: 1
  7152                           ;main.c: 1373: nTimeStamp = 1;
  7153  001F80  0E01               	movlw	1
  7154  001F82  0100               	movlb	0	; () banked
  7155  001F84  6FF9               	movwf	_nTimeStamp& (0+255),b
  7156                           
  7157                           ; BSR set to: 0
  7158                           ;main.c: 1375: writeEEPROM(0x05,
  7159                           ;main.c: 1376: 1);
  7160  001F86  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7161  001F88  0E05               	movlw	5
  7162  001F8A  6F60               	movwf	?_writeEEPROM& (0+255),b
  7163  001F8C  0E01               	movlw	1
  7164  001F8E  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
  7165  001F90  ECDE  F029         	call	_writeEEPROM	;wreg free
  7166  001F94  D6E1               	goto	l10314
  7167  001F96                     l709:
  7168                           
  7169                           ; BSR set to: 1
  7170                           ;main.c: 1379: rv = 0;
  7171  001F96  0100               	movlb	0	; () banked
  7172  001F98  6BA3               	clrf	doModeSLCAN@rv& (0+255),b
  7173  001F9A  D040               	goto	l10418
  7174  001F9C                     l10408:
  7175                           
  7176                           ; BSR set to: 0
  7177                           ;main.c: 1387: writeEEPROM(0x01, 0xFF);
  7178  001F9C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
  7179  001F9E  0E01               	movlw	1
  7180  001FA0  6F60               	movwf	?_writeEEPROM& (0+255),b
  7181  001FA2  0EFF               	movlw	255
  7182  001FA4  6962               	setf	(?_writeEEPROM+2)& (0+255),b
  7183  001FA6  ECDE  F029         	call	_writeEEPROM	;wreg free
  7184  001FAA  00FF               	reset		;# 
  7185                           
  7186                           ;main.c: 1389: break;
  7187  001FAC  D037               	goto	l10418
  7188  001FAE                     l10410:
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;main.c: 1392: {
  7192                           ;main.c: 1394: if (0 == strlen(cmdbuf)) {
  7193  001FAE  0E01               	movlw	high _cmdbuf
  7194  001FB0  0100               	movlb	0	; () banked
  7195  001FB2  6F61               	movwf	(?_strlen+1)& (0+255),b
  7196  001FB4  0E04               	movlw	low _cmdbuf
  7197  001FB6  6F60               	movwf	?_strlen& (0+255),b
  7198  001FB8  EC8F  F028         	call	_strlen	;wreg free
  7199  001FBC  5161               	movf	(?_strlen+1)& (0+255),w,b
  7200  001FBE  1160               	iorwf	?_strlen& (0+255),w,b
  7201  001FC0  E101 D6CA          	bz	l10314
  7202  001FC4  D02B               	goto	l10418
  7203  001FC6                     l10416:
  7204                           
  7205                           ; BSR set to: 0
  7206  001FC6  51A2               	movf	doModeSLCAN@c& (0+255),w,b
  7207                           
  7208                           ; Switch size 1, requested type "space"
  7209                           ; Number of cases is 16, Range of values is 66 to 116
  7210                           ; switch strategies available:
  7211                           ; Name         Instructions Cycles
  7212                           ; simple_byte           49    25 (average)
  7213                           ;	Chosen strategy is simple_byte
  7214  001FC8  0A42               	xorlw	66	; case 66
  7215  001FCA  E0E8               	bz	l10408
  7216  001FCC  0A01               	xorlw	1	; case 67
  7217  001FCE  E101 D708          	bz	l10344
  7218  001FD2  0A05               	xorlw	5	; case 70
  7219  001FD4  E0A4               	bz	l10378
  7220  001FD6  0A0C               	xorlw	12	; case 74
  7221  001FD8  E101 D6AD          	bz	l10310
  7222  001FDC  0A07               	xorlw	7	; case 77
  7223  001FDE  E101 D6BB          	bz	l10314
  7224  001FE2  0A03               	xorlw	3	; case 78
  7225  001FE4  E101 D6CD          	bz	l10322
  7226  001FE8  0A01               	xorlw	1	; case 79
  7227  001FEA  E101 D6E4          	bz	l10332
  7228  001FEE  0A1D               	xorlw	29	; case 82
  7229  001FF0  E015               	bz	l10418
  7230  001FF2  0A01               	xorlw	1	; case 83
  7231  001FF4  E101 D6D7          	bz	l10328
  7232  001FF8  0A07               	xorlw	7	; case 84
  7233  001FFA  E101 D704          	bz	l10354
  7234  001FFE  0A02               	xorlw	2	; case 86
  7235  002000  E101 D6AD          	bz	l10316
  7236  002004  0A0C               	xorlw	12	; case 90
  7237  002006  E09E               	bz	l10388
  7238  002008  0A37               	xorlw	55	; case 109
  7239  00200A  E101 D6A5          	bz	l10314
  7240  00200E  0A1F               	xorlw	31	; case 114
  7241  002010  E005               	bz	l10418
  7242  002012  0A01               	xorlw	1	; case 115
  7243  002014  E101 D6CA          	bz	l684
  7244  002018  0A07               	xorlw	7	; case 116
  7245  00201A  E1C9               	bnz	l10410
  7246  00201C                     l10418:
  7247                           
  7248                           ;main.c: 1402: if (rv) {
  7249  00201C  0100               	movlb	0	; () banked
  7250  00201E  51A3               	movf	doModeSLCAN@rv& (0+255),w,b
  7251  002020  E007               	bz	l10422
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;main.c: 1404: putsUSART((char *) "\r");
  7255  002022  0E7F               	movlw	high STR_128
  7256  002024  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7257  002026  0EF3               	movlw	low STR_128
  7258  002028  6F61               	movwf	?_putsUSART& (0+255),b
  7259  00202A  EC6A  F027         	call	_putsUSART	;wreg free
  7260                           
  7261                           ;main.c: 1405: }
  7262  00202E  D006               	goto	l10424
  7263  002030                     l10422:
  7264                           
  7265                           ; BSR set to: 0
  7266                           ;main.c: 1406: else {
  7267                           ;main.c: 1408: putsUSART((char *) "\a");
  7268  002030  0E7F               	movlw	high STR_129
  7269  002032  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7270  002034  0EF1               	movlw	low STR_129
  7271  002036  6F61               	movwf	?_putsUSART& (0+255),b
  7272  002038  EC6A  F027         	call	_putsUSART	;wreg free
  7273  00203C                     l10424:
  7274                           
  7275                           ;main.c: 1409: }
  7276                           ;main.c: 1412: memset(cmdbuf, 0, sizeof ( cmdbuf));
  7277  00203C  0E01               	movlw	high _cmdbuf
  7278  00203E  0100               	movlb	0	; () banked
  7279  002040  6F61               	movwf	(?_memset+1)& (0+255),b
  7280  002042  0E04               	movlw	low _cmdbuf
  7281  002044  6F60               	movwf	?_memset& (0+255),b
  7282  002046  6B63               	clrf	(?_memset+3)& (0+255),b
  7283  002048  6B62               	clrf	(?_memset+2)& (0+255),b
  7284  00204A  6B65               	clrf	(?_memset+5)& (0+255),b
  7285  00204C  0E50               	movlw	80
  7286  00204E  6F64               	movwf	(?_memset+4)& (0+255),b
  7287  002050  ECC7  F029         	call	_memset	;wreg free
  7288                           
  7289                           ; BSR set to: 0
  7290                           ;main.c: 1413: pos = 0;
  7291  002054  0101               	movlb	1	; () banked
  7292  002056  6B02               	clrf	_pos& (0+255),b
  7293  002058                     l10428:
  7294                           
  7295                           ;main.c: 1415: }
  7296                           ;main.c: 1418: (INTCONbits.GIE = 1);
  7297  002058  8EF2               	bsf	intcon,7,c	;volatile
  7298  00205A                     l674:
  7299  00205A  0012               	return	
  7300  00205C                     __end_of_doModeSLCAN:
  7301                           	opt stack 0
  7302  00205C                     PL84:
  7303                           	opt stack 23
  7304  00205C  90D8               	bcf	status,0,c
  7305  00205E  3799               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7306  002060  379A               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7307  002062  379B               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7308  002064  379C               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7309  002066  0012               	return	
  7310  002068                     __end_ofPL84:
  7311                           	opt stack 0
  7312                           tblptru	equ	0xFF8
  7313                           tblptrh	equ	0xFF7
  7314                           tblptrl	equ	0xFF6
  7315                           tablat	equ	0xFF5
  7316                           prodh	equ	0xFF4
  7317                           prodl	equ	0xFF3
  7318                           intcon	equ	0xFF2
  7319                           indf0	equ	0xFEF
  7320                           postinc0	equ	0xFEE
  7321                           fsr0h	equ	0xFEA
  7322                           fsr0l	equ	0xFE9
  7323                           wreg	equ	0xFE8
  7324                           indf1	equ	0xFE7
  7325                           postinc1	equ	0xFE6
  7326                           postdec1	equ	0xFE5
  7327                           fsr1h	equ	0xFE2
  7328                           fsr1l	equ	0xFE1
  7329                           indf2	equ	0xFDF
  7330                           postinc2	equ	0xFDE
  7331                           postdec2	equ	0xFDD
  7332                           plusw2	equ	0xFDB
  7333                           fsr2h	equ	0xFDA
  7334                           fsr2l	equ	0xFD9
  7335                           status	equ	0xFD8
  7336                           
  7337 ;; *************** function _hexStringToBytes *****************
  7338 ;; Defined at:
  7339 ;;		line 31 in file "hexutils.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;  buf             2    4[BANK0 ] PTR unsigned char 
  7342 ;;		 -> wrkbuf(80), 
  7343 ;;  size            1    6[BANK0 ] unsigned char 
  7344 ;;  inhex           2    7[BANK0 ] PTR unsigned char 
  7345 ;;		 -> cmdbuf(80), 
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;  i               2   16[BANK0 ] int 
  7348 ;;  p               2   14[BANK0 ] PTR unsigned char 
  7349 ;;		 -> cmdbuf(80), 
  7350 ;;  len             2   12[BANK0 ] int 
  7351 ;; Return value:  Size  Location     Type
  7352 ;;                  1    wreg      unsigned char 
  7353 ;; Registers used:
  7354 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7355 ;; Tracked objects:
  7356 ;;		On entry : F/0
  7357 ;;		On exit  : F/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7360 ;;      Params:         0       5       0       0       0       0       0
  7361 ;;      Locals:         0       6       0       0       0       0       0
  7362 ;;      Temps:          0       3       0       0       0       0       0
  7363 ;;      Totals:         0      14       0       0       0       0       0
  7364 ;;Total ram usage:       14 bytes
  7365 ;; Hardware stack levels used:    1
  7366 ;; Hardware stack levels required when called:    4
  7367 ;; This function calls:
  7368 ;;		_strlen
  7369 ;;		_nibbleFromChar
  7370 ;; This function is called by:
  7371 ;;		_doModeSLCAN
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           	psect	text3
  7376  004582                     __ptext3:
  7377                           	opt stack 0
  7378  004582                     _hexStringToBytes:
  7379                           	opt stack 25
  7380                           
  7381                           ; BSR set to: 0
  7382                           ;hexutils.c: 32: uint8_t *p;
  7383                           ;hexutils.c: 33: int len, i;
  7384                           ;hexutils.c: 35: len = strlen(inhex) / 2;
  7385                           
  7386                           ;incstack = 0
  7387                           ;incstack = 0
  7388  004582  C067  F060         	movff	hexStringToBytes@inhex,?_strlen
  7389  004586  C068  F061         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7390  00458A  EC8F  F028         	call	_strlen	;wreg free
  7391  00458E  90D8               	bcf	status,0,c
  7392  004590  3161               	rrcf	(?_strlen+1)& (0+255),w,b
  7393  004592  6F6D               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7394  004594  3160               	rrcf	?_strlen& (0+255),w,b
  7395  004596  6F6C               	movwf	hexStringToBytes@len& (0+255),b
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;hexutils.c: 36: if ( len > size ) return 0;
  7399  004598  5166               	movf	hexStringToBytes@size& (0+255),w,b
  7400  00459A  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7401  00459C  6B6A               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7402  00459E  516A               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7403  0045A0  0A80               	xorlw	128
  7404  0045A2  6F6B               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7405  0045A4  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7406  0045A6  5D69               	subwf	??_hexStringToBytes& (0+255),w,b
  7407  0045A8  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7408  0045AA  0A80               	xorlw	128
  7409  0045AC  596B               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7410  0045AE  E202               	bc	l1497
  7411                           
  7412                           ; BSR set to: 0
  7413  0045B0  0E00               	movlw	0
  7414  0045B2  D033               	goto	l1498
  7415  0045B4                     l1497:
  7416                           
  7417                           ; BSR set to: 0
  7418                           ;hexutils.c: 37: for (i=0, p = (uint8_t *)inhex; i<len; i++) {
  7419  0045B4  6B70               	clrf	hexStringToBytes@i& (0+255),b
  7420  0045B6  6B71               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7421  0045B8  C067  F06E         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7422  0045BC  C068  F06F         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7423  0045C0  D022               	goto	l11884
  7424  0045C2                     l11878:
  7425                           
  7426                           ; BSR set to: 0
  7427                           ;hexutils.c: 38: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p+1));
  7428  0045C2  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7429  0045C4  2564               	addwf	hexStringToBytes@buf& (0+255),w,b
  7430  0045C6  6ED9               	movwf	fsr2l,c
  7431  0045C8  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7432  0045CA  2165               	addwfc	(hexStringToBytes@buf+1)& (0+255),w,b
  7433  0045CC  6EDA               	movwf	fsr2h,c
  7434  0045CE  EE10 F001          	lfsr	1,1
  7435  0045D2  516E               	movf	hexStringToBytes@p& (0+255),w,b
  7436  0045D4  26E1               	addwf	fsr1l,f,c
  7437  0045D6  516F               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7438  0045D8  22E2               	addwfc	fsr1h,f,c
  7439  0045DA  50E7               	movf	indf1,w,c
  7440  0045DC  ECCF  F028         	call	_nibbleFromChar
  7441  0045E0  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7442  0045E2  C06E  FFE1         	movff	hexStringToBytes@p,fsr1l
  7443  0045E6  C06F  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7444  0045EA  50E7               	movf	indf1,w,c
  7445  0045EC  ECCF  F028         	call	_nibbleFromChar
  7446  0045F0  6F6A               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7447  0045F2  396A               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7448  0045F4  0BF0               	andlw	240
  7449  0045F6  1169               	iorwf	??_hexStringToBytes& (0+255),w,b
  7450  0045F8  6EDF               	movwf	indf2,c
  7451                           
  7452                           ; BSR set to: 0
  7453                           ;hexutils.c: 39: p += 2;
  7454  0045FA  0E02               	movlw	2
  7455  0045FC  276E               	addwf	hexStringToBytes@p& (0+255),f,b
  7456  0045FE  0E00               	movlw	0
  7457  004600  236F               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7458                           
  7459                           ; BSR set to: 0
  7460  004602  4B70               	infsnz	hexStringToBytes@i& (0+255),f,b
  7461  004604  2B71               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7462  004606                     l11884:
  7463                           
  7464                           ; BSR set to: 0
  7465  004606  5171               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7466  004608  0A80               	xorlw	128
  7467  00460A  6F69               	movwf	??_hexStringToBytes& (0+255),b
  7468  00460C  516C               	movf	hexStringToBytes@len& (0+255),w,b
  7469  00460E  5D70               	subwf	hexStringToBytes@i& (0+255),w,b
  7470  004610  516D               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7471  004612  0A80               	xorlw	128
  7472  004614  5969               	subwfb	??_hexStringToBytes& (0+255),w,b
  7473  004616  E3D5               	bnc	l11878
  7474                           
  7475                           ; BSR set to: 0
  7476                           ;hexutils.c: 40: }
  7477                           ;hexutils.c: 42: return i;
  7478  004618  5170               	movf	hexStringToBytes@i& (0+255),w,b
  7479  00461A                     l1498:
  7480                           
  7481                           ; BSR set to: 0
  7482  00461A  0012               	return	
  7483  00461C                     __end_of_hexStringToBytes:
  7484                           	opt stack 0
  7485                           tblptru	equ	0xFF8
  7486                           tblptrh	equ	0xFF7
  7487                           tblptrl	equ	0xFF6
  7488                           tablat	equ	0xFF5
  7489                           prodh	equ	0xFF4
  7490                           prodl	equ	0xFF3
  7491                           intcon	equ	0xFF2
  7492                           indf0	equ	0xFEF
  7493                           postinc0	equ	0xFEE
  7494                           fsr0h	equ	0xFEA
  7495                           fsr0l	equ	0xFE9
  7496                           wreg	equ	0xFE8
  7497                           indf1	equ	0xFE7
  7498                           postinc1	equ	0xFE6
  7499                           postdec1	equ	0xFE5
  7500                           fsr1h	equ	0xFE2
  7501                           fsr1l	equ	0xFE1
  7502                           indf2	equ	0xFDF
  7503                           postinc2	equ	0xFDE
  7504                           postdec2	equ	0xFDD
  7505                           plusw2	equ	0xFDB
  7506                           fsr2h	equ	0xFDA
  7507                           fsr2l	equ	0xFD9
  7508                           status	equ	0xFD8
  7509                           
  7510 ;; *************** function _nibbleFromChar *****************
  7511 ;; Defined at:
  7512 ;;		line 16 in file "hexutils.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  c               1    wreg     unsigned char 
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;  c               1    0[BANK0 ] unsigned char 
  7517 ;; Return value:  Size  Location     Type
  7518 ;;                  1    wreg      unsigned char 
  7519 ;; Registers used:
  7520 ;;		wreg, status,2, status,0
  7521 ;; Tracked objects:
  7522 ;;		On entry : F/0
  7523 ;;		On exit  : F/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7526 ;;      Params:         0       0       0       0       0       0       0
  7527 ;;      Locals:         0       1       0       0       0       0       0
  7528 ;;      Temps:          0       0       0       0       0       0       0
  7529 ;;      Totals:         0       1       0       0       0       0       0
  7530 ;;Total ram usage:        1 bytes
  7531 ;; Hardware stack levels used:    1
  7532 ;; Hardware stack levels required when called:    3
  7533 ;; This function calls:
  7534 ;;		Nothing
  7535 ;; This function is called by:
  7536 ;;		_hexStringToBytes
  7537 ;; This function uses a non-reentrant model
  7538 ;;
  7539                           
  7540                           	psect	text4
  7541  00519E                     __ptext4:
  7542                           	opt stack 0
  7543  00519E                     _nibbleFromChar:
  7544                           	opt stack 25
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;incstack = 0
  7548                           ;incstack = 0
  7549                           ;nibbleFromChar@c stored from wreg
  7550  00519E  CFE8 F060          	movff	wreg,nibbleFromChar@c
  7551                           
  7552                           ; BSR set to: 0
  7553                           ;hexutils.c: 17: if(c >= '0' && c <= '9') return c - '0';
  7554  0051A2  0E2F               	movlw	47
  7555  0051A4  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7556  0051A6  D006               	goto	l12140
  7557                           
  7558                           ; BSR set to: 0
  7559  0051A8  0E3A               	movlw	58
  7560  0051AA  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7561  0051AC  D003               	goto	l12140
  7562                           
  7563                           ; BSR set to: 0
  7564  0051AE  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7565  0051B0  0FD0               	addlw	208
  7566  0051B2  D013               	goto	l1492
  7567  0051B4                     l12140:
  7568                           
  7569                           ; BSR set to: 0
  7570                           ;hexutils.c: 18: if(c >= 'a' && c <= 'f') return c - 'a' + 10;
  7571  0051B4  0E60               	movlw	96
  7572  0051B6  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7573  0051B8  D006               	goto	l12148
  7574                           
  7575                           ; BSR set to: 0
  7576  0051BA  0E67               	movlw	103
  7577  0051BC  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7578  0051BE  D003               	goto	l12148
  7579                           
  7580                           ; BSR set to: 0
  7581  0051C0  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7582  0051C2  0FA9               	addlw	169
  7583  0051C4  D00A               	goto	l1492
  7584  0051C6                     l12148:
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;hexutils.c: 19: if(c >= 'A' && c <= 'F') return c - 'A' + 10;
  7588  0051C6  0E40               	movlw	64
  7589  0051C8  6560               	cpfsgt	nibbleFromChar@c& (0+255),b
  7590  0051CA  D006               	goto	l12156
  7591                           
  7592                           ; BSR set to: 0
  7593  0051CC  0E47               	movlw	71
  7594  0051CE  6160               	cpfslt	nibbleFromChar@c& (0+255),b
  7595  0051D0  D003               	goto	l12156
  7596                           
  7597                           ; BSR set to: 0
  7598  0051D2  5160               	movf	nibbleFromChar@c& (0+255),w,b
  7599  0051D4  0FC9               	addlw	201
  7600  0051D6  D001               	goto	l1492
  7601  0051D8                     l12156:
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;hexutils.c: 20: return 255;
  7605  0051D8  0EFF               	movlw	255
  7606  0051DA                     l1492:
  7607                           
  7608                           ; BSR set to: 0
  7609  0051DA  0012               	return	
  7610  0051DC                     __end_of_nibbleFromChar:
  7611                           	opt stack 0
  7612                           tblptru	equ	0xFF8
  7613                           tblptrh	equ	0xFF7
  7614                           tblptrl	equ	0xFF6
  7615                           tablat	equ	0xFF5
  7616                           prodh	equ	0xFF4
  7617                           prodl	equ	0xFF3
  7618                           intcon	equ	0xFF2
  7619                           indf0	equ	0xFEF
  7620                           postinc0	equ	0xFEE
  7621                           fsr0h	equ	0xFEA
  7622                           fsr0l	equ	0xFE9
  7623                           wreg	equ	0xFE8
  7624                           indf1	equ	0xFE7
  7625                           postinc1	equ	0xFE6
  7626                           postdec1	equ	0xFE5
  7627                           fsr1h	equ	0xFE2
  7628                           fsr1l	equ	0xFE1
  7629                           indf2	equ	0xFDF
  7630                           postinc2	equ	0xFDE
  7631                           postdec2	equ	0xFDD
  7632                           plusw2	equ	0xFDB
  7633                           fsr2h	equ	0xFDA
  7634                           fsr2l	equ	0xFD9
  7635                           status	equ	0xFD8
  7636                           
  7637 ;; *************** function _receivePrintEventSLCAN *****************
  7638 ;; Defined at:
  7639 ;;		line 1862 in file "main.c"
  7640 ;; Parameters:    Size  Location     Type
  7641 ;;		None
  7642 ;; Auto vars:     Size  Location     Type
  7643 ;;  id              4   38[BANK0 ] unsigned long 
  7644 ;;  i               2   43[BANK0 ] int 
  7645 ;;  dlc             1   42[BANK0 ] unsigned char 
  7646 ;; Return value:  Size  Location     Type
  7647 ;;                  1    wreg      enum E15660
  7648 ;; Registers used:
  7649 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  7650 ;; Tracked objects:
  7651 ;;		On entry : F/0
  7652 ;;		On exit  : 0/0
  7653 ;;		Unchanged: 0/0
  7654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7655 ;;      Params:         0       0       0       0       0       0       0
  7656 ;;      Locals:         0       7       0       0       0       0       0
  7657 ;;      Temps:          0       3       0       0       0       0       0
  7658 ;;      Totals:         0      10       0       0       0       0       0
  7659 ;;Total ram usage:       10 bytes
  7660 ;; Hardware stack levels used:    1
  7661 ;; Hardware stack levels required when called:    6
  7662 ;; This function calls:
  7663 ;;		_putsUSART
  7664 ;;		_WriteUSART
  7665 ;;		_strlen
  7666 ;;		_getCANFrame
  7667 ;;		_ultoa
  7668 ;;		_itoa
  7669 ;; This function is called by:
  7670 ;;		_doModeSLCAN
  7671 ;; This function uses a non-reentrant model
  7672 ;;
  7673                           
  7674                           	psect	text5
  7675  002D4E                     __ptext5:
  7676                           	opt stack 0
  7677  002D4E                     _receivePrintEventSLCAN:
  7678                           	opt stack 23
  7679                           
  7680                           ; BSR set to: 0
  7681                           ;main.c: 1863: int i;
  7682                           ;main.c: 1864: uint8_t dlc;
  7683                           ;main.c: 1865: uint32_t id;
  7684                           ;main.c: 1867: if (getCANFrame(&id, &dlc, vscpData)) {
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;incstack = 0
  7688                           ;incstack = 0
  7689  002D4E  0E00               	movlw	high receivePrintEventSLCAN@dlc
  7690  002D50  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
  7691  002D52  0E8A               	movlw	low receivePrintEventSLCAN@dlc
  7692  002D54  6F6D               	movwf	?_getCANFrame& (0+255),b
  7693  002D56  0E01               	movlw	high _vscpData
  7694  002D58  0100               	movlb	0	; () banked
  7695  002D5A  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
  7696  002D5C  0EA4               	movlw	low _vscpData
  7697  002D5E  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
  7698  002D60  0E86               	movlw	receivePrintEventSLCAN@id& (0+255)
  7699  002D62  ECDB  F025         	call	_getCANFrame
  7700  002D66  0900               	iorlw	0
  7701  002D68  E101 D0AD          	bz	l964
  7702                           
  7703                           ; BSR set to: 0
  7704                           ;main.c: 1870: cntRxFrames++;
  7705  002D6C  2BDD               	incf	_cntRxFrames& (0+255),f,b
  7706  002D6E  0E00               	movlw	0
  7707  002D70  23DE               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7708  002D72  23DF               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7709  002D74  23E0               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7710                           
  7711                           ;main.c: 1871: cntRxBytes += dlc;
  7712  002D76  518A               	movf	receivePrintEventSLCAN@dlc& (0+255),w,b
  7713  002D78  27D9               	addwf	_cntRxBytes& (0+255),f,b
  7714  002D7A  0E00               	movlw	0
  7715  002D7C  23DA               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7716  002D7E  23DB               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7717  002D80  23DC               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7718  002D82                     l937:
  7719                           
  7720                           ; BSR set to: 0
  7721  002D82  A2AC               	btfss	4012,1,c	;volatile
  7722  002D84  D7FE               	goto	l937
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;main.c: 1874: WriteUSART('T');
  7726  002D86  0E54               	movlw	84
  7727  002D88  EC37  F02A         	call	_WriteUSART
  7728                           
  7729                           ;main.c: 1876: ultoa(wrkbuf, id, 16);
  7730  002D8C  0E01               	movlw	high _wrkbuf
  7731  002D8E  0100               	movlb	0	; () banked
  7732  002D90  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7733  002D92  0E54               	movlw	low _wrkbuf
  7734  002D94  6F76               	movwf	?_ultoa& (0+255),b
  7735  002D96  C086  F078         	movff	receivePrintEventSLCAN@id,?_ultoa+2
  7736  002D9A  C087  F079         	movff	receivePrintEventSLCAN@id+1,?_ultoa+3
  7737  002D9E  C088  F07A         	movff	receivePrintEventSLCAN@id+2,?_ultoa+4
  7738  002DA2  C089  F07B         	movff	receivePrintEventSLCAN@id+3,?_ultoa+5
  7739  002DA6  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7740  002DA8  0E10               	movlw	16
  7741  002DAA  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7742  002DAC  EC47  F01E         	call	_ultoa	;wreg free
  7743                           
  7744                           ; BSR set to: 0
  7745                           ;main.c: 1878: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7746  002DB0  6B8B               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7747  002DB2  6B8C               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7748  002DB4                     l942:
  7749                           
  7750                           ; BSR set to: 0
  7751  002DB4  A2AC               	btfss	4012,1,c	;volatile
  7752  002DB6  D7FE               	goto	l942
  7753                           
  7754                           ; BSR set to: 0
  7755                           ;main.c: 1880: WriteUSART('0');
  7756  002DB8  0E30               	movlw	48
  7757  002DBA  EC37  F02A         	call	_WriteUSART
  7758                           
  7759                           ; BSR set to: 0
  7760  002DBE  D884               	call	PL90	;call to abstracted procedure
  7761  002DC0  B4D8               	btfsc	status,2,c
  7762  002DC2  5D8B               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7763  002DC4  E3F7               	bnc	l942
  7764                           
  7765                           ; BSR set to: 0
  7766                           ;main.c: 1881: }
  7767                           ;main.c: 1882: putsUSART(wrkbuf);
  7768  002DC6  0E01               	movlw	high _wrkbuf
  7769  002DC8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7770  002DCA  0E54               	movlw	low _wrkbuf
  7771  002DCC  6F61               	movwf	?_putsUSART& (0+255),b
  7772  002DCE  EC6A  F027         	call	_putsUSART	;wreg free
  7773                           
  7774                           ;main.c: 1885: itoa(wrkbuf, dlc, 16);
  7775  002DD2  0E01               	movlw	high _wrkbuf
  7776  002DD4  0100               	movlb	0	; () banked
  7777  002DD6  6F71               	movwf	(?_itoa+1)& (0+255),b
  7778  002DD8  0E54               	movlw	low _wrkbuf
  7779  002DDA  6F70               	movwf	?_itoa& (0+255),b
  7780  002DDC  C08A  F072         	movff	receivePrintEventSLCAN@dlc,?_itoa+2
  7781  002DE0  6B73               	clrf	(?_itoa+3)& (0+255),b
  7782  002DE2  6B75               	clrf	(?_itoa+5)& (0+255),b
  7783  002DE4  0E10               	movlw	16
  7784  002DE6  6F74               	movwf	(?_itoa+4)& (0+255),b
  7785  002DE8  EC48  F029         	call	_itoa	;wreg free
  7786  002DEC                     l945:
  7787                           
  7788                           ; BSR set to: 0
  7789  002DEC  A2AC               	btfss	4012,1,c	;volatile
  7790  002DEE  D7FE               	goto	l945
  7791                           
  7792                           ; BSR set to: 0
  7793                           ;main.c: 1887: WriteUSART(wrkbuf[0]);
  7794  002DF0  0101               	movlb	1	; () banked
  7795  002DF2  5154               	movf	_wrkbuf& (0+255),w,b
  7796  002DF4  EC37  F02A         	call	_WriteUSART
  7797                           
  7798                           ;main.c: 1890: for (i = 0; i < dlc; i++) {
  7799  002DF8  0100               	movlb	0	; () banked
  7800  002DFA  6B8B               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7801  002DFC  6B8C               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7802  002DFE  D02D               	goto	l11836
  7803  002E00                     l11824:
  7804                           
  7805                           ; BSR set to: 0
  7806                           ;main.c: 1891: itoa(wrkbuf, vscpData[i], 16);
  7807  002E00  0E01               	movlw	high _wrkbuf
  7808  002E02  0100               	movlb	0	; () banked
  7809  002E04  6F71               	movwf	(?_itoa+1)& (0+255),b
  7810  002E06  0E54               	movlw	low _wrkbuf
  7811  002E08  6F70               	movwf	?_itoa& (0+255),b
  7812  002E0A  0EA4               	movlw	low _vscpData
  7813  002E0C  258B               	addwf	receivePrintEventSLCAN@i& (0+255),w,b
  7814  002E0E  6ED9               	movwf	fsr2l,c
  7815  002E10  0E01               	movlw	high _vscpData
  7816  002E12  218C               	addwfc	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7817  002E14  6EDA               	movwf	fsr2h,c
  7818  002E16  50DF               	movf	indf2,w,c
  7819  002E18  6F72               	movwf	(?_itoa+2)& (0+255),b
  7820  002E1A  6B73               	clrf	(?_itoa+3)& (0+255),b
  7821  002E1C  6B75               	clrf	(?_itoa+5)& (0+255),b
  7822  002E1E  0E10               	movlw	16
  7823  002E20  6F74               	movwf	(?_itoa+4)& (0+255),b
  7824  002E22  EC48  F029         	call	_itoa	;wreg free
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;main.c: 1893: if (2 != strlen(wrkbuf)) {
  7828  002E26  0E01               	movlw	high _wrkbuf
  7829  002E28  0100               	movlb	0	; () banked
  7830  002E2A  6F61               	movwf	(?_strlen+1)& (0+255),b
  7831  002E2C  0E54               	movlw	low _wrkbuf
  7832  002E2E  6F60               	movwf	?_strlen& (0+255),b
  7833  002E30  EC8F  F028         	call	_strlen	;wreg free
  7834  002E34  5160               	movf	?_strlen& (0+255),w,b
  7835  002E36  0A02               	xorlw	2
  7836  002E38  1161               	iorwf	(?_strlen+1)& (0+255),w,b
  7837  002E3A  E005               	bz	l11832
  7838  002E3C                     l951:
  7839                           
  7840                           ; BSR set to: 0
  7841  002E3C  A2AC               	btfss	4012,1,c	;volatile
  7842  002E3E  D7FE               	goto	l951
  7843                           
  7844                           ; BSR set to: 0
  7845                           ;main.c: 1895: WriteUSART('0');
  7846  002E40  0E30               	movlw	48
  7847  002E42  EC37  F02A         	call	_WriteUSART
  7848  002E46                     l11832:
  7849                           
  7850                           ;main.c: 1896: }
  7851                           ;main.c: 1898: putsUSART(wrkbuf);
  7852  002E46  0E01               	movlw	high _wrkbuf
  7853  002E48  0100               	movlb	0	; () banked
  7854  002E4A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7855  002E4C  0E54               	movlw	low _wrkbuf
  7856  002E4E  6F61               	movwf	?_putsUSART& (0+255),b
  7857  002E50  EC6A  F027         	call	_putsUSART	;wreg free
  7858  002E54  0100               	movlb	0	; () banked
  7859  002E56  4B8B               	infsnz	receivePrintEventSLCAN@i& (0+255),f,b
  7860  002E58  2B8C               	incf	(receivePrintEventSLCAN@i+1)& (0+255),f,b
  7861  002E5A                     l11836:
  7862                           
  7863                           ; BSR set to: 0
  7864  002E5A  518A               	movf	receivePrintEventSLCAN@dlc& (0+255),w,b
  7865  002E5C  6F83               	movwf	??_receivePrintEventSLCAN& (0+255),b
  7866  002E5E  6B84               	clrf	(??_receivePrintEventSLCAN+1)& (0+255),b
  7867  002E60  518C               	movf	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7868  002E62  0A80               	xorlw	128
  7869  002E64  6F85               	movwf	(??_receivePrintEventSLCAN+2)& (0+255),b
  7870  002E66  5183               	movf	??_receivePrintEventSLCAN& (0+255),w,b
  7871  002E68  5D8B               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7872  002E6A  5184               	movf	(??_receivePrintEventSLCAN+1)& (0+255),w,b
  7873  002E6C  0A80               	xorlw	128
  7874  002E6E  5985               	subwfb	(??_receivePrintEventSLCAN+2)& (0+255),w,b
  7875  002E70  E3C7               	bnc	l11824
  7876                           
  7877                           ; BSR set to: 0
  7878                           ;main.c: 1899: }
  7879                           ;main.c: 1902: if (nTimeStamp) {
  7880  002E72  51F9               	movf	_nTimeStamp& (0+255),w,b
  7881  002E74  E023               	bz	l961
  7882                           
  7883                           ; BSR set to: 0
  7884                           ;main.c: 1903: ultoa(wrkbuf, timer, 16);
  7885  002E76  0E01               	movlw	high _wrkbuf
  7886  002E78  0100               	movlb	0	; () banked
  7887  002E7A  6F77               	movwf	(?_ultoa+1)& (0+255),b
  7888  002E7C  0E54               	movlw	low _wrkbuf
  7889  002E7E  6F76               	movwf	?_ultoa& (0+255),b
  7890  002E80  C0ED  F078         	movff	_timer,?_ultoa+2	;volatile
  7891  002E84  C0EE  F079         	movff	_timer+1,?_ultoa+3	;volatile
  7892  002E88  C0EF  F07A         	movff	_timer+2,?_ultoa+4	;volatile
  7893  002E8C  C0F0  F07B         	movff	_timer+3,?_ultoa+5	;volatile
  7894  002E90  6B7D               	clrf	(?_ultoa+7)& (0+255),b
  7895  002E92  0E10               	movlw	16
  7896  002E94  6F7C               	movwf	(?_ultoa+6)& (0+255),b
  7897  002E96  EC47  F01E         	call	_ultoa	;wreg free
  7898                           
  7899                           ; BSR set to: 0
  7900                           ;main.c: 1905: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7901  002E9A  6B8B               	clrf	receivePrintEventSLCAN@i& (0+255),b
  7902  002E9C  6B8C               	clrf	(receivePrintEventSLCAN@i+1)& (0+255),b
  7903  002E9E                     l958:
  7904                           
  7905                           ; BSR set to: 0
  7906  002E9E  A2AC               	btfss	4012,1,c	;volatile
  7907  002EA0  D7FE               	goto	l958
  7908                           
  7909                           ; BSR set to: 0
  7910                           ;main.c: 1907: WriteUSART('0');
  7911  002EA2  0E30               	movlw	48
  7912  002EA4  EC37  F02A         	call	_WriteUSART
  7913                           
  7914                           ; BSR set to: 0
  7915  002EA8  D80F               	call	PL90	;call to abstracted procedure
  7916  002EAA  B4D8               	btfsc	status,2,c
  7917  002EAC  5D8B               	subwf	receivePrintEventSLCAN@i& (0+255),w,b
  7918  002EAE  E3F7               	bnc	l958
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;main.c: 1908: }
  7922                           ;main.c: 1909: putsUSART(wrkbuf);
  7923  002EB0  0E01               	movlw	high _wrkbuf
  7924  002EB2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
  7925  002EB4  0E54               	movlw	low _wrkbuf
  7926  002EB6  6F61               	movwf	?_putsUSART& (0+255),b
  7927  002EB8  EC6A  F027         	call	_putsUSART	;wreg free
  7928  002EBC                     l961:
  7929  002EBC  A2AC               	btfss	4012,1,c	;volatile
  7930  002EBE  D7FE               	goto	l961
  7931                           
  7932                           ;main.c: 1913: WriteUSART(0x0d);
  7933  002EC0  0E0D               	movlw	13
  7934  002EC2  EC37  F02A         	call	_WriteUSART
  7935  002EC6                     l964:
  7936  002EC6  0012               	return	
  7937  002EC8                     __end_of_receivePrintEventSLCAN:
  7938                           	opt stack 0
  7939  002EC8                     PL90:
  7940                           	opt stack 23
  7941  002EC8  0100               	movlb	0	; () banked
  7942  002ECA  4B8B               	infsnz	receivePrintEventSLCAN@i& (0+255),f,b
  7943  002ECC  2B8C               	incf	(receivePrintEventSLCAN@i+1)& (0+255),f,b
  7944  002ECE  518C               	movf	(receivePrintEventSLCAN@i+1)& (0+255),w,b
  7945  002ED0  0A80               	xorlw	128
  7946  002ED2  0F80               	addlw	-128
  7947  002ED4  0CB8               	retlw	184
  7948  002ED6                     __end_ofPL90:
  7949                           	opt stack 0
  7950                           tblptru	equ	0xFF8
  7951                           tblptrh	equ	0xFF7
  7952                           tblptrl	equ	0xFF6
  7953                           tablat	equ	0xFF5
  7954                           prodh	equ	0xFF4
  7955                           prodl	equ	0xFF3
  7956                           intcon	equ	0xFF2
  7957                           indf0	equ	0xFEF
  7958                           postinc0	equ	0xFEE
  7959                           fsr0h	equ	0xFEA
  7960                           fsr0l	equ	0xFE9
  7961                           wreg	equ	0xFE8
  7962                           indf1	equ	0xFE7
  7963                           postinc1	equ	0xFE6
  7964                           postdec1	equ	0xFE5
  7965                           fsr1h	equ	0xFE2
  7966                           fsr1l	equ	0xFE1
  7967                           indf2	equ	0xFDF
  7968                           postinc2	equ	0xFDE
  7969                           postdec2	equ	0xFDD
  7970                           plusw2	equ	0xFDB
  7971                           fsr2h	equ	0xFDA
  7972                           fsr2l	equ	0xFD9
  7973                           status	equ	0xFD8
  7974                           
  7975 ;; *************** function _ultoa *****************
  7976 ;; Defined at:
  7977 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  7978 ;; Parameters:    Size  Location     Type
  7979 ;;  buf             2   22[BANK0 ] PTR unsigned char 
  7980 ;;		 -> wrkbuf(80), 
  7981 ;;  val             4   24[BANK0 ] unsigned long 
  7982 ;;  base            2   28[BANK0 ] int 
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;  v               4   30[BANK0 ] unsigned long 
  7985 ;;  c               1   34[BANK0 ] unsigned char 
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  2   22[BANK0 ] PTR unsigned char 
  7988 ;; Registers used:
  7989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : F/0
  7992 ;;		On exit  : F/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7995 ;;      Params:         0       8       0       0       0       0       0
  7996 ;;      Locals:         0       5       0       0       0       0       0
  7997 ;;      Temps:          0       0       0       0       0       0       0
  7998 ;;      Totals:         0      13       0       0       0       0       0
  7999 ;;Total ram usage:       13 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    4
  8002 ;; This function calls:
  8003 ;;		___lldiv
  8004 ;;		___llmod
  8005 ;; This function is called by:
  8006 ;;		_receivePrintEventSLCAN
  8007 ;; This function uses a non-reentrant model
  8008 ;;
  8009                           
  8010                           	psect	text6
  8011  003C8E                     __ptext6:
  8012                           	opt stack 0
  8013  003C8E                     _ultoa:
  8014                           	opt stack 24
  8015                           
  8016                           ; BSR set to: 0
  8017                           
  8018                           ;incstack = 0
  8019                           ;incstack = 0
  8020  003C8E  C078  F07E         	movff	ultoa@val,ultoa@v
  8021  003C92  C079  F07F         	movff	ultoa@val+1,ultoa@v+1
  8022  003C96  C07A  F080         	movff	ultoa@val+2,ultoa@v+2
  8023  003C9A  C07B  F081         	movff	ultoa@val+3,ultoa@v+3
  8024  003C9E                     l11980:
  8025                           
  8026                           ; BSR set to: 0
  8027  003C9E  C07E  F060         	movff	ultoa@v,?___lldiv
  8028  003CA2  C07F  F061         	movff	ultoa@v+1,?___lldiv+1
  8029  003CA6  C080  F062         	movff	ultoa@v+2,?___lldiv+2
  8030  003CAA  C081  F063         	movff	ultoa@v+3,?___lldiv+3
  8031  003CAE  D858               	call	PL68	;call to abstracted procedure
  8032  003CB0  EC2A  F025         	call	___lldiv	;wreg free
  8033  003CB4  C063  F081         	movff	?___lldiv+3,ultoa@v+3
  8034  003CB8  C062  F080         	movff	?___lldiv+2,ultoa@v+2
  8035  003CBC  C061  F07F         	movff	?___lldiv+1,ultoa@v+1
  8036  003CC0  C060  F07E         	movff	?___lldiv,ultoa@v
  8037                           
  8038                           ; BSR set to: 0
  8039  003CC4  4B76               	infsnz	ultoa@buf& (0+255),f,b
  8040  003CC6  2B77               	incf	(ultoa@buf+1)& (0+255),f,b
  8041                           
  8042                           ; BSR set to: 0
  8043  003CC8  5181               	movf	(ultoa@v+3)& (0+255),w,b
  8044  003CCA  117E               	iorwf	ultoa@v& (0+255),w,b
  8045  003CCC  117F               	iorwf	(ultoa@v+1)& (0+255),w,b
  8046  003CCE  1180               	iorwf	(ultoa@v+2)& (0+255),w,b
  8047  003CD0  E1E6               	bnz	l11980
  8048                           
  8049                           ; BSR set to: 0
  8050  003CD2  C076  FFD9         	movff	ultoa@buf,fsr2l
  8051  003CD6  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8052  003CDA  6ADF               	clrf	indf2,c
  8053                           
  8054                           ; BSR set to: 0
  8055  003CDC  0776               	decf	ultoa@buf& (0+255),f,b
  8056  003CDE  A0D8               	btfss	status,0,c
  8057  003CE0  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8058  003CE2                     l11990:
  8059                           
  8060                           ; BSR set to: 0
  8061  003CE2  C078  F06D         	movff	ultoa@val,?___llmod
  8062  003CE6  C079  F06E         	movff	ultoa@val+1,?___llmod+1
  8063  003CEA  C07A  F06F         	movff	ultoa@val+2,?___llmod+2
  8064  003CEE  C07B  F070         	movff	ultoa@val+3,?___llmod+3
  8065  003CF2  C07C  F071         	movff	ultoa@base,?___llmod+4
  8066  003CF6  C07D  F072         	movff	ultoa@base+1,?___llmod+5
  8067  003CFA  0E00               	movlw	0
  8068  003CFC  BF72               	btfsc	(?___llmod+5)& (0+255),7,b
  8069  003CFE  0EFF               	movlw	-1
  8070  003D00  6F73               	movwf	(?___llmod+6)& (0+255),b
  8071  003D02  6F74               	movwf	(?___llmod+7)& (0+255),b
  8072  003D04  ECDF  F026         	call	___llmod	;wreg free
  8073  003D08  516D               	movf	?___llmod& (0+255),w,b
  8074  003D0A  6F82               	movwf	ultoa@c& (0+255),b
  8075                           
  8076                           ; BSR set to: 0
  8077  003D0C  C078  F060         	movff	ultoa@val,?___lldiv
  8078  003D10  C079  F061         	movff	ultoa@val+1,?___lldiv+1
  8079  003D14  C07A  F062         	movff	ultoa@val+2,?___lldiv+2
  8080  003D18  C07B  F063         	movff	ultoa@val+3,?___lldiv+3
  8081  003D1C  D821               	call	PL68	;call to abstracted procedure
  8082  003D1E  EC2A  F025         	call	___lldiv	;wreg free
  8083  003D22  C063  F07B         	movff	?___lldiv+3,ultoa@val+3
  8084  003D26  C062  F07A         	movff	?___lldiv+2,ultoa@val+2
  8085  003D2A  C061  F079         	movff	?___lldiv+1,ultoa@val+1
  8086  003D2E  C060  F078         	movff	?___lldiv,ultoa@val
  8087                           
  8088                           ; BSR set to: 0
  8089  003D32  0E09               	movlw	9
  8090  003D34  6582               	cpfsgt	ultoa@c& (0+255),b
  8091  003D36  D002               	goto	l2297
  8092                           
  8093                           ; BSR set to: 0
  8094  003D38  0E07               	movlw	7
  8095  003D3A  2782               	addwf	ultoa@c& (0+255),f,b
  8096  003D3C                     l2297:
  8097                           
  8098                           ; BSR set to: 0
  8099  003D3C  0E30               	movlw	48
  8100  003D3E  2782               	addwf	ultoa@c& (0+255),f,b
  8101                           
  8102                           ; BSR set to: 0
  8103  003D40  C076  FFD9         	movff	ultoa@buf,fsr2l
  8104  003D44  C077  FFDA         	movff	ultoa@buf+1,fsr2h
  8105  003D48  C082  FFDF         	movff	ultoa@c,indf2
  8106                           
  8107                           ; BSR set to: 0
  8108  003D4C  0776               	decf	ultoa@buf& (0+255),f,b
  8109  003D4E  A0D8               	btfss	status,0,c
  8110  003D50  0777               	decf	(ultoa@buf+1)& (0+255),f,b
  8111                           
  8112                           ; BSR set to: 0
  8113  003D52  517B               	movf	(ultoa@val+3)& (0+255),w,b
  8114  003D54  1178               	iorwf	ultoa@val& (0+255),w,b
  8115  003D56  1179               	iorwf	(ultoa@val+1)& (0+255),w,b
  8116  003D58  117A               	iorwf	(ultoa@val+2)& (0+255),w,b
  8117  003D5A  B4D8               	btfsc	status,2,c
  8118                           
  8119                           ; BSR set to: 0
  8120  003D5C  0012               	return	
  8121  003D5E  D7C1               	goto	l11990
  8122  003D60                     __end_of_ultoa:
  8123                           	opt stack 0
  8124  003D60                     PL68:
  8125                           	opt stack 24
  8126  003D60  C07C  F064         	movff	ultoa@base,?___lldiv+4
  8127  003D64  C07D  F065         	movff	ultoa@base+1,?___lldiv+5
  8128  003D68  0E00               	movlw	0
  8129  003D6A  BF65               	btfsc	(?___lldiv+5)& (0+255),7,b
  8130  003D6C  0EFF               	movlw	-1
  8131  003D6E  6F66               	movwf	(?___lldiv+6)& (0+255),b
  8132  003D70  6F67               	movwf	(?___lldiv+7)& (0+255),b
  8133  003D72  0012               	return	
  8134  003D74                     __end_ofPL68:
  8135                           	opt stack 0
  8136                           tblptru	equ	0xFF8
  8137                           tblptrh	equ	0xFF7
  8138                           tblptrl	equ	0xFF6
  8139                           tablat	equ	0xFF5
  8140                           prodh	equ	0xFF4
  8141                           prodl	equ	0xFF3
  8142                           intcon	equ	0xFF2
  8143                           indf0	equ	0xFEF
  8144                           postinc0	equ	0xFEE
  8145                           fsr0h	equ	0xFEA
  8146                           fsr0l	equ	0xFE9
  8147                           wreg	equ	0xFE8
  8148                           indf1	equ	0xFE7
  8149                           postinc1	equ	0xFE6
  8150                           postdec1	equ	0xFE5
  8151                           fsr1h	equ	0xFE2
  8152                           fsr1l	equ	0xFE1
  8153                           indf2	equ	0xFDF
  8154                           postinc2	equ	0xFDE
  8155                           postdec2	equ	0xFDD
  8156                           plusw2	equ	0xFDB
  8157                           fsr2h	equ	0xFDA
  8158                           fsr2l	equ	0xFD9
  8159                           status	equ	0xFD8
  8160                           
  8161 ;; *************** function _doModeVscp *****************
  8162 ;; Defined at:
  8163 ;;		line 1046 in file "main.c"
  8164 ;; Parameters:    Size  Location     Type
  8165 ;;		None
  8166 ;; Auto vars:     Size  Location     Type
  8167 ;;  c               1   87[BANK0 ] unsigned char 
  8168 ;; Return value:  Size  Location     Type
  8169 ;;		None               void
  8170 ;; Registers used:
  8171 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  8172 ;; Tracked objects:
  8173 ;;		On entry : F/0
  8174 ;;		On exit  : E/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8177 ;;      Params:         0       0       0       0       0       0       0
  8178 ;;      Locals:         0       1       0       0       0       0       0
  8179 ;;      Temps:          0       0       0       0       0       0       0
  8180 ;;      Totals:         0       1       0       0       0       0       0
  8181 ;;Total ram usage:        1 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    7
  8184 ;; This function calls:
  8185 ;;		_fifo_read
  8186 ;;		_ECANSetOperationMode
  8187 ;;		_receivePrintEventCANAL
  8188 ;;		_calcCRC
  8189 ;;		_sendVSCPDriverErrorFrame
  8190 ;;		_sendVSCPDriverAck
  8191 ;;		_receiveVSCPModeCanalMsg
  8192 ;;		_sendVSCPDriverNack
  8193 ;;		_sendVSCPDriverCommandReply
  8194 ;; This function is called by:
  8195 ;;		_main
  8196 ;; This function uses a non-reentrant model
  8197 ;;
  8198                           
  8199                           	psect	text7
  8200  002ED6                     __ptext7:
  8201                           	opt stack 0
  8202  002ED6                     _doModeVscp:
  8203                           	opt stack 23
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;main.c: 1047: uint8_t c;
  8207                           ;main.c: 1050: if (!bSilent) {
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;incstack = 0
  8211                           ;incstack = 0
  8212  002ED6  0101               	movlb	1	; () banked
  8213  002ED8  6701               	tstfsz	_bSilent& (0+255),b
  8214  002EDA  D002               	goto	l10164
  8215                           
  8216                           ; BSR set to: 1
  8217                           ;main.c: 1051: receivePrintEventCANAL();
  8218  002EDC  ECE6  F018         	call	_receivePrintEventCANAL	;wreg free
  8219  002EE0                     l10164:
  8220                           
  8221                           ;main.c: 1052: }
  8222                           ;main.c: 1055: (INTCONbits.GIE = 0);
  8223  002EE0  9EF2               	bcf	intcon,7,c	;volatile
  8224                           
  8225                           ;main.c: 1057: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  8226  002EE2  0100               	movlb	0	; () banked
  8227  002EE4  0E00               	movlw	high doModeVscp@c
  8228  002EE6  6F61               	movwf	(?_fifo_read+1)& (0+255),b
  8229  002EE8  0EB7               	movlw	low doModeVscp@c
  8230  002EEA  6F60               	movwf	?_fifo_read& (0+255),b
  8231  002EEC  6B63               	clrf	(?_fifo_read+3)& (0+255),b
  8232  002EEE  0E01               	movlw	1
  8233  002EF0  6F62               	movwf	(?_fifo_read+2)& (0+255),b
  8234  002EF2  0E3E               	movlw	_serialInputFifo& (0+255)
  8235  002EF4  EC60  F020         	call	_fifo_read
  8236  002EF8  0560               	decf	?_fifo_read& (0+255),w,b
  8237  002EFA  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
  8238  002EFC  E001 D0A5          	bnz	l10290
  8239                           
  8240                           ; BSR set to: 0
  8241                           ;main.c: 1060: (INTCONbits.GIE = 1);
  8242  002F00  8EF2               	bsf	intcon,7,c	;volatile
  8243                           
  8244                           ;main.c: 1062: if (0 == stateVscpDriver) {
  8245  002F02  67FB               	tstfsz	_stateVscpDriver& (0+255),b
  8246  002F04  D00E               	goto	l10184
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;main.c: 1063: if (bDLE) {
  8250  002F06  51F5               	movf	_bDLE& (0+255),w,b
  8251  002F08  E009               	bz	l10180
  8252                           
  8253                           ; BSR set to: 0
  8254                           ;main.c: 1064: bDLE = 0;
  8255  002F0A  6BF5               	clrf	_bDLE& (0+255),b
  8256                           
  8257                           ; BSR set to: 0
  8258                           ;main.c: 1067: if (0x02 == c) {
  8259  002F0C  51B7               	movf	doModeVscp@c& (0+255),w,b
  8260  002F0E  0A02               	xorlw	2
  8261  002F10  E129               	bnz	l10218
  8262                           
  8263                           ; BSR set to: 0
  8264                           ;main.c: 1068: stateVscpDriver = 1;
  8265  002F12  0E01               	movlw	1
  8266  002F14  6FFB               	movwf	_stateVscpDriver& (0+255),b
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;main.c: 1069: pos = 0;
  8270  002F16  0101               	movlb	1	; () banked
  8271  002F18  6B02               	clrf	_pos& (0+255),b
  8272  002F1A  D024               	goto	l10218
  8273  002F1C                     l10180:
  8274                           
  8275                           ; BSR set to: 0
  8276                           ;main.c: 1072: bDLE = 1;
  8277  002F1C  0E01               	movlw	1
  8278  002F1E  6FF5               	movwf	_bDLE& (0+255),b
  8279  002F20  D095               	goto	l632
  8280  002F22                     l10184:
  8281                           
  8282                           ; BSR set to: 0
  8283                           ;main.c: 1076: else if (1 == stateVscpDriver) {
  8284  002F22  05FB               	decf	_stateVscpDriver& (0+255),w,b
  8285  002F24  E11F               	bnz	l10218
  8286                           
  8287                           ; BSR set to: 0
  8288                           ;main.c: 1078: if (bDLE) {
  8289  002F26  51F5               	movf	_bDLE& (0+255),w,b
  8290  002F28  E00F               	bz	l10202
  8291                           
  8292                           ; BSR set to: 0
  8293                           ;main.c: 1080: bDLE = 0;
  8294  002F2A  6BF5               	clrf	_bDLE& (0+255),b
  8295                           
  8296                           ; BSR set to: 0
  8297                           ;main.c: 1083: if (0x03 == c) {
  8298  002F2C  51B7               	movf	doModeVscp@c& (0+255),w,b
  8299  002F2E  0A03               	xorlw	3
  8300  002F30  E103               	bnz	l10194
  8301                           
  8302                           ; BSR set to: 0
  8303                           ;main.c: 1084: stateVscpDriver = 2;
  8304  002F32  0E02               	movlw	2
  8305  002F34  6FFB               	movwf	_stateVscpDriver& (0+255),b
  8306                           
  8307                           ;main.c: 1085: }
  8308  002F36  D016               	goto	l10218
  8309  002F38                     l10194:
  8310                           
  8311                           ; BSR set to: 0
  8312                           ;main.c: 1086: else if (0x10 == c) {
  8313  002F38  51B7               	movf	doModeVscp@c& (0+255),w,b
  8314  002F3A  0A10               	xorlw	16
  8315  002F3C  E113               	bnz	l10218
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;main.c: 1088: cmdbuf[ pos++ ] = c;
  8319  002F3E  D887               	call	PL18	;call to abstracted procedure
  8320  002F40  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8321                           
  8322                           ; BSR set to: 0
  8323  002F44  2B02               	incf	_pos& (0+255),f,b
  8324  002F46  D082               	goto	l632
  8325  002F48                     l10202:
  8326                           
  8327                           ; BSR set to: 0
  8328                           ;main.c: 1093: else {
  8329                           ;main.c: 1094: if (0x10 == c) {
  8330  002F48  51B7               	movf	doModeVscp@c& (0+255),w,b
  8331  002F4A  0A10               	xorlw	16
  8332  002F4C  E0E7               	bz	l10180
  8333                           
  8334                           ; BSR set to: 0
  8335                           ;main.c: 1099: cmdbuf[ pos++ ] = c;
  8336  002F4E  D87F               	call	PL18	;call to abstracted procedure
  8337  002F50  C0B7  FFDF         	movff	doModeVscp@c,indf2
  8338                           
  8339                           ; BSR set to: 0
  8340  002F54  2B02               	incf	_pos& (0+255),f,b
  8341                           
  8342                           ; BSR set to: 1
  8343                           ;main.c: 1101: if (pos >= 128u) {
  8344  002F56  0E7F               	movlw	127
  8345  002F58  6502               	cpfsgt	_pos& (0+255),b
  8346  002F5A  D078               	goto	l632
  8347                           
  8348                           ; BSR set to: 1
  8349                           ;main.c: 1104: pos = 0;
  8350  002F5C  6B02               	clrf	_pos& (0+255),b
  8351                           
  8352                           ;main.c: 1105: stateVscpDriver = 0;
  8353  002F5E  0100               	movlb	0	; () banked
  8354  002F60  6BFB               	clrf	_stateVscpDriver& (0+255),b
  8355  002F62  D074               	goto	l632
  8356  002F64                     l10218:
  8357                           
  8358                           ;main.c: 1109: }
  8359                           ;main.c: 1110: }
  8360                           ;main.c: 1111: }
  8361                           ;main.c: 1116: if (2 == stateVscpDriver) {
  8362  002F64  0100               	movlb	0	; () banked
  8363  002F66  51FB               	movf	_stateVscpDriver& (0+255),w,b
  8364  002F68  0A02               	xorlw	2
  8365  002F6A  E16F               	bnz	l10290
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;main.c: 1119: stateVscpDriver = 0;
  8369  002F6C  6BFB               	clrf	_stateVscpDriver& (0+255),b
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;main.c: 1131: if (calcCRC(cmdbuf, pos)) {
  8373  002F6E  0E01               	movlw	high _cmdbuf
  8374  002F70  6F6D               	movwf	(?_calcCRC+1)& (0+255),b
  8375  002F72  0E04               	movlw	low _cmdbuf
  8376  002F74  6F6C               	movwf	?_calcCRC& (0+255),b
  8377  002F76  C102  F06E         	movff	_pos,?_calcCRC+2
  8378  002F7A  ECB0  F029         	call	_calcCRC	;wreg free
  8379  002F7E  0900               	iorlw	0
  8380  002F80  E003               	bz	l10226
  8381                           
  8382                           ; BSR set to: 0
  8383                           ;main.c: 1132: sendVSCPDriverErrorFrame(1);
  8384  002F82  0E01               	movlw	1
  8385  002F84  ECC7  F020         	call	_sendVSCPDriverErrorFrame
  8386  002F88                     l10226:
  8387                           
  8388                           ;main.c: 1133: }
  8389                           ;main.c: 1136: if (0 ==
  8390                           ;main.c: 1137: cmdbuf[ 0 ]) {
  8391  002F88  0101               	movlb	1	; () banked
  8392  002F8A  6704               	tstfsz	_cmdbuf& (0+255),b
  8393  002F8C  D003               	goto	l10230
  8394  002F8E                     l10228:
  8395                           
  8396                           ;main.c: 1138: sendVSCPDriverAck();
  8397  002F8E  ECD1  F021         	call	_sendVSCPDriverAck	;wreg free
  8398                           
  8399                           ;main.c: 1139: }
  8400  002F92  D057               	goto	l10286
  8401  002F94                     l10230:
  8402                           
  8403                           ; BSR set to: 1
  8404                           ;main.c: 1140: else if (1 ==
  8405                           ;main.c: 1141: cmdbuf[ 0 ]) {
  8406  002F94  0504               	decf	_cmdbuf& (0+255),w,b
  8407  002F96  E055               	bz	l10286
  8408                           
  8409                           ; BSR set to: 1
  8410                           ;main.c: 1144: else if (2 ==
  8411                           ;main.c: 1145: cmdbuf[ 0 ]) {
  8412  002F98  5104               	movf	_cmdbuf& (0+255),w,b
  8413  002F9A  0A02               	xorlw	2
  8414  002F9C  E107               	bnz	l10242
  8415                           
  8416                           ; BSR set to: 1
  8417                           ;main.c: 1146: if (receiveVSCPModeCanalMsg()) {
  8418  002F9E  ECBA  F01E         	call	_receiveVSCPModeCanalMsg	;wreg free
  8419  002FA2  0900               	iorlw	0
  8420  002FA4  E1F4               	bnz	l10228
  8421  002FA6                     l10240:
  8422                           
  8423                           ;main.c: 1149: else {
  8424                           ;main.c: 1150: sendVSCPDriverNack();
  8425  002FA6  EC81  F021         	call	_sendVSCPDriverNack	;wreg free
  8426  002FAA  D04B               	goto	l10286
  8427  002FAC                     l10242:
  8428                           
  8429                           ; BSR set to: 1
  8430                           ;main.c: 1154: else if (3 ==
  8431                           ;main.c: 1155: cmdbuf[ 0 ]) {
  8432  002FAC  5104               	movf	_cmdbuf& (0+255),w,b
  8433  002FAE  0A03               	xorlw	3
  8434  002FB0  E0FA               	bz	l10240
  8435                           
  8436                           ; BSR set to: 1
  8437                           ;main.c: 1159: else if (4 ==
  8438                           ;main.c: 1160: cmdbuf[ 0 ]) {
  8439  002FB2  5104               	movf	_cmdbuf& (0+255),w,b
  8440  002FB4  0A04               	xorlw	4
  8441  002FB6  E0F7               	bz	l10240
  8442                           
  8443                           ; BSR set to: 1
  8444                           ;main.c: 1164: else if (255 ==
  8445                           ;main.c: 1165: cmdbuf[ 0 ]) {
  8446  002FB8  2904               	incf	_cmdbuf& (0+255),w,b
  8447  002FBA  E140               	bnz	l10284
  8448                           
  8449                           ; BSR set to: 1
  8450                           ;main.c: 1167: if (cmdbuf[ 5 ] ==
  8451                           ;main.c: 1168: 0) {
  8452  002FBC  6709               	tstfsz	(_cmdbuf+5)& (0+255),b
  8453  002FBE  D006               	goto	l10256
  8454                           
  8455                           ; BSR set to: 1
  8456                           ;main.c: 1169: sendVSCPDriverCommandReply(0, 0);
  8457  002FC0  0E00               	movlw	0
  8458  002FC2  0100               	movlb	0	; () banked
  8459  002FC4  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8460  002FC6  EC28  F01F         	call	_sendVSCPDriverCommandReply
  8461                           
  8462                           ;main.c: 1170: }
  8463  002FCA  D03B               	goto	l10286
  8464  002FCC                     l10256:
  8465                           
  8466                           ; BSR set to: 1
  8467                           ;main.c: 1172: else if (cmdbuf[ 5 ] ==
  8468                           ;main.c: 1173: 1) {
  8469  002FCC  0509               	decf	(_cmdbuf+5)& (0+255),w,b
  8470  002FCE  E109               	bnz	l10262
  8471                           
  8472                           ; BSR set to: 1
  8473                           ;main.c: 1174: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8474  002FD0  0E00               	movlw	0
  8475  002FD2  EC1F  F02A         	call	_ECANSetOperationMode
  8476                           
  8477                           ; BSR set to: 0
  8478                           ;main.c: 1175: sendVSCPDriverCommandReply(0, 1);
  8479  002FD6  0E01               	movlw	1
  8480  002FD8  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8481  002FDA  0E00               	movlw	0
  8482  002FDC  EC28  F01F         	call	_sendVSCPDriverCommandReply
  8483                           
  8484                           ;main.c: 1176: }
  8485  002FE0  D030               	goto	l10286
  8486  002FE2                     l10262:
  8487                           
  8488                           ; BSR set to: 1
  8489                           ;main.c: 1178: else if (cmdbuf[ 5 ] ==
  8490                           ;main.c: 1179: 2) {
  8491  002FE2  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8492  002FE4  0A02               	xorlw	2
  8493  002FE6  E109               	bnz	l10268
  8494                           
  8495                           ; BSR set to: 1
  8496                           ;main.c: 1180: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8497  002FE8  0E40               	movlw	64
  8498  002FEA  EC1F  F02A         	call	_ECANSetOperationMode
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;main.c: 1181: sendVSCPDriverCommandReply(0, 2);
  8502  002FEE  0E02               	movlw	2
  8503  002FF0  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8504  002FF2  0E00               	movlw	0
  8505  002FF4  EC28  F01F         	call	_sendVSCPDriverCommandReply
  8506                           
  8507                           ;main.c: 1182: }
  8508  002FF8  D024               	goto	l10286
  8509  002FFA                     l10268:
  8510                           
  8511                           ; BSR set to: 1
  8512                           ;main.c: 1184: else if (cmdbuf[ 5 ] ==
  8513                           ;main.c: 1185: 3) {
  8514  002FFA  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8515  002FFC  0A03               	xorlw	3
  8516  002FFE  E109               	bnz	l10274
  8517                           
  8518                           ; BSR set to: 1
  8519                           ;main.c: 1186: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8520  003000  0E60               	movlw	96
  8521  003002  EC1F  F02A         	call	_ECANSetOperationMode
  8522                           
  8523                           ; BSR set to: 0
  8524                           ;main.c: 1187: sendVSCPDriverCommandReply(0, 3);
  8525  003006  0E03               	movlw	3
  8526  003008  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8527  00300A  0E00               	movlw	0
  8528  00300C  EC28  F01F         	call	_sendVSCPDriverCommandReply
  8529                           
  8530                           ;main.c: 1188: }
  8531  003010  D018               	goto	l10286
  8532  003012                     l10274:
  8533                           
  8534                           ; BSR set to: 1
  8535                           ;main.c: 1190: else if (cmdbuf[ 5 ] ==
  8536                           ;main.c: 1191: 4) {
  8537  003012  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8538  003014  0A04               	xorlw	4
  8539  003016  E109               	bnz	l10280
  8540                           
  8541                           ; BSR set to: 1
  8542                           ;main.c: 1192: ECANSetOperationMode(0x20);
  8543  003018  0E20               	movlw	32
  8544  00301A  EC1F  F02A         	call	_ECANSetOperationMode
  8545                           
  8546                           ; BSR set to: 0
  8547                           ;main.c: 1193: sendVSCPDriverCommandReply(0, 4);
  8548  00301E  0E04               	movlw	4
  8549  003020  6F6F               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8550  003022  0E00               	movlw	0
  8551  003024  EC28  F01F         	call	_sendVSCPDriverCommandReply
  8552                           
  8553                           ;main.c: 1194: }
  8554  003028  D00C               	goto	l10286
  8555  00302A                     l10280:
  8556                           
  8557                           ; BSR set to: 1
  8558                           ;main.c: 1196: else if (cmdbuf[ 5 ] ==
  8559                           ;main.c: 1197: 5) {
  8560  00302A  5109               	movf	(_cmdbuf+5)& (0+255),w,b
  8561  00302C  0A05               	xorlw	5
  8562  00302E  E109               	bnz	l10286
  8563                           
  8564                           ; BSR set to: 1
  8565                           ;main.c: 1198: sendVSCPDriverCommandReply(0, 0);
  8566  003030  0E00               	movlw	0
  8567  003032  0100               	movlb	0	; () banked
  8568  003034  6B6F               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8569  003036  EC28  F01F         	call	_sendVSCPDriverCommandReply
  8570  00303A  D003               	goto	l10286
  8571  00303C                     l10284:
  8572                           
  8573                           ; BSR set to: 1
  8574                           ;main.c: 1202: else {
  8575                           ;main.c: 1204: sendVSCPDriverErrorFrame(2);
  8576  00303C  0E02               	movlw	2
  8577  00303E  ECC7  F020         	call	_sendVSCPDriverErrorFrame
  8578  003042                     l10286:
  8579                           
  8580                           ;main.c: 1205: }
  8581                           ;main.c: 1208: pos = 0;
  8582  003042  0101               	movlb	1	; () banked
  8583  003044  6B02               	clrf	_pos& (0+255),b
  8584                           
  8585                           ; BSR set to: 1
  8586                           ;main.c: 1209: stateVscpDriver = 0;
  8587  003046  0100               	movlb	0	; () banked
  8588  003048  6BFB               	clrf	_stateVscpDriver& (0+255),b
  8589  00304A                     l10290:
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;main.c: 1211: }
  8593                           ;main.c: 1213: }
  8594                           ;main.c: 1216: (INTCONbits.GIE = 1);
  8595  00304A  8EF2               	bsf	intcon,7,c	;volatile
  8596  00304C                     l632:
  8597  00304C  0012               	return	
  8598  00304E                     __end_of_doModeVscp:
  8599                           	opt stack 0
  8600  00304E                     PL18:
  8601                           	opt stack 20
  8602  00304E  0101               	movlb	1	; () banked
  8603  003050  0E04               	movlw	low _cmdbuf
  8604  003052  2502               	addwf	_pos& (0+255),w,b
  8605  003054  6ED9               	movwf	fsr2l,c
  8606  003056  6ADA               	clrf	fsr2h,c
  8607  003058  0E01               	movlw	high _cmdbuf
  8608  00305A  22DA               	addwfc	fsr2h,f,c
  8609  00305C  0012               	return	
  8610  00305E                     __end_ofPL18:
  8611                           	opt stack 0
  8612                           tblptru	equ	0xFF8
  8613                           tblptrh	equ	0xFF7
  8614                           tblptrl	equ	0xFF6
  8615                           tablat	equ	0xFF5
  8616                           prodh	equ	0xFF4
  8617                           prodl	equ	0xFF3
  8618                           intcon	equ	0xFF2
  8619                           indf0	equ	0xFEF
  8620                           postinc0	equ	0xFEE
  8621                           fsr0h	equ	0xFEA
  8622                           fsr0l	equ	0xFE9
  8623                           wreg	equ	0xFE8
  8624                           indf1	equ	0xFE7
  8625                           postinc1	equ	0xFE6
  8626                           postdec1	equ	0xFE5
  8627                           fsr1h	equ	0xFE2
  8628                           fsr1l	equ	0xFE1
  8629                           indf2	equ	0xFDF
  8630                           postinc2	equ	0xFDE
  8631                           postdec2	equ	0xFDD
  8632                           plusw2	equ	0xFDB
  8633                           fsr2h	equ	0xFDA
  8634                           fsr2l	equ	0xFD9
  8635                           status	equ	0xFD8
  8636                           
  8637 ;; *************** function _sendVSCPDriverCommandReply *****************
  8638 ;; Defined at:
  8639 ;;		line 1598 in file "main.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;  cmdReplyCode    1    wreg     unsigned char 
  8642 ;;  cmdCode         1   15[BANK0 ] unsigned char 
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;  cmdReplyCode    1   16[BANK0 ] unsigned char 
  8645 ;;  crc             1   17[BANK0 ] unsigned char 
  8646 ;; Return value:  Size  Location     Type
  8647 ;;		None               void
  8648 ;; Registers used:
  8649 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8650 ;; Tracked objects:
  8651 ;;		On entry : F/0
  8652 ;;		On exit  : 0/0
  8653 ;;		Unchanged: 0/0
  8654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8655 ;;      Params:         0       1       0       0       0       0       0
  8656 ;;      Locals:         0       2       0       0       0       0       0
  8657 ;;      Temps:          0       0       0       0       0       0       0
  8658 ;;      Totals:         0       3       0       0       0       0       0
  8659 ;;Total ram usage:        3 bytes
  8660 ;; Hardware stack levels used:    1
  8661 ;; Hardware stack levels required when called:    6
  8662 ;; This function calls:
  8663 ;;		_WriteUSART
  8664 ;;		_sendEscapedUartData
  8665 ;;		_crc8
  8666 ;; This function is called by:
  8667 ;;		_doModeVscp
  8668 ;; This function uses a non-reentrant model
  8669 ;;
  8670                           
  8671                           	psect	text8
  8672  003E50                     __ptext8:
  8673                           	opt stack 0
  8674  003E50                     _sendVSCPDriverCommandReply:
  8675                           	opt stack 23
  8676                           
  8677                           ;incstack = 0
  8678                           ;incstack = 0
  8679                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8680  003E50  CFE8 F070          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8681                           
  8682                           ; BSR set to: 0
  8683                           ;main.c: 1599: uint8_t crc = 0;
  8684  003E54  6B71               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  8685  003E56                     l819:
  8686                           
  8687                           ; BSR set to: 0
  8688  003E56  A2AC               	btfss	4012,1,c	;volatile
  8689  003E58  D7FE               	goto	l819
  8690                           
  8691                           ; BSR set to: 0
  8692                           ;main.c: 1603: WriteUSART(0x10);
  8693  003E5A  0E10               	movlw	16
  8694  003E5C  EC37  F02A         	call	_WriteUSART
  8695  003E60                     l822:
  8696  003E60  A2AC               	btfss	4012,1,c	;volatile
  8697  003E62  D7FE               	goto	l822
  8698                           
  8699                           ;main.c: 1605: WriteUSART(0x02);
  8700  003E64  0E02               	movlw	2
  8701  003E66  EC37  F02A         	call	_WriteUSART
  8702  003E6A                     l825:
  8703  003E6A  A2AC               	btfss	4012,1,c	;volatile
  8704  003E6C  D7FE               	goto	l825
  8705                           
  8706                           ;main.c: 1609: WriteUSART(254);
  8707  003E6E  0EFE               	movlw	254
  8708  003E70  EC37  F02A         	call	_WriteUSART
  8709                           
  8710                           ;main.c: 1610: crc8(&crc, 254);
  8711  003E74  0100               	movlb	0	; () banked
  8712  003E76  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8713  003E78  6F68               	movwf	(?_crc8+1)& (0+255),b
  8714  003E7A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8715  003E7C  6F67               	movwf	?_crc8& (0+255),b
  8716  003E7E  0EFE               	movlw	254
  8717  003E80  6F69               	movwf	(?_crc8+2)& (0+255),b
  8718  003E82  EC64  F029         	call	_crc8	;wreg free
  8719  003E86                     l828:
  8720                           
  8721                           ; BSR set to: 0
  8722  003E86  A2AC               	btfss	4012,1,c	;volatile
  8723  003E88  D7FE               	goto	l828
  8724                           
  8725                           ; BSR set to: 0
  8726                           ;main.c: 1614: WriteUSART(0);
  8727  003E8A  0E00               	movlw	0
  8728  003E8C  EC37  F02A         	call	_WriteUSART
  8729                           
  8730                           ;main.c: 1615: crc8(&crc, 0);
  8731  003E90  D841               	call	PL92	;call to abstracted procedure
  8732  003E92  EC64  F029         	call	_crc8	;wreg free
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;main.c: 1618: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  8736  003E96  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8737  003E98  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8738  003E9A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8739  003E9C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8740  003E9E  0101               	movlb	1	; () banked
  8741  003EA0  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  8742  003EA2  ECB2  F024         	call	_sendEscapedUartData
  8743  003EA6                     l831:
  8744                           
  8745                           ; BSR set to: 0
  8746  003EA6  A2AC               	btfss	4012,1,c	;volatile
  8747  003EA8  D7FE               	goto	l831
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;main.c: 1622: WriteUSART(0);
  8751  003EAA  0E00               	movlw	0
  8752  003EAC  EC37  F02A         	call	_WriteUSART
  8753                           
  8754                           ;main.c: 1623: crc8(&crc, 0);
  8755  003EB0  D831               	call	PL92	;call to abstracted procedure
  8756  003EB2  EC64  F029         	call	_crc8	;wreg free
  8757  003EB6                     l834:
  8758                           
  8759                           ; BSR set to: 0
  8760  003EB6  A2AC               	btfss	4012,1,c	;volatile
  8761  003EB8  D7FE               	goto	l834
  8762                           
  8763                           ; BSR set to: 0
  8764                           ;main.c: 1625: WriteUSART(2);
  8765  003EBA  0E02               	movlw	2
  8766  003EBC  EC37  F02A         	call	_WriteUSART
  8767                           
  8768                           ;main.c: 1626: crc8(&crc, 2);
  8769  003EC0  0100               	movlb	0	; () banked
  8770  003EC2  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8771  003EC4  6F68               	movwf	(?_crc8+1)& (0+255),b
  8772  003EC6  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8773  003EC8  6F67               	movwf	?_crc8& (0+255),b
  8774  003ECA  0E02               	movlw	2
  8775  003ECC  6F69               	movwf	(?_crc8+2)& (0+255),b
  8776  003ECE  EC64  F029         	call	_crc8	;wreg free
  8777  003ED2                     l837:
  8778                           
  8779                           ; BSR set to: 0
  8780  003ED2  A2AC               	btfss	4012,1,c	;volatile
  8781  003ED4  D7FE               	goto	l837
  8782                           
  8783                           ; BSR set to: 0
  8784                           ;main.c: 1630: sendEscapedUartData(cmdReplyCode, &crc);
  8785  003ED6  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8786  003ED8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8787  003EDA  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8788  003EDC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8789  003EDE  5170               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  8790  003EE0  ECB2  F024         	call	_sendEscapedUartData
  8791  003EE4                     l840:
  8792                           
  8793                           ; BSR set to: 0
  8794  003EE4  A2AC               	btfss	4012,1,c	;volatile
  8795  003EE6  D7FE               	goto	l840
  8796                           
  8797                           ; BSR set to: 0
  8798                           ;main.c: 1634: sendEscapedUartData(cmdCode, &crc);
  8799  003EE8  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8800  003EEA  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8801  003EEC  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8802  003EEE  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8803  003EF0  516F               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  8804  003EF2  ECB2  F024         	call	_sendEscapedUartData
  8805                           
  8806                           ;main.c: 1637: sendEscapedUartData(crc, (0));
  8807  003EF6  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  8808  003EF8  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  8809  003EFA  5171               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  8810  003EFC  ECB2  F024         	call	_sendEscapedUartData
  8811  003F00                     l843:
  8812                           
  8813                           ; BSR set to: 0
  8814  003F00  A2AC               	btfss	4012,1,c	;volatile
  8815  003F02  D7FE               	goto	l843
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;main.c: 1641: WriteUSART(0x10);
  8819  003F04  0E10               	movlw	16
  8820  003F06  EC37  F02A         	call	_WriteUSART
  8821  003F0A                     l846:
  8822  003F0A  A2AC               	btfss	4012,1,c	;volatile
  8823  003F0C  D7FE               	goto	l846
  8824                           
  8825                           ;main.c: 1643: WriteUSART(0x03);
  8826  003F0E  0E03               	movlw	3
  8827  003F10  EF37  F02A         	goto	_WriteUSART
  8828  003F14                     __end_of_sendVSCPDriverCommandReply:
  8829                           	opt stack 0
  8830  003F14                     PL92:
  8831                           	opt stack 23
  8832  003F14  0100               	movlb	0	; () banked
  8833  003F16  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8834  003F18  6F68               	movwf	(?_crc8+1)& (0+255),b
  8835  003F1A  0E71               	movlw	low sendVSCPDriverCommandReply@crc
  8836  003F1C  6F67               	movwf	?_crc8& (0+255),b
  8837  003F1E  6B69               	clrf	(?_crc8+2)& (0+255),b
  8838  003F20  0C00               	retlw	0
  8839  003F22                     __end_ofPL92:
  8840                           	opt stack 0
  8841                           tblptru	equ	0xFF8
  8842                           tblptrh	equ	0xFF7
  8843                           tblptrl	equ	0xFF6
  8844                           tablat	equ	0xFF5
  8845                           prodh	equ	0xFF4
  8846                           prodl	equ	0xFF3
  8847                           intcon	equ	0xFF2
  8848                           indf0	equ	0xFEF
  8849                           postinc0	equ	0xFEE
  8850                           fsr0h	equ	0xFEA
  8851                           fsr0l	equ	0xFE9
  8852                           wreg	equ	0xFE8
  8853                           indf1	equ	0xFE7
  8854                           postinc1	equ	0xFE6
  8855                           postdec1	equ	0xFE5
  8856                           fsr1h	equ	0xFE2
  8857                           fsr1l	equ	0xFE1
  8858                           indf2	equ	0xFDF
  8859                           postinc2	equ	0xFDE
  8860                           postdec2	equ	0xFDD
  8861                           plusw2	equ	0xFDB
  8862                           fsr2h	equ	0xFDA
  8863                           fsr2l	equ	0xFD9
  8864                           status	equ	0xFD8
  8865                           
  8866 ;; *************** function _sendVSCPDriverNack *****************
  8867 ;; Defined at:
  8868 ;;		line 1553 in file "main.c"
  8869 ;; Parameters:    Size  Location     Type
  8870 ;;		None
  8871 ;; Auto vars:     Size  Location     Type
  8872 ;;  crc             1   15[BANK0 ] unsigned char 
  8873 ;; Return value:  Size  Location     Type
  8874 ;;		None               void
  8875 ;; Registers used:
  8876 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8877 ;; Tracked objects:
  8878 ;;		On entry : E/0
  8879 ;;		On exit  : 0/0
  8880 ;;		Unchanged: 0/0
  8881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8882 ;;      Params:         0       0       0       0       0       0       0
  8883 ;;      Locals:         0       1       0       0       0       0       0
  8884 ;;      Temps:          0       0       0       0       0       0       0
  8885 ;;      Totals:         0       1       0       0       0       0       0
  8886 ;;Total ram usage:        1 bytes
  8887 ;; Hardware stack levels used:    1
  8888 ;; Hardware stack levels required when called:    6
  8889 ;; This function calls:
  8890 ;;		_WriteUSART
  8891 ;;		_sendEscapedUartData
  8892 ;;		_crc8
  8893 ;; This function is called by:
  8894 ;;		_doModeVscp
  8895 ;; This function uses a non-reentrant model
  8896 ;;
  8897                           
  8898                           	psect	text9
  8899  004302                     __ptext9:
  8900                           	opt stack 0
  8901  004302                     _sendVSCPDriverNack:
  8902                           	opt stack 23
  8903                           
  8904                           ;main.c: 1554: uint8_t crc = 0;
  8905                           
  8906                           ;incstack = 0
  8907                           ;incstack = 0
  8908  004302  0100               	movlb	0	; () banked
  8909  004304  6B6F               	clrf	sendVSCPDriverNack@crc& (0+255),b
  8910  004306                     l792:
  8911  004306  A2AC               	btfss	4012,1,c	;volatile
  8912  004308  D7FE               	goto	l792
  8913                           
  8914                           ;main.c: 1558: WriteUSART(0x10);
  8915  00430A  0E10               	movlw	16
  8916  00430C  EC37  F02A         	call	_WriteUSART
  8917  004310                     l795:
  8918  004310  A2AC               	btfss	4012,1,c	;volatile
  8919  004312  D7FE               	goto	l795
  8920                           
  8921                           ;main.c: 1560: WriteUSART(0x02);
  8922  004314  0E02               	movlw	2
  8923  004316  EC37  F02A         	call	_WriteUSART
  8924  00431A                     l798:
  8925  00431A  A2AC               	btfss	4012,1,c	;volatile
  8926  00431C  D7FE               	goto	l798
  8927                           
  8928                           ;main.c: 1564: WriteUSART(252);
  8929  00431E  0EFC               	movlw	252
  8930  004320  EC37  F02A         	call	_WriteUSART
  8931                           
  8932                           ;main.c: 1565: crc8(&crc, 252);
  8933  004324  0100               	movlb	0	; () banked
  8934  004326  0E00               	movlw	high sendVSCPDriverNack@crc
  8935  004328  6F68               	movwf	(?_crc8+1)& (0+255),b
  8936  00432A  0E6F               	movlw	low sendVSCPDriverNack@crc
  8937  00432C  6F67               	movwf	?_crc8& (0+255),b
  8938  00432E  0EFC               	movlw	252
  8939  004330  6F69               	movwf	(?_crc8+2)& (0+255),b
  8940  004332  EC64  F029         	call	_crc8	;wreg free
  8941  004336                     l801:
  8942  004336  A2AC               	btfss	4012,1,c	;volatile
  8943  004338  D7FE               	goto	l801
  8944                           
  8945                           ;main.c: 1569: WriteUSART(0);
  8946  00433A  0E00               	movlw	0
  8947  00433C  EC37  F02A         	call	_WriteUSART
  8948                           
  8949                           ;main.c: 1570: crc8(&crc, 0);
  8950  004340  D829               	call	PL50	;call to abstracted procedure
  8951  004342  EC64  F029         	call	_crc8	;wreg free
  8952                           
  8953                           ; BSR set to: 0
  8954                           ;main.c: 1573: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  8955  004346  0E00               	movlw	high sendVSCPDriverNack@crc
  8956  004348  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8957  00434A  0E6F               	movlw	low sendVSCPDriverNack@crc
  8958  00434C  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  8959  00434E  0101               	movlb	1	; () banked
  8960  004350  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  8961  004352  ECB2  F024         	call	_sendEscapedUartData
  8962  004356                     l804:
  8963  004356  A2AC               	btfss	4012,1,c	;volatile
  8964  004358  D7FE               	goto	l804
  8965                           
  8966                           ;main.c: 1577: WriteUSART(0);
  8967  00435A  0E00               	movlw	0
  8968  00435C  EC37  F02A         	call	_WriteUSART
  8969                           
  8970                           ;main.c: 1578: crc8(&crc, 0);
  8971  004360  D819               	call	PL50	;call to abstracted procedure
  8972  004362  EC64  F029         	call	_crc8	;wreg free
  8973  004366                     l807:
  8974  004366  A2AC               	btfss	4012,1,c	;volatile
  8975  004368  D7FE               	goto	l807
  8976                           
  8977                           ;main.c: 1580: WriteUSART(0);
  8978  00436A  0E00               	movlw	0
  8979  00436C  EC37  F02A         	call	_WriteUSART
  8980                           
  8981                           ;main.c: 1581: crc8(&crc, 0);
  8982  004370  D811               	call	PL50	;call to abstracted procedure
  8983  004372  EC64  F029         	call	_crc8	;wreg free
  8984                           
  8985                           ; BSR set to: 0
  8986                           ;main.c: 1584: sendEscapedUartData(crc, (0));
  8987  004376  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  8988  004378  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  8989  00437A  516F               	movf	sendVSCPDriverNack@crc& (0+255),w,b
  8990  00437C  ECB2  F024         	call	_sendEscapedUartData
  8991  004380                     l810:
  8992  004380  A2AC               	btfss	4012,1,c	;volatile
  8993  004382  D7FE               	goto	l810
  8994                           
  8995                           ;main.c: 1588: WriteUSART(0x10);
  8996  004384  0E10               	movlw	16
  8997  004386  EC37  F02A         	call	_WriteUSART
  8998  00438A                     l813:
  8999  00438A  A2AC               	btfss	4012,1,c	;volatile
  9000  00438C  D7FE               	goto	l813
  9001                           
  9002                           ;main.c: 1590: WriteUSART(0x03);
  9003  00438E  0E03               	movlw	3
  9004  004390  EF37  F02A         	goto	_WriteUSART
  9005  004394                     __end_of_sendVSCPDriverNack:
  9006                           	opt stack 0
  9007  004394                     PL50:
  9008                           	opt stack 23
  9009  004394  0100               	movlb	0	; () banked
  9010  004396  0E00               	movlw	high sendVSCPDriverNack@crc
  9011  004398  6F68               	movwf	(?_crc8+1)& (0+255),b
  9012  00439A  0E6F               	movlw	low sendVSCPDriverNack@crc
  9013  00439C  6F67               	movwf	?_crc8& (0+255),b
  9014  00439E  6B69               	clrf	(?_crc8+2)& (0+255),b
  9015  0043A0  0C00               	retlw	0
  9016  0043A2                     __end_ofPL50:
  9017                           	opt stack 0
  9018                           tblptru	equ	0xFF8
  9019                           tblptrh	equ	0xFF7
  9020                           tblptrl	equ	0xFF6
  9021                           tablat	equ	0xFF5
  9022                           prodh	equ	0xFF4
  9023                           prodl	equ	0xFF3
  9024                           intcon	equ	0xFF2
  9025                           indf0	equ	0xFEF
  9026                           postinc0	equ	0xFEE
  9027                           fsr0h	equ	0xFEA
  9028                           fsr0l	equ	0xFE9
  9029                           wreg	equ	0xFE8
  9030                           indf1	equ	0xFE7
  9031                           postinc1	equ	0xFE6
  9032                           postdec1	equ	0xFE5
  9033                           fsr1h	equ	0xFE2
  9034                           fsr1l	equ	0xFE1
  9035                           indf2	equ	0xFDF
  9036                           postinc2	equ	0xFDE
  9037                           postdec2	equ	0xFDD
  9038                           plusw2	equ	0xFDB
  9039                           fsr2h	equ	0xFDA
  9040                           fsr2l	equ	0xFD9
  9041                           status	equ	0xFD8
  9042                           
  9043 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9044 ;; Defined at:
  9045 ;;		line 1924 in file "main.c"
  9046 ;; Parameters:    Size  Location     Type
  9047 ;;		None
  9048 ;; Auto vars:     Size  Location     Type
  9049 ;;  data            8   74[BANK0 ] unsigned char [8]
  9050 ;;  id              4   82[BANK0 ] unsigned long 
  9051 ;;  dlc             1   86[BANK0 ] unsigned char 
  9052 ;; Return value:  Size  Location     Type
  9053 ;;                  1    wreg      enum E15660
  9054 ;; Registers used:
  9055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9056 ;; Tracked objects:
  9057 ;;		On entry : F/1
  9058 ;;		On exit  : F/0
  9059 ;;		Unchanged: 0/0
  9060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9061 ;;      Params:         0       0       0       0       0       0       0
  9062 ;;      Locals:         0      13       0       0       0       0       0
  9063 ;;      Temps:          0      20       0       0       0       0       0
  9064 ;;      Totals:         0      33       0       0       0       0       0
  9065 ;;Total ram usage:       33 bytes
  9066 ;; Hardware stack levels used:    1
  9067 ;; Hardware stack levels required when called:    6
  9068 ;; This function calls:
  9069 ;;		_memcpy
  9070 ;;		_sendCANFrame
  9071 ;; This function is called by:
  9072 ;;		_doModeVscp
  9073 ;; This function uses a non-reentrant model
  9074 ;;
  9075                           
  9076                           	psect	text10
  9077  003D74                     __ptext10:
  9078                           	opt stack 0
  9079  003D74                     _receiveVSCPModeCanalMsg:
  9080                           	opt stack 23
  9081                           
  9082                           ; BSR set to: 1
  9083                           ;main.c: 1925: uint32_t id;
  9084                           ;main.c: 1926: uint8_t dlc;
  9085                           ;main.c: 1927: uint8_t data[8];
  9086                           ;main.c: 1929: id = ((uint32_t) cmdbuf[5] << 26) |
  9087                           ;main.c: 1930: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9088                           ;main.c: 1931: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9089                           ;main.c: 1932: cmdbuf[5 + 3];
  9090                           
  9091                           ;incstack = 0
  9092                           ;incstack = 0
  9093  003D74  C10B  F096         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9094  003D78  0100               	movlb	0	; () banked
  9095  003D7A  6B97               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9096  003D7C  6B98               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9097  003D7E  6B99               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9098  003D80  C098  F099         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9099  003D84  C097  F098         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9100  003D88  C096  F097         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9101  003D8C  6B96               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9102  003D8E  C10A  F09A         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9103  003D92  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9104  003D94  6B9C               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9105  003D96  6B9D               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9106  003D98  C09B  F09D         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9107  003D9C  C09A  F09C         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9108  003DA0  6B9B               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9109  003DA2  6B9A               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9110  003DA4  C109  F09E         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9111  003DA8  6B9F               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9112  003DAA  6BA0               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9113  003DAC  6BA1               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9114  003DAE  0E1A               	movlw	26
  9115  003DB0                     u15045:
  9116  003DB0  90D8               	bcf	status,0,c
  9117  003DB2  379E               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9118  003DB4  379F               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9119  003DB6  37A0               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9120  003DB8  37A1               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9121  003DBA  2EE8               	decfsz	wreg,f,c
  9122  003DBC  D7F9               	goto	u15045
  9123  003DBE  519A               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9124  003DC0  119E               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9125  003DC2  6FA2               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9126  003DC4  519B               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9127  003DC6  119F               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9128  003DC8  6FA3               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9129  003DCA  519C               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9130  003DCC  11A0               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9131  003DCE  6FA4               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9132  003DD0  519D               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9133  003DD2  11A1               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9134  003DD4  6FA5               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9135  003DD6  5196               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9136  003DD8  11A2               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9137  003DDA  6FA6               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9138  003DDC  5197               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9139  003DDE  11A3               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9140  003DE0  6FA7               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9141  003DE2  5198               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9142  003DE4  11A4               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9143  003DE6  6FA8               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9144  003DE8  5199               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9145  003DEA  11A5               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9146  003DEC  6FA9               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9147  003DEE  0101               	movlb	1	; () banked
  9148  003DF0  510C               	movf	(_cmdbuf+8)& (0+255),w,b
  9149  003DF2  0100               	movlb	0	; () banked
  9150  003DF4  11A6               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9151  003DF6  6FB2               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9152  003DF8  51A7               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9153  003DFA  6FB3               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9154  003DFC  51A8               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9155  003DFE  6FB4               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9156  003E00  51A9               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9157  003E02  6FB5               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9158                           
  9159                           ;main.c: 1933: dlc = cmdbuf[4] - 4;
  9160  003E04  0101               	movlb	1	; () banked
  9161  003E06  5108               	movf	(_cmdbuf+4)& (0+255),w,b
  9162  003E08  0FFC               	addlw	252
  9163  003E0A  0100               	movlb	0	; () banked
  9164  003E0C  6FB6               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9165                           
  9166                           ; BSR set to: 0
  9167                           ;main.c: 1934: memcpy(data, cmdbuf + 5 + 4, dlc);
  9168  003E0E  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9169  003E10  6F61               	movwf	(?_memcpy+1)& (0+255),b
  9170  003E12  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9171  003E14  6F60               	movwf	?_memcpy& (0+255),b
  9172  003E16  0E0D               	movlw	low (_cmdbuf+9)
  9173  003E18  6F96               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9174  003E1A  0E01               	movlw	high (_cmdbuf+9)
  9175  003E1C  6F97               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9176  003E1E  C096  F062         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9177  003E22  C097  F063         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9178  003E26  C0B6  F064         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9179  003E2A  6B65               	clrf	(?_memcpy+5)& (0+255),b
  9180  003E2C  EC6E  F028         	call	_memcpy	;wreg free
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;main.c: 1936: return sendCANFrame(id, dlc, data);
  9184  003E30  C0B2  F08F         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9185  003E34  C0B3  F090         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9186  003E38  C0B4  F091         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9187  003E3C  C0B5  F092         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9188  003E40  C0B6  F093         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9189  003E44  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9190  003E46  6F95               	movwf	(?_sendCANFrame+6)& (0+255),b
  9191  003E48  0EAA               	movlw	low receiveVSCPModeCanalMsg@data
  9192  003E4A  6F94               	movwf	(?_sendCANFrame+5)& (0+255),b
  9193  003E4C  EF2C  F029         	goto	_sendCANFrame	;wreg free
  9194  003E50                     __end_of_receiveVSCPModeCanalMsg:
  9195                           	opt stack 0
  9196                           tblptru	equ	0xFF8
  9197                           tblptrh	equ	0xFF7
  9198                           tblptrl	equ	0xFF6
  9199                           tablat	equ	0xFF5
  9200                           prodh	equ	0xFF4
  9201                           prodl	equ	0xFF3
  9202                           intcon	equ	0xFF2
  9203                           indf0	equ	0xFEF
  9204                           postinc0	equ	0xFEE
  9205                           fsr0h	equ	0xFEA
  9206                           fsr0l	equ	0xFE9
  9207                           wreg	equ	0xFE8
  9208                           indf1	equ	0xFE7
  9209                           postinc1	equ	0xFE6
  9210                           postdec1	equ	0xFE5
  9211                           fsr1h	equ	0xFE2
  9212                           fsr1l	equ	0xFE1
  9213                           indf2	equ	0xFDF
  9214                           postinc2	equ	0xFDE
  9215                           postdec2	equ	0xFDD
  9216                           plusw2	equ	0xFDB
  9217                           fsr2h	equ	0xFDA
  9218                           fsr2l	equ	0xFD9
  9219                           status	equ	0xFD8
  9220                           
  9221 ;; *************** function _memcpy *****************
  9222 ;; Defined at:
  9223 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;  d1              2    0[BANK0 ] PTR void 
  9226 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9227 ;;  s1              2    2[BANK0 ] PTR const void 
  9228 ;;		 -> vscpData(8), cmdbuf(80), 
  9229 ;;  n               2    4[BANK0 ] unsigned int 
  9230 ;; Auto vars:     Size  Location     Type
  9231 ;;  s               2    8[BANK0 ] PTR const unsigned char 
  9232 ;;		 -> vscpData(8), cmdbuf(80), 
  9233 ;;  d               2    6[BANK0 ] PTR unsigned char 
  9234 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  2    0[BANK0 ] PTR void 
  9237 ;; Registers used:
  9238 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9239 ;; Tracked objects:
  9240 ;;		On entry : F/0
  9241 ;;		On exit  : F/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9244 ;;      Params:         0       6       0       0       0       0       0
  9245 ;;      Locals:         0       4       0       0       0       0       0
  9246 ;;      Temps:          0       0       0       0       0       0       0
  9247 ;;      Totals:         0      10       0       0       0       0       0
  9248 ;;Total ram usage:       10 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    3
  9251 ;; This function calls:
  9252 ;;		Nothing
  9253 ;; This function is called by:
  9254 ;;		_doModeSLCAN
  9255 ;;		_receiveVSCPModeCanalMsg
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           	psect	text11
  9260  0050DC                     __ptext11:
  9261                           	opt stack 0
  9262  0050DC                     _memcpy:
  9263                           	opt stack 26
  9264                           
  9265                           ; BSR set to: 0
  9266                           
  9267                           ; BSR set to: 0
  9268                           ;incstack = 0
  9269                           ;incstack = 0
  9270  0050DC  C062  F068         	movff	memcpy@s1,memcpy@s
  9271  0050E0  C063  F069         	movff	memcpy@s1+1,memcpy@s+1
  9272  0050E4  C060  F066         	movff	memcpy@d1,memcpy@d
  9273  0050E8  C061  F067         	movff	memcpy@d1+1,memcpy@d+1
  9274  0050EC  D00E               	goto	l11898
  9275  0050EE                     l11892:
  9276                           
  9277                           ; BSR set to: 0
  9278  0050EE  C068  FFD9         	movff	memcpy@s,fsr2l
  9279  0050F2  C069  FFDA         	movff	memcpy@s+1,fsr2h
  9280  0050F6  C066  FFE1         	movff	memcpy@d,fsr1l
  9281  0050FA  C067  FFE2         	movff	memcpy@d+1,fsr1h
  9282  0050FE  CFDF FFE7          	movff	indf2,indf1
  9283                           
  9284                           ; BSR set to: 0
  9285  005102  4B68               	infsnz	memcpy@s& (0+255),f,b
  9286  005104  2B69               	incf	(memcpy@s+1)& (0+255),f,b
  9287                           
  9288                           ; BSR set to: 0
  9289  005106  4B66               	infsnz	memcpy@d& (0+255),f,b
  9290  005108  2B67               	incf	(memcpy@d+1)& (0+255),f,b
  9291  00510A                     l11898:
  9292                           
  9293                           ; BSR set to: 0
  9294  00510A  0764               	decf	memcpy@n& (0+255),f,b
  9295  00510C  A0D8               	btfss	status,0,c
  9296  00510E  0765               	decf	(memcpy@n+1)& (0+255),f,b
  9297  005110  0100               	movlb	0	; () banked
  9298  005112  2964               	incf	memcpy@n& (0+255),w,b
  9299  005114  B4D8               	btfsc	status,2,c
  9300  005116  2965               	incf	(memcpy@n+1)& (0+255),w,b
  9301  005118  B4D8               	btfsc	status,2,c
  9302                           
  9303                           ; BSR set to: 0
  9304  00511A  0012               	return	
  9305  00511C  D7E8               	goto	l11892
  9306  00511E                     __end_of_memcpy:
  9307                           	opt stack 0
  9308                           tblptru	equ	0xFF8
  9309                           tblptrh	equ	0xFF7
  9310                           tblptrl	equ	0xFF6
  9311                           tablat	equ	0xFF5
  9312                           prodh	equ	0xFF4
  9313                           prodl	equ	0xFF3
  9314                           intcon	equ	0xFF2
  9315                           indf0	equ	0xFEF
  9316                           postinc0	equ	0xFEE
  9317                           fsr0h	equ	0xFEA
  9318                           fsr0l	equ	0xFE9
  9319                           wreg	equ	0xFE8
  9320                           indf1	equ	0xFE7
  9321                           postinc1	equ	0xFE6
  9322                           postdec1	equ	0xFE5
  9323                           fsr1h	equ	0xFE2
  9324                           fsr1l	equ	0xFE1
  9325                           indf2	equ	0xFDF
  9326                           postinc2	equ	0xFDE
  9327                           postdec2	equ	0xFDD
  9328                           plusw2	equ	0xFDB
  9329                           fsr2h	equ	0xFDA
  9330                           fsr2l	equ	0xFD9
  9331                           status	equ	0xFD8
  9332                           
  9333 ;; *************** function _sendVSCPDriverAck *****************
  9334 ;; Defined at:
  9335 ;;		line 1509 in file "main.c"
  9336 ;; Parameters:    Size  Location     Type
  9337 ;;		None
  9338 ;; Auto vars:     Size  Location     Type
  9339 ;;  crc             1   15[BANK0 ] unsigned char 
  9340 ;; Return value:  Size  Location     Type
  9341 ;;		None               void
  9342 ;; Registers used:
  9343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9344 ;; Tracked objects:
  9345 ;;		On entry : E/1
  9346 ;;		On exit  : 0/0
  9347 ;;		Unchanged: 0/0
  9348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9349 ;;      Params:         0       0       0       0       0       0       0
  9350 ;;      Locals:         0       1       0       0       0       0       0
  9351 ;;      Temps:          0       0       0       0       0       0       0
  9352 ;;      Totals:         0       1       0       0       0       0       0
  9353 ;;Total ram usage:        1 bytes
  9354 ;; Hardware stack levels used:    1
  9355 ;; Hardware stack levels required when called:    6
  9356 ;; This function calls:
  9357 ;;		_WriteUSART
  9358 ;;		_sendEscapedUartData
  9359 ;;		_crc8
  9360 ;; This function is called by:
  9361 ;;		_doModeVscp
  9362 ;; This function uses a non-reentrant model
  9363 ;;
  9364                           
  9365                           	psect	text12
  9366  0043A2                     __ptext12:
  9367                           	opt stack 0
  9368  0043A2                     _sendVSCPDriverAck:
  9369                           	opt stack 23
  9370                           
  9371                           ;main.c: 1510: uint8_t crc = 0;
  9372                           
  9373                           ; BSR set to: 0
  9374                           ;incstack = 0
  9375                           ;incstack = 0
  9376  0043A2  0100               	movlb	0	; () banked
  9377  0043A4  6B6F               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9378  0043A6                     l765:
  9379  0043A6  A2AC               	btfss	4012,1,c	;volatile
  9380  0043A8  D7FE               	goto	l765
  9381                           
  9382                           ;main.c: 1514: WriteUSART(0x10);
  9383  0043AA  0E10               	movlw	16
  9384  0043AC  EC37  F02A         	call	_WriteUSART
  9385  0043B0                     l768:
  9386  0043B0  A2AC               	btfss	4012,1,c	;volatile
  9387  0043B2  D7FE               	goto	l768
  9388                           
  9389                           ;main.c: 1516: WriteUSART(0x02);
  9390  0043B4  0E02               	movlw	2
  9391  0043B6  EC37  F02A         	call	_WriteUSART
  9392  0043BA                     l771:
  9393  0043BA  A2AC               	btfss	4012,1,c	;volatile
  9394  0043BC  D7FE               	goto	l771
  9395                           
  9396                           ;main.c: 1520: WriteUSART(251);
  9397  0043BE  0EFB               	movlw	251
  9398  0043C0  EC37  F02A         	call	_WriteUSART
  9399                           
  9400                           ;main.c: 1521: crc8(&crc, 251);
  9401  0043C4  0100               	movlb	0	; () banked
  9402  0043C6  0E00               	movlw	high sendVSCPDriverAck@crc
  9403  0043C8  6F68               	movwf	(?_crc8+1)& (0+255),b
  9404  0043CA  0E6F               	movlw	low sendVSCPDriverAck@crc
  9405  0043CC  6F67               	movwf	?_crc8& (0+255),b
  9406  0043CE  0EFB               	movlw	251
  9407  0043D0  6F69               	movwf	(?_crc8+2)& (0+255),b
  9408  0043D2  EC64  F029         	call	_crc8	;wreg free
  9409  0043D6                     l774:
  9410  0043D6  A2AC               	btfss	4012,1,c	;volatile
  9411  0043D8  D7FE               	goto	l774
  9412                           
  9413                           ;main.c: 1525: WriteUSART(0);
  9414  0043DA  0E00               	movlw	0
  9415  0043DC  EC37  F02A         	call	_WriteUSART
  9416                           
  9417                           ;main.c: 1526: crc8(&crc, 0);
  9418  0043E0  D829               	call	PL46	;call to abstracted procedure
  9419  0043E2  EC64  F029         	call	_crc8	;wreg free
  9420                           
  9421                           ; BSR set to: 0
  9422                           ;main.c: 1529: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9423  0043E6  0E00               	movlw	high sendVSCPDriverAck@crc
  9424  0043E8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9425  0043EA  0E6F               	movlw	low sendVSCPDriverAck@crc
  9426  0043EC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9427  0043EE  0101               	movlb	1	; () banked
  9428  0043F0  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9429  0043F2  ECB2  F024         	call	_sendEscapedUartData
  9430  0043F6                     l777:
  9431  0043F6  A2AC               	btfss	4012,1,c	;volatile
  9432  0043F8  D7FE               	goto	l777
  9433                           
  9434                           ;main.c: 1533: WriteUSART(0);
  9435  0043FA  0E00               	movlw	0
  9436  0043FC  EC37  F02A         	call	_WriteUSART
  9437                           
  9438                           ;main.c: 1534: crc8(&crc, 0);
  9439  004400  D819               	call	PL46	;call to abstracted procedure
  9440  004402  EC64  F029         	call	_crc8	;wreg free
  9441  004406                     l780:
  9442  004406  A2AC               	btfss	4012,1,c	;volatile
  9443  004408  D7FE               	goto	l780
  9444                           
  9445                           ;main.c: 1536: WriteUSART(0);
  9446  00440A  0E00               	movlw	0
  9447  00440C  EC37  F02A         	call	_WriteUSART
  9448                           
  9449                           ;main.c: 1537: crc8(&crc, 0);
  9450  004410  D811               	call	PL46	;call to abstracted procedure
  9451  004412  EC64  F029         	call	_crc8	;wreg free
  9452                           
  9453                           ; BSR set to: 0
  9454                           ;main.c: 1540: sendEscapedUartData(crc, (0));
  9455  004416  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9456  004418  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9457  00441A  516F               	movf	sendVSCPDriverAck@crc& (0+255),w,b
  9458  00441C  ECB2  F024         	call	_sendEscapedUartData
  9459  004420                     l783:
  9460  004420  A2AC               	btfss	4012,1,c	;volatile
  9461  004422  D7FE               	goto	l783
  9462                           
  9463                           ;main.c: 1544: WriteUSART(0x10);
  9464  004424  0E10               	movlw	16
  9465  004426  EC37  F02A         	call	_WriteUSART
  9466  00442A                     l786:
  9467  00442A  A2AC               	btfss	4012,1,c	;volatile
  9468  00442C  D7FE               	goto	l786
  9469                           
  9470                           ;main.c: 1546: WriteUSART(0x03);
  9471  00442E  0E03               	movlw	3
  9472  004430  EF37  F02A         	goto	_WriteUSART
  9473  004434                     __end_of_sendVSCPDriverAck:
  9474                           	opt stack 0
  9475  004434                     PL46:
  9476                           	opt stack 23
  9477  004434  0100               	movlb	0	; () banked
  9478  004436  0E00               	movlw	high sendVSCPDriverAck@crc
  9479  004438  6F68               	movwf	(?_crc8+1)& (0+255),b
  9480  00443A  0E6F               	movlw	low sendVSCPDriverAck@crc
  9481  00443C  6F67               	movwf	?_crc8& (0+255),b
  9482  00443E  6B69               	clrf	(?_crc8+2)& (0+255),b
  9483  004440  0C00               	retlw	0
  9484  004442                     __end_ofPL46:
  9485                           	opt stack 0
  9486                           tblptru	equ	0xFF8
  9487                           tblptrh	equ	0xFF7
  9488                           tblptrl	equ	0xFF6
  9489                           tablat	equ	0xFF5
  9490                           prodh	equ	0xFF4
  9491                           prodl	equ	0xFF3
  9492                           intcon	equ	0xFF2
  9493                           indf0	equ	0xFEF
  9494                           postinc0	equ	0xFEE
  9495                           fsr0h	equ	0xFEA
  9496                           fsr0l	equ	0xFE9
  9497                           wreg	equ	0xFE8
  9498                           indf1	equ	0xFE7
  9499                           postinc1	equ	0xFE6
  9500                           postdec1	equ	0xFE5
  9501                           fsr1h	equ	0xFE2
  9502                           fsr1l	equ	0xFE1
  9503                           indf2	equ	0xFDF
  9504                           postinc2	equ	0xFDE
  9505                           postdec2	equ	0xFDD
  9506                           plusw2	equ	0xFDB
  9507                           fsr2h	equ	0xFDA
  9508                           fsr2l	equ	0xFD9
  9509                           status	equ	0xFD8
  9510                           
  9511 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9512 ;; Defined at:
  9513 ;;		line 1461 in file "main.c"
  9514 ;; Parameters:    Size  Location     Type
  9515 ;;  errorcode       1    wreg     unsigned char 
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;  errorcode       1   15[BANK0 ] unsigned char 
  9518 ;;  crc             1   16[BANK0 ] unsigned char 
  9519 ;; Return value:  Size  Location     Type
  9520 ;;		None               void
  9521 ;; Registers used:
  9522 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9523 ;; Tracked objects:
  9524 ;;		On entry : E/0
  9525 ;;		On exit  : 0/0
  9526 ;;		Unchanged: 0/0
  9527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9528 ;;      Params:         0       0       0       0       0       0       0
  9529 ;;      Locals:         0       2       0       0       0       0       0
  9530 ;;      Temps:          0       0       0       0       0       0       0
  9531 ;;      Totals:         0       2       0       0       0       0       0
  9532 ;;Total ram usage:        2 bytes
  9533 ;; Hardware stack levels used:    1
  9534 ;; Hardware stack levels required when called:    6
  9535 ;; This function calls:
  9536 ;;		_WriteUSART
  9537 ;;		_sendEscapedUartData
  9538 ;;		_crc8
  9539 ;; This function is called by:
  9540 ;;		_doModeVscp
  9541 ;; This function uses a non-reentrant model
  9542 ;;
  9543                           
  9544                           	psect	text13
  9545  00418E                     __ptext13:
  9546                           	opt stack 0
  9547  00418E                     _sendVSCPDriverErrorFrame:
  9548                           	opt stack 23
  9549                           
  9550                           ;incstack = 0
  9551                           ;incstack = 0
  9552                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9553  00418E  CFE8 F06F          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9554                           
  9555                           ;main.c: 1462: uint8_t crc = 0;
  9556  004192  0100               	movlb	0	; () banked
  9557  004194  6B70               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  9558  004196                     l738:
  9559  004196  A2AC               	btfss	4012,1,c	;volatile
  9560  004198  D7FE               	goto	l738
  9561                           
  9562                           ;main.c: 1466: WriteUSART(0x10);
  9563  00419A  0E10               	movlw	16
  9564  00419C  EC37  F02A         	call	_WriteUSART
  9565  0041A0                     l741:
  9566  0041A0  A2AC               	btfss	4012,1,c	;volatile
  9567  0041A2  D7FE               	goto	l741
  9568                           
  9569                           ;main.c: 1468: WriteUSART(0x02);
  9570  0041A4  0E02               	movlw	2
  9571  0041A6  EC37  F02A         	call	_WriteUSART
  9572  0041AA                     l744:
  9573  0041AA  A2AC               	btfss	4012,1,c	;volatile
  9574  0041AC  D7FE               	goto	l744
  9575                           
  9576                           ;main.c: 1472: WriteUSART(253);
  9577  0041AE  0EFD               	movlw	253
  9578  0041B0  EC37  F02A         	call	_WriteUSART
  9579                           
  9580                           ;main.c: 1473: crc8(&crc, 253);
  9581  0041B4  0100               	movlb	0	; () banked
  9582  0041B6  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9583  0041B8  6F68               	movwf	(?_crc8+1)& (0+255),b
  9584  0041BA  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9585  0041BC  6F67               	movwf	?_crc8& (0+255),b
  9586  0041BE  0EFD               	movlw	253
  9587  0041C0  6F69               	movwf	(?_crc8+2)& (0+255),b
  9588  0041C2  EC64  F029         	call	_crc8	;wreg free
  9589  0041C6                     l747:
  9590  0041C6  A2AC               	btfss	4012,1,c	;volatile
  9591  0041C8  D7FE               	goto	l747
  9592                           
  9593                           ;main.c: 1477: WriteUSART(0);
  9594  0041CA  0E00               	movlw	0
  9595  0041CC  EC37  F02A         	call	_WriteUSART
  9596                           
  9597                           ;main.c: 1478: crc8(&crc, 0);
  9598  0041D0  D836               	call	PL88	;call to abstracted procedure
  9599  0041D2  EC64  F029         	call	_crc8	;wreg free
  9600                           
  9601                           ; BSR set to: 0
  9602                           ;main.c: 1481: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9603  0041D6  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9604  0041D8  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9605  0041DA  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9606  0041DC  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9607  0041DE  0101               	movlb	1	; () banked
  9608  0041E0  5106               	movf	(_cmdbuf+2)& (0+255),w,b
  9609  0041E2  ECB2  F024         	call	_sendEscapedUartData
  9610  0041E6                     l750:
  9611  0041E6  A2AC               	btfss	4012,1,c	;volatile
  9612  0041E8  D7FE               	goto	l750
  9613                           
  9614                           ;main.c: 1485: WriteUSART(0);
  9615  0041EA  0E00               	movlw	0
  9616  0041EC  EC37  F02A         	call	_WriteUSART
  9617                           
  9618                           ;main.c: 1486: crc8(&crc, 0);
  9619  0041F0  D826               	call	PL88	;call to abstracted procedure
  9620  0041F2  EC64  F029         	call	_crc8	;wreg free
  9621  0041F6                     l753:
  9622  0041F6  A2AC               	btfss	4012,1,c	;volatile
  9623  0041F8  D7FE               	goto	l753
  9624                           
  9625                           ;main.c: 1488: WriteUSART(1);
  9626  0041FA  0E01               	movlw	1
  9627  0041FC  EC37  F02A         	call	_WriteUSART
  9628                           
  9629                           ;main.c: 1489: crc8(&crc, 1);
  9630  004200  0100               	movlb	0	; () banked
  9631  004202  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9632  004204  6F68               	movwf	(?_crc8+1)& (0+255),b
  9633  004206  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9634  004208  6F67               	movwf	?_crc8& (0+255),b
  9635  00420A  0E01               	movlw	1
  9636  00420C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9637  00420E  EC64  F029         	call	_crc8	;wreg free
  9638                           
  9639                           ; BSR set to: 0
  9640                           ;main.c: 1492: sendEscapedUartData(errorcode, &crc);
  9641  004212  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9642  004214  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9643  004216  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9644  004218  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9645  00421A  516F               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9646  00421C  ECB2  F024         	call	_sendEscapedUartData
  9647                           
  9648                           ; BSR set to: 0
  9649                           ;main.c: 1495: sendEscapedUartData(crc, (0));
  9650  004220  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9651  004222  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
  9652  004224  5170               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9653  004226  ECB2  F024         	call	_sendEscapedUartData
  9654  00422A                     l756:
  9655  00422A  A2AC               	btfss	4012,1,c	;volatile
  9656  00422C  D7FE               	goto	l756
  9657                           
  9658                           ;main.c: 1499: WriteUSART(0x10);
  9659  00422E  0E10               	movlw	16
  9660  004230  EC37  F02A         	call	_WriteUSART
  9661  004234                     l759:
  9662  004234  A2AC               	btfss	4012,1,c	;volatile
  9663  004236  D7FE               	goto	l759
  9664                           
  9665                           ;main.c: 1501: WriteUSART(0x03);
  9666  004238  0E03               	movlw	3
  9667  00423A  EF37  F02A         	goto	_WriteUSART
  9668  00423E                     __end_of_sendVSCPDriverErrorFrame:
  9669                           	opt stack 0
  9670  00423E                     PL88:
  9671                           	opt stack 23
  9672  00423E  0100               	movlb	0	; () banked
  9673  004240  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9674  004242  6F68               	movwf	(?_crc8+1)& (0+255),b
  9675  004244  0E70               	movlw	low sendVSCPDriverErrorFrame@crc
  9676  004246  6F67               	movwf	?_crc8& (0+255),b
  9677  004248  6B69               	clrf	(?_crc8+2)& (0+255),b
  9678  00424A  0C00               	retlw	0
  9679  00424C                     __end_ofPL88:
  9680                           	opt stack 0
  9681                           tblptru	equ	0xFF8
  9682                           tblptrh	equ	0xFF7
  9683                           tblptrl	equ	0xFF6
  9684                           tablat	equ	0xFF5
  9685                           prodh	equ	0xFF4
  9686                           prodl	equ	0xFF3
  9687                           intcon	equ	0xFF2
  9688                           indf0	equ	0xFEF
  9689                           postinc0	equ	0xFEE
  9690                           fsr0h	equ	0xFEA
  9691                           fsr0l	equ	0xFE9
  9692                           wreg	equ	0xFE8
  9693                           indf1	equ	0xFE7
  9694                           postinc1	equ	0xFE6
  9695                           postdec1	equ	0xFE5
  9696                           fsr1h	equ	0xFE2
  9697                           fsr1l	equ	0xFE1
  9698                           indf2	equ	0xFDF
  9699                           postinc2	equ	0xFDE
  9700                           postdec2	equ	0xFDD
  9701                           plusw2	equ	0xFDB
  9702                           fsr2h	equ	0xFDA
  9703                           fsr2l	equ	0xFD9
  9704                           status	equ	0xFD8
  9705                           
  9706 ;; *************** function _calcCRC *****************
  9707 ;; Defined at:
  9708 ;;		line 2143 in file "main.c"
  9709 ;; Parameters:    Size  Location     Type
  9710 ;;  p               2   12[BANK0 ] PTR unsigned char 
  9711 ;;		 -> cmdbuf(80), 
  9712 ;;  len             1   14[BANK0 ] unsigned char 
  9713 ;; Auto vars:     Size  Location     Type
  9714 ;;  crc             1   16[BANK0 ] unsigned char 
  9715 ;;  j               1   15[BANK0 ] unsigned char 
  9716 ;; Return value:  Size  Location     Type
  9717 ;;                  1    wreg      unsigned char 
  9718 ;; Registers used:
  9719 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9720 ;; Tracked objects:
  9721 ;;		On entry : F/0
  9722 ;;		On exit  : F/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9725 ;;      Params:         0       3       0       0       0       0       0
  9726 ;;      Locals:         0       2       0       0       0       0       0
  9727 ;;      Temps:          0       0       0       0       0       0       0
  9728 ;;      Totals:         0       5       0       0       0       0       0
  9729 ;;Total ram usage:        5 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; Hardware stack levels required when called:    5
  9732 ;; This function calls:
  9733 ;;		_crc8
  9734 ;; This function is called by:
  9735 ;;		_doModeVscp
  9736 ;; This function uses a non-reentrant model
  9737 ;;
  9738                           
  9739                           	psect	text14
  9740  005360                     __ptext14:
  9741                           	opt stack 0
  9742  005360                     _calcCRC:
  9743                           	opt stack 24
  9744                           
  9745                           ; BSR set to: 0
  9746                           ;main.c: 2144: uint8_t j;
  9747                           ;main.c: 2145: uint8_t crc = 0;
  9748                           
  9749                           ;incstack = 0
  9750                           ;incstack = 0
  9751  005360  6B70               	clrf	calcCRC@crc& (0+255),b
  9752                           
  9753                           ;main.c: 2147: for (j = 0; j < len; j++) {
  9754  005362  6B6F               	clrf	calcCRC@j& (0+255),b
  9755  005364  D00F               	goto	l11658
  9756  005366                     l11654:
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;main.c: 2148: crc8(&crc, p[j]);
  9760  005366  0E00               	movlw	high calcCRC@crc
  9761  005368  6F68               	movwf	(?_crc8+1)& (0+255),b
  9762  00536A  0E70               	movlw	low calcCRC@crc
  9763  00536C  6F67               	movwf	?_crc8& (0+255),b
  9764  00536E  516F               	movf	calcCRC@j& (0+255),w,b
  9765  005370  256C               	addwf	calcCRC@p& (0+255),w,b
  9766  005372  6ED9               	movwf	fsr2l,c
  9767  005374  0E00               	movlw	0
  9768  005376  216D               	addwfc	(calcCRC@p+1)& (0+255),w,b
  9769  005378  6EDA               	movwf	fsr2h,c
  9770  00537A  50DF               	movf	indf2,w,c
  9771  00537C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9772  00537E  EC64  F029         	call	_crc8	;wreg free
  9773                           
  9774                           ; BSR set to: 0
  9775  005382  2B6F               	incf	calcCRC@j& (0+255),f,b
  9776  005384                     l11658:
  9777                           
  9778                           ; BSR set to: 0
  9779  005384  516E               	movf	calcCRC@len& (0+255),w,b
  9780  005386  5D6F               	subwf	calcCRC@j& (0+255),w,b
  9781  005388  E3EE               	bnc	l11654
  9782                           
  9783                           ; BSR set to: 0
  9784                           ;main.c: 2149: }
  9785                           ;main.c: 2151: return crc;
  9786  00538A  5170               	movf	calcCRC@crc& (0+255),w,b
  9787                           
  9788                           ; BSR set to: 0
  9789  00538C  0012               	return	
  9790  00538E                     __end_of_calcCRC:
  9791                           	opt stack 0
  9792                           tblptru	equ	0xFF8
  9793                           tblptrh	equ	0xFF7
  9794                           tblptrl	equ	0xFF6
  9795                           tablat	equ	0xFF5
  9796                           prodh	equ	0xFF4
  9797                           prodl	equ	0xFF3
  9798                           intcon	equ	0xFF2
  9799                           indf0	equ	0xFEF
  9800                           postinc0	equ	0xFEE
  9801                           fsr0h	equ	0xFEA
  9802                           fsr0l	equ	0xFE9
  9803                           wreg	equ	0xFE8
  9804                           indf1	equ	0xFE7
  9805                           postinc1	equ	0xFE6
  9806                           postdec1	equ	0xFE5
  9807                           fsr1h	equ	0xFE2
  9808                           fsr1l	equ	0xFE1
  9809                           indf2	equ	0xFDF
  9810                           postinc2	equ	0xFDE
  9811                           postdec2	equ	0xFDD
  9812                           plusw2	equ	0xFDB
  9813                           fsr2h	equ	0xFDA
  9814                           fsr2l	equ	0xFD9
  9815                           status	equ	0xFD8
  9816                           
  9817 ;; *************** function _receivePrintEventCANAL *****************
  9818 ;; Defined at:
  9819 ;;		line 1705 in file "main.c"
  9820 ;; Parameters:    Size  Location     Type
  9821 ;;		None
  9822 ;; Auto vars:     Size  Location     Type
  9823 ;;  crc             1   32[BANK0 ] unsigned char 
  9824 ;;  data            8   18[BANK0 ] unsigned char [8]
  9825 ;;  id              4   27[BANK0 ] unsigned long 
  9826 ;;  dlc             1   31[BANK0 ] unsigned char 
  9827 ;;  i               1   26[BANK0 ] unsigned char 
  9828 ;; Return value:  Size  Location     Type
  9829 ;;                  1    wreg      enum E15660
  9830 ;; Registers used:
  9831 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9832 ;; Tracked objects:
  9833 ;;		On entry : F/1
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9837 ;;      Params:         0       0       0       0       0       0       0
  9838 ;;      Locals:         0      15       0       0       0       0       0
  9839 ;;      Temps:          0       0       0       0       0       0       0
  9840 ;;      Totals:         0      15       0       0       0       0       0
  9841 ;;Total ram usage:       15 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    6
  9844 ;; This function calls:
  9845 ;;		_WriteUSART
  9846 ;;		_sendEscapedUartData
  9847 ;;		_crc8
  9848 ;;		_getCANFrame
  9849 ;; This function is called by:
  9850 ;;		_doModeVscp
  9851 ;; This function uses a non-reentrant model
  9852 ;;
  9853                           
  9854                           	psect	text15
  9855  0031CC                     __ptext15:
  9856                           	opt stack 0
  9857  0031CC                     _receivePrintEventCANAL:
  9858                           	opt stack 23
  9859                           
  9860                           ; BSR set to: 1
  9861                           ;main.c: 1706: uint8_t i;
  9862                           ;main.c: 1707: uint32_t id;
  9863                           ;main.c: 1708: uint8_t dlc;
  9864                           ;main.c: 1709: uint8_t data[8];
  9865                           ;main.c: 1711: if (getCANFrame(&id, &dlc, &data)) {
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;incstack = 0
  9869                           ;incstack = 0
  9870  0031CC  0100               	movlb	0	; () banked
  9871  0031CE  0E00               	movlw	high receivePrintEventCANAL@dlc
  9872  0031D0  6F6E               	movwf	(?_getCANFrame+1)& (0+255),b
  9873  0031D2  0E7F               	movlw	low receivePrintEventCANAL@dlc
  9874  0031D4  6F6D               	movwf	?_getCANFrame& (0+255),b
  9875  0031D6  0E00               	movlw	high receivePrintEventCANAL@data
  9876  0031D8  6F70               	movwf	(?_getCANFrame+3)& (0+255),b
  9877  0031DA  0E72               	movlw	low receivePrintEventCANAL@data
  9878  0031DC  6F6F               	movwf	(?_getCANFrame+2)& (0+255),b
  9879  0031DE  0E7B               	movlw	receivePrintEventCANAL@id& (0+255)
  9880  0031E0  ECDB  F025         	call	_getCANFrame
  9881  0031E4  0900               	iorlw	0
  9882  0031E6  E101 D08F          	bz	l908
  9883                           
  9884                           ; BSR set to: 0
  9885                           ;main.c: 1713: uint8_t crc = 0;
  9886  0031EA  6B80               	clrf	receivePrintEventCANAL@crc& (0+255),b
  9887                           
  9888                           ; BSR set to: 0
  9889                           ;main.c: 1716: cntRxFrames++;
  9890  0031EC  2BDD               	incf	_cntRxFrames& (0+255),f,b
  9891  0031EE  0E00               	movlw	0
  9892  0031F0  23DE               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  9893  0031F2  23DF               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  9894  0031F4  23E0               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  9895                           
  9896                           ;main.c: 1717: cntRxBytes += dlc;
  9897  0031F6  517F               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
  9898  0031F8  27D9               	addwf	_cntRxBytes& (0+255),f,b
  9899  0031FA  0E00               	movlw	0
  9900  0031FC  23DA               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  9901  0031FE  23DB               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  9902  003200  23DC               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  9903  003202                     l887:
  9904  003202  A2AC               	btfss	4012,1,c	;volatile
  9905  003204  D7FE               	goto	l887
  9906                           
  9907                           ;main.c: 1721: WriteUSART(0x10);
  9908  003206  0E10               	movlw	16
  9909  003208  EC37  F02A         	call	_WriteUSART
  9910  00320C                     l890:
  9911  00320C  A2AC               	btfss	4012,1,c	;volatile
  9912  00320E  D7FE               	goto	l890
  9913                           
  9914                           ;main.c: 1723: WriteUSART(0x02);
  9915  003210  0E02               	movlw	2
  9916  003212  EC37  F02A         	call	_WriteUSART
  9917  003216                     l893:
  9918  003216  A2AC               	btfss	4012,1,c	;volatile
  9919  003218  D7FE               	goto	l893
  9920                           
  9921                           ;main.c: 1727: WriteUSART(2);
  9922  00321A  0E02               	movlw	2
  9923  00321C  EC37  F02A         	call	_WriteUSART
  9924                           
  9925                           ;main.c: 1728: crc8(&crc, 2);
  9926  003220  0100               	movlb	0	; () banked
  9927  003222  0E00               	movlw	high receivePrintEventCANAL@crc
  9928  003224  6F68               	movwf	(?_crc8+1)& (0+255),b
  9929  003226  0E80               	movlw	low receivePrintEventCANAL@crc
  9930  003228  6F67               	movwf	?_crc8& (0+255),b
  9931  00322A  0E02               	movlw	2
  9932  00322C  6F69               	movwf	(?_crc8+2)& (0+255),b
  9933  00322E  EC64  F029         	call	_crc8	;wreg free
  9934  003232                     l896:
  9935  003232  A2AC               	btfss	4012,1,c	;volatile
  9936  003234  D7FE               	goto	l896
  9937                           
  9938                           ;main.c: 1732: WriteUSART(0);
  9939  003236  0E00               	movlw	0
  9940  003238  EC37  F02A         	call	_WriteUSART
  9941                           
  9942                           ;main.c: 1733: crc8(&crc, 0);
  9943  00323C  0100               	movlb	0	; () banked
  9944  00323E  0E00               	movlw	high receivePrintEventCANAL@crc
  9945  003240  6F68               	movwf	(?_crc8+1)& (0+255),b
  9946  003242  0E80               	movlw	low receivePrintEventCANAL@crc
  9947  003244  6F67               	movwf	?_crc8& (0+255),b
  9948  003246  0E00               	movlw	0
  9949  003248  6B69               	clrf	(?_crc8+2)& (0+255),b
  9950  00324A  EC64  F029         	call	_crc8	;wreg free
  9951                           
  9952                           ; BSR set to: 0
  9953                           ;main.c: 1736: sendEscapedUartData(sequencyno, &crc);
  9954  00324E  0E00               	movlw	high receivePrintEventCANAL@crc
  9955  003250  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9956  003252  0E80               	movlw	low receivePrintEventCANAL@crc
  9957  003254  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9958  003256  51FA               	movf	_sequencyno& (0+255),w,b
  9959  003258  ECB2  F024         	call	_sendEscapedUartData
  9960                           
  9961                           ; BSR set to: 0
  9962                           ;main.c: 1737: sequencyno++;
  9963  00325C  2BFA               	incf	_sequencyno& (0+255),f,b
  9964                           
  9965                           ; BSR set to: 0
  9966                           ;main.c: 1740: sendEscapedUartData(0, &crc);
  9967  00325E  0E00               	movlw	high receivePrintEventCANAL@crc
  9968  003260  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9969  003262  0E80               	movlw	low receivePrintEventCANAL@crc
  9970  003264  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9971  003266  0E00               	movlw	0
  9972  003268  ECB2  F024         	call	_sendEscapedUartData
  9973                           
  9974                           ; BSR set to: 0
  9975                           ;main.c: 1741: sendEscapedUartData(4 + dlc, &crc);
  9976  00326C  0E00               	movlw	high receivePrintEventCANAL@crc
  9977  00326E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9978  003270  0E80               	movlw	low receivePrintEventCANAL@crc
  9979  003272  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9980  003274  517F               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
  9981  003276  0F04               	addlw	4
  9982  003278  ECB2  F024         	call	_sendEscapedUartData
  9983                           
  9984                           ; BSR set to: 0
  9985                           ;main.c: 1747: sendEscapedUartData((id >> 24) & 0xff, &crc);
  9986  00327C  0E00               	movlw	high receivePrintEventCANAL@crc
  9987  00327E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9988  003280  0E80               	movlw	low receivePrintEventCANAL@crc
  9989  003282  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
  9990  003284  0100               	movlb	0	; () banked
  9991  003286  517E               	movf	(receivePrintEventCANAL@id+3)& (0+255),w,b
  9992  003288  ECB2  F024         	call	_sendEscapedUartData
  9993                           
  9994                           ; BSR set to: 0
  9995                           ;main.c: 1748: sendEscapedUartData((id >> 16) & 0xff, &crc);
  9996  00328C  0E00               	movlw	high receivePrintEventCANAL@crc
  9997  00328E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9998  003290  0E80               	movlw	low receivePrintEventCANAL@crc
  9999  003292  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10000  003294  0100               	movlb	0	; () banked
 10001  003296  517D               	movf	(receivePrintEventCANAL@id+2)& (0+255),w,b
 10002  003298  ECB2  F024         	call	_sendEscapedUartData
 10003                           
 10004                           ; BSR set to: 0
 10005                           ;main.c: 1749: sendEscapedUartData((id >> 8) & 0xff, &crc);
 10006  00329C  0E00               	movlw	high receivePrintEventCANAL@crc
 10007  00329E  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10008  0032A0  0E80               	movlw	low receivePrintEventCANAL@crc
 10009  0032A2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10010  0032A4  0100               	movlb	0	; () banked
 10011  0032A6  517C               	movf	(receivePrintEventCANAL@id+1)& (0+255),w,b
 10012  0032A8  ECB2  F024         	call	_sendEscapedUartData
 10013                           
 10014                           ; BSR set to: 0
 10015                           ;main.c: 1750: sendEscapedUartData(id & 0xff, &crc);
 10016  0032AC  0E00               	movlw	high receivePrintEventCANAL@crc
 10017  0032AE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10018  0032B0  0E80               	movlw	low receivePrintEventCANAL@crc
 10019  0032B2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10020  0032B4  517B               	movf	receivePrintEventCANAL@id& (0+255),w,b
 10021  0032B6  ECB2  F024         	call	_sendEscapedUartData
 10022                           
 10023                           ; BSR set to: 0
 10024                           ;main.c: 1753: sendEscapedUartData(dlc, &crc);
 10025  0032BA  0E00               	movlw	high receivePrintEventCANAL@crc
 10026  0032BC  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10027  0032BE  0E80               	movlw	low receivePrintEventCANAL@crc
 10028  0032C0  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10029  0032C2  517F               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
 10030  0032C4  ECB2  F024         	call	_sendEscapedUartData
 10031                           
 10032                           ; BSR set to: 0
 10033                           ;main.c: 1755: for (i = 0; i < dlc; i++) {
 10034  0032C8  6B7A               	clrf	receivePrintEventCANAL@i& (0+255),b
 10035  0032CA  D00C               	goto	l11642
 10036  0032CC                     l11638:
 10037                           
 10038                           ; BSR set to: 0
 10039                           ;main.c: 1756: sendEscapedUartData(data[ i ], &crc);
 10040  0032CC  0E00               	movlw	high receivePrintEventCANAL@crc
 10041  0032CE  6F6D               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10042  0032D0  0E80               	movlw	low receivePrintEventCANAL@crc
 10043  0032D2  6F6C               	movwf	?_sendEscapedUartData& (0+255),b
 10044  0032D4  517A               	movf	receivePrintEventCANAL@i& (0+255),w,b
 10045  0032D6  0F72               	addlw	low receivePrintEventCANAL@data
 10046  0032D8  6ED9               	movwf	fsr2l,c
 10047  0032DA  6ADA               	clrf	fsr2h,c
 10048  0032DC  50DF               	movf	indf2,w,c
 10049  0032DE  ECB2  F024         	call	_sendEscapedUartData
 10050                           
 10051                           ; BSR set to: 0
 10052  0032E2  2B7A               	incf	receivePrintEventCANAL@i& (0+255),f,b
 10053  0032E4                     l11642:
 10054                           
 10055                           ; BSR set to: 0
 10056  0032E4  517F               	movf	receivePrintEventCANAL@dlc& (0+255),w,b
 10057  0032E6  5D7A               	subwf	receivePrintEventCANAL@i& (0+255),w,b
 10058  0032E8  E3F1               	bnc	l11638
 10059                           
 10060                           ; BSR set to: 0
 10061                           ;main.c: 1757: }
 10062                           ;main.c: 1760: sendEscapedUartData(crc, (0));
 10063  0032EA  6B6D               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10064  0032EC  6B6C               	clrf	?_sendEscapedUartData& (0+255),b
 10065  0032EE  5180               	movf	receivePrintEventCANAL@crc& (0+255),w,b
 10066  0032F0  ECB2  F024         	call	_sendEscapedUartData
 10067  0032F4                     l902:
 10068  0032F4  A2AC               	btfss	4012,1,c	;volatile
 10069  0032F6  D7FE               	goto	l902
 10070                           
 10071                           ;main.c: 1764: WriteUSART(0x10);
 10072  0032F8  0E10               	movlw	16
 10073  0032FA  EC37  F02A         	call	_WriteUSART
 10074  0032FE                     l905:
 10075  0032FE  A2AC               	btfss	4012,1,c	;volatile
 10076  003300  D7FE               	goto	l905
 10077                           
 10078                           ;main.c: 1766: WriteUSART(0x03);
 10079  003302  0E03               	movlw	3
 10080  003304  EC37  F02A         	call	_WriteUSART
 10081  003308                     l908:
 10082  003308  0012               	return	
 10083  00330A                     __end_of_receivePrintEventCANAL:
 10084                           	opt stack 0
 10085                           tblptru	equ	0xFF8
 10086                           tblptrh	equ	0xFF7
 10087                           tblptrl	equ	0xFF6
 10088                           tablat	equ	0xFF5
 10089                           prodh	equ	0xFF4
 10090                           prodl	equ	0xFF3
 10091                           intcon	equ	0xFF2
 10092                           indf0	equ	0xFEF
 10093                           postinc0	equ	0xFEE
 10094                           fsr0h	equ	0xFEA
 10095                           fsr0l	equ	0xFE9
 10096                           wreg	equ	0xFE8
 10097                           indf1	equ	0xFE7
 10098                           postinc1	equ	0xFE6
 10099                           postdec1	equ	0xFE5
 10100                           fsr1h	equ	0xFE2
 10101                           fsr1l	equ	0xFE1
 10102                           indf2	equ	0xFDF
 10103                           postinc2	equ	0xFDE
 10104                           postdec2	equ	0xFDD
 10105                           plusw2	equ	0xFDB
 10106                           fsr2h	equ	0xFDA
 10107                           fsr2l	equ	0xFD9
 10108                           status	equ	0xFD8
 10109                           
 10110 ;; *************** function _sendEscapedUartData *****************
 10111 ;; Defined at:
 10112 ;;		line 1435 in file "main.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;  c               1    wreg     unsigned char 
 10115 ;;  pcrc            2   12[BANK0 ] PTR unsigned char 
 10116 ;;		 -> sendReceiveEventVSCP@crc(1), receivePrintEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNac
      +k@crc(1), 
 10117 ;;		 -> sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 10118 ;; Auto vars:     Size  Location     Type
 10119 ;;  c               1   14[BANK0 ] unsigned char 
 10120 ;; Return value:  Size  Location     Type
 10121 ;;		None               void
 10122 ;; Registers used:
 10123 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10124 ;; Tracked objects:
 10125 ;;		On entry : E/1
 10126 ;;		On exit  : F/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10129 ;;      Params:         0       2       0       0       0       0       0
 10130 ;;      Locals:         0       1       0       0       0       0       0
 10131 ;;      Temps:          0       0       0       0       0       0       0
 10132 ;;      Totals:         0       3       0       0       0       0       0
 10133 ;;Total ram usage:        3 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:    5
 10136 ;; This function calls:
 10137 ;;		_WriteUSART
 10138 ;;		_crc8
 10139 ;; This function is called by:
 10140 ;;		_sendVSCPDriverErrorFrame
 10141 ;;		_sendVSCPDriverAck
 10142 ;;		_sendVSCPDriverNack
 10143 ;;		_sendVSCPDriverCommandReply
 10144 ;;		_receivePrintEventCANAL
 10145 ;; This function uses a non-reentrant model
 10146 ;;
 10147                           
 10148                           	psect	text16
 10149  004964                     __ptext16:
 10150                           	opt stack 0
 10151  004964                     _sendEscapedUartData:
 10152                           	opt stack 23
 10153                           
 10154                           ;incstack = 0
 10155                           ;incstack = 0
 10156                           ;sendEscapedUartData@c stored from wreg
 10157  004964  CFE8 F06E          	movff	wreg,sendEscapedUartData@c
 10158                           
 10159                           ;main.c: 1436: if (0x10 == c) {
 10160  004968  0100               	movlb	0	; () banked
 10161  00496A  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 10162  00496C  0A10               	xorlw	16
 10163  00496E  E123               	bnz	l731
 10164  004970                     l722:
 10165  004970  A2AC               	btfss	4012,1,c	;volatile
 10166  004972  D7FE               	goto	l722
 10167                           
 10168                           ;main.c: 1439: WriteUSART(0x10);
 10169  004974  0E10               	movlw	16
 10170  004976  EC37  F02A         	call	_WriteUSART
 10171                           
 10172                           ;main.c: 1440: if ((0) != pcrc) crc8(pcrc, 0x10);
 10173  00497A  0100               	movlb	0	; () banked
 10174  00497C  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 10175  00497E  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 10176  004980  E008               	bz	l726
 10177                           
 10178                           ; BSR set to: 0
 10179  004982  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 10180  004986  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10181  00498A  0E10               	movlw	16
 10182  00498C  6F69               	movwf	(?_crc8+2)& (0+255),b
 10183  00498E  EC64  F029         	call	_crc8	;wreg free
 10184  004992                     l726:
 10185  004992  A2AC               	btfss	4012,1,c	;volatile
 10186  004994  D7FE               	goto	l726
 10187                           
 10188                           ;main.c: 1443: WriteUSART(0x10);
 10189  004996  0E10               	movlw	16
 10190  004998  EC37  F02A         	call	_WriteUSART
 10191                           
 10192                           ;main.c: 1444: if ((0) != pcrc) crc8(pcrc, 0x10);
 10193  00499C  0100               	movlb	0	; () banked
 10194  00499E  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 10195  0049A0  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 10196  0049A2  E01B               	bz	l735
 10197                           
 10198                           ; BSR set to: 0
 10199  0049A4  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 10200  0049A8  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10201  0049AC  0E10               	movlw	16
 10202  0049AE  6F69               	movwf	(?_crc8+2)& (0+255),b
 10203  0049B0  EC64  F029         	call	_crc8	;wreg free
 10204  0049B4  D012               	goto	l735
 10205  0049B6                     l731:
 10206  0049B6  A2AC               	btfss	4012,1,c	;volatile
 10207  0049B8  D7FE               	goto	l731
 10208                           
 10209                           ;main.c: 1450: WriteUSART(c);
 10210  0049BA  0100               	movlb	0	; () banked
 10211  0049BC  516E               	movf	sendEscapedUartData@c& (0+255),w,b
 10212  0049BE  EC37  F02A         	call	_WriteUSART
 10213                           
 10214                           ;main.c: 1451: if ((0) != pcrc) crc8(pcrc, c);
 10215  0049C2  0100               	movlb	0	; () banked
 10216  0049C4  516D               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 10217  0049C6  116C               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 10218  0049C8  E008               	bz	l735
 10219                           
 10220                           ; BSR set to: 0
 10221  0049CA  C06C  F067         	movff	sendEscapedUartData@pcrc,?_crc8
 10222  0049CE  C06D  F068         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 10223  0049D2  C06E  F069         	movff	sendEscapedUartData@c,?_crc8+2
 10224  0049D6  EC64  F029         	call	_crc8	;wreg free
 10225  0049DA                     l735:
 10226                           
 10227                           ; BSR set to: 0
 10228  0049DA  0012               	return	
 10229  0049DC                     __end_of_sendEscapedUartData:
 10230                           	opt stack 0
 10231                           tblptru	equ	0xFF8
 10232                           tblptrh	equ	0xFF7
 10233                           tblptrl	equ	0xFF6
 10234                           tablat	equ	0xFF5
 10235                           prodh	equ	0xFF4
 10236                           prodl	equ	0xFF3
 10237                           intcon	equ	0xFF2
 10238                           indf0	equ	0xFEF
 10239                           postinc0	equ	0xFEE
 10240                           fsr0h	equ	0xFEA
 10241                           fsr0l	equ	0xFE9
 10242                           wreg	equ	0xFE8
 10243                           indf1	equ	0xFE7
 10244                           postinc1	equ	0xFE6
 10245                           postdec1	equ	0xFE5
 10246                           fsr1h	equ	0xFE2
 10247                           fsr1l	equ	0xFE1
 10248                           indf2	equ	0xFDF
 10249                           postinc2	equ	0xFDE
 10250                           postdec2	equ	0xFDD
 10251                           plusw2	equ	0xFDB
 10252                           fsr2h	equ	0xFDA
 10253                           fsr2l	equ	0xFD9
 10254                           status	equ	0xFD8
 10255                           
 10256 ;; *************** function _crc8 *****************
 10257 ;; Defined at:
 10258 ;;		line 47 in file "crc8.c"
 10259 ;; Parameters:    Size  Location     Type
 10260 ;;  crc             2    7[BANK0 ] PTR unsigned char 
 10261 ;;		 -> calcCRC@crc(1), sendReceiveEventVSCP@crc(1), receivePrintEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), 
 10262 ;;		 -> sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 10263 ;;  m               1    9[BANK0 ] unsigned char 
 10264 ;; Auto vars:     Size  Location     Type
 10265 ;;		None
 10266 ;; Return value:  Size  Location     Type
 10267 ;;		None               void
 10268 ;; Registers used:
 10269 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10270 ;; Tracked objects:
 10271 ;;		On entry : F/0
 10272 ;;		On exit  : F/0
 10273 ;;		Unchanged: 0/0
 10274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10275 ;;      Params:         0       3       0       0       0       0       0
 10276 ;;      Locals:         0       0       0       0       0       0       0
 10277 ;;      Temps:          0       2       0       0       0       0       0
 10278 ;;      Totals:         0       5       0       0       0       0       0
 10279 ;;Total ram usage:        5 bytes
 10280 ;; Hardware stack levels used:    1
 10281 ;; Hardware stack levels required when called:    4
 10282 ;; This function calls:
 10283 ;;		_init_crc8
 10284 ;; This function is called by:
 10285 ;;		_sendEscapedUartData
 10286 ;;		_sendVSCPDriverErrorFrame
 10287 ;;		_sendVSCPDriverAck
 10288 ;;		_sendVSCPDriverNack
 10289 ;;		_sendVSCPDriverCommandReply
 10290 ;;		_receivePrintEventCANAL
 10291 ;;		_calcCRC
 10292 ;; This function uses a non-reentrant model
 10293 ;;
 10294                           
 10295                           	psect	text17
 10296  0052C8                     __ptext17:
 10297                           	opt stack 0
 10298  0052C8                     _crc8:
 10299                           	opt stack 24
 10300                           
 10301                           ; BSR set to: 0
 10302                           ;crc8.c: 48: if ( !made_table ) {
 10303                           
 10304                           ; BSR set to: 0
 10305                           ;incstack = 0
 10306                           ;incstack = 0
 10307  0052C8  502E               	movf	_made_table+1,w,c
 10308  0052CA  102D               	iorwf	_made_table,w,c
 10309  0052CC  B4D8               	btfsc	status,2,c
 10310                           
 10311                           ; BSR set to: 0
 10312                           ;crc8.c: 49: init_crc8();
 10313  0052CE  EC15  F026         	call	_init_crc8	;wreg free
 10314                           
 10315                           ; BSR set to: 0
 10316                           ;crc8.c: 50: }
 10317                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 10318  0052D2  C067  FFD9         	movff	crc8@crc,fsr2l
 10319  0052D6  C068  FFDA         	movff	crc8@crc+1,fsr2h
 10320  0052DA  50DF               	movf	indf2,w,c
 10321  0052DC  1969               	xorwf	crc8@m& (0+255),w,b
 10322  0052DE  6F6A               	movwf	??_crc8& (0+255),b
 10323  0052E0  6B6B               	clrf	(??_crc8+1)& (0+255),b
 10324  0052E2  0E00               	movlw	low _crc8_table
 10325  0052E4  0100               	movlb	0	; () banked
 10326  0052E6  256A               	addwf	??_crc8& (0+255),w,b
 10327  0052E8  6ED9               	movwf	fsr2l,c
 10328  0052EA  0E03               	movlw	high _crc8_table
 10329  0052EC  216B               	addwfc	(??_crc8+1)& (0+255),w,b
 10330  0052EE  6EDA               	movwf	fsr2h,c
 10331  0052F0  C067  FFE1         	movff	crc8@crc,fsr1l
 10332  0052F4  C068  FFE2         	movff	crc8@crc+1,fsr1h
 10333  0052F8  CFDF FFE7          	movff	indf2,indf1
 10334                           
 10335                           ; BSR set to: 0
 10336  0052FC  0012               	return	
 10337  0052FE                     __end_of_crc8:
 10338                           	opt stack 0
 10339                           tblptru	equ	0xFF8
 10340                           tblptrh	equ	0xFF7
 10341                           tblptrl	equ	0xFF6
 10342                           tablat	equ	0xFF5
 10343                           prodh	equ	0xFF4
 10344                           prodl	equ	0xFF3
 10345                           intcon	equ	0xFF2
 10346                           indf0	equ	0xFEF
 10347                           postinc0	equ	0xFEE
 10348                           fsr0h	equ	0xFEA
 10349                           fsr0l	equ	0xFE9
 10350                           wreg	equ	0xFE8
 10351                           indf1	equ	0xFE7
 10352                           postinc1	equ	0xFE6
 10353                           postdec1	equ	0xFE5
 10354                           fsr1h	equ	0xFE2
 10355                           fsr1l	equ	0xFE1
 10356                           indf2	equ	0xFDF
 10357                           postinc2	equ	0xFDE
 10358                           postdec2	equ	0xFDD
 10359                           plusw2	equ	0xFDB
 10360                           fsr2h	equ	0xFDA
 10361                           fsr2l	equ	0xFD9
 10362                           status	equ	0xFD8
 10363                           
 10364 ;; *************** function _init_crc8 *****************
 10365 ;; Defined at:
 10366 ;;		line 25 in file "crc8.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;		None
 10369 ;; Auto vars:     Size  Location     Type
 10370 ;;  i               2    5[BANK0 ] int 
 10371 ;;  j               2    2[BANK0 ] int 
 10372 ;;  crc             1    4[BANK0 ] unsigned char 
 10373 ;; Return value:  Size  Location     Type
 10374 ;;		None               void
 10375 ;; Registers used:
 10376 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10377 ;; Tracked objects:
 10378 ;;		On entry : F/0
 10379 ;;		On exit  : F/0
 10380 ;;		Unchanged: 0/0
 10381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10382 ;;      Params:         0       0       0       0       0       0       0
 10383 ;;      Locals:         0       7       0       0       0       0       0
 10384 ;;      Temps:          0       0       0       0       0       0       0
 10385 ;;      Totals:         0       7       0       0       0       0       0
 10386 ;;Total ram usage:        7 bytes
 10387 ;; Hardware stack levels used:    1
 10388 ;; Hardware stack levels required when called:    3
 10389 ;; This function calls:
 10390 ;;		Nothing
 10391 ;; This function is called by:
 10392 ;;		_main
 10393 ;;		_crc8
 10394 ;; This function uses a non-reentrant model
 10395 ;;
 10396                           
 10397                           	psect	text18
 10398  004C2A                     __ptext18:
 10399                           	opt stack 0
 10400  004C2A                     _init_crc8:
 10401                           	opt stack 24
 10402                           
 10403                           ; BSR set to: 0
 10404                           ;crc8.c: 26: int i,j;
 10405                           ;crc8.c: 27: unsigned char crc;
 10406                           ;crc8.c: 29: if (!made_table) {
 10407                           
 10408                           ; BSR set to: 0
 10409                           ;incstack = 0
 10410                           ;incstack = 0
 10411  004C2A  502E               	movf	_made_table+1,w,c
 10412  004C2C  102D               	iorwf	_made_table,w,c
 10413  004C2E  E131               	bnz	l1482
 10414                           
 10415                           ; BSR set to: 0
 10416                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 10417  004C30  6B65               	clrf	init_crc8@i& (0+255),b
 10418  004C32  6B66               	clrf	(init_crc8@i+1)& (0+255),b
 10419  004C34                     l1474:
 10420                           
 10421                           ; BSR set to: 0
 10422                           ;crc8.c: 31: crc = i;
 10423  004C34  C065  F064         	movff	init_crc8@i,init_crc8@crc
 10424                           
 10425                           ;crc8.c: 32: for (j=0; j<8; j++) {
 10426  004C38  6B62               	clrf	init_crc8@j& (0+255),b
 10427  004C3A  6B63               	clrf	(init_crc8@j+1)& (0+255),b
 10428  004C3C                     l1476:
 10429                           
 10430                           ; BSR set to: 0
 10431                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 10432  004C3C  BF64               	btfsc	init_crc8@crc& (0+255),7,b
 10433  004C3E  D003               	goto	l9434
 10434                           
 10435                           ; BSR set to: 0
 10436  004C40  6B60               	clrf	_init_crc8$2087& (0+255),b
 10437  004C42  6B61               	clrf	(_init_crc8$2087+1)& (0+255),b
 10438  004C44  D003               	goto	l9436
 10439  004C46                     l9434:
 10440                           
 10441                           ; BSR set to: 0
 10442  004C46  6B61               	clrf	(_init_crc8$2087+1)& (0+255),b
 10443  004C48  0E07               	movlw	7
 10444  004C4A  6F60               	movwf	_init_crc8$2087& (0+255),b
 10445  004C4C                     l9436:
 10446                           
 10447                           ; BSR set to: 0
 10448  004C4C  5164               	movf	init_crc8@crc& (0+255),w,b
 10449  004C4E  2564               	addwf	init_crc8@crc& (0+255),w,b
 10450  004C50  1960               	xorwf	_init_crc8$2087& (0+255),w,b
 10451  004C52  6F64               	movwf	init_crc8@crc& (0+255),b
 10452                           
 10453                           ; BSR set to: 0
 10454  004C54  4B62               	infsnz	init_crc8@j& (0+255),f,b
 10455  004C56  2B63               	incf	(init_crc8@j+1)& (0+255),f,b
 10456                           
 10457                           ; BSR set to: 0
 10458  004C58  5163               	movf	(init_crc8@j+1)& (0+255),w,b
 10459  004C5A  0A80               	xorlw	128
 10460  004C5C  0F80               	addlw	-128
 10461  004C5E  0E08               	movlw	8
 10462  004C60  B4D8               	btfsc	status,2,c
 10463  004C62  5D62               	subwf	init_crc8@j& (0+255),w,b
 10464  004C64  E3EB               	bnc	l1476
 10465                           
 10466                           ; BSR set to: 0
 10467                           ;crc8.c: 34: }
 10468                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 10469  004C66  0E00               	movlw	low _crc8_table
 10470  004C68  0100               	movlb	0	; () banked
 10471  004C6A  2565               	addwf	init_crc8@i& (0+255),w,b
 10472  004C6C  6ED9               	movwf	fsr2l,c
 10473  004C6E  0E03               	movlw	high _crc8_table
 10474  004C70  2166               	addwfc	(init_crc8@i+1)& (0+255),w,b
 10475  004C72  6EDA               	movwf	fsr2h,c
 10476  004C74  C064  FFDF         	movff	init_crc8@crc,indf2
 10477                           
 10478                           ; BSR set to: 0
 10479  004C78  4B65               	infsnz	init_crc8@i& (0+255),f,b
 10480  004C7A  2B66               	incf	(init_crc8@i+1)& (0+255),f,b
 10481                           
 10482                           ; BSR set to: 0
 10483  004C7C  5166               	movf	(init_crc8@i+1)& (0+255),w,b
 10484  004C7E  0A80               	xorlw	128
 10485  004C80  0F7F               	addlw	-129
 10486  004C82  0E00               	movlw	0
 10487  004C84  B4D8               	btfsc	status,2,c
 10488  004C86  5D65               	subwf	init_crc8@i& (0+255),w,b
 10489  004C88  E3D5               	bnc	l1474
 10490                           
 10491                           ; BSR set to: 0
 10492                           ;crc8.c: 37: }
 10493                           ;crc8.c: 38: made_table=1;
 10494  004C8A  0E00               	movlw	0
 10495  004C8C  6E2E               	movwf	_made_table+1,c
 10496  004C8E  0E01               	movlw	1
 10497  004C90  6E2D               	movwf	_made_table,c
 10498  004C92                     l1482:
 10499                           
 10500                           ; BSR set to: 0
 10501  004C92  0012               	return	
 10502  004C94                     __end_of_init_crc8:
 10503                           	opt stack 0
 10504                           tblptru	equ	0xFF8
 10505                           tblptrh	equ	0xFF7
 10506                           tblptrl	equ	0xFF6
 10507                           tablat	equ	0xFF5
 10508                           prodh	equ	0xFF4
 10509                           prodl	equ	0xFF3
 10510                           intcon	equ	0xFF2
 10511                           indf0	equ	0xFEF
 10512                           postinc0	equ	0xFEE
 10513                           fsr0h	equ	0xFEA
 10514                           fsr0l	equ	0xFE9
 10515                           wreg	equ	0xFE8
 10516                           indf1	equ	0xFE7
 10517                           postinc1	equ	0xFE6
 10518                           postdec1	equ	0xFE5
 10519                           fsr1h	equ	0xFE2
 10520                           fsr1l	equ	0xFE1
 10521                           indf2	equ	0xFDF
 10522                           postinc2	equ	0xFDE
 10523                           postdec2	equ	0xFDD
 10524                           plusw2	equ	0xFDB
 10525                           fsr2h	equ	0xFDA
 10526                           fsr2l	equ	0xFD9
 10527                           status	equ	0xFD8
 10528                           
 10529 ;; *************** function _doModeVerbose *****************
 10530 ;; Defined at:
 10531 ;;		line 456 in file "main.c"
 10532 ;; Parameters:    Size  Location     Type
 10533 ;;		None
 10534 ;; Auto vars:     Size  Location     Type
 10535 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 10536 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 10537 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 10538 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 10539 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 10540 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 10541 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 10542 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 10543 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 10544 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 10545 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 10546 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 10547 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 10548 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 10549 ;;  id              4   35[BANK2 ] unsigned long 
 10550 ;;  p               2   59[BANK2 ] PTR unsigned char 
 10551 ;;		 -> NULL(0), cmdbuf(80), 
 10552 ;;  mask_class      2   10[BANK2 ] unsigned short 
 10553 ;;  maskno          1   40[BANK2 ] unsigned char 
 10554 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 10555 ;;  mask_type       1   18[BANK2 ] unsigned char 
 10556 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 10557 ;;  id              4    0[BANK2 ] unsigned long 
 10558 ;;  p               2   57[BANK2 ] PTR unsigned char 
 10559 ;;		 -> NULL(0), cmdbuf(80), 
 10560 ;;  filter_class    2    8[BANK2 ] unsigned short 
 10561 ;;  filterno        1   39[BANK2 ] unsigned char 
 10562 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 10563 ;;  filter_type     1   15[BANK2 ] unsigned char 
 10564 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 10565 ;;  nodeid          1   47[BANK2 ] unsigned char 
 10566 ;;  p               2   52[BANK2 ] PTR unsigned char 
 10567 ;;		 -> NULL(0), cmdbuf(80), 
 10568 ;;  value           1   41[BANK2 ] unsigned char 
 10569 ;;  reg             1   34[BANK2 ] unsigned char 
 10570 ;;  page            1   33[BANK2 ] unsigned char 
 10571 ;;  nodeid          1   13[BANK2 ] unsigned char 
 10572 ;;  p               2   50[BANK2 ] PTR unsigned char 
 10573 ;;		 -> NULL(0), cmdbuf(80), 
 10574 ;;  value           1   49[BANK2 ] unsigned char 
 10575 ;;  i               1   48[BANK2 ] unsigned char 
 10576 ;;  reg             1   46[BANK2 ] unsigned char 
 10577 ;;  page            1   45[BANK2 ] unsigned char 
 10578 ;;  count           1   43[BANK2 ] unsigned char 
 10579 ;;  rv              1   32[BANK2 ] enum E15660
 10580 ;;  nodeid          1   12[BANK2 ] unsigned char 
 10581 ;;  p               2   55[BANK2 ] PTR unsigned char 
 10582 ;;		 -> NULL(0), cmdbuf(80), 
 10583 ;;  ifmode          1   54[BANK2 ] enum E16362
 10584 ;;  c               1   44[BANK2 ] unsigned char 
 10585 ;;  i               1   42[BANK2 ] unsigned char 
 10586 ;; Return value:  Size  Location     Type
 10587 ;;		None               void
 10588 ;; Registers used:
 10589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 10590 ;; Tracked objects:
 10591 ;;		On entry : 0/0
 10592 ;;		On exit  : 0/0
 10593 ;;		Unchanged: 0/0
 10594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10595 ;;      Params:         0       0       0       0       0       0       0
 10596 ;;      Locals:         0       0       0      61       0       0       0
 10597 ;;      Temps:          0       0      20       0       0       0       0
 10598 ;;      Totals:         0       0      20      61       0       0       0
 10599 ;;Total ram usage:       81 bytes
 10600 ;; Hardware stack levels used:    1
 10601 ;; Hardware stack levels required when called:   10
 10602 ;; This function calls:
 10603 ;;		_putsUSART
 10604 ;;		_printFirmwareVersion
 10605 ;;		_fifo_read
 10606 ;;		_writeEEPROM
 10607 ;;		_receivePrintEventVerbose
 10608 ;;		_stristr
 10609 ;;		_ECANSetOperationMode
 10610 ;;		_strtok
 10611 ;;		_atoi
 10612 ;;		_memset
 10613 ;;		_sendVSCPFrame
 10614 ;;		_printStatistics
 10615 ;;		_printErrors
 10616 ;;		_printHelp
 10617 ;;		_findNodes
 10618 ;;		_strcpy
 10619 ;;		_strchr
 10620 ;;		_readRegisterExtended
 10621 ;;		_sprintf
 10622 ;;		_WriteUSART
 10623 ;;		_printBinary
 10624 ;;		_writeRegisterExtended
 10625 ;;		_printNodeFirmwareVersion
 10626 ;;		_printGUID
 10627 ;;		_printMDF
 10628 ;;		_setFilter
 10629 ;;		__CANIDToRegs
 10630 ;; This function is called by:
 10631 ;;		_main
 10632 ;; This function uses a non-reentrant model
 10633 ;;
 10634                           
 10635                           	psect	text19
 10636  00022E                     __ptext19:
 10637                           	opt stack 0
 10638  00022E                     _doModeVerbose:
 10639                           	opt stack 20
 10640                           
 10641                           ;main.c: 457: uint8_t c;
 10642                           ;main.c: 458: uint8_t i;
 10643                           ;main.c: 461: if (!bSilent) {
 10644                           
 10645                           ; BSR set to: 0
 10646                           ;incstack = 0
 10647                           ;incstack = 0
 10648  00022E  0101               	movlb	1	; () banked
 10649  000230  6701               	tstfsz	_bSilent& (0+255),b
 10650  000232  D002               	goto	l9560
 10651                           
 10652                           ; BSR set to: 1
 10653                           ;main.c: 462: receivePrintEventVerbose();
 10654  000234  EC9F  F011         	call	_receivePrintEventVerbose	;wreg free
 10655  000238                     l9560:
 10656                           
 10657                           ;main.c: 463: }
 10658                           ;main.c: 466: (INTCONbits.GIE = 0);
 10659  000238  9EF2               	bcf	intcon,7,c	;volatile
 10660                           
 10661                           ;main.c: 468: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 10662  00023A  0E02               	movlw	high doModeVerbose@c
 10663  00023C  0100               	movlb	0	; () banked
 10664  00023E  6F61               	movwf	(?_fifo_read+1)& (0+255),b
 10665  000240  0EAC               	movlw	low doModeVerbose@c
 10666  000242  6F60               	movwf	?_fifo_read& (0+255),b
 10667  000244  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 10668  000246  0E01               	movlw	1
 10669  000248  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 10670  00024A  0E3E               	movlw	_serialInputFifo& (0+255)
 10671  00024C  EC60  F020         	call	_fifo_read
 10672  000250  0560               	decf	?_fifo_read& (0+255),w,b
 10673  000252  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 10674  000254  E002 EF33  F00A    	bnz	l10158
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;main.c: 471: (INTCONbits.GIE = 1);
 10678  00025A  8EF2               	bsf	intcon,7,c	;volatile
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;main.c: 474: cmdbuf[ pos ] = c;
 10682  00025C  EC27  F018         	call	PL18	;call to abstracted procedure
 10683  000260  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 10684                           
 10685                           ; BSR set to: 2
 10686                           ;main.c: 475: pos++;
 10687  000264  2B02               	incf	_pos& (0+255),f,b
 10688                           
 10689                           ; BSR set to: 1
 10690                           ;main.c: 477: if (pos >= 128u) {
 10691  000266  0E7F               	movlw	127
 10692  000268  6502               	cpfsgt	_pos& (0+255),b
 10693  00026A  D001               	goto	l9574
 10694                           
 10695                           ; BSR set to: 1
 10696                           ;main.c: 481: pos = 0;
 10697  00026C  6B02               	clrf	_pos& (0+255),b
 10698  00026E                     l9574:
 10699                           
 10700                           ; BSR set to: 1
 10701                           ;main.c: 483: }
 10702                           ;main.c: 486: if (0x0d == c) {
 10703  00026E  0102               	movlb	2	; () banked
 10704  000270  51AC               	movf	doModeVerbose@c& (0+255),w,b
 10705  000272  0A0D               	xorlw	13
 10706  000274  E002 EF33  F00A    	bnz	l10158
 10707                           
 10708                           ; BSR set to: 2
 10709                           ;main.c: 488: cmdbuf[ pos ] = 0;
 10710  00027A  EC27  F018         	call	PL18	;call to abstracted procedure
 10711  00027E  6ADF               	clrf	indf2,c
 10712                           
 10713                           ; BSR set to: 1
 10714                           ;main.c: 491: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 10715  000280  0100               	movlb	0	; () banked
 10716  000282  6F6E               	movwf	(?_stristr+1)& (0+255),b
 10717  000284  0E04               	movlw	low _cmdbuf
 10718  000286  6F6D               	movwf	?_stristr& (0+255),b
 10719  000288  0E7F               	movlw	high STR_5
 10720  00028A  6F70               	movwf	(?_stristr+3)& (0+255),b
 10721  00028C  0ED0               	movlw	low STR_5
 10722  00028E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 10723  000290  ECEE  F024         	call	_stristr	;wreg free
 10724  000294  EC35  F00A         	call	PL2	;call to abstracted procedure
 10725  000298  E104               	bnz	u11625
 10726  00029A  0100               	movlb	0	; () banked
 10727  00029C  516D               	movf	?_stristr& (0+255),w,b
 10728  00029E  0101               	movlb	1	; () banked
 10729  0002A0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10730  0002A2                     u11625:
 10731  0002A2  E111               	bnz	l9584
 10732                           
 10733                           ; BSR set to: 1
 10734                           ;main.c: 492: putsUSART((char *) "Will enter bootloader now...\r\n");
 10735  0002A4  0E7A               	movlw	high STR_6
 10736  0002A6  0100               	movlb	0	; () banked
 10737  0002A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 10738  0002AA  0EED               	movlw	low STR_6
 10739  0002AC  6F61               	movwf	?_putsUSART& (0+255),b
 10740  0002AE  EC6A  F027         	call	_putsUSART	;wreg free
 10741                           
 10742                           ;main.c: 493: writeEEPROM(0x00, 0xFF);
 10743  0002B2  0100               	movlb	0	; () banked
 10744  0002B4  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 10745  0002B6  6B60               	clrf	?_writeEEPROM& (0+255),b
 10746  0002B8  0EFF               	movlw	255
 10747  0002BA  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 10748  0002BC  ECDE  F029         	call	_writeEEPROM	;wreg free
 10749  0002C0  00FF               	reset		;# 
 10750                           
 10751                           ;main.c: 495: }
 10752  0002C2  EF25  F00A         	goto	l10154
 10753  0002C6                     l9584:
 10754                           
 10755                           ; BSR set to: 1
 10756                           ;main.c: 497: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 10757  0002C6  0E01               	movlw	high _cmdbuf
 10758  0002C8  0100               	movlb	0	; () banked
 10759  0002CA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 10760  0002CC  0E04               	movlw	low _cmdbuf
 10761  0002CE  6F6D               	movwf	?_stristr& (0+255),b
 10762  0002D0  0E7F               	movlw	high STR_7
 10763  0002D2  6F70               	movwf	(?_stristr+3)& (0+255),b
 10764  0002D4  0EB7               	movlw	low STR_7
 10765  0002D6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 10766  0002D8  ECEE  F024         	call	_stristr	;wreg free
 10767  0002DC  EC35  F00A         	call	PL2	;call to abstracted procedure
 10768  0002E0  E104               	bnz	u11635
 10769  0002E2  0100               	movlb	0	; () banked
 10770  0002E4  516D               	movf	?_stristr& (0+255),w,b
 10771  0002E6  0101               	movlb	1	; () banked
 10772  0002E8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10773  0002EA                     u11635:
 10774  0002EA  E10C               	bnz	l9592
 10775                           
 10776                           ; BSR set to: 1
 10777                           ;main.c: 498: bSilent = 0;
 10778  0002EC  6B01               	clrf	_bSilent& (0+255),b
 10779                           
 10780                           ; BSR set to: 1
 10781                           ;main.c: 499: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 10782  0002EE  0E00               	movlw	0
 10783  0002F0  EC1F  F02A         	call	_ECANSetOperationMode
 10784                           
 10785                           ; BSR set to: 0
 10786                           ;main.c: 500: putsUSART((char *) "+OK\r\n");
 10787  0002F4  0E7F               	movlw	high STR_8
 10788  0002F6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 10789  0002F8  0E80               	movlw	low STR_8
 10790  0002FA  6F61               	movwf	?_putsUSART& (0+255),b
 10791  0002FC  EC6A  F027         	call	_putsUSART	;wreg free
 10792                           
 10793                           ;main.c: 501: }
 10794  000300  EF25  F00A         	goto	l10154
 10795  000304                     l9592:
 10796                           
 10797                           ; BSR set to: 1
 10798                           ;main.c: 503: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 10799  000304  0E01               	movlw	high _cmdbuf
 10800  000306  0100               	movlb	0	; () banked
 10801  000308  6F6E               	movwf	(?_stristr+1)& (0+255),b
 10802  00030A  0E04               	movlw	low _cmdbuf
 10803  00030C  6F6D               	movwf	?_stristr& (0+255),b
 10804  00030E  0E7F               	movlw	high STR_9
 10805  000310  6F70               	movwf	(?_stristr+3)& (0+255),b
 10806  000312  0E5E               	movlw	low STR_9
 10807  000314  6F6F               	movwf	(?_stristr+2)& (0+255),b
 10808  000316  ECEE  F024         	call	_stristr	;wreg free
 10809  00031A  EC35  F00A         	call	PL2	;call to abstracted procedure
 10810  00031E  E104               	bnz	u11645
 10811  000320  0100               	movlb	0	; () banked
 10812  000322  516D               	movf	?_stristr& (0+255),w,b
 10813  000324  0101               	movlb	1	; () banked
 10814  000326  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10815  000328                     u11645:
 10816  000328  E10D               	bnz	l9600
 10817                           
 10818                           ; BSR set to: 1
 10819                           ;main.c: 504: bSilent = 1;
 10820  00032A  0E01               	movlw	1
 10821  00032C  6F01               	movwf	_bSilent& (0+255),b
 10822                           
 10823                           ; BSR set to: 1
 10824                           ;main.c: 505: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 10825  00032E  0E00               	movlw	0
 10826  000330  EC1F  F02A         	call	_ECANSetOperationMode
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;main.c: 506: putsUSART((char *) "+OK\r\n");
 10830  000334  0E7F               	movlw	high STR_8
 10831  000336  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 10832  000338  0E80               	movlw	low STR_8
 10833  00033A  6F61               	movwf	?_putsUSART& (0+255),b
 10834  00033C  EC6A  F027         	call	_putsUSART	;wreg free
 10835                           
 10836                           ;main.c: 507: }
 10837  000340  EF25  F00A         	goto	l10154
 10838  000344                     l9600:
 10839                           
 10840                           ; BSR set to: 1
 10841                           ;main.c: 509: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 10842  000344  0E01               	movlw	high _cmdbuf
 10843  000346  0100               	movlb	0	; () banked
 10844  000348  6F6E               	movwf	(?_stristr+1)& (0+255),b
 10845  00034A  0E04               	movlw	low _cmdbuf
 10846  00034C  6F6D               	movwf	?_stristr& (0+255),b
 10847  00034E  0E7F               	movlw	high STR_11
 10848  000350  6F70               	movwf	(?_stristr+3)& (0+255),b
 10849  000352  0E92               	movlw	low STR_11
 10850  000354  6F6F               	movwf	(?_stristr+2)& (0+255),b
 10851  000356  ECEE  F024         	call	_stristr	;wreg free
 10852  00035A  EC35  F00A         	call	PL2	;call to abstracted procedure
 10853  00035E  E104               	bnz	u11655
 10854  000360  0100               	movlb	0	; () banked
 10855  000362  516D               	movf	?_stristr& (0+255),w,b
 10856  000364  0101               	movlb	1	; () banked
 10857  000366  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10858  000368                     u11655:
 10859  000368  E10D               	bnz	l9608
 10860                           
 10861                           ; BSR set to: 1
 10862                           ;main.c: 510: bSilent = 1;
 10863  00036A  0E01               	movlw	1
 10864  00036C  6F01               	movwf	_bSilent& (0+255),b
 10865                           
 10866                           ; BSR set to: 1
 10867                           ;main.c: 511: ECANSetOperationMode(0x20);
 10868  00036E  0E20               	movlw	32
 10869  000370  EC1F  F02A         	call	_ECANSetOperationMode
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;main.c: 512: putsUSART((char *) "+OK\r\n");
 10873  000374  0E7F               	movlw	high STR_8
 10874  000376  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 10875  000378  0E80               	movlw	low STR_8
 10876  00037A  6F61               	movwf	?_putsUSART& (0+255),b
 10877  00037C  EC6A  F027         	call	_putsUSART	;wreg free
 10878                           
 10879                           ;main.c: 513: }
 10880  000380  EF25  F00A         	goto	l10154
 10881  000384                     l9608:
 10882                           
 10883                           ; BSR set to: 1
 10884                           ;main.c: 515: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 10885  000384  0E01               	movlw	high _cmdbuf
 10886  000386  0100               	movlb	0	; () banked
 10887  000388  6F6E               	movwf	(?_stristr+1)& (0+255),b
 10888  00038A  0E04               	movlw	low _cmdbuf
 10889  00038C  6F6D               	movwf	?_stristr& (0+255),b
 10890  00038E  0E7E               	movlw	high STR_13
 10891  000390  6F70               	movwf	(?_stristr+3)& (0+255),b
 10892  000392  0ECD               	movlw	low STR_13
 10893  000394  6F6F               	movwf	(?_stristr+2)& (0+255),b
 10894  000396  ECEE  F024         	call	_stristr	;wreg free
 10895  00039A  EC35  F00A         	call	PL2	;call to abstracted procedure
 10896  00039E  E104               	bnz	u11665
 10897  0003A0  0100               	movlb	0	; () banked
 10898  0003A2  516D               	movf	?_stristr& (0+255),w,b
 10899  0003A4  0101               	movlb	1	; () banked
 10900  0003A6  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10901  0003A8                     u11665:
 10902  0003A8  E10C               	bnz	l9616
 10903                           
 10904                           ; BSR set to: 1
 10905                           ;main.c: 516: bSilent = 0;
 10906  0003AA  6B01               	clrf	_bSilent& (0+255),b
 10907                           
 10908                           ; BSR set to: 1
 10909                           ;main.c: 517: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 10910  0003AC  0E40               	movlw	64
 10911  0003AE  EC1F  F02A         	call	_ECANSetOperationMode
 10912                           
 10913                           ; BSR set to: 0
 10914                           ;main.c: 518: putsUSART((char *) "+OK\r\n");
 10915  0003B2  0E7F               	movlw	high STR_8
 10916  0003B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 10917  0003B6  0E80               	movlw	low STR_8
 10918  0003B8  6F61               	movwf	?_putsUSART& (0+255),b
 10919  0003BA  EC6A  F027         	call	_putsUSART	;wreg free
 10920                           
 10921                           ;main.c: 519: }
 10922  0003BE  EF25  F00A         	goto	l10154
 10923  0003C2                     l9616:
 10924                           
 10925                           ; BSR set to: 1
 10926                           ;main.c: 521: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 10927  0003C2  0E01               	movlw	high _cmdbuf
 10928  0003C4  0100               	movlb	0	; () banked
 10929  0003C6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 10930  0003C8  0E04               	movlw	low _cmdbuf
 10931  0003CA  6F6D               	movwf	?_stristr& (0+255),b
 10932  0003CC  0E7F               	movlw	high STR_15
 10933  0003CE  6F70               	movwf	(?_stristr+3)& (0+255),b
 10934  0003D0  0E50               	movlw	low STR_15
 10935  0003D2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 10936  0003D4  ECEE  F024         	call	_stristr	;wreg free
 10937  0003D8  EC35  F00A         	call	PL2	;call to abstracted procedure
 10938  0003DC  E104               	bnz	u11675
 10939  0003DE  0100               	movlb	0	; () banked
 10940  0003E0  516D               	movf	?_stristr& (0+255),w,b
 10941  0003E2  0101               	movlb	1	; () banked
 10942  0003E4  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10943  0003E6                     u11675:
 10944  0003E6  E10C               	bnz	l9624
 10945                           
 10946                           ; BSR set to: 1
 10947                           ;main.c: 522: bSilent = 0;
 10948  0003E8  6B01               	clrf	_bSilent& (0+255),b
 10949                           
 10950                           ; BSR set to: 1
 10951                           ;main.c: 523: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 10952  0003EA  0E60               	movlw	96
 10953  0003EC  EC1F  F02A         	call	_ECANSetOperationMode
 10954                           
 10955                           ; BSR set to: 0
 10956                           ;main.c: 524: putsUSART((char *) "+OK\r\n");
 10957  0003F0  0E7F               	movlw	high STR_8
 10958  0003F2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 10959  0003F4  0E80               	movlw	low STR_8
 10960  0003F6  6F61               	movwf	?_putsUSART& (0+255),b
 10961  0003F8  EC6A  F027         	call	_putsUSART	;wreg free
 10962                           
 10963                           ;main.c: 525: }
 10964  0003FC  EF25  F00A         	goto	l10154
 10965  000400                     l9624:
 10966                           
 10967                           ; BSR set to: 1
 10968                           ;main.c: 527: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 10969  000400  0E01               	movlw	high _cmdbuf
 10970  000402  0100               	movlb	0	; () banked
 10971  000404  6F6E               	movwf	(?_stristr+1)& (0+255),b
 10972  000406  0E04               	movlw	low _cmdbuf
 10973  000408  6F6D               	movwf	?_stristr& (0+255),b
 10974  00040A  0E7F               	movlw	high STR_17
 10975  00040C  6F70               	movwf	(?_stristr+3)& (0+255),b
 10976  00040E  0E0E               	movlw	low STR_17
 10977  000410  6F6F               	movwf	(?_stristr+2)& (0+255),b
 10978  000412  ECEE  F024         	call	_stristr	;wreg free
 10979  000416  EC35  F00A         	call	PL2	;call to abstracted procedure
 10980  00041A  E104               	bnz	u11685
 10981  00041C  0100               	movlb	0	; () banked
 10982  00041E  516D               	movf	?_stristr& (0+255),w,b
 10983  000420  0101               	movlb	1	; () banked
 10984  000422  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 10985  000424                     u11685:
 10986  000424  E10B               	bnz	l9630
 10987                           
 10988                           ; BSR set to: 1
 10989                           ;main.c: 528: printFirmwareVersion();
 10990  000426  ECA2  F023         	call	_printFirmwareVersion	;wreg free
 10991                           
 10992                           ;main.c: 529: putsUSART((char *) "+OK\r\n");
 10993  00042A  0E7F               	movlw	high STR_8
 10994  00042C  0100               	movlb	0	; () banked
 10995  00042E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 10996  000430  0E80               	movlw	low STR_8
 10997  000432  6F61               	movwf	?_putsUSART& (0+255),b
 10998  000434  EC6A  F027         	call	_putsUSART	;wreg free
 10999                           
 11000                           ;main.c: 530: }
 11001  000438  EF25  F00A         	goto	l10154
 11002  00043C                     l9630:
 11003                           
 11004                           ; BSR set to: 1
 11005                           ;main.c: 531: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11006  00043C  0E01               	movlw	high _cmdbuf
 11007  00043E  0100               	movlb	0	; () banked
 11008  000440  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11009  000442  0E04               	movlw	low _cmdbuf
 11010  000444  6F6D               	movwf	?_stristr& (0+255),b
 11011  000446  0E7F               	movlw	high STR_19
 11012  000448  6F70               	movwf	(?_stristr+3)& (0+255),b
 11013  00044A  0E49               	movlw	low STR_19
 11014  00044C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11015  00044E  ECEE  F024         	call	_stristr	;wreg free
 11016  000452  EC35  F00A         	call	PL2	;call to abstracted procedure
 11017  000456  E104               	bnz	u11695
 11018  000458  0100               	movlb	0	; () banked
 11019  00045A  516D               	movf	?_stristr& (0+255),w,b
 11020  00045C  0101               	movlb	1	; () banked
 11021  00045E  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11022  000460                     u11695:
 11023  000460  E169               	bnz	l9666
 11024                           
 11025                           ; BSR set to: 1
 11026                           ;main.c: 532: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 11027  000462  506F               	movf	3951,w,c	;volatile
 11028  000464  0BE0               	andlw	224
 11029  000466  0102               	movlb	2	; () banked
 11030  000468  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 11031                           
 11032                           ; BSR set to: 2
 11033                           ;main.c: 533: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 11034  00046A  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 11035  00046C  D00C               	goto	l9640
 11036                           
 11037                           ; BSR set to: 2
 11038  00046E  0101               	movlb	1	; () banked
 11039  000470  6701               	tstfsz	_bSilent& (0+255),b
 11040  000472  D009               	goto	l9640
 11041                           
 11042                           ; BSR set to: 1
 11043                           ;main.c: 534: putsUSART((char *) "+OK - Normal mode\r\n");
 11044  000474  0E7D               	movlw	high STR_20
 11045  000476  0100               	movlb	0	; () banked
 11046  000478  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11047  00047A  0E83               	movlw	low STR_20
 11048  00047C  6F61               	movwf	?_putsUSART& (0+255),b
 11049  00047E  EC6A  F027         	call	_putsUSART	;wreg free
 11050                           
 11051                           ;main.c: 535: }
 11052  000482  EF25  F00A         	goto	l10154
 11053  000486                     l9640:
 11054                           
 11055                           ;main.c: 536: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 11056  000486  0102               	movlb	2	; () banked
 11057  000488  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11058  00048A  0E01               	movlw	1
 11059  00048C  A4D8               	btfss	status,2,c
 11060  00048E  0E00               	movlw	0
 11061  000490  0101               	movlb	1	; () banked
 11062  000492  1501               	andwf	_bSilent& (0+255),w,b
 11063  000494  E009               	bz	l9644
 11064                           
 11065                           ; BSR set to: 1
 11066                           ;main.c: 537: putsUSART((char *) "+OK - Silent mode\r\n");
 11067  000496  0E7D               	movlw	high STR_21
 11068  000498  0100               	movlb	0	; () banked
 11069  00049A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11070  00049C  0E97               	movlw	low STR_21
 11071  00049E  6F61               	movwf	?_putsUSART& (0+255),b
 11072  0004A0  EC6A  F027         	call	_putsUSART	;wreg free
 11073                           
 11074                           ;main.c: 538: }
 11075  0004A4  EF25  F00A         	goto	l10154
 11076  0004A8                     l9644:
 11077                           
 11078                           ; BSR set to: 1
 11079                           ;main.c: 539: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 11080  0004A8  0102               	movlb	2	; () banked
 11081  0004AA  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11082  0004AC  0A20               	xorlw	32
 11083  0004AE  E109               	bnz	l9648
 11084                           
 11085                           ; BSR set to: 2
 11086                           ;main.c: 540: putsUSART((char *) "+OK - Sleep mode\r\n");
 11087  0004B0  0E7D               	movlw	high STR_22
 11088  0004B2  0100               	movlb	0	; () banked
 11089  0004B4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11090  0004B6  0ED3               	movlw	low STR_22
 11091  0004B8  6F61               	movwf	?_putsUSART& (0+255),b
 11092  0004BA  EC6A  F027         	call	_putsUSART	;wreg free
 11093                           
 11094                           ;main.c: 541: }
 11095  0004BE  EF25  F00A         	goto	l10154
 11096  0004C2                     l9648:
 11097                           
 11098                           ; BSR set to: 2
 11099                           ;main.c: 542: else if (ECAN_OP_MODE_LOOP == ifmode) {
 11100  0004C2  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11101  0004C4  0A40               	xorlw	64
 11102  0004C6  E109               	bnz	l9652
 11103                           
 11104                           ; BSR set to: 2
 11105                           ;main.c: 543: putsUSART((char *) "+OK - Loopback mode\r\n");
 11106  0004C8  0E7D               	movlw	high STR_23
 11107  0004CA  0100               	movlb	0	; () banked
 11108  0004CC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11109  0004CE  0E06               	movlw	low STR_23
 11110  0004D0  6F61               	movwf	?_putsUSART& (0+255),b
 11111  0004D2  EC6A  F027         	call	_putsUSART	;wreg free
 11112                           
 11113                           ;main.c: 544: }
 11114  0004D6  EF25  F00A         	goto	l10154
 11115  0004DA                     l9652:
 11116                           
 11117                           ; BSR set to: 2
 11118                           ;main.c: 545: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 11119  0004DA  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11120  0004DC  0A60               	xorlw	96
 11121  0004DE  E109               	bnz	l9656
 11122                           
 11123                           ; BSR set to: 2
 11124                           ;main.c: 546: putsUSART((char *) "+OK - Listen only mode\r\n");
 11125  0004E0  0E7B               	movlw	high STR_24
 11126  0004E2  0100               	movlb	0	; () banked
 11127  0004E4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11128  0004E6  0ECF               	movlw	low STR_24
 11129  0004E8  6F61               	movwf	?_putsUSART& (0+255),b
 11130  0004EA  EC6A  F027         	call	_putsUSART	;wreg free
 11131                           
 11132                           ;main.c: 547: }
 11133  0004EE  EF25  F00A         	goto	l10154
 11134  0004F2                     l9656:
 11135                           
 11136                           ; BSR set to: 2
 11137                           ;main.c: 548: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 11138  0004F2  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11139  0004F4  0A80               	xorlw	128
 11140  0004F6  E109               	bnz	l9660
 11141                           
 11142                           ; BSR set to: 2
 11143                           ;main.c: 549: putsUSART((char *) "+OK - Closed mode\r\n");
 11144  0004F8  0E7D               	movlw	high STR_25
 11145  0004FA  0100               	movlb	0	; () banked
 11146  0004FC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11147  0004FE  0E6F               	movlw	low STR_25
 11148  000500  6F61               	movwf	?_putsUSART& (0+255),b
 11149  000502  EC6A  F027         	call	_putsUSART	;wreg free
 11150                           
 11151                           ;main.c: 550: }
 11152  000506  EF25  F00A         	goto	l10154
 11153  00050A                     l9660:
 11154                           
 11155                           ; BSR set to: 2
 11156                           ;main.c: 551: else if (ECAN_OP_MODE_BITS == ifmode) {
 11157  00050A  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11158  00050C  0AE0               	xorlw	224
 11159  00050E  E109               	bnz	l9664
 11160                           
 11161                           ; BSR set to: 2
 11162                           ;main.c: 552: putsUSART((char *) "+OK - Bits mode\r\n");
 11163  000510  0E7D               	movlw	high STR_26
 11164  000512  0100               	movlb	0	; () banked
 11165  000514  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11166  000516  0EE6               	movlw	low STR_26
 11167  000518  6F61               	movwf	?_putsUSART& (0+255),b
 11168  00051A  EC6A  F027         	call	_putsUSART	;wreg free
 11169                           
 11170                           ;main.c: 553: }
 11171  00051E  EF25  F00A         	goto	l10154
 11172  000522                     l9664:
 11173                           
 11174                           ; BSR set to: 2
 11175                           ;main.c: 554: else {
 11176                           ;main.c: 555: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 11177  000522  0E7C               	movlw	high STR_27
 11178  000524  0100               	movlb	0	; () banked
 11179  000526  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11180  000528  0E49               	movlw	low STR_27
 11181  00052A  6F61               	movwf	?_putsUSART& (0+255),b
 11182  00052C  EC6A  F027         	call	_putsUSART	;wreg free
 11183  000530  EF25  F00A         	goto	l10154
 11184  000534                     l9666:
 11185                           
 11186                           ; BSR set to: 1
 11187                           ;main.c: 560: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 11188  000534  0E01               	movlw	high _cmdbuf
 11189  000536  0100               	movlb	0	; () banked
 11190  000538  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11191  00053A  0E04               	movlw	low _cmdbuf
 11192  00053C  6F6D               	movwf	?_stristr& (0+255),b
 11193  00053E  0E7F               	movlw	high STR_28
 11194  000540  6F70               	movwf	(?_stristr+3)& (0+255),b
 11195  000542  0EEB               	movlw	low STR_28
 11196  000544  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11197  000546  ECEE  F024         	call	_stristr	;wreg free
 11198  00054A  EC35  F00A         	call	PL2	;call to abstracted procedure
 11199  00054E  E104               	bnz	u11795
 11200  000550  0100               	movlb	0	; () banked
 11201  000552  516D               	movf	?_stristr& (0+255),w,b
 11202  000554  0101               	movlb	1	; () banked
 11203  000556  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11204  000558                     u11795:
 11205  000558  E001 D0D9          	bnz	l9720
 11206                           
 11207                           ; BSR set to: 1
 11208                           ;main.c: 562: char *p = strtok(cmdbuf, ",");
 11209  00055C  EC98  F00A         	call	PL28	;call to abstracted procedure
 11210  000560  EC59  F023         	call	_strtok	;wreg free
 11211  000564  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11212  000568  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11213                           
 11214                           ; BSR set to: 0
 11215                           ;main.c: 565: vscpPriority = 3;
 11216  00056C  0E03               	movlw	3
 11217  00056E  0101               	movlb	1	; () banked
 11218  000570  6FAF               	movwf	_vscpPriority& (0+255),b
 11219                           
 11220                           ; BSR set to: 1
 11221                           ;main.c: 566: if ((0) != p) {
 11222  000572  0102               	movlb	2	; () banked
 11223  000574  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11224  000576  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11225  000578  E009               	bz	l9676
 11226                           
 11227                           ; BSR set to: 2
 11228                           ;main.c: 567: vscpPriority = atoi(p);
 11229  00057A  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11230  00057E  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11231  000582  EC4A  F01C         	call	_atoi	;wreg free
 11232  000586  5166               	movf	?_atoi& (0+255),w,b
 11233  000588  0101               	movlb	1	; () banked
 11234  00058A  6FAF               	movwf	_vscpPriority& (0+255),b
 11235  00058C                     l9676:
 11236                           
 11237                           ;main.c: 568: }
 11238                           ;main.c: 571: vscpClass = 0;
 11239  00058C  0101               	movlb	1	; () banked
 11240  00058E  6BAC               	clrf	_vscpClass& (0+255),b
 11241  000590  6BAD               	clrf	(_vscpClass+1)& (0+255),b
 11242                           
 11243                           ; BSR set to: 1
 11244                           ;main.c: 572: if ((0) != (p = strtok((0), ","))) {
 11245  000592  EC3F  F00A         	call	PL4	;call to abstracted procedure
 11246  000596  EC59  F023         	call	_strtok	;wreg free
 11247  00059A  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11248  00059E  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11249  0005A2  0102               	movlb	2	; () banked
 11250  0005A4  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11251  0005A6  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11252  0005A8  E00A               	bz	l9682
 11253                           
 11254                           ; BSR set to: 2
 11255                           ;main.c: 573: vscpClass = atoi(p);
 11256  0005AA  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11257  0005AE  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11258  0005B2  EC4A  F01C         	call	_atoi	;wreg free
 11259  0005B6  C066  F1AC         	movff	?_atoi,_vscpClass
 11260  0005BA  C067  F1AD         	movff	?_atoi+1,_vscpClass+1
 11261  0005BE                     l9682:
 11262                           
 11263                           ;main.c: 574: }
 11264                           ;main.c: 577: vscpType = 0;
 11265  0005BE  0101               	movlb	1	; () banked
 11266  0005C0  6BB1               	clrf	_vscpType& (0+255),b
 11267                           
 11268                           ; BSR set to: 1
 11269                           ;main.c: 578: if ((0) != (p = strtok((0), ","))) {
 11270  0005C2  EC3F  F00A         	call	PL4	;call to abstracted procedure
 11271  0005C6  EC59  F023         	call	_strtok	;wreg free
 11272  0005CA  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11273  0005CE  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11274  0005D2  0102               	movlb	2	; () banked
 11275  0005D4  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11276  0005D6  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11277  0005D8  E009               	bz	l9688
 11278                           
 11279                           ; BSR set to: 2
 11280                           ;main.c: 579: vscpType = atoi(p);
 11281  0005DA  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11282  0005DE  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11283  0005E2  EC4A  F01C         	call	_atoi	;wreg free
 11284  0005E6  5166               	movf	?_atoi& (0+255),w,b
 11285  0005E8  0101               	movlb	1	; () banked
 11286  0005EA  6FB1               	movwf	_vscpType& (0+255),b
 11287  0005EC                     l9688:
 11288                           
 11289                           ;main.c: 580: }
 11290                           ;main.c: 583: vscpNodeId = 0;
 11291  0005EC  0101               	movlb	1	; () banked
 11292  0005EE  6BAE               	clrf	_vscpNodeId& (0+255),b
 11293                           
 11294                           ; BSR set to: 1
 11295                           ;main.c: 584: if ((0) != (p = strtok((0), ","))) {
 11296  0005F0  EC3F  F00A         	call	PL4	;call to abstracted procedure
 11297  0005F4  EC59  F023         	call	_strtok	;wreg free
 11298  0005F8  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11299  0005FC  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11300  000600  0102               	movlb	2	; () banked
 11301  000602  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11302  000604  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11303  000606  E009               	bz	l9694
 11304                           
 11305                           ; BSR set to: 2
 11306                           ;main.c: 585: vscpNodeId = atoi(p);
 11307  000608  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11308  00060C  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11309  000610  EC4A  F01C         	call	_atoi	;wreg free
 11310  000614  5166               	movf	?_atoi& (0+255),w,b
 11311  000616  0101               	movlb	1	; () banked
 11312  000618  6FAE               	movwf	_vscpNodeId& (0+255),b
 11313  00061A                     l9694:
 11314                           
 11315                           ;main.c: 586: }
 11316                           ;main.c: 589: vscpSize = 0;
 11317  00061A  0101               	movlb	1	; () banked
 11318  00061C  6BB0               	clrf	_vscpSize& (0+255),b
 11319                           
 11320                           ; BSR set to: 1
 11321                           ;main.c: 590: if ((0) != (p = strtok((0), ","))) {
 11322  00061E  EC3F  F00A         	call	PL4	;call to abstracted procedure
 11323  000622  EC59  F023         	call	_strtok	;wreg free
 11324  000626  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11325  00062A  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11326  00062E  0102               	movlb	2	; () banked
 11327  000630  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11328  000632  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11329  000634  E009               	bz	l9700
 11330                           
 11331                           ; BSR set to: 2
 11332                           ;main.c: 591: vscpSize = atoi(p);
 11333  000636  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11334  00063A  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11335  00063E  EC4A  F01C         	call	_atoi	;wreg free
 11336  000642  5166               	movf	?_atoi& (0+255),w,b
 11337  000644  0101               	movlb	1	; () banked
 11338  000646  6FB0               	movwf	_vscpSize& (0+255),b
 11339  000648                     l9700:
 11340                           
 11341                           ;main.c: 592: }
 11342                           ;main.c: 594: memset(vscpData, 0, 8);
 11343  000648  0E01               	movlw	high _vscpData
 11344  00064A  0100               	movlb	0	; () banked
 11345  00064C  6F61               	movwf	(?_memset+1)& (0+255),b
 11346  00064E  0EA4               	movlw	low _vscpData
 11347  000650  6F60               	movwf	?_memset& (0+255),b
 11348  000652  6B63               	clrf	(?_memset+3)& (0+255),b
 11349  000654  6B62               	clrf	(?_memset+2)& (0+255),b
 11350  000656  6B65               	clrf	(?_memset+5)& (0+255),b
 11351  000658  0E08               	movlw	8
 11352  00065A  6F64               	movwf	(?_memset+4)& (0+255),b
 11353  00065C  ECC7  F029         	call	_memset	;wreg free
 11354                           
 11355                           ; BSR set to: 0
 11356                           ;main.c: 595: for (i = 0; i < vscpSize; i++) {
 11357  000660  0102               	movlb	2	; () banked
 11358  000662  6BAA               	clrf	doModeVerbose@i& (0+255),b
 11359  000664  D01D               	goto	l9710
 11360  000666                     l9704:
 11361                           
 11362                           ; BSR set to: 2
 11363                           ;main.c: 596: if ((0) != (p = strtok((0), ","))) {
 11364  000666  EC3F  F00A         	call	PL4	;call to abstracted procedure
 11365  00066A  EC59  F023         	call	_strtok	;wreg free
 11366  00066E  C06C  F2B7         	movff	?_strtok,doModeVerbose@p
 11367  000672  C06D  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 11368  000676  0102               	movlb	2	; () banked
 11369  000678  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 11370  00067A  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 11371  00067C  E016               	bz	l9712
 11372                           
 11373                           ; BSR set to: 2
 11374                           ;main.c: 597: vscpData[ i ] = atoi(p);
 11375  00067E  0EA4               	movlw	low _vscpData
 11376  000680  25AA               	addwf	doModeVerbose@i& (0+255),w,b
 11377  000682  6ED9               	movwf	fsr2l,c
 11378  000684  6ADA               	clrf	fsr2h,c
 11379  000686  0101               	movlb	1	; () banked
 11380  000688  0E01               	movlw	high _vscpData
 11381  00068A  22DA               	addwfc	fsr2h,f,c
 11382  00068C  C2B7  F066         	movff	doModeVerbose@p,?_atoi
 11383  000690  C2B8  F067         	movff	doModeVerbose@p+1,?_atoi+1
 11384  000694  EC4A  F01C         	call	_atoi	;wreg free
 11385  000698  5166               	movf	?_atoi& (0+255),w,b
 11386  00069A  6EDF               	movwf	indf2,c
 11387                           
 11388                           ; BSR set to: 0
 11389                           
 11390                           ;main.c: 598: } else {
 11391  00069C  0102               	movlb	2	; () banked
 11392  00069E  2BAA               	incf	doModeVerbose@i& (0+255),f,b
 11393  0006A0                     l9710:
 11394                           
 11395                           ; BSR set to: 2
 11396  0006A0  0101               	movlb	1	; () banked
 11397  0006A2  51B0               	movf	_vscpSize& (0+255),w,b
 11398  0006A4  0102               	movlb	2	; () banked
 11399  0006A6  5DAA               	subwf	doModeVerbose@i& (0+255),w,b
 11400  0006A8  E3DE               	bnc	l9704
 11401  0006AA                     l9712:
 11402                           
 11403                           ; BSR set to: 2
 11404                           ;main.c: 600: }
 11405                           ;main.c: 601: }
 11406                           ;main.c: 603: if ( sendVSCPFrame(vscpClass,
 11407                           ;main.c: 604: vscpType,
 11408                           ;main.c: 605: vscpNodeId,
 11409                           ;main.c: 606: vscpPriority,
 11410                           ;main.c: 607: vscpSize,
 11411                           ;main.c: 608: vscpData ) ) {
 11412  0006AA  C1AC  F096         	movff	_vscpClass,?_sendVSCPFrame
 11413  0006AE  C1AD  F097         	movff	_vscpClass+1,?_sendVSCPFrame+1
 11414  0006B2  C1B1  F098         	movff	_vscpType,?_sendVSCPFrame+2
 11415  0006B6  C1AE  F099         	movff	_vscpNodeId,?_sendVSCPFrame+3
 11416  0006BA  C1AF  F09A         	movff	_vscpPriority,?_sendVSCPFrame+4
 11417  0006BE  C1B0  F09B         	movff	_vscpSize,?_sendVSCPFrame+5
 11418  0006C2  0E01               	movlw	high _vscpData
 11419  0006C4  0100               	movlb	0	; () banked
 11420  0006C6  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 11421  0006C8  0EA4               	movlw	low _vscpData
 11422  0006CA  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 11423  0006CC  EC26  F021         	call	_sendVSCPFrame	;wreg free
 11424  0006D0  0900               	iorlw	0
 11425  0006D2  E015               	bz	l9718
 11426                           
 11427                           ; BSR set to: 0
 11428                           ;main.c: 610: cntTxFrames++;
 11429  0006D4  2BE5               	incf	_cntTxFrames& (0+255),f,b
 11430  0006D6  0E00               	movlw	0
 11431  0006D8  23E6               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 11432  0006DA  23E7               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 11433  0006DC  23E8               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 11434                           
 11435                           ;main.c: 611: cntTxBytes += vscpSize;
 11436  0006DE  0101               	movlb	1	; () banked
 11437  0006E0  51B0               	movf	_vscpSize& (0+255),w,b
 11438  0006E2  0100               	movlb	0	; () banked
 11439  0006E4  27E1               	addwf	_cntTxBytes& (0+255),f,b
 11440  0006E6  0E00               	movlw	0
 11441  0006E8  23E2               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 11442  0006EA  23E3               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 11443  0006EC  23E4               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 11444                           
 11445                           ; BSR set to: 0
 11446                           ;main.c: 612: putsUSART((char *) "+OK\r\n");
 11447  0006EE  0E7F               	movlw	high STR_8
 11448  0006F0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11449  0006F2  0E80               	movlw	low STR_8
 11450  0006F4  6F61               	movwf	?_putsUSART& (0+255),b
 11451  0006F6  EC6A  F027         	call	_putsUSART	;wreg free
 11452                           
 11453                           ;main.c: 613: }
 11454  0006FA  EF25  F00A         	goto	l10154
 11455  0006FE                     l9718:
 11456                           
 11457                           ; BSR set to: 0
 11458                           ;main.c: 614: else {
 11459                           ;main.c: 615: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 11460  0006FE  0E7A               	movlw	high STR_36
 11461  000700  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11462  000702  0E49               	movlw	low STR_36
 11463  000704  6F61               	movwf	?_putsUSART& (0+255),b
 11464  000706  EC6A  F027         	call	_putsUSART	;wreg free
 11465  00070A  EF25  F00A         	goto	l10154
 11466  00070E                     l9720:
 11467                           
 11468                           ; BSR set to: 1
 11469                           ;main.c: 619: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 11470  00070E  0E01               	movlw	high _cmdbuf
 11471  000710  0100               	movlb	0	; () banked
 11472  000712  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11473  000714  0E04               	movlw	low _cmdbuf
 11474  000716  6F6D               	movwf	?_stristr& (0+255),b
 11475  000718  0E7F               	movlw	high STR_37
 11476  00071A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11477  00071C  0EE8               	movlw	low STR_37
 11478  00071E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11479  000720  ECEE  F024         	call	_stristr	;wreg free
 11480  000724  EC35  F00A         	call	PL2	;call to abstracted procedure
 11481  000728  E104               	bnz	u11885
 11482  00072A  0100               	movlb	0	; () banked
 11483  00072C  516D               	movf	?_stristr& (0+255),w,b
 11484  00072E  0101               	movlb	1	; () banked
 11485  000730  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11486  000732                     u11885:
 11487  000732  E116               	bnz	l9728
 11488                           
 11489                           ; BSR set to: 1
 11490                           ;main.c: 620: if (receivePrintEventVerbose()) {
 11491  000734  EC9F  F011         	call	_receivePrintEventVerbose	;wreg free
 11492  000738  0900               	iorlw	0
 11493  00073A  E009               	bz	l9726
 11494                           
 11495                           ;main.c: 621: putsUSART((char *) "+OK\r\n");
 11496  00073C  0E7F               	movlw	high STR_8
 11497  00073E  0100               	movlb	0	; () banked
 11498  000740  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11499  000742  0E80               	movlw	low STR_8
 11500  000744  6F61               	movwf	?_putsUSART& (0+255),b
 11501  000746  EC6A  F027         	call	_putsUSART	;wreg free
 11502                           
 11503                           ;main.c: 622: }
 11504  00074A  EF25  F00A         	goto	l10154
 11505  00074E                     l9726:
 11506                           
 11507                           ;main.c: 623: else {
 11508                           ;main.c: 624: putsUSART((char *) "+OK - no events\r\n");
 11509  00074E  0E7D               	movlw	high STR_39
 11510  000750  0100               	movlb	0	; () banked
 11511  000752  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11512  000754  0EF8               	movlw	low STR_39
 11513  000756  6F61               	movwf	?_putsUSART& (0+255),b
 11514  000758  EC6A  F027         	call	_putsUSART	;wreg free
 11515  00075C  EF25  F00A         	goto	l10154
 11516  000760                     l9728:
 11517                           
 11518                           ; BSR set to: 1
 11519                           ;main.c: 628: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 11520  000760  0E01               	movlw	high _cmdbuf
 11521  000762  0100               	movlb	0	; () banked
 11522  000764  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11523  000766  0E04               	movlw	low _cmdbuf
 11524  000768  6F6D               	movwf	?_stristr& (0+255),b
 11525  00076A  0E7F               	movlw	high STR_40
 11526  00076C  6F70               	movwf	(?_stristr+3)& (0+255),b
 11527  00076E  0ECB               	movlw	low STR_40
 11528  000770  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11529  000772  ECEE  F024         	call	_stristr	;wreg free
 11530  000776  EC35  F00A         	call	PL2	;call to abstracted procedure
 11531  00077A  E104               	bnz	u11905
 11532  00077C  0100               	movlb	0	; () banked
 11533  00077E  516D               	movf	?_stristr& (0+255),w,b
 11534  000780  0101               	movlb	1	; () banked
 11535  000782  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11536  000784                     u11905:
 11537  000784  E104               	bnz	l9732
 11538                           
 11539                           ; BSR set to: 1
 11540                           ;main.c: 629: printStatistics();
 11541  000786  ECD3  F015         	call	_printStatistics	;wreg free
 11542                           
 11543                           ;main.c: 630: }
 11544  00078A  EF25  F00A         	goto	l10154
 11545  00078E                     l9732:
 11546                           
 11547                           ; BSR set to: 1
 11548                           ;main.c: 632: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 11549  00078E  0E01               	movlw	high _cmdbuf
 11550  000790  0100               	movlb	0	; () banked
 11551  000792  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11552  000794  0E04               	movlw	low _cmdbuf
 11553  000796  6F6D               	movwf	?_stristr& (0+255),b
 11554  000798  0E7F               	movlw	high STR_41
 11555  00079A  6F70               	movwf	(?_stristr+3)& (0+255),b
 11556  00079C  0ED9               	movlw	low STR_41
 11557  00079E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11558  0007A0  ECEE  F024         	call	_stristr	;wreg free
 11559  0007A4  EC35  F00A         	call	PL2	;call to abstracted procedure
 11560  0007A8  E104               	bnz	u11915
 11561  0007AA  0100               	movlb	0	; () banked
 11562  0007AC  516D               	movf	?_stristr& (0+255),w,b
 11563  0007AE  0101               	movlb	1	; () banked
 11564  0007B0  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11565  0007B2                     u11915:
 11566  0007B2  E104               	bnz	l9736
 11567                           
 11568                           ; BSR set to: 1
 11569                           ;main.c: 633: printErrors();
 11570  0007B4  EC34  F010         	call	_printErrors	;wreg free
 11571                           
 11572                           ;main.c: 634: }
 11573  0007B8  EF25  F00A         	goto	l10154
 11574  0007BC                     l9736:
 11575                           
 11576                           ; BSR set to: 1
 11577                           ;main.c: 636: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 11578  0007BC  0E01               	movlw	high _cmdbuf
 11579  0007BE  0100               	movlb	0	; () banked
 11580  0007C0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11581  0007C2  0E04               	movlw	low _cmdbuf
 11582  0007C4  6F6D               	movwf	?_stristr& (0+255),b
 11583  0007C6  0E7F               	movlw	high STR_42
 11584  0007C8  6F70               	movwf	(?_stristr+3)& (0+255),b
 11585  0007CA  0EC6               	movlw	low STR_42
 11586  0007CC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11587  0007CE  ECEE  F024         	call	_stristr	;wreg free
 11588  0007D2  EC35  F00A         	call	PL2	;call to abstracted procedure
 11589  0007D6  E104               	bnz	u11925
 11590  0007D8  0100               	movlb	0	; () banked
 11591  0007DA  516D               	movf	?_stristr& (0+255),w,b
 11592  0007DC  0101               	movlb	1	; () banked
 11593  0007DE  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11594  0007E0                     u11925:
 11595  0007E0  E10B               	bnz	l9740
 11596                           
 11597                           ; BSR set to: 1
 11598                           ;main.c: 637: printHelp();
 11599  0007E2  ECF3  F014         	call	_printHelp	;wreg free
 11600                           
 11601                           ;main.c: 638: putsUSART((char *) "+OK\r\n");
 11602  0007E6  0E7F               	movlw	high STR_8
 11603  0007E8  0100               	movlb	0	; () banked
 11604  0007EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11605  0007EC  0E80               	movlw	low STR_8
 11606  0007EE  6F61               	movwf	?_putsUSART& (0+255),b
 11607  0007F0  EC6A  F027         	call	_putsUSART	;wreg free
 11608                           
 11609                           ;main.c: 639: }
 11610  0007F4  EF25  F00A         	goto	l10154
 11611  0007F8                     l9740:
 11612                           
 11613                           ; BSR set to: 1
 11614                           ;main.c: 641: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 11615  0007F8  0E01               	movlw	high _cmdbuf
 11616  0007FA  0100               	movlb	0	; () banked
 11617  0007FC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11618  0007FE  0E04               	movlw	low _cmdbuf
 11619  000800  6F6D               	movwf	?_stristr& (0+255),b
 11620  000802  0E7F               	movlw	high STR_44
 11621  000804  6F70               	movwf	(?_stristr+3)& (0+255),b
 11622  000806  0EA3               	movlw	low STR_44
 11623  000808  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11624  00080A  ECEE  F024         	call	_stristr	;wreg free
 11625  00080E  EC35  F00A         	call	PL2	;call to abstracted procedure
 11626  000812  E104               	bnz	u11935
 11627  000814  0100               	movlb	0	; () banked
 11628  000816  516D               	movf	?_stristr& (0+255),w,b
 11629  000818  0101               	movlb	1	; () banked
 11630  00081A  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11631  00081C                     u11935:
 11632  00081C  E104               	bnz	l9744
 11633                           
 11634                           ; BSR set to: 1
 11635                           ;main.c: 642: findNodes();
 11636  00081E  ECCD  F01D         	call	_findNodes	;wreg free
 11637                           
 11638                           ;main.c: 643: }
 11639  000822  EF25  F00A         	goto	l10154
 11640  000826                     l9744:
 11641                           
 11642                           ; BSR set to: 1
 11643                           ;main.c: 646: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 11644  000826  0E01               	movlw	high _cmdbuf
 11645  000828  0100               	movlb	0	; () banked
 11646  00082A  6F6E               	movwf	(?_stristr+1)& (0+255),b
 11647  00082C  0E04               	movlw	low _cmdbuf
 11648  00082E  6F6D               	movwf	?_stristr& (0+255),b
 11649  000830  0E7F               	movlw	high STR_45
 11650  000832  6F70               	movwf	(?_stristr+3)& (0+255),b
 11651  000834  0EA8               	movlw	low STR_45
 11652  000836  6F6F               	movwf	(?_stristr+2)& (0+255),b
 11653  000838  ECEE  F024         	call	_stristr	;wreg free
 11654  00083C  EC35  F00A         	call	PL2	;call to abstracted procedure
 11655  000840  E104               	bnz	u11945
 11656  000842  0100               	movlb	0	; () banked
 11657  000844  516D               	movf	?_stristr& (0+255),w,b
 11658  000846  0101               	movlb	1	; () banked
 11659  000848  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 11660  00084A                     u11945:
 11661  00084A  E001 D1B4          	bnz	l9874
 11662                           
 11663                           ; BSR set to: 1
 11664                           ;main.c: 648: uint8_t i;
 11665                           ;main.c: 649: uint8_t nodeid;
 11666                           ;main.c: 650: uint8_t page = 0;
 11667  00084E  0102               	movlb	2	; () banked
 11668  000850  6BAD               	clrf	doModeVerbose@page& (0+255),b
 11669                           
 11670                           ; BSR set to: 2
 11671                           ;main.c: 651: uint8_t reg;
 11672                           ;main.c: 652: uint8_t value;
 11673                           ;main.c: 653: uint8_t count = 1;
 11674  000852  0E01               	movlw	1
 11675  000854  6FAB               	movwf	doModeVerbose@count& (0+255),b
 11676                           
 11677                           ; BSR set to: 2
 11678                           ;main.c: 655: strcpy(cmdbuf, cmdbuf + 5);
 11679  000856  EC4E  F00A         	call	PL8	;call to abstracted procedure
 11680  00085A  EC98  F029         	call	_strcpy	;wreg free
 11681                           
 11682                           ;main.c: 656: char *p = strtok(cmdbuf, " ");
 11683  00085E  0E01               	movlw	high _cmdbuf
 11684  000860  ECA2  F00A         	call	PL34	;call to abstracted procedure
 11685  000864  EC59  F023         	call	_strtok	;wreg free
 11686  000868  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1133
 11687  00086C  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1133+1
 11688                           
 11689                           ; BSR set to: 0
 11690                           ;main.c: 657: if ((0) != p) {
 11691  000870  0102               	movlb	2	; () banked
 11692  000872  51B3               	movf	(doModeVerbose@p_1133+1)& (0+255),w,b
 11693  000874  11B2               	iorwf	doModeVerbose@p_1133& (0+255),w,b
 11694  000876  E00A               	bz	l9758
 11695                           
 11696                           ; BSR set to: 2
 11697                           ;main.c: 658: nodeid = atoi(p);
 11698  000878  C2B2  F066         	movff	doModeVerbose@p_1133,?_atoi
 11699  00087C  C2B3  F067         	movff	doModeVerbose@p_1133+1,?_atoi+1
 11700  000880  EC4A  F01C         	call	_atoi	;wreg free
 11701  000884  5166               	movf	?_atoi& (0+255),w,b
 11702  000886  0102               	movlb	2	; () banked
 11703  000888  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 11704                           
 11705                           ;main.c: 659: } else {
 11706  00088A  D009               	goto	l9762
 11707  00088C                     l9758:
 11708                           
 11709                           ; BSR set to: 2
 11710                           ;main.c: 660: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 11711  00088C  0E7C               	movlw	high STR_47
 11712  00088E  0100               	movlb	0	; () banked
 11713  000890  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11714  000892  0E31               	movlw	low STR_47
 11715  000894  6F61               	movwf	?_putsUSART& (0+255),b
 11716  000896  EC6A  F027         	call	_putsUSART	;wreg free
 11717  00089A  EF34  F00A         	goto	l502
 11718  00089E                     l9762:
 11719                           
 11720                           ; BSR set to: 2
 11721                           ;main.c: 662: }
 11722                           ;main.c: 664: if ((0) != (p = strtok((0), " "))) {
 11723  00089E  EC90  F00A         	call	PL26	;call to abstracted procedure
 11724  0008A2  EC59  F023         	call	_strtok	;wreg free
 11725  0008A6  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1133
 11726  0008AA  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1133+1
 11727  0008AE  0102               	movlb	2	; () banked
 11728  0008B0  51B3               	movf	(doModeVerbose@p_1133+1)& (0+255),w,b
 11729  0008B2  11B2               	iorwf	doModeVerbose@p_1133& (0+255),w,b
 11730  0008B4  E034               	bz	l9770
 11731                           
 11732                           ; BSR set to: 2
 11733                           ;main.c: 666: char *preg;
 11734                           ;main.c: 667: if (preg = strchr(p, ':')) {
 11735  0008B6  C2B2  F060         	movff	doModeVerbose@p_1133,?_strchr
 11736  0008BA  C2B3  F061         	movff	doModeVerbose@p_1133+1,?_strchr+1
 11737  0008BE  0100               	movlb	0	; () banked
 11738  0008C0  6B63               	clrf	(?_strchr+3)& (0+255),b
 11739  0008C2  0E3A               	movlw	58
 11740  0008C4  6F62               	movwf	(?_strchr+2)& (0+255),b
 11741  0008C6  ECAE  F026         	call	_strchr	;wreg free
 11742  0008CA  C060  F284         	movff	?_strchr,doModeVerbose@preg
 11743  0008CE  C061  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 11744  0008D2  0102               	movlb	2	; () banked
 11745  0008D4  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 11746  0008D6  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 11747  0008D8  E018               	bz	l9768
 11748                           
 11749                           ; BSR set to: 2
 11750                           ;main.c: 668: page = atoi(p);
 11751  0008DA  C2B2  F066         	movff	doModeVerbose@p_1133,?_atoi
 11752  0008DE  C2B3  F067         	movff	doModeVerbose@p_1133+1,?_atoi+1
 11753  0008E2  EC4A  F01C         	call	_atoi	;wreg free
 11754  0008E6  5166               	movf	?_atoi& (0+255),w,b
 11755  0008E8  0102               	movlb	2	; () banked
 11756  0008EA  6FAD               	movwf	doModeVerbose@page& (0+255),b
 11757                           
 11758                           ;main.c: 669: reg = atoi(preg + 1);
 11759  0008EC  2984               	incf	doModeVerbose@preg& (0+255),w,b
 11760  0008EE  0101               	movlb	1	; () banked
 11761  0008F0  6FB2               	movwf	??_doModeVerbose& (0+255),b
 11762  0008F2  0E00               	movlw	0
 11763  0008F4  0102               	movlb	2	; () banked
 11764  0008F6  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 11765  0008F8  0101               	movlb	1	; () banked
 11766  0008FA  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 11767  0008FC  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 11768  000900  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 11769  000904  EC4A  F01C         	call	_atoi	;wreg free
 11770  000908  D006               	goto	L4
 11771  00090A                     l9768:
 11772                           
 11773                           ; BSR set to: 2
 11774                           ;main.c: 671: reg = atoi(p);
 11775  00090A  C2B2  F066         	movff	doModeVerbose@p_1133,?_atoi
 11776  00090E  C2B3  F067         	movff	doModeVerbose@p_1133+1,?_atoi+1
 11777  000912  EC4A  F01C         	call	_atoi	;wreg free
 11778  000916                     L4:
 11779  000916  5166               	movf	?_atoi& (0+255),w,b
 11780  000918  0102               	movlb	2	; () banked
 11781  00091A  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 11782  00091C  D009               	goto	l9774
 11783  00091E                     l9770:
 11784                           
 11785                           ; BSR set to: 2
 11786                           ;main.c: 676: else {
 11787                           ;main.c: 677: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 11788  00091E  0E7A               	movlw	high STR_49
 11789  000920  0100               	movlb	0	; () banked
 11790  000922  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11791  000924  0EAC               	movlw	low STR_49
 11792  000926  6F61               	movwf	?_putsUSART& (0+255),b
 11793  000928  EC6A  F027         	call	_putsUSART	;wreg free
 11794  00092C  EF34  F00A         	goto	l502
 11795  000930                     l9774:
 11796                           
 11797                           ; BSR set to: 2
 11798                           ;main.c: 679: }
 11799                           ;main.c: 682: if ((0) != (p = strtok((0), " "))) {
 11800  000930  EC90  F00A         	call	PL26	;call to abstracted procedure
 11801  000934  EC59  F023         	call	_strtok	;wreg free
 11802  000938  C06C  F2B2         	movff	?_strtok,doModeVerbose@p_1133
 11803  00093C  C06D  F2B3         	movff	?_strtok+1,doModeVerbose@p_1133+1
 11804  000940  0102               	movlb	2	; () banked
 11805  000942  51B3               	movf	(doModeVerbose@p_1133+1)& (0+255),w,b
 11806  000944  11B2               	iorwf	doModeVerbose@p_1133& (0+255),w,b
 11807  000946  E00D               	bz	l507
 11808                           
 11809                           ; BSR set to: 2
 11810                           ;main.c: 683: count = atoi(p);
 11811  000948  C2B2  F066         	movff	doModeVerbose@p_1133,?_atoi
 11812  00094C  C2B3  F067         	movff	doModeVerbose@p_1133+1,?_atoi+1
 11813  000950  EC4A  F01C         	call	_atoi	;wreg free
 11814  000954  5166               	movf	?_atoi& (0+255),w,b
 11815  000956  0102               	movlb	2	; () banked
 11816  000958  6FAB               	movwf	doModeVerbose@count& (0+255),b
 11817                           
 11818                           ; BSR set to: 2
 11819                           ;main.c: 684: if (0 == count) count = 1;
 11820  00095A  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 11821  00095C  D002               	goto	l507
 11822                           
 11823                           ; BSR set to: 2
 11824  00095E  0E01               	movlw	1
 11825  000960  6FAB               	movwf	doModeVerbose@count& (0+255),b
 11826  000962                     l507:
 11827                           
 11828                           ; BSR set to: 2
 11829                           ;main.c: 685: }
 11830                           ;main.c: 687: BOOL rv = 1;
 11831  000962  0E01               	movlw	1
 11832  000964  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 11833                           
 11834                           ; BSR set to: 2
 11835                           ;main.c: 688: for (i = 0; i < count; i++) {
 11836  000966  6BB0               	clrf	doModeVerbose@i_1127& (0+255),b
 11837  000968  D10E               	goto	l9866
 11838  00096A                     l9784:
 11839                           
 11840                           ; BSR set to: 2
 11841                           ;main.c: 690: if (readRegisterExtended(nodeid,
 11842                           ;main.c: 691: page,
 11843                           ;main.c: 692: (reg + i) & 0xff,
 11844                           ;main.c: 693: rwtimeout,
 11845                           ;main.c: 694: &value)) {
 11846  00096A  0100               	movlb	0	; () banked
 11847  00096C  C2AD  F0B6         	movff	doModeVerbose@page,?_readRegisterExtended
 11848  000970  6BB7               	clrf	(?_readRegisterExtended+1)& (0+255),b
 11849  000972  0102               	movlb	2	; () banked
 11850  000974  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 11851  000976  25B0               	addwf	doModeVerbose@i_1127& (0+255),w,b
 11852  000978  0100               	movlb	0	; () banked
 11853  00097A  6FB8               	movwf	(?_readRegisterExtended+2)& (0+255),b
 11854  00097C  C103  F0B9         	movff	_rwtimeout,?_readRegisterExtended+3
 11855  000980  6BBA               	clrf	(?_readRegisterExtended+4)& (0+255),b
 11856  000982  0E02               	movlw	high doModeVerbose@value
 11857  000984  6FBC               	movwf	(?_readRegisterExtended+6)& (0+255),b
 11858  000986  0EB1               	movlw	low doModeVerbose@value
 11859  000988  6FBB               	movwf	(?_readRegisterExtended+5)& (0+255),b
 11860  00098A  0102               	movlb	2	; () banked
 11861  00098C  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 11862  00098E  EC4F  F01D         	call	_readRegisterExtended
 11863  000992  0900               	iorlw	0
 11864  000994  E101 D09D          	bz	l511
 11865                           
 11866                           ;main.c: 695: putsUSART((char *) "Value for reg ");
 11867  000998  0E7E               	movlw	high STR_51
 11868  00099A  0100               	movlb	0	; () banked
 11869  00099C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11870  00099E  0E5E               	movlw	low STR_51
 11871  0009A0  6F61               	movwf	?_putsUSART& (0+255),b
 11872  0009A2  EC6A  F027         	call	_putsUSART	;wreg free
 11873                           
 11874                           ;main.c: 696: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 11875  0009A6  0101               	movlb	1	; () banked
 11876  0009A8  6700               	tstfsz	_bHex& (0+255),b
 11877  0009AA  D005               	goto	l9792
 11878                           
 11879                           ; BSR set to: 1
 11880  0009AC  0E7F               	movlw	high STR_53
 11881  0009AE  0102               	movlb	2	; () banked
 11882  0009B0  6F95               	movwf	(_doModeVerbose$1145+1)& (0+255),b
 11883  0009B2  0EEE               	movlw	low STR_53
 11884  0009B4  D004               	goto	L5
 11885  0009B6                     l9792:
 11886                           
 11887                           ; BSR set to: 1
 11888  0009B6  0E7F               	movlw	high STR_52
 11889  0009B8  0102               	movlb	2	; () banked
 11890  0009BA  6F95               	movwf	(_doModeVerbose$1145+1)& (0+255),b
 11891  0009BC  0E65               	movlw	low STR_52
 11892  0009BE                     L5:
 11893  0009BE  6F94               	movwf	_doModeVerbose$1145& (0+255),b
 11894                           
 11895                           ; BSR set to: 2
 11896  0009C0  0E01               	movlw	high _wrkbuf
 11897  0009C2  0100               	movlb	0	; () banked
 11898  0009C4  6F77               	movwf	(?_sprintf+1)& (0+255),b
 11899  0009C6  0E54               	movlw	low _wrkbuf
 11900  0009C8  6F76               	movwf	?_sprintf& (0+255),b
 11901  0009CA  C294  F078         	movff	_doModeVerbose$1145,?_sprintf+2
 11902  0009CE  C295  F079         	movff	_doModeVerbose$1145+1,?_sprintf+3
 11903  0009D2  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 11904  0009D6  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 11905  0009D8  ECDD  F00A         	call	_sprintf	;wreg free
 11906                           
 11907                           ; BSR set to: 0
 11908                           ;main.c: 697: putsUSART(wrkbuf);
 11909  0009DC  0E01               	movlw	high _wrkbuf
 11910  0009DE  0100               	movlb	0	; () banked
 11911  0009E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11912  0009E2  0E54               	movlw	low _wrkbuf
 11913  0009E4  6F61               	movwf	?_putsUSART& (0+255),b
 11914  0009E6  EC6A  F027         	call	_putsUSART	;wreg free
 11915  0009EA                     l516:
 11916  0009EA  A2AC               	btfss	4012,1,c	;volatile
 11917  0009EC  D7FE               	goto	l516
 11918                           
 11919                           ;main.c: 699: WriteUSART(':');
 11920  0009EE  0E3A               	movlw	58
 11921  0009F0  EC37  F02A         	call	_WriteUSART
 11922                           
 11923                           ;main.c: 700: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 11924  0009F4  0101               	movlb	1	; () banked
 11925  0009F6  6700               	tstfsz	_bHex& (0+255),b
 11926  0009F8  D005               	goto	l9804
 11927                           
 11928                           ; BSR set to: 1
 11929  0009FA  0E7F               	movlw	high STR_53
 11930  0009FC  0102               	movlb	2	; () banked
 11931  0009FE  6F97               	movwf	(_doModeVerbose$1157+1)& (0+255),b
 11932  000A00  0EEE               	movlw	low STR_53
 11933  000A02  D004               	goto	L6
 11934  000A04                     l9804:
 11935                           
 11936                           ; BSR set to: 1
 11937  000A04  0E7F               	movlw	high STR_52
 11938  000A06  0102               	movlb	2	; () banked
 11939  000A08  6F97               	movwf	(_doModeVerbose$1157+1)& (0+255),b
 11940  000A0A  0E65               	movlw	low STR_52
 11941  000A0C                     L6:
 11942  000A0C  6F96               	movwf	_doModeVerbose$1157& (0+255),b
 11943                           
 11944                           ; BSR set to: 2
 11945  000A0E  0E01               	movlw	high _wrkbuf
 11946  000A10  0100               	movlb	0	; () banked
 11947  000A12  6F77               	movwf	(?_sprintf+1)& (0+255),b
 11948  000A14  0E54               	movlw	low _wrkbuf
 11949  000A16  6F76               	movwf	?_sprintf& (0+255),b
 11950  000A18  C296  F078         	movff	_doModeVerbose$1157,?_sprintf+2
 11951  000A1C  C297  F079         	movff	_doModeVerbose$1157+1,?_sprintf+3
 11952  000A20  ECAB  F00A         	call	PL38	;call to abstracted procedure
 11953  000A24  ECDD  F00A         	call	_sprintf	;wreg free
 11954                           
 11955                           ; BSR set to: 0
 11956                           ;main.c: 701: putsUSART(wrkbuf);
 11957  000A28  0E01               	movlw	high _wrkbuf
 11958  000A2A  0100               	movlb	0	; () banked
 11959  000A2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11960  000A2E  0E54               	movlw	low _wrkbuf
 11961  000A30  6F61               	movwf	?_putsUSART& (0+255),b
 11962  000A32  EC6A  F027         	call	_putsUSART	;wreg free
 11963                           
 11964                           ;main.c: 702: putsUSART((char *) " = ");
 11965  000A36  0E7E               	movlw	high (STR_234+4)
 11966  000A38  0100               	movlb	0	; () banked
 11967  000A3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 11968  000A3C  0EEA               	movlw	low (STR_234+4)
 11969  000A3E  6F61               	movwf	?_putsUSART& (0+255),b
 11970  000A40  EC6A  F027         	call	_putsUSART	;wreg free
 11971                           
 11972                           ;main.c: 703: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 11973  000A44  0101               	movlb	1	; () banked
 11974  000A46  6700               	tstfsz	_bHex& (0+255),b
 11975  000A48  D005               	goto	l9816
 11976                           
 11977                           ; BSR set to: 1
 11978  000A4A  0E7F               	movlw	high STR_53
 11979  000A4C  0102               	movlb	2	; () banked
 11980  000A4E  6F99               	movwf	(_doModeVerbose$1162+1)& (0+255),b
 11981  000A50  0EEE               	movlw	low STR_53
 11982  000A52  D004               	goto	L7
 11983  000A54                     l9816:
 11984                           
 11985                           ; BSR set to: 1
 11986  000A54  0E7F               	movlw	high STR_52
 11987  000A56  0102               	movlb	2	; () banked
 11988  000A58  6F99               	movwf	(_doModeVerbose$1162+1)& (0+255),b
 11989  000A5A  0E65               	movlw	low STR_52
 11990  000A5C                     L7:
 11991  000A5C  6F98               	movwf	_doModeVerbose$1162& (0+255),b
 11992                           
 11993                           ; BSR set to: 2
 11994  000A5E  0E01               	movlw	high _wrkbuf
 11995  000A60  0100               	movlb	0	; () banked
 11996  000A62  6F77               	movwf	(?_sprintf+1)& (0+255),b
 11997  000A64  0E54               	movlw	low _wrkbuf
 11998  000A66  6F76               	movwf	?_sprintf& (0+255),b
 11999  000A68  C298  F078         	movff	_doModeVerbose$1162,?_sprintf+2
 12000  000A6C  C299  F079         	movff	_doModeVerbose$1162+1,?_sprintf+3
 12001  000A70  C2B1  F07A         	movff	doModeVerbose@value,?_sprintf+4
 12002  000A74  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12003  000A76  ECDD  F00A         	call	_sprintf	;wreg free
 12004                           
 12005                           ; BSR set to: 0
 12006                           ;main.c: 704: putsUSART(wrkbuf);
 12007  000A7A  0E01               	movlw	high _wrkbuf
 12008  000A7C  0100               	movlb	0	; () banked
 12009  000A7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12010  000A80  0E54               	movlw	low _wrkbuf
 12011  000A82  6F61               	movwf	?_putsUSART& (0+255),b
 12012  000A84  EC6A  F027         	call	_putsUSART	;wreg free
 12013  000A88                     l527:
 12014  000A88  A2AC               	btfss	4012,1,c	;volatile
 12015  000A8A  D7FE               	goto	l527
 12016                           
 12017                           ;main.c: 706: WriteUSART(' ');
 12018  000A8C  0E20               	movlw	32
 12019  000A8E  EC37  F02A         	call	_WriteUSART
 12020  000A92                     l530:
 12021  000A92  A2AC               	btfss	4012,1,c	;volatile
 12022  000A94  D7FE               	goto	l530
 12023                           
 12024                           ;main.c: 708: if ((value > 32) && (value < 127)) {
 12025  000A96  0E20               	movlw	32
 12026  000A98  0102               	movlb	2	; () banked
 12027  000A9A  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 12028  000A9C  D007               	goto	l9830
 12029                           
 12030                           ; BSR set to: 2
 12031  000A9E  0E7F               	movlw	127
 12032  000AA0  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 12033  000AA2  D004               	goto	l9830
 12034                           
 12035                           ; BSR set to: 2
 12036                           ;main.c: 709: WriteUSART(value);
 12037  000AA4  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12038  000AA6  EC37  F02A         	call	_WriteUSART
 12039                           
 12040                           ;main.c: 710: }
 12041  000AAA  D003               	goto	l535
 12042  000AAC                     l9830:
 12043                           
 12044                           ; BSR set to: 2
 12045                           ;main.c: 711: else {
 12046                           ;main.c: 712: WriteUSART('.');
 12047  000AAC  0E2E               	movlw	46
 12048  000AAE  EC37  F02A         	call	_WriteUSART
 12049  000AB2                     l535:
 12050  000AB2  A2AC               	btfss	4012,1,c	;volatile
 12051  000AB4  D7FE               	goto	l535
 12052                           
 12053                           ;main.c: 715: WriteUSART(' ');
 12054  000AB6  0E20               	movlw	32
 12055  000AB8  EC37  F02A         	call	_WriteUSART
 12056                           
 12057                           ;main.c: 716: printBinary(value);
 12058  000ABC  0102               	movlb	2	; () banked
 12059  000ABE  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12060  000AC0  ECBD  F027         	call	_printBinary
 12061                           
 12062                           ; BSR set to: 0
 12063                           ;main.c: 717: putsUSART((char *) "\r\n");
 12064  000AC4  0E74               	movlw	high (STR_188+50)
 12065  000AC6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12066  000AC8  0EAE               	movlw	low (STR_188+50)
 12067  000ACA  6F61               	movwf	?_putsUSART& (0+255),b
 12068  000ACC  EC6A  F027         	call	_putsUSART	;wreg free
 12069                           
 12070                           ;main.c: 718: }
 12071  000AD0  D058               	goto	l9864
 12072  000AD2                     l511:
 12073                           
 12074                           ;main.c: 719: else {
 12075                           ;main.c: 720: rv = 0;
 12076  000AD2  0102               	movlb	2	; () banked
 12077  000AD4  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 12078                           
 12079                           ; BSR set to: 2
 12080                           ;main.c: 721: putsUSART((char *) "-ERROR - Unable to read register ");
 12081  000AD6  0E7A               	movlw	high STR_60
 12082  000AD8  0100               	movlb	0	; () banked
 12083  000ADA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12084  000ADC  0E06               	movlw	low STR_60
 12085  000ADE  6F61               	movwf	?_putsUSART& (0+255),b
 12086  000AE0  EC6A  F027         	call	_putsUSART	;wreg free
 12087                           
 12088                           ;main.c: 722: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12089  000AE4  0101               	movlb	1	; () banked
 12090  000AE6  6700               	tstfsz	_bHex& (0+255),b
 12091  000AE8  D005               	goto	l9844
 12092                           
 12093                           ; BSR set to: 1
 12094  000AEA  0E7F               	movlw	high STR_53
 12095  000AEC  0102               	movlb	2	; () banked
 12096  000AEE  6F9B               	movwf	(_doModeVerbose$1168+1)& (0+255),b
 12097  000AF0  0EEE               	movlw	low STR_53
 12098  000AF2  D004               	goto	L8
 12099  000AF4                     l9844:
 12100                           
 12101                           ; BSR set to: 1
 12102  000AF4  0E7F               	movlw	high STR_52
 12103  000AF6  0102               	movlb	2	; () banked
 12104  000AF8  6F9B               	movwf	(_doModeVerbose$1168+1)& (0+255),b
 12105  000AFA  0E65               	movlw	low STR_52
 12106  000AFC                     L8:
 12107  000AFC  6F9A               	movwf	_doModeVerbose$1168& (0+255),b
 12108                           
 12109                           ; BSR set to: 2
 12110  000AFE  0E01               	movlw	high _wrkbuf
 12111  000B00  0100               	movlb	0	; () banked
 12112  000B02  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12113  000B04  0E54               	movlw	low _wrkbuf
 12114  000B06  6F76               	movwf	?_sprintf& (0+255),b
 12115  000B08  C29A  F078         	movff	_doModeVerbose$1168,?_sprintf+2
 12116  000B0C  C29B  F079         	movff	_doModeVerbose$1168+1,?_sprintf+3
 12117  000B10  C2AD  F07A         	movff	doModeVerbose@page,?_sprintf+4
 12118  000B14  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12119  000B16  ECDD  F00A         	call	_sprintf	;wreg free
 12120                           
 12121                           ; BSR set to: 0
 12122                           ;main.c: 723: putsUSART(wrkbuf);
 12123  000B1A  0E01               	movlw	high _wrkbuf
 12124  000B1C  0100               	movlb	0	; () banked
 12125  000B1E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12126  000B20  0E54               	movlw	low _wrkbuf
 12127  000B22  6F61               	movwf	?_putsUSART& (0+255),b
 12128  000B24  EC6A  F027         	call	_putsUSART	;wreg free
 12129  000B28                     l543:
 12130  000B28  A2AC               	btfss	4012,1,c	;volatile
 12131  000B2A  D7FE               	goto	l543
 12132                           
 12133                           ;main.c: 725: WriteUSART(':');
 12134  000B2C  0E3A               	movlw	58
 12135  000B2E  EC37  F02A         	call	_WriteUSART
 12136                           
 12137                           ;main.c: 726: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12138  000B32  0101               	movlb	1	; () banked
 12139  000B34  6700               	tstfsz	_bHex& (0+255),b
 12140  000B36  D005               	goto	l9856
 12141                           
 12142                           ; BSR set to: 1
 12143  000B38  0E7F               	movlw	high STR_53
 12144  000B3A  0102               	movlb	2	; () banked
 12145  000B3C  6F9D               	movwf	(_doModeVerbose$1172+1)& (0+255),b
 12146  000B3E  0EEE               	movlw	low STR_53
 12147  000B40  D004               	goto	L9
 12148  000B42                     l9856:
 12149                           
 12150                           ; BSR set to: 1
 12151  000B42  0E7F               	movlw	high STR_52
 12152  000B44  0102               	movlb	2	; () banked
 12153  000B46  6F9D               	movwf	(_doModeVerbose$1172+1)& (0+255),b
 12154  000B48  0E65               	movlw	low STR_52
 12155  000B4A                     L9:
 12156  000B4A  6F9C               	movwf	_doModeVerbose$1172& (0+255),b
 12157                           
 12158                           ; BSR set to: 2
 12159  000B4C  0E01               	movlw	high _wrkbuf
 12160  000B4E  0100               	movlb	0	; () banked
 12161  000B50  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12162  000B52  0E54               	movlw	low _wrkbuf
 12163  000B54  6F76               	movwf	?_sprintf& (0+255),b
 12164  000B56  C29C  F078         	movff	_doModeVerbose$1172,?_sprintf+2
 12165  000B5A  C29D  F079         	movff	_doModeVerbose$1172+1,?_sprintf+3
 12166  000B5E  ECAB  F00A         	call	PL38	;call to abstracted procedure
 12167  000B62  ECDD  F00A         	call	_sprintf	;wreg free
 12168                           
 12169                           ; BSR set to: 0
 12170                           ;main.c: 727: putsUSART(wrkbuf);
 12171  000B66  0E01               	movlw	high _wrkbuf
 12172  000B68  0100               	movlb	0	; () banked
 12173  000B6A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12174  000B6C  0E54               	movlw	low _wrkbuf
 12175  000B6E  6F61               	movwf	?_putsUSART& (0+255),b
 12176  000B70  EC6A  F027         	call	_putsUSART	;wreg free
 12177                           
 12178                           ;main.c: 728: putsUSART((char *) "\r\n");
 12179  000B74  0E74               	movlw	high (STR_188+50)
 12180  000B76  0100               	movlb	0	; () banked
 12181  000B78  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12182  000B7A  0EAE               	movlw	low (STR_188+50)
 12183  000B7C  6F61               	movwf	?_putsUSART& (0+255),b
 12184  000B7E  EC6A  F027         	call	_putsUSART	;wreg free
 12185  000B82                     l9864:
 12186  000B82  0102               	movlb	2	; () banked
 12187  000B84  2BB0               	incf	doModeVerbose@i_1127& (0+255),f,b
 12188  000B86                     l9866:
 12189                           
 12190                           ; BSR set to: 2
 12191  000B86  51AB               	movf	doModeVerbose@count& (0+255),w,b
 12192  000B88  5DB0               	subwf	doModeVerbose@i_1127& (0+255),w,b
 12193  000B8A  E201 D6EE          	bnc	l9784
 12194                           
 12195                           ; BSR set to: 2
 12196                           ;main.c: 729: }
 12197                           ;main.c: 730: }
 12198                           ;main.c: 732: if (rv) {
 12199  000B8E  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 12200  000B90  E009               	bz	l9872
 12201                           
 12202                           ; BSR set to: 2
 12203                           ;main.c: 733: putsUSART((char *) "+OK\r\n");
 12204  000B92  0E7F               	movlw	high STR_8
 12205  000B94  0100               	movlb	0	; () banked
 12206  000B96  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12207  000B98  0E80               	movlw	low STR_8
 12208  000B9A  6F61               	movwf	?_putsUSART& (0+255),b
 12209  000B9C  EC6A  F027         	call	_putsUSART	;wreg free
 12210                           
 12211                           ;main.c: 734: }
 12212  000BA0  EF25  F00A         	goto	l10154
 12213  000BA4                     l9872:
 12214                           
 12215                           ; BSR set to: 2
 12216                           ;main.c: 735: else {
 12217                           ;main.c: 736: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 12218  000BA4  0E74               	movlw	high STR_67
 12219  000BA6  0100               	movlb	0	; () banked
 12220  000BA8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12221  000BAA  0E46               	movlw	low STR_67
 12222  000BAC  6F61               	movwf	?_putsUSART& (0+255),b
 12223  000BAE  EC6A  F027         	call	_putsUSART	;wreg free
 12224  000BB2  EF25  F00A         	goto	l10154
 12225  000BB6                     l9874:
 12226                           
 12227                           ; BSR set to: 1
 12228                           ;main.c: 742: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 12229  000BB6  0E01               	movlw	high _cmdbuf
 12230  000BB8  0100               	movlb	0	; () banked
 12231  000BBA  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12232  000BBC  0E04               	movlw	low _cmdbuf
 12233  000BBE  6F6D               	movwf	?_stristr& (0+255),b
 12234  000BC0  0E7F               	movlw	high STR_68
 12235  000BC2  6F70               	movwf	(?_stristr+3)& (0+255),b
 12236  000BC4  0EAD               	movlw	low STR_68
 12237  000BC6  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12238  000BC8  ECEE  F024         	call	_stristr	;wreg free
 12239  000BCC  EC35  F00A         	call	PL2	;call to abstracted procedure
 12240  000BD0  E104               	bnz	u12155
 12241  000BD2  0100               	movlb	0	; () banked
 12242  000BD4  516D               	movf	?_stristr& (0+255),w,b
 12243  000BD6  0101               	movlb	1	; () banked
 12244  000BD8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12245  000BDA                     u12155:
 12246  000BDA  E001 D0AF          	bnz	l9916
 12247                           
 12248                           ; BSR set to: 1
 12249                           ;main.c: 744: uint8_t nodeid;
 12250                           ;main.c: 745: uint8_t page = 0;
 12251  000BDE  0102               	movlb	2	; () banked
 12252  000BE0  6BA1               	clrf	doModeVerbose@page_1178& (0+255),b
 12253                           
 12254                           ; BSR set to: 2
 12255                           ;main.c: 746: uint8_t reg;
 12256                           ;main.c: 747: uint8_t value;
 12257                           ;main.c: 749: strcpy(cmdbuf, cmdbuf + 5);
 12258  000BE2  EC4E  F00A         	call	PL8	;call to abstracted procedure
 12259  000BE6  EC98  F029         	call	_strcpy	;wreg free
 12260                           
 12261                           ;main.c: 750: char *p = strtok(cmdbuf, " ");
 12262  000BEA  0E01               	movlw	high _cmdbuf
 12263  000BEC  ECA2  F00A         	call	PL34	;call to abstracted procedure
 12264  000BF0  EC59  F023         	call	_strtok	;wreg free
 12265  000BF4  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1181
 12266  000BF8  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1181+1
 12267                           
 12268                           ; BSR set to: 0
 12269                           ;main.c: 751: if ((0) != p) {
 12270  000BFC  0102               	movlb	2	; () banked
 12271  000BFE  51B5               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 12272  000C00  11B4               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 12273  000C02  E00A               	bz	l9886
 12274                           
 12275                           ; BSR set to: 2
 12276                           ;main.c: 752: nodeid = atoi(p);
 12277  000C04  C2B4  F066         	movff	doModeVerbose@p_1181,?_atoi
 12278  000C08  C2B5  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 12279  000C0C  EC4A  F01C         	call	_atoi	;wreg free
 12280  000C10  5166               	movf	?_atoi& (0+255),w,b
 12281  000C12  0102               	movlb	2	; () banked
 12282  000C14  6F8D               	movwf	doModeVerbose@nodeid_1177& (0+255),b
 12283                           
 12284                           ;main.c: 753: }
 12285  000C16  D009               	goto	l9890
 12286  000C18                     l9886:
 12287                           
 12288                           ; BSR set to: 2
 12289                           ;main.c: 754: else {
 12290                           ;main.c: 755: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12291  000C18  0E7C               	movlw	high STR_47
 12292  000C1A  0100               	movlb	0	; () banked
 12293  000C1C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12294  000C1E  0E31               	movlw	low STR_47
 12295  000C20  6F61               	movwf	?_putsUSART& (0+255),b
 12296  000C22  EC6A  F027         	call	_putsUSART	;wreg free
 12297  000C26  EF34  F00A         	goto	l502
 12298  000C2A                     l9890:
 12299                           
 12300                           ; BSR set to: 2
 12301                           ;main.c: 757: }
 12302                           ;main.c: 759: if ((0) != (p = strtok((0), " "))) {
 12303  000C2A  EC90  F00A         	call	PL26	;call to abstracted procedure
 12304  000C2E  EC59  F023         	call	_strtok	;wreg free
 12305  000C32  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1181
 12306  000C36  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1181+1
 12307  000C3A  0102               	movlb	2	; () banked
 12308  000C3C  51B5               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 12309  000C3E  11B4               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 12310  000C40  E034               	bz	l9898
 12311                           
 12312                           ; BSR set to: 2
 12313                           ;main.c: 761: char *preg;
 12314                           ;main.c: 762: if (preg = strchr(p, ':')) {
 12315  000C42  C2B4  F060         	movff	doModeVerbose@p_1181,?_strchr
 12316  000C46  C2B5  F061         	movff	doModeVerbose@p_1181+1,?_strchr+1
 12317  000C4A  0100               	movlb	0	; () banked
 12318  000C4C  6B63               	clrf	(?_strchr+3)& (0+255),b
 12319  000C4E  0E3A               	movlw	58
 12320  000C50  6F62               	movwf	(?_strchr+2)& (0+255),b
 12321  000C52  ECAE  F026         	call	_strchr	;wreg free
 12322  000C56  C060  F286         	movff	?_strchr,doModeVerbose@preg_1185
 12323  000C5A  C061  F287         	movff	?_strchr+1,doModeVerbose@preg_1185+1
 12324  000C5E  0102               	movlb	2	; () banked
 12325  000C60  5187               	movf	(doModeVerbose@preg_1185+1)& (0+255),w,b
 12326  000C62  1186               	iorwf	doModeVerbose@preg_1185& (0+255),w,b
 12327  000C64  E018               	bz	l9896
 12328                           
 12329                           ; BSR set to: 2
 12330                           ;main.c: 763: page = atoi(p);
 12331  000C66  C2B4  F066         	movff	doModeVerbose@p_1181,?_atoi
 12332  000C6A  C2B5  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 12333  000C6E  EC4A  F01C         	call	_atoi	;wreg free
 12334  000C72  5166               	movf	?_atoi& (0+255),w,b
 12335  000C74  0102               	movlb	2	; () banked
 12336  000C76  6FA1               	movwf	doModeVerbose@page_1178& (0+255),b
 12337                           
 12338                           ;main.c: 764: reg = atoi(preg + 1);
 12339  000C78  2986               	incf	doModeVerbose@preg_1185& (0+255),w,b
 12340  000C7A  0101               	movlb	1	; () banked
 12341  000C7C  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12342  000C7E  0E00               	movlw	0
 12343  000C80  0102               	movlb	2	; () banked
 12344  000C82  2187               	addwfc	(doModeVerbose@preg_1185+1)& (0+255),w,b
 12345  000C84  0101               	movlb	1	; () banked
 12346  000C86  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12347  000C88  C1B2  F066         	movff	??_doModeVerbose,?_atoi
 12348  000C8C  C1B3  F067         	movff	??_doModeVerbose+1,?_atoi+1
 12349  000C90  EC4A  F01C         	call	_atoi	;wreg free
 12350  000C94  D006               	goto	L10
 12351  000C96                     l9896:
 12352                           
 12353                           ; BSR set to: 2
 12354                           ;main.c: 766: else {
 12355                           ;main.c: 767: reg = atoi(p);
 12356  000C96  C2B4  F066         	movff	doModeVerbose@p_1181,?_atoi
 12357  000C9A  C2B5  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 12358  000C9E  EC4A  F01C         	call	_atoi	;wreg free
 12359  000CA2                     L10:
 12360  000CA2  5166               	movf	?_atoi& (0+255),w,b
 12361  000CA4  0102               	movlb	2	; () banked
 12362  000CA6  6FA2               	movwf	doModeVerbose@reg_1179& (0+255),b
 12363  000CA8  D008               	goto	l9902
 12364  000CAA                     l9898:
 12365                           
 12366                           ; BSR set to: 2
 12367                           ;main.c: 771: else {
 12368                           ;main.c: 772: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12369  000CAA  0E7A               	movlw	high STR_49
 12370  000CAC  0100               	movlb	0	; () banked
 12371  000CAE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12372  000CB0  0EAC               	movlw	low STR_49
 12373  000CB2  6F61               	movwf	?_putsUSART& (0+255),b
 12374  000CB4  EC6A  F027         	call	_putsUSART	;wreg free
 12375  000CB8  D3D7               	goto	l502
 12376  000CBA                     l9902:
 12377                           
 12378                           ; BSR set to: 2
 12379                           ;main.c: 774: }
 12380                           ;main.c: 777: if ((0) != (p = strtok((0), " "))) {
 12381  000CBA  EC90  F00A         	call	PL26	;call to abstracted procedure
 12382  000CBE  EC59  F023         	call	_strtok	;wreg free
 12383  000CC2  C06C  F2B4         	movff	?_strtok,doModeVerbose@p_1181
 12384  000CC6  C06D  F2B5         	movff	?_strtok+1,doModeVerbose@p_1181+1
 12385  000CCA  0102               	movlb	2	; () banked
 12386  000CCC  51B5               	movf	(doModeVerbose@p_1181+1)& (0+255),w,b
 12387  000CCE  11B4               	iorwf	doModeVerbose@p_1181& (0+255),w,b
 12388  000CD0  E00A               	bz	l9906
 12389                           
 12390                           ; BSR set to: 2
 12391                           ;main.c: 778: value = atoi(p);
 12392  000CD2  C2B4  F066         	movff	doModeVerbose@p_1181,?_atoi
 12393  000CD6  C2B5  F067         	movff	doModeVerbose@p_1181+1,?_atoi+1
 12394  000CDA  EC4A  F01C         	call	_atoi	;wreg free
 12395  000CDE  5166               	movf	?_atoi& (0+255),w,b
 12396  000CE0  0102               	movlb	2	; () banked
 12397  000CE2  6FA9               	movwf	doModeVerbose@value_1180& (0+255),b
 12398                           
 12399                           ;main.c: 779: }
 12400  000CE4  D008               	goto	l9910
 12401  000CE6                     l9906:
 12402                           
 12403                           ; BSR set to: 2
 12404                           ;main.c: 780: else {
 12405                           ;main.c: 781: putsUSART((char *) "-ERROR - Need a value\r\n");
 12406  000CE6  0E7C               	movlw	high STR_74
 12407  000CE8  0100               	movlb	0	; () banked
 12408  000CEA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12409  000CEC  0E61               	movlw	low STR_74
 12410  000CEE  6F61               	movwf	?_putsUSART& (0+255),b
 12411  000CF0  EC6A  F027         	call	_putsUSART	;wreg free
 12412  000CF4  D3B9               	goto	l502
 12413  000CF6                     l9910:
 12414                           
 12415                           ; BSR set to: 2
 12416                           ;main.c: 783: }
 12417                           ;main.c: 785: if (writeRegisterExtended(nodeid,
 12418                           ;main.c: 786: page,
 12419                           ;main.c: 787: reg,
 12420                           ;main.c: 788: rwtimeout,
 12421                           ;main.c: 789: &value)) {
 12422  000CF6  0100               	movlb	0	; () banked
 12423  000CF8  C2A1  F0B6         	movff	doModeVerbose@page_1178,?_writeRegisterExtended
 12424  000CFC  6BB7               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 12425  000CFE  C2A2  F0B8         	movff	doModeVerbose@reg_1179,?_writeRegisterExtended+2
 12426  000D02  C103  F0B9         	movff	_rwtimeout,?_writeRegisterExtended+3
 12427  000D06  6BBA               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 12428  000D08  0E02               	movlw	high doModeVerbose@value_1180
 12429  000D0A  6FBC               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 12430  000D0C  0EA9               	movlw	low doModeVerbose@value_1180
 12431  000D0E  6FBB               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 12432  000D10  0102               	movlb	2	; () banked
 12433  000D12  518D               	movf	doModeVerbose@nodeid_1177& (0+255),w,b
 12434  000D14  ECC7  F01B         	call	_writeRegisterExtended
 12435  000D18  0900               	iorlw	0
 12436  000D1A  E008               	bz	l9914
 12437                           
 12438                           ;main.c: 790: putsUSART((char *) "+OK - Value written successfully\r\n");
 12439  000D1C  0E79               	movlw	high STR_75
 12440  000D1E  0100               	movlb	0	; () banked
 12441  000D20  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12442  000D22  0EC1               	movlw	low STR_75
 12443  000D24  6F61               	movwf	?_putsUSART& (0+255),b
 12444  000D26  EC6A  F027         	call	_putsUSART	;wreg free
 12445                           
 12446                           ;main.c: 791: }
 12447  000D2A  D38F               	goto	l10154
 12448  000D2C                     l9914:
 12449                           
 12450                           ;main.c: 792: else {
 12451                           ;main.c: 793: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 12452  000D2C  0E7A               	movlw	high STR_76
 12453  000D2E  0100               	movlb	0	; () banked
 12454  000D30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12455  000D32  0E8B               	movlw	low STR_76
 12456  000D34  6F61               	movwf	?_putsUSART& (0+255),b
 12457  000D36  EC6A  F027         	call	_putsUSART	;wreg free
 12458  000D3A  D387               	goto	l10154
 12459  000D3C                     l9916:
 12460                           
 12461                           ; BSR set to: 1
 12462                           ;main.c: 799: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 12463  000D3C  0E01               	movlw	high _cmdbuf
 12464  000D3E  0100               	movlb	0	; () banked
 12465  000D40  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12466  000D42  0E04               	movlw	low _cmdbuf
 12467  000D44  6F6D               	movwf	?_stristr& (0+255),b
 12468  000D46  0E7F               	movlw	high STR_77
 12469  000D48  6F70               	movwf	(?_stristr+3)& (0+255),b
 12470  000D4A  0EBC               	movlw	low STR_77
 12471  000D4C  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12472  000D4E  ECEE  F024         	call	_stristr	;wreg free
 12473  000D52  DB8B               	call	PL2	;call to abstracted procedure
 12474  000D54  E104               	bnz	u12215
 12475  000D56  0100               	movlb	0	; () banked
 12476  000D58  516D               	movf	?_stristr& (0+255),w,b
 12477  000D5A  0101               	movlb	1	; () banked
 12478  000D5C  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12479  000D5E                     u12215:
 12480  000D5E  E157               	bnz	l9942
 12481                           
 12482                           ; BSR set to: 1
 12483                           ;main.c: 800: uint8_t nodeid;
 12484                           ;main.c: 802: strcpy(cmdbuf, cmdbuf + 9);
 12485  000D60  0E01               	movlw	high _cmdbuf
 12486  000D62  0100               	movlb	0	; () banked
 12487  000D64  6F61               	movwf	(?_strcpy+1)& (0+255),b
 12488  000D66  0E04               	movlw	low _cmdbuf
 12489  000D68  6F60               	movwf	?_strcpy& (0+255),b
 12490  000D6A  0E0D               	movlw	low (_cmdbuf+9)
 12491  000D6C  0101               	movlb	1	; () banked
 12492  000D6E  6FB2               	movwf	??_doModeVerbose& (0+255),b
 12493  000D70  0E01               	movlw	high (_cmdbuf+9)
 12494  000D72  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 12495  000D74  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 12496  000D78  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 12497  000D7C  EC98  F029         	call	_strcpy	;wreg free
 12498                           
 12499                           ;main.c: 803: nodeid = atoi(cmdbuf);
 12500  000D80  0E01               	movlw	high _cmdbuf
 12501  000D82  0100               	movlb	0	; () banked
 12502  000D84  6F67               	movwf	(?_atoi+1)& (0+255),b
 12503  000D86  0E04               	movlw	low _cmdbuf
 12504  000D88  6F66               	movwf	?_atoi& (0+255),b
 12505  000D8A  EC4A  F01C         	call	_atoi	;wreg free
 12506  000D8E  5166               	movf	?_atoi& (0+255),w,b
 12507  000D90  0102               	movlb	2	; () banked
 12508  000D92  6FAF               	movwf	doModeVerbose@nodeid_1192& (0+255),b
 12509                           
 12510                           ; BSR set to: 2
 12511                           ;main.c: 805: putsUSART((char *) "Info for node id = ");
 12512  000D94  0E7D               	movlw	high STR_78
 12513  000D96  0100               	movlb	0	; () banked
 12514  000D98  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12515  000D9A  0EAB               	movlw	low STR_78
 12516  000D9C  6F61               	movwf	?_putsUSART& (0+255),b
 12517  000D9E  EC6A  F027         	call	_putsUSART	;wreg free
 12518                           
 12519                           ;main.c: 806: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 12520  000DA2  0101               	movlb	1	; () banked
 12521  000DA4  6700               	tstfsz	_bHex& (0+255),b
 12522  000DA6  D005               	goto	l9928
 12523                           
 12524                           ; BSR set to: 1
 12525  000DA8  0E7F               	movlw	high STR_53
 12526  000DAA  0102               	movlb	2	; () banked
 12527  000DAC  6F9F               	movwf	(_doModeVerbose$1197+1)& (0+255),b
 12528  000DAE  0EEE               	movlw	low STR_53
 12529  000DB0  D004               	goto	L11
 12530  000DB2                     l9928:
 12531                           
 12532                           ; BSR set to: 1
 12533  000DB2  0E7F               	movlw	high STR_52
 12534  000DB4  0102               	movlb	2	; () banked
 12535  000DB6  6F9F               	movwf	(_doModeVerbose$1197+1)& (0+255),b
 12536  000DB8  0E65               	movlw	low STR_52
 12537  000DBA                     L11:
 12538  000DBA  6F9E               	movwf	_doModeVerbose$1197& (0+255),b
 12539                           
 12540                           ; BSR set to: 2
 12541  000DBC  0E01               	movlw	high _wrkbuf
 12542  000DBE  0100               	movlb	0	; () banked
 12543  000DC0  6F77               	movwf	(?_sprintf+1)& (0+255),b
 12544  000DC2  0E54               	movlw	low _wrkbuf
 12545  000DC4  6F76               	movwf	?_sprintf& (0+255),b
 12546  000DC6  C29E  F078         	movff	_doModeVerbose$1197,?_sprintf+2
 12547  000DCA  C29F  F079         	movff	_doModeVerbose$1197+1,?_sprintf+3
 12548  000DCE  C2AF  F07A         	movff	doModeVerbose@nodeid_1192,?_sprintf+4
 12549  000DD2  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 12550  000DD4  ECDD  F00A         	call	_sprintf	;wreg free
 12551                           
 12552                           ; BSR set to: 0
 12553                           ;main.c: 807: putsUSART(wrkbuf);
 12554  000DD8  0E01               	movlw	high _wrkbuf
 12555  000DDA  0100               	movlb	0	; () banked
 12556  000DDC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12557  000DDE  0E54               	movlw	low _wrkbuf
 12558  000DE0  6F61               	movwf	?_putsUSART& (0+255),b
 12559  000DE2  EC6A  F027         	call	_putsUSART	;wreg free
 12560                           
 12561                           ;main.c: 808: putsUSART((char *) "\r\n");
 12562  000DE6  0E74               	movlw	high (STR_188+50)
 12563  000DE8  0100               	movlb	0	; () banked
 12564  000DEA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12565  000DEC  0EAE               	movlw	low (STR_188+50)
 12566  000DEE  6F61               	movwf	?_putsUSART& (0+255),b
 12567  000DF0  EC6A  F027         	call	_putsUSART	;wreg free
 12568                           
 12569                           ;main.c: 809: printNodeFirmwareVersion(nodeid);
 12570  000DF4  0102               	movlb	2	; () banked
 12571  000DF6  51AF               	movf	doModeVerbose@nodeid_1192& (0+255),w,b
 12572  000DF8  EC91  F01F         	call	_printNodeFirmwareVersion
 12573                           
 12574                           ;main.c: 810: printGUID(nodeid);
 12575  000DFC  0102               	movlb	2	; () banked
 12576  000DFE  51AF               	movf	doModeVerbose@nodeid_1192& (0+255),w,b
 12577  000E00  ECCD  F01C         	call	_printGUID
 12578                           
 12579                           ;main.c: 811: printMDF(nodeid);
 12580  000E04  0102               	movlb	2	; () banked
 12581  000E06  51AF               	movf	doModeVerbose@nodeid_1192& (0+255),w,b
 12582  000E08  EC0E  F023         	call	_printMDF
 12583                           
 12584                           ;main.c: 812: }
 12585  000E0C  D31E               	goto	l10154
 12586  000E0E                     l9942:
 12587                           
 12588                           ; BSR set to: 1
 12589                           ;main.c: 816: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 12590  000E0E  0E01               	movlw	high _cmdbuf
 12591  000E10  0100               	movlb	0	; () banked
 12592  000E12  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12593  000E14  0E04               	movlw	low _cmdbuf
 12594  000E16  6F6D               	movwf	?_stristr& (0+255),b
 12595  000E18  0E7F               	movlw	high STR_82
 12596  000E1A  6F70               	movwf	(?_stristr+3)& (0+255),b
 12597  000E1C  0E57               	movlw	low STR_82
 12598  000E1E  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12599  000E20  ECEE  F024         	call	_stristr	;wreg free
 12600  000E24  DB22               	call	PL2	;call to abstracted procedure
 12601  000E26  E104               	bnz	u12235
 12602  000E28  0100               	movlb	0	; () banked
 12603  000E2A  516D               	movf	?_stristr& (0+255),w,b
 12604  000E2C  0101               	movlb	1	; () banked
 12605  000E2E  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12606  000E30                     u12235:
 12607  000E30  E001 D0CC          	bnz	l10008
 12608                           
 12609                           ; BSR set to: 1
 12610                           ;main.c: 818: uint8_t filterno;
 12611                           ;main.c: 819: uint8_t filter_priority;
 12612                           ;main.c: 820: uint16_t filter_class;
 12613                           ;main.c: 821: uint8_t filter_type;
 12614                           ;main.c: 822: uint8_t filter_nodeid;
 12615                           ;main.c: 824: strcpy(cmdbuf, cmdbuf + 8);
 12616  000E34  0E01               	movlw	high _cmdbuf
 12617  000E36  DB66               	call	PL12	;call to abstracted procedure
 12618  000E38  EC98  F029         	call	_strcpy	;wreg free
 12619                           
 12620                           ;main.c: 825: char *p = strtok(cmdbuf, ",");
 12621  000E3C  DB79               	call	PL28	;call to abstracted procedure
 12622  000E3E  EC59  F023         	call	_strtok	;wreg free
 12623  000E42  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1205
 12624  000E46  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1205+1
 12625                           
 12626                           ; BSR set to: 0
 12627                           ;main.c: 826: if ((0) != p) {
 12628  000E4A  0102               	movlb	2	; () banked
 12629  000E4C  51BA               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 12630  000E4E  11B9               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 12631  000E50  E014               	bz	l9958
 12632                           
 12633                           ; BSR set to: 2
 12634                           ;main.c: 827: filterno = atoi(p);
 12635  000E52  C2B9  F066         	movff	doModeVerbose@p_1205,?_atoi
 12636  000E56  C2BA  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 12637  000E5A  EC4A  F01C         	call	_atoi	;wreg free
 12638  000E5E  5166               	movf	?_atoi& (0+255),w,b
 12639  000E60  0102               	movlb	2	; () banked
 12640  000E62  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 12641                           
 12642                           ; BSR set to: 2
 12643                           ;main.c: 828: if (filterno > 15) {
 12644  000E64  0E0F               	movlw	15
 12645  000E66  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 12646  000E68  D010               	goto	l9962
 12647                           
 12648                           ; BSR set to: 2
 12649                           ;main.c: 829: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 12650  000E6A  0E72               	movlw	high STR_84
 12651  000E6C  0100               	movlb	0	; () banked
 12652  000E6E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12653  000E70  0E40               	movlw	low STR_84
 12654  000E72  6F61               	movwf	?_putsUSART& (0+255),b
 12655  000E74  EC6A  F027         	call	_putsUSART	;wreg free
 12656  000E78  D2F7               	goto	l502
 12657  000E7A                     l9958:
 12658                           
 12659                           ; BSR set to: 2
 12660                           ;main.c: 833: else {
 12661                           ;main.c: 834: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 12662  000E7A  0E78               	movlw	high STR_85
 12663  000E7C  0100               	movlb	0	; () banked
 12664  000E7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12665  000E80  0E1E               	movlw	low STR_85
 12666  000E82  6F61               	movwf	?_putsUSART& (0+255),b
 12667  000E84  EC6A  F027         	call	_putsUSART	;wreg free
 12668  000E88  D2EF               	goto	l502
 12669  000E8A                     l9962:
 12670                           
 12671                           ; BSR set to: 2
 12672                           ;main.c: 836: }
 12673                           ;main.c: 839: p = strtok((0), ",");
 12674  000E8A  DAF9               	call	PL4	;call to abstracted procedure
 12675  000E8C  EC59  F023         	call	_strtok	;wreg free
 12676  000E90  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1205
 12677  000E94  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1205+1
 12678                           
 12679                           ; BSR set to: 0
 12680                           ;main.c: 840: if ((0) != p) {
 12681  000E98  0102               	movlb	2	; () banked
 12682  000E9A  51BA               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 12683  000E9C  11B9               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 12684  000E9E  E00A               	bz	l9968
 12685                           
 12686                           ; BSR set to: 2
 12687                           ;main.c: 841: filter_priority = atoi(p);
 12688  000EA0  C2B9  F066         	movff	doModeVerbose@p_1205,?_atoi
 12689  000EA4  C2BA  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 12690  000EA8  EC4A  F01C         	call	_atoi	;wreg free
 12691  000EAC  5166               	movf	?_atoi& (0+255),w,b
 12692  000EAE  0102               	movlb	2	; () banked
 12693  000EB0  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 12694                           
 12695                           ;main.c: 842: }
 12696  000EB2  D008               	goto	l9972
 12697  000EB4                     l9968:
 12698                           
 12699                           ; BSR set to: 2
 12700                           ;main.c: 843: else {
 12701                           ;main.c: 844: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 12702  000EB4  0E77               	movlw	high STR_87
 12703  000EB6  0100               	movlb	0	; () banked
 12704  000EB8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12705  000EBA  0E53               	movlw	low STR_87
 12706  000EBC  6F61               	movwf	?_putsUSART& (0+255),b
 12707  000EBE  EC6A  F027         	call	_putsUSART	;wreg free
 12708  000EC2  D2D2               	goto	l502
 12709  000EC4                     l9972:
 12710                           
 12711                           ; BSR set to: 2
 12712                           ;main.c: 846: }
 12713                           ;main.c: 849: p = strtok((0), ",");
 12714  000EC4  DADC               	call	PL4	;call to abstracted procedure
 12715  000EC6  EC59  F023         	call	_strtok	;wreg free
 12716  000ECA  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1205
 12717  000ECE  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1205+1
 12718                           
 12719                           ; BSR set to: 0
 12720                           ;main.c: 850: if ((0) != p) {
 12721  000ED2  0102               	movlb	2	; () banked
 12722  000ED4  51BA               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 12723  000ED6  11B9               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 12724  000ED8  E00B               	bz	l9978
 12725                           
 12726                           ; BSR set to: 2
 12727                           ;main.c: 851: filter_class = atoi(p);
 12728  000EDA  C2B9  F066         	movff	doModeVerbose@p_1205,?_atoi
 12729  000EDE  C2BA  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 12730  000EE2  EC4A  F01C         	call	_atoi	;wreg free
 12731  000EE6  C066  F288         	movff	?_atoi,doModeVerbose@filter_class
 12732  000EEA  C067  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 12733                           
 12734                           ;main.c: 852: }
 12735  000EEE  D008               	goto	l9982
 12736  000EF0                     l9978:
 12737                           
 12738                           ; BSR set to: 2
 12739                           ;main.c: 853: else {
 12740                           ;main.c: 854: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 12741  000EF0  0E78               	movlw	high STR_89
 12742  000EF2  0100               	movlb	0	; () banked
 12743  000EF4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12744  000EF6  0EBA               	movlw	low STR_89
 12745  000EF8  6F61               	movwf	?_putsUSART& (0+255),b
 12746  000EFA  EC6A  F027         	call	_putsUSART	;wreg free
 12747  000EFE  D2B4               	goto	l502
 12748  000F00                     l9982:
 12749                           
 12750                           ; BSR set to: 0
 12751                           ;main.c: 856: }
 12752                           ;main.c: 859: p = strtok((0), ",");
 12753  000F00  DAC6               	call	PL6	;call to abstracted procedure
 12754  000F02  EC59  F023         	call	_strtok	;wreg free
 12755  000F06  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1205
 12756  000F0A  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1205+1
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;main.c: 860: if ((0) != p) {
 12760  000F0E  0102               	movlb	2	; () banked
 12761  000F10  51BA               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 12762  000F12  11B9               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 12763  000F14  E00A               	bz	l9988
 12764                           
 12765                           ; BSR set to: 2
 12766                           ;main.c: 861: filter_type = atoi(p);
 12767  000F16  C2B9  F066         	movff	doModeVerbose@p_1205,?_atoi
 12768  000F1A  C2BA  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 12769  000F1E  EC4A  F01C         	call	_atoi	;wreg free
 12770  000F22  5166               	movf	?_atoi& (0+255),w,b
 12771  000F24  0102               	movlb	2	; () banked
 12772  000F26  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 12773                           
 12774                           ;main.c: 862: }
 12775  000F28  D008               	goto	l9992
 12776  000F2A                     l9988:
 12777                           
 12778                           ; BSR set to: 2
 12779                           ;main.c: 863: else {
 12780                           ;main.c: 864: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 12781  000F2A  0E79               	movlw	high STR_91
 12782  000F2C  0100               	movlb	0	; () banked
 12783  000F2E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12784  000F30  0E08               	movlw	low STR_91
 12785  000F32  6F61               	movwf	?_putsUSART& (0+255),b
 12786  000F34  EC6A  F027         	call	_putsUSART	;wreg free
 12787  000F38  D297               	goto	l502
 12788  000F3A                     l9992:
 12789                           
 12790                           ; BSR set to: 2
 12791                           ;main.c: 866: }
 12792                           ;main.c: 869: p = strtok((0), ",");
 12793  000F3A  DAA1               	call	PL4	;call to abstracted procedure
 12794  000F3C  EC59  F023         	call	_strtok	;wreg free
 12795  000F40  C06C  F2B9         	movff	?_strtok,doModeVerbose@p_1205
 12796  000F44  C06D  F2BA         	movff	?_strtok+1,doModeVerbose@p_1205+1
 12797                           
 12798                           ; BSR set to: 0
 12799                           ;main.c: 870: if ((0) != p) {
 12800  000F48  0102               	movlb	2	; () banked
 12801  000F4A  51BA               	movf	(doModeVerbose@p_1205+1)& (0+255),w,b
 12802  000F4C  11B9               	iorwf	doModeVerbose@p_1205& (0+255),w,b
 12803  000F4E  E00A               	bz	l9998
 12804                           
 12805                           ; BSR set to: 2
 12806                           ;main.c: 871: filter_nodeid = atoi(p);
 12807  000F50  C2B9  F066         	movff	doModeVerbose@p_1205,?_atoi
 12808  000F54  C2BA  F067         	movff	doModeVerbose@p_1205+1,?_atoi+1
 12809  000F58  EC4A  F01C         	call	_atoi	;wreg free
 12810  000F5C  5166               	movf	?_atoi& (0+255),w,b
 12811  000F5E  0102               	movlb	2	; () banked
 12812  000F60  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 12813                           
 12814                           ;main.c: 872: }
 12815  000F62  D008               	goto	l10002
 12816  000F64                     l9998:
 12817                           
 12818                           ; BSR set to: 2
 12819                           ;main.c: 873: else {
 12820                           ;main.c: 874: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 12821  000F64  0E77               	movlw	high STR_93
 12822  000F66  0100               	movlb	0	; () banked
 12823  000F68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12824  000F6A  0E7D               	movlw	low STR_93
 12825  000F6C  6F61               	movwf	?_putsUSART& (0+255),b
 12826  000F6E  EC6A  F027         	call	_putsUSART	;wreg free
 12827  000F72  D27A               	goto	l502
 12828  000F74                     l10002:
 12829                           
 12830                           ; BSR set to: 2
 12831                           ;main.c: 876: }
 12832                           ;main.c: 879: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 12833  000F74  0E80               	movlw	128
 12834  000F76  EC1F  F02A         	call	_ECANSetOperationMode
 12835                           
 12836                           ; BSR set to: 0
 12837                           ;main.c: 881: uint32_t id = ((uint32_t) filter_priority << 26) |
 12838                           ;main.c: 882: ((uint32_t) filter_class << 16) |
 12839                           ;main.c: 883: ((uint32_t) filter_type << 8) |
 12840                           ;main.c: 884: filter_nodeid;
 12841  000F7A  C28F  F1B2         	movff	doModeVerbose@filter_type,??_doModeVerbose
 12842  000F7E  DAF9               	call	PL42	;call to abstracted procedure
 12843  000F80  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 12844  000F82  0101               	movlb	1	; () banked
 12845  000F84  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 12846  000F86  0102               	movlb	2	; () banked
 12847  000F88  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 12848  000F8A  DB0C               	call	PL58	;call to abstracted procedure
 12849  000F8C  C28E  F1BA         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 12850  000F90  DA94               	call	PL10	;call to abstracted procedure
 12851  000F92  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 12852  000F94  0101               	movlb	1	; () banked
 12853  000F96  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 12854  000F98  0102               	movlb	2	; () banked
 12855  000F9A  6F80               	movwf	doModeVerbose@id& (0+255),b
 12856  000F9C  0101               	movlb	1	; () banked
 12857  000F9E  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 12858  000FA0  0102               	movlb	2	; () banked
 12859  000FA2  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 12860  000FA4  0101               	movlb	1	; () banked
 12861  000FA6  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 12862  000FA8  0102               	movlb	2	; () banked
 12863  000FAA  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 12864  000FAC  0101               	movlb	1	; () banked
 12865  000FAE  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 12866  000FB0  0102               	movlb	2	; () banked
 12867  000FB2  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 12868                           
 12869                           ; BSR set to: 2
 12870                           ;main.c: 885: setFilter(filterno, id);
 12871  000FB4  C280  F060         	movff	doModeVerbose@id,?_setFilter
 12872  000FB8  C281  F061         	movff	doModeVerbose@id+1,?_setFilter+1
 12873  000FBC  C282  F062         	movff	doModeVerbose@id+2,?_setFilter+2
 12874  000FC0  C283  F063         	movff	doModeVerbose@id+3,?_setFilter+3
 12875  000FC4  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 12876  000FC6  EC04  F014         	call	_setFilter
 12877                           
 12878                           ;main.c: 886: }
 12879  000FCA  D23F               	goto	l10154
 12880  000FCC                     l10008:
 12881                           
 12882                           ; BSR set to: 1
 12883                           ;main.c: 890: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 12884  000FCC  0E01               	movlw	high _cmdbuf
 12885  000FCE  0100               	movlb	0	; () banked
 12886  000FD0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 12887  000FD2  0E04               	movlw	low _cmdbuf
 12888  000FD4  6F6D               	movwf	?_stristr& (0+255),b
 12889  000FD6  0E7F               	movlw	high STR_94
 12890  000FD8  6F70               	movwf	(?_stristr+3)& (0+255),b
 12891  000FDA  0EB2               	movlw	low STR_94
 12892  000FDC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 12893  000FDE  ECEE  F024         	call	_stristr	;wreg free
 12894  000FE2  DA43               	call	PL2	;call to abstracted procedure
 12895  000FE4  E104               	bnz	u12315
 12896  000FE6  0100               	movlb	0	; () banked
 12897  000FE8  516D               	movf	?_stristr& (0+255),w,b
 12898  000FEA  0101               	movlb	1	; () banked
 12899  000FEC  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 12900  000FEE                     u12315:
 12901  000FEE  E001 D0D3          	bnz	l10078
 12902                           
 12903                           ; BSR set to: 1
 12904                           ;main.c: 892: uint8_t maskno;
 12905                           ;main.c: 893: uint8_t mask_priority;
 12906                           ;main.c: 894: uint16_t mask_class;
 12907                           ;main.c: 895: uint8_t mask_type;
 12908                           ;main.c: 896: uint8_t mask_nodeid;
 12909                           ;main.c: 898: strcpy(cmdbuf, cmdbuf + 8);
 12910  000FF2  0E01               	movlw	high _cmdbuf
 12911  000FF4  DA87               	call	PL12	;call to abstracted procedure
 12912  000FF6  EC98  F029         	call	_strcpy	;wreg free
 12913                           
 12914                           ;main.c: 899: char *p = strtok(cmdbuf, ",");
 12915  000FFA  DA9A               	call	PL28	;call to abstracted procedure
 12916  000FFC  EC59  F023         	call	_strtok	;wreg free
 12917  001000  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1224
 12918  001004  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1224+1
 12919                           
 12920                           ; BSR set to: 0
 12921                           ;main.c: 900: if ((0) != p) {
 12922  001008  0102               	movlb	2	; () banked
 12923  00100A  51BC               	movf	(doModeVerbose@p_1224+1)& (0+255),w,b
 12924  00100C  11BB               	iorwf	doModeVerbose@p_1224& (0+255),w,b
 12925  00100E  E014               	bz	l10024
 12926                           
 12927                           ; BSR set to: 2
 12928                           ;main.c: 901: maskno = atoi(p);
 12929  001010  C2BB  F066         	movff	doModeVerbose@p_1224,?_atoi
 12930  001014  C2BC  F067         	movff	doModeVerbose@p_1224+1,?_atoi+1
 12931  001018  EC4A  F01C         	call	_atoi	;wreg free
 12932  00101C  5166               	movf	?_atoi& (0+255),w,b
 12933  00101E  0102               	movlb	2	; () banked
 12934  001020  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 12935                           
 12936                           ; BSR set to: 2
 12937                           ;main.c: 902: if (maskno > 1) {
 12938  001022  0E01               	movlw	1
 12939  001024  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 12940  001026  D010               	goto	l10028
 12941                           
 12942                           ; BSR set to: 2
 12943                           ;main.c: 903: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 12944  001028  0E75               	movlw	high STR_96
 12945  00102A  0100               	movlb	0	; () banked
 12946  00102C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12947  00102E  0E4D               	movlw	low STR_96
 12948  001030  6F61               	movwf	?_putsUSART& (0+255),b
 12949  001032  EC6A  F027         	call	_putsUSART	;wreg free
 12950  001036  D218               	goto	l502
 12951  001038                     l10024:
 12952                           
 12953                           ; BSR set to: 2
 12954                           ;main.c: 907: else {
 12955                           ;main.c: 908: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 12956  001038  0E79               	movlw	high STR_97
 12957  00103A  0100               	movlb	0	; () banked
 12958  00103C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12959  00103E  0E2E               	movlw	low STR_97
 12960  001040  6F61               	movwf	?_putsUSART& (0+255),b
 12961  001042  EC6A  F027         	call	_putsUSART	;wreg free
 12962  001046  D210               	goto	l502
 12963  001048                     l10028:
 12964                           
 12965                           ; BSR set to: 2
 12966                           ;main.c: 910: }
 12967                           ;main.c: 913: p = strtok((0), ",");
 12968  001048  DA1A               	call	PL4	;call to abstracted procedure
 12969  00104A  EC59  F023         	call	_strtok	;wreg free
 12970  00104E  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1224
 12971  001052  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1224+1
 12972                           
 12973                           ; BSR set to: 0
 12974                           ;main.c: 914: if ((0) != p) {
 12975  001056  0102               	movlb	2	; () banked
 12976  001058  51BC               	movf	(doModeVerbose@p_1224+1)& (0+255),w,b
 12977  00105A  11BB               	iorwf	doModeVerbose@p_1224& (0+255),w,b
 12978  00105C  E00A               	bz	l10034
 12979                           
 12980                           ; BSR set to: 2
 12981                           ;main.c: 915: mask_priority = atoi(p);
 12982  00105E  C2BB  F066         	movff	doModeVerbose@p_1224,?_atoi
 12983  001062  C2BC  F067         	movff	doModeVerbose@p_1224+1,?_atoi+1
 12984  001066  EC4A  F01C         	call	_atoi	;wreg free
 12985  00106A  5166               	movf	?_atoi& (0+255),w,b
 12986  00106C  0102               	movlb	2	; () banked
 12987  00106E  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 12988                           
 12989                           ;main.c: 916: }
 12990  001070  D008               	goto	l10038
 12991  001072                     l10034:
 12992                           
 12993                           ; BSR set to: 2
 12994                           ;main.c: 917: else {
 12995                           ;main.c: 918: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 12996  001072  0E77               	movlw	high STR_99
 12997  001074  0100               	movlb	0	; () banked
 12998  001076  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 12999  001078  0ECE               	movlw	low STR_99
 13000  00107A  6F61               	movwf	?_putsUSART& (0+255),b
 13001  00107C  EC6A  F027         	call	_putsUSART	;wreg free
 13002  001080  D1F3               	goto	l502
 13003  001082                     l10038:
 13004                           
 13005                           ; BSR set to: 2
 13006                           ;main.c: 920: }
 13007                           ;main.c: 923: p = strtok((0), ",");
 13008  001082  D9FD               	call	PL4	;call to abstracted procedure
 13009  001084  EC59  F023         	call	_strtok	;wreg free
 13010  001088  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1224
 13011  00108C  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1224+1
 13012                           
 13013                           ; BSR set to: 0
 13014                           ;main.c: 924: if ((0) != p) {
 13015  001090  0102               	movlb	2	; () banked
 13016  001092  51BC               	movf	(doModeVerbose@p_1224+1)& (0+255),w,b
 13017  001094  11BB               	iorwf	doModeVerbose@p_1224& (0+255),w,b
 13018  001096  E00B               	bz	l10044
 13019                           
 13020                           ; BSR set to: 2
 13021                           ;main.c: 925: mask_class = atoi(p);
 13022  001098  C2BB  F066         	movff	doModeVerbose@p_1224,?_atoi
 13023  00109C  C2BC  F067         	movff	doModeVerbose@p_1224+1,?_atoi+1
 13024  0010A0  EC4A  F01C         	call	_atoi	;wreg free
 13025  0010A4  C066  F28A         	movff	?_atoi,doModeVerbose@mask_class
 13026  0010A8  C067  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 13027                           
 13028                           ;main.c: 926: }
 13029  0010AC  D008               	goto	l10048
 13030  0010AE                     l10044:
 13031                           
 13032                           ; BSR set to: 2
 13033                           ;main.c: 927: else {
 13034                           ;main.c: 928: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 13035  0010AE  0E79               	movlw	high STR_101
 13036  0010B0  0100               	movlb	0	; () banked
 13037  0010B2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13038  0010B4  0E78               	movlw	low STR_101
 13039  0010B6  6F61               	movwf	?_putsUSART& (0+255),b
 13040  0010B8  EC6A  F027         	call	_putsUSART	;wreg free
 13041  0010BC  D1D5               	goto	l502
 13042  0010BE                     l10048:
 13043                           
 13044                           ; BSR set to: 0
 13045                           ;main.c: 930: }
 13046                           ;main.c: 933: p = strtok((0), ",");
 13047  0010BE  D9E7               	call	PL6	;call to abstracted procedure
 13048  0010C0  EC59  F023         	call	_strtok	;wreg free
 13049  0010C4  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1224
 13050  0010C8  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1224+1
 13051                           
 13052                           ; BSR set to: 0
 13053                           ;main.c: 934: if ((0) != p) {
 13054  0010CC  0102               	movlb	2	; () banked
 13055  0010CE  51BC               	movf	(doModeVerbose@p_1224+1)& (0+255),w,b
 13056  0010D0  11BB               	iorwf	doModeVerbose@p_1224& (0+255),w,b
 13057  0010D2  E00A               	bz	l10054
 13058                           
 13059                           ; BSR set to: 2
 13060                           ;main.c: 935: mask_type = atoi(p);
 13061  0010D4  C2BB  F066         	movff	doModeVerbose@p_1224,?_atoi
 13062  0010D8  C2BC  F067         	movff	doModeVerbose@p_1224+1,?_atoi+1
 13063  0010DC  EC4A  F01C         	call	_atoi	;wreg free
 13064  0010E0  5166               	movf	?_atoi& (0+255),w,b
 13065  0010E2  0102               	movlb	2	; () banked
 13066  0010E4  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 13067                           
 13068                           ;main.c: 936: }
 13069  0010E6  D008               	goto	l10058
 13070  0010E8                     l10054:
 13071                           
 13072                           ; BSR set to: 2
 13073                           ;main.c: 937: else {
 13074                           ;main.c: 938: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 13075  0010E8  0E79               	movlw	high STR_103
 13076  0010EA  0100               	movlb	0	; () banked
 13077  0010EC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13078  0010EE  0E9D               	movlw	low STR_103
 13079  0010F0  6F61               	movwf	?_putsUSART& (0+255),b
 13080  0010F2  EC6A  F027         	call	_putsUSART	;wreg free
 13081  0010F6  D1B8               	goto	l502
 13082  0010F8                     l10058:
 13083                           
 13084                           ; BSR set to: 2
 13085                           ;main.c: 940: }
 13086                           ;main.c: 943: p = strtok((0), ",");
 13087  0010F8  D9C2               	call	PL4	;call to abstracted procedure
 13088  0010FA  EC59  F023         	call	_strtok	;wreg free
 13089  0010FE  C06C  F2BB         	movff	?_strtok,doModeVerbose@p_1224
 13090  001102  C06D  F2BC         	movff	?_strtok+1,doModeVerbose@p_1224+1
 13091                           
 13092                           ; BSR set to: 0
 13093                           ;main.c: 944: if ((0) != p) {
 13094  001106  0102               	movlb	2	; () banked
 13095  001108  51BC               	movf	(doModeVerbose@p_1224+1)& (0+255),w,b
 13096  00110A  11BB               	iorwf	doModeVerbose@p_1224& (0+255),w,b
 13097  00110C  E00A               	bz	l10064
 13098                           
 13099                           ; BSR set to: 2
 13100                           ;main.c: 945: mask_nodeid = atoi(p);
 13101  00110E  C2BB  F066         	movff	doModeVerbose@p_1224,?_atoi
 13102  001112  C2BC  F067         	movff	doModeVerbose@p_1224+1,?_atoi+1
 13103  001116  EC4A  F01C         	call	_atoi	;wreg free
 13104  00111A  5166               	movf	?_atoi& (0+255),w,b
 13105  00111C  0102               	movlb	2	; () banked
 13106  00111E  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 13107                           
 13108                           ;main.c: 946: }
 13109  001120  D008               	goto	l10068
 13110  001122                     l10064:
 13111                           
 13112                           ; BSR set to: 2
 13113                           ;main.c: 947: else {
 13114                           ;main.c: 948: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 13115  001122  0E78               	movlw	high STR_105
 13116  001124  0100               	movlb	0	; () banked
 13117  001126  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13118  001128  0E93               	movlw	low STR_105
 13119  00112A  6F61               	movwf	?_putsUSART& (0+255),b
 13120  00112C  EC6A  F027         	call	_putsUSART	;wreg free
 13121  001130  D19B               	goto	l502
 13122  001132                     l10068:
 13123                           
 13124                           ; BSR set to: 2
 13125                           ;main.c: 950: }
 13126                           ;main.c: 952: uint32_t id = ((uint32_t) mask_priority << 26) |
 13127                           ;main.c: 953: ((uint32_t) mask_class << 16) |
 13128                           ;main.c: 954: ((uint32_t) mask_type << 8) |
 13129                           ;main.c: 955: mask_nodeid;
 13130  001132  C292  F1B2         	movff	doModeVerbose@mask_type,??_doModeVerbose
 13131  001136  DA1D               	call	PL42	;call to abstracted procedure
 13132  001138  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 13133  00113A  0101               	movlb	1	; () banked
 13134  00113C  6FB6               	movwf	(??_doModeVerbose+4)& (0+255),b
 13135  00113E  0102               	movlb	2	; () banked
 13136  001140  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 13137  001142  DA30               	call	PL58	;call to abstracted procedure
 13138  001144  C291  F1BA         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 13139  001148  D9B8               	call	PL10	;call to abstracted procedure
 13140  00114A  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 13141  00114C  0101               	movlb	1	; () banked
 13142  00114E  11C2               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13143  001150  0102               	movlb	2	; () banked
 13144  001152  6FA3               	movwf	doModeVerbose@id_1236& (0+255),b
 13145  001154  0101               	movlb	1	; () banked
 13146  001156  51C3               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13147  001158  0102               	movlb	2	; () banked
 13148  00115A  6FA4               	movwf	(doModeVerbose@id_1236+1)& (0+255),b
 13149  00115C  0101               	movlb	1	; () banked
 13150  00115E  51C4               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13151  001160  0102               	movlb	2	; () banked
 13152  001162  6FA5               	movwf	(doModeVerbose@id_1236+2)& (0+255),b
 13153  001164  0101               	movlb	1	; () banked
 13154  001166  51C5               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13155  001168  0102               	movlb	2	; () banked
 13156  00116A  6FA6               	movwf	(doModeVerbose@id_1236+3)& (0+255),b
 13157                           
 13158                           ; BSR set to: 2
 13159                           ;main.c: 958: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13160  00116C  0E80               	movlw	128
 13161  00116E  EC1F  F02A         	call	_ECANSetOperationMode
 13162                           
 13163                           ; BSR set to: 0
 13164                           ;main.c: 960: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 13165                           ;main.c: 961: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 13166  001172  0102               	movlb	2	; () banked
 13167  001174  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 13168  001176  E008               	bz	l10076
 13169                           
 13170                           ; BSR set to: 2
 13171  001178  0E0F               	movlw	15	;volatile
 13172  00117A  0100               	movlb	0	; () banked
 13173  00117C  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 13174  00117E  0E18               	movlw	24	;volatile
 13175  001180  DA05               	call	PL54	;call to abstracted procedure
 13176  001182  EC3D  F01B         	call	__CANIDToRegs	;wreg free
 13177  001186  D161               	goto	l10154
 13178  001188                     l10076:
 13179                           
 13180                           ; BSR set to: 2
 13181  001188  0E0F               	movlw	15	;volatile
 13182  00118A  0100               	movlb	0	; () banked
 13183  00118C  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 13184  00118E  0E1C               	movlw	28	;volatile
 13185  001190  D9FD               	call	PL54	;call to abstracted procedure
 13186  001192  EC3D  F01B         	call	__CANIDToRegs	;wreg free
 13187  001196  D159               	goto	l10154
 13188  001198                     l10078:
 13189                           
 13190                           ; BSR set to: 1
 13191                           ;main.c: 969: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 13192  001198  0E01               	movlw	high _cmdbuf
 13193  00119A  0100               	movlb	0	; () banked
 13194  00119C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13195  00119E  0E04               	movlw	low _cmdbuf
 13196  0011A0  6F6D               	movwf	?_stristr& (0+255),b
 13197  0011A2  0E7F               	movlw	high STR_106
 13198  0011A4  6F70               	movwf	(?_stristr+3)& (0+255),b
 13199  0011A6  0E9E               	movlw	low STR_106
 13200  0011A8  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13201  0011AA  ECEE  F024         	call	_stristr	;wreg free
 13202  0011AE  D95D               	call	PL2	;call to abstracted procedure
 13203  0011B0  E104               	bnz	u12405
 13204  0011B2  0100               	movlb	0	; () banked
 13205  0011B4  516D               	movf	?_stristr& (0+255),w,b
 13206  0011B6  0101               	movlb	1	; () banked
 13207  0011B8  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13208  0011BA                     u12405:
 13209  0011BA  E001 D13F          	bnz	l10152
 13210                           
 13211                           ; BSR set to: 1
 13212                           ;main.c: 972: strcpy(cmdbuf, cmdbuf + 4);
 13213  0011BE  0E01               	movlw	high _cmdbuf
 13214  0011C0  0100               	movlb	0	; () banked
 13215  0011C2  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13216  0011C4  0E04               	movlw	low _cmdbuf
 13217  0011C6  6F60               	movwf	?_strcpy& (0+255),b
 13218  0011C8  0E08               	movlw	low (_cmdbuf+4)
 13219  0011CA  0101               	movlb	1	; () banked
 13220  0011CC  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13221  0011CE  0E01               	movlw	high (_cmdbuf+4)
 13222  0011D0  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13223  0011D2  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13224  0011D6  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13225  0011DA  EC98  F029         	call	_strcpy	;wreg free
 13226                           
 13227                           ;main.c: 975: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 13228  0011DE  0E01               	movlw	high _cmdbuf
 13229  0011E0  0100               	movlb	0	; () banked
 13230  0011E2  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13231  0011E4  0E04               	movlw	low _cmdbuf
 13232  0011E6  6F6D               	movwf	?_stristr& (0+255),b
 13233  0011E8  0E7F               	movlw	high STR_107
 13234  0011EA  6F70               	movwf	(?_stristr+3)& (0+255),b
 13235  0011EC  0EDD               	movlw	low STR_107
 13236  0011EE  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13237  0011F0  ECEE  F024         	call	_stristr	;wreg free
 13238  0011F4  D93A               	call	PL2	;call to abstracted procedure
 13239  0011F6  E104               	bnz	u12415
 13240  0011F8  0100               	movlb	0	; () banked
 13241  0011FA  516D               	movf	?_stristr& (0+255),w,b
 13242  0011FC  0101               	movlb	1	; () banked
 13243  0011FE  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13244  001200                     u12415:
 13245  001200  E111               	bnz	l10090
 13246                           
 13247                           ; BSR set to: 1
 13248                           ;main.c: 976: bHex = 1;
 13249  001202  0E01               	movlw	1
 13250  001204  6F00               	movwf	_bHex& (0+255),b
 13251                           
 13252                           ; BSR set to: 1
 13253                           ;main.c: 977: writeEEPROM(0x06, 1);
 13254  001206  0100               	movlb	0	; () banked
 13255  001208  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13256  00120A  0E06               	movlw	6
 13257  00120C  6F60               	movwf	?_writeEEPROM& (0+255),b
 13258  00120E  0E01               	movlw	1
 13259  001210  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 13260  001212  ECDE  F029         	call	_writeEEPROM	;wreg free
 13261                           
 13262                           ; BSR set to: 0
 13263                           ;main.c: 978: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 13264  001216  0E77               	movlw	high STR_108
 13265  001218  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13266  00121A  0E27               	movlw	low STR_108
 13267  00121C  6F61               	movwf	?_putsUSART& (0+255),b
 13268  00121E  EC6A  F027         	call	_putsUSART	;wreg free
 13269                           
 13270                           ;main.c: 979: }
 13271  001222  D113               	goto	l10154
 13272  001224                     l10090:
 13273                           
 13274                           ; BSR set to: 1
 13275                           ;main.c: 981: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 13276  001224  0E01               	movlw	high _cmdbuf
 13277  001226  0100               	movlb	0	; () banked
 13278  001228  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13279  00122A  0E04               	movlw	low _cmdbuf
 13280  00122C  6F6D               	movwf	?_stristr& (0+255),b
 13281  00122E  0E7F               	movlw	high STR_109
 13282  001230  6F70               	movwf	(?_stristr+3)& (0+255),b
 13283  001232  0E06               	movlw	low STR_109
 13284  001234  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13285  001236  ECEE  F024         	call	_stristr	;wreg free
 13286  00123A  D917               	call	PL2	;call to abstracted procedure
 13287  00123C  E104               	bnz	u12425
 13288  00123E  0100               	movlb	0	; () banked
 13289  001240  516D               	movf	?_stristr& (0+255),w,b
 13290  001242  0101               	movlb	1	; () banked
 13291  001244  19B2               	xorwf	??_doModeVerbose& (0+255),w,b
 13292  001246                     u12425:
 13293  001246  E110               	bnz	l10098
 13294                           
 13295                           ; BSR set to: 1
 13296                           ;main.c: 982: bHex = 0;
 13297  001248  6B00               	clrf	_bHex& (0+255),b
 13298                           
 13299                           ; BSR set to: 1
 13300                           ;main.c: 983: writeEEPROM(0x06, 0);
 13301  00124A  0100               	movlb	0	; () banked
 13302  00124C  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13303  00124E  0E06               	movlw	6
 13304  001250  6F60               	movwf	?_writeEEPROM& (0+255),b
 13305  001252  0E00               	movlw	0
 13306  001254  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 13307  001256  ECDE  F029         	call	_writeEEPROM	;wreg free
 13308                           
 13309                           ; BSR set to: 0
 13310                           ;main.c: 984: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 13311  00125A  0E77               	movlw	high STR_110
 13312  00125C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13313  00125E  0EF6               	movlw	low STR_110
 13314  001260  6F61               	movwf	?_putsUSART& (0+255),b
 13315  001262  EC6A  F027         	call	_putsUSART	;wreg free
 13316                           
 13317                           ;main.c: 985: }
 13318  001266  D0F1               	goto	l10154
 13319  001268                     l10098:
 13320                           
 13321                           ; BSR set to: 1
 13322                           ;main.c: 986: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 13323  001268  0E01               	movlw	high _cmdbuf
 13324  00126A  0100               	movlb	0	; () banked
 13325  00126C  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13326  00126E  0E04               	movlw	low _cmdbuf
 13327  001270  6F6D               	movwf	?_stristr& (0+255),b
 13328  001272  0E7E               	movlw	high STR_111
 13329  001274  6F70               	movwf	(?_stristr+3)& (0+255),b
 13330  001276  0E87               	movlw	low STR_111
 13331  001278  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13332  00127A  ECEE  F024         	call	_stristr	;wreg free
 13333  00127E  516E               	movf	(?_stristr+1)& (0+255),w,b
 13334  001280  116D               	iorwf	?_stristr& (0+255),w,b
 13335  001282  E027               	bz	l10110
 13336                           
 13337                           ; BSR set to: 0
 13338                           ;main.c: 987: strcpy(cmdbuf, cmdbuf + 10);
 13339  001284  0E01               	movlw	high _cmdbuf
 13340  001286  0100               	movlb	0	; () banked
 13341  001288  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13342  00128A  0E04               	movlw	low _cmdbuf
 13343  00128C  6F60               	movwf	?_strcpy& (0+255),b
 13344  00128E  0E0E               	movlw	low (_cmdbuf+10)
 13345  001290  0101               	movlb	1	; () banked
 13346  001292  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13347  001294  0E01               	movlw	high (_cmdbuf+10)
 13348  001296  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13349  001298  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13350  00129C  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13351  0012A0  EC98  F029         	call	_strcpy	;wreg free
 13352                           
 13353                           ;main.c: 988: rwtimeout = atoi(cmdbuf);
 13354  0012A4  0E01               	movlw	high _cmdbuf
 13355  0012A6  0100               	movlb	0	; () banked
 13356  0012A8  6F67               	movwf	(?_atoi+1)& (0+255),b
 13357  0012AA  0E04               	movlw	low _cmdbuf
 13358  0012AC  6F66               	movwf	?_atoi& (0+255),b
 13359  0012AE  EC4A  F01C         	call	_atoi	;wreg free
 13360  0012B2  5166               	movf	?_atoi& (0+255),w,b
 13361  0012B4  0101               	movlb	1	; () banked
 13362  0012B6  6F03               	movwf	_rwtimeout& (0+255),b
 13363                           
 13364                           ; BSR set to: 1
 13365                           ;main.c: 989: if (rwtimeout < 10u) {
 13366  0012B8  0E0A               	movlw	10
 13367  0012BA  6103               	cpfslt	_rwtimeout& (0+255),b
 13368  0012BC  D001               	goto	l10108
 13369                           
 13370                           ; BSR set to: 1
 13371                           ;main.c: 990: rwtimeout = 10u;
 13372  0012BE  6F03               	movwf	_rwtimeout& (0+255),b
 13373  0012C0                     l10108:
 13374                           
 13375                           ; BSR set to: 1
 13376                           ;main.c: 991: }
 13377                           ;main.c: 992: writeEEPROM(0x09, rwtimeout);
 13378  0012C0  0100               	movlb	0	; () banked
 13379  0012C2  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13380  0012C4  0E09               	movlw	9
 13381  0012C6  6F60               	movwf	?_writeEEPROM& (0+255),b
 13382  0012C8  C103  F062         	movff	_rwtimeout,?_writeEEPROM+2
 13383  0012CC  ECDE  F029         	call	_writeEEPROM	;wreg free
 13384                           
 13385                           ;main.c: 993: }
 13386  0012D0  D0BC               	goto	l10154
 13387  0012D2                     l10110:
 13388                           
 13389                           ; BSR set to: 0
 13390                           ;main.c: 994: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 13391  0012D2  0E01               	movlw	high _cmdbuf
 13392  0012D4  0100               	movlb	0	; () banked
 13393  0012D6  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13394  0012D8  0E04               	movlw	low _cmdbuf
 13395  0012DA  6F6D               	movwf	?_stristr& (0+255),b
 13396  0012DC  0E7E               	movlw	high STR_112
 13397  0012DE  6F70               	movwf	(?_stristr+3)& (0+255),b
 13398  0012E0  0EBB               	movlw	low STR_112
 13399  0012E2  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13400  0012E4  ECEE  F024         	call	_stristr	;wreg free
 13401  0012E8  516E               	movf	(?_stristr+1)& (0+255),w,b
 13402  0012EA  116D               	iorwf	?_stristr& (0+255),w,b
 13403  0012EC  E005               	bz	l10114
 13404                           
 13405                           ; BSR set to: 0
 13406                           ;main.c: 995: strcpy(cmdbuf, cmdbuf + 8);
 13407  0012EE  0E01               	movlw	high _cmdbuf
 13408  0012F0  D909               	call	PL12	;call to abstracted procedure
 13409  0012F2  EC98  F029         	call	_strcpy	;wreg free
 13410                           
 13411                           ;main.c: 996: }
 13412  0012F6  D0A9               	goto	l10154
 13413  0012F8                     l10114:
 13414                           
 13415                           ; BSR set to: 0
 13416                           ;main.c: 997: else if (0 != stristr(cmdbuf, "MODE ")) {
 13417  0012F8  0E01               	movlw	high _cmdbuf
 13418  0012FA  0100               	movlb	0	; () banked
 13419  0012FC  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13420  0012FE  0E04               	movlw	low _cmdbuf
 13421  001300  6F6D               	movwf	?_stristr& (0+255),b
 13422  001302  0E7F               	movlw	high STR_113
 13423  001304  6F70               	movwf	(?_stristr+3)& (0+255),b
 13424  001306  0E86               	movlw	low STR_113
 13425  001308  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13426  00130A  ECEE  F024         	call	_stristr	;wreg free
 13427  00130E  516E               	movf	(?_stristr+1)& (0+255),w,b
 13428  001310  116D               	iorwf	?_stristr& (0+255),w,b
 13429  001312  E05C               	bz	l10142
 13430                           
 13431                           ; BSR set to: 0
 13432                           ;main.c: 998: strcpy(cmdbuf, cmdbuf + 5);
 13433  001314  D8C3               	call	PL8	;call to abstracted procedure
 13434  001316  EC98  F029         	call	_strcpy	;wreg free
 13435                           
 13436                           ;main.c: 999: if (0 != stristr(cmdbuf, "VERBOSE")) {
 13437  00131A  0E01               	movlw	high _cmdbuf
 13438  00131C  0100               	movlb	0	; () banked
 13439  00131E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13440  001320  0E04               	movlw	low _cmdbuf
 13441  001322  6F6D               	movwf	?_stristr& (0+255),b
 13442  001324  0E7E               	movlw	high STR_114
 13443  001326  6F70               	movwf	(?_stristr+3)& (0+255),b
 13444  001328  0EFE               	movlw	low STR_114
 13445  00132A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13446  00132C  ECEE  F024         	call	_stristr	;wreg free
 13447  001330  516E               	movf	(?_stristr+1)& (0+255),w,b
 13448  001332  116D               	iorwf	?_stristr& (0+255),w,b
 13449  001334  E00F               	bz	l10126
 13450                           
 13451                           ; BSR set to: 0
 13452                           ;main.c: 1000: mode = 0;
 13453  001336  6BF8               	clrf	_mode& (0+255),b
 13454                           
 13455                           ; BSR set to: 0
 13456                           ;main.c: 1001: writeEEPROM(0x03, 0);
 13457  001338  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13458  00133A  0E03               	movlw	3
 13459  00133C  6F60               	movwf	?_writeEEPROM& (0+255),b
 13460  00133E  0E00               	movlw	0
 13461  001340  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 13462  001342  ECDE  F029         	call	_writeEEPROM	;wreg free
 13463                           
 13464                           ; BSR set to: 0
 13465                           ;main.c: 1002: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 13466  001346  0E7B               	movlw	high STR_115
 13467  001348  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13468  00134A  0E48               	movlw	low STR_115
 13469  00134C  6F61               	movwf	?_putsUSART& (0+255),b
 13470  00134E  EC6A  F027         	call	_putsUSART	;wreg free
 13471                           
 13472                           ;main.c: 1003: }
 13473  001352  D07B               	goto	l10154
 13474  001354                     l10126:
 13475                           
 13476                           ; BSR set to: 0
 13477                           ;main.c: 1004: else if (0 != stristr(cmdbuf, "VSCP")) {
 13478  001354  0E01               	movlw	high _cmdbuf
 13479  001356  0100               	movlb	0	; () banked
 13480  001358  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13481  00135A  0E04               	movlw	low _cmdbuf
 13482  00135C  6F6D               	movwf	?_stristr& (0+255),b
 13483  00135E  0E7F               	movlw	high STR_116
 13484  001360  6F70               	movwf	(?_stristr+3)& (0+255),b
 13485  001362  0EC1               	movlw	low STR_116
 13486  001364  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13487  001366  ECEE  F024         	call	_stristr	;wreg free
 13488  00136A  516E               	movf	(?_stristr+1)& (0+255),w,b
 13489  00136C  116D               	iorwf	?_stristr& (0+255),w,b
 13490  00136E  E010               	bz	l10134
 13491                           
 13492                           ; BSR set to: 0
 13493                           ;main.c: 1005: mode = 1;
 13494  001370  0E01               	movlw	1
 13495  001372  6FF8               	movwf	_mode& (0+255),b
 13496                           
 13497                           ; BSR set to: 0
 13498                           ;main.c: 1006: writeEEPROM(0x03, 1);
 13499  001374  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13500  001376  0E03               	movlw	3
 13501  001378  6F60               	movwf	?_writeEEPROM& (0+255),b
 13502  00137A  0E01               	movlw	1
 13503  00137C  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 13504  00137E  ECDE  F029         	call	_writeEEPROM	;wreg free
 13505                           
 13506                           ; BSR set to: 0
 13507                           ;main.c: 1007: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 13508  001382  0E7A               	movlw	high STR_117
 13509  001384  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13510  001386  0ECD               	movlw	low STR_117
 13511  001388  6F61               	movwf	?_putsUSART& (0+255),b
 13512  00138A  EC6A  F027         	call	_putsUSART	;wreg free
 13513                           
 13514                           ;main.c: 1008: }
 13515  00138E  D05D               	goto	l10154
 13516  001390                     l10134:
 13517                           
 13518                           ; BSR set to: 0
 13519                           ;main.c: 1009: else if (0 != stristr(cmdbuf, "SLCAN")) {
 13520  001390  0E01               	movlw	high _cmdbuf
 13521  001392  0100               	movlb	0	; () banked
 13522  001394  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13523  001396  0E04               	movlw	low _cmdbuf
 13524  001398  6F6D               	movwf	?_stristr& (0+255),b
 13525  00139A  0E7F               	movlw	high STR_118
 13526  00139C  6F70               	movwf	(?_stristr+3)& (0+255),b
 13527  00139E  0E98               	movlw	low STR_118
 13528  0013A0  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13529  0013A2  ECEE  F024         	call	_stristr	;wreg free
 13530  0013A6  516E               	movf	(?_stristr+1)& (0+255),w,b
 13531  0013A8  116D               	iorwf	?_stristr& (0+255),w,b
 13532  0013AA  E04F               	bz	l10154
 13533                           
 13534                           ; BSR set to: 0
 13535                           ;main.c: 1010: mode = 2;
 13536  0013AC  0E02               	movlw	2
 13537  0013AE  6FF8               	movwf	_mode& (0+255),b
 13538                           
 13539                           ; BSR set to: 0
 13540                           ;main.c: 1011: writeEEPROM(0x03, 2);
 13541  0013B0  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 13542  0013B2  0E03               	movlw	3
 13543  0013B4  6F60               	movwf	?_writeEEPROM& (0+255),b
 13544  0013B6  0E02               	movlw	2
 13545  0013B8  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 13546  0013BA  ECDE  F029         	call	_writeEEPROM	;wreg free
 13547                           
 13548                           ; BSR set to: 0
 13549                           ;main.c: 1012: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 13550  0013BE  0E7B               	movlw	high STR_119
 13551  0013C0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13552  0013C2  0EB5               	movlw	low STR_119
 13553  0013C4  6F61               	movwf	?_putsUSART& (0+255),b
 13554  0013C6  EC6A  F027         	call	_putsUSART	;wreg free
 13555  0013CA  D03F               	goto	l10154
 13556  0013CC                     l10142:
 13557                           
 13558                           ; BSR set to: 0
 13559                           ;main.c: 1016: else if (0 != stristr(cmdbuf, "FILTER ")) {
 13560  0013CC  0E01               	movlw	high _cmdbuf
 13561  0013CE  0100               	movlb	0	; () banked
 13562  0013D0  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13563  0013D2  0E04               	movlw	low _cmdbuf
 13564  0013D4  6F6D               	movwf	?_stristr& (0+255),b
 13565  0013D6  0E7E               	movlw	high STR_120
 13566  0013D8  6F70               	movwf	(?_stristr+3)& (0+255),b
 13567  0013DA  0EEE               	movlw	low STR_120
 13568  0013DC  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13569  0013DE  ECEE  F024         	call	_stristr	;wreg free
 13570  0013E2  516E               	movf	(?_stristr+1)& (0+255),w,b
 13571  0013E4  116D               	iorwf	?_stristr& (0+255),w,b
 13572  0013E6  E011               	bz	l10146
 13573                           
 13574                           ; BSR set to: 0
 13575                           ;main.c: 1017: strcpy(cmdbuf, cmdbuf + 7);
 13576  0013E8  0E01               	movlw	high _cmdbuf
 13577  0013EA  0100               	movlb	0	; () banked
 13578  0013EC  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13579  0013EE  0E04               	movlw	low _cmdbuf
 13580  0013F0  6F60               	movwf	?_strcpy& (0+255),b
 13581  0013F2  0E0B               	movlw	low (_cmdbuf+7)
 13582  0013F4  0101               	movlb	1	; () banked
 13583  0013F6  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13584  0013F8  0E01               	movlw	high (_cmdbuf+7)
 13585  0013FA  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13586  0013FC  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13587  001400  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13588  001404  EC98  F029         	call	_strcpy	;wreg free
 13589                           
 13590                           ;main.c: 1018: }
 13591  001408  D020               	goto	l10154
 13592  00140A                     l10146:
 13593                           
 13594                           ; BSR set to: 0
 13595                           ;main.c: 1020: else if (0 != stristr(cmdbuf, "MASK ")) {
 13596  00140A  0E01               	movlw	high _cmdbuf
 13597  00140C  0100               	movlb	0	; () banked
 13598  00140E  6F6E               	movwf	(?_stristr+1)& (0+255),b
 13599  001410  0E04               	movlw	low _cmdbuf
 13600  001412  6F6D               	movwf	?_stristr& (0+255),b
 13601  001414  0E7F               	movlw	high STR_121
 13602  001416  6F70               	movwf	(?_stristr+3)& (0+255),b
 13603  001418  0E8C               	movlw	low STR_121
 13604  00141A  6F6F               	movwf	(?_stristr+2)& (0+255),b
 13605  00141C  ECEE  F024         	call	_stristr	;wreg free
 13606  001420  516E               	movf	(?_stristr+1)& (0+255),w,b
 13607  001422  116D               	iorwf	?_stristr& (0+255),w,b
 13608  001424  E004               	bz	l10150
 13609                           
 13610                           ; BSR set to: 0
 13611                           ;main.c: 1021: strcpy(cmdbuf, cmdbuf + 5);
 13612  001426  D83A               	call	PL8	;call to abstracted procedure
 13613  001428  EC98  F029         	call	_strcpy	;wreg free
 13614                           
 13615                           ;main.c: 1022: }
 13616  00142C  D00E               	goto	l10154
 13617  00142E                     l10150:
 13618                           
 13619                           ; BSR set to: 0
 13620                           ;main.c: 1023: else {
 13621                           ;main.c: 1024: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 13622  00142E  0E7A               	movlw	high STR_122
 13623  001430  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13624  001432  0E6A               	movlw	low STR_122
 13625  001434  6F61               	movwf	?_putsUSART& (0+255),b
 13626  001436  EC6A  F027         	call	_putsUSART	;wreg free
 13627  00143A  D007               	goto	l10154
 13628  00143C                     l10152:
 13629                           
 13630                           ; BSR set to: 1
 13631                           ;main.c: 1028: else {
 13632                           ;main.c: 1029: putsUSART((char *) "-ERROR - Unknown command\r\n");
 13633  00143C  0E7B               	movlw	high STR_123
 13634  00143E  0100               	movlb	0	; () banked
 13635  001440  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 13636  001442  0E7F               	movlw	low STR_123
 13637  001444  6F61               	movwf	?_putsUSART& (0+255),b
 13638  001446  EC6A  F027         	call	_putsUSART	;wreg free
 13639  00144A                     l10154:
 13640                           
 13641                           ;main.c: 1030: }
 13642                           ;main.c: 1032: memset(cmdbuf, 0, sizeof ( cmdbuf));
 13643  00144A  0E01               	movlw	high _cmdbuf
 13644  00144C  0100               	movlb	0	; () banked
 13645  00144E  6F61               	movwf	(?_memset+1)& (0+255),b
 13646  001450  0E04               	movlw	low _cmdbuf
 13647  001452  6F60               	movwf	?_memset& (0+255),b
 13648  001454  6B63               	clrf	(?_memset+3)& (0+255),b
 13649  001456  6B62               	clrf	(?_memset+2)& (0+255),b
 13650  001458  6B65               	clrf	(?_memset+5)& (0+255),b
 13651  00145A  0E50               	movlw	80
 13652  00145C  6F64               	movwf	(?_memset+4)& (0+255),b
 13653  00145E  ECC7  F029         	call	_memset	;wreg free
 13654                           
 13655                           ; BSR set to: 0
 13656                           ;main.c: 1033: pos = 0;
 13657  001462  0101               	movlb	1	; () banked
 13658  001464  6B02               	clrf	_pos& (0+255),b
 13659  001466                     l10158:
 13660                           
 13661                           ;main.c: 1034: }
 13662                           ;main.c: 1035: }
 13663                           ;main.c: 1038: (INTCONbits.GIE = 1);
 13664  001466  8EF2               	bsf	intcon,7,c	;volatile
 13665  001468                     l502:
 13666  001468  0012               	return	
 13667  00146A                     __end_of_doModeVerbose:
 13668                           	opt stack 0
 13669  00146A                     PL2:
 13670                           	opt stack 20
 13671  00146A  0E04               	movlw	low _cmdbuf
 13672  00146C  0101               	movlb	1	; () banked
 13673  00146E  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13674  001470  0E01               	movlw	high _cmdbuf
 13675  001472  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13676  001474  0100               	movlb	0	; () banked
 13677  001476  516E               	movf	(?_stristr+1)& (0+255),w,b
 13678  001478  0101               	movlb	1	; () banked
 13679  00147A  19B3               	xorwf	(??_doModeVerbose+1)& (0+255),w,b
 13680  00147C  0012               	return	
 13681  00147E                     __end_ofPL2:
 13682                           	opt stack 0
 13683  00147E                     PL4:
 13684                           	opt stack 20
 13685  00147E  0100               	movlb	0	; () banked
 13686  001480  6B6D               	clrf	(?_strtok+1)& (0+255),b
 13687  001482  6B6C               	clrf	?_strtok& (0+255),b
 13688  001484  0E7F               	movlw	high STR_29
 13689  001486  6F6F               	movwf	(?_strtok+3)& (0+255),b
 13690  001488  0EF5               	movlw	low STR_29
 13691  00148A  6F6E               	movwf	(?_strtok+2)& (0+255),b
 13692  00148C  0012               	return	
 13693  00148E                     __end_ofPL4:
 13694                           	opt stack 0
 13695  00148E                     PL6:
 13696                           	opt stack 20
 13697  00148E  6B6D               	clrf	(?_strtok+1)& (0+255),b
 13698  001490  6B6C               	clrf	?_strtok& (0+255),b
 13699  001492  0E7F               	movlw	high STR_29
 13700  001494  6F6F               	movwf	(?_strtok+3)& (0+255),b
 13701  001496  0EF5               	movlw	low STR_29
 13702  001498  6F6E               	movwf	(?_strtok+2)& (0+255),b
 13703  00149A  0012               	return	
 13704  00149C                     __end_ofPL6:
 13705                           	opt stack 0
 13706  00149C                     PL8:
 13707                           	opt stack 20
 13708  00149C  0E01               	movlw	high _cmdbuf
 13709  00149E  0100               	movlb	0	; () banked
 13710  0014A0  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13711  0014A2  0E04               	movlw	low _cmdbuf
 13712  0014A4  6F60               	movwf	?_strcpy& (0+255),b
 13713  0014A6  0E09               	movlw	low (_cmdbuf+5)
 13714  0014A8  0101               	movlb	1	; () banked
 13715  0014AA  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13716  0014AC  0E01               	movlw	high (_cmdbuf+5)
 13717  0014AE  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13718  0014B0  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13719  0014B4  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13720  0014B8  0012               	return	
 13721  0014BA                     __end_ofPL8:
 13722                           	opt stack 0
 13723  0014BA                     PL10:
 13724                           	opt stack 20
 13725  0014BA  6BBB               	clrf	(??_doModeVerbose+9)& (0+255),b
 13726  0014BC  6BBC               	clrf	(??_doModeVerbose+10)& (0+255),b
 13727  0014BE  6BBD               	clrf	(??_doModeVerbose+11)& (0+255),b
 13728  0014C0  0E1A               	movlw	26
 13729  0014C2                     u12305:
 13730  0014C2  90D8               	bcf	status,0,c
 13731  0014C4  37BA               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 13732  0014C6  37BB               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 13733  0014C8  37BC               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 13734  0014CA  37BD               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 13735  0014CC  2EE8               	decfsz	wreg,f,c
 13736  0014CE  D7F9               	goto	u12305
 13737  0014D0  51B6               	movf	(??_doModeVerbose+4)& (0+255),w,b
 13738  0014D2  11BA               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 13739  0014D4  6FBE               	movwf	(??_doModeVerbose+12)& (0+255),b
 13740  0014D6  51B7               	movf	(??_doModeVerbose+5)& (0+255),w,b
 13741  0014D8  11BB               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 13742  0014DA  6FBF               	movwf	(??_doModeVerbose+13)& (0+255),b
 13743  0014DC  51B8               	movf	(??_doModeVerbose+6)& (0+255),w,b
 13744  0014DE  11BC               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 13745  0014E0  6FC0               	movwf	(??_doModeVerbose+14)& (0+255),b
 13746  0014E2  51B9               	movf	(??_doModeVerbose+7)& (0+255),w,b
 13747  0014E4  11BD               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 13748  0014E6  6FC1               	movwf	(??_doModeVerbose+15)& (0+255),b
 13749  0014E8  51B2               	movf	??_doModeVerbose& (0+255),w,b
 13750  0014EA  11BE               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 13751  0014EC  6FC2               	movwf	(??_doModeVerbose+16)& (0+255),b
 13752  0014EE  51B3               	movf	(??_doModeVerbose+1)& (0+255),w,b
 13753  0014F0  11BF               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 13754  0014F2  6FC3               	movwf	(??_doModeVerbose+17)& (0+255),b
 13755  0014F4  51B4               	movf	(??_doModeVerbose+2)& (0+255),w,b
 13756  0014F6  11C0               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 13757  0014F8  6FC4               	movwf	(??_doModeVerbose+18)& (0+255),b
 13758  0014FA  51B5               	movf	(??_doModeVerbose+3)& (0+255),w,b
 13759  0014FC  11C1               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 13760  0014FE  6FC5               	movwf	(??_doModeVerbose+19)& (0+255),b
 13761  001500  0102               	movlb	2	; () banked
 13762  001502  0012               	return	
 13763  001504                     __end_ofPL10:
 13764                           	opt stack 0
 13765  001504                     PL12:
 13766                           	opt stack 20
 13767  001504  0100               	movlb	0	; () banked
 13768  001506  6F61               	movwf	(?_strcpy+1)& (0+255),b
 13769  001508  0E04               	movlw	low _cmdbuf
 13770  00150A  6F60               	movwf	?_strcpy& (0+255),b
 13771  00150C  0E0C               	movlw	low (_cmdbuf+8)
 13772  00150E  0101               	movlb	1	; () banked
 13773  001510  6FB2               	movwf	??_doModeVerbose& (0+255),b
 13774  001512  0E01               	movlw	high (_cmdbuf+8)
 13775  001514  6FB3               	movwf	(??_doModeVerbose+1)& (0+255),b
 13776  001516  C1B2  F062         	movff	??_doModeVerbose,?_strcpy+2
 13777  00151A  C1B3  F063         	movff	??_doModeVerbose+1,?_strcpy+3
 13778  00151E  0012               	return	
 13779  001520                     __end_ofPL12:
 13780                           	opt stack 0
 13781  001520                     PL26:
 13782                           	opt stack 20
 13783  001520  0100               	movlb	0	; () banked
 13784  001522  6B6D               	clrf	(?_strtok+1)& (0+255),b
 13785  001524  6B6C               	clrf	?_strtok& (0+255),b
 13786  001526  0E7F               	movlw	high (STR_247+5)
 13787  001528  6F6F               	movwf	(?_strtok+3)& (0+255),b
 13788  00152A  0E2B               	movlw	low (STR_247+5)
 13789  00152C  6F6E               	movwf	(?_strtok+2)& (0+255),b
 13790  00152E  0012               	return	
 13791  001530                     __end_ofPL26:
 13792                           	opt stack 0
 13793  001530                     PL28:
 13794                           	opt stack 20
 13795  001530  0E01               	movlw	high _cmdbuf
 13796  001532  0100               	movlb	0	; () banked
 13797  001534  6F6D               	movwf	(?_strtok+1)& (0+255),b
 13798  001536  0E04               	movlw	low _cmdbuf
 13799  001538  6F6C               	movwf	?_strtok& (0+255),b
 13800  00153A  0E7F               	movlw	high STR_29
 13801  00153C  6F6F               	movwf	(?_strtok+3)& (0+255),b
 13802  00153E  0EF5               	movlw	low STR_29
 13803  001540  6F6E               	movwf	(?_strtok+2)& (0+255),b
 13804  001542  0012               	return	
 13805  001544                     __end_ofPL28:
 13806                           	opt stack 0
 13807  001544                     PL34:
 13808                           	opt stack 20
 13809  001544  0100               	movlb	0	; () banked
 13810  001546  6F6D               	movwf	(?_strtok+1)& (0+255),b
 13811  001548  0E04               	movlw	low _cmdbuf
 13812  00154A  6F6C               	movwf	?_strtok& (0+255),b
 13813  00154C  0E7F               	movlw	high (STR_247+5)
 13814  00154E  6F6F               	movwf	(?_strtok+3)& (0+255),b
 13815  001550  0E2B               	movlw	low (STR_247+5)
 13816  001552  6F6E               	movwf	(?_strtok+2)& (0+255),b
 13817  001554  0012               	return	
 13818  001556                     __end_ofPL34:
 13819                           	opt stack 0
 13820  001556                     PL38:
 13821                           	opt stack 20
 13822  001556  0102               	movlb	2	; () banked
 13823  001558  51B0               	movf	doModeVerbose@i_1127& (0+255),w,b
 13824  00155A  C2AE  F1B2         	movff	doModeVerbose@reg,??_doModeVerbose
 13825  00155E  0101               	movlb	1	; () banked
 13826  001560  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 13827  001562  27B2               	addwf	??_doModeVerbose& (0+255),f,b
 13828  001564  0E00               	movlw	0
 13829  001566  23B3               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 13830  001568  51B2               	movf	??_doModeVerbose& (0+255),w,b
 13831  00156A  0100               	movlb	0	; () banked
 13832  00156C  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 13833  00156E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 13834  001570  0012               	return	
 13835  001572                     __end_ofPL38:
 13836                           	opt stack 0
 13837  001572                     PL42:
 13838                           	opt stack 20
 13839  001572  0101               	movlb	1	; () banked
 13840  001574  6BB3               	clrf	(??_doModeVerbose+1)& (0+255),b
 13841  001576  6BB4               	clrf	(??_doModeVerbose+2)& (0+255),b
 13842  001578  6BB5               	clrf	(??_doModeVerbose+3)& (0+255),b
 13843  00157A  C1B4  F1B5         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 13844  00157E  C1B3  F1B4         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 13845  001582  C1B2  F1B3         	movff	??_doModeVerbose,??_doModeVerbose+1
 13846  001586  6BB2               	clrf	??_doModeVerbose& (0+255),b
 13847  001588  0102               	movlb	2	; () banked
 13848  00158A  0012               	return	
 13849  00158C                     __end_ofPL42:
 13850                           	opt stack 0
 13851  00158C                     PL54:
 13852                           	opt stack 20
 13853  00158C  6F60               	movwf	?__CANIDToRegs& (0+255),b
 13854  00158E  C2A3  F062         	movff	doModeVerbose@id_1236,?__CANIDToRegs+2
 13855  001592  C2A4  F063         	movff	doModeVerbose@id_1236+1,?__CANIDToRegs+3
 13856  001596  C2A5  F064         	movff	doModeVerbose@id_1236+2,?__CANIDToRegs+4
 13857  00159A  C2A6  F065         	movff	doModeVerbose@id_1236+3,?__CANIDToRegs+5
 13858  00159E  0E01               	movlw	1
 13859  0015A0  6F66               	movwf	(?__CANIDToRegs+6)& (0+255),b
 13860  0015A2  0C01               	retlw	1
 13861  0015A4                     __end_ofPL54:
 13862                           	opt stack 0
 13863  0015A4                     PL58:
 13864                           	opt stack 20
 13865  0015A4  0101               	movlb	1	; () banked
 13866  0015A6  6FB7               	movwf	(??_doModeVerbose+5)& (0+255),b
 13867  0015A8  6BB8               	clrf	(??_doModeVerbose+6)& (0+255),b
 13868  0015AA  6BB9               	clrf	(??_doModeVerbose+7)& (0+255),b
 13869  0015AC  C1B7  F1B9         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 13870  0015B0  C1B6  F1B8         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 13871  0015B4  6BB7               	clrf	(??_doModeVerbose+5)& (0+255),b
 13872  0015B6  6BB6               	clrf	(??_doModeVerbose+4)& (0+255),b
 13873  0015B8  0012               	return	
 13874  0015BA                     __end_ofPL58:
 13875                           	opt stack 0
 13876                           tblptru	equ	0xFF8
 13877                           tblptrh	equ	0xFF7
 13878                           tblptrl	equ	0xFF6
 13879                           tablat	equ	0xFF5
 13880                           prodh	equ	0xFF4
 13881                           prodl	equ	0xFF3
 13882                           intcon	equ	0xFF2
 13883                           indf0	equ	0xFEF
 13884                           postinc0	equ	0xFEE
 13885                           fsr0h	equ	0xFEA
 13886                           fsr0l	equ	0xFE9
 13887                           wreg	equ	0xFE8
 13888                           indf1	equ	0xFE7
 13889                           postinc1	equ	0xFE6
 13890                           postdec1	equ	0xFE5
 13891                           fsr1h	equ	0xFE2
 13892                           fsr1l	equ	0xFE1
 13893                           indf2	equ	0xFDF
 13894                           postinc2	equ	0xFDE
 13895                           postdec2	equ	0xFDD
 13896                           plusw2	equ	0xFDB
 13897                           fsr2h	equ	0xFDA
 13898                           fsr2l	equ	0xFD9
 13899                           status	equ	0xFD8
 13900                           
 13901 ;; *************** function _setFilter *****************
 13902 ;; Defined at:
 13903 ;;		line 2529 in file "main.c"
 13904 ;; Parameters:    Size  Location     Type
 13905 ;;  filter          1    wreg     unsigned char 
 13906 ;;  val             4    0[BANK0 ] unsigned long 
 13907 ;; Auto vars:     Size  Location     Type
 13908 ;;  filter          1   10[BANK0 ] unsigned char 
 13909 ;;  eidl            1   14[BANK0 ] unsigned char 
 13910 ;;  eidh            1   13[BANK0 ] unsigned char 
 13911 ;;  sidl            1   12[BANK0 ] unsigned char 
 13912 ;;  sidh            1   11[BANK0 ] unsigned char 
 13913 ;; Return value:  Size  Location     Type
 13914 ;;		None               void
 13915 ;; Registers used:
 13916 ;;		wreg, status,2, status,0
 13917 ;; Tracked objects:
 13918 ;;		On entry : F/2
 13919 ;;		On exit  : F/0
 13920 ;;		Unchanged: 0/0
 13921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 13922 ;;      Params:         0       4       0       0       0       0       0
 13923 ;;      Locals:         0       5       0       0       0       0       0
 13924 ;;      Temps:          0       6       0       0       0       0       0
 13925 ;;      Totals:         0      15       0       0       0       0       0
 13926 ;;Total ram usage:       15 bytes
 13927 ;; Hardware stack levels used:    1
 13928 ;; Hardware stack levels required when called:    3
 13929 ;; This function calls:
 13930 ;;		Nothing
 13931 ;; This function is called by:
 13932 ;;		_doModeVerbose
 13933 ;; This function uses a non-reentrant model
 13934 ;;
 13935                           
 13936                           	psect	text20
 13937  002808                     __ptext20:
 13938                           	opt stack 0
 13939  002808                     _setFilter:
 13940                           	opt stack 26
 13941                           
 13942                           ;incstack = 0
 13943                           ;incstack = 0
 13944                           ;setFilter@filter stored from wreg
 13945  002808  CFE8 F06A          	movff	wreg,setFilter@filter
 13946                           
 13947                           ; BSR set to: 2
 13948                           ;main.c: 2530: uint8_t sidh = (long) val >> 21L;
 13949  00280C  0E15               	movlw	21
 13950  00280E  0100               	movlb	0	; () banked
 13951  002810  6F64               	movwf	??_setFilter& (0+255),b
 13952  002812  C060  F065         	movff	setFilter@val,??_setFilter+1
 13953  002816  C061  F066         	movff	setFilter@val+1,??_setFilter+2
 13954  00281A  C062  F067         	movff	setFilter@val+2,??_setFilter+3
 13955  00281E  C063  F068         	movff	setFilter@val+3,??_setFilter+4
 13956  002822                     u14735:
 13957  002822  6764               	tstfsz	??_setFilter& (0+255),b
 13958  002824  D001               	goto	u14736
 13959  002826  D007               	goto	u14737
 13960  002828                     u14736:
 13961  002828  3568               	rlcf	(??_setFilter+4)& (0+255),w,b
 13962  00282A  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 13963  00282C  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 13964  00282E  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 13965  002830  3365               	rrcf	(??_setFilter+1)& (0+255),f,b
 13966  002832  2F64               	decfsz	??_setFilter& (0+255),f,b
 13967  002834  D7F6               	goto	u14735
 13968  002836                     u14737:
 13969  002836  5165               	movf	(??_setFilter+1)& (0+255),w,b
 13970  002838  6F6B               	movwf	setFilter@sidh& (0+255),b
 13971                           
 13972                           ;main.c: 2531: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 13973                           ;main.c: 2532: ((long) (val) & 0x03L) |
 13974                           ;main.c: 2533: 0x08;
 13975  00283A  C060  F064         	movff	setFilter@val,??_setFilter
 13976  00283E  0E03               	movlw	3
 13977  002840  1764               	andwf	??_setFilter& (0+255),f,b
 13978  002842  0E0D               	movlw	13
 13979  002844  6F65               	movwf	(??_setFilter+1)& (0+255),b
 13980  002846  C060  F066         	movff	setFilter@val,??_setFilter+2
 13981  00284A  C061  F067         	movff	setFilter@val+1,??_setFilter+3
 13982  00284E  C062  F068         	movff	setFilter@val+2,??_setFilter+4
 13983  002852  C063  F069         	movff	setFilter@val+3,??_setFilter+5
 13984  002856                     u14745:
 13985  002856  6765               	tstfsz	(??_setFilter+1)& (0+255),b
 13986  002858  D001               	goto	u14746
 13987  00285A  D007               	goto	u14747
 13988  00285C                     u14746:
 13989  00285C  3569               	rlcf	(??_setFilter+5)& (0+255),w,b
 13990  00285E  3369               	rrcf	(??_setFilter+5)& (0+255),f,b
 13991  002860  3368               	rrcf	(??_setFilter+4)& (0+255),f,b
 13992  002862  3367               	rrcf	(??_setFilter+3)& (0+255),f,b
 13993  002864  3366               	rrcf	(??_setFilter+2)& (0+255),f,b
 13994  002866  2F65               	decfsz	(??_setFilter+1)& (0+255),f,b
 13995  002868  D7F6               	goto	u14745
 13996  00286A                     u14747:
 13997  00286A  5166               	movf	(??_setFilter+2)& (0+255),w,b
 13998  00286C  0BE0               	andlw	224
 13999  00286E  1164               	iorwf	??_setFilter& (0+255),w,b
 14000  002870  0908               	iorlw	8
 14001  002872  6F6C               	movwf	setFilter@sidl& (0+255),b
 14002                           
 14003                           ; BSR set to: 0
 14004                           ;main.c: 2534: uint8_t eidh = (long) val >> 8L;
 14005  002874  C061  F06D         	movff	setFilter@val+1,setFilter@eidh
 14006                           
 14007                           ; BSR set to: 0
 14008                           ;main.c: 2535: uint8_t eidl = val;
 14009  002878  C060  F06E         	movff	setFilter@val,setFilter@eidl
 14010                           
 14011                           ;main.c: 2537: switch (filter) {
 14012  00287C  D090               	goto	l11572
 14013  00287E                     l1142:
 14014                           
 14015                           ; BSR set to: 0
 14016                           ;main.c: 2540: RXF0SIDH = sidh;
 14017  00287E  C06B  FF00         	movff	setFilter@sidh,3840	;volatile
 14018                           
 14019                           ;main.c: 2541: RXF0SIDL = sidl;
 14020  002882  C06C  FF01         	movff	setFilter@sidl,3841	;volatile
 14021                           
 14022                           ;main.c: 2542: RXF0EIDH = eidh;
 14023  002886  C06D  FF02         	movff	setFilter@eidh,3842	;volatile
 14024                           
 14025                           ;main.c: 2543: RXF0EIDL = eidl;
 14026  00288A  C06E  FF03         	movff	setFilter@eidl,3843	;volatile
 14027                           
 14028                           ;main.c: 2544: break;
 14029  00288E  D0AA               	goto	l1159
 14030  002890                     l1144:
 14031                           
 14032                           ; BSR set to: 0
 14033                           ;main.c: 2547: RXF1SIDH = sidh;
 14034  002890  C06B  FF04         	movff	setFilter@sidh,3844	;volatile
 14035                           
 14036                           ;main.c: 2548: RXF1SIDL = sidl;
 14037  002894  C06C  FF05         	movff	setFilter@sidl,3845	;volatile
 14038                           
 14039                           ;main.c: 2549: RXF1EIDH = eidh;
 14040  002898  C06D  FF06         	movff	setFilter@eidh,3846	;volatile
 14041                           
 14042                           ;main.c: 2550: RXF1EIDL = eidl;
 14043  00289C  C06E  FF07         	movff	setFilter@eidl,3847	;volatile
 14044                           
 14045                           ;main.c: 2551: break;
 14046  0028A0  D0A1               	goto	l1159
 14047  0028A2                     l1145:
 14048                           
 14049                           ; BSR set to: 0
 14050                           ;main.c: 2554: RXF2SIDH = sidh;
 14051  0028A2  C06B  FF08         	movff	setFilter@sidh,3848	;volatile
 14052                           
 14053                           ;main.c: 2555: RXF2SIDL = sidl;
 14054  0028A6  C06C  FF09         	movff	setFilter@sidl,3849	;volatile
 14055                           
 14056                           ;main.c: 2556: RXF2EIDH = eidh;
 14057  0028AA  C06D  FF0A         	movff	setFilter@eidh,3850	;volatile
 14058                           
 14059                           ;main.c: 2557: RXF2EIDL = eidl;
 14060  0028AE  C06E  FF0B         	movff	setFilter@eidl,3851	;volatile
 14061                           
 14062                           ;main.c: 2558: break;
 14063  0028B2  D098               	goto	l1159
 14064  0028B4                     l1146:
 14065                           
 14066                           ; BSR set to: 0
 14067                           ;main.c: 2561: RXF3SIDH = sidh;
 14068  0028B4  C06B  FF0C         	movff	setFilter@sidh,3852	;volatile
 14069                           
 14070                           ;main.c: 2562: RXF3SIDL = sidl;
 14071  0028B8  C06C  FF0D         	movff	setFilter@sidl,3853	;volatile
 14072                           
 14073                           ;main.c: 2563: RXF3EIDH = eidh;
 14074  0028BC  C06D  FF0E         	movff	setFilter@eidh,3854	;volatile
 14075                           
 14076                           ;main.c: 2564: RXF3EIDL = eidl;
 14077  0028C0  C06E  FF0F         	movff	setFilter@eidl,3855	;volatile
 14078                           
 14079                           ;main.c: 2565: break;
 14080  0028C4  D08F               	goto	l1159
 14081  0028C6                     l1147:
 14082                           
 14083                           ; BSR set to: 0
 14084                           ;main.c: 2568: RXF4SIDH = sidh;
 14085  0028C6  C06B  FF10         	movff	setFilter@sidh,3856	;volatile
 14086                           
 14087                           ;main.c: 2569: RXF4SIDL = sidl;
 14088  0028CA  C06C  FF11         	movff	setFilter@sidl,3857	;volatile
 14089                           
 14090                           ;main.c: 2570: RXF4EIDH = eidh;
 14091  0028CE  C06D  FF12         	movff	setFilter@eidh,3858	;volatile
 14092                           
 14093                           ;main.c: 2571: RXF4EIDL = eidl;
 14094  0028D2  C06E  FF13         	movff	setFilter@eidl,3859	;volatile
 14095                           
 14096                           ;main.c: 2572: break;
 14097  0028D6  D086               	goto	l1159
 14098  0028D8                     l1148:
 14099                           
 14100                           ; BSR set to: 0
 14101                           ;main.c: 2575: RXF5SIDH = sidh;
 14102  0028D8  C06B  FF14         	movff	setFilter@sidh,3860	;volatile
 14103                           
 14104                           ;main.c: 2576: RXF5SIDL = sidl;
 14105  0028DC  C06C  FF15         	movff	setFilter@sidl,3861	;volatile
 14106                           
 14107                           ;main.c: 2577: RXF5EIDH = eidh;
 14108  0028E0  C06D  FF16         	movff	setFilter@eidh,3862	;volatile
 14109                           
 14110                           ;main.c: 2578: RXF5EIDL = eidl;
 14111  0028E4  C06E  FF17         	movff	setFilter@eidl,3863	;volatile
 14112                           
 14113                           ;main.c: 2579: break;
 14114  0028E8  D07D               	goto	l1159
 14115  0028EA                     l1149:
 14116                           
 14117                           ; BSR set to: 0
 14118                           ;main.c: 2582: RXF6SIDH = sidh;
 14119  0028EA  C06B  FD60         	movff	setFilter@sidh,3424	;volatile
 14120                           
 14121                           ;main.c: 2583: RXF6SIDL = sidl;
 14122  0028EE  C06C  FD61         	movff	setFilter@sidl,3425	;volatile
 14123                           
 14124                           ;main.c: 2584: RXF6EIDH = eidh;
 14125  0028F2  C06D  FD62         	movff	setFilter@eidh,3426	;volatile
 14126                           
 14127                           ;main.c: 2585: RXF6EIDL = eidl;
 14128  0028F6  C06E  FD63         	movff	setFilter@eidl,3427	;volatile
 14129                           
 14130                           ;main.c: 2586: break;
 14131  0028FA  D074               	goto	l1159
 14132  0028FC                     l1150:
 14133                           
 14134                           ; BSR set to: 0
 14135                           ;main.c: 2589: RXF7SIDH = sidh;
 14136  0028FC  C06B  FD64         	movff	setFilter@sidh,3428	;volatile
 14137                           
 14138                           ;main.c: 2590: RXF7SIDL = sidl;
 14139  002900  C06C  FD65         	movff	setFilter@sidl,3429	;volatile
 14140                           
 14141                           ;main.c: 2591: RXF7EIDH = eidh;
 14142  002904  C06D  FD66         	movff	setFilter@eidh,3430	;volatile
 14143                           
 14144                           ;main.c: 2592: RXF7EIDL = eidl;
 14145  002908  C06E  FD67         	movff	setFilter@eidl,3431	;volatile
 14146                           
 14147                           ;main.c: 2593: break;
 14148  00290C  D06B               	goto	l1159
 14149  00290E                     l1151:
 14150                           
 14151                           ; BSR set to: 0
 14152                           ;main.c: 2596: RXF8SIDH = sidh;
 14153  00290E  C06B  FD68         	movff	setFilter@sidh,3432	;volatile
 14154                           
 14155                           ;main.c: 2597: RXF8SIDL = sidl;
 14156  002912  C06C  FD69         	movff	setFilter@sidl,3433	;volatile
 14157                           
 14158                           ;main.c: 2598: RXF8EIDH = eidh;
 14159  002916  C06D  FD6A         	movff	setFilter@eidh,3434	;volatile
 14160                           
 14161                           ;main.c: 2599: RXF8EIDL = eidl;
 14162  00291A  C06E  FD6B         	movff	setFilter@eidl,3435	;volatile
 14163                           
 14164                           ;main.c: 2600: break;
 14165  00291E  D062               	goto	l1159
 14166  002920                     l1152:
 14167                           
 14168                           ; BSR set to: 0
 14169                           ;main.c: 2603: RXF9SIDH = sidh;
 14170  002920  C06B  FD70         	movff	setFilter@sidh,3440	;volatile
 14171                           
 14172                           ;main.c: 2604: RXF9SIDL = sidl;
 14173  002924  C06C  FD71         	movff	setFilter@sidl,3441	;volatile
 14174                           
 14175                           ;main.c: 2605: RXF9EIDH = eidh;
 14176  002928  C06D  FD72         	movff	setFilter@eidh,3442	;volatile
 14177                           
 14178                           ;main.c: 2606: RXF9EIDL = eidl;
 14179  00292C  C06E  FD73         	movff	setFilter@eidl,3443	;volatile
 14180                           
 14181                           ;main.c: 2607: break;
 14182  002930  D059               	goto	l1159
 14183  002932                     l1153:
 14184                           
 14185                           ; BSR set to: 0
 14186                           ;main.c: 2610: RXF10SIDH = sidh;
 14187  002932  C06B  FD74         	movff	setFilter@sidh,3444	;volatile
 14188                           
 14189                           ;main.c: 2611: RXF10SIDL = sidl;
 14190  002936  C06C  FD75         	movff	setFilter@sidl,3445	;volatile
 14191                           
 14192                           ;main.c: 2612: RXF10EIDH = eidh;
 14193  00293A  C06D  FD76         	movff	setFilter@eidh,3446	;volatile
 14194                           
 14195                           ;main.c: 2613: RXF10EIDL = eidl;
 14196  00293E  C06E  FD77         	movff	setFilter@eidl,3447	;volatile
 14197                           
 14198                           ;main.c: 2614: break;
 14199  002942  D050               	goto	l1159
 14200  002944                     l1154:
 14201                           
 14202                           ; BSR set to: 0
 14203                           ;main.c: 2617: RXF11SIDH = sidh;
 14204  002944  C06B  FD78         	movff	setFilter@sidh,3448	;volatile
 14205                           
 14206                           ;main.c: 2618: RXF11SIDL = sidl;
 14207  002948  C06C  FD79         	movff	setFilter@sidl,3449	;volatile
 14208                           
 14209                           ;main.c: 2619: RXF11EIDH = eidh;
 14210  00294C  C06D  FD7A         	movff	setFilter@eidh,3450	;volatile
 14211                           
 14212                           ;main.c: 2620: RXF11EIDL = eidl;
 14213  002950  C06E  FD7B         	movff	setFilter@eidl,3451	;volatile
 14214                           
 14215                           ;main.c: 2621: break;
 14216  002954  D047               	goto	l1159
 14217  002956                     l1155:
 14218                           
 14219                           ; BSR set to: 0
 14220                           ;main.c: 2624: RXF12SIDH = sidh;
 14221  002956  C06B  FD80         	movff	setFilter@sidh,3456	;volatile
 14222                           
 14223                           ;main.c: 2625: RXF12SIDL = sidl;
 14224  00295A  C06C  FD81         	movff	setFilter@sidl,3457	;volatile
 14225                           
 14226                           ;main.c: 2626: RXF12EIDH = eidh;
 14227  00295E  C06D  FD82         	movff	setFilter@eidh,3458	;volatile
 14228                           
 14229                           ;main.c: 2627: RXF12EIDL = eidl;
 14230  002962  C06E  FD83         	movff	setFilter@eidl,3459	;volatile
 14231                           
 14232                           ;main.c: 2628: break;
 14233  002966  D03E               	goto	l1159
 14234  002968                     l1156:
 14235                           
 14236                           ; BSR set to: 0
 14237                           ;main.c: 2631: RXF13SIDH = sidh;
 14238  002968  C06B  FD84         	movff	setFilter@sidh,3460	;volatile
 14239                           
 14240                           ;main.c: 2632: RXF13SIDL = sidl;
 14241  00296C  C06C  FD85         	movff	setFilter@sidl,3461	;volatile
 14242                           
 14243                           ;main.c: 2633: RXF13EIDH = eidh;
 14244  002970  C06D  FD86         	movff	setFilter@eidh,3462	;volatile
 14245                           
 14246                           ;main.c: 2634: RXF13EIDL = eidl;
 14247  002974  C06E  FD87         	movff	setFilter@eidl,3463	;volatile
 14248                           
 14249                           ;main.c: 2635: break;
 14250  002978  D035               	goto	l1159
 14251  00297A                     l1157:
 14252                           
 14253                           ; BSR set to: 0
 14254                           ;main.c: 2638: RXF14SIDH = sidh;
 14255  00297A  C06B  FD88         	movff	setFilter@sidh,3464	;volatile
 14256                           
 14257                           ;main.c: 2639: RXF14SIDL = sidl;
 14258  00297E  C06C  FD89         	movff	setFilter@sidl,3465	;volatile
 14259                           
 14260                           ;main.c: 2640: RXF14EIDH = eidh;
 14261  002982  C06D  FD8A         	movff	setFilter@eidh,3466	;volatile
 14262                           
 14263                           ;main.c: 2641: RXF14EIDL = eidl;
 14264  002986  C06E  FD8B         	movff	setFilter@eidl,3467	;volatile
 14265                           
 14266                           ;main.c: 2642: break;
 14267  00298A  D02C               	goto	l1159
 14268  00298C                     l1158:
 14269                           
 14270                           ; BSR set to: 0
 14271                           ;main.c: 2645: RXF15SIDH = sidh;
 14272  00298C  C06B  FD90         	movff	setFilter@sidh,3472	;volatile
 14273                           
 14274                           ;main.c: 2646: RXF15SIDL = sidl;
 14275  002990  C06C  FD91         	movff	setFilter@sidl,3473	;volatile
 14276                           
 14277                           ;main.c: 2647: RXF15EIDH = eidh;
 14278  002994  C06D  FD92         	movff	setFilter@eidh,3474	;volatile
 14279                           
 14280                           ;main.c: 2648: RXF15EIDL = eidl;
 14281  002998  C06E  FD93         	movff	setFilter@eidl,3475	;volatile
 14282                           
 14283                           ;main.c: 2649: break;
 14284  00299C  D023               	goto	l1159
 14285  00299E                     l11572:
 14286                           
 14287                           ; BSR set to: 0
 14288  00299E  516A               	movf	setFilter@filter& (0+255),w,b
 14289                           
 14290                           ; Switch size 1, requested type "space"
 14291                           ; Number of cases is 16, Range of values is 0 to 15
 14292                           ; switch strategies available:
 14293                           ; Name         Instructions Cycles
 14294                           ; simple_byte           49    25 (average)
 14295                           ;	Chosen strategy is simple_byte
 14296  0029A0  E101 D76D          	bz	l1142
 14297  0029A4  0A01               	xorlw	1	; case 1
 14298  0029A6  E101 D773          	bz	l1144
 14299  0029AA  0A03               	xorlw	3	; case 2
 14300  0029AC  E101 D779          	bz	l1145
 14301  0029B0  0A01               	xorlw	1	; case 3
 14302  0029B2  E080               	bz	l1146
 14303  0029B4  0A07               	xorlw	7	; case 4
 14304  0029B6  E087               	bz	l1147
 14305  0029B8  0A01               	xorlw	1	; case 5
 14306  0029BA  E08E               	bz	l1148
 14307  0029BC  0A03               	xorlw	3	; case 6
 14308  0029BE  E095               	bz	l1149
 14309  0029C0  0A01               	xorlw	1	; case 7
 14310  0029C2  E09C               	bz	l1150
 14311  0029C4  0A0F               	xorlw	15	; case 8
 14312  0029C6  E0A3               	bz	l1151
 14313  0029C8  0A01               	xorlw	1	; case 9
 14314  0029CA  E0AA               	bz	l1152
 14315  0029CC  0A03               	xorlw	3	; case 10
 14316  0029CE  E0B1               	bz	l1153
 14317  0029D0  0A01               	xorlw	1	; case 11
 14318  0029D2  E0B8               	bz	l1154
 14319  0029D4  0A07               	xorlw	7	; case 12
 14320  0029D6  E0BF               	bz	l1155
 14321  0029D8  0A01               	xorlw	1	; case 13
 14322  0029DA  E0C6               	bz	l1156
 14323  0029DC  0A03               	xorlw	3	; case 14
 14324  0029DE  E0CD               	bz	l1157
 14325  0029E0  0A01               	xorlw	1	; case 15
 14326  0029E2  E0D4               	bz	l1158
 14327  0029E4                     l1159:
 14328                           
 14329                           ; BSR set to: 0
 14330  0029E4  0012               	return	
 14331  0029E6                     __end_of_setFilter:
 14332                           	opt stack 0
 14333                           tblptru	equ	0xFF8
 14334                           tblptrh	equ	0xFF7
 14335                           tblptrl	equ	0xFF6
 14336                           tablat	equ	0xFF5
 14337                           prodh	equ	0xFF4
 14338                           prodl	equ	0xFF3
 14339                           intcon	equ	0xFF2
 14340                           indf0	equ	0xFEF
 14341                           postinc0	equ	0xFEE
 14342                           fsr0h	equ	0xFEA
 14343                           fsr0l	equ	0xFE9
 14344                           wreg	equ	0xFE8
 14345                           indf1	equ	0xFE7
 14346                           postinc1	equ	0xFE6
 14347                           postdec1	equ	0xFE5
 14348                           fsr1h	equ	0xFE2
 14349                           fsr1l	equ	0xFE1
 14350                           indf2	equ	0xFDF
 14351                           postinc2	equ	0xFDE
 14352                           postdec2	equ	0xFDD
 14353                           plusw2	equ	0xFDB
 14354                           fsr2h	equ	0xFDA
 14355                           fsr2l	equ	0xFD9
 14356                           status	equ	0xFD8
 14357                           
 14358 ;; *************** function _writeRegisterExtended *****************
 14359 ;; Defined at:
 14360 ;;		line 2092 in file "main.c"
 14361 ;; Parameters:    Size  Location     Type
 14362 ;;  nodeid          1    wreg     unsigned char 
 14363 ;;  page            2   86[BANK0 ] unsigned short 
 14364 ;;  reg             1   88[BANK0 ] unsigned char 
 14365 ;;  timeout         2   89[BANK0 ] unsigned short 
 14366 ;;  value           2   91[BANK0 ] PTR unsigned char 
 14367 ;;		 -> doModeVerbose@value_1180(1), 
 14368 ;; Auto vars:     Size  Location     Type
 14369 ;;  nodeid          1   97[BANK0 ] unsigned char 
 14370 ;; Return value:  Size  Location     Type
 14371 ;;                  1    wreg      enum E15660
 14372 ;; Registers used:
 14373 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14374 ;; Tracked objects:
 14375 ;;		On entry : F/2
 14376 ;;		On exit  : E/0
 14377 ;;		Unchanged: 0/0
 14378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14379 ;;      Params:         0       7       0       0       0       0       0
 14380 ;;      Locals:         0       1       0       0       0       0       0
 14381 ;;      Temps:          0       4       0       0       0       0       0
 14382 ;;      Totals:         0      12       0       0       0       0       0
 14383 ;;Total ram usage:       12 bytes
 14384 ;; Hardware stack levels used:    1
 14385 ;; Hardware stack levels required when called:    7
 14386 ;; This function calls:
 14387 ;;		_sendVSCPFrame
 14388 ;;		_getVSCPFrame
 14389 ;; This function is called by:
 14390 ;;		_doModeVerbose
 14391 ;; This function uses a non-reentrant model
 14392 ;;
 14393                           
 14394                           	psect	text21
 14395  00378E                     __ptext21:
 14396                           	opt stack 0
 14397  00378E                     _writeRegisterExtended:
 14398                           	opt stack 22
 14399                           
 14400                           ; BSR set to: 0
 14401                           ;incstack = 0
 14402                           ;incstack = 0
 14403                           ;writeRegisterExtended@nodeid stored from wreg
 14404  00378E  CFE8 F0C1          	movff	wreg,writeRegisterExtended@nodeid
 14405                           
 14406                           ; BSR set to: 2
 14407                           ;main.c: 2093: vscpData[ 0 ] = nodeid;
 14408  003792  C0C1  F1A4         	movff	writeRegisterExtended@nodeid,_vscpData
 14409                           
 14410                           ; BSR set to: 2
 14411                           ;main.c: 2094: vscpData[ 1 ] = page >> 8;
 14412  003796  0100               	movlb	0	; () banked
 14413  003798  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 14414  00379A  0101               	movlb	1	; () banked
 14415  00379C  6FA5               	movwf	(_vscpData+1)& (0+255),b
 14416                           
 14417                           ; BSR set to: 1
 14418                           ;main.c: 2095: vscpData[ 2 ] = page & 0xff;
 14419  00379E  C0B6  F1A6         	movff	writeRegisterExtended@page,_vscpData+2
 14420                           
 14421                           ; BSR set to: 1
 14422                           ;main.c: 2096: vscpData[ 3 ] = reg;
 14423  0037A2  C0B8  F1A7         	movff	writeRegisterExtended@reg,_vscpData+3
 14424                           
 14425                           ; BSR set to: 1
 14426                           ;main.c: 2097: vscpData[ 4 ] = *value;
 14427  0037A6  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14428  0037AA  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14429  0037AE  50DF               	movf	indf2,w,c
 14430  0037B0  6FA8               	movwf	(_vscpData+4)& (0+255),b
 14431                           
 14432                           ; BSR set to: 1
 14433                           ;main.c: 2099: if (sendVSCPFrame(0,
 14434                           ;main.c: 2100: 38,
 14435                           ;main.c: 2101: 0,
 14436                           ;main.c: 2102: 0,
 14437                           ;main.c: 2103: 5,
 14438                           ;main.c: 2104: vscpData)) {
 14439  0037B2  0100               	movlb	0	; () banked
 14440  0037B4  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 14441  0037B6  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 14442  0037B8  0E26               	movlw	38
 14443  0037BA  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 14444  0037BC  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 14445  0037BE  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 14446  0037C0  0E05               	movlw	5
 14447  0037C2  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14448  0037C4  0E01               	movlw	high _vscpData
 14449  0037C6  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 14450  0037C8  0EA4               	movlw	low _vscpData
 14451  0037CA  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14452  0037CC  EC26  F021         	call	_sendVSCPFrame	;wreg free
 14453  0037D0  0900               	iorlw	0
 14454  0037D2  E05E               	bz	l11472
 14455                           
 14456                           ; BSR set to: 0
 14457                           ;main.c: 2106: timekeeper = 0;
 14458  0037D4  6BE9               	clrf	_timekeeper& (0+255),b	;volatile
 14459  0037D6  6BEA               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 14460  0037D8  6BEB               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 14461  0037DA  6BEC               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 14462                           
 14463                           ;main.c: 2107: while (timekeeper < timeout) {
 14464  0037DC  D049               	goto	l11470
 14465  0037DE                     l999:
 14466                           
 14467                           ; BSR set to: 0
 14468  0037DE  0004               	clrwdt		;# 
 14469                           
 14470                           ;main.c: 2111: if (getVSCPFrame(&vscpClass,
 14471                           ;main.c: 2112: &vscpType,
 14472                           ;main.c: 2113: &vscpNodeId,
 14473                           ;main.c: 2114: &vscpPriority,
 14474                           ;main.c: 2115: &vscpSize,
 14475                           ;main.c: 2116: vscpData)) {
 14476  0037E0  0E01               	movlw	high _vscpClass
 14477  0037E2  0100               	movlb	0	; () banked
 14478  0037E4  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 14479  0037E6  0EAC               	movlw	low _vscpClass
 14480  0037E8  6F72               	movwf	?_getVSCPFrame& (0+255),b
 14481  0037EA  0E01               	movlw	high _vscpType
 14482  0037EC  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 14483  0037EE  0EB1               	movlw	low _vscpType
 14484  0037F0  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 14485  0037F2  0E01               	movlw	high _vscpNodeId
 14486  0037F4  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 14487  0037F6  0EAE               	movlw	low _vscpNodeId
 14488  0037F8  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 14489  0037FA  0E01               	movlw	high _vscpPriority
 14490  0037FC  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 14491  0037FE  0EAF               	movlw	low _vscpPriority
 14492  003800  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 14493  003802  0E01               	movlw	high _vscpSize
 14494  003804  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 14495  003806  0EB0               	movlw	low _vscpSize
 14496  003808  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 14497  00380A  0E01               	movlw	high _vscpData
 14498  00380C  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 14499  00380E  0EA4               	movlw	low _vscpData
 14500  003810  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 14501  003812  EC2E  F024         	call	_getVSCPFrame	;wreg free
 14502  003816  0900               	iorlw	0
 14503  003818  E02B               	bz	l11470
 14504                           
 14505                           ; BSR set to: 0
 14506                           ;main.c: 2118: if ((nodeid == vscpNodeId) &&
 14507                           ;main.c: 2119: (5 == vscpSize) &&
 14508                           ;main.c: 2120: (0 == vscpData[ 0 ]) &&
 14509                           ;main.c: 2121: ((page >> 8) == vscpData[ 1 ]) &&
 14510                           ;main.c: 2122: ((page & 0xff) == vscpData[ 2 ]) &&
 14511                           ;main.c: 2123: (reg == vscpData[ 3 ]) &&
 14512                           ;main.c: 2124: (*value == vscpData[ 4 ])) {
 14513  00381A  0101               	movlb	1	; () banked
 14514  00381C  51AE               	movf	_vscpNodeId& (0+255),w,b
 14515  00381E  0100               	movlb	0	; () banked
 14516  003820  63C1               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 14517  003822  D026               	goto	l11470
 14518                           
 14519                           ; BSR set to: 0
 14520  003824  0101               	movlb	1	; () banked
 14521  003826  51B0               	movf	_vscpSize& (0+255),w,b
 14522  003828  0A05               	xorlw	5
 14523  00382A  E122               	bnz	l11470
 14524                           
 14525                           ; BSR set to: 1
 14526  00382C  67A4               	tstfsz	_vscpData& (0+255),b
 14527  00382E  D020               	goto	l11470
 14528                           
 14529                           ; BSR set to: 1
 14530  003830  0100               	movlb	0	; () banked
 14531  003832  51B7               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 14532  003834  0101               	movlb	1	; () banked
 14533  003836  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 14534  003838  E11B               	bnz	l11470
 14535                           
 14536                           ; BSR set to: 1
 14537  00383A  0100               	movlb	0	; () banked
 14538  00383C  51B6               	movf	writeRegisterExtended@page& (0+255),w,b
 14539  00383E  EE21  F0A6         	lfsr	2,_vscpData+2
 14540  003842  62DF               	cpfseq	indf2,c
 14541  003844  D015               	goto	l11470
 14542                           
 14543                           ; BSR set to: 1
 14544  003846  51B8               	movf	writeRegisterExtended@reg& (0+255),w,b
 14545  003848  0101               	movlb	1	; () banked
 14546  00384A  EE21  F0A7         	lfsr	2,_vscpData+3
 14547  00384E  62DF               	cpfseq	indf2,c
 14548  003850  D00F               	goto	l11470
 14549                           
 14550                           ; BSR set to: 1
 14551  003852  51A8               	movf	(_vscpData+4)& (0+255),w,b
 14552  003854  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14553  003858  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14554  00385C  62DF               	cpfseq	indf2,c
 14555  00385E  D008               	goto	l11470
 14556                           
 14557                           ; BSR set to: 1
 14558                           ;main.c: 2125: *value = vscpData[ 1 ];
 14559  003860  C0BB  FFD9         	movff	writeRegisterExtended@value,fsr2l
 14560  003864  C0BC  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 14561  003868  C1A5  FFDF         	movff	_vscpData+1,indf2
 14562                           
 14563                           ; BSR set to: 1
 14564                           ;main.c: 2126: return 1;
 14565  00386C  0E01               	movlw	1
 14566  00386E  D011               	goto	l1002
 14567  003870                     l11470:
 14568  003870  0100               	movlb	0	; () banked
 14569  003872  51B9               	movf	writeRegisterExtended@timeout& (0+255),w,b
 14570  003874  6FBD               	movwf	??_writeRegisterExtended& (0+255),b
 14571  003876  51BA               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 14572  003878  6FBE               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 14573  00387A  6BBF               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 14574  00387C  6BC0               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 14575  00387E  51BD               	movf	??_writeRegisterExtended& (0+255),w,b
 14576  003880  5DE9               	subwf	_timekeeper& (0+255),w,b	;volatile
 14577  003882  51BE               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 14578  003884  59EA               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 14579  003886  51BF               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 14580  003888  59EB               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 14581  00388A  51C0               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 14582  00388C  59EC               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 14583  00388E  E3A7               	bnc	l999
 14584  003890                     l11472:
 14585                           
 14586                           ; BSR set to: 0
 14587                           ;main.c: 2127: }
 14588                           ;main.c: 2129: }
 14589                           ;main.c: 2131: }
 14590                           ;main.c: 2133: }
 14591                           ;main.c: 2135: return 0;
 14592  003890  0E00               	movlw	0
 14593  003892                     l1002:
 14594  003892  0012               	return	
 14595  003894                     __end_of_writeRegisterExtended:
 14596                           	opt stack 0
 14597                           tblptru	equ	0xFF8
 14598                           tblptrh	equ	0xFF7
 14599                           tblptrl	equ	0xFF6
 14600                           tablat	equ	0xFF5
 14601                           prodh	equ	0xFF4
 14602                           prodl	equ	0xFF3
 14603                           intcon	equ	0xFF2
 14604                           indf0	equ	0xFEF
 14605                           postinc0	equ	0xFEE
 14606                           fsr0h	equ	0xFEA
 14607                           fsr0l	equ	0xFE9
 14608                           wreg	equ	0xFE8
 14609                           indf1	equ	0xFE7
 14610                           postinc1	equ	0xFE6
 14611                           postdec1	equ	0xFE5
 14612                           fsr1h	equ	0xFE2
 14613                           fsr1l	equ	0xFE1
 14614                           indf2	equ	0xFDF
 14615                           postinc2	equ	0xFDE
 14616                           postdec2	equ	0xFDD
 14617                           plusw2	equ	0xFDB
 14618                           fsr2h	equ	0xFDA
 14619                           fsr2l	equ	0xFD9
 14620                           status	equ	0xFD8
 14621                           
 14622 ;; *************** function _printBinary *****************
 14623 ;; Defined at:
 14624 ;;		line 2179 in file "main.c"
 14625 ;; Parameters:    Size  Location     Type
 14626 ;;  value           1    wreg     unsigned char 
 14627 ;; Auto vars:     Size  Location     Type
 14628 ;;  value           1    3[BANK0 ] unsigned char 
 14629 ;;  i               2    4[BANK0 ] int 
 14630 ;; Return value:  Size  Location     Type
 14631 ;;		None               void
 14632 ;; Registers used:
 14633 ;;		wreg, status,2, status,0, cstack
 14634 ;; Tracked objects:
 14635 ;;		On entry : F/2
 14636 ;;		On exit  : F/0
 14637 ;;		Unchanged: 0/0
 14638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14639 ;;      Params:         0       0       0       0       0       0       0
 14640 ;;      Locals:         0       3       0       0       0       0       0
 14641 ;;      Temps:          0       2       0       0       0       0       0
 14642 ;;      Totals:         0       5       0       0       0       0       0
 14643 ;;Total ram usage:        5 bytes
 14644 ;; Hardware stack levels used:    1
 14645 ;; Hardware stack levels required when called:    4
 14646 ;; This function calls:
 14647 ;;		_WriteUSART
 14648 ;; This function is called by:
 14649 ;;		_doModeVerbose
 14650 ;; This function uses a non-reentrant model
 14651 ;;
 14652                           
 14653                           	psect	text22
 14654  004F7A                     __ptext22:
 14655                           	opt stack 0
 14656  004F7A                     _printBinary:
 14657                           	opt stack 25
 14658                           
 14659                           ;incstack = 0
 14660                           ;incstack = 0
 14661                           ;printBinary@value stored from wreg
 14662  004F7A  CFE8 F063          	movff	wreg,printBinary@value
 14663                           
 14664                           ; BSR set to: 2
 14665                           ;main.c: 2180: int i;
 14666                           ;main.c: 2182: for (i = 7; i >= 0; i--) {
 14667  004F7E  0100               	movlb	0	; () banked
 14668  004F80  6B65               	clrf	(printBinary@i+1)& (0+255),b
 14669  004F82  0E07               	movlw	7
 14670  004F84  6F64               	movwf	printBinary@i& (0+255),b
 14671  004F86                     l11422:
 14672                           
 14673                           ; BSR set to: 0
 14674                           ;main.c: 2183: if (value & (1 << i)) {
 14675  004F86  C064  F061         	movff	printBinary@i,??_printBinary
 14676  004F8A  0E01               	movlw	1
 14677  004F8C  6F62               	movwf	(??_printBinary+1)& (0+255),b
 14678  004F8E  2B61               	incf	??_printBinary& (0+255),f,b
 14679  004F90  D002               	goto	u14494
 14680  004F92                     u14495:
 14681  004F92  90D8               	bcf	status,0,c
 14682  004F94  3762               	rlcf	(??_printBinary+1)& (0+255),f,b
 14683  004F96                     u14494:
 14684  004F96  2F61               	decfsz	??_printBinary& (0+255),f,b
 14685  004F98  D7FC               	goto	u14495
 14686  004F9A  5162               	movf	(??_printBinary+1)& (0+255),w,b
 14687  004F9C  1563               	andwf	printBinary@value& (0+255),w,b
 14688  004F9E  E006               	bz	l1022
 14689  004FA0                     l1018:
 14690  004FA0  A2AC               	btfss	4012,1,c	;volatile
 14691  004FA2  D7FE               	goto	l1018
 14692                           
 14693                           ;main.c: 2185: WriteUSART('1');
 14694  004FA4  0E31               	movlw	49
 14695  004FA6  EC37  F02A         	call	_WriteUSART
 14696                           
 14697                           ;main.c: 2186: } else {
 14698  004FAA  D005               	goto	l11430
 14699  004FAC                     l1022:
 14700  004FAC  A2AC               	btfss	4012,1,c	;volatile
 14701  004FAE  D7FE               	goto	l1022
 14702                           
 14703                           ;main.c: 2188: WriteUSART('0');
 14704  004FB0  0E30               	movlw	48
 14705  004FB2  EC37  F02A         	call	_WriteUSART
 14706  004FB6                     l11430:
 14707  004FB6  0100               	movlb	0	; () banked
 14708  004FB8  0764               	decf	printBinary@i& (0+255),f,b
 14709  004FBA  A0D8               	btfss	status,0,c
 14710  004FBC  0765               	decf	(printBinary@i+1)& (0+255),f,b
 14711                           
 14712                           ; BSR set to: 0
 14713  004FBE  BF65               	btfsc	(printBinary@i+1)& (0+255),7,b
 14714                           
 14715                           ; BSR set to: 0
 14716  004FC0  0012               	return	
 14717  004FC2  D7E1               	goto	l11422
 14718  004FC4                     __end_of_printBinary:
 14719                           	opt stack 0
 14720                           tblptru	equ	0xFF8
 14721                           tblptrh	equ	0xFF7
 14722                           tblptrl	equ	0xFF6
 14723                           tablat	equ	0xFF5
 14724                           prodh	equ	0xFF4
 14725                           prodl	equ	0xFF3
 14726                           intcon	equ	0xFF2
 14727                           indf0	equ	0xFEF
 14728                           postinc0	equ	0xFEE
 14729                           fsr0h	equ	0xFEA
 14730                           fsr0l	equ	0xFE9
 14731                           wreg	equ	0xFE8
 14732                           indf1	equ	0xFE7
 14733                           postinc1	equ	0xFE6
 14734                           postdec1	equ	0xFE5
 14735                           fsr1h	equ	0xFE2
 14736                           fsr1l	equ	0xFE1
 14737                           indf2	equ	0xFDF
 14738                           postinc2	equ	0xFDE
 14739                           postdec2	equ	0xFDD
 14740                           plusw2	equ	0xFDB
 14741                           fsr2h	equ	0xFDA
 14742                           fsr2l	equ	0xFD9
 14743                           status	equ	0xFD8
 14744                           
 14745 ;; *************** function _readRegisterExtended *****************
 14746 ;; Defined at:
 14747 ;;		line 1991 in file "main.c"
 14748 ;; Parameters:    Size  Location     Type
 14749 ;;  nodeid          1    wreg     unsigned char 
 14750 ;;  page            2   86[BANK0 ] unsigned short 
 14751 ;;  reg             1   88[BANK0 ] unsigned char 
 14752 ;;  timeout         2   89[BANK0 ] unsigned short 
 14753 ;;  value           2   91[BANK0 ] PTR unsigned char 
 14754 ;;		 -> doModeVerbose@value(1), 
 14755 ;; Auto vars:     Size  Location     Type
 14756 ;;  nodeid          1   97[BANK0 ] unsigned char 
 14757 ;; Return value:  Size  Location     Type
 14758 ;;                  1    wreg      enum E15660
 14759 ;; Registers used:
 14760 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14761 ;; Tracked objects:
 14762 ;;		On entry : F/2
 14763 ;;		On exit  : E/0
 14764 ;;		Unchanged: 0/0
 14765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14766 ;;      Params:         0       7       0       0       0       0       0
 14767 ;;      Locals:         0       1       0       0       0       0       0
 14768 ;;      Temps:          0       4       0       0       0       0       0
 14769 ;;      Totals:         0      12       0       0       0       0       0
 14770 ;;Total ram usage:       12 bytes
 14771 ;; Hardware stack levels used:    1
 14772 ;; Hardware stack levels required when called:    7
 14773 ;; This function calls:
 14774 ;;		_sendVSCPFrame
 14775 ;;		_getVSCPFrame
 14776 ;; This function is called by:
 14777 ;;		_doModeVerbose
 14778 ;; This function uses a non-reentrant model
 14779 ;;
 14780                           
 14781                           	psect	text23
 14782  003A9E                     __ptext23:
 14783                           	opt stack 0
 14784  003A9E                     _readRegisterExtended:
 14785                           	opt stack 22
 14786                           
 14787                           ; BSR set to: 0
 14788                           ;incstack = 0
 14789                           ;incstack = 0
 14790                           ;readRegisterExtended@nodeid stored from wreg
 14791  003A9E  CFE8 F0C1          	movff	wreg,readRegisterExtended@nodeid
 14792                           
 14793                           ; BSR set to: 2
 14794                           ;main.c: 1992: vscpData[ 0 ] = nodeid;
 14795  003AA2  C0C1  F1A4         	movff	readRegisterExtended@nodeid,_vscpData
 14796                           
 14797                           ; BSR set to: 2
 14798                           ;main.c: 1993: vscpData[ 1 ] = page >> 8;
 14799  003AA6  0100               	movlb	0	; () banked
 14800  003AA8  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 14801  003AAA  0101               	movlb	1	; () banked
 14802  003AAC  6FA5               	movwf	(_vscpData+1)& (0+255),b
 14803                           
 14804                           ; BSR set to: 1
 14805                           ;main.c: 1994: vscpData[ 2 ] = page & 0xff;
 14806  003AAE  C0B6  F1A6         	movff	readRegisterExtended@page,_vscpData+2
 14807                           
 14808                           ; BSR set to: 1
 14809                           ;main.c: 1995: vscpData[ 3 ] = reg;
 14810  003AB2  C0B8  F1A7         	movff	readRegisterExtended@reg,_vscpData+3
 14811                           
 14812                           ; BSR set to: 1
 14813                           ;main.c: 1996: vscpData[ 4 ] = 1;
 14814  003AB6  0E01               	movlw	1
 14815  003AB8  6FA8               	movwf	(_vscpData+4)& (0+255),b
 14816                           
 14817                           ; BSR set to: 1
 14818                           ;main.c: 1998: if (sendVSCPFrame(0,
 14819                           ;main.c: 1999: 37,
 14820                           ;main.c: 2000: 0,
 14821                           ;main.c: 2001: 0,
 14822                           ;main.c: 2002: 5,
 14823                           ;main.c: 2003: vscpData)) {
 14824  003ABA  0100               	movlb	0	; () banked
 14825  003ABC  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 14826  003ABE  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 14827  003AC0  0E25               	movlw	37
 14828  003AC2  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 14829  003AC4  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 14830  003AC6  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 14831  003AC8  0E05               	movlw	5
 14832  003ACA  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 14833  003ACC  0E01               	movlw	high _vscpData
 14834  003ACE  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 14835  003AD0  0EA4               	movlw	low _vscpData
 14836  003AD2  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 14837  003AD4  EC26  F021         	call	_sendVSCPFrame	;wreg free
 14838  003AD8  0900               	iorlw	0
 14839  003ADA  E05D               	bz	l11062
 14840                           
 14841                           ; BSR set to: 0
 14842                           ;main.c: 2005: timekeeper = 0;
 14843  003ADC  6BE9               	clrf	_timekeeper& (0+255),b	;volatile
 14844  003ADE  6BEA               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 14845  003AE0  6BEB               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 14846  003AE2  6BEC               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 14847                           
 14848                           ;main.c: 2006: while (timekeeper < timeout) {
 14849  003AE4  D048               	goto	l11060
 14850  003AE6                     l981:
 14851                           
 14852                           ; BSR set to: 0
 14853  003AE6  0004               	clrwdt		;# 
 14854                           
 14855                           ;main.c: 2010: if (getVSCPFrame(&vscpClass,
 14856                           ;main.c: 2011: &vscpType,
 14857                           ;main.c: 2012: &vscpNodeId,
 14858                           ;main.c: 2013: &vscpPriority,
 14859                           ;main.c: 2014: &vscpSize,
 14860                           ;main.c: 2015: vscpData)) {
 14861  003AE8  0E01               	movlw	high _vscpClass
 14862  003AEA  0100               	movlb	0	; () banked
 14863  003AEC  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 14864  003AEE  0EAC               	movlw	low _vscpClass
 14865  003AF0  6F72               	movwf	?_getVSCPFrame& (0+255),b
 14866  003AF2  0E01               	movlw	high _vscpType
 14867  003AF4  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 14868  003AF6  0EB1               	movlw	low _vscpType
 14869  003AF8  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 14870  003AFA  0E01               	movlw	high _vscpNodeId
 14871  003AFC  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 14872  003AFE  0EAE               	movlw	low _vscpNodeId
 14873  003B00  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 14874  003B02  0E01               	movlw	high _vscpPriority
 14875  003B04  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 14876  003B06  0EAF               	movlw	low _vscpPriority
 14877  003B08  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 14878  003B0A  0E01               	movlw	high _vscpSize
 14879  003B0C  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 14880  003B0E  0EB0               	movlw	low _vscpSize
 14881  003B10  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 14882  003B12  0E01               	movlw	high _vscpData
 14883  003B14  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 14884  003B16  0EA4               	movlw	low _vscpData
 14885  003B18  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 14886  003B1A  EC2E  F024         	call	_getVSCPFrame	;wreg free
 14887  003B1E  0900               	iorlw	0
 14888  003B20  E02A               	bz	l11060
 14889                           
 14890                           ; BSR set to: 0
 14891                           ;main.c: 2016: if ((nodeid == vscpNodeId) &&
 14892                           ;main.c: 2017: (0 == vscpClass) &&
 14893                           ;main.c: 2018: (39 == vscpType) &&
 14894                           ;main.c: 2019: (5 == vscpSize) &&
 14895                           ;main.c: 2020: (0 == vscpData[ 0 ]) &&
 14896                           ;main.c: 2021: ((page >> 8) == vscpData[ 1 ]) &&
 14897                           ;main.c: 2022: ((page & 0xff) == vscpData[ 2 ]) &&
 14898                           ;main.c: 2023: (reg == vscpData[ 3 ])) {
 14899  003B22  0101               	movlb	1	; () banked
 14900  003B24  51AE               	movf	_vscpNodeId& (0+255),w,b
 14901  003B26  0100               	movlb	0	; () banked
 14902  003B28  63C1               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 14903  003B2A  D025               	goto	l11060
 14904                           
 14905                           ; BSR set to: 0
 14906  003B2C  0101               	movlb	1	; () banked
 14907  003B2E  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 14908  003B30  11AC               	iorwf	_vscpClass& (0+255),w,b
 14909  003B32  E121               	bnz	l11060
 14910                           
 14911                           ; BSR set to: 1
 14912  003B34  51B1               	movf	_vscpType& (0+255),w,b
 14913  003B36  0A27               	xorlw	39
 14914  003B38  E11E               	bnz	l11060
 14915                           
 14916                           ; BSR set to: 1
 14917  003B3A  51B0               	movf	_vscpSize& (0+255),w,b
 14918  003B3C  0A05               	xorlw	5
 14919  003B3E  E11B               	bnz	l11060
 14920                           
 14921                           ; BSR set to: 1
 14922  003B40  67A4               	tstfsz	_vscpData& (0+255),b
 14923  003B42  D019               	goto	l11060
 14924                           
 14925                           ; BSR set to: 1
 14926  003B44  0100               	movlb	0	; () banked
 14927  003B46  51B7               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 14928  003B48  0101               	movlb	1	; () banked
 14929  003B4A  19A5               	xorwf	(_vscpData+1)& (0+255),w,b
 14930  003B4C  E114               	bnz	l11060
 14931                           
 14932                           ; BSR set to: 1
 14933  003B4E  0100               	movlb	0	; () banked
 14934  003B50  51B6               	movf	readRegisterExtended@page& (0+255),w,b
 14935  003B52  EE21  F0A6         	lfsr	2,_vscpData+2
 14936  003B56  62DF               	cpfseq	indf2,c
 14937  003B58  D00E               	goto	l11060
 14938                           
 14939                           ; BSR set to: 1
 14940  003B5A  51B8               	movf	readRegisterExtended@reg& (0+255),w,b
 14941  003B5C  0101               	movlb	1	; () banked
 14942  003B5E  EE21  F0A7         	lfsr	2,_vscpData+3
 14943  003B62  62DF               	cpfseq	indf2,c
 14944  003B64  D008               	goto	l11060
 14945                           
 14946                           ; BSR set to: 1
 14947                           ;main.c: 2024: *value = vscpData[ 4 ];
 14948  003B66  C0BB  FFD9         	movff	readRegisterExtended@value,fsr2l
 14949  003B6A  C0BC  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 14950  003B6E  C1A8  FFDF         	movff	_vscpData+4,indf2
 14951                           
 14952                           ; BSR set to: 1
 14953                           ;main.c: 2025: return 1;
 14954  003B72  0E01               	movlw	1
 14955  003B74  D011               	goto	l984
 14956  003B76                     l11060:
 14957  003B76  0100               	movlb	0	; () banked
 14958  003B78  51B9               	movf	readRegisterExtended@timeout& (0+255),w,b
 14959  003B7A  6FBD               	movwf	??_readRegisterExtended& (0+255),b
 14960  003B7C  51BA               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 14961  003B7E  6FBE               	movwf	(??_readRegisterExtended+1)& (0+255),b
 14962  003B80  6BBF               	clrf	(??_readRegisterExtended+2)& (0+255),b
 14963  003B82  6BC0               	clrf	(??_readRegisterExtended+3)& (0+255),b
 14964  003B84  51BD               	movf	??_readRegisterExtended& (0+255),w,b
 14965  003B86  5DE9               	subwf	_timekeeper& (0+255),w,b	;volatile
 14966  003B88  51BE               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 14967  003B8A  59EA               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 14968  003B8C  51BF               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 14969  003B8E  59EB               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 14970  003B90  51C0               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 14971  003B92  59EC               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 14972  003B94  E3A8               	bnc	l981
 14973  003B96                     l11062:
 14974                           
 14975                           ; BSR set to: 0
 14976                           ;main.c: 2026: }
 14977                           ;main.c: 2027: }
 14978                           ;main.c: 2028: }
 14979                           ;main.c: 2029: }
 14980                           ;main.c: 2031: return 0;
 14981  003B96  0E00               	movlw	0
 14982  003B98                     l984:
 14983  003B98  0012               	return	
 14984  003B9A                     __end_of_readRegisterExtended:
 14985                           	opt stack 0
 14986                           tblptru	equ	0xFF8
 14987                           tblptrh	equ	0xFF7
 14988                           tblptrl	equ	0xFF6
 14989                           tablat	equ	0xFF5
 14990                           prodh	equ	0xFF4
 14991                           prodl	equ	0xFF3
 14992                           intcon	equ	0xFF2
 14993                           indf0	equ	0xFEF
 14994                           postinc0	equ	0xFEE
 14995                           fsr0h	equ	0xFEA
 14996                           fsr0l	equ	0xFE9
 14997                           wreg	equ	0xFE8
 14998                           indf1	equ	0xFE7
 14999                           postinc1	equ	0xFE6
 15000                           postdec1	equ	0xFE5
 15001                           fsr1h	equ	0xFE2
 15002                           fsr1l	equ	0xFE1
 15003                           indf2	equ	0xFDF
 15004                           postinc2	equ	0xFDE
 15005                           postdec2	equ	0xFDD
 15006                           plusw2	equ	0xFDB
 15007                           fsr2h	equ	0xFDA
 15008                           fsr2l	equ	0xFD9
 15009                           status	equ	0xFD8
 15010                           
 15011 ;; *************** function _strcpy *****************
 15012 ;; Defined at:
 15013 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 15014 ;; Parameters:    Size  Location     Type
 15015 ;;  to              2    0[BANK0 ] PTR unsigned char 
 15016 ;;		 -> cmdbuf(80), 
 15017 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 15018 ;;		 -> cmdbuf(80), 
 15019 ;; Auto vars:     Size  Location     Type
 15020 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 15021 ;;		 -> cmdbuf(80), 
 15022 ;; Return value:  Size  Location     Type
 15023 ;;                  2    0[BANK0 ] PTR unsigned char 
 15024 ;; Registers used:
 15025 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15026 ;; Tracked objects:
 15027 ;;		On entry : F/1
 15028 ;;		On exit  : E/0
 15029 ;;		Unchanged: 0/0
 15030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15031 ;;      Params:         0       4       0       0       0       0       0
 15032 ;;      Locals:         0       2       0       0       0       0       0
 15033 ;;      Temps:          0       0       0       0       0       0       0
 15034 ;;      Totals:         0       6       0       0       0       0       0
 15035 ;;Total ram usage:        6 bytes
 15036 ;; Hardware stack levels used:    1
 15037 ;; Hardware stack levels required when called:    3
 15038 ;; This function calls:
 15039 ;;		Nothing
 15040 ;; This function is called by:
 15041 ;;		_doModeVerbose
 15042 ;; This function uses a non-reentrant model
 15043 ;;
 15044                           
 15045                           	psect	text24
 15046  005330                     __ptext24:
 15047                           	opt stack 0
 15048  005330                     _strcpy:
 15049                           	opt stack 26
 15050                           
 15051                           ; BSR set to: 1
 15052                           
 15053                           ;incstack = 0
 15054                           ;incstack = 0
 15055  005330  C060  F064         	movff	strcpy@to,strcpy@cp
 15056  005334  C061  F065         	movff	strcpy@to+1,strcpy@cp+1
 15057  005338  D005               	goto	l11014
 15058  00533A                     l11012:
 15059  00533A  0100               	movlb	0	; () banked
 15060  00533C  4B64               	infsnz	strcpy@cp& (0+255),f,b
 15061  00533E  2B65               	incf	(strcpy@cp+1)& (0+255),f,b
 15062  005340  4B62               	infsnz	strcpy@from& (0+255),f,b
 15063  005342  2B63               	incf	(strcpy@from+1)& (0+255),f,b
 15064  005344                     l11014:
 15065  005344  C062  FFD9         	movff	strcpy@from,fsr2l
 15066  005348  C063  FFDA         	movff	strcpy@from+1,fsr2h
 15067  00534C  C064  FFE1         	movff	strcpy@cp,fsr1l
 15068  005350  C065  FFE2         	movff	strcpy@cp+1,fsr1h
 15069  005354  CFDF FFE7          	movff	indf2,indf1
 15070  005358  50E7               	movf	indf1,w,c
 15071  00535A  B4D8               	btfsc	status,2,c
 15072  00535C  0012               	return	
 15073  00535E  D7ED               	goto	l11012
 15074  005360                     __end_of_strcpy:
 15075                           	opt stack 0
 15076                           tblptru	equ	0xFF8
 15077                           tblptrh	equ	0xFF7
 15078                           tblptrl	equ	0xFF6
 15079                           tablat	equ	0xFF5
 15080                           prodh	equ	0xFF4
 15081                           prodl	equ	0xFF3
 15082                           intcon	equ	0xFF2
 15083                           indf0	equ	0xFEF
 15084                           postinc0	equ	0xFEE
 15085                           fsr0h	equ	0xFEA
 15086                           fsr0l	equ	0xFE9
 15087                           wreg	equ	0xFE8
 15088                           indf1	equ	0xFE7
 15089                           postinc1	equ	0xFE6
 15090                           postdec1	equ	0xFE5
 15091                           fsr1h	equ	0xFE2
 15092                           fsr1l	equ	0xFE1
 15093                           indf2	equ	0xFDF
 15094                           postinc2	equ	0xFDE
 15095                           postdec2	equ	0xFDD
 15096                           plusw2	equ	0xFDB
 15097                           fsr2h	equ	0xFDA
 15098                           fsr2l	equ	0xFD9
 15099                           status	equ	0xFD8
 15100                           
 15101 ;; *************** function _findNodes *****************
 15102 ;; Defined at:
 15103 ;;		line 2330 in file "main.c"
 15104 ;; Parameters:    Size  Location     Type
 15105 ;;		None
 15106 ;; Auto vars:     Size  Location     Type
 15107 ;;  i               1  105[BANK0 ] unsigned char 
 15108 ;;  value           1  104[BANK0 ] unsigned char 
 15109 ;;  nFound          1  103[BANK0 ] unsigned char 
 15110 ;; Return value:  Size  Location     Type
 15111 ;;		None               void
 15112 ;; Registers used:
 15113 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15114 ;; Tracked objects:
 15115 ;;		On entry : F/1
 15116 ;;		On exit  : 0/0
 15117 ;;		Unchanged: 0/0
 15118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15119 ;;      Params:         0       0       0       0       0       0       0
 15120 ;;      Locals:         0       5       0       0       0       0       0
 15121 ;;      Temps:          0       0       0       0       0       0       0
 15122 ;;      Totals:         0       5       0       0       0       0       0
 15123 ;;Total ram usage:        5 bytes
 15124 ;; Hardware stack levels used:    1
 15125 ;; Hardware stack levels required when called:    9
 15126 ;; This function calls:
 15127 ;;		_putsUSART
 15128 ;;		_printNodeFirmwareVersion
 15129 ;;		_printGUID
 15130 ;;		_printMDF
 15131 ;;		_itoa
 15132 ;;		_readRegister
 15133 ;; This function is called by:
 15134 ;;		_doModeVerbose
 15135 ;; This function uses a non-reentrant model
 15136 ;;
 15137                           
 15138                           	psect	text25
 15139  003B9A                     __ptext25:
 15140                           	opt stack 0
 15141  003B9A                     _findNodes:
 15142                           	opt stack 20
 15143                           
 15144                           ; BSR set to: 1
 15145                           ;main.c: 2331: uint8_t nFound = 0;
 15146                           
 15147                           ;incstack = 0
 15148                           ;incstack = 0
 15149  003B9A  0100               	movlb	0	; () banked
 15150  003B9C  6BC7               	clrf	findNodes@nFound& (0+255),b
 15151                           
 15152                           ; BSR set to: 0
 15153                           ;main.c: 2332: uint8_t i;
 15154                           ;main.c: 2333: uint8_t value;
 15155                           ;main.c: 2335: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 15156  003B9E  0E71               	movlw	high STR_229
 15157  003BA0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15158  003BA2  0E77               	movlw	low STR_229
 15159  003BA4  6F61               	movwf	?_putsUSART& (0+255),b
 15160  003BA6  EC6A  F027         	call	_putsUSART	;wreg free
 15161                           
 15162                           ;main.c: 2337: for (i = 1; i != 0; i++) {
 15163  003BAA  0E01               	movlw	1
 15164  003BAC  0100               	movlb	0	; () banked
 15165  003BAE  6FC9               	movwf	findNodes@i& (0+255),b
 15166  003BB0                     l1083:
 15167                           
 15168                           ; BSR set to: 0
 15169  003BB0  0004               	clrwdt		;# 
 15170                           
 15171                           ;main.c: 2341: if (readRegister(i,
 15172                           ;main.c: 2342: 0xE0,
 15173                           ;main.c: 2343: rwtimeout,
 15174                           ;main.c: 2344: &value)) {
 15175  003BB2  0EE0               	movlw	224
 15176  003BB4  0100               	movlb	0	; () banked
 15177  003BB6  6FB6               	movwf	?_readRegister& (0+255),b
 15178  003BB8  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 15179  003BBC  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 15180  003BBE  0EC8               	movlw	low findNodes@value
 15181  003BC0  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 15182  003BC2  51C9               	movf	findNodes@i& (0+255),w,b
 15183  003BC4  ECF9  F01F         	call	_readRegister
 15184  003BC8  0900               	iorlw	0
 15185  003BCA  E043               	bz	l11000
 15186                           
 15187                           ;main.c: 2345: putsUSART((char *) "Node found with node id = ");
 15188  003BCC  0E7B               	movlw	high STR_230
 15189  003BCE  0100               	movlb	0	; () banked
 15190  003BD0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15191  003BD2  0E9A               	movlw	low STR_230
 15192  003BD4  6F61               	movwf	?_putsUSART& (0+255),b
 15193  003BD6  EC6A  F027         	call	_putsUSART	;wreg free
 15194                           
 15195                           ;main.c: 2346: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 15196  003BDA  0101               	movlb	1	; () banked
 15197  003BDC  6700               	tstfsz	_bHex& (0+255),b
 15198  003BDE  D004               	goto	l10982
 15199                           
 15200                           ; BSR set to: 1
 15201  003BE0  0100               	movlb	0	; () banked
 15202  003BE2  6BC6               	clrf	(_findNodes$1473+1)& (0+255),b
 15203  003BE4  0E0A               	movlw	10
 15204  003BE6  D003               	goto	L12
 15205  003BE8                     l10982:
 15206                           
 15207                           ; BSR set to: 1
 15208  003BE8  0100               	movlb	0	; () banked
 15209  003BEA  6BC6               	clrf	(_findNodes$1473+1)& (0+255),b
 15210  003BEC  0E10               	movlw	16
 15211  003BEE                     L12:
 15212  003BEE  6FC5               	movwf	_findNodes$1473& (0+255),b
 15213                           
 15214                           ; BSR set to: 0
 15215  003BF0  0E01               	movlw	high _wrkbuf
 15216  003BF2  0100               	movlb	0	; () banked
 15217  003BF4  6F71               	movwf	(?_itoa+1)& (0+255),b
 15218  003BF6  0E54               	movlw	low _wrkbuf
 15219  003BF8  6F70               	movwf	?_itoa& (0+255),b
 15220  003BFA  C1AE  F072         	movff	_vscpNodeId,?_itoa+2
 15221  003BFE  6B73               	clrf	(?_itoa+3)& (0+255),b
 15222  003C00  C0C5  F074         	movff	_findNodes$1473,?_itoa+4
 15223  003C04  C0C6  F075         	movff	_findNodes$1473+1,?_itoa+5
 15224  003C08  EC48  F029         	call	_itoa	;wreg free
 15225                           
 15226                           ; BSR set to: 0
 15227                           ;main.c: 2347: putsUSART(wrkbuf);
 15228  003C0C  0E01               	movlw	high _wrkbuf
 15229  003C0E  0100               	movlb	0	; () banked
 15230  003C10  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15231  003C12  0E54               	movlw	low _wrkbuf
 15232  003C14  6F61               	movwf	?_putsUSART& (0+255),b
 15233  003C16  EC6A  F027         	call	_putsUSART	;wreg free
 15234                           
 15235                           ;main.c: 2348: putsUSART((char *) "\r\n");
 15236  003C1A  0E74               	movlw	high (STR_188+50)
 15237  003C1C  0100               	movlb	0	; () banked
 15238  003C1E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15239  003C20  0EAE               	movlw	low (STR_188+50)
 15240  003C22  6F61               	movwf	?_putsUSART& (0+255),b
 15241  003C24  EC6A  F027         	call	_putsUSART	;wreg free
 15242                           
 15243                           ;main.c: 2349: printNodeFirmwareVersion(i);
 15244  003C28  0100               	movlb	0	; () banked
 15245  003C2A  51C9               	movf	findNodes@i& (0+255),w,b
 15246  003C2C  EC91  F01F         	call	_printNodeFirmwareVersion
 15247                           
 15248                           ;main.c: 2350: printGUID(i);
 15249  003C30  0100               	movlb	0	; () banked
 15250  003C32  51C9               	movf	findNodes@i& (0+255),w,b
 15251  003C34  ECCD  F01C         	call	_printGUID
 15252                           
 15253                           ;main.c: 2351: printMDF(i);
 15254  003C38  0100               	movlb	0	; () banked
 15255  003C3A  51C9               	movf	findNodes@i& (0+255),w,b
 15256  003C3C  EC0E  F023         	call	_printMDF
 15257                           
 15258                           ;main.c: 2352: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 15259  003C40  0E71               	movlw	high STR_229
 15260  003C42  0100               	movlb	0	; () banked
 15261  003C44  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15262  003C46  0E77               	movlw	low STR_229
 15263  003C48  6F61               	movwf	?_putsUSART& (0+255),b
 15264  003C4A  EC6A  F027         	call	_putsUSART	;wreg free
 15265                           
 15266                           ;main.c: 2353: nFound++;
 15267  003C4E  0100               	movlb	0	; () banked
 15268  003C50  2BC7               	incf	findNodes@nFound& (0+255),f,b
 15269  003C52                     l11000:
 15270  003C52  0100               	movlb	0	; () banked
 15271  003C54  2BC9               	incf	findNodes@i& (0+255),f,b
 15272                           
 15273                           ; BSR set to: 0
 15274  003C56  67C9               	tstfsz	findNodes@i& (0+255),b
 15275  003C58  D7AB               	goto	l1083
 15276                           
 15277                           ; BSR set to: 0
 15278                           ;main.c: 2354: }
 15279                           ;main.c: 2356: }
 15280                           ;main.c: 2358: itoa(wrkbuf, nFound, 10);
 15281  003C5A  0E01               	movlw	high _wrkbuf
 15282  003C5C  6F71               	movwf	(?_itoa+1)& (0+255),b
 15283  003C5E  0E54               	movlw	low _wrkbuf
 15284  003C60  6F70               	movwf	?_itoa& (0+255),b
 15285  003C62  C0C7  F072         	movff	findNodes@nFound,?_itoa+2
 15286  003C66  6B73               	clrf	(?_itoa+3)& (0+255),b
 15287  003C68  6B75               	clrf	(?_itoa+5)& (0+255),b
 15288  003C6A  0E0A               	movlw	10
 15289  003C6C  6F74               	movwf	(?_itoa+4)& (0+255),b
 15290  003C6E  EC48  F029         	call	_itoa	;wreg free
 15291                           
 15292                           ; BSR set to: 0
 15293                           ;main.c: 2359: putsUSART(wrkbuf);
 15294  003C72  0E01               	movlw	high _wrkbuf
 15295  003C74  0100               	movlb	0	; () banked
 15296  003C76  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15297  003C78  0E54               	movlw	low _wrkbuf
 15298  003C7A  6F61               	movwf	?_putsUSART& (0+255),b
 15299  003C7C  EC6A  F027         	call	_putsUSART	;wreg free
 15300                           
 15301                           ;main.c: 2360: putsUSART((char *) " nodes found\r\n");
 15302  003C80  0E7E               	movlw	high STR_233
 15303  003C82  0100               	movlb	0	; () banked
 15304  003C84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15305  003C86  0E4F               	movlw	low STR_233
 15306  003C88  6F61               	movwf	?_putsUSART& (0+255),b
 15307  003C8A  EF6A  F027         	goto	_putsUSART	;wreg free
 15308  003C8E                     __end_of_findNodes:
 15309                           	opt stack 0
 15310                           tblptru	equ	0xFF8
 15311                           tblptrh	equ	0xFF7
 15312                           tblptrl	equ	0xFF6
 15313                           tablat	equ	0xFF5
 15314                           prodh	equ	0xFF4
 15315                           prodl	equ	0xFF3
 15316                           intcon	equ	0xFF2
 15317                           indf0	equ	0xFEF
 15318                           postinc0	equ	0xFEE
 15319                           fsr0h	equ	0xFEA
 15320                           fsr0l	equ	0xFE9
 15321                           wreg	equ	0xFE8
 15322                           indf1	equ	0xFE7
 15323                           postinc1	equ	0xFE6
 15324                           postdec1	equ	0xFE5
 15325                           fsr1h	equ	0xFE2
 15326                           fsr1l	equ	0xFE1
 15327                           indf2	equ	0xFDF
 15328                           postinc2	equ	0xFDE
 15329                           postdec2	equ	0xFDD
 15330                           plusw2	equ	0xFDB
 15331                           fsr2h	equ	0xFDA
 15332                           fsr2l	equ	0xFD9
 15333                           status	equ	0xFD8
 15334                           
 15335 ;; *************** function _printMDF *****************
 15336 ;; Defined at:
 15337 ;;		line 2411 in file "main.c"
 15338 ;; Parameters:    Size  Location     Type
 15339 ;;  nodeid          1    wreg     unsigned char 
 15340 ;; Auto vars:     Size  Location     Type
 15341 ;;  nodeid          1   95[BANK0 ] unsigned char 
 15342 ;;  p               2   97[BANK0 ] PTR unsigned char 
 15343 ;;		 -> wrkbuf(80), 
 15344 ;;  i               1   99[BANK0 ] unsigned char 
 15345 ;;  value           1   96[BANK0 ] unsigned char 
 15346 ;; Return value:  Size  Location     Type
 15347 ;;		None               void
 15348 ;; Registers used:
 15349 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15350 ;; Tracked objects:
 15351 ;;		On entry : D/2
 15352 ;;		On exit  : 0/0
 15353 ;;		Unchanged: 0/0
 15354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15355 ;;      Params:         0       0       0       0       0       0       0
 15356 ;;      Locals:         0       5       0       0       0       0       0
 15357 ;;      Temps:          0       0       0       0       0       0       0
 15358 ;;      Totals:         0       5       0       0       0       0       0
 15359 ;;Total ram usage:        5 bytes
 15360 ;; Hardware stack levels used:    1
 15361 ;; Hardware stack levels required when called:    8
 15362 ;; This function calls:
 15363 ;;		_putsUSART
 15364 ;;		_memset
 15365 ;;		_readRegister
 15366 ;; This function is called by:
 15367 ;;		_doModeVerbose
 15368 ;;		_findNodes
 15369 ;; This function uses a non-reentrant model
 15370 ;;
 15371                           
 15372                           	psect	text26
 15373  00461C                     __ptext26:
 15374                           	opt stack 0
 15375  00461C                     _printMDF:
 15376                           	opt stack 21
 15377                           
 15378                           ;incstack = 0
 15379                           ;incstack = 0
 15380                           ;printMDF@nodeid stored from wreg
 15381  00461C  CFE8 F0BF          	movff	wreg,printMDF@nodeid
 15382                           
 15383                           ;main.c: 2412: uint8_t i;
 15384                           ;main.c: 2413: uint8_t value;
 15385                           ;main.c: 2414: char *p = wrkbuf;
 15386  004620  0E01               	movlw	high _wrkbuf
 15387  004622  0100               	movlb	0	; () banked
 15388  004624  6FC2               	movwf	(printMDF@p+1)& (0+255),b
 15389  004626  0E54               	movlw	low _wrkbuf
 15390  004628  6FC1               	movwf	printMDF@p& (0+255),b
 15391                           
 15392                           ; BSR set to: 0
 15393                           ;main.c: 2415: memset(wrkbuf, 0, sizeof (wrkbuf));
 15394  00462A  0E01               	movlw	high _wrkbuf
 15395  00462C  6F61               	movwf	(?_memset+1)& (0+255),b
 15396  00462E  0E54               	movlw	low _wrkbuf
 15397  004630  6F60               	movwf	?_memset& (0+255),b
 15398  004632  6B63               	clrf	(?_memset+3)& (0+255),b
 15399  004634  6B62               	clrf	(?_memset+2)& (0+255),b
 15400  004636  6B65               	clrf	(?_memset+5)& (0+255),b
 15401  004638  0E50               	movlw	80
 15402  00463A  6F64               	movwf	(?_memset+4)& (0+255),b
 15403  00463C  ECC7  F029         	call	_memset	;wreg free
 15404                           
 15405                           ; BSR set to: 0
 15406                           ;main.c: 2416: putsUSART((char *) "MDF = http://");
 15407  004640  0E7E               	movlw	high STR_239
 15408  004642  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15409  004644  0E6D               	movlw	low STR_239
 15410  004646  6F61               	movwf	?_putsUSART& (0+255),b
 15411  004648  EC6A  F027         	call	_putsUSART	;wreg free
 15412                           
 15413                           ;main.c: 2418: for (i = 0; i < 32; i++) {
 15414  00464C  0100               	movlb	0	; () banked
 15415  00464E  6BC3               	clrf	printMDF@i& (0+255),b
 15416  004650                     l11548:
 15417                           
 15418                           ; BSR set to: 0
 15419                           ;main.c: 2419: if (readRegister(nodeid,
 15420                           ;main.c: 2420: 0xE0 + i,
 15421                           ;main.c: 2421: rwtimeout,
 15422                           ;main.c: 2422: &value)) {
 15423  004650  51C3               	movf	printMDF@i& (0+255),w,b
 15424  004652  0FE0               	addlw	224
 15425  004654  6FB6               	movwf	?_readRegister& (0+255),b
 15426  004656  0100               	movlb	0	; () banked
 15427  004658  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 15428  00465C  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 15429  00465E  0EC0               	movlw	low printMDF@value
 15430  004660  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 15431  004662  51BF               	movf	printMDF@nodeid& (0+255),w,b
 15432  004664  ECF9  F01F         	call	_readRegister
 15433  004668  0900               	iorlw	0
 15434  00466A  E00A               	bz	l11554
 15435                           
 15436                           ;main.c: 2423: *p = value;
 15437  00466C  C0C1  FFD9         	movff	printMDF@p,fsr2l
 15438  004670  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 15439  004674  C0C0  FFDF         	movff	printMDF@value,indf2
 15440  004678                     l11552:
 15441                           
 15442                           ;main.c: 2424: p++;
 15443  004678  0100               	movlb	0	; () banked
 15444  00467A  4BC1               	infsnz	printMDF@p& (0+255),f,b
 15445  00467C  2BC2               	incf	(printMDF@p+1)& (0+255),f,b
 15446                           
 15447                           ;main.c: 2426: }
 15448  00467E  D007               	goto	l11558
 15449  004680                     l11554:
 15450                           
 15451                           ;main.c: 2427: else {
 15452                           ;main.c: 2428: *p = '?';
 15453  004680  C0C1  FFD9         	movff	printMDF@p,fsr2l
 15454  004684  C0C2  FFDA         	movff	printMDF@p+1,fsr2h
 15455  004688  0E3F               	movlw	63
 15456  00468A  6EDF               	movwf	indf2,c
 15457  00468C  D7F5               	goto	l11552
 15458  00468E                     l11558:
 15459                           
 15460                           ; BSR set to: 0
 15461  00468E  2BC3               	incf	printMDF@i& (0+255),f,b
 15462                           
 15463                           ; BSR set to: 0
 15464  004690  0E1F               	movlw	31
 15465  004692  65C3               	cpfsgt	printMDF@i& (0+255),b
 15466  004694  D7DD               	goto	l11548
 15467                           
 15468                           ; BSR set to: 0
 15469                           ;main.c: 2430: }
 15470                           ;main.c: 2431: }
 15471                           ;main.c: 2433: putsUSART(wrkbuf);
 15472  004696  0E01               	movlw	high _wrkbuf
 15473  004698  0100               	movlb	0	; () banked
 15474  00469A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15475  00469C  0E54               	movlw	low _wrkbuf
 15476  00469E  6F61               	movwf	?_putsUSART& (0+255),b
 15477  0046A0  EC6A  F027         	call	_putsUSART	;wreg free
 15478                           
 15479                           ;main.c: 2434: putsUSART((char *) "\r\n");
 15480  0046A4  0E74               	movlw	high (STR_188+50)
 15481  0046A6  0100               	movlb	0	; () banked
 15482  0046A8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15483  0046AA  0EAE               	movlw	low (STR_188+50)
 15484  0046AC  6F61               	movwf	?_putsUSART& (0+255),b
 15485  0046AE  EF6A  F027         	goto	_putsUSART	;wreg free
 15486  0046B2                     __end_of_printMDF:
 15487                           	opt stack 0
 15488                           tblptru	equ	0xFF8
 15489                           tblptrh	equ	0xFF7
 15490                           tblptrl	equ	0xFF6
 15491                           tablat	equ	0xFF5
 15492                           prodh	equ	0xFF4
 15493                           prodl	equ	0xFF3
 15494                           intcon	equ	0xFF2
 15495                           indf0	equ	0xFEF
 15496                           postinc0	equ	0xFEE
 15497                           fsr0h	equ	0xFEA
 15498                           fsr0l	equ	0xFE9
 15499                           wreg	equ	0xFE8
 15500                           indf1	equ	0xFE7
 15501                           postinc1	equ	0xFE6
 15502                           postdec1	equ	0xFE5
 15503                           fsr1h	equ	0xFE2
 15504                           fsr1l	equ	0xFE1
 15505                           indf2	equ	0xFDF
 15506                           postinc2	equ	0xFDE
 15507                           postdec2	equ	0xFDD
 15508                           plusw2	equ	0xFDB
 15509                           fsr2h	equ	0xFDA
 15510                           fsr2l	equ	0xFD9
 15511                           status	equ	0xFD8
 15512                           
 15513 ;; *************** function _printGUID *****************
 15514 ;; Defined at:
 15515 ;;		line 2370 in file "main.c"
 15516 ;; Parameters:    Size  Location     Type
 15517 ;;  nodeid          1    wreg     unsigned char 
 15518 ;; Auto vars:     Size  Location     Type
 15519 ;;  nodeid          1   95[BANK0 ] unsigned char 
 15520 ;;  buf             3   96[BANK0 ] unsigned char [3]
 15521 ;;  i               1  100[BANK0 ] unsigned char 
 15522 ;;  value           1   99[BANK0 ] unsigned char 
 15523 ;; Return value:  Size  Location     Type
 15524 ;;		None               void
 15525 ;; Registers used:
 15526 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15527 ;; Tracked objects:
 15528 ;;		On entry : D/2
 15529 ;;		On exit  : 0/0
 15530 ;;		Unchanged: 0/0
 15531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15532 ;;      Params:         0       0       0       0       0       0       0
 15533 ;;      Locals:         0       6       0       0       0       0       0
 15534 ;;      Temps:          0       0       0       0       0       0       0
 15535 ;;      Totals:         0       6       0       0       0       0       0
 15536 ;;Total ram usage:        6 bytes
 15537 ;; Hardware stack levels used:    1
 15538 ;; Hardware stack levels required when called:    8
 15539 ;; This function calls:
 15540 ;;		_putsUSART
 15541 ;;		_memset
 15542 ;;		_strlen
 15543 ;;		_itoa
 15544 ;;		_readRegister
 15545 ;;		_strcat
 15546 ;; This function is called by:
 15547 ;;		_doModeVerbose
 15548 ;;		_findNodes
 15549 ;; This function uses a non-reentrant model
 15550 ;;
 15551                           
 15552                           	psect	text27
 15553  00399A                     __ptext27:
 15554                           	opt stack 0
 15555  00399A                     _printGUID:
 15556                           	opt stack 21
 15557                           
 15558                           ;incstack = 0
 15559                           ;incstack = 0
 15560                           ;printGUID@nodeid stored from wreg
 15561  00399A  CFE8 F0BF          	movff	wreg,printGUID@nodeid
 15562                           
 15563                           ;main.c: 2371: uint8_t i;
 15564                           ;main.c: 2372: uint8_t value;
 15565                           ;main.c: 2373: char buf[3];
 15566                           ;main.c: 2375: memset(wrkbuf, 0, sizeof (wrkbuf));
 15567  00399E  0E01               	movlw	high _wrkbuf
 15568  0039A0  0100               	movlb	0	; () banked
 15569  0039A2  6F61               	movwf	(?_memset+1)& (0+255),b
 15570  0039A4  0E54               	movlw	low _wrkbuf
 15571  0039A6  6F60               	movwf	?_memset& (0+255),b
 15572  0039A8  6B63               	clrf	(?_memset+3)& (0+255),b
 15573  0039AA  6B62               	clrf	(?_memset+2)& (0+255),b
 15574  0039AC  6B65               	clrf	(?_memset+5)& (0+255),b
 15575  0039AE  0E50               	movlw	80
 15576  0039B0  6F64               	movwf	(?_memset+4)& (0+255),b
 15577  0039B2  ECC7  F029         	call	_memset	;wreg free
 15578                           
 15579                           ; BSR set to: 0
 15580                           ;main.c: 2376: putsUSART((char *) "GUID = ");
 15581  0039B6  0E7E               	movlw	high STR_234
 15582  0039B8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15583  0039BA  0EE6               	movlw	low STR_234
 15584  0039BC  6F61               	movwf	?_putsUSART& (0+255),b
 15585  0039BE  EC6A  F027         	call	_putsUSART	;wreg free
 15586                           
 15587                           ;main.c: 2378: for (i = 0; i < 16; i++) {
 15588  0039C2  0100               	movlb	0	; () banked
 15589  0039C4  6BC4               	clrf	printGUID@i& (0+255),b
 15590  0039C6                     l11514:
 15591                           
 15592                           ; BSR set to: 0
 15593                           ;main.c: 2379: if (readRegister(nodeid,
 15594                           ;main.c: 2380: 0xD0 + i,
 15595                           ;main.c: 2381: rwtimeout,
 15596                           ;main.c: 2382: &value)) {
 15597  0039C6  51C4               	movf	printGUID@i& (0+255),w,b
 15598  0039C8  0FD0               	addlw	208
 15599  0039CA  6FB6               	movwf	?_readRegister& (0+255),b
 15600  0039CC  0100               	movlb	0	; () banked
 15601  0039CE  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 15602  0039D2  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 15603  0039D4  0EC3               	movlw	low printGUID@value
 15604  0039D6  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 15605  0039D8  51BF               	movf	printGUID@nodeid& (0+255),w,b
 15606  0039DA  ECF9  F01F         	call	_readRegister
 15607  0039DE  0900               	iorlw	0
 15608  0039E0  E029               	bz	l11524
 15609                           
 15610                           ;main.c: 2383: itoa(buf, value, 16);
 15611  0039E2  0100               	movlb	0	; () banked
 15612  0039E4  0E00               	movlw	high printGUID@buf
 15613  0039E6  6F71               	movwf	(?_itoa+1)& (0+255),b
 15614  0039E8  0EC0               	movlw	low printGUID@buf
 15615  0039EA  6F70               	movwf	?_itoa& (0+255),b
 15616  0039EC  C0C3  F072         	movff	printGUID@value,?_itoa+2
 15617  0039F0  6B73               	clrf	(?_itoa+3)& (0+255),b
 15618  0039F2  6B75               	clrf	(?_itoa+5)& (0+255),b
 15619  0039F4  0E10               	movlw	16
 15620  0039F6  6F74               	movwf	(?_itoa+4)& (0+255),b
 15621  0039F8  EC48  F029         	call	_itoa	;wreg free
 15622                           
 15623                           ; BSR set to: 0
 15624                           ;main.c: 2384: if (1 == strlen(buf)) {
 15625  0039FC  0E00               	movlw	high printGUID@buf
 15626  0039FE  6F61               	movwf	(?_strlen+1)& (0+255),b
 15627  003A00  0EC0               	movlw	low printGUID@buf
 15628  003A02  6F60               	movwf	?_strlen& (0+255),b
 15629  003A04  EC8F  F028         	call	_strlen	;wreg free
 15630  003A08  0560               	decf	?_strlen& (0+255),w,b
 15631  003A0A  1161               	iorwf	(?_strlen+1)& (0+255),w,b
 15632  003A0C  E10F               	bnz	l11522
 15633                           
 15634                           ; BSR set to: 0
 15635                           ;main.c: 2385: strcat(wrkbuf, "0");
 15636  003A0E  0E01               	movlw	high _wrkbuf
 15637  003A10  0100               	movlb	0	; () banked
 15638  003A12  6F61               	movwf	(?_strcat+1)& (0+255),b
 15639  003A14  0E54               	movlw	low _wrkbuf
 15640  003A16  6F60               	movwf	?_strcat& (0+255),b
 15641  003A18  0E7F               	movlw	high STR_235
 15642  003A1A  6F63               	movwf	(?_strcat+3)& (0+255),b
 15643  003A1C  0EF9               	movlw	low STR_235
 15644  003A1E  6F62               	movwf	(?_strcat+2)& (0+255),b
 15645  003A20  EC3E  F027         	call	_strcat	;wreg free
 15646                           
 15647                           ;main.c: 2386: strcat(wrkbuf, buf);
 15648  003A24  D832               	call	PL70	;call to abstracted procedure
 15649  003A26  EC3E  F027         	call	_strcat	;wreg free
 15650                           
 15651                           ;main.c: 2387: } else {
 15652  003A2A  D00F               	goto	l11526
 15653  003A2C                     l11522:
 15654                           
 15655                           ; BSR set to: 0
 15656                           ;main.c: 2388: strcat(wrkbuf, buf);
 15657  003A2C  D82E               	call	PL70	;call to abstracted procedure
 15658  003A2E  EC3E  F027         	call	_strcat	;wreg free
 15659  003A32  D00B               	goto	l11526
 15660  003A34                     l11524:
 15661                           
 15662                           ;main.c: 2392: strcat(wrkbuf, "--");
 15663  003A34  0E01               	movlw	high _wrkbuf
 15664  003A36  0100               	movlb	0	; () banked
 15665  003A38  6F61               	movwf	(?_strcat+1)& (0+255),b
 15666  003A3A  0E54               	movlw	low _wrkbuf
 15667  003A3C  6F60               	movwf	?_strcat& (0+255),b
 15668  003A3E  0E7F               	movlw	high STR_236
 15669  003A40  6F63               	movwf	(?_strcat+3)& (0+255),b
 15670  003A42  0EE5               	movlw	low STR_236
 15671  003A44  6F62               	movwf	(?_strcat+2)& (0+255),b
 15672  003A46  EC3E  F027         	call	_strcat	;wreg free
 15673  003A4A                     l11526:
 15674                           
 15675                           ;main.c: 2393: }
 15676                           ;main.c: 2395: if (i < 15) {
 15677  003A4A  0E0F               	movlw	15
 15678  003A4C  0100               	movlb	0	; () banked
 15679  003A4E  61C4               	cpfslt	printGUID@i& (0+255),b
 15680  003A50  D00A               	goto	l11530
 15681                           
 15682                           ; BSR set to: 0
 15683                           ;main.c: 2396: strcat(wrkbuf, ":");
 15684  003A52  0E01               	movlw	high _wrkbuf
 15685  003A54  6F61               	movwf	(?_strcat+1)& (0+255),b
 15686  003A56  0E54               	movlw	low _wrkbuf
 15687  003A58  6F60               	movwf	?_strcat& (0+255),b
 15688  003A5A  0E7F               	movlw	high STR_237
 15689  003A5C  6F63               	movwf	(?_strcat+3)& (0+255),b
 15690  003A5E  0EFB               	movlw	low STR_237
 15691  003A60  6F62               	movwf	(?_strcat+2)& (0+255),b
 15692  003A62  EC3E  F027         	call	_strcat	;wreg free
 15693  003A66                     l11530:
 15694  003A66  0100               	movlb	0	; () banked
 15695  003A68  2BC4               	incf	printGUID@i& (0+255),f,b
 15696                           
 15697                           ; BSR set to: 0
 15698  003A6A  0E0F               	movlw	15
 15699  003A6C  65C4               	cpfsgt	printGUID@i& (0+255),b
 15700  003A6E  D7AB               	goto	l11514
 15701                           
 15702                           ; BSR set to: 0
 15703                           ;main.c: 2397: }
 15704                           ;main.c: 2399: }
 15705                           ;main.c: 2401: putsUSART(wrkbuf);
 15706  003A70  0E01               	movlw	high _wrkbuf
 15707  003A72  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15708  003A74  0E54               	movlw	low _wrkbuf
 15709  003A76  6F61               	movwf	?_putsUSART& (0+255),b
 15710  003A78  EC6A  F027         	call	_putsUSART	;wreg free
 15711                           
 15712                           ;main.c: 2402: putsUSART((char *) "\r\n");
 15713  003A7C  0E74               	movlw	high (STR_188+50)
 15714  003A7E  0100               	movlb	0	; () banked
 15715  003A80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15716  003A82  0EAE               	movlw	low (STR_188+50)
 15717  003A84  6F61               	movwf	?_putsUSART& (0+255),b
 15718  003A86  EF6A  F027         	goto	_putsUSART	;wreg free
 15719  003A8A                     __end_of_printGUID:
 15720                           	opt stack 0
 15721  003A8A                     PL70:
 15722                           	opt stack 21
 15723  003A8A  0E01               	movlw	high _wrkbuf
 15724  003A8C  0100               	movlb	0	; () banked
 15725  003A8E  6F61               	movwf	(?_strcat+1)& (0+255),b
 15726  003A90  0E54               	movlw	low _wrkbuf
 15727  003A92  6F60               	movwf	?_strcat& (0+255),b
 15728  003A94  0E00               	movlw	high printGUID@buf
 15729  003A96  6F63               	movwf	(?_strcat+3)& (0+255),b
 15730  003A98  0EC0               	movlw	low printGUID@buf
 15731  003A9A  6F62               	movwf	(?_strcat+2)& (0+255),b
 15732  003A9C  0012               	return	
 15733  003A9E                     __end_ofPL70:
 15734                           	opt stack 0
 15735                           tblptru	equ	0xFF8
 15736                           tblptrh	equ	0xFF7
 15737                           tblptrl	equ	0xFF6
 15738                           tablat	equ	0xFF5
 15739                           prodh	equ	0xFF4
 15740                           prodl	equ	0xFF3
 15741                           intcon	equ	0xFF2
 15742                           indf0	equ	0xFEF
 15743                           postinc0	equ	0xFEE
 15744                           fsr0h	equ	0xFEA
 15745                           fsr0l	equ	0xFE9
 15746                           wreg	equ	0xFE8
 15747                           indf1	equ	0xFE7
 15748                           postinc1	equ	0xFE6
 15749                           postdec1	equ	0xFE5
 15750                           fsr1h	equ	0xFE2
 15751                           fsr1l	equ	0xFE1
 15752                           indf2	equ	0xFDF
 15753                           postinc2	equ	0xFDE
 15754                           postdec2	equ	0xFDD
 15755                           plusw2	equ	0xFDB
 15756                           fsr2h	equ	0xFDA
 15757                           fsr2l	equ	0xFD9
 15758                           status	equ	0xFD8
 15759                           
 15760 ;; *************** function _printNodeFirmwareVersion *****************
 15761 ;; Defined at:
 15762 ;;		line 2442 in file "main.c"
 15763 ;; Parameters:    Size  Location     Type
 15764 ;;  nodeid          1    wreg     unsigned char 
 15765 ;; Auto vars:     Size  Location     Type
 15766 ;;  nodeid          1   95[BANK0 ] unsigned char 
 15767 ;;  buf             3   96[BANK0 ] unsigned char [3]
 15768 ;;  i               1  100[BANK0 ] unsigned char 
 15769 ;;  value           1   99[BANK0 ] unsigned char 
 15770 ;; Return value:  Size  Location     Type
 15771 ;;		None               void
 15772 ;; Registers used:
 15773 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15774 ;; Tracked objects:
 15775 ;;		On entry : D/2
 15776 ;;		On exit  : 0/0
 15777 ;;		Unchanged: 0/0
 15778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15779 ;;      Params:         0       0       0       0       0       0       0
 15780 ;;      Locals:         0       6       0       0       0       0       0
 15781 ;;      Temps:          0       0       0       0       0       0       0
 15782 ;;      Totals:         0       6       0       0       0       0       0
 15783 ;;Total ram usage:        6 bytes
 15784 ;; Hardware stack levels used:    1
 15785 ;; Hardware stack levels required when called:    8
 15786 ;; This function calls:
 15787 ;;		_putsUSART
 15788 ;;		_memset
 15789 ;;		_itoa
 15790 ;;		_readRegister
 15791 ;;		_strcat
 15792 ;; This function is called by:
 15793 ;;		_doModeVerbose
 15794 ;;		_findNodes
 15795 ;; This function uses a non-reentrant model
 15796 ;;
 15797                           
 15798                           	psect	text28
 15799  003F22                     __ptext28:
 15800                           	opt stack 0
 15801  003F22                     _printNodeFirmwareVersion:
 15802                           	opt stack 21
 15803                           
 15804                           ;incstack = 0
 15805                           ;incstack = 0
 15806                           ;printNodeFirmwareVersion@nodeid stored from wreg
 15807  003F22  CFE8 F0BF          	movff	wreg,printNodeFirmwareVersion@nodeid
 15808                           
 15809                           ;main.c: 2443: uint8_t i;
 15810                           ;main.c: 2444: uint8_t value;
 15811                           ;main.c: 2445: char buf[3];
 15812                           ;main.c: 2447: memset(wrkbuf, 0, sizeof (wrkbuf));
 15813  003F26  0E01               	movlw	high _wrkbuf
 15814  003F28  0100               	movlb	0	; () banked
 15815  003F2A  6F61               	movwf	(?_memset+1)& (0+255),b
 15816  003F2C  0E54               	movlw	low _wrkbuf
 15817  003F2E  6F60               	movwf	?_memset& (0+255),b
 15818  003F30  6B63               	clrf	(?_memset+3)& (0+255),b
 15819  003F32  6B62               	clrf	(?_memset+2)& (0+255),b
 15820  003F34  6B65               	clrf	(?_memset+5)& (0+255),b
 15821  003F36  0E50               	movlw	80
 15822  003F38  6F64               	movwf	(?_memset+4)& (0+255),b
 15823  003F3A  ECC7  F029         	call	_memset	;wreg free
 15824                           
 15825                           ; BSR set to: 0
 15826                           ;main.c: 2448: putsUSART((char *) "Firmware version = ");
 15827  003F3E  0E7D               	movlw	high STR_241
 15828  003F40  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15829  003F42  0EBF               	movlw	low STR_241
 15830  003F44  6F61               	movwf	?_putsUSART& (0+255),b
 15831  003F46  EC6A  F027         	call	_putsUSART	;wreg free
 15832                           
 15833                           ;main.c: 2450: for (i = 0; i < 3; i++) {
 15834  003F4A  0100               	movlb	0	; () banked
 15835  003F4C  6BC4               	clrf	printNodeFirmwareVersion@i& (0+255),b
 15836  003F4E                     l11486:
 15837                           
 15838                           ; BSR set to: 0
 15839                           ;main.c: 2451: if (readRegister(nodeid,
 15840                           ;main.c: 2452: 0x94 + i,
 15841                           ;main.c: 2453: rwtimeout,
 15842                           ;main.c: 2454: &value)) {
 15843  003F4E  51C4               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 15844  003F50  0F94               	addlw	148
 15845  003F52  6FB6               	movwf	?_readRegister& (0+255),b
 15846  003F54  0100               	movlb	0	; () banked
 15847  003F56  C103  F0B7         	movff	_rwtimeout,?_readRegister+1
 15848  003F5A  6BB8               	clrf	(?_readRegister+2)& (0+255),b
 15849  003F5C  0EC3               	movlw	low printNodeFirmwareVersion@value
 15850  003F5E  6FB9               	movwf	(?_readRegister+3)& (0+255),b
 15851  003F60  51BF               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 15852  003F62  ECF9  F01F         	call	_readRegister
 15853  003F66  0900               	iorlw	0
 15854  003F68  E019               	bz	l11492
 15855                           
 15856                           ;main.c: 2455: itoa(buf, value, 16);
 15857  003F6A  0100               	movlb	0	; () banked
 15858  003F6C  0E00               	movlw	high printNodeFirmwareVersion@buf
 15859  003F6E  6F71               	movwf	(?_itoa+1)& (0+255),b
 15860  003F70  0EC0               	movlw	low printNodeFirmwareVersion@buf
 15861  003F72  6F70               	movwf	?_itoa& (0+255),b
 15862  003F74  C0C3  F072         	movff	printNodeFirmwareVersion@value,?_itoa+2
 15863  003F78  6B73               	clrf	(?_itoa+3)& (0+255),b
 15864  003F7A  6B75               	clrf	(?_itoa+5)& (0+255),b
 15865  003F7C  0E10               	movlw	16
 15866  003F7E  6F74               	movwf	(?_itoa+4)& (0+255),b
 15867  003F80  EC48  F029         	call	_itoa	;wreg free
 15868                           
 15869                           ; BSR set to: 0
 15870                           ;main.c: 2456: strcat(wrkbuf, buf);
 15871  003F84  0E01               	movlw	high _wrkbuf
 15872  003F86  0100               	movlb	0	; () banked
 15873  003F88  6F61               	movwf	(?_strcat+1)& (0+255),b
 15874  003F8A  0E54               	movlw	low _wrkbuf
 15875  003F8C  6F60               	movwf	?_strcat& (0+255),b
 15876  003F8E  0E00               	movlw	high printNodeFirmwareVersion@buf
 15877  003F90  6F63               	movwf	(?_strcat+3)& (0+255),b
 15878  003F92  0EC0               	movlw	low printNodeFirmwareVersion@buf
 15879  003F94  6F62               	movwf	(?_strcat+2)& (0+255),b
 15880  003F96  EC3E  F027         	call	_strcat	;wreg free
 15881                           
 15882                           ;main.c: 2457: }
 15883  003F9A  D00B               	goto	l11494
 15884  003F9C                     l11492:
 15885                           
 15886                           ;main.c: 2458: else {
 15887                           ;main.c: 2459: strcat(wrkbuf, "?");
 15888  003F9C  0E01               	movlw	high _wrkbuf
 15889  003F9E  0100               	movlb	0	; () banked
 15890  003FA0  6F61               	movwf	(?_strcat+1)& (0+255),b
 15891  003FA2  0E54               	movlw	low _wrkbuf
 15892  003FA4  6F60               	movwf	?_strcat& (0+255),b
 15893  003FA6  0E7F               	movlw	high STR_242
 15894  003FA8  6F63               	movwf	(?_strcat+3)& (0+255),b
 15895  003FAA  0EFD               	movlw	low STR_242
 15896  003FAC  6F62               	movwf	(?_strcat+2)& (0+255),b
 15897  003FAE  EC3E  F027         	call	_strcat	;wreg free
 15898  003FB2                     l11494:
 15899                           
 15900                           ;main.c: 2460: }
 15901                           ;main.c: 2462: if (i < 2) {
 15902  003FB2  0E02               	movlw	2
 15903  003FB4  0100               	movlb	0	; () banked
 15904  003FB6  61C4               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 15905  003FB8  D00A               	goto	l11498
 15906                           
 15907                           ; BSR set to: 0
 15908                           ;main.c: 2463: strcat(wrkbuf, ".");
 15909  003FBA  0E01               	movlw	high _wrkbuf
 15910  003FBC  6F61               	movwf	(?_strcat+1)& (0+255),b
 15911  003FBE  0E54               	movlw	low _wrkbuf
 15912  003FC0  6F60               	movwf	?_strcat& (0+255),b
 15913  003FC2  0E7F               	movlw	high STR_243
 15914  003FC4  6F63               	movwf	(?_strcat+3)& (0+255),b
 15915  003FC6  0EF7               	movlw	low STR_243
 15916  003FC8  6F62               	movwf	(?_strcat+2)& (0+255),b
 15917  003FCA  EC3E  F027         	call	_strcat	;wreg free
 15918  003FCE                     l11498:
 15919  003FCE  0100               	movlb	0	; () banked
 15920  003FD0  2BC4               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 15921                           
 15922                           ; BSR set to: 0
 15923  003FD2  0E02               	movlw	2
 15924  003FD4  65C4               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 15925  003FD6  D7BB               	goto	l11486
 15926                           
 15927                           ; BSR set to: 0
 15928                           ;main.c: 2464: }
 15929                           ;main.c: 2466: }
 15930                           ;main.c: 2468: putsUSART(wrkbuf);
 15931  003FD8  0E01               	movlw	high _wrkbuf
 15932  003FDA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15933  003FDC  0E54               	movlw	low _wrkbuf
 15934  003FDE  6F61               	movwf	?_putsUSART& (0+255),b
 15935  003FE0  EC6A  F027         	call	_putsUSART	;wreg free
 15936                           
 15937                           ;main.c: 2469: putsUSART((char *) "\r\n");
 15938  003FE4  0E74               	movlw	high (STR_188+50)
 15939  003FE6  0100               	movlb	0	; () banked
 15940  003FE8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 15941  003FEA  0EAE               	movlw	low (STR_188+50)
 15942  003FEC  6F61               	movwf	?_putsUSART& (0+255),b
 15943  003FEE  EF6A  F027         	goto	_putsUSART	;wreg free
 15944  003FF2                     __end_of_printNodeFirmwareVersion:
 15945                           	opt stack 0
 15946                           tblptru	equ	0xFF8
 15947                           tblptrh	equ	0xFF7
 15948                           tblptrl	equ	0xFF6
 15949                           tablat	equ	0xFF5
 15950                           prodh	equ	0xFF4
 15951                           prodl	equ	0xFF3
 15952                           intcon	equ	0xFF2
 15953                           indf0	equ	0xFEF
 15954                           postinc0	equ	0xFEE
 15955                           fsr0h	equ	0xFEA
 15956                           fsr0l	equ	0xFE9
 15957                           wreg	equ	0xFE8
 15958                           indf1	equ	0xFE7
 15959                           postinc1	equ	0xFE6
 15960                           postdec1	equ	0xFE5
 15961                           fsr1h	equ	0xFE2
 15962                           fsr1l	equ	0xFE1
 15963                           indf2	equ	0xFDF
 15964                           postinc2	equ	0xFDE
 15965                           postdec2	equ	0xFDD
 15966                           plusw2	equ	0xFDB
 15967                           fsr2h	equ	0xFDA
 15968                           fsr2l	equ	0xFD9
 15969                           status	equ	0xFD8
 15970                           
 15971 ;; *************** function _strcat *****************
 15972 ;; Defined at:
 15973 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 15974 ;; Parameters:    Size  Location     Type
 15975 ;;  to              2    0[BANK0 ] PTR unsigned char 
 15976 ;;		 -> wrkbuf(80), 
 15977 ;;  from            2    2[BANK0 ] PTR const unsigned char 
 15978 ;;		 -> STR_243(2), STR_242(2), printNodeFirmwareVersion@buf(3), STR_237(2), 
 15979 ;;		 -> STR_236(3), STR_235(2), printGUID@buf(3), 
 15980 ;; Auto vars:     Size  Location     Type
 15981 ;;  cp              2    4[BANK0 ] PTR unsigned char 
 15982 ;;		 -> wrkbuf(80), 
 15983 ;; Return value:  Size  Location     Type
 15984 ;;                  2    0[BANK0 ] PTR unsigned char 
 15985 ;; Registers used:
 15986 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 15987 ;; Tracked objects:
 15988 ;;		On entry : F/0
 15989 ;;		On exit  : 0/0
 15990 ;;		Unchanged: 0/0
 15991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15992 ;;      Params:         0       4       0       0       0       0       0
 15993 ;;      Locals:         0       2       0       0       0       0       0
 15994 ;;      Temps:          0       0       0       0       0       0       0
 15995 ;;      Totals:         0       6       0       0       0       0       0
 15996 ;;Total ram usage:        6 bytes
 15997 ;; Hardware stack levels used:    1
 15998 ;; Hardware stack levels required when called:    3
 15999 ;; This function calls:
 16000 ;;		Nothing
 16001 ;; This function is called by:
 16002 ;;		_printGUID
 16003 ;;		_printNodeFirmwareVersion
 16004 ;; This function uses a non-reentrant model
 16005 ;;
 16006                           
 16007                           	psect	text29
 16008  004E7C                     __ptext29:
 16009                           	opt stack 0
 16010  004E7C                     _strcat:
 16011                           	opt stack 25
 16012                           
 16013                           ; BSR set to: 0
 16014                           
 16015                           ;incstack = 0
 16016                           ;incstack = 0
 16017  004E7C  C060  F064         	movff	strcat@to,strcat@cp
 16018  004E80  C061  F065         	movff	strcat@to+1,strcat@cp+1
 16019  004E84  D002               	goto	l12052
 16020  004E86                     l12050:
 16021                           
 16022                           ; BSR set to: 0
 16023  004E86  4B64               	infsnz	strcat@cp& (0+255),f,b
 16024  004E88  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16025  004E8A                     l12052:
 16026                           
 16027                           ; BSR set to: 0
 16028  004E8A  C064  FFD9         	movff	strcat@cp,fsr2l
 16029  004E8E  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16030  004E92  50DF               	movf	indf2,w,c
 16031  004E94  E006               	bz	l12056
 16032  004E96  D7F7               	goto	l12050
 16033  004E98                     l12054:
 16034  004E98  0100               	movlb	0	; () banked
 16035  004E9A  4B64               	infsnz	strcat@cp& (0+255),f,b
 16036  004E9C  2B65               	incf	(strcat@cp+1)& (0+255),f,b
 16037  004E9E  4B62               	infsnz	strcat@from& (0+255),f,b
 16038  004EA0  2B63               	incf	(strcat@from+1)& (0+255),f,b
 16039  004EA2                     l12056:
 16040                           
 16041                           ; BSR set to: 0
 16042  004EA2  C062  FFF6         	movff	strcat@from,tblptrl
 16043  004EA6  C063  FFF7         	movff	strcat@from+1,tblptrh
 16044  004EAA  6AF8               	clrf	tblptru,c
 16045  004EAC  C064  FFD9         	movff	strcat@cp,fsr2l
 16046  004EB0  C065  FFDA         	movff	strcat@cp+1,fsr2h
 16047  004EB4  0E05               	movlw	(high __ramtop+-1)
 16048  004EB6  64F7               	cpfsgt	tblptrh,c
 16049  004EB8  D003               	bra	u15677
 16050  004EBA  0008               	tblrd		*
 16051  004EBC  50F5               	movf	tablat,w,c
 16052  004EBE  D005               	bra	u15670
 16053  004EC0                     u15677:
 16054  004EC0  CFF6 FFE9          	movff	tblptrl,fsr0l
 16055  004EC4  CFF7 FFEA          	movff	tblptrh,fsr0h
 16056  004EC8  50EF               	movf	indf0,w,c
 16057  004ECA                     u15670:
 16058  004ECA  6EDF               	movwf	indf2,c
 16059  004ECC  50DF               	movf	indf2,w,c
 16060  004ECE  B4D8               	btfsc	status,2,c
 16061  004ED0  0012               	return	
 16062  004ED2  D7E2               	goto	l12054
 16063  004ED4                     __end_of_strcat:
 16064                           	opt stack 0
 16065                           tblptru	equ	0xFF8
 16066                           tblptrh	equ	0xFF7
 16067                           tblptrl	equ	0xFF6
 16068                           tablat	equ	0xFF5
 16069                           prodh	equ	0xFF4
 16070                           prodl	equ	0xFF3
 16071                           intcon	equ	0xFF2
 16072                           indf0	equ	0xFEF
 16073                           postinc0	equ	0xFEE
 16074                           fsr0h	equ	0xFEA
 16075                           fsr0l	equ	0xFE9
 16076                           wreg	equ	0xFE8
 16077                           indf1	equ	0xFE7
 16078                           postinc1	equ	0xFE6
 16079                           postdec1	equ	0xFE5
 16080                           fsr1h	equ	0xFE2
 16081                           fsr1l	equ	0xFE1
 16082                           indf2	equ	0xFDF
 16083                           postinc2	equ	0xFDE
 16084                           postdec2	equ	0xFDD
 16085                           plusw2	equ	0xFDB
 16086                           fsr2h	equ	0xFDA
 16087                           fsr2l	equ	0xFD9
 16088                           status	equ	0xFD8
 16089                           
 16090 ;; *************** function _readRegister *****************
 16091 ;; Defined at:
 16092 ;;		line 1945 in file "main.c"
 16093 ;; Parameters:    Size  Location     Type
 16094 ;;  nodeid          1    wreg     unsigned char 
 16095 ;;  reg             1   86[BANK0 ] unsigned char 
 16096 ;;  timeout         2   87[BANK0 ] unsigned short 
 16097 ;;  value           1   89[BANK0 ] PTR unsigned char 
 16098 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 16099 ;; Auto vars:     Size  Location     Type
 16100 ;;  nodeid          1   94[BANK0 ] unsigned char 
 16101 ;; Return value:  Size  Location     Type
 16102 ;;                  1    wreg      enum E15660
 16103 ;; Registers used:
 16104 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16105 ;; Tracked objects:
 16106 ;;		On entry : F/0
 16107 ;;		On exit  : E/0
 16108 ;;		Unchanged: 0/0
 16109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16110 ;;      Params:         0       4       0       0       0       0       0
 16111 ;;      Locals:         0       1       0       0       0       0       0
 16112 ;;      Temps:          0       4       0       0       0       0       0
 16113 ;;      Totals:         0       9       0       0       0       0       0
 16114 ;;Total ram usage:        9 bytes
 16115 ;; Hardware stack levels used:    1
 16116 ;; Hardware stack levels required when called:    7
 16117 ;; This function calls:
 16118 ;;		_sendVSCPFrame
 16119 ;;		_getVSCPFrame
 16120 ;; This function is called by:
 16121 ;;		_findNodes
 16122 ;;		_printGUID
 16123 ;;		_printMDF
 16124 ;;		_printNodeFirmwareVersion
 16125 ;; This function uses a non-reentrant model
 16126 ;;
 16127                           
 16128                           	psect	text30
 16129  003FF2                     __ptext30:
 16130                           	opt stack 0
 16131  003FF2                     _readRegister:
 16132                           	opt stack 21
 16133                           
 16134                           ;incstack = 0
 16135                           ;incstack = 0
 16136                           ;readRegister@nodeid stored from wreg
 16137  003FF2  CFE8 F0BE          	movff	wreg,readRegister@nodeid
 16138                           
 16139                           ; BSR set to: 0
 16140                           ;main.c: 1946: vscpData[ 0 ] = nodeid;
 16141  003FF6  C0BE  F1A4         	movff	readRegister@nodeid,_vscpData
 16142                           
 16143                           ; BSR set to: 0
 16144                           ;main.c: 1947: vscpData[ 1 ] = reg;
 16145  003FFA  C0B6  F1A5         	movff	readRegister@reg,_vscpData+1
 16146                           
 16147                           ; BSR set to: 0
 16148                           ;main.c: 1949: if (sendVSCPFrame(0,
 16149                           ;main.c: 1950: 9,
 16150                           ;main.c: 1951: 0,
 16151                           ;main.c: 1952: 0,
 16152                           ;main.c: 1953: 2,
 16153                           ;main.c: 1954: vscpData)) {
 16154  003FFE  6B97               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 16155  004000  6B96               	clrf	?_sendVSCPFrame& (0+255),b
 16156  004002  0E09               	movlw	9
 16157  004004  6F98               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 16158  004006  6B99               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 16159  004008  6B9A               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 16160  00400A  0E02               	movlw	2
 16161  00400C  6F9B               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 16162  00400E  0E01               	movlw	high _vscpData
 16163  004010  0100               	movlb	0	; () banked
 16164  004012  6F9D               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 16165  004014  0EA4               	movlw	low _vscpData
 16166  004016  6F9C               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 16167  004018  EC26  F021         	call	_sendVSCPFrame	;wreg free
 16168  00401C  0900               	iorlw	0
 16169  00401E  E04E               	bz	l12044
 16170                           
 16171                           ; BSR set to: 0
 16172                           ;main.c: 1956: timekeeper = 0;
 16173  004020  6BE9               	clrf	_timekeeper& (0+255),b	;volatile
 16174  004022  6BEA               	clrf	(_timekeeper+1)& (0+255),b	;volatile
 16175  004024  6BEB               	clrf	(_timekeeper+2)& (0+255),b	;volatile
 16176  004026  6BEC               	clrf	(_timekeeper+3)& (0+255),b	;volatile
 16177                           
 16178                           ;main.c: 1957: while (timekeeper < timeout) {
 16179  004028  D039               	goto	l12042
 16180  00402A                     l972:
 16181                           
 16182                           ; BSR set to: 0
 16183  00402A  0004               	clrwdt		;# 
 16184                           
 16185                           ;main.c: 1961: if (getVSCPFrame(&vscpClass,
 16186                           ;main.c: 1962: &vscpType,
 16187                           ;main.c: 1963: &vscpNodeId,
 16188                           ;main.c: 1964: &vscpPriority,
 16189                           ;main.c: 1965: &vscpSize,
 16190                           ;main.c: 1966: vscpData)) {
 16191  00402C  0E01               	movlw	high _vscpClass
 16192  00402E  0100               	movlb	0	; () banked
 16193  004030  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 16194  004032  0EAC               	movlw	low _vscpClass
 16195  004034  6F72               	movwf	?_getVSCPFrame& (0+255),b
 16196  004036  0E01               	movlw	high _vscpType
 16197  004038  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 16198  00403A  0EB1               	movlw	low _vscpType
 16199  00403C  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 16200  00403E  0E01               	movlw	high _vscpNodeId
 16201  004040  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 16202  004042  0EAE               	movlw	low _vscpNodeId
 16203  004044  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 16204  004046  0E01               	movlw	high _vscpPriority
 16205  004048  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 16206  00404A  0EAF               	movlw	low _vscpPriority
 16207  00404C  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 16208  00404E  0E01               	movlw	high _vscpSize
 16209  004050  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 16210  004052  0EB0               	movlw	low _vscpSize
 16211  004054  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 16212  004056  0E01               	movlw	high _vscpData
 16213  004058  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 16214  00405A  0EA4               	movlw	low _vscpData
 16215  00405C  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 16216  00405E  EC2E  F024         	call	_getVSCPFrame	;wreg free
 16217  004062  0900               	iorlw	0
 16218  004064  E01B               	bz	l12042
 16219                           
 16220                           ; BSR set to: 0
 16221                           ;main.c: 1967: if ((nodeid == vscpNodeId) &&
 16222                           ;main.c: 1968: (0 == vscpClass) &&
 16223                           ;main.c: 1969: (10 == vscpType) &&
 16224                           ;main.c: 1970: (2 == vscpSize) &&
 16225                           ;main.c: 1971: (reg == vscpData[ 0 ])) {
 16226  004066  0101               	movlb	1	; () banked
 16227  004068  51AE               	movf	_vscpNodeId& (0+255),w,b
 16228  00406A  0100               	movlb	0	; () banked
 16229  00406C  63BE               	cpfseq	readRegister@nodeid& (0+255),b
 16230  00406E  D016               	goto	l12042
 16231                           
 16232                           ; BSR set to: 0
 16233  004070  0101               	movlb	1	; () banked
 16234  004072  51AD               	movf	(_vscpClass+1)& (0+255),w,b
 16235  004074  11AC               	iorwf	_vscpClass& (0+255),w,b
 16236  004076  E112               	bnz	l12042
 16237                           
 16238                           ; BSR set to: 1
 16239  004078  51B1               	movf	_vscpType& (0+255),w,b
 16240  00407A  0A0A               	xorlw	10
 16241  00407C  E10F               	bnz	l12042
 16242                           
 16243                           ; BSR set to: 1
 16244  00407E  51B0               	movf	_vscpSize& (0+255),w,b
 16245  004080  0A02               	xorlw	2
 16246  004082  E10C               	bnz	l12042
 16247                           
 16248                           ; BSR set to: 1
 16249  004084  51A4               	movf	_vscpData& (0+255),w,b
 16250  004086  0100               	movlb	0	; () banked
 16251  004088  63B6               	cpfseq	readRegister@reg& (0+255),b
 16252  00408A  D008               	goto	l12042
 16253                           
 16254                           ; BSR set to: 0
 16255                           ;main.c: 1972: *value = vscpData[ 1 ];
 16256  00408C  51B9               	movf	readRegister@value& (0+255),w,b
 16257  00408E  6ED9               	movwf	fsr2l,c
 16258  004090  6ADA               	clrf	fsr2h,c
 16259  004092  0101               	movlb	1	; () banked
 16260  004094  C1A5  FFDF         	movff	_vscpData+1,indf2
 16261                           
 16262                           ; BSR set to: 1
 16263                           ;main.c: 1973: return 1;
 16264  004098  0E01               	movlw	1
 16265  00409A  D011               	goto	l975
 16266  00409C                     l12042:
 16267  00409C  0100               	movlb	0	; () banked
 16268  00409E  51B7               	movf	readRegister@timeout& (0+255),w,b
 16269  0040A0  6FBA               	movwf	??_readRegister& (0+255),b
 16270  0040A2  51B8               	movf	(readRegister@timeout+1)& (0+255),w,b
 16271  0040A4  6FBB               	movwf	(??_readRegister+1)& (0+255),b
 16272  0040A6  6BBC               	clrf	(??_readRegister+2)& (0+255),b
 16273  0040A8  6BBD               	clrf	(??_readRegister+3)& (0+255),b
 16274  0040AA  51BA               	movf	??_readRegister& (0+255),w,b
 16275  0040AC  5DE9               	subwf	_timekeeper& (0+255),w,b	;volatile
 16276  0040AE  51BB               	movf	(??_readRegister+1)& (0+255),w,b
 16277  0040B0  59EA               	subwfb	(_timekeeper+1)& (0+255),w,b	;volatile
 16278  0040B2  51BC               	movf	(??_readRegister+2)& (0+255),w,b
 16279  0040B4  59EB               	subwfb	(_timekeeper+2)& (0+255),w,b	;volatile
 16280  0040B6  51BD               	movf	(??_readRegister+3)& (0+255),w,b
 16281  0040B8  59EC               	subwfb	(_timekeeper+3)& (0+255),w,b	;volatile
 16282  0040BA  E3B7               	bnc	l972
 16283  0040BC                     l12044:
 16284                           
 16285                           ; BSR set to: 0
 16286                           ;main.c: 1974: }
 16287                           ;main.c: 1975: }
 16288                           ;main.c: 1976: }
 16289                           ;main.c: 1977: }
 16290                           ;main.c: 1979: return 0;
 16291  0040BC  0E00               	movlw	0
 16292  0040BE                     l975:
 16293  0040BE  0012               	return	
 16294  0040C0                     __end_of_readRegister:
 16295                           	opt stack 0
 16296                           tblptru	equ	0xFF8
 16297                           tblptrh	equ	0xFF7
 16298                           tblptrl	equ	0xFF6
 16299                           tablat	equ	0xFF5
 16300                           prodh	equ	0xFF4
 16301                           prodl	equ	0xFF3
 16302                           intcon	equ	0xFF2
 16303                           indf0	equ	0xFEF
 16304                           postinc0	equ	0xFEE
 16305                           fsr0h	equ	0xFEA
 16306                           fsr0l	equ	0xFE9
 16307                           wreg	equ	0xFE8
 16308                           indf1	equ	0xFE7
 16309                           postinc1	equ	0xFE6
 16310                           postdec1	equ	0xFE5
 16311                           fsr1h	equ	0xFE2
 16312                           fsr1l	equ	0xFE1
 16313                           indf2	equ	0xFDF
 16314                           postinc2	equ	0xFDE
 16315                           postdec2	equ	0xFDD
 16316                           plusw2	equ	0xFDB
 16317                           fsr2h	equ	0xFDA
 16318                           fsr2l	equ	0xFD9
 16319                           status	equ	0xFD8
 16320                           
 16321 ;; *************** function _sendVSCPFrame *****************
 16322 ;; Defined at:
 16323 ;;		line 2666 in file "main.c"
 16324 ;; Parameters:    Size  Location     Type
 16325 ;;  vscpclass       2   54[BANK0 ] unsigned short 
 16326 ;;  vscptype        1   56[BANK0 ] unsigned char 
 16327 ;;  nodeid          1   57[BANK0 ] unsigned char 
 16328 ;;  priority        1   58[BANK0 ] unsigned char 
 16329 ;;  size            1   59[BANK0 ] unsigned char 
 16330 ;;  pData           2   60[BANK0 ] PTR unsigned char 
 16331 ;;		 -> vscpData(8), 
 16332 ;; Auto vars:     Size  Location     Type
 16333 ;;  id              4   82[BANK0 ] unsigned long 
 16334 ;; Return value:  Size  Location     Type
 16335 ;;                  1    wreg      unsigned char 
 16336 ;; Registers used:
 16337 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16338 ;; Tracked objects:
 16339 ;;		On entry : F/0
 16340 ;;		On exit  : F/0
 16341 ;;		Unchanged: 0/0
 16342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16343 ;;      Params:         0       8       0       0       0       0       0
 16344 ;;      Locals:         0       4       0       0       0       0       0
 16345 ;;      Temps:          0      20       0       0       0       0       0
 16346 ;;      Totals:         0      32       0       0       0       0       0
 16347 ;;Total ram usage:       32 bytes
 16348 ;; Hardware stack levels used:    1
 16349 ;; Hardware stack levels required when called:    6
 16350 ;; This function calls:
 16351 ;;		_sendCANFrame
 16352 ;; This function is called by:
 16353 ;;		_doModeVerbose
 16354 ;;		_readRegister
 16355 ;;		_readRegisterExtended
 16356 ;;		_writeRegisterExtended
 16357 ;; This function uses a non-reentrant model
 16358 ;;
 16359                           
 16360                           	psect	text31
 16361  00424C                     __ptext31:
 16362                           	opt stack 0
 16363  00424C                     _sendVSCPFrame:
 16364                           	opt stack 21
 16365                           
 16366                           ; BSR set to: 0
 16367                           ;main.c: 2667: uint32_t id = ((uint32_t) priority << 26) |
 16368                           ;main.c: 2668: ((uint32_t) vscpclass << 16) |
 16369                           ;main.c: 2669: ((uint32_t) vscptype << 8) |
 16370                           ;main.c: 2670: nodeid;
 16371                           
 16372                           ;incstack = 0
 16373                           ;incstack = 0
 16374  00424C  C098  F09E         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 16375  004250  6B9F               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 16376  004252  6BA0               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 16377  004254  6BA1               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 16378  004256  C0A0  F0A1         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 16379  00425A  C09F  F0A0         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 16380  00425E  C09E  F09F         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 16381  004262  6B9E               	clrf	??_sendVSCPFrame& (0+255),b
 16382  004264  5196               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 16383  004266  6FA2               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 16384  004268  5197               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 16385  00426A  6FA3               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 16386  00426C  6BA4               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 16387  00426E  6BA5               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 16388  004270  C0A3  F0A5         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 16389  004274  C0A2  F0A4         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 16390  004278  6BA3               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 16391  00427A  6BA2               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 16392  00427C  C09A  F0A6         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 16393  004280  6BA7               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 16394  004282  6BA8               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 16395  004284  6BA9               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 16396  004286  0E1A               	movlw	26
 16397  004288                     u13505:
 16398  004288  90D8               	bcf	status,0,c
 16399  00428A  37A6               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 16400  00428C  37A7               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 16401  00428E  37A8               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 16402  004290  37A9               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 16403  004292  2EE8               	decfsz	wreg,f,c
 16404  004294  D7F9               	goto	u13505
 16405  004296  51A2               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 16406  004298  11A6               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 16407  00429A  6FAA               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 16408  00429C  51A3               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 16409  00429E  11A7               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 16410  0042A0  6FAB               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 16411  0042A2  51A4               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 16412  0042A4  11A8               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 16413  0042A6  6FAC               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 16414  0042A8  51A5               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 16415  0042AA  11A9               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 16416  0042AC  6FAD               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 16417  0042AE  519E               	movf	??_sendVSCPFrame& (0+255),w,b
 16418  0042B0  11AA               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 16419  0042B2  6FAE               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 16420  0042B4  519F               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 16421  0042B6  11AB               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 16422  0042B8  6FAF               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 16423  0042BA  51A0               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 16424  0042BC  11AC               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 16425  0042BE  6FB0               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 16426  0042C0  51A1               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 16427  0042C2  11AD               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 16428  0042C4  6FB1               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 16429  0042C6  5199               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 16430  0042C8  11AE               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 16431  0042CA  6FB2               	movwf	sendVSCPFrame@id& (0+255),b
 16432  0042CC  51AF               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 16433  0042CE  6FB3               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 16434  0042D0  51B0               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 16435  0042D2  6FB4               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 16436  0042D4  51B1               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 16437  0042D6  6FB5               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 16438                           
 16439                           ; BSR set to: 0
 16440                           ;main.c: 2672: if (!sendCANFrame(id, size, pData)) {
 16441  0042D8  C0B2  F08F         	movff	sendVSCPFrame@id,?_sendCANFrame
 16442  0042DC  C0B3  F090         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 16443  0042E0  C0B4  F091         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 16444  0042E4  C0B5  F092         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 16445  0042E8  C09B  F093         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 16446  0042EC  C09C  F094         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 16447  0042F0  C09D  F095         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 16448  0042F4  EC2C  F029         	call	_sendCANFrame	;wreg free
 16449  0042F8  0900               	iorlw	0
 16450                           
 16451                           ; BSR set to: 0
 16452                           ;main.c: 2674: return 0;
 16453  0042FA  0E00               	movlw	0
 16454  0042FC  A4D8               	btfss	status,2,c
 16455                           
 16456                           ; BSR set to: 0
 16457                           ;main.c: 2675: }
 16458                           ;main.c: 2677: return 1;
 16459  0042FE  0E01               	movlw	1
 16460                           
 16461                           ; BSR set to: 0
 16462  004300  0012               	return	
 16463  004302                     __end_of_sendVSCPFrame:
 16464                           	opt stack 0
 16465                           tblptru	equ	0xFF8
 16466                           tblptrh	equ	0xFF7
 16467                           tblptrl	equ	0xFF6
 16468                           tablat	equ	0xFF5
 16469                           prodh	equ	0xFF4
 16470                           prodl	equ	0xFF3
 16471                           intcon	equ	0xFF2
 16472                           indf0	equ	0xFEF
 16473                           postinc0	equ	0xFEE
 16474                           fsr0h	equ	0xFEA
 16475                           fsr0l	equ	0xFE9
 16476                           wreg	equ	0xFE8
 16477                           indf1	equ	0xFE7
 16478                           postinc1	equ	0xFE6
 16479                           postdec1	equ	0xFE5
 16480                           fsr1h	equ	0xFE2
 16481                           fsr1l	equ	0xFE1
 16482                           indf2	equ	0xFDF
 16483                           postinc2	equ	0xFDE
 16484                           postdec2	equ	0xFDD
 16485                           plusw2	equ	0xFDB
 16486                           fsr2h	equ	0xFDA
 16487                           fsr2l	equ	0xFD9
 16488                           status	equ	0xFD8
 16489                           
 16490 ;; *************** function _sendCANFrame *****************
 16491 ;; Defined at:
 16492 ;;		line 2712 in file "main.c"
 16493 ;; Parameters:    Size  Location     Type
 16494 ;;  id              4   47[BANK0 ] unsigned long 
 16495 ;;  dlc             1   51[BANK0 ] unsigned char 
 16496 ;;  pdata           2   52[BANK0 ] PTR unsigned char 
 16497 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 16498 ;; Auto vars:     Size  Location     Type
 16499 ;;		None
 16500 ;; Return value:  Size  Location     Type
 16501 ;;                  1    wreg      unsigned char 
 16502 ;; Registers used:
 16503 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16504 ;; Tracked objects:
 16505 ;;		On entry : F/0
 16506 ;;		On exit  : F/0
 16507 ;;		Unchanged: 0/0
 16508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16509 ;;      Params:         0       7       0       0       0       0       0
 16510 ;;      Locals:         0       0       0       0       0       0       0
 16511 ;;      Temps:          0       0       0       0       0       0       0
 16512 ;;      Totals:         0       7       0       0       0       0       0
 16513 ;;Total ram usage:        7 bytes
 16514 ;; Hardware stack levels used:    1
 16515 ;; Hardware stack levels required when called:    5
 16516 ;; This function calls:
 16517 ;;		_ECANSendMessage
 16518 ;; This function is called by:
 16519 ;;		_doModeSLCAN
 16520 ;;		_receiveVSCPModeCanalMsg
 16521 ;;		_sendVSCPFrame
 16522 ;; This function uses a non-reentrant model
 16523 ;;
 16524                           
 16525                           	psect	text32
 16526  005258                     __ptext32:
 16527                           	opt stack 0
 16528  005258                     _sendCANFrame:
 16529                           	opt stack 24
 16530                           
 16531                           ; BSR set to: 0
 16532                           ;main.c: 2713: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 16533                           
 16534                           ; BSR set to: 0
 16535                           ;incstack = 0
 16536                           ;incstack = 0
 16537  005258  C08F  F06A         	movff	sendCANFrame@id,?_ECANSendMessage
 16538  00525C  C090  F06B         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 16539  005260  C091  F06C         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 16540  005264  C092  F06D         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 16541  005268  C094  F06E         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 16542  00526C  C095  F06F         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 16543  005270  C093  F070         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 16544  005274  0E20               	movlw	32
 16545  005276  6F71               	movwf	(?_ECANSendMessage+7)& (0+255),b
 16546  005278  EC2F  F018         	call	_ECANSendMessage	;wreg free
 16547  00527C  0900               	iorlw	0
 16548  00527E  E106               	bnz	l11908
 16549                           
 16550                           ; BSR set to: 0
 16551                           ;main.c: 2715: can_transmitOverruns++;
 16552  005280  2BD5               	incf	_can_transmitOverruns& (0+255),f,b
 16553  005282  0E00               	movlw	0
 16554  005284  23D6               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 16555  005286  23D7               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 16556  005288  23D8               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 16557                           
 16558                           ; BSR set to: 0
 16559                           ;main.c: 2716: return 0;
 16560  00528A  D001               	goto	l1171
 16561  00528C                     l11908:
 16562                           
 16563                           ; BSR set to: 0
 16564                           ;main.c: 2717: }
 16565                           ;main.c: 2719: return 1;
 16566  00528C  0E01               	movlw	1
 16567  00528E                     l1171:
 16568                           
 16569                           ; BSR set to: 0
 16570  00528E  0012               	return	
 16571  005290                     __end_of_sendCANFrame:
 16572                           	opt stack 0
 16573                           tblptru	equ	0xFF8
 16574                           tblptrh	equ	0xFF7
 16575                           tblptrl	equ	0xFF6
 16576                           tablat	equ	0xFF5
 16577                           prodh	equ	0xFF4
 16578                           prodl	equ	0xFF3
 16579                           intcon	equ	0xFF2
 16580                           indf0	equ	0xFEF
 16581                           postinc0	equ	0xFEE
 16582                           fsr0h	equ	0xFEA
 16583                           fsr0l	equ	0xFE9
 16584                           wreg	equ	0xFE8
 16585                           indf1	equ	0xFE7
 16586                           postinc1	equ	0xFE6
 16587                           postdec1	equ	0xFE5
 16588                           fsr1h	equ	0xFE2
 16589                           fsr1l	equ	0xFE1
 16590                           indf2	equ	0xFDF
 16591                           postinc2	equ	0xFDE
 16592                           postdec2	equ	0xFDD
 16593                           plusw2	equ	0xFDB
 16594                           fsr2h	equ	0xFDA
 16595                           fsr2l	equ	0xFD9
 16596                           status	equ	0xFD8
 16597                           
 16598 ;; *************** function _ECANSendMessage *****************
 16599 ;; Defined at:
 16600 ;;		line 617 in file "ECAN.c"
 16601 ;; Parameters:    Size  Location     Type
 16602 ;;  id              4   10[BANK0 ] unsigned long 
 16603 ;;  data            2   14[BANK0 ] PTR unsigned char 
 16604 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 16605 ;;  dataLen         1   16[BANK0 ] unsigned char 
 16606 ;;  msgFlags        1   17[BANK0 ] enum E16306
 16607 ;; Auto vars:     Size  Location     Type
 16608 ;;  pb             18   19[BANK0 ] PTR unsigned char [9]
 16609 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16610 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16611 ;;		 -> B0CON(1), 
 16612 ;;  ptr             2   45[BANK0 ] PTR unsigned char 
 16613 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16614 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16615 ;;		 -> B0CON(1), 
 16616 ;;  tempPtr         2   41[BANK0 ] PTR unsigned char 
 16617 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16618 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16619 ;;		 -> B0CON(1), 
 16620 ;;  i               1   44[BANK0 ] unsigned char 
 16621 ;;  temp            1   43[BANK0 ] unsigned char 
 16622 ;;  tempBSEL0       1   40[BANK0 ] struct .
 16623 ;;  j               1   39[BANK0 ] unsigned char 
 16624 ;;  buffers         1   38[BANK0 ] unsigned char 
 16625 ;;  mode            1   37[BANK0 ] unsigned char 
 16626 ;; Return value:  Size  Location     Type
 16627 ;;                  1    wreg      enum E15660
 16628 ;; Registers used:
 16629 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16630 ;; Tracked objects:
 16631 ;;		On entry : F/0
 16632 ;;		On exit  : F/0
 16633 ;;		Unchanged: 0/0
 16634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16635 ;;      Params:         0       8       0       0       0       0       0
 16636 ;;      Locals:         0      28       0       0       0       0       0
 16637 ;;      Temps:          0       1       0       0       0       0       0
 16638 ;;      Totals:         0      37       0       0       0       0       0
 16639 ;;Total ram usage:       37 bytes
 16640 ;; Hardware stack levels used:    1
 16641 ;; Hardware stack levels required when called:    4
 16642 ;; This function calls:
 16643 ;;		__CANIDToRegs
 16644 ;; This function is called by:
 16645 ;;		_sendCANFrame
 16646 ;; This function uses a non-reentrant model
 16647 ;;
 16648                           
 16649                           	psect	text33
 16650  00305E                     __ptext33:
 16651                           	opt stack 0
 16652  00305E                     _ECANSendMessage:
 16653                           	opt stack 24
 16654                           
 16655                           ; BSR set to: 0
 16656                           ;ECAN.c: 619: BYTE mode;
 16657                           ;ECAN.c: 620: BYTE buffers;
 16658                           ;ECAN.c: 628: BYTE i,j;
 16659                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 16660                           ;ECAN.c: 630: BYTE* pb[9];
 16661                           ;ECAN.c: 631: BYTE temp;
 16662                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 16663                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 16664                           
 16665                           ; BSR set to: 0
 16666                           ;incstack = 0
 16667                           ;incstack = 0
 16668  00305E  0E0F               	movlw	15	;volatile
 16669  003060  0100               	movlb	0	; () banked
 16670  003062  6F74               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 16671  003064  0E40               	movlw	64	;volatile
 16672  003066  6F73               	movwf	ECANSendMessage@pb& (0+255),b
 16673                           
 16674                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 16675  003068  0E0F               	movlw	15	;volatile
 16676  00306A  6F76               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 16677  00306C  0E30               	movlw	48	;volatile
 16678  00306E  6F75               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 16679                           
 16680                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 16681  003070  0E0F               	movlw	15	;volatile
 16682  003072  6F78               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 16683  003074  0E20               	movlw	32	;volatile
 16684  003076  6F77               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 16685                           
 16686                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 16687  003078  0E0E               	movlw	14	;volatile
 16688  00307A  6F7A               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 16689  00307C  0E20               	movlw	32	;volatile
 16690  00307E  6F79               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 16691                           
 16692                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 16693  003080  0E0E               	movlw	14	;volatile
 16694  003082  6F7C               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 16695  003084  0E30               	movlw	48	;volatile
 16696  003086  6F7B               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 16697                           
 16698                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 16699  003088  0E0E               	movlw	14	;volatile
 16700  00308A  6F7E               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 16701  00308C  0E40               	movlw	64	;volatile
 16702  00308E  6F7D               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 16703                           
 16704                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 16705  003090  0E0E               	movlw	14	;volatile
 16706  003092  6F80               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 16707  003094  0E50               	movlw	80	;volatile
 16708  003096  6F7F               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 16709                           
 16710                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 16711  003098  0E0E               	movlw	14	;volatile
 16712  00309A  6F82               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 16713  00309C  0E60               	movlw	96	;volatile
 16714  00309E  6F81               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 16715                           
 16716                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 16717  0030A0  0E0E               	movlw	14	;volatile
 16718  0030A2  6F84               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 16719  0030A4  0E70               	movlw	112	;volatile
 16720  0030A6  6F83               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 16721                           
 16722                           ; BSR set to: 0
 16723                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 16724  0030A8  5077               	movf	3959,w,c	;volatile
 16725  0030AA  0BC0               	andlw	192
 16726  0030AC  6F85               	movwf	ECANSendMessage@mode& (0+255),b
 16727                           
 16728                           ; BSR set to: 0
 16729                           ;ECAN.c: 660: if ( mode == 0x00 )
 16730  0030AE  6785               	tstfsz	ECANSendMessage@mode& (0+255),b
 16731  0030B0  D002               	goto	l12066
 16732                           
 16733                           ; BSR set to: 0
 16734                           ;ECAN.c: 661: buffers = 2;
 16735  0030B2  0E02               	movlw	2
 16736  0030B4  D001               	goto	L13
 16737  0030B6                     l12066:
 16738                           
 16739                           ; BSR set to: 0
 16740                           ;ECAN.c: 662: else
 16741                           ;ECAN.c: 663: buffers = 8;
 16742  0030B6  0E08               	movlw	8
 16743  0030B8                     L13:
 16744  0030B8  6F86               	movwf	ECANSendMessage@buffers& (0+255),b
 16745                           
 16746                           ; BSR set to: 0
 16747                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 16748  0030BA  010D               	movlb	13	; () banked
 16749  0030BC  90D8               	bcf	status,0,c
 16750  0030BE  31F8               	rrcf	248,w,b	;volatile
 16751  0030C0  0100               	movlb	0	; () banked
 16752  0030C2  6F88               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 16753                           
 16754                           ; BSR set to: 0
 16755                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 16756  0030C4  6B8C               	clrf	ECANSendMessage@i& (0+255),b
 16757  0030C6  D07D               	goto	l12126
 16758  0030C8                     l12072:
 16759                           
 16760                           ; BSR set to: 0
 16761                           ;ECAN.c: 688: {
 16762                           ;ECAN.c: 693: ptr = pb[i];
 16763  0030C8  518C               	movf	ECANSendMessage@i& (0+255),w,b
 16764  0030CA  0D02               	mullw	2
 16765  0030CC  50F3               	movf	prodl,w,c
 16766  0030CE  0F73               	addlw	low ECANSendMessage@pb
 16767  0030D0  6ED9               	movwf	fsr2l,c
 16768  0030D2  6ADA               	clrf	fsr2h,c
 16769  0030D4  CFDE F08D          	movff	postinc2,ECANSendMessage@ptr
 16770  0030D8  CFDD F08E          	movff	postdec2,ECANSendMessage@ptr+1
 16771                           
 16772                           ; BSR set to: 0
 16773                           ;ECAN.c: 694: tempPtr = ptr;
 16774  0030DC  C08D  F089         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 16775  0030E0  C08E  F08A         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 16776                           
 16777                           ; BSR set to: 0
 16778                           ;ECAN.c: 702: if ( i > 2 )
 16779  0030E4  0E02               	movlw	2
 16780  0030E6  658C               	cpfsgt	ECANSendMessage@i& (0+255),b
 16781  0030E8  D004               	goto	l12084
 16782                           
 16783                           ; BSR set to: 0
 16784                           ;ECAN.c: 703: {
 16785                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 16786  0030EA  90D8               	bcf	status,0,c
 16787  0030EC  3388               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 16788                           
 16789                           ; BSR set to: 0
 16790                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 16791  0030EE  A188               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 16792  0030F0  D067               	goto	l12124
 16793  0030F2                     l12084:
 16794                           
 16795                           ; BSR set to: 0
 16796                           ;ECAN.c: 714: }
 16797                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 16798  0030F2  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16799  0030F6  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16800  0030FA  50DF               	movf	indf2,w,c
 16801  0030FC  6F72               	movwf	??_ECANSendMessage& (0+255),b
 16802  0030FE  B772               	btfsc	??_ECANSendMessage& (0+255),3,b
 16803  003100  D05F               	goto	l12124
 16804                           
 16805                           ; BSR set to: 0
 16806                           ;ECAN.c: 721: {
 16807                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 16808  003102  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16809  003106  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16810  00310A  0EFC               	movlw	252
 16811  00310C  16DF               	andwf	indf2,f,c
 16812                           
 16813                           ; BSR set to: 0
 16814                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 16815  00310E  C071  F072         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 16816  003112  0E03               	movlw	3
 16817  003114  1772               	andwf	??_ECANSendMessage& (0+255),f,b
 16818  003116  C08D  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 16819  00311A  C08E  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 16820  00311E  5172               	movf	??_ECANSendMessage& (0+255),w,b
 16821  003120  12DF               	iorwf	indf2,f,c
 16822                           
 16823                           ; BSR set to: 0
 16824                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 16825  003122  AD71               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 16826  003124  D004               	goto	l1337
 16827                           
 16828                           ; BSR set to: 0
 16829                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 16830  003126  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 16831  003128  0940               	iorlw	64
 16832  00312A  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 16833  00312C  D002               	goto	l12094
 16834  00312E                     l1337:
 16835                           
 16836                           ; BSR set to: 0
 16837                           ;ECAN.c: 729: else
 16838                           ;ECAN.c: 730: temp = dataLen;
 16839  00312E  C070  F08B         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 16840  003132                     l12094:
 16841                           
 16842                           ; BSR set to: 0
 16843                           ;ECAN.c: 732: *(ptr+5) = temp;
 16844  003132  EE20 F005          	lfsr	2,5
 16845  003136  518D               	movf	ECANSendMessage@ptr& (0+255),w,b
 16846  003138  26D9               	addwf	fsr2l,f,c
 16847  00313A  518E               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 16848  00313C  22DA               	addwfc	fsr2h,f,c
 16849  00313E  C08B  FFDF         	movff	ECANSendMessage@temp,indf2
 16850                           
 16851                           ; BSR set to: 0
 16852                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 16853  003142  AB71               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 16854  003144  D003               	goto	l1339
 16855                           
 16856                           ; BSR set to: 0
 16857                           ;ECAN.c: 736: temp = 1;
 16858  003146  0E01               	movlw	1
 16859  003148  6F8B               	movwf	ECANSendMessage@temp& (0+255),b
 16860  00314A  D001               	goto	l12100
 16861  00314C                     l1339:
 16862                           
 16863                           ; BSR set to: 0
 16864                           ;ECAN.c: 738: else
 16865                           ;ECAN.c: 739: temp = 0;
 16866  00314C  6B8B               	clrf	ECANSendMessage@temp& (0+255),b
 16867  00314E                     l12100:
 16868                           
 16869                           ; BSR set to: 0
 16870                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 16871  00314E  298D               	incf	ECANSendMessage@ptr& (0+255),w,b
 16872  003150  6F60               	movwf	?__CANIDToRegs& (0+255),b
 16873  003152  0E00               	movlw	0
 16874  003154  218E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 16875  003156  6F61               	movwf	(?__CANIDToRegs+1)& (0+255),b
 16876  003158  C06A  F062         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 16877  00315C  C06B  F063         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 16878  003160  C06C  F064         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 16879  003164  C06D  F065         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 16880  003168  C08B  F066         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 16881  00316C  EC3D  F01B         	call	__CANIDToRegs	;wreg free
 16882                           
 16883                           ; BSR set to: 0
 16884                           ;ECAN.c: 745: ptr += 6;
 16885  003170  0E06               	movlw	6
 16886  003172  278D               	addwf	ECANSendMessage@ptr& (0+255),f,b
 16887  003174  0E00               	movlw	0
 16888  003176  238E               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 16889                           
 16890                           ; BSR set to: 0
 16891                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 16892  003178  6B87               	clrf	ECANSendMessage@j& (0+255),b
 16893  00317A  D00F               	goto	l12114
 16894  00317C                     l12106:
 16895                           
 16896                           ; BSR set to: 0
 16897                           ;ECAN.c: 748: *ptr++ = *data++;
 16898  00317C  C06E  FFD9         	movff	ECANSendMessage@data,fsr2l
 16899  003180  C06F  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 16900  003184  C08D  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 16901  003188  C08E  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 16902  00318C  CFDF FFE7          	movff	indf2,indf1
 16903                           
 16904                           ; BSR set to: 0
 16905  003190  4B6E               	infsnz	ECANSendMessage@data& (0+255),f,b
 16906  003192  2B6F               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 16907                           
 16908                           ; BSR set to: 0
 16909  003194  4B8D               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 16910  003196  2B8E               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 16911                           
 16912                           ; BSR set to: 0
 16913  003198  2B87               	incf	ECANSendMessage@j& (0+255),f,b
 16914  00319A                     l12114:
 16915                           
 16916                           ; BSR set to: 0
 16917  00319A  5170               	movf	ECANSendMessage@dataLen& (0+255),w,b
 16918  00319C  5D87               	subwf	ECANSendMessage@j& (0+255),w,b
 16919  00319E  E3EE               	bnc	l12106
 16920                           
 16921                           ; BSR set to: 0
 16922                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 16923  0031A0  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16924  0031A4  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16925  0031A8  50DF               	movf	indf2,w,c
 16926  0031AA  6F72               	movwf	??_ECANSendMessage& (0+255),b
 16927  0031AC  B572               	btfsc	??_ECANSendMessage& (0+255),2,b
 16928  0031AE  D006               	goto	l12120
 16929                           
 16930                           ; BSR set to: 0
 16931                           ;ECAN.c: 753: *tempPtr |= 0x08;
 16932  0031B0  C089  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 16933  0031B4  C08A  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 16934  0031B8  0E00               	movlw	0
 16935  0031BA  86DB               	bsf	plusw2,3,c
 16936  0031BC                     l12120:
 16937                           
 16938                           ; BSR set to: 0
 16939                           ;ECAN.c: 755: return TRUE;
 16940  0031BC  0E01               	movlw	1
 16941  0031BE  D005               	goto	l1345
 16942  0031C0                     l12124:
 16943                           
 16944                           ; BSR set to: 0
 16945  0031C0  2B8C               	incf	ECANSendMessage@i& (0+255),f,b
 16946  0031C2                     l12126:
 16947                           
 16948                           ; BSR set to: 0
 16949  0031C2  5186               	movf	ECANSendMessage@buffers& (0+255),w,b
 16950  0031C4  5D8C               	subwf	ECANSendMessage@i& (0+255),w,b
 16951  0031C6  E380               	bnc	l12072
 16952                           
 16953                           ; BSR set to: 0
 16954                           ;ECAN.c: 756: }
 16955                           ;ECAN.c: 757: }
 16956                           ;ECAN.c: 760: return FALSE;
 16957  0031C8  0E00               	movlw	0
 16958  0031CA                     l1345:
 16959                           
 16960                           ; BSR set to: 0
 16961  0031CA  0012               	return	
 16962  0031CC                     __end_of_ECANSendMessage:
 16963                           	opt stack 0
 16964                           tblptru	equ	0xFF8
 16965                           tblptrh	equ	0xFF7
 16966                           tblptrl	equ	0xFF6
 16967                           tablat	equ	0xFF5
 16968                           prodh	equ	0xFF4
 16969                           prodl	equ	0xFF3
 16970                           intcon	equ	0xFF2
 16971                           indf0	equ	0xFEF
 16972                           postinc0	equ	0xFEE
 16973                           fsr0h	equ	0xFEA
 16974                           fsr0l	equ	0xFE9
 16975                           wreg	equ	0xFE8
 16976                           indf1	equ	0xFE7
 16977                           postinc1	equ	0xFE6
 16978                           postdec1	equ	0xFE5
 16979                           fsr1h	equ	0xFE2
 16980                           fsr1l	equ	0xFE1
 16981                           indf2	equ	0xFDF
 16982                           postinc2	equ	0xFDE
 16983                           postdec2	equ	0xFDD
 16984                           plusw2	equ	0xFDB
 16985                           fsr2h	equ	0xFDA
 16986                           fsr2l	equ	0xFD9
 16987                           status	equ	0xFD8
 16988                           
 16989 ;; *************** function __CANIDToRegs *****************
 16990 ;; Defined at:
 16991 ;;		line 1099 in file "ECAN.c"
 16992 ;; Parameters:    Size  Location     Type
 16993 ;;  ptr             2    0[BANK0 ] PTR unsigned char 
 16994 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 16995 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 16996 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 16997 ;;  val             4    2[BANK0 ] unsigned long 
 16998 ;;  type            1    6[BANK0 ] unsigned char 
 16999 ;; Auto vars:     Size  Location     Type
 17000 ;;  Value           1    9[BANK0 ] PTR struct _CAN_MESSAGE_
 17001 ;;		 -> _CANIDToRegs@val(4), 
 17002 ;; Return value:  Size  Location     Type
 17003 ;;		None               void
 17004 ;; Registers used:
 17005 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17006 ;; Tracked objects:
 17007 ;;		On entry : F/0
 17008 ;;		On exit  : F/0
 17009 ;;		Unchanged: 0/0
 17010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17011 ;;      Params:         0       7       0       0       0       0       0
 17012 ;;      Locals:         0       1       0       0       0       0       0
 17013 ;;      Temps:          0       2       0       0       0       0       0
 17014 ;;      Totals:         0      10       0       0       0       0       0
 17015 ;;Total ram usage:       10 bytes
 17016 ;; Hardware stack levels used:    1
 17017 ;; Hardware stack levels required when called:    3
 17018 ;; This function calls:
 17019 ;;		Nothing
 17020 ;; This function is called by:
 17021 ;;		_doModeVerbose
 17022 ;;		_ECANSendMessage
 17023 ;; This function uses a non-reentrant model
 17024 ;;
 17025                           
 17026                           	psect	text34
 17027  00367A                     __ptext34:
 17028                           	opt stack 0
 17029  00367A                     __CANIDToRegs:
 17030                           	opt stack 24
 17031                           
 17032                           ; BSR set to: 0
 17033                           ;ECAN.c: 1100: CAN_MESSAGE_ID *Value;
 17034                           ;ECAN.c: 1102: Value = (CAN_MESSAGE_ID*)&val;
 17035                           
 17036                           ; BSR set to: 0
 17037                           ;incstack = 0
 17038                           ;incstack = 0
 17039  00367A  0E62               	movlw	low __CANIDToRegs@val
 17040  00367C  6F69               	movwf	__CANIDToRegs@Value& (0+255),b
 17041                           
 17042                           ; BSR set to: 0
 17043                           ;ECAN.c: 1104: if ( type == 0 )
 17044  00367E  6766               	tstfsz	__CANIDToRegs@type& (0+255),b
 17045  003680  D022               	goto	l11584
 17046                           
 17047                           ; BSR set to: 0
 17048                           ;ECAN.c: 1105: {
 17049                           ;ECAN.c: 1107: *ptr = Value->BYTES.BYTE_1 >> 3;
 17050  003682  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17051  003684  6ED9               	movwf	fsr2l,c
 17052  003686  6ADA               	clrf	fsr2h,c
 17053  003688  50DF               	movf	indf2,w,c
 17054  00368A  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17055  00368C  90D8               	bcf	status,0,c
 17056  00368E  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17057  003690  90D8               	bcf	status,0,c
 17058  003692  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17059  003694  90D8               	bcf	status,0,c
 17060  003696  3167               	rrcf	??__CANIDToRegs& (0+255),w,b
 17061                           
 17062                           ;ECAN.c: 1108: *ptr |= (Value->BYTES.BYTE_2 << 5);
 17063  003698  D862               	call	PL56	;call to abstracted procedure
 17064  00369A  2AD9               	incf	fsr2l,f,c
 17065  00369C  6ADA               	clrf	fsr2h,c
 17066  00369E  D872               	call	PL106	;call to abstracted procedure
 17067  0036A0                     u14765:
 17068  0036A0  90D8               	bcf	status,0,c
 17069  0036A2  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17070  0036A4  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17071  0036A6  D7FC               	goto	u14765
 17072  0036A8  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17073                           
 17074                           ; BSR set to: 0
 17075                           ;ECAN.c: 1109: ptr++;
 17076                           
 17077                           ; BSR set to: 0
 17078                           ;ECAN.c: 1110: *ptr = Value->BYTES.BYTE_1 << 5;
 17079  0036AC  D846               	call	PL30	;call to abstracted procedure
 17080  0036AE  D86A               	call	PL106	;call to abstracted procedure
 17081  0036B0                     u14775:
 17082  0036B0  90D8               	bcf	status,0,c
 17083  0036B2  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17084  0036B4  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17085  0036B6  D7FC               	goto	u14775
 17086  0036B8  5167               	movf	??__CANIDToRegs& (0+255),w,b
 17087  0036BA  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17088  0036BE  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17089  0036C2  6EDF               	movwf	indf2,c
 17090                           
 17091                           ;ECAN.c: 1111: }
 17092  0036C4  D039               	goto	l1399
 17093  0036C6                     l11584:
 17094                           
 17095                           ; BSR set to: 0
 17096                           ;ECAN.c: 1112: else
 17097                           ;ECAN.c: 1113: {
 17098                           ;ECAN.c: 1115: *ptr = Value->BYTES.BYTE_3 >> 5;
 17099  0036C6  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17100  0036C8  D842               	call	PL48	;call to abstracted procedure
 17101  0036CA  0E05               	movlw	5
 17102  0036CC  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 17103  0036CE                     u14785:
 17104  0036CE  90D8               	bcf	status,0,c
 17105  0036D0  3367               	rrcf	??__CANIDToRegs& (0+255),f,b
 17106  0036D2  2F68               	decfsz	(??__CANIDToRegs+1)& (0+255),f,b
 17107  0036D4  D7FC               	goto	u14785
 17108  0036D6  5167               	movf	??__CANIDToRegs& (0+255),w,b
 17109                           
 17110                           ;ECAN.c: 1116: *ptr |= Value->BYTES.BYTE_4 << 3;
 17111  0036D8  D842               	call	PL56	;call to abstracted procedure
 17112  0036DA  0E03               	movlw	3
 17113  0036DC  D849               	call	PL72	;call to abstracted procedure
 17114  0036DE  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17115  0036E0  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17116                           
 17117                           ; BSR set to: 0
 17118                           ;ECAN.c: 1117: ptr++;
 17119                           
 17120                           ; BSR set to: 0
 17121                           ;ECAN.c: 1118: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 17122  0036E4  D82A               	call	PL30	;call to abstracted procedure
 17123  0036E6  0E02               	movlw	2
 17124  0036E8  D843               	call	PL72	;call to abstracted procedure
 17125  0036EA  3567               	rlcf	??__CANIDToRegs& (0+255),w,b
 17126  0036EC  0BE0               	andlw	224
 17127  0036EE  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17128  0036F2  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17129  0036F6  6EDF               	movwf	indf2,c
 17130                           
 17131                           ; BSR set to: 0
 17132                           ;ECAN.c: 1120: *ptr |= 0b00001000;
 17133  0036F8  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17134  0036FC  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17135  003700  0E00               	movlw	0
 17136  003702  86DB               	bsf	plusw2,3,c
 17137                           
 17138                           ; BSR set to: 0
 17139                           ;ECAN.c: 1121: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 17140  003704  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17141  003706  D823               	call	PL48	;call to abstracted procedure
 17142  003708  0E03               	movlw	3
 17143  00370A  1767               	andwf	??__CANIDToRegs& (0+255),f,b
 17144  00370C  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17145                           
 17146                           ;ECAN.c: 1122: ptr++;
 17147                           
 17148                           ; BSR set to: 0
 17149                           ;ECAN.c: 1123: *ptr = Value->BYTES.BYTE_2;
 17150  003710  D814               	call	PL30	;call to abstracted procedure
 17151  003712  2AD9               	incf	fsr2l,f,c
 17152  003714  6ADA               	clrf	fsr2h,c
 17153  003716  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 17154  00371A  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 17155  00371E  CFDF FFE7          	movff	indf2,indf1
 17156                           
 17157                           ; BSR set to: 0
 17158                           ;ECAN.c: 1124: ptr++;
 17159  003722  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 17160  003724  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 17161                           
 17162                           ; BSR set to: 0
 17163                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_1;
 17164  003726  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17165  003728  6ED9               	movwf	fsr2l,c
 17166  00372A  6ADA               	clrf	fsr2h,c
 17167  00372C  C060  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 17168  003730  C061  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 17169  003734  CFDF FFE7          	movff	indf2,indf1
 17170  003738                     l1399:
 17171                           
 17172                           ; BSR set to: 0
 17173  003738  0012               	return	
 17174  00373A                     __end_of__CANIDToRegs:
 17175                           	opt stack 0
 17176  00373A                     PL30:
 17177                           	opt stack 24
 17178  00373A  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17179  00373E  5167               	movf	??__CANIDToRegs& (0+255),w,b
 17180  003740  12DF               	iorwf	indf2,f,c
 17181  003742  4B60               	infsnz	__CANIDToRegs@ptr& (0+255),f,b
 17182  003744  2B61               	incf	(__CANIDToRegs@ptr+1)& (0+255),f,b
 17183  003746  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17184  003748  6ED9               	movwf	fsr2l,c
 17185  00374A  6ADA               	clrf	fsr2h,c
 17186  00374C  0012               	return	
 17187  00374E                     __end_ofPL30:
 17188                           	opt stack 0
 17189  00374E                     PL48:
 17190                           	opt stack 24
 17191  00374E  6ED9               	movwf	fsr2l,c
 17192  003750  6ADA               	clrf	fsr2h,c
 17193  003752  0E02               	movlw	2
 17194  003754  26D9               	addwf	fsr2l,f,c
 17195  003756  6ADA               	clrf	fsr2h,c
 17196  003758  50DF               	movf	indf2,w,c
 17197  00375A  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17198  00375C  0012               	return	
 17199  00375E                     __end_ofPL48:
 17200                           	opt stack 0
 17201  00375E                     PL56:
 17202                           	opt stack 24
 17203  00375E  C060  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17204  003762  C061  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17205  003766  6EDF               	movwf	indf2,c
 17206  003768  5169               	movf	__CANIDToRegs@Value& (0+255),w,b
 17207  00376A  6ED9               	movwf	fsr2l,c
 17208  00376C  6ADA               	clrf	fsr2h,c
 17209  00376E  0012               	return	
 17210  003770                     __end_ofPL56:
 17211                           	opt stack 0
 17212  003770                     PL72:
 17213                           	opt stack 24
 17214  003770  26D9               	addwf	fsr2l,f,c
 17215  003772  6ADA               	clrf	fsr2h,c
 17216  003774  50DF               	movf	indf2,w,c
 17217  003776  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17218  003778  90D8               	bcf	status,0,c
 17219  00377A  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17220  00377C  90D8               	bcf	status,0,c
 17221  00377E  3767               	rlcf	??__CANIDToRegs& (0+255),f,b
 17222  003780  90D8               	bcf	status,0,c
 17223  003782  0012               	return	
 17224  003784                     __end_ofPL72:
 17225                           	opt stack 0
 17226  003784                     PL106:
 17227                           	opt stack 24
 17228  003784  50DF               	movf	indf2,w,c
 17229  003786  6F67               	movwf	??__CANIDToRegs& (0+255),b
 17230  003788  0E05               	movlw	5
 17231  00378A  6F68               	movwf	(??__CANIDToRegs+1)& (0+255),b
 17232  00378C  0C05               	retlw	5
 17233  00378E                     __end_ofPL106:
 17234                           	opt stack 0
 17235                           tblptru	equ	0xFF8
 17236                           tblptrh	equ	0xFF7
 17237                           tblptrl	equ	0xFF6
 17238                           tablat	equ	0xFF5
 17239                           prodh	equ	0xFF4
 17240                           prodl	equ	0xFF3
 17241                           intcon	equ	0xFF2
 17242                           indf0	equ	0xFEF
 17243                           postinc0	equ	0xFEE
 17244                           fsr0h	equ	0xFEA
 17245                           fsr0l	equ	0xFE9
 17246                           wreg	equ	0xFE8
 17247                           indf1	equ	0xFE7
 17248                           postinc1	equ	0xFE6
 17249                           postdec1	equ	0xFE5
 17250                           fsr1h	equ	0xFE2
 17251                           fsr1l	equ	0xFE1
 17252                           indf2	equ	0xFDF
 17253                           postinc2	equ	0xFDE
 17254                           postdec2	equ	0xFDD
 17255                           plusw2	equ	0xFDB
 17256                           fsr2h	equ	0xFDA
 17257                           fsr2l	equ	0xFD9
 17258                           status	equ	0xFD8
 17259                           
 17260 ;; *************** function _memset *****************
 17261 ;; Defined at:
 17262 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 17263 ;; Parameters:    Size  Location     Type
 17264 ;;  p1              2    0[BANK0 ] PTR void 
 17265 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 17266 ;;  c               2    2[BANK0 ] int 
 17267 ;;  n               2    4[BANK0 ] unsigned int 
 17268 ;; Auto vars:     Size  Location     Type
 17269 ;;  p               2    6[BANK0 ] PTR unsigned char 
 17270 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 17271 ;; Return value:  Size  Location     Type
 17272 ;;                  2    0[BANK0 ] PTR void 
 17273 ;; Registers used:
 17274 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17275 ;; Tracked objects:
 17276 ;;		On entry : F/0
 17277 ;;		On exit  : F/0
 17278 ;;		Unchanged: 0/0
 17279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17280 ;;      Params:         0       6       0       0       0       0       0
 17281 ;;      Locals:         0       2       0       0       0       0       0
 17282 ;;      Temps:          0       0       0       0       0       0       0
 17283 ;;      Totals:         0       8       0       0       0       0       0
 17284 ;;Total ram usage:        8 bytes
 17285 ;; Hardware stack levels used:    1
 17286 ;; Hardware stack levels required when called:    3
 17287 ;; This function calls:
 17288 ;;		Nothing
 17289 ;; This function is called by:
 17290 ;;		_doModeVerbose
 17291 ;;		_doModeSLCAN
 17292 ;;		_printGUID
 17293 ;;		_printMDF
 17294 ;;		_printNodeFirmwareVersion
 17295 ;; This function uses a non-reentrant model
 17296 ;;
 17297                           
 17298                           	psect	text35
 17299  00538E                     __ptext35:
 17300                           	opt stack 0
 17301  00538E                     _memset:
 17302                           	opt stack 26
 17303                           
 17304                           ; BSR set to: 0
 17305                           
 17306                           ; BSR set to: 0
 17307                           ;incstack = 0
 17308                           ;incstack = 0
 17309  00538E  C060  F066         	movff	memset@p1,memset@p
 17310  005392  C061  F067         	movff	memset@p1+1,memset@p+1
 17311  005396  D008               	goto	l10786
 17312  005398                     l10782:
 17313                           
 17314                           ; BSR set to: 0
 17315  005398  C066  FFD9         	movff	memset@p,fsr2l
 17316  00539C  C067  FFDA         	movff	memset@p+1,fsr2h
 17317  0053A0  C062  FFDF         	movff	memset@c,indf2
 17318                           
 17319                           ; BSR set to: 0
 17320  0053A4  4B66               	infsnz	memset@p& (0+255),f,b
 17321  0053A6  2B67               	incf	(memset@p+1)& (0+255),f,b
 17322  0053A8                     l10786:
 17323                           
 17324                           ; BSR set to: 0
 17325  0053A8  0764               	decf	memset@n& (0+255),f,b
 17326  0053AA  A0D8               	btfss	status,0,c
 17327  0053AC  0765               	decf	(memset@n+1)& (0+255),f,b
 17328  0053AE  0100               	movlb	0	; () banked
 17329  0053B0  2964               	incf	memset@n& (0+255),w,b
 17330  0053B2  B4D8               	btfsc	status,2,c
 17331  0053B4  2965               	incf	(memset@n+1)& (0+255),w,b
 17332  0053B6  B4D8               	btfsc	status,2,c
 17333                           
 17334                           ; BSR set to: 0
 17335  0053B8  0012               	return	
 17336  0053BA  D7EE               	goto	l10782
 17337  0053BC                     __end_of_memset:
 17338                           	opt stack 0
 17339                           tblptru	equ	0xFF8
 17340                           tblptrh	equ	0xFF7
 17341                           tblptrl	equ	0xFF6
 17342                           tablat	equ	0xFF5
 17343                           prodh	equ	0xFF4
 17344                           prodl	equ	0xFF3
 17345                           intcon	equ	0xFF2
 17346                           indf0	equ	0xFEF
 17347                           postinc0	equ	0xFEE
 17348                           fsr0h	equ	0xFEA
 17349                           fsr0l	equ	0xFE9
 17350                           wreg	equ	0xFE8
 17351                           indf1	equ	0xFE7
 17352                           postinc1	equ	0xFE6
 17353                           postdec1	equ	0xFE5
 17354                           fsr1h	equ	0xFE2
 17355                           fsr1l	equ	0xFE1
 17356                           indf2	equ	0xFDF
 17357                           postinc2	equ	0xFDE
 17358                           postdec2	equ	0xFDD
 17359                           plusw2	equ	0xFDB
 17360                           fsr2h	equ	0xFDA
 17361                           fsr2l	equ	0xFD9
 17362                           status	equ	0xFD8
 17363                           
 17364 ;; *************** function _printHelp *****************
 17365 ;; Defined at:
 17366 ;;		line 2289 in file "main.c"
 17367 ;; Parameters:    Size  Location     Type
 17368 ;;		None
 17369 ;; Auto vars:     Size  Location     Type
 17370 ;;		None
 17371 ;; Return value:  Size  Location     Type
 17372 ;;		None               void
 17373 ;; Registers used:
 17374 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17375 ;; Tracked objects:
 17376 ;;		On entry : F/1
 17377 ;;		On exit  : 0/0
 17378 ;;		Unchanged: 0/0
 17379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17380 ;;      Params:         0       0       0       0       0       0       0
 17381 ;;      Locals:         0       0       0       0       0       0       0
 17382 ;;      Temps:          0       0       0       0       0       0       0
 17383 ;;      Totals:         0       0       0       0       0       0       0
 17384 ;;Total ram usage:        0 bytes
 17385 ;; Hardware stack levels used:    1
 17386 ;; Hardware stack levels required when called:    5
 17387 ;; This function calls:
 17388 ;;		_putsUSART
 17389 ;; This function is called by:
 17390 ;;		_doModeVerbose
 17391 ;; This function uses a non-reentrant model
 17392 ;;
 17393                           
 17394                           	psect	text36
 17395  0029E6                     __ptext36:
 17396                           	opt stack 0
 17397  0029E6                     _printHelp:
 17398                           	opt stack 24
 17399                           
 17400                           ; BSR set to: 1
 17401                           ;main.c: 2290: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 17402                           
 17403                           ; BSR set to: 0
 17404                           ;incstack = 0
 17405                           ;incstack = 0
 17406  0029E6  0E78               	movlw	high STR_197
 17407  0029E8  0100               	movlb	0	; () banked
 17408  0029EA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17409  0029EC  0E6C               	movlw	low STR_197
 17410  0029EE  6F61               	movwf	?_putsUSART& (0+255),b
 17411  0029F0  EC6A  F027         	call	_putsUSART	;wreg free
 17412                           
 17413                           ;main.c: 2291: putsUSART((char *) "------------------------------------\r\n");
 17414  0029F4  0E71               	movlw	high (STR_229+28)
 17415  0029F6  0100               	movlb	0	; () banked
 17416  0029F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17417  0029FA  0E93               	movlw	low (STR_229+28)
 17418  0029FC  6F61               	movwf	?_putsUSART& (0+255),b
 17419  0029FE  EC6A  F027         	call	_putsUSART	;wreg free
 17420                           
 17421                           ;main.c: 2292: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 17422  002A02  0E7B               	movlw	high STR_199
 17423  002A04  0100               	movlb	0	; () banked
 17424  002A06  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17425  002A08  0E64               	movlw	low STR_199
 17426  002A0A  6F61               	movwf	?_putsUSART& (0+255),b
 17427  002A0C  EC6A  F027         	call	_putsUSART	;wreg free
 17428                           
 17429                           ;main.c: 2293: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 17430  002A10  0E76               	movlw	high STR_200
 17431  002A12  0100               	movlb	0	; () banked
 17432  002A14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17433  002A16  0EFB               	movlw	low STR_200
 17434  002A18  6F61               	movwf	?_putsUSART& (0+255),b
 17435  002A1A  EC6A  F027         	call	_putsUSART	;wreg free
 17436                           
 17437                           ;main.c: 2294: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 17438  002A1E  0E76               	movlw	high STR_201
 17439  002A20  0100               	movlb	0	; () banked
 17440  002A22  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17441  002A24  0EA1               	movlw	low STR_201
 17442  002A26  6F61               	movwf	?_putsUSART& (0+255),b
 17443  002A28  EC6A  F027         	call	_putsUSART	;wreg free
 17444                           
 17445                           ;main.c: 2295: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 17446  002A2C  0E75               	movlw	high STR_202
 17447  002A2E  0100               	movlb	0	; () banked
 17448  002A30  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17449  002A32  0E1A               	movlw	low STR_202
 17450  002A34  6F61               	movwf	?_putsUSART& (0+255),b
 17451  002A36  EC6A  F027         	call	_putsUSART	;wreg free
 17452                           
 17453                           ;main.c: 2296: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 17454  002A3A  0E75               	movlw	high STR_203
 17455  002A3C  0100               	movlb	0	; () banked
 17456  002A3E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17457  002A40  0E7F               	movlw	low STR_203
 17458  002A42  6F61               	movwf	?_putsUSART& (0+255),b
 17459  002A44  EC6A  F027         	call	_putsUSART	;wreg free
 17460                           
 17461                           ;main.c: 2297: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 17462  002A48  0E7B               	movlw	high STR_204
 17463  002A4A  0100               	movlb	0	; () banked
 17464  002A4C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17465  002A4E  0E0C               	movlw	low STR_204
 17466  002A50  6F61               	movwf	?_putsUSART& (0+255),b
 17467  002A52  EC6A  F027         	call	_putsUSART	;wreg free
 17468                           
 17469                           ;main.c: 2298: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 17470  002A56  0E75               	movlw	high STR_205
 17471  002A58  0100               	movlb	0	; () banked
 17472  002A5A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17473  002A5C  0EB1               	movlw	low STR_205
 17474  002A5E  6F61               	movwf	?_putsUSART& (0+255),b
 17475  002A60  EC6A  F027         	call	_putsUSART	;wreg free
 17476                           
 17477                           ;main.c: 2299: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 17478  002A64  0E76               	movlw	high STR_206
 17479  002A66  0100               	movlb	0	; () banked
 17480  002A68  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17481  002A6A  0ECF               	movlw	low STR_206
 17482  002A6C  6F61               	movwf	?_putsUSART& (0+255),b
 17483  002A6E  EC6A  F027         	call	_putsUSART	;wreg free
 17484                           
 17485                           ;main.c: 2300: putsUSART((char *) "TX - Send CAN frame .\r\n");
 17486  002A72  0E7C               	movlw	high STR_207
 17487  002A74  0100               	movlb	0	; () banked
 17488  002A76  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17489  002A78  0E01               	movlw	low STR_207
 17490  002A7A  6F61               	movwf	?_putsUSART& (0+255),b
 17491  002A7C  EC6A  F027         	call	_putsUSART	;wreg free
 17492                           
 17493                           ;main.c: 2301: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 17494  002A80  0E73               	movlw	high STR_208
 17495  002A82  0100               	movlb	0	; () banked
 17496  002A84  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17497  002A86  0E33               	movlw	low STR_208
 17498  002A88  6F61               	movwf	?_putsUSART& (0+255),b
 17499  002A8A  EC6A  F027         	call	_putsUSART	;wreg free
 17500                           
 17501                           ;main.c: 2302: putsUSART((char *) "RX - Read CAN frame.\r\n");
 17502  002A8E  0E7C               	movlw	high STR_209
 17503  002A90  0100               	movlb	0	; () banked
 17504  002A92  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17505  002A94  0EC1               	movlw	low STR_209
 17506  002A96  6F61               	movwf	?_putsUSART& (0+255),b
 17507  002A98  EC6A  F027         	call	_putsUSART	;wreg free
 17508                           
 17509                           ;main.c: 2303: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 17510  002A9C  0E7A               	movlw	high STR_210
 17511  002A9E  0100               	movlb	0	; () banked
 17512  002AA0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17513  002AA2  0E28               	movlw	low STR_210
 17514  002AA4  6F61               	movwf	?_putsUSART& (0+255),b
 17515  002AA6  EC6A  F027         	call	_putsUSART	;wreg free
 17516                           
 17517                           ;main.c: 2304: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 17518  002AAA  0E78               	movlw	high STR_211
 17519  002AAC  0100               	movlb	0	; () banked
 17520  002AAE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17521  002AB0  0E45               	movlw	low STR_211
 17522  002AB2  6F61               	movwf	?_putsUSART& (0+255),b
 17523  002AB4  EC6A  F027         	call	_putsUSART	;wreg free
 17524                           
 17525                           ;main.c: 2305: putsUSART((char *) "HELP - Display this help information.\r\n");
 17526  002AB8  0E77               	movlw	high STR_212
 17527  002ABA  0100               	movlb	0	; () banked
 17528  002ABC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17529  002ABE  0EA6               	movlw	low STR_212
 17530  002AC0  6F61               	movwf	?_putsUSART& (0+255),b
 17531  002AC2  EC6A  F027         	call	_putsUSART	;wreg free
 17532                           
 17533                           ;main.c: 2306: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 17534  002AC6  0E76               	movlw	high STR_213
 17535  002AC8  0100               	movlb	0	; () banked
 17536  002ACA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17537  002ACC  0E72               	movlw	low STR_213
 17538  002ACE  6F61               	movwf	?_putsUSART& (0+255),b
 17539  002AD0  EC6A  F027         	call	_putsUSART	;wreg free
 17540                           
 17541                           ;main.c: 2307: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 17542  002AD4  0E71               	movlw	high STR_214
 17543  002AD6  0100               	movlb	0	; () banked
 17544  002AD8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17545  002ADA  0E32               	movlw	low STR_214
 17546  002ADC  6F61               	movwf	?_putsUSART& (0+255),b
 17547  002ADE  EC6A  F027         	call	_putsUSART	;wreg free
 17548                           
 17549                           ;main.c: 2308: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 17550  002AE2  0E71               	movlw	high STR_215
 17551  002AE4  0100               	movlb	0	; () banked
 17552  002AE6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17553  002AE8  0EFD               	movlw	low STR_215
 17554  002AEA  6F61               	movwf	?_putsUSART& (0+255),b
 17555  002AEC  EC6A  F027         	call	_putsUSART	;wreg free
 17556                           
 17557                           ;main.c: 2309: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 17558  002AF0  0E70               	movlw	high STR_216
 17559  002AF2  0100               	movlb	0	; () banked
 17560  002AF4  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17561  002AF6  0E9E               	movlw	low STR_216
 17562  002AF8  6F61               	movwf	?_putsUSART& (0+255),b
 17563  002AFA  EC6A  F027         	call	_putsUSART	;wreg free
 17564                           
 17565                           ;main.c: 2310: putsUSART((char *) "FILTER - Set filter .\r\n");
 17566  002AFE  0E7C               	movlw	high STR_217
 17567  002B00  0100               	movlb	0	; () banked
 17568  002B02  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17569  002B04  0E19               	movlw	low STR_217
 17570  002B06  6F61               	movwf	?_putsUSART& (0+255),b
 17571  002B08  EC6A  F027         	call	_putsUSART	;wreg free
 17572                           
 17573                           ;main.c: 2311: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 17574  002B0C  0E70               	movlw	high STR_218
 17575  002B0E  0100               	movlb	0	; () banked
 17576  002B10  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17577  002B12  0E50               	movlw	low STR_218
 17578  002B14  6F61               	movwf	?_putsUSART& (0+255),b
 17579  002B16  EC6A  F027         	call	_putsUSART	;wreg free
 17580                           
 17581                           ;main.c: 2312: putsUSART((char *) "MASK - Set mask .\r\n");
 17582  002B1A  0E7D               	movlw	high STR_219
 17583  002B1C  0100               	movlb	0	; () banked
 17584  002B1E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17585  002B20  0E47               	movlw	low STR_219
 17586  002B22  6F61               	movwf	?_putsUSART& (0+255),b
 17587  002B24  EC6A  F027         	call	_putsUSART	;wreg free
 17588                           
 17589                           ;main.c: 2313: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 17590  002B28  0E70               	movlw	high STR_220
 17591  002B2A  0100               	movlb	0	; () banked
 17592  002B2C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17593  002B2E  0EEB               	movlw	low STR_220
 17594  002B30  6F61               	movwf	?_putsUSART& (0+255),b
 17595  002B32  EC6A  F027         	call	_putsUSART	;wreg free
 17596                           
 17597                           ;main.c: 2314: putsUSART((char *) "SET - Persistent functionality.\r\n");
 17598  002B36  0E79               	movlw	high STR_221
 17599  002B38  0100               	movlb	0	; () banked
 17600  002B3A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17601  002B3C  0EE4               	movlw	low STR_221
 17602  002B3E  6F61               	movwf	?_putsUSART& (0+255),b
 17603  002B40  EC6A  F027         	call	_putsUSART	;wreg free
 17604                           
 17605                           ;main.c: 2315: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 17606  002B44  0E76               	movlw	high STR_222
 17607  002B46  0100               	movlb	0	; () banked
 17608  002B48  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17609  002B4A  0E43               	movlw	low STR_222
 17610  002B4C  6F61               	movwf	?_putsUSART& (0+255),b
 17611  002B4E  EC6A  F027         	call	_putsUSART	;wreg free
 17612                           
 17613                           ;main.c: 2316: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 17614  002B52  0E76               	movlw	high STR_223
 17615  002B54  0100               	movlb	0	; () banked
 17616  002B56  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17617  002B58  0E14               	movlw	low STR_223
 17618  002B5A  6F61               	movwf	?_putsUSART& (0+255),b
 17619  002B5C  EC6A  F027         	call	_putsUSART	;wreg free
 17620                           
 17621                           ;main.c: 2317: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 17622  002B60  0E71               	movlw	high STR_224
 17623  002B62  0100               	movlb	0	; () banked
 17624  002B64  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17625  002B66  0EBA               	movlw	low STR_224
 17626  002B68  6F61               	movwf	?_putsUSART& (0+255),b
 17627  002B6A  EC6A  F027         	call	_putsUSART	;wreg free
 17628                           
 17629                           ;main.c: 2318: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 17630  002B6E  0E75               	movlw	high STR_225
 17631  002B70  0100               	movlb	0	; () banked
 17632  002B72  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17633  002B74  0EE3               	movlw	low STR_225
 17634  002B76  6F61               	movwf	?_putsUSART& (0+255),b
 17635  002B78  EC6A  F027         	call	_putsUSART	;wreg free
 17636                           
 17637                           ;main.c: 2319: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 17638  002B7C  0E73               	movlw	high STR_226
 17639  002B7E  0100               	movlb	0	; () banked
 17640  002B80  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17641  002B82  0EA2               	movlw	low STR_226
 17642  002B84  6F61               	movwf	?_putsUSART& (0+255),b
 17643  002B86  EC6A  F027         	call	_putsUSART	;wreg free
 17644                           
 17645                           ;main.c: 2320: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 17646  002B8A  0E72               	movlw	high STR_227
 17647  002B8C  0100               	movlb	0	; () banked
 17648  002B8E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17649  002B90  0E82               	movlw	low STR_227
 17650  002B92  6F61               	movwf	?_putsUSART& (0+255),b
 17651  002B94  EC6A  F027         	call	_putsUSART	;wreg free
 17652                           
 17653                           ;main.c: 2321: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 17654  002B98  0E78               	movlw	high STR_228
 17655  002B9A  0100               	movlb	0	; () banked
 17656  002B9C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17657  002B9E  0EE1               	movlw	low STR_228
 17658  002BA0  6F61               	movwf	?_putsUSART& (0+255),b
 17659  002BA2  EF6A  F027         	goto	_putsUSART	;wreg free
 17660  002BA6                     __end_of_printHelp:
 17661                           	opt stack 0
 17662                           tblptru	equ	0xFF8
 17663                           tblptrh	equ	0xFF7
 17664                           tblptrl	equ	0xFF6
 17665                           tablat	equ	0xFF5
 17666                           prodh	equ	0xFF4
 17667                           prodl	equ	0xFF3
 17668                           intcon	equ	0xFF2
 17669                           indf0	equ	0xFEF
 17670                           postinc0	equ	0xFEE
 17671                           fsr0h	equ	0xFEA
 17672                           fsr0l	equ	0xFE9
 17673                           wreg	equ	0xFE8
 17674                           indf1	equ	0xFE7
 17675                           postinc1	equ	0xFE6
 17676                           postdec1	equ	0xFE5
 17677                           fsr1h	equ	0xFE2
 17678                           fsr1l	equ	0xFE1
 17679                           indf2	equ	0xFDF
 17680                           postinc2	equ	0xFDE
 17681                           postdec2	equ	0xFDD
 17682                           plusw2	equ	0xFDB
 17683                           fsr2h	equ	0xFDA
 17684                           fsr2l	equ	0xFD9
 17685                           status	equ	0xFD8
 17686                           
 17687 ;; *************** function _printErrors *****************
 17688 ;; Defined at:
 17689 ;;		line 2225 in file "main.c"
 17690 ;; Parameters:    Size  Location     Type
 17691 ;;		None
 17692 ;; Auto vars:     Size  Location     Type
 17693 ;;		None
 17694 ;; Return value:  Size  Location     Type
 17695 ;;		None               void
 17696 ;; Registers used:
 17697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17698 ;; Tracked objects:
 17699 ;;		On entry : F/1
 17700 ;;		On exit  : 0/0
 17701 ;;		Unchanged: 0/0
 17702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17703 ;;      Params:         0       0       0       0       0       0       0
 17704 ;;      Locals:         0      12       0       0       0       0       0
 17705 ;;      Temps:          0       0       0       0       0       0       0
 17706 ;;      Totals:         0      12       0       0       0       0       0
 17707 ;;Total ram usage:       12 bytes
 17708 ;; Hardware stack levels used:    1
 17709 ;; Hardware stack levels required when called:    5
 17710 ;; This function calls:
 17711 ;;		_putsUSART
 17712 ;;		_sprintf
 17713 ;; This function is called by:
 17714 ;;		_doModeVerbose
 17715 ;; This function uses a non-reentrant model
 17716 ;;
 17717                           
 17718                           	psect	text37
 17719  002068                     __ptext37:
 17720                           	opt stack 0
 17721  002068                     _printErrors:
 17722                           	opt stack 24
 17723                           
 17724                           ; BSR set to: 1
 17725                           ;main.c: 2226: putsUSART((char *) "CAN Receive overruns: ");
 17726                           
 17727                           ;incstack = 0
 17728                           ;incstack = 0
 17729  002068  0E7C               	movlw	high STR_167
 17730  00206A  0100               	movlb	0	; () banked
 17731  00206C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17732  00206E  0ED8               	movlw	low STR_167
 17733  002070  6F61               	movwf	?_putsUSART& (0+255),b
 17734  002072  EC6A  F027         	call	_putsUSART	;wreg free
 17735                           
 17736                           ;main.c: 2227: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 17737  002076  0101               	movlb	1	; () banked
 17738  002078  6700               	tstfsz	_bHex& (0+255),b
 17739  00207A  D005               	goto	l10862
 17740                           
 17741                           ; BSR set to: 1
 17742  00207C  0E7F               	movlw	high STR_153
 17743  00207E  0100               	movlb	0	; () banked
 17744  002080  6F95               	movwf	(_printErrors$1396+1)& (0+255),b
 17745  002082  0EE1               	movlw	low STR_153
 17746  002084  D004               	goto	L14
 17747  002086                     l10862:
 17748                           
 17749                           ; BSR set to: 1
 17750  002086  0E7F               	movlw	high STR_168
 17751  002088  0100               	movlb	0	; () banked
 17752  00208A  6F95               	movwf	(_printErrors$1396+1)& (0+255),b
 17753  00208C  0E16               	movlw	low STR_168
 17754  00208E                     L14:
 17755  00208E  6F94               	movwf	_printErrors$1396& (0+255),b
 17756                           
 17757                           ; BSR set to: 0
 17758  002090  0E01               	movlw	high _wrkbuf
 17759  002092  0100               	movlb	0	; () banked
 17760  002094  6F77               	movwf	(?_sprintf+1)& (0+255),b
 17761  002096  0E54               	movlw	low _wrkbuf
 17762  002098  6F76               	movwf	?_sprintf& (0+255),b
 17763  00209A  C094  F078         	movff	_printErrors$1396,?_sprintf+2
 17764  00209E  C095  F079         	movff	_printErrors$1396+1,?_sprintf+3
 17765  0020A2  C0D1  F07A         	movff	_can_receiveOverruns,?_sprintf+4
 17766  0020A6  C0D2  F07B         	movff	_can_receiveOverruns+1,?_sprintf+5
 17767  0020AA  C0D3  F07C         	movff	_can_receiveOverruns+2,?_sprintf+6
 17768  0020AE  C0D4  F07D         	movff	_can_receiveOverruns+3,?_sprintf+7
 17769  0020B2  ECDD  F00A         	call	_sprintf	;wreg free
 17770                           
 17771                           ; BSR set to: 0
 17772                           ;main.c: 2228: putsUSART(wrkbuf);
 17773  0020B6  0E01               	movlw	high _wrkbuf
 17774  0020B8  0100               	movlb	0	; () banked
 17775  0020BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17776  0020BC  0E54               	movlw	low _wrkbuf
 17777  0020BE  6F61               	movwf	?_putsUSART& (0+255),b
 17778  0020C0  EC6A  F027         	call	_putsUSART	;wreg free
 17779                           
 17780                           ;main.c: 2229: putsUSART((char *) "\r\n");
 17781  0020C4  0E74               	movlw	high (STR_188+50)
 17782  0020C6  0100               	movlb	0	; () banked
 17783  0020C8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17784  0020CA  0EAE               	movlw	low (STR_188+50)
 17785  0020CC  6F61               	movwf	?_putsUSART& (0+255),b
 17786  0020CE  EC6A  F027         	call	_putsUSART	;wreg free
 17787                           
 17788                           ;main.c: 2231: putsUSART((char *) "CAN Transmit overruns: ");
 17789  0020D2  0E7C               	movlw	high STR_171
 17790  0020D4  0100               	movlb	0	; () banked
 17791  0020D6  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17792  0020D8  0EA9               	movlw	low STR_171
 17793  0020DA  6F61               	movwf	?_putsUSART& (0+255),b
 17794  0020DC  EC6A  F027         	call	_putsUSART	;wreg free
 17795                           
 17796                           ;main.c: 2232: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 17797  0020E0  0101               	movlb	1	; () banked
 17798  0020E2  6700               	tstfsz	_bHex& (0+255),b
 17799  0020E4  D005               	goto	l10876
 17800                           
 17801                           ; BSR set to: 1
 17802  0020E6  0E7F               	movlw	high STR_153
 17803  0020E8  0100               	movlb	0	; () banked
 17804  0020EA  6F97               	movwf	(_printErrors$1402+1)& (0+255),b
 17805  0020EC  0EE1               	movlw	low STR_153
 17806  0020EE  D004               	goto	L15
 17807  0020F0                     l10876:
 17808                           
 17809                           ; BSR set to: 1
 17810  0020F0  0E7F               	movlw	high STR_168
 17811  0020F2  0100               	movlb	0	; () banked
 17812  0020F4  6F97               	movwf	(_printErrors$1402+1)& (0+255),b
 17813  0020F6  0E16               	movlw	low STR_168
 17814  0020F8                     L15:
 17815  0020F8  6F96               	movwf	_printErrors$1402& (0+255),b
 17816                           
 17817                           ; BSR set to: 0
 17818  0020FA  0E01               	movlw	high _wrkbuf
 17819  0020FC  0100               	movlb	0	; () banked
 17820  0020FE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 17821  002100  0E54               	movlw	low _wrkbuf
 17822  002102  6F76               	movwf	?_sprintf& (0+255),b
 17823  002104  C096  F078         	movff	_printErrors$1402,?_sprintf+2
 17824  002108  C097  F079         	movff	_printErrors$1402+1,?_sprintf+3
 17825  00210C  C0D5  F07A         	movff	_can_transmitOverruns,?_sprintf+4
 17826  002110  C0D6  F07B         	movff	_can_transmitOverruns+1,?_sprintf+5
 17827  002114  C0D7  F07C         	movff	_can_transmitOverruns+2,?_sprintf+6
 17828  002118  C0D8  F07D         	movff	_can_transmitOverruns+3,?_sprintf+7
 17829  00211C  ECDD  F00A         	call	_sprintf	;wreg free
 17830                           
 17831                           ; BSR set to: 0
 17832                           ;main.c: 2233: putsUSART(wrkbuf);
 17833  002120  0E01               	movlw	high _wrkbuf
 17834  002122  0100               	movlb	0	; () banked
 17835  002124  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17836  002126  0E54               	movlw	low _wrkbuf
 17837  002128  6F61               	movwf	?_putsUSART& (0+255),b
 17838  00212A  EC6A  F027         	call	_putsUSART	;wreg free
 17839                           
 17840                           ;main.c: 2234: putsUSART((char *) "\r\n");
 17841  00212E  0E74               	movlw	high (STR_188+50)
 17842  002130  0100               	movlb	0	; () banked
 17843  002132  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17844  002134  0EAE               	movlw	low (STR_188+50)
 17845  002136  6F61               	movwf	?_putsUSART& (0+255),b
 17846  002138  EC6A  F027         	call	_putsUSART	;wreg free
 17847                           
 17848                           ;main.c: 2236: putsUSART((char *) "UART Receive overruns: ");
 17849  00213C  0E7C               	movlw	high STR_175
 17850  00213E  0100               	movlb	0	; () banked
 17851  002140  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17852  002142  0E91               	movlw	low STR_175
 17853  002144  6F61               	movwf	?_putsUSART& (0+255),b
 17854  002146  EC6A  F027         	call	_putsUSART	;wreg free
 17855                           
 17856                           ;main.c: 2237: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 17857  00214A  0101               	movlb	1	; () banked
 17858  00214C  6700               	tstfsz	_bHex& (0+255),b
 17859  00214E  D005               	goto	l10890
 17860                           
 17861                           ; BSR set to: 1
 17862  002150  0E7F               	movlw	high STR_153
 17863  002152  0100               	movlb	0	; () banked
 17864  002154  6F99               	movwf	(_printErrors$1408+1)& (0+255),b
 17865  002156  0EE1               	movlw	low STR_153
 17866  002158  D004               	goto	L16
 17867  00215A                     l10890:
 17868                           
 17869                           ; BSR set to: 1
 17870  00215A  0E7F               	movlw	high STR_168
 17871  00215C  0100               	movlb	0	; () banked
 17872  00215E  6F99               	movwf	(_printErrors$1408+1)& (0+255),b
 17873  002160  0E16               	movlw	low STR_168
 17874  002162                     L16:
 17875  002162  6F98               	movwf	_printErrors$1408& (0+255),b
 17876                           
 17877                           ; BSR set to: 0
 17878  002164  0E01               	movlw	high _wrkbuf
 17879  002166  0100               	movlb	0	; () banked
 17880  002168  6F77               	movwf	(?_sprintf+1)& (0+255),b
 17881  00216A  0E54               	movlw	low _wrkbuf
 17882  00216C  6F76               	movwf	?_sprintf& (0+255),b
 17883  00216E  C098  F078         	movff	_printErrors$1408,?_sprintf+2
 17884  002172  C099  F079         	movff	_printErrors$1408+1,?_sprintf+3
 17885  002176  C0F1  F07A         	movff	_uart_receiveOverruns,?_sprintf+4
 17886  00217A  C0F2  F07B         	movff	_uart_receiveOverruns+1,?_sprintf+5
 17887  00217E  C0F3  F07C         	movff	_uart_receiveOverruns+2,?_sprintf+6
 17888  002182  C0F4  F07D         	movff	_uart_receiveOverruns+3,?_sprintf+7
 17889  002186  ECDD  F00A         	call	_sprintf	;wreg free
 17890                           
 17891                           ; BSR set to: 0
 17892                           ;main.c: 2238: putsUSART(wrkbuf);
 17893  00218A  0E01               	movlw	high _wrkbuf
 17894  00218C  0100               	movlb	0	; () banked
 17895  00218E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17896  002190  0E54               	movlw	low _wrkbuf
 17897  002192  6F61               	movwf	?_putsUSART& (0+255),b
 17898  002194  EC6A  F027         	call	_putsUSART	;wreg free
 17899                           
 17900                           ;main.c: 2239: putsUSART((char *) "\r\n");
 17901  002198  0E74               	movlw	high (STR_188+50)
 17902  00219A  0100               	movlb	0	; () banked
 17903  00219C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17904  00219E  0EAE               	movlw	low (STR_188+50)
 17905  0021A0  6F61               	movwf	?_putsUSART& (0+255),b
 17906  0021A2  EC6A  F027         	call	_putsUSART	;wreg free
 17907                           
 17908                           ;main.c: 2241: putsUSART((char *) "UART Receive overruns: ");
 17909  0021A6  0E7C               	movlw	high STR_175
 17910  0021A8  0100               	movlb	0	; () banked
 17911  0021AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17912  0021AC  0E91               	movlw	low STR_175
 17913  0021AE  6F61               	movwf	?_putsUSART& (0+255),b
 17914  0021B0  EC6A  F027         	call	_putsUSART	;wreg free
 17915                           
 17916                           ;main.c: 2242: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 17917  0021B4  0101               	movlb	1	; () banked
 17918  0021B6  6700               	tstfsz	_bHex& (0+255),b
 17919  0021B8  D005               	goto	l10904
 17920                           
 17921                           ; BSR set to: 1
 17922  0021BA  0E7F               	movlw	high STR_153
 17923  0021BC  0100               	movlb	0	; () banked
 17924  0021BE  6F9B               	movwf	(_printErrors$1414+1)& (0+255),b
 17925  0021C0  0EE1               	movlw	low STR_153
 17926  0021C2  D004               	goto	L17
 17927  0021C4                     l10904:
 17928                           
 17929                           ; BSR set to: 1
 17930  0021C4  0E7F               	movlw	high STR_168
 17931  0021C6  0100               	movlb	0	; () banked
 17932  0021C8  6F9B               	movwf	(_printErrors$1414+1)& (0+255),b
 17933  0021CA  0E16               	movlw	low STR_168
 17934  0021CC                     L17:
 17935  0021CC  6F9A               	movwf	_printErrors$1414& (0+255),b
 17936                           
 17937                           ; BSR set to: 0
 17938  0021CE  0E01               	movlw	high _wrkbuf
 17939  0021D0  0100               	movlb	0	; () banked
 17940  0021D2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 17941  0021D4  0E54               	movlw	low _wrkbuf
 17942  0021D6  6F76               	movwf	?_sprintf& (0+255),b
 17943  0021D8  C09A  F078         	movff	_printErrors$1414,?_sprintf+2
 17944  0021DC  C09B  F079         	movff	_printErrors$1414+1,?_sprintf+3
 17945  0021E0  C029  F07A         	movff	_uart_transmitOverruns,?_sprintf+4
 17946  0021E4  C02A  F07B         	movff	_uart_transmitOverruns+1,?_sprintf+5
 17947  0021E8  C02B  F07C         	movff	_uart_transmitOverruns+2,?_sprintf+6
 17948  0021EC  C02C  F07D         	movff	_uart_transmitOverruns+3,?_sprintf+7
 17949  0021F0  ECDD  F00A         	call	_sprintf	;wreg free
 17950                           
 17951                           ; BSR set to: 0
 17952                           ;main.c: 2243: putsUSART(wrkbuf);
 17953  0021F4  0E01               	movlw	high _wrkbuf
 17954  0021F6  0100               	movlb	0	; () banked
 17955  0021F8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17956  0021FA  0E54               	movlw	low _wrkbuf
 17957  0021FC  6F61               	movwf	?_putsUSART& (0+255),b
 17958  0021FE  EC6A  F027         	call	_putsUSART	;wreg free
 17959                           
 17960                           ;main.c: 2244: putsUSART((char *) "\r\n");
 17961  002202  0E74               	movlw	high (STR_188+50)
 17962  002204  0100               	movlb	0	; () banked
 17963  002206  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17964  002208  0EAE               	movlw	low (STR_188+50)
 17965  00220A  6F61               	movwf	?_putsUSART& (0+255),b
 17966  00220C  EC6A  F027         	call	_putsUSART	;wreg free
 17967                           
 17968                           ;main.c: 2246: putsUSART((char *) "Transmit Error Counter: ");
 17969  002210  0E7B               	movlw	high STR_183
 17970  002212  0100               	movlb	0	; () banked
 17971  002214  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 17972  002216  0EE8               	movlw	low STR_183
 17973  002218  6F61               	movwf	?_putsUSART& (0+255),b
 17974  00221A  EC6A  F027         	call	_putsUSART	;wreg free
 17975                           
 17976                           ;main.c: 2247: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 17977  00221E  0101               	movlb	1	; () banked
 17978  002220  6700               	tstfsz	_bHex& (0+255),b
 17979  002222  D005               	goto	l10918
 17980                           
 17981                           ; BSR set to: 1
 17982  002224  0E7F               	movlw	high STR_53
 17983  002226  0100               	movlb	0	; () banked
 17984  002228  6F9D               	movwf	(_printErrors$1420+1)& (0+255),b
 17985  00222A  0EEE               	movlw	low STR_53
 17986  00222C  D004               	goto	L18
 17987  00222E                     l10918:
 17988                           
 17989                           ; BSR set to: 1
 17990  00222E  0E7F               	movlw	high STR_52
 17991  002230  0100               	movlb	0	; () banked
 17992  002232  6F9D               	movwf	(_printErrors$1420+1)& (0+255),b
 17993  002234  0E65               	movlw	low STR_52
 17994  002236                     L18:
 17995  002236  6F9C               	movwf	_printErrors$1420& (0+255),b
 17996                           
 17997                           ; BSR set to: 0
 17998  002238  0E01               	movlw	high _wrkbuf
 17999  00223A  0100               	movlb	0	; () banked
 18000  00223C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18001  00223E  0E54               	movlw	low _wrkbuf
 18002  002240  6F76               	movwf	?_sprintf& (0+255),b
 18003  002242  C09C  F078         	movff	_printErrors$1420,?_sprintf+2
 18004  002246  C09D  F079         	movff	_printErrors$1420+1,?_sprintf+3
 18005  00224A  CF76 F07A          	movff	3958,?_sprintf+4	;volatile
 18006  00224E  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18007  002250  ECDD  F00A         	call	_sprintf	;wreg free
 18008                           
 18009                           ; BSR set to: 0
 18010                           ;main.c: 2248: putsUSART(wrkbuf);
 18011  002254  0E01               	movlw	high _wrkbuf
 18012  002256  0100               	movlb	0	; () banked
 18013  002258  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18014  00225A  0E54               	movlw	low _wrkbuf
 18015  00225C  6F61               	movwf	?_putsUSART& (0+255),b
 18016  00225E  EC6A  F027         	call	_putsUSART	;wreg free
 18017                           
 18018                           ;main.c: 2249: putsUSART((char *) "\r\n");
 18019  002262  0E74               	movlw	high (STR_188+50)
 18020  002264  0100               	movlb	0	; () banked
 18021  002266  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18022  002268  0EAE               	movlw	low (STR_188+50)
 18023  00226A  6F61               	movwf	?_putsUSART& (0+255),b
 18024  00226C  EC6A  F027         	call	_putsUSART	;wreg free
 18025                           
 18026                           ;main.c: 2251: if (COMSTATbits.TXWARN) {
 18027  002270  A474               	btfss	3956,2,c	;volatile
 18028  002272  D007               	goto	l10930
 18029                           
 18030                           ;main.c: 2252: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 18031  002274  0E72               	movlw	high STR_187
 18032  002276  0100               	movlb	0	; () banked
 18033  002278  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18034  00227A  0EC0               	movlw	low STR_187
 18035  00227C  6F61               	movwf	?_putsUSART& (0+255),b
 18036  00227E  EC6A  F027         	call	_putsUSART	;wreg free
 18037  002282                     l10930:
 18038                           
 18039                           ;main.c: 2253: }
 18040                           ;main.c: 2255: if (COMSTATbits.TXBO) {
 18041  002282  AA74               	btfss	3956,5,c	;volatile
 18042  002284  D007               	goto	l10934
 18043                           
 18044                           ;main.c: 2256: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 18045  002286  0E74               	movlw	high STR_188
 18046  002288  0100               	movlb	0	; () banked
 18047  00228A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18048  00228C  0E7C               	movlw	low STR_188
 18049  00228E  6F61               	movwf	?_putsUSART& (0+255),b
 18050  002290  EC6A  F027         	call	_putsUSART	;wreg free
 18051  002294                     l10934:
 18052                           
 18053                           ;main.c: 2257: }
 18054                           ;main.c: 2259: if (COMSTATbits.TXBP) {
 18055  002294  A874               	btfss	3956,4,c	;volatile
 18056  002296  D007               	goto	l1069
 18057                           
 18058                           ;main.c: 2260: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 18059  002298  0E72               	movlw	high STR_189
 18060  00229A  0100               	movlb	0	; () banked
 18061  00229C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18062  00229E  0EFA               	movlw	low STR_189
 18063  0022A0  6F61               	movwf	?_putsUSART& (0+255),b
 18064  0022A2  EC6A  F027         	call	_putsUSART	;wreg free
 18065  0022A6                     l1069:
 18066                           
 18067                           ;main.c: 2261: }
 18068                           ;main.c: 2264: putsUSART((char *) "Receive Error Counter: ");
 18069  0022A6  0E7C               	movlw	high STR_190
 18070  0022A8  0100               	movlb	0	; () banked
 18071  0022AA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18072  0022AC  0E79               	movlw	low STR_190
 18073  0022AE  6F61               	movwf	?_putsUSART& (0+255),b
 18074  0022B0  EC6A  F027         	call	_putsUSART	;wreg free
 18075                           
 18076                           ;main.c: 2265: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 18077  0022B4  0101               	movlb	1	; () banked
 18078  0022B6  6700               	tstfsz	_bHex& (0+255),b
 18079  0022B8  D005               	goto	l10942
 18080                           
 18081                           ; BSR set to: 1
 18082  0022BA  0E7F               	movlw	high STR_53
 18083  0022BC  0100               	movlb	0	; () banked
 18084  0022BE  6F9F               	movwf	(_printErrors$1429+1)& (0+255),b
 18085  0022C0  0EEE               	movlw	low STR_53
 18086  0022C2  D004               	goto	L19
 18087  0022C4                     l10942:
 18088                           
 18089                           ; BSR set to: 1
 18090  0022C4  0E7F               	movlw	high STR_52
 18091  0022C6  0100               	movlb	0	; () banked
 18092  0022C8  6F9F               	movwf	(_printErrors$1429+1)& (0+255),b
 18093  0022CA  0E65               	movlw	low STR_52
 18094  0022CC                     L19:
 18095  0022CC  6F9E               	movwf	_printErrors$1429& (0+255),b
 18096                           
 18097                           ; BSR set to: 0
 18098  0022CE  0E01               	movlw	high _wrkbuf
 18099  0022D0  0100               	movlb	0	; () banked
 18100  0022D2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18101  0022D4  0E54               	movlw	low _wrkbuf
 18102  0022D6  6F76               	movwf	?_sprintf& (0+255),b
 18103  0022D8  C09E  F078         	movff	_printErrors$1429,?_sprintf+2
 18104  0022DC  C09F  F079         	movff	_printErrors$1429+1,?_sprintf+3
 18105  0022E0  CF75 F07A          	movff	3957,?_sprintf+4	;volatile
 18106  0022E4  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 18107  0022E6  ECDD  F00A         	call	_sprintf	;wreg free
 18108                           
 18109                           ; BSR set to: 0
 18110                           ;main.c: 2266: putsUSART(wrkbuf);
 18111  0022EA  0E01               	movlw	high _wrkbuf
 18112  0022EC  0100               	movlb	0	; () banked
 18113  0022EE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18114  0022F0  0E54               	movlw	low _wrkbuf
 18115  0022F2  6F61               	movwf	?_putsUSART& (0+255),b
 18116  0022F4  EC6A  F027         	call	_putsUSART	;wreg free
 18117                           
 18118                           ;main.c: 2267: putsUSART((char *) "\r\n");
 18119  0022F8  0E74               	movlw	high (STR_188+50)
 18120  0022FA  0100               	movlb	0	; () banked
 18121  0022FC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18122  0022FE  0EAE               	movlw	low (STR_188+50)
 18123  002300  6F61               	movwf	?_putsUSART& (0+255),b
 18124  002302  EC6A  F027         	call	_putsUSART	;wreg free
 18125                           
 18126                           ;main.c: 2269: if (COMSTATbits.RXWARN) {
 18127  002306  A274               	btfss	3956,1,c	;volatile
 18128  002308  D007               	goto	l10954
 18129                           
 18130                           ;main.c: 2270: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 18131  00230A  0E73               	movlw	high STR_194
 18132  00230C  0100               	movlb	0	; () banked
 18133  00230E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18134  002310  0E6B               	movlw	low STR_194
 18135  002312  6F61               	movwf	?_putsUSART& (0+255),b
 18136  002314  EC6A  F027         	call	_putsUSART	;wreg free
 18137  002318                     l10954:
 18138                           
 18139                           ;main.c: 2271: }
 18140                           ;main.c: 2273: if (COMSTATbits.RXBP) {
 18141  002318  A674               	btfss	3956,3,c	;volatile
 18142  00231A  D007               	goto	l10958
 18143                           
 18144                           ;main.c: 2274: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 18145  00231C  0E74               	movlw	high STR_195
 18146  00231E  0100               	movlb	0	; () banked
 18147  002320  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18148  002322  0E10               	movlw	low STR_195
 18149  002324  6F61               	movwf	?_putsUSART& (0+255),b
 18150  002326  EC6A  F027         	call	_putsUSART	;wreg free
 18151  00232A                     l10958:
 18152                           
 18153                           ;main.c: 2275: }
 18154                           ;main.c: 2277: if (COMSTATbits.EWARN) {
 18155  00232A  A074               	btfss	3956,0,c	;volatile
 18156  00232C  D007               	goto	l1077
 18157                           
 18158                           ;main.c: 2278: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 18159  00232E  0E74               	movlw	high STR_196
 18160  002330  0100               	movlb	0	; () banked
 18161  002332  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18162  002334  0EE6               	movlw	low STR_196
 18163  002336  6F61               	movwf	?_putsUSART& (0+255),b
 18164  002338  EC6A  F027         	call	_putsUSART	;wreg free
 18165  00233C                     l1077:
 18166  00233C  0012               	return	
 18167  00233E                     __end_of_printErrors:
 18168                           	opt stack 0
 18169                           tblptru	equ	0xFF8
 18170                           tblptrh	equ	0xFF7
 18171                           tblptrl	equ	0xFF6
 18172                           tablat	equ	0xFF5
 18173                           prodh	equ	0xFF4
 18174                           prodl	equ	0xFF3
 18175                           intcon	equ	0xFF2
 18176                           indf0	equ	0xFEF
 18177                           postinc0	equ	0xFEE
 18178                           fsr0h	equ	0xFEA
 18179                           fsr0l	equ	0xFE9
 18180                           wreg	equ	0xFE8
 18181                           indf1	equ	0xFE7
 18182                           postinc1	equ	0xFE6
 18183                           postdec1	equ	0xFE5
 18184                           fsr1h	equ	0xFE2
 18185                           fsr1l	equ	0xFE1
 18186                           indf2	equ	0xFDF
 18187                           postinc2	equ	0xFDE
 18188                           postdec2	equ	0xFDD
 18189                           plusw2	equ	0xFDB
 18190                           fsr2h	equ	0xFDA
 18191                           fsr2l	equ	0xFD9
 18192                           status	equ	0xFD8
 18193                           
 18194 ;; *************** function _printStatistics *****************
 18195 ;; Defined at:
 18196 ;;		line 2198 in file "main.c"
 18197 ;; Parameters:    Size  Location     Type
 18198 ;;		None
 18199 ;; Auto vars:     Size  Location     Type
 18200 ;;		None
 18201 ;; Return value:  Size  Location     Type
 18202 ;;		None               void
 18203 ;; Registers used:
 18204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18205 ;; Tracked objects:
 18206 ;;		On entry : F/1
 18207 ;;		On exit  : 0/0
 18208 ;;		Unchanged: 0/0
 18209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18210 ;;      Params:         0       0       0       0       0       0       0
 18211 ;;      Locals:         0       8       0       0       0       0       0
 18212 ;;      Temps:          0       0       0       0       0       0       0
 18213 ;;      Totals:         0       8       0       0       0       0       0
 18214 ;;Total ram usage:        8 bytes
 18215 ;; Hardware stack levels used:    1
 18216 ;; Hardware stack levels required when called:    5
 18217 ;; This function calls:
 18218 ;;		_putsUSART
 18219 ;;		_sprintf
 18220 ;; This function is called by:
 18221 ;;		_doModeVerbose
 18222 ;; This function uses a non-reentrant model
 18223 ;;
 18224                           
 18225                           	psect	text38
 18226  002BA6                     __ptext38:
 18227                           	opt stack 0
 18228  002BA6                     _printStatistics:
 18229                           	opt stack 24
 18230                           
 18231                           ; BSR set to: 1
 18232                           ;main.c: 2199: putsUSART((char *) "Sent CAN frames: ");
 18233                           
 18234                           ;incstack = 0
 18235                           ;incstack = 0
 18236  002BA6  0E7E               	movlw	high STR_151
 18237  002BA8  0100               	movlb	0	; () banked
 18238  002BAA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18239  002BAC  0E0A               	movlw	low STR_151
 18240  002BAE  6F61               	movwf	?_putsUSART& (0+255),b
 18241  002BB0  EC6A  F027         	call	_putsUSART	;wreg free
 18242                           
 18243                           ;main.c: 2200: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 18244  002BB4  0101               	movlb	1	; () banked
 18245  002BB6  6700               	tstfsz	_bHex& (0+255),b
 18246  002BB8  D005               	goto	l10806
 18247                           
 18248                           ; BSR set to: 1
 18249  002BBA  0E7F               	movlw	high STR_153
 18250  002BBC  0100               	movlb	0	; () banked
 18251  002BBE  6F95               	movwf	(_printStatistics$1371+1)& (0+255),b
 18252  002BC0  0EE1               	movlw	low STR_153
 18253  002BC2  D004               	goto	L20
 18254  002BC4                     l10806:
 18255                           
 18256                           ; BSR set to: 1
 18257  002BC4  0E7F               	movlw	high STR_152
 18258  002BC6  0100               	movlb	0	; () banked
 18259  002BC8  6F95               	movwf	(_printStatistics$1371+1)& (0+255),b
 18260  002BCA  0E73               	movlw	low STR_152
 18261  002BCC                     L20:
 18262  002BCC  6F94               	movwf	_printStatistics$1371& (0+255),b
 18263                           
 18264                           ; BSR set to: 0
 18265  002BCE  0E01               	movlw	high _wrkbuf
 18266  002BD0  0100               	movlb	0	; () banked
 18267  002BD2  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18268  002BD4  0E54               	movlw	low _wrkbuf
 18269  002BD6  6F76               	movwf	?_sprintf& (0+255),b
 18270  002BD8  C094  F078         	movff	_printStatistics$1371,?_sprintf+2
 18271  002BDC  C095  F079         	movff	_printStatistics$1371+1,?_sprintf+3
 18272  002BE0  C0E5  F07A         	movff	_cntTxFrames,?_sprintf+4
 18273  002BE4  C0E6  F07B         	movff	_cntTxFrames+1,?_sprintf+5
 18274  002BE8  C0E7  F07C         	movff	_cntTxFrames+2,?_sprintf+6
 18275  002BEC  C0E8  F07D         	movff	_cntTxFrames+3,?_sprintf+7
 18276  002BF0  ECDD  F00A         	call	_sprintf	;wreg free
 18277                           
 18278                           ; BSR set to: 0
 18279                           ;main.c: 2201: putsUSART(wrkbuf);
 18280  002BF4  0E01               	movlw	high _wrkbuf
 18281  002BF6  0100               	movlb	0	; () banked
 18282  002BF8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18283  002BFA  0E54               	movlw	low _wrkbuf
 18284  002BFC  6F61               	movwf	?_putsUSART& (0+255),b
 18285  002BFE  EC6A  F027         	call	_putsUSART	;wreg free
 18286                           
 18287                           ;main.c: 2202: putsUSART((char *) "\r\n");
 18288  002C02  0E74               	movlw	high (STR_188+50)
 18289  002C04  0100               	movlb	0	; () banked
 18290  002C06  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18291  002C08  0EAE               	movlw	low (STR_188+50)
 18292  002C0A  6F61               	movwf	?_putsUSART& (0+255),b
 18293  002C0C  EC6A  F027         	call	_putsUSART	;wreg free
 18294                           
 18295                           ;main.c: 2204: putsUSART((char *) "Sent CAN bytes: ");
 18296  002C10  0E7E               	movlw	high STR_155
 18297  002C12  0100               	movlb	0	; () banked
 18298  002C14  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18299  002C16  0E3E               	movlw	low STR_155
 18300  002C18  6F61               	movwf	?_putsUSART& (0+255),b
 18301  002C1A  EC6A  F027         	call	_putsUSART	;wreg free
 18302                           
 18303                           ;main.c: 2205: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 18304  002C1E  0101               	movlb	1	; () banked
 18305  002C20  6700               	tstfsz	_bHex& (0+255),b
 18306  002C22  D005               	goto	l10820
 18307                           
 18308                           ; BSR set to: 1
 18309  002C24  0E7F               	movlw	high STR_153
 18310  002C26  0100               	movlb	0	; () banked
 18311  002C28  6F97               	movwf	(_printStatistics$1377+1)& (0+255),b
 18312  002C2A  0EE1               	movlw	low STR_153
 18313  002C2C  D004               	goto	L21
 18314  002C2E                     l10820:
 18315                           
 18316                           ; BSR set to: 1
 18317  002C2E  0E7F               	movlw	high STR_152
 18318  002C30  0100               	movlb	0	; () banked
 18319  002C32  6F97               	movwf	(_printStatistics$1377+1)& (0+255),b
 18320  002C34  0E73               	movlw	low STR_152
 18321  002C36                     L21:
 18322  002C36  6F96               	movwf	_printStatistics$1377& (0+255),b
 18323                           
 18324                           ; BSR set to: 0
 18325  002C38  0E01               	movlw	high _wrkbuf
 18326  002C3A  0100               	movlb	0	; () banked
 18327  002C3C  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18328  002C3E  0E54               	movlw	low _wrkbuf
 18329  002C40  6F76               	movwf	?_sprintf& (0+255),b
 18330  002C42  C096  F078         	movff	_printStatistics$1377,?_sprintf+2
 18331  002C46  C097  F079         	movff	_printStatistics$1377+1,?_sprintf+3
 18332  002C4A  C0E1  F07A         	movff	_cntTxBytes,?_sprintf+4
 18333  002C4E  C0E2  F07B         	movff	_cntTxBytes+1,?_sprintf+5
 18334  002C52  C0E3  F07C         	movff	_cntTxBytes+2,?_sprintf+6
 18335  002C56  C0E4  F07D         	movff	_cntTxBytes+3,?_sprintf+7
 18336  002C5A  ECDD  F00A         	call	_sprintf	;wreg free
 18337                           
 18338                           ; BSR set to: 0
 18339                           ;main.c: 2206: putsUSART(wrkbuf);
 18340  002C5E  0E01               	movlw	high _wrkbuf
 18341  002C60  0100               	movlb	0	; () banked
 18342  002C62  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18343  002C64  0E54               	movlw	low _wrkbuf
 18344  002C66  6F61               	movwf	?_putsUSART& (0+255),b
 18345  002C68  EC6A  F027         	call	_putsUSART	;wreg free
 18346                           
 18347                           ;main.c: 2207: putsUSART((char *) "\r\n");
 18348  002C6C  0E74               	movlw	high (STR_188+50)
 18349  002C6E  0100               	movlb	0	; () banked
 18350  002C70  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18351  002C72  0EAE               	movlw	low (STR_188+50)
 18352  002C74  6F61               	movwf	?_putsUSART& (0+255),b
 18353  002C76  EC6A  F027         	call	_putsUSART	;wreg free
 18354                           
 18355                           ;main.c: 2209: putsUSART((char *) "Received CAN frames: ");
 18356  002C7A  0E7D               	movlw	high STR_159
 18357  002C7C  0100               	movlb	0	; () banked
 18358  002C7E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18359  002C80  0E1C               	movlw	low STR_159
 18360  002C82  6F61               	movwf	?_putsUSART& (0+255),b
 18361  002C84  EC6A  F027         	call	_putsUSART	;wreg free
 18362                           
 18363                           ;main.c: 2210: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 18364  002C88  0101               	movlb	1	; () banked
 18365  002C8A  6700               	tstfsz	_bHex& (0+255),b
 18366  002C8C  D005               	goto	l10834
 18367                           
 18368                           ; BSR set to: 1
 18369  002C8E  0E7F               	movlw	high STR_153
 18370  002C90  0100               	movlb	0	; () banked
 18371  002C92  6F99               	movwf	(_printStatistics$1383+1)& (0+255),b
 18372  002C94  0EE1               	movlw	low STR_153
 18373  002C96  D004               	goto	L22
 18374  002C98                     l10834:
 18375                           
 18376                           ; BSR set to: 1
 18377  002C98  0E7F               	movlw	high STR_152
 18378  002C9A  0100               	movlb	0	; () banked
 18379  002C9C  6F99               	movwf	(_printStatistics$1383+1)& (0+255),b
 18380  002C9E  0E73               	movlw	low STR_152
 18381  002CA0                     L22:
 18382  002CA0  6F98               	movwf	_printStatistics$1383& (0+255),b
 18383                           
 18384                           ; BSR set to: 0
 18385  002CA2  0E01               	movlw	high _wrkbuf
 18386  002CA4  0100               	movlb	0	; () banked
 18387  002CA6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18388  002CA8  0E54               	movlw	low _wrkbuf
 18389  002CAA  6F76               	movwf	?_sprintf& (0+255),b
 18390  002CAC  C098  F078         	movff	_printStatistics$1383,?_sprintf+2
 18391  002CB0  C099  F079         	movff	_printStatistics$1383+1,?_sprintf+3
 18392  002CB4  C0DD  F07A         	movff	_cntRxFrames,?_sprintf+4
 18393  002CB8  C0DE  F07B         	movff	_cntRxFrames+1,?_sprintf+5
 18394  002CBC  C0DF  F07C         	movff	_cntRxFrames+2,?_sprintf+6
 18395  002CC0  C0E0  F07D         	movff	_cntRxFrames+3,?_sprintf+7
 18396  002CC4  ECDD  F00A         	call	_sprintf	;wreg free
 18397                           
 18398                           ; BSR set to: 0
 18399                           ;main.c: 2211: putsUSART(wrkbuf);
 18400  002CC8  0E01               	movlw	high _wrkbuf
 18401  002CCA  0100               	movlb	0	; () banked
 18402  002CCC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18403  002CCE  0E54               	movlw	low _wrkbuf
 18404  002CD0  6F61               	movwf	?_putsUSART& (0+255),b
 18405  002CD2  EC6A  F027         	call	_putsUSART	;wreg free
 18406                           
 18407                           ;main.c: 2212: putsUSART((char *) "\r\n");
 18408  002CD6  0E74               	movlw	high (STR_188+50)
 18409  002CD8  0100               	movlb	0	; () banked
 18410  002CDA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18411  002CDC  0EAE               	movlw	low (STR_188+50)
 18412  002CDE  6F61               	movwf	?_putsUSART& (0+255),b
 18413  002CE0  EC6A  F027         	call	_putsUSART	;wreg free
 18414                           
 18415                           ;main.c: 2214: putsUSART((char *) "Received CAN bytes: ");
 18416  002CE4  0E7D               	movlw	high STR_163
 18417  002CE6  0100               	movlb	0	; () banked
 18418  002CE8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18419  002CEA  0E32               	movlw	low STR_163
 18420  002CEC  6F61               	movwf	?_putsUSART& (0+255),b
 18421  002CEE  EC6A  F027         	call	_putsUSART	;wreg free
 18422                           
 18423                           ;main.c: 2215: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 18424  002CF2  0101               	movlb	1	; () banked
 18425  002CF4  6700               	tstfsz	_bHex& (0+255),b
 18426  002CF6  D005               	goto	l10848
 18427                           
 18428                           ; BSR set to: 1
 18429  002CF8  0E7F               	movlw	high STR_153
 18430  002CFA  0100               	movlb	0	; () banked
 18431  002CFC  6F9B               	movwf	(_printStatistics$1389+1)& (0+255),b
 18432  002CFE  0EE1               	movlw	low STR_153
 18433  002D00  D004               	goto	L23
 18434  002D02                     l10848:
 18435                           
 18436                           ; BSR set to: 1
 18437  002D02  0E7F               	movlw	high STR_152
 18438  002D04  0100               	movlb	0	; () banked
 18439  002D06  6F9B               	movwf	(_printStatistics$1389+1)& (0+255),b
 18440  002D08  0E73               	movlw	low STR_152
 18441  002D0A                     L23:
 18442  002D0A  6F9A               	movwf	_printStatistics$1389& (0+255),b
 18443                           
 18444                           ; BSR set to: 0
 18445  002D0C  0E01               	movlw	high _wrkbuf
 18446  002D0E  0100               	movlb	0	; () banked
 18447  002D10  6F77               	movwf	(?_sprintf+1)& (0+255),b
 18448  002D12  0E54               	movlw	low _wrkbuf
 18449  002D14  6F76               	movwf	?_sprintf& (0+255),b
 18450  002D16  C09A  F078         	movff	_printStatistics$1389,?_sprintf+2
 18451  002D1A  C09B  F079         	movff	_printStatistics$1389+1,?_sprintf+3
 18452  002D1E  C0D9  F07A         	movff	_cntRxBytes,?_sprintf+4
 18453  002D22  C0DA  F07B         	movff	_cntRxBytes+1,?_sprintf+5
 18454  002D26  C0DB  F07C         	movff	_cntRxBytes+2,?_sprintf+6
 18455  002D2A  C0DC  F07D         	movff	_cntRxBytes+3,?_sprintf+7
 18456  002D2E  ECDD  F00A         	call	_sprintf	;wreg free
 18457                           
 18458                           ; BSR set to: 0
 18459                           ;main.c: 2216: putsUSART(wrkbuf);
 18460  002D32  0E01               	movlw	high _wrkbuf
 18461  002D34  0100               	movlb	0	; () banked
 18462  002D36  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18463  002D38  0E54               	movlw	low _wrkbuf
 18464  002D3A  6F61               	movwf	?_putsUSART& (0+255),b
 18465  002D3C  EC6A  F027         	call	_putsUSART	;wreg free
 18466                           
 18467                           ;main.c: 2217: putsUSART((char *) "\r\n");
 18468  002D40  0E74               	movlw	high (STR_188+50)
 18469  002D42  0100               	movlb	0	; () banked
 18470  002D44  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 18471  002D46  0EAE               	movlw	low (STR_188+50)
 18472  002D48  6F61               	movwf	?_putsUSART& (0+255),b
 18473  002D4A  EF6A  F027         	goto	_putsUSART	;wreg free
 18474  002D4E                     __end_of_printStatistics:
 18475                           	opt stack 0
 18476                           tblptru	equ	0xFF8
 18477                           tblptrh	equ	0xFF7
 18478                           tblptrl	equ	0xFF6
 18479                           tablat	equ	0xFF5
 18480                           prodh	equ	0xFF4
 18481                           prodl	equ	0xFF3
 18482                           intcon	equ	0xFF2
 18483                           indf0	equ	0xFEF
 18484                           postinc0	equ	0xFEE
 18485                           fsr0h	equ	0xFEA
 18486                           fsr0l	equ	0xFE9
 18487                           wreg	equ	0xFE8
 18488                           indf1	equ	0xFE7
 18489                           postinc1	equ	0xFE6
 18490                           postdec1	equ	0xFE5
 18491                           fsr1h	equ	0xFE2
 18492                           fsr1l	equ	0xFE1
 18493                           indf2	equ	0xFDF
 18494                           postinc2	equ	0xFDE
 18495                           postdec2	equ	0xFDD
 18496                           plusw2	equ	0xFDB
 18497                           fsr2h	equ	0xFDA
 18498                           fsr2l	equ	0xFD9
 18499                           status	equ	0xFD8
 18500                           
 18501 ;; *************** function _atoi *****************
 18502 ;; Defined at:
 18503 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 18504 ;; Parameters:    Size  Location     Type
 18505 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 18506 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18507 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18508 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18509 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18510 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18511 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 18512 ;; Auto vars:     Size  Location     Type
 18513 ;;  a               2   11[BANK0 ] int 
 18514 ;;  sign            1   10[BANK0 ] unsigned char 
 18515 ;; Return value:  Size  Location     Type
 18516 ;;                  2    6[BANK0 ] int 
 18517 ;; Registers used:
 18518 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18519 ;; Tracked objects:
 18520 ;;		On entry : C/2
 18521 ;;		On exit  : F/0
 18522 ;;		Unchanged: 0/0
 18523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18524 ;;      Params:         0       2       0       0       0       0       0
 18525 ;;      Locals:         0       3       0       0       0       0       0
 18526 ;;      Temps:          0       2       0       0       0       0       0
 18527 ;;      Totals:         0       7       0       0       0       0       0
 18528 ;;Total ram usage:        7 bytes
 18529 ;; Hardware stack levels used:    1
 18530 ;; Hardware stack levels required when called:    4
 18531 ;; This function calls:
 18532 ;;		_isdigit
 18533 ;;		___wmul
 18534 ;; This function is called by:
 18535 ;;		_doModeVerbose
 18536 ;; This function uses a non-reentrant model
 18537 ;;
 18538                           
 18539                           	psect	text39
 18540  003894                     __ptext39:
 18541                           	opt stack 0
 18542  003894                     _atoi:
 18543                           	opt stack 25
 18544                           
 18545                           ;incstack = 0
 18546                           ;incstack = 0
 18547  003894  D003               	goto	l10758
 18548  003896                     l10756:
 18549  003896  0100               	movlb	0	; () banked
 18550  003898  4B66               	infsnz	atoi@s& (0+255),f,b
 18551  00389A  2B67               	incf	(atoi@s+1)& (0+255),f,b
 18552  00389C                     l10758:
 18553  00389C  0100               	movlb	0	; () banked
 18554  00389E  D876               	call	PL22	;call to abstracted procedure
 18555  0038A0  64EA               	cpfsgt	fsr0h,c
 18556  0038A2  D003               	bra	u13377
 18557  0038A4  6EEA               	movwf	fsr0h,c
 18558  0038A6  50EF               	movf	indf0,w,c
 18559  0038A8  D003               	bra	u13370
 18560  0038AA                     u13377:
 18561  0038AA  6EF7               	movwf	tblptrh,c
 18562  0038AC  0008               	tblrd		*
 18563  0038AE  50F5               	movf	tablat,w,c
 18564  0038B0                     u13370:
 18565  0038B0  0A20               	xorlw	32
 18566  0038B2  E0F1               	bz	l10756
 18567  0038B4  0100               	movlb	0	; () banked
 18568  0038B6  D86A               	call	PL22	;call to abstracted procedure
 18569  0038B8  64EA               	cpfsgt	fsr0h,c
 18570  0038BA  D003               	bra	u13397
 18571  0038BC  6EEA               	movwf	fsr0h,c
 18572  0038BE  50EF               	movf	indf0,w,c
 18573  0038C0  D003               	bra	u13390
 18574  0038C2                     u13397:
 18575  0038C2  6EF7               	movwf	tblptrh,c
 18576  0038C4  0008               	tblrd		*
 18577  0038C6  50F5               	movf	tablat,w,c
 18578  0038C8                     u13390:
 18579  0038C8  0A09               	xorlw	9
 18580  0038CA  E0E5               	bz	l10756
 18581  0038CC  0100               	movlb	0	; () banked
 18582  0038CE  6B6B               	clrf	atoi@a& (0+255),b
 18583  0038D0  6B6C               	clrf	(atoi@a+1)& (0+255),b
 18584  0038D2  6B6A               	clrf	atoi@sign& (0+255),b
 18585                           
 18586                           ; BSR set to: 0
 18587  0038D4  D85B               	call	PL22	;call to abstracted procedure
 18588  0038D6  64EA               	cpfsgt	fsr0h,c
 18589  0038D8  D003               	bra	u13417
 18590  0038DA  6EEA               	movwf	fsr0h,c
 18591  0038DC  50EF               	movf	indf0,w,c
 18592  0038DE  D003               	bra	u13410
 18593  0038E0                     u13417:
 18594  0038E0  6EF7               	movwf	tblptrh,c
 18595  0038E2  0008               	tblrd		*
 18596  0038E4  50F5               	movf	tablat,w,c
 18597  0038E6                     u13410:
 18598  0038E6  0A2D               	xorlw	45
 18599  0038E8  E103               	bnz	l10766
 18600  0038EA  0100               	movlb	0	; () banked
 18601  0038EC  2B6A               	incf	atoi@sign& (0+255),f,b
 18602  0038EE  D00D               	goto	L24
 18603  0038F0                     l10766:
 18604  0038F0  0100               	movlb	0	; () banked
 18605  0038F2  D84C               	call	PL22	;call to abstracted procedure
 18606  0038F4  64EA               	cpfsgt	fsr0h,c
 18607  0038F6  D003               	bra	u13437
 18608  0038F8  6EEA               	movwf	fsr0h,c
 18609  0038FA  50EF               	movf	indf0,w,c
 18610  0038FC  D003               	bra	u13430
 18611  0038FE                     u13437:
 18612  0038FE  6EF7               	movwf	tblptrh,c
 18613  003900  0008               	tblrd		*
 18614  003902  50F5               	movf	tablat,w,c
 18615  003904                     u13430:
 18616  003904  0A2B               	xorlw	43
 18617  003906  E121               	bnz	l10774
 18618  003908                     l10768:
 18619  003908  0100               	movlb	0	; () banked
 18620  00390A                     L24:
 18621  00390A  4B66               	infsnz	atoi@s& (0+255),f,b
 18622  00390C  2B67               	incf	(atoi@s+1)& (0+255),f,b
 18623  00390E  D01D               	goto	l10774
 18624  003910                     l10770:
 18625                           
 18626                           ; BSR set to: 0
 18627  003910  C06B  F060         	movff	atoi@a,?___wmul
 18628  003914  C06C  F061         	movff	atoi@a+1,?___wmul+1
 18629  003918  6B63               	clrf	(?___wmul+3)& (0+255),b
 18630  00391A  0E0A               	movlw	10
 18631  00391C  6F62               	movwf	(?___wmul+2)& (0+255),b
 18632  00391E  EC7F  F029         	call	___wmul	;wreg free
 18633  003922  D834               	call	PL22	;call to abstracted procedure
 18634  003924  64EA               	cpfsgt	fsr0h,c
 18635  003926  D003               	bra	u13457
 18636  003928  6EEA               	movwf	fsr0h,c
 18637  00392A  50EF               	movf	indf0,w,c
 18638  00392C  D003               	bra	u13450
 18639  00392E                     u13457:
 18640  00392E  6EF7               	movwf	tblptrh,c
 18641  003930  0008               	tblrd		*
 18642  003932  50F5               	movf	tablat,w,c
 18643  003934                     u13450:
 18644  003934  0100               	movlb	0	; () banked
 18645  003936  2760               	addwf	?___wmul& (0+255),f,b
 18646  003938  0E00               	movlw	0
 18647  00393A  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 18648  00393C  0ED0               	movlw	208
 18649  00393E  2560               	addwf	?___wmul& (0+255),w,b
 18650  003940  6F6B               	movwf	atoi@a& (0+255),b
 18651  003942  0EFF               	movlw	255
 18652  003944  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 18653  003946  6F6C               	movwf	(atoi@a+1)& (0+255),b
 18654  003948  D7DF               	goto	l10768
 18655  00394A                     l10774:
 18656  00394A  0100               	movlb	0	; () banked
 18657  00394C  D81F               	call	PL22	;call to abstracted procedure
 18658  00394E  64EA               	cpfsgt	fsr0h,c
 18659  003950  D003               	bra	u13467
 18660  003952  6EEA               	movwf	fsr0h,c
 18661  003954  50EF               	movf	indf0,w,c
 18662  003956  D003               	bra	u13460
 18663  003958                     u13467:
 18664  003958  6EF7               	movwf	tblptrh,c
 18665  00395A  0008               	tblrd		*
 18666  00395C  50F5               	movf	tablat,w,c
 18667  00395E                     u13460:
 18668  00395E  ECF1  F029         	call	_isdigit
 18669  003962  E2D6               	bc	l10770
 18670                           
 18671                           ; BSR set to: 0
 18672  003964  516A               	movf	atoi@sign& (0+255),w,b
 18673  003966  E00D               	bz	l1922
 18674                           
 18675                           ; BSR set to: 0
 18676  003968  C06B  F068         	movff	atoi@a,??_atoi
 18677  00396C  C06C  F069         	movff	atoi@a+1,??_atoi+1
 18678  003970  1F68               	comf	??_atoi& (0+255),f,b
 18679  003972  1F69               	comf	(??_atoi+1)& (0+255),f,b
 18680  003974  4B68               	infsnz	??_atoi& (0+255),f,b
 18681  003976  2B69               	incf	(??_atoi+1)& (0+255),f,b
 18682  003978  C068  F066         	movff	??_atoi,?_atoi
 18683  00397C  C069  F067         	movff	??_atoi+1,?_atoi+1
 18684  003980  D004               	goto	l1923
 18685  003982                     l1922:
 18686                           
 18687                           ; BSR set to: 0
 18688  003982  C06B  F066         	movff	atoi@a,?_atoi
 18689  003986  C06C  F067         	movff	atoi@a+1,?_atoi+1
 18690  00398A                     l1923:
 18691                           
 18692                           ; BSR set to: 0
 18693  00398A  0012               	return	
 18694  00398C                     __end_of_atoi:
 18695                           	opt stack 0
 18696  00398C                     PL22:
 18697                           	opt stack 25
 18698  00398C  5166               	movf	atoi@s& (0+255),w,b
 18699  00398E  6EF6               	movwf	tblptrl,c
 18700  003990  6EE9               	movwf	fsr0l,c
 18701  003992  0E05               	movlw	(high __ramtop+-1)
 18702  003994  6EEA               	movwf	fsr0h,c
 18703  003996  5167               	movf	(atoi@s+1)& (0+255),w,b
 18704  003998  0012               	return	
 18705  00399A                     __end_ofPL22:
 18706                           	opt stack 0
 18707                           tblptru	equ	0xFF8
 18708                           tblptrh	equ	0xFF7
 18709                           tblptrl	equ	0xFF6
 18710                           tablat	equ	0xFF5
 18711                           prodh	equ	0xFF4
 18712                           prodl	equ	0xFF3
 18713                           intcon	equ	0xFF2
 18714                           indf0	equ	0xFEF
 18715                           postinc0	equ	0xFEE
 18716                           fsr0h	equ	0xFEA
 18717                           fsr0l	equ	0xFE9
 18718                           wreg	equ	0xFE8
 18719                           indf1	equ	0xFE7
 18720                           postinc1	equ	0xFE6
 18721                           postdec1	equ	0xFE5
 18722                           fsr1h	equ	0xFE2
 18723                           fsr1l	equ	0xFE1
 18724                           indf2	equ	0xFDF
 18725                           postinc2	equ	0xFDE
 18726                           postdec2	equ	0xFDD
 18727                           plusw2	equ	0xFDB
 18728                           fsr2h	equ	0xFDA
 18729                           fsr2l	equ	0xFD9
 18730                           status	equ	0xFD8
 18731                           
 18732 ;; *************** function _strtok *****************
 18733 ;; Defined at:
 18734 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 18735 ;; Parameters:    Size  Location     Type
 18736 ;;  s1              2   12[BANK0 ] PTR unsigned char 
 18737 ;;		 -> NULL(0), cmdbuf(80), 
 18738 ;;  s2              2   14[BANK0 ] PTR const unsigned char 
 18739 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18740 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18741 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18742 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18743 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18744 ;;		 -> STR_30(2), STR_29(2), 
 18745 ;; Auto vars:     Size  Location     Type
 18746 ;;		None
 18747 ;; Return value:  Size  Location     Type
 18748 ;;                  2   12[BANK0 ] PTR unsigned char 
 18749 ;; Registers used:
 18750 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18751 ;; Tracked objects:
 18752 ;;		On entry : F/0
 18753 ;;		On exit  : F/0
 18754 ;;		Unchanged: 0/0
 18755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18756 ;;      Params:         0       4       0       0       0       0       0
 18757 ;;      Locals:         0       0       0       0       0       0       0
 18758 ;;      Temps:          0       0       0       0       0       0       0
 18759 ;;      Totals:         0       4       0       0       0       0       0
 18760 ;;Total ram usage:        4 bytes
 18761 ;; Hardware stack levels used:    1
 18762 ;; Hardware stack levels required when called:    5
 18763 ;; This function calls:
 18764 ;;		_strspn
 18765 ;;		_strcspn
 18766 ;; This function is called by:
 18767 ;;		_doModeVerbose
 18768 ;; This function uses a non-reentrant model
 18769 ;;
 18770                           
 18771                           	psect	text40
 18772  0046B2                     __ptext40:
 18773                           	opt stack 0
 18774  0046B2                     _strtok:
 18775                           	opt stack 24
 18776                           
 18777                           ; BSR set to: 0
 18778                           
 18779                           ; BSR set to: 0
 18780                           ;incstack = 0
 18781                           ;incstack = 0
 18782  0046B2  516D               	movf	(strtok@s1+1)& (0+255),w,b
 18783  0046B4  116C               	iorwf	strtok@s1& (0+255),w,b
 18784  0046B6  E104               	bnz	l10736
 18785                           
 18786                           ; BSR set to: 0
 18787  0046B8  C031  F06C         	movff	strtok@sp,strtok@s1
 18788  0046BC  C032  F06D         	movff	strtok@sp+1,strtok@s1+1
 18789  0046C0                     l10736:
 18790                           
 18791                           ; BSR set to: 0
 18792  0046C0  516D               	movf	(strtok@s1+1)& (0+255),w,b
 18793  0046C2  116C               	iorwf	strtok@s1& (0+255),w,b
 18794  0046C4  E016               	bz	L25
 18795                           
 18796                           ; BSR set to: 0
 18797                           
 18798                           ; BSR set to: 0
 18799  0046C6  C06C  F066         	movff	strtok@s1,?_strspn
 18800  0046CA  C06D  F067         	movff	strtok@s1+1,?_strspn+1
 18801  0046CE  C06E  F068         	movff	strtok@s2,?_strspn+2
 18802  0046D2  C06F  F069         	movff	strtok@s2+1,?_strspn+3
 18803  0046D6  EC4C  F028         	call	_strspn	;wreg free
 18804  0046DA  5166               	movf	?_strspn& (0+255),w,b
 18805  0046DC  276C               	addwf	strtok@s1& (0+255),f,b
 18806  0046DE  5167               	movf	(?_strspn+1)& (0+255),w,b
 18807  0046E0  236D               	addwfc	(strtok@s1+1)& (0+255),f,b
 18808                           
 18809                           ; BSR set to: 0
 18810  0046E2  C06C  FFD9         	movff	strtok@s1,fsr2l
 18811  0046E6  C06D  FFDA         	movff	strtok@s1+1,fsr2h
 18812  0046EA  50DF               	movf	indf2,w,c
 18813  0046EC  E105               	bnz	l10746
 18814                           
 18815                           ; BSR set to: 0
 18816  0046EE  6A31               	clrf	strtok@sp,c
 18817  0046F0  6A32               	clrf	strtok@sp+1,c
 18818  0046F2                     L25:
 18819  0046F2  6B6C               	clrf	?_strtok& (0+255),b
 18820  0046F4  6B6D               	clrf	(?_strtok+1)& (0+255),b
 18821  0046F6  D025               	goto	l2415
 18822  0046F8                     l10746:
 18823                           
 18824                           ; BSR set to: 0
 18825  0046F8  C06C  F066         	movff	strtok@s1,?_strcspn
 18826  0046FC  C06D  F067         	movff	strtok@s1+1,?_strcspn+1
 18827  004700  C06E  F068         	movff	strtok@s2,?_strcspn+2
 18828  004704  C06F  F069         	movff	strtok@s2+1,?_strcspn+3
 18829  004708  EC2A  F028         	call	_strcspn	;wreg free
 18830  00470C  5166               	movf	?_strcspn& (0+255),w,b
 18831  00470E  256C               	addwf	strtok@s1& (0+255),w,b
 18832  004710  6E31               	movwf	strtok@sp,c
 18833  004712  5167               	movf	(?_strcspn+1)& (0+255),w,b
 18834  004714  216D               	addwfc	(strtok@s1+1)& (0+255),w,b
 18835  004716  6E32               	movwf	strtok@sp+1,c
 18836                           
 18837                           ; BSR set to: 0
 18838  004718  C031  FFD9         	movff	strtok@sp,fsr2l
 18839  00471C  C032  FFDA         	movff	strtok@sp+1,fsr2h
 18840  004720  50DF               	movf	indf2,w,c
 18841  004722  E009               	bz	l2417
 18842                           
 18843                           ; BSR set to: 0
 18844  004724  C031  FFD9         	movff	strtok@sp,fsr2l
 18845  004728  C032  FFDA         	movff	strtok@sp+1,fsr2h
 18846  00472C  0E00               	movlw	0
 18847  00472E  6EDF               	movwf	indf2,c
 18848                           
 18849                           ; BSR set to: 0
 18850  004730  4A31               	infsnz	strtok@sp,f,c
 18851  004732  2A32               	incf	strtok@sp+1,f,c
 18852  004734  D002               	goto	l2418
 18853  004736                     l2417:
 18854                           
 18855                           ; BSR set to: 0
 18856  004736  6A31               	clrf	strtok@sp,c
 18857  004738  6A32               	clrf	strtok@sp+1,c
 18858  00473A                     l2418:
 18859                           
 18860                           ; BSR set to: 0
 18861  00473A  C06C  F06C         	movff	strtok@s1,?_strtok
 18862  00473E  C06D  F06D         	movff	strtok@s1+1,?_strtok+1
 18863  004742                     l2415:
 18864                           
 18865                           ; BSR set to: 0
 18866  004742  0012               	return	
 18867  004744                     __end_of_strtok:
 18868                           	opt stack 0
 18869                           tblptru	equ	0xFF8
 18870                           tblptrh	equ	0xFF7
 18871                           tblptrl	equ	0xFF6
 18872                           tablat	equ	0xFF5
 18873                           prodh	equ	0xFF4
 18874                           prodl	equ	0xFF3
 18875                           intcon	equ	0xFF2
 18876                           indf0	equ	0xFEF
 18877                           postinc0	equ	0xFEE
 18878                           fsr0h	equ	0xFEA
 18879                           fsr0l	equ	0xFE9
 18880                           wreg	equ	0xFE8
 18881                           indf1	equ	0xFE7
 18882                           postinc1	equ	0xFE6
 18883                           postdec1	equ	0xFE5
 18884                           fsr1h	equ	0xFE2
 18885                           fsr1l	equ	0xFE1
 18886                           indf2	equ	0xFDF
 18887                           postinc2	equ	0xFDE
 18888                           postdec2	equ	0xFDD
 18889                           plusw2	equ	0xFDB
 18890                           fsr2h	equ	0xFDA
 18891                           fsr2l	equ	0xFD9
 18892                           status	equ	0xFD8
 18893                           
 18894 ;; *************** function _strcspn *****************
 18895 ;; Defined at:
 18896 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 18897 ;; Parameters:    Size  Location     Type
 18898 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 18899 ;;		 -> NULL(0), cmdbuf(80), 
 18900 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 18901 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 18902 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 18903 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 18904 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 18905 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 18906 ;;		 -> STR_30(2), STR_29(2), 
 18907 ;; Auto vars:     Size  Location     Type
 18908 ;;  i               2   10[BANK0 ] unsigned int 
 18909 ;; Return value:  Size  Location     Type
 18910 ;;                  2    6[BANK0 ] unsigned int 
 18911 ;; Registers used:
 18912 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18913 ;; Tracked objects:
 18914 ;;		On entry : F/0
 18915 ;;		On exit  : F/0
 18916 ;;		Unchanged: 0/0
 18917 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18918 ;;      Params:         0       4       0       0       0       0       0
 18919 ;;      Locals:         0       2       0       0       0       0       0
 18920 ;;      Temps:          0       0       0       0       0       0       0
 18921 ;;      Totals:         0       6       0       0       0       0       0
 18922 ;;Total ram usage:        6 bytes
 18923 ;; Hardware stack levels used:    1
 18924 ;; Hardware stack levels required when called:    4
 18925 ;; This function calls:
 18926 ;;		_strchr
 18927 ;; This function is called by:
 18928 ;;		_strtok
 18929 ;; This function uses a non-reentrant model
 18930 ;;
 18931                           
 18932                           	psect	text41
 18933  005054                     __ptext41:
 18934                           	opt stack 0
 18935  005054                     _strcspn:
 18936                           	opt stack 24
 18937                           
 18938                           ; BSR set to: 0
 18939                           
 18940                           ; BSR set to: 0
 18941                           ;incstack = 0
 18942                           ;incstack = 0
 18943  005054  6B6A               	clrf	strcspn@i& (0+255),b
 18944  005056  6B6B               	clrf	(strcspn@i+1)& (0+255),b
 18945  005058  D004               	goto	l12324
 18946  00505A                     l12322:
 18947                           
 18948                           ; BSR set to: 0
 18949  00505A  4B66               	infsnz	strcspn@s1& (0+255),f,b
 18950  00505C  2B67               	incf	(strcspn@s1+1)& (0+255),f,b
 18951  00505E  4B6A               	infsnz	strcspn@i& (0+255),f,b
 18952  005060  2B6B               	incf	(strcspn@i+1)& (0+255),f,b
 18953  005062                     l12324:
 18954                           
 18955                           ; BSR set to: 0
 18956  005062  C066  FFD9         	movff	strcspn@s1,fsr2l
 18957  005066  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 18958  00506A  50DF               	movf	indf2,w,c
 18959  00506C  E010               	bz	l2442
 18960                           
 18961                           ; BSR set to: 0
 18962  00506E  C068  F060         	movff	strcspn@s2,?_strchr
 18963  005072  C069  F061         	movff	strcspn@s2+1,?_strchr+1
 18964  005076  C066  FFD9         	movff	strcspn@s1,fsr2l
 18965  00507A  C067  FFDA         	movff	strcspn@s1+1,fsr2h
 18966  00507E  50DF               	movf	indf2,w,c
 18967  005080  6F62               	movwf	(?_strchr+2)& (0+255),b
 18968  005082  6B63               	clrf	(?_strchr+3)& (0+255),b
 18969  005084  ECAE  F026         	call	_strchr	;wreg free
 18970  005088  5161               	movf	(?_strchr+1)& (0+255),w,b
 18971  00508A  1160               	iorwf	?_strchr& (0+255),w,b
 18972  00508C  E0E6               	bz	l12322
 18973  00508E                     l2442:
 18974                           
 18975                           ; BSR set to: 0
 18976  00508E  C06A  F066         	movff	strcspn@i,?_strcspn
 18977  005092  C06B  F067         	movff	strcspn@i+1,?_strcspn+1
 18978                           
 18979                           ; BSR set to: 0
 18980  005096  0012               	return	
 18981  005098                     __end_of_strcspn:
 18982                           	opt stack 0
 18983                           tblptru	equ	0xFF8
 18984                           tblptrh	equ	0xFF7
 18985                           tblptrl	equ	0xFF6
 18986                           tablat	equ	0xFF5
 18987                           prodh	equ	0xFF4
 18988                           prodl	equ	0xFF3
 18989                           intcon	equ	0xFF2
 18990                           indf0	equ	0xFEF
 18991                           postinc0	equ	0xFEE
 18992                           fsr0h	equ	0xFEA
 18993                           fsr0l	equ	0xFE9
 18994                           wreg	equ	0xFE8
 18995                           indf1	equ	0xFE7
 18996                           postinc1	equ	0xFE6
 18997                           postdec1	equ	0xFE5
 18998                           fsr1h	equ	0xFE2
 18999                           fsr1l	equ	0xFE1
 19000                           indf2	equ	0xFDF
 19001                           postinc2	equ	0xFDE
 19002                           postdec2	equ	0xFDD
 19003                           plusw2	equ	0xFDB
 19004                           fsr2h	equ	0xFDA
 19005                           fsr2l	equ	0xFD9
 19006                           status	equ	0xFD8
 19007                           
 19008 ;; *************** function _strspn *****************
 19009 ;; Defined at:
 19010 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19011 ;; Parameters:    Size  Location     Type
 19012 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19013 ;;		 -> NULL(0), cmdbuf(80), 
 19014 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19015 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 19016 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 19017 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 19018 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 19019 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 19020 ;;		 -> STR_30(2), STR_29(2), 
 19021 ;; Auto vars:     Size  Location     Type
 19022 ;;  i               2   10[BANK0 ] unsigned int 
 19023 ;; Return value:  Size  Location     Type
 19024 ;;                  2    6[BANK0 ] unsigned int 
 19025 ;; Registers used:
 19026 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19027 ;; Tracked objects:
 19028 ;;		On entry : F/0
 19029 ;;		On exit  : F/0
 19030 ;;		Unchanged: 0/0
 19031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19032 ;;      Params:         0       4       0       0       0       0       0
 19033 ;;      Locals:         0       2       0       0       0       0       0
 19034 ;;      Temps:          0       0       0       0       0       0       0
 19035 ;;      Totals:         0       6       0       0       0       0       0
 19036 ;;Total ram usage:        6 bytes
 19037 ;; Hardware stack levels used:    1
 19038 ;; Hardware stack levels required when called:    4
 19039 ;; This function calls:
 19040 ;;		_strchr
 19041 ;; This function is called by:
 19042 ;;		_strtok
 19043 ;; This function uses a non-reentrant model
 19044 ;;
 19045                           
 19046                           	psect	text42
 19047  005098                     __ptext42:
 19048                           	opt stack 0
 19049  005098                     _strspn:
 19050                           	opt stack 24
 19051                           
 19052                           ; BSR set to: 0
 19053                           
 19054                           ; BSR set to: 0
 19055                           ;incstack = 0
 19056                           ;incstack = 0
 19057  005098  6B6A               	clrf	strspn@i& (0+255),b
 19058  00509A  6B6B               	clrf	(strspn@i+1)& (0+255),b
 19059  00509C  D004               	goto	l12316
 19060  00509E                     l12314:
 19061                           
 19062                           ; BSR set to: 0
 19063  00509E  4B66               	infsnz	strspn@s1& (0+255),f,b
 19064  0050A0  2B67               	incf	(strspn@s1+1)& (0+255),f,b
 19065  0050A2  4B6A               	infsnz	strspn@i& (0+255),f,b
 19066  0050A4  2B6B               	incf	(strspn@i+1)& (0+255),f,b
 19067  0050A6                     l12316:
 19068                           
 19069                           ; BSR set to: 0
 19070  0050A6  C066  FFD9         	movff	strspn@s1,fsr2l
 19071  0050AA  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19072  0050AE  50DF               	movf	indf2,w,c
 19073  0050B0  E010               	bz	l2461
 19074                           
 19075                           ; BSR set to: 0
 19076  0050B2  C068  F060         	movff	strspn@s2,?_strchr
 19077  0050B6  C069  F061         	movff	strspn@s2+1,?_strchr+1
 19078  0050BA  C066  FFD9         	movff	strspn@s1,fsr2l
 19079  0050BE  C067  FFDA         	movff	strspn@s1+1,fsr2h
 19080  0050C2  50DF               	movf	indf2,w,c
 19081  0050C4  6F62               	movwf	(?_strchr+2)& (0+255),b
 19082  0050C6  6B63               	clrf	(?_strchr+3)& (0+255),b
 19083  0050C8  ECAE  F026         	call	_strchr	;wreg free
 19084  0050CC  5161               	movf	(?_strchr+1)& (0+255),w,b
 19085  0050CE  1160               	iorwf	?_strchr& (0+255),w,b
 19086  0050D0  E1E6               	bnz	l12314
 19087  0050D2                     l2461:
 19088                           
 19089                           ; BSR set to: 0
 19090  0050D2  C06A  F066         	movff	strspn@i,?_strspn
 19091  0050D6  C06B  F067         	movff	strspn@i+1,?_strspn+1
 19092                           
 19093                           ; BSR set to: 0
 19094  0050DA  0012               	return	
 19095  0050DC                     __end_of_strspn:
 19096                           	opt stack 0
 19097                           tblptru	equ	0xFF8
 19098                           tblptrh	equ	0xFF7
 19099                           tblptrl	equ	0xFF6
 19100                           tablat	equ	0xFF5
 19101                           prodh	equ	0xFF4
 19102                           prodl	equ	0xFF3
 19103                           intcon	equ	0xFF2
 19104                           indf0	equ	0xFEF
 19105                           postinc0	equ	0xFEE
 19106                           fsr0h	equ	0xFEA
 19107                           fsr0l	equ	0xFE9
 19108                           wreg	equ	0xFE8
 19109                           indf1	equ	0xFE7
 19110                           postinc1	equ	0xFE6
 19111                           postdec1	equ	0xFE5
 19112                           fsr1h	equ	0xFE2
 19113                           fsr1l	equ	0xFE1
 19114                           indf2	equ	0xFDF
 19115                           postinc2	equ	0xFDE
 19116                           postdec2	equ	0xFDD
 19117                           plusw2	equ	0xFDB
 19118                           fsr2h	equ	0xFDA
 19119                           fsr2l	equ	0xFD9
 19120                           status	equ	0xFD8
 19121                           
 19122 ;; *************** function _strchr *****************
 19123 ;; Defined at:
 19124 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 19125 ;; Parameters:    Size  Location     Type
 19126 ;;  ptr             2    0[BANK0 ] PTR const unsigned char 
 19127 ;;		 -> STR_104(2), STR_102(2), STR_100(2), STR_98(2), 
 19128 ;;		 -> STR_95(2), STR_92(2), STR_90(2), STR_88(2), 
 19129 ;;		 -> STR_86(2), STR_83(2), STR_73(2), STR_71(2), 
 19130 ;;		 -> STR_69(2), STR_50(2), STR_48(2), STR_46(2), 
 19131 ;;		 -> STR_34(2), STR_33(2), STR_32(2), STR_31(2), 
 19132 ;;		 -> STR_30(2), NULL(0), STR_29(2), cmdbuf(80), 
 19133 ;;  chr             2    2[BANK0 ] int 
 19134 ;; Auto vars:     Size  Location     Type
 19135 ;;		None
 19136 ;; Return value:  Size  Location     Type
 19137 ;;                  2    0[BANK0 ] PTR unsigned char 
 19138 ;; Registers used:
 19139 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19140 ;; Tracked objects:
 19141 ;;		On entry : F/0
 19142 ;;		On exit  : F/0
 19143 ;;		Unchanged: 0/0
 19144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19145 ;;      Params:         0       4       0       0       0       0       0
 19146 ;;      Locals:         0       0       0       0       0       0       0
 19147 ;;      Temps:          0       2       0       0       0       0       0
 19148 ;;      Totals:         0       6       0       0       0       0       0
 19149 ;;Total ram usage:        6 bytes
 19150 ;; Hardware stack levels used:    1
 19151 ;; Hardware stack levels required when called:    3
 19152 ;; This function calls:
 19153 ;;		Nothing
 19154 ;; This function is called by:
 19155 ;;		_doModeVerbose
 19156 ;;		_strcspn
 19157 ;;		_strspn
 19158 ;; This function uses a non-reentrant model
 19159 ;;
 19160                           
 19161                           	psect	text43
 19162  004D5C                     __ptext43:
 19163                           	opt stack 0
 19164  004D5C                     _strchr:
 19165                           	opt stack 26
 19166  004D5C                     l2363:
 19167                           
 19168                           ; BSR set to: 0
 19169  004D5C  0100               	movlb	0	; () banked
 19170  004D5E  5160               	movf	strchr@ptr& (0+255),w,b
 19171  004D60  6EF6               	movwf	tblptrl,c
 19172  004D62  6EE9               	movwf	fsr0l,c
 19173  004D64  0E05               	movlw	(high __ramtop+-1)
 19174  004D66  6EEA               	movwf	fsr0h,c
 19175  004D68  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 19176  004D6A  64EA               	cpfsgt	fsr0h,c
 19177  004D6C  D003               	bra	u13727
 19178  004D6E  6EEA               	movwf	fsr0h,c
 19179  004D70  50EF               	movf	indf0,w,c
 19180  004D72  D003               	bra	u13720
 19181  004D74                     u13727:
 19182  004D74  6EF7               	movwf	tblptrh,c
 19183  004D76  0008               	tblrd		*
 19184  004D78  50F5               	movf	tablat,w,c
 19185  004D7A                     u13720:
 19186  004D7A  0100               	movlb	0	; () banked
 19187  004D7C  1962               	xorwf	strchr@chr& (0+255),w,b
 19188  004D7E  E105               	bnz	l11020
 19189                           
 19190                           ; BSR set to: 0
 19191  004D80  C060  F060         	movff	strchr@ptr,?_strchr
 19192  004D84  C061  F061         	movff	strchr@ptr+1,?_strchr+1
 19193  004D88  D019               	goto	l2365
 19194  004D8A                     l11020:
 19195                           
 19196                           ; BSR set to: 0
 19197  004D8A  5160               	movf	strchr@ptr& (0+255),w,b
 19198  004D8C  6F64               	movwf	??_strchr& (0+255),b
 19199  004D8E  5161               	movf	(strchr@ptr+1)& (0+255),w,b
 19200  004D90  6F65               	movwf	(??_strchr+1)& (0+255),b
 19201  004D92  4B60               	infsnz	strchr@ptr& (0+255),f,b
 19202  004D94  2B61               	incf	(strchr@ptr+1)& (0+255),f,b
 19203  004D96  5164               	movf	??_strchr& (0+255),w,b
 19204  004D98  6EF6               	movwf	tblptrl,c
 19205  004D9A  6EE9               	movwf	fsr0l,c
 19206  004D9C  0E05               	movlw	(high __ramtop+-1)
 19207  004D9E  6EEA               	movwf	fsr0h,c
 19208  004DA0  5165               	movf	(??_strchr+1)& (0+255),w,b
 19209  004DA2  64EA               	cpfsgt	fsr0h,c
 19210  004DA4  D003               	bra	u13747
 19211  004DA6  6EEA               	movwf	fsr0h,c
 19212  004DA8  50EF               	movf	indf0,w,c
 19213  004DAA  D003               	bra	u13740
 19214  004DAC                     u13747:
 19215  004DAC  6EF7               	movwf	tblptrh,c
 19216  004DAE  0008               	tblrd		*
 19217  004DB0  50F5               	movf	tablat,w,c
 19218  004DB2                     u13740:
 19219  004DB2  0900               	iorlw	0
 19220  004DB4  E1D3               	bnz	l2363
 19221  004DB6  0100               	movlb	0	; () banked
 19222  004DB8  6B60               	clrf	?_strchr& (0+255),b
 19223  004DBA  6B61               	clrf	(?_strchr+1)& (0+255),b
 19224  004DBC                     l2365:
 19225                           
 19226                           ; BSR set to: 0
 19227  004DBC  0012               	return	
 19228  004DBE                     __end_of_strchr:
 19229                           	opt stack 0
 19230                           tblptru	equ	0xFF8
 19231                           tblptrh	equ	0xFF7
 19232                           tblptrl	equ	0xFF6
 19233                           tablat	equ	0xFF5
 19234                           prodh	equ	0xFF4
 19235                           prodl	equ	0xFF3
 19236                           intcon	equ	0xFF2
 19237                           indf0	equ	0xFEF
 19238                           postinc0	equ	0xFEE
 19239                           fsr0h	equ	0xFEA
 19240                           fsr0l	equ	0xFE9
 19241                           wreg	equ	0xFE8
 19242                           indf1	equ	0xFE7
 19243                           postinc1	equ	0xFE6
 19244                           postdec1	equ	0xFE5
 19245                           fsr1h	equ	0xFE2
 19246                           fsr1l	equ	0xFE1
 19247                           indf2	equ	0xFDF
 19248                           postinc2	equ	0xFDE
 19249                           postdec2	equ	0xFDD
 19250                           plusw2	equ	0xFDB
 19251                           fsr2h	equ	0xFDA
 19252                           fsr2l	equ	0xFD9
 19253                           status	equ	0xFD8
 19254                           
 19255 ;; *************** function _stristr *****************
 19256 ;; Defined at:
 19257 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 19258 ;; Parameters:    Size  Location     Type
 19259 ;;  s1              2   13[BANK0 ] PTR const unsigned char 
 19260 ;;		 -> NULL(0), cmdbuf(80), 
 19261 ;;  s2              2   15[BANK0 ] PTR const unsigned char 
 19262 ;;		 -> STR_121(6), STR_120(8), STR_118(6), STR_116(5), 
 19263 ;;		 -> STR_114(8), STR_113(6), STR_112(9), STR_111(11), 
 19264 ;;		 -> STR_109(8), STR_107(4), STR_106(5), STR_94(5), 
 19265 ;;		 -> STR_82(7), STR_77(5), STR_68(5), STR_45(5), 
 19266 ;;		 -> STR_44(5), STR_42(5), STR_41(4), STR_40(5), 
 19267 ;;		 -> STR_37(3), STR_28(3), STR_19(7), STR_17(8), 
 19268 ;;		 -> STR_15(7), STR_13(9), STR_11(6), STR_9(7), 
 19269 ;;		 -> STR_7(5), STR_5(5), 
 19270 ;; Auto vars:     Size  Location     Type
 19271 ;;		None
 19272 ;; Return value:  Size  Location     Type
 19273 ;;                  2   13[BANK0 ] PTR unsigned char 
 19274 ;; Registers used:
 19275 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19276 ;; Tracked objects:
 19277 ;;		On entry : F/0
 19278 ;;		On exit  : F/0
 19279 ;;		Unchanged: 0/0
 19280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19281 ;;      Params:         0       4       0       0       0       0       0
 19282 ;;      Locals:         0       0       0       0       0       0       0
 19283 ;;      Temps:          0       0       0       0       0       0       0
 19284 ;;      Totals:         0       4       0       0       0       0       0
 19285 ;;Total ram usage:        4 bytes
 19286 ;; Hardware stack levels used:    1
 19287 ;; Hardware stack levels required when called:    5
 19288 ;; This function calls:
 19289 ;;		_strlen
 19290 ;;		_strnicmp
 19291 ;;		_strichr
 19292 ;; This function is called by:
 19293 ;;		_doModeVerbose
 19294 ;; This function uses a non-reentrant model
 19295 ;;
 19296                           
 19297                           	psect	text44
 19298  0049DC                     __ptext44:
 19299                           	opt stack 0
 19300  0049DC                     _stristr:
 19301                           	opt stack 24
 19302                           
 19303                           ; BSR set to: 0
 19304                           
 19305                           ; BSR set to: 0
 19306                           ;incstack = 0
 19307                           ;incstack = 0
 19308  0049DC  D02F               	goto	l10724
 19309  0049DE                     l10718:
 19310                           
 19311                           ; BSR set to: 0
 19312  0049DE  C06D  F064         	movff	stristr@s1,?_strnicmp
 19313  0049E2  C06E  F065         	movff	stristr@s1+1,?_strnicmp+1
 19314  0049E6  C06F  F066         	movff	stristr@s2,?_strnicmp+2
 19315  0049EA  C070  F067         	movff	stristr@s2+1,?_strnicmp+3
 19316  0049EE  C06F  F060         	movff	stristr@s2,?_strlen
 19317  0049F2  C070  F061         	movff	stristr@s2+1,?_strlen+1
 19318  0049F6  EC8F  F028         	call	_strlen	;wreg free
 19319  0049FA  C060  F068         	movff	?_strlen,?_strnicmp+4
 19320  0049FE  C061  F069         	movff	?_strlen+1,?_strnicmp+5
 19321  004A02  EC4A  F026         	call	_strnicmp	;wreg free
 19322  004A06  5165               	movf	(?_strnicmp+1)& (0+255),w,b
 19323  004A08  1164               	iorwf	?_strnicmp& (0+255),w,b
 19324  004A0A  E105               	bnz	l10722
 19325                           
 19326                           ; BSR set to: 0
 19327  004A0C  C06D  F06D         	movff	stristr@s1,?_stristr
 19328  004A10  C06E  F06E         	movff	stristr@s1+1,?_stristr+1
 19329  004A14  D01E               	goto	l2384
 19330  004A16                     l10722:
 19331                           
 19332                           ; BSR set to: 0
 19333  004A16  296D               	incf	stristr@s1& (0+255),w,b
 19334  004A18  6F61               	movwf	?_strichr& (0+255),b
 19335  004A1A  0E00               	movlw	0
 19336  004A1C  216E               	addwfc	(stristr@s1+1)& (0+255),w,b
 19337  004A1E  6F62               	movwf	(?_strichr+1)& (0+255),b
 19338  004A20  C06F  FFF6         	movff	stristr@s2,tblptrl
 19339  004A24  C070  FFF7         	movff	stristr@s2+1,tblptrh
 19340  004A28  0008               	tblrd		*
 19341  004A2A  50F5               	movf	tablat,w,c
 19342  004A2C  6F63               	movwf	(?_strichr+2)& (0+255),b
 19343  004A2E  6B64               	clrf	(?_strichr+3)& (0+255),b
 19344  004A30  ECEE  F028         	call	_strichr	;wreg free
 19345  004A34  C061  F06D         	movff	?_strichr,stristr@s1
 19346  004A38  C062  F06E         	movff	?_strichr+1,stristr@s1+1
 19347  004A3C                     l10724:
 19348                           
 19349                           ; BSR set to: 0
 19350  004A3C  516E               	movf	(stristr@s1+1)& (0+255),w,b
 19351  004A3E  116D               	iorwf	stristr@s1& (0+255),w,b
 19352  004A40  E006               	bz	l2387
 19353                           
 19354                           ; BSR set to: 0
 19355  004A42  C06D  FFD9         	movff	stristr@s1,fsr2l
 19356  004A46  C06E  FFDA         	movff	stristr@s1+1,fsr2h
 19357  004A4A  50DF               	movf	indf2,w,c
 19358  004A4C  E1C8               	bnz	l10718
 19359  004A4E                     l2387:
 19360                           
 19361                           ; BSR set to: 0
 19362  004A4E  6B6D               	clrf	?_stristr& (0+255),b
 19363  004A50  6B6E               	clrf	(?_stristr+1)& (0+255),b
 19364  004A52                     l2384:
 19365                           
 19366                           ; BSR set to: 0
 19367  004A52  0012               	return	
 19368  004A54                     __end_of_stristr:
 19369                           	opt stack 0
 19370                           tblptru	equ	0xFF8
 19371                           tblptrh	equ	0xFF7
 19372                           tblptrl	equ	0xFF6
 19373                           tablat	equ	0xFF5
 19374                           prodh	equ	0xFF4
 19375                           prodl	equ	0xFF3
 19376                           intcon	equ	0xFF2
 19377                           indf0	equ	0xFEF
 19378                           postinc0	equ	0xFEE
 19379                           fsr0h	equ	0xFEA
 19380                           fsr0l	equ	0xFE9
 19381                           wreg	equ	0xFE8
 19382                           indf1	equ	0xFE7
 19383                           postinc1	equ	0xFE6
 19384                           postdec1	equ	0xFE5
 19385                           fsr1h	equ	0xFE2
 19386                           fsr1l	equ	0xFE1
 19387                           indf2	equ	0xFDF
 19388                           postinc2	equ	0xFDE
 19389                           postdec2	equ	0xFDD
 19390                           plusw2	equ	0xFDB
 19391                           fsr2h	equ	0xFDA
 19392                           fsr2l	equ	0xFD9
 19393                           status	equ	0xFD8
 19394                           
 19395 ;; *************** function _strichr *****************
 19396 ;; Defined at:
 19397 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 19398 ;; Parameters:    Size  Location     Type
 19399 ;;  ptr             2    1[BANK0 ] PTR const unsigned char 
 19400 ;;		 -> NULL(0), cmdbuf(80), 
 19401 ;;  chr             2    3[BANK0 ] int 
 19402 ;; Auto vars:     Size  Location     Type
 19403 ;;		None
 19404 ;; Return value:  Size  Location     Type
 19405 ;;                  2    1[BANK0 ] PTR unsigned char 
 19406 ;; Registers used:
 19407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19408 ;; Tracked objects:
 19409 ;;		On entry : F/0
 19410 ;;		On exit  : F/0
 19411 ;;		Unchanged: 0/0
 19412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19413 ;;      Params:         0       4       0       0       0       0       0
 19414 ;;      Locals:         0       0       0       0       0       0       0
 19415 ;;      Temps:          0       0       0       0       0       0       0
 19416 ;;      Totals:         0       4       0       0       0       0       0
 19417 ;;Total ram usage:        4 bytes
 19418 ;; Hardware stack levels used:    1
 19419 ;; Hardware stack levels required when called:    4
 19420 ;; This function calls:
 19421 ;;		_toupper
 19422 ;; This function is called by:
 19423 ;;		_stristr
 19424 ;; This function uses a non-reentrant model
 19425 ;;
 19426                           
 19427                           	psect	text45
 19428  0051DC                     __ptext45:
 19429                           	opt stack 0
 19430  0051DC                     _strichr:
 19431                           	opt stack 24
 19432                           
 19433                           ; BSR set to: 0
 19434                           
 19435                           ; BSR set to: 0
 19436                           ;incstack = 0
 19437                           ;incstack = 0
 19438  0051DC  5163               	movf	strichr@chr& (0+255),w,b
 19439  0051DE  EC2C  F02A         	call	_toupper
 19440  0051E2  6F63               	movwf	strichr@chr& (0+255),b
 19441  0051E4  6B64               	clrf	(strichr@chr+1)& (0+255),b
 19442  0051E6  D010               	goto	l12300
 19443  0051E8                     l12294:
 19444                           
 19445                           ; BSR set to: 0
 19446  0051E8  C061  FFD9         	movff	strichr@ptr,fsr2l
 19447  0051EC  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 19448  0051F0  50DF               	movf	indf2,w,c
 19449  0051F2  EC2C  F02A         	call	_toupper
 19450  0051F6  1963               	xorwf	strichr@chr& (0+255),w,b
 19451  0051F8  E105               	bnz	l12298
 19452                           
 19453                           ; BSR set to: 0
 19454  0051FA  C061  F061         	movff	strichr@ptr,?_strichr
 19455  0051FE  C062  F062         	movff	strichr@ptr+1,?_strichr+1
 19456  005202  D00A               	goto	l2451
 19457  005204                     l12298:
 19458                           
 19459                           ; BSR set to: 0
 19460  005204  4B61               	infsnz	strichr@ptr& (0+255),f,b
 19461  005206  2B62               	incf	(strichr@ptr+1)& (0+255),f,b
 19462  005208                     l12300:
 19463                           
 19464                           ; BSR set to: 0
 19465  005208  C061  FFD9         	movff	strichr@ptr,fsr2l
 19466  00520C  C062  FFDA         	movff	strichr@ptr+1,fsr2h
 19467  005210  50DF               	movf	indf2,w,c
 19468  005212  E1EA               	bnz	l12294
 19469                           
 19470                           ; BSR set to: 0
 19471  005214  6B61               	clrf	?_strichr& (0+255),b
 19472  005216  6B62               	clrf	(?_strichr+1)& (0+255),b
 19473  005218                     l2451:
 19474                           
 19475                           ; BSR set to: 0
 19476  005218  0012               	return	
 19477  00521A                     __end_of_strichr:
 19478                           	opt stack 0
 19479                           tblptru	equ	0xFF8
 19480                           tblptrh	equ	0xFF7
 19481                           tblptrl	equ	0xFF6
 19482                           tablat	equ	0xFF5
 19483                           prodh	equ	0xFF4
 19484                           prodl	equ	0xFF3
 19485                           intcon	equ	0xFF2
 19486                           indf0	equ	0xFEF
 19487                           postinc0	equ	0xFEE
 19488                           fsr0h	equ	0xFEA
 19489                           fsr0l	equ	0xFE9
 19490                           wreg	equ	0xFE8
 19491                           indf1	equ	0xFE7
 19492                           postinc1	equ	0xFE6
 19493                           postdec1	equ	0xFE5
 19494                           fsr1h	equ	0xFE2
 19495                           fsr1l	equ	0xFE1
 19496                           indf2	equ	0xFDF
 19497                           postinc2	equ	0xFDE
 19498                           postdec2	equ	0xFDD
 19499                           plusw2	equ	0xFDB
 19500                           fsr2h	equ	0xFDA
 19501                           fsr2l	equ	0xFD9
 19502                           status	equ	0xFD8
 19503                           
 19504 ;; *************** function _strnicmp *****************
 19505 ;; Defined at:
 19506 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 19507 ;; Parameters:    Size  Location     Type
 19508 ;;  s1              2    4[BANK0 ] PTR const unsigned char 
 19509 ;;		 -> NULL(0), cmdbuf(80), 
 19510 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 19511 ;;		 -> STR_121(6), STR_120(8), STR_118(6), STR_116(5), 
 19512 ;;		 -> STR_114(8), STR_113(6), STR_112(9), STR_111(11), 
 19513 ;;		 -> STR_109(8), STR_107(4), STR_106(5), STR_94(5), 
 19514 ;;		 -> STR_82(7), STR_77(5), STR_68(5), STR_45(5), 
 19515 ;;		 -> STR_44(5), STR_42(5), STR_41(4), STR_40(5), 
 19516 ;;		 -> STR_37(3), STR_28(3), STR_19(7), STR_17(8), 
 19517 ;;		 -> STR_15(7), STR_13(9), STR_11(6), STR_9(7), 
 19518 ;;		 -> STR_7(5), STR_5(5), 
 19519 ;;  len             2    8[BANK0 ] unsigned int 
 19520 ;; Auto vars:     Size  Location     Type
 19521 ;;  r               1   12[BANK0 ] char 
 19522 ;; Return value:  Size  Location     Type
 19523 ;;                  2    4[BANK0 ] int 
 19524 ;; Registers used:
 19525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19526 ;; Tracked objects:
 19527 ;;		On entry : F/0
 19528 ;;		On exit  : F/0
 19529 ;;		Unchanged: 0/0
 19530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19531 ;;      Params:         0       6       0       0       0       0       0
 19532 ;;      Locals:         0       1       0       0       0       0       0
 19533 ;;      Temps:          0       2       0       0       0       0       0
 19534 ;;      Totals:         0       9       0       0       0       0       0
 19535 ;;Total ram usage:        9 bytes
 19536 ;; Hardware stack levels used:    1
 19537 ;; Hardware stack levels required when called:    4
 19538 ;; This function calls:
 19539 ;;		_toupper
 19540 ;; This function is called by:
 19541 ;;		_stristr
 19542 ;; This function uses a non-reentrant model
 19543 ;;
 19544                           
 19545                           	psect	text46
 19546  004C94                     __ptext46:
 19547                           	opt stack 0
 19548  004C94                     _strnicmp:
 19549                           	opt stack 24
 19550                           
 19551                           ; BSR set to: 0
 19552                           
 19553                           ; BSR set to: 0
 19554                           ;incstack = 0
 19555                           ;incstack = 0
 19556  004C94  D027               	goto	l12290
 19557  004C96                     l12280:
 19558                           
 19559                           ; BSR set to: 0
 19560  004C96  C066  FFF6         	movff	strnicmp@s2,tblptrl
 19561  004C9A  C067  FFF7         	movff	strnicmp@s2+1,tblptrh
 19562  004C9E  0008               	tblrd		*
 19563  004CA0  50F5               	movf	tablat,w,c
 19564  004CA2  EC2C  F02A         	call	_toupper
 19565  004CA6  6F6A               	movwf	??_strnicmp& (0+255),b
 19566  004CA8  C064  FFD9         	movff	strnicmp@s1,fsr2l
 19567  004CAC  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 19568  004CB0  50DF               	movf	indf2,w,c
 19569  004CB2  EC2C  F02A         	call	_toupper
 19570  004CB6  6F6B               	movwf	(??_strnicmp+1)& (0+255),b
 19571  004CB8  516A               	movf	??_strnicmp& (0+255),w,b
 19572  004CBA  5D6B               	subwf	(??_strnicmp+1)& (0+255),w,b
 19573  004CBC  6F6C               	movwf	strnicmp@r& (0+255),b
 19574  004CBE  0100               	movlb	0	; () banked
 19575  004CC0  676C               	tstfsz	strnicmp@r& (0+255),b
 19576  004CC2  D006               	goto	l12284
 19577                           
 19578                           ; BSR set to: 0
 19579  004CC4  C064  FFD9         	movff	strnicmp@s1,fsr2l
 19580  004CC8  C065  FFDA         	movff	strnicmp@s1+1,fsr2h
 19581  004CCC  50DF               	movf	indf2,w,c
 19582  004CCE  E106               	bnz	l12288
 19583  004CD0                     l12284:
 19584                           
 19585                           ; BSR set to: 0
 19586  004CD0  516C               	movf	strnicmp@r& (0+255),w,b
 19587  004CD2  6F64               	movwf	?_strnicmp& (0+255),b
 19588  004CD4  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 19589  004CD6  BF64               	btfsc	?_strnicmp& (0+255),7,b
 19590  004CD8  0765               	decf	(?_strnicmp+1)& (0+255),f,b
 19591  004CDA  D00E               	goto	l2403
 19592  004CDC                     l12288:
 19593                           
 19594                           ; BSR set to: 0
 19595  004CDC  4B64               	infsnz	strnicmp@s1& (0+255),f,b
 19596  004CDE  2B65               	incf	(strnicmp@s1+1)& (0+255),f,b
 19597  004CE0  4B66               	infsnz	strnicmp@s2& (0+255),f,b
 19598  004CE2  2B67               	incf	(strnicmp@s2+1)& (0+255),f,b
 19599  004CE4                     l12290:
 19600                           
 19601                           ; BSR set to: 0
 19602  004CE4  0768               	decf	strnicmp@len& (0+255),f,b
 19603  004CE6  A0D8               	btfss	status,0,c
 19604  004CE8  0769               	decf	(strnicmp@len+1)& (0+255),f,b
 19605  004CEA  0100               	movlb	0	; () banked
 19606  004CEC  2968               	incf	strnicmp@len& (0+255),w,b
 19607  004CEE  B4D8               	btfsc	status,2,c
 19608  004CF0  2969               	incf	(strnicmp@len+1)& (0+255),w,b
 19609  004CF2  E1D1               	bnz	l12280
 19610                           
 19611                           ; BSR set to: 0
 19612  004CF4  6B64               	clrf	?_strnicmp& (0+255),b
 19613  004CF6  6B65               	clrf	(?_strnicmp+1)& (0+255),b
 19614  004CF8                     l2403:
 19615                           
 19616                           ; BSR set to: 0
 19617  004CF8  0012               	return	
 19618  004CFA                     __end_of_strnicmp:
 19619                           	opt stack 0
 19620                           tblptru	equ	0xFF8
 19621                           tblptrh	equ	0xFF7
 19622                           tblptrl	equ	0xFF6
 19623                           tablat	equ	0xFF5
 19624                           prodh	equ	0xFF4
 19625                           prodl	equ	0xFF3
 19626                           intcon	equ	0xFF2
 19627                           indf0	equ	0xFEF
 19628                           postinc0	equ	0xFEE
 19629                           fsr0h	equ	0xFEA
 19630                           fsr0l	equ	0xFE9
 19631                           wreg	equ	0xFE8
 19632                           indf1	equ	0xFE7
 19633                           postinc1	equ	0xFE6
 19634                           postdec1	equ	0xFE5
 19635                           fsr1h	equ	0xFE2
 19636                           fsr1l	equ	0xFE1
 19637                           indf2	equ	0xFDF
 19638                           postinc2	equ	0xFDE
 19639                           postdec2	equ	0xFDD
 19640                           plusw2	equ	0xFDB
 19641                           fsr2h	equ	0xFDA
 19642                           fsr2l	equ	0xFD9
 19643                           status	equ	0xFD8
 19644                           
 19645 ;; *************** function _toupper *****************
 19646 ;; Defined at:
 19647 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 19648 ;; Parameters:    Size  Location     Type
 19649 ;;  c               1    wreg     unsigned char 
 19650 ;; Auto vars:     Size  Location     Type
 19651 ;;  c               1    0[BANK0 ] unsigned char 
 19652 ;; Return value:  Size  Location     Type
 19653 ;;                  1    wreg      unsigned char 
 19654 ;; Registers used:
 19655 ;;		wreg, status,2, status,0
 19656 ;; Tracked objects:
 19657 ;;		On entry : F/0
 19658 ;;		On exit  : F/0
 19659 ;;		Unchanged: 0/0
 19660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19661 ;;      Params:         0       0       0       0       0       0       0
 19662 ;;      Locals:         0       1       0       0       0       0       0
 19663 ;;      Temps:          0       0       0       0       0       0       0
 19664 ;;      Totals:         0       1       0       0       0       0       0
 19665 ;;Total ram usage:        1 bytes
 19666 ;; Hardware stack levels used:    1
 19667 ;; Hardware stack levels required when called:    3
 19668 ;; This function calls:
 19669 ;;		Nothing
 19670 ;; This function is called by:
 19671 ;;		_strnicmp
 19672 ;;		_strichr
 19673 ;; This function uses a non-reentrant model
 19674 ;;
 19675                           
 19676                           	psect	text47
 19677  005458                     __ptext47:
 19678                           	opt stack 0
 19679  005458                     _toupper:
 19680                           	opt stack 24
 19681                           
 19682                           ; BSR set to: 0
 19683                           ;incstack = 0
 19684                           ;incstack = 0
 19685                           ;toupper@c stored from wreg
 19686  005458  CFE8 F060          	movff	wreg,toupper@c
 19687                           
 19688                           ; BSR set to: 0
 19689  00545C  0E7B               	movlw	123
 19690  00545E  6160               	cpfslt	toupper@c& (0+255),b
 19691  005460  D004               	goto	l12308
 19692                           
 19693                           ; BSR set to: 0
 19694  005462  0E60               	movlw	96
 19695  005464  6560               	cpfsgt	toupper@c& (0+255),b
 19696  005466  D001               	goto	l12308
 19697                           
 19698                           ; BSR set to: 0
 19699  005468  9B60               	bcf	toupper@c& (0+255),5,b
 19700  00546A                     l12308:
 19701                           
 19702                           ; BSR set to: 0
 19703  00546A  5160               	movf	toupper@c& (0+255),w,b
 19704                           
 19705                           ; BSR set to: 0
 19706  00546C  0012               	return	
 19707  00546E                     __end_of_toupper:
 19708                           	opt stack 0
 19709                           tblptru	equ	0xFF8
 19710                           tblptrh	equ	0xFF7
 19711                           tblptrl	equ	0xFF6
 19712                           tablat	equ	0xFF5
 19713                           prodh	equ	0xFF4
 19714                           prodl	equ	0xFF3
 19715                           intcon	equ	0xFF2
 19716                           indf0	equ	0xFEF
 19717                           postinc0	equ	0xFEE
 19718                           fsr0h	equ	0xFEA
 19719                           fsr0l	equ	0xFE9
 19720                           wreg	equ	0xFE8
 19721                           indf1	equ	0xFE7
 19722                           postinc1	equ	0xFE6
 19723                           postdec1	equ	0xFE5
 19724                           fsr1h	equ	0xFE2
 19725                           fsr1l	equ	0xFE1
 19726                           indf2	equ	0xFDF
 19727                           postinc2	equ	0xFDE
 19728                           postdec2	equ	0xFDD
 19729                           plusw2	equ	0xFDB
 19730                           fsr2h	equ	0xFDA
 19731                           fsr2l	equ	0xFD9
 19732                           status	equ	0xFD8
 19733                           
 19734 ;; *************** function _strlen *****************
 19735 ;; Defined at:
 19736 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 19737 ;; Parameters:    Size  Location     Type
 19738 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 19739 ;;		 -> printGUID@buf(3), STR_121(6), STR_120(8), STR_118(6), 
 19740 ;;		 -> STR_116(5), STR_114(8), STR_113(6), STR_112(9), 
 19741 ;;		 -> STR_111(11), STR_109(8), STR_107(4), STR_106(5), 
 19742 ;;		 -> STR_94(5), STR_82(7), STR_77(5), STR_68(5), 
 19743 ;;		 -> wrkbuf(80), STR_45(5), STR_44(5), STR_42(5), 
 19744 ;;		 -> STR_41(4), STR_40(5), STR_37(3), STR_28(3), 
 19745 ;;		 -> STR_19(7), STR_17(8), STR_15(7), STR_13(9), 
 19746 ;;		 -> STR_11(6), STR_9(7), STR_7(5), STR_5(5), 
 19747 ;;		 -> cmdbuf(80), 
 19748 ;; Auto vars:     Size  Location     Type
 19749 ;;  cp              2    2[BANK0 ] PTR const unsigned char 
 19750 ;;		 -> printGUID@buf(3), STR_121(6), STR_120(8), STR_118(6), 
 19751 ;;		 -> STR_116(5), STR_114(8), STR_113(6), STR_112(9), 
 19752 ;;		 -> STR_111(11), STR_109(8), STR_107(4), STR_106(5), 
 19753 ;;		 -> STR_94(5), STR_82(7), STR_77(5), STR_68(5), 
 19754 ;;		 -> wrkbuf(80), STR_45(5), STR_44(5), STR_42(5), 
 19755 ;;		 -> STR_41(4), STR_40(5), STR_37(3), STR_28(3), 
 19756 ;;		 -> STR_19(7), STR_17(8), STR_15(7), STR_13(9), 
 19757 ;;		 -> STR_11(6), STR_9(7), STR_7(5), STR_5(5), 
 19758 ;;		 -> cmdbuf(80), 
 19759 ;; Return value:  Size  Location     Type
 19760 ;;                  2    0[BANK0 ] unsigned int 
 19761 ;; Registers used:
 19762 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19763 ;; Tracked objects:
 19764 ;;		On entry : F/0
 19765 ;;		On exit  : F/0
 19766 ;;		Unchanged: 0/0
 19767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19768 ;;      Params:         0       2       0       0       0       0       0
 19769 ;;      Locals:         0       2       0       0       0       0       0
 19770 ;;      Temps:          0       0       0       0       0       0       0
 19771 ;;      Totals:         0       4       0       0       0       0       0
 19772 ;;Total ram usage:        4 bytes
 19773 ;; Hardware stack levels used:    1
 19774 ;; Hardware stack levels required when called:    3
 19775 ;; This function calls:
 19776 ;;		Nothing
 19777 ;; This function is called by:
 19778 ;;		_doModeSLCAN
 19779 ;;		_receivePrintEventSLCAN
 19780 ;;		_printGUID
 19781 ;;		_hexStringToBytes
 19782 ;;		_stristr
 19783 ;; This function uses a non-reentrant model
 19784 ;;
 19785                           
 19786                           	psect	text48
 19787  00511E                     __ptext48:
 19788                           	opt stack 0
 19789  00511E                     _strlen:
 19790                           	opt stack 25
 19791                           
 19792                           ; BSR set to: 0
 19793                           
 19794                           ; BSR set to: 0
 19795                           ;incstack = 0
 19796                           ;incstack = 0
 19797  00511E  C060  F062         	movff	strlen@s,strlen@cp
 19798  005122  C061  F063         	movff	strlen@s+1,strlen@cp+1
 19799  005126  D003               	goto	l11864
 19800  005128                     l11862:
 19801  005128  0100               	movlb	0	; () banked
 19802  00512A  4B62               	infsnz	strlen@cp& (0+255),f,b
 19803  00512C  2B63               	incf	(strlen@cp+1)& (0+255),f,b
 19804  00512E                     l11864:
 19805                           
 19806                           ; BSR set to: 0
 19807  00512E  5162               	movf	strlen@cp& (0+255),w,b
 19808  005130  6EF6               	movwf	tblptrl,c
 19809  005132  6EE9               	movwf	fsr0l,c
 19810  005134  0E05               	movlw	(high __ramtop+-1)
 19811  005136  6EEA               	movwf	fsr0h,c
 19812  005138  5163               	movf	(strlen@cp+1)& (0+255),w,b
 19813  00513A  64EA               	cpfsgt	fsr0h,c
 19814  00513C  D003               	bra	u15357
 19815  00513E  6EEA               	movwf	fsr0h,c
 19816  005140  50EF               	movf	indf0,w,c
 19817  005142  D003               	bra	u15350
 19818  005144                     u15357:
 19819  005144  6EF7               	movwf	tblptrh,c
 19820  005146  0008               	tblrd		*
 19821  005148  50F5               	movf	tablat,w,c
 19822  00514A                     u15350:
 19823  00514A  0900               	iorlw	0
 19824  00514C  E1ED               	bnz	l11862
 19825  00514E  0100               	movlb	0	; () banked
 19826  005150  5160               	movf	strlen@s& (0+255),w,b
 19827  005152  5D62               	subwf	strlen@cp& (0+255),w,b
 19828  005154  6F60               	movwf	?_strlen& (0+255),b
 19829  005156  5161               	movf	(strlen@s+1)& (0+255),w,b
 19830  005158  5963               	subwfb	(strlen@cp+1)& (0+255),w,b
 19831  00515A  6F61               	movwf	(?_strlen+1)& (0+255),b
 19832                           
 19833                           ; BSR set to: 0
 19834  00515C  0012               	return	
 19835  00515E                     __end_of_strlen:
 19836                           	opt stack 0
 19837                           tblptru	equ	0xFF8
 19838                           tblptrh	equ	0xFF7
 19839                           tblptrl	equ	0xFF6
 19840                           tablat	equ	0xFF5
 19841                           prodh	equ	0xFF4
 19842                           prodl	equ	0xFF3
 19843                           intcon	equ	0xFF2
 19844                           indf0	equ	0xFEF
 19845                           postinc0	equ	0xFEE
 19846                           fsr0h	equ	0xFEA
 19847                           fsr0l	equ	0xFE9
 19848                           wreg	equ	0xFE8
 19849                           indf1	equ	0xFE7
 19850                           postinc1	equ	0xFE6
 19851                           postdec1	equ	0xFE5
 19852                           fsr1h	equ	0xFE2
 19853                           fsr1l	equ	0xFE1
 19854                           indf2	equ	0xFDF
 19855                           postinc2	equ	0xFDE
 19856                           postdec2	equ	0xFDD
 19857                           plusw2	equ	0xFDB
 19858                           fsr2h	equ	0xFDA
 19859                           fsr2l	equ	0xFD9
 19860                           status	equ	0xFD8
 19861                           
 19862 ;; *************** function _receivePrintEventVerbose *****************
 19863 ;; Defined at:
 19864 ;;		line 1651 in file "main.c"
 19865 ;; Parameters:    Size  Location     Type
 19866 ;;		None
 19867 ;; Auto vars:     Size  Location     Type
 19868 ;;  i               1   69[BANK0 ] unsigned char 
 19869 ;; Return value:  Size  Location     Type
 19870 ;;                  1    wreg      enum E15660
 19871 ;; Registers used:
 19872 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19873 ;; Tracked objects:
 19874 ;;		On entry : F/1
 19875 ;;		On exit  : 0/0
 19876 ;;		Unchanged: 0/0
 19877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19878 ;;      Params:         0       0       0       0       0       0       0
 19879 ;;      Locals:         0      13       0       0       0       0       0
 19880 ;;      Temps:          0       5       0       0       0       0       0
 19881 ;;      Totals:         0      18       0       0       0       0       0
 19882 ;;Total ram usage:       18 bytes
 19883 ;; Hardware stack levels used:    1
 19884 ;; Hardware stack levels required when called:    6
 19885 ;; This function calls:
 19886 ;;		_putsUSART
 19887 ;;		_sprintf
 19888 ;;		_getVSCPFrame
 19889 ;; This function is called by:
 19890 ;;		_doModeVerbose
 19891 ;; This function uses a non-reentrant model
 19892 ;;
 19893                           
 19894                           	psect	text49
 19895  00233E                     __ptext49:
 19896                           	opt stack 0
 19897  00233E                     _receivePrintEventVerbose:
 19898                           	opt stack 23
 19899                           
 19900                           ; BSR set to: 1
 19901                           ;main.c: 1652: uint8_t i;
 19902                           ;main.c: 1654: if (getVSCPFrame(&vscpClass,
 19903                           ;main.c: 1655: &vscpType,
 19904                           ;main.c: 1656: &vscpNodeId,
 19905                           ;main.c: 1657: &vscpPriority,
 19906                           ;main.c: 1658: &vscpSize,
 19907                           ;main.c: 1659: vscpData)) {
 19908                           
 19909                           ; BSR set to: 0
 19910                           ;incstack = 0
 19911                           ;incstack = 0
 19912  00233E  0E01               	movlw	high _vscpClass
 19913  002340  0100               	movlb	0	; () banked
 19914  002342  6F73               	movwf	(?_getVSCPFrame+1)& (0+255),b
 19915  002344  0EAC               	movlw	low _vscpClass
 19916  002346  6F72               	movwf	?_getVSCPFrame& (0+255),b
 19917  002348  0E01               	movlw	high _vscpType
 19918  00234A  6F75               	movwf	(?_getVSCPFrame+3)& (0+255),b
 19919  00234C  0EB1               	movlw	low _vscpType
 19920  00234E  6F74               	movwf	(?_getVSCPFrame+2)& (0+255),b
 19921  002350  0E01               	movlw	high _vscpNodeId
 19922  002352  6F77               	movwf	(?_getVSCPFrame+5)& (0+255),b
 19923  002354  0EAE               	movlw	low _vscpNodeId
 19924  002356  6F76               	movwf	(?_getVSCPFrame+4)& (0+255),b
 19925  002358  0E01               	movlw	high _vscpPriority
 19926  00235A  6F79               	movwf	(?_getVSCPFrame+7)& (0+255),b
 19927  00235C  0EAF               	movlw	low _vscpPriority
 19928  00235E  6F78               	movwf	(?_getVSCPFrame+6)& (0+255),b
 19929  002360  0E01               	movlw	high _vscpSize
 19930  002362  6F7B               	movwf	(?_getVSCPFrame+9)& (0+255),b
 19931  002364  0EB0               	movlw	low _vscpSize
 19932  002366  6F7A               	movwf	(?_getVSCPFrame+8)& (0+255),b
 19933  002368  0E01               	movlw	high _vscpData
 19934  00236A  6F7D               	movwf	(?_getVSCPFrame+11)& (0+255),b
 19935  00236C  0EA4               	movlw	low _vscpData
 19936  00236E  6F7C               	movwf	(?_getVSCPFrame+10)& (0+255),b
 19937  002370  EC2E  F024         	call	_getVSCPFrame	;wreg free
 19938  002374  0900               	iorlw	0
 19939  002376  E101 D141          	bz	l10712
 19940                           
 19941                           ; BSR set to: 0
 19942                           ;main.c: 1662: cntRxFrames++;
 19943  00237A  2BDD               	incf	_cntRxFrames& (0+255),f,b
 19944  00237C  0E00               	movlw	0
 19945  00237E  23DE               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 19946  002380  23DF               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 19947  002382  23E0               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 19948                           
 19949                           ;main.c: 1663: cntRxBytes += vscpSize;
 19950  002384  0101               	movlb	1	; () banked
 19951  002386  51B0               	movf	_vscpSize& (0+255),w,b
 19952  002388  0100               	movlb	0	; () banked
 19953  00238A  27D9               	addwf	_cntRxBytes& (0+255),f,b
 19954  00238C  0E00               	movlw	0
 19955  00238E  23DA               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 19956  002390  23DB               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 19957  002392  23DC               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 19958                           
 19959                           ; BSR set to: 0
 19960                           ;main.c: 1665: putsUSART((char *) "<Prio=");
 19961  002394  0E7F               	movlw	high STR_130
 19962  002396  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 19963  002398  0E42               	movlw	low STR_130
 19964  00239A  6F61               	movwf	?_putsUSART& (0+255),b
 19965  00239C  EC6A  F027         	call	_putsUSART	;wreg free
 19966                           
 19967                           ;main.c: 1666: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 19968  0023A0  0101               	movlb	1	; () banked
 19969  0023A2  6700               	tstfsz	_bHex& (0+255),b
 19970  0023A4  D005               	goto	l10630
 19971                           
 19972                           ; BSR set to: 1
 19973  0023A6  0E7F               	movlw	high STR_53
 19974  0023A8  0100               	movlb	0	; () banked
 19975  0023AA  6F9A               	movwf	(_receivePrintEventVerbose$1289+1)& (0+255),b
 19976  0023AC  0EEE               	movlw	low STR_53
 19977  0023AE  D004               	goto	L26
 19978  0023B0                     l10630:
 19979                           
 19980                           ; BSR set to: 1
 19981  0023B0  0E7F               	movlw	high STR_52
 19982  0023B2  0100               	movlb	0	; () banked
 19983  0023B4  6F9A               	movwf	(_receivePrintEventVerbose$1289+1)& (0+255),b
 19984  0023B6  0E65               	movlw	low STR_52
 19985  0023B8                     L26:
 19986  0023B8  6F99               	movwf	_receivePrintEventVerbose$1289& (0+255),b
 19987                           
 19988                           ; BSR set to: 0
 19989  0023BA  0E01               	movlw	high _wrkbuf
 19990  0023BC  0100               	movlb	0	; () banked
 19991  0023BE  6F77               	movwf	(?_sprintf+1)& (0+255),b
 19992  0023C0  0E54               	movlw	low _wrkbuf
 19993  0023C2  6F76               	movwf	?_sprintf& (0+255),b
 19994  0023C4  C099  F078         	movff	_receivePrintEventVerbose$1289,?_sprintf+2
 19995  0023C8  C09A  F079         	movff	_receivePrintEventVerbose$1289+1,?_sprintf+3
 19996  0023CC  C1AF  F07A         	movff	_vscpPriority,?_sprintf+4
 19997  0023D0  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 19998  0023D2  ECDD  F00A         	call	_sprintf	;wreg free
 19999                           
 20000                           ; BSR set to: 0
 20001                           ;main.c: 1667: putsUSART(wrkbuf);
 20002  0023D6  0E01               	movlw	high _wrkbuf
 20003  0023D8  0100               	movlb	0	; () banked
 20004  0023DA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20005  0023DC  0E54               	movlw	low _wrkbuf
 20006  0023DE  6F61               	movwf	?_putsUSART& (0+255),b
 20007  0023E0  EC6A  F027         	call	_putsUSART	;wreg free
 20008                           
 20009                           ;main.c: 1668: putsUSART((char *) ",class=");
 20010  0023E4  0E7E               	movlw	high STR_133
 20011  0023E6  0100               	movlb	0	; () banked
 20012  0023E8  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20013  0023EA  0EF6               	movlw	low STR_133
 20014  0023EC  6F61               	movwf	?_putsUSART& (0+255),b
 20015  0023EE  EC6A  F027         	call	_putsUSART	;wreg free
 20016                           
 20017                           ;main.c: 1669: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20018  0023F2  0101               	movlb	1	; () banked
 20019  0023F4  6700               	tstfsz	_bHex& (0+255),b
 20020  0023F6  D005               	goto	l10642
 20021                           
 20022                           ; BSR set to: 1
 20023  0023F8  0E7F               	movlw	high STR_53
 20024  0023FA  0100               	movlb	0	; () banked
 20025  0023FC  6F9C               	movwf	(_receivePrintEventVerbose$1294+1)& (0+255),b
 20026  0023FE  0EEE               	movlw	low STR_53
 20027  002400  D004               	goto	L27
 20028  002402                     l10642:
 20029                           
 20030                           ; BSR set to: 1
 20031  002402  0E7F               	movlw	high STR_134
 20032  002404  0100               	movlb	0	; () banked
 20033  002406  6F9C               	movwf	(_receivePrintEventVerbose$1294+1)& (0+255),b
 20034  002408  0E6C               	movlw	low STR_134
 20035  00240A                     L27:
 20036  00240A  6F9B               	movwf	_receivePrintEventVerbose$1294& (0+255),b
 20037                           
 20038                           ; BSR set to: 0
 20039  00240C  0E01               	movlw	high _wrkbuf
 20040  00240E  0100               	movlb	0	; () banked
 20041  002410  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20042  002412  0E54               	movlw	low _wrkbuf
 20043  002414  6F76               	movwf	?_sprintf& (0+255),b
 20044  002416  C09B  F078         	movff	_receivePrintEventVerbose$1294,?_sprintf+2
 20045  00241A  C09C  F079         	movff	_receivePrintEventVerbose$1294+1,?_sprintf+3
 20046  00241E  C1AC  F07A         	movff	_vscpClass,?_sprintf+4
 20047  002422  C1AD  F07B         	movff	_vscpClass+1,?_sprintf+5
 20048  002426  ECDD  F00A         	call	_sprintf	;wreg free
 20049                           
 20050                           ; BSR set to: 0
 20051                           ;main.c: 1670: putsUSART(wrkbuf);
 20052  00242A  0E01               	movlw	high _wrkbuf
 20053  00242C  0100               	movlb	0	; () banked
 20054  00242E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20055  002430  0E54               	movlw	low _wrkbuf
 20056  002432  6F61               	movwf	?_putsUSART& (0+255),b
 20057  002434  EC6A  F027         	call	_putsUSART	;wreg free
 20058                           
 20059                           ;main.c: 1671: putsUSART((char *) ",type=");
 20060  002438  0E7F               	movlw	high STR_136
 20061  00243A  0100               	movlb	0	; () banked
 20062  00243C  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20063  00243E  0E34               	movlw	low STR_136
 20064  002440  6F61               	movwf	?_putsUSART& (0+255),b
 20065  002442  EC6A  F027         	call	_putsUSART	;wreg free
 20066                           
 20067                           ;main.c: 1672: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 20068  002446  0101               	movlb	1	; () banked
 20069  002448  6700               	tstfsz	_bHex& (0+255),b
 20070  00244A  D005               	goto	l10654
 20071                           
 20072                           ; BSR set to: 1
 20073  00244C  0E7F               	movlw	high STR_53
 20074  00244E  0100               	movlb	0	; () banked
 20075  002450  6F9E               	movwf	(_receivePrintEventVerbose$1299+1)& (0+255),b
 20076  002452  0EEE               	movlw	low STR_53
 20077  002454  D004               	goto	L28
 20078  002456                     l10654:
 20079                           
 20080                           ; BSR set to: 1
 20081  002456  0E7F               	movlw	high STR_52
 20082  002458  0100               	movlb	0	; () banked
 20083  00245A  6F9E               	movwf	(_receivePrintEventVerbose$1299+1)& (0+255),b
 20084  00245C  0E65               	movlw	low STR_52
 20085  00245E                     L28:
 20086  00245E  6F9D               	movwf	_receivePrintEventVerbose$1299& (0+255),b
 20087                           
 20088                           ; BSR set to: 0
 20089  002460  0E01               	movlw	high _wrkbuf
 20090  002462  0100               	movlb	0	; () banked
 20091  002464  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20092  002466  0E54               	movlw	low _wrkbuf
 20093  002468  6F76               	movwf	?_sprintf& (0+255),b
 20094  00246A  C09D  F078         	movff	_receivePrintEventVerbose$1299,?_sprintf+2
 20095  00246E  C09E  F079         	movff	_receivePrintEventVerbose$1299+1,?_sprintf+3
 20096  002472  C1B1  F07A         	movff	_vscpType,?_sprintf+4
 20097  002476  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20098  002478  ECDD  F00A         	call	_sprintf	;wreg free
 20099                           
 20100                           ; BSR set to: 0
 20101                           ;main.c: 1673: putsUSART(wrkbuf);
 20102  00247C  0E01               	movlw	high _wrkbuf
 20103  00247E  0100               	movlb	0	; () banked
 20104  002480  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20105  002482  0E54               	movlw	low _wrkbuf
 20106  002484  6F61               	movwf	?_putsUSART& (0+255),b
 20107  002486  EC6A  F027         	call	_putsUSART	;wreg free
 20108                           
 20109                           ;main.c: 1674: putsUSART((char *) ",nodeid=");
 20110  00248A  0E7E               	movlw	high STR_139
 20111  00248C  0100               	movlb	0	; () banked
 20112  00248E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20113  002490  0EC4               	movlw	low STR_139
 20114  002492  6F61               	movwf	?_putsUSART& (0+255),b
 20115  002494  EC6A  F027         	call	_putsUSART	;wreg free
 20116                           
 20117                           ;main.c: 1675: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 20118  002498  0101               	movlb	1	; () banked
 20119  00249A  6700               	tstfsz	_bHex& (0+255),b
 20120  00249C  D005               	goto	l10666
 20121                           
 20122                           ; BSR set to: 1
 20123  00249E  0E7F               	movlw	high STR_53
 20124  0024A0  0100               	movlb	0	; () banked
 20125  0024A2  6FA0               	movwf	(_receivePrintEventVerbose$1304+1)& (0+255),b
 20126  0024A4  0EEE               	movlw	low STR_53
 20127  0024A6  D004               	goto	L29
 20128  0024A8                     l10666:
 20129                           
 20130                           ; BSR set to: 1
 20131  0024A8  0E7F               	movlw	high STR_52
 20132  0024AA  0100               	movlb	0	; () banked
 20133  0024AC  6FA0               	movwf	(_receivePrintEventVerbose$1304+1)& (0+255),b
 20134  0024AE  0E65               	movlw	low STR_52
 20135  0024B0                     L29:
 20136  0024B0  6F9F               	movwf	_receivePrintEventVerbose$1304& (0+255),b
 20137                           
 20138                           ; BSR set to: 0
 20139  0024B2  0E01               	movlw	high _wrkbuf
 20140  0024B4  0100               	movlb	0	; () banked
 20141  0024B6  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20142  0024B8  0E54               	movlw	low _wrkbuf
 20143  0024BA  6F76               	movwf	?_sprintf& (0+255),b
 20144  0024BC  C09F  F078         	movff	_receivePrintEventVerbose$1304,?_sprintf+2
 20145  0024C0  C0A0  F079         	movff	_receivePrintEventVerbose$1304+1,?_sprintf+3
 20146  0024C4  C1AE  F07A         	movff	_vscpNodeId,?_sprintf+4
 20147  0024C8  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20148  0024CA  ECDD  F00A         	call	_sprintf	;wreg free
 20149                           
 20150                           ; BSR set to: 0
 20151                           ;main.c: 1676: putsUSART(wrkbuf);
 20152  0024CE  0E01               	movlw	high _wrkbuf
 20153  0024D0  0100               	movlb	0	; () banked
 20154  0024D2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20155  0024D4  0E54               	movlw	low _wrkbuf
 20156  0024D6  6F61               	movwf	?_putsUSART& (0+255),b
 20157  0024D8  EC6A  F027         	call	_putsUSART	;wreg free
 20158                           
 20159                           ;main.c: 1677: putsUSART((char *) ",size=");
 20160  0024DC  0E7F               	movlw	high STR_142
 20161  0024DE  0100               	movlb	0	; () banked
 20162  0024E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20163  0024E2  0E3B               	movlw	low STR_142
 20164  0024E4  6F61               	movwf	?_putsUSART& (0+255),b
 20165  0024E6  EC6A  F027         	call	_putsUSART	;wreg free
 20166                           
 20167                           ;main.c: 1678: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 20168  0024EA  0101               	movlb	1	; () banked
 20169  0024EC  6700               	tstfsz	_bHex& (0+255),b
 20170  0024EE  D005               	goto	l10678
 20171                           
 20172                           ; BSR set to: 1
 20173  0024F0  0E7F               	movlw	high STR_53
 20174  0024F2  0100               	movlb	0	; () banked
 20175  0024F4  6FA2               	movwf	(_receivePrintEventVerbose$1309+1)& (0+255),b
 20176  0024F6  0EEE               	movlw	low STR_53
 20177  0024F8  D004               	goto	L30
 20178  0024FA                     l10678:
 20179                           
 20180                           ; BSR set to: 1
 20181  0024FA  0E7F               	movlw	high STR_52
 20182  0024FC  0100               	movlb	0	; () banked
 20183  0024FE  6FA2               	movwf	(_receivePrintEventVerbose$1309+1)& (0+255),b
 20184  002500  0E65               	movlw	low STR_52
 20185  002502                     L30:
 20186  002502  6FA1               	movwf	_receivePrintEventVerbose$1309& (0+255),b
 20187                           
 20188                           ; BSR set to: 0
 20189  002504  0E01               	movlw	high _wrkbuf
 20190  002506  0100               	movlb	0	; () banked
 20191  002508  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20192  00250A  0E54               	movlw	low _wrkbuf
 20193  00250C  6F76               	movwf	?_sprintf& (0+255),b
 20194  00250E  C0A1  F078         	movff	_receivePrintEventVerbose$1309,?_sprintf+2
 20195  002512  C0A2  F079         	movff	_receivePrintEventVerbose$1309+1,?_sprintf+3
 20196  002516  C1B0  F07A         	movff	_vscpSize,?_sprintf+4
 20197  00251A  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20198  00251C  ECDD  F00A         	call	_sprintf	;wreg free
 20199                           
 20200                           ; BSR set to: 0
 20201                           ;main.c: 1679: putsUSART(wrkbuf);
 20202  002520  0E01               	movlw	high _wrkbuf
 20203  002522  0100               	movlb	0	; () banked
 20204  002524  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20205  002526  0E54               	movlw	low _wrkbuf
 20206  002528  6F61               	movwf	?_putsUSART& (0+255),b
 20207  00252A  EC6A  F027         	call	_putsUSART	;wreg free
 20208                           
 20209                           ;main.c: 1680: if (vscpSize > 0) {
 20210  00252E  0101               	movlb	1	; () banked
 20211  002530  51B0               	movf	_vscpSize& (0+255),w,b
 20212  002532  E054               	bz	l10706
 20213                           
 20214                           ; BSR set to: 1
 20215                           ;main.c: 1681: putsUSART((char *) ",Data=");
 20216  002534  0E7F               	movlw	high STR_145
 20217  002536  0100               	movlb	0	; () banked
 20218  002538  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20219  00253A  0E2D               	movlw	low STR_145
 20220  00253C  6F61               	movwf	?_putsUSART& (0+255),b
 20221  00253E  EC6A  F027         	call	_putsUSART	;wreg free
 20222                           
 20223                           ;main.c: 1682: for (i = 0; i < vscpSize; i++) {
 20224  002542  0100               	movlb	0	; () banked
 20225  002544  6BA5               	clrf	receivePrintEventVerbose@i& (0+255),b
 20226  002546  D044               	goto	l10704
 20227  002548                     l875:
 20228                           
 20229                           ; BSR set to: 0
 20230                           ;main.c: 1684: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 20231  002548  0101               	movlb	1	; () banked
 20232  00254A  6700               	tstfsz	_bHex& (0+255),b
 20233  00254C  D005               	goto	l10692
 20234                           
 20235                           ; BSR set to: 1
 20236  00254E  0E7F               	movlw	high STR_53
 20237  002550  0100               	movlb	0	; () banked
 20238  002552  6FA4               	movwf	(_receivePrintEventVerbose$1314+1)& (0+255),b
 20239  002554  0EEE               	movlw	low STR_53
 20240  002556  D004               	goto	L31
 20241  002558                     l10692:
 20242                           
 20243                           ; BSR set to: 1
 20244  002558  0E7F               	movlw	high STR_52
 20245  00255A  0100               	movlb	0	; () banked
 20246  00255C  6FA4               	movwf	(_receivePrintEventVerbose$1314+1)& (0+255),b
 20247  00255E  0E65               	movlw	low STR_52
 20248  002560                     L31:
 20249  002560  6FA3               	movwf	_receivePrintEventVerbose$1314& (0+255),b
 20250                           
 20251                           ; BSR set to: 0
 20252  002562  0E01               	movlw	high _wrkbuf
 20253  002564  0100               	movlb	0	; () banked
 20254  002566  6F77               	movwf	(?_sprintf+1)& (0+255),b
 20255  002568  0E54               	movlw	low _wrkbuf
 20256  00256A  6F76               	movwf	?_sprintf& (0+255),b
 20257  00256C  C0A3  F078         	movff	_receivePrintEventVerbose$1314,?_sprintf+2
 20258  002570  C0A4  F079         	movff	_receivePrintEventVerbose$1314+1,?_sprintf+3
 20259  002574  0EA4               	movlw	low _vscpData
 20260  002576  25A5               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 20261  002578  6ED9               	movwf	fsr2l,c
 20262  00257A  6ADA               	clrf	fsr2h,c
 20263  00257C  0E01               	movlw	high _vscpData
 20264  00257E  22DA               	addwfc	fsr2h,f,c
 20265  002580  50DF               	movf	indf2,w,c
 20266  002582  6F7A               	movwf	(?_sprintf+4)& (0+255),b
 20267  002584  6B7B               	clrf	(?_sprintf+5)& (0+255),b
 20268  002586  ECDD  F00A         	call	_sprintf	;wreg free
 20269                           
 20270                           ; BSR set to: 0
 20271                           ;main.c: 1685: putsUSART(wrkbuf);
 20272  00258A  0E01               	movlw	high _wrkbuf
 20273  00258C  0100               	movlb	0	; () banked
 20274  00258E  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20275  002590  0E54               	movlw	low _wrkbuf
 20276  002592  6F61               	movwf	?_putsUSART& (0+255),b
 20277  002594  EC6A  F027         	call	_putsUSART	;wreg free
 20278                           
 20279                           ;main.c: 1686: if (i < (vscpSize - 1)) {
 20280  002598  0EFF               	movlw	255
 20281  00259A  0101               	movlb	1	; () banked
 20282  00259C  25B0               	addwf	_vscpSize& (0+255),w,b
 20283  00259E  0100               	movlb	0	; () banked
 20284  0025A0  6F94               	movwf	??_receivePrintEventVerbose& (0+255),b
 20285  0025A2  6B95               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 20286  0025A4  0EFF               	movlw	255
 20287  0025A6  2395               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 20288  0025A8  51A5               	movf	receivePrintEventVerbose@i& (0+255),w,b
 20289  0025AA  6F96               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 20290  0025AC  6B97               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 20291  0025AE  5197               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 20292  0025B0  0A80               	xorlw	128
 20293  0025B2  6F98               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 20294  0025B4  5194               	movf	??_receivePrintEventVerbose& (0+255),w,b
 20295  0025B6  5D96               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 20296  0025B8  5195               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 20297  0025BA  0A80               	xorlw	128
 20298  0025BC  5998               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 20299  0025BE  E206               	bc	l10702
 20300                           
 20301                           ; BSR set to: 0
 20302                           ;main.c: 1687: putsUSART((char *) ",");
 20303  0025C0  0E7F               	movlw	high STR_29
 20304  0025C2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20305  0025C4  0EF5               	movlw	low STR_29
 20306  0025C6  6F61               	movwf	?_putsUSART& (0+255),b
 20307  0025C8  EC6A  F027         	call	_putsUSART	;wreg free
 20308  0025CC                     l10702:
 20309  0025CC  0100               	movlb	0	; () banked
 20310  0025CE  2BA5               	incf	receivePrintEventVerbose@i& (0+255),f,b
 20311  0025D0                     l10704:
 20312                           
 20313                           ; BSR set to: 0
 20314  0025D0  0101               	movlb	1	; () banked
 20315  0025D2  51B0               	movf	_vscpSize& (0+255),w,b
 20316  0025D4  0100               	movlb	0	; () banked
 20317  0025D6  5DA5               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 20318  0025D8  E208               	bc	l882
 20319  0025DA  D7B6               	goto	l875
 20320  0025DC                     l10706:
 20321                           
 20322                           ; BSR set to: 1
 20323                           ;main.c: 1691: putsUSART((char *) ",Data=none");
 20324  0025DC  0E7E               	movlw	high STR_149
 20325  0025DE  0100               	movlb	0	; () banked
 20326  0025E0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20327  0025E2  0E92               	movlw	low STR_149
 20328  0025E4  6F61               	movwf	?_putsUSART& (0+255),b
 20329  0025E6  EC6A  F027         	call	_putsUSART	;wreg free
 20330  0025EA                     l882:
 20331                           
 20332                           ;main.c: 1692: }
 20333                           ;main.c: 1693: putsUSART((char *) ">\r\n");
 20334  0025EA  0E7F               	movlw	high STR_150
 20335  0025EC  0100               	movlb	0	; () banked
 20336  0025EE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 20337  0025F0  0ED5               	movlw	low STR_150
 20338  0025F2  6F61               	movwf	?_putsUSART& (0+255),b
 20339  0025F4  EC6A  F027         	call	_putsUSART	;wreg free
 20340                           
 20341                           ;main.c: 1694: return 1;
 20342  0025F8  0E01               	movlw	1
 20343  0025FA  D001               	goto	l883
 20344  0025FC                     l10712:
 20345                           
 20346                           ; BSR set to: 0
 20347                           ;main.c: 1695: }
 20348                           ;main.c: 1697: return 0;
 20349  0025FC  0E00               	movlw	0
 20350  0025FE                     l883:
 20351  0025FE  0012               	return	
 20352  002600                     __end_of_receivePrintEventVerbose:
 20353                           	opt stack 0
 20354                           tblptru	equ	0xFF8
 20355                           tblptrh	equ	0xFF7
 20356                           tblptrl	equ	0xFF6
 20357                           tablat	equ	0xFF5
 20358                           prodh	equ	0xFF4
 20359                           prodl	equ	0xFF3
 20360                           intcon	equ	0xFF2
 20361                           indf0	equ	0xFEF
 20362                           postinc0	equ	0xFEE
 20363                           fsr0h	equ	0xFEA
 20364                           fsr0l	equ	0xFE9
 20365                           wreg	equ	0xFE8
 20366                           indf1	equ	0xFE7
 20367                           postinc1	equ	0xFE6
 20368                           postdec1	equ	0xFE5
 20369                           fsr1h	equ	0xFE2
 20370                           fsr1l	equ	0xFE1
 20371                           indf2	equ	0xFDF
 20372                           postinc2	equ	0xFDE
 20373                           postdec2	equ	0xFDD
 20374                           plusw2	equ	0xFDB
 20375                           fsr2h	equ	0xFDA
 20376                           fsr2l	equ	0xFD9
 20377                           status	equ	0xFD8
 20378                           
 20379 ;; *************** function _getVSCPFrame *****************
 20380 ;; Defined at:
 20381 ;;		line 2691 in file "main.c"
 20382 ;; Parameters:    Size  Location     Type
 20383 ;;  pvscpclass      2   18[BANK0 ] PTR unsigned short 
 20384 ;;		 -> vscpClass(2), 
 20385 ;;  pvscptype       2   20[BANK0 ] PTR unsigned char 
 20386 ;;		 -> vscpType(1), 
 20387 ;;  pNodeId         2   22[BANK0 ] PTR unsigned char 
 20388 ;;		 -> vscpNodeId(1), 
 20389 ;;  pPriority       2   24[BANK0 ] PTR unsigned char 
 20390 ;;		 -> vscpPriority(1), 
 20391 ;;  pSize           2   26[BANK0 ] PTR unsigned char 
 20392 ;;		 -> vscpSize(1), 
 20393 ;;  pData           2   28[BANK0 ] PTR unsigned char 
 20394 ;;		 -> vscpData(8), 
 20395 ;; Auto vars:     Size  Location     Type
 20396 ;;  id              4   34[BANK0 ] unsigned long 
 20397 ;; Return value:  Size  Location     Type
 20398 ;;                  1    wreg      unsigned char 
 20399 ;; Registers used:
 20400 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 20401 ;; Tracked objects:
 20402 ;;		On entry : F/0
 20403 ;;		On exit  : F/0
 20404 ;;		Unchanged: 0/0
 20405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20406 ;;      Params:         0      12       0       0       0       0       0
 20407 ;;      Locals:         0       4       0       0       0       0       0
 20408 ;;      Temps:          0       4       0       0       0       0       0
 20409 ;;      Totals:         0      20       0       0       0       0       0
 20410 ;;Total ram usage:       20 bytes
 20411 ;; Hardware stack levels used:    1
 20412 ;; Hardware stack levels required when called:    5
 20413 ;; This function calls:
 20414 ;;		_getCANFrame
 20415 ;; This function is called by:
 20416 ;;		_receivePrintEventVerbose
 20417 ;;		_readRegister
 20418 ;;		_readRegisterExtended
 20419 ;;		_writeRegisterExtended
 20420 ;; This function uses a non-reentrant model
 20421 ;;
 20422                           
 20423                           	psect	text50
 20424  00485C                     __ptext50:
 20425                           	opt stack 0
 20426  00485C                     _getVSCPFrame:
 20427                           	opt stack 22
 20428                           
 20429                           ; BSR set to: 0
 20430                           ;main.c: 2692: uint32_t id;
 20431                           ;main.c: 2694: if (!getCANFrame(&id, pSize, pData)) {
 20432                           
 20433                           ;incstack = 0
 20434                           ;incstack = 0
 20435  00485C  C07A  F06D         	movff	getVSCPFrame@pSize,?_getCANFrame
 20436  004860  C07B  F06E         	movff	getVSCPFrame@pSize+1,?_getCANFrame+1
 20437  004864  C07C  F06F         	movff	getVSCPFrame@pData,?_getCANFrame+2
 20438  004868  C07D  F070         	movff	getVSCPFrame@pData+1,?_getCANFrame+3
 20439  00486C  0E82               	movlw	getVSCPFrame@id& (0+255)
 20440  00486E  ECDB  F025         	call	_getCANFrame
 20441  004872  0900               	iorlw	0
 20442  004874  E102               	bnz	l11946
 20443                           
 20444                           ; BSR set to: 0
 20445                           ;main.c: 2695: return 0;
 20446  004876  0E00               	movlw	0
 20447  004878  D033               	goto	l1167
 20448  00487A                     l11946:
 20449                           
 20450                           ; BSR set to: 0
 20451                           ;main.c: 2696: }
 20452                           ;main.c: 2698: *pNodeId = id & 0x0ff;
 20453  00487A  C076  FFD9         	movff	getVSCPFrame@pNodeId,fsr2l
 20454  00487E  C077  FFDA         	movff	getVSCPFrame@pNodeId+1,fsr2h
 20455  004882  C082  FFDF         	movff	getVSCPFrame@id,indf2
 20456                           
 20457                           ;main.c: 2699: *pvscptype = (id >> 8) & 0xff;
 20458  004886  C074  FFD9         	movff	getVSCPFrame@pvscptype,fsr2l
 20459  00488A  C075  FFDA         	movff	getVSCPFrame@pvscptype+1,fsr2h
 20460  00488E  C083  FFDF         	movff	getVSCPFrame@id+1,indf2
 20461                           
 20462                           ; BSR set to: 0
 20463                           ;main.c: 2700: *pvscpclass = (id >> 16) & 0x1ff;
 20464  004892  0100               	movlb	0	; () banked
 20465  004894  5184               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 20466  004896  6F7E               	movwf	??_getVSCPFrame& (0+255),b
 20467  004898  0E01               	movlw	1
 20468  00489A  1585               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 20469  00489C  6F7F               	movwf	(??_getVSCPFrame+1)& (0+255),b
 20470  00489E  C072  FFD9         	movff	getVSCPFrame@pvscpclass,fsr2l
 20471  0048A2  C073  FFDA         	movff	getVSCPFrame@pvscpclass+1,fsr2h
 20472  0048A6  C07E  FFDE         	movff	??_getVSCPFrame,postinc2
 20473  0048AA  C07F  FFDD         	movff	??_getVSCPFrame+1,postdec2
 20474                           
 20475                           ; BSR set to: 0
 20476                           ;main.c: 2701: *pPriority = (uint16_t) (0x07 & (id >> 26));
 20477  0048AE  C082  F07E         	movff	getVSCPFrame@id,??_getVSCPFrame
 20478  0048B2  C083  F07F         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 20479  0048B6  C084  F080         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 20480  0048BA  C085  F081         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 20481  0048BE  0E1B               	movlw	27
 20482  0048C0  D005               	goto	u15500
 20483  0048C2                     u15505:
 20484  0048C2  90D8               	bcf	status,0,c
 20485  0048C4  3381               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 20486  0048C6  3380               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 20487  0048C8  337F               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 20488  0048CA  337E               	rrcf	??_getVSCPFrame& (0+255),f,b
 20489  0048CC                     u15500:
 20490  0048CC  2EE8               	decfsz	wreg,f,c
 20491  0048CE  D7F9               	goto	u15505
 20492  0048D0  517E               	movf	??_getVSCPFrame& (0+255),w,b
 20493  0048D2  0B07               	andlw	7
 20494  0048D4  C078  FFD9         	movff	getVSCPFrame@pPriority,fsr2l
 20495  0048D8  C079  FFDA         	movff	getVSCPFrame@pPriority+1,fsr2h
 20496  0048DC  6EDF               	movwf	indf2,c
 20497                           
 20498                           ; BSR set to: 0
 20499                           ;main.c: 2703: return 1;
 20500  0048DE  0E01               	movlw	1
 20501  0048E0                     l1167:
 20502                           
 20503                           ; BSR set to: 0
 20504  0048E0  0012               	return	
 20505  0048E2                     __end_of_getVSCPFrame:
 20506                           	opt stack 0
 20507                           tblptru	equ	0xFF8
 20508                           tblptrh	equ	0xFF7
 20509                           tblptrl	equ	0xFF6
 20510                           tablat	equ	0xFF5
 20511                           prodh	equ	0xFF4
 20512                           prodl	equ	0xFF3
 20513                           intcon	equ	0xFF2
 20514                           indf0	equ	0xFEF
 20515                           postinc0	equ	0xFEE
 20516                           fsr0h	equ	0xFEA
 20517                           fsr0l	equ	0xFE9
 20518                           wreg	equ	0xFE8
 20519                           indf1	equ	0xFE7
 20520                           postinc1	equ	0xFE6
 20521                           postdec1	equ	0xFE5
 20522                           fsr1h	equ	0xFE2
 20523                           fsr1l	equ	0xFE1
 20524                           indf2	equ	0xFDF
 20525                           postinc2	equ	0xFDE
 20526                           postdec2	equ	0xFDD
 20527                           plusw2	equ	0xFDB
 20528                           fsr2h	equ	0xFDA
 20529                           fsr2l	equ	0xFD9
 20530                           status	equ	0xFD8
 20531                           
 20532 ;; *************** function _getCANFrame *****************
 20533 ;; Defined at:
 20534 ;;		line 2727 in file "main.c"
 20535 ;; Parameters:    Size  Location     Type
 20536 ;;  pid             1    wreg     PTR unsigned long 
 20537 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 20538 ;;  pdlc            2   13[BANK0 ] PTR unsigned char 
 20539 ;;		 -> receivePrintEventSLCAN@dlc(1), receivePrintEventCANAL@dlc(1), vscpSize(1), 
 20540 ;;  pdata           2   15[BANK0 ] PTR unsigned char 
 20541 ;;		 -> receivePrintEventCANAL@data(8), vscpData(8), 
 20542 ;; Auto vars:     Size  Location     Type
 20543 ;;  pid             1   17[BANK0 ] PTR unsigned long 
 20544 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@id(4), 
 20545 ;; Return value:  Size  Location     Type
 20546 ;;                  1    wreg      unsigned char 
 20547 ;; Registers used:
 20548 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 20549 ;; Tracked objects:
 20550 ;;		On entry : F/0
 20551 ;;		On exit  : F/0
 20552 ;;		Unchanged: 0/0
 20553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20554 ;;      Params:         0       4       0       0       0       0       0
 20555 ;;      Locals:         0       1       0       0       0       0       0
 20556 ;;      Temps:          0       0       0       0       0       0       0
 20557 ;;      Totals:         0       5       0       0       0       0       0
 20558 ;;Total ram usage:        5 bytes
 20559 ;; Hardware stack levels used:    1
 20560 ;; Hardware stack levels required when called:    4
 20561 ;; This function calls:
 20562 ;;		_fifo_read
 20563 ;; This function is called by:
 20564 ;;		_receivePrintEventCANAL
 20565 ;;		_receivePrintEventSLCAN
 20566 ;;		_getVSCPFrame
 20567 ;; This function uses a non-reentrant model
 20568 ;;
 20569                           
 20570                           	psect	text51
 20571  004BB6                     __ptext51:
 20572                           	opt stack 0
 20573  004BB6                     _getCANFrame:
 20574                           	opt stack 24
 20575                           
 20576                           ; BSR set to: 0
 20577                           ;incstack = 0
 20578                           ;incstack = 0
 20579                           ;getCANFrame@pid stored from wreg
 20580  004BB6  CFE8 F071          	movff	wreg,getCANFrame@pid
 20581                           
 20582                           ; BSR set to: 0
 20583                           ;main.c: 2748: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 20584  004BBA  C071  F060         	movff	getCANFrame@pid,?_fifo_read
 20585  004BBE  6B61               	clrf	(?_fifo_read+1)& (0+255),b
 20586  004BC0  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 20587  004BC2  0E04               	movlw	4
 20588  004BC4  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 20589  004BC6  0E36               	movlw	_canInputFifo& (0+255)
 20590  004BC8  EC60  F020         	call	_fifo_read
 20591  004BCC  5160               	movf	?_fifo_read& (0+255),w,b
 20592  004BCE  0A04               	xorlw	4
 20593  004BD0  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 20594  004BD2  E006               	bz	l11962
 20595  004BD4                     l11958:
 20596                           
 20597                           ; BSR set to: 0
 20598                           ;main.c: 2749: return *pdlc;
 20599  004BD4  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 20600  004BD8  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 20601  004BDC  50DF               	movf	indf2,w,c
 20602  004BDE  D024               	goto	l1175
 20603  004BE0                     l11962:
 20604                           
 20605                           ; BSR set to: 0
 20606                           ;main.c: 2750: }
 20607                           ;main.c: 2753: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 20608  004BE0  C06D  F060         	movff	getCANFrame@pdlc,?_fifo_read
 20609  004BE4  C06E  F061         	movff	getCANFrame@pdlc+1,?_fifo_read+1
 20610  004BE8  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 20611  004BEA  0E01               	movlw	1
 20612  004BEC  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 20613  004BEE  0E36               	movlw	_canInputFifo& (0+255)
 20614  004BF0  EC60  F020         	call	_fifo_read
 20615  004BF4  0560               	decf	?_fifo_read& (0+255),w,b
 20616  004BF6  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 20617  004BF8  E1ED               	bnz	l11958
 20618                           
 20619                           ; BSR set to: 0
 20620                           ;main.c: 2755: }
 20621                           ;main.c: 2758: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 20622  004BFA  C06F  F060         	movff	getCANFrame@pdata,?_fifo_read
 20623  004BFE  C070  F061         	movff	getCANFrame@pdata+1,?_fifo_read+1
 20624  004C02  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 20625  004C06  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 20626  004C0A  50DF               	movf	indf2,w,c
 20627  004C0C  6F62               	movwf	(?_fifo_read+2)& (0+255),b
 20628  004C0E  6B63               	clrf	(?_fifo_read+3)& (0+255),b
 20629  004C10  0E36               	movlw	_canInputFifo& (0+255)
 20630  004C12  EC60  F020         	call	_fifo_read
 20631  004C16  C06D  FFD9         	movff	getCANFrame@pdlc,fsr2l
 20632  004C1A  C06E  FFDA         	movff	getCANFrame@pdlc+1,fsr2h
 20633  004C1E  50DF               	movf	indf2,w,c
 20634  004C20  1960               	xorwf	?_fifo_read& (0+255),w,b
 20635  004C22  1161               	iorwf	(?_fifo_read+1)& (0+255),w,b
 20636  004C24  E1D7               	bnz	l11958
 20637                           
 20638                           ; BSR set to: 0
 20639                           ;main.c: 2760: }
 20640                           ;main.c: 2762: return 1;
 20641  004C26  0E01               	movlw	1
 20642  004C28                     l1175:
 20643                           
 20644                           ; BSR set to: 0
 20645  004C28  0012               	return	
 20646  004C2A                     __end_of_getCANFrame:
 20647                           	opt stack 0
 20648                           tblptru	equ	0xFF8
 20649                           tblptrh	equ	0xFF7
 20650                           tblptrl	equ	0xFF6
 20651                           tablat	equ	0xFF5
 20652                           prodh	equ	0xFF4
 20653                           prodl	equ	0xFF3
 20654                           intcon	equ	0xFF2
 20655                           indf0	equ	0xFEF
 20656                           postinc0	equ	0xFEE
 20657                           fsr0h	equ	0xFEA
 20658                           fsr0l	equ	0xFE9
 20659                           wreg	equ	0xFE8
 20660                           indf1	equ	0xFE7
 20661                           postinc1	equ	0xFE6
 20662                           postdec1	equ	0xFE5
 20663                           fsr1h	equ	0xFE2
 20664                           fsr1l	equ	0xFE1
 20665                           indf2	equ	0xFDF
 20666                           postinc2	equ	0xFDE
 20667                           postdec2	equ	0xFDD
 20668                           plusw2	equ	0xFDB
 20669                           fsr2h	equ	0xFDA
 20670                           fsr2l	equ	0xFD9
 20671                           status	equ	0xFD8
 20672                           
 20673 ;; *************** function _fifo_read *****************
 20674 ;; Defined at:
 20675 ;;		line 29 in file "fifo.c"
 20676 ;; Parameters:    Size  Location     Type
 20677 ;;  f               1    wreg     PTR struct .
 20678 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 20679 ;;  buf             2    0[BANK0 ] PTR void 
 20680 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@dlc(1), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@data(8), 
 20681 ;;		 -> receivePrintEventCANAL@dlc(1), receivePrintEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), 
 20682 ;;		 -> vscpData(8), vscpSize(1), doModeVerbose@c(1), main@c(1), 
 20683 ;;  nbytes          2    2[BANK0 ] unsigned short 
 20684 ;; Auto vars:     Size  Location     Type
 20685 ;;  f               1   12[BANK0 ] PTR struct .
 20686 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 20687 ;;  i               2   10[BANK0 ] unsigned short 
 20688 ;;  p               2    8[BANK0 ] PTR unsigned char 
 20689 ;;		 -> getVSCPFrame@id(4), receivePrintEventSLCAN@dlc(1), receivePrintEventSLCAN@id(4), receivePrintEventCANAL@data(8), 
 20690 ;;		 -> receivePrintEventCANAL@dlc(1), receivePrintEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), 
 20691 ;;		 -> vscpData(8), vscpSize(1), doModeVerbose@c(1), main@c(1), 
 20692 ;; Return value:  Size  Location     Type
 20693 ;;                  2    0[BANK0 ] unsigned short 
 20694 ;; Registers used:
 20695 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 20696 ;; Tracked objects:
 20697 ;;		On entry : F/0
 20698 ;;		On exit  : F/0
 20699 ;;		Unchanged: 0/0
 20700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20701 ;;      Params:         0       4       0       0       0       0       0
 20702 ;;      Locals:         0       5       0       0       0       0       0
 20703 ;;      Temps:          0       4       0       0       0       0       0
 20704 ;;      Totals:         0      13       0       0       0       0       0
 20705 ;;Total ram usage:       13 bytes
 20706 ;; Hardware stack levels used:    1
 20707 ;; Hardware stack levels required when called:    3
 20708 ;; This function calls:
 20709 ;;		Nothing
 20710 ;; This function is called by:
 20711 ;;		_main
 20712 ;;		_doModeVerbose
 20713 ;;		_doModeVscp
 20714 ;;		_doModeSLCAN
 20715 ;;		_getCANFrame
 20716 ;; This function uses a non-reentrant model
 20717 ;;
 20718                           
 20719                           	psect	text52
 20720  0040C0                     __ptext52:
 20721                           	opt stack 0
 20722  0040C0                     _fifo_read:
 20723                           	opt stack 24
 20724                           
 20725                           ; BSR set to: 0
 20726                           ;incstack = 0
 20727                           ;incstack = 0
 20728                           ;fifo_read@f stored from wreg
 20729  0040C0  CFE8 F06C          	movff	wreg,fifo_read@f
 20730                           
 20731                           ; BSR set to: 0
 20732                           ;fifo.c: 30: uint16_t i;
 20733                           ;fifo.c: 31: uint8_t *p;
 20734                           ;fifo.c: 32: p = buf;
 20735  0040C4  C060  F068         	movff	fifo_read@buf,fifo_read@p
 20736  0040C8  C061  F069         	movff	fifo_read@buf+1,fifo_read@p+1
 20737                           
 20738                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 20739  0040CC  6B6A               	clrf	fifo_read@i& (0+255),b
 20740  0040CE  6B6B               	clrf	(fifo_read@i+1)& (0+255),b
 20741  0040D0  D03E               	goto	l9554
 20742  0040D2                     l9540:
 20743                           
 20744                           ; BSR set to: 0
 20745                           ;fifo.c: 36: if (f->tail != f->head) {
 20746  0040D2  516C               	movf	fifo_read@f& (0+255),w,b
 20747  0040D4  6ED9               	movwf	fsr2l,c
 20748  0040D6  6ADA               	clrf	fsr2h,c
 20749  0040D8  0E02               	movlw	2
 20750  0040DA  D843               	call	PL32	;call to abstracted procedure
 20751  0040DC  B4D8               	btfsc	status,2,c
 20752  0040DE  18E7               	xorwf	indf1,w,c
 20753  0040E0  E02F               	bz	l1425
 20754                           
 20755                           ; BSR set to: 0
 20756                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 20757  0040E2  D84E               	call	PL100	;call to abstracted procedure
 20758  0040E4  CFDE F064          	movff	postinc2,??_fifo_read
 20759  0040E8  CFDD F065          	movff	postdec2,??_fifo_read+1
 20760  0040EC  516C               	movf	fifo_read@f& (0+255),w,b
 20761  0040EE  6ED9               	movwf	fsr2l,c
 20762  0040F0  6ADA               	clrf	fsr2h,c
 20763  0040F2  CFDE F066          	movff	postinc2,??_fifo_read+2
 20764  0040F6  CFDD F067          	movff	postdec2,??_fifo_read+3
 20765  0040FA  5164               	movf	??_fifo_read& (0+255),w,b
 20766  0040FC  2566               	addwf	(??_fifo_read+2)& (0+255),w,b
 20767  0040FE  6ED9               	movwf	fsr2l,c
 20768  004100  5165               	movf	(??_fifo_read+1)& (0+255),w,b
 20769  004102  2167               	addwfc	(??_fifo_read+3)& (0+255),w,b
 20770  004104  6EDA               	movwf	fsr2h,c
 20771  004106  C068  FFE1         	movff	fifo_read@p,fsr1l
 20772  00410A  C069  FFE2         	movff	fifo_read@p+1,fsr1h
 20773  00410E  CFDF FFE7          	movff	indf2,indf1
 20774                           
 20775                           ; BSR set to: 0
 20776  004112  4B68               	infsnz	fifo_read@p& (0+255),f,b
 20777  004114  2B69               	incf	(fifo_read@p+1)& (0+255),f,b
 20778                           
 20779                           ; BSR set to: 0
 20780                           ;fifo.c: 38: f->tail++;
 20781  004116  516C               	movf	fifo_read@f& (0+255),w,b
 20782  004118  6ED9               	movwf	fsr2l,c
 20783  00411A  6ADA               	clrf	fsr2h,c
 20784  00411C  0E04               	movlw	4
 20785  00411E  26D9               	addwf	fsr2l,f,c
 20786  004120  6ADA               	clrf	fsr2h,c
 20787  004122  2ADE               	incf	postinc2,f,c
 20788  004124  0E00               	movlw	0
 20789  004126  22DD               	addwfc	postdec2,f,c
 20790                           
 20791                           ; BSR set to: 0
 20792                           ;fifo.c: 39: if (f->tail == f->size) {
 20793  004128  516C               	movf	fifo_read@f& (0+255),w,b
 20794  00412A  6ED9               	movwf	fsr2l,c
 20795  00412C  6ADA               	clrf	fsr2h,c
 20796  00412E  0E06               	movlw	6
 20797  004130  D818               	call	PL32	;call to abstracted procedure
 20798  004132  B4D8               	btfsc	status,2,c
 20799  004134  18E7               	xorwf	indf1,w,c
 20800  004136  E109               	bnz	l9552
 20801                           
 20802                           ; BSR set to: 0
 20803                           ;fifo.c: 40: f->tail = 0;
 20804  004138  D823               	call	PL100	;call to abstracted procedure
 20805  00413A  6ADE               	clrf	postinc2,c
 20806  00413C  6ADD               	clrf	postdec2,c
 20807  00413E  D005               	goto	l9552
 20808  004140                     l1425:
 20809                           
 20810                           ; BSR set to: 0
 20811                           ;fifo.c: 43: else {
 20812                           ;fifo.c: 44: return i;
 20813  004140  C06A  F060         	movff	fifo_read@i,?_fifo_read
 20814  004144  C06B  F061         	movff	fifo_read@i+1,?_fifo_read+1
 20815  004148  D00B               	goto	l1428
 20816  00414A                     l9552:
 20817                           
 20818                           ; BSR set to: 0
 20819  00414A  4B6A               	infsnz	fifo_read@i& (0+255),f,b
 20820  00414C  2B6B               	incf	(fifo_read@i+1)& (0+255),f,b
 20821  00414E                     l9554:
 20822                           
 20823                           ; BSR set to: 0
 20824  00414E  5162               	movf	fifo_read@nbytes& (0+255),w,b
 20825  004150  5D6A               	subwf	fifo_read@i& (0+255),w,b
 20826  004152  5163               	movf	(fifo_read@nbytes+1)& (0+255),w,b
 20827  004154  596B               	subwfb	(fifo_read@i+1)& (0+255),w,b
 20828  004156  E3BD               	bnc	l9540
 20829                           
 20830                           ; BSR set to: 0
 20831                           ;fifo.c: 45: }
 20832                           ;fifo.c: 47: }
 20833                           ;fifo.c: 49: return nbytes;
 20834  004158  C062  F060         	movff	fifo_read@nbytes,?_fifo_read
 20835  00415C  C063  F061         	movff	fifo_read@nbytes+1,?_fifo_read+1
 20836  004160                     l1428:
 20837                           
 20838                           ; BSR set to: 0
 20839  004160  0012               	return	
 20840  004162                     __end_of_fifo_read:
 20841                           	opt stack 0
 20842  004162                     PL32:
 20843                           	opt stack 24
 20844  004162  26D9               	addwf	fsr2l,f,c
 20845  004164  6ADA               	clrf	fsr2h,c
 20846  004166  516C               	movf	fifo_read@f& (0+255),w,b
 20847  004168  6EE1               	movwf	fsr1l,c
 20848  00416A  6AE2               	clrf	fsr1h,c
 20849  00416C  0E04               	movlw	4
 20850  00416E  26E1               	addwf	fsr1l,f,c
 20851  004170  6AE2               	clrf	fsr1h,c
 20852  004172  52E6               	movf	postinc1,f,c
 20853  004174  52DE               	movf	postinc2,f,c
 20854  004176  50DD               	movf	postdec2,w,c
 20855  004178  18E5               	xorwf	postdec1,w,c
 20856  00417A  CFDF FFE8          	movff	indf2,wreg
 20857  00417E  0012               	return	
 20858  004180                     __end_ofPL32:
 20859                           	opt stack 0
 20860  004180                     PL100:
 20861                           	opt stack 24
 20862  004180  516C               	movf	fifo_read@f& (0+255),w,b
 20863  004182  6ED9               	movwf	fsr2l,c
 20864  004184  6ADA               	clrf	fsr2h,c
 20865  004186  0E04               	movlw	4
 20866  004188  26D9               	addwf	fsr2l,f,c
 20867  00418A  6ADA               	clrf	fsr2h,c
 20868  00418C  0012               	return	
 20869  00418E                     __end_ofPL100:
 20870                           	opt stack 0
 20871                           tblptru	equ	0xFF8
 20872                           tblptrh	equ	0xFF7
 20873                           tblptrl	equ	0xFF6
 20874                           tablat	equ	0xFF5
 20875                           prodh	equ	0xFF4
 20876                           prodl	equ	0xFF3
 20877                           intcon	equ	0xFF2
 20878                           indf0	equ	0xFEF
 20879                           postinc0	equ	0xFEE
 20880                           fsr0h	equ	0xFEA
 20881                           fsr0l	equ	0xFE9
 20882                           wreg	equ	0xFE8
 20883                           indf1	equ	0xFE7
 20884                           postinc1	equ	0xFE6
 20885                           postdec1	equ	0xFE5
 20886                           fsr1h	equ	0xFE2
 20887                           fsr1l	equ	0xFE1
 20888                           indf2	equ	0xFDF
 20889                           postinc2	equ	0xFDE
 20890                           postdec2	equ	0xFDD
 20891                           plusw2	equ	0xFDB
 20892                           fsr2h	equ	0xFDA
 20893                           fsr2l	equ	0xFD9
 20894                           status	equ	0xFD8
 20895                           
 20896 ;; *************** function _sprintf *****************
 20897 ;; Defined at:
 20898 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 20899 ;; Parameters:    Size  Location     Type
 20900 ;;  sp              2   22[BANK0 ] PTR unsigned char 
 20901 ;;		 -> wrkbuf(80), 
 20902 ;;  f               2   24[BANK0 ] PTR const unsigned char 
 20903 ;;		 -> STR_192(3), STR_191(7), STR_185(3), STR_184(7), 
 20904 ;;		 -> STR_181(4), STR_180(8), STR_177(4), STR_176(8), 
 20905 ;;		 -> STR_173(4), STR_172(8), STR_169(4), STR_168(8), 
 20906 ;;		 -> STR_165(4), STR_164(7), STR_161(4), STR_160(7), 
 20907 ;;		 -> STR_157(4), STR_156(7), STR_153(4), STR_152(7), 
 20908 ;;		 -> STR_147(3), STR_146(7), STR_144(3), STR_143(7), 
 20909 ;;		 -> STR_141(3), STR_140(7), STR_138(3), STR_137(7), 
 20910 ;;		 -> STR_135(3), STR_134(7), STR_132(3), STR_131(7), 
 20911 ;;		 -> STR_80(3), STR_79(7), STR_64(3), STR_63(7), 
 20912 ;;		 -> STR_62(3), STR_61(7), STR_58(3), STR_57(7), 
 20913 ;;		 -> STR_55(3), STR_54(7), STR_53(3), STR_52(7), 
 20914 ;; Auto vars:     Size  Location     Type
 20915 ;;  idx             1   33[BANK0 ] unsigned char 
 20916 ;;  _val            4   45[BANK0 ] struct .
 20917 ;;  flag            2   50[BANK0 ] unsigned short 
 20918 ;;  width           2   43[BANK0 ] int 
 20919 ;;  prec            2   41[BANK0 ] int 
 20920 ;;  c               1   49[BANK0 ] char 
 20921 ;;  ap              1   40[BANK0 ] PTR void [1]
 20922 ;;		 -> ?_sprintf(2), 
 20923 ;; Return value:  Size  Location     Type
 20924 ;;                  2   22[BANK0 ] int 
 20925 ;; Registers used:
 20926 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20927 ;; Tracked objects:
 20928 ;;		On entry : F/0
 20929 ;;		On exit  : F/0
 20930 ;;		Unchanged: 0/0
 20931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20932 ;;      Params:         0       8       0       0       0       0       0
 20933 ;;      Locals:         0      19       0       0       0       0       0
 20934 ;;      Temps:          0       3       0       0       0       0       0
 20935 ;;      Totals:         0      30       0       0       0       0       0
 20936 ;;Total ram usage:       30 bytes
 20937 ;; Hardware stack levels used:    1
 20938 ;; Hardware stack levels required when called:    4
 20939 ;; This function calls:
 20940 ;;		_isdigit
 20941 ;;		___lldiv
 20942 ;;		___llmod
 20943 ;;		___wmul
 20944 ;; This function is called by:
 20945 ;;		_doModeVerbose
 20946 ;;		_receivePrintEventVerbose
 20947 ;;		_printStatistics
 20948 ;;		_printErrors
 20949 ;; This function uses a non-reentrant model
 20950 ;;
 20951                           
 20952                           	psect	text53
 20953  0015BA                     __ptext53:
 20954                           	opt stack 0
 20955  0015BA                     _sprintf:
 20956                           	opt stack 25
 20957                           
 20958                           ; BSR set to: 0
 20959                           ;doprnt.c: 494: va_list ap;
 20960                           ;doprnt.c: 499: signed char c;
 20961                           ;doprnt.c: 501: int width;
 20962                           ;doprnt.c: 504: int prec;
 20963                           ;doprnt.c: 508: unsigned short flag;
 20964                           ;doprnt.c: 527: union {
 20965                           ;doprnt.c: 528: unsigned long _val;
 20966                           ;doprnt.c: 529: struct {
 20967                           ;doprnt.c: 530: const char * _cp;
 20968                           ;doprnt.c: 531: unsigned _len;
 20969                           ;doprnt.c: 532: } _str;
 20970                           ;doprnt.c: 533: } _val;
 20971                           ;doprnt.c: 542: *ap = __va_start();
 20972                           
 20973                           ; BSR set to: 0
 20974                           ;incstack = 0
 20975                           ;incstack = 0
 20976  0015BA  0E7A               	movlw	low (?_sprintf+4)
 20977  0015BC  6F88               	movwf	sprintf@ap& (0+255),b
 20978                           
 20979                           ;doprnt.c: 545: while(c = *f++) {
 20980  0015BE  D32C               	goto	l11402
 20981  0015C0                     l11068:
 20982                           
 20983                           ; BSR set to: 0
 20984                           ;doprnt.c: 547: if(c != '%')
 20985  0015C0  5191               	movf	sprintf@c& (0+255),w,b
 20986  0015C2  0A25               	xorlw	37
 20987  0015C4  E009               	bz	l1533
 20988                           
 20989                           ; BSR set to: 0
 20990                           ;doprnt.c: 549: {
 20991                           ;doprnt.c: 550: ((*sp++ = (c)));
 20992  0015C6  C076  FFD9         	movff	sprintf@sp,fsr2l
 20993  0015CA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 20994  0015CE  C091  FFDF         	movff	sprintf@c,indf2
 20995                           
 20996                           ; BSR set to: 0
 20997  0015D2  4B76               	infsnz	sprintf@sp& (0+255),f,b
 20998  0015D4  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 20999                           
 21000                           ;doprnt.c: 551: continue;
 21001  0015D6  D320               	goto	l11402
 21002  0015D8                     l1533:
 21003                           
 21004                           ; BSR set to: 0
 21005                           ;doprnt.c: 552: }
 21006                           ;doprnt.c: 555: width = 0;
 21007  0015D8  6B8B               	clrf	sprintf@width& (0+255),b
 21008  0015DA  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21009                           
 21010                           ;doprnt.c: 557: flag = 0;
 21011  0015DC  6B92               	clrf	sprintf@flag& (0+255),b
 21012  0015DE  6B93               	clrf	(sprintf@flag+1)& (0+255),b
 21013  0015E0  D009               	goto	l11084
 21014  0015E2                     l11074:
 21015                           
 21016                           ; BSR set to: 0
 21017                           ;doprnt.c: 563: flag |= 0x08;
 21018  0015E2  8792               	bsf	sprintf@flag& (0+255),3,b
 21019  0015E4  D005               	goto	L32
 21020  0015E6                     l11076:
 21021                           
 21022                           ; BSR set to: 0
 21023                           ;doprnt.c: 570: flag |= 0x01;
 21024  0015E6  8192               	bsf	sprintf@flag& (0+255),0,b
 21025  0015E8  D003               	goto	L32
 21026  0015EA                     l11078:
 21027                           
 21028                           ; BSR set to: 0
 21029                           ;doprnt.c: 583: flag |= 0x800;
 21030  0015EA  8793               	bsf	(sprintf@flag+1)& (0+255),3,b
 21031  0015EC  D001               	goto	L32
 21032  0015EE                     l11080:
 21033                           
 21034                           ; BSR set to: 0
 21035                           ;doprnt.c: 589: flag |= 0x04;
 21036  0015EE  8592               	bsf	sprintf@flag& (0+255),2,b
 21037  0015F0                     L32:
 21038                           
 21039                           ;doprnt.c: 590: f++;
 21040  0015F0  4B78               	infsnz	sprintf@f& (0+255),f,b
 21041  0015F2  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21042  0015F4                     l11084:
 21043                           
 21044                           ; BSR set to: 0
 21045  0015F4  C078  FFF6         	movff	sprintf@f,tblptrl
 21046  0015F8  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21047  0015FC  0008               	tblrd		*
 21048  0015FE  50F5               	movf	tablat,w,c
 21049                           
 21050                           ; Switch size 1, requested type "space"
 21051                           ; Number of cases is 4, Range of values is 32 to 48
 21052                           ; switch strategies available:
 21053                           ; Name         Instructions Cycles
 21054                           ; simple_byte           13     7 (average)
 21055                           ;	Chosen strategy is simple_byte
 21056  001600  0A20               	xorlw	32	; case 32
 21057  001602  E0F1               	bz	l11076
 21058  001604  0A03               	xorlw	3	; case 35
 21059  001606  E0F1               	bz	l11078
 21060  001608  0A0E               	xorlw	14	; case 45
 21061  00160A  E0EB               	bz	l11074
 21062  00160C  0A1D               	xorlw	29	; case 48
 21063  00160E  E0EF               	bz	l11080
 21064                           
 21065                           ; BSR set to: 0
 21066                           ;doprnt.c: 602: if(flag & 0x08)
 21067  001610  B792               	btfsc	sprintf@flag& (0+255),3,b
 21068                           
 21069                           ; BSR set to: 0
 21070                           ;doprnt.c: 603: flag &= ~0x04;
 21071  001612  9592               	bcf	sprintf@flag& (0+255),2,b
 21072                           
 21073                           ; BSR set to: 0
 21074                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 21075  001614  C078  FFF6         	movff	sprintf@f,tblptrl
 21076  001618  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21077  00161C  0008               	tblrd		*
 21078  00161E  50F5               	movf	tablat,w,c
 21079  001620  ECF1  F029         	call	_isdigit
 21080  001624  E325               	bnc	l11100
 21081                           
 21082                           ; BSR set to: 0
 21083                           ;doprnt.c: 607: width = 0;
 21084  001626  6B8B               	clrf	sprintf@width& (0+255),b
 21085  001628  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21086  00162A                     l11092:
 21087                           
 21088                           ; BSR set to: 0
 21089                           ;doprnt.c: 609: width *= 10;
 21090  00162A  C08B  F060         	movff	sprintf@width,?___wmul
 21091  00162E  C08C  F061         	movff	sprintf@width+1,?___wmul+1
 21092  001632  6B63               	clrf	(?___wmul+3)& (0+255),b
 21093  001634  0E0A               	movlw	10
 21094  001636  6F62               	movwf	(?___wmul+2)& (0+255),b
 21095  001638  EC7F  F029         	call	___wmul	;wreg free
 21096  00163C  C060  F08B         	movff	?___wmul,sprintf@width
 21097  001640  C061  F08C         	movff	?___wmul+1,sprintf@width+1
 21098                           
 21099                           ; BSR set to: 0
 21100                           ;doprnt.c: 610: width += *f++ - '0';
 21101  001644  C078  FFF6         	movff	sprintf@f,tblptrl
 21102  001648  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21103  00164C  0008               	tblrd		*
 21104  00164E  CFF5 F07E          	movff	tablat,??_sprintf
 21105  001652  0ED0               	movlw	208
 21106  001654  257E               	addwf	??_sprintf& (0+255),w,b
 21107  001656  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 21108  001658  6B80               	clrf	(??_sprintf+2)& (0+255),b
 21109  00165A  0EFF               	movlw	255
 21110  00165C  2380               	addwfc	(??_sprintf+2)& (0+255),f,b
 21111  00165E  517F               	movf	(??_sprintf+1)& (0+255),w,b
 21112  001660  278B               	addwf	sprintf@width& (0+255),f,b
 21113  001662  5180               	movf	(??_sprintf+2)& (0+255),w,b
 21114  001664  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 21115                           
 21116                           ; BSR set to: 0
 21117                           
 21118                           ; BSR set to: 0
 21119                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 21120  001666  DB36               	call	PL80	;call to abstracted procedure
 21121  001668  ECF1  F029         	call	_isdigit
 21122  00166C  E314               	bnc	l11108
 21123  00166E  D7DD               	goto	l11092
 21124  001670                     l11100:
 21125                           
 21126                           ; BSR set to: 0
 21127  001670  C078  FFF6         	movff	sprintf@f,tblptrl
 21128  001674  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21129  001678  0008               	tblrd		*
 21130  00167A  50F5               	movf	tablat,w,c
 21131  00167C  0A2A               	xorlw	42
 21132  00167E  E10B               	bnz	l11108
 21133                           
 21134                           ; BSR set to: 0
 21135                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 21136  001680  5188               	movf	sprintf@ap& (0+255),w,b
 21137  001682  6ED9               	movwf	fsr2l,c
 21138  001684  6ADA               	clrf	fsr2h,c
 21139  001686  CFDE F08B          	movff	postinc2,sprintf@width
 21140  00168A  CFDD F08C          	movff	postdec2,sprintf@width+1
 21141                           
 21142                           ; BSR set to: 0
 21143  00168E  0E02               	movlw	2
 21144  001690  2788               	addwf	sprintf@ap& (0+255),f,b
 21145                           
 21146                           ; BSR set to: 0
 21147                           ;doprnt.c: 615: f++;
 21148  001692  4B78               	infsnz	sprintf@f& (0+255),f,b
 21149  001694  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21150  001696                     l11108:
 21151                           
 21152                           ; BSR set to: 0
 21153                           ;doprnt.c: 617: }
 21154                           ;doprnt.c: 620: if(*f == '.') {
 21155  001696  C078  FFF6         	movff	sprintf@f,tblptrl
 21156  00169A  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21157  00169E  0008               	tblrd		*
 21158  0016A0  50F5               	movf	tablat,w,c
 21159  0016A2  0A2E               	xorlw	46
 21160  0016A4  E137               	bnz	l1549
 21161                           
 21162                           ; BSR set to: 0
 21163                           ;doprnt.c: 621: flag |= 0x4000;
 21164  0016A6  8D93               	bsf	(sprintf@flag+1)& (0+255),6,b
 21165                           
 21166                           ;doprnt.c: 622: f++;
 21167                           
 21168                           ; BSR set to: 0
 21169                           ;doprnt.c: 624: if(*f == '*') {
 21170  0016A8  DB15               	call	PL80	;call to abstracted procedure
 21171  0016AA  0A2A               	xorlw	42
 21172  0016AC  E10C               	bnz	l1550
 21173                           
 21174                           ; BSR set to: 0
 21175                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 21176  0016AE  5188               	movf	sprintf@ap& (0+255),w,b
 21177  0016B0  6ED9               	movwf	fsr2l,c
 21178  0016B2  6ADA               	clrf	fsr2h,c
 21179  0016B4  CFDE F089          	movff	postinc2,sprintf@prec
 21180  0016B8  CFDD F08A          	movff	postdec2,sprintf@prec+1
 21181                           
 21182                           ; BSR set to: 0
 21183  0016BC  0E02               	movlw	2
 21184  0016BE  2788               	addwf	sprintf@ap& (0+255),f,b
 21185                           
 21186                           ; BSR set to: 0
 21187                           ;doprnt.c: 626: f++;
 21188  0016C0  4B78               	infsnz	sprintf@f& (0+255),f,b
 21189  0016C2  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21190                           
 21191                           ;doprnt.c: 627: } else
 21192  0016C4  D088               	goto	l11178
 21193  0016C6                     l1550:
 21194                           
 21195                           ; BSR set to: 0
 21196                           ;doprnt.c: 629: {
 21197                           ;doprnt.c: 630: prec = 0;
 21198  0016C6  6B89               	clrf	sprintf@prec& (0+255),b
 21199  0016C8  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 21200                           
 21201                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 21202  0016CA  D01A               	goto	l11124
 21203  0016CC                     l11120:
 21204                           
 21205                           ; BSR set to: 0
 21206                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 21207  0016CC  C089  F060         	movff	sprintf@prec,?___wmul
 21208  0016D0  C08A  F061         	movff	sprintf@prec+1,?___wmul+1
 21209  0016D4  6B63               	clrf	(?___wmul+3)& (0+255),b
 21210  0016D6  0E0A               	movlw	10
 21211  0016D8  6F62               	movwf	(?___wmul+2)& (0+255),b
 21212  0016DA  EC7F  F029         	call	___wmul	;wreg free
 21213  0016DE  C078  FFF6         	movff	sprintf@f,tblptrl
 21214  0016E2  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21215  0016E6  0008               	tblrd		*
 21216  0016E8  50F5               	movf	tablat,w,c
 21217  0016EA  2760               	addwf	?___wmul& (0+255),f,b
 21218  0016EC  0E00               	movlw	0
 21219  0016EE  2361               	addwfc	(?___wmul+1)& (0+255),f,b
 21220  0016F0  0ED0               	movlw	208
 21221  0016F2  2560               	addwf	?___wmul& (0+255),w,b
 21222  0016F4  6F89               	movwf	sprintf@prec& (0+255),b
 21223  0016F6  0EFF               	movlw	255
 21224  0016F8  2161               	addwfc	(?___wmul+1)& (0+255),w,b
 21225  0016FA  6F8A               	movwf	(sprintf@prec+1)& (0+255),b
 21226                           
 21227                           ; BSR set to: 0
 21228  0016FC  4B78               	infsnz	sprintf@f& (0+255),f,b
 21229  0016FE  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 21230  001700                     l11124:
 21231                           
 21232                           ; BSR set to: 0
 21233  001700  C078  FFF6         	movff	sprintf@f,tblptrl
 21234  001704  C079  FFF7         	movff	sprintf@f+1,tblptrh
 21235  001708  0008               	tblrd		*
 21236  00170A  50F5               	movf	tablat,w,c
 21237  00170C  ECF1  F029         	call	_isdigit
 21238  001710  E362               	bnc	l11178
 21239  001712  D7DC               	goto	l11120
 21240  001714                     l1549:
 21241                           
 21242                           ; BSR set to: 0
 21243                           ;doprnt.c: 635: prec = 0;
 21244  001714  6B89               	clrf	sprintf@prec& (0+255),b
 21245  001716  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 21246  001718  D05E               	goto	l11178
 21247  00171A                     l11126:
 21248                           
 21249                           ; BSR set to: 0
 21250                           ;doprnt.c: 652: flag |= 0x10;
 21251  00171A  8992               	bsf	sprintf@flag& (0+255),4,b
 21252                           
 21253                           ;doprnt.c: 653: goto loop;
 21254  00171C  D05C               	goto	l11178
 21255  00171E                     l11128:
 21256                           
 21257                           ; BSR set to: 0
 21258                           ;doprnt.c: 700: flag |= 0x40;
 21259  00171E  8D92               	bsf	sprintf@flag& (0+255),6,b
 21260                           
 21261                           ;doprnt.c: 702: break;
 21262  001720  D06F               	goto	l11180
 21263  001722                     l11130:
 21264                           
 21265                           ; BSR set to: 0
 21266                           ;doprnt.c: 723: flag |= 0x20;
 21267  001722  8B92               	bsf	sprintf@flag& (0+255),5,b
 21268  001724                     l1566:
 21269                           
 21270                           ; BSR set to: 0
 21271                           ;doprnt.c: 730: flag |= 0x80;
 21272  001724  8F92               	bsf	sprintf@flag& (0+255),7,b
 21273                           
 21274                           ;doprnt.c: 732: break;
 21275  001726  D06C               	goto	l11180
 21276  001728                     l11132:
 21277                           
 21278                           ; BSR set to: 0
 21279                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 21280  001728  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21281  00172A  1189               	iorwf	sprintf@prec& (0+255),w,b
 21282  00172C  E009               	bz	l11138
 21283                           
 21284                           ; BSR set to: 0
 21285  00172E  518E               	movf	(sprintf@_val+1)& (0+255),w,b
 21286  001730  5D89               	subwf	sprintf@prec& (0+255),w,b
 21287  001732  518F               	movf	(sprintf@_val+2)& (0+255),w,b
 21288  001734  598A               	subwfb	(sprintf@prec+1)& (0+255),w,b
 21289  001736  E204               	bc	l11138
 21290                           
 21291                           ; BSR set to: 0
 21292                           ;doprnt.c: 763: _val._str._len = prec;
 21293  001738  C089  F08E         	movff	sprintf@prec,sprintf@_val+1
 21294  00173C  C08A  F08F         	movff	sprintf@prec+1,sprintf@_val+2
 21295  001740                     l11138:
 21296                           
 21297                           ; BSR set to: 0
 21298                           ;doprnt.c: 766: if(width > _val._str._len)
 21299  001740  518B               	movf	sprintf@width& (0+255),w,b
 21300  001742  5D8E               	subwf	(sprintf@_val+1)& (0+255),w,b
 21301  001744  518C               	movf	(sprintf@width+1)& (0+255),w,b
 21302  001746  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21303  001748  E207               	bc	l1569
 21304                           
 21305                           ; BSR set to: 0
 21306                           ;doprnt.c: 767: width -= _val._str._len;
 21307  00174A  EE20  F08E         	lfsr	2,sprintf@_val+1
 21308  00174E  50DE               	movf	postinc2,w,c
 21309  001750  5F8B               	subwf	sprintf@width& (0+255),f,b
 21310  001752  50DD               	movf	postdec2,w,c
 21311  001754  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 21312  001756  D002               	goto	l1570
 21313  001758                     l1569:
 21314                           
 21315                           ; BSR set to: 0
 21316                           ;doprnt.c: 768: else
 21317                           ;doprnt.c: 769: width = 0;
 21318  001758  6B8B               	clrf	sprintf@width& (0+255),b
 21319  00175A  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21320  00175C                     l1570:
 21321                           
 21322                           ; BSR set to: 0
 21323                           ;doprnt.c: 771: if(!(flag & 0x08))
 21324  00175C  A792               	btfss	sprintf@flag& (0+255),3,b
 21325  00175E  D004               	goto	l11148
 21326  001760  D015               	goto	l11156
 21327  001762                     l11144:
 21328                           
 21329                           ; BSR set to: 0
 21330                           ;doprnt.c: 774: ((*sp++ = (' ')));
 21331  001762  DAB1               	call	PL62	;call to abstracted procedure
 21332                           
 21333                           ; BSR set to: 0
 21334  001764  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21335  001766  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21336  001768                     l11148:
 21337                           
 21338                           ; BSR set to: 0
 21339  001768  078B               	decf	sprintf@width& (0+255),f,b
 21340  00176A  DAC2               	call	PL108	;call to abstracted procedure
 21341  00176C  B4D8               	btfsc	status,2,c
 21342  00176E  298C               	incf	(sprintf@width+1)& (0+255),w,b
 21343  001770  E00D               	bz	l11156
 21344  001772  D7F7               	goto	l11144
 21345  001774                     l11150:
 21346                           
 21347                           ; BSR set to: 0
 21348                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 21349  001774  518D               	movf	sprintf@_val& (0+255),w,b
 21350  001776  6ED9               	movwf	fsr2l,c
 21351  001778  6ADA               	clrf	fsr2h,c
 21352  00177A  C076  FFE1         	movff	sprintf@sp,fsr1l
 21353  00177E  C077  FFE2         	movff	sprintf@sp+1,fsr1h
 21354  001782  CFDF FFE7          	movff	indf2,indf1
 21355                           
 21356                           ; BSR set to: 0
 21357  001786  2B8D               	incf	sprintf@_val& (0+255),f,b
 21358                           
 21359                           ; BSR set to: 0
 21360  001788  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21361  00178A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21362  00178C                     l11156:
 21363                           
 21364                           ; BSR set to: 0
 21365  00178C  078E               	decf	(sprintf@_val+1)& (0+255),f,b
 21366  00178E  A0D8               	btfss	status,0,c
 21367  001790  078F               	decf	(sprintf@_val+2)& (0+255),f,b
 21368  001792  0100               	movlb	0	; () banked
 21369  001794  298E               	incf	(sprintf@_val+1)& (0+255),w,b
 21370  001796  B4D8               	btfsc	status,2,c
 21371  001798  298F               	incf	(sprintf@_val+2)& (0+255),w,b
 21372  00179A  E1EC               	bnz	l11150
 21373                           
 21374                           ; BSR set to: 0
 21375                           ;doprnt.c: 779: if(flag & 0x08)
 21376  00179C  B792               	btfsc	sprintf@flag& (0+255),3,b
 21377  00179E  D004               	goto	l11164
 21378  0017A0  D23B               	goto	l11402
 21379  0017A2                     l11160:
 21380                           
 21381                           ; BSR set to: 0
 21382                           ;doprnt.c: 781: ((*sp++ = (' ')));
 21383  0017A2  DA91               	call	PL62	;call to abstracted procedure
 21384                           
 21385                           ; BSR set to: 0
 21386  0017A4  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21387  0017A6  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21388  0017A8                     l11164:
 21389                           
 21390                           ; BSR set to: 0
 21391  0017A8  078B               	decf	sprintf@width& (0+255),f,b
 21392  0017AA  DAA2               	call	PL108	;call to abstracted procedure
 21393  0017AC  B4D8               	btfsc	status,2,c
 21394  0017AE  298C               	incf	(sprintf@width+1)& (0+255),w,b
 21395  0017B0  E101 D232          	bz	l11402
 21396  0017B4  D7F6               	goto	l11160
 21397  0017B6                     l11166:
 21398                           
 21399                           ; BSR set to: 0
 21400                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 21401  0017B6  5188               	movf	sprintf@ap& (0+255),w,b
 21402  0017B8  6ED9               	movwf	fsr2l,c
 21403  0017BA  6ADA               	clrf	fsr2h,c
 21404  0017BC  50DF               	movf	indf2,w,c
 21405  0017BE  6F91               	movwf	sprintf@c& (0+255),b
 21406                           
 21407                           ; BSR set to: 0
 21408  0017C0  0E02               	movlw	2
 21409  0017C2  2788               	addwf	sprintf@ap& (0+255),f,b
 21410  0017C4                     l11170:
 21411                           
 21412                           ; BSR set to: 0
 21413                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 21414  0017C4  0E91               	movlw	low sprintf@c
 21415  0017C6  6F8D               	movwf	sprintf@_val& (0+255),b
 21416                           
 21417                           ; BSR set to: 0
 21418                           ;doprnt.c: 815: _val._str._len = 1;
 21419  0017C8  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 21420  0017CA  0E01               	movlw	1
 21421  0017CC  6F8E               	movwf	(sprintf@_val+1)& (0+255),b
 21422                           
 21423                           ;doprnt.c: 816: goto dostring;
 21424  0017CE  D7AC               	goto	l11132
 21425  0017D0                     l11174:
 21426                           
 21427                           ; BSR set to: 0
 21428                           ;doprnt.c: 827: flag |= 0xC0;
 21429  0017D0  0EC0               	movlw	192
 21430  0017D2  1392               	iorwf	sprintf@flag& (0+255),f,b
 21431                           
 21432                           ;doprnt.c: 828: break;
 21433  0017D4  D015               	goto	l11180
 21434  0017D6                     l11178:
 21435                           
 21436                           ; BSR set to: 0
 21437  0017D6  DA6C               	call	PL60	;call to abstracted procedure
 21438  0017D8  5191               	movf	sprintf@c& (0+255),w,b
 21439                           
 21440                           ; Switch size 1, requested type "space"
 21441                           ; Number of cases is 9, Range of values is 0 to 120
 21442                           ; switch strategies available:
 21443                           ; Name         Instructions Cycles
 21444                           ; simple_byte           28    15 (average)
 21445                           ;	Chosen strategy is simple_byte
 21446  0017DA  E101 D220          	bz	l11404
 21447  0017DE  0A58               	xorlw	88	; case 88
 21448  0017E0  E0A0               	bz	l11130
 21449  0017E2  0A3B               	xorlw	59	; case 99
 21450  0017E4  E0E8               	bz	l11166
 21451  0017E6  0A07               	xorlw	7	; case 100
 21452  0017E8  E00B               	bz	l11180
 21453  0017EA  0A0D               	xorlw	13	; case 105
 21454  0017EC  E009               	bz	l11180
 21455  0017EE  0A05               	xorlw	5	; case 108
 21456  0017F0  E094               	bz	l11126
 21457  0017F2  0A03               	xorlw	3	; case 111
 21458  0017F4  E094               	bz	l11128
 21459  0017F6  0A1A               	xorlw	26	; case 117
 21460  0017F8  E0EB               	bz	l11174
 21461  0017FA  0A0D               	xorlw	13	; case 120
 21462  0017FC  E093               	bz	l1566
 21463  0017FE  D7E2               	goto	l11170
 21464  001800                     l11180:
 21465                           
 21466                           ; BSR set to: 0
 21467                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 21468  001800  5192               	movf	sprintf@flag& (0+255),w,b
 21469  001802  0BC0               	andlw	192
 21470  001804  E120               	bnz	l1585
 21471                           
 21472                           ; BSR set to: 0
 21473                           ;doprnt.c: 1260: {
 21474                           ;doprnt.c: 1262: if(flag & 0x10)
 21475  001806  A992               	btfss	sprintf@flag& (0+255),4,b
 21476  001808  D003               	goto	l11188
 21477                           
 21478                           ; BSR set to: 0
 21479                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 21480  00180A  5188               	movf	sprintf@ap& (0+255),w,b
 21481                           
 21482                           ; BSR set to: 0
 21483  00180C  DA46               	call	PL52	;call to abstracted procedure
 21484  00180E  D00D               	goto	L33
 21485  001810                     l11188:
 21486                           
 21487                           ; BSR set to: 0
 21488                           ;doprnt.c: 1264: else
 21489                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 21490  001810  5188               	movf	sprintf@ap& (0+255),w,b
 21491  001812  6ED9               	movwf	fsr2l,c
 21492  001814  6ADA               	clrf	fsr2h,c
 21493  001816  CFDE F08D          	movff	postinc2,sprintf@_val
 21494  00181A  CFDD F08E          	movff	postdec2,sprintf@_val+1
 21495  00181E  0E00               	movlw	0
 21496  001820  BF8E               	btfsc	(sprintf@_val+1)& (0+255),7,b
 21497  001822  0EFF               	movlw	-1
 21498  001824  6F8F               	movwf	(sprintf@_val+2)& (0+255),b
 21499  001826  6F90               	movwf	(sprintf@_val+3)& (0+255),b
 21500                           
 21501                           ; BSR set to: 0
 21502  001828  0E02               	movlw	2
 21503  00182A                     L33:
 21504  00182A  2788               	addwf	sprintf@ap& (0+255),f,b
 21505                           
 21506                           ; BSR set to: 0
 21507                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 21508  00182C  AF90               	btfss	(sprintf@_val+3)& (0+255),7,b
 21509  00182E  D01F               	goto	l11206
 21510                           
 21511                           ; BSR set to: 0
 21512                           ;doprnt.c: 1269: flag |= 0x03;
 21513  001830  0E03               	movlw	3
 21514  001832  1392               	iorwf	sprintf@flag& (0+255),f,b
 21515                           
 21516                           ; BSR set to: 0
 21517                           ;doprnt.c: 1270: _val._val = -_val._val;
 21518  001834  1F90               	comf	(sprintf@_val+3)& (0+255),f,b
 21519  001836  1F8F               	comf	(sprintf@_val+2)& (0+255),f,b
 21520  001838  1F8E               	comf	(sprintf@_val+1)& (0+255),f,b
 21521  00183A  6D8D               	negf	sprintf@_val& (0+255),b
 21522  00183C  0E00               	movlw	0
 21523  00183E  238E               	addwfc	(sprintf@_val+1)& (0+255),f,b
 21524  001840  238F               	addwfc	(sprintf@_val+2)& (0+255),f,b
 21525  001842  2390               	addwfc	(sprintf@_val+3)& (0+255),f,b
 21526  001844  D014               	goto	l11206
 21527  001846                     l1585:
 21528                           
 21529                           ; BSR set to: 0
 21530                           ;doprnt.c: 1275: else
 21531                           ;doprnt.c: 1280: {
 21532                           ;doprnt.c: 1288: if(flag & 0x10)
 21533  001846  A992               	btfss	sprintf@flag& (0+255),4,b
 21534  001848  D003               	goto	l11202
 21535                           
 21536                           ; BSR set to: 0
 21537                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 21538  00184A  5188               	movf	sprintf@ap& (0+255),w,b
 21539                           
 21540                           ; BSR set to: 0
 21541  00184C  DA26               	call	PL52	;call to abstracted procedure
 21542  00184E  D00E               	goto	L34
 21543  001850                     l11202:
 21544                           
 21545                           ; BSR set to: 0
 21546                           ;doprnt.c: 1290: else
 21547                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 21548  001850  5188               	movf	sprintf@ap& (0+255),w,b
 21549  001852  6ED9               	movwf	fsr2l,c
 21550  001854  6ADA               	clrf	fsr2h,c
 21551  001856  CFDE F07E          	movff	postinc2,??_sprintf
 21552  00185A  CFDD F07F          	movff	postdec2,??_sprintf+1
 21553  00185E  C07E  F08D         	movff	??_sprintf,sprintf@_val
 21554  001862  C07F  F08E         	movff	??_sprintf+1,sprintf@_val+1
 21555  001866  6B8F               	clrf	(sprintf@_val+2)& (0+255),b
 21556  001868  6B90               	clrf	(sprintf@_val+3)& (0+255),b
 21557                           
 21558                           ; BSR set to: 0
 21559  00186A  0E02               	movlw	2
 21560  00186C                     L34:
 21561  00186C  2788               	addwf	sprintf@ap& (0+255),f,b
 21562  00186E                     l11206:
 21563                           
 21564                           ; BSR set to: 0
 21565                           ;doprnt.c: 1294: }
 21566                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 21567  00186E  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21568  001870  1189               	iorwf	sprintf@prec& (0+255),w,b
 21569  001872  E15C               	bnz	l11256
 21570                           
 21571                           ; BSR set to: 0
 21572  001874  5190               	movf	(sprintf@_val+3)& (0+255),w,b
 21573  001876  118D               	iorwf	sprintf@_val& (0+255),w,b
 21574  001878  118E               	iorwf	(sprintf@_val+1)& (0+255),w,b
 21575  00187A  118F               	iorwf	(sprintf@_val+2)& (0+255),w,b
 21576  00187C  E157               	bnz	l11256
 21577                           
 21578                           ; BSR set to: 0
 21579                           ;doprnt.c: 1298: prec++;
 21580  00187E  4B89               	infsnz	sprintf@prec& (0+255),f,b
 21581  001880  2B8A               	incf	(sprintf@prec+1)& (0+255),f,b
 21582  001882  D054               	goto	l11256
 21583  001884                     l11212:
 21584                           
 21585                           ; BSR set to: 0
 21586                           ;doprnt.c: 1309: case 0xC0:
 21587                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 21588  001884  0E01               	movlw	1
 21589  001886  6F91               	movwf	sprintf@c& (0+255),b
 21590  001888                     l11214:
 21591                           
 21592                           ; BSR set to: 0
 21593  001888  5191               	movf	sprintf@c& (0+255),w,b
 21594  00188A  0A0A               	xorlw	10
 21595  00188C  E058               	bz	l11258
 21596                           
 21597                           ; BSR set to: 0
 21598                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 21599  00188E  5191               	movf	sprintf@c& (0+255),w,b
 21600  001890  0D04               	mullw	4
 21601  001892  0E08               	movlw	low _dpowers
 21602  001894  24F3               	addwf	prodl,w,c
 21603  001896  6EF6               	movwf	tblptrl,c
 21604  001898  0E70               	movlw	high _dpowers
 21605  00189A  20F4               	addwfc	prodh,w,c
 21606  00189C  6EF7               	movwf	tblptrh,c
 21607  00189E  0009               	tblrd		*+
 21608  0018A0  50F5               	movf	tablat,w,c
 21609  0018A2  5D8D               	subwf	sprintf@_val& (0+255),w,b
 21610  0018A4  0009               	tblrd		*+
 21611  0018A6  50F5               	movf	tablat,w,c
 21612  0018A8  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21613  0018AA  0009               	tblrd		*+
 21614  0018AC  50F5               	movf	tablat,w,c
 21615  0018AE  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21616  0018B0  0009               	tblrd		*+
 21617  0018B2  50F5               	movf	tablat,w,c
 21618  0018B4  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21619  0018B6  E343               	bnc	l11258
 21620                           
 21621                           ; BSR set to: 0
 21622  0018B8  2B91               	incf	sprintf@c& (0+255),f,b
 21623  0018BA  D7E6               	goto	l11214
 21624  0018BC                     l11226:
 21625                           
 21626                           ; BSR set to: 0
 21627                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 21628  0018BC  0E01               	movlw	1
 21629  0018BE  6F91               	movwf	sprintf@c& (0+255),b
 21630  0018C0                     l11228:
 21631                           
 21632                           ; BSR set to: 0
 21633  0018C0  5191               	movf	sprintf@c& (0+255),w,b
 21634  0018C2  0A08               	xorlw	8
 21635  0018C4  E03C               	bz	l11258
 21636                           
 21637                           ; BSR set to: 0
 21638                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 21639  0018C6  5191               	movf	sprintf@c& (0+255),w,b
 21640  0018C8  0D04               	mullw	4
 21641  0018CA  0E30               	movlw	low _hexpowers
 21642  0018CC  24F3               	addwf	prodl,w,c
 21643  0018CE  6EF6               	movwf	tblptrl,c
 21644  0018D0  0E70               	movlw	high _hexpowers
 21645  0018D2  20F4               	addwfc	prodh,w,c
 21646  0018D4  6EF7               	movwf	tblptrh,c
 21647  0018D6  0009               	tblrd		*+
 21648  0018D8  50F5               	movf	tablat,w,c
 21649  0018DA  5D8D               	subwf	sprintf@_val& (0+255),w,b
 21650  0018DC  0009               	tblrd		*+
 21651  0018DE  50F5               	movf	tablat,w,c
 21652  0018E0  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21653  0018E2  0009               	tblrd		*+
 21654  0018E4  50F5               	movf	tablat,w,c
 21655  0018E6  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21656  0018E8  0009               	tblrd		*+
 21657  0018EA  50F5               	movf	tablat,w,c
 21658  0018EC  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21659  0018EE  E327               	bnc	l11258
 21660                           
 21661                           ; BSR set to: 0
 21662  0018F0  2B91               	incf	sprintf@c& (0+255),f,b
 21663  0018F2  D7E6               	goto	l11228
 21664  0018F4                     l11240:
 21665                           
 21666                           ; BSR set to: 0
 21667                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 21668  0018F4  0E01               	movlw	1
 21669  0018F6  6F91               	movwf	sprintf@c& (0+255),b
 21670  0018F8                     l11242:
 21671                           
 21672                           ; BSR set to: 0
 21673  0018F8  5191               	movf	sprintf@c& (0+255),w,b
 21674  0018FA  0A0C               	xorlw	12
 21675  0018FC  E020               	bz	l11258
 21676                           
 21677                           ; BSR set to: 0
 21678                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 21679  0018FE  5191               	movf	sprintf@c& (0+255),w,b
 21680  001900  0D04               	mullw	4
 21681  001902  0ED8               	movlw	low _octpowers
 21682  001904  24F3               	addwf	prodl,w,c
 21683  001906  6EF6               	movwf	tblptrl,c
 21684  001908  0E6F               	movlw	high _octpowers
 21685  00190A  20F4               	addwfc	prodh,w,c
 21686  00190C  6EF7               	movwf	tblptrh,c
 21687  00190E  0009               	tblrd		*+
 21688  001910  50F5               	movf	tablat,w,c
 21689  001912  5D8D               	subwf	sprintf@_val& (0+255),w,b
 21690  001914  0009               	tblrd		*+
 21691  001916  50F5               	movf	tablat,w,c
 21692  001918  598E               	subwfb	(sprintf@_val+1)& (0+255),w,b
 21693  00191A  0009               	tblrd		*+
 21694  00191C  50F5               	movf	tablat,w,c
 21695  00191E  598F               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21696  001920  0009               	tblrd		*+
 21697  001922  50F5               	movf	tablat,w,c
 21698  001924  5990               	subwfb	(sprintf@_val+3)& (0+255),w,b
 21699  001926  E30B               	bnc	l11258
 21700                           
 21701                           ; BSR set to: 0
 21702  001928  2B91               	incf	sprintf@c& (0+255),f,b
 21703  00192A  D7E6               	goto	l11242
 21704  00192C                     l11256:
 21705                           
 21706                           ; BSR set to: 0
 21707  00192C  5192               	movf	sprintf@flag& (0+255),w,b
 21708  00192E  0BC0               	andlw	192
 21709                           
 21710                           ; Switch size 1, requested type "space"
 21711                           ; Number of cases is 4, Range of values is 0 to 192
 21712                           ; switch strategies available:
 21713                           ; Name         Instructions Cycles
 21714                           ; simple_byte           13     7 (average)
 21715                           ;	Chosen strategy is simple_byte
 21716  001930  E0A9               	bz	l11212
 21717  001932  0A40               	xorlw	64	; case 64
 21718  001934  E0DF               	bz	l11240
 21719  001936  0AC0               	xorlw	192	; case 128
 21720  001938  E0C1               	bz	l11226
 21721  00193A  0A40               	xorlw	64	; case 192
 21722  00193C  E0A3               	bz	l11212
 21723  00193E                     l11258:
 21724                           
 21725                           ; BSR set to: 0
 21726                           ;doprnt.c: 1346: if(c < prec)
 21727  00193E  0E80               	movlw	128
 21728  001940  BF91               	btfsc	sprintf@c& (0+255),7,b
 21729  001942  0E7F               	movlw	127
 21730  001944  6F7E               	movwf	??_sprintf& (0+255),b
 21731  001946  5189               	movf	sprintf@prec& (0+255),w,b
 21732  001948  5D91               	subwf	sprintf@c& (0+255),w,b
 21733  00194A  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21734  00194C  0A80               	xorlw	128
 21735  00194E  597E               	subwfb	??_sprintf& (0+255),w,b
 21736  001950  E203               	bc	l11262
 21737                           
 21738                           ; BSR set to: 0
 21739                           ;doprnt.c: 1347: c = prec;
 21740  001952  C089  F091         	movff	sprintf@prec,sprintf@c
 21741  001956  D00F               	goto	l11266
 21742  001958                     l11262:
 21743                           
 21744                           ; BSR set to: 0
 21745                           ;doprnt.c: 1348: else if(prec < c)
 21746  001958  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21747  00195A  0A80               	xorlw	128
 21748  00195C  6F7E               	movwf	??_sprintf& (0+255),b
 21749  00195E  5191               	movf	sprintf@c& (0+255),w,b
 21750  001960  5D89               	subwf	sprintf@prec& (0+255),w,b
 21751  001962  0E80               	movlw	128
 21752  001964  BF91               	btfsc	sprintf@c& (0+255),7,b
 21753  001966  0E7F               	movlw	127
 21754  001968  597E               	subwfb	??_sprintf& (0+255),w,b
 21755  00196A  E205               	bc	l11266
 21756                           
 21757                           ; BSR set to: 0
 21758                           ;doprnt.c: 1349: prec = c;
 21759  00196C  5191               	movf	sprintf@c& (0+255),w,b
 21760  00196E  6F89               	movwf	sprintf@prec& (0+255),b
 21761  001970  6B8A               	clrf	(sprintf@prec+1)& (0+255),b
 21762  001972  BF89               	btfsc	sprintf@prec& (0+255),7,b
 21763  001974  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 21764  001976                     l11266:
 21765                           
 21766                           ; BSR set to: 0
 21767                           ;doprnt.c: 1352: if(width && flag & 0x03)
 21768  001976  518C               	movf	(sprintf@width+1)& (0+255),w,b
 21769  001978  118B               	iorwf	sprintf@width& (0+255),w,b
 21770  00197A  E006               	bz	l11272
 21771                           
 21772                           ; BSR set to: 0
 21773  00197C  5192               	movf	sprintf@flag& (0+255),w,b
 21774  00197E  0B03               	andlw	3
 21775  001980  E003               	bz	l11272
 21776                           
 21777                           ; BSR set to: 0
 21778                           ;doprnt.c: 1353: width--;
 21779  001982  078B               	decf	sprintf@width& (0+255),f,b
 21780  001984  A0D8               	btfss	status,0,c
 21781  001986  078C               	decf	(sprintf@width+1)& (0+255),f,b
 21782  001988                     l11272:
 21783                           
 21784                           ; BSR set to: 0
 21785                           ;doprnt.c: 1355: if(flag & 0x4000) {
 21786  001988  AD93               	btfss	(sprintf@flag+1)& (0+255),6,b
 21787  00198A  D010               	goto	l11278
 21788                           
 21789                           ; BSR set to: 0
 21790                           ;doprnt.c: 1356: if(width > prec)
 21791  00198C  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21792  00198E  0A80               	xorlw	128
 21793  001990  6F7E               	movwf	??_sprintf& (0+255),b
 21794  001992  518B               	movf	sprintf@width& (0+255),w,b
 21795  001994  5D89               	subwf	sprintf@prec& (0+255),w,b
 21796  001996  518C               	movf	(sprintf@width+1)& (0+255),w,b
 21797  001998  0A80               	xorlw	128
 21798  00199A  597E               	subwfb	??_sprintf& (0+255),w,b
 21799  00199C  E205               	bc	l1613
 21800                           
 21801                           ; BSR set to: 0
 21802                           ;doprnt.c: 1357: width -= prec;
 21803  00199E  5189               	movf	sprintf@prec& (0+255),w,b
 21804  0019A0  5F8B               	subwf	sprintf@width& (0+255),f,b
 21805  0019A2  518A               	movf	(sprintf@prec+1)& (0+255),w,b
 21806  0019A4  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 21807  0019A6  D002               	goto	l11278
 21808  0019A8                     l1613:
 21809                           
 21810                           ; BSR set to: 0
 21811                           ;doprnt.c: 1358: else
 21812                           ;doprnt.c: 1359: width = 0;
 21813  0019A8  6B8B               	clrf	sprintf@width& (0+255),b
 21814  0019AA  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21815  0019AC                     l11278:
 21816                           
 21817                           ; BSR set to: 0
 21818                           ;doprnt.c: 1360: }
 21819                           ;doprnt.c: 1364: if((flag & (
 21820                           ;doprnt.c: 1366: 0x04|
 21821                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 21822  0019AC  0EC4               	movlw	196
 21823  0019AE  D94D               	call	PL20	;call to abstracted procedure
 21824  0019B0  0E40               	movlw	64
 21825  0019B2  B4D8               	btfsc	status,2,c
 21826  0019B4  197E               	xorwf	??_sprintf& (0+255),w,b
 21827  0019B6  E107               	bnz	l11284
 21828                           
 21829                           ; BSR set to: 0
 21830                           ;doprnt.c: 1369: if(width)
 21831  0019B8  518C               	movf	(sprintf@width+1)& (0+255),w,b
 21832  0019BA  118B               	iorwf	sprintf@width& (0+255),w,b
 21833  0019BC  E018               	bz	l11290
 21834                           
 21835                           ; BSR set to: 0
 21836                           ;doprnt.c: 1370: width--;
 21837  0019BE  078B               	decf	sprintf@width& (0+255),f,b
 21838  0019C0  A0D8               	btfss	status,0,c
 21839  0019C2  078C               	decf	(sprintf@width+1)& (0+255),f,b
 21840  0019C4  D014               	goto	l11290
 21841  0019C6                     l11284:
 21842                           
 21843                           ; BSR set to: 0
 21844                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 21845  0019C6  0EC0               	movlw	192
 21846  0019C8  D940               	call	PL20	;call to abstracted procedure
 21847  0019CA  0E80               	movlw	128
 21848  0019CC  B4D8               	btfsc	status,2,c
 21849  0019CE  197E               	xorwf	??_sprintf& (0+255),w,b
 21850  0019D0  E10E               	bnz	l11290
 21851                           
 21852                           ; BSR set to: 0
 21853                           ;doprnt.c: 1379: if(width > 2)
 21854  0019D2  518C               	movf	(sprintf@width+1)& (0+255),w,b
 21855  0019D4  0A80               	xorlw	128
 21856  0019D6  0F80               	addlw	-128
 21857  0019D8  0E03               	movlw	3
 21858  0019DA  B4D8               	btfsc	status,2,c
 21859  0019DC  5D8B               	subwf	sprintf@width& (0+255),w,b
 21860  0019DE  E305               	bnc	l1619
 21861                           
 21862                           ; BSR set to: 0
 21863                           ;doprnt.c: 1380: width -= 2;
 21864  0019E0  0EFE               	movlw	254
 21865  0019E2  278B               	addwf	sprintf@width& (0+255),f,b
 21866  0019E4  0EFF               	movlw	255
 21867  0019E6  238C               	addwfc	(sprintf@width+1)& (0+255),f,b
 21868  0019E8  D002               	goto	l11290
 21869  0019EA                     l1619:
 21870                           
 21871                           ; BSR set to: 0
 21872                           ;doprnt.c: 1381: else
 21873                           ;doprnt.c: 1382: width = 0;
 21874  0019EA  6B8B               	clrf	sprintf@width& (0+255),b
 21875  0019EC  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21876  0019EE                     l11290:
 21877                           
 21878                           ; BSR set to: 0
 21879                           ;doprnt.c: 1383: }
 21880                           ;doprnt.c: 1388: if(width > c)
 21881  0019EE  0E80               	movlw	128
 21882  0019F0  BF91               	btfsc	sprintf@c& (0+255),7,b
 21883  0019F2  0E7F               	movlw	127
 21884  0019F4  6F7E               	movwf	??_sprintf& (0+255),b
 21885  0019F6  518B               	movf	sprintf@width& (0+255),w,b
 21886  0019F8  5D91               	subwf	sprintf@c& (0+255),w,b
 21887  0019FA  518C               	movf	(sprintf@width+1)& (0+255),w,b
 21888  0019FC  0A80               	xorlw	128
 21889  0019FE  597E               	subwfb	??_sprintf& (0+255),w,b
 21890  001A00  E207               	bc	l1621
 21891                           
 21892                           ; BSR set to: 0
 21893                           ;doprnt.c: 1389: width -= c;
 21894  001A02  5191               	movf	sprintf@c& (0+255),w,b
 21895  001A04  5F8B               	subwf	sprintf@width& (0+255),f,b
 21896  001A06  0E00               	movlw	0
 21897  001A08  BF91               	btfsc	sprintf@c& (0+255),7,b
 21898  001A0A  0EFF               	movlw	255
 21899  001A0C  5B8C               	subwfb	(sprintf@width+1)& (0+255),f,b
 21900  001A0E  D002               	goto	l1622
 21901  001A10                     l1621:
 21902                           
 21903                           ; BSR set to: 0
 21904                           ;doprnt.c: 1390: else
 21905                           ;doprnt.c: 1391: width = 0;
 21906  001A10  6B8B               	clrf	sprintf@width& (0+255),b
 21907  001A12  6B8C               	clrf	(sprintf@width+1)& (0+255),b
 21908  001A14                     l1622:
 21909                           
 21910                           ; BSR set to: 0
 21911                           ;doprnt.c: 1394: if(flag & 0x04) {
 21912  001A14  A592               	btfss	sprintf@flag& (0+255),2,b
 21913  001A16  D03C               	goto	l11328
 21914                           
 21915                           ; BSR set to: 0
 21916                           ;doprnt.c: 1399: if(flag & 0x03)
 21917  001A18  5192               	movf	sprintf@flag& (0+255),w,b
 21918  001A1A  0B03               	andlw	3
 21919  001A1C  E009               	bz	l1624
 21920                           
 21921                           ; BSR set to: 0
 21922                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 21923  001A1E  C076  FFD9         	movff	sprintf@sp,fsr2l
 21924  001A22  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21925  001A26  0E2D               	movlw	45
 21926  001A28  6EDF               	movwf	indf2,c
 21927  001A2A                     l11298:
 21928                           
 21929                           ; BSR set to: 0
 21930  001A2A  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21931  001A2C  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21932  001A2E  D022               	goto	l11320
 21933  001A30                     l1624:
 21934                           
 21935                           ; BSR set to: 0
 21936                           ;doprnt.c: 1403: else
 21937                           ;doprnt.c: 1406: if(flag & 0x01)
 21938  001A30  A192               	btfss	sprintf@flag& (0+255),0,b
 21939  001A32  D006               	goto	l11304
 21940                           
 21941                           ; BSR set to: 0
 21942                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 21943  001A34  C076  FFD9         	movff	sprintf@sp,fsr2l
 21944  001A38  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21945  001A3C  0E20               	movlw	32
 21946  001A3E  D7F4               	goto	L35
 21947  001A40                     l11304:
 21948                           
 21949                           ; BSR set to: 0
 21950                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 21951  001A40  0EC0               	movlw	192
 21952  001A42  D903               	call	PL20	;call to abstracted procedure
 21953  001A44  0E80               	movlw	128
 21954  001A46  B4D8               	btfsc	status,2,c
 21955  001A48  197E               	xorwf	??_sprintf& (0+255),w,b
 21956  001A4A  E114               	bnz	l11320
 21957                           
 21958                           ; BSR set to: 0
 21959                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 21960  001A4C  C076  FFD9         	movff	sprintf@sp,fsr2l
 21961  001A50  D94A               	call	PL94	;call to abstracted procedure
 21962                           
 21963                           ; BSR set to: 0
 21964  001A52  4B76               	infsnz	sprintf@sp& (0+255),f,b
 21965  001A54  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 21966                           
 21967                           ; BSR set to: 0
 21968                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 21969  001A56  BB92               	btfsc	sprintf@flag& (0+255),5,b
 21970  001A58  D003               	goto	l11314
 21971                           
 21972                           ; BSR set to: 0
 21973  001A5A  6B83               	clrf	(_sprintf$2149+1)& (0+255),b
 21974  001A5C  0E78               	movlw	120
 21975  001A5E  D002               	goto	L36
 21976  001A60                     l11314:
 21977                           
 21978                           ; BSR set to: 0
 21979  001A60  6B83               	clrf	(_sprintf$2149+1)& (0+255),b
 21980  001A62  0E58               	movlw	88
 21981  001A64                     L36:
 21982  001A64  6F82               	movwf	_sprintf$2149& (0+255),b
 21983                           
 21984                           ; BSR set to: 0
 21985  001A66  C076  FFD9         	movff	sprintf@sp,fsr2l
 21986  001A6A  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 21987  001A6E  C082  FFDF         	movff	_sprintf$2149,indf2
 21988  001A72  D7DB               	goto	l11298
 21989  001A74                     l11320:
 21990                           
 21991                           ; BSR set to: 0
 21992                           ;doprnt.c: 1419: }
 21993                           ;doprnt.c: 1422: if(width)
 21994  001A74  518C               	movf	(sprintf@width+1)& (0+255),w,b
 21995  001A76  118B               	iorwf	sprintf@width& (0+255),w,b
 21996  001A78  E101 D0B9          	bz	l11392
 21997                           
 21998                           ; BSR set to: 0
 21999                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22000  001A7C  C076  FFD9         	movff	sprintf@sp,fsr2l
 22001  001A80  D932               	call	PL94	;call to abstracted procedure
 22002                           
 22003                           ; BSR set to: 0
 22004  001A82  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22005  001A84  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22006                           
 22007                           ; BSR set to: 0
 22008                           ;doprnt.c: 1425: while(--width);
 22009  001A86  078B               	decf	sprintf@width& (0+255),f,b
 22010  001A88  A0D8               	btfss	status,0,c
 22011  001A8A  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22012  001A8C  0100               	movlb	0	; () banked
 22013  001A8E  D7F2               	goto	l11320
 22014  001A90                     l11328:
 22015                           
 22016                           ; BSR set to: 0
 22017                           ;doprnt.c: 1429: {
 22018                           ;doprnt.c: 1431: if(width
 22019                           ;doprnt.c: 1433: && !(flag & 0x08)
 22020                           ;doprnt.c: 1435: )
 22021  001A90  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22022  001A92  118B               	iorwf	sprintf@width& (0+255),w,b
 22023  001A94  A4D8               	btfss	status,2,c
 22024                           
 22025                           ; BSR set to: 0
 22026  001A96  B792               	btfsc	sprintf@flag& (0+255),3,b
 22027  001A98  D004               	goto	l11338
 22028  001A9A                     l11332:
 22029                           
 22030                           ; BSR set to: 0
 22031                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 22032  001A9A  C076  FFD9         	movff	sprintf@sp,fsr2l
 22033                           
 22034                           ; BSR set to: 0
 22035                           
 22036                           ; BSR set to: 0
 22037                           ;doprnt.c: 1438: while(--width);
 22038  001A9E  D8F0               	call	PL44	;call to abstracted procedure
 22039  001AA0  E1FC               	bnz	l11332
 22040  001AA2                     l11338:
 22041                           
 22042                           ; BSR set to: 0
 22043                           ;doprnt.c: 1445: if(flag & 0x03)
 22044  001AA2  5192               	movf	sprintf@flag& (0+255),w,b
 22045  001AA4  0B03               	andlw	3
 22046  001AA6  E009               	bz	l1640
 22047                           
 22048                           ; BSR set to: 0
 22049                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 22050  001AA8  C076  FFD9         	movff	sprintf@sp,fsr2l
 22051  001AAC  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22052  001AB0  0E2D               	movlw	45
 22053  001AB2  6EDF               	movwf	indf2,c
 22054                           
 22055                           ; BSR set to: 0
 22056  001AB4  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22057  001AB6  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22058  001AB8  D008               	goto	l11348
 22059  001ABA                     l1640:
 22060                           
 22061                           ; BSR set to: 0
 22062                           ;doprnt.c: 1450: else if(flag & 0x01)
 22063  001ABA  A192               	btfss	sprintf@flag& (0+255),0,b
 22064  001ABC  D006               	goto	l11348
 22065                           
 22066                           ; BSR set to: 0
 22067                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 22068  001ABE  C076  FFD9         	movff	sprintf@sp,fsr2l
 22069  001AC2  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22070  001AC6  0E20               	movlw	32
 22071  001AC8  D7F4               	goto	L37
 22072  001ACA                     l11348:
 22073                           
 22074                           ; BSR set to: 0
 22075                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 22076  001ACA  0EC0               	movlw	192
 22077  001ACC  D8BE               	call	PL20	;call to abstracted procedure
 22078  001ACE  0E40               	movlw	64
 22079  001AD0  B4D8               	btfsc	status,2,c
 22080  001AD2  197E               	xorwf	??_sprintf& (0+255),w,b
 22081  001AD4  E106               	bnz	l11354
 22082                           
 22083                           ; BSR set to: 0
 22084                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 22085  001AD6  C076  FFD9         	movff	sprintf@sp,fsr2l
 22086  001ADA  D905               	call	PL94	;call to abstracted procedure
 22087  001ADC                     l11352:
 22088                           
 22089                           ; BSR set to: 0
 22090  001ADC  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22091  001ADE  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22092  001AE0  D086               	goto	l11392
 22093  001AE2                     l11354:
 22094                           
 22095                           ; BSR set to: 0
 22096                           ;doprnt.c: 1457: else
 22097                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22098  001AE2  0EC0               	movlw	192
 22099  001AE4  D8B2               	call	PL20	;call to abstracted procedure
 22100  001AE6  0E80               	movlw	128
 22101  001AE8  B4D8               	btfsc	status,2,c
 22102  001AEA  197E               	xorwf	??_sprintf& (0+255),w,b
 22103  001AEC  E001 D07F          	bnz	l11392
 22104                           
 22105                           ; BSR set to: 0
 22106                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 22107  001AF0  C076  FFD9         	movff	sprintf@sp,fsr2l
 22108  001AF4  D8F8               	call	PL94	;call to abstracted procedure
 22109                           
 22110                           ; BSR set to: 0
 22111  001AF6  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22112  001AF8  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22113                           
 22114                           ; BSR set to: 0
 22115                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22116  001AFA  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22117  001AFC  D003               	goto	l11364
 22118                           
 22119                           ; BSR set to: 0
 22120  001AFE  6B85               	clrf	(_sprintf$2150+1)& (0+255),b
 22121  001B00  0E78               	movlw	120
 22122  001B02  D002               	goto	L38
 22123  001B04                     l11364:
 22124                           
 22125                           ; BSR set to: 0
 22126  001B04  6B85               	clrf	(_sprintf$2150+1)& (0+255),b
 22127  001B06  0E58               	movlw	88
 22128  001B08                     L38:
 22129  001B08  6F84               	movwf	_sprintf$2150& (0+255),b
 22130                           
 22131                           ; BSR set to: 0
 22132  001B0A  C076  FFD9         	movff	sprintf@sp,fsr2l
 22133  001B0E  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22134  001B12  C084  FFDF         	movff	_sprintf$2150,indf2
 22135  001B16  D7E2               	goto	l11352
 22136  001B18                     l11370:
 22137                           
 22138                           ; BSR set to: 0
 22139                           ;doprnt.c: 1493: case 0xC0:
 22140                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 22141  001B18  C089  F07E         	movff	sprintf@prec,??_sprintf
 22142  001B1C  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 22143  001B20  90D8               	bcf	status,0,c
 22144  001B22  377E               	rlcf	??_sprintf& (0+255),f,b
 22145  001B24  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 22146  001B26  90D8               	bcf	status,0,c
 22147  001B28  377E               	rlcf	??_sprintf& (0+255),f,b
 22148  001B2A  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 22149  001B2C  0E08               	movlw	low _dpowers
 22150  001B2E  257E               	addwf	??_sprintf& (0+255),w,b
 22151  001B30  6EF6               	movwf	tblptrl,c
 22152  001B32  0E70               	movlw	high _dpowers
 22153  001B34  D87B               	call	PL14	;call to abstracted procedure
 22154  001B36  C08D  F060         	movff	sprintf@_val,?___lldiv
 22155  001B3A  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 22156  001B3E  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 22157  001B42  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 22158  001B46  EC2A  F025         	call	___lldiv	;wreg free
 22159  001B4A  C063  F070         	movff	?___lldiv+3,?___llmod+3
 22160  001B4E  C062  F06F         	movff	?___lldiv+2,?___llmod+2
 22161  001B52  C061  F06E         	movff	?___lldiv+1,?___llmod+1
 22162  001B56  C060  F06D         	movff	?___lldiv,?___llmod
 22163  001B5A  0E0A               	movlw	10
 22164  001B5C  6F71               	movwf	(?___llmod+4)& (0+255),b
 22165  001B5E  0E00               	movlw	0
 22166  001B60  6B72               	clrf	(?___llmod+5)& (0+255),b
 22167  001B62  6B73               	clrf	(?___llmod+6)& (0+255),b
 22168  001B64  6B74               	clrf	(?___llmod+7)& (0+255),b
 22169  001B66  ECDF  F026         	call	___llmod	;wreg free
 22170  001B6A  516D               	movf	?___llmod& (0+255),w,b
 22171  001B6C  D02D               	goto	L39
 22172  001B6E                     l11372:
 22173                           
 22174                           ; BSR set to: 0
 22175                           ;doprnt.c: 1506: {
 22176                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 22177  001B6E  D875               	call	PL24	;call to abstracted procedure
 22178  001B70  0E30               	movlw	low _hexpowers
 22179  001B72  257E               	addwf	??_sprintf& (0+255),w,b
 22180  001B74  6EF6               	movwf	tblptrl,c
 22181  001B76  0E70               	movlw	high _hexpowers
 22182  001B78  D859               	call	PL14	;call to abstracted procedure
 22183  001B7A  EC2A  F025         	call	___lldiv	;wreg free
 22184  001B7E  5160               	movf	?___lldiv& (0+255),w,b
 22185  001B80  0B0F               	andlw	15
 22186  001B82  6F81               	movwf	sprintf@idx& (0+255),b
 22187                           
 22188                           ; BSR set to: 0
 22189                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 22190  001B84  BB92               	btfsc	sprintf@flag& (0+255),5,b
 22191  001B86  D004               	goto	l11378
 22192                           
 22193                           ; BSR set to: 0
 22194  001B88  0E7E               	movlw	high STR_255
 22195  001B8A  6F87               	movwf	(_sprintf$2156+1)& (0+255),b
 22196  001B8C  0E2D               	movlw	low STR_255
 22197  001B8E  D003               	goto	L40
 22198  001B90                     l11378:
 22199                           
 22200                           ; BSR set to: 0
 22201  001B90  0E7E               	movlw	high STR_254
 22202  001B92  6F87               	movwf	(_sprintf$2156+1)& (0+255),b
 22203  001B94  0E1C               	movlw	low STR_254
 22204  001B96                     L40:
 22205  001B96  6F86               	movwf	_sprintf$2156& (0+255),b
 22206                           
 22207                           ; BSR set to: 0
 22208  001B98  5181               	movf	sprintf@idx& (0+255),w,b
 22209  001B9A  2586               	addwf	_sprintf$2156& (0+255),w,b
 22210  001B9C  6F7E               	movwf	??_sprintf& (0+255),b
 22211  001B9E  0E00               	movlw	0
 22212  001BA0  2187               	addwfc	(_sprintf$2156+1)& (0+255),w,b
 22213  001BA2  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22214  001BA4  C07E  FFF6         	movff	??_sprintf,tblptrl
 22215  001BA8  C07F  FFF7         	movff	??_sprintf+1,tblptrh
 22216  001BAC  0008               	tblrd		*
 22217  001BAE  CFF5 F091          	movff	tablat,sprintf@c
 22218                           
 22219                           ;doprnt.c: 1515: }
 22220                           ;doprnt.c: 1517: break;
 22221  001BB2  D016               	goto	l11388
 22222  001BB4                     l11382:
 22223                           
 22224                           ; BSR set to: 0
 22225                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 22226  001BB4  D852               	call	PL24	;call to abstracted procedure
 22227  001BB6  0ED8               	movlw	low _octpowers
 22228  001BB8  257E               	addwf	??_sprintf& (0+255),w,b
 22229  001BBA  6EF6               	movwf	tblptrl,c
 22230  001BBC  0E6F               	movlw	high _octpowers
 22231  001BBE  D836               	call	PL14	;call to abstracted procedure
 22232  001BC0  EC2A  F025         	call	___lldiv	;wreg free
 22233  001BC4  5160               	movf	?___lldiv& (0+255),w,b
 22234  001BC6  0B07               	andlw	7
 22235  001BC8                     L39:
 22236  001BC8  0F30               	addlw	48
 22237  001BCA  6F91               	movwf	sprintf@c& (0+255),b
 22238                           
 22239                           ;doprnt.c: 1527: break;
 22240  001BCC  D009               	goto	l11388
 22241  001BCE                     l11386:
 22242                           
 22243                           ; BSR set to: 0
 22244  001BCE  5192               	movf	sprintf@flag& (0+255),w,b
 22245  001BD0  0BC0               	andlw	192
 22246                           
 22247                           ; Switch size 1, requested type "space"
 22248                           ; Number of cases is 4, Range of values is 0 to 192
 22249                           ; switch strategies available:
 22250                           ; Name         Instructions Cycles
 22251                           ; simple_byte           13     7 (average)
 22252                           ;	Chosen strategy is simple_byte
 22253  001BD2  E0A2               	bz	l11370
 22254  001BD4  0A40               	xorlw	64	; case 64
 22255  001BD6  E0EE               	bz	l11382
 22256  001BD8  0AC0               	xorlw	192	; case 128
 22257  001BDA  E0C9               	bz	l11372
 22258  001BDC  0A40               	xorlw	64	; case 192
 22259  001BDE  E09C               	bz	l11370
 22260  001BE0                     l11388:
 22261                           
 22262                           ; BSR set to: 0
 22263                           ;doprnt.c: 1531: ((*sp++ = (c)));
 22264  001BE0  C076  FFD9         	movff	sprintf@sp,fsr2l
 22265  001BE4  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22266  001BE8  C091  FFDF         	movff	sprintf@c,indf2
 22267  001BEC  D777               	goto	l11352
 22268  001BEE                     l11392:
 22269                           
 22270                           ; BSR set to: 0
 22271  001BEE  0789               	decf	sprintf@prec& (0+255),f,b
 22272  001BF0  A0D8               	btfss	status,0,c
 22273  001BF2  078A               	decf	(sprintf@prec+1)& (0+255),f,b
 22274  001BF4  0100               	movlb	0	; () banked
 22275  001BF6  2989               	incf	sprintf@prec& (0+255),w,b
 22276  001BF8  B4D8               	btfsc	status,2,c
 22277  001BFA  298A               	incf	(sprintf@prec+1)& (0+255),w,b
 22278  001BFC  E1E8               	bnz	l11386
 22279                           
 22280                           ; BSR set to: 0
 22281                           ;doprnt.c: 1532: }
 22282                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 22283  001BFE  A792               	btfss	sprintf@flag& (0+255),3,b
 22284  001C00  D00B               	goto	l11402
 22285                           
 22286                           ; BSR set to: 0
 22287  001C02  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22288  001C04  0A80               	xorlw	128
 22289  001C06  0F80               	addlw	-128
 22290  001C08  0E01               	movlw	1
 22291  001C0A  B4D8               	btfsc	status,2,c
 22292  001C0C  5D8B               	subwf	sprintf@width& (0+255),w,b
 22293  001C0E  E304               	bnc	l11402
 22294  001C10                     l11396:
 22295                           
 22296                           ; BSR set to: 0
 22297                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 22298  001C10  C076  FFD9         	movff	sprintf@sp,fsr2l
 22299                           
 22300                           ; BSR set to: 0
 22301                           
 22302                           ; BSR set to: 0
 22303                           ;doprnt.c: 1538: while(--width);
 22304  001C14  D835               	call	PL44	;call to abstracted procedure
 22305  001C16  E1FC               	bnz	l11396
 22306  001C18                     l11402:
 22307                           
 22308                           ; BSR set to: 0
 22309  001C18  D84B               	call	PL60	;call to abstracted procedure
 22310  001C1A  6791               	tstfsz	sprintf@c& (0+255),b
 22311  001C1C  D4D1               	goto	l11068
 22312  001C1E                     l11404:
 22313                           
 22314                           ; BSR set to: 0
 22315                           ;doprnt.c: 1545: *sp = 0;
 22316  001C1E  C076  FFD9         	movff	sprintf@sp,fsr2l
 22317  001C22  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22318  001C26  0E00               	movlw	0
 22319  001C28  6EDF               	movwf	indf2,c
 22320                           
 22321                           ; BSR set to: 0
 22322  001C2A  0C00               	retlw	0
 22323  001C2C                     __end_of_sprintf:
 22324                           	opt stack 0
 22325  001C2C                     PL14:
 22326                           	opt stack 25
 22327  001C2C  217F               	addwfc	(??_sprintf+1)& (0+255),w,b
 22328  001C2E  6EF7               	movwf	tblptrh,c
 22329  001C30  0009               	tblrd		*+
 22330  001C32  CFF5 F064          	movff	tablat,?___lldiv+4
 22331  001C36  0009               	tblrd		*+
 22332  001C38  CFF5 F065          	movff	tablat,?___lldiv+5
 22333  001C3C  0009               	tblrd		*+
 22334  001C3E  CFF5 F066          	movff	tablat,?___lldiv+6
 22335  001C42  000A               	tblrd		*-
 22336  001C44  CFF5 F067          	movff	tablat,?___lldiv+7
 22337  001C48  0012               	return	
 22338  001C4A                     __end_ofPL14:
 22339                           	opt stack 0
 22340  001C4A                     PL20:
 22341                           	opt stack 25
 22342  001C4A  1592               	andwf	sprintf@flag& (0+255),w,b
 22343  001C4C  6F7E               	movwf	??_sprintf& (0+255),b
 22344  001C4E  0E08               	movlw	8
 22345  001C50  1593               	andwf	(sprintf@flag+1)& (0+255),w,b
 22346  001C52  6F7F               	movwf	(??_sprintf+1)& (0+255),b
 22347  001C54  517F               	movf	(??_sprintf+1)& (0+255),w,b
 22348  001C56  0A08               	xorlw	8
 22349  001C58  0012               	return	
 22350  001C5A                     __end_ofPL20:
 22351                           	opt stack 0
 22352  001C5A                     PL24:
 22353                           	opt stack 25
 22354  001C5A  C08D  F060         	movff	sprintf@_val,?___lldiv
 22355  001C5E  C08E  F061         	movff	sprintf@_val+1,?___lldiv+1
 22356  001C62  C08F  F062         	movff	sprintf@_val+2,?___lldiv+2
 22357  001C66  C090  F063         	movff	sprintf@_val+3,?___lldiv+3
 22358  001C6A  C089  F07E         	movff	sprintf@prec,??_sprintf
 22359  001C6E  C08A  F07F         	movff	sprintf@prec+1,??_sprintf+1
 22360  001C72  90D8               	bcf	status,0,c
 22361  001C74  377E               	rlcf	??_sprintf& (0+255),f,b
 22362  001C76  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 22363  001C78  90D8               	bcf	status,0,c
 22364  001C7A  377E               	rlcf	??_sprintf& (0+255),f,b
 22365  001C7C  377F               	rlcf	(??_sprintf+1)& (0+255),f,b
 22366  001C7E  0012               	return	
 22367  001C80                     __end_ofPL24:
 22368                           	opt stack 0
 22369  001C80                     PL44:
 22370                           	opt stack 25
 22371  001C80  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22372  001C84  0E20               	movlw	32
 22373  001C86  6EDF               	movwf	indf2,c
 22374  001C88  4B76               	infsnz	sprintf@sp& (0+255),f,b
 22375  001C8A  2B77               	incf	(sprintf@sp+1)& (0+255),f,b
 22376  001C8C  078B               	decf	sprintf@width& (0+255),f,b
 22377  001C8E  A0D8               	btfss	status,0,c
 22378  001C90  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22379  001C92  0100               	movlb	0	; () banked
 22380  001C94  518C               	movf	(sprintf@width+1)& (0+255),w,b
 22381  001C96  118B               	iorwf	sprintf@width& (0+255),w,b
 22382  001C98  0012               	return	
 22383  001C9A                     __end_ofPL44:
 22384                           	opt stack 0
 22385  001C9A                     PL52:
 22386                           	opt stack 25
 22387  001C9A  6ED9               	movwf	fsr2l,c
 22388  001C9C  6ADA               	clrf	fsr2h,c
 22389  001C9E  CFDE F08D          	movff	postinc2,sprintf@_val
 22390  001CA2  CFDE F08E          	movff	postinc2,sprintf@_val+1
 22391  001CA6  CFDE F08F          	movff	postinc2,sprintf@_val+2
 22392  001CAA  CFDE F090          	movff	postinc2,sprintf@_val+3
 22393  001CAE  0C04               	retlw	4
 22394  001CB0                     __end_ofPL52:
 22395                           	opt stack 0
 22396  001CB0                     PL60:
 22397                           	opt stack 25
 22398  001CB0  C078  FFF6         	movff	sprintf@f,tblptrl
 22399  001CB4  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22400  001CB8  4B78               	infsnz	sprintf@f& (0+255),f,b
 22401  001CBA  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22402  001CBC  0008               	tblrd		*
 22403  001CBE  CFF5 F091          	movff	tablat,sprintf@c
 22404  001CC2  0100               	movlb	0	; () banked
 22405  001CC4  0012               	return	
 22406  001CC6                     __end_ofPL60:
 22407                           	opt stack 0
 22408  001CC6                     PL62:
 22409                           	opt stack 25
 22410  001CC6  C076  FFD9         	movff	sprintf@sp,fsr2l
 22411  001CCA  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22412  001CCE  0E20               	movlw	32
 22413  001CD0  6EDF               	movwf	indf2,c
 22414  001CD2  0C20               	retlw	32
 22415  001CD4                     __end_ofPL62:
 22416                           	opt stack 0
 22417  001CD4                     PL80:
 22418                           	opt stack 25
 22419  001CD4  4B78               	infsnz	sprintf@f& (0+255),f,b
 22420  001CD6  2B79               	incf	(sprintf@f+1)& (0+255),f,b
 22421  001CD8  C078  FFF6         	movff	sprintf@f,tblptrl
 22422  001CDC  C079  FFF7         	movff	sprintf@f+1,tblptrh
 22423  001CE0  0008               	tblrd		*
 22424  001CE2  50F5               	movf	tablat,w,c
 22425  001CE4  0012               	return	
 22426  001CE6                     __end_ofPL80:
 22427                           	opt stack 0
 22428  001CE6                     PL94:
 22429                           	opt stack 25
 22430  001CE6  C077  FFDA         	movff	sprintf@sp+1,fsr2h
 22431  001CEA  0E30               	movlw	48
 22432  001CEC  6EDF               	movwf	indf2,c
 22433  001CEE  0C30               	retlw	48
 22434  001CF0                     __end_ofPL94:
 22435                           	opt stack 0
 22436  001CF0                     PL108:
 22437                           	opt stack 25
 22438  001CF0  A0D8               	btfss	status,0,c
 22439  001CF2  078C               	decf	(sprintf@width+1)& (0+255),f,b
 22440  001CF4  0100               	movlb	0	; () banked
 22441  001CF6  298B               	incf	sprintf@width& (0+255),w,b
 22442  001CF8  0012               	return	
 22443  001CFA                     __end_ofPL108:
 22444                           	opt stack 0
 22445                           tblptru	equ	0xFF8
 22446                           tblptrh	equ	0xFF7
 22447                           tblptrl	equ	0xFF6
 22448                           tablat	equ	0xFF5
 22449                           prodh	equ	0xFF4
 22450                           prodl	equ	0xFF3
 22451                           intcon	equ	0xFF2
 22452                           indf0	equ	0xFEF
 22453                           postinc0	equ	0xFEE
 22454                           fsr0h	equ	0xFEA
 22455                           fsr0l	equ	0xFE9
 22456                           wreg	equ	0xFE8
 22457                           indf1	equ	0xFE7
 22458                           postinc1	equ	0xFE6
 22459                           postdec1	equ	0xFE5
 22460                           fsr1h	equ	0xFE2
 22461                           fsr1l	equ	0xFE1
 22462                           indf2	equ	0xFDF
 22463                           postinc2	equ	0xFDE
 22464                           postdec2	equ	0xFDD
 22465                           plusw2	equ	0xFDB
 22466                           fsr2h	equ	0xFDA
 22467                           fsr2l	equ	0xFD9
 22468                           status	equ	0xFD8
 22469                           
 22470 ;; *************** function ___wmul *****************
 22471 ;; Defined at:
 22472 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 22473 ;; Parameters:    Size  Location     Type
 22474 ;;  multiplier      2    0[BANK0 ] unsigned int 
 22475 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 22476 ;; Auto vars:     Size  Location     Type
 22477 ;;  product         2    4[BANK0 ] unsigned int 
 22478 ;; Return value:  Size  Location     Type
 22479 ;;                  2    0[BANK0 ] unsigned int 
 22480 ;; Registers used:
 22481 ;;		wreg, status,2, status,0, prodl, prodh
 22482 ;; Tracked objects:
 22483 ;;		On entry : F/0
 22484 ;;		On exit  : F/0
 22485 ;;		Unchanged: 0/0
 22486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22487 ;;      Params:         0       4       0       0       0       0       0
 22488 ;;      Locals:         0       2       0       0       0       0       0
 22489 ;;      Temps:          0       0       0       0       0       0       0
 22490 ;;      Totals:         0       6       0       0       0       0       0
 22491 ;;Total ram usage:        6 bytes
 22492 ;; Hardware stack levels used:    1
 22493 ;; Hardware stack levels required when called:    3
 22494 ;; This function calls:
 22495 ;;		Nothing
 22496 ;; This function is called by:
 22497 ;;		_sprintf
 22498 ;;		_atoi
 22499 ;; This function uses a non-reentrant model
 22500 ;;
 22501                           
 22502                           	psect	text54
 22503  0052FE                     __ptext54:
 22504                           	opt stack 0
 22505  0052FE                     ___wmul:
 22506                           	opt stack 25
 22507                           
 22508                           ; BSR set to: 0
 22509                           
 22510                           ; BSR set to: 0
 22511                           ;incstack = 0
 22512                           ;incstack = 0
 22513  0052FE  5160               	movf	___wmul@multiplier& (0+255),w,b
 22514  005300  0362               	mulwf	___wmul@multiplicand& (0+255),b
 22515  005302  CFF3 F064          	movff	prodl,___wmul@product
 22516  005306  CFF4 F065          	movff	prodh,___wmul@product+1
 22517  00530A  5160               	movf	___wmul@multiplier& (0+255),w,b
 22518  00530C  0363               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 22519  00530E  D808               	call	PL96	;call to abstracted procedure
 22520  005310  5161               	movf	(___wmul@multiplier+1)& (0+255),w,b
 22521  005312  0362               	mulwf	___wmul@multiplicand& (0+255),b
 22522  005314  D805               	call	PL96	;call to abstracted procedure
 22523                           
 22524                           ; BSR set to: 0
 22525  005316  C064  F060         	movff	___wmul@product,?___wmul
 22526  00531A  C065  F061         	movff	___wmul@product+1,?___wmul+1
 22527                           
 22528                           ; BSR set to: 0
 22529  00531E  0012               	return	
 22530  005320                     __end_of___wmul:
 22531                           	opt stack 0
 22532  005320                     PL96:
 22533                           	opt stack 25
 22534  005320  CFF3 FFF4          	movff	prodl,prodh
 22535  005324  6AF3               	clrf	prodl,c
 22536  005326  50F3               	movf	prodl,w,c
 22537  005328  2764               	addwf	___wmul@product& (0+255),f,b
 22538  00532A  50F4               	movf	prodh,w,c
 22539  00532C  2365               	addwfc	(___wmul@product+1)& (0+255),f,b
 22540  00532E  0012               	return	
 22541  005330                     __end_ofPL96:
 22542                           	opt stack 0
 22543                           tblptru	equ	0xFF8
 22544                           tblptrh	equ	0xFF7
 22545                           tblptrl	equ	0xFF6
 22546                           tablat	equ	0xFF5
 22547                           prodh	equ	0xFF4
 22548                           prodl	equ	0xFF3
 22549                           intcon	equ	0xFF2
 22550                           indf0	equ	0xFEF
 22551                           postinc0	equ	0xFEE
 22552                           fsr0h	equ	0xFEA
 22553                           fsr0l	equ	0xFE9
 22554                           wreg	equ	0xFE8
 22555                           indf1	equ	0xFE7
 22556                           postinc1	equ	0xFE6
 22557                           postdec1	equ	0xFE5
 22558                           fsr1h	equ	0xFE2
 22559                           fsr1l	equ	0xFE1
 22560                           indf2	equ	0xFDF
 22561                           postinc2	equ	0xFDE
 22562                           postdec2	equ	0xFDD
 22563                           plusw2	equ	0xFDB
 22564                           fsr2h	equ	0xFDA
 22565                           fsr2l	equ	0xFD9
 22566                           status	equ	0xFD8
 22567                           
 22568 ;; *************** function ___llmod *****************
 22569 ;; Defined at:
 22570 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 22571 ;; Parameters:    Size  Location     Type
 22572 ;;  dividend        4   13[BANK0 ] unsigned long 
 22573 ;;  divisor         4   17[BANK0 ] unsigned long 
 22574 ;; Auto vars:     Size  Location     Type
 22575 ;;  counter         1   21[BANK0 ] unsigned char 
 22576 ;; Return value:  Size  Location     Type
 22577 ;;                  4   13[BANK0 ] unsigned long 
 22578 ;; Registers used:
 22579 ;;		wreg, status,2, status,0
 22580 ;; Tracked objects:
 22581 ;;		On entry : F/0
 22582 ;;		On exit  : F/0
 22583 ;;		Unchanged: 0/0
 22584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22585 ;;      Params:         0       8       0       0       0       0       0
 22586 ;;      Locals:         0       1       0       0       0       0       0
 22587 ;;      Temps:          0       0       0       0       0       0       0
 22588 ;;      Totals:         0       9       0       0       0       0       0
 22589 ;;Total ram usage:        9 bytes
 22590 ;; Hardware stack levels used:    1
 22591 ;; Hardware stack levels required when called:    3
 22592 ;; This function calls:
 22593 ;;		Nothing
 22594 ;; This function is called by:
 22595 ;;		_sprintf
 22596 ;;		_ultoa
 22597 ;; This function uses a non-reentrant model
 22598 ;;
 22599                           
 22600                           	psect	text55
 22601  004DBE                     __ptext55:
 22602                           	opt stack 0
 22603  004DBE                     ___llmod:
 22604                           	opt stack 24
 22605                           
 22606                           ; BSR set to: 0
 22607                           
 22608                           ; BSR set to: 0
 22609                           ;incstack = 0
 22610                           ;incstack = 0
 22611  004DBE  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 22612  004DC0  1171               	iorwf	___llmod@divisor& (0+255),w,b
 22613  004DC2  1172               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 22614  004DC4  1173               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 22615  004DC6  E023               	bz	l2239
 22616                           
 22617                           ; BSR set to: 0
 22618  004DC8  0E01               	movlw	1
 22619  004DCA  6F75               	movwf	___llmod@counter& (0+255),b
 22620  004DCC  D006               	goto	l12230
 22621  004DCE                     l12228:
 22622                           
 22623                           ; BSR set to: 0
 22624  004DCE  90D8               	bcf	status,0,c
 22625  004DD0  3771               	rlcf	___llmod@divisor& (0+255),f,b
 22626  004DD2  3772               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 22627  004DD4  3773               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 22628  004DD6  3774               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 22629  004DD8  2B75               	incf	___llmod@counter& (0+255),f,b
 22630  004DDA                     l12230:
 22631                           
 22632                           ; BSR set to: 0
 22633  004DDA  AF74               	btfss	(___llmod@divisor+3)& (0+255),7,b
 22634  004DDC  D7F8               	goto	l12228
 22635  004DDE                     l12232:
 22636                           
 22637                           ; BSR set to: 0
 22638  004DDE  5171               	movf	___llmod@divisor& (0+255),w,b
 22639  004DE0  5D6D               	subwf	___llmod@dividend& (0+255),w,b
 22640  004DE2  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 22641  004DE4  596E               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 22642  004DE6  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 22643  004DE8  596F               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 22644  004DEA  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 22645  004DEC  5970               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 22646  004DEE  E308               	bnc	l12236
 22647                           
 22648                           ; BSR set to: 0
 22649  004DF0  5171               	movf	___llmod@divisor& (0+255),w,b
 22650  004DF2  5F6D               	subwf	___llmod@dividend& (0+255),f,b
 22651  004DF4  5172               	movf	(___llmod@divisor+1)& (0+255),w,b
 22652  004DF6  5B6E               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 22653  004DF8  5173               	movf	(___llmod@divisor+2)& (0+255),w,b
 22654  004DFA  5B6F               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 22655  004DFC  5174               	movf	(___llmod@divisor+3)& (0+255),w,b
 22656  004DFE  5B70               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 22657  004E00                     l12236:
 22658                           
 22659                           ; BSR set to: 0
 22660  004E00  90D8               	bcf	status,0,c
 22661  004E02  3374               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 22662  004E04  3373               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 22663  004E06  3372               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 22664  004E08  3371               	rrcf	___llmod@divisor& (0+255),f,b
 22665                           
 22666                           ; BSR set to: 0
 22667  004E0A  2F75               	decfsz	___llmod@counter& (0+255),f,b
 22668  004E0C  D7E8               	goto	l12232
 22669  004E0E                     l2239:
 22670                           
 22671                           ; BSR set to: 0
 22672  004E0E  C06D  F06D         	movff	___llmod@dividend,?___llmod
 22673  004E12  C06E  F06E         	movff	___llmod@dividend+1,?___llmod+1
 22674  004E16  C06F  F06F         	movff	___llmod@dividend+2,?___llmod+2
 22675  004E1A  C070  F070         	movff	___llmod@dividend+3,?___llmod+3
 22676                           
 22677                           ; BSR set to: 0
 22678  004E1E  0012               	return	
 22679  004E20                     __end_of___llmod:
 22680                           	opt stack 0
 22681                           tblptru	equ	0xFF8
 22682                           tblptrh	equ	0xFF7
 22683                           tblptrl	equ	0xFF6
 22684                           tablat	equ	0xFF5
 22685                           prodh	equ	0xFF4
 22686                           prodl	equ	0xFF3
 22687                           intcon	equ	0xFF2
 22688                           indf0	equ	0xFEF
 22689                           postinc0	equ	0xFEE
 22690                           fsr0h	equ	0xFEA
 22691                           fsr0l	equ	0xFE9
 22692                           wreg	equ	0xFE8
 22693                           indf1	equ	0xFE7
 22694                           postinc1	equ	0xFE6
 22695                           postdec1	equ	0xFE5
 22696                           fsr1h	equ	0xFE2
 22697                           fsr1l	equ	0xFE1
 22698                           indf2	equ	0xFDF
 22699                           postinc2	equ	0xFDE
 22700                           postdec2	equ	0xFDD
 22701                           plusw2	equ	0xFDB
 22702                           fsr2h	equ	0xFDA
 22703                           fsr2l	equ	0xFD9
 22704                           status	equ	0xFD8
 22705                           
 22706 ;; *************** function ___lldiv *****************
 22707 ;; Defined at:
 22708 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 22709 ;; Parameters:    Size  Location     Type
 22710 ;;  dividend        4    0[BANK0 ] unsigned long 
 22711 ;;  divisor         4    4[BANK0 ] unsigned long 
 22712 ;; Auto vars:     Size  Location     Type
 22713 ;;  quotient        4    8[BANK0 ] unsigned long 
 22714 ;;  counter         1   12[BANK0 ] unsigned char 
 22715 ;; Return value:  Size  Location     Type
 22716 ;;                  4    0[BANK0 ] unsigned long 
 22717 ;; Registers used:
 22718 ;;		wreg, status,2, status,0
 22719 ;; Tracked objects:
 22720 ;;		On entry : F/0
 22721 ;;		On exit  : F/0
 22722 ;;		Unchanged: 0/0
 22723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22724 ;;      Params:         0       8       0       0       0       0       0
 22725 ;;      Locals:         0       5       0       0       0       0       0
 22726 ;;      Temps:          0       0       0       0       0       0       0
 22727 ;;      Totals:         0      13       0       0       0       0       0
 22728 ;;Total ram usage:       13 bytes
 22729 ;; Hardware stack levels used:    1
 22730 ;; Hardware stack levels required when called:    3
 22731 ;; This function calls:
 22732 ;;		Nothing
 22733 ;; This function is called by:
 22734 ;;		_sprintf
 22735 ;;		_ultoa
 22736 ;; This function uses a non-reentrant model
 22737 ;;
 22738                           
 22739                           	psect	text56
 22740  004A54                     __ptext56:
 22741                           	opt stack 0
 22742  004A54                     ___lldiv:
 22743                           	opt stack 24
 22744                           
 22745                           ; BSR set to: 0
 22746                           
 22747                           ; BSR set to: 0
 22748                           ;incstack = 0
 22749                           ;incstack = 0
 22750  004A54  6B68               	clrf	___lldiv@quotient& (0+255),b
 22751  004A56  6B69               	clrf	(___lldiv@quotient+1)& (0+255),b
 22752  004A58  6B6A               	clrf	(___lldiv@quotient+2)& (0+255),b
 22753  004A5A  6B6B               	clrf	(___lldiv@quotient+3)& (0+255),b
 22754                           
 22755                           ; BSR set to: 0
 22756  004A5C  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22757  004A5E  1164               	iorwf	___lldiv@divisor& (0+255),w,b
 22758  004A60  1165               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 22759  004A62  1166               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 22760  004A64  E029               	bz	l2229
 22761                           
 22762                           ; BSR set to: 0
 22763  004A66  0E01               	movlw	1
 22764  004A68  6F6C               	movwf	___lldiv@counter& (0+255),b
 22765  004A6A  D006               	goto	l12210
 22766  004A6C                     l12208:
 22767                           
 22768                           ; BSR set to: 0
 22769  004A6C  90D8               	bcf	status,0,c
 22770  004A6E  3764               	rlcf	___lldiv@divisor& (0+255),f,b
 22771  004A70  3765               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 22772  004A72  3766               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 22773  004A74  3767               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 22774  004A76  2B6C               	incf	___lldiv@counter& (0+255),f,b
 22775  004A78                     l12210:
 22776                           
 22777                           ; BSR set to: 0
 22778  004A78  AF67               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 22779  004A7A  D7F8               	goto	l12208
 22780  004A7C                     l12212:
 22781                           
 22782                           ; BSR set to: 0
 22783  004A7C  90D8               	bcf	status,0,c
 22784  004A7E  3768               	rlcf	___lldiv@quotient& (0+255),f,b
 22785  004A80  3769               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 22786  004A82  376A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 22787  004A84  376B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 22788                           
 22789                           ; BSR set to: 0
 22790  004A86  5164               	movf	___lldiv@divisor& (0+255),w,b
 22791  004A88  5D60               	subwf	___lldiv@dividend& (0+255),w,b
 22792  004A8A  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 22793  004A8C  5961               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 22794  004A8E  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 22795  004A90  5962               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 22796  004A92  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22797  004A94  5963               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 22798  004A96  E309               	bnc	l12220
 22799                           
 22800                           ; BSR set to: 0
 22801  004A98  5164               	movf	___lldiv@divisor& (0+255),w,b
 22802  004A9A  5F60               	subwf	___lldiv@dividend& (0+255),f,b
 22803  004A9C  5165               	movf	(___lldiv@divisor+1)& (0+255),w,b
 22804  004A9E  5B61               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 22805  004AA0  5166               	movf	(___lldiv@divisor+2)& (0+255),w,b
 22806  004AA2  5B62               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 22807  004AA4  5167               	movf	(___lldiv@divisor+3)& (0+255),w,b
 22808  004AA6  5B63               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 22809                           
 22810                           ; BSR set to: 0
 22811  004AA8  8168               	bsf	___lldiv@quotient& (0+255),0,b
 22812  004AAA                     l12220:
 22813                           
 22814                           ; BSR set to: 0
 22815  004AAA  90D8               	bcf	status,0,c
 22816  004AAC  3367               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 22817  004AAE  3366               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 22818  004AB0  3365               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 22819  004AB2  3364               	rrcf	___lldiv@divisor& (0+255),f,b
 22820                           
 22821                           ; BSR set to: 0
 22822  004AB4  2F6C               	decfsz	___lldiv@counter& (0+255),f,b
 22823  004AB6  D7E2               	goto	l12212
 22824  004AB8                     l2229:
 22825                           
 22826                           ; BSR set to: 0
 22827  004AB8  C068  F060         	movff	___lldiv@quotient,?___lldiv
 22828  004ABC  C069  F061         	movff	___lldiv@quotient+1,?___lldiv+1
 22829  004AC0  C06A  F062         	movff	___lldiv@quotient+2,?___lldiv+2
 22830  004AC4  C06B  F063         	movff	___lldiv@quotient+3,?___lldiv+3
 22831                           
 22832                           ; BSR set to: 0
 22833  004AC8  0012               	return	
 22834  004ACA                     __end_of___lldiv:
 22835                           	opt stack 0
 22836                           tblptru	equ	0xFF8
 22837                           tblptrh	equ	0xFF7
 22838                           tblptrl	equ	0xFF6
 22839                           tablat	equ	0xFF5
 22840                           prodh	equ	0xFF4
 22841                           prodl	equ	0xFF3
 22842                           intcon	equ	0xFF2
 22843                           indf0	equ	0xFEF
 22844                           postinc0	equ	0xFEE
 22845                           fsr0h	equ	0xFEA
 22846                           fsr0l	equ	0xFE9
 22847                           wreg	equ	0xFE8
 22848                           indf1	equ	0xFE7
 22849                           postinc1	equ	0xFE6
 22850                           postdec1	equ	0xFE5
 22851                           fsr1h	equ	0xFE2
 22852                           fsr1l	equ	0xFE1
 22853                           indf2	equ	0xFDF
 22854                           postinc2	equ	0xFDE
 22855                           postdec2	equ	0xFDD
 22856                           plusw2	equ	0xFDB
 22857                           fsr2h	equ	0xFDA
 22858                           fsr2l	equ	0xFD9
 22859                           status	equ	0xFD8
 22860                           
 22861 ;; *************** function _isdigit *****************
 22862 ;; Defined at:
 22863 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 22864 ;; Parameters:    Size  Location     Type
 22865 ;;  c               1    wreg     unsigned char 
 22866 ;; Auto vars:     Size  Location     Type
 22867 ;;  c               1    2[BANK0 ] unsigned char 
 22868 ;; Return value:  Size  Location     Type
 22869 ;;		None               void
 22870 ;; Registers used:
 22871 ;;		wreg, status,2, status,0
 22872 ;; Tracked objects:
 22873 ;;		On entry : 0/0
 22874 ;;		On exit  : F/0
 22875 ;;		Unchanged: 0/0
 22876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22877 ;;      Params:         0       0       0       0       0       0       0
 22878 ;;      Locals:         0       2       0       0       0       0       0
 22879 ;;      Temps:          0       1       0       0       0       0       0
 22880 ;;      Totals:         0       3       0       0       0       0       0
 22881 ;;Total ram usage:        3 bytes
 22882 ;; Hardware stack levels used:    1
 22883 ;; Hardware stack levels required when called:    3
 22884 ;; This function calls:
 22885 ;;		Nothing
 22886 ;; This function is called by:
 22887 ;;		_sprintf
 22888 ;;		_atoi
 22889 ;; This function uses a non-reentrant model
 22890 ;;
 22891                           
 22892                           	psect	text57
 22893  0053E2                     __ptext57:
 22894                           	opt stack 0
 22895  0053E2                     _isdigit:
 22896                           	opt stack 25
 22897                           
 22898                           ; BSR set to: 0
 22899                           ;incstack = 0
 22900                           ;incstack = 0
 22901                           ;isdigit@c stored from wreg
 22902  0053E2  CFE8 F062          	movff	wreg,isdigit@c
 22903  0053E6  0100               	movlb	0	; () banked
 22904  0053E8  6B61               	clrf	_isdigit$2900& (0+255),b
 22905                           
 22906                           ; BSR set to: 0
 22907  0053EA  0E3A               	movlw	58
 22908  0053EC  6162               	cpfslt	isdigit@c& (0+255),b
 22909  0053EE  D005               	goto	l12168
 22910                           
 22911                           ; BSR set to: 0
 22912  0053F0  0E2F               	movlw	47
 22913  0053F2  6562               	cpfsgt	isdigit@c& (0+255),b
 22914  0053F4  D002               	goto	l12168
 22915                           
 22916                           ; BSR set to: 0
 22917  0053F6  0E01               	movlw	1
 22918  0053F8  6F61               	movwf	_isdigit$2900& (0+255),b
 22919  0053FA                     l12168:
 22920                           
 22921                           ; BSR set to: 0
 22922  0053FA  C061  F060         	movff	_isdigit$2900,??_isdigit
 22923  0053FE  3160               	rrcf	??_isdigit& (0+255),w,b
 22924                           
 22925                           ; BSR set to: 0
 22926  005400  0012               	return	
 22927  005402                     __end_of_isdigit:
 22928                           	opt stack 0
 22929                           tblptru	equ	0xFF8
 22930                           tblptrh	equ	0xFF7
 22931                           tblptrl	equ	0xFF6
 22932                           tablat	equ	0xFF5
 22933                           prodh	equ	0xFF4
 22934                           prodl	equ	0xFF3
 22935                           intcon	equ	0xFF2
 22936                           indf0	equ	0xFEF
 22937                           postinc0	equ	0xFEE
 22938                           fsr0h	equ	0xFEA
 22939                           fsr0l	equ	0xFE9
 22940                           wreg	equ	0xFE8
 22941                           indf1	equ	0xFE7
 22942                           postinc1	equ	0xFE6
 22943                           postdec1	equ	0xFE5
 22944                           fsr1h	equ	0xFE2
 22945                           fsr1l	equ	0xFE1
 22946                           indf2	equ	0xFDF
 22947                           postinc2	equ	0xFDE
 22948                           postdec2	equ	0xFDD
 22949                           plusw2	equ	0xFDB
 22950                           fsr2h	equ	0xFDA
 22951                           fsr2l	equ	0xFD9
 22952                           status	equ	0xFD8
 22953                           
 22954 ;; *************** function _printFirmwareVersion *****************
 22955 ;; Defined at:
 22956 ;;		line 2487 in file "main.c"
 22957 ;; Parameters:    Size  Location     Type
 22958 ;;		None
 22959 ;; Auto vars:     Size  Location     Type
 22960 ;;  wrkbuf         20   24[BANK0 ] unsigned char [20]
 22961 ;; Return value:  Size  Location     Type
 22962 ;;		None               void
 22963 ;; Registers used:
 22964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 22965 ;; Tracked objects:
 22966 ;;		On entry : 0/0
 22967 ;;		On exit  : 0/0
 22968 ;;		Unchanged: 0/0
 22969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 22970 ;;      Params:         0       0       0       0       0       0       0
 22971 ;;      Locals:         0      20       0       0       0       0       0
 22972 ;;      Temps:          0       0       0       0       0       0       0
 22973 ;;      Totals:         0      20       0       0       0       0       0
 22974 ;;Total ram usage:       20 bytes
 22975 ;; Hardware stack levels used:    1
 22976 ;; Hardware stack levels required when called:    6
 22977 ;; This function calls:
 22978 ;;		_putsUSART
 22979 ;;		_WriteUSART
 22980 ;;		_itoa
 22981 ;; This function is called by:
 22982 ;;		_main
 22983 ;;		_doModeVerbose
 22984 ;; This function uses a non-reentrant model
 22985 ;;
 22986                           
 22987                           	psect	text58
 22988  004744                     __ptext58:
 22989                           	opt stack 0
 22990  004744                     _printFirmwareVersion:
 22991                           	opt stack 23
 22992                           
 22993                           ;main.c: 2488: char wrkbuf[20];
 22994                           ;main.c: 2489: putsUSART((char *) "Version: ");
 22995                           
 22996                           ; BSR set to: 0
 22997                           ;incstack = 0
 22998                           ;incstack = 0
 22999  004744  0E7E               	movlw	high STR_245
 23000  004746  0100               	movlb	0	; () banked
 23001  004748  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23002  00474A  0E9D               	movlw	low STR_245
 23003  00474C  6F61               	movwf	?_putsUSART& (0+255),b
 23004  00474E  EC6A  F027         	call	_putsUSART	;wreg free
 23005                           
 23006                           ;main.c: 2490: itoa(wrkbuf, 1, 10);
 23007  004752  D838               	call	PL64	;call to abstracted procedure
 23008  004754  0E01               	movlw	1
 23009  004756  6F72               	movwf	(?_itoa+2)& (0+255),b
 23010  004758  6B75               	clrf	(?_itoa+5)& (0+255),b
 23011  00475A  0E0A               	movlw	10
 23012  00475C  6F74               	movwf	(?_itoa+4)& (0+255),b
 23013  00475E  EC48  F029         	call	_itoa	;wreg free
 23014                           
 23015                           ; BSR set to: 0
 23016                           ;main.c: 2491: putsUSART(wrkbuf);
 23017  004762  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23018  004764  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23019  004766  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23020  004768  6F61               	movwf	?_putsUSART& (0+255),b
 23021  00476A  EC6A  F027         	call	_putsUSART	;wreg free
 23022  00476E                     l1121:
 23023  00476E  A2AC               	btfss	4012,1,c	;volatile
 23024  004770  D7FE               	goto	l1121
 23025                           
 23026                           ;main.c: 2493: WriteUSART('.');
 23027  004772  0E2E               	movlw	46
 23028  004774  EC37  F02A         	call	_WriteUSART
 23029                           
 23030                           ;main.c: 2494: itoa(wrkbuf, 0, 10);
 23031  004778  D825               	call	PL64	;call to abstracted procedure
 23032  00477A  6B72               	clrf	(?_itoa+2)& (0+255),b
 23033  00477C  6B75               	clrf	(?_itoa+5)& (0+255),b
 23034  00477E  0E0A               	movlw	10
 23035  004780  6F74               	movwf	(?_itoa+4)& (0+255),b
 23036  004782  EC48  F029         	call	_itoa	;wreg free
 23037                           
 23038                           ; BSR set to: 0
 23039                           ;main.c: 2495: putsUSART(wrkbuf);
 23040  004786  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23041  004788  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23042  00478A  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23043  00478C  6F61               	movwf	?_putsUSART& (0+255),b
 23044  00478E  EC6A  F027         	call	_putsUSART	;wreg free
 23045  004792                     l1124:
 23046  004792  A2AC               	btfss	4012,1,c	;volatile
 23047  004794  D7FE               	goto	l1124
 23048                           
 23049                           ;main.c: 2497: WriteUSART('.');
 23050  004796  0E2E               	movlw	46
 23051  004798  EC37  F02A         	call	_WriteUSART
 23052                           
 23053                           ;main.c: 2498: itoa(wrkbuf, 0, 10);
 23054  00479C  D813               	call	PL64	;call to abstracted procedure
 23055  00479E  6B72               	clrf	(?_itoa+2)& (0+255),b
 23056  0047A0  6B75               	clrf	(?_itoa+5)& (0+255),b
 23057  0047A2  0E0A               	movlw	10
 23058  0047A4  6F74               	movwf	(?_itoa+4)& (0+255),b
 23059  0047A6  EC48  F029         	call	_itoa	;wreg free
 23060                           
 23061                           ; BSR set to: 0
 23062                           ;main.c: 2499: putsUSART(wrkbuf);
 23063  0047AA  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23064  0047AC  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23065  0047AE  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23066  0047B0  6F61               	movwf	?_putsUSART& (0+255),b
 23067  0047B2  EC6A  F027         	call	_putsUSART	;wreg free
 23068                           
 23069                           ;main.c: 2500: putsUSART((char *) "\r\n");
 23070  0047B6  0E74               	movlw	high (STR_188+50)
 23071  0047B8  0100               	movlb	0	; () banked
 23072  0047BA  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23073  0047BC  0EAE               	movlw	low (STR_188+50)
 23074  0047BE  6F61               	movwf	?_putsUSART& (0+255),b
 23075  0047C0  EF6A  F027         	goto	_putsUSART	;wreg free
 23076  0047C4                     __end_of_printFirmwareVersion:
 23077                           	opt stack 0
 23078  0047C4                     PL64:
 23079                           	opt stack 23
 23080  0047C4  0100               	movlb	0	; () banked
 23081  0047C6  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23082  0047C8  6F71               	movwf	(?_itoa+1)& (0+255),b
 23083  0047CA  0E78               	movlw	low printFirmwareVersion@wrkbuf
 23084  0047CC  6F70               	movwf	?_itoa& (0+255),b
 23085  0047CE  6B73               	clrf	(?_itoa+3)& (0+255),b
 23086  0047D0  0012               	return	
 23087  0047D2                     __end_ofPL64:
 23088                           	opt stack 0
 23089                           tblptru	equ	0xFF8
 23090                           tblptrh	equ	0xFF7
 23091                           tblptrl	equ	0xFF6
 23092                           tablat	equ	0xFF5
 23093                           prodh	equ	0xFF4
 23094                           prodl	equ	0xFF3
 23095                           intcon	equ	0xFF2
 23096                           indf0	equ	0xFEF
 23097                           postinc0	equ	0xFEE
 23098                           fsr0h	equ	0xFEA
 23099                           fsr0l	equ	0xFE9
 23100                           wreg	equ	0xFE8
 23101                           indf1	equ	0xFE7
 23102                           postinc1	equ	0xFE6
 23103                           postdec1	equ	0xFE5
 23104                           fsr1h	equ	0xFE2
 23105                           fsr1l	equ	0xFE1
 23106                           indf2	equ	0xFDF
 23107                           postinc2	equ	0xFDE
 23108                           postdec2	equ	0xFDD
 23109                           plusw2	equ	0xFDB
 23110                           fsr2h	equ	0xFDA
 23111                           fsr2l	equ	0xFD9
 23112                           status	equ	0xFD8
 23113                           
 23114 ;; *************** function _itoa *****************
 23115 ;; Defined at:
 23116 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23117 ;; Parameters:    Size  Location     Type
 23118 ;;  buf             2   16[BANK0 ] PTR unsigned char 
 23119 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23120 ;;  val             2   18[BANK0 ] int 
 23121 ;;  base            2   20[BANK0 ] int 
 23122 ;; Auto vars:     Size  Location     Type
 23123 ;;  cp              2    0        PTR unsigned char 
 23124 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23125 ;; Return value:  Size  Location     Type
 23126 ;;                  2   16[BANK0 ] PTR unsigned char 
 23127 ;; Registers used:
 23128 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23129 ;; Tracked objects:
 23130 ;;		On entry : F/0
 23131 ;;		On exit  : F/0
 23132 ;;		Unchanged: 0/0
 23133 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23134 ;;      Params:         0       6       0       0       0       0       0
 23135 ;;      Locals:         0       2       0       0       0       0       0
 23136 ;;      Temps:          0       0       0       0       0       0       0
 23137 ;;      Totals:         0       8       0       0       0       0       0
 23138 ;;Total ram usage:        8 bytes
 23139 ;; Hardware stack levels used:    1
 23140 ;; Hardware stack levels required when called:    5
 23141 ;; This function calls:
 23142 ;;		_utoa
 23143 ;; This function is called by:
 23144 ;;		_receivePrintEventSLCAN
 23145 ;;		_findNodes
 23146 ;;		_printGUID
 23147 ;;		_printNodeFirmwareVersion
 23148 ;;		_printFirmwareVersion
 23149 ;; This function uses a non-reentrant model
 23150 ;;
 23151                           
 23152                           	psect	text59
 23153  005290                     __ptext59:
 23154                           	opt stack 0
 23155  005290                     _itoa:
 23156                           	opt stack 23
 23157                           
 23158                           ; BSR set to: 0
 23159                           
 23160                           ;incstack = 0
 23161                           ;incstack = 0
 23162  005290  AF73               	btfss	(itoa@val+1)& (0+255),7,b
 23163  005292  D00C               	goto	l12012
 23164                           
 23165                           ; BSR set to: 0
 23166  005294  C070  FFD9         	movff	itoa@buf,fsr2l
 23167  005298  C071  FFDA         	movff	itoa@buf+1,fsr2h
 23168  00529C  0E2D               	movlw	45
 23169  00529E  6EDF               	movwf	indf2,c
 23170                           
 23171                           ; BSR set to: 0
 23172  0052A0  4B70               	infsnz	itoa@buf& (0+255),f,b
 23173  0052A2  2B71               	incf	(itoa@buf+1)& (0+255),f,b
 23174                           
 23175                           ; BSR set to: 0
 23176  0052A4  6D72               	negf	itoa@val& (0+255),b
 23177  0052A6  1F73               	comf	(itoa@val+1)& (0+255),f,b
 23178  0052A8  B0D8               	btfsc	status,0,c
 23179  0052AA  2B73               	incf	(itoa@val+1)& (0+255),f,b
 23180  0052AC                     l12012:
 23181                           
 23182                           ; BSR set to: 0
 23183  0052AC  C070  F067         	movff	itoa@buf,?_utoa
 23184  0052B0  C071  F068         	movff	itoa@buf+1,?_utoa+1
 23185  0052B4  C072  F069         	movff	itoa@val,?_utoa+2
 23186  0052B8  C073  F06A         	movff	itoa@val+1,?_utoa+3
 23187  0052BC  C074  F06B         	movff	itoa@base,?_utoa+4
 23188  0052C0  C075  F06C         	movff	itoa@base+1,?_utoa+5
 23189  0052C4  EF21  F022         	goto	_utoa	;wreg free
 23190  0052C8                     __end_of_itoa:
 23191                           	opt stack 0
 23192                           tblptru	equ	0xFF8
 23193                           tblptrh	equ	0xFF7
 23194                           tblptrl	equ	0xFF6
 23195                           tablat	equ	0xFF5
 23196                           prodh	equ	0xFF4
 23197                           prodl	equ	0xFF3
 23198                           intcon	equ	0xFF2
 23199                           indf0	equ	0xFEF
 23200                           postinc0	equ	0xFEE
 23201                           fsr0h	equ	0xFEA
 23202                           fsr0l	equ	0xFE9
 23203                           wreg	equ	0xFE8
 23204                           indf1	equ	0xFE7
 23205                           postinc1	equ	0xFE6
 23206                           postdec1	equ	0xFE5
 23207                           fsr1h	equ	0xFE2
 23208                           fsr1l	equ	0xFE1
 23209                           indf2	equ	0xFDF
 23210                           postinc2	equ	0xFDE
 23211                           postdec2	equ	0xFDD
 23212                           plusw2	equ	0xFDB
 23213                           fsr2h	equ	0xFDA
 23214                           fsr2l	equ	0xFD9
 23215                           status	equ	0xFD8
 23216                           
 23217 ;; *************** function _utoa *****************
 23218 ;; Defined at:
 23219 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23220 ;; Parameters:    Size  Location     Type
 23221 ;;  buf             2    7[BANK0 ] PTR unsigned char 
 23222 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23223 ;;  val             2    9[BANK0 ] unsigned int 
 23224 ;;  base            2   11[BANK0 ] int 
 23225 ;; Auto vars:     Size  Location     Type
 23226 ;;  v               2   13[BANK0 ] unsigned int 
 23227 ;;  c               1   15[BANK0 ] unsigned char 
 23228 ;; Return value:  Size  Location     Type
 23229 ;;                  2    7[BANK0 ] PTR unsigned char 
 23230 ;; Registers used:
 23231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23232 ;; Tracked objects:
 23233 ;;		On entry : F/0
 23234 ;;		On exit  : F/0
 23235 ;;		Unchanged: 0/0
 23236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23237 ;;      Params:         0       6       0       0       0       0       0
 23238 ;;      Locals:         0       3       0       0       0       0       0
 23239 ;;      Temps:          0       0       0       0       0       0       0
 23240 ;;      Totals:         0       9       0       0       0       0       0
 23241 ;;Total ram usage:        9 bytes
 23242 ;; Hardware stack levels used:    1
 23243 ;; Hardware stack levels required when called:    4
 23244 ;; This function calls:
 23245 ;;		___lwdiv
 23246 ;;		___lwmod
 23247 ;; This function is called by:
 23248 ;;		_itoa
 23249 ;; This function uses a non-reentrant model
 23250 ;;
 23251                           
 23252                           	psect	text60
 23253  004442                     __ptext60:
 23254                           	opt stack 0
 23255  004442                     _utoa:
 23256                           	opt stack 23
 23257                           
 23258                           ; BSR set to: 0
 23259                           
 23260                           ; BSR set to: 0
 23261                           ;incstack = 0
 23262                           ;incstack = 0
 23263  004442  C069  F06D         	movff	utoa@val,utoa@v
 23264  004446  C06A  F06E         	movff	utoa@val+1,utoa@v+1
 23265  00444A                     l12174:
 23266                           
 23267                           ; BSR set to: 0
 23268  00444A  C06D  F060         	movff	utoa@v,?___lwdiv
 23269  00444E  C06E  F061         	movff	utoa@v+1,?___lwdiv+1
 23270  004452  C06B  F062         	movff	utoa@base,?___lwdiv+2
 23271  004456  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 23272  00445A  ECE2  F027         	call	___lwdiv	;wreg free
 23273  00445E  C060  F06D         	movff	?___lwdiv,utoa@v
 23274  004462  C061  F06E         	movff	?___lwdiv+1,utoa@v+1
 23275                           
 23276                           ; BSR set to: 0
 23277  004466  4B67               	infsnz	utoa@buf& (0+255),f,b
 23278  004468  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 23279                           
 23280                           ; BSR set to: 0
 23281  00446A  516E               	movf	(utoa@v+1)& (0+255),w,b
 23282  00446C  116D               	iorwf	utoa@v& (0+255),w,b
 23283  00446E  E1ED               	bnz	l12174
 23284                           
 23285                           ; BSR set to: 0
 23286  004470  C067  FFD9         	movff	utoa@buf,fsr2l
 23287  004474  C068  FFDA         	movff	utoa@buf+1,fsr2h
 23288  004478  0E00               	movlw	0
 23289  00447A  6ADF               	clrf	indf2,c
 23290                           
 23291                           ; BSR set to: 0
 23292  00447C  0767               	decf	utoa@buf& (0+255),f,b
 23293  00447E  A0D8               	btfss	status,0,c
 23294  004480  0768               	decf	(utoa@buf+1)& (0+255),f,b
 23295  004482                     l12184:
 23296                           
 23297                           ; BSR set to: 0
 23298  004482  C069  F060         	movff	utoa@val,?___lwmod
 23299  004486  C06A  F061         	movff	utoa@val+1,?___lwmod+1
 23300  00448A  C06B  F062         	movff	utoa@base,?___lwmod+2
 23301  00448E  C06C  F063         	movff	utoa@base+1,?___lwmod+3
 23302  004492  EC0D  F029         	call	___lwmod	;wreg free
 23303  004496  5160               	movf	?___lwmod& (0+255),w,b
 23304  004498  6F6F               	movwf	utoa@c& (0+255),b
 23305                           
 23306                           ; BSR set to: 0
 23307  00449A  C069  F060         	movff	utoa@val,?___lwdiv
 23308  00449E  C06A  F061         	movff	utoa@val+1,?___lwdiv+1
 23309  0044A2  C06B  F062         	movff	utoa@base,?___lwdiv+2
 23310  0044A6  C06C  F063         	movff	utoa@base+1,?___lwdiv+3
 23311  0044AA  ECE2  F027         	call	___lwdiv	;wreg free
 23312  0044AE  C060  F069         	movff	?___lwdiv,utoa@val
 23313  0044B2  C061  F06A         	movff	?___lwdiv+1,utoa@val+1
 23314                           
 23315                           ; BSR set to: 0
 23316  0044B6  0E09               	movlw	9
 23317  0044B8  656F               	cpfsgt	utoa@c& (0+255),b
 23318  0044BA  D002               	goto	l2198
 23319                           
 23320                           ; BSR set to: 0
 23321  0044BC  0E07               	movlw	7
 23322  0044BE  276F               	addwf	utoa@c& (0+255),f,b
 23323  0044C0                     l2198:
 23324                           
 23325                           ; BSR set to: 0
 23326  0044C0  0E30               	movlw	48
 23327  0044C2  276F               	addwf	utoa@c& (0+255),f,b
 23328                           
 23329                           ; BSR set to: 0
 23330  0044C4  C067  FFD9         	movff	utoa@buf,fsr2l
 23331  0044C8  C068  FFDA         	movff	utoa@buf+1,fsr2h
 23332  0044CC  C06F  FFDF         	movff	utoa@c,indf2
 23333                           
 23334                           ; BSR set to: 0
 23335  0044D0  0767               	decf	utoa@buf& (0+255),f,b
 23336  0044D2  A0D8               	btfss	status,0,c
 23337  0044D4  0768               	decf	(utoa@buf+1)& (0+255),f,b
 23338                           
 23339                           ; BSR set to: 0
 23340  0044D6  516A               	movf	(utoa@val+1)& (0+255),w,b
 23341  0044D8  1169               	iorwf	utoa@val& (0+255),w,b
 23342  0044DA  E1D3               	bnz	l12184
 23343                           
 23344                           ; BSR set to: 0
 23345                           ;	Return value of _utoa is never used
 23346  0044DC  4B67               	infsnz	utoa@buf& (0+255),f,b
 23347  0044DE  2B68               	incf	(utoa@buf+1)& (0+255),f,b
 23348                           
 23349                           ; BSR set to: 0
 23350  0044E0  0012               	return	
 23351  0044E2                     __end_of_utoa:
 23352                           	opt stack 0
 23353                           tblptru	equ	0xFF8
 23354                           tblptrh	equ	0xFF7
 23355                           tblptrl	equ	0xFF6
 23356                           tablat	equ	0xFF5
 23357                           prodh	equ	0xFF4
 23358                           prodl	equ	0xFF3
 23359                           intcon	equ	0xFF2
 23360                           indf0	equ	0xFEF
 23361                           postinc0	equ	0xFEE
 23362                           fsr0h	equ	0xFEA
 23363                           fsr0l	equ	0xFE9
 23364                           wreg	equ	0xFE8
 23365                           indf1	equ	0xFE7
 23366                           postinc1	equ	0xFE6
 23367                           postdec1	equ	0xFE5
 23368                           fsr1h	equ	0xFE2
 23369                           fsr1l	equ	0xFE1
 23370                           indf2	equ	0xFDF
 23371                           postinc2	equ	0xFDE
 23372                           postdec2	equ	0xFDD
 23373                           plusw2	equ	0xFDB
 23374                           fsr2h	equ	0xFDA
 23375                           fsr2l	equ	0xFD9
 23376                           status	equ	0xFD8
 23377                           
 23378 ;; *************** function ___lwmod *****************
 23379 ;; Defined at:
 23380 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 23381 ;; Parameters:    Size  Location     Type
 23382 ;;  dividend        2    0[BANK0 ] unsigned int 
 23383 ;;  divisor         2    2[BANK0 ] unsigned int 
 23384 ;; Auto vars:     Size  Location     Type
 23385 ;;  counter         1    4[BANK0 ] unsigned char 
 23386 ;; Return value:  Size  Location     Type
 23387 ;;                  2    0[BANK0 ] unsigned int 
 23388 ;; Registers used:
 23389 ;;		wreg, status,2, status,0
 23390 ;; Tracked objects:
 23391 ;;		On entry : F/0
 23392 ;;		On exit  : F/0
 23393 ;;		Unchanged: 0/0
 23394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23395 ;;      Params:         0       4       0       0       0       0       0
 23396 ;;      Locals:         0       1       0       0       0       0       0
 23397 ;;      Temps:          0       0       0       0       0       0       0
 23398 ;;      Totals:         0       5       0       0       0       0       0
 23399 ;;Total ram usage:        5 bytes
 23400 ;; Hardware stack levels used:    1
 23401 ;; Hardware stack levels required when called:    3
 23402 ;; This function calls:
 23403 ;;		Nothing
 23404 ;; This function is called by:
 23405 ;;		_utoa
 23406 ;; This function uses a non-reentrant model
 23407 ;;
 23408                           
 23409                           	psect	text61
 23410  00521A                     __ptext61:
 23411                           	opt stack 0
 23412  00521A                     ___lwmod:
 23413                           	opt stack 23
 23414                           
 23415                           ; BSR set to: 0
 23416                           
 23417                           ; BSR set to: 0
 23418                           ;incstack = 0
 23419                           ;incstack = 0
 23420  00521A  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 23421  00521C  1162               	iorwf	___lwmod@divisor& (0+255),w,b
 23422  00521E  E017               	bz	l2322
 23423                           
 23424                           ; BSR set to: 0
 23425  005220  0E01               	movlw	1
 23426  005222  6F64               	movwf	___lwmod@counter& (0+255),b
 23427  005224  D004               	goto	l12268
 23428  005226                     l12266:
 23429                           
 23430                           ; BSR set to: 0
 23431  005226  90D8               	bcf	status,0,c
 23432  005228  3762               	rlcf	___lwmod@divisor& (0+255),f,b
 23433  00522A  3763               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 23434  00522C  2B64               	incf	___lwmod@counter& (0+255),f,b
 23435  00522E                     l12268:
 23436                           
 23437                           ; BSR set to: 0
 23438  00522E  AF63               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 23439  005230  D7FA               	goto	l12266
 23440  005232                     l12270:
 23441                           
 23442                           ; BSR set to: 0
 23443  005232  5162               	movf	___lwmod@divisor& (0+255),w,b
 23444  005234  5D60               	subwf	___lwmod@dividend& (0+255),w,b
 23445  005236  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 23446  005238  5961               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 23447  00523A  E304               	bnc	l12274
 23448                           
 23449                           ; BSR set to: 0
 23450  00523C  5162               	movf	___lwmod@divisor& (0+255),w,b
 23451  00523E  5F60               	subwf	___lwmod@dividend& (0+255),f,b
 23452  005240  5163               	movf	(___lwmod@divisor+1)& (0+255),w,b
 23453  005242  5B61               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 23454  005244                     l12274:
 23455                           
 23456                           ; BSR set to: 0
 23457  005244  90D8               	bcf	status,0,c
 23458  005246  3363               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 23459  005248  3362               	rrcf	___lwmod@divisor& (0+255),f,b
 23460                           
 23461                           ; BSR set to: 0
 23462  00524A  2F64               	decfsz	___lwmod@counter& (0+255),f,b
 23463  00524C  D7F2               	goto	l12270
 23464  00524E                     l2322:
 23465                           
 23466                           ; BSR set to: 0
 23467  00524E  C060  F060         	movff	___lwmod@dividend,?___lwmod
 23468  005252  C061  F061         	movff	___lwmod@dividend+1,?___lwmod+1
 23469                           
 23470                           ; BSR set to: 0
 23471  005256  0012               	return	
 23472  005258                     __end_of___lwmod:
 23473                           	opt stack 0
 23474                           tblptru	equ	0xFF8
 23475                           tblptrh	equ	0xFF7
 23476                           tblptrl	equ	0xFF6
 23477                           tablat	equ	0xFF5
 23478                           prodh	equ	0xFF4
 23479                           prodl	equ	0xFF3
 23480                           intcon	equ	0xFF2
 23481                           indf0	equ	0xFEF
 23482                           postinc0	equ	0xFEE
 23483                           fsr0h	equ	0xFEA
 23484                           fsr0l	equ	0xFE9
 23485                           wreg	equ	0xFE8
 23486                           indf1	equ	0xFE7
 23487                           postinc1	equ	0xFE6
 23488                           postdec1	equ	0xFE5
 23489                           fsr1h	equ	0xFE2
 23490                           fsr1l	equ	0xFE1
 23491                           indf2	equ	0xFDF
 23492                           postinc2	equ	0xFDE
 23493                           postdec2	equ	0xFDD
 23494                           plusw2	equ	0xFDB
 23495                           fsr2h	equ	0xFDA
 23496                           fsr2l	equ	0xFD9
 23497                           status	equ	0xFD8
 23498                           
 23499 ;; *************** function ___lwdiv *****************
 23500 ;; Defined at:
 23501 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 23502 ;; Parameters:    Size  Location     Type
 23503 ;;  dividend        2    0[BANK0 ] unsigned int 
 23504 ;;  divisor         2    2[BANK0 ] unsigned int 
 23505 ;; Auto vars:     Size  Location     Type
 23506 ;;  quotient        2    5[BANK0 ] unsigned int 
 23507 ;;  counter         1    4[BANK0 ] unsigned char 
 23508 ;; Return value:  Size  Location     Type
 23509 ;;                  2    0[BANK0 ] unsigned int 
 23510 ;; Registers used:
 23511 ;;		wreg, status,2, status,0
 23512 ;; Tracked objects:
 23513 ;;		On entry : F/0
 23514 ;;		On exit  : F/0
 23515 ;;		Unchanged: 0/0
 23516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23517 ;;      Params:         0       4       0       0       0       0       0
 23518 ;;      Locals:         0       3       0       0       0       0       0
 23519 ;;      Temps:          0       0       0       0       0       0       0
 23520 ;;      Totals:         0       7       0       0       0       0       0
 23521 ;;Total ram usage:        7 bytes
 23522 ;; Hardware stack levels used:    1
 23523 ;; Hardware stack levels required when called:    3
 23524 ;; This function calls:
 23525 ;;		Nothing
 23526 ;; This function is called by:
 23527 ;;		_utoa
 23528 ;; This function uses a non-reentrant model
 23529 ;;
 23530                           
 23531                           	psect	text62
 23532  004FC4                     __ptext62:
 23533                           	opt stack 0
 23534  004FC4                     ___lwdiv:
 23535                           	opt stack 23
 23536                           
 23537                           ; BSR set to: 0
 23538                           
 23539                           ; BSR set to: 0
 23540                           ;incstack = 0
 23541                           ;incstack = 0
 23542  004FC4  6B65               	clrf	___lwdiv@quotient& (0+255),b
 23543  004FC6  6B66               	clrf	(___lwdiv@quotient+1)& (0+255),b
 23544                           
 23545                           ; BSR set to: 0
 23546  004FC8  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 23547  004FCA  1162               	iorwf	___lwdiv@divisor& (0+255),w,b
 23548  004FCC  E01B               	bz	l2312
 23549                           
 23550                           ; BSR set to: 0
 23551  004FCE  0E01               	movlw	1
 23552  004FD0  6F64               	movwf	___lwdiv@counter& (0+255),b
 23553  004FD2  D004               	goto	l12248
 23554  004FD4                     l12246:
 23555                           
 23556                           ; BSR set to: 0
 23557  004FD4  90D8               	bcf	status,0,c
 23558  004FD6  3762               	rlcf	___lwdiv@divisor& (0+255),f,b
 23559  004FD8  3763               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 23560  004FDA  2B64               	incf	___lwdiv@counter& (0+255),f,b
 23561  004FDC                     l12248:
 23562                           
 23563                           ; BSR set to: 0
 23564  004FDC  AF63               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 23565  004FDE  D7FA               	goto	l12246
 23566  004FE0                     l12250:
 23567                           
 23568                           ; BSR set to: 0
 23569  004FE0  90D8               	bcf	status,0,c
 23570  004FE2  3765               	rlcf	___lwdiv@quotient& (0+255),f,b
 23571  004FE4  3766               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 23572                           
 23573                           ; BSR set to: 0
 23574  004FE6  5162               	movf	___lwdiv@divisor& (0+255),w,b
 23575  004FE8  5D60               	subwf	___lwdiv@dividend& (0+255),w,b
 23576  004FEA  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 23577  004FEC  5961               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 23578  004FEE  E305               	bnc	l12258
 23579                           
 23580                           ; BSR set to: 0
 23581  004FF0  5162               	movf	___lwdiv@divisor& (0+255),w,b
 23582  004FF2  5F60               	subwf	___lwdiv@dividend& (0+255),f,b
 23583  004FF4  5163               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 23584  004FF6  5B61               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 23585                           
 23586                           ; BSR set to: 0
 23587  004FF8  8165               	bsf	___lwdiv@quotient& (0+255),0,b
 23588  004FFA                     l12258:
 23589                           
 23590                           ; BSR set to: 0
 23591  004FFA  90D8               	bcf	status,0,c
 23592  004FFC  3363               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 23593  004FFE  3362               	rrcf	___lwdiv@divisor& (0+255),f,b
 23594                           
 23595                           ; BSR set to: 0
 23596  005000  2F64               	decfsz	___lwdiv@counter& (0+255),f,b
 23597  005002  D7EE               	goto	l12250
 23598  005004                     l2312:
 23599                           
 23600                           ; BSR set to: 0
 23601  005004  C065  F060         	movff	___lwdiv@quotient,?___lwdiv
 23602  005008  C066  F061         	movff	___lwdiv@quotient+1,?___lwdiv+1
 23603                           
 23604                           ; BSR set to: 0
 23605  00500C  0012               	return	
 23606  00500E                     __end_of___lwdiv:
 23607                           	opt stack 0
 23608                           tblptru	equ	0xFF8
 23609                           tblptrh	equ	0xFF7
 23610                           tblptrl	equ	0xFF6
 23611                           tablat	equ	0xFF5
 23612                           prodh	equ	0xFF4
 23613                           prodl	equ	0xFF3
 23614                           intcon	equ	0xFF2
 23615                           indf0	equ	0xFEF
 23616                           postinc0	equ	0xFEE
 23617                           fsr0h	equ	0xFEA
 23618                           fsr0l	equ	0xFE9
 23619                           wreg	equ	0xFE8
 23620                           indf1	equ	0xFE7
 23621                           postinc1	equ	0xFE6
 23622                           postdec1	equ	0xFE5
 23623                           fsr1h	equ	0xFE2
 23624                           fsr1l	equ	0xFE1
 23625                           indf2	equ	0xFDF
 23626                           postinc2	equ	0xFDE
 23627                           postdec2	equ	0xFDD
 23628                           plusw2	equ	0xFDB
 23629                           fsr2h	equ	0xFDA
 23630                           fsr2l	equ	0xFD9
 23631                           status	equ	0xFD8
 23632                           
 23633 ;; *************** function _printMode *****************
 23634 ;; Defined at:
 23635 ;;		line 2508 in file "main.c"
 23636 ;; Parameters:    Size  Location     Type
 23637 ;;		None
 23638 ;; Auto vars:     Size  Location     Type
 23639 ;;		None
 23640 ;; Return value:  Size  Location     Type
 23641 ;;		None               void
 23642 ;; Registers used:
 23643 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23644 ;; Tracked objects:
 23645 ;;		On entry : 0/0
 23646 ;;		On exit  : 0/0
 23647 ;;		Unchanged: 0/0
 23648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23649 ;;      Params:         0       0       0       0       0       0       0
 23650 ;;      Locals:         0       0       0       0       0       0       0
 23651 ;;      Temps:          0       0       0       0       0       0       0
 23652 ;;      Totals:         0       0       0       0       0       0       0
 23653 ;;Total ram usage:        0 bytes
 23654 ;; Hardware stack levels used:    1
 23655 ;; Hardware stack levels required when called:    5
 23656 ;; This function calls:
 23657 ;;		_putsUSART
 23658 ;; This function is called by:
 23659 ;;		_main
 23660 ;; This function uses a non-reentrant model
 23661 ;;
 23662                           
 23663                           	psect	text63
 23664  004ACA                     __ptext63:
 23665                           	opt stack 0
 23666  004ACA                     _printMode:
 23667                           	opt stack 25
 23668                           
 23669                           ;main.c: 2509: putsUSART((char *) "Mode: ");
 23670                           
 23671                           ; BSR set to: 0
 23672                           ;incstack = 0
 23673                           ;incstack = 0
 23674  004ACA  0E7F               	movlw	high STR_247
 23675  004ACC  0100               	movlb	0	; () banked
 23676  004ACE  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23677  004AD0  0E26               	movlw	low STR_247
 23678  004AD2  6F61               	movwf	?_putsUSART& (0+255),b
 23679  004AD4  EC6A  F027         	call	_putsUSART	;wreg free
 23680                           
 23681                           ;main.c: 2510: if (0 == mode) {
 23682  004AD8  0100               	movlb	0	; () banked
 23683  004ADA  67F8               	tstfsz	_mode& (0+255),b
 23684  004ADC  D007               	goto	l9524
 23685                           
 23686                           ; BSR set to: 0
 23687                           ;main.c: 2511: putsUSART((char *) "Verbose");
 23688  004ADE  0E7F               	movlw	high STR_248
 23689  004AE0  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23690  004AE2  0E1E               	movlw	low STR_248
 23691  004AE4  6F61               	movwf	?_putsUSART& (0+255),b
 23692  004AE6  EC6A  F027         	call	_putsUSART	;wreg free
 23693                           
 23694                           ;main.c: 2512: } else if (1 == mode) {
 23695  004AEA  D023               	goto	l1131
 23696  004AEC                     l9524:
 23697                           
 23698                           ; BSR set to: 0
 23699  004AEC  05F8               	decf	_mode& (0+255),w,b
 23700  004AEE  E107               	bnz	l9528
 23701                           
 23702                           ; BSR set to: 0
 23703                           ;main.c: 2513: putsUSART((char *) "VSCP Driver");
 23704  004AF0  0E7E               	movlw	high STR_249
 23705  004AF2  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23706  004AF4  0E7B               	movlw	low STR_249
 23707  004AF6  6F61               	movwf	?_putsUSART& (0+255),b
 23708  004AF8  EC6A  F027         	call	_putsUSART	;wreg free
 23709                           
 23710                           ;main.c: 2514: } else if (2 == mode) {
 23711  004AFC  D01A               	goto	l1131
 23712  004AFE                     l9528:
 23713                           
 23714                           ; BSR set to: 0
 23715  004AFE  51F8               	movf	_mode& (0+255),w,b
 23716  004B00  0A02               	xorlw	2
 23717  004B02  E107               	bnz	l9532
 23718                           
 23719                           ; BSR set to: 0
 23720                           ;main.c: 2515: putsUSART((char *) "SL Driver");
 23721  004B04  0E7E               	movlw	high STR_250
 23722  004B06  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23723  004B08  0EB1               	movlw	low STR_250
 23724  004B0A  6F61               	movwf	?_putsUSART& (0+255),b
 23725  004B0C  EC6A  F027         	call	_putsUSART	;wreg free
 23726                           
 23727                           ;main.c: 2516: } else if (3 == mode) {
 23728  004B10  D010               	goto	l1131
 23729  004B12                     l9532:
 23730                           
 23731                           ; BSR set to: 0
 23732  004B12  51F8               	movf	_mode& (0+255),w,b
 23733  004B14  0A03               	xorlw	3
 23734  004B16  E107               	bnz	l9536
 23735                           
 23736                           ; BSR set to: 0
 23737                           ;main.c: 2517: putsUSART((char *) "VSCP Node");
 23738  004B18  0E7E               	movlw	high STR_251
 23739  004B1A  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23740  004B1C  0EA7               	movlw	low STR_251
 23741  004B1E  6F61               	movwf	?_putsUSART& (0+255),b
 23742  004B20  EC6A  F027         	call	_putsUSART	;wreg free
 23743                           
 23744                           ;main.c: 2518: } else {
 23745  004B24  D006               	goto	l1131
 23746  004B26                     l9536:
 23747                           
 23748                           ; BSR set to: 0
 23749                           ;main.c: 2519: putsUSART((char *) "Unknown (Verbose used)");
 23750  004B26  0E7C               	movlw	high STR_252
 23751  004B28  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23752  004B2A  0EEF               	movlw	low STR_252
 23753  004B2C  6F61               	movwf	?_putsUSART& (0+255),b
 23754  004B2E  EC6A  F027         	call	_putsUSART	;wreg free
 23755  004B32                     l1131:
 23756                           
 23757                           ;main.c: 2520: }
 23758                           ;main.c: 2521: putsUSART((char *) "\r\n");
 23759  004B32  0E74               	movlw	high (STR_188+50)
 23760  004B34  0100               	movlb	0	; () banked
 23761  004B36  6F62               	movwf	(?_putsUSART+1)& (0+255),b
 23762  004B38  0EAE               	movlw	low (STR_188+50)
 23763  004B3A  6F61               	movwf	?_putsUSART& (0+255),b
 23764  004B3C  EF6A  F027         	goto	_putsUSART	;wreg free
 23765  004B40                     __end_of_printMode:
 23766                           	opt stack 0
 23767                           tblptru	equ	0xFF8
 23768                           tblptrh	equ	0xFF7
 23769                           tblptrl	equ	0xFF6
 23770                           tablat	equ	0xFF5
 23771                           prodh	equ	0xFF4
 23772                           prodl	equ	0xFF3
 23773                           intcon	equ	0xFF2
 23774                           indf0	equ	0xFEF
 23775                           postinc0	equ	0xFEE
 23776                           fsr0h	equ	0xFEA
 23777                           fsr0l	equ	0xFE9
 23778                           wreg	equ	0xFE8
 23779                           indf1	equ	0xFE7
 23780                           postinc1	equ	0xFE6
 23781                           postdec1	equ	0xFE5
 23782                           fsr1h	equ	0xFE2
 23783                           fsr1l	equ	0xFE1
 23784                           indf2	equ	0xFDF
 23785                           postinc2	equ	0xFDE
 23786                           postdec2	equ	0xFDD
 23787                           plusw2	equ	0xFDB
 23788                           fsr2h	equ	0xFDA
 23789                           fsr2l	equ	0xFD9
 23790                           status	equ	0xFD8
 23791                           
 23792 ;; *************** function _putsUSART *****************
 23793 ;; Defined at:
 23794 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 23795 ;; Parameters:    Size  Location     Type
 23796 ;;  data            2    1[BANK0 ] PTR unsigned char 
 23797 ;;		 -> STR_253(3), STR_252(23), STR_251(10), STR_250(10), 
 23798 ;;		 -> STR_249(12), STR_248(8), STR_247(7), STR_246(3), 
 23799 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_245(10), STR_244(3), STR_241(20), 
 23800 ;;		 -> STR_240(3), STR_239(14), STR_238(3), STR_234(8), 
 23801 ;;		 -> STR_233(15), STR_232(67), STR_231(3), STR_230(27), 
 23802 ;;		 -> STR_229(67), STR_228(39), STR_227(62), STR_226(55), 
 23803 ;;		 -> STR_225(49), STR_224(67), STR_223(47), STR_222(47), 
 23804 ;;		 -> STR_221(34), STR_220(71), STR_219(20), STR_218(78), 
 23805 ;;		 -> STR_217(24), STR_216(77), STR_215(67), STR_214(69), 
 23806 ;;		 -> STR_213(47), STR_212(40), STR_211(39), STR_210(33), 
 23807 ;;		 -> STR_209(23), STR_208(56), STR_207(24), STR_206(44), 
 23808 ;;		 -> STR_205(50), STR_204(31), STR_203(50), STR_202(51), 
 23809 ;;		 -> STR_201(46), STR_200(44), STR_199(27), STR_198(39), 
 23810 ;;		 -> STR_197(39), STR_196(52), STR_195(54), STR_194(55), 
 23811 ;;		 -> STR_193(3), STR_190(24), STR_189(57), STR_188(53), 
 23812 ;;		 -> STR_187(58), STR_186(3), STR_183(25), STR_182(3), 
 23813 ;;		 -> STR_179(24), STR_178(3), STR_175(24), STR_174(3), 
 23814 ;;		 -> STR_171(24), STR_170(3), STR_167(23), STR_166(3), 
 23815 ;;		 -> STR_163(21), STR_162(3), STR_159(22), STR_158(3), 
 23816 ;;		 -> STR_155(17), STR_154(3), STR_151(18), STR_150(4), 
 23817 ;;		 -> STR_149(11), STR_148(2), STR_145(7), STR_142(7), 
 23818 ;;		 -> STR_139(9), STR_136(7), STR_133(8), STR_130(7), 
 23819 ;;		 -> STR_129(2), STR_128(2), STR_127(6), STR_126(8), 
 23820 ;;		 -> STR_125(8), STR_124(20), STR_123(27), STR_122(33), 
 23821 ;;		 -> STR_119(26), STR_117(32), STR_115(28), STR_110(40), 
 23822 ;;		 -> STR_108(44), STR_105(39), STR_103(36), STR_101(37), 
 23823 ;;		 -> STR_99(40), STR_97(37), STR_96(50), STR_93(41), 
 23824 ;;		 -> STR_91(38), STR_89(39), STR_87(42), STR_85(39), 
 23825 ;;		 -> STR_84(66), STR_81(3), STR_78(20), STR_76(33), 
 23826 ;;		 -> STR_75(35), STR_74(24), STR_72(33), STR_70(24), 
 23827 ;;		 -> STR_67(54), STR_66(6), STR_65(3), STR_60(34), 
 23828 ;;		 -> STR_59(3), STR_56(4), wrkbuf(80), STR_51(15), 
 23829 ;;		 -> STR_49(33), STR_47(24), STR_43(6), STR_39(18), 
 23830 ;;		 -> STR_38(6), STR_36(33), STR_35(6), STR_27(24), 
 23831 ;;		 -> STR_26(18), STR_25(20), STR_24(25), STR_23(22), 
 23832 ;;		 -> STR_22(19), STR_21(20), STR_20(20), STR_18(6), 
 23833 ;;		 -> STR_16(6), STR_14(6), STR_12(6), STR_10(6), 
 23834 ;;		 -> STR_8(6), STR_6(31), STR_4(29), STR_3(55), 
 23835 ;;		 -> STR_2(53), STR_1(37), 
 23836 ;; Auto vars:     Size  Location     Type
 23837 ;;		None
 23838 ;; Return value:  Size  Location     Type
 23839 ;;		None               void
 23840 ;; Registers used:
 23841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23842 ;; Tracked objects:
 23843 ;;		On entry : F/0
 23844 ;;		On exit  : 0/0
 23845 ;;		Unchanged: 0/0
 23846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23847 ;;      Params:         0       2       0       0       0       0       0
 23848 ;;      Locals:         0       0       0       0       0       0       0
 23849 ;;      Temps:          0       2       0       0       0       0       0
 23850 ;;      Totals:         0       4       0       0       0       0       0
 23851 ;;Total ram usage:        4 bytes
 23852 ;; Hardware stack levels used:    1
 23853 ;; Hardware stack levels required when called:    4
 23854 ;; This function calls:
 23855 ;;		_WriteUSART
 23856 ;; This function is called by:
 23857 ;;		_main
 23858 ;;		_doModeVerbose
 23859 ;;		_doModeSLCAN
 23860 ;;		_receivePrintEventVerbose
 23861 ;;		_receivePrintEventSLCAN
 23862 ;;		_printStatistics
 23863 ;;		_printErrors
 23864 ;;		_printHelp
 23865 ;;		_findNodes
 23866 ;;		_printGUID
 23867 ;;		_printMDF
 23868 ;;		_printNodeFirmwareVersion
 23869 ;;		_printFirmwareVersion
 23870 ;;		_printMode
 23871 ;; This function uses a non-reentrant model
 23872 ;;
 23873                           
 23874                           	psect	text64
 23875  004ED4                     __ptext64:
 23876                           	opt stack 0
 23877  004ED4                     _putsUSART:
 23878                           	opt stack 24
 23879  004ED4                     l1730:
 23880  004ED4  A2AC               	btfss	4012,1,c	;volatile
 23881  004ED6  D7FE               	goto	l1730
 23882  004ED8  0100               	movlb	0	; () banked
 23883  004EDA  5161               	movf	putsUSART@data& (0+255),w,b
 23884  004EDC  6EF6               	movwf	tblptrl,c
 23885  004EDE  6EE9               	movwf	fsr0l,c
 23886  004EE0  0E05               	movlw	(high __ramtop+-1)
 23887  004EE2  6EEA               	movwf	fsr0h,c
 23888  004EE4  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 23889  004EE6  64EA               	cpfsgt	fsr0h,c
 23890  004EE8  D003               	bra	u11467
 23891  004EEA  6EEA               	movwf	fsr0h,c
 23892  004EEC  50EF               	movf	indf0,w,c
 23893  004EEE  D003               	bra	u11460
 23894  004EF0                     u11467:
 23895  004EF0  6EF7               	movwf	tblptrh,c
 23896  004EF2  0008               	tblrd		*
 23897  004EF4  50F5               	movf	tablat,w,c
 23898  004EF6                     u11460:
 23899  004EF6  EC37  F02A         	call	_WriteUSART
 23900  004EFA  0100               	movlb	0	; () banked
 23901  004EFC  5161               	movf	putsUSART@data& (0+255),w,b
 23902  004EFE  6F63               	movwf	??_putsUSART& (0+255),b
 23903  004F00  5162               	movf	(putsUSART@data+1)& (0+255),w,b
 23904  004F02  6F64               	movwf	(??_putsUSART+1)& (0+255),b
 23905  004F04  4B61               	infsnz	putsUSART@data& (0+255),f,b
 23906  004F06  2B62               	incf	(putsUSART@data+1)& (0+255),f,b
 23907  004F08  5163               	movf	??_putsUSART& (0+255),w,b
 23908  004F0A  6EF6               	movwf	tblptrl,c
 23909  004F0C  6EE9               	movwf	fsr0l,c
 23910  004F0E  0E05               	movlw	(high __ramtop+-1)
 23911  004F10  6EEA               	movwf	fsr0h,c
 23912  004F12  5164               	movf	(??_putsUSART+1)& (0+255),w,b
 23913  004F14  64EA               	cpfsgt	fsr0h,c
 23914  004F16  D003               	bra	u11477
 23915  004F18  6EEA               	movwf	fsr0h,c
 23916  004F1A  50EF               	movf	indf0,w,c
 23917  004F1C  D003               	bra	u11470
 23918  004F1E                     u11477:
 23919  004F1E  6EF7               	movwf	tblptrh,c
 23920  004F20  0008               	tblrd		*
 23921  004F22  50F5               	movf	tablat,w,c
 23922  004F24                     u11470:
 23923  004F24  0900               	iorlw	0
 23924  004F26  B4D8               	btfsc	status,2,c
 23925  004F28  0012               	return	
 23926  004F2A  D7D4               	goto	l1730
 23927  004F2C                     __end_of_putsUSART:
 23928                           	opt stack 0
 23929                           tblptru	equ	0xFF8
 23930                           tblptrh	equ	0xFF7
 23931                           tblptrl	equ	0xFF6
 23932                           tablat	equ	0xFF5
 23933                           prodh	equ	0xFF4
 23934                           prodl	equ	0xFF3
 23935                           intcon	equ	0xFF2
 23936                           indf0	equ	0xFEF
 23937                           postinc0	equ	0xFEE
 23938                           fsr0h	equ	0xFEA
 23939                           fsr0l	equ	0xFE9
 23940                           wreg	equ	0xFE8
 23941                           indf1	equ	0xFE7
 23942                           postinc1	equ	0xFE6
 23943                           postdec1	equ	0xFE5
 23944                           fsr1h	equ	0xFE2
 23945                           fsr1l	equ	0xFE1
 23946                           indf2	equ	0xFDF
 23947                           postinc2	equ	0xFDE
 23948                           postdec2	equ	0xFDD
 23949                           plusw2	equ	0xFDB
 23950                           fsr2h	equ	0xFDA
 23951                           fsr2l	equ	0xFD9
 23952                           status	equ	0xFD8
 23953                           
 23954 ;; *************** function _WriteUSART *****************
 23955 ;; Defined at:
 23956 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 23957 ;; Parameters:    Size  Location     Type
 23958 ;;  data            1    wreg     unsigned char 
 23959 ;; Auto vars:     Size  Location     Type
 23960 ;;  data            1    0[BANK0 ] unsigned char 
 23961 ;; Return value:  Size  Location     Type
 23962 ;;		None               void
 23963 ;; Registers used:
 23964 ;;		wreg
 23965 ;; Tracked objects:
 23966 ;;		On entry : 0/0
 23967 ;;		On exit  : 0/0
 23968 ;;		Unchanged: 0/0
 23969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23970 ;;      Params:         0       0       0       0       0       0       0
 23971 ;;      Locals:         0       1       0       0       0       0       0
 23972 ;;      Temps:          0       0       0       0       0       0       0
 23973 ;;      Totals:         0       1       0       0       0       0       0
 23974 ;;Total ram usage:        1 bytes
 23975 ;; Hardware stack levels used:    1
 23976 ;; Hardware stack levels required when called:    3
 23977 ;; This function calls:
 23978 ;;		Nothing
 23979 ;; This function is called by:
 23980 ;;		_doModeVerbose
 23981 ;;		_sendEscapedUartData
 23982 ;;		_sendVSCPDriverErrorFrame
 23983 ;;		_sendVSCPDriverAck
 23984 ;;		_sendVSCPDriverNack
 23985 ;;		_sendVSCPDriverCommandReply
 23986 ;;		_receivePrintEventCANAL
 23987 ;;		_receivePrintEventSLCAN
 23988 ;;		_printBinary
 23989 ;;		_printFirmwareVersion
 23990 ;;		_putsUSART
 23991 ;; This function uses a non-reentrant model
 23992 ;;
 23993                           
 23994                           	psect	text65
 23995  00546E                     __ptext65:
 23996                           	opt stack 0
 23997  00546E                     _WriteUSART:
 23998                           	opt stack 25
 23999                           
 24000                           ;incstack = 0
 24001                           ;incstack = 0
 24002                           ;WriteUSART@data stored from wreg
 24003  00546E  CFE8 F060          	movff	wreg,WriteUSART@data
 24004  005472  ACAC               	btfss	4012,6,c	;volatile
 24005  005474  D003               	goto	l11414
 24006  005476  90AC               	bcf	4012,0,c	;volatile
 24007  005478  B233               	btfsc	_USART_Status,1,c
 24008  00547A  80AC               	bsf	4012,0,c	;volatile
 24009  00547C                     l11414:
 24010  00547C  C060  FFAD         	movff	WriteUSART@data,4013	;volatile
 24011  005480  0012               	return	
 24012  005482                     __end_of_WriteUSART:
 24013                           	opt stack 0
 24014                           tblptru	equ	0xFF8
 24015                           tblptrh	equ	0xFF7
 24016                           tblptrl	equ	0xFF6
 24017                           tablat	equ	0xFF5
 24018                           prodh	equ	0xFF4
 24019                           prodl	equ	0xFF3
 24020                           intcon	equ	0xFF2
 24021                           indf0	equ	0xFEF
 24022                           postinc0	equ	0xFEE
 24023                           fsr0h	equ	0xFEA
 24024                           fsr0l	equ	0xFE9
 24025                           wreg	equ	0xFE8
 24026                           indf1	equ	0xFE7
 24027                           postinc1	equ	0xFE6
 24028                           postdec1	equ	0xFE5
 24029                           fsr1h	equ	0xFE2
 24030                           fsr1l	equ	0xFE1
 24031                           indf2	equ	0xFDF
 24032                           postinc2	equ	0xFDE
 24033                           postdec2	equ	0xFDD
 24034                           plusw2	equ	0xFDB
 24035                           fsr2h	equ	0xFDA
 24036                           fsr2l	equ	0xFD9
 24037                           status	equ	0xFD8
 24038                           
 24039 ;; *************** function _init *****************
 24040 ;; Defined at:
 24041 ;;		line 343 in file "main.c"
 24042 ;; Parameters:    Size  Location     Type
 24043 ;;		None
 24044 ;; Auto vars:     Size  Location     Type
 24045 ;;		None
 24046 ;; Return value:  Size  Location     Type
 24047 ;;		None               void
 24048 ;; Registers used:
 24049 ;;		wreg, status,2, status,0, cstack
 24050 ;; Tracked objects:
 24051 ;;		On entry : E/0
 24052 ;;		On exit  : F/0
 24053 ;;		Unchanged: 0/0
 24054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24055 ;;      Params:         0       0       0       0       0       0       0
 24056 ;;      Locals:         0       0       0       0       0       0       0
 24057 ;;      Temps:          0       0       0       0       0       0       0
 24058 ;;      Totals:         0       0       0       0       0       0       0
 24059 ;;Total ram usage:        0 bytes
 24060 ;; Hardware stack levels used:    1
 24061 ;; Hardware stack levels required when called:    5
 24062 ;; This function calls:
 24063 ;;		_WriteTimer0
 24064 ;;		_init_app_ram
 24065 ;;		_OpenUSART
 24066 ;;		_OpenTimer0
 24067 ;;		_ECANInitialize
 24068 ;; This function is called by:
 24069 ;;		_main
 24070 ;; This function uses a non-reentrant model
 24071 ;;
 24072                           
 24073                           	psect	text66
 24074  00500E                     __ptext66:
 24075                           	opt stack 0
 24076  00500E                     _init:
 24077                           	opt stack 25
 24078                           
 24079                           ;main.c: 345: init_app_ram();
 24080                           
 24081                           ;incstack = 0
 24082                           ;incstack = 0
 24083  00500E  EC96  F027         	call	_init_app_ram	;wreg free
 24084                           
 24085                           ; BSR set to: 1
 24086                           ;main.c: 348: OSCCONbits.IRCF0 = 1;
 24087  005012  88D3               	bsf	4051,4,c	;volatile
 24088                           
 24089                           ; BSR set to: 1
 24090                           ;main.c: 349: OSCCONbits.IRCF1 = 1;
 24091  005014  8AD3               	bsf	4051,5,c	;volatile
 24092                           
 24093                           ; BSR set to: 1
 24094                           ;main.c: 350: OSCCONbits.IRCF2 = 1;
 24095  005016  8CD3               	bsf	4051,6,c	;volatile
 24096                           
 24097                           ; BSR set to: 1
 24098                           ;main.c: 351: OSCTUNEbits.PLLEN = 1;
 24099  005018  8C9B               	bsf	3995,6,c	;volatile
 24100                           
 24101                           ; BSR set to: 1
 24102                           ;main.c: 353: TRISBbits.RB2 = 0;
 24103  00501A  9493               	bcf	3987,2,c	;volatile
 24104                           
 24105                           ; BSR set to: 1
 24106                           ;main.c: 354: TRISBbits.RB3 = 1;
 24107  00501C  8693               	bsf	3987,3,c	;volatile
 24108                           
 24109                           ; BSR set to: 1
 24110                           ;main.c: 356: TRISCbits.RC1 = 0;
 24111  00501E  9294               	bcf	3988,1,c	;volatile
 24112                           
 24113                           ; BSR set to: 1
 24114                           ;main.c: 357: TRISCbits.RC6 = 0;
 24115  005020  9C94               	bcf	3988,6,c	;volatile
 24116                           
 24117                           ; BSR set to: 1
 24118                           ;main.c: 358: TRISCbits.RC7 = 1;
 24119  005022  8E94               	bsf	3988,7,c	;volatile
 24120                           
 24121                           ;main.c: 362: OpenUSART( 0b01111111 &
 24122                           ;main.c: 363: 0b11111111 &
 24123                           ;main.c: 364: 0b11111110 &
 24124                           ;main.c: 365: 0b11111101 &
 24125                           ;main.c: 366: 0b11111111,
 24126                           ;main.c: 367: 21);
 24127  005024  0100               	movlb	0	; () banked
 24128  005026  6B61               	clrf	(?_OpenUSART+1)& (0+255),b
 24129  005028  0E15               	movlw	21
 24130  00502A  6F60               	movwf	?_OpenUSART& (0+255),b
 24131  00502C  0E7C               	movlw	124
 24132  00502E  EC10  F027         	call	_OpenUSART
 24133                           
 24134                           ; BSR set to: 0
 24135                           ;main.c: 369: RCIF = 0;
 24136  005032  9A9E               	bcf	3998,5,c	;volatile
 24137                           
 24138                           ; BSR set to: 0
 24139                           ;main.c: 370: RCIP = 0;
 24140  005034  9A9F               	bcf	3999,5,c	;volatile
 24141                           
 24142                           ; BSR set to: 0
 24143                           ;main.c: 371: RCIE = 1;
 24144  005036  8A9D               	bsf	3997,5,c	;volatile
 24145                           
 24146                           ; BSR set to: 0
 24147                           ;main.c: 372: PEIE = 1;
 24148  005038  8CF2               	bsf	intcon,6,c	;volatile
 24149                           
 24150                           ; BSR set to: 0
 24151                           ;main.c: 375: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 24152  00503A  0E92               	movlw	146
 24153  00503C  EC01  F02A         	call	_OpenTimer0
 24154                           
 24155                           ; BSR set to: 0
 24156                           ;main.c: 376: WriteTimer0(0xfb1d);
 24157  005040  0EFB               	movlw	251
 24158  005042  6F61               	movwf	(?_WriteTimer0+1)& (0+255),b
 24159  005044  0E1D               	movlw	29
 24160  005046  6F60               	movwf	?_WriteTimer0& (0+255),b
 24161  005048  EC41  F02A         	call	_WriteTimer0	;wreg free
 24162                           
 24163                           ;main.c: 379: ECANInitialize();
 24164  00504C  EC71  F024         	call	_ECANInitialize	;wreg free
 24165                           
 24166                           ; BSR set to: 0
 24167                           ;main.c: 402: (INTCONbits.GIE = 1);
 24168  005050  8EF2               	bsf	intcon,7,c	;volatile
 24169                           
 24170                           ; BSR set to: 0
 24171  005052  0012               	return	
 24172  005054                     __end_of_init:
 24173                           	opt stack 0
 24174                           tblptru	equ	0xFF8
 24175                           tblptrh	equ	0xFF7
 24176                           tblptrl	equ	0xFF6
 24177                           tablat	equ	0xFF5
 24178                           prodh	equ	0xFF4
 24179                           prodl	equ	0xFF3
 24180                           intcon	equ	0xFF2
 24181                           indf0	equ	0xFEF
 24182                           postinc0	equ	0xFEE
 24183                           fsr0h	equ	0xFEA
 24184                           fsr0l	equ	0xFE9
 24185                           wreg	equ	0xFE8
 24186                           indf1	equ	0xFE7
 24187                           postinc1	equ	0xFE6
 24188                           postdec1	equ	0xFE5
 24189                           fsr1h	equ	0xFE2
 24190                           fsr1l	equ	0xFE1
 24191                           indf2	equ	0xFDF
 24192                           postinc2	equ	0xFDE
 24193                           postdec2	equ	0xFDD
 24194                           plusw2	equ	0xFDB
 24195                           fsr2h	equ	0xFDA
 24196                           fsr2l	equ	0xFD9
 24197                           status	equ	0xFD8
 24198                           
 24199 ;; *************** function _ECANInitialize *****************
 24200 ;; Defined at:
 24201 ;;		line 168 in file "ECAN.c"
 24202 ;; Parameters:    Size  Location     Type
 24203 ;;		None
 24204 ;; Auto vars:     Size  Location     Type
 24205 ;;		None
 24206 ;; Return value:  Size  Location     Type
 24207 ;;		None               void
 24208 ;; Registers used:
 24209 ;;		wreg, status,2, status,0, cstack
 24210 ;; Tracked objects:
 24211 ;;		On entry : F/0
 24212 ;;		On exit  : F/0
 24213 ;;		Unchanged: 0/0
 24214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24215 ;;      Params:         0       0       0       0       0       0       0
 24216 ;;      Locals:         0       0       0       0       0       0       0
 24217 ;;      Temps:          0       0       0       0       0       0       0
 24218 ;;      Totals:         0       0       0       0       0       0       0
 24219 ;;Total ram usage:        0 bytes
 24220 ;; Hardware stack levels used:    1
 24221 ;; Hardware stack levels required when called:    4
 24222 ;; This function calls:
 24223 ;;		_ECANSetOperationMode
 24224 ;; This function is called by:
 24225 ;;		_init
 24226 ;; This function uses a non-reentrant model
 24227 ;;
 24228                           
 24229                           	psect	text67
 24230  0048E2                     __ptext67:
 24231                           	opt stack 0
 24232  0048E2                     _ECANInitialize:
 24233                           	opt stack 25
 24234                           
 24235                           ; BSR set to: 0
 24236                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 24237                           
 24238                           ; BSR set to: 0
 24239                           ;incstack = 0
 24240                           ;incstack = 0
 24241  0048E2  0E80               	movlw	128
 24242  0048E4  EC1F  F02A         	call	_ECANSetOperationMode
 24243                           
 24244                           ; BSR set to: 0
 24245                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 24246  0048E8  0E09               	movlw	9
 24247  0048EA  6E70               	movwf	3952,c	;volatile
 24248                           
 24249                           ; BSR set to: 0
 24250                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 24251  0048EC  0EFC               	movlw	252
 24252  0048EE  6E71               	movwf	3953,c	;volatile
 24253                           
 24254                           ; BSR set to: 0
 24255                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 24256                           ;ECAN.c: 181: (0 << 6) |
 24257                           ;ECAN.c: 182: (2-1);
 24258  0048F0  0E01               	movlw	1
 24259  0048F2  6E72               	movwf	3954,c	;volatile
 24260                           
 24261                           ; BSR set to: 0
 24262                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 24263  0048F4  0E20               	movlw	32
 24264  0048F6  6E73               	movwf	3955,c	;volatile
 24265                           
 24266                           ; BSR set to: 0
 24267                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 24268  0048F8  8E77               	bsf	3959,7,c	;volatile
 24269                           
 24270                           ; BSR set to: 0
 24271                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 24272  0048FA  9C77               	bcf	3959,6,c	;volatile
 24273                           
 24274                           ; BSR set to: 0
 24275                           ;ECAN.c: 205: RXB0CON = 0;
 24276  0048FC  6A60               	clrf	3936,c	;volatile
 24277                           
 24278                           ; BSR set to: 0
 24279                           ;ECAN.c: 211: RXB1CON = 0;
 24280  0048FE  010F               	movlb	15	; () banked
 24281  004900  6B50               	clrf	80,b	;volatile
 24282                           
 24283                           ; BSR set to: 15
 24284                           ;ECAN.c: 221: B0CON = 0;
 24285  004902  010E               	movlb	14	; () banked
 24286  004904  6B20               	clrf	32,b	;volatile
 24287                           
 24288                           ; BSR set to: 14
 24289                           ;ECAN.c: 231: B1CON = 0;
 24290  004906  6B30               	clrf	48,b	;volatile
 24291                           
 24292                           ; BSR set to: 14
 24293                           ;ECAN.c: 241: B2CON = 0;
 24294  004908  6B40               	clrf	64,b	;volatile
 24295                           
 24296                           ; BSR set to: 14
 24297                           ;ECAN.c: 254: B3CON = 0 << 2;
 24298  00490A  6B50               	clrf	80,b	;volatile
 24299                           
 24300                           ; BSR set to: 14
 24301                           ;ECAN.c: 264: B4CON = 0 << 2;
 24302  00490C  6B60               	clrf	96,b	;volatile
 24303                           
 24304                           ; BSR set to: 14
 24305                           ;ECAN.c: 274: B5CON = 0 << 2;
 24306  00490E  6B70               	clrf	112,b	;volatile
 24307                           
 24308                           ; BSR set to: 14
 24309                           ;ECAN.c: 278: BSEL0 = 1 << 7 | 1 << 6 | 1 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 24310  004910  0EE0               	movlw	224
 24311  004912  010D               	movlb	13	; () banked
 24312  004914  6FF8               	movwf	248,b	;volatile
 24313                           
 24314                           ; BSR set to: 13
 24315                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 24316  004916  010F               	movlb	15	; () banked
 24317  004918  6B00               	clrf	0,b	;volatile
 24318                           
 24319                           ; BSR set to: 15
 24320  00491A  0E08               	movlw	8
 24321  00491C  6F01               	movwf	1,b	;volatile
 24322                           
 24323                           ; BSR set to: 15
 24324  00491E  6B02               	clrf	2,b	;volatile
 24325                           
 24326                           ; BSR set to: 15
 24327  004920  6B03               	clrf	3,b	;volatile
 24328                           
 24329                           ; BSR set to: 15
 24330                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 24331  004922  0E01               	movlw	1
 24332  004924  010D               	movlb	13	; () banked
 24333  004926  6FD4               	movwf	212,b	;volatile
 24334                           
 24335                           ; BSR set to: 13
 24336                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 24337  004928  6BD5               	clrf	213,b	;volatile
 24338                           
 24339                           ; BSR set to: 13
 24340                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 24341  00492A  6BE0               	clrf	224,b	;volatile
 24342                           
 24343                           ; BSR set to: 13
 24344                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 24345  00492C  0E11               	movlw	17
 24346  00492E  6FE1               	movwf	225,b	;volatile
 24347                           
 24348                           ; BSR set to: 13
 24349                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 24350  004930  6FE2               	movwf	226,b	;volatile
 24351                           
 24352                           ; BSR set to: 13
 24353                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 24354  004932  6BE3               	clrf	227,b	;volatile
 24355                           
 24356                           ; BSR set to: 13
 24357                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 24358  004934  6BE4               	clrf	228,b	;volatile
 24359                           
 24360                           ; BSR set to: 13
 24361                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 24362  004936  6BE5               	clrf	229,b	;volatile
 24363                           
 24364                           ; BSR set to: 13
 24365                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 24366  004938  6BE6               	clrf	230,b	;volatile
 24367                           
 24368                           ; BSR set to: 13
 24369                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 24370  00493A  6BE7               	clrf	231,b	;volatile
 24371                           
 24372                           ; BSR set to: 13
 24373                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 24374  00493C  0E54               	movlw	84
 24375  00493E  6FF0               	movwf	240,b	;volatile
 24376                           
 24377                           ; BSR set to: 13
 24378                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 24379  004940  0E05               	movlw	5
 24380  004942  6FF1               	movwf	241,b	;volatile
 24381                           
 24382                           ; BSR set to: 13
 24383                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 24384  004944  6BF2               	clrf	242,b	;volatile
 24385                           
 24386                           ; BSR set to: 13
 24387                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 24388  004946  6BF2               	clrf	242,b	;volatile
 24389                           
 24390                           ; BSR set to: 13
 24391                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 24392  004948  010F               	movlb	15	; () banked
 24393  00494A  6B18               	clrf	24,b	;volatile
 24394                           
 24395                           ; BSR set to: 15
 24396  00494C  6B19               	clrf	25,b	;volatile
 24397                           
 24398                           ; BSR set to: 15
 24399  00494E  6B1A               	clrf	26,b	;volatile
 24400                           
 24401                           ; BSR set to: 15
 24402  004950  6B1B               	clrf	27,b	;volatile
 24403                           
 24404                           ; BSR set to: 15
 24405                           ;ECAN.c: 482: RXM0EXIDM = 1;
 24406  004952  8719               	bsf	25,3,b	;volatile
 24407                           
 24408                           ; BSR set to: 15
 24409                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 24410  004954  6B1C               	clrf	28,b	;volatile
 24411                           
 24412                           ; BSR set to: 15
 24413  004956  6B1D               	clrf	29,b	;volatile
 24414                           
 24415                           ; BSR set to: 15
 24416  004958  6B1E               	clrf	30,b	;volatile
 24417                           
 24418                           ; BSR set to: 15
 24419  00495A  6B1F               	clrf	31,b	;volatile
 24420                           
 24421                           ; BSR set to: 15
 24422                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 24423  00495C  871D               	bsf	29,3,b	;volatile
 24424                           
 24425                           ; BSR set to: 15
 24426                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 24427  00495E  0E20               	movlw	32
 24428  004960  EF1F  F02A         	goto	_ECANSetOperationMode
 24429  004964                     __end_of_ECANInitialize:
 24430                           	opt stack 0
 24431                           tblptru	equ	0xFF8
 24432                           tblptrh	equ	0xFF7
 24433                           tblptrl	equ	0xFF6
 24434                           tablat	equ	0xFF5
 24435                           prodh	equ	0xFF4
 24436                           prodl	equ	0xFF3
 24437                           intcon	equ	0xFF2
 24438                           indf0	equ	0xFEF
 24439                           postinc0	equ	0xFEE
 24440                           fsr0h	equ	0xFEA
 24441                           fsr0l	equ	0xFE9
 24442                           wreg	equ	0xFE8
 24443                           indf1	equ	0xFE7
 24444                           postinc1	equ	0xFE6
 24445                           postdec1	equ	0xFE5
 24446                           fsr1h	equ	0xFE2
 24447                           fsr1l	equ	0xFE1
 24448                           indf2	equ	0xFDF
 24449                           postinc2	equ	0xFDE
 24450                           postdec2	equ	0xFDD
 24451                           plusw2	equ	0xFDB
 24452                           fsr2h	equ	0xFDA
 24453                           fsr2l	equ	0xFD9
 24454                           status	equ	0xFD8
 24455                           
 24456 ;; *************** function _ECANSetOperationMode *****************
 24457 ;; Defined at:
 24458 ;;		line 1012 in file "ECAN.c"
 24459 ;; Parameters:    Size  Location     Type
 24460 ;;  mode            1    wreg     enum E16337
 24461 ;; Auto vars:     Size  Location     Type
 24462 ;;  mode            1    0[BANK0 ] enum E16337
 24463 ;; Return value:  Size  Location     Type
 24464 ;;		None               void
 24465 ;; Registers used:
 24466 ;;		wreg, status,2, status,0
 24467 ;; Tracked objects:
 24468 ;;		On entry : 0/0
 24469 ;;		On exit  : F/0
 24470 ;;		Unchanged: 0/0
 24471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24472 ;;      Params:         0       0       0       0       0       0       0
 24473 ;;      Locals:         0       1       0       0       0       0       0
 24474 ;;      Temps:          0       0       0       0       0       0       0
 24475 ;;      Totals:         0       1       0       0       0       0       0
 24476 ;;Total ram usage:        1 bytes
 24477 ;; Hardware stack levels used:    1
 24478 ;; Hardware stack levels required when called:    3
 24479 ;; This function calls:
 24480 ;;		Nothing
 24481 ;; This function is called by:
 24482 ;;		_doModeVerbose
 24483 ;;		_doModeVscp
 24484 ;;		_doModeSLCAN
 24485 ;;		_ECANInitialize
 24486 ;; This function uses a non-reentrant model
 24487 ;;
 24488                           
 24489                           	psect	text68
 24490  00543E                     __ptext68:
 24491                           	opt stack 0
 24492  00543E                     _ECANSetOperationMode:
 24493                           	opt stack 26
 24494                           
 24495                           ; BSR set to: 0
 24496                           ;incstack = 0
 24497                           ;incstack = 0
 24498                           ;ECANSetOperationMode@mode stored from wreg
 24499  00543E  CFE8 F060          	movff	wreg,ECANSetOperationMode@mode
 24500                           
 24501                           ;ECAN.c: 1013: CANCON &= 0x1F;
 24502  005442  0E1F               	movlw	31
 24503  005444  166F               	andwf	3951,f,c	;volatile
 24504                           
 24505                           ;ECAN.c: 1014: CANCON |= mode;
 24506  005446  0100               	movlb	0	; () banked
 24507  005448  5160               	movf	ECANSetOperationMode@mode& (0+255),w,b
 24508  00544A  126F               	iorwf	3951,f,c	;volatile
 24509  00544C                     l10730:
 24510                           
 24511                           ; BSR set to: 0
 24512  00544C  506F               	movf	3951,w,c	;volatile
 24513  00544E  0BE0               	andlw	224
 24514  005450  1960               	xorwf	ECANSetOperationMode@mode& (0+255),w,b
 24515  005452  B4D8               	btfsc	status,2,c
 24516                           
 24517                           ; BSR set to: 0
 24518  005454  0012               	return	
 24519  005456  D7FA               	goto	l10730
 24520  005458                     __end_of_ECANSetOperationMode:
 24521                           	opt stack 0
 24522                           tblptru	equ	0xFF8
 24523                           tblptrh	equ	0xFF7
 24524                           tblptrl	equ	0xFF6
 24525                           tablat	equ	0xFF5
 24526                           prodh	equ	0xFF4
 24527                           prodl	equ	0xFF3
 24528                           intcon	equ	0xFF2
 24529                           indf0	equ	0xFEF
 24530                           postinc0	equ	0xFEE
 24531                           fsr0h	equ	0xFEA
 24532                           fsr0l	equ	0xFE9
 24533                           wreg	equ	0xFE8
 24534                           indf1	equ	0xFE7
 24535                           postinc1	equ	0xFE6
 24536                           postdec1	equ	0xFE5
 24537                           fsr1h	equ	0xFE2
 24538                           fsr1l	equ	0xFE1
 24539                           indf2	equ	0xFDF
 24540                           postinc2	equ	0xFDE
 24541                           postdec2	equ	0xFDD
 24542                           plusw2	equ	0xFDB
 24543                           fsr2h	equ	0xFDA
 24544                           fsr2l	equ	0xFD9
 24545                           status	equ	0xFD8
 24546                           
 24547 ;; *************** function _OpenTimer0 *****************
 24548 ;; Defined at:
 24549 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 24550 ;; Parameters:    Size  Location     Type
 24551 ;;  config          1    wreg     unsigned char 
 24552 ;; Auto vars:     Size  Location     Type
 24553 ;;  config          1    0[BANK0 ] unsigned char 
 24554 ;; Return value:  Size  Location     Type
 24555 ;;		None               void
 24556 ;; Registers used:
 24557 ;;		wreg, status,2, status,0
 24558 ;; Tracked objects:
 24559 ;;		On entry : F/0
 24560 ;;		On exit  : F/0
 24561 ;;		Unchanged: 0/0
 24562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24563 ;;      Params:         0       0       0       0       0       0       0
 24564 ;;      Locals:         0       1       0       0       0       0       0
 24565 ;;      Temps:          0       0       0       0       0       0       0
 24566 ;;      Totals:         0       1       0       0       0       0       0
 24567 ;;Total ram usage:        1 bytes
 24568 ;; Hardware stack levels used:    1
 24569 ;; Hardware stack levels required when called:    3
 24570 ;; This function calls:
 24571 ;;		Nothing
 24572 ;; This function is called by:
 24573 ;;		_init
 24574 ;; This function uses a non-reentrant model
 24575 ;;
 24576                           
 24577                           	psect	text69
 24578  005402                     __ptext69:
 24579                           	opt stack 0
 24580  005402                     _OpenTimer0:
 24581                           	opt stack 26
 24582                           
 24583                           ; BSR set to: 0
 24584                           ;incstack = 0
 24585                           ;incstack = 0
 24586                           ;OpenTimer0@config stored from wreg
 24587  005402  CFE8 F060          	movff	wreg,OpenTimer0@config
 24588                           
 24589                           ; BSR set to: 0
 24590  005406  5160               	movf	OpenTimer0@config& (0+255),w,b
 24591  005408  0B7F               	andlw	127
 24592  00540A  6ED5               	movwf	4053,c	;volatile
 24593                           
 24594                           ; BSR set to: 0
 24595  00540C  6AD7               	clrf	4055,c	;volatile
 24596                           
 24597                           ; BSR set to: 0
 24598  00540E  6AD6               	clrf	4054,c	;volatile
 24599                           
 24600                           ; BSR set to: 0
 24601  005410  94F2               	bcf	intcon,2,c	;volatile
 24602                           
 24603                           ; BSR set to: 0
 24604  005412  AF60               	btfss	OpenTimer0@config& (0+255),7,b
 24605  005414  D002               	goto	l1680
 24606                           
 24607                           ; BSR set to: 0
 24608  005416  8AF2               	bsf	intcon,5,c	;volatile
 24609  005418  D001               	goto	l1681
 24610  00541A                     l1680:
 24611                           
 24612                           ; BSR set to: 0
 24613  00541A  9AF2               	bcf	intcon,5,c	;volatile
 24614  00541C                     l1681:
 24615                           
 24616                           ; BSR set to: 0
 24617  00541C  8ED5               	bsf	4053,7,c	;volatile
 24618                           
 24619                           ; BSR set to: 0
 24620  00541E  0012               	return	
 24621  005420                     __end_of_OpenTimer0:
 24622                           	opt stack 0
 24623                           tblptru	equ	0xFF8
 24624                           tblptrh	equ	0xFF7
 24625                           tblptrl	equ	0xFF6
 24626                           tablat	equ	0xFF5
 24627                           prodh	equ	0xFF4
 24628                           prodl	equ	0xFF3
 24629                           intcon	equ	0xFF2
 24630                           indf0	equ	0xFEF
 24631                           postinc0	equ	0xFEE
 24632                           fsr0h	equ	0xFEA
 24633                           fsr0l	equ	0xFE9
 24634                           wreg	equ	0xFE8
 24635                           indf1	equ	0xFE7
 24636                           postinc1	equ	0xFE6
 24637                           postdec1	equ	0xFE5
 24638                           fsr1h	equ	0xFE2
 24639                           fsr1l	equ	0xFE1
 24640                           indf2	equ	0xFDF
 24641                           postinc2	equ	0xFDE
 24642                           postdec2	equ	0xFDD
 24643                           plusw2	equ	0xFDB
 24644                           fsr2h	equ	0xFDA
 24645                           fsr2l	equ	0xFD9
 24646                           status	equ	0xFD8
 24647                           
 24648 ;; *************** function _OpenUSART *****************
 24649 ;; Defined at:
 24650 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 24651 ;; Parameters:    Size  Location     Type
 24652 ;;  config          1    wreg     unsigned char 
 24653 ;;  spbrg           2    0[BANK0 ] unsigned int 
 24654 ;; Auto vars:     Size  Location     Type
 24655 ;;  config          1    2[BANK0 ] unsigned char 
 24656 ;; Return value:  Size  Location     Type
 24657 ;;		None               void
 24658 ;; Registers used:
 24659 ;;		wreg, status,2
 24660 ;; Tracked objects:
 24661 ;;		On entry : F/0
 24662 ;;		On exit  : F/0
 24663 ;;		Unchanged: 0/0
 24664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24665 ;;      Params:         0       2       0       0       0       0       0
 24666 ;;      Locals:         0       1       0       0       0       0       0
 24667 ;;      Temps:          0       0       0       0       0       0       0
 24668 ;;      Totals:         0       3       0       0       0       0       0
 24669 ;;Total ram usage:        3 bytes
 24670 ;; Hardware stack levels used:    1
 24671 ;; Hardware stack levels required when called:    3
 24672 ;; This function calls:
 24673 ;;		Nothing
 24674 ;; This function is called by:
 24675 ;;		_init
 24676 ;; This function uses a non-reentrant model
 24677 ;;
 24678                           
 24679                           	psect	text70
 24680  004E20                     __ptext70:
 24681                           	opt stack 0
 24682  004E20                     _OpenUSART:
 24683                           	opt stack 26
 24684                           
 24685                           ; BSR set to: 0
 24686                           ;incstack = 0
 24687                           ;incstack = 0
 24688                           ;OpenUSART@config stored from wreg
 24689  004E20  CFE8 F062          	movff	wreg,OpenUSART@config
 24690                           
 24691                           ; BSR set to: 0
 24692  004E24  6AAC               	clrf	4012,c	;volatile
 24693  004E26  6AAB               	clrf	4011,c	;volatile
 24694                           
 24695                           ; BSR set to: 0
 24696  004E28  B162               	btfsc	OpenUSART@config& (0+255),0,b
 24697                           
 24698                           ; BSR set to: 0
 24699  004E2A  88AC               	bsf	4012,4,c	;volatile
 24700                           
 24701                           ; BSR set to: 0
 24702  004E2C  A362               	btfss	OpenUSART@config& (0+255),1,b
 24703  004E2E  D002               	goto	l10444
 24704                           
 24705                           ; BSR set to: 0
 24706  004E30  8CAC               	bsf	4012,6,c	;volatile
 24707  004E32  8CAB               	bsf	4011,6,c	;volatile
 24708  004E34                     l10444:
 24709                           
 24710                           ; BSR set to: 0
 24711  004E34  B562               	btfsc	OpenUSART@config& (0+255),2,b
 24712                           
 24713                           ; BSR set to: 0
 24714  004E36  8EAC               	bsf	4012,7,c	;volatile
 24715                           
 24716                           ; BSR set to: 0
 24717  004E38  A762               	btfss	OpenUSART@config& (0+255),3,b
 24718  004E3A  D002               	goto	l1713
 24719                           
 24720                           ; BSR set to: 0
 24721  004E3C  88AB               	bsf	4011,4,c	;volatile
 24722  004E3E  D001               	goto	l10452
 24723  004E40                     l1713:
 24724                           
 24725                           ; BSR set to: 0
 24726  004E40  8AAB               	bsf	4011,5,c	;volatile
 24727  004E42                     l10452:
 24728                           
 24729                           ; BSR set to: 0
 24730  004E42  B962               	btfsc	OpenUSART@config& (0+255),4,b
 24731                           
 24732                           ; BSR set to: 0
 24733  004E44  84AC               	bsf	4012,2,c	;volatile
 24734                           
 24735                           ; BSR set to: 0
 24736  004E46  989E               	bcf	3998,4,c	;volatile
 24737                           
 24738                           ; BSR set to: 0
 24739  004E48  BB62               	btfsc	OpenUSART@config& (0+255),5,b
 24740                           
 24741                           ; BSR set to: 0
 24742  004E4A  86AB               	bsf	4011,3,c	;volatile
 24743                           
 24744                           ; BSR set to: 0
 24745  004E4C  AD62               	btfss	OpenUSART@config& (0+255),6,b
 24746  004E4E  D002               	goto	l1717
 24747                           
 24748                           ; BSR set to: 0
 24749  004E50  8A9D               	bsf	3997,5,c	;volatile
 24750  004E52  D001               	goto	l1718
 24751  004E54                     l1717:
 24752                           
 24753                           ; BSR set to: 0
 24754  004E54  9A9D               	bcf	3997,5,c	;volatile
 24755  004E56                     l1718:
 24756                           
 24757                           ; BSR set to: 0
 24758  004E56  9A9E               	bcf	3998,5,c	;volatile
 24759                           
 24760                           ; BSR set to: 0
 24761  004E58  AF62               	btfss	OpenUSART@config& (0+255),7,b
 24762  004E5A  D002               	goto	l1719
 24763                           
 24764                           ; BSR set to: 0
 24765  004E5C  889D               	bsf	3997,4,c	;volatile
 24766  004E5E  D001               	goto	l1720
 24767  004E60                     l1719:
 24768                           
 24769                           ; BSR set to: 0
 24770  004E60  989D               	bcf	3997,4,c	;volatile
 24771  004E62                     l1720:
 24772                           
 24773                           ; BSR set to: 0
 24774  004E62  C060  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 24775                           
 24776                           ; BSR set to: 0
 24777  004E66  5161               	movf	(OpenUSART@spbrg+1)& (0+255),w,b
 24778  004E68  6EB0               	movwf	4016,c	;volatile
 24779                           
 24780                           ; BSR set to: 0
 24781  004E6A  8AAC               	bsf	4012,5,c	;volatile
 24782                           
 24783                           ; BSR set to: 0
 24784  004E6C  8EAB               	bsf	4011,7,c	;volatile
 24785                           
 24786                           ; BSR set to: 0
 24787  004E6E  9C94               	bcf	3988,6,c	;volatile
 24788                           
 24789                           ; BSR set to: 0
 24790  004E70  8E94               	bsf	3988,7,c	;volatile
 24791                           
 24792                           ; BSR set to: 0
 24793  004E72  B8AC               	btfsc	4012,4,c	;volatile
 24794                           
 24795                           ; BSR set to: 0
 24796  004E74  BEAC               	btfsc	4012,7,c	;volatile
 24797  004E76  D001               	goto	l1722
 24798                           
 24799                           ; BSR set to: 0
 24800  004E78  8C94               	bsf	3988,6,c	;volatile
 24801  004E7A                     l1722:
 24802                           
 24803                           ; BSR set to: 0
 24804  004E7A  0012               	return	
 24805  004E7C                     __end_of_OpenUSART:
 24806                           	opt stack 0
 24807                           tblptru	equ	0xFF8
 24808                           tblptrh	equ	0xFF7
 24809                           tblptrl	equ	0xFF6
 24810                           tablat	equ	0xFF5
 24811                           prodh	equ	0xFF4
 24812                           prodl	equ	0xFF3
 24813                           intcon	equ	0xFF2
 24814                           indf0	equ	0xFEF
 24815                           postinc0	equ	0xFEE
 24816                           fsr0h	equ	0xFEA
 24817                           fsr0l	equ	0xFE9
 24818                           wreg	equ	0xFE8
 24819                           indf1	equ	0xFE7
 24820                           postinc1	equ	0xFE6
 24821                           postdec1	equ	0xFE5
 24822                           fsr1h	equ	0xFE2
 24823                           fsr1l	equ	0xFE1
 24824                           indf2	equ	0xFDF
 24825                           postinc2	equ	0xFDE
 24826                           postdec2	equ	0xFDD
 24827                           plusw2	equ	0xFDB
 24828                           fsr2h	equ	0xFDA
 24829                           fsr2l	equ	0xFD9
 24830                           status	equ	0xFD8
 24831                           
 24832 ;; *************** function _WriteTimer0 *****************
 24833 ;; Defined at:
 24834 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 24835 ;; Parameters:    Size  Location     Type
 24836 ;;  timer0          2    0[BANK0 ] unsigned int 
 24837 ;; Auto vars:     Size  Location     Type
 24838 ;;  timer           2    2[BANK0 ] struct Timers
 24839 ;; Return value:  Size  Location     Type
 24840 ;;		None               void
 24841 ;; Registers used:
 24842 ;;		None
 24843 ;; Tracked objects:
 24844 ;;		On entry : F/0
 24845 ;;		On exit  : F/0
 24846 ;;		Unchanged: F/0
 24847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24848 ;;      Params:         0       2       0       0       0       0       0
 24849 ;;      Locals:         0       2       0       0       0       0       0
 24850 ;;      Temps:          0       0       0       0       0       0       0
 24851 ;;      Totals:         0       4       0       0       0       0       0
 24852 ;;Total ram usage:        4 bytes
 24853 ;; Hardware stack levels used:    1
 24854 ;; Hardware stack levels required when called:    3
 24855 ;; This function calls:
 24856 ;;		Nothing
 24857 ;; This function is called by:
 24858 ;;		_init
 24859 ;; This function uses a non-reentrant model
 24860 ;;
 24861                           
 24862                           	psect	text71
 24863  005482                     __ptext71:
 24864                           	opt stack 0
 24865  005482                     _WriteTimer0:
 24866                           	opt stack 26
 24867                           
 24868                           ; BSR set to: 0
 24869                           
 24870                           ; BSR set to: 0
 24871                           ;incstack = 0
 24872                           ;incstack = 0
 24873  005482  C060  F062         	movff	WriteTimer0@timer0,WriteTimer0@timer
 24874  005486  C061  F063         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 24875  00548A  C063  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 24876  00548E  C062  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 24877                           
 24878                           ; BSR set to: 0
 24879  005492  0012               	return	
 24880  005494                     __end_of_WriteTimer0:
 24881                           	opt stack 0
 24882                           tblptru	equ	0xFF8
 24883                           tblptrh	equ	0xFF7
 24884                           tblptrl	equ	0xFF6
 24885                           tablat	equ	0xFF5
 24886                           prodh	equ	0xFF4
 24887                           prodl	equ	0xFF3
 24888                           intcon	equ	0xFF2
 24889                           indf0	equ	0xFEF
 24890                           postinc0	equ	0xFEE
 24891                           fsr0h	equ	0xFEA
 24892                           fsr0l	equ	0xFE9
 24893                           wreg	equ	0xFE8
 24894                           indf1	equ	0xFE7
 24895                           postinc1	equ	0xFE6
 24896                           postdec1	equ	0xFE5
 24897                           fsr1h	equ	0xFE2
 24898                           fsr1l	equ	0xFE1
 24899                           indf2	equ	0xFDF
 24900                           postinc2	equ	0xFDE
 24901                           postdec2	equ	0xFDD
 24902                           plusw2	equ	0xFDB
 24903                           fsr2h	equ	0xFDA
 24904                           fsr2l	equ	0xFD9
 24905                           status	equ	0xFD8
 24906                           
 24907 ;; *************** function _vscp_restoreDefaults *****************
 24908 ;; Defined at:
 24909 ;;		line 2477 in file "main.c"
 24910 ;; Parameters:    Size  Location     Type
 24911 ;;		None
 24912 ;; Auto vars:     Size  Location     Type
 24913 ;;		None
 24914 ;; Return value:  Size  Location     Type
 24915 ;;		None               void
 24916 ;; Registers used:
 24917 ;;		wreg, status,2, status,0, cstack
 24918 ;; Tracked objects:
 24919 ;;		On entry : F/0
 24920 ;;		On exit  : F/1
 24921 ;;		Unchanged: 0/0
 24922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24923 ;;      Params:         0       0       0       0       0       0       0
 24924 ;;      Locals:         0       0       0       0       0       0       0
 24925 ;;      Temps:          0       0       0       0       0       0       0
 24926 ;;      Totals:         0       0       0       0       0       0       0
 24927 ;;Total ram usage:        0 bytes
 24928 ;; Hardware stack levels used:    1
 24929 ;; Hardware stack levels required when called:    5
 24930 ;; This function calls:
 24931 ;;		_init_app_ram
 24932 ;;		_init_app_eeprom
 24933 ;; This function is called by:
 24934 ;;		_main
 24935 ;; This function uses a non-reentrant model
 24936 ;;
 24937                           
 24938                           	psect	text72
 24939  0054B8                     __ptext72:
 24940                           	opt stack 0
 24941  0054B8                     _vscp_restoreDefaults:
 24942                           	opt stack 25
 24943                           
 24944                           ; BSR set to: 0
 24945                           ;main.c: 2478: init_app_eeprom();
 24946                           
 24947                           ; BSR set to: 0
 24948                           ;incstack = 0
 24949                           ;incstack = 0
 24950  0054B8  ECE9  F023         	call	_init_app_eeprom	;wreg free
 24951                           
 24952                           ; BSR set to: 0
 24953                           ;main.c: 2479: init_app_ram();
 24954  0054BC  EF96  F027         	goto	_init_app_ram	;wreg free
 24955  0054C0                     __end_of_vscp_restoreDefaults:
 24956                           	opt stack 0
 24957                           tblptru	equ	0xFF8
 24958                           tblptrh	equ	0xFF7
 24959                           tblptrl	equ	0xFF6
 24960                           tablat	equ	0xFF5
 24961                           prodh	equ	0xFF4
 24962                           prodl	equ	0xFF3
 24963                           intcon	equ	0xFF2
 24964                           indf0	equ	0xFEF
 24965                           postinc0	equ	0xFEE
 24966                           fsr0h	equ	0xFEA
 24967                           fsr0l	equ	0xFE9
 24968                           wreg	equ	0xFE8
 24969                           indf1	equ	0xFE7
 24970                           postinc1	equ	0xFE6
 24971                           postdec1	equ	0xFE5
 24972                           fsr1h	equ	0xFE2
 24973                           fsr1l	equ	0xFE1
 24974                           indf2	equ	0xFDF
 24975                           postinc2	equ	0xFDE
 24976                           postdec2	equ	0xFDD
 24977                           plusw2	equ	0xFDB
 24978                           fsr2h	equ	0xFDA
 24979                           fsr2l	equ	0xFD9
 24980                           status	equ	0xFD8
 24981                           
 24982 ;; *************** function _init_app_eeprom *****************
 24983 ;; Defined at:
 24984 ;;		line 429 in file "main.c"
 24985 ;; Parameters:    Size  Location     Type
 24986 ;;		None
 24987 ;; Auto vars:     Size  Location     Type
 24988 ;;  i               1    3[BANK0 ] unsigned char 
 24989 ;; Return value:  Size  Location     Type
 24990 ;;		None               void
 24991 ;; Registers used:
 24992 ;;		wreg, status,2, status,0, cstack
 24993 ;; Tracked objects:
 24994 ;;		On entry : F/0
 24995 ;;		On exit  : F/0
 24996 ;;		Unchanged: 0/0
 24997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24998 ;;      Params:         0       0       0       0       0       0       0
 24999 ;;      Locals:         0       1       0       0       0       0       0
 25000 ;;      Temps:          0       0       0       0       0       0       0
 25001 ;;      Totals:         0       1       0       0       0       0       0
 25002 ;;Total ram usage:        1 bytes
 25003 ;; Hardware stack levels used:    1
 25004 ;; Hardware stack levels required when called:    4
 25005 ;; This function calls:
 25006 ;;		_writeEEPROM
 25007 ;; This function is called by:
 25008 ;;		_vscp_restoreDefaults
 25009 ;; This function uses a non-reentrant model
 25010 ;;
 25011                           
 25012                           	psect	text73
 25013  0047D2                     __ptext73:
 25014                           	opt stack 0
 25015  0047D2                     _init_app_eeprom:
 25016                           	opt stack 25
 25017                           
 25018                           ; BSR set to: 0
 25019                           ;main.c: 430: uint8_t i;
 25020                           ;main.c: 432: writeEEPROM(0x01, 0x55);
 25021                           
 25022                           ; BSR set to: 1
 25023                           ;incstack = 0
 25024                           ;incstack = 0
 25025  0047D2  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25026  0047D4  0E01               	movlw	1
 25027  0047D6  6F60               	movwf	?_writeEEPROM& (0+255),b
 25028  0047D8  0E55               	movlw	85
 25029  0047DA  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25030  0047DC  ECDE  F029         	call	_writeEEPROM	;wreg free
 25031                           
 25032                           ;main.c: 433: writeEEPROM(0x02, 0xAA);
 25033  0047E0  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25034  0047E2  0E02               	movlw	2
 25035  0047E4  6F60               	movwf	?_writeEEPROM& (0+255),b
 25036  0047E6  0EAA               	movlw	170
 25037  0047E8  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25038  0047EA  ECDE  F029         	call	_writeEEPROM	;wreg free
 25039                           
 25040                           ;main.c: 434: writeEEPROM(0x03, 0);
 25041  0047EE  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25042  0047F0  0E03               	movlw	3
 25043  0047F2  6F60               	movwf	?_writeEEPROM& (0+255),b
 25044  0047F4  0E00               	movlw	0
 25045  0047F6  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25046  0047F8  ECDE  F029         	call	_writeEEPROM	;wreg free
 25047                           
 25048                           ;main.c: 435: writeEEPROM(0x05, 0);
 25049  0047FC  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25050  0047FE  0E05               	movlw	5
 25051  004800  6F60               	movwf	?_writeEEPROM& (0+255),b
 25052  004802  0E00               	movlw	0
 25053  004804  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25054  004806  ECDE  F029         	call	_writeEEPROM	;wreg free
 25055                           
 25056                           ;main.c: 436: writeEEPROM(0x06, 0);
 25057  00480A  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25058  00480C  0E06               	movlw	6
 25059  00480E  6F60               	movwf	?_writeEEPROM& (0+255),b
 25060  004810  0E00               	movlw	0
 25061  004812  6B62               	clrf	(?_writeEEPROM+2)& (0+255),b
 25062  004814  ECDE  F029         	call	_writeEEPROM	;wreg free
 25063                           
 25064                           ;main.c: 437: writeEEPROM(0x09, 10u);
 25065  004818  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25066  00481A  0E09               	movlw	9
 25067  00481C  6F60               	movwf	?_writeEEPROM& (0+255),b
 25068  00481E  0E0A               	movlw	10
 25069  004820  6F62               	movwf	(?_writeEEPROM+2)& (0+255),b
 25070  004822  ECDE  F029         	call	_writeEEPROM	;wreg free
 25071                           
 25072                           ; BSR set to: 0
 25073                           ;main.c: 440: for (i = 0x20; i < (0x5C + 4); i++) {
 25074  004826  0E20               	movlw	32
 25075  004828  6F63               	movwf	init_app_eeprom@i& (0+255),b
 25076  00482A                     l10594:
 25077                           
 25078                           ; BSR set to: 0
 25079                           ;main.c: 441: writeEEPROM(0x01, 0xFF);
 25080  00482A  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25081  00482C  0E01               	movlw	1
 25082  00482E  6F60               	movwf	?_writeEEPROM& (0+255),b
 25083  004830  0EFF               	movlw	255
 25084  004832  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 25085  004834  ECDE  F029         	call	_writeEEPROM	;wreg free
 25086                           
 25087                           ; BSR set to: 0
 25088  004838  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 25089                           
 25090                           ; BSR set to: 0
 25091  00483A  0E5F               	movlw	95
 25092  00483C  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 25093  00483E  D7F5               	goto	l10594
 25094                           
 25095                           ; BSR set to: 0
 25096                           ;main.c: 442: }
 25097                           ;main.c: 445: for (i = 0x60; i < (0x64 + 4); i++) {
 25098  004840  0E60               	movlw	96
 25099  004842  6F63               	movwf	init_app_eeprom@i& (0+255),b
 25100  004844                     l10606:
 25101                           
 25102                           ; BSR set to: 0
 25103                           ;main.c: 446: writeEEPROM(0x01, 0xFF);
 25104  004844  6B61               	clrf	(?_writeEEPROM+1)& (0+255),b
 25105  004846  0E01               	movlw	1
 25106  004848  6F60               	movwf	?_writeEEPROM& (0+255),b
 25107  00484A  0EFF               	movlw	255
 25108  00484C  6962               	setf	(?_writeEEPROM+2)& (0+255),b
 25109  00484E  ECDE  F029         	call	_writeEEPROM	;wreg free
 25110                           
 25111                           ; BSR set to: 0
 25112  004852  2B63               	incf	init_app_eeprom@i& (0+255),f,b
 25113                           
 25114                           ; BSR set to: 0
 25115  004854  0E67               	movlw	103
 25116  004856  6563               	cpfsgt	init_app_eeprom@i& (0+255),b
 25117  004858  D7F5               	goto	l10606
 25118                           
 25119                           ; BSR set to: 0
 25120  00485A  0C67               	retlw	103
 25121  00485C                     __end_of_init_app_eeprom:
 25122                           	opt stack 0
 25123                           tblptru	equ	0xFF8
 25124                           tblptrh	equ	0xFF7
 25125                           tblptrl	equ	0xFF6
 25126                           tablat	equ	0xFF5
 25127                           prodh	equ	0xFF4
 25128                           prodl	equ	0xFF3
 25129                           intcon	equ	0xFF2
 25130                           indf0	equ	0xFEF
 25131                           postinc0	equ	0xFEE
 25132                           fsr0h	equ	0xFEA
 25133                           fsr0l	equ	0xFE9
 25134                           wreg	equ	0xFE8
 25135                           indf1	equ	0xFE7
 25136                           postinc1	equ	0xFE6
 25137                           postdec1	equ	0xFE5
 25138                           fsr1h	equ	0xFE2
 25139                           fsr1l	equ	0xFE1
 25140                           indf2	equ	0xFDF
 25141                           postinc2	equ	0xFDE
 25142                           postdec2	equ	0xFDD
 25143                           plusw2	equ	0xFDB
 25144                           fsr2h	equ	0xFDA
 25145                           fsr2l	equ	0xFD9
 25146                           status	equ	0xFD8
 25147                           
 25148 ;; *************** function _writeEEPROM *****************
 25149 ;; Defined at:
 25150 ;;		line 23 in file "eeprom.c"
 25151 ;; Parameters:    Size  Location     Type
 25152 ;;  address         2    0[BANK0 ] unsigned short 
 25153 ;;  data            1    2[BANK0 ] unsigned char 
 25154 ;; Auto vars:     Size  Location     Type
 25155 ;;		None
 25156 ;; Return value:  Size  Location     Type
 25157 ;;		None               void
 25158 ;; Registers used:
 25159 ;;		wreg, status,2
 25160 ;; Tracked objects:
 25161 ;;		On entry : F/0
 25162 ;;		On exit  : F/0
 25163 ;;		Unchanged: F/0
 25164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25165 ;;      Params:         0       3       0       0       0       0       0
 25166 ;;      Locals:         0       0       0       0       0       0       0
 25167 ;;      Temps:          0       0       0       0       0       0       0
 25168 ;;      Totals:         0       3       0       0       0       0       0
 25169 ;;Total ram usage:        3 bytes
 25170 ;; Hardware stack levels used:    1
 25171 ;; Hardware stack levels required when called:    3
 25172 ;; This function calls:
 25173 ;;		Nothing
 25174 ;; This function is called by:
 25175 ;;		_init_app_eeprom
 25176 ;;		_doModeVerbose
 25177 ;;		_doModeSLCAN
 25178 ;; This function uses a non-reentrant model
 25179 ;;
 25180                           
 25181                           	psect	text74
 25182  0053BC                     __ptext74:
 25183                           	opt stack 0
 25184  0053BC                     _writeEEPROM:
 25185                           	opt stack 26
 25186                           
 25187                           ; BSR set to: 0
 25188                           ;eeprom.c: 29: EEADR = address & 0xff;
 25189                           
 25190                           ; BSR set to: 0
 25191                           ;incstack = 0
 25192                           ;incstack = 0
 25193  0053BC  C060  FFA9         	movff	writeEEPROM@address,4009	;volatile
 25194                           
 25195                           ;eeprom.c: 30: EEDATA = data;
 25196  0053C0  C062  FFA8         	movff	writeEEPROM@data,4008	;volatile
 25197                           
 25198                           ;eeprom.c: 31: EECON1bits.EEPGD = 0;
 25199  0053C4  9EA6               	bcf	4006,7,c	;volatile
 25200                           
 25201                           ;eeprom.c: 32: EECON1bits.CFGS = 0;
 25202  0053C6  9CA6               	bcf	4006,6,c	;volatile
 25203                           
 25204                           ;eeprom.c: 33: EECON1bits.WREN = 1;
 25205  0053C8  84A6               	bsf	4006,2,c	;volatile
 25206                           
 25207                           ;eeprom.c: 36: INTCONbits.GIE = 0;
 25208  0053CA  9EF2               	bcf	intcon,7,c	;volatile
 25209                           
 25210                           ; BSR set to: 0
 25211                           ;eeprom.c: 37: EECON2 = 0x55;
 25212  0053CC  0E55               	movlw	85
 25213  0053CE  6EA7               	movwf	4007,c	;volatile
 25214                           
 25215                           ;eeprom.c: 38: EECON2 = 0xaa;
 25216  0053D0  0EAA               	movlw	170
 25217  0053D2  6EA7               	movwf	4007,c	;volatile
 25218                           
 25219                           ; BSR set to: 0
 25220                           ;eeprom.c: 39: EECON1bits.WR = 1;
 25221  0053D4  82A6               	bsf	4006,1,c	;volatile
 25222                           
 25223                           ; BSR set to: 0
 25224                           ;eeprom.c: 40: INTCONbits.GIE = 1;
 25225  0053D6  8EF2               	bsf	intcon,7,c	;volatile
 25226  0053D8                     l1460:
 25227                           
 25228                           ; BSR set to: 0
 25229  0053D8  A8A1               	btfss	4001,4,c	;volatile
 25230  0053DA  D7FE               	goto	l1460
 25231                           
 25232                           ; BSR set to: 0
 25233                           ;eeprom.c: 43: PIR2bits.EEIF = 0;
 25234  0053DC  98A1               	bcf	4001,4,c	;volatile
 25235                           
 25236                           ;eeprom.c: 44: EECON1bits.WREN = 0;
 25237  0053DE  94A6               	bcf	4006,2,c	;volatile
 25238                           
 25239                           ; BSR set to: 0
 25240  0053E0  0012               	return	
 25241  0053E2                     __end_of_writeEEPROM:
 25242                           	opt stack 0
 25243                           tblptru	equ	0xFF8
 25244                           tblptrh	equ	0xFF7
 25245                           tblptrl	equ	0xFF6
 25246                           tablat	equ	0xFF5
 25247                           prodh	equ	0xFF4
 25248                           prodl	equ	0xFF3
 25249                           intcon	equ	0xFF2
 25250                           indf0	equ	0xFEF
 25251                           postinc0	equ	0xFEE
 25252                           fsr0h	equ	0xFEA
 25253                           fsr0l	equ	0xFE9
 25254                           wreg	equ	0xFE8
 25255                           indf1	equ	0xFE7
 25256                           postinc1	equ	0xFE6
 25257                           postdec1	equ	0xFE5
 25258                           fsr1h	equ	0xFE2
 25259                           fsr1l	equ	0xFE1
 25260                           indf2	equ	0xFDF
 25261                           postinc2	equ	0xFDE
 25262                           postdec2	equ	0xFDD
 25263                           plusw2	equ	0xFDB
 25264                           fsr2h	equ	0xFDA
 25265                           fsr2l	equ	0xFD9
 25266                           status	equ	0xFD8
 25267                           
 25268 ;; *************** function _init_app_ram *****************
 25269 ;; Defined at:
 25270 ;;		line 411 in file "main.c"
 25271 ;; Parameters:    Size  Location     Type
 25272 ;;		None
 25273 ;; Auto vars:     Size  Location     Type
 25274 ;;		None
 25275 ;; Return value:  Size  Location     Type
 25276 ;;		None               void
 25277 ;; Registers used:
 25278 ;;		wreg, status,2, cstack
 25279 ;; Tracked objects:
 25280 ;;		On entry : E/0
 25281 ;;		On exit  : F/1
 25282 ;;		Unchanged: 0/0
 25283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25284 ;;      Params:         0       0       0       0       0       0       0
 25285 ;;      Locals:         0       0       0       0       0       0       0
 25286 ;;      Temps:          0       0       0       0       0       0       0
 25287 ;;      Totals:         0       0       0       0       0       0       0
 25288 ;;Total ram usage:        0 bytes
 25289 ;; Hardware stack levels used:    1
 25290 ;; Hardware stack levels required when called:    4
 25291 ;; This function calls:
 25292 ;;		_readEEPROM
 25293 ;; This function is called by:
 25294 ;;		_init
 25295 ;;		_vscp_restoreDefaults
 25296 ;; This function uses a non-reentrant model
 25297 ;;
 25298                           
 25299                           	psect	text75
 25300  004F2C                     __ptext75:
 25301                           	opt stack 0
 25302  004F2C                     _init_app_ram:
 25303                           	opt stack 25
 25304                           
 25305                           ;main.c: 413: can_receiveOverruns = 0;
 25306                           
 25307                           ; BSR set to: 0
 25308                           ;incstack = 0
 25309                           ;incstack = 0
 25310  004F2C  0100               	movlb	0	; () banked
 25311  004F2E  6BD1               	clrf	_can_receiveOverruns& (0+255),b
 25312  004F30  6BD2               	clrf	(_can_receiveOverruns+1)& (0+255),b
 25313  004F32  6BD3               	clrf	(_can_receiveOverruns+2)& (0+255),b
 25314  004F34  6BD4               	clrf	(_can_receiveOverruns+3)& (0+255),b
 25315                           
 25316                           ;main.c: 414: can_transmitOverruns = 0;
 25317  004F36  6BD5               	clrf	_can_transmitOverruns& (0+255),b
 25318  004F38  6BD6               	clrf	(_can_transmitOverruns+1)& (0+255),b
 25319  004F3A  6BD7               	clrf	(_can_transmitOverruns+2)& (0+255),b
 25320  004F3C  6BD8               	clrf	(_can_transmitOverruns+3)& (0+255),b
 25321                           
 25322                           ;main.c: 415: uart_receiveOverruns = 0;
 25323  004F3E  6BF1               	clrf	_uart_receiveOverruns& (0+255),b
 25324  004F40  6BF2               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 25325  004F42  6BF3               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 25326  004F44  6BF4               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 25327                           
 25328                           ;main.c: 416: uart_transmitOverruns = 0;
 25329  004F46  6A29               	clrf	_uart_transmitOverruns,c
 25330  004F48  6A2A               	clrf	_uart_transmitOverruns+1,c
 25331  004F4A  6A2B               	clrf	_uart_transmitOverruns+2,c
 25332  004F4C  6A2C               	clrf	_uart_transmitOverruns+3,c
 25333                           
 25334                           ; BSR set to: 0
 25335                           ;main.c: 418: bHex = readEEPROM(0x06);
 25336  004F4E  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 25337  004F50  0E06               	movlw	6
 25338  004F52  6F60               	movwf	?_readEEPROM& (0+255),b
 25339  004F54  EC4A  F02A         	call	_readEEPROM	;wreg free
 25340  004F58  0101               	movlb	1	; () banked
 25341  004F5A  6F00               	movwf	_bHex& (0+255),b
 25342                           
 25343                           ;main.c: 419: mode = readEEPROM(0x03);
 25344  004F5C  0100               	movlb	0	; () banked
 25345  004F5E  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 25346  004F60  0E03               	movlw	3
 25347  004F62  6F60               	movwf	?_readEEPROM& (0+255),b
 25348  004F64  EC4A  F02A         	call	_readEEPROM	;wreg free
 25349  004F68  6FF8               	movwf	_mode& (0+255),b
 25350                           
 25351                           ;main.c: 421: rwtimeout = readEEPROM(0x09);
 25352  004F6A  6B61               	clrf	(?_readEEPROM+1)& (0+255),b
 25353  004F6C  0E09               	movlw	9
 25354  004F6E  6F60               	movwf	?_readEEPROM& (0+255),b
 25355  004F70  EC4A  F02A         	call	_readEEPROM	;wreg free
 25356  004F74  0101               	movlb	1	; () banked
 25357  004F76  6F03               	movwf	_rwtimeout& (0+255),b
 25358                           
 25359                           ; BSR set to: 1
 25360  004F78  0012               	return	
 25361  004F7A                     __end_of_init_app_ram:
 25362                           	opt stack 0
 25363                           tblptru	equ	0xFF8
 25364                           tblptrh	equ	0xFF7
 25365                           tblptrl	equ	0xFF6
 25366                           tablat	equ	0xFF5
 25367                           prodh	equ	0xFF4
 25368                           prodl	equ	0xFF3
 25369                           intcon	equ	0xFF2
 25370                           indf0	equ	0xFEF
 25371                           postinc0	equ	0xFEE
 25372                           fsr0h	equ	0xFEA
 25373                           fsr0l	equ	0xFE9
 25374                           wreg	equ	0xFE8
 25375                           indf1	equ	0xFE7
 25376                           postinc1	equ	0xFE6
 25377                           postdec1	equ	0xFE5
 25378                           fsr1h	equ	0xFE2
 25379                           fsr1l	equ	0xFE1
 25380                           indf2	equ	0xFDF
 25381                           postinc2	equ	0xFDE
 25382                           postdec2	equ	0xFDD
 25383                           plusw2	equ	0xFDB
 25384                           fsr2h	equ	0xFDA
 25385                           fsr2l	equ	0xFD9
 25386                           status	equ	0xFD8
 25387                           
 25388 ;; *************** function _readEEPROM *****************
 25389 ;; Defined at:
 25390 ;;		line 87 in file "eeprom.c"
 25391 ;; Parameters:    Size  Location     Type
 25392 ;;  address         2    0[BANK0 ] unsigned short 
 25393 ;; Auto vars:     Size  Location     Type
 25394 ;;  data            1    2[BANK0 ] unsigned char 
 25395 ;; Return value:  Size  Location     Type
 25396 ;;                  1    wreg      unsigned char 
 25397 ;; Registers used:
 25398 ;;		wreg, status,2
 25399 ;; Tracked objects:
 25400 ;;		On entry : F/0
 25401 ;;		On exit  : F/0
 25402 ;;		Unchanged: 0/0
 25403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25404 ;;      Params:         0       2       0       0       0       0       0
 25405 ;;      Locals:         0       1       0       0       0       0       0
 25406 ;;      Temps:          0       0       0       0       0       0       0
 25407 ;;      Totals:         0       3       0       0       0       0       0
 25408 ;;Total ram usage:        3 bytes
 25409 ;; Hardware stack levels used:    1
 25410 ;; Hardware stack levels required when called:    3
 25411 ;; This function calls:
 25412 ;;		Nothing
 25413 ;; This function is called by:
 25414 ;;		_main
 25415 ;;		_init_app_ram
 25416 ;; This function uses a non-reentrant model
 25417 ;;
 25418                           
 25419                           	psect	text76
 25420  005494                     __ptext76:
 25421                           	opt stack 0
 25422  005494                     _readEEPROM:
 25423                           	opt stack 25
 25424                           
 25425                           ; BSR set to: 0
 25426                           ;eeprom.c: 88: uint8_t data;
 25427                           ;eeprom.c: 93: EEADR = address & 0xff;
 25428                           
 25429                           ; BSR set to: 1
 25430                           ;incstack = 0
 25431                           ;incstack = 0
 25432  005494  C060  FFA9         	movff	readEEPROM@address,4009	;volatile
 25433                           
 25434                           ;eeprom.c: 94: EECON1bits.EEPGD= 0;
 25435  005498  9EA6               	bcf	4006,7,c	;volatile
 25436                           
 25437                           ;eeprom.c: 95: EECON1bits.CFGS = 0;
 25438  00549A  9CA6               	bcf	4006,6,c	;volatile
 25439                           
 25440                           ;eeprom.c: 96: EECON1bits.RD = 1;
 25441  00549C  80A6               	bsf	4006,0,c	;volatile
 25442                           
 25443                           ;eeprom.c: 97: data = EEDATA;
 25444  00549E  CFA8 F062          	movff	4008,readEEPROM@data	;volatile
 25445                           
 25446                           ; BSR set to: 0
 25447                           ;eeprom.c: 99: return data;
 25448  0054A2  5162               	movf	readEEPROM@data& (0+255),w,b
 25449                           
 25450                           ; BSR set to: 0
 25451  0054A4  0012               	return	
 25452  0054A6                     __end_of_readEEPROM:
 25453                           	opt stack 0
 25454                           tblptru	equ	0xFF8
 25455                           tblptrh	equ	0xFF7
 25456                           tblptrl	equ	0xFF6
 25457                           tablat	equ	0xFF5
 25458                           prodh	equ	0xFF4
 25459                           prodl	equ	0xFF3
 25460                           intcon	equ	0xFF2
 25461                           indf0	equ	0xFEF
 25462                           postinc0	equ	0xFEE
 25463                           fsr0h	equ	0xFEA
 25464                           fsr0l	equ	0xFE9
 25465                           wreg	equ	0xFE8
 25466                           indf1	equ	0xFE7
 25467                           postinc1	equ	0xFE6
 25468                           postdec1	equ	0xFE5
 25469                           fsr1h	equ	0xFE2
 25470                           fsr1l	equ	0xFE1
 25471                           indf2	equ	0xFDF
 25472                           postinc2	equ	0xFDE
 25473                           postdec2	equ	0xFDD
 25474                           plusw2	equ	0xFDB
 25475                           fsr2h	equ	0xFDA
 25476                           fsr2l	equ	0xFD9
 25477                           status	equ	0xFD8
 25478                           
 25479 ;; *************** function _fifo_init *****************
 25480 ;; Defined at:
 25481 ;;		line 14 in file "fifo.c"
 25482 ;; Parameters:    Size  Location     Type
 25483 ;;  f               1    wreg     PTR struct .
 25484 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 25485 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 25486 ;;		 -> caninputBuffer(494), inputBuffer(128), 
 25487 ;;  size            2    2[BANK0 ] unsigned short 
 25488 ;; Auto vars:     Size  Location     Type
 25489 ;;  f               1    4[BANK0 ] PTR struct .
 25490 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 25491 ;; Return value:  Size  Location     Type
 25492 ;;		None               void
 25493 ;; Registers used:
 25494 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 25495 ;; Tracked objects:
 25496 ;;		On entry : F/0
 25497 ;;		On exit  : F/0
 25498 ;;		Unchanged: 0/0
 25499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25500 ;;      Params:         0       4       0       0       0       0       0
 25501 ;;      Locals:         0       1       0       0       0       0       0
 25502 ;;      Temps:          0       0       0       0       0       0       0
 25503 ;;      Totals:         0       5       0       0       0       0       0
 25504 ;;Total ram usage:        5 bytes
 25505 ;; Hardware stack levels used:    1
 25506 ;; Hardware stack levels required when called:    3
 25507 ;; This function calls:
 25508 ;;		Nothing
 25509 ;; This function is called by:
 25510 ;;		_main
 25511 ;; This function uses a non-reentrant model
 25512 ;;
 25513                           
 25514                           	psect	text77
 25515  00515E                     __ptext77:
 25516                           	opt stack 0
 25517  00515E                     _fifo_init:
 25518                           	opt stack 27
 25519                           
 25520                           ; BSR set to: 0
 25521                           ;incstack = 0
 25522                           ;incstack = 0
 25523                           ;fifo_init@f stored from wreg
 25524  00515E  CFE8 F064          	movff	wreg,fifo_init@f
 25525                           
 25526                           ; BSR set to: 0
 25527                           ;fifo.c: 15: f->head = 0;
 25528  005162  5164               	movf	fifo_init@f& (0+255),w,b
 25529  005164  6ED9               	movwf	fsr2l,c
 25530  005166  6ADA               	clrf	fsr2h,c
 25531  005168  0E02               	movlw	2
 25532                           
 25533                           ;fifo.c: 16: f->tail = 0;
 25534  00516A  D811               	call	PL86	;call to abstracted procedure
 25535  00516C  0E04               	movlw	4
 25536                           
 25537                           ;fifo.c: 17: f->size = size;
 25538  00516E  D80F               	call	PL86	;call to abstracted procedure
 25539  005170  0E06               	movlw	6
 25540  005172  26D9               	addwf	fsr2l,f,c
 25541  005174  6ADA               	clrf	fsr2h,c
 25542  005176  C062  FFDE         	movff	fifo_init@size,postinc2
 25543  00517A  C063  FFDD         	movff	fifo_init@size+1,postdec2
 25544                           
 25545                           ; BSR set to: 0
 25546                           ;fifo.c: 18: f->buf = buf;
 25547  00517E  5164               	movf	fifo_init@f& (0+255),w,b
 25548  005180  6ED9               	movwf	fsr2l,c
 25549  005182  6ADA               	clrf	fsr2h,c
 25550  005184  C060  FFDE         	movff	fifo_init@buf,postinc2
 25551  005188  C061  FFDD         	movff	fifo_init@buf+1,postdec2
 25552                           
 25553                           ; BSR set to: 0
 25554  00518C  0012               	return	
 25555  00518E                     __end_of_fifo_init:
 25556                           	opt stack 0
 25557  00518E                     PL86:
 25558                           	opt stack 27
 25559  00518E  26D9               	addwf	fsr2l,f,c
 25560  005190  6ADA               	clrf	fsr2h,c
 25561  005192  6ADE               	clrf	postinc2,c
 25562  005194  6ADD               	clrf	postdec2,c
 25563  005196  5164               	movf	fifo_init@f& (0+255),w,b
 25564  005198  6ED9               	movwf	fsr2l,c
 25565  00519A  6ADA               	clrf	fsr2h,c
 25566  00519C  0012               	return	
 25567  00519E                     __end_ofPL86:
 25568                           	opt stack 0
 25569                           tblptru	equ	0xFF8
 25570                           tblptrh	equ	0xFF7
 25571                           tblptrl	equ	0xFF6
 25572                           tablat	equ	0xFF5
 25573                           prodh	equ	0xFF4
 25574                           prodl	equ	0xFF3
 25575                           intcon	equ	0xFF2
 25576                           indf0	equ	0xFEF
 25577                           postinc0	equ	0xFEE
 25578                           fsr0h	equ	0xFEA
 25579                           fsr0l	equ	0xFE9
 25580                           wreg	equ	0xFE8
 25581                           indf1	equ	0xFE7
 25582                           postinc1	equ	0xFE6
 25583                           postdec1	equ	0xFE5
 25584                           fsr1h	equ	0xFE2
 25585                           fsr1l	equ	0xFE1
 25586                           indf2	equ	0xFDF
 25587                           postinc2	equ	0xFDE
 25588                           postdec2	equ	0xFDD
 25589                           plusw2	equ	0xFDB
 25590                           fsr2h	equ	0xFDA
 25591                           fsr2l	equ	0xFD9
 25592                           status	equ	0xFD8
 25593                           
 25594 ;; *************** function _Interrupt *****************
 25595 ;; Defined at:
 25596 ;;		line 131 in file "main.c"
 25597 ;; Parameters:    Size  Location     Type
 25598 ;;		None
 25599 ;; Auto vars:     Size  Location     Type
 25600 ;;  data            8   25[COMRAM] unsigned char [8]
 25601 ;;  id              4   36[COMRAM] unsigned long 
 25602 ;;  flags           1   35[COMRAM] enum E16349
 25603 ;;  dlc             1   34[COMRAM] unsigned char 
 25604 ;;  c               1   33[COMRAM] unsigned char 
 25605 ;; Return value:  Size  Location     Type
 25606 ;;		None               void
 25607 ;; Registers used:
 25608 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 25609 ;; Tracked objects:
 25610 ;;		On entry : 0/0
 25611 ;;		On exit  : 0/0
 25612 ;;		Unchanged: 0/0
 25613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25614 ;;      Params:         0       0       0       0       0       0       0
 25615 ;;      Locals:        15       0       0       0       0       0       0
 25616 ;;      Temps:          7       0       0       0       0       0       0
 25617 ;;      Totals:        22       0       0       0       0       0       0
 25618 ;;Total ram usage:       22 bytes
 25619 ;; Hardware stack levels used:    1
 25620 ;; Hardware stack levels required when called:    2
 25621 ;; This function calls:
 25622 ;;		_ReadUSART
 25623 ;;		_fifo_write
 25624 ;;		_ECANReceiveMessage
 25625 ;;		_fifo_getFree
 25626 ;;		i1_WriteTimer0
 25627 ;; This function is called by:
 25628 ;;		Interrupt level 1
 25629 ;; This function uses a non-reentrant model
 25630 ;;
 25631                           
 25632                           	psect	intcodelo
 25633  000018                     __pintcodelo:
 25634                           	opt stack 0
 25635  000018                     _Interrupt:
 25636                           	opt stack 20
 25637                           
 25638                           ; BSR set to: 0
 25639                           ;incstack = 0
 25640  000018  CFD8 F013          	movff	status,??_Interrupt
 25641  00001C  CFE8 F014          	movff	wreg,??_Interrupt+1
 25642  000020  CFE0 F015          	movff	bsr,??_Interrupt+2
 25643  000024  CFE1 F016          	movff	fsr1l,??_Interrupt+3
 25644  000028  CFE2 F017          	movff	fsr1h,??_Interrupt+4
 25645  00002C  CFD9 F018          	movff	fsr2l,??_Interrupt+5
 25646  000030  CFDA F019          	movff	fsr2h,??_Interrupt+6
 25647  000034                     
 25648                           ;main.c: 132: uint8_t c;
 25649                           ;main.c: 135: if (1 == PIR1bits.RCIF) {
 25650  000034  AA9E               	btfss	3998,5,c	;volatile
 25651  000036  D001               	goto	i1u1612_21
 25652  000038  D001               	goto	i1u1612_20
 25653  00003A                     i1u1612_21:
 25654  00003A  D021               	goto	i1l371
 25655  00003C                     i1u1612_20:
 25656  00003C                     
 25657                           ;main.c: 137: c = ReadUSART();
 25658  00003C  EC10  F02A         	call	_ReadUSART	;wreg free
 25659  000040  6E22               	movwf	Interrupt@c,c
 25660  000042                     
 25661                           ;main.c: 139: if (1 != fifo_write(&serialInputFifo, &c, 1)) {
 25662  000042  0E22               	movlw	low Interrupt@c
 25663  000044  6E01               	movwf	?_fifo_write,c
 25664  000046  0E01               	movlw	1
 25665  000048  6E02               	movwf	?_fifo_write+1,c
 25666  00004A  0E00               	movlw	0
 25667  00004C  6E03               	movwf	?_fifo_write+2,c
 25668  00004E  0E00               	movlw	0
 25669  000050  6E04               	movwf	?_fifo_write+3,c
 25670  000052  0E00               	movlw	0
 25671  000054  6E05               	movwf	?_fifo_write+4,c
 25672  000056  0E3E               	movlw	_serialInputFifo& (0+255)
 25673  000058  ECAF  F01A         	call	_fifo_write
 25674  00005C  0401               	decf	?_fifo_write,w,c
 25675  00005E  1002               	iorwf	?_fifo_write+1,w,c
 25676  000060  B4D8               	btfsc	status,2,c
 25677  000062  D001               	goto	i1u1613_21
 25678  000064  D001               	goto	i1u1613_20
 25679  000066                     i1u1613_21:
 25680  000066  D009               	goto	i1l12344
 25681  000068                     i1u1613_20:
 25682  000068                     
 25683                           ;main.c: 141: uart_receiveOverruns++;
 25684  000068  0E01               	movlw	1
 25685  00006A  0100               	movlb	0	; () banked
 25686  00006C  27F1               	addwf	_uart_receiveOverruns& (0+255),f,b
 25687  00006E  0E00               	movlw	0
 25688  000070  23F2               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 25689  000072  0E00               	movlw	0
 25690  000074  23F3               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 25691  000076  0E00               	movlw	0
 25692  000078  23F4               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 25693  00007A                     i1l12344:
 25694                           
 25695                           ;main.c: 142: }
 25696                           ;main.c: 145: PIR1bits.RCIF = 0;
 25697  00007A  9A9E               	bcf	3998,5,c	;volatile
 25698                           
 25699                           ;main.c: 146: }
 25700  00007C  D07D               	goto	i1l373
 25701  00007E                     i1l371:
 25702                           
 25703                           ;main.c: 148: else if (1 == INTCONbits.TMR0IF) {
 25704  00007E  A4F2               	btfss	intcon,2,c	;volatile
 25705  000080  D001               	goto	i1u1614_21
 25706  000082  D001               	goto	i1u1614_20
 25707  000084                     i1u1614_21:
 25708  000084  D079               	goto	i1l373
 25709  000086                     i1u1614_20:
 25710  000086                     
 25711                           ;main.c: 150: WriteTimer0(0xfb1d);
 25712  000086  0EFB               	movlw	251
 25713  000088  6E02               	movwf	?i1_WriteTimer0+1,c
 25714  00008A  0E1D               	movlw	29
 25715  00008C  6E01               	movwf	?i1_WriteTimer0,c
 25716  00008E  EC53  F02A         	call	i1_WriteTimer0	;wreg free
 25717  000092                     
 25718                           ;main.c: 152: timer++;
 25719  000092  0E01               	movlw	1
 25720  000094  0100               	movlb	0	; () banked
 25721  000096  27ED               	addwf	_timer& (0+255),f,b	;volatile
 25722  000098  0E00               	movlw	0
 25723  00009A  23EE               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 25724  00009C  0E00               	movlw	0
 25725  00009E  23EF               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 25726  0000A0  0E00               	movlw	0
 25727  0000A2  23F0               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 25728  0000A4                     
 25729                           ; BSR set to: 0
 25730                           ;main.c: 153: timekeeper++;
 25731  0000A4  0E01               	movlw	1
 25732  0000A6  27E9               	addwf	_timekeeper& (0+255),f,b	;volatile
 25733  0000A8  0E00               	movlw	0
 25734  0000AA  23EA               	addwfc	(_timekeeper+1)& (0+255),f,b	;volatile
 25735  0000AC  0E00               	movlw	0
 25736  0000AE  23EB               	addwfc	(_timekeeper+2)& (0+255),f,b	;volatile
 25737  0000B0  0E00               	movlw	0
 25738  0000B2  23EC               	addwfc	(_timekeeper+3)& (0+255),f,b	;volatile
 25739  0000B4                     
 25740                           ; BSR set to: 0
 25741                           ;main.c: 156: status_led_cnt++;
 25742  0000B4  4A2F               	infsnz	_status_led_cnt,f,c	;volatile
 25743  0000B6  2A30               	incf	_status_led_cnt+1,f,c	;volatile
 25744  0000B8                     
 25745                           ; BSR set to: 0
 25746                           ;main.c: 157: if ((2 == ledFunctionality) &&
 25747                           ;main.c: 158: (status_led_cnt > 1000)) {
 25748  0000B8  5035               	movf	_ledFunctionality,w,c
 25749  0000BA  0A02               	xorlw	2
 25750  0000BC  A4D8               	btfss	status,2,c
 25751  0000BE  D001               	goto	i1u1615_21
 25752  0000C0  D001               	goto	i1u1615_20
 25753  0000C2                     i1u1615_21:
 25754  0000C2  D00C               	goto	i1l12360
 25755  0000C4                     i1u1615_20:
 25756  0000C4                     
 25757                           ; BSR set to: 0
 25758  0000C4  0EE9               	movlw	233
 25759  0000C6  5C2F               	subwf	_status_led_cnt,w,c	;volatile
 25760  0000C8  0E03               	movlw	3
 25761  0000CA  5830               	subwfb	_status_led_cnt+1,w,c	;volatile
 25762  0000CC  A0D8               	btfss	status,0,c
 25763  0000CE  D001               	goto	i1u1616_21
 25764  0000D0  D001               	goto	i1u1616_20
 25765  0000D2                     i1u1616_21:
 25766  0000D2  D004               	goto	i1l12360
 25767  0000D4                     i1u1616_20:
 25768  0000D4                     i1l12358:
 25769                           
 25770                           ; BSR set to: 0
 25771                           ;main.c: 159: LATC1 = ~LATC1;
 25772  0000D4  728B               	btg	3979,1,c	;volatile
 25773                           
 25774                           ;main.c: 160: status_led_cnt = 0;
 25775  0000D6  6A2F               	clrf	_status_led_cnt,c	;volatile
 25776  0000D8  6A30               	clrf	_status_led_cnt+1,c	;volatile
 25777                           
 25778                           ;main.c: 161: }
 25779  0000DA  D04D               	goto	i1l376
 25780  0000DC                     i1l12360:
 25781                           
 25782                           ; BSR set to: 0
 25783                           ;main.c: 162: else if ((3 == ledFunctionality) &&
 25784                           ;main.c: 163: (status_led_cnt > 400)) {
 25785  0000DC  5035               	movf	_ledFunctionality,w,c
 25786  0000DE  0A03               	xorlw	3
 25787  0000E0  A4D8               	btfss	status,2,c
 25788  0000E2  D001               	goto	i1u1617_21
 25789  0000E4  D001               	goto	i1u1617_20
 25790  0000E6                     i1u1617_21:
 25791  0000E6  D009               	goto	i1l12366
 25792  0000E8                     i1u1617_20:
 25793  0000E8                     
 25794                           ; BSR set to: 0
 25795  0000E8  0E91               	movlw	145
 25796  0000EA  5C2F               	subwf	_status_led_cnt,w,c	;volatile
 25797  0000EC  0E01               	movlw	1
 25798  0000EE  5830               	subwfb	_status_led_cnt+1,w,c	;volatile
 25799  0000F0  A0D8               	btfss	status,0,c
 25800  0000F2  D001               	goto	i1u1618_21
 25801  0000F4  D001               	goto	i1u1618_20
 25802  0000F6                     i1u1618_21:
 25803  0000F6  D001               	goto	i1l12366
 25804  0000F8                     i1u1618_20:
 25805  0000F8  D7ED               	goto	i1l12358
 25806  0000FA                     i1l12366:
 25807                           
 25808                           ; BSR set to: 0
 25809                           ;main.c: 167: else if ((4 == ledFunctionality) &&
 25810                           ;main.c: 168: (status_led_cnt > 100)) {
 25811  0000FA  5035               	movf	_ledFunctionality,w,c
 25812  0000FC  0A04               	xorlw	4
 25813  0000FE  A4D8               	btfss	status,2,c
 25814  000100  D001               	goto	i1u1619_21
 25815  000102  D001               	goto	i1u1619_20
 25816  000104                     i1u1619_21:
 25817  000104  D009               	goto	i1l12372
 25818  000106                     i1u1619_20:
 25819  000106                     
 25820                           ; BSR set to: 0
 25821  000106  0E65               	movlw	101
 25822  000108  5C2F               	subwf	_status_led_cnt,w,c	;volatile
 25823  00010A  0E00               	movlw	0
 25824  00010C  5830               	subwfb	_status_led_cnt+1,w,c	;volatile
 25825  00010E  A0D8               	btfss	status,0,c
 25826  000110  D001               	goto	i1u1620_21
 25827  000112  D001               	goto	i1u1620_20
 25828  000114                     i1u1620_21:
 25829  000114  D001               	goto	i1l12372
 25830  000116                     i1u1620_20:
 25831  000116  D7DE               	goto	i1l12358
 25832  000118                     i1l12372:
 25833                           
 25834                           ; BSR set to: 0
 25835                           ;main.c: 172: else if ((5 == ledFunctionality) &&
 25836                           ;main.c: 173: (status_led_cnt > 70)) {
 25837  000118  5035               	movf	_ledFunctionality,w,c
 25838  00011A  0A05               	xorlw	5
 25839  00011C  A4D8               	btfss	status,2,c
 25840  00011E  D001               	goto	i1u1621_21
 25841  000120  D001               	goto	i1u1621_20
 25842  000122                     i1u1621_21:
 25843  000122  D009               	goto	i1l12378
 25844  000124                     i1u1621_20:
 25845  000124                     
 25846                           ; BSR set to: 0
 25847  000124  0E47               	movlw	71
 25848  000126  5C2F               	subwf	_status_led_cnt,w,c	;volatile
 25849  000128  0E00               	movlw	0
 25850  00012A  5830               	subwfb	_status_led_cnt+1,w,c	;volatile
 25851  00012C  A0D8               	btfss	status,0,c
 25852  00012E  D001               	goto	i1u1622_21
 25853  000130  D001               	goto	i1u1622_20
 25854  000132                     i1u1622_21:
 25855  000132  D001               	goto	i1l12378
 25856  000134                     i1u1622_20:
 25857  000134  D7CF               	goto	i1l12358
 25858  000136                     i1l12378:
 25859                           
 25860                           ; BSR set to: 0
 25861                           ;main.c: 177: else if ((6 == ledFunctionality) &&
 25862                           ;main.c: 178: (status_led_cnt > 40)) {
 25863  000136  5035               	movf	_ledFunctionality,w,c
 25864  000138  0A06               	xorlw	6
 25865  00013A  A4D8               	btfss	status,2,c
 25866  00013C  D001               	goto	i1u1623_21
 25867  00013E  D001               	goto	i1u1623_20
 25868  000140                     i1u1623_21:
 25869  000140  D009               	goto	i1l12384
 25870  000142                     i1u1623_20:
 25871  000142                     
 25872                           ; BSR set to: 0
 25873  000142  0E29               	movlw	41
 25874  000144  5C2F               	subwf	_status_led_cnt,w,c	;volatile
 25875  000146  0E00               	movlw	0
 25876  000148  5830               	subwfb	_status_led_cnt+1,w,c	;volatile
 25877  00014A  A0D8               	btfss	status,0,c
 25878  00014C  D001               	goto	i1u1624_21
 25879  00014E  D001               	goto	i1u1624_20
 25880  000150                     i1u1624_21:
 25881  000150  D001               	goto	i1l12384
 25882  000152                     i1u1624_20:
 25883  000152  D7C0               	goto	i1l12358
 25884  000154                     i1l12384:
 25885                           
 25886                           ; BSR set to: 0
 25887                           ;main.c: 182: else if (1 == ledFunctionality) {
 25888  000154  0435               	decf	_ledFunctionality,w,c
 25889  000156  A4D8               	btfss	status,2,c
 25890  000158  D001               	goto	i1u1625_21
 25891  00015A  D001               	goto	i1u1625_20
 25892  00015C                     i1u1625_21:
 25893  00015C  D004               	goto	i1l385
 25894  00015E                     i1u1625_20:
 25895  00015E                     
 25896                           ; BSR set to: 0
 25897                           ;main.c: 183: LATC1 = 1;
 25898  00015E  828B               	bsf	3979,1,c	;volatile
 25899                           
 25900                           ;main.c: 184: status_led_cnt = 0;
 25901  000160  6A2F               	clrf	_status_led_cnt,c	;volatile
 25902  000162  6A30               	clrf	_status_led_cnt+1,c	;volatile
 25903                           
 25904                           ;main.c: 185: }
 25905  000164  D008               	goto	i1l376
 25906  000166                     i1l385:
 25907                           
 25908                           ; BSR set to: 0
 25909                           ;main.c: 186: else if (0 == ledFunctionality) {
 25910  000166  6635               	tstfsz	_ledFunctionality,c
 25911  000168  D001               	goto	i1u1626_21
 25912  00016A  D001               	goto	i1u1626_20
 25913  00016C                     i1u1626_21:
 25914  00016C  D004               	goto	i1l382
 25915  00016E                     i1u1626_20:
 25916  00016E                     
 25917                           ; BSR set to: 0
 25918                           ;main.c: 187: LATC1 = 0;
 25919  00016E  928B               	bcf	3979,1,c	;volatile
 25920                           
 25921                           ;main.c: 188: status_led_cnt = 0;
 25922  000170  6A2F               	clrf	_status_led_cnt,c	;volatile
 25923  000172  6A30               	clrf	_status_led_cnt+1,c	;volatile
 25924  000174  D000               	goto	i1l376
 25925  000176                     i1l382:
 25926  000176                     i1l376:
 25927                           
 25928                           ; BSR set to: 0
 25929                           ;main.c: 189: }
 25930                           ;main.c: 191: INTCONbits.TMR0IF = 0;
 25931  000176  94F2               	bcf	intcon,2,c	;volatile
 25932  000178                     i1l373:
 25933                           
 25934                           ;main.c: 192: }
 25935                           ;main.c: 195: if ( 1 == PIR3bits.RXBNIF ) {
 25936  000178  A2A4               	btfss	4004,1,c	;volatile
 25937  00017A  D001               	goto	i1u1627_21
 25938  00017C  D001               	goto	i1u1627_20
 25939  00017E                     i1u1627_21:
 25940  00017E  D046               	goto	i1l391
 25941  000180                     i1u1627_20:
 25942  000180                     
 25943                           ;main.c: 197: uint32_t id;
 25944                           ;main.c: 198: uint8_t dlc;
 25945                           ;main.c: 199: uint8_t data[8];
 25946                           ;main.c: 200: ECAN_RX_MSG_FLAGS flags;
 25947                           ;main.c: 202: if ( ECANReceiveMessage((unsigned long *)&id,
 25948                           ;main.c: 203: (BYTE*)&data,
 25949                           ;main.c: 204: (BYTE*)&dlc,
 25950                           ;main.c: 205: &flags) ) {
 25951  000180  0E1A               	movlw	low Interrupt@data
 25952  000182  6E08               	movwf	?_ECANReceiveMessage,c
 25953  000184  0E23               	movlw	low Interrupt@dlc
 25954  000186  6E09               	movwf	?_ECANReceiveMessage+1,c
 25955  000188  0E24               	movlw	low Interrupt@flags
 25956  00018A  6E0A               	movwf	?_ECANReceiveMessage+2,c
 25957  00018C  0E25               	movlw	Interrupt@id& (0+255)
 25958  00018E  EC00  F013         	call	_ECANReceiveMessage
 25959  000192  0900               	iorlw	0
 25960  000194  B4D8               	btfsc	status,2,c
 25961  000196  D001               	goto	i1u1628_21
 25962  000198  D001               	goto	i1u1628_20
 25963  00019A                     i1u1628_21:
 25964  00019A  D037               	goto	i1l12400
 25965  00019C                     i1u1628_20:
 25966  00019C                     
 25967                           ;main.c: 208: if ( !(flags & ECAN_RX_RTR_FRAME) &&
 25968                           ;main.c: 209: (flags & ECAN_RX_XTD_FRAME) &&
 25969                           ;main.c: 210: (fifo_getFree( &canInputFifo ) >= 13 ) ) {
 25970  00019C  BC24               	btfsc	Interrupt@flags,6,c
 25971  00019E  D001               	goto	i1u1629_21
 25972  0001A0  D001               	goto	i1u1629_20
 25973  0001A2                     i1u1629_21:
 25974  0001A2  D033               	goto	i1l12400
 25975  0001A4                     i1u1629_20:
 25976  0001A4  AA24               	btfss	Interrupt@flags,5,c
 25977  0001A6  D001               	goto	i1u1630_21
 25978  0001A8  D001               	goto	i1u1630_20
 25979  0001AA                     i1u1630_21:
 25980  0001AA  D02F               	goto	i1l12400
 25981  0001AC                     i1u1630_20:
 25982  0001AC  0E36               	movlw	_canInputFifo& (0+255)
 25983  0001AE  EC71  F022         	call	_fifo_getFree
 25984  0001B2  0E0D               	movlw	13
 25985  0001B4  5C01               	subwf	?_fifo_getFree,w,c
 25986  0001B6  0E00               	movlw	0
 25987  0001B8  5802               	subwfb	?_fifo_getFree+1,w,c
 25988  0001BA  A0D8               	btfss	status,0,c
 25989  0001BC  D001               	goto	i1u1631_21
 25990  0001BE  D001               	goto	i1u1631_20
 25991  0001C0                     i1u1631_21:
 25992  0001C0  D024               	goto	i1l12400
 25993  0001C2                     i1u1631_20:
 25994  0001C2                     
 25995                           ;main.c: 212: fifo_write( &canInputFifo, (uint8_t *)&id, 4 );
 25996  0001C2  0E25               	movlw	low Interrupt@id
 25997  0001C4  6E01               	movwf	?_fifo_write,c
 25998  0001C6  0E04               	movlw	4
 25999  0001C8  6E02               	movwf	?_fifo_write+1,c
 26000  0001CA  0E00               	movlw	0
 26001  0001CC  6E03               	movwf	?_fifo_write+2,c
 26002  0001CE  0E00               	movlw	0
 26003  0001D0  6E04               	movwf	?_fifo_write+3,c
 26004  0001D2  0E00               	movlw	0
 26005  0001D4  6E05               	movwf	?_fifo_write+4,c
 26006  0001D6  0E36               	movlw	_canInputFifo& (0+255)
 26007  0001D8  ECAF  F01A         	call	_fifo_write
 26008                           
 26009                           ;main.c: 213: fifo_write( &canInputFifo, &dlc, 1 );
 26010  0001DC  0E23               	movlw	low Interrupt@dlc
 26011  0001DE  6E01               	movwf	?_fifo_write,c
 26012  0001E0  0E01               	movlw	1
 26013  0001E2  6E02               	movwf	?_fifo_write+1,c
 26014  0001E4  0E00               	movlw	0
 26015  0001E6  6E03               	movwf	?_fifo_write+2,c
 26016  0001E8  0E00               	movlw	0
 26017  0001EA  6E04               	movwf	?_fifo_write+3,c
 26018  0001EC  0E00               	movlw	0
 26019  0001EE  6E05               	movwf	?_fifo_write+4,c
 26020  0001F0  0E36               	movlw	_canInputFifo& (0+255)
 26021  0001F2  ECAF  F01A         	call	_fifo_write
 26022                           
 26023                           ;main.c: 214: fifo_write( &canInputFifo, (uint8_t *)&data, dlc );
 26024  0001F6  0E1A               	movlw	low Interrupt@data
 26025  0001F8  6E01               	movwf	?_fifo_write,c
 26026  0001FA  5023               	movf	Interrupt@dlc,w,c
 26027  0001FC  6E02               	movwf	?_fifo_write+1,c
 26028  0001FE  6A03               	clrf	?_fifo_write+2,c
 26029  000200  6A04               	clrf	?_fifo_write+3,c
 26030  000202  6A05               	clrf	?_fifo_write+4,c
 26031  000204  0E36               	movlw	_canInputFifo& (0+255)
 26032  000206  ECAF  F01A         	call	_fifo_write
 26033  00020A                     i1l12400:
 26034                           
 26035                           ;main.c: 216: }
 26036                           ;main.c: 218: }
 26037                           ;main.c: 220: PIR3bits.RXBNIF = 0;
 26038  00020A  92A4               	bcf	4004,1,c	;volatile
 26039  00020C                     i1l391:
 26040  00020C  C019  FFDA         	movff	??_Interrupt+6,fsr2h
 26041  000210  C018  FFD9         	movff	??_Interrupt+5,fsr2l
 26042  000214  C017  FFE2         	movff	??_Interrupt+4,fsr1h
 26043  000218  C016  FFE1         	movff	??_Interrupt+3,fsr1l
 26044  00021C  C015  FFE0         	movff	??_Interrupt+2,bsr
 26045  000220  C014  FFE8         	movff	??_Interrupt+1,wreg
 26046  000224  C013  FFD8         	movff	??_Interrupt,status
 26047  000228  0010               	retfie	
 26048  00022A                     __end_of_Interrupt:
 26049                           	opt stack 0
 26050                           tblptru	equ	0xFF8
 26051                           tblptrh	equ	0xFF7
 26052                           tblptrl	equ	0xFF6
 26053                           tablat	equ	0xFF5
 26054                           prodh	equ	0xFF4
 26055                           prodl	equ	0xFF3
 26056                           intcon	equ	0xFF2
 26057                           indf0	equ	0xFEF
 26058                           postinc0	equ	0xFEE
 26059                           fsr0h	equ	0xFEA
 26060                           fsr0l	equ	0xFE9
 26061                           wreg	equ	0xFE8
 26062                           indf1	equ	0xFE7
 26063                           postinc1	equ	0xFE6
 26064                           postdec1	equ	0xFE5
 26065                           fsr1h	equ	0xFE2
 26066                           fsr1l	equ	0xFE1
 26067                           bsr	equ	0xFE0
 26068                           indf2	equ	0xFDF
 26069                           postinc2	equ	0xFDE
 26070                           postdec2	equ	0xFDD
 26071                           plusw2	equ	0xFDB
 26072                           fsr2h	equ	0xFDA
 26073                           fsr2l	equ	0xFD9
 26074                           status	equ	0xFD8
 26075                           
 26076 ;; *************** function i1_WriteTimer0 *****************
 26077 ;; Defined at:
 26078 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 26079 ;; Parameters:    Size  Location     Type
 26080 ;;  timer0          2    0[COMRAM] unsigned int 
 26081 ;; Auto vars:     Size  Location     Type
 26082 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 26083 ;; Return value:  Size  Location     Type
 26084 ;;		None               void
 26085 ;; Registers used:
 26086 ;;		None
 26087 ;; Tracked objects:
 26088 ;;		On entry : 0/0
 26089 ;;		On exit  : 0/0
 26090 ;;		Unchanged: 0/0
 26091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26092 ;;      Params:         2       0       0       0       0       0       0
 26093 ;;      Locals:         2       0       0       0       0       0       0
 26094 ;;      Temps:          0       0       0       0       0       0       0
 26095 ;;      Totals:         4       0       0       0       0       0       0
 26096 ;;Total ram usage:        4 bytes
 26097 ;; Hardware stack levels used:    1
 26098 ;; This function calls:
 26099 ;;		Nothing
 26100 ;; This function is called by:
 26101 ;;		_Interrupt
 26102 ;; This function uses a non-reentrant model
 26103 ;;
 26104                           
 26105                           	psect	text79
 26106  0054A6                     __ptext79:
 26107                           	opt stack 0
 26108  0054A6                     i1_WriteTimer0:
 26109                           	opt stack 21
 26110                           
 26111                           ;incstack = 0
 26112                           ;incstack = 0
 26113  0054A6  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 26114  0054AA  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 26115  0054AE  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 26116  0054B2  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 26117  0054B6  0012               	return	
 26118  0054B8                     __end_ofi1_WriteTimer0:
 26119                           	opt stack 0
 26120                           tblptru	equ	0xFF8
 26121                           tblptrh	equ	0xFF7
 26122                           tblptrl	equ	0xFF6
 26123                           tablat	equ	0xFF5
 26124                           prodh	equ	0xFF4
 26125                           prodl	equ	0xFF3
 26126                           intcon	equ	0xFF2
 26127                           indf0	equ	0xFEF
 26128                           postinc0	equ	0xFEE
 26129                           fsr0h	equ	0xFEA
 26130                           fsr0l	equ	0xFE9
 26131                           wreg	equ	0xFE8
 26132                           indf1	equ	0xFE7
 26133                           postinc1	equ	0xFE6
 26134                           postdec1	equ	0xFE5
 26135                           fsr1h	equ	0xFE2
 26136                           fsr1l	equ	0xFE1
 26137                           bsr	equ	0xFE0
 26138                           indf2	equ	0xFDF
 26139                           postinc2	equ	0xFDE
 26140                           postdec2	equ	0xFDD
 26141                           plusw2	equ	0xFDB
 26142                           fsr2h	equ	0xFDA
 26143                           fsr2l	equ	0xFD9
 26144                           status	equ	0xFD8
 26145                           
 26146 ;; *************** function _fifo_getFree *****************
 26147 ;; Defined at:
 26148 ;;		line 96 in file "fifo.c"
 26149 ;; Parameters:    Size  Location     Type
 26150 ;;  f               1    wreg     PTR struct .
 26151 ;;		 -> canInputFifo(8), 
 26152 ;; Auto vars:     Size  Location     Type
 26153 ;;  f               1   10[COMRAM] PTR struct .
 26154 ;;		 -> canInputFifo(8), 
 26155 ;; Return value:  Size  Location     Type
 26156 ;;                  2    0[COMRAM] unsigned short 
 26157 ;; Registers used:
 26158 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26159 ;; Tracked objects:
 26160 ;;		On entry : 0/0
 26161 ;;		On exit  : 0/0
 26162 ;;		Unchanged: 0/0
 26163 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26164 ;;      Params:         2       0       0       0       0       0       0
 26165 ;;      Locals:         1       0       0       0       0       0       0
 26166 ;;      Temps:          8       0       0       0       0       0       0
 26167 ;;      Totals:        11       0       0       0       0       0       0
 26168 ;;Total ram usage:       11 bytes
 26169 ;; Hardware stack levels used:    1
 26170 ;; This function calls:
 26171 ;;		Nothing
 26172 ;; This function is called by:
 26173 ;;		_Interrupt
 26174 ;; This function uses a non-reentrant model
 26175 ;;
 26176                           
 26177                           	psect	text80
 26178  0044E2                     __ptext80:
 26179                           	opt stack 0
 26180  0044E2                     _fifo_getFree:
 26181                           	opt stack 21
 26182                           
 26183                           ;incstack = 0
 26184                           ;incstack = 0
 26185                           ;fifo_getFree@f stored from wreg
 26186  0044E2  CFE8 F00B          	movff	wreg,fifo_getFree@f
 26187                           
 26188                           ;fifo.c: 97: if (f->head < f->tail) {
 26189  0044E6  D83F               	call	PL66	;call to abstracted procedure
 26190  0044E8  500B               	movf	fifo_getFree@f,w,c
 26191  0044EA  6EE1               	movwf	fsr1l,c
 26192  0044EC  6AE2               	clrf	fsr1h,c
 26193  0044EE  0E02               	movlw	2
 26194  0044F0  26E1               	addwf	fsr1l,f,c
 26195  0044F2  6AE2               	clrf	fsr1h,c
 26196  0044F4  52E6               	movf	postinc1,f,c
 26197  0044F6  52DE               	movf	postinc2,f,c
 26198  0044F8  50DD               	movf	postdec2,w,c
 26199  0044FA  5CE5               	subwf	postdec1,w,c
 26200  0044FC  E102               	bnz	i1u588_25
 26201  0044FE  50DF               	movf	indf2,w,c
 26202  004500  5CE7               	subwf	indf1,w,c
 26203  004502                     i1u588_25:
 26204  004502  E210               	bc	i1l6060
 26205                           
 26206                           ;fifo.c: 98: return (f->tail - f->head);
 26207  004504  D837               	call	PL104	;call to abstracted procedure
 26208  004506  CFDE F003          	movff	postinc2,??_fifo_getFree
 26209  00450A  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 26210  00450E  D82B               	call	PL66	;call to abstracted procedure
 26211  004510  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 26212  004514  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 26213  004518  5003               	movf	??_fifo_getFree,w,c
 26214  00451A  5C05               	subwf	??_fifo_getFree+2,w,c
 26215  00451C  6E01               	movwf	?_fifo_getFree,c
 26216  00451E  5004               	movf	??_fifo_getFree+1,w,c
 26217  004520  5806               	subwfb	??_fifo_getFree+3,w,c
 26218  004522  D01F               	goto	L41
 26219  004524                     i1l6060:
 26220                           
 26221                           ;fifo.c: 100: else {
 26222                           ;fifo.c: 101: return (f->size + (f->tail - f->head));
 26223  004524  D820               	call	PL66	;call to abstracted procedure
 26224  004526  CFDE F003          	movff	postinc2,??_fifo_getFree
 26225  00452A  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 26226  00452E  D822               	call	PL104	;call to abstracted procedure
 26227  004530  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 26228  004534  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 26229  004538  500B               	movf	fifo_getFree@f,w,c
 26230  00453A  6ED9               	movwf	fsr2l,c
 26231  00453C  6ADA               	clrf	fsr2h,c
 26232  00453E  0E06               	movlw	6
 26233  004540  26D9               	addwf	fsr2l,f,c
 26234  004542  6ADA               	clrf	fsr2h,c
 26235  004544  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 26236  004548  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 26237  00454C  5005               	movf	??_fifo_getFree+2,w,c
 26238  00454E  5C07               	subwf	??_fifo_getFree+4,w,c
 26239  004550  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 26240  004552  5006               	movf	??_fifo_getFree+3,w,c
 26241  004554  5808               	subwfb	??_fifo_getFree+5,w,c
 26242  004556  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 26243  004558  5003               	movf	??_fifo_getFree,w,c
 26244  00455A  2409               	addwf	??_fifo_getFree+6,w,c
 26245  00455C  6E01               	movwf	?_fifo_getFree,c
 26246  00455E  5004               	movf	??_fifo_getFree+1,w,c
 26247  004560  200A               	addwfc	??_fifo_getFree+7,w,c
 26248  004562                     L41:
 26249  004562  6E02               	movwf	?_fifo_getFree+1,c
 26250  004564  0012               	return	
 26251  004566                     __end_of_fifo_getFree:
 26252                           	opt stack 0
 26253  004566                     PL66:
 26254                           	opt stack 21
 26255  004566  500B               	movf	fifo_getFree@f,w,c
 26256  004568  6ED9               	movwf	fsr2l,c
 26257  00456A  6ADA               	clrf	fsr2h,c
 26258  00456C  0E04               	movlw	4
 26259  00456E  26D9               	addwf	fsr2l,f,c
 26260  004570  6ADA               	clrf	fsr2h,c
 26261  004572  0012               	return	
 26262  004574                     __end_ofPL66:
 26263                           	opt stack 0
 26264  004574                     PL104:
 26265                           	opt stack 21
 26266  004574  500B               	movf	fifo_getFree@f,w,c
 26267  004576  6ED9               	movwf	fsr2l,c
 26268  004578  6ADA               	clrf	fsr2h,c
 26269  00457A  0E02               	movlw	2
 26270  00457C  26D9               	addwf	fsr2l,f,c
 26271  00457E  6ADA               	clrf	fsr2h,c
 26272  004580  0012               	return	
 26273  004582                     __end_ofPL104:
 26274                           	opt stack 0
 26275                           tblptru	equ	0xFF8
 26276                           tblptrh	equ	0xFF7
 26277                           tblptrl	equ	0xFF6
 26278                           tablat	equ	0xFF5
 26279                           prodh	equ	0xFF4
 26280                           prodl	equ	0xFF3
 26281                           intcon	equ	0xFF2
 26282                           indf0	equ	0xFEF
 26283                           postinc0	equ	0xFEE
 26284                           fsr0h	equ	0xFEA
 26285                           fsr0l	equ	0xFE9
 26286                           wreg	equ	0xFE8
 26287                           indf1	equ	0xFE7
 26288                           postinc1	equ	0xFE6
 26289                           postdec1	equ	0xFE5
 26290                           fsr1h	equ	0xFE2
 26291                           fsr1l	equ	0xFE1
 26292                           bsr	equ	0xFE0
 26293                           indf2	equ	0xFDF
 26294                           postinc2	equ	0xFDE
 26295                           postdec2	equ	0xFDD
 26296                           plusw2	equ	0xFDB
 26297                           fsr2h	equ	0xFDA
 26298                           fsr2l	equ	0xFD9
 26299                           status	equ	0xFD8
 26300                           
 26301 ;; *************** function _ECANReceiveMessage *****************
 26302 ;; Defined at:
 26303 ;;		line 803 in file "ECAN.c"
 26304 ;; Parameters:    Size  Location     Type
 26305 ;;  id              1    wreg     PTR unsigned long 
 26306 ;;		 -> Interrupt@id(4), 
 26307 ;;  data            1    7[COMRAM] PTR unsigned char 
 26308 ;;		 -> Interrupt@data(8), 
 26309 ;;  dataLen         1    8[COMRAM] PTR unsigned char 
 26310 ;;		 -> Interrupt@dlc(1), 
 26311 ;;  msgFlags        1    9[COMRAM] PTR enum E16324
 26312 ;;		 -> Interrupt@flags(1), 
 26313 ;; Auto vars:     Size  Location     Type
 26314 ;;  id              1   12[COMRAM] PTR unsigned long 
 26315 ;;		 -> Interrupt@id(4), 
 26316 ;;  ptr             2   16[COMRAM] PTR unsigned char 
 26317 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 26318 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 26319 ;;  savedPtr        2   10[COMRAM] PTR unsigned char 
 26320 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 26321 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 26322 ;;  temp            1   15[COMRAM] struct .
 26323 ;;  mode            1   14[COMRAM] unsigned char 
 26324 ;;  i               1   13[COMRAM] unsigned char 
 26325 ;; Return value:  Size  Location     Type
 26326 ;;                  1    wreg      enum E15660
 26327 ;; Registers used:
 26328 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26329 ;; Tracked objects:
 26330 ;;		On entry : 0/0
 26331 ;;		On exit  : 0/0
 26332 ;;		Unchanged: 0/0
 26333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26334 ;;      Params:         3       0       0       0       0       0       0
 26335 ;;      Locals:         8       0       0       0       0       0       0
 26336 ;;      Temps:          0       0       0       0       0       0       0
 26337 ;;      Totals:        11       0       0       0       0       0       0
 26338 ;;Total ram usage:       11 bytes
 26339 ;; Hardware stack levels used:    1
 26340 ;; Hardware stack levels required when called:    1
 26341 ;; This function calls:
 26342 ;;		__ECANPointBuffer
 26343 ;;		__RegsToCANID
 26344 ;; This function is called by:
 26345 ;;		_Interrupt
 26346 ;; This function uses a non-reentrant model
 26347 ;;
 26348                           
 26349                           	psect	text81
 26350  002600                     __ptext81:
 26351                           	opt stack 0
 26352  002600                     _ECANReceiveMessage:
 26353                           	opt stack 20
 26354                           
 26355                           ;incstack = 0
 26356                           ;incstack = 0
 26357                           ;ECANReceiveMessage@id stored from wreg
 26358  002600  CFE8 F00D          	movff	wreg,ECANReceiveMessage@id
 26359                           
 26360                           ;ECAN.c: 805: BYTE mode;
 26361                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 26362                           ;ECAN.c: 809: char i;
 26363                           ;ECAN.c: 810: BYTE_VAL temp;
 26364                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 26365  002604  6A34               	clrf	__ECANRxFilterHitInfo,c
 26366                           
 26367                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 26368  002606  5077               	movf	3959,w,c	;volatile
 26369  002608  0BC0               	andlw	192
 26370  00260A  6E0F               	movwf	ECANReceiveMessage@mode,c
 26371                           
 26372                           ;ECAN.c: 816: if ( mode == 0x00 )
 26373  00260C  660F               	tstfsz	ECANReceiveMessage@mode,c
 26374  00260E  D032               	goto	i1l9142
 26375                           
 26376                           ;ECAN.c: 822: {
 26377                           ;ECAN.c: 824: if ( RXB0FUL )
 26378  002610  AE60               	btfss	3936,7,c	;volatile
 26379  002612  D012               	goto	i1l1350
 26380                           
 26381                           ;ECAN.c: 825: {
 26382                           ;ECAN.c: 827: RXB0IF = 0;
 26383  002614  90A4               	bcf	4004,0,c	;volatile
 26384                           
 26385                           ;ECAN.c: 830: if ( RXB0OVFL )
 26386  002616  AE74               	btfss	3956,7,c	;volatile
 26387  002618  D006               	goto	i1l9118
 26388                           
 26389                           ;ECAN.c: 831: {
 26390                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 26391  00261A  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26392  00261C  6ED9               	movwf	fsr2l,c
 26393  00261E  6ADA               	clrf	fsr2h,c
 26394  002620  0E00               	movlw	0
 26395  002622  86DB               	bsf	plusw2,3,c
 26396                           
 26397                           ;ECAN.c: 833: RXB0OVFL = 0;
 26398  002624  9E74               	bcf	3956,7,c	;volatile
 26399  002626                     i1l9118:
 26400                           
 26401                           ;ECAN.c: 834: }
 26402                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 26403  002626  A060               	btfss	3936,0,c	;volatile
 26404  002628  D002               	bra	i1u1081_25
 26405  00262A  8034               	bsf	__ECANRxFilterHitInfo,0,c
 26406  00262C  D001               	bra	i1u1081_27
 26407  00262E                     i1u1081_25:
 26408  00262E  9034               	bcf	__ECANRxFilterHitInfo,0,c
 26409  002630                     i1u1081_27:
 26410                           
 26411                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 26412  002630  0E0F               	movlw	15	;volatile
 26413  002632  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26414  002634  0E60               	movlw	96	;volatile
 26415  002636  D01A               	goto	L42
 26416  002638                     i1l1350:
 26417                           
 26418                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 26419  002638  010F               	movlb	15	; () banked
 26420  00263A  AF50               	btfss	80,7,b	;volatile
 26421  00263C  D019               	goto	i1l9136
 26422                           
 26423                           ; BSR set to: 15
 26424                           ;ECAN.c: 842: {
 26425                           ;ECAN.c: 844: RXB1IF = 0;
 26426  00263E  92A4               	bcf	4004,1,c	;volatile
 26427                           
 26428                           ;ECAN.c: 847: if ( RXB1OVFL )
 26429  002640  AC74               	btfss	3956,6,c	;volatile
 26430  002642  D006               	goto	i1l9128
 26431                           
 26432                           ; BSR set to: 15
 26433                           ;ECAN.c: 848: {
 26434                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 26435  002644  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26436  002646  6ED9               	movwf	fsr2l,c
 26437  002648  6ADA               	clrf	fsr2h,c
 26438  00264A  0E00               	movlw	0
 26439  00264C  86DB               	bsf	plusw2,3,c
 26440                           
 26441                           ; BSR set to: 15
 26442                           ;ECAN.c: 850: RXB1OVFL = 0;
 26443  00264E  9C74               	bcf	3956,6,c	;volatile
 26444  002650                     i1l9128:
 26445                           
 26446                           ; BSR set to: 15
 26447                           ;ECAN.c: 851: }
 26448                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 26449  002650  5150               	movf	80,w,b	;volatile
 26450  002652  0B07               	andlw	7
 26451  002654  6E34               	movwf	__ECANRxFilterHitInfo,c
 26452                           
 26453                           ; BSR set to: 15
 26454                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 26455  002656  0E02               	movlw	2
 26456  002658  6034               	cpfslt	__ECANRxFilterHitInfo,c
 26457  00265A  D005               	goto	i1l9134
 26458                           
 26459                           ; BSR set to: 15
 26460                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 26461  00265C  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26462  00265E  6ED9               	movwf	fsr2l,c
 26463  002660  6ADA               	clrf	fsr2h,c
 26464  002662  0E00               	movlw	0
 26465  002664  8EDB               	bsf	plusw2,7,c
 26466  002666                     i1l9134:
 26467                           
 26468                           ; BSR set to: 15
 26469                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 26470  002666  0E0F               	movlw	15	;volatile
 26471  002668  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26472  00266A  0E50               	movlw	80	;volatile
 26473  00266C                     L42:
 26474  00266C  6E11               	movwf	ECANReceiveMessage@ptr,c
 26475                           
 26476                           ;ECAN.c: 860: }
 26477  00266E  D065               	goto	i1l9196
 26478  002670                     i1l9136:
 26479                           
 26480                           ;ECAN.c: 861: else
 26481                           ;ECAN.c: 862: return FALSE;
 26482  002670  0E00               	movlw	0
 26483  002672  D0C2               	goto	i1l1357
 26484  002674                     i1l9142:
 26485                           
 26486                           ;ECAN.c: 869: else if ( mode == 0x40 )
 26487  002674  500F               	movf	ECANReceiveMessage@mode,w,c
 26488  002676  0A40               	xorlw	64
 26489  002678  E146               	bnz	i1l1360
 26490                           
 26491                           ;ECAN.c: 875: {
 26492                           ;ECAN.c: 876: if ( RXB0FUL )
 26493  00267A  AE60               	btfss	3936,7,c	;volatile
 26494  00267C  D004               	goto	i1l1361
 26495                           
 26496                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 26497  00267E  0E0F               	movlw	15	;volatile
 26498  002680  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26499  002682  0E60               	movlw	96	;volatile
 26500  002684  D03E               	goto	L49
 26501  002686                     i1l1361:
 26502                           
 26503                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 26504  002686  010F               	movlb	15	; () banked
 26505  002688  AF50               	btfss	80,7,b	;volatile
 26506  00268A  D004               	goto	i1l1363
 26507                           
 26508                           ; BSR set to: 15
 26509                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 26510  00268C  0E0F               	movlw	15	;volatile
 26511  00268E  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26512  002690  0E50               	movlw	80	;volatile
 26513  002692  D037               	goto	L49
 26514  002694                     i1l1363:
 26515                           
 26516                           ; BSR set to: 15
 26517                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 26518  002694  010D               	movlb	13
 26519  002696  B5F8               	btfsc	248,2,b	;volatile
 26520  002698  D007               	goto	i1l1365
 26521  00269A  010E               	movlb	14
 26522  00269C  AF20               	btfss	32,7,b	;volatile
 26523  00269E  D004               	goto	i1l1365
 26524                           
 26525                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 26526  0026A0  0E0E               	movlw	14	;volatile
 26527  0026A2  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26528  0026A4  0E20               	movlw	32	;volatile
 26529  0026A6  D02D               	goto	L49
 26530  0026A8                     i1l1365:
 26531                           
 26532                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 26533  0026A8  010D               	movlb	13
 26534  0026AA  B7F8               	btfsc	248,3,b	;volatile
 26535  0026AC  D007               	goto	i1l1367
 26536  0026AE  010E               	movlb	14
 26537  0026B0  AF30               	btfss	48,7,b	;volatile
 26538  0026B2  D004               	goto	i1l1367
 26539                           
 26540                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 26541  0026B4  0E0E               	movlw	14	;volatile
 26542  0026B6  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26543  0026B8  0E30               	movlw	48	;volatile
 26544  0026BA  D023               	goto	L49
 26545  0026BC                     i1l1367:
 26546                           
 26547                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 26548  0026BC  010D               	movlb	13
 26549  0026BE  B9F8               	btfsc	248,4,b	;volatile
 26550  0026C0  D007               	goto	i1l1369
 26551  0026C2  010E               	movlb	14
 26552  0026C4  AF40               	btfss	64,7,b	;volatile
 26553  0026C6  D004               	goto	i1l1369
 26554                           
 26555                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 26556  0026C8  0E0E               	movlw	14	;volatile
 26557  0026CA  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26558  0026CC  0E40               	movlw	64	;volatile
 26559  0026CE  D019               	goto	L49
 26560  0026D0                     i1l1369:
 26561                           
 26562                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 26563  0026D0  010D               	movlb	13
 26564  0026D2  BBF8               	btfsc	248,5,b	;volatile
 26565  0026D4  D005               	goto	i1l1371
 26566  0026D6  010E               	movlb	14
 26567  0026D8  AF50               	btfss	80,7,b	;volatile
 26568  0026DA  D002               	goto	i1l1371
 26569                           
 26570                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 26571  0026DC  0E0E               	movlw	14	;volatile
 26572  0026DE  D7D7               	goto	L50
 26573  0026E0                     i1l1371:
 26574                           
 26575                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 26576  0026E0  010D               	movlb	13
 26577  0026E2  BDF8               	btfsc	248,6,b	;volatile
 26578  0026E4  D005               	goto	i1l1373
 26579  0026E6  010E               	movlb	14
 26580  0026E8  AF60               	btfss	96,7,b	;volatile
 26581  0026EA  D002               	goto	i1l1373
 26582                           
 26583                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 26584  0026EC  0E0E               	movlw	14	;volatile
 26585  0026EE  D7C8               	goto	L51
 26586  0026F0                     i1l1373:
 26587                           
 26588                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 26589  0026F0  010D               	movlb	13
 26590  0026F2  BFF8               	btfsc	248,7,b	;volatile
 26591  0026F4  D7BD               	goto	i1l9136
 26592  0026F6  010E               	movlb	14
 26593  0026F8  AF70               	btfss	112,7,b	;volatile
 26594  0026FA  D7BA               	goto	i1l9136
 26595                           
 26596                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 26597  0026FC  0E0E               	movlw	14	;volatile
 26598  0026FE  6E12               	movwf	ECANReceiveMessage@ptr+1,c
 26599  002700  0E70               	movlw	112	;volatile
 26600  002702                     L49:
 26601  002702  6E11               	movwf	ECANReceiveMessage@ptr,c
 26602  002704  D00A               	goto	i1l9186
 26603  002706                     i1l1360:
 26604                           
 26605                           ;ECAN.c: 910: else
 26606                           ;ECAN.c: 915: {
 26607                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 26608  002706  AE74               	btfss	3956,7,c	;volatile
 26609  002708  D7B3               	goto	i1l9136
 26610                           
 26611                           ;ECAN.c: 917: {
 26612                           ;ECAN.c: 918: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 26613  00270A  506F               	movf	3951,w,c	;volatile
 26614  00270C  0B07               	andlw	7
 26615  00270E  ECA0  F025         	call	__ECANPointBuffer
 26616  002712  C001  F011         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 26617  002716  C002  F012         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 26618  00271A                     i1l9186:
 26619                           
 26620                           ;ECAN.c: 930: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 26621  00271A  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 26622  00271E  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 26623  002722  50DF               	movf	indf2,w,c
 26624  002724  0B1F               	andlw	31
 26625  002726  6E34               	movwf	__ECANRxFilterHitInfo,c
 26626                           
 26627                           ;ECAN.c: 932: RXB1IF = 0;
 26628  002728  92A4               	bcf	4004,1,c	;volatile
 26629                           
 26630                           ;ECAN.c: 934: if ( RXB1OVFL )
 26631  00272A  AC74               	btfss	3956,6,c	;volatile
 26632  00272C  D006               	goto	i1l9196
 26633                           
 26634                           ;ECAN.c: 935: {
 26635                           ;ECAN.c: 936: *msgFlags |= ECAN_RX_OVERFLOW;
 26636  00272E  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26637  002730  6ED9               	movwf	fsr2l,c
 26638  002732  6ADA               	clrf	fsr2h,c
 26639  002734  0E00               	movlw	0
 26640  002736  86DB               	bsf	plusw2,3,c
 26641                           
 26642                           ;ECAN.c: 937: RXB1OVFL = 0;
 26643  002738  9C74               	bcf	3956,6,c	;volatile
 26644  00273A                     i1l9196:
 26645                           
 26646                           ;ECAN.c: 942: savedPtr = ptr;
 26647  00273A  C011  F00B         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 26648  00273E  C012  F00C         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 26649                           
 26650                           ;ECAN.c: 943: *msgFlags = 0;
 26651  002742  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26652  002744  6ED9               	movwf	fsr2l,c
 26653  002746  6ADA               	clrf	fsr2h,c
 26654  002748  6ADF               	clrf	indf2,c
 26655                           
 26656                           ;ECAN.c: 946: temp.Val = *(ptr+5);
 26657  00274A  EE20 F005          	lfsr	2,5
 26658  00274E  D855               	call	PL102	;call to abstracted procedure
 26659                           
 26660                           ;ECAN.c: 947: *dataLen = temp.Val & 0b00001111;
 26661  002750  5009               	movf	ECANReceiveMessage@dataLen,w,c
 26662  002752  6ED9               	movwf	fsr2l,c
 26663  002754  6ADA               	clrf	fsr2h,c
 26664  002756  5010               	movf	ECANReceiveMessage@temp,w,c
 26665  002758  0B0F               	andlw	15
 26666  00275A  6EDF               	movwf	indf2,c
 26667                           
 26668                           ;ECAN.c: 950: if ( temp.bits.b6 )
 26669  00275C  AC10               	btfss	ECANReceiveMessage@temp,6,c
 26670  00275E  D005               	goto	i1l1381
 26671                           
 26672                           ;ECAN.c: 951: *msgFlags |= ECAN_RX_RTR_FRAME;
 26673  002760  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26674  002762  6ED9               	movwf	fsr2l,c
 26675  002764  6ADA               	clrf	fsr2h,c
 26676  002766  0E00               	movlw	0
 26677  002768  8CDB               	bsf	plusw2,6,c
 26678  00276A                     i1l1381:
 26679                           
 26680                           ;ECAN.c: 954: temp.Val = *(ptr+2);
 26681  00276A  EE20 F002          	lfsr	2,2
 26682  00276E  D845               	call	PL102	;call to abstracted procedure
 26683                           
 26684                           ;ECAN.c: 955: if ( temp.bits.b3 )
 26685  002770  A610               	btfss	ECANReceiveMessage@temp,3,c
 26686  002772  D008               	goto	i1l1382
 26687                           
 26688                           ;ECAN.c: 956: {
 26689                           ;ECAN.c: 957: *msgFlags |= ECAN_RX_XTD_FRAME;
 26690  002774  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26691  002776  6ED9               	movwf	fsr2l,c
 26692  002778  6ADA               	clrf	fsr2h,c
 26693  00277A  0E00               	movlw	0
 26694  00277C  8ADB               	bsf	plusw2,5,c
 26695                           
 26696                           ;ECAN.c: 958: temp.Val = 1;
 26697  00277E  0E01               	movlw	1
 26698  002780  6E10               	movwf	ECANReceiveMessage@temp,c
 26699                           
 26700                           ;ECAN.c: 959: }
 26701  002782  D001               	goto	i1l9214
 26702  002784                     i1l1382:
 26703                           
 26704                           ;ECAN.c: 960: else
 26705                           ;ECAN.c: 961: temp.Val = 0;
 26706  002784  6A10               	clrf	ECANReceiveMessage@temp,c
 26707  002786                     i1l9214:
 26708                           
 26709                           ;ECAN.c: 963: _RegsToCANID(ptr+1, id, temp.Val);
 26710  002786  2811               	incf	ECANReceiveMessage@ptr,w,c
 26711  002788  6E01               	movwf	?__RegsToCANID,c
 26712  00278A  0E00               	movlw	0
 26713  00278C  2012               	addwfc	ECANReceiveMessage@ptr+1,w,c
 26714  00278E  6E02               	movwf	?__RegsToCANID+1,c
 26715  002790  C00D  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 26716  002794  C010  F004         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 26717  002798  EC20  F01A         	call	__RegsToCANID	;wreg free
 26718                           
 26719                           ;ECAN.c: 966: ptr += 6;
 26720  00279C  0E06               	movlw	6
 26721  00279E  2611               	addwf	ECANReceiveMessage@ptr,f,c
 26722  0027A0  0E00               	movlw	0
 26723  0027A2  2212               	addwfc	ECANReceiveMessage@ptr+1,f,c
 26724                           
 26725                           ;ECAN.c: 967: temp.Val = *dataLen;
 26726  0027A4  5009               	movf	ECANReceiveMessage@dataLen,w,c
 26727  0027A6  6ED9               	movwf	fsr2l,c
 26728  0027A8  6ADA               	clrf	fsr2h,c
 26729  0027AA  50DF               	movf	indf2,w,c
 26730  0027AC  6E10               	movwf	ECANReceiveMessage@temp,c
 26731                           
 26732                           ;ECAN.c: 968: for ( i = 0; i < temp.Val; i++ )
 26733  0027AE  6A0E               	clrf	ECANReceiveMessage@i,c
 26734  0027B0  D00D               	goto	i1l9230
 26735  0027B2                     i1l9222:
 26736                           
 26737                           ;ECAN.c: 969: *data++ = *ptr++;
 26738  0027B2  C011  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 26739  0027B6  C012  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 26740  0027BA  5008               	movf	ECANReceiveMessage@data,w,c
 26741  0027BC  6EE1               	movwf	fsr1l,c
 26742  0027BE  6AE2               	clrf	fsr1h,c
 26743  0027C0  CFDF FFE7          	movff	indf2,indf1
 26744  0027C4  4A11               	infsnz	ECANReceiveMessage@ptr,f,c
 26745  0027C6  2A12               	incf	ECANReceiveMessage@ptr+1,f,c
 26746  0027C8  2A08               	incf	ECANReceiveMessage@data,f,c
 26747  0027CA  2A0E               	incf	ECANReceiveMessage@i,f,c
 26748  0027CC                     i1l9230:
 26749  0027CC  5010               	movf	ECANReceiveMessage@temp,w,c
 26750  0027CE  5C0E               	subwf	ECANReceiveMessage@i,w,c
 26751  0027D0  E3F0               	bnc	i1l9222
 26752                           
 26753                           ;ECAN.c: 972: if ( IRXIF )
 26754  0027D2  AEA4               	btfss	4004,7,c	;volatile
 26755  0027D4  D006               	goto	i1l9236
 26756                           
 26757                           ;ECAN.c: 973: {
 26758                           ;ECAN.c: 974: *msgFlags |= ECAN_RX_INVALID_MSG;
 26759  0027D6  500A               	movf	ECANReceiveMessage@msgFlags,w,c
 26760  0027D8  6ED9               	movwf	fsr2l,c
 26761  0027DA  6ADA               	clrf	fsr2h,c
 26762  0027DC  0E00               	movlw	0
 26763  0027DE  88DB               	bsf	plusw2,4,c
 26764                           
 26765                           ;ECAN.c: 975: IRXIF = 0;
 26766  0027E0  9EA4               	bcf	4004,7,c	;volatile
 26767  0027E2                     i1l9236:
 26768                           
 26769                           ;ECAN.c: 976: }
 26770                           ;ECAN.c: 979: *savedPtr &= 0x7f;
 26771  0027E2  C00B  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 26772  0027E6  C00C  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 26773  0027EA  0E7F               	movlw	127
 26774  0027EC  16DF               	andwf	indf2,f,c
 26775                           
 26776                           ;ECAN.c: 983: if ( mode == 0x80 )
 26777  0027EE  500F               	movf	ECANReceiveMessage@mode,w,c
 26778  0027F0  0A80               	xorlw	128
 26779  0027F2  B4D8               	btfsc	status,2,c
 26780                           
 26781                           ;ECAN.c: 984: FIFOEMPTY = 0;
 26782  0027F4  9E74               	bcf	3956,7,c	;volatile
 26783                           
 26784                           ;ECAN.c: 990: return TRUE;
 26785  0027F6  0E01               	movlw	1
 26786  0027F8                     i1l1357:
 26787  0027F8  0012               	return	
 26788  0027FA                     __end_of_ECANReceiveMessage:
 26789                           	opt stack 0
 26790  0027FA                     PL102:
 26791                           	opt stack 20
 26792  0027FA  5011               	movf	ECANReceiveMessage@ptr,w,c
 26793  0027FC  26D9               	addwf	fsr2l,f,c
 26794  0027FE  5012               	movf	ECANReceiveMessage@ptr+1,w,c
 26795  002800  22DA               	addwfc	fsr2h,f,c
 26796  002802  50DF               	movf	indf2,w,c
 26797  002804  6E10               	movwf	ECANReceiveMessage@temp,c
 26798  002806  0012               	return	
 26799  002808                     __end_ofPL102:
 26800                           	opt stack 0
 26801                           tblptru	equ	0xFF8
 26802                           tblptrh	equ	0xFF7
 26803                           tblptrl	equ	0xFF6
 26804                           tablat	equ	0xFF5
 26805                           prodh	equ	0xFF4
 26806                           prodl	equ	0xFF3
 26807                           intcon	equ	0xFF2
 26808                           indf0	equ	0xFEF
 26809                           postinc0	equ	0xFEE
 26810                           fsr0h	equ	0xFEA
 26811                           fsr0l	equ	0xFE9
 26812                           wreg	equ	0xFE8
 26813                           indf1	equ	0xFE7
 26814                           postinc1	equ	0xFE6
 26815                           postdec1	equ	0xFE5
 26816                           fsr1h	equ	0xFE2
 26817                           fsr1l	equ	0xFE1
 26818                           bsr	equ	0xFE0
 26819                           indf2	equ	0xFDF
 26820                           postinc2	equ	0xFDE
 26821                           postdec2	equ	0xFDD
 26822                           plusw2	equ	0xFDB
 26823                           fsr2h	equ	0xFDA
 26824                           fsr2l	equ	0xFD9
 26825                           status	equ	0xFD8
 26826                           
 26827 ;; *************** function __RegsToCANID *****************
 26828 ;; Defined at:
 26829 ;;		line 1156 in file "ECAN.c"
 26830 ;; Parameters:    Size  Location     Type
 26831 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 26832 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 26833 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 26834 ;;  val             1    2[COMRAM] PTR unsigned long 
 26835 ;;		 -> Interrupt@id(4), 
 26836 ;;  type            1    3[COMRAM] unsigned char 
 26837 ;; Auto vars:     Size  Location     Type
 26838 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 26839 ;;		 -> Interrupt@id(4), 
 26840 ;; Return value:  Size  Location     Type
 26841 ;;		None               void
 26842 ;; Registers used:
 26843 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26844 ;; Tracked objects:
 26845 ;;		On entry : 0/0
 26846 ;;		On exit  : 0/0
 26847 ;;		Unchanged: 0/0
 26848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26849 ;;      Params:         4       0       0       0       0       0       0
 26850 ;;      Locals:         1       0       0       0       0       0       0
 26851 ;;      Temps:          2       0       0       0       0       0       0
 26852 ;;      Totals:         7       0       0       0       0       0       0
 26853 ;;Total ram usage:        7 bytes
 26854 ;; Hardware stack levels used:    1
 26855 ;; This function calls:
 26856 ;;		Nothing
 26857 ;; This function is called by:
 26858 ;;		_ECANReceiveMessage
 26859 ;; This function uses a non-reentrant model
 26860 ;;
 26861                           
 26862                           	psect	text82
 26863  003440                     __ptext82:
 26864                           	opt stack 0
 26865  003440                     __RegsToCANID:
 26866                           	opt stack 20
 26867                           
 26868                           ;ECAN.c: 1157: CAN_MESSAGE_ID *Value;
 26869                           ;ECAN.c: 1159: Value = (CAN_MESSAGE_ID*)val;
 26870                           
 26871                           ;incstack = 0
 26872                           ;incstack = 0
 26873  003440  C003  F007         	movff	__RegsToCANID@val,__RegsToCANID@Value
 26874                           
 26875                           ;ECAN.c: 1161: if ( type == 0 )
 26876  003444  6604               	tstfsz	__RegsToCANID@type,c
 26877  003446  D02B               	goto	i1l8886
 26878                           
 26879                           ;ECAN.c: 1162: {
 26880                           ;ECAN.c: 1164: Value->BYTES.BYTE_1 = (*ptr << 3);
 26881  003448  5007               	movf	__RegsToCANID@Value,w,c
 26882  00344A  6ED9               	movwf	fsr2l,c
 26883  00344C  D86C               	call	PL76	;call to abstracted procedure
 26884  00344E  3605               	rlcf	??__RegsToCANID,f,c
 26885  003450  90D8               	bcf	status,0,c
 26886  003452  3605               	rlcf	??__RegsToCANID,f,c
 26887  003454  90D8               	bcf	status,0,c
 26888  003456  3405               	rlcf	??__RegsToCANID,w,c
 26889  003458  6EDF               	movwf	indf2,c
 26890                           
 26891                           ;ECAN.c: 1165: Value->BYTES.BYTE_2 = *ptr >> 5;
 26892  00345A  5007               	movf	__RegsToCANID@Value,w,c
 26893  00345C  6ED9               	movwf	fsr2l,c
 26894  00345E  6ADA               	clrf	fsr2h,c
 26895  003460  2AD9               	incf	fsr2l,f,c
 26896  003462  6ADA               	clrf	fsr2h,c
 26897  003464  D873               	call	PL82	;call to abstracted procedure
 26898  003466                     i1u1041_25:
 26899  003466  90D8               	bcf	status,0,c
 26900  003468  3205               	rrcf	??__RegsToCANID,f,c
 26901  00346A  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 26902  00346C  D7FC               	goto	i1u1041_25
 26903  00346E  5005               	movf	??__RegsToCANID,w,c
 26904                           
 26905                           ;ECAN.c: 1166: ptr++;
 26906                           
 26907                           ;ECAN.c: 1167: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 26908  003470  D863               	call	PL78	;call to abstracted procedure
 26909  003472  0E05               	movlw	5
 26910  003474  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 26911  003476                     i1u1042_25:
 26912  003476  90D8               	bcf	status,0,c
 26913  003478  3205               	rrcf	??__RegsToCANID,f,c
 26914  00347A  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 26915  00347C  D7FC               	goto	i1u1042_25
 26916  00347E  5007               	movf	__RegsToCANID@Value,w,c
 26917  003480  6ED9               	movwf	fsr2l,c
 26918  003482  6ADA               	clrf	fsr2h,c
 26919  003484  5005               	movf	??__RegsToCANID,w,c
 26920  003486  12DF               	iorwf	indf2,f,c
 26921                           
 26922                           ;ECAN.c: 1168: Value->BYTES.BYTE_3 = 0x00;
 26923  003488  D83D               	call	PL36	;call to abstracted procedure
 26924  00348A  6ADF               	clrf	indf2,c
 26925                           
 26926                           ;ECAN.c: 1169: Value->BYTES.BYTE_4 = 0x00;
 26927  00348C  5007               	movf	__RegsToCANID@Value,w,c
 26928  00348E  6ED9               	movwf	fsr2l,c
 26929  003490  6ADA               	clrf	fsr2h,c
 26930  003492  0E03               	movlw	3
 26931  003494  26D9               	addwf	fsr2l,f,c
 26932  003496  6ADA               	clrf	fsr2h,c
 26933  003498  0E00               	movlw	0
 26934  00349A  6EDF               	movwf	indf2,c
 26935                           
 26936                           ;ECAN.c: 1170: }
 26937  00349C  D032               	goto	i1l1404
 26938  00349E                     i1l8886:
 26939                           
 26940                           ;ECAN.c: 1171: else
 26941                           ;ECAN.c: 1172: {
 26942                           ;ECAN.c: 1174: Value->BYTES.BYTE_3 = (*ptr << 5);
 26943  00349E  D832               	call	PL36	;call to abstracted procedure
 26944  0034A0  D855               	call	PL82	;call to abstracted procedure
 26945  0034A2                     i1u1043_25:
 26946  0034A2  90D8               	bcf	status,0,c
 26947  0034A4  3605               	rlcf	??__RegsToCANID,f,c
 26948  0034A6  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 26949  0034A8  D7FC               	goto	i1u1043_25
 26950  0034AA  5005               	movf	??__RegsToCANID,w,c
 26951  0034AC  6EDF               	movwf	indf2,c
 26952                           
 26953                           ;ECAN.c: 1175: Value->BYTES.BYTE_4 = (*ptr >> 3);
 26954  0034AE  5007               	movf	__RegsToCANID@Value,w,c
 26955  0034B0  6ED9               	movwf	fsr2l,c
 26956  0034B2  6ADA               	clrf	fsr2h,c
 26957  0034B4  0E03               	movlw	3
 26958  0034B6  26D9               	addwf	fsr2l,f,c
 26959  0034B8  D836               	call	PL76	;call to abstracted procedure
 26960  0034BA  3205               	rrcf	??__RegsToCANID,f,c
 26961  0034BC  90D8               	bcf	status,0,c
 26962  0034BE  3205               	rrcf	??__RegsToCANID,f,c
 26963  0034C0  90D8               	bcf	status,0,c
 26964  0034C2  3005               	rrcf	??__RegsToCANID,w,c
 26965                           
 26966                           ;ECAN.c: 1176: ptr++;
 26967                           
 26968                           ;ECAN.c: 1177: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 26969  0034C4  D839               	call	PL78	;call to abstracted procedure
 26970  0034C6  0E03               	movlw	3
 26971  0034C8  1605               	andwf	??__RegsToCANID,f,c
 26972  0034CA  D81C               	call	PL36	;call to abstracted procedure
 26973  0034CC  5005               	movf	??__RegsToCANID,w,c
 26974  0034CE  12DF               	iorwf	indf2,f,c
 26975                           
 26976                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 26977  0034D0  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 26978  0034D4  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 26979  0034D8  50DF               	movf	indf2,w,c
 26980  0034DA  6E05               	movwf	??__RegsToCANID& (0+255),c
 26981  0034DC  90D8               	bcf	status,0,c
 26982  0034DE  3205               	rrcf	??__RegsToCANID,f,c
 26983  0034E0  90D8               	bcf	status,0,c
 26984  0034E2  3205               	rrcf	??__RegsToCANID,f,c
 26985  0034E4  90D8               	bcf	status,0,c
 26986  0034E6  3205               	rrcf	??__RegsToCANID,f,c
 26987  0034E8  0E1C               	movlw	28
 26988  0034EA  1605               	andwf	??__RegsToCANID,f,c
 26989  0034EC  D80B               	call	PL36	;call to abstracted procedure
 26990  0034EE  5005               	movf	??__RegsToCANID,w,c
 26991  0034F0  12DF               	iorwf	indf2,f,c
 26992                           
 26993                           ;ECAN.c: 1180: ptr++;
 26994                           
 26995                           ;ECAN.c: 1181: Value->BYTES.BYTE_2 = *ptr;
 26996  0034F2  D80F               	call	PL74	;call to abstracted procedure
 26997  0034F4  2AE1               	incf	fsr1l,f,c
 26998  0034F6  6AE2               	clrf	fsr1h,c
 26999  0034F8  CFDF FFE7          	movff	indf2,indf1
 27000                           
 27001                           ;ECAN.c: 1182: ptr++;
 27002                           
 27003                           ;ECAN.c: 1183: Value->BYTES.BYTE_1 = *ptr;
 27004  0034FC  D80A               	call	PL74	;call to abstracted procedure
 27005  0034FE  CFDF FFE7          	movff	indf2,indf1
 27006  003502                     i1l1404:
 27007  003502  0012               	return	
 27008  003504                     __end_of__RegsToCANID:
 27009                           	opt stack 0
 27010  003504                     PL36:
 27011                           	opt stack 20
 27012  003504  5007               	movf	__RegsToCANID@Value,w,c
 27013  003506  6ED9               	movwf	fsr2l,c
 27014  003508  6ADA               	clrf	fsr2h,c
 27015  00350A  0E02               	movlw	2
 27016  00350C  26D9               	addwf	fsr2l,f,c
 27017  00350E  6ADA               	clrf	fsr2h,c
 27018  003510  0012               	return	
 27019  003512                     __end_ofPL36:
 27020                           	opt stack 0
 27021  003512                     PL74:
 27022                           	opt stack 20
 27023  003512  4A01               	infsnz	__RegsToCANID@ptr,f,c
 27024  003514  2A02               	incf	__RegsToCANID@ptr+1,f,c
 27025  003516  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27026  00351A  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27027  00351E  5007               	movf	__RegsToCANID@Value,w,c
 27028  003520  6EE1               	movwf	fsr1l,c
 27029  003522  6AE2               	clrf	fsr1h,c
 27030  003524  0012               	return	
 27031  003526                     __end_ofPL74:
 27032                           	opt stack 0
 27033  003526                     PL76:
 27034                           	opt stack 20
 27035  003526  6ADA               	clrf	fsr2h,c
 27036  003528  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 27037  00352C  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 27038  003530  50E7               	movf	indf1,w,c
 27039  003532  6E05               	movwf	??__RegsToCANID& (0+255),c
 27040  003534  90D8               	bcf	status,0,c
 27041  003536  0012               	return	
 27042  003538                     __end_ofPL76:
 27043                           	opt stack 0
 27044  003538                     PL78:
 27045                           	opt stack 20
 27046  003538  6EDF               	movwf	indf2,c
 27047  00353A  4A01               	infsnz	__RegsToCANID@ptr,f,c
 27048  00353C  2A02               	incf	__RegsToCANID@ptr+1,f,c
 27049  00353E  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27050  003542  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27051  003546  50DF               	movf	indf2,w,c
 27052  003548  6E05               	movwf	??__RegsToCANID& (0+255),c
 27053  00354A  0012               	return	
 27054  00354C                     __end_ofPL78:
 27055                           	opt stack 0
 27056  00354C                     PL82:
 27057                           	opt stack 20
 27058  00354C  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 27059  003550  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 27060  003554  50E7               	movf	indf1,w,c
 27061  003556  6E05               	movwf	??__RegsToCANID& (0+255),c
 27062  003558  0E05               	movlw	5
 27063  00355A  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 27064  00355C  0C05               	retlw	5
 27065  00355E                     __end_ofPL82:
 27066                           	opt stack 0
 27067                           tblptru	equ	0xFF8
 27068                           tblptrh	equ	0xFF7
 27069                           tblptrl	equ	0xFF6
 27070                           tablat	equ	0xFF5
 27071                           prodh	equ	0xFF4
 27072                           prodl	equ	0xFF3
 27073                           intcon	equ	0xFF2
 27074                           indf0	equ	0xFEF
 27075                           postinc0	equ	0xFEE
 27076                           fsr0h	equ	0xFEA
 27077                           fsr0l	equ	0xFE9
 27078                           wreg	equ	0xFE8
 27079                           indf1	equ	0xFE7
 27080                           postinc1	equ	0xFE6
 27081                           postdec1	equ	0xFE5
 27082                           fsr1h	equ	0xFE2
 27083                           fsr1l	equ	0xFE1
 27084                           bsr	equ	0xFE0
 27085                           indf2	equ	0xFDF
 27086                           postinc2	equ	0xFDE
 27087                           postdec2	equ	0xFDD
 27088                           plusw2	equ	0xFDB
 27089                           fsr2h	equ	0xFDA
 27090                           fsr2l	equ	0xFD9
 27091                           status	equ	0xFD8
 27092                           
 27093 ;; *************** function __ECANPointBuffer *****************
 27094 ;; Defined at:
 27095 ;;		line 1207 in file "ECAN.c"
 27096 ;; Parameters:    Size  Location     Type
 27097 ;;  b               1    wreg     unsigned char 
 27098 ;; Auto vars:     Size  Location     Type
 27099 ;;  b               1    3[COMRAM] unsigned char 
 27100 ;;  pt              2    4[COMRAM] PTR unsigned char 
 27101 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27102 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27103 ;; Return value:  Size  Location     Type
 27104 ;;                  2    0[COMRAM] PTR unsigned char 
 27105 ;; Registers used:
 27106 ;;		wreg, status,2, status,0
 27107 ;; Tracked objects:
 27108 ;;		On entry : 0/0
 27109 ;;		On exit  : 0/0
 27110 ;;		Unchanged: 0/0
 27111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27112 ;;      Params:         3       0       0       0       0       0       0
 27113 ;;      Locals:         3       0       0       0       0       0       0
 27114 ;;      Temps:          0       0       0       0       0       0       0
 27115 ;;      Totals:         6       0       0       0       0       0       0
 27116 ;;Total ram usage:        6 bytes
 27117 ;; Hardware stack levels used:    1
 27118 ;; This function calls:
 27119 ;;		Nothing
 27120 ;; This function is called by:
 27121 ;;		_ECANReceiveMessage
 27122 ;; This function uses a non-reentrant model
 27123 ;;
 27124                           
 27125                           	psect	text83
 27126  004B40                     __ptext83:
 27127                           	opt stack 0
 27128  004B40                     __ECANPointBuffer:
 27129                           	opt stack 20
 27130                           
 27131                           ;incstack = 0
 27132                           ;incstack = 0
 27133                           ;__ECANPointBuffer@b stored from wreg
 27134  004B40  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 27135                           
 27136                           ;ECAN.c: 1208: BYTE* pt;
 27137                           ;ECAN.c: 1210: switch(b)
 27138  004B44  D024               	goto	i1l8872
 27139  004B46                     i1l8854:
 27140                           
 27141                           ;ECAN.c: 1213: pt=(BYTE*)&RXB0CON;
 27142  004B46  0E0F               	movlw	15	;volatile
 27143  004B48  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27144  004B4A  0E60               	movlw	96	;volatile
 27145  004B4C  D01E               	goto	L58
 27146  004B4E                     i1l8856:
 27147                           
 27148                           ;ECAN.c: 1216: pt=(BYTE*)&RXB1CON;
 27149  004B4E  010F               	movlb	15	; () banked
 27150  004B50  0E0F               	movlw	15	;volatile
 27151  004B52  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27152  004B54  0E50               	movlw	80	;volatile
 27153  004B56  D019               	goto	L58
 27154  004B58                     i1l8858:
 27155                           
 27156                           ;ECAN.c: 1219: pt=(BYTE*)&B0CON;
 27157  004B58  010E               	movlb	14	; () banked
 27158  004B5A  0E0E               	movlw	14	;volatile
 27159  004B5C  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27160  004B5E  0E20               	movlw	32	;volatile
 27161  004B60  D014               	goto	L58
 27162  004B62                     i1l8860:
 27163                           
 27164                           ;ECAN.c: 1222: pt=(BYTE*)&B1CON;
 27165  004B62  010E               	movlb	14	; () banked
 27166  004B64  0E0E               	movlw	14	;volatile
 27167  004B66  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27168  004B68  0E30               	movlw	48	;volatile
 27169  004B6A  D00F               	goto	L58
 27170  004B6C                     i1l8862:
 27171                           
 27172                           ;ECAN.c: 1225: pt=(BYTE*)&B2CON;
 27173  004B6C  010E               	movlb	14	; () banked
 27174  004B6E  0E0E               	movlw	14	;volatile
 27175  004B70  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27176  004B72  0E40               	movlw	64	;volatile
 27177  004B74  D00A               	goto	L58
 27178  004B76                     i1l8864:
 27179                           
 27180                           ;ECAN.c: 1228: pt=(BYTE*)&B3CON;
 27181  004B76  010E               	movlb	14	; () banked
 27182  004B78  0E0E               	movlw	14	;volatile
 27183  004B7A  D7EB               	goto	L59
 27184  004B7C                     i1l8866:
 27185                           
 27186                           ;ECAN.c: 1231: pt=(BYTE*)&B4CON;
 27187  004B7C  010E               	movlb	14	; () banked
 27188  004B7E  0E0E               	movlw	14	;volatile
 27189  004B80  D7E3               	goto	L60
 27190  004B82                     i1l8868:
 27191                           
 27192                           ;ECAN.c: 1234: pt=(BYTE*)&B5CON;
 27193  004B82  010E               	movlb	14	; () banked
 27194  004B84  0E0E               	movlw	14	;volatile
 27195  004B86  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27196  004B88  0E70               	movlw	112	;volatile
 27197  004B8A                     L58:
 27198  004B8A  6E05               	movwf	__ECANPointBuffer@pt,c
 27199                           
 27200                           ;ECAN.c: 1235: break;
 27201  004B8C  D00F               	goto	i1l1409
 27202  004B8E                     i1l8872:
 27203  004B8E  5004               	movf	__ECANPointBuffer@b,w,c
 27204                           
 27205                           ; Switch size 1, requested type "space"
 27206                           ; Number of cases is 7, Range of values is 0 to 6
 27207                           ; switch strategies available:
 27208                           ; Name         Instructions Cycles
 27209                           ; simple_byte           22    12 (average)
 27210                           ;	Chosen strategy is simple_byte
 27211  004B90  E0DA               	bz	i1l8854
 27212  004B92  0A01               	xorlw	1	; case 1
 27213  004B94  E0DC               	bz	i1l8856
 27214  004B96  0A03               	xorlw	3	; case 2
 27215  004B98  E0DF               	bz	i1l8858
 27216  004B9A  0A01               	xorlw	1	; case 3
 27217  004B9C  E0E2               	bz	i1l8860
 27218  004B9E  0A07               	xorlw	7	; case 4
 27219  004BA0  E0E5               	bz	i1l8862
 27220  004BA2  0A01               	xorlw	1	; case 5
 27221  004BA4  E0E8               	bz	i1l8864
 27222  004BA6  0A03               	xorlw	3	; case 6
 27223  004BA8  E0E9               	bz	i1l8866
 27224  004BAA  D7EB               	goto	i1l8868
 27225  004BAC                     i1l1409:
 27226                           
 27227                           ;ECAN.c: 1237: return (pt);
 27228  004BAC  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 27229  004BB0  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 27230  004BB4  0012               	return	
 27231  004BB6                     __end_of__ECANPointBuffer:
 27232                           	opt stack 0
 27233                           tblptru	equ	0xFF8
 27234                           tblptrh	equ	0xFF7
 27235                           tblptrl	equ	0xFF6
 27236                           tablat	equ	0xFF5
 27237                           prodh	equ	0xFF4
 27238                           prodl	equ	0xFF3
 27239                           intcon	equ	0xFF2
 27240                           indf0	equ	0xFEF
 27241                           postinc0	equ	0xFEE
 27242                           fsr0h	equ	0xFEA
 27243                           fsr0l	equ	0xFE9
 27244                           wreg	equ	0xFE8
 27245                           indf1	equ	0xFE7
 27246                           postinc1	equ	0xFE6
 27247                           postdec1	equ	0xFE5
 27248                           fsr1h	equ	0xFE2
 27249                           fsr1l	equ	0xFE1
 27250                           bsr	equ	0xFE0
 27251                           indf2	equ	0xFDF
 27252                           postinc2	equ	0xFDE
 27253                           postdec2	equ	0xFDD
 27254                           plusw2	equ	0xFDB
 27255                           fsr2h	equ	0xFDA
 27256                           fsr2l	equ	0xFD9
 27257                           status	equ	0xFD8
 27258                           
 27259 ;; *************** function _fifo_write *****************
 27260 ;; Defined at:
 27261 ;;		line 61 in file "fifo.c"
 27262 ;; Parameters:    Size  Location     Type
 27263 ;;  f               1    wreg     PTR struct .
 27264 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 27265 ;;  buf             1    0[COMRAM] PTR const void 
 27266 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 27267 ;;  nbytes          4    1[COMRAM] unsigned long 
 27268 ;; Auto vars:     Size  Location     Type
 27269 ;;  f               1   14[COMRAM] PTR struct .
 27270 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 27271 ;;  i               4   10[COMRAM] unsigned long 
 27272 ;;  p               1    9[COMRAM] PTR const unsigned char 
 27273 ;;		 -> Interrupt@dlc(1), Interrupt@data(8), Interrupt@id(4), Interrupt@c(1), 
 27274 ;; Return value:  Size  Location     Type
 27275 ;;                  2    0[COMRAM] unsigned short 
 27276 ;; Registers used:
 27277 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27278 ;; Tracked objects:
 27279 ;;		On entry : 0/0
 27280 ;;		On exit  : 0/0
 27281 ;;		Unchanged: 0/0
 27282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27283 ;;      Params:         5       0       0       0       0       0       0
 27284 ;;      Locals:         6       0       0       0       0       0       0
 27285 ;;      Temps:          4       0       0       0       0       0       0
 27286 ;;      Totals:        15       0       0       0       0       0       0
 27287 ;;Total ram usage:       15 bytes
 27288 ;; Hardware stack levels used:    1
 27289 ;; This function calls:
 27290 ;;		Nothing
 27291 ;; This function is called by:
 27292 ;;		_Interrupt
 27293 ;; This function uses a non-reentrant model
 27294 ;;
 27295                           
 27296                           	psect	text84
 27297  00355E                     __ptext84:
 27298                           	opt stack 0
 27299  00355E                     _fifo_write:
 27300                           	opt stack 21
 27301                           
 27302                           ;incstack = 0
 27303                           ;incstack = 0
 27304                           ;fifo_write@f stored from wreg
 27305  00355E  CFE8 F00F          	movff	wreg,fifo_write@f
 27306                           
 27307                           ;fifo.c: 62: uint32_t i;
 27308                           ;fifo.c: 63: const uint8_t *p;
 27309                           ;fifo.c: 64: p = buf;
 27310  003562  C001  F00A         	movff	fifo_write@buf,fifo_write@p
 27311                           
 27312                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 27313  003566  6A0B               	clrf	fifo_write@i,c
 27314  003568  6A0C               	clrf	fifo_write@i+1,c
 27315  00356A  6A0D               	clrf	fifo_write@i+2,c
 27316  00356C  6A0E               	clrf	fifo_write@i+3,c
 27317  00356E  D052               	goto	i1l6048
 27318  003570                     i1l6028:
 27319                           
 27320                           ;fifo.c: 69: if ((f->head + 1 == f->tail) ||
 27321                           ;fifo.c: 70: ((f->head + 1 == f->size) && (f->tail == 0))) {
 27322  003570  500F               	movf	fifo_write@f,w,c
 27323  003572  6ED9               	movwf	fsr2l,c
 27324  003574  6ADA               	clrf	fsr2h,c
 27325  003576  0E04               	movlw	4
 27326  003578  D85B               	call	PL16	;call to abstracted procedure
 27327  00357A  E102               	bnz	i1u583_25
 27328  00357C  5006               	movf	??_fifo_write,w,c
 27329  00357E  1808               	xorwf	??_fifo_write+2,w,c
 27330  003580                     i1u583_25:
 27331  003580  E012               	bz	i1l1436
 27332  003582  500F               	movf	fifo_write@f,w,c
 27333  003584  6ED9               	movwf	fsr2l,c
 27334  003586  6ADA               	clrf	fsr2h,c
 27335  003588  0E06               	movlw	6
 27336  00358A  D852               	call	PL16	;call to abstracted procedure
 27337  00358C  E102               	bnz	i1u584_25
 27338  00358E  5006               	movf	??_fifo_write,w,c
 27339  003590  1808               	xorwf	??_fifo_write+2,w,c
 27340  003592                     i1u584_25:
 27341  003592  E10E               	bnz	i1l6036
 27342  003594  500F               	movf	fifo_write@f,w,c
 27343  003596  6ED9               	movwf	fsr2l,c
 27344  003598  6ADA               	clrf	fsr2h,c
 27345  00359A  0E04               	movlw	4
 27346  00359C  26D9               	addwf	fsr2l,f,c
 27347  00359E  6ADA               	clrf	fsr2h,c
 27348  0035A0  50DE               	movf	postinc2,w,c
 27349  0035A2  10DD               	iorwf	postdec2,w,c
 27350  0035A4  E105               	bnz	i1l6036
 27351  0035A6                     i1l1436:
 27352                           
 27353                           ;fifo.c: 71: return i;
 27354  0035A6  C00B  F001         	movff	fifo_write@i,?_fifo_write
 27355  0035AA  C00C  F002         	movff	fifo_write@i+1,?_fifo_write+1
 27356  0035AE  D03F               	goto	i1l1437
 27357  0035B0                     i1l6036:
 27358                           
 27359                           ;fifo.c: 73: else {
 27360                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 27361  0035B0  500A               	movf	fifo_write@p,w,c
 27362  0035B2  6ED9               	movwf	fsr2l,c
 27363  0035B4  D85A               	call	PL98	;call to abstracted procedure
 27364  0035B6  CFE6 F006          	movff	postinc1,??_fifo_write
 27365  0035BA  CFE5 F007          	movff	postdec1,??_fifo_write+1
 27366  0035BE  500F               	movf	fifo_write@f,w,c
 27367  0035C0  6EE1               	movwf	fsr1l,c
 27368  0035C2  6AE2               	clrf	fsr1h,c
 27369  0035C4  CFE6 F008          	movff	postinc1,??_fifo_write+2
 27370  0035C8  CFE5 F009          	movff	postdec1,??_fifo_write+3
 27371  0035CC  5006               	movf	??_fifo_write,w,c
 27372  0035CE  2408               	addwf	??_fifo_write+2,w,c
 27373  0035D0  6EE1               	movwf	fsr1l,c
 27374  0035D2  5007               	movf	??_fifo_write+1,w,c
 27375  0035D4  2009               	addwfc	??_fifo_write+3,w,c
 27376  0035D6  6EE2               	movwf	fsr1h,c
 27377  0035D8  CFDF FFE7          	movff	indf2,indf1
 27378  0035DC  2A0A               	incf	fifo_write@p,f,c
 27379                           
 27380                           ;fifo.c: 75: f->head++;
 27381  0035DE  D83E               	call	PL40	;call to abstracted procedure
 27382  0035E0  2ADE               	incf	postinc2,f,c
 27383  0035E2  0E00               	movlw	0
 27384  0035E4  22DD               	addwfc	postdec2,f,c
 27385                           
 27386                           ;fifo.c: 76: if (f->head == f->size) {
 27387  0035E6  500F               	movf	fifo_write@f,w,c
 27388  0035E8  6ED9               	movwf	fsr2l,c
 27389  0035EA  6ADA               	clrf	fsr2h,c
 27390  0035EC  0E06               	movlw	6
 27391  0035EE  26D9               	addwf	fsr2l,f,c
 27392  0035F0  D83C               	call	PL98	;call to abstracted procedure
 27393  0035F2  52E6               	movf	postinc1,f,c
 27394  0035F4  52DE               	movf	postinc2,f,c
 27395  0035F6  50DD               	movf	postdec2,w,c
 27396  0035F8  18E5               	xorwf	postdec1,w,c
 27397  0035FA  CFDF FFE8          	movff	indf2,wreg
 27398  0035FE  B4D8               	btfsc	status,2,c
 27399  003600  18E7               	xorwf	indf1,w,c
 27400  003602  E103               	bnz	i1l6046
 27401                           
 27402                           ;fifo.c: 77: f->head = 0;
 27403  003604  D82B               	call	PL40	;call to abstracted procedure
 27404  003606  6ADE               	clrf	postinc2,c
 27405  003608  6ADD               	clrf	postdec2,c
 27406  00360A                     i1l6046:
 27407  00360A  2A0B               	incf	fifo_write@i,f,c
 27408  00360C  0E00               	movlw	0
 27409  00360E  220C               	addwfc	fifo_write@i+1,f,c
 27410  003610  220D               	addwfc	fifo_write@i+2,f,c
 27411  003612  220E               	addwfc	fifo_write@i+3,f,c
 27412  003614                     i1l6048:
 27413  003614  5002               	movf	fifo_write@nbytes,w,c
 27414  003616  5C0B               	subwf	fifo_write@i,w,c
 27415  003618  5003               	movf	fifo_write@nbytes+1,w,c
 27416  00361A  580C               	subwfb	fifo_write@i+1,w,c
 27417  00361C  5004               	movf	fifo_write@nbytes+2,w,c
 27418  00361E  580D               	subwfb	fifo_write@i+2,w,c
 27419  003620  5005               	movf	fifo_write@nbytes+3,w,c
 27420  003622  580E               	subwfb	fifo_write@i+3,w,c
 27421  003624  E3A5               	bnc	i1l6028
 27422                           
 27423                           ;fifo.c: 78: }
 27424                           ;fifo.c: 79: }
 27425                           ;fifo.c: 81: }
 27426                           ;fifo.c: 83: return nbytes;
 27427  003626  C002  F001         	movff	fifo_write@nbytes,?_fifo_write
 27428  00362A  C003  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 27429  00362E                     i1l1437:
 27430  00362E  0012               	return	
 27431  003630                     __end_of_fifo_write:
 27432                           	opt stack 0
 27433  003630                     PL16:
 27434                           	opt stack 21
 27435  003630  26D9               	addwf	fsr2l,f,c
 27436  003632  6ADA               	clrf	fsr2h,c
 27437  003634  CFDE F006          	movff	postinc2,??_fifo_write
 27438  003638  CFDD F007          	movff	postdec2,??_fifo_write+1
 27439  00363C  500F               	movf	fifo_write@f,w,c
 27440  00363E  6ED9               	movwf	fsr2l,c
 27441  003640  6ADA               	clrf	fsr2h,c
 27442  003642  0E02               	movlw	2
 27443  003644  26D9               	addwf	fsr2l,f,c
 27444  003646  6ADA               	clrf	fsr2h,c
 27445  003648  CFDE F008          	movff	postinc2,??_fifo_write+2
 27446  00364C  CFDD F009          	movff	postdec2,??_fifo_write+3
 27447  003650  2A08               	incf	??_fifo_write+2,f,c
 27448  003652  0E00               	movlw	0
 27449  003654  2209               	addwfc	??_fifo_write+3,f,c
 27450  003656  5007               	movf	??_fifo_write+1,w,c
 27451  003658  1809               	xorwf	??_fifo_write+3,w,c
 27452  00365A  0012               	return	
 27453  00365C                     __end_ofPL16:
 27454                           	opt stack 0
 27455  00365C                     PL40:
 27456                           	opt stack 21
 27457  00365C  500F               	movf	fifo_write@f,w,c
 27458  00365E  6ED9               	movwf	fsr2l,c
 27459  003660  6ADA               	clrf	fsr2h,c
 27460  003662  0E02               	movlw	2
 27461  003664  26D9               	addwf	fsr2l,f,c
 27462  003666  6ADA               	clrf	fsr2h,c
 27463  003668  0012               	return	
 27464  00366A                     __end_ofPL40:
 27465                           	opt stack 0
 27466  00366A                     PL98:
 27467                           	opt stack 21
 27468  00366A  6ADA               	clrf	fsr2h,c
 27469  00366C  500F               	movf	fifo_write@f,w,c
 27470  00366E  6EE1               	movwf	fsr1l,c
 27471  003670  6AE2               	clrf	fsr1h,c
 27472  003672  0E02               	movlw	2
 27473  003674  26E1               	addwf	fsr1l,f,c
 27474  003676  6AE2               	clrf	fsr1h,c
 27475  003678  0012               	return	
 27476  00367A                     __end_ofPL98:
 27477                           	opt stack 0
 27478                           tblptru	equ	0xFF8
 27479                           tblptrh	equ	0xFF7
 27480                           tblptrl	equ	0xFF6
 27481                           tablat	equ	0xFF5
 27482                           prodh	equ	0xFF4
 27483                           prodl	equ	0xFF3
 27484                           intcon	equ	0xFF2
 27485                           indf0	equ	0xFEF
 27486                           postinc0	equ	0xFEE
 27487                           fsr0h	equ	0xFEA
 27488                           fsr0l	equ	0xFE9
 27489                           wreg	equ	0xFE8
 27490                           indf1	equ	0xFE7
 27491                           postinc1	equ	0xFE6
 27492                           postdec1	equ	0xFE5
 27493                           fsr1h	equ	0xFE2
 27494                           fsr1l	equ	0xFE1
 27495                           bsr	equ	0xFE0
 27496                           indf2	equ	0xFDF
 27497                           postinc2	equ	0xFDE
 27498                           postdec2	equ	0xFDD
 27499                           plusw2	equ	0xFDB
 27500                           fsr2h	equ	0xFDA
 27501                           fsr2l	equ	0xFD9
 27502                           status	equ	0xFD8
 27503                           
 27504 ;; *************** function _ReadUSART *****************
 27505 ;; Defined at:
 27506 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 27507 ;; Parameters:    Size  Location     Type
 27508 ;;		None
 27509 ;; Auto vars:     Size  Location     Type
 27510 ;;  data            1    0[COMRAM] unsigned char 
 27511 ;; Return value:  Size  Location     Type
 27512 ;;                  1    wreg      unsigned char 
 27513 ;; Registers used:
 27514 ;;		wreg, status,2, status,0
 27515 ;; Tracked objects:
 27516 ;;		On entry : 0/0
 27517 ;;		On exit  : 0/0
 27518 ;;		Unchanged: 0/0
 27519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27520 ;;      Params:         0       0       0       0       0       0       0
 27521 ;;      Locals:         1       0       0       0       0       0       0
 27522 ;;      Temps:          0       0       0       0       0       0       0
 27523 ;;      Totals:         1       0       0       0       0       0       0
 27524 ;;Total ram usage:        1 bytes
 27525 ;; Hardware stack levels used:    1
 27526 ;; This function calls:
 27527 ;;		Nothing
 27528 ;; This function is called by:
 27529 ;;		_Interrupt
 27530 ;; This function uses a non-reentrant model
 27531 ;;
 27532                           
 27533                           	psect	text85
 27534  005420                     __ptext85:
 27535                           	opt stack 0
 27536  005420                     _ReadUSART:
 27537                           	opt stack 21
 27538                           
 27539                           ;incstack = 0
 27540                           ;incstack = 0
 27541  005420  0EF2               	movlw	242
 27542  005422  1633               	andwf	_USART_Status,f,c
 27543  005424  ACAB               	btfss	4011,6,c	;volatile
 27544  005426  D003               	goto	i1l1743
 27545  005428  9033               	bcf	_USART_Status,0,c
 27546  00542A  B0AB               	btfsc	4011,0,c	;volatile
 27547  00542C  8033               	bsf	_USART_Status,0,c
 27548  00542E                     i1l1743:
 27549  00542E  B4AB               	btfsc	4011,2,c	;volatile
 27550  005430  8433               	bsf	_USART_Status,2,c
 27551  005432  B2AB               	btfsc	4011,1,c	;volatile
 27552  005434  8633               	bsf	_USART_Status,3,c
 27553  005436  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 27554  00543A  5001               	movf	ReadUSART@data,w,c
 27555  00543C  0012               	return	
 27556  00543E                     __end_of_ReadUSART:
 27557                           	opt stack 0
 27558                           tblptru	equ	0xFF8
 27559                           tblptrh	equ	0xFF7
 27560                           tblptrl	equ	0xFF6
 27561                           tablat	equ	0xFF5
 27562                           prodh	equ	0xFF4
 27563                           prodl	equ	0xFF3
 27564                           intcon	equ	0xFF2
 27565                           indf0	equ	0xFEF
 27566                           postinc0	equ	0xFEE
 27567                           fsr0h	equ	0xFEA
 27568                           fsr0l	equ	0xFE9
 27569                           wreg	equ	0xFE8
 27570                           indf1	equ	0xFE7
 27571                           postinc1	equ	0xFE6
 27572                           postdec1	equ	0xFE5
 27573                           fsr1h	equ	0xFE2
 27574                           fsr1l	equ	0xFE1
 27575                           bsr	equ	0xFE0
 27576                           indf2	equ	0xFDF
 27577                           postinc2	equ	0xFDE
 27578                           postdec2	equ	0xFDD
 27579                           plusw2	equ	0xFDB
 27580                           fsr2h	equ	0xFDA
 27581                           fsr2l	equ	0xFD9
 27582                           status	equ	0xFD8
 27583                           tblptru	equ	0xFF8
 27584                           tblptrh	equ	0xFF7
 27585                           tblptrl	equ	0xFF6
 27586                           tablat	equ	0xFF5
 27587                           prodh	equ	0xFF4
 27588                           prodl	equ	0xFF3
 27589                           intcon	equ	0xFF2
 27590                           indf0	equ	0xFEF
 27591                           postinc0	equ	0xFEE
 27592                           fsr0h	equ	0xFEA
 27593                           fsr0l	equ	0xFE9
 27594                           wreg	equ	0xFE8
 27595                           indf1	equ	0xFE7
 27596                           postinc1	equ	0xFE6
 27597                           postdec1	equ	0xFE5
 27598                           fsr1h	equ	0xFE2
 27599                           fsr1l	equ	0xFE1
 27600                           bsr	equ	0xFE0
 27601                           indf2	equ	0xFDF
 27602                           postinc2	equ	0xFDE
 27603                           postdec2	equ	0xFDD
 27604                           plusw2	equ	0xFDB
 27605                           fsr2h	equ	0xFDA
 27606                           fsr2l	equ	0xFD9
 27607                           status	equ	0xFD8
 27608                           
 27609                           	psect	rparam
 27610  0000                     tblptru	equ	0xFF8
 27611                           tblptrh	equ	0xFF7
 27612                           tblptrl	equ	0xFF6
 27613                           tablat	equ	0xFF5
 27614                           prodh	equ	0xFF4
 27615                           prodl	equ	0xFF3
 27616                           intcon	equ	0xFF2
 27617                           indf0	equ	0xFEF
 27618                           postinc0	equ	0xFEE
 27619                           fsr0h	equ	0xFEA
 27620                           fsr0l	equ	0xFE9
 27621                           wreg	equ	0xFE8
 27622                           indf1	equ	0xFE7
 27623                           postinc1	equ	0xFE6
 27624                           postdec1	equ	0xFE5
 27625                           fsr1h	equ	0xFE2
 27626                           fsr1l	equ	0xFE1
 27627                           bsr	equ	0xFE0
 27628                           indf2	equ	0xFDF
 27629                           postinc2	equ	0xFDE
 27630                           postdec2	equ	0xFDD
 27631                           plusw2	equ	0xFDB
 27632                           fsr2h	equ	0xFDA
 27633                           fsr2l	equ	0xFD9
 27634                           status	equ	0xFD8
 27635                           tblptru	equ	0xFF8
 27636                           tblptrh	equ	0xFF7
 27637                           tblptrl	equ	0xFF6
 27638                           tablat	equ	0xFF5
 27639                           prodh	equ	0xFF4
 27640                           prodl	equ	0xFF3
 27641                           intcon	equ	0xFF2
 27642                           indf0	equ	0xFEF
 27643                           postinc0	equ	0xFEE
 27644                           fsr0h	equ	0xFEA
 27645                           fsr0l	equ	0xFE9
 27646                           wreg	equ	0xFE8
 27647                           indf1	equ	0xFE7
 27648                           postinc1	equ	0xFE6
 27649                           postdec1	equ	0xFE5
 27650                           fsr1h	equ	0xFE2
 27651                           fsr1l	equ	0xFE1
 27652                           bsr	equ	0xFE0
 27653                           indf2	equ	0xFDF
 27654                           postinc2	equ	0xFDE
 27655                           postdec2	equ	0xFDD
 27656                           plusw2	equ	0xFDB
 27657                           fsr2h	equ	0xFDA
 27658                           fsr2l	equ	0xFD9
 27659                           status	equ	0xFD8


Data Sizes:
    Strings     4015
    Constant    120
    Data        0
    BSS         1128
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      69
    BANK0           160    113     156
    BANK1           256     20     198
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), STR_29(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), STR_116(CODE[5]), 
		 -> STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), STR_111(CODE[11]), 
		 -> STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), STR_94(CODE[5]), 
		 -> STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), STR_45(CODE[5]), 
		 -> STR_44(CODE[5]), STR_42(CODE[5]), STR_41(CODE[4]), STR_40(CODE[5]), 
		 -> STR_37(CODE[3]), STR_28(CODE[3]), STR_19(CODE[7]), STR_17(CODE[8]), 
		 -> STR_15(CODE[7]), STR_13(CODE[9]), STR_11(CODE[6]), STR_9(CODE[7]), 
		 -> STR_7(CODE[5]), STR_5(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), 
		 -> STR_116(CODE[5]), STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), 
		 -> STR_111(CODE[11]), STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), 
		 -> STR_94(CODE[5]), STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[5]), 
		 -> STR_41(CODE[4]), STR_40(CODE[5]), STR_37(CODE[3]), STR_28(CODE[3]), 
		 -> STR_19(CODE[7]), STR_17(CODE[8]), STR_15(CODE[7]), STR_13(CODE[9]), 
		 -> STR_11(CODE[6]), STR_9(CODE[7]), STR_7(CODE[5]), STR_5(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_121(CODE[6]), STR_120(CODE[8]), STR_118(CODE[6]), STR_116(CODE[5]), 
		 -> STR_114(CODE[8]), STR_113(CODE[6]), STR_112(CODE[9]), STR_111(CODE[11]), 
		 -> STR_109(CODE[8]), STR_107(CODE[4]), STR_106(CODE[5]), STR_94(CODE[5]), 
		 -> STR_82(CODE[7]), STR_77(CODE[5]), STR_68(CODE[5]), STR_45(CODE[5]), 
		 -> STR_44(CODE[5]), STR_42(CODE[5]), STR_41(CODE[4]), STR_40(CODE[5]), 
		 -> STR_37(CODE[3]), STR_28(CODE[3]), STR_19(CODE[7]), STR_17(CODE[8]), 
		 -> STR_15(CODE[7]), STR_13(CODE[9]), STR_11(CODE[6]), STR_9(CODE[7]), 
		 -> STR_7(CODE[5]), STR_5(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_243(CODE[2]), STR_242(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_237(CODE[2]), 
		 -> STR_236(CODE[3]), STR_235(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_253(CODE[3]), STR_252(CODE[23]), STR_251(CODE[10]), STR_250(CODE[10]), 
		 -> STR_249(CODE[12]), STR_248(CODE[8]), STR_247(CODE[7]), STR_246(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_245(CODE[10]), STR_244(CODE[3]), STR_241(CODE[20]), 
		 -> STR_240(CODE[3]), STR_239(CODE[14]), STR_238(CODE[3]), STR_234(CODE[8]), 
		 -> STR_233(CODE[15]), STR_232(CODE[67]), STR_231(CODE[3]), STR_230(CODE[27]), 
		 -> STR_229(CODE[67]), STR_228(CODE[39]), STR_227(CODE[62]), STR_226(CODE[55]), 
		 -> STR_225(CODE[49]), STR_224(CODE[67]), STR_223(CODE[47]), STR_222(CODE[47]), 
		 -> STR_221(CODE[34]), STR_220(CODE[71]), STR_219(CODE[20]), STR_218(CODE[78]), 
		 -> STR_217(CODE[24]), STR_216(CODE[77]), STR_215(CODE[67]), STR_214(CODE[69]), 
		 -> STR_213(CODE[47]), STR_212(CODE[40]), STR_211(CODE[39]), STR_210(CODE[33]), 
		 -> STR_209(CODE[23]), STR_208(CODE[56]), STR_207(CODE[24]), STR_206(CODE[44]), 
		 -> STR_205(CODE[50]), STR_204(CODE[31]), STR_203(CODE[50]), STR_202(CODE[51]), 
		 -> STR_201(CODE[46]), STR_200(CODE[44]), STR_199(CODE[27]), STR_198(CODE[39]), 
		 -> STR_197(CODE[39]), STR_196(CODE[52]), STR_195(CODE[54]), STR_194(CODE[55]), 
		 -> STR_193(CODE[3]), STR_190(CODE[24]), STR_189(CODE[57]), STR_188(CODE[53]), 
		 -> STR_187(CODE[58]), STR_186(CODE[3]), STR_183(CODE[25]), STR_182(CODE[3]), 
		 -> STR_179(CODE[24]), STR_178(CODE[3]), STR_175(CODE[24]), STR_174(CODE[3]), 
		 -> STR_171(CODE[24]), STR_170(CODE[3]), STR_167(CODE[23]), STR_166(CODE[3]), 
		 -> STR_163(CODE[21]), STR_162(CODE[3]), STR_159(CODE[22]), STR_158(CODE[3]), 
		 -> STR_155(CODE[17]), STR_154(CODE[3]), STR_151(CODE[18]), STR_150(CODE[4]), 
		 -> STR_149(CODE[11]), STR_148(CODE[2]), STR_145(CODE[7]), STR_142(CODE[7]), 
		 -> STR_139(CODE[9]), STR_136(CODE[7]), STR_133(CODE[8]), STR_130(CODE[7]), 
		 -> STR_129(CODE[2]), STR_128(CODE[2]), STR_127(CODE[6]), STR_126(CODE[8]), 
		 -> STR_125(CODE[8]), STR_124(CODE[20]), STR_123(CODE[27]), STR_122(CODE[33]), 
		 -> STR_119(CODE[26]), STR_117(CODE[32]), STR_115(CODE[28]), STR_110(CODE[40]), 
		 -> STR_108(CODE[44]), STR_105(CODE[39]), STR_103(CODE[36]), STR_101(CODE[37]), 
		 -> STR_99(CODE[40]), STR_97(CODE[37]), STR_96(CODE[50]), STR_93(CODE[41]), 
		 -> STR_91(CODE[38]), STR_89(CODE[39]), STR_87(CODE[42]), STR_85(CODE[39]), 
		 -> STR_84(CODE[66]), STR_81(CODE[3]), STR_78(CODE[20]), STR_76(CODE[33]), 
		 -> STR_75(CODE[35]), STR_74(CODE[24]), STR_72(CODE[33]), STR_70(CODE[24]), 
		 -> STR_67(CODE[54]), STR_66(CODE[6]), STR_65(CODE[3]), STR_60(CODE[34]), 
		 -> STR_59(CODE[3]), STR_56(CODE[4]), wrkbuf(BANK1[80]), STR_51(CODE[15]), 
		 -> STR_49(CODE[33]), STR_47(CODE[24]), STR_43(CODE[6]), STR_39(CODE[18]), 
		 -> STR_38(CODE[6]), STR_36(CODE[33]), STR_35(CODE[6]), STR_27(CODE[24]), 
		 -> STR_26(CODE[18]), STR_25(CODE[20]), STR_24(CODE[25]), STR_23(CODE[22]), 
		 -> STR_22(CODE[19]), STR_21(CODE[20]), STR_20(CODE[20]), STR_18(CODE[6]), 
		 -> STR_16(CODE[6]), STR_14(CODE[6]), STR_12(CODE[6]), STR_10(CODE[6]), 
		 -> STR_8(CODE[6]), STR_6(CODE[31]), STR_4(CODE[29]), STR_3(CODE[55]), 
		 -> STR_2(CODE[53]), STR_1(CODE[37]), 

    sprintf$2156	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_255(CODE[17]), STR_254(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_192(CODE[3]), STR_191(CODE[7]), STR_185(CODE[3]), STR_184(CODE[7]), 
		 -> STR_181(CODE[4]), STR_180(CODE[8]), STR_177(CODE[4]), STR_176(CODE[8]), 
		 -> STR_173(CODE[4]), STR_172(CODE[8]), STR_169(CODE[4]), STR_168(CODE[8]), 
		 -> STR_165(CODE[4]), STR_164(CODE[7]), STR_161(CODE[4]), STR_160(CODE[7]), 
		 -> STR_157(CODE[4]), STR_156(CODE[7]), STR_153(CODE[4]), STR_152(CODE[7]), 
		 -> STR_147(CODE[3]), STR_146(CODE[7]), STR_144(CODE[3]), STR_143(CODE[7]), 
		 -> STR_141(CODE[3]), STR_140(CODE[7]), STR_138(CODE[3]), STR_137(CODE[7]), 
		 -> STR_135(CODE[3]), STR_134(CODE[7]), STR_132(CODE[3]), STR_131(CODE[7]), 
		 -> STR_80(CODE[3]), STR_79(CODE[7]), STR_64(CODE[3]), STR_63(CODE[7]), 
		 -> STR_62(CODE[3]), STR_61(CODE[7]), STR_58(CODE[3]), STR_57(CODE[7]), 
		 -> STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[3]), STR_52(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2136$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendReceiveEventVSCP@crc(COMRAM[1]), receivePrintEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), 
		 -> sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_write@buf	PTR const void  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(1) Largest target is 8
		 -> Interrupt@dlc(COMRAM[1]), Interrupt@data(COMRAM[8]), Interrupt@id(COMRAM[4]), Interrupt@c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    fifo_read@buf	PTR void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@data(BANK0[8]), 
		 -> receivePrintEventCANAL@dlc(BANK0[1]), receivePrintEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), 
		 -> vscpData(BANK1[8]), vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@data(BANK0[8]), 
		 -> receivePrintEventCANAL@dlc(BANK0[1]), receivePrintEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), 
		 -> vscpData(BANK1[8]), vscpSize(BANK1[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(1) Largest target is 9
		 -> canInputFifo(COMRAM[8]), serialInputFifo(COMRAM[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(BANK0[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(1) Largest target is 8
		 -> Interrupt@data(COMRAM[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> Interrupt@id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> Interrupt@dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> Interrupt@flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receivePrintEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(2) Largest target is 1
		 -> receivePrintEventSLCAN@dlc(BANK0[1]), receivePrintEventCANAL@dlc(BANK0[1]), vscpSize(BANK1[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receivePrintEventSLCAN@id(BANK0[4]), receivePrintEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(2) Largest target is 1
		 -> vscpPriority(BANK1[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(2) Largest target is 2
		 -> vscpClass(BANK1[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(2) Largest target is 1
		 -> vscpType(BANK1[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(2) Largest target is 1
		 -> vscpNodeId(BANK1[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(2) Largest target is 1
		 -> vscpSize(BANK1[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1429	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_192(CODE[3]), STR_191(CODE[7]), 

    printErrors$1420	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_185(CODE[3]), STR_184(CODE[7]), 

    printErrors$1414	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_181(CODE[4]), STR_180(CODE[8]), 

    printErrors$1408	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_177(CODE[4]), STR_176(CODE[8]), 

    printErrors$1402	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_173(CODE[4]), STR_172(CODE[8]), 

    printErrors$1396	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_169(CODE[4]), STR_168(CODE[8]), 

    printStatistics$1389	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_165(CODE[4]), STR_164(CODE[7]), 

    printStatistics$1383	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_161(CODE[4]), STR_160(CODE[7]), 

    printStatistics$1377	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_157(CODE[4]), STR_156(CODE[7]), 

    printStatistics$1371	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[4]), STR_152(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1180(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1314	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1309	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1304	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    receivePrintEventVerbose$1299	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_138(CODE[3]), STR_137(CODE[7]), 

    receivePrintEventVerbose$1294	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_135(CODE[3]), STR_134(CODE[7]), 

    receivePrintEventVerbose$1289	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_132(CODE[3]), STR_131(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendReceiveEventVSCP@crc(COMRAM[1]), receivePrintEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), 
		 -> sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1224	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1205	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1197	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_80(CODE[3]), STR_79(CODE[7]), 

    doModeVerbose@preg_1185	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1181	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1172	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_64(CODE[3]), STR_63(CODE[7]), 

    doModeVerbose$1168	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1162	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_58(CODE[3]), STR_57(CODE[7]), 

    doModeVerbose$1157	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_55(CODE[3]), STR_54(CODE[7]), 

    doModeVerbose$1145	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_53(CODE[3]), STR_52(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_104(CODE[2]), STR_102(CODE[2]), STR_100(CODE[2]), STR_98(CODE[2]), 
		 -> STR_95(CODE[2]), STR_92(CODE[2]), STR_90(CODE[2]), STR_88(CODE[2]), 
		 -> STR_86(CODE[2]), STR_83(CODE[2]), STR_73(CODE[2]), STR_71(CODE[2]), 
		 -> STR_69(CODE[2]), STR_50(CODE[2]), STR_48(CODE[2]), STR_46(CODE[2]), 
		 -> STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), STR_31(CODE[2]), 
		 -> STR_30(CODE[2]), NULL(NULL[0]), STR_29(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1133	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    S21$buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> caninputBuffer(BIGRAM[494]), inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _doModeSLCAN->_sendCANFrame
    _hexStringToBytes->_strlen
    _receivePrintEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _calcCRC->_crc8
    _receivePrintEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _printBinary->_WriteUSART
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_writeEEPROM
    _init_app_ram->_readEEPROM

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  100864
                                            106 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _readEEPROM
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    7645
                                             54 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                        _writeEEPROM
               _ECANSetOperationMode
                             _memset
             _receivePrintEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                              4 BANK0     14     9      5
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventSLCAN                              10    10      0    3430
                                             35 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8     910
                                             22 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   12201
                                             87 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
             _receivePrintEventCANAL
                            _calcCRC
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
                 _sendVSCPDriverNack
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1517
                                             15 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1393
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    2323
                                             54 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     174
                                              0 BANK0     10     4      6
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1393
                                             15 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1455
                                             15 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     631
                                             12 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventCANAL                              15    15      0    2758
                                             18 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     737
                                             12 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     427
                                              7 BANK0      5     2      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   77387
                                              0 BANK1     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                        _writeEEPROM
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2182
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    3612
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     161
                                              1 BANK0      5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    3550
                                             86 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   19602
                                            101 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    3925
                                             95 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    5452
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    5257
                                             95 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    3426
                                             86 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    2199
                                             54 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    1979
                                             47 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    1886
                                             10 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     693
                                              0 BANK0     10     3      7
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                              0 BANK0      8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    5402
                                             52 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    5328
                                             52 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     665
                                              6 BANK0      7     5      2
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4     799
                                             12 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     257
                                              6 BANK0      6     2      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     124
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4     898
                                             13 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     257
                                              1 BANK0      4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     260
                                              4 BANK0      9     3      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0      96
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    6542
                                             52 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        20     8     12    1041
                                             18 BANK0     20     8     12
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          5     1      4     694
                                             13 BANK0      5     1      4
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           13     9      4     446
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    5087
                                             22 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     232
                                             13 BANK0      9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    1480
                                             24 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1146
                                             16 BANK0      8     2      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6     913
                                              7 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     232
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     241
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2      93
                                              1 BANK0      4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     603
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      62
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     310
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2     104
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     263
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     198
                                              3 BANK0      1     1      0
                        _writeEEPROM
 ---------------------------------------------------------------------------------
 (2) _writeEEPROM                                          3     0      3      62
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      65
                         _readEEPROM
 ---------------------------------------------------------------------------------
 (3) _readEEPROM                                           3     1      2      65
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            5     1      4     186
                                              0 BANK0      5     1      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           22    22      0    2489
                                             18 COMRAM    22    22      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     269
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       11     9      2     154
                                              0 COMRAM    11     9      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 11     8      3    1180
                                              7 COMRAM    11     8      3
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         15    10      5     378
                                              0 COMRAM    15    10      5
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _readEEPROM
   _vscp_restoreDefaults
     _init_app_ram
       _readEEPROM
     _init_app_eeprom
       _writeEEPROM
   _init
     _WriteTimer0
     _init_app_ram
       _readEEPROM
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _writeEEPROM
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receivePrintEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _writeEEPROM
     _ECANSetOperationMode
     _memset
     _receivePrintEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     3D      BD       9       73.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100     14      C6       7       77.3%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     71      9C       5       97.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     28      45       1       72.6%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     364       3        0.0%
DATA                 0      0     560      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Mon Feb 23 22:24:59 2015

                 __end_of_doModeVerbose 146A                            printBinary@i 0064  
                           fifo_write@f 000F                             fifo_write@i 000B  
                           fifo_write@p 000A                          ??_fifo_getFree 0003  
                 __end_of_sendVSCPFrame 4302              doModeVerbose@filter_nodeid 0290  
                                    PL2 146A                                      PL4 147E  
                                    PL6 148E                                      PL8 149C  
                                    bsr 000FE0                     ___wmul@multiplicand 0062  
                           __CFG_BORV$3 000000                  __end_of_doModeVscpNode 54C2  
                                   PL10 14BA                                     PL20 1C4A  
                                   PL12 1504                                     PL30 373A  
                                   PL22 398C                                     PL14 1C2C  
                                   PL40 365C                                     PL32 4162  
                                   PL24 1C5A                                     PL16 3630  
                                   PL50 4394                                     PL42 1572  
                                   PL34 1544                                     PL26 1520  
                                   PL18 304E                                     PL60 1CB0  
                                   PL52 1C9A                                     PL44 1C80  
                                   PL36 3504                                     PL28 1530  
                                   PL70 3A8A                                     PL62 1CC6  
                                   PL54 158C                                     PL46 4434  
                                   PL38 1556                                     PL80 1CD4  
                                   PL72 3770                                     PL64 47C4  
                                   PL56 375E                                     PL48 374E  
                                   PL90 2EC8                                     PL82 354C  
                                   PL74 3512                                     PL66 4566  
                                   PL58 15A4                                     PL92 3F14  
                                   PL84 205C                                     PL76 3526  
                                   PL68 3D60                                     PL94 1CE6  
                                   PL86 518E                                     PL78 3538  
                                   PL96 5320                                     PL88 423E  
                                   PL98 366A                 sendEscapedUartData@pcrc 006C  
               receivePrintEventCANAL@i 007A                                     l400 33CA  
                                   l403 33E2                                     l404 33EC  
                                   l502 1468                                     l406 33F8  
                                   l511 0AD2                                     l530 0A92  
                                   l507 0962                                     l516 09EA  
                                   l543 0B28                                     l535 0AB2  
                                   l527 0A88                                     l632 304C  
                                   l801 4336                                     l722 4970  
                                   l810 4380                                     l731 49B6  
                                   l804 4356                                     l741 41A0  
                                   l813 438A                                     l709 1F96  
                                   l726 4992                                     l902 32F4  
                                   l750 41E6                                     l822 3E60  
                                   l735 49DA                                     l807 4366  
                                   l831 3EA6                                     l399 3394  
                                   l744 41AA                                     l840 3EE4  
                                   l905 32FE                                     l753 41F6  
                                   l825 3E6A                                     l738 4196  
                                   l834 3EB6                                     l674 205A  
                                   l747 41C6                                     l771 43BA  
                                   l843 3F00                                     l819 3E56  
                                   l908 3308                                     l756 422A  
                                   l780 4406                                     l828 3E86  
                                   l684 1DAC                                     l765 43A6  
                                   l837 3ED2                                     l774 43D6  
                                   l846 3F0A                                     l942 2DB4  
                                   l759 4234                                     l783 4420  
                                   l951 2E3C                                     l768 43B0  
                                   l792 4306                                     l777 43F6  
                                   l961 2EBC                                     l945 2DEC  
                                   l937 2D82                                     l882 25EA  
                                   l890 320C                                     l786 442A  
                                   l883 25FE                                     l875 2548  
                                   l795 4310                                     l972 402A  
                                   l964 2EC6                                     l981 3AE6  
                                   l893 3216                                     l798 431A  
                                   l958 2E9E                                     l975 40BE  
                                   l887 3202                                     l984 3B98  
                                   l896 3232                                     l999 37DE  
                          __CFG_CPB$OFF 000000                          getVSCPFrame@id 0082  
                         fifo_write@buf 0001                   ?_vscp_restoreDefaults 0001  
                  __size_of_WriteTimer0 0012                                     _pos 0102  
        __size_of_writeRegisterExtended 0106                                     wreg 000FE8  
         __end_of_writeRegisterExtended 3894                                    PL100 4180  
                                  PL102 27FA                                    PL104 4574  
                                  PL106 3784                                    PL108 1CF0  
                          __CFG_LVP$OFF 000000                 receivePrintEventSLCAN@i 008B  
              receivePrintEventCANAL@id 007B                            __CFG_WDT$OFF 000000  
                                  l1002 3892                                    l1022 4FAC  
                                  l1121 476E                                    l1018 4FA0  
                                  l1131 4B32                                    l1124 4792  
                                  l1150 28FC                                    l1142 287E  
                                  l1151 290E                                    l1152 2920  
                                  l1144 2890                                    l1153 2932  
                                  l1145 28A2                                    l1154 2944  
                                  l1146 28B4                                    l1171 528E  
                                  l1083 3BB0                                    l1155 2956  
                                  l1147 28C6                                    l1156 2968  
                                  l1148 28D8                                    l1077 233C  
                                  l1069 22A6                                    l1157 297A  
                                  l1149 28EA                                    l1158 298C  
                                  l1175 4C28                                    l1167 48E0  
                                  l1159 29E4                                    l2312 5004  
                                  l1425 4140                                    l1345 31CA  
                                  l1337 312E                                    l2322 524E  
                                  l2403 4CF8                                    l1339 314C  
                                  l1460 53D8                                    l1428 4160  
                                  l2229 4AB8                                    l1621 1A10  
                                  l1613 19A8                                    l1533 15D8  
                                  l1622 1A14                                    l1550 16C6  
                                  l2239 4E0E                                    l2415 4742  
                                  l1720 4E62                                    l1640 1ABA  
                                  l1624 1A30                                    l1713 4E40  
                                  l2417 4736                                    l1722 4E7A  
                                  l1730 4ED4                                    l1570 175C  
                                  l2442 508E                                    l2418 473A  
                                  l1474 4C34                                    l1482 4C92  
                                  l1619 19EA                                    l2451 5218  
                                  l2363 4D5C                                    l1476 4C3C  
                                  l1492 51DA                                    l1717 4E54  
                                  l1549 1714                                    l2365 4DBC  
                                  l2461 50D2                                    l1718 4E56  
                                  l2198 44C0                                    l1566 1724  
                                  l1719 4E60                                    l1399 3738  
                                  l1680 541A                                    l2384 4A52  
                                  l1681 541C                                    l1585 1846  
                                  l1569 1758                                    l2297 3D3C  
                                  l1497 45B4                                    l1922 3982  
                                  l1498 461A                                    l2387 4A4E  
                                  l1923 398A                                    l9400 3418  
                                  l9410 3434                                    l9402 341E  
                                  l9406 3428                                    l9600 0344  
                                  l9434 4C46                                    l9346 3356  
                                  l9532 4B12                                    l9524 4AEC  
                                  l9540 40D2                                    l9700 0648  
                                  l9436 4C4C                                    l9710 06A0  
                                  l9630 043C                                    l9536 4B26  
                                  l9528 4AFE                                    l9552 414A  
                                  l9712 06AA                                    l9704 0666  
                                  l9720 070E                                    l9640 0486  
                                  l9624 0400                                    l9616 03C2  
                                  l9608 0384                                    l9560 0238  
                                  l9554 414E                                    l9386 33F4  
                                  l9378 33DE                                    l9804 0A04  
                                  l9740 07F8                                    l9732 078E  
                                  l9660 050A                                    l9652 04DA  
                                  l9644 04A8                                    l9910 0CF6  
                                  l9902 0CBA                                    l9830 0AAC  
                                  l9726 074E                                    l9718 06FE  
                                  l9574 026E                                    l9398 3412  
                                  l9816 0A54                                    l9744 0826  
                                  l9736 07BC                                    l9728 0760  
                                  l9664 0522                                    l9656 04F2  
                                  l9648 04C2                                    l9592 0304  
                                  l9584 02C6                                    l9914 0D2C  
                                  l9906 0CE6                                    l9770 091E  
                                  l9762 089E                                    l9682 05BE  
                                  l9666 0534                                    l9916 0D3C  
                                  l9844 0AF4                                    l9676 058C  
                                  l9942 0E0E                                    l9774 0930  
                                  l9758 088C                                    l9694 061A  
                                  STR_1 7953                                    l9928 0DB2  
                                  l9872 0BA4                                    l9856 0B42  
                                  l9864 0B82                                    l9792 09B6  
                                  l9784 096A                                    l9768 090A  
                                  l9688 05EC                                    STR_2 74B1  
                                  STR_3 73D9                                    l9962 0E8A  
                                  l9890 0C2A                                    l9866 0B86  
                                  l9874 0BB6                                    STR_4 7B2B  
                                  STR_5 7FD0                                    l9972 0EC4  
                                  STR_6 7AED                                    STR_7 7FB7  
                                  l9982 0F00                                    l9958 0E7A  
                                  l9886 0C18                                    STR_8 7F80  
                                  STR_9 7F5E                                    l9992 0F3A  
                                  l9968 0EB4                                    l9896 0C96  
                                  l9978 0EF0                                    l9898 0CAA  
                                  l9988 0F2A                                    l9998 0F64  
                                  _PEIE 007F96                          sendCANFrame@id 008F  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 0061  
                                  _bDLE 00F5                            __CFG_PWRT$ON 000000  
            __end_of_sendVSCPDriverNack 4394                                    _bHex 0100  
          doModeVerbose@filter_priority 028E                                    _crc8 52C8  
                                  _atoi 3894                                    _main 330A  
                                  _init 500E                                    _mode 00F8  
                                  _itoa 5290                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 4442                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 022A                            _sprintf$2150 0084  
                          _sprintf$2156 0086                            _sprintf$2149 0082  
                           _writeEEPROM 53BC               ECANReceiveMessage@dataLen 0009  
                    doModeVerbose@count 02AB                   getVSCPFrame@pPriority 0078  
                        _caninputBuffer 0400                      doModeVerbose@value 02B1  
                  __end_of_getVSCPFrame 48E2                        __RegsToCANID@val 0003  
                      __RegsToCANID@ptr 0001                    __size_of_getCANFrame 0074  
              ?_receiveVSCPModeCanalMsg 0001                receivePrintEventSLCAN@id 0086  
                       ?_doModeVscpNode 0001                                   l10002 0F74  
                                 l10110 12D2                                   l11000 3C52  
                                 l10024 1038                                   l10008 0FCC  
                                 l10114 12F8                                   l10034 1072  
                                 l10202 2F48                                   l11100 1670  
                                 l11020 4D8A                                   l11012 533A  
                                 l10108 12C0                                   l10044 10AE  
                                 l10028 1048                                   l11014 5344  
                                 l10150 142E                                   l10134 1390  
                                 l10126 1354                                   l10142 13CC  
                                 l10054 10E8                                   l10038 1082  
                                 l10230 2F94                                   l10310 1D36  
                                 l11120 16CC                                   l10152 143C  
                                 l10064 1122                                   l10048 10BE  
                                 l10240 2FA6                                   l10400 1F7A  
                                 l11202 1850                                   l11130 1722  
                                 l10146 140A                                   l10090 1224  
                                 l10058 10F8                                   l10154 144A  
                                 l10242 2FAC                                   l10226 2F88  
                                 l10218 2F64                                   l10410 1FAE  
                                 l10322 1D82                                   l10314 1D58  
                                 l12012 52AC                                   l11212 1884  
                                 l11132 1728                                   l11124 1700  
                                 l11108 1696                                   l12100 314E  
                                 l11060 3B76                                   l10076 1188  
                                 l10068 1132                                   l10228 2F8E  
                                 l10180 2F1C                                   l10164 2EE0  
                                 l10332 1DB6                                   l10316 1D5E  
                                 l11214 1888                                   l11206 186E  
                                 l11150 1774                                   l11126 171A  
                                 l11062 3B96                                   l10078 1198  
                                 l10158 1466                                   l10262 2FE2  
                                 l10422 2030                                   l11304 1A40  
                                 l11320 1A74                                   l11240 18F4  
                                 l11160 17A2                                   l11144 1762  
                                 l11128 171E                                   l11080 15EE  
                                 l12120 31BC                                   l10280 302A  
                                 l10256 2FCC                                   l10184 2F22  
                                 l10424 203C                                   l10408 1F9C  
                                 l10344 1DE2                                   l10328 1DA6  
                                 l10416 1FC6                                   _B0CON 000E20  
                                 l12210 4A78                                   l11314 1A60  
                                 l11242 18F8                                   l11226 18BC  
                                 l11170 17C4                                   l11138 1740  
                                 l11074 15E2                                   l11402 1C18  
                                 l12106 317C                                   l12114 319A  
                                 l12042 409C                                   l12050 4E86  
                                 l10098 1268                                   l10274 3012  
                                 l10194 2F38                                   l10290 304A  
                                 l10370 1EA8                                   l10354 1E06  
                                 l10418 201C                                   l10452 4E42  
                                 l10444 4E34                                   l12220 4AAA  
                                 l12212 4A7C                                   l11332 1A9A  
                                 l11228 18C0                                   l11404 1C1E  
                                 l11164 17A8                                   l11148 1768  
                                 l11156 178C                                   l11180 1800  
                                 l11092 162A                                   l11076 15E6  
                                 l11084 15F4                                   l11068 15C0  
                                 l12300 5208                                   l12124 31C0  
                                 l12044 40BC                                   l12052 4E8A  
                                 l10268 2FFA                                   l10284 303C  
                                 l12140 51B4                                   l10428 2058  
                                 l10606 4844                                   l11414 547C  
                                 l12230 4DDA                                   l11262 1958  
                                 l11174 17D0                                   l11166 17B6  
                                 l11078 15EA                                   l10702 25CC  
                                 l10630 23B0                                   l12126 31C2  
                                 l12054 4E98                                   l11430 4FB6  
                                 l11422 4F86                                   l10286 3042  
                                 l12208 4A6C                                   l12232 4DDE  
                                 l11352 1ADC                                   l11328 1A90  
                                 l11272 1988                                   l11256 192C  
                                 l10704 25D0                                   l10712 25FC  
                                 l12072 30C8                                   l12056 4EA2  
                                 _B1CON 000E30                                   l10730 544C  
                                 l12250 4FE0                                   l11370 1B18  
                                 l11354 1AE2                                   l11338 1AA2  
                                 l11290 19EE                                   l11266 1976  
                                 l11258 193E                                   l11178 17D6  
                                 l10706 25DC                                   l10642 2402  
                                 l10722 4A16                                   l12314 509E  
                                 l12322 505A                                   l12066 30B6  
                                 l11530 3A66                                   l11522 3A2C  
                                 l11514 39C6                                   l10378 1F1E  
                                 l12236 4E00                                   l12228 4DCE  
                                 l11372 1B6E                                   l11364 1B04  
                                 l11348 1ACA                                   l11284 19C6  
                                 l11188 1810                                   l12308 546A  
                                 l10724 4A3C                                   l12316 50A6  
                                 l12324 5062                                   l10820 2C2E  
                                 l12084 30F2                                   l11524 3A34  
                                 l12156 51D8                                   l12148 51C6  
                                 l10388 1F44                                   l12246 4FD4  
                                 l12270 5232                                   l12174 444A  
                                 l11382 1BB4                                   l11278 19AC  
                                 l10654 2456                                   l10718 49DE  
                                 l10806 2BC4                                   l12094 3132  
                                 l11526 3A4A                                   l11470 3870  
                                 l12248 4FDC                                   l12184 4482  
                                 l12168 53FA                                   l11392 1BEE  
                                 l12280 4C96                                   l10736 46C0  
                                 l10904 21C4                                   l11552 4678  
                                 l11472 3890                                   _B2CON 000E40  
                                 l10594 482A                                   l12258 4FFA  
                                 l12274 5244                                   l12266 5226  
                                 l11386 1BCE                                   l11378 1B90  
                                 l11298 1A2A                                   l10666 24A8  
                                 l12290 4CE4                                   l10746 46F8  
                                 l10770 3910                                   l10834 2C98  
                                 l10930 2282                                   l11554 4680  
                                 l11642 32E4                                   l12268 522E  
                                 l11396 1C10                                   l11388 1BE0  
                                 l10692 2558                                   l12284 4CD0  
                                 l10756 3896                                   l11492 3F9C  
                                 l11548 4650                                   l11572 299E  
                                 l10678 24FA                                   l12294 51E8  
                                 l10774 394A                                   l10766 38F0  
                                 l10758 389C                                   l10942 22C4  
                                 l10934 2294                                   l10918 222E  
                                 l10862 2086                                   l10782 5398  
                                 l11494 3FB2                                   l11486 3F4E  
                                 l11558 468E                                   l11638 32CC  
                                 l11654 5366                                   l12288 4CDC  
                                 l10768 3908                                   l10848 2D02  
                                 l11584 36C6                                   l11832 2E46  
                                 l11824 2E00                                   _B3CON 000E50  
                                 l12298 5204                                   l10954 2318  
                                 l10890 215A                                   l10786 53A8  
                                 l11498 3FCE                                   l11658 5384  
                                 l10876 20F0                                   l11908 528C  
                                 l11836 2E5A                                   l11862 5128  
                                 l10958 232A                                   l10982 3BE8  
                                 l11864 512E                                   _B4CON 000E60  
                                 l11962 4BE0                                   l11946 487A  
                                 l11892 50EE                                   l11980 3C9E  
                                 l11884 4606                                   l11958 4BD4  
                                 l11990 3CE2                                   l11878 45C2  
                                 _B5CON 000E70                                   l11898 510A  
                                 ?_crc8 0067                    __size_of_doModeSLCAN 0362  
                    writeEEPROM@address 0060                                   ?_atoi 0066  
                                 ?_main 00CA                                   ?_init 0001  
                                 ?_itoa 0070                           i1_WriteTimer0 54A6  
                                 _EEADR 000FA9                                   STR_10 7F80  
                                 STR_11 7F92                                   STR_12 7F80  
                                 STR_20 7D83                                   STR_13 7ECD  
                                 STR_21 7D97                                   STR_14 7F80  
                                 STR_30 7FF5                                   STR_22 7DD3  
                                 STR_31 7FF5                                   STR_15 7F50  
                                 STR_23 7D06                                   STR_16 7F80  
                                 STR_32 7FF5                                   STR_40 7FCB  
                                 STR_24 7BCF                                   STR_33 7FF5  
                                 STR_41 7FD9                                   STR_17 7F0E  
                                 STR_25 7D6F                                   STR_18 7F80  
                                 STR_50 7F2B                                   STR_34 7FF5  
                                 STR_42 7FC6                                   STR_26 7DE6  
                                 STR_43 7F80                                   STR_35 7F80  
                                 STR_19 7F49                                   STR_51 7E5E  
                                 STR_27 7C49                                   STR_28 7FEB  
                                 STR_44 7FA3                                   STR_52 7F65  
                                 STR_36 7A49                                   STR_60 7A06  
                                 STR_61 7F65                                   STR_29 7FF5  
                                 STR_53 7FEE                                   STR_37 7FE8  
                                 STR_45 7FA8                                   STR_38 7F80  
                                 STR_70 7C31                                   STR_46 7F2B  
                                 STR_54 7F65                                   STR_62 7FEE  
                                 STR_71 7F2B                                   STR_63 7F65  
                                 STR_55 7FEE                                   STR_39 7DF8  
                                 STR_47 7C31                                   STR_72 7AAC  
                                 STR_48 7F2B                                   STR_56 7EEA  
                                 STR_80 7FEE                                   STR_64 7FEE  
                                 STR_81 74AE                                   STR_65 74AE  
                                 STR_73 7F2B                                   STR_57 7F65  
                                 STR_49 7AAC                                   STR_66 7F80  
                                 STR_90 7FF5                                   STR_58 7FEE  
                                 STR_82 7F57                                   STR_74 7C61  
                                 STR_59 74AE                                   STR_83 7FF5  
                                 STR_75 79C1                                   STR_91 7908  
                                 STR_67 7446                                   STR_92 7FF5  
                                 STR_68 7FAD                                   STR_76 7A8B  
                                 STR_84 7240                                   STR_69 7F2B  
                                 STR_77 7FBC                                   STR_85 781E  
                                 STR_93 777D                                   STR_86 7FF5  
                                 STR_94 7FB2                                   STR_78 7DAB  
                                 STR_95 7FF5                                   STR_79 7F65  
                                 STR_87 7753                                   STR_88 7FF5  
                                 STR_96 754D                                   STR_97 792E  
                                 STR_89 78BA                                   STR_98 7FF5  
                                 STR_99 77CE            __end_of_printFirmwareVersion 47C4  
                                 _BSEL0 000DF8                         __end_of___lldiv 4ACA  
                                 ?_utoa 0067                         __end_of_calcCRC 538E  
                                 _T0CON 000FD5                                   u12215 0D5E  
                       __end_of___llmod 4E20                                   u12305 14C2  
                                 u12315 0FEE                                   u12235 0E30  
                                 u12155 0BDA                                   u11460 4EF6  
                                 u12405 11BA                                   u11470 4F24  
                                 u12415 1200                                   u12425 1246  
                                 u11625 02A2                                   u13410 38E6  
                                 u11467 4EF0                                   u11635 02EA  
                                 u11477 4F1E                                   u11645 0328  
                                 u13430 3904                                   u11655 0368  
                                 _LATC1 007C59                                   u13417 38E0  
                                 u13505 4288                                   u11905 0784  
                                 u11665 03A8                                   u13450 3934  
                                 u13370 38B0                                   u11915 07B2  
                                 u11675 03E6                                   u13460 395E  
                                 u13437 38FE                                   u11925 07E0  
                                 u11685 0424                                   u15045 3DB0  
                                 u13390 38C8                                   u11935 081C  
                                 u11695 0460                                   u13720 4D7A  
                                 u12920 1E74                                   u13457 392E  
                                 u13377 38AA                                   u11945 084A  
                                 u12930 1E7E                                   u13467 3958  
                                 u11795 0558                                   u15500 48CC  
                                 u13740 4DB2                                   u12940 1E88  
                                 u13397 38C2                                   u11885 0732  
                                 u12925 1E72                                   u15350 514A  
                                 u13727 4D74                                   u12935 1E7C  
                                 u15505 48C2                                   u12945 1E86  
                                 u13747 4DAC                                   u15357 5144  
                                 u14494 4F96                                   u14495 4F92  
                                 u14735 2822                                   u16327 3364  
                                 u14736 2828                                   u14745 2856  
                                 u14737 2836                                   u14746 285C  
                                 u14747 286A                                   u14765 36A0  
                                 u15670 4ECA                                   u14775 36B0  
                                 u14785 36CE                                   u15677 4EC0  
                       __end_of___lwdiv 500E                            _vscpPriority 01AF  
                       __end_of___lwmod 5258                                   i1l371 007E  
                                 i1l373 0178                                   i1l382 0176  
                                 i1l391 020C                                   i1l376 0176  
                                 i1l385 0166                         sendCANFrame@dlc 0093  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0063                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00B8                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 00F7  
               readRegisterExtended@reg 00B8                           __CFG_WRTD$OFF 000000  
                        __CFG_EBTRB$OFF 000000                        _hexStringToBytes 4582  
                                 crc8@m 0069                         __end_of_dpowers 7030  
                       __end_of_isdigit 5402                                   _timer 00ED  
                                 atoi@a 006B                                   atoi@s 0066  
                                 main@c 00D0                                   _ultoa 3C8E  
                            Interrupt@c 0022              ??_printNodeFirmwareVersion 00BF  
                      _printErrors$1402 0096                        _printErrors$1420 009C  
                      _printErrors$1414 009A                        _printErrors$1408 0098  
                      _printErrors$1429 009E                                   tablat 000FF5  
                      _printErrors$1396 0094             __end_of_sendEscapedUartData 49DC  
                                 plusw2 000FDB                                   utoa@c 006F  
                                 utoa@v 006D                                   status 000FD8  
               ?_receivePrintEventCANAL 0001                         __end_of_sprintf 1C2C  
                       __end_of_strichr 521A                         __end_of_strcspn 5098  
                       __end_of_toupper 546E                         __end_of_stristr 4A54  
                          __end_ofPL100 418E                            __end_ofPL102 2808  
                          __end_ofPL104 4582                            __end_ofPL106 378E  
                          __end_ofPL108 1CFA                 ?_receivePrintEventSLCAN 0001  
     __size_of_receivePrintEventVerbose 02C2                     doModeVerbose@i_1127 02B0  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1205 02B9  
                   doModeVerbose@p_1133 02B2                     doModeVerbose@p_1224 02BB  
                   doModeVerbose@p_1181 02B4                          WriteUSART@data 0060  
                  _ECANSetOperationMode 543E                            _canInputFifo 0036  
                       __initialization 4CFA                  doModeVerbose@page_1178 02A1  
                          __end_of_crc8 52FE                            __end_of_atoi 398C  
                          __end_of_main 3440                            __end_of_init 5054  
                          __end_of_itoa 52C8                            __end_of_utoa 44E2  
                   doModeVerbose@ifmode 02B6                     doModeVerbose@maskno 02A8  
                   doModeVerbose@nodeid 028C                           doModeSLCAN@id 009D  
                        __CFG_OSC$HSPLL 000000                           doModeSLCAN@rv 00A3  
                     ??_ECANSendMessage 0072                          ?i1_WriteTimer0 0001  
            writeRegisterExtended@value 00BB                                  ??_crc8 006A  
                 getVSCPFrame@pvscptype 0074                                  ??_atoi 0068  
                ??_vscp_restoreDefaults 0064                                  ??_main 00CF  
                     readRegister@value 00B9                                  ??_init 0064  
                                ??_itoa 0076                                  ??_utoa 006D  
                doModeVerbose@mask_type 0292                           __activetblptr 000002  
                       _stateVscpDriver 00FB                       __RegsToCANID@type 0004  
                  _can_transmitOverruns 00D5              ECANReceiveMessage@msgFlags 000A  
                         ?_readRegister 00B6               __size_of__ECANPointBuffer 0076  
                                _B0TXEN 006FC2                                  _B1TXEN 006FC3  
                                _B2TXEN 006FC4                  doModeVerbose@preg_1185 0286  
                                _B3TXEN 006FC5                                  _B4TXEN 006FC6  
                                _B5TXEN 006FC7             readRegisterExtended@timeout 00B9  
            ECANReceiveMessage@savedPtr 000B                                  _CANCON 000F6F  
                      ___llmod@dividend 006D                                  STR_100 7FF5  
                                STR_101 7978                                  STR_102 7FF5  
                                STR_110 77F6                                  STR_111 7E87  
                                STR_103 799D                                  STR_104 7FF5  
                                STR_120 7EEE                                  STR_112 7EBB  
                                STR_200 76FB                                  STR_121 7F8C  
                                STR_113 7F86                                  STR_105 7893  
                                STR_201 76A1                                  STR_106 7F9E  
                                STR_130 7F42                                  STR_114 7EFE  
                                STR_122 7A6A                                  STR_210 7A28  
                                STR_202 751A                                  STR_131 7F65  
                                STR_107 7FDD                                  STR_123 7B7F  
                                STR_115 7B48                                  STR_211 7845  
                                STR_203 757F                                  STR_140 7F65  
                                STR_132 7FEE                                  STR_116 7FC1  
                                STR_124 7D5B                                  STR_204 7B0C  
                                STR_212 77A6                                  STR_108 7727  
                                STR_220 70EB                                  STR_141 7FEE  
                                STR_109 7F06                                  STR_133 7EF6  
                                STR_125 7ED6                                  STR_117 7ACD  
                                STR_221 79E4                                  STR_213 7672  
                                STR_205 75B1                                  STR_150 7FD5  
                                STR_118 7F98                                  STR_134 7F6C  
                                STR_142 7F3B                                  STR_126 7EDE  
                                STR_230 7B9A                                  STR_206 76CF  
                                STR_222 7643                                  STR_214 7132  
                                STR_231 74AE                                  STR_143 7F65  
                                STR_135 7FEE                                  STR_127 7F7A  
                                STR_151 7E0A                                  STR_207 7C01  
                                STR_119 7BB5                                  STR_223 7614  
                                STR_215 71FD                                  STR_240 74AE  
                                STR_232 7177                                  STR_160 7F73  
                                STR_144 7FEE                                  STR_128 7FF3  
                                STR_152 7F73                                  STR_136 7F34  
                                STR_208 7333                                  STR_224 71BA  
                                STR_216 709E                                  STR_137 7F65  
                                STR_161 7FE1                                  STR_129 7FF1  
                                STR_153 7FE1                                  STR_145 7F2D  
                                STR_233 7E4F                                  STR_241 7DBF  
                                STR_209 7CC1                                  STR_217 7C19  
                                STR_225 75E3                                  STR_170 74AE  
                                STR_162 74AE                                  STR_154 74AE  
                                STR_146 7F65                                  STR_138 7FEE  
                                STR_242 7FFD                                  STR_234 7EE6  
                                STR_250 7EB1                                  STR_226 73A2  
                                STR_218 7050                                  STR_147 7FEE  
                                STR_235 7FF9                                  STR_243 7FF7  
                                STR_139 7EC4                                  STR_251 7EA7  
                                STR_155 7E3E                                  STR_219 7D47  
                                STR_163 7D32                                  STR_171 7CA9  
                                STR_227 7282                                  STR_244 74AE  
                                STR_148 7FF5                                  STR_164 7F73  
                                STR_156 7F73                                  STR_180 7F16  
                                STR_172 7F16                                  STR_236 7FE5  
                                STR_252 7CEF                                  STR_228 78E1  
                                STR_253 74AE                                  STR_181 7FE1  
                                STR_173 7FE1                                  STR_165 7FE1  
                                STR_157 7FE1                                  STR_237 7FFB  
                                STR_245 7E9D                                  STR_149 7E92  
                                STR_229 7177                                  _EEDATA 000FA8  
                                STR_246 74AE                                  STR_238 74AE  
                                STR_182 74AE                                  STR_174 74AE  
                                STR_166 74AE                                  STR_158 74AE  
                                STR_254 7E1C                                  STR_190 7C79  
                                STR_191 7F65                                  STR_247 7F26  
                                STR_239 7E6D                                  STR_255 7E2D  
                                STR_159 7D1C                                  STR_167 7CD8  
                                STR_175 7C91                                  STR_183 7BE8  
                                STR_184 7F65                                  STR_176 7F16  
                                STR_192 7FEE                                  STR_248 7F1E  
                                STR_168 7F16                                  STR_193 74AE  
                                STR_185 7FEE                                  STR_177 7FE1  
                                STR_169 7FE1                                  STR_249 7E7B  
                                STR_186 74AE                                  STR_178 74AE  
                                STR_194 736B                                  STR_179 7C91  
                                STR_195 7410                                  STR_187 72C0  
                                STR_196 74E6                                  STR_188 747C  
                                STR_197 786C                                  STR_189 72FA  
                                STR_198 7193                                  STR_199 7B64  
                                _EECON2 000FA7            __end_of_readRegisterExtended 3B9A  
                                _CIOCON 000F73                                  ?_ultoa 0076  
          ??_sendVSCPDriverCommandReply 0070                    __end_of_fifo_getFree 4566  
                                i1l1404 3502                                  i1l1350 2638  
                                i1l1360 2706                                  i1l1409 4BAC  
                                i1l1361 2686                           ?_init_app_ram 0001  
                                i1l1371 26E0                                  i1l1363 2694  
                                i1l1436 35A6                                  _MDSEL0 007BBE  
                                i1l1437 362E                                  i1l1381 276A  
                                i1l1373 26F0                                  i1l1365 26A8  
                                i1l1357 27F8                                  _MDSEL1 007BBF  
                                i1l1382 2784                                  i1l1367 26BC  
                                i1l1369 26D0                                  i1l1743 542E  
                                i1l6036 35B0                                  i1l6028 3570  
                                i1l6060 4524                                  i1l6046 360A  
                                i1l6048 3614                              _OpenTimer0 5402  
        __end_of_receivePrintEventCANAL 330A                                  i1l9222 27B2  
                                i1l9230 27CC                                  i1l9214 2786  
                                i1l9134 2666                                  i1l9118 2626  
                                i1l9142 2674                                  i1l9128 2650  
                                i1l9136 2670                                  i1l9236 27E2  
                                i1l9186 271A                                  i1l9196 273A  
                                i1l8860 4B62                                  i1l8862 4B6C  
                                i1l8854 4B46                                  i1l8864 4B76  
                                i1l8856 4B4E                                  i1l8872 4B8E  
                                i1l8866 4B7C                                  i1l8858 4B58  
                                i1l8868 4B82                                  i1l8886 349E  
                       _init_app_eeprom 47D2                      __size_of_ReadUSART 001E  
                                _RXB0IF 007D20                                  _RXB1IF 007D21  
                                _SPBRGH 000FB0                  ECANReceiveMessage@data 0008  
        __end_of_receivePrintEventSLCAN 2EC8                  ECANReceiveMessage@mode 000F  
                ECANReceiveMessage@temp 0010                       getVSCPFrame@pData 007C  
            ??_sendVSCPDriverErrorFrame 006F                       getVSCPFrame@pSize 007A  
                    _doModeVerbose$1145 0294                      _doModeVerbose$1162 0298  
                    _doModeVerbose$1172 029C                      _doModeVerbose$1157 0296  
                    _doModeVerbose$1168 029A                      _doModeVerbose$1197 029E  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 0069  
                    __size_of_Interrupt 0212                readRegisterExtended@page 00B6  
                    __size_of_OpenUSART 005C                        fifo_write@nbytes 0002  
                        getCANFrame@pid 0071                                  ___wmul 52FE  
                            _bInitiated 00F6                          __CFG_STVREN$ON 000000  
                             ??___lldiv 0068                               ??_calcCRC 006F  
                                _cmdbuf 0104                               ??___llmod 0075  
                      OpenTimer0@config 0060                               ??___lwdiv 0064  
                             ??___lwmod 0064           _receivePrintEventVerbose$1304 009F  
         _receivePrintEventVerbose$1314 00A3           _receivePrintEventVerbose$1309 00A1  
         _receivePrintEventVerbose$1294 009B           _receivePrintEventVerbose$1289 0099  
         _receivePrintEventVerbose$1299 009D                                  _memcpy 50DC  
                                _memset 538E                                  clear_0 4D02  
                                clear_1 4D16                                  clear_2 4D28  
                                clear_3 4D34                                  clear_4 4D40  
                                clear_5 4D4C                           ?_sendCANFrame 008F  
                                _strcat 4E7C                                  _strchr 4D5C  
                                _strcpy 5330                                  _strlen 511E  
                                _wrkbuf 0154                                  _strtok 46B2  
                                _strspn 5098                             Interrupt@id 0025  
   __size_of_sendVSCPDriverCommandReply 00C4                               ??_isdigit 0060  
                      __end_of_printMDF 46B2                            __mediumconst 6FD8  
                        ??_readRegister 00BA                                  tblptrh 000FF7  
                                tblptrl 000FF6                                  tblptru 000FF8  
                          ?_printBinary 0001                 __size_of_nibbleFromChar 003E  
                                ultoa@c 0082                                  ultoa@v 007E  
                          ?_printErrors 0001                               ??_sprintf 007E  
                             ??_strichr 0065                               ??_strcspn 006A  
                             ??_toupper 0060                          ??_init_app_ram 0063  
                             ??_stristr 0071              doModeVerbose@mask_priority 0291  
                      __end_of_strnicmp 4CFA                              __accesstop 0060  
               __end_of__initialization 4D52                    _printFirmwareVersion 4744  
                       writeEEPROM@data 0062                   __size_of_getVSCPFrame 0086  
                  doModeVerbose@id_1236 02A3                              _WriteUSART 546E  
                        __pcstackCOMRAM 0001                __size_of_printStatistics 01A8  
                  _printStatistics$1371 0094                    _printStatistics$1383 0098  
                  _printStatistics$1377 0096                    _printStatistics$1389 009A  
                 _uart_transmitOverruns 0029                         ??i1_WriteTimer0 0003  
                         __end_of_ultoa 3D60                              __end_ofPL2 147E  
                            __end_ofPL4 148E                              __end_ofPL6 149C  
                            __end_ofPL8 14BA                          ??_sendCANFrame 0096  
                     __end_of_ReadUSART 543E                           ?__RegsToCANID 0001  
           __size_of_ECANReceiveMessage 01FA                      sendVSCPFrame@pData 009C  
                       readRegister@reg 00B6                    sendVSCPDriverAck@crc 006F  
                    __size_of_findNodes 00F4                          doModeSLCAN@dlc 00A1  
                    __size_of_fifo_init 0030                      __size_of_fifo_read 00A2  
                getVSCPFrame@pvscpclass 0072                 __end_of_init_app_eeprom 485C  
                     __end_of_Interrupt 022A                           ReadUSART@data 0001  
                    readRegister@nodeid 00BE                          _status_led_cnt 002F  
                    __RegsToCANID@Value 0007                              _crc8_table 0300  
                     __end_of_OpenUSART 4E7C                 doModeVerbose@mask_class 028A  
             printNodeFirmwareVersion@i 00C4                         setFilter@filter 006A  
                          sprintf@width 008B        __end_of_printNodeFirmwareVersion 3FF2  
                            _doModeVscp 2ED6                                 ??_ultoa 007E  
                          _getVSCPFrame 485C                              __pbssBANK0 00D1  
                            __pbssBANK1 0100                              __pbssBANK2 0200  
                            __pbssBANK3 0300                             ?_OpenTimer0 0001  
                            calcCRC@crc 0070                              calcCRC@len 006E  
                 ?_printFirmwareVersion 0001                  ??_ECANSetOperationMode 0060  
                    __size_of_init_crc8 006A                           setFilter@eidh 006D  
                         setFilter@eidl 006E                           setFilter@sidh 006B  
                         setFilter@sidl 006C                            ?_writeEEPROM 0060  
                      ??_doModeVscpNode 0060                              _nTimeStamp 00F9  
              __end_of_hexStringToBytes 461C                ECANSetOperationMode@mode 0060  
                               ?___wmul 0060                      __size_of_setFilter 01DE  
                               _B0RXFUL 007107                                 _B1RXFUL 007187  
                  __ECANRxFilterHitInfo 0034                                 _B2RXFUL 007207  
                               _B3RXFUL 007287                                 _B4RXFUL 007307  
                    _sendVSCPDriverNack 4302                                 _B5RXFUL 007387  
                      WriteTimer0@timer 0062                           putsUSART@data 0061  
                  _readRegisterExtended 3A9E                                 ?_memcpy 0060  
                               _ECANCON 000F77                                 ?_memset 0060  
                         ??_WriteTimer0 0062                          ??__RegsToCANID 0005  
                 sendVSCPFrame@priority 009A                                 _BRGCON1 000F70  
                               _BRGCON2 000F71                                 _BRGCON3 000F72  
                               ?_strcat 0060                                 ?_strchr 0060  
                               ?_strcpy 0060                                 ?_strlen 0060  
                               ?_strtok 006C                                 ?_strspn 0066  
                            _cntRxBytes 00D9                              _cntTxBytes 00E1  
                               i1l12400 020A                      __size_of_printGUID 00F0  
                               i1l12340 0042                                 i1l12350 00A4  
                               i1l12342 0068                                 i1l12360 00DC  
                               i1l12352 00B4                                 i1l12344 007A  
                               i1l12336 0034                     ?_sendVSCPDriverNack 0001  
                               i1l12362 00E8                                 i1l12354 00B8  
                               i1l12346 0086                                 i1l12338 003C  
                               i1l12380 0142                                 i1l12372 0118  
                               i1l12356 00C4                                 i1l12348 0092  
                               i1l12390 0180                                 i1l12374 0124  
                               i1l12366 00FA                                 i1l12358 00D4  
                               i1l12392 019C                                 i1l12384 0154  
                               i1l12368 0106                                 i1l12394 01A4  
                               i1l12386 015E                                 i1l12378 0136  
                               i1l12396 01AC                                 i1l12388 016E  
                               i1l12398 01C2                              _fifo_write 355E  
                    __size_of_printHelp 01C0                      __size_of_printMode 0076  
                 sendVSCPFrame@vscptype 0098                   __size_of_fifo_getFree 0084  
               doModeVerbose@value_1180 02A9                       sendCANFrame@pdata 0094  
                            _made_table 002D                                 _RXB0CON 000F60  
                               _RXB1CON 000F50                                 _RXB0FUL 007B07  
                      __ECANPointBuffer 4B40                                 _TXB0CON 000F40  
                               _TXB1CON 000F30                                 _TXB2CON 000F20  
                    __size_of_putsUSART 0058      __end_of_sendVSCPDriverCommandReply 3F14  
            _sendVSCPDriverCommandReply 3E50                                 _RXFCON0 000DD4  
                               _RXFCON1 000DD5                   _writeRegisterExtended 378E  
      __size_of_receiveVSCPModeCanalMsg 00DC                  __size_of_doModeVerbose 123C  
                  sendEscapedUartData@c 006E                  __size_of_sendVSCPFrame 00B6  
      __end_of_sendVSCPDriverErrorFrame 423E                              _readEEPROM 5494  
                  ??_sendVSCPDriverNack 006F              printFirmwareVersion@wrkbuf 0078  
                       _ECANSendMessage 305E                                 __Hparam 0000  
                     __end_of_findNodes 3C8E                                 __Lparam 0000  
                     __end_of_fifo_init 518E                       __end_of_fifo_read 4162  
                         ??_getCANFrame 0071                             ?_WriteUSART 0001  
            receiveVSCPModeCanalMsg@dlc 00B6                    __end_of_readRegister 40C0  
                             ?_printMDF 0001                                 _bSilent 0101  
             receiveVSCPModeCanalMsg@id 00B2                           ??_doModeSLCAN 0096  
                               ___lldiv 4A54                         __size_of___wmul 0022  
                               _calcCRC 5360                         getCANFrame@pdlc 006D  
                               ___llmod 4DBE                                 ___lwdiv 4FC4  
                             _FIFOEMPTY 007BA7                                 ___lwmod 521A  
                 ?_readRegisterExtended 00B6             printNodeFirmwareVersion@buf 00C0  
                  __end_of_init_app_ram 4F7A                            _fifo_getFree 44E2  
                          init_crc8@crc 0064                                 __pcinit 4CFA  
                       __size_of_memcpy 0042                         __size_of_memset 002E  
                               __ramtop 0600                     __size_of_OpenTimer0 001E  
                             ?_strnicmp 0064                                 __ptext0 330A  
                               __ptext1 54C0                                 __ptext2 1CFA  
                               __ptext3 4582                                 __ptext4 519E  
                               __ptext5 2D4E                                 __ptext6 3C8E  
                               __ptext7 2ED6                                 __ptext8 3E50  
                               __ptext9 4302                                 crc8@crc 0067  
         printNodeFirmwareVersion@value 00C3                       ??_printStatistics 0094  
                             _T0CONbits 000FD5                         __size_of_strcat 0058  
                       __size_of_strchr 0062                         __size_of_strcpy 0030  
                       __size_of_strlen 0040                       __end_of_hexpowers 7050  
                       __size_of_strtok 0092                         __size_of_strspn 0044  
                               _dpowers 7008                       __end_of_init_crc8 4C94  
                               _isdigit 53E2          printNodeFirmwareVersion@nodeid 00BF  
                   __end_of_WriteTimer0 5494                          _nibbleFromChar 519E  
                      ?_init_app_eeprom 0001                                 _sprintf 15BA  
                     __end_of_setFilter 29E6                                 _strichr 51DC  
                        doModeVerbose@c 02AC                          doModeVerbose@i 02AA  
                        doModeVerbose@p 02B7                                 _strcspn 5054  
                               _toupper 5458                             ?_doModeVscp 0001  
                               _stristr 49DC                    __size_of_printBinary 004A  
                  end_of_initialization 4D52                            Interrupt@dlc 0023  
                     __end_of_octpowers 7008                    __size_of_printErrors 02D6  
                               memcpy@d 0066                                 memcpy@n 0064  
                               memcpy@s 0068                  ??_printFirmwareVersion 0078  
                               itoa@buf 0070                               i1u1041_25 3466  
                             i1u1042_25 3476                               i1u1043_25 34A2  
                               memset@c 0062                                 itoa@val 0072  
                               memset@n 0064                                 memset@p 0066  
                             i1u1081_25 262E                               i1u1081_27 2630  
                         __Lmediumconst 6FD8                    __end_of_sendCANFrame 5290  
                             i1u1620_20 0116                               i1u1612_20 003C  
                             i1u1620_21 0114                               i1u1612_21 003A  
                             i1u1621_20 0124                               i1u1613_20 0068  
                             i1u1621_21 0122                               i1u1613_21 0066  
                             i1u1630_20 01AC                               i1u1622_20 0134  
                             i1u1614_20 0086                               i1u1630_21 01AA  
                             i1u1622_21 0132                               i1u1614_21 0084  
                             i1u1631_20 01C2                               i1u1623_20 0142  
                             i1u1615_20 00C4                               i1u1631_21 01C0  
                             i1u1623_21 0140                               i1u1615_21 00C2  
                             i1u1624_20 0152                               i1u1616_20 00D4  
                             i1u1624_21 0150                               i1u1616_21 00D2  
                             i1u1625_20 015E                               i1u1617_20 00E8  
                             i1u1625_21 015C                               i1u1617_21 00E6  
                             i1u1626_20 016E                               i1u1618_20 00F8  
                             i1u1626_21 016C                               i1u1618_21 00F6  
                             i1u1627_20 0180                               i1u1619_20 0106  
                             i1u1627_21 017E                               i1u1619_21 0104  
                             i1u1628_20 019C                               i1u1628_21 019A  
                             i1u1629_20 01A4                               i1u1629_21 01A2  
                   _can_receiveOverruns 00D1                       __end_of_printGUID 3A8A  
                       ___lldiv@divisor 0064                       __end_of_printHelp 2BA6  
                       ___lldiv@counter 006C                       __end_of_printMode 4B40  
                     ECANSendMessage@id 006A                       ECANSendMessage@pb 0073  
          __size_of_sendEscapedUartData 0078                               _RXF10EIDH 000D76  
                             _RXF10EIDL 000D77                               _RXF11EIDH 000D7A  
                             _RXF11EIDL 000D7B                              ??_printMDF 00BF  
                             _RXF12EIDH 000D82                               _RCSTAbits 000FAB  
                             _RXF12EIDL 000D83                               _RXF13EIDH 000D86  
                             _RXF13EIDL 000D87                               _RXF14EIDH 000D8A  
                             _RXF14EIDL 000D8B                               _RXF15EIDH 000D92  
                             _RXF15EIDL 000D93                               _RXF10SIDH 000D74  
                             _RXF10SIDL 000D75                               _RXF11SIDH 000D78  
                             _RXF11SIDL 000D79                               _RXF12SIDH 000D80  
                             _RXF12SIDL 000D81                                 postdec1 000FE5  
                               postdec2 000FDD                               _RXF13SIDH 000D84  
                             _RXF13SIDL 000D85                               _RXF14SIDH 000D88  
                             _RXF14SIDL 000D89                 __size_of_ECANInitialize 0082  
                             _RXF15SIDH 000D90                               _RXF15SIDL 000D91  
                               postinc0 000FEE                                 postinc1 000FE6  
                               postinc2 000FDE                       __end_of_putsUSART 4F2C  
                    __ECANPointBuffer@b 0004                           _doModeVerbose 022E  
                               utoa@buf 0067       __size_of_printNodeFirmwareVersion 00D0  
                               utoa@val 0069               ?_printNodeFirmwareVersion 0001  
                         _sendVSCPFrame 424C                                 strlen@s 0060  
                            _sequencyno 00FA                              _timekeeper 00E9  
                             _RXM0EXIDM 0078CB                                 strspn@i 006A  
                            ??_strnicmp 006A                     __end_of_getCANFrame 4C2A  
                            findNodes@i 00C9                  __end_of_nibbleFromChar 51DC  
                   __end_of_doModeSLCAN 205C                             ?_fifo_write 0001  
                            fifo_init@f 0064           __size_of_vscp_restoreDefaults 0008  
                            fifo_read@f 006C                              fifo_read@i 006A  
                            fifo_read@p 0068                               _TRISBbits 000F93  
                             _TRISCbits 000F94                  ?_writeRegisterExtended 00B6  
     sendVSCPDriverCommandReply@cmdCode 006F                     __size_of_WriteUSART 0014  
                     readEEPROM@address 0060                 __end_of_ECANSendMessage 31CC  
                  _uart_receiveOverruns 00F1                _receivePrintEventVerbose 233E  
                            _vscpNodeId 01AE                           ?__CANIDToRegs 0060  
                  __end_of__RegsToCANID 3504                             ?_readEEPROM 0060  
                             _TXSTAbits 000FAC                      i1WriteTimer0@timer 0003  
                     doModeVerbose@page 02AD                       doModeVerbose@preg 0284  
                        _init_crc8$2087 0060                  ??_readRegisterExtended 00BD  
                        ?_doModeVerbose 0001                          ?_sendVSCPFrame 0096  
                  __size_of_writeEEPROM 0026                          __end_of___wmul 5320  
                   __size_of_doModeVscp 0178                             _WriteTimer0 5482  
                        __end_of_memcpy 511E                          __end_of_memset 53BC  
     __size_of_sendVSCPDriverErrorFrame 00B0               ?_sendVSCPDriverErrorFrame 0001  
                       ?_nibbleFromChar 0001                          __end_of_strcat 4ED4  
                        __end_of_strchr 4DBE                          __end_of_strcpy 5360  
                        __end_of_strlen 515E                doModeVerbose@filter_type 028F  
                        __end_of_strtok 4744                          __end_of_strspn 50DC  
                           __end_ofPL10 1504                             __end_ofPL20 1C5A  
                           __end_ofPL12 1520                             __end_ofPL30 374E  
                           __end_ofPL22 399A                             __end_ofPL14 1C4A  
                           __end_ofPL40 366A                             __end_ofPL32 4180  
                           __end_ofPL24 1C80                             __end_ofPL16 365C  
                           __end_ofPL50 43A2                             __end_ofPL42 158C  
                           __end_ofPL34 1556                             __end_ofPL26 1530  
                           __end_ofPL18 305E                             __end_ofPL60 1CC6  
                           __end_ofPL52 1CB0                             __end_ofPL44 1C9A  
                           __end_ofPL36 3512                             __end_ofPL28 1544  
                           __end_ofPL70 3A9E                             __end_ofPL62 1CD4  
                           __end_ofPL54 15A4                             __end_ofPL46 4442  
                           __end_ofPL38 1572                             __end_ofPL80 1CE6  
                           __end_ofPL72 3784                             __end_ofPL64 47D2  
                           __end_ofPL56 3770                             __end_ofPL48 375E  
                           __end_ofPL90 2ED6                             __end_ofPL82 355E  
                           __end_ofPL74 3526                             __end_ofPL66 4574  
                           __end_ofPL58 15BA                             __end_ofPL92 3F22  
                           __end_ofPL84 2068                             __end_ofPL76 3538  
                           __end_ofPL68 3D74                             __end_ofPL94 1CF0  
                           __end_ofPL86 519E                             __end_ofPL78 354C  
                           __end_ofPL96 5330                             __end_ofPL88 424C  
                           __end_ofPL98 367A                     start_initialization 4CFA  
                             _ReadUSART 5420                         findNodes@nFound 00C7  
                 doModeVerbose@reg_1179 02A2                   doModeVerbose@filterno 02A7  
               _receiveVSCPModeCanalMsg 3D74                     __CFG_BOREN$BOACTIVE 000000  
                          doModeSLCAN@c 00A2                            ??_OpenTimer0 0060  
sendVSCPDriverCommandReply@cmdReplyCode 0070                               _Interrupt 0018  
                        ??__CANIDToRegs 0067              readRegisterExtended@nodeid 00C1  
                             _OpenUSART 4E20                     sendVSCPFrame@nodeid 0099  
                       ___llmod@divisor 0071                   __size_of_readRegister 00CE  
                       ___llmod@counter 0075                   ECANReceiveMessage@ptr 0011  
                   __size_of_fifo_write 00D2                   __size_of_init_app_ram 004E  
                        _findNodes$1473 00C5                __end_of__ECANPointBuffer 4BB6  
                     __CANIDToRegs@type 0066                              init_crc8@i 0065  
                            init_crc8@j 0062                             _getCANFrame 4BB6  
                              ??___wmul 0064                       ?_hexStringToBytes 0064  
                           _doModeSLCAN 1CFA              __end_of_ECANReceiveMessage 27FA  
                              ??_memcpy 0066                     readRegister@timeout 00B7  
                              ??_memset 0066                   sendVSCPDriverNack@crc 006F  
              doModeVerbose@mask_nodeid 0293                   __end_ofi1_WriteTimer0 54B8  
                    ??_hexStringToBytes 0069                                ??_strcat 0064  
                              ??_strchr 0064                                ??_strcpy 0064  
                              ??_strlen 0062                      __end_of_OpenTimer0 5420  
                              ??_strtok 0070                                ??_strspn 006A  
                   __size_of_readEEPROM 0012                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0029                              ?_ReadUSART 0001  
              ??_receivePrintEventCANAL 0072                           __pcstackBANK0 0060  
                         __pcstackBANK1 01B2                           __pcstackBANK2 0280  
                   __end_of__stringdata 7FFF                ??_receivePrintEventSLCAN 0083  
                          _readRegister 3FF2                            _isdigit$2900 0061  
                 __size_of_sendCANFrame 0038             ?_sendVSCPDriverCommandReply 006F  
           sendVSCPDriverErrorFrame@crc 0070                        ?_ECANSendMessage 006A  
                     sendVSCPFrame@size 009B                            _init_app_ram 4F2C  
                            ?_Interrupt 0001                              ?_OpenUSART 0060  
                           sprintf@_val 008D                             sprintf@flag 0092  
                           sprintf@prec 0089                        _ledFunctionality 0035  
              doModeVerbose@nodeid_1192 02AF                doModeVerbose@nodeid_1177 028D  
                          setFilter@val 0060                        ___lwdiv@dividend 0060  
                       ??_doModeVerbose 01B2           __size_of_ECANSetOperationMode 001A  
                       _printStatistics 2BA6                            ??_WriteUSART 0060  
                       ??_sendVSCPFrame 009E                          _ECANInitialize 48E2  
                     _sendVSCPDriverAck 43A2                           __pmediumconst 6FD8  
             receivePrintEventCANAL@dlc 007F               receivePrintEventCANAL@crc 0080  
                              ?___lldiv 0060                                ?_calcCRC 006C  
                              ?___llmod 006D                               _findNodes 3B9A  
                              ?___lwdiv 0060                                ?___lwmod 0060  
                             _fifo_init 515E                               _fifo_read 40C0  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0096  
                           __pintcodelo 0018                            _sendCANFrame 5258  
                     WriteTimer0@timer0 0060                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 0096  
                   ??_sendVSCPDriverAck 006F                       __size_of_strnicmp 0066  
                       printGUID@nodeid 00BF                     _sendEscapedUartData 4964  
                             _hexpowers 7030                        ___lwdiv@quotient 0065  
                             _init_crc8 4C2A                   __size_of__RegsToCANID 00C4  
             doModeVerbose@filter_class 0288                                ?_sprintf 0076  
                              ?_strichr 0061                             _cntRxFrames 00DD  
                          ??_doModeVscp 00B7                                ?_strcspn 0066  
                              ?_toupper 0001                                ?_stristr 006D  
                    __end_of_WriteUSART 5482                          __size_of_ultoa 00D2  
                           _cntTxFrames 00E5                          ___wmul@product 0064  
                sendVSCPFrame@vscpclass 0096                               _setFilter 2808  
                           strnicmp@len 0068                               _octpowers 6FD8  
                              _PIE1bits 000F9D             __size_of_sendVSCPDriverNack 0092  
                __end_of_ECANInitialize 4964               __end_of_sendVSCPDriverAck 4434  
                              i1u583_25 3580                                i1u584_25 3592  
                              _PIR1bits 000F9E                                _PIR2bits 000FA1  
                              i1u588_25 4502                                _PIR3bits 000FA4  
                      ECANSendMessage@i 008C                        ECANSendMessage@j 0087  
                  ?_sendEscapedUartData 006C                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
                              _RXF6EIDL 000D63                       hexStringToBytes@i 0070  
                              _RXF7EIDH 000D66                                _RXF0SIDH 000F00  
                     hexStringToBytes@p 006E                                _RXF7EIDL 000D67  
                              _RXF0SIDL 000F01                               _printGUID 399A  
                              _RXF8EIDH 000D6A                                _RXF1SIDH 000F04  
                              _RXF8EIDL 000D6B                                _RXF1SIDL 000F05  
                              _RXF9EIDH 000D72                                _RXF2SIDH 000F08  
                              _RXF9EIDL 000D73                                _RXF2SIDL 000F09  
                              _RXF3SIDH 000F0C                                _RXF3SIDL 000F0D  
                            printGUID@i 00C4                                _RXF4SIDH 000F10  
                              _RXF4SIDL 000F11                                _RXF5SIDH 000F14  
                              _RXF5SIDL 000F15                                _RXF6SIDH 000D60  
                              _RXF6SIDL 000D61                                _RXM0EIDH 000F1A  
                              _RXF7SIDH 000D64                                _RXM0EIDL 000F1B  
                              _RXF7SIDL 000D65                                _RXM1EIDH 000F1E  
                              _RXF8SIDH 000D68                                _RXM1EIDL 000F1F  
                              _RXF8SIDL 000D69                                _RXF9SIDH 000D70  
                              _RXF9SIDL 000D71                                _RXFBCON0 000DE0  
                              _RXFBCON1 000DE1                                _RXFBCON2 000DE2  
                              _RXFBCON3 000DE3                                _RXFBCON4 000DE4  
                              _RXFBCON5 000DE5                                _RXFBCON6 000DE6  
                              _RXFBCON7 000DE7                              ?_findNodes 0001  
                             _printHelp 29E6                                _RXM0SIDH 000F18  
                              _RXM0SIDL 000F19                                _RXM1SIDH 000F1C  
                              _RXM1SIDL 000F1D                               _printMode 4ACA  
                            ?_fifo_init 0060                              ?_fifo_read 0060  
                              _RXERRCNT 000F75                      __end_of_doModeVscp 304E  
                              _TXERRCNT 000F76                    __end_of__CANIDToRegs 373A  
                             _putsUSART 4ED4                             __stringdata 7050  
                     ___wmul@multiplier 0060               receivePrintEventSLCAN@dlc 008A  
                          __RegsToCANID 3440                               _vscpClass 01AC  
               ??_writeRegisterExtended 00BD                            ??_fifo_write 0006  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 0094  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 0076  
                         ??_printBinary 0061         __size_of_receivePrintEventCANAL 013E  
                      doModeVerbose@reg 02AE                           ??_printErrors 0094  
                            ?_init_crc8 0001         __size_of_receivePrintEventSLCAN 017A  
                             _rwtimeout 0103               writeRegisterExtended@page 00B6  
                        Interrupt@flags 0024                             ??_Interrupt 0013  
               __end_of_printStatistics 2D4E                             ??_OpenUSART 0062  
          writeRegisterExtended@timeout 00B9                            ??_readEEPROM 0062  
              __size_of_init_app_eeprom 008A                              ?_setFilter 0060  
                       OpenUSART@config 0062                          findNodes@value 00C8  
          __end_of_vscp_restoreDefaults 54C0                              _EECON1bits 000FA6  
         __size_of_printFirmwareVersion 0080         __end_of_receiveVSCPModeCanalMsg 3E50  
                       ?_ECANInitialize 0001                                __Hrparam 0000  
                  ECANReceiveMessage@id 000D                   ??_sendEscapedUartData 006E  
                              __Lrparam 0000                        __CANIDToRegs@val 0062  
                    __end_of_fifo_write 3630                        __CANIDToRegs@ptr 0060  
           receiveVSCPModeCanalMsg@data 00AA                              ?_printGUID 0001  
                           doModeVscp@c 00B7                              ?_printHelp 0001  
                            ?_printMode 0001                         nibbleFromChar@c 0060  
                      ??_nibbleFromChar 0060                        __size_of___lldiv 0076  
                      __size_of_calcCRC 002E                        __size_of___llmod 0062  
                      __size_of___lwdiv 004A                        __size_of___lwmod 003E  
                          ?_WriteTimer0 0060                        getCANFrame@pdata 006F  
                            ?_putsUSART 0061                         fifo_read@nbytes 0062  
                            sprintf@idx 0081                      __end_of_readEEPROM 54A6  
                 hexStringToBytes@inhex 0067                                calcCRC@j 006F  
                              calcCRC@p 006C                              strcat@from 0062  
                      __size_of_isdigit 0020                         ___lwdiv@divisor 0062  
                       ___lwdiv@counter 0064                                __ptext10 3D74  
                              __ptext11 50DC                                __ptext20 2808  
                              __ptext12 43A2                                __ptext21 378E  
                              __ptext13 418E                                __ptext30 3FF2  
                              __ptext22 4F7A                                __ptext14 5360  
                              __ptext31 424C                                __ptext23 3A9E  
                              __ptext15 31CC                                __ptext40 46B2  
                              __ptext32 5258                                __ptext24 5330  
                              __ptext16 4964                                __ptext41 5054  
                              __ptext33 305E                                __ptext25 3B9A  
                              __ptext17 52C8                                __ptext50 485C  
                              __ptext42 5098                                __ptext34 367A  
                              __ptext26 461C                                __ptext18 4C2A  
                              __ptext51 4BB6                                __ptext43 4D5C  
                              __ptext35 538E                                __ptext27 399A  
                              __ptext19 022E                                __ptext60 4442  
                              __ptext52 40C0                                __ptext44 49DC  
                              __ptext36 29E6                                __ptext28 3F22  
                              __ptext61 521A                                __ptext53 15BA  
                              __ptext45 51DC                                __ptext37 2068  
                              __ptext29 4E7C                                __ptext70 4E20  
                              __ptext62 4FC4                                __ptext54 52FE  
                              __ptext46 4C94                                __ptext38 2BA6  
                              __ptext71 5482                                __ptext63 4ACA  
                              __ptext55 4DBE                                __ptext47 5458  
                              __ptext39 3894                                __ptext80 44E2  
                              __ptext72 54B8                                __ptext64 4ED4  
                              __ptext56 4A54                                __ptext48 511E  
                              __ptext81 2600                                __ptext73 47D2  
                              __ptext65 546E                                __ptext57 53E2  
                              __ptext49 233E                                __ptext82 3440  
                              __ptext74 53BC                                __ptext66 500E  
                              __ptext58 4744                                __ptext83 4B40  
                              __ptext75 4F2C                                __ptext67 48E2  
                              __ptext59 5290                                __ptext84 355E  
                              __ptext76 5494                                __ptext68 543E  
                              __ptext85 5420                                __ptext77 515E  
                              __ptext69 5402                                __ptext79 54A6  
                        printMDF@nodeid 00BF                           ?_getVSCPFrame 0072  
                            strichr@chr 0063                        __size_of_sprintf 0672  
                            strichr@ptr 0061                        __size_of_strichr 003E  
                      __size_of_strcspn 0044                        __size_of_toupper 0016  
                      __size_of_stristr 0078                              strcpy@from 0062  
                        printGUID@value 00C3                     __end_of_printBinary 4FC4  
                         __size_of_crc8 0036                           __size_of_atoi 00F8  
                         __size_of_main 0136                           __size_of_init 0046  
                         __size_of_itoa 0038                     __end_of_printErrors 233E  
                         __size_of_utoa 00A0                              strnicmp@s1 0064  
                            strnicmp@s2 0066                             _inputBuffer 0200  
            __size_of_sendVSCPDriverAck 0092                  _receivePrintEventCANAL 31CC  
                         ??_writeEEPROM 0063                _printNodeFirmwareVersion 3F22  
                   ECANSendMessage@data 006E                ECANSendMessage@tempBSEL0 0088  
                              _printMDF 461C                               printMDF@i 00C3  
                _receivePrintEventSLCAN 2D4E                               printMDF@p 00C1  
                          ?_getCANFrame 006D                     ECANSendMessage@mode 0085  
                   ECANSendMessage@temp 008B                       ?__ECANPointBuffer 0001  
                              atoi@sign 006A                             ??_findNodes 00C5  
                          ?_doModeSLCAN 0001                             ??_fifo_init 0064  
                           ??_fifo_read 0064                                _vscpData 01A4  
         __size_of_readRegisterExtended 00FC                                main@argc 00CA  
                              main@argv 00CC                                _vscpSize 01B0  
                    ??__ECANPointBuffer 0004                                _vscpType 01B1  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 006F  
                       doModeVerbose@id 0280                         doModeVerbose@rv 02A0  
                              _strnicmp 4C94                        init_app_eeprom@i 0063  
           writeRegisterExtended@nodeid 00C1                           Interrupt@data 001A  
                       _serialInputFifo 003E                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 0060                     ECANReceiveMessage@i 000E  
                              memcpy@d1 0060                                memcpy@s1 0062  
             receivePrintEventVerbose@i 00A5                                itoa@base 0074  
                              isdigit@c 0062                      _ECANReceiveMessage 2600  
                              memset@p1 0060                             ??_init_crc8 0060  
                             ultoa@base 007C                          ??_getVSCPFrame 007E  
             __size_of_hexStringToBytes 009A                         sendVSCPFrame@id 00B2  
                              intlevel1 0000                               sprintf@ap 0088  
                             sprintf@sp 0076                    hexStringToBytes@size 0066  
                             strchr@chr 0062                        ?_printStatistics 0001  
                      ___lwmod@dividend 0060                               strchr@ptr 0060  
                   ?_ECANReceiveMessage 0008                        ___lldiv@dividend 0060  
                           ??_setFilter 0064                           printMDF@value 00C0  
                         fifo_getFree@f 000B                               strcspn@s1 0066  
                             strcspn@s2 0068                 ECANSendMessage@msgFlags 0071  
                            _OSCCONbits 000FD3                               strnicmp@r 006C  
                             stristr@s1 006D                               stristr@s2 006F  
                    ECANSendMessage@ptr 008D                       ??_init_app_eeprom 0063  
            receivePrintEventCANAL@data 0072                   __size_of__CANIDToRegs 00C0  
                           ??_printGUID 00BF                          readEEPROM@data 0062  
                           ??_printHelp 0065                             ??_printMode 0065  
              _sendVSCPDriverErrorFrame 418E                           ?_fifo_getFree 0001  
                ECANSendMessage@dataLen 0070                     __end_of_writeEEPROM 53E2  
                   __ECANPointBuffer@pt 0005                    ??_ECANReceiveMessage 000B  
                           ??_putsUSART 0063                                utoa@base 006B  
                              ultoa@buf 0076                                ultoa@val 0078  
                         fifo_init@size 0062                                sprintf@c 0091  
                              sprintf@f 0078                     hexStringToBytes@buf 0064  
                              strcat@cp 0064                     hexStringToBytes@len 006C  
                        _doModeVscpNode 54C0                                strcat@to 0060  
      __end_of_receivePrintEventVerbose 2600                  ECANSendMessage@buffers 0086  
                      ___lldiv@quotient 0068                         ___lwmod@divisor 0062  
          __end_of_ECANSetOperationMode 5458                    _vscp_restoreDefaults 54B8  
                          printGUID@buf 00C0                                strcpy@cp 0064  
                              strlen@cp 0062                                strcpy@to 0060  
                       ___lwmod@counter 0064                                strcspn@i 006A  
                              toupper@c 0060                             _printBinary 4F7A  
                              strtok@s1 006C                                strtok@s2 006E  
                              strspn@s1 0066                                strspn@s2 0068  
                            _RXM1EXIDEN 0078EB                                strtok@sp 0031  
                ECANSendMessage@tempPtr 0089                             _printErrors 2068  
                          fifo_init@buf 0060                            fifo_read@buf 0060  
         sendVSCPDriverCommandReply@crc 0071                            __CANIDToRegs 367A  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 0033  
             readRegisterExtended@value 00BB                __size_of_ECANSendMessage 016E  
