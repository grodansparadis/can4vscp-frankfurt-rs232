

Microchip Technology PIC18 PRO Macro Assembler V1.21 build 54009 
                                                                                               Thu Oct 01 22:46:20 2015

Microchip Technology Omniscient Code Generator (PRO mode) build 54009
     1                           	processor	18F2580
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	text75,global,reloc=2,class=CODE,delta=1
    93                           	psect	text76,global,reloc=2,class=CODE,delta=1
    94                           	psect	text77,global,reloc=2,class=CODE,delta=1
    95                           	psect	text78,global,reloc=2,class=CODE,delta=1
    96                           	psect	text79,global,reloc=2,class=CODE,delta=1
    97                           	psect	text80,global,reloc=2,class=CODE,delta=1
    98                           	psect	text81,global,reloc=2,class=CODE,delta=1
    99                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   100                           	psect	text83,global,reloc=2,class=CODE,delta=1
   101                           	psect	text84,global,reloc=2,class=CODE,delta=1
   102                           	psect	text85,global,reloc=2,class=CODE,delta=1
   103                           	psect	text86,global,reloc=2,class=CODE,delta=1
   104                           	psect	text87,global,reloc=2,class=CODE,delta=1
   105                           	psect	text88,global,reloc=2,class=CODE,delta=1
   106                           	psect	text89,global,reloc=2,class=CODE,delta=1
   107                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   108                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   109                           	psect	pa_nodes,global,class=CODE,delta=1
   110  0000                     tblptru	equ	0xFF8
   111                           tblptrh	equ	0xFF7
   112                           tblptrl	equ	0xFF6
   113                           tablat	equ	0xFF5
   114                           prodh	equ	0xFF4
   115                           prodl	equ	0xFF3
   116                           intcon	equ	0xFF2
   117                           indf0	equ	0xFEF
   118                           fsr0h	equ	0xFEA
   119                           fsr0l	equ	0xFE9
   120                           wreg	equ	0xFE8
   121                           indf1	equ	0xFE7
   122                           postinc1	equ	0xFE6
   123                           postdec1	equ	0xFE5
   124                           fsr1h	equ	0xFE2
   125                           fsr1l	equ	0xFE1
   126                           indf2	equ	0xFDF
   127                           postinc2	equ	0xFDE
   128                           postdec2	equ	0xFDD
   129                           plusw2	equ	0xFDB
   130                           fsr2h	equ	0xFDA
   131                           fsr2l	equ	0xFD9
   132                           status	equ	0xFD8
   133                           
   134                           	psect	mediumconst
   135  006FB0                     __pmediumconst:
   136                           	opt stack 0
   137  006FB0                     _octpowers:
   138                           	opt stack 0
   139  006FB0  0001               	dw	1
   140  006FB2  0000               	dw	0
   141  006FB4  0008               	dw	8
   142  006FB6  0000               	dw	0
   143  006FB8  0040               	dw	64
   144  006FBA  0000               	dw	0
   145  006FBC  0200               	dw	512
   146  006FBE  0000               	dw	0
   147  006FC0  1000               	dw	4096
   148  006FC2  0000               	dw	0
   149  006FC4  8000               	dw	32768
   150  006FC6  0000               	dw	0
   151  006FC8  0000               	dw	0
   152  006FCA  0004               	dw	4
   153  006FCC  0000               	dw	0
   154  006FCE  0020               	dw	32
   155  006FD0  0000               	dw	0
   156  006FD2  0100               	dw	256
   157  006FD4  0000               	dw	0
   158  006FD6  0800               	dw	2048
   159  006FD8  0000               	dw	0
   160  006FDA  4000               	dw	16384
   161  006FDC  0000               	dw	0
   162  006FDE  0000               	dw	0
   163  006FE0                     __end_of_octpowers:
   164                           	opt stack 0
   165  006FE0                     _dpowers:
   166                           	opt stack 0
   167  006FE0  0001               	dw	1
   168  006FE2  0000               	dw	0
   169  006FE4  000A               	dw	10
   170  006FE6  0000               	dw	0
   171  006FE8  0064               	dw	100
   172  006FEA  0000               	dw	0
   173  006FEC  03E8               	dw	1000
   174  006FEE  0000               	dw	0
   175  006FF0  2710               	dw	10000
   176  006FF2  0000               	dw	0
   177  006FF4  86A0               	dw	34464
   178  006FF6  0001               	dw	1
   179  006FF8  4240               	dw	16960
   180  006FFA  000F               	dw	15
   181  006FFC  9680               	dw	38528
   182  006FFE  0098               	dw	152
   183  007000  E100               	dw	57600
   184  007002  05F5               	dw	1525
   185  007004  CA00               	dw	51712
   186  007006  3B9A               	dw	15258
   187  007008                     __end_of_dpowers:
   188                           	opt stack 0
   189  007008                     _hexpowers:
   190                           	opt stack 0
   191  007008  0001               	dw	1
   192  00700A  0000               	dw	0
   193  00700C  0010               	dw	16
   194  00700E  0000               	dw	0
   195  007010  0100               	dw	256
   196  007012  0000               	dw	0
   197  007014  1000               	dw	4096
   198  007016  0000               	dw	0
   199  007018  0000               	dw	0
   200  00701A  0001               	dw	1
   201  00701C  0000               	dw	0
   202  00701E  0010               	dw	16
   203  007020  0000               	dw	0
   204  007022  0100               	dw	256
   205  007024  0000               	dw	0
   206  007026  1000               	dw	4096
   207  007028                     __end_of_hexpowers:
   208                           	opt stack 0
   209  0000                     _BRGCON1	set	3952
   210  0000                     _BRGCON2	set	3953
   211  0000                     _BRGCON3	set	3954
   212  0000                     _BSEL0	set	3576
   213  0000                     _CANCON	set	3951
   214  0000                     _CIOCON	set	3955
   215  0000                     _COMSTATbits	set	3956
   216  0000                     _ECANCON	set	3959
   217  0000                     _EEADR	set	4009
   218  0000                     _EECON1bits	set	4006
   219  0000                     _EECON2	set	4007
   220  0000                     _EEDATA	set	4008
   221  0000                     _INTCONbits	set	4082
   222  0000                     _MSEL0	set	3568
   223  0000                     _MSEL1	set	3569
   224  0000                     _MSEL2	set	3570
   225  0000                     _OSCCONbits	set	4051
   226  0000                     _OSCTUNEbits	set	3995
   227  0000                     _PIE1bits	set	3997
   228  0000                     _PIR1bits	set	3998
   229  0000                     _RCREG	set	4014
   230  0000                     _RCSTA	set	4011
   231  0000                     _RCSTAbits	set	4011
   232  0000                     _RXB1CONbits	set	3920
   233  0000                     _RXERRCNT	set	3957
   234  0000                     _RXF0EIDH	set	3842
   235  0000                     _RXF0EIDL	set	3843
   236  0000                     _RXF0SIDH	set	3840
   237  0000                     _RXF0SIDL	set	3841
   238  0000                     _RXF10EIDH	set	3446
   239  0000                     _RXF10EIDL	set	3447
   240  0000                     _RXF10SIDH	set	3444
   241  0000                     _RXF10SIDL	set	3445
   242  0000                     _RXF11EIDH	set	3450
   243  0000                     _RXF11EIDL	set	3451
   244  0000                     _RXF11SIDH	set	3448
   245  0000                     _RXF11SIDL	set	3449
   246  0000                     _RXF12EIDH	set	3458
   247  0000                     _RXF12EIDL	set	3459
   248  0000                     _RXF12SIDH	set	3456
   249  0000                     _RXF12SIDL	set	3457
   250  0000                     _RXF13EIDH	set	3462
   251  0000                     _RXF13EIDL	set	3463
   252  0000                     _RXF13SIDH	set	3460
   253  0000                     _RXF13SIDL	set	3461
   254  0000                     _RXF14EIDH	set	3466
   255  0000                     _RXF14EIDL	set	3467
   256  0000                     _RXF14SIDH	set	3464
   257  0000                     _RXF14SIDL	set	3465
   258  0000                     _RXF15EIDH	set	3474
   259  0000                     _RXF15EIDL	set	3475
   260  0000                     _RXF15SIDH	set	3472
   261  0000                     _RXF15SIDL	set	3473
   262  0000                     _RXF1EIDH	set	3846
   263  0000                     _RXF1EIDL	set	3847
   264  0000                     _RXF1SIDH	set	3844
   265  0000                     _RXF1SIDL	set	3845
   266  0000                     _RXF2EIDH	set	3850
   267  0000                     _RXF2EIDL	set	3851
   268  0000                     _RXF2SIDH	set	3848
   269  0000                     _RXF2SIDL	set	3849
   270  0000                     _RXF3EIDH	set	3854
   271  0000                     _RXF3EIDL	set	3855
   272  0000                     _RXF3SIDH	set	3852
   273  0000                     _RXF3SIDL	set	3853
   274  0000                     _RXF4EIDH	set	3858
   275  0000                     _RXF4EIDL	set	3859
   276  0000                     _RXF4SIDH	set	3856
   277  0000                     _RXF4SIDL	set	3857
   278  0000                     _RXF5EIDH	set	3862
   279  0000                     _RXF5EIDL	set	3863
   280  0000                     _RXF5SIDH	set	3860
   281  0000                     _RXF5SIDL	set	3861
   282  0000                     _RXF6EIDH	set	3426
   283  0000                     _RXF6EIDL	set	3427
   284  0000                     _RXF6SIDH	set	3424
   285  0000                     _RXF6SIDL	set	3425
   286  0000                     _RXF7EIDH	set	3430
   287  0000                     _RXF7EIDL	set	3431
   288  0000                     _RXF7SIDH	set	3428
   289  0000                     _RXF7SIDL	set	3429
   290  0000                     _RXF8EIDH	set	3434
   291  0000                     _RXF8EIDL	set	3435
   292  0000                     _RXF8SIDH	set	3432
   293  0000                     _RXF8SIDL	set	3433
   294  0000                     _RXF9EIDH	set	3442
   295  0000                     _RXF9EIDL	set	3443
   296  0000                     _RXF9SIDH	set	3440
   297  0000                     _RXF9SIDL	set	3441
   298  0000                     _RXFBCON0	set	3552
   299  0000                     _RXFBCON1	set	3553
   300  0000                     _RXFBCON2	set	3554
   301  0000                     _RXFBCON3	set	3555
   302  0000                     _RXFBCON4	set	3556
   303  0000                     _RXFBCON5	set	3557
   304  0000                     _RXFBCON6	set	3558
   305  0000                     _RXFBCON7	set	3559
   306  0000                     _RXFCON0	set	3540
   307  0000                     _RXFCON1	set	3541
   308  0000                     _RXM0EIDH	set	3866
   309  0000                     _RXM0EIDL	set	3867
   310  0000                     _RXM0SIDL	set	3865
   311  0000                     _RXM1EIDH	set	3870
   312  0000                     _RXM1EIDL	set	3871
   313  0000                     _RXM1SIDL	set	3869
   314  0000                     _SPBRG	set	4015
   315  0000                     _SPBRGH	set	4016
   316  0000                     _T0CON	set	4053
   317  0000                     _T0CONbits	set	4053
   318  0000                     _TMR0H	set	4055
   319  0000                     _TMR0L	set	4054
   320  0000                     _TRISBbits	set	3987
   321  0000                     _TRISCbits	set	3988
   322  0000                     _TXERRCNT	set	3958
   323  0000                     _TXREG	set	4013
   324  0000                     _TXSTA	set	4012
   325  0000                     _TXSTAbits	set	4012
   326  0000                     _B0RXFUL	set	28935
   327  0000                     _B0TXEN	set	28610
   328  0000                     _B1RXFUL	set	29063
   329  0000                     _B1TXEN	set	28611
   330  0000                     _B2RXFUL	set	29191
   331  0000                     _B2TXEN	set	28612
   332  0000                     _B3RXFUL	set	29319
   333  0000                     _B3TXEN	set	28613
   334  0000                     _B4RXFUL	set	29447
   335  0000                     _B4TXEN	set	28614
   336  0000                     _B5RXFUL	set	29575
   337  0000                     _B5TXEN	set	28615
   338  0000                     _ERRIE	set	32029
   339  0000                     _FIFOEMPTY	set	31655
   340  0000                     _IRXIF	set	32039
   341  0000                     _LATC1	set	31833
   342  0000                     _MDSEL0	set	31678
   343  0000                     _MDSEL1	set	31679
   344  0000                     _PEIE	set	32662
   345  0000                     _RCIE	set	31981
   346  0000                     _RCIF	set	31989
   347  0000                     _RCIP	set	31997
   348  0000                     _RXB0FILHIT0	set	31488
   349  0000                     _RXB0FUL	set	31495
   350  0000                     _RXB0IF	set	32032
   351  0000                     _RXB0OVFL	set	31655
   352  0000                     _RXB1IF	set	32033
   353  0000                     _RXB1OVFL	set	31654
   354  0000                     _RXBnIE	set	32025
   355  0000                     _RXBnIF	set	32033
   356  0000                     _RXM0EXIDM	set	30923
   357  0000                     _RXM1EXIDEN	set	30955
   358  0000                     _B0CON	set	3616
   359  0000                     _B1CON	set	3632
   360  0000                     _B2CON	set	3648
   361  0000                     _B3CON	set	3664
   362  0000                     _B4CON	set	3680
   363  0000                     _B5CON	set	3696
   364  0000                     _RXB0CON	set	3936
   365  0000                     _RXB1CON	set	3920
   366  0000                     _RXM0SIDH	set	3864
   367  0000                     _RXM1SIDH	set	3868
   368  0000                     _TXB0CON	set	3904
   369  0000                     _TXB1CON	set	3888
   370  0000                     _TXB2CON	set	3872
   371  007028                     __stringdata:
   372                           	opt stack 0
   373  007028                     STR_227:
   374  007028  20                 	db	32
   375  007029  20                 	db	32
   376  00702A  20                 	db	32
   377  00702B  20                 	db	32
   378  00702C  20                 	db	32
   379  00702D  20                 	db	32
   380  00702E  20                 	db	32
   381  00702F  20                 	db	32
   382  007030  20                 	db	32
   383  007031  46                 	db	70	;'F'
   384  007032  6F                 	db	111	;'o'
   385  007033  72                 	db	114	;'r'
   386  007034  6D                 	db	109	;'m'
   387  007035  61                 	db	97	;'a'
   388  007036  74                 	db	116	;'t'
   389  007037  3A                 	db	58	;':'
   390  007038  20                 	db	32
   391  007039  66                 	db	102	;'f'
   392  00703A  69                 	db	105	;'i'
   393  00703B  6C                 	db	108	;'l'
   394  00703C  74                 	db	116	;'t'
   395  00703D  65                 	db	101	;'e'
   396  00703E  72                 	db	114	;'r'
   397  00703F  20                 	db	32
   398  007040  66                 	db	102	;'f'
   399  007041  69                 	db	105	;'i'
   400  007042  6C                 	db	108	;'l'
   401  007043  74                 	db	116	;'t'
   402  007044  65                 	db	101	;'e'
   403  007045  72                 	db	114	;'r'
   404  007046  6E                 	db	110	;'n'
   405  007047  6F                 	db	111	;'o'
   406  007048  2C                 	db	44
   407  007049  70                 	db	112	;'p'
   408  00704A  72                 	db	114	;'r'
   409  00704B  69                 	db	105	;'i'
   410  00704C  6F                 	db	111	;'o'
   411  00704D  2C                 	db	44
   412  00704E  63                 	db	99	;'c'
   413  00704F  6C                 	db	108	;'l'
   414  007050  61                 	db	97	;'a'
   415  007051  73                 	db	115	;'s'
   416  007052  73                 	db	115	;'s'
   417  007053  2C                 	db	44
   418  007054  74                 	db	116	;'t'
   419  007055  79                 	db	121	;'y'
   420  007056  70                 	db	112	;'p'
   421  007057  65                 	db	101	;'e'
   422  007058  2C                 	db	44
   423  007059  6E                 	db	110	;'n'
   424  00705A  6F                 	db	111	;'o'
   425  00705B  64                 	db	100	;'d'
   426  00705C  65                 	db	101	;'e'
   427  00705D  69                 	db	105	;'i'
   428  00705E  64                 	db	100	;'d'
   429  00705F  20                 	db	32
   430  007060  20                 	db	32
   431  007061  28                 	db	40
   432  007062  66                 	db	102	;'f'
   433  007063  69                 	db	105	;'i'
   434  007064  6C                 	db	108	;'l'
   435  007065  74                 	db	116	;'t'
   436  007066  65                 	db	101	;'e'
   437  007067  72                 	db	114	;'r'
   438  007068  6E                 	db	110	;'n'
   439  007069  6F                 	db	111	;'o'
   440  00706A  20                 	db	32
   441  00706B  3D                 	db	61	;'='
   442  00706C  20                 	db	32
   443  00706D  30                 	db	48	;'0'
   444  00706E  2D                 	db	45
   445  00706F  31                 	db	49	;'1'
   446  007070  35                 	db	53	;'5'
   447  007071  29                 	db	41
   448  007072  2E                 	db	46
   449  007073  0D                 	db	13
   450  007074  0A                 	db	10
   451  007075  00                 	db	0
   452  007076                     STR_225:
   453  007076  49                 	db	73	;'I'
   454  007077  4E                 	db	78	;'N'
   455  007078  46                 	db	70	;'F'
   456  007079  4F                 	db	79	;'O'
   457  00707A  20                 	db	32
   458  00707B  2D                 	db	45
   459  00707C  20                 	db	32
   460  00707D  47                 	db	71	;'G'
   461  00707E  65                 	db	101	;'e'
   462  00707F  74                 	db	116	;'t'
   463  007080  20                 	db	32
   464  007081  69                 	db	105	;'i'
   465  007082  6E                 	db	110	;'n'
   466  007083  66                 	db	102	;'f'
   467  007084  6F                 	db	111	;'o'
   468  007085  20                 	db	32
   469  007086  61                 	db	97	;'a'
   470  007087  62                 	db	98	;'b'
   471  007088  6F                 	db	111	;'o'
   472  007089  75                 	db	117	;'u'
   473  00708A  74                 	db	116	;'t'
   474  00708B  20                 	db	32
   475  00708C  61                 	db	97	;'a'
   476  00708D  6E                 	db	110	;'n'
   477  00708E  20                 	db	32
   478  00708F  65                 	db	101	;'e'
   479  007090  78                 	db	120	;'x'
   480  007091  69                 	db	105	;'i'
   481  007092  73                 	db	115	;'s'
   482  007093  74                 	db	116	;'t'
   483  007094  65                 	db	101	;'e'
   484  007095  6E                 	db	110	;'n'
   485  007096  74                 	db	116	;'t'
   486  007097  20                 	db	32
   487  007098  6E                 	db	110	;'n'
   488  007099  6F                 	db	111	;'o'
   489  00709A  64                 	db	100	;'d'
   490  00709B  65                 	db	101	;'e'
   491  00709C  20                 	db	32
   492  00709D  6F                 	db	111	;'o'
   493  00709E  6E                 	db	110	;'n'
   494  00709F  20                 	db	32
   495  0070A0  74                 	db	116	;'t'
   496  0070A1  68                 	db	104	;'h'
   497  0070A2  65                 	db	101	;'e'
   498  0070A3  20                 	db	32
   499  0070A4  62                 	db	98	;'b'
   500  0070A5  75                 	db	117	;'u'
   501  0070A6  73                 	db	115	;'s'
   502  0070A7  20                 	db	32
   503  0070A8  28                 	db	40
   504  0070A9  46                 	db	70	;'F'
   505  0070AA  6F                 	db	111	;'o'
   506  0070AB  72                 	db	114	;'r'
   507  0070AC  6D                 	db	109	;'m'
   508  0070AD  61                 	db	97	;'a'
   509  0070AE  74                 	db	116	;'t'
   510  0070AF  3A                 	db	58	;':'
   511  0070B0  20                 	db	32
   512  0070B1  69                 	db	105	;'i'
   513  0070B2  6E                 	db	110	;'n'
   514  0070B3  66                 	db	102	;'f'
   515  0070B4  6F                 	db	111	;'o'
   516  0070B5  20                 	db	32
   517  0070B6  6E                 	db	110	;'n'
   518  0070B7  69                 	db	105	;'i'
   519  0070B8  63                 	db	99	;'c'
   520  0070B9  6B                 	db	107	;'k'
   521  0070BA  6E                 	db	110	;'n'
   522  0070BB  61                 	db	97	;'a'
   523  0070BC  6D                 	db	109	;'m'
   524  0070BD  65                 	db	101	;'e'
   525  0070BE  29                 	db	41
   526  0070BF  2E                 	db	46
   527  0070C0  0D                 	db	13
   528  0070C1  0A                 	db	10
   529  0070C2  00                 	db	0
   530  0070C3                     STR_229:
   531  0070C3  20                 	db	32
   532  0070C4  20                 	db	32
   533  0070C5  20                 	db	32
   534  0070C6  20                 	db	32
   535  0070C7  20                 	db	32
   536  0070C8  20                 	db	32
   537  0070C9  20                 	db	32
   538  0070CA  46                 	db	70	;'F'
   539  0070CB  6F                 	db	111	;'o'
   540  0070CC  72                 	db	114	;'r'
   541  0070CD  6D                 	db	109	;'m'
   542  0070CE  61                 	db	97	;'a'
   543  0070CF  74                 	db	116	;'t'
   544  0070D0  3A                 	db	58	;':'
   545  0070D1  20                 	db	32
   546  0070D2  6D                 	db	109	;'m'
   547  0070D3  61                 	db	97	;'a'
   548  0070D4  73                 	db	115	;'s'
   549  0070D5  6B                 	db	107	;'k'
   550  0070D6  20                 	db	32
   551  0070D7  6D                 	db	109	;'m'
   552  0070D8  61                 	db	97	;'a'
   553  0070D9  73                 	db	115	;'s'
   554  0070DA  6B                 	db	107	;'k'
   555  0070DB  6E                 	db	110	;'n'
   556  0070DC  6F                 	db	111	;'o'
   557  0070DD  2C                 	db	44
   558  0070DE  70                 	db	112	;'p'
   559  0070DF  72                 	db	114	;'r'
   560  0070E0  69                 	db	105	;'i'
   561  0070E1  6F                 	db	111	;'o'
   562  0070E2  2C                 	db	44
   563  0070E3  63                 	db	99	;'c'
   564  0070E4  6C                 	db	108	;'l'
   565  0070E5  61                 	db	97	;'a'
   566  0070E6  73                 	db	115	;'s'
   567  0070E7  73                 	db	115	;'s'
   568  0070E8  2C                 	db	44
   569  0070E9  74                 	db	116	;'t'
   570  0070EA  79                 	db	121	;'y'
   571  0070EB  70                 	db	112	;'p'
   572  0070EC  65                 	db	101	;'e'
   573  0070ED  2C                 	db	44
   574  0070EE  6E                 	db	110	;'n'
   575  0070EF  6F                 	db	111	;'o'
   576  0070F0  64                 	db	100	;'d'
   577  0070F1  65                 	db	101	;'e'
   578  0070F2  69                 	db	105	;'i'
   579  0070F3  64                 	db	100	;'d'
   580  0070F4  20                 	db	32
   581  0070F5  28                 	db	40
   582  0070F6  6D                 	db	109	;'m'
   583  0070F7  61                 	db	97	;'a'
   584  0070F8  73                 	db	115	;'s'
   585  0070F9  6B                 	db	107	;'k'
   586  0070FA  6E                 	db	110	;'n'
   587  0070FB  6F                 	db	111	;'o'
   588  0070FC  20                 	db	32
   589  0070FD  3D                 	db	61	;'='
   590  0070FE  20                 	db	32
   591  0070FF  30                 	db	48	;'0'
   592  007100  20                 	db	32
   593  007101  6F                 	db	111	;'o'
   594  007102  72                 	db	114	;'r'
   595  007103  20                 	db	32
   596  007104  31                 	db	49	;'1'
   597  007105  29                 	db	41
   598  007106  2E                 	db	46
   599  007107  0D                 	db	13
   600  007108  0A                 	db	10
   601  007109  00                 	db	0
   602  00710A                     STR_223:
   603  00710A  52                 	db	82	;'R'
   604  00710B  52                 	db	82	;'R'
   605  00710C  45                 	db	69	;'E'
   606  00710D  47                 	db	71	;'G'
   607  00710E  20                 	db	32
   608  00710F  2D                 	db	45
   609  007110  20                 	db	32
   610  007111  52                 	db	82	;'R'
   611  007112  65                 	db	101	;'e'
   612  007113  61                 	db	97	;'a'
   613  007114  64                 	db	100	;'d'
   614  007115  20                 	db	32
   615  007116  72                 	db	114	;'r'
   616  007117  65                 	db	101	;'e'
   617  007118  67                 	db	103	;'g'
   618  007119  69                 	db	105	;'i'
   619  00711A  73                 	db	115	;'s'
   620  00711B  74                 	db	116	;'t'
   621  00711C  65                 	db	101	;'e'
   622  00711D  72                 	db	114	;'r'
   623  00711E  28                 	db	40
   624  00711F  73                 	db	115	;'s'
   625  007120  29                 	db	41
   626  007121  20                 	db	32
   627  007122  6F                 	db	111	;'o'
   628  007123  66                 	db	102	;'f'
   629  007124  20                 	db	32
   630  007125  6E                 	db	110	;'n'
   631  007126  6F                 	db	111	;'o'
   632  007127  64                 	db	100	;'d'
   633  007128  65                 	db	101	;'e'
   634  007129  20                 	db	32
   635  00712A  28                 	db	40
   636  00712B  46                 	db	70	;'F'
   637  00712C  6F                 	db	111	;'o'
   638  00712D  72                 	db	114	;'r'
   639  00712E  6D                 	db	109	;'m'
   640  00712F  61                 	db	97	;'a'
   641  007130  74                 	db	116	;'t'
   642  007131  3A                 	db	58	;':'
   643  007132  20                 	db	32
   644  007133  72                 	db	114	;'r'
   645  007134  72                 	db	114	;'r'
   646  007135  65                 	db	101	;'e'
   647  007136  67                 	db	103	;'g'
   648  007137  20                 	db	32
   649  007138  5B                 	db	91	;'['
   650  007139  70                 	db	112	;'p'
   651  00713A  61                 	db	97	;'a'
   652  00713B  67                 	db	103	;'g'
   653  00713C  65                 	db	101	;'e'
   654  00713D  3A                 	db	58	;':'
   655  00713E  5D                 	db	93	;']'
   656  00713F  72                 	db	114	;'r'
   657  007140  65                 	db	101	;'e'
   658  007141  67                 	db	103	;'g'
   659  007142  20                 	db	32
   660  007143  5B                 	db	91	;'['
   661  007144  63                 	db	99	;'c'
   662  007145  6F                 	db	111	;'o'
   663  007146  75                 	db	117	;'u'
   664  007147  6E                 	db	110	;'n'
   665  007148  74                 	db	116	;'t'
   666  007149  5D                 	db	93	;']'
   667  00714A  29                 	db	41
   668  00714B  2E                 	db	46
   669  00714C  0D                 	db	13
   670  00714D  0A                 	db	10
   671  00714E  00                 	db	0
   672  00714F                     STR_238:
   673  00714F  2D                 	db	45
   674  007150  2D                 	db	45
   675  007151  2D                 	db	45
   676  007152  2D                 	db	45
   677  007153  2D                 	db	45
   678  007154  2D                 	db	45
   679  007155  2D                 	db	45
   680  007156  2D                 	db	45
   681  007157  2D                 	db	45
   682  007158  2D                 	db	45
   683  007159  2D                 	db	45
   684  00715A  2D                 	db	45
   685  00715B  2D                 	db	45
   686  00715C  2D                 	db	45
   687  00715D  2D                 	db	45
   688  00715E  2D                 	db	45
   689  00715F  2D                 	db	45
   690  007160  2D                 	db	45
   691  007161  2D                 	db	45
   692  007162  2D                 	db	45
   693  007163  2D                 	db	45
   694  007164  2D                 	db	45
   695  007165  2D                 	db	45
   696  007166  2D                 	db	45
   697  007167  2D                 	db	45
   698  007168  2D                 	db	45
   699  007169  2D                 	db	45
   700  00716A  2D                 	db	45
   701  00716B  2D                 	db	45
   702  00716C  2D                 	db	45
   703  00716D  2D                 	db	45
   704  00716E  2D                 	db	45
   705  00716F  2D                 	db	45
   706  007170  2D                 	db	45
   707  007171  2D                 	db	45
   708  007172  2D                 	db	45
   709  007173  2D                 	db	45
   710  007174  2D                 	db	45
   711  007175  2D                 	db	45
   712  007176  2D                 	db	45
   713  007177  2D                 	db	45
   714  007178  2D                 	db	45
   715  007179  2D                 	db	45
   716  00717A  2D                 	db	45
   717  00717B  2D                 	db	45
   718  00717C  2D                 	db	45
   719  00717D  2D                 	db	45
   720  00717E  2D                 	db	45
   721  00717F  2D                 	db	45
   722  007180  2D                 	db	45
   723  007181  2D                 	db	45
   724  007182  2D                 	db	45
   725  007183  2D                 	db	45
   726  007184  2D                 	db	45
   727  007185  2D                 	db	45
   728  007186  2D                 	db	45
   729  007187  2D                 	db	45
   730  007188  2D                 	db	45
   731  007189  2D                 	db	45
   732  00718A  2D                 	db	45
   733  00718B  2D                 	db	45
   734  00718C  2D                 	db	45
   735  00718D  2D                 	db	45
   736  00718E  2D                 	db	45
   737  00718F  0D                 	db	13
   738  007190  0A                 	db	10
   739  007191  00                 	db	0
   740  007192                     STR_233:
   741  007192  20                 	db	32
   742  007193  20                 	db	32
   743  007194  20                 	db	32
   744  007195  20                 	db	32
   745  007196  52                 	db	82	;'R'
   746  007197  57                 	db	87	;'W'
   747  007198  54                 	db	84	;'T'
   748  007199  49                 	db	73	;'I'
   749  00719A  4D                 	db	77	;'M'
   750  00719B  45                 	db	69	;'E'
   751  00719C  4F                 	db	79	;'O'
   752  00719D  55                 	db	85	;'U'
   753  00719E  54                 	db	84	;'T'
   754  00719F  20                 	db	32
   755  0071A0  2D                 	db	45
   756  0071A1  20                 	db	32
   757  0071A2  53                 	db	83	;'S'
   758  0071A3  65                 	db	101	;'e'
   759  0071A4  74                 	db	116	;'t'
   760  0071A5  20                 	db	32
   761  0071A6  72                 	db	114	;'r'
   762  0071A7  65                 	db	101	;'e'
   763  0071A8  67                 	db	103	;'g'
   764  0071A9  69                 	db	105	;'i'
   765  0071AA  73                 	db	115	;'s'
   766  0071AB  74                 	db	116	;'t'
   767  0071AC  65                 	db	101	;'e'
   768  0071AD  72                 	db	114	;'r'
   769  0071AE  20                 	db	32
   770  0071AF  72                 	db	114	;'r'
   771  0071B0  65                 	db	101	;'e'
   772  0071B1  61                 	db	97	;'a'
   773  0071B2  64                 	db	100	;'d'
   774  0071B3  2F                 	db	47
   775  0071B4  77                 	db	119	;'w'
   776  0071B5  72                 	db	114	;'r'
   777  0071B6  69                 	db	105	;'i'
   778  0071B7  74                 	db	116	;'t'
   779  0071B8  65                 	db	101	;'e'
   780  0071B9  20                 	db	32
   781  0071BA  74                 	db	116	;'t'
   782  0071BB  69                 	db	105	;'i'
   783  0071BC  6D                 	db	109	;'m'
   784  0071BD  65                 	db	101	;'e'
   785  0071BE  6F                 	db	111	;'o'
   786  0071BF  75                 	db	117	;'u'
   787  0071C0  74                 	db	116	;'t'
   788  0071C1  2E                 	db	46
   789  0071C2  20                 	db	32
   790  0071C3  44                 	db	68	;'D'
   791  0071C4  65                 	db	101	;'e'
   792  0071C5  66                 	db	102	;'f'
   793  0071C6  61                 	db	97	;'a'
   794  0071C7  75                 	db	117	;'u'
   795  0071C8  6C                 	db	108	;'l'
   796  0071C9  74                 	db	116	;'t'
   797  0071CA  3D                 	db	61	;'='
   798  0071CB  31                 	db	49	;'1'
   799  0071CC  30                 	db	48	;'0'
   800  0071CD  20                 	db	32
   801  0071CE  6D                 	db	109	;'m'
   802  0071CF  73                 	db	115	;'s'
   803  0071D0  20                 	db	32
   804  0071D1  2E                 	db	46
   805  0071D2  0D                 	db	13
   806  0071D3  0A                 	db	10
   807  0071D4  00                 	db	0
   808  0071D5                     STR_224:
   809  0071D5  57                 	db	87	;'W'
   810  0071D6  52                 	db	82	;'R'
   811  0071D7  45                 	db	69	;'E'
   812  0071D8  47                 	db	71	;'G'
   813  0071D9  20                 	db	32
   814  0071DA  2D                 	db	45
   815  0071DB  20                 	db	32
   816  0071DC  57                 	db	87	;'W'
   817  0071DD  72                 	db	114	;'r'
   818  0071DE  69                 	db	105	;'i'
   819  0071DF  74                 	db	116	;'t'
   820  0071E0  65                 	db	101	;'e'
   821  0071E1  20                 	db	32
   822  0071E2  72                 	db	114	;'r'
   823  0071E3  65                 	db	101	;'e'
   824  0071E4  67                 	db	103	;'g'
   825  0071E5  69                 	db	105	;'i'
   826  0071E6  73                 	db	115	;'s'
   827  0071E7  74                 	db	116	;'t'
   828  0071E8  65                 	db	101	;'e'
   829  0071E9  72                 	db	114	;'r'
   830  0071EA  20                 	db	32
   831  0071EB  6F                 	db	111	;'o'
   832  0071EC  66                 	db	102	;'f'
   833  0071ED  20                 	db	32
   834  0071EE  6E                 	db	110	;'n'
   835  0071EF  6F                 	db	111	;'o'
   836  0071F0  64                 	db	100	;'d'
   837  0071F1  65                 	db	101	;'e'
   838  0071F2  20                 	db	32
   839  0071F3  28                 	db	40
   840  0071F4  46                 	db	70	;'F'
   841  0071F5  6F                 	db	111	;'o'
   842  0071F6  72                 	db	114	;'r'
   843  0071F7  6D                 	db	109	;'m'
   844  0071F8  61                 	db	97	;'a'
   845  0071F9  74                 	db	116	;'t'
   846  0071FA  3A                 	db	58	;':'
   847  0071FB  20                 	db	32
   848  0071FC  77                 	db	119	;'w'
   849  0071FD  72                 	db	114	;'r'
   850  0071FE  65                 	db	101	;'e'
   851  0071FF  67                 	db	103	;'g'
   852  007200  20                 	db	32
   853  007201  5B                 	db	91	;'['
   854  007202  70                 	db	112	;'p'
   855  007203  61                 	db	97	;'a'
   856  007204  67                 	db	103	;'g'
   857  007205  65                 	db	101	;'e'
   858  007206  3A                 	db	58	;':'
   859  007207  5D                 	db	93	;']'
   860  007208  72                 	db	114	;'r'
   861  007209  65                 	db	101	;'e'
   862  00720A  67                 	db	103	;'g'
   863  00720B  20                 	db	32
   864  00720C  63                 	db	99	;'c'
   865  00720D  6F                 	db	111	;'o'
   866  00720E  6E                 	db	110	;'n'
   867  00720F  74                 	db	116	;'t'
   868  007210  65                 	db	101	;'e'
   869  007211  6E                 	db	110	;'n'
   870  007212  74                 	db	116	;'t'
   871  007213  29                 	db	41
   872  007214  2E                 	db	46
   873  007215  0D                 	db	13
   874  007216  0A                 	db	10
   875  007217  00                 	db	0
   876  007218                     STR_89:
   877  007218  2D                 	db	45
   878  007219  45                 	db	69	;'E'
   879  00721A  52                 	db	82	;'R'
   880  00721B  52                 	db	82	;'R'
   881  00721C  4F                 	db	79	;'O'
   882  00721D  52                 	db	82	;'R'
   883  00721E  20                 	db	32
   884  00721F  2D                 	db	45
   885  007220  20                 	db	32
   886  007221  46                 	db	70	;'F'
   887  007222  69                 	db	105	;'i'
   888  007223  6C                 	db	108	;'l'
   889  007224  74                 	db	116	;'t'
   890  007225  65                 	db	101	;'e'
   891  007226  72                 	db	114	;'r'
   892  007227  20                 	db	32
   893  007228  6E                 	db	110	;'n'
   894  007229  75                 	db	117	;'u'
   895  00722A  6D                 	db	109	;'m'
   896  00722B  62                 	db	98	;'b'
   897  00722C  65                 	db	101	;'e'
   898  00722D  72                 	db	114	;'r'
   899  00722E  20                 	db	32
   900  00722F  63                 	db	99	;'c'
   901  007230  61                 	db	97	;'a'
   902  007231  6E                 	db	110	;'n'
   903  007232  20                 	db	32
   904  007233  6F                 	db	111	;'o'
   905  007234  6E                 	db	110	;'n'
   906  007235  6C                 	db	108	;'l'
   907  007236  79                 	db	121	;'y'
   908  007237  20                 	db	32
   909  007238  62                 	db	98	;'b'
   910  007239  65                 	db	101	;'e'
   911  00723A  20                 	db	32
   912  00723B  73                 	db	115	;'s'
   913  00723C  65                 	db	101	;'e'
   914  00723D  74                 	db	116	;'t'
   915  00723E  20                 	db	32
   916  00723F  74                 	db	116	;'t'
   917  007240  6F                 	db	111	;'o'
   918  007241  20                 	db	32
   919  007242  61                 	db	97	;'a'
   920  007243  20                 	db	32
   921  007244  76                 	db	118	;'v'
   922  007245  61                 	db	97	;'a'
   923  007246  6C                 	db	108	;'l'
   924  007247  75                 	db	117	;'u'
   925  007248  65                 	db	101	;'e'
   926  007249  20                 	db	32
   927  00724A  62                 	db	98	;'b'
   928  00724B  65                 	db	101	;'e'
   929  00724C  74                 	db	116	;'t'
   930  00724D  77                 	db	119	;'w'
   931  00724E  65                 	db	101	;'e'
   932  00724F  65                 	db	101	;'e'
   933  007250  6E                 	db	110	;'n'
   934  007251  20                 	db	32
   935  007252  30                 	db	48	;'0'
   936  007253  2D                 	db	45
   937  007254  31                 	db	49	;'1'
   938  007255  35                 	db	53	;'5'
   939  007256  2E                 	db	46
   940  007257  0D                 	db	13
   941  007258  0A                 	db	10
   942  007259  00                 	db	0
   943  00725A                     STR_236:
   944  00725A  20                 	db	32
   945  00725B  20                 	db	32
   946  00725C  20                 	db	32
   947  00725D  20                 	db	32
   948  00725E  4D                 	db	77	;'M'
   949  00725F  4F                 	db	79	;'O'
   950  007260  44                 	db	68	;'D'
   951  007261  45                 	db	69	;'E'
   952  007262  20                 	db	32
   953  007263  2D                 	db	45
   954  007264  20                 	db	32
   955  007265  53                 	db	83	;'S'
   956  007266  65                 	db	101	;'e'
   957  007267  74                 	db	116	;'t'
   958  007268  20                 	db	32
   959  007269  61                 	db	97	;'a'
   960  00726A  64                 	db	100	;'d'
   961  00726B  61                 	db	97	;'a'
   962  00726C  70                 	db	112	;'p'
   963  00726D  74                 	db	116	;'t'
   964  00726E  65                 	db	101	;'e'
   965  00726F  72                 	db	114	;'r'
   966  007270  20                 	db	32
   967  007271  6D                 	db	109	;'m'
   968  007272  6F                 	db	111	;'o'
   969  007273  64                 	db	100	;'d'
   970  007274  65                 	db	101	;'e'
   971  007275  20                 	db	32
   972  007276  74                 	db	116	;'t'
   973  007277  68                 	db	104	;'h'
   974  007278  61                 	db	97	;'a'
   975  007279  74                 	db	116	;'t'
   976  00727A  20                 	db	32
   977  00727B  73                 	db	115	;'s'
   978  00727C  68                 	db	104	;'h'
   979  00727D  6F                 	db	111	;'o'
   980  00727E  75                 	db	117	;'u'
   981  00727F  6C                 	db	108	;'l'
   982  007280  64                 	db	100	;'d'
   983  007281  20                 	db	32
   984  007282  62                 	db	98	;'b'
   985  007283  65                 	db	101	;'e'
   986  007284  20                 	db	32
   987  007285  75                 	db	117	;'u'
   988  007286  73                 	db	115	;'s'
   989  007287  65                 	db	101	;'e'
   990  007288  64                 	db	100	;'d'
   991  007289  20                 	db	32
   992  00728A  6F                 	db	111	;'o'
   993  00728B  6E                 	db	110	;'n'
   994  00728C  20                 	db	32
   995  00728D  73                 	db	115	;'s'
   996  00728E  74                 	db	116	;'t'
   997  00728F  61                 	db	97	;'a'
   998  007290  72                 	db	114	;'r'
   999  007291  74                 	db	116	;'t'
  1000  007292  75                 	db	117	;'u'
  1001  007293  70                 	db	112	;'p'
  1002  007294  2E                 	db	46
  1003  007295  0D                 	db	13
  1004  007296  0A                 	db	10
  1005  007297  00                 	db	0
  1006  007298                     STR_196:
  1007  007298  54                 	db	84	;'T'
  1008  007299  72                 	db	114	;'r'
  1009  00729A  61                 	db	97	;'a'
  1010  00729B  6E                 	db	110	;'n'
  1011  00729C  73                 	db	115	;'s'
  1012  00729D  6D                 	db	109	;'m'
  1013  00729E  69                 	db	105	;'i'
  1014  00729F  74                 	db	116	;'t'
  1015  0072A0  74                 	db	116	;'t'
  1016  0072A1  65                 	db	101	;'e'
  1017  0072A2  72                 	db	114	;'r'
  1018  0072A3  20                 	db	32
  1019  0072A4  69                 	db	105	;'i'
  1020  0072A5  6E                 	db	110	;'n'
  1021  0072A6  20                 	db	32
  1022  0072A7  45                 	db	69	;'E'
  1023  0072A8  72                 	db	114	;'r'
  1024  0072A9  72                 	db	114	;'r'
  1025  0072AA  6F                 	db	111	;'o'
  1026  0072AB  72                 	db	114	;'r'
  1027  0072AC  20                 	db	32
  1028  0072AD  53                 	db	83	;'S'
  1029  0072AE  74                 	db	116	;'t'
  1030  0072AF  61                 	db	97	;'a'
  1031  0072B0  74                 	db	116	;'t'
  1032  0072B1  65                 	db	101	;'e'
  1033  0072B2  20                 	db	32
  1034  0072B3  57                 	db	87	;'W'
  1035  0072B4  61                 	db	97	;'a'
  1036  0072B5  72                 	db	114	;'r'
  1037  0072B6  6E                 	db	110	;'n'
  1038  0072B7  69                 	db	105	;'i'
  1039  0072B8  6E                 	db	110	;'n'
  1040  0072B9  67                 	db	103	;'g'
  1041  0072BA  20                 	db	32
  1042  0072BB  28                 	db	40
  1043  0072BC  31                 	db	49	;'1'
  1044  0072BD  32                 	db	50	;'2'
  1045  0072BE  38                 	db	56	;'8'
  1046  0072BF  20                 	db	32
  1047  0072C0  3E                 	db	62	;'>'
  1048  0072C1  20                 	db	32
  1049  0072C2  54                 	db	84	;'T'
  1050  0072C3  45                 	db	69	;'E'
  1051  0072C4  52                 	db	82	;'R'
  1052  0072C5  52                 	db	82	;'R'
  1053  0072C6  43                 	db	67	;'C'
  1054  0072C7  4E                 	db	78	;'N'
  1055  0072C8  54                 	db	84	;'T'
  1056  0072C9  20                 	db	32
  1057  0072CA  3F                 	db	63	;'?'
  1058  0072CB  20                 	db	32
  1059  0072CC  39                 	db	57	;'9'
  1060  0072CD  36                 	db	54	;'6'
  1061  0072CE  29                 	db	41
  1062  0072CF  0D                 	db	13
  1063  0072D0  0A                 	db	10
  1064  0072D1  00                 	db	0
  1065  0072D2                     STR_2:
  1066  0072D2  43                 	db	67	;'C'
  1067  0072D3  6F                 	db	111	;'o'
  1068  0072D4  70                 	db	112	;'p'
  1069  0072D5  79                 	db	121	;'y'
  1070  0072D6  72                 	db	114	;'r'
  1071  0072D7  69                 	db	105	;'i'
  1072  0072D8  67                 	db	103	;'g'
  1073  0072D9  68                 	db	104	;'h'
  1074  0072DA  74                 	db	116	;'t'
  1075  0072DB  20                 	db	32
  1076  0072DC  28                 	db	40
  1077  0072DD  43                 	db	67	;'C'
  1078  0072DE  29                 	db	41
  1079  0072DF  20                 	db	32
  1080  0072E0  32                 	db	50	;'2'
  1081  0072E1  30                 	db	48	;'0'
  1082  0072E2  31                 	db	49	;'1'
  1083  0072E3  34                 	db	52	;'4'
  1084  0072E4  2D                 	db	45
  1085  0072E5  32                 	db	50	;'2'
  1086  0072E6  30                 	db	48	;'0'
  1087  0072E7  31                 	db	49	;'1'
  1088  0072E8  35                 	db	53	;'5'
  1089  0072E9  20                 	db	32
  1090  0072EA  50                 	db	80	;'P'
  1091  0072EB  61                 	db	97	;'a'
  1092  0072EC  72                 	db	114	;'r'
  1093  0072ED  61                 	db	97	;'a'
  1094  0072EE  64                 	db	100	;'d'
  1095  0072EF  69                 	db	105	;'i'
  1096  0072F0  73                 	db	115	;'s'
  1097  0072F1  65                 	db	101	;'e'
  1098  0072F2  20                 	db	32
  1099  0072F3  6F                 	db	111	;'o'
  1100  0072F4  66                 	db	102	;'f'
  1101  0072F5  20                 	db	32
  1102  0072F6  74                 	db	116	;'t'
  1103  0072F7  68                 	db	104	;'h'
  1104  0072F8  65                 	db	101	;'e'
  1105  0072F9  20                 	db	32
  1106  0072FA  46                 	db	70	;'F'
  1107  0072FB  72                 	db	114	;'r'
  1108  0072FC  6F                 	db	111	;'o'
  1109  0072FD  67                 	db	103	;'g'
  1110  0072FE  20                 	db	32
  1111  0072FF  41                 	db	65	;'A'
  1112  007300  42                 	db	66	;'B'
  1113  007301  2C                 	db	44
  1114  007302  20                 	db	32
  1115  007303  53                 	db	83	;'S'
  1116  007304  77                 	db	119	;'w'
  1117  007305  65                 	db	101	;'e'
  1118  007306  64                 	db	100	;'d'
  1119  007307  65                 	db	101	;'e'
  1120  007308  6E                 	db	110	;'n'
  1121  007309  0D                 	db	13
  1122  00730A  0A                 	db	10
  1123  00730B  00                 	db	0
  1124  00730C                     STR_198:
  1125  00730C  54                 	db	84	;'T'
  1126  00730D  72                 	db	114	;'r'
  1127  00730E  61                 	db	97	;'a'
  1128  00730F  6E                 	db	110	;'n'
  1129  007310  73                 	db	115	;'s'
  1130  007311  6D                 	db	109	;'m'
  1131  007312  69                 	db	105	;'i'
  1132  007313  74                 	db	116	;'t'
  1133  007314  74                 	db	116	;'t'
  1134  007315  65                 	db	101	;'e'
  1135  007316  72                 	db	114	;'r'
  1136  007317  20                 	db	32
  1137  007318  69                 	db	105	;'i'
  1138  007319  6E                 	db	110	;'n'
  1139  00731A  20                 	db	32
  1140  00731B  45                 	db	69	;'E'
  1141  00731C  72                 	db	114	;'r'
  1142  00731D  72                 	db	114	;'r'
  1143  00731E  6F                 	db	111	;'o'
  1144  00731F  72                 	db	114	;'r'
  1145  007320  20                 	db	32
  1146  007321  53                 	db	83	;'S'
  1147  007322  74                 	db	116	;'t'
  1148  007323  61                 	db	97	;'a'
  1149  007324  74                 	db	116	;'t'
  1150  007325  65                 	db	101	;'e'
  1151  007326  20                 	db	32
  1152  007327  42                 	db	66	;'B'
  1153  007328  75                 	db	117	;'u'
  1154  007329  73                 	db	115	;'s'
  1155  00732A  20                 	db	32
  1156  00732B  50                 	db	80	;'P'
  1157  00732C  61                 	db	97	;'a'
  1158  00732D  73                 	db	115	;'s'
  1159  00732E  73                 	db	115	;'s'
  1160  00732F  69                 	db	105	;'i'
  1161  007330  76                 	db	118	;'v'
  1162  007331  65                 	db	101	;'e'
  1163  007332  20                 	db	32
  1164  007333  28                 	db	40
  1165  007334  54                 	db	84	;'T'
  1166  007335  45                 	db	69	;'E'
  1167  007336  52                 	db	82	;'R'
  1168  007337  52                 	db	82	;'R'
  1169  007338  43                 	db	67	;'C'
  1170  007339  4E                 	db	78	;'N'
  1171  00733A  54                 	db	84	;'T'
  1172  00733B  20                 	db	32
  1173  00733C  3F                 	db	63	;'?'
  1174  00733D  20                 	db	32
  1175  00733E  31                 	db	49	;'1'
  1176  00733F  32                 	db	50	;'2'
  1177  007340  38                 	db	56	;'8'
  1178  007341  29                 	db	41
  1179  007342  0D                 	db	13
  1180  007343  0A                 	db	10
  1181  007344  00                 	db	0
  1182  007345                     STR_217:
  1183  007345  20                 	db	32
  1184  007346  20                 	db	32
  1185  007347  20                 	db	32
  1186  007348  20                 	db	32
  1187  007349  20                 	db	32
  1188  00734A  46                 	db	70	;'F'
  1189  00734B  6F                 	db	111	;'o'
  1190  00734C  72                 	db	114	;'r'
  1191  00734D  6D                 	db	109	;'m'
  1192  00734E  61                 	db	97	;'a'
  1193  00734F  74                 	db	116	;'t'
  1194  007350  3A                 	db	58	;':'
  1195  007351  20                 	db	32
  1196  007352  70                 	db	112	;'p'
  1197  007353  72                 	db	114	;'r'
  1198  007354  69                 	db	105	;'i'
  1199  007355  6F                 	db	111	;'o'
  1200  007356  72                 	db	114	;'r'
  1201  007357  69                 	db	105	;'i'
  1202  007358  74                 	db	116	;'t'
  1203  007359  79                 	db	121	;'y'
  1204  00735A  2C                 	db	44
  1205  00735B  63                 	db	99	;'c'
  1206  00735C  6C                 	db	108	;'l'
  1207  00735D  61                 	db	97	;'a'
  1208  00735E  73                 	db	115	;'s'
  1209  00735F  73                 	db	115	;'s'
  1210  007360  2C                 	db	44
  1211  007361  74                 	db	116	;'t'
  1212  007362  79                 	db	121	;'y'
  1213  007363  70                 	db	112	;'p'
  1214  007364  65                 	db	101	;'e'
  1215  007365  2C                 	db	44
  1216  007366  6E                 	db	110	;'n'
  1217  007367  6F                 	db	111	;'o'
  1218  007368  64                 	db	100	;'d'
  1219  007369  65                 	db	101	;'e'
  1220  00736A  69                 	db	105	;'i'
  1221  00736B  64                 	db	100	;'d'
  1222  00736C  2C                 	db	44
  1223  00736D  63                 	db	99	;'c'
  1224  00736E  6F                 	db	111	;'o'
  1225  00736F  75                 	db	117	;'u'
  1226  007370  6E                 	db	110	;'n'
  1227  007371  74                 	db	116	;'t'
  1228  007372  2C                 	db	44
  1229  007373  64                 	db	100	;'d'
  1230  007374  61                 	db	97	;'a'
  1231  007375  74                 	db	116	;'t'
  1232  007376  61                 	db	97	;'a'
  1233  007377  2C                 	db	44
  1234  007378  2C                 	db	44
  1235  007379  2C                 	db	44
  1236  00737A  0D                 	db	13
  1237  00737B  0A                 	db	10
  1238  00737C  00                 	db	0
  1239  00737D                     STR_203:
  1240  00737D  52                 	db	82	;'R'
  1241  00737E  65                 	db	101	;'e'
  1242  00737F  63                 	db	99	;'c'
  1243  007380  65                 	db	101	;'e'
  1244  007381  69                 	db	105	;'i'
  1245  007382  76                 	db	118	;'v'
  1246  007383  65                 	db	101	;'e'
  1247  007384  72                 	db	114	;'r'
  1248  007385  20                 	db	32
  1249  007386  69                 	db	105	;'i'
  1250  007387  6E                 	db	110	;'n'
  1251  007388  20                 	db	32
  1252  007389  45                 	db	69	;'E'
  1253  00738A  72                 	db	114	;'r'
  1254  00738B  72                 	db	114	;'r'
  1255  00738C  6F                 	db	111	;'o'
  1256  00738D  72                 	db	114	;'r'
  1257  00738E  20                 	db	32
  1258  00738F  53                 	db	83	;'S'
  1259  007390  74                 	db	116	;'t'
  1260  007391  61                 	db	97	;'a'
  1261  007392  74                 	db	116	;'t'
  1262  007393  65                 	db	101	;'e'
  1263  007394  20                 	db	32
  1264  007395  57                 	db	87	;'W'
  1265  007396  61                 	db	97	;'a'
  1266  007397  72                 	db	114	;'r'
  1267  007398  6E                 	db	110	;'n'
  1268  007399  69                 	db	105	;'i'
  1269  00739A  6E                 	db	110	;'n'
  1270  00739B  67                 	db	103	;'g'
  1271  00739C  20                 	db	32
  1272  00739D  28                 	db	40
  1273  00739E  31                 	db	49	;'1'
  1274  00739F  32                 	db	50	;'2'
  1275  0073A0  38                 	db	56	;'8'
  1276  0073A1  20                 	db	32
  1277  0073A2  3E                 	db	62	;'>'
  1278  0073A3  20                 	db	32
  1279  0073A4  52                 	db	82	;'R'
  1280  0073A5  45                 	db	69	;'E'
  1281  0073A6  52                 	db	82	;'R'
  1282  0073A7  52                 	db	82	;'R'
  1283  0073A8  43                 	db	67	;'C'
  1284  0073A9  4E                 	db	78	;'N'
  1285  0073AA  54                 	db	84	;'T'
  1286  0073AB  20                 	db	32
  1287  0073AC  3F                 	db	63	;'?'
  1288  0073AD  20                 	db	32
  1289  0073AE  39                 	db	57	;'9'
  1290  0073AF  36                 	db	54	;'6'
  1291  0073B0  29                 	db	41
  1292  0073B1  0D                 	db	13
  1293  0073B2  0A                 	db	10
  1294  0073B3  00                 	db	0
  1295  0073B4                     STR_235:
  1296  0073B4  20                 	db	32
  1297  0073B5  20                 	db	32
  1298  0073B6  20                 	db	32
  1299  0073B7  20                 	db	32
  1300  0073B8  53                 	db	83	;'S'
  1301  0073B9  54                 	db	84	;'T'
  1302  0073BA  41                 	db	65	;'A'
  1303  0073BB  52                 	db	82	;'R'
  1304  0073BC  54                 	db	84	;'T'
  1305  0073BD  49                 	db	73	;'I'
  1306  0073BE  46                 	db	70	;'F'
  1307  0073BF  20                 	db	32
  1308  0073C0  2D                 	db	45
  1309  0073C1  20                 	db	32
  1310  0073C2  53                 	db	83	;'S'
  1311  0073C3  65                 	db	101	;'e'
  1312  0073C4  74                 	db	116	;'t'
  1313  0073C5  20                 	db	32
  1314  0073C6  69                 	db	105	;'i'
  1315  0073C7  6E                 	db	110	;'n'
  1316  0073C8  74                 	db	116	;'t'
  1317  0073C9  65                 	db	101	;'e'
  1318  0073CA  72                 	db	114	;'r'
  1319  0073CB  66                 	db	102	;'f'
  1320  0073CC  61                 	db	97	;'a'
  1321  0073CD  63                 	db	99	;'c'
  1322  0073CE  65                 	db	101	;'e'
  1323  0073CF  20                 	db	32
  1324  0073D0  73                 	db	115	;'s'
  1325  0073D1  74                 	db	116	;'t'
  1326  0073D2  61                 	db	97	;'a'
  1327  0073D3  74                 	db	116	;'t'
  1328  0073D4  65                 	db	101	;'e'
  1329  0073D5  20                 	db	32
  1330  0073D6  74                 	db	116	;'t'
  1331  0073D7  6F                 	db	111	;'o'
  1332  0073D8  20                 	db	32
  1333  0073D9  75                 	db	117	;'u'
  1334  0073DA  73                 	db	115	;'s'
  1335  0073DB  65                 	db	101	;'e'
  1336  0073DC  20                 	db	32
  1337  0073DD  6F                 	db	111	;'o'
  1338  0073DE  6E                 	db	110	;'n'
  1339  0073DF  20                 	db	32
  1340  0073E0  73                 	db	115	;'s'
  1341  0073E1  74                 	db	116	;'t'
  1342  0073E2  61                 	db	97	;'a'
  1343  0073E3  72                 	db	114	;'r'
  1344  0073E4  74                 	db	116	;'t'
  1345  0073E5  75                 	db	117	;'u'
  1346  0073E6  70                 	db	112	;'p'
  1347  0073E7  2E                 	db	46
  1348  0073E8  0D                 	db	13
  1349  0073E9  0A                 	db	10
  1350  0073EA  00                 	db	0
  1351  0073EB                     STR_4:
  1352  0073EB  50                 	db	80	;'P'
  1353  0073EC  72                 	db	114	;'r'
  1354  0073ED  65                 	db	101	;'e'
  1355  0073EE  73                 	db	115	;'s'
  1356  0073EF  73                 	db	115	;'s'
  1357  0073F0  20                 	db	32
  1358  0073F1  27                 	db	39
  1359  0073F2  76                 	db	118	;'v'
  1360  0073F3  27                 	db	39
  1361  0073F4  20                 	db	32
  1362  0073F5  77                 	db	119	;'w'
  1363  0073F6  69                 	db	105	;'i'
  1364  0073F7  74                 	db	116	;'t'
  1365  0073F8  68                 	db	104	;'h'
  1366  0073F9  69                 	db	105	;'i'
  1367  0073FA  6E                 	db	110	;'n'
  1368  0073FB  20                 	db	32
  1369  0073FC  74                 	db	116	;'t'
  1370  0073FD  68                 	db	104	;'h'
  1371  0073FE  72                 	db	114	;'r'
  1372  0073FF  65                 	db	101	;'e'
  1373  007400  65                 	db	101	;'e'
  1374  007401  20                 	db	32
  1375  007402  73                 	db	115	;'s'
  1376  007403  65                 	db	101	;'e'
  1377  007404  63                 	db	99	;'c'
  1378  007405  6F                 	db	111	;'o'
  1379  007406  6E                 	db	110	;'n'
  1380  007407  64                 	db	100	;'d'
  1381  007408  73                 	db	115	;'s'
  1382  007409  20                 	db	32
  1383  00740A  74                 	db	116	;'t'
  1384  00740B  6F                 	db	111	;'o'
  1385  00740C  20                 	db	32
  1386  00740D  65                 	db	101	;'e'
  1387  00740E  6E                 	db	110	;'n'
  1388  00740F  74                 	db	116	;'t'
  1389  007410  65                 	db	101	;'e'
  1390  007411  72                 	db	114	;'r'
  1391  007412  20                 	db	32
  1392  007413  76                 	db	118	;'v'
  1393  007414  65                 	db	101	;'e'
  1394  007415  72                 	db	114	;'r'
  1395  007416  62                 	db	98	;'b'
  1396  007417  6F                 	db	111	;'o'
  1397  007418  73                 	db	115	;'s'
  1398  007419  65                 	db	101	;'e'
  1399  00741A  20                 	db	32
  1400  00741B  6D                 	db	109	;'m'
  1401  00741C  6F                 	db	111	;'o'
  1402  00741D  64                 	db	100	;'d'
  1403  00741E  65                 	db	101	;'e'
  1404  00741F  0D                 	db	13
  1405  007420  0A                 	db	10
  1406  007421  00                 	db	0
  1407  007422                     STR_204:
  1408  007422  52                 	db	82	;'R'
  1409  007423  65                 	db	101	;'e'
  1410  007424  63                 	db	99	;'c'
  1411  007425  65                 	db	101	;'e'
  1412  007426  69                 	db	105	;'i'
  1413  007427  76                 	db	118	;'v'
  1414  007428  65                 	db	101	;'e'
  1415  007429  72                 	db	114	;'r'
  1416  00742A  20                 	db	32
  1417  00742B  69                 	db	105	;'i'
  1418  00742C  6E                 	db	110	;'n'
  1419  00742D  20                 	db	32
  1420  00742E  45                 	db	69	;'E'
  1421  00742F  72                 	db	114	;'r'
  1422  007430  72                 	db	114	;'r'
  1423  007431  6F                 	db	111	;'o'
  1424  007432  72                 	db	114	;'r'
  1425  007433  20                 	db	32
  1426  007434  53                 	db	83	;'S'
  1427  007435  74                 	db	116	;'t'
  1428  007436  61                 	db	97	;'a'
  1429  007437  74                 	db	116	;'t'
  1430  007438  65                 	db	101	;'e'
  1431  007439  20                 	db	32
  1432  00743A  42                 	db	66	;'B'
  1433  00743B  75                 	db	117	;'u'
  1434  00743C  73                 	db	115	;'s'
  1435  00743D  20                 	db	32
  1436  00743E  50                 	db	80	;'P'
  1437  00743F  61                 	db	97	;'a'
  1438  007440  73                 	db	115	;'s'
  1439  007441  73                 	db	115	;'s'
  1440  007442  69                 	db	105	;'i'
  1441  007443  76                 	db	118	;'v'
  1442  007444  65                 	db	101	;'e'
  1443  007445  20                 	db	32
  1444  007446  28                 	db	40
  1445  007447  52                 	db	82	;'R'
  1446  007448  45                 	db	69	;'E'
  1447  007449  52                 	db	82	;'R'
  1448  00744A  52                 	db	82	;'R'
  1449  00744B  43                 	db	67	;'C'
  1450  00744C  4E                 	db	78	;'N'
  1451  00744D  54                 	db	84	;'T'
  1452  00744E  20                 	db	32
  1453  00744F  3F                 	db	63	;'?'
  1454  007450  20                 	db	32
  1455  007451  31                 	db	49	;'1'
  1456  007452  32                 	db	50	;'2'
  1457  007453  38                 	db	56	;'8'
  1458  007454  29                 	db	41
  1459  007455  0D                 	db	13
  1460  007456  0A                 	db	10
  1461  007457  00                 	db	0
  1462  007458                     STR_71:
  1463  007458  2D                 	db	45
  1464  007459  45                 	db	69	;'E'
  1465  00745A  52                 	db	82	;'R'
  1466  00745B  52                 	db	82	;'R'
  1467  00745C  4F                 	db	79	;'O'
  1468  00745D  52                 	db	82	;'R'
  1469  00745E  20                 	db	32
  1470  00745F  2D                 	db	45
  1471  007460  20                 	db	32
  1472  007461  4F                 	db	79	;'O'
  1473  007462  6E                 	db	110	;'n'
  1474  007463  65                 	db	101	;'e'
  1475  007464  20                 	db	32
  1476  007465  6F                 	db	111	;'o'
  1477  007466  72                 	db	114	;'r'
  1478  007467  20                 	db	32
  1479  007468  6D                 	db	109	;'m'
  1480  007469  6F                 	db	111	;'o'
  1481  00746A  72                 	db	114	;'r'
  1482  00746B  65                 	db	101	;'e'
  1483  00746C  20                 	db	32
  1484  00746D  72                 	db	114	;'r'
  1485  00746E  65                 	db	101	;'e'
  1486  00746F  67                 	db	103	;'g'
  1487  007470  69                 	db	105	;'i'
  1488  007471  73                 	db	115	;'s'
  1489  007472  74                 	db	116	;'t'
  1490  007473  65                 	db	101	;'e'
  1491  007474  72                 	db	114	;'r'
  1492  007475  28                 	db	40
  1493  007476  73                 	db	115	;'s'
  1494  007477  29                 	db	41
  1495  007478  20                 	db	32
  1496  007479  63                 	db	99	;'c'
  1497  00747A  6F                 	db	111	;'o'
  1498  00747B  75                 	db	117	;'u'
  1499  00747C  6C                 	db	108	;'l'
  1500  00747D  64                 	db	100	;'d'
  1501  00747E  20                 	db	32
  1502  00747F  6E                 	db	110	;'n'
  1503  007480  6F                 	db	111	;'o'
  1504  007481  74                 	db	116	;'t'
  1505  007482  20                 	db	32
  1506  007483  62                 	db	98	;'b'
  1507  007484  65                 	db	101	;'e'
  1508  007485  20                 	db	32
  1509  007486  72                 	db	114	;'r'
  1510  007487  65                 	db	101	;'e'
  1511  007488  61                 	db	97	;'a'
  1512  007489  64                 	db	100	;'d'
  1513  00748A  2E                 	db	46
  1514  00748B  0D                 	db	13
  1515  00748C  0A                 	db	10
  1516  00748D  00                 	db	0
  1517  00748E                     STR_197:
  1518  00748E  54                 	db	84	;'T'
  1519  00748F  72                 	db	114	;'r'
  1520  007490  61                 	db	97	;'a'
  1521  007491  6E                 	db	110	;'n'
  1522  007492  73                 	db	115	;'s'
  1523  007493  6D                 	db	109	;'m'
  1524  007494  69                 	db	105	;'i'
  1525  007495  74                 	db	116	;'t'
  1526  007496  74                 	db	116	;'t'
  1527  007497  65                 	db	101	;'e'
  1528  007498  72                 	db	114	;'r'
  1529  007499  20                 	db	32
  1530  00749A  69                 	db	105	;'i'
  1531  00749B  6E                 	db	110	;'n'
  1532  00749C  20                 	db	32
  1533  00749D  45                 	db	69	;'E'
  1534  00749E  72                 	db	114	;'r'
  1535  00749F  72                 	db	114	;'r'
  1536  0074A0  6F                 	db	111	;'o'
  1537  0074A1  72                 	db	114	;'r'
  1538  0074A2  20                 	db	32
  1539  0074A3  53                 	db	83	;'S'
  1540  0074A4  74                 	db	116	;'t'
  1541  0074A5  61                 	db	97	;'a'
  1542  0074A6  74                 	db	116	;'t'
  1543  0074A7  65                 	db	101	;'e'
  1544  0074A8  20                 	db	32
  1545  0074A9  42                 	db	66	;'B'
  1546  0074AA  75                 	db	117	;'u'
  1547  0074AB  73                 	db	115	;'s'
  1548  0074AC  20                 	db	32
  1549  0074AD  4F                 	db	79	;'O'
  1550  0074AE  46                 	db	70	;'F'
  1551  0074AF  46                 	db	70	;'F'
  1552  0074B0  20                 	db	32
  1553  0074B1  28                 	db	40
  1554  0074B2  54                 	db	84	;'T'
  1555  0074B3  45                 	db	69	;'E'
  1556  0074B4  52                 	db	82	;'R'
  1557  0074B5  52                 	db	82	;'R'
  1558  0074B6  43                 	db	67	;'C'
  1559  0074B7  4E                 	db	78	;'N'
  1560  0074B8  54                 	db	84	;'T'
  1561  0074B9  20                 	db	32
  1562  0074BA  3F                 	db	63	;'?'
  1563  0074BB  20                 	db	32
  1564  0074BC  32                 	db	50	;'2'
  1565  0074BD  35                 	db	53	;'5'
  1566  0074BE  36                 	db	54	;'6'
  1567  0074BF  29                 	db	41
  1568  0074C0  0D                 	db	13
  1569  0074C1  0A                 	db	10
  1570  0074C2  00                 	db	0
  1571  0074C3                     STR_205:
  1572  0074C3  54                 	db	84	;'T'
  1573  0074C4  72                 	db	114	;'r'
  1574  0074C5  61                 	db	97	;'a'
  1575  0074C6  6E                 	db	110	;'n'
  1576  0074C7  73                 	db	115	;'s'
  1577  0074C8  6D                 	db	109	;'m'
  1578  0074C9  69                 	db	105	;'i'
  1579  0074CA  74                 	db	116	;'t'
  1580  0074CB  74                 	db	116	;'t'
  1581  0074CC  65                 	db	101	;'e'
  1582  0074CD  72                 	db	114	;'r'
  1583  0074CE  20                 	db	32
  1584  0074CF  6F                 	db	111	;'o'
  1585  0074D0  72                 	db	114	;'r'
  1586  0074D1  20                 	db	32
  1587  0074D2  52                 	db	82	;'R'
  1588  0074D3  65                 	db	101	;'e'
  1589  0074D4  63                 	db	99	;'c'
  1590  0074D5  65                 	db	101	;'e'
  1591  0074D6  69                 	db	105	;'i'
  1592  0074D7  76                 	db	118	;'v'
  1593  0074D8  65                 	db	101	;'e'
  1594  0074D9  72                 	db	114	;'r'
  1595  0074DA  20                 	db	32
  1596  0074DB  69                 	db	105	;'i'
  1597  0074DC  73                 	db	115	;'s'
  1598  0074DD  20                 	db	32
  1599  0074DE  69                 	db	105	;'i'
  1600  0074DF  6E                 	db	110	;'n'
  1601  0074E0  20                 	db	32
  1602  0074E1  45                 	db	69	;'E'
  1603  0074E2  72                 	db	114	;'r'
  1604  0074E3  72                 	db	114	;'r'
  1605  0074E4  6F                 	db	111	;'o'
  1606  0074E5  72                 	db	114	;'r'
  1607  0074E6  20                 	db	32
  1608  0074E7  53                 	db	83	;'S'
  1609  0074E8  74                 	db	116	;'t'
  1610  0074E9  61                 	db	97	;'a'
  1611  0074EA  74                 	db	116	;'t'
  1612  0074EB  65                 	db	101	;'e'
  1613  0074EC  20                 	db	32
  1614  0074ED  57                 	db	87	;'W'
  1615  0074EE  61                 	db	97	;'a'
  1616  0074EF  72                 	db	114	;'r'
  1617  0074F0  6E                 	db	110	;'n'
  1618  0074F1  69                 	db	105	;'i'
  1619  0074F2  6E                 	db	110	;'n'
  1620  0074F3  67                 	db	103	;'g'
  1621  0074F4  0D                 	db	13
  1622  0074F5  0A                 	db	10
  1623  0074F6  00                 	db	0
  1624  0074F7                     STR_211:
  1625  0074F7  4C                 	db	76	;'L'
  1626  0074F8  49                 	db	73	;'I'
  1627  0074F9  53                 	db	83	;'S'
  1628  0074FA  54                 	db	84	;'T'
  1629  0074FB  45                 	db	69	;'E'
  1630  0074FC  4E                 	db	78	;'N'
  1631  0074FD  20                 	db	32
  1632  0074FE  2D                 	db	45
  1633  0074FF  20                 	db	32
  1634  007500  4F                 	db	79	;'O'
  1635  007501  70                 	db	112	;'p'
  1636  007502  65                 	db	101	;'e'
  1637  007503  6E                 	db	110	;'n'
  1638  007504  20                 	db	32
  1639  007505  43                 	db	67	;'C'
  1640  007506  41                 	db	65	;'A'
  1641  007507  4E                 	db	78	;'N'
  1642  007508  20                 	db	32
  1643  007509  69                 	db	105	;'i'
  1644  00750A  6E                 	db	110	;'n'
  1645  00750B  74                 	db	116	;'t'
  1646  00750C  65                 	db	101	;'e'
  1647  00750D  72                 	db	114	;'r'
  1648  00750E  66                 	db	102	;'f'
  1649  00750F  61                 	db	97	;'a'
  1650  007510  63                 	db	99	;'c'
  1651  007511  65                 	db	101	;'e'
  1652  007512  20                 	db	32
  1653  007513  69                 	db	105	;'i'
  1654  007514  6E                 	db	110	;'n'
  1655  007515  20                 	db	32
  1656  007516  6C                 	db	108	;'l'
  1657  007517  69                 	db	105	;'i'
  1658  007518  73                 	db	115	;'s'
  1659  007519  74                 	db	116	;'t'
  1660  00751A  65                 	db	101	;'e'
  1661  00751B  6E                 	db	110	;'n'
  1662  00751C  20                 	db	32
  1663  00751D  6F                 	db	111	;'o'
  1664  00751E  6E                 	db	110	;'n'
  1665  00751F  6C                 	db	108	;'l'
  1666  007520  79                 	db	121	;'y'
  1667  007521  20                 	db	32
  1668  007522  6D                 	db	109	;'m'
  1669  007523  6F                 	db	111	;'o'
  1670  007524  64                 	db	100	;'d'
  1671  007525  65                 	db	101	;'e'
  1672  007526  2E                 	db	46
  1673  007527  0D                 	db	13
  1674  007528  0A                 	db	10
  1675  007529  00                 	db	0
  1676  00752A                     STR_102:
  1677  00752A  2D                 	db	45
  1678  00752B  45                 	db	69	;'E'
  1679  00752C  52                 	db	82	;'R'
  1680  00752D  52                 	db	82	;'R'
  1681  00752E  4F                 	db	79	;'O'
  1682  00752F  52                 	db	82	;'R'
  1683  007530  20                 	db	32
  1684  007531  2D                 	db	45
  1685  007532  20                 	db	32
  1686  007533  4D                 	db	77	;'M'
  1687  007534  61                 	db	97	;'a'
  1688  007535  73                 	db	115	;'s'
  1689  007536  6B                 	db	107	;'k'
  1690  007537  20                 	db	32
  1691  007538  6E                 	db	110	;'n'
  1692  007539  75                 	db	117	;'u'
  1693  00753A  6D                 	db	109	;'m'
  1694  00753B  62                 	db	98	;'b'
  1695  00753C  65                 	db	101	;'e'
  1696  00753D  72                 	db	114	;'r'
  1697  00753E  20                 	db	32
  1698  00753F  63                 	db	99	;'c'
  1699  007540  61                 	db	97	;'a'
  1700  007541  6E                 	db	110	;'n'
  1701  007542  20                 	db	32
  1702  007543  6F                 	db	111	;'o'
  1703  007544  6E                 	db	110	;'n'
  1704  007545  6C                 	db	108	;'l'
  1705  007546  79                 	db	121	;'y'
  1706  007547  20                 	db	32
  1707  007548  62                 	db	98	;'b'
  1708  007549  65                 	db	101	;'e'
  1709  00754A  20                 	db	32
  1710  00754B  73                 	db	115	;'s'
  1711  00754C  65                 	db	101	;'e'
  1712  00754D  74                 	db	116	;'t'
  1713  00754E  20                 	db	32
  1714  00754F  61                 	db	97	;'a'
  1715  007550  73                 	db	115	;'s'
  1716  007551  20                 	db	32
  1717  007552  30                 	db	48	;'0'
  1718  007553  20                 	db	32
  1719  007554  6F                 	db	111	;'o'
  1720  007555  72                 	db	114	;'r'
  1721  007556  20                 	db	32
  1722  007557  31                 	db	49	;'1'
  1723  007558  2E                 	db	46
  1724  007559  0D                 	db	13
  1725  00755A  0A                 	db	10
  1726  00755B  00                 	db	0
  1727  00755C                     STR_212:
  1728  00755C  4C                 	db	76	;'L'
  1729  00755D  4F                 	db	79	;'O'
  1730  00755E  4F                 	db	79	;'O'
  1731  00755F  50                 	db	80	;'P'
  1732  007560  42                 	db	66	;'B'
  1733  007561  41                 	db	65	;'A'
  1734  007562  43                 	db	67	;'C'
  1735  007563  4B                 	db	75	;'K'
  1736  007564  20                 	db	32
  1737  007565  2D                 	db	45
  1738  007566  20                 	db	32
  1739  007567  4F                 	db	79	;'O'
  1740  007568  70                 	db	112	;'p'
  1741  007569  65                 	db	101	;'e'
  1742  00756A  6E                 	db	110	;'n'
  1743  00756B  20                 	db	32
  1744  00756C  43                 	db	67	;'C'
  1745  00756D  41                 	db	65	;'A'
  1746  00756E  4E                 	db	78	;'N'
  1747  00756F  20                 	db	32
  1748  007570  69                 	db	105	;'i'
  1749  007571  6E                 	db	110	;'n'
  1750  007572  74                 	db	116	;'t'
  1751  007573  65                 	db	101	;'e'
  1752  007574  72                 	db	114	;'r'
  1753  007575  66                 	db	102	;'f'
  1754  007576  61                 	db	97	;'a'
  1755  007577  63                 	db	99	;'c'
  1756  007578  65                 	db	101	;'e'
  1757  007579  20                 	db	32
  1758  00757A  69                 	db	105	;'i'
  1759  00757B  6E                 	db	110	;'n'
  1760  00757C  20                 	db	32
  1761  00757D  6C                 	db	108	;'l'
  1762  00757E  6F                 	db	111	;'o'
  1763  00757F  6F                 	db	111	;'o'
  1764  007580  70                 	db	112	;'p'
  1765  007581  62                 	db	98	;'b'
  1766  007582  61                 	db	97	;'a'
  1767  007583  63                 	db	99	;'c'
  1768  007584  6B                 	db	107	;'k'
  1769  007585  20                 	db	32
  1770  007586  6D                 	db	109	;'m'
  1771  007587  6F                 	db	111	;'o'
  1772  007588  64                 	db	100	;'d'
  1773  007589  65                 	db	101	;'e'
  1774  00758A  2E                 	db	46
  1775  00758B  0D                 	db	13
  1776  00758C  0A                 	db	10
  1777  00758D  00                 	db	0
  1778  00758E                     STR_214:
  1779  00758E  56                 	db	86	;'V'
  1780  00758F  45                 	db	69	;'E'
  1781  007590  52                 	db	82	;'R'
  1782  007591  53                 	db	83	;'S'
  1783  007592  49                 	db	73	;'I'
  1784  007593  4F                 	db	79	;'O'
  1785  007594  4E                 	db	78	;'N'
  1786  007595  20                 	db	32
  1787  007596  2D                 	db	45
  1788  007597  20                 	db	32
  1789  007598  44                 	db	68	;'D'
  1790  007599  69                 	db	105	;'i'
  1791  00759A  73                 	db	115	;'s'
  1792  00759B  70                 	db	112	;'p'
  1793  00759C  6C                 	db	108	;'l'
  1794  00759D  61                 	db	97	;'a'
  1795  00759E  79                 	db	121	;'y'
  1796  00759F  20                 	db	32
  1797  0075A0  66                 	db	102	;'f'
  1798  0075A1  69                 	db	105	;'i'
  1799  0075A2  72                 	db	114	;'r'
  1800  0075A3  6D                 	db	109	;'m'
  1801  0075A4  77                 	db	119	;'w'
  1802  0075A5  61                 	db	97	;'a'
  1803  0075A6  72                 	db	114	;'r'
  1804  0075A7  65                 	db	101	;'e'
  1805  0075A8  20                 	db	32
  1806  0075A9  76                 	db	118	;'v'
  1807  0075AA  65                 	db	101	;'e'
  1808  0075AB  72                 	db	114	;'r'
  1809  0075AC  73                 	db	115	;'s'
  1810  0075AD  69                 	db	105	;'i'
  1811  0075AE  6F                 	db	111	;'o'
  1812  0075AF  6E                 	db	110	;'n'
  1813  0075B0  20                 	db	32
  1814  0075B1  69                 	db	105	;'i'
  1815  0075B2  6E                 	db	110	;'n'
  1816  0075B3  66                 	db	102	;'f'
  1817  0075B4  6F                 	db	111	;'o'
  1818  0075B5  72                 	db	114	;'r'
  1819  0075B6  6D                 	db	109	;'m'
  1820  0075B7  61                 	db	97	;'a'
  1821  0075B8  74                 	db	116	;'t'
  1822  0075B9  69                 	db	105	;'i'
  1823  0075BA  6F                 	db	111	;'o'
  1824  0075BB  6E                 	db	110	;'n'
  1825  0075BC  2E                 	db	46
  1826  0075BD  0D                 	db	13
  1827  0075BE  0A                 	db	10
  1828  0075BF  00                 	db	0
  1829  0075C0                     STR_234:
  1830  0075C0  20                 	db	32
  1831  0075C1  20                 	db	32
  1832  0075C2  20                 	db	32
  1833  0075C3  20                 	db	32
  1834  0075C4  20                 	db	32
  1835  0075C5  20                 	db	32
  1836  0075C6  20                 	db	32
  1837  0075C7  20                 	db	32
  1838  0075C8  20                 	db	32
  1839  0075C9  20                 	db	32
  1840  0075CA  20                 	db	32
  1841  0075CB  20                 	db	32
  1842  0075CC  20                 	db	32
  1843  0075CD  20                 	db	32
  1844  0075CE  20                 	db	32
  1845  0075CF  20                 	db	32
  1846  0075D0  46                 	db	70	;'F'
  1847  0075D1  6F                 	db	111	;'o'
  1848  0075D2  72                 	db	114	;'r'
  1849  0075D3  6D                 	db	109	;'m'
  1850  0075D4  61                 	db	97	;'a'
  1851  0075D5  74                 	db	116	;'t'
  1852  0075D6  3A                 	db	58	;':'
  1853  0075D7  20                 	db	32
  1854  0075D8  73                 	db	115	;'s'
  1855  0075D9  65                 	db	101	;'e'
  1856  0075DA  74                 	db	116	;'t'
  1857  0075DB  20                 	db	32
  1858  0075DC  72                 	db	114	;'r'
  1859  0075DD  77                 	db	119	;'w'
  1860  0075DE  74                 	db	116	;'t'
  1861  0075DF  69                 	db	105	;'i'
  1862  0075E0  6D                 	db	109	;'m'
  1863  0075E1  65                 	db	101	;'e'
  1864  0075E2  6F                 	db	111	;'o'
  1865  0075E3  75                 	db	117	;'u'
  1866  0075E4  74                 	db	116	;'t'
  1867  0075E5  20                 	db	32
  1868  0075E6  74                 	db	116	;'t'
  1869  0075E7  69                 	db	105	;'i'
  1870  0075E8  6D                 	db	109	;'m'
  1871  0075E9  65                 	db	101	;'e'
  1872  0075EA  6F                 	db	111	;'o'
  1873  0075EB  75                 	db	117	;'u'
  1874  0075EC  74                 	db	116	;'t'
  1875  0075ED  2E                 	db	46
  1876  0075EE  0D                 	db	13
  1877  0075EF  0A                 	db	10
  1878  0075F0  00                 	db	0
  1879  0075F1                     STR_232:
  1880  0075F1  20                 	db	32
  1881  0075F2  20                 	db	32
  1882  0075F3  20                 	db	32
  1883  0075F4  20                 	db	32
  1884  0075F5  44                 	db	68	;'D'
  1885  0075F6  45                 	db	69	;'E'
  1886  0075F7  43                 	db	67	;'C'
  1887  0075F8  49                 	db	73	;'I'
  1888  0075F9  4D                 	db	77	;'M'
  1889  0075FA  41                 	db	65	;'A'
  1890  0075FB  4C                 	db	76	;'L'
  1891  0075FC  20                 	db	32
  1892  0075FD  2D                 	db	45
  1893  0075FE  20                 	db	32
  1894  0075FF  44                 	db	68	;'D'
  1895  007600  69                 	db	105	;'i'
  1896  007601  73                 	db	115	;'s'
  1897  007602  70                 	db	112	;'p'
  1898  007603  6C                 	db	108	;'l'
  1899  007604  61                 	db	97	;'a'
  1900  007605  79                 	db	121	;'y'
  1901  007606  20                 	db	32
  1902  007607  6E                 	db	110	;'n'
  1903  007608  75                 	db	117	;'u'
  1904  007609  6D                 	db	109	;'m'
  1905  00760A  65                 	db	101	;'e'
  1906  00760B  72                 	db	114	;'r'
  1907  00760C  69                 	db	105	;'i'
  1908  00760D  63                 	db	99	;'c'
  1909  00760E  61                 	db	97	;'a'
  1910  00760F  6C                 	db	108	;'l'
  1911  007610  73                 	db	115	;'s'
  1912  007611  20                 	db	32
  1913  007612  69                 	db	105	;'i'
  1914  007613  6E                 	db	110	;'n'
  1915  007614  20                 	db	32
  1916  007615  64                 	db	100	;'d'
  1917  007616  65                 	db	101	;'e'
  1918  007617  63                 	db	99	;'c'
  1919  007618  69                 	db	105	;'i'
  1920  007619  6D                 	db	109	;'m'
  1921  00761A  61                 	db	97	;'a'
  1922  00761B  6C                 	db	108	;'l'
  1923  00761C  2E                 	db	46
  1924  00761D  0D                 	db	13
  1925  00761E  0A                 	db	10
  1926  00761F  00                 	db	0
  1927  007620                     STR_231:
  1928  007620  20                 	db	32
  1929  007621  20                 	db	32
  1930  007622  20                 	db	32
  1931  007623  20                 	db	32
  1932  007624  48                 	db	72	;'H'
  1933  007625  45                 	db	69	;'E'
  1934  007626  58                 	db	88	;'X'
  1935  007627  20                 	db	32
  1936  007628  2D                 	db	45
  1937  007629  20                 	db	32
  1938  00762A  44                 	db	68	;'D'
  1939  00762B  69                 	db	105	;'i'
  1940  00762C  73                 	db	115	;'s'
  1941  00762D  70                 	db	112	;'p'
  1942  00762E  6C                 	db	108	;'l'
  1943  00762F  61                 	db	97	;'a'
  1944  007630  79                 	db	121	;'y'
  1945  007631  20                 	db	32
  1946  007632  6E                 	db	110	;'n'
  1947  007633  75                 	db	117	;'u'
  1948  007634  6D                 	db	109	;'m'
  1949  007635  65                 	db	101	;'e'
  1950  007636  72                 	db	114	;'r'
  1951  007637  69                 	db	105	;'i'
  1952  007638  63                 	db	99	;'c'
  1953  007639  61                 	db	97	;'a'
  1954  00763A  6C                 	db	108	;'l'
  1955  00763B  73                 	db	115	;'s'
  1956  00763C  20                 	db	32
  1957  00763D  69                 	db	105	;'i'
  1958  00763E  6E                 	db	110	;'n'
  1959  00763F  20                 	db	32
  1960  007640  68                 	db	104	;'h'
  1961  007641  65                 	db	101	;'e'
  1962  007642  78                 	db	120	;'x'
  1963  007643  61                 	db	97	;'a'
  1964  007644  64                 	db	100	;'d'
  1965  007645  65                 	db	101	;'e'
  1966  007646  63                 	db	99	;'c'
  1967  007647  69                 	db	105	;'i'
  1968  007648  6D                 	db	109	;'m'
  1969  007649  61                 	db	97	;'a'
  1970  00764A  6C                 	db	108	;'l'
  1971  00764B  2E                 	db	46
  1972  00764C  0D                 	db	13
  1973  00764D  0A                 	db	10
  1974  00764E  00                 	db	0
  1975  00764F                     STR_222:
  1976  00764F  46                 	db	70	;'F'
  1977  007650  49                 	db	73	;'I'
  1978  007651  4E                 	db	78	;'N'
  1979  007652  44                 	db	68	;'D'
  1980  007653  20                 	db	32
  1981  007654  2D                 	db	45
  1982  007655  20                 	db	32
  1983  007656  46                 	db	70	;'F'
  1984  007657  69                 	db	105	;'i'
  1985  007658  6E                 	db	110	;'n'
  1986  007659  64                 	db	100	;'d'
  1987  00765A  20                 	db	32
  1988  00765B  61                 	db	97	;'a'
  1989  00765C  76                 	db	118	;'v'
  1990  00765D  61                 	db	97	;'a'
  1991  00765E  69                 	db	105	;'i'
  1992  00765F  6C                 	db	108	;'l'
  1993  007660  61                 	db	97	;'a'
  1994  007661  62                 	db	98	;'b'
  1995  007662  6C                 	db	108	;'l'
  1996  007663  65                 	db	101	;'e'
  1997  007664  20                 	db	32
  1998  007665  43                 	db	67	;'C'
  1999  007666  41                 	db	65	;'A'
  2000  007667  4E                 	db	78	;'N'
  2001  007668  34                 	db	52	;'4'
  2002  007669  56                 	db	86	;'V'
  2003  00766A  53                 	db	83	;'S'
  2004  00766B  43                 	db	67	;'C'
  2005  00766C  50                 	db	80	;'P'
  2006  00766D  20                 	db	32
  2007  00766E  6E                 	db	110	;'n'
  2008  00766F  6F                 	db	111	;'o'
  2009  007670  64                 	db	100	;'d'
  2010  007671  65                 	db	101	;'e'
  2011  007672  73                 	db	115	;'s'
  2012  007673  20                 	db	32
  2013  007674  6F                 	db	111	;'o'
  2014  007675  6E                 	db	110	;'n'
  2015  007676  20                 	db	32
  2016  007677  62                 	db	98	;'b'
  2017  007678  75                 	db	117	;'u'
  2018  007679  73                 	db	115	;'s'
  2019  00767A  2E                 	db	46
  2020  00767B  0D                 	db	13
  2021  00767C  0A                 	db	10
  2022  00767D  00                 	db	0
  2023  00767E                     STR_210:
  2024  00767E  53                 	db	83	;'S'
  2025  00767F  49                 	db	73	;'I'
  2026  007680  4C                 	db	76	;'L'
  2027  007681  45                 	db	69	;'E'
  2028  007682  4E                 	db	78	;'N'
  2029  007683  54                 	db	84	;'T'
  2030  007684  20                 	db	32
  2031  007685  2D                 	db	45
  2032  007686  20                 	db	32
  2033  007687  4F                 	db	79	;'O'
  2034  007688  70                 	db	112	;'p'
  2035  007689  65                 	db	101	;'e'
  2036  00768A  6E                 	db	110	;'n'
  2037  00768B  20                 	db	32
  2038  00768C  43                 	db	67	;'C'
  2039  00768D  41                 	db	65	;'A'
  2040  00768E  4E                 	db	78	;'N'
  2041  00768F  20                 	db	32
  2042  007690  69                 	db	105	;'i'
  2043  007691  6E                 	db	110	;'n'
  2044  007692  74                 	db	116	;'t'
  2045  007693  65                 	db	101	;'e'
  2046  007694  72                 	db	114	;'r'
  2047  007695  66                 	db	102	;'f'
  2048  007696  61                 	db	97	;'a'
  2049  007697  63                 	db	99	;'c'
  2050  007698  65                 	db	101	;'e'
  2051  007699  20                 	db	32
  2052  00769A  69                 	db	105	;'i'
  2053  00769B  6E                 	db	110	;'n'
  2054  00769C  20                 	db	32
  2055  00769D  73                 	db	115	;'s'
  2056  00769E  69                 	db	105	;'i'
  2057  00769F  6C                 	db	108	;'l'
  2058  0076A0  65                 	db	101	;'e'
  2059  0076A1  6E                 	db	110	;'n'
  2060  0076A2  74                 	db	116	;'t'
  2061  0076A3  20                 	db	32
  2062  0076A4  6D                 	db	109	;'m'
  2063  0076A5  6F                 	db	111	;'o'
  2064  0076A6  64                 	db	100	;'d'
  2065  0076A7  65                 	db	101	;'e'
  2066  0076A8  2E                 	db	46
  2067  0076A9  0D                 	db	13
  2068  0076AA  0A                 	db	10
  2069  0076AB  00                 	db	0
  2070  0076AC                     STR_215:
  2071  0076AC  49                 	db	73	;'I'
  2072  0076AD  46                 	db	70	;'F'
  2073  0076AE  4D                 	db	77	;'M'
  2074  0076AF  4F                 	db	79	;'O'
  2075  0076B0  44                 	db	68	;'D'
  2076  0076B1  45                 	db	69	;'E'
  2077  0076B2  20                 	db	32
  2078  0076B3  2D                 	db	45
  2079  0076B4  20                 	db	32
  2080  0076B5  44                 	db	68	;'D'
  2081  0076B6  69                 	db	105	;'i'
  2082  0076B7  73                 	db	115	;'s'
  2083  0076B8  70                 	db	112	;'p'
  2084  0076B9  6C                 	db	108	;'l'
  2085  0076BA  61                 	db	97	;'a'
  2086  0076BB  79                 	db	121	;'y'
  2087  0076BC  20                 	db	32
  2088  0076BD  73                 	db	115	;'s'
  2089  0076BE  65                 	db	101	;'e'
  2090  0076BF  6C                 	db	108	;'l'
  2091  0076C0  65                 	db	101	;'e'
  2092  0076C1  63                 	db	99	;'c'
  2093  0076C2  74                 	db	116	;'t'
  2094  0076C3  65                 	db	101	;'e'
  2095  0076C4  64                 	db	100	;'d'
  2096  0076C5  20                 	db	32
  2097  0076C6  69                 	db	105	;'i'
  2098  0076C7  6E                 	db	110	;'n'
  2099  0076C8  74                 	db	116	;'t'
  2100  0076C9  65                 	db	101	;'e'
  2101  0076CA  72                 	db	114	;'r'
  2102  0076CB  66                 	db	102	;'f'
  2103  0076CC  61                 	db	97	;'a'
  2104  0076CD  63                 	db	99	;'c'
  2105  0076CE  65                 	db	101	;'e'
  2106  0076CF  20                 	db	32
  2107  0076D0  6D                 	db	109	;'m'
  2108  0076D1  6F                 	db	111	;'o'
  2109  0076D2  64                 	db	100	;'d'
  2110  0076D3  65                 	db	101	;'e'
  2111  0076D4  2E                 	db	46
  2112  0076D5  0D                 	db	13
  2113  0076D6  0A                 	db	10
  2114  0076D7  00                 	db	0
  2115  0076D8                     STR_209:
  2116  0076D8  4F                 	db	79	;'O'
  2117  0076D9  50                 	db	80	;'P'
  2118  0076DA  45                 	db	69	;'E'
  2119  0076DB  4E                 	db	78	;'N'
  2120  0076DC  20                 	db	32
  2121  0076DD  2D                 	db	45
  2122  0076DE  20                 	db	32
  2123  0076DF  4F                 	db	79	;'O'
  2124  0076E0  70                 	db	112	;'p'
  2125  0076E1  65                 	db	101	;'e'
  2126  0076E2  6E                 	db	110	;'n'
  2127  0076E3  20                 	db	32
  2128  0076E4  43                 	db	67	;'C'
  2129  0076E5  41                 	db	65	;'A'
  2130  0076E6  4E                 	db	78	;'N'
  2131  0076E7  20                 	db	32
  2132  0076E8  69                 	db	105	;'i'
  2133  0076E9  6E                 	db	110	;'n'
  2134  0076EA  74                 	db	116	;'t'
  2135  0076EB  65                 	db	101	;'e'
  2136  0076EC  72                 	db	114	;'r'
  2137  0076ED  66                 	db	102	;'f'
  2138  0076EE  61                 	db	97	;'a'
  2139  0076EF  63                 	db	99	;'c'
  2140  0076F0  65                 	db	101	;'e'
  2141  0076F1  20                 	db	32
  2142  0076F2  69                 	db	105	;'i'
  2143  0076F3  6E                 	db	110	;'n'
  2144  0076F4  20                 	db	32
  2145  0076F5  6E                 	db	110	;'n'
  2146  0076F6  6F                 	db	111	;'o'
  2147  0076F7  72                 	db	114	;'r'
  2148  0076F8  6D                 	db	109	;'m'
  2149  0076F9  61                 	db	97	;'a'
  2150  0076FA  6C                 	db	108	;'l'
  2151  0076FB  20                 	db	32
  2152  0076FC  6D                 	db	109	;'m'
  2153  0076FD  6F                 	db	111	;'o'
  2154  0076FE  64                 	db	100	;'d'
  2155  0076FF  65                 	db	101	;'e'
  2156  007700  2E                 	db	46
  2157  007701  0D                 	db	13
  2158  007702  0A                 	db	10
  2159  007703  00                 	db	0
  2160  007704                     STR_115:
  2161  007704  2B                 	db	43
  2162  007705  4F                 	db	79	;'O'
  2163  007706  4B                 	db	75	;'K'
  2164  007707  20                 	db	32
  2165  007708  2D                 	db	45
  2166  007709  20                 	db	32
  2167  00770A  4E                 	db	78	;'N'
  2168  00770B  75                 	db	117	;'u'
  2169  00770C  6D                 	db	109	;'m'
  2170  00770D  65                 	db	101	;'e'
  2171  00770E  72                 	db	114	;'r'
  2172  00770F  69                 	db	105	;'i'
  2173  007710  63                 	db	99	;'c'
  2174  007711  61                 	db	97	;'a'
  2175  007712  6C                 	db	108	;'l'
  2176  007713  20                 	db	32
  2177  007714  6F                 	db	111	;'o'
  2178  007715  75                 	db	117	;'u'
  2179  007716  74                 	db	116	;'t'
  2180  007717  70                 	db	112	;'p'
  2181  007718  75                 	db	117	;'u'
  2182  007719  74                 	db	116	;'t'
  2183  00771A  20                 	db	32
  2184  00771B  6E                 	db	110	;'n'
  2185  00771C  6F                 	db	111	;'o'
  2186  00771D  77                 	db	119	;'w'
  2187  00771E  20                 	db	32
  2188  00771F  69                 	db	105	;'i'
  2189  007720  6E                 	db	110	;'n'
  2190  007721  20                 	db	32
  2191  007722  68                 	db	104	;'h'
  2192  007723  65                 	db	101	;'e'
  2193  007724  78                 	db	120	;'x'
  2194  007725  61                 	db	97	;'a'
  2195  007726  64                 	db	100	;'d'
  2196  007727  65                 	db	101	;'e'
  2197  007728  63                 	db	99	;'c'
  2198  007729  69                 	db	105	;'i'
  2199  00772A  6D                 	db	109	;'m'
  2200  00772B  61                 	db	97	;'a'
  2201  00772C  6C                 	db	108	;'l'
  2202  00772D  0D                 	db	13
  2203  00772E  0A                 	db	10
  2204  00772F  00                 	db	0
  2205  007730                     STR_92:
  2206  007730  2D                 	db	45
  2207  007731  45                 	db	69	;'E'
  2208  007732  52                 	db	82	;'R'
  2209  007733  52                 	db	82	;'R'
  2210  007734  4F                 	db	79	;'O'
  2211  007735  52                 	db	82	;'R'
  2212  007736  20                 	db	32
  2213  007737  2D                 	db	45
  2214  007738  20                 	db	32
  2215  007739  66                 	db	102	;'f'
  2216  00773A  69                 	db	105	;'i'
  2217  00773B  6C                 	db	108	;'l'
  2218  00773C  74                 	db	116	;'t'
  2219  00773D  65                 	db	101	;'e'
  2220  00773E  72                 	db	114	;'r'
  2221  00773F  20                 	db	32
  2222  007740  66                 	db	102	;'f'
  2223  007741  6F                 	db	111	;'o'
  2224  007742  72                 	db	114	;'r'
  2225  007743  20                 	db	32
  2226  007744  70                 	db	112	;'p'
  2227  007745  72                 	db	114	;'r'
  2228  007746  69                 	db	105	;'i'
  2229  007747  6F                 	db	111	;'o'
  2230  007748  72                 	db	114	;'r'
  2231  007749  69                 	db	105	;'i'
  2232  00774A  74                 	db	116	;'t'
  2233  00774B  79                 	db	121	;'y'
  2234  00774C  20                 	db	32
  2235  00774D  69                 	db	105	;'i'
  2236  00774E  73                 	db	115	;'s'
  2237  00774F  20                 	db	32
  2238  007750  6D                 	db	109	;'m'
  2239  007751  69                 	db	105	;'i'
  2240  007752  73                 	db	115	;'s'
  2241  007753  73                 	db	115	;'s'
  2242  007754  69                 	db	105	;'i'
  2243  007755  6E                 	db	110	;'n'
  2244  007756  67                 	db	103	;'g'
  2245  007757  0D                 	db	13
  2246  007758  0A                 	db	10
  2247  007759  00                 	db	0
  2248  00775A                     STR_98:
  2249  00775A  2D                 	db	45
  2250  00775B  45                 	db	69	;'E'
  2251  00775C  52                 	db	82	;'R'
  2252  00775D  52                 	db	82	;'R'
  2253  00775E  4F                 	db	79	;'O'
  2254  00775F  52                 	db	82	;'R'
  2255  007760  20                 	db	32
  2256  007761  2D                 	db	45
  2257  007762  20                 	db	32
  2258  007763  66                 	db	102	;'f'
  2259  007764  69                 	db	105	;'i'
  2260  007765  6C                 	db	108	;'l'
  2261  007766  74                 	db	116	;'t'
  2262  007767  65                 	db	101	;'e'
  2263  007768  72                 	db	114	;'r'
  2264  007769  20                 	db	32
  2265  00776A  66                 	db	102	;'f'
  2266  00776B  6F                 	db	111	;'o'
  2267  00776C  72                 	db	114	;'r'
  2268  00776D  20                 	db	32
  2269  00776E  6E                 	db	110	;'n'
  2270  00776F  69                 	db	105	;'i'
  2271  007770  64                 	db	100	;'d'
  2272  007771  65                 	db	101	;'e'
  2273  007772  20                 	db	32
  2274  007773  69                 	db	105	;'i'
  2275  007774  64                 	db	100	;'d'
  2276  007775  20                 	db	32
  2277  007776  69                 	db	105	;'i'
  2278  007777  73                 	db	115	;'s'
  2279  007778  20                 	db	32
  2280  007779  6D                 	db	109	;'m'
  2281  00777A  69                 	db	105	;'i'
  2282  00777B  73                 	db	115	;'s'
  2283  00777C  73                 	db	115	;'s'
  2284  00777D  69                 	db	105	;'i'
  2285  00777E  6E                 	db	110	;'n'
  2286  00777F  67                 	db	103	;'g'
  2287  007780  0D                 	db	13
  2288  007781  0A                 	db	10
  2289  007782  00                 	db	0
  2290  007783                     STR_221:
  2291  007783  48                 	db	72	;'H'
  2292  007784  45                 	db	69	;'E'
  2293  007785  4C                 	db	76	;'L'
  2294  007786  50                 	db	80	;'P'
  2295  007787  20                 	db	32
  2296  007788  2D                 	db	45
  2297  007789  20                 	db	32
  2298  00778A  44                 	db	68	;'D'
  2299  00778B  69                 	db	105	;'i'
  2300  00778C  73                 	db	115	;'s'
  2301  00778D  70                 	db	112	;'p'
  2302  00778E  6C                 	db	108	;'l'
  2303  00778F  61                 	db	97	;'a'
  2304  007790  79                 	db	121	;'y'
  2305  007791  20                 	db	32
  2306  007792  74                 	db	116	;'t'
  2307  007793  68                 	db	104	;'h'
  2308  007794  69                 	db	105	;'i'
  2309  007795  73                 	db	115	;'s'
  2310  007796  20                 	db	32
  2311  007797  68                 	db	104	;'h'
  2312  007798  65                 	db	101	;'e'
  2313  007799  6C                 	db	108	;'l'
  2314  00779A  70                 	db	112	;'p'
  2315  00779B  20                 	db	32
  2316  00779C  69                 	db	105	;'i'
  2317  00779D  6E                 	db	110	;'n'
  2318  00779E  66                 	db	102	;'f'
  2319  00779F  6F                 	db	111	;'o'
  2320  0077A0  72                 	db	114	;'r'
  2321  0077A1  6D                 	db	109	;'m'
  2322  0077A2  61                 	db	97	;'a'
  2323  0077A3  74                 	db	116	;'t'
  2324  0077A4  69                 	db	105	;'i'
  2325  0077A5  6F                 	db	111	;'o'
  2326  0077A6  6E                 	db	110	;'n'
  2327  0077A7  2E                 	db	46
  2328  0077A8  0D                 	db	13
  2329  0077A9  0A                 	db	10
  2330  0077AA  00                 	db	0
  2331  0077AB                     STR_105:
  2332  0077AB  2D                 	db	45
  2333  0077AC  45                 	db	69	;'E'
  2334  0077AD  52                 	db	82	;'R'
  2335  0077AE  52                 	db	82	;'R'
  2336  0077AF  4F                 	db	79	;'O'
  2337  0077B0  52                 	db	82	;'R'
  2338  0077B1  20                 	db	32
  2339  0077B2  2D                 	db	45
  2340  0077B3  20                 	db	32
  2341  0077B4  6D                 	db	109	;'m'
  2342  0077B5  61                 	db	97	;'a'
  2343  0077B6  73                 	db	115	;'s'
  2344  0077B7  6B                 	db	107	;'k'
  2345  0077B8  20                 	db	32
  2346  0077B9  66                 	db	102	;'f'
  2347  0077BA  6F                 	db	111	;'o'
  2348  0077BB  72                 	db	114	;'r'
  2349  0077BC  20                 	db	32
  2350  0077BD  70                 	db	112	;'p'
  2351  0077BE  72                 	db	114	;'r'
  2352  0077BF  69                 	db	105	;'i'
  2353  0077C0  6F                 	db	111	;'o'
  2354  0077C1  72                 	db	114	;'r'
  2355  0077C2  69                 	db	105	;'i'
  2356  0077C3  74                 	db	116	;'t'
  2357  0077C4  79                 	db	121	;'y'
  2358  0077C5  20                 	db	32
  2359  0077C6  69                 	db	105	;'i'
  2360  0077C7  73                 	db	115	;'s'
  2361  0077C8  20                 	db	32
  2362  0077C9  6D                 	db	109	;'m'
  2363  0077CA  69                 	db	105	;'i'
  2364  0077CB  73                 	db	115	;'s'
  2365  0077CC  73                 	db	115	;'s'
  2366  0077CD  69                 	db	105	;'i'
  2367  0077CE  6E                 	db	110	;'n'
  2368  0077CF  67                 	db	103	;'g'
  2369  0077D0  0D                 	db	13
  2370  0077D1  0A                 	db	10
  2371  0077D2  00                 	db	0
  2372  0077D3                     STR_117:
  2373  0077D3  2B                 	db	43
  2374  0077D4  4F                 	db	79	;'O'
  2375  0077D5  4B                 	db	75	;'K'
  2376  0077D6  20                 	db	32
  2377  0077D7  2D                 	db	45
  2378  0077D8  20                 	db	32
  2379  0077D9  4E                 	db	78	;'N'
  2380  0077DA  75                 	db	117	;'u'
  2381  0077DB  6D                 	db	109	;'m'
  2382  0077DC  65                 	db	101	;'e'
  2383  0077DD  72                 	db	114	;'r'
  2384  0077DE  69                 	db	105	;'i'
  2385  0077DF  63                 	db	99	;'c'
  2386  0077E0  61                 	db	97	;'a'
  2387  0077E1  6C                 	db	108	;'l'
  2388  0077E2  20                 	db	32
  2389  0077E3  6F                 	db	111	;'o'
  2390  0077E4  75                 	db	117	;'u'
  2391  0077E5  74                 	db	116	;'t'
  2392  0077E6  70                 	db	112	;'p'
  2393  0077E7  75                 	db	117	;'u'
  2394  0077E8  74                 	db	116	;'t'
  2395  0077E9  20                 	db	32
  2396  0077EA  6E                 	db	110	;'n'
  2397  0077EB  6F                 	db	111	;'o'
  2398  0077EC  77                 	db	119	;'w'
  2399  0077ED  20                 	db	32
  2400  0077EE  69                 	db	105	;'i'
  2401  0077EF  6E                 	db	110	;'n'
  2402  0077F0  20                 	db	32
  2403  0077F1  64                 	db	100	;'d'
  2404  0077F2  65                 	db	101	;'e'
  2405  0077F3  63                 	db	99	;'c'
  2406  0077F4  69                 	db	105	;'i'
  2407  0077F5  6D                 	db	109	;'m'
  2408  0077F6  61                 	db	97	;'a'
  2409  0077F7  6C                 	db	108	;'l'
  2410  0077F8  0D                 	db	13
  2411  0077F9  0A                 	db	10
  2412  0077FA  00                 	db	0
  2413  0077FB                     STR_90:
  2414  0077FB  2D                 	db	45
  2415  0077FC  45                 	db	69	;'E'
  2416  0077FD  52                 	db	82	;'R'
  2417  0077FE  52                 	db	82	;'R'
  2418  0077FF  4F                 	db	79	;'O'
  2419  007800  52                 	db	82	;'R'
  2420  007801  20                 	db	32
  2421  007802  2D                 	db	45
  2422  007803  20                 	db	32
  2423  007804  4E                 	db	78	;'N'
  2424  007805  6F                 	db	111	;'o'
  2425  007806  20                 	db	32
  2426  007807  66                 	db	102	;'f'
  2427  007808  69                 	db	105	;'i'
  2428  007809  6C                 	db	108	;'l'
  2429  00780A  74                 	db	116	;'t'
  2430  00780B  65                 	db	101	;'e'
  2431  00780C  72                 	db	114	;'r'
  2432  00780D  20                 	db	32
  2433  00780E  6E                 	db	110	;'n'
  2434  00780F  75                 	db	117	;'u'
  2435  007810  6D                 	db	109	;'m'
  2436  007811  62                 	db	98	;'b'
  2437  007812  65                 	db	101	;'e'
  2438  007813  72                 	db	114	;'r'
  2439  007814  20                 	db	32
  2440  007815  73                 	db	115	;'s'
  2441  007816  70                 	db	112	;'p'
  2442  007817  65                 	db	101	;'e'
  2443  007818  63                 	db	99	;'c'
  2444  007819  69                 	db	105	;'i'
  2445  00781A  66                 	db	102	;'f'
  2446  00781B  69                 	db	105	;'i'
  2447  00781C  65                 	db	101	;'e'
  2448  00781D  64                 	db	100	;'d'
  2449  00781E  2E                 	db	46
  2450  00781F  0D                 	db	13
  2451  007820  0A                 	db	10
  2452  007821  00                 	db	0
  2453  007822                     STR_220:
  2454  007822  45                 	db	69	;'E'
  2455  007823  52                 	db	82	;'R'
  2456  007824  52                 	db	82	;'R'
  2457  007825  20                 	db	32
  2458  007826  2D                 	db	45
  2459  007827  20                 	db	32
  2460  007828  44                 	db	68	;'D'
  2461  007829  69                 	db	105	;'i'
  2462  00782A  73                 	db	115	;'s'
  2463  00782B  70                 	db	112	;'p'
  2464  00782C  6C                 	db	108	;'l'
  2465  00782D  61                 	db	97	;'a'
  2466  00782E  79                 	db	121	;'y'
  2467  00782F  20                 	db	32
  2468  007830  43                 	db	67	;'C'
  2469  007831  41                 	db	65	;'A'
  2470  007832  4E                 	db	78	;'N'
  2471  007833  20                 	db	32
  2472  007834  65                 	db	101	;'e'
  2473  007835  72                 	db	114	;'r'
  2474  007836  72                 	db	114	;'r'
  2475  007837  6F                 	db	111	;'o'
  2476  007838  72                 	db	114	;'r'
  2477  007839  20                 	db	32
  2478  00783A  69                 	db	105	;'i'
  2479  00783B  6E                 	db	110	;'n'
  2480  00783C  66                 	db	102	;'f'
  2481  00783D  6F                 	db	111	;'o'
  2482  00783E  72                 	db	114	;'r'
  2483  00783F  6D                 	db	109	;'m'
  2484  007840  61                 	db	97	;'a'
  2485  007841  74                 	db	116	;'t'
  2486  007842  69                 	db	105	;'i'
  2487  007843  6F                 	db	111	;'o'
  2488  007844  6E                 	db	110	;'n'
  2489  007845  2E                 	db	46
  2490  007846  0D                 	db	13
  2491  007847  0A                 	db	10
  2492  007848  00                 	db	0
  2493  007849                     STR_206:
  2494  007849  48                 	db	72	;'H'
  2495  00784A  65                 	db	101	;'e'
  2496  00784B  6C                 	db	108	;'l'
  2497  00784C  70                 	db	112	;'p'
  2498  00784D  20                 	db	32
  2499  00784E  66                 	db	102	;'f'
  2500  00784F  6F                 	db	111	;'o'
  2501  007850  72                 	db	114	;'r'
  2502  007851  20                 	db	32
  2503  007852  74                 	db	116	;'t'
  2504  007853  68                 	db	104	;'h'
  2505  007854  65                 	db	101	;'e'
  2506  007855  20                 	db	32
  2507  007856  46                 	db	70	;'F'
  2508  007857  72                 	db	114	;'r'
  2509  007858  61                 	db	97	;'a'
  2510  007859  6E                 	db	110	;'n'
  2511  00785A  6B                 	db	107	;'k'
  2512  00785B  66                 	db	102	;'f'
  2513  00785C  75                 	db	117	;'u'
  2514  00785D  72                 	db	114	;'r'
  2515  00785E  74                 	db	116	;'t'
  2516  00785F  20                 	db	32
  2517  007860  52                 	db	82	;'R'
  2518  007861  53                 	db	83	;'S'
  2519  007862  2D                 	db	45
  2520  007863  32                 	db	50	;'2'
  2521  007864  33                 	db	51	;'3'
  2522  007865  32                 	db	50	;'2'
  2523  007866  20                 	db	32
  2524  007867  6D                 	db	109	;'m'
  2525  007868  6F                 	db	111	;'o'
  2526  007869  64                 	db	100	;'d'
  2527  00786A  75                 	db	117	;'u'
  2528  00786B  6C                 	db	108	;'l'
  2529  00786C  65                 	db	101	;'e'
  2530  00786D  0D                 	db	13
  2531  00786E  0A                 	db	10
  2532  00786F  00                 	db	0
  2533  007870                     STR_111:
  2534  007870  2D                 	db	45
  2535  007871  45                 	db	69	;'E'
  2536  007872  52                 	db	82	;'R'
  2537  007873  52                 	db	82	;'R'
  2538  007874  4F                 	db	79	;'O'
  2539  007875  52                 	db	82	;'R'
  2540  007876  20                 	db	32
  2541  007877  2D                 	db	45
  2542  007878  20                 	db	32
  2543  007879  6D                 	db	109	;'m'
  2544  00787A  61                 	db	97	;'a'
  2545  00787B  73                 	db	115	;'s'
  2546  00787C  6B                 	db	107	;'k'
  2547  00787D  20                 	db	32
  2548  00787E  66                 	db	102	;'f'
  2549  00787F  6F                 	db	111	;'o'
  2550  007880  72                 	db	114	;'r'
  2551  007881  20                 	db	32
  2552  007882  6E                 	db	110	;'n'
  2553  007883  69                 	db	105	;'i'
  2554  007884  64                 	db	100	;'d'
  2555  007885  65                 	db	101	;'e'
  2556  007886  20                 	db	32
  2557  007887  69                 	db	105	;'i'
  2558  007888  64                 	db	100	;'d'
  2559  007889  20                 	db	32
  2560  00788A  69                 	db	105	;'i'
  2561  00788B  73                 	db	115	;'s'
  2562  00788C  20                 	db	32
  2563  00788D  6D                 	db	109	;'m'
  2564  00788E  69                 	db	105	;'i'
  2565  00788F  73                 	db	115	;'s'
  2566  007890  73                 	db	115	;'s'
  2567  007891  69                 	db	105	;'i'
  2568  007892  6E                 	db	110	;'n'
  2569  007893  67                 	db	103	;'g'
  2570  007894  0D                 	db	13
  2571  007895  0A                 	db	10
  2572  007896  00                 	db	0
  2573  007897                     STR_94:
  2574  007897  2D                 	db	45
  2575  007898  45                 	db	69	;'E'
  2576  007899  52                 	db	82	;'R'
  2577  00789A  52                 	db	82	;'R'
  2578  00789B  4F                 	db	79	;'O'
  2579  00789C  52                 	db	82	;'R'
  2580  00789D  20                 	db	32
  2581  00789E  2D                 	db	45
  2582  00789F  20                 	db	32
  2583  0078A0  66                 	db	102	;'f'
  2584  0078A1  69                 	db	105	;'i'
  2585  0078A2  6C                 	db	108	;'l'
  2586  0078A3  74                 	db	116	;'t'
  2587  0078A4  65                 	db	101	;'e'
  2588  0078A5  72                 	db	114	;'r'
  2589  0078A6  20                 	db	32
  2590  0078A7  66                 	db	102	;'f'
  2591  0078A8  6F                 	db	111	;'o'
  2592  0078A9  72                 	db	114	;'r'
  2593  0078AA  20                 	db	32
  2594  0078AB  63                 	db	99	;'c'
  2595  0078AC  6C                 	db	108	;'l'
  2596  0078AD  61                 	db	97	;'a'
  2597  0078AE  73                 	db	115	;'s'
  2598  0078AF  73                 	db	115	;'s'
  2599  0078B0  20                 	db	32
  2600  0078B1  69                 	db	105	;'i'
  2601  0078B2  73                 	db	115	;'s'
  2602  0078B3  20                 	db	32
  2603  0078B4  6D                 	db	109	;'m'
  2604  0078B5  69                 	db	105	;'i'
  2605  0078B6  73                 	db	115	;'s'
  2606  0078B7  73                 	db	115	;'s'
  2607  0078B8  69                 	db	105	;'i'
  2608  0078B9  6E                 	db	110	;'n'
  2609  0078BA  67                 	db	103	;'g'
  2610  0078BB  0D                 	db	13
  2611  0078BC  0A                 	db	10
  2612  0078BD  00                 	db	0
  2613  0078BE                     STR_237:
  2614  0078BE  20                 	db	32
  2615  0078BF  20                 	db	32
  2616  0078C0  20                 	db	32
  2617  0078C1  20                 	db	32
  2618  0078C2  20                 	db	32
  2619  0078C3  20                 	db	32
  2620  0078C4  20                 	db	32
  2621  0078C5  20                 	db	32
  2622  0078C6  20                 	db	32
  2623  0078C7  20                 	db	32
  2624  0078C8  20                 	db	32
  2625  0078C9  4D                 	db	77	;'M'
  2626  0078CA  6F                 	db	111	;'o'
  2627  0078CB  64                 	db	100	;'d'
  2628  0078CC  65                 	db	101	;'e'
  2629  0078CD  73                 	db	115	;'s'
  2630  0078CE  3A                 	db	58	;':'
  2631  0078CF  20                 	db	32
  2632  0078D0  76                 	db	118	;'v'
  2633  0078D1  65                 	db	101	;'e'
  2634  0078D2  72                 	db	114	;'r'
  2635  0078D3  62                 	db	98	;'b'
  2636  0078D4  6F                 	db	111	;'o'
  2637  0078D5  73                 	db	115	;'s'
  2638  0078D6  65                 	db	101	;'e'
  2639  0078D7  7C                 	db	124
  2640  0078D8  76                 	db	118	;'v'
  2641  0078D9  73                 	db	115	;'s'
  2642  0078DA  63                 	db	99	;'c'
  2643  0078DB  70                 	db	112	;'p'
  2644  0078DC  7C                 	db	124
  2645  0078DD  73                 	db	115	;'s'
  2646  0078DE  6C                 	db	108	;'l'
  2647  0078DF  63                 	db	99	;'c'
  2648  0078E0  61                 	db	97	;'a'
  2649  0078E1  6E                 	db	110	;'n'
  2650  0078E2  0D                 	db	13
  2651  0078E3  0A                 	db	10
  2652  0078E4  00                 	db	0
  2653  0078E5                     STR_96:
  2654  0078E5  2D                 	db	45
  2655  0078E6  45                 	db	69	;'E'
  2656  0078E7  52                 	db	82	;'R'
  2657  0078E8  52                 	db	82	;'R'
  2658  0078E9  4F                 	db	79	;'O'
  2659  0078EA  52                 	db	82	;'R'
  2660  0078EB  20                 	db	32
  2661  0078EC  2D                 	db	45
  2662  0078ED  20                 	db	32
  2663  0078EE  66                 	db	102	;'f'
  2664  0078EF  69                 	db	105	;'i'
  2665  0078F0  6C                 	db	108	;'l'
  2666  0078F1  74                 	db	116	;'t'
  2667  0078F2  65                 	db	101	;'e'
  2668  0078F3  72                 	db	114	;'r'
  2669  0078F4  20                 	db	32
  2670  0078F5  66                 	db	102	;'f'
  2671  0078F6  6F                 	db	111	;'o'
  2672  0078F7  72                 	db	114	;'r'
  2673  0078F8  20                 	db	32
  2674  0078F9  74                 	db	116	;'t'
  2675  0078FA  79                 	db	121	;'y'
  2676  0078FB  70                 	db	112	;'p'
  2677  0078FC  65                 	db	101	;'e'
  2678  0078FD  20                 	db	32
  2679  0078FE  69                 	db	105	;'i'
  2680  0078FF  73                 	db	115	;'s'
  2681  007900  20                 	db	32
  2682  007901  6D                 	db	109	;'m'
  2683  007902  69                 	db	105	;'i'
  2684  007903  73                 	db	115	;'s'
  2685  007904  73                 	db	115	;'s'
  2686  007905  69                 	db	105	;'i'
  2687  007906  6E                 	db	110	;'n'
  2688  007907  67                 	db	103	;'g'
  2689  007908  0D                 	db	13
  2690  007909  0A                 	db	10
  2691  00790A  00                 	db	0
  2692  00790B                     STR_103:
  2693  00790B  2D                 	db	45
  2694  00790C  45                 	db	69	;'E'
  2695  00790D  52                 	db	82	;'R'
  2696  00790E  52                 	db	82	;'R'
  2697  00790F  4F                 	db	79	;'O'
  2698  007910  52                 	db	82	;'R'
  2699  007911  20                 	db	32
  2700  007912  2D                 	db	45
  2701  007913  20                 	db	32
  2702  007914  4E                 	db	78	;'N'
  2703  007915  6F                 	db	111	;'o'
  2704  007916  20                 	db	32
  2705  007917  6D                 	db	109	;'m'
  2706  007918  61                 	db	97	;'a'
  2707  007919  73                 	db	115	;'s'
  2708  00791A  6B                 	db	107	;'k'
  2709  00791B  20                 	db	32
  2710  00791C  6E                 	db	110	;'n'
  2711  00791D  75                 	db	117	;'u'
  2712  00791E  6D                 	db	109	;'m'
  2713  00791F  62                 	db	98	;'b'
  2714  007920  65                 	db	101	;'e'
  2715  007921  72                 	db	114	;'r'
  2716  007922  20                 	db	32
  2717  007923  73                 	db	115	;'s'
  2718  007924  70                 	db	112	;'p'
  2719  007925  65                 	db	101	;'e'
  2720  007926  63                 	db	99	;'c'
  2721  007927  69                 	db	105	;'i'
  2722  007928  66                 	db	102	;'f'
  2723  007929  69                 	db	105	;'i'
  2724  00792A  65                 	db	101	;'e'
  2725  00792B  64                 	db	100	;'d'
  2726  00792C  2E                 	db	46
  2727  00792D  0D                 	db	13
  2728  00792E  0A                 	db	10
  2729  00792F  00                 	db	0
  2730  007930                     STR_1:
  2731  007930  0D                 	db	13
  2732  007931  0A                 	db	10
  2733  007932  46                 	db	70	;'F'
  2734  007933  72                 	db	114	;'r'
  2735  007934  61                 	db	97	;'a'
  2736  007935  6E                 	db	110	;'n'
  2737  007936  6B                 	db	107	;'k'
  2738  007937  66                 	db	102	;'f'
  2739  007938  75                 	db	117	;'u'
  2740  007939  72                 	db	114	;'r'
  2741  00793A  74                 	db	116	;'t'
  2742  00793B  20                 	db	32
  2743  00793C  52                 	db	82	;'R'
  2744  00793D  53                 	db	83	;'S'
  2745  00793E  2D                 	db	45
  2746  00793F  32                 	db	50	;'2'
  2747  007940  33                 	db	51	;'3'
  2748  007941  32                 	db	50	;'2'
  2749  007942  20                 	db	32
  2750  007943  43                 	db	67	;'C'
  2751  007944  41                 	db	65	;'A'
  2752  007945  4E                 	db	78	;'N'
  2753  007946  34                 	db	52	;'4'
  2754  007947  56                 	db	86	;'V'
  2755  007948  53                 	db	83	;'S'
  2756  007949  43                 	db	67	;'C'
  2757  00794A  50                 	db	80	;'P'
  2758  00794B  20                 	db	32
  2759  00794C  6D                 	db	109	;'m'
  2760  00794D  6F                 	db	111	;'o'
  2761  00794E  64                 	db	100	;'d'
  2762  00794F  75                 	db	117	;'u'
  2763  007950  6C                 	db	108	;'l'
  2764  007951  65                 	db	101	;'e'
  2765  007952  0D                 	db	13
  2766  007953  0A                 	db	10
  2767  007954  00                 	db	0
  2768  007955                     STR_107:
  2769  007955  2D                 	db	45
  2770  007956  45                 	db	69	;'E'
  2771  007957  52                 	db	82	;'R'
  2772  007958  52                 	db	82	;'R'
  2773  007959  4F                 	db	79	;'O'
  2774  00795A  52                 	db	82	;'R'
  2775  00795B  20                 	db	32
  2776  00795C  2D                 	db	45
  2777  00795D  20                 	db	32
  2778  00795E  6D                 	db	109	;'m'
  2779  00795F  61                 	db	97	;'a'
  2780  007960  73                 	db	115	;'s'
  2781  007961  6B                 	db	107	;'k'
  2782  007962  20                 	db	32
  2783  007963  66                 	db	102	;'f'
  2784  007964  6F                 	db	111	;'o'
  2785  007965  72                 	db	114	;'r'
  2786  007966  20                 	db	32
  2787  007967  63                 	db	99	;'c'
  2788  007968  6C                 	db	108	;'l'
  2789  007969  61                 	db	97	;'a'
  2790  00796A  73                 	db	115	;'s'
  2791  00796B  73                 	db	115	;'s'
  2792  00796C  20                 	db	32
  2793  00796D  69                 	db	105	;'i'
  2794  00796E  73                 	db	115	;'s'
  2795  00796F  20                 	db	32
  2796  007970  6D                 	db	109	;'m'
  2797  007971  69                 	db	105	;'i'
  2798  007972  73                 	db	115	;'s'
  2799  007973  73                 	db	115	;'s'
  2800  007974  69                 	db	105	;'i'
  2801  007975  6E                 	db	110	;'n'
  2802  007976  67                 	db	103	;'g'
  2803  007977  0D                 	db	13
  2804  007978  0A                 	db	10
  2805  007979  00                 	db	0
  2806  00797A                     STR_109:
  2807  00797A  2D                 	db	45
  2808  00797B  45                 	db	69	;'E'
  2809  00797C  52                 	db	82	;'R'
  2810  00797D  52                 	db	82	;'R'
  2811  00797E  4F                 	db	79	;'O'
  2812  00797F  52                 	db	82	;'R'
  2813  007980  20                 	db	32
  2814  007981  2D                 	db	45
  2815  007982  20                 	db	32
  2816  007983  6D                 	db	109	;'m'
  2817  007984  61                 	db	97	;'a'
  2818  007985  73                 	db	115	;'s'
  2819  007986  6B                 	db	107	;'k'
  2820  007987  20                 	db	32
  2821  007988  66                 	db	102	;'f'
  2822  007989  6F                 	db	111	;'o'
  2823  00798A  72                 	db	114	;'r'
  2824  00798B  20                 	db	32
  2825  00798C  74                 	db	116	;'t'
  2826  00798D  79                 	db	121	;'y'
  2827  00798E  70                 	db	112	;'p'
  2828  00798F  65                 	db	101	;'e'
  2829  007990  20                 	db	32
  2830  007991  69                 	db	105	;'i'
  2831  007992  73                 	db	115	;'s'
  2832  007993  20                 	db	32
  2833  007994  6D                 	db	109	;'m'
  2834  007995  69                 	db	105	;'i'
  2835  007996  73                 	db	115	;'s'
  2836  007997  73                 	db	115	;'s'
  2837  007998  69                 	db	105	;'i'
  2838  007999  6E                 	db	110	;'n'
  2839  00799A  67                 	db	103	;'g'
  2840  00799B  0D                 	db	13
  2841  00799C  0A                 	db	10
  2842  00799D  00                 	db	0
  2843  00799E                     STR_3:
  2844  00799E  68                 	db	104	;'h'
  2845  00799F  74                 	db	116	;'t'
  2846  0079A0  74                 	db	116	;'t'
  2847  0079A1  70                 	db	112	;'p'
  2848  0079A2  3A                 	db	58	;':'
  2849  0079A3  2F                 	db	47
  2850  0079A4  2F                 	db	47
  2851  0079A5  77                 	db	119	;'w'
  2852  0079A6  77                 	db	119	;'w'
  2853  0079A7  77                 	db	119	;'w'
  2854  0079A8  2E                 	db	46
  2855  0079A9  70                 	db	112	;'p'
  2856  0079AA  61                 	db	97	;'a'
  2857  0079AB  72                 	db	114	;'r'
  2858  0079AC  61                 	db	97	;'a'
  2859  0079AD  64                 	db	100	;'d'
  2860  0079AE  69                 	db	105	;'i'
  2861  0079AF  73                 	db	115	;'s'
  2862  0079B0  65                 	db	101	;'e'
  2863  0079B1  6F                 	db	111	;'o'
  2864  0079B2  66                 	db	102	;'f'
  2865  0079B3  74                 	db	116	;'t'
  2866  0079B4  68                 	db	104	;'h'
  2867  0079B5  65                 	db	101	;'e'
  2868  0079B6  66                 	db	102	;'f'
  2869  0079B7  72                 	db	114	;'r'
  2870  0079B8  6F                 	db	111	;'o'
  2871  0079B9  67                 	db	103	;'g'
  2872  0079BA  2E                 	db	46
  2873  0079BB  63                 	db	99	;'c'
  2874  0079BC  6F                 	db	111	;'o'
  2875  0079BD  6D                 	db	109	;'m'
  2876  0079BE  0D                 	db	13
  2877  0079BF  0A                 	db	10
  2878  0079C0  00                 	db	0
  2879  0079C1                     STR_79:
  2880  0079C1  2B                 	db	43
  2881  0079C2  4F                 	db	79	;'O'
  2882  0079C3  4B                 	db	75	;'K'
  2883  0079C4  20                 	db	32
  2884  0079C5  2D                 	db	45
  2885  0079C6  20                 	db	32
  2886  0079C7  56                 	db	86	;'V'
  2887  0079C8  61                 	db	97	;'a'
  2888  0079C9  6C                 	db	108	;'l'
  2889  0079CA  75                 	db	117	;'u'
  2890  0079CB  65                 	db	101	;'e'
  2891  0079CC  20                 	db	32
  2892  0079CD  77                 	db	119	;'w'
  2893  0079CE  72                 	db	114	;'r'
  2894  0079CF  69                 	db	105	;'i'
  2895  0079D0  74                 	db	116	;'t'
  2896  0079D1  74                 	db	116	;'t'
  2897  0079D2  65                 	db	101	;'e'
  2898  0079D3  6E                 	db	110	;'n'
  2899  0079D4  20                 	db	32
  2900  0079D5  73                 	db	115	;'s'
  2901  0079D6  75                 	db	117	;'u'
  2902  0079D7  63                 	db	99	;'c'
  2903  0079D8  63                 	db	99	;'c'
  2904  0079D9  65                 	db	101	;'e'
  2905  0079DA  73                 	db	115	;'s'
  2906  0079DB  73                 	db	115	;'s'
  2907  0079DC  66                 	db	102	;'f'
  2908  0079DD  75                 	db	117	;'u'
  2909  0079DE  6C                 	db	108	;'l'
  2910  0079DF  6C                 	db	108	;'l'
  2911  0079E0  79                 	db	121	;'y'
  2912  0079E1  0D                 	db	13
  2913  0079E2  0A                 	db	10
  2914  0079E3  00                 	db	0
  2915  0079E4                     STR_230:
  2916  0079E4  53                 	db	83	;'S'
  2917  0079E5  45                 	db	69	;'E'
  2918  0079E6  54                 	db	84	;'T'
  2919  0079E7  20                 	db	32
  2920  0079E8  2D                 	db	45
  2921  0079E9  20                 	db	32
  2922  0079EA  50                 	db	80	;'P'
  2923  0079EB  65                 	db	101	;'e'
  2924  0079EC  72                 	db	114	;'r'
  2925  0079ED  73                 	db	115	;'s'
  2926  0079EE  69                 	db	105	;'i'
  2927  0079EF  73                 	db	115	;'s'
  2928  0079F0  74                 	db	116	;'t'
  2929  0079F1  65                 	db	101	;'e'
  2930  0079F2  6E                 	db	110	;'n'
  2931  0079F3  74                 	db	116	;'t'
  2932  0079F4  20                 	db	32
  2933  0079F5  66                 	db	102	;'f'
  2934  0079F6  75                 	db	117	;'u'
  2935  0079F7  6E                 	db	110	;'n'
  2936  0079F8  63                 	db	99	;'c'
  2937  0079F9  74                 	db	116	;'t'
  2938  0079FA  69                 	db	105	;'i'
  2939  0079FB  6F                 	db	111	;'o'
  2940  0079FC  6E                 	db	110	;'n'
  2941  0079FD  61                 	db	97	;'a'
  2942  0079FE  6C                 	db	108	;'l'
  2943  0079FF  69                 	db	105	;'i'
  2944  007A00  74                 	db	116	;'t'
  2945  007A01  79                 	db	121	;'y'
  2946  007A02  2E                 	db	46
  2947  007A03  0D                 	db	13
  2948  007A04  0A                 	db	10
  2949  007A05  00                 	db	0
  2950  007A06                     STR_64:
  2951  007A06  2D                 	db	45
  2952  007A07  45                 	db	69	;'E'
  2953  007A08  52                 	db	82	;'R'
  2954  007A09  52                 	db	82	;'R'
  2955  007A0A  4F                 	db	79	;'O'
  2956  007A0B  52                 	db	82	;'R'
  2957  007A0C  20                 	db	32
  2958  007A0D  2D                 	db	45
  2959  007A0E  20                 	db	32
  2960  007A0F  55                 	db	85	;'U'
  2961  007A10  6E                 	db	110	;'n'
  2962  007A11  61                 	db	97	;'a'
  2963  007A12  62                 	db	98	;'b'
  2964  007A13  6C                 	db	108	;'l'
  2965  007A14  65                 	db	101	;'e'
  2966  007A15  20                 	db	32
  2967  007A16  74                 	db	116	;'t'
  2968  007A17  6F                 	db	111	;'o'
  2969  007A18  20                 	db	32
  2970  007A19  72                 	db	114	;'r'
  2971  007A1A  65                 	db	101	;'e'
  2972  007A1B  61                 	db	97	;'a'
  2973  007A1C  64                 	db	100	;'d'
  2974  007A1D  20                 	db	32
  2975  007A1E  72                 	db	114	;'r'
  2976  007A1F  65                 	db	101	;'e'
  2977  007A20  67                 	db	103	;'g'
  2978  007A21  69                 	db	105	;'i'
  2979  007A22  73                 	db	115	;'s'
  2980  007A23  74                 	db	116	;'t'
  2981  007A24  65                 	db	101	;'e'
  2982  007A25  72                 	db	114	;'r'
  2983  007A26  20                 	db	32
  2984  007A27  00                 	db	0
  2985  007A28                     STR_219:
  2986  007A28  53                 	db	83	;'S'
  2987  007A29  54                 	db	84	;'T'
  2988  007A2A  41                 	db	65	;'A'
  2989  007A2B  54                 	db	84	;'T'
  2990  007A2C  20                 	db	32
  2991  007A2D  2D                 	db	45
  2992  007A2E  20                 	db	32
  2993  007A2F  44                 	db	68	;'D'
  2994  007A30  69                 	db	105	;'i'
  2995  007A31  73                 	db	115	;'s'
  2996  007A32  70                 	db	112	;'p'
  2997  007A33  6C                 	db	108	;'l'
  2998  007A34  61                 	db	97	;'a'
  2999  007A35  79                 	db	121	;'y'
  3000  007A36  20                 	db	32
  3001  007A37  43                 	db	67	;'C'
  3002  007A38  41                 	db	65	;'A'
  3003  007A39  4E                 	db	78	;'N'
  3004  007A3A  20                 	db	32
  3005  007A3B  73                 	db	115	;'s'
  3006  007A3C  74                 	db	116	;'t'
  3007  007A3D  61                 	db	97	;'a'
  3008  007A3E  74                 	db	116	;'t'
  3009  007A3F  69                 	db	105	;'i'
  3010  007A40  73                 	db	115	;'s'
  3011  007A41  74                 	db	116	;'t'
  3012  007A42  69                 	db	105	;'i'
  3013  007A43  63                 	db	99	;'c'
  3014  007A44  73                 	db	115	;'s'
  3015  007A45  2E                 	db	46
  3016  007A46  0D                 	db	13
  3017  007A47  0A                 	db	10
  3018  007A48  00                 	db	0
  3019  007A49                     STR_37:
  3020  007A49  2D                 	db	45
  3021  007A4A  45                 	db	69	;'E'
  3022  007A4B  52                 	db	82	;'R'
  3023  007A4C  52                 	db	82	;'R'
  3024  007A4D  4F                 	db	79	;'O'
  3025  007A4E  52                 	db	82	;'R'
  3026  007A4F  20                 	db	32
  3027  007A50  2D                 	db	45
  3028  007A51  20                 	db	32
  3029  007A52  46                 	db	70	;'F'
  3030  007A53  61                 	db	97	;'a'
  3031  007A54  69                 	db	105	;'i'
  3032  007A55  6C                 	db	108	;'l'
  3033  007A56  65                 	db	101	;'e'
  3034  007A57  64                 	db	100	;'d'
  3035  007A58  20                 	db	32
  3036  007A59  74                 	db	116	;'t'
  3037  007A5A  6F                 	db	111	;'o'
  3038  007A5B  20                 	db	32
  3039  007A5C  73                 	db	115	;'s'
  3040  007A5D  65                 	db	101	;'e'
  3041  007A5E  6E                 	db	110	;'n'
  3042  007A5F  64                 	db	100	;'d'
  3043  007A60  20                 	db	32
  3044  007A61  65                 	db	101	;'e'
  3045  007A62  76                 	db	118	;'v'
  3046  007A63  65                 	db	101	;'e'
  3047  007A64  6E                 	db	110	;'n'
  3048  007A65  74                 	db	116	;'t'
  3049  007A66  2E                 	db	46
  3050  007A67  0D                 	db	13
  3051  007A68  0A                 	db	10
  3052  007A69  00                 	db	0
  3053  007A6A                     STR_130:
  3054  007A6A  2D                 	db	45
  3055  007A6B  45                 	db	69	;'E'
  3056  007A6C  52                 	db	82	;'R'
  3057  007A6D  52                 	db	82	;'R'
  3058  007A6E  4F                 	db	79	;'O'
  3059  007A6F  52                 	db	82	;'R'
  3060  007A70  20                 	db	32
  3061  007A71  2D                 	db	45
  3062  007A72  20                 	db	32
  3063  007A73  55                 	db	85	;'U'
  3064  007A74  6E                 	db	110	;'n'
  3065  007A75  6B                 	db	107	;'k'
  3066  007A76  6E                 	db	110	;'n'
  3067  007A77  6F                 	db	111	;'o'
  3068  007A78  77                 	db	119	;'w'
  3069  007A79  6E                 	db	110	;'n'
  3070  007A7A  20                 	db	32
  3071  007A7B  27                 	db	39
  3072  007A7C  53                 	db	83	;'S'
  3073  007A7D  45                 	db	69	;'E'
  3074  007A7E  54                 	db	84	;'T'
  3075  007A7F  27                 	db	39
  3076  007A80  20                 	db	32
  3077  007A81  63                 	db	99	;'c'
  3078  007A82  6F                 	db	111	;'o'
  3079  007A83  6D                 	db	109	;'m'
  3080  007A84  6D                 	db	109	;'m'
  3081  007A85  61                 	db	97	;'a'
  3082  007A86  6E                 	db	110	;'n'
  3083  007A87  64                 	db	100	;'d'
  3084  007A88  0D                 	db	13
  3085  007A89  0A                 	db	10
  3086  007A8A  00                 	db	0
  3087  007A8B                     STR_80:
  3088  007A8B  2D                 	db	45
  3089  007A8C  45                 	db	69	;'E'
  3090  007A8D  52                 	db	82	;'R'
  3091  007A8E  52                 	db	82	;'R'
  3092  007A8F  4F                 	db	79	;'O'
  3093  007A90  52                 	db	82	;'R'
  3094  007A91  20                 	db	32
  3095  007A92  2D                 	db	45
  3096  007A93  20                 	db	32
  3097  007A94  46                 	db	70	;'F'
  3098  007A95  61                 	db	97	;'a'
  3099  007A96  69                 	db	105	;'i'
  3100  007A97  6C                 	db	108	;'l'
  3101  007A98  65                 	db	101	;'e'
  3102  007A99  64                 	db	100	;'d'
  3103  007A9A  20                 	db	32
  3104  007A9B  74                 	db	116	;'t'
  3105  007A9C  6F                 	db	111	;'o'
  3106  007A9D  20                 	db	32
  3107  007A9E  77                 	db	119	;'w'
  3108  007A9F  72                 	db	114	;'r'
  3109  007AA0  69                 	db	105	;'i'
  3110  007AA1  74                 	db	116	;'t'
  3111  007AA2  65                 	db	101	;'e'
  3112  007AA3  20                 	db	32
  3113  007AA4  76                 	db	118	;'v'
  3114  007AA5  61                 	db	97	;'a'
  3115  007AA6  6C                 	db	108	;'l'
  3116  007AA7  75                 	db	117	;'u'
  3117  007AA8  65                 	db	101	;'e'
  3118  007AA9  0D                 	db	13
  3119  007AAA  0A                 	db	10
  3120  007AAB  00                 	db	0
  3121  007AAC                     STR_53:
  3122  007AAC  2D                 	db	45
  3123  007AAD  45                 	db	69	;'E'
  3124  007AAE  52                 	db	82	;'R'
  3125  007AAF  52                 	db	82	;'R'
  3126  007AB0  4F                 	db	79	;'O'
  3127  007AB1  52                 	db	82	;'R'
  3128  007AB2  20                 	db	32
  3129  007AB3  2D                 	db	45
  3130  007AB4  20                 	db	32
  3131  007AB5  4E                 	db	78	;'N'
  3132  007AB6  65                 	db	101	;'e'
  3133  007AB7  65                 	db	101	;'e'
  3134  007AB8  64                 	db	100	;'d'
  3135  007AB9  73                 	db	115	;'s'
  3136  007ABA  20                 	db	32
  3137  007ABB  5B                 	db	91	;'['
  3138  007ABC  70                 	db	112	;'p'
  3139  007ABD  61                 	db	97	;'a'
  3140  007ABE  67                 	db	103	;'g'
  3141  007ABF  65                 	db	101	;'e'
  3142  007AC0  3A                 	db	58	;':'
  3143  007AC1  5D                 	db	93	;']'
  3144  007AC2  72                 	db	114	;'r'
  3145  007AC3  65                 	db	101	;'e'
  3146  007AC4  67                 	db	103	;'g'
  3147  007AC5  69                 	db	105	;'i'
  3148  007AC6  73                 	db	115	;'s'
  3149  007AC7  74                 	db	116	;'t'
  3150  007AC8  65                 	db	101	;'e'
  3151  007AC9  72                 	db	114	;'r'
  3152  007ACA  0D                 	db	13
  3153  007ACB  0A                 	db	10
  3154  007ACC  00                 	db	0
  3155  007ACD                     STR_125:
  3156  007ACD  2B                 	db	43
  3157  007ACE  4F                 	db	79	;'O'
  3158  007ACF  4B                 	db	75	;'K'
  3159  007AD0  20                 	db	32
  3160  007AD1  2D                 	db	45
  3161  007AD2  20                 	db	32
  3162  007AD3  4D                 	db	77	;'M'
  3163  007AD4  6F                 	db	111	;'o'
  3164  007AD5  64                 	db	100	;'d'
  3165  007AD6  65                 	db	101	;'e'
  3166  007AD7  20                 	db	32
  3167  007AD8  69                 	db	105	;'i'
  3168  007AD9  73                 	db	115	;'s'
  3169  007ADA  20                 	db	32
  3170  007ADB  6E                 	db	110	;'n'
  3171  007ADC  6F                 	db	111	;'o'
  3172  007ADD  77                 	db	119	;'w'
  3173  007ADE  20                 	db	32
  3174  007ADF  56                 	db	86	;'V'
  3175  007AE0  53                 	db	83	;'S'
  3176  007AE1  43                 	db	67	;'C'
  3177  007AE2  50                 	db	80	;'P'
  3178  007AE3  20                 	db	32
  3179  007AE4  44                 	db	68	;'D'
  3180  007AE5  72                 	db	114	;'r'
  3181  007AE6  69                 	db	105	;'i'
  3182  007AE7  76                 	db	118	;'v'
  3183  007AE8  65                 	db	101	;'e'
  3184  007AE9  72                 	db	114	;'r'
  3185  007AEA  0D                 	db	13
  3186  007AEB  0A                 	db	10
  3187  007AEC  00                 	db	0
  3188  007AED                     STR_7:
  3189  007AED  57                 	db	87	;'W'
  3190  007AEE  69                 	db	105	;'i'
  3191  007AEF  6C                 	db	108	;'l'
  3192  007AF0  6C                 	db	108	;'l'
  3193  007AF1  20                 	db	32
  3194  007AF2  65                 	db	101	;'e'
  3195  007AF3  6E                 	db	110	;'n'
  3196  007AF4  74                 	db	116	;'t'
  3197  007AF5  65                 	db	101	;'e'
  3198  007AF6  72                 	db	114	;'r'
  3199  007AF7  20                 	db	32
  3200  007AF8  62                 	db	98	;'b'
  3201  007AF9  6F                 	db	111	;'o'
  3202  007AFA  6F                 	db	111	;'o'
  3203  007AFB  74                 	db	116	;'t'
  3204  007AFC  6C                 	db	108	;'l'
  3205  007AFD  6F                 	db	111	;'o'
  3206  007AFE  61                 	db	97	;'a'
  3207  007AFF  64                 	db	100	;'d'
  3208  007B00  65                 	db	101	;'e'
  3209  007B01  72                 	db	114	;'r'
  3210  007B02  20                 	db	32
  3211  007B03  6E                 	db	110	;'n'
  3212  007B04  6F                 	db	111	;'o'
  3213  007B05  77                 	db	119	;'w'
  3214  007B06  2E                 	db	46
  3215  007B07  2E                 	db	46
  3216  007B08  2E                 	db	46
  3217  007B09  0D                 	db	13
  3218  007B0A  0A                 	db	10
  3219  007B0B  00                 	db	0
  3220  007B0C                     STR_213:
  3221  007B0C  43                 	db	67	;'C'
  3222  007B0D  4C                 	db	76	;'L'
  3223  007B0E  4F                 	db	79	;'O'
  3224  007B0F  53                 	db	83	;'S'
  3225  007B10  45                 	db	69	;'E'
  3226  007B11  20                 	db	32
  3227  007B12  2D                 	db	45
  3228  007B13  20                 	db	32
  3229  007B14  43                 	db	67	;'C'
  3230  007B15  6C                 	db	108	;'l'
  3231  007B16  6F                 	db	111	;'o'
  3232  007B17  73                 	db	115	;'s'
  3233  007B18  65                 	db	101	;'e'
  3234  007B19  20                 	db	32
  3235  007B1A  43                 	db	67	;'C'
  3236  007B1B  41                 	db	65	;'A'
  3237  007B1C  4E                 	db	78	;'N'
  3238  007B1D  20                 	db	32
  3239  007B1E  69                 	db	105	;'i'
  3240  007B1F  6E                 	db	110	;'n'
  3241  007B20  74                 	db	116	;'t'
  3242  007B21  65                 	db	101	;'e'
  3243  007B22  72                 	db	114	;'r'
  3244  007B23  66                 	db	102	;'f'
  3245  007B24  61                 	db	97	;'a'
  3246  007B25  63                 	db	99	;'c'
  3247  007B26  65                 	db	101	;'e'
  3248  007B27  2E                 	db	46
  3249  007B28  0D                 	db	13
  3250  007B29  0A                 	db	10
  3251  007B2A  00                 	db	0
  3252  007B2B                     STR_5:
  3253  007B2B  54                 	db	84	;'T'
  3254  007B2C  65                 	db	101	;'e'
  3255  007B2D  6D                 	db	109	;'m'
  3256  007B2E  70                 	db	112	;'p'
  3257  007B2F  6F                 	db	111	;'o'
  3258  007B30  72                 	db	114	;'r'
  3259  007B31  61                 	db	97	;'a'
  3260  007B32  72                 	db	114	;'r'
  3261  007B33  79                 	db	121	;'y'
  3262  007B34  20                 	db	32
  3263  007B35  76                 	db	118	;'v'
  3264  007B36  65                 	db	101	;'e'
  3265  007B37  72                 	db	114	;'r'
  3266  007B38  62                 	db	98	;'b'
  3267  007B39  6F                 	db	111	;'o'
  3268  007B3A  73                 	db	115	;'s'
  3269  007B3B  65                 	db	101	;'e'
  3270  007B3C  20                 	db	32
  3271  007B3D  6D                 	db	109	;'m'
  3272  007B3E  6F                 	db	111	;'o'
  3273  007B3F  64                 	db	100	;'d'
  3274  007B40  65                 	db	101	;'e'
  3275  007B41  20                 	db	32
  3276  007B42  73                 	db	115	;'s'
  3277  007B43  65                 	db	101	;'e'
  3278  007B44  74                 	db	116	;'t'
  3279  007B45  0D                 	db	13
  3280  007B46  0A                 	db	10
  3281  007B47  00                 	db	0
  3282  007B48                     STR_123:
  3283  007B48  2B                 	db	43
  3284  007B49  4F                 	db	79	;'O'
  3285  007B4A  4B                 	db	75	;'K'
  3286  007B4B  20                 	db	32
  3287  007B4C  2D                 	db	45
  3288  007B4D  20                 	db	32
  3289  007B4E  4D                 	db	77	;'M'
  3290  007B4F  6F                 	db	111	;'o'
  3291  007B50  64                 	db	100	;'d'
  3292  007B51  65                 	db	101	;'e'
  3293  007B52  20                 	db	32
  3294  007B53  69                 	db	105	;'i'
  3295  007B54  73                 	db	115	;'s'
  3296  007B55  20                 	db	32
  3297  007B56  6E                 	db	110	;'n'
  3298  007B57  6F                 	db	111	;'o'
  3299  007B58  77                 	db	119	;'w'
  3300  007B59  20                 	db	32
  3301  007B5A  76                 	db	118	;'v'
  3302  007B5B  65                 	db	101	;'e'
  3303  007B5C  72                 	db	114	;'r'
  3304  007B5D  62                 	db	98	;'b'
  3305  007B5E  6F                 	db	111	;'o'
  3306  007B5F  73                 	db	115	;'s'
  3307  007B60  65                 	db	101	;'e'
  3308  007B61  0D                 	db	13
  3309  007B62  0A                 	db	10
  3310  007B63  00                 	db	0
  3311  007B64                     STR_208:
  3312  007B64  42                 	db	66	;'B'
  3313  007B65  4F                 	db	79	;'O'
  3314  007B66  4F                 	db	79	;'O'
  3315  007B67  54                 	db	84	;'T'
  3316  007B68  20                 	db	32
  3317  007B69  2D                 	db	45
  3318  007B6A  20                 	db	32
  3319  007B6B  45                 	db	69	;'E'
  3320  007B6C  6E                 	db	110	;'n'
  3321  007B6D  74                 	db	116	;'t'
  3322  007B6E  65                 	db	101	;'e'
  3323  007B6F  72                 	db	114	;'r'
  3324  007B70  20                 	db	32
  3325  007B71  62                 	db	98	;'b'
  3326  007B72  6F                 	db	111	;'o'
  3327  007B73  6F                 	db	111	;'o'
  3328  007B74  74                 	db	116	;'t'
  3329  007B75  6C                 	db	108	;'l'
  3330  007B76  6F                 	db	111	;'o'
  3331  007B77  61                 	db	97	;'a'
  3332  007B78  64                 	db	100	;'d'
  3333  007B79  65                 	db	101	;'e'
  3334  007B7A  72                 	db	114	;'r'
  3335  007B7B  2E                 	db	46
  3336  007B7C  0D                 	db	13
  3337  007B7D  0A                 	db	10
  3338  007B7E  00                 	db	0
  3339  007B7F                     STR_132:
  3340  007B7F  2D                 	db	45
  3341  007B80  45                 	db	69	;'E'
  3342  007B81  52                 	db	82	;'R'
  3343  007B82  52                 	db	82	;'R'
  3344  007B83  4F                 	db	79	;'O'
  3345  007B84  52                 	db	82	;'R'
  3346  007B85  20                 	db	32
  3347  007B86  2D                 	db	45
  3348  007B87  20                 	db	32
  3349  007B88  55                 	db	85	;'U'
  3350  007B89  6E                 	db	110	;'n'
  3351  007B8A  6B                 	db	107	;'k'
  3352  007B8B  6E                 	db	110	;'n'
  3353  007B8C  6F                 	db	111	;'o'
  3354  007B8D  77                 	db	119	;'w'
  3355  007B8E  6E                 	db	110	;'n'
  3356  007B8F  20                 	db	32
  3357  007B90  63                 	db	99	;'c'
  3358  007B91  6F                 	db	111	;'o'
  3359  007B92  6D                 	db	109	;'m'
  3360  007B93  6D                 	db	109	;'m'
  3361  007B94  61                 	db	97	;'a'
  3362  007B95  6E                 	db	110	;'n'
  3363  007B96  64                 	db	100	;'d'
  3364  007B97  0D                 	db	13
  3365  007B98  0A                 	db	10
  3366  007B99  00                 	db	0
  3367  007B9A                     STR_239:
  3368  007B9A  4E                 	db	78	;'N'
  3369  007B9B  6F                 	db	111	;'o'
  3370  007B9C  64                 	db	100	;'d'
  3371  007B9D  65                 	db	101	;'e'
  3372  007B9E  20                 	db	32
  3373  007B9F  66                 	db	102	;'f'
  3374  007BA0  6F                 	db	111	;'o'
  3375  007BA1  75                 	db	117	;'u'
  3376  007BA2  6E                 	db	110	;'n'
  3377  007BA3  64                 	db	100	;'d'
  3378  007BA4  20                 	db	32
  3379  007BA5  77                 	db	119	;'w'
  3380  007BA6  69                 	db	105	;'i'
  3381  007BA7  74                 	db	116	;'t'
  3382  007BA8  68                 	db	104	;'h'
  3383  007BA9  20                 	db	32
  3384  007BAA  6E                 	db	110	;'n'
  3385  007BAB  6F                 	db	111	;'o'
  3386  007BAC  64                 	db	100	;'d'
  3387  007BAD  65                 	db	101	;'e'
  3388  007BAE  20                 	db	32
  3389  007BAF  69                 	db	105	;'i'
  3390  007BB0  64                 	db	100	;'d'
  3391  007BB1  20                 	db	32
  3392  007BB2  3D                 	db	61	;'='
  3393  007BB3  20                 	db	32
  3394  007BB4  00                 	db	0
  3395  007BB5                     STR_127:
  3396  007BB5  2B                 	db	43
  3397  007BB6  4F                 	db	79	;'O'
  3398  007BB7  4B                 	db	75	;'K'
  3399  007BB8  20                 	db	32
  3400  007BB9  2D                 	db	45
  3401  007BBA  20                 	db	32
  3402  007BBB  4D                 	db	77	;'M'
  3403  007BBC  6F                 	db	111	;'o'
  3404  007BBD  64                 	db	100	;'d'
  3405  007BBE  65                 	db	101	;'e'
  3406  007BBF  20                 	db	32
  3407  007BC0  69                 	db	105	;'i'
  3408  007BC1  73                 	db	115	;'s'
  3409  007BC2  20                 	db	32
  3410  007BC3  6E                 	db	110	;'n'
  3411  007BC4  6F                 	db	111	;'o'
  3412  007BC5  77                 	db	119	;'w'
  3413  007BC6  20                 	db	32
  3414  007BC7  53                 	db	83	;'S'
  3415  007BC8  4C                 	db	76	;'L'
  3416  007BC9  43                 	db	67	;'C'
  3417  007BCA  41                 	db	65	;'A'
  3418  007BCB  4E                 	db	78	;'N'
  3419  007BCC  0D                 	db	13
  3420  007BCD  0A                 	db	10
  3421  007BCE  00                 	db	0
  3422  007BCF                     STR_25:
  3423  007BCF  2B                 	db	43
  3424  007BD0  4F                 	db	79	;'O'
  3425  007BD1  4B                 	db	75	;'K'
  3426  007BD2  20                 	db	32
  3427  007BD3  2D                 	db	45
  3428  007BD4  20                 	db	32
  3429  007BD5  4C                 	db	76	;'L'
  3430  007BD6  69                 	db	105	;'i'
  3431  007BD7  73                 	db	115	;'s'
  3432  007BD8  74                 	db	116	;'t'
  3433  007BD9  65                 	db	101	;'e'
  3434  007BDA  6E                 	db	110	;'n'
  3435  007BDB  20                 	db	32
  3436  007BDC  6F                 	db	111	;'o'
  3437  007BDD  6E                 	db	110	;'n'
  3438  007BDE  6C                 	db	108	;'l'
  3439  007BDF  79                 	db	121	;'y'
  3440  007BE0  20                 	db	32
  3441  007BE1  6D                 	db	109	;'m'
  3442  007BE2  6F                 	db	111	;'o'
  3443  007BE3  64                 	db	100	;'d'
  3444  007BE4  65                 	db	101	;'e'
  3445  007BE5  0D                 	db	13
  3446  007BE6  0A                 	db	10
  3447  007BE7  00                 	db	0
  3448  007BE8                     STR_192:
  3449  007BE8  54                 	db	84	;'T'
  3450  007BE9  72                 	db	114	;'r'
  3451  007BEA  61                 	db	97	;'a'
  3452  007BEB  6E                 	db	110	;'n'
  3453  007BEC  73                 	db	115	;'s'
  3454  007BED  6D                 	db	109	;'m'
  3455  007BEE  69                 	db	105	;'i'
  3456  007BEF  74                 	db	116	;'t'
  3457  007BF0  20                 	db	32
  3458  007BF1  45                 	db	69	;'E'
  3459  007BF2  72                 	db	114	;'r'
  3460  007BF3  72                 	db	114	;'r'
  3461  007BF4  6F                 	db	111	;'o'
  3462  007BF5  72                 	db	114	;'r'
  3463  007BF6  20                 	db	32
  3464  007BF7  43                 	db	67	;'C'
  3465  007BF8  6F                 	db	111	;'o'
  3466  007BF9  75                 	db	117	;'u'
  3467  007BFA  6E                 	db	110	;'n'
  3468  007BFB  74                 	db	116	;'t'
  3469  007BFC  65                 	db	101	;'e'
  3470  007BFD  72                 	db	114	;'r'
  3471  007BFE  3A                 	db	58	;':'
  3472  007BFF  20                 	db	32
  3473  007C00  00                 	db	0
  3474  007C01                     STR_216:
  3475  007C01  54                 	db	84	;'T'
  3476  007C02  58                 	db	88	;'X'
  3477  007C03  20                 	db	32
  3478  007C04  2D                 	db	45
  3479  007C05  20                 	db	32
  3480  007C06  53                 	db	83	;'S'
  3481  007C07  65                 	db	101	;'e'
  3482  007C08  6E                 	db	110	;'n'
  3483  007C09  64                 	db	100	;'d'
  3484  007C0A  20                 	db	32
  3485  007C0B  43                 	db	67	;'C'
  3486  007C0C  41                 	db	65	;'A'
  3487  007C0D  4E                 	db	78	;'N'
  3488  007C0E  20                 	db	32
  3489  007C0F  66                 	db	102	;'f'
  3490  007C10  72                 	db	114	;'r'
  3491  007C11  61                 	db	97	;'a'
  3492  007C12  6D                 	db	109	;'m'
  3493  007C13  65                 	db	101	;'e'
  3494  007C14  20                 	db	32
  3495  007C15  2E                 	db	46
  3496  007C16  0D                 	db	13
  3497  007C17  0A                 	db	10
  3498  007C18  00                 	db	0
  3499  007C19                     STR_226:
  3500  007C19  46                 	db	70	;'F'
  3501  007C1A  49                 	db	73	;'I'
  3502  007C1B  4C                 	db	76	;'L'
  3503  007C1C  54                 	db	84	;'T'
  3504  007C1D  45                 	db	69	;'E'
  3505  007C1E  52                 	db	82	;'R'
  3506  007C1F  20                 	db	32
  3507  007C20  2D                 	db	45
  3508  007C21  20                 	db	32
  3509  007C22  53                 	db	83	;'S'
  3510  007C23  65                 	db	101	;'e'
  3511  007C24  74                 	db	116	;'t'
  3512  007C25  20                 	db	32
  3513  007C26  66                 	db	102	;'f'
  3514  007C27  69                 	db	105	;'i'
  3515  007C28  6C                 	db	108	;'l'
  3516  007C29  74                 	db	116	;'t'
  3517  007C2A  65                 	db	101	;'e'
  3518  007C2B  72                 	db	114	;'r'
  3519  007C2C  20                 	db	32
  3520  007C2D  2E                 	db	46
  3521  007C2E  0D                 	db	13
  3522  007C2F  0A                 	db	10
  3523  007C30  00                 	db	0
  3524  007C31                     STR_51:
  3525  007C31  2D                 	db	45
  3526  007C32  45                 	db	69	;'E'
  3527  007C33  52                 	db	82	;'R'
  3528  007C34  52                 	db	82	;'R'
  3529  007C35  4F                 	db	79	;'O'
  3530  007C36  52                 	db	82	;'R'
  3531  007C37  20                 	db	32
  3532  007C38  2D                 	db	45
  3533  007C39  20                 	db	32
  3534  007C3A  4E                 	db	78	;'N'
  3535  007C3B  65                 	db	101	;'e'
  3536  007C3C  65                 	db	101	;'e'
  3537  007C3D  64                 	db	100	;'d'
  3538  007C3E  73                 	db	115	;'s'
  3539  007C3F  20                 	db	32
  3540  007C40  6E                 	db	110	;'n'
  3541  007C41  6F                 	db	111	;'o'
  3542  007C42  64                 	db	100	;'d'
  3543  007C43  65                 	db	101	;'e'
  3544  007C44  69                 	db	105	;'i'
  3545  007C45  64                 	db	100	;'d'
  3546  007C46  0D                 	db	13
  3547  007C47  0A                 	db	10
  3548  007C48  00                 	db	0
  3549  007C49                     STR_28:
  3550  007C49  2D                 	db	45
  3551  007C4A  45                 	db	69	;'E'
  3552  007C4B  52                 	db	82	;'R'
  3553  007C4C  52                 	db	82	;'R'
  3554  007C4D  4F                 	db	79	;'O'
  3555  007C4E  52                 	db	82	;'R'
  3556  007C4F  20                 	db	32
  3557  007C50  2D                 	db	45
  3558  007C51  20                 	db	32
  3559  007C52  55                 	db	85	;'U'
  3560  007C53  6E                 	db	110	;'n'
  3561  007C54  6B                 	db	107	;'k'
  3562  007C55  6E                 	db	110	;'n'
  3563  007C56  6F                 	db	111	;'o'
  3564  007C57  77                 	db	119	;'w'
  3565  007C58  6E                 	db	110	;'n'
  3566  007C59  20                 	db	32
  3567  007C5A  6D                 	db	109	;'m'
  3568  007C5B  6F                 	db	111	;'o'
  3569  007C5C  64                 	db	100	;'d'
  3570  007C5D  65                 	db	101	;'e'
  3571  007C5E  0D                 	db	13
  3572  007C5F  0A                 	db	10
  3573  007C60  00                 	db	0
  3574  007C61                     STR_78:
  3575  007C61  2D                 	db	45
  3576  007C62  45                 	db	69	;'E'
  3577  007C63  52                 	db	82	;'R'
  3578  007C64  52                 	db	82	;'R'
  3579  007C65  4F                 	db	79	;'O'
  3580  007C66  52                 	db	82	;'R'
  3581  007C67  20                 	db	32
  3582  007C68  2D                 	db	45
  3583  007C69  20                 	db	32
  3584  007C6A  4E                 	db	78	;'N'
  3585  007C6B  65                 	db	101	;'e'
  3586  007C6C  65                 	db	101	;'e'
  3587  007C6D  64                 	db	100	;'d'
  3588  007C6E  20                 	db	32
  3589  007C6F  61                 	db	97	;'a'
  3590  007C70  20                 	db	32
  3591  007C71  76                 	db	118	;'v'
  3592  007C72  61                 	db	97	;'a'
  3593  007C73  6C                 	db	108	;'l'
  3594  007C74  75                 	db	117	;'u'
  3595  007C75  65                 	db	101	;'e'
  3596  007C76  0D                 	db	13
  3597  007C77  0A                 	db	10
  3598  007C78  00                 	db	0
  3599  007C79                     STR_199:
  3600  007C79  52                 	db	82	;'R'
  3601  007C7A  65                 	db	101	;'e'
  3602  007C7B  63                 	db	99	;'c'
  3603  007C7C  65                 	db	101	;'e'
  3604  007C7D  69                 	db	105	;'i'
  3605  007C7E  76                 	db	118	;'v'
  3606  007C7F  65                 	db	101	;'e'
  3607  007C80  20                 	db	32
  3608  007C81  45                 	db	69	;'E'
  3609  007C82  72                 	db	114	;'r'
  3610  007C83  72                 	db	114	;'r'
  3611  007C84  6F                 	db	111	;'o'
  3612  007C85  72                 	db	114	;'r'
  3613  007C86  20                 	db	32
  3614  007C87  43                 	db	67	;'C'
  3615  007C88  6F                 	db	111	;'o'
  3616  007C89  75                 	db	117	;'u'
  3617  007C8A  6E                 	db	110	;'n'
  3618  007C8B  74                 	db	116	;'t'
  3619  007C8C  65                 	db	101	;'e'
  3620  007C8D  72                 	db	114	;'r'
  3621  007C8E  3A                 	db	58	;':'
  3622  007C8F  20                 	db	32
  3623  007C90  00                 	db	0
  3624  007C91                     STR_184:
  3625  007C91  55                 	db	85	;'U'
  3626  007C92  41                 	db	65	;'A'
  3627  007C93  52                 	db	82	;'R'
  3628  007C94  54                 	db	84	;'T'
  3629  007C95  20                 	db	32
  3630  007C96  52                 	db	82	;'R'
  3631  007C97  65                 	db	101	;'e'
  3632  007C98  63                 	db	99	;'c'
  3633  007C99  65                 	db	101	;'e'
  3634  007C9A  69                 	db	105	;'i'
  3635  007C9B  76                 	db	118	;'v'
  3636  007C9C  65                 	db	101	;'e'
  3637  007C9D  20                 	db	32
  3638  007C9E  6F                 	db	111	;'o'
  3639  007C9F  76                 	db	118	;'v'
  3640  007CA0  65                 	db	101	;'e'
  3641  007CA1  72                 	db	114	;'r'
  3642  007CA2  72                 	db	114	;'r'
  3643  007CA3  75                 	db	117	;'u'
  3644  007CA4  6E                 	db	110	;'n'
  3645  007CA5  73                 	db	115	;'s'
  3646  007CA6  3A                 	db	58	;':'
  3647  007CA7  20                 	db	32
  3648  007CA8  00                 	db	0
  3649  007CA9                     STR_180:
  3650  007CA9  43                 	db	67	;'C'
  3651  007CAA  41                 	db	65	;'A'
  3652  007CAB  4E                 	db	78	;'N'
  3653  007CAC  20                 	db	32
  3654  007CAD  54                 	db	84	;'T'
  3655  007CAE  72                 	db	114	;'r'
  3656  007CAF  61                 	db	97	;'a'
  3657  007CB0  6E                 	db	110	;'n'
  3658  007CB1  73                 	db	115	;'s'
  3659  007CB2  6D                 	db	109	;'m'
  3660  007CB3  69                 	db	105	;'i'
  3661  007CB4  74                 	db	116	;'t'
  3662  007CB5  20                 	db	32
  3663  007CB6  6F                 	db	111	;'o'
  3664  007CB7  76                 	db	118	;'v'
  3665  007CB8  65                 	db	101	;'e'
  3666  007CB9  72                 	db	114	;'r'
  3667  007CBA  72                 	db	114	;'r'
  3668  007CBB  75                 	db	117	;'u'
  3669  007CBC  6E                 	db	110	;'n'
  3670  007CBD  73                 	db	115	;'s'
  3671  007CBE  3A                 	db	58	;':'
  3672  007CBF  20                 	db	32
  3673  007CC0  00                 	db	0
  3674  007CC1                     STR_218:
  3675  007CC1  52                 	db	82	;'R'
  3676  007CC2  58                 	db	88	;'X'
  3677  007CC3  20                 	db	32
  3678  007CC4  2D                 	db	45
  3679  007CC5  20                 	db	32
  3680  007CC6  52                 	db	82	;'R'
  3681  007CC7  65                 	db	101	;'e'
  3682  007CC8  61                 	db	97	;'a'
  3683  007CC9  64                 	db	100	;'d'
  3684  007CCA  20                 	db	32
  3685  007CCB  43                 	db	67	;'C'
  3686  007CCC  41                 	db	65	;'A'
  3687  007CCD  4E                 	db	78	;'N'
  3688  007CCE  20                 	db	32
  3689  007CCF  66                 	db	102	;'f'
  3690  007CD0  72                 	db	114	;'r'
  3691  007CD1  61                 	db	97	;'a'
  3692  007CD2  6D                 	db	109	;'m'
  3693  007CD3  65                 	db	101	;'e'
  3694  007CD4  2E                 	db	46
  3695  007CD5  0D                 	db	13
  3696  007CD6  0A                 	db	10
  3697  007CD7  00                 	db	0
  3698  007CD8                     STR_176:
  3699  007CD8  43                 	db	67	;'C'
  3700  007CD9  41                 	db	65	;'A'
  3701  007CDA  4E                 	db	78	;'N'
  3702  007CDB  20                 	db	32
  3703  007CDC  52                 	db	82	;'R'
  3704  007CDD  65                 	db	101	;'e'
  3705  007CDE  63                 	db	99	;'c'
  3706  007CDF  65                 	db	101	;'e'
  3707  007CE0  69                 	db	105	;'i'
  3708  007CE1  76                 	db	118	;'v'
  3709  007CE2  65                 	db	101	;'e'
  3710  007CE3  20                 	db	32
  3711  007CE4  6F                 	db	111	;'o'
  3712  007CE5  76                 	db	118	;'v'
  3713  007CE6  65                 	db	101	;'e'
  3714  007CE7  72                 	db	114	;'r'
  3715  007CE8  72                 	db	114	;'r'
  3716  007CE9  75                 	db	117	;'u'
  3717  007CEA  6E                 	db	110	;'n'
  3718  007CEB  73                 	db	115	;'s'
  3719  007CEC  3A                 	db	58	;':'
  3720  007CED  20                 	db	32
  3721  007CEE  00                 	db	0
  3722  007CEF                     STR_261:
  3723  007CEF  55                 	db	85	;'U'
  3724  007CF0  6E                 	db	110	;'n'
  3725  007CF1  6B                 	db	107	;'k'
  3726  007CF2  6E                 	db	110	;'n'
  3727  007CF3  6F                 	db	111	;'o'
  3728  007CF4  77                 	db	119	;'w'
  3729  007CF5  6E                 	db	110	;'n'
  3730  007CF6  20                 	db	32
  3731  007CF7  28                 	db	40
  3732  007CF8  56                 	db	86	;'V'
  3733  007CF9  65                 	db	101	;'e'
  3734  007CFA  72                 	db	114	;'r'
  3735  007CFB  62                 	db	98	;'b'
  3736  007CFC  6F                 	db	111	;'o'
  3737  007CFD  73                 	db	115	;'s'
  3738  007CFE  65                 	db	101	;'e'
  3739  007CFF  20                 	db	32
  3740  007D00  75                 	db	117	;'u'
  3741  007D01  73                 	db	115	;'s'
  3742  007D02  65                 	db	101	;'e'
  3743  007D03  64                 	db	100	;'d'
  3744  007D04  29                 	db	41
  3745  007D05  00                 	db	0
  3746  007D06                     STR_24:
  3747  007D06  2B                 	db	43
  3748  007D07  4F                 	db	79	;'O'
  3749  007D08  4B                 	db	75	;'K'
  3750  007D09  20                 	db	32
  3751  007D0A  2D                 	db	45
  3752  007D0B  20                 	db	32
  3753  007D0C  4C                 	db	76	;'L'
  3754  007D0D  6F                 	db	111	;'o'
  3755  007D0E  6F                 	db	111	;'o'
  3756  007D0F  70                 	db	112	;'p'
  3757  007D10  62                 	db	98	;'b'
  3758  007D11  61                 	db	97	;'a'
  3759  007D12  63                 	db	99	;'c'
  3760  007D13  6B                 	db	107	;'k'
  3761  007D14  20                 	db	32
  3762  007D15  6D                 	db	109	;'m'
  3763  007D16  6F                 	db	111	;'o'
  3764  007D17  64                 	db	100	;'d'
  3765  007D18  65                 	db	101	;'e'
  3766  007D19  0D                 	db	13
  3767  007D1A  0A                 	db	10
  3768  007D1B  00                 	db	0
  3769  007D1C                     STR_168:
  3770  007D1C  52                 	db	82	;'R'
  3771  007D1D  65                 	db	101	;'e'
  3772  007D1E  63                 	db	99	;'c'
  3773  007D1F  65                 	db	101	;'e'
  3774  007D20  69                 	db	105	;'i'
  3775  007D21  76                 	db	118	;'v'
  3776  007D22  65                 	db	101	;'e'
  3777  007D23  64                 	db	100	;'d'
  3778  007D24  20                 	db	32
  3779  007D25  43                 	db	67	;'C'
  3780  007D26  41                 	db	65	;'A'
  3781  007D27  4E                 	db	78	;'N'
  3782  007D28  20                 	db	32
  3783  007D29  66                 	db	102	;'f'
  3784  007D2A  72                 	db	114	;'r'
  3785  007D2B  61                 	db	97	;'a'
  3786  007D2C  6D                 	db	109	;'m'
  3787  007D2D  65                 	db	101	;'e'
  3788  007D2E  73                 	db	115	;'s'
  3789  007D2F  3A                 	db	58	;':'
  3790  007D30  20                 	db	32
  3791  007D31  00                 	db	0
  3792  007D32                     STR_172:
  3793  007D32  52                 	db	82	;'R'
  3794  007D33  65                 	db	101	;'e'
  3795  007D34  63                 	db	99	;'c'
  3796  007D35  65                 	db	101	;'e'
  3797  007D36  69                 	db	105	;'i'
  3798  007D37  76                 	db	118	;'v'
  3799  007D38  65                 	db	101	;'e'
  3800  007D39  64                 	db	100	;'d'
  3801  007D3A  20                 	db	32
  3802  007D3B  43                 	db	67	;'C'
  3803  007D3C  41                 	db	65	;'A'
  3804  007D3D  4E                 	db	78	;'N'
  3805  007D3E  20                 	db	32
  3806  007D3F  62                 	db	98	;'b'
  3807  007D40  79                 	db	121	;'y'
  3808  007D41  74                 	db	116	;'t'
  3809  007D42  65                 	db	101	;'e'
  3810  007D43  73                 	db	115	;'s'
  3811  007D44  3A                 	db	58	;':'
  3812  007D45  20                 	db	32
  3813  007D46  00                 	db	0
  3814  007D47                     STR_228:
  3815  007D47  4D                 	db	77	;'M'
  3816  007D48  41                 	db	65	;'A'
  3817  007D49  53                 	db	83	;'S'
  3818  007D4A  4B                 	db	75	;'K'
  3819  007D4B  20                 	db	32
  3820  007D4C  2D                 	db	45
  3821  007D4D  20                 	db	32
  3822  007D4E  53                 	db	83	;'S'
  3823  007D4F  65                 	db	101	;'e'
  3824  007D50  74                 	db	116	;'t'
  3825  007D51  20                 	db	32
  3826  007D52  6D                 	db	109	;'m'
  3827  007D53  61                 	db	97	;'a'
  3828  007D54  73                 	db	115	;'s'
  3829  007D55  6B                 	db	107	;'k'
  3830  007D56  20                 	db	32
  3831  007D57  2E                 	db	46
  3832  007D58  0D                 	db	13
  3833  007D59  0A                 	db	10
  3834  007D5A  00                 	db	0
  3835  007D5B                     STR_133:
  3836  007D5B  4A                 	db	74	;'J'
  3837  007D5C  46                 	db	70	;'F'
  3838  007D5D  72                 	db	114	;'r'
  3839  007D5E  61                 	db	97	;'a'
  3840  007D5F  6E                 	db	110	;'n'
  3841  007D60  6B                 	db	107	;'k'
  3842  007D61  66                 	db	102	;'f'
  3843  007D62  75                 	db	117	;'u'
  3844  007D63  72                 	db	114	;'r'
  3845  007D64  74                 	db	116	;'t'
  3846  007D65  20                 	db	32
  3847  007D66  52                 	db	82	;'R'
  3848  007D67  53                 	db	83	;'S'
  3849  007D68  2D                 	db	45
  3850  007D69  32                 	db	50	;'2'
  3851  007D6A  33                 	db	51	;'3'
  3852  007D6B  32                 	db	50	;'2'
  3853  007D6C  0D                 	db	13
  3854  007D6D  0A                 	db	10
  3855  007D6E  00                 	db	0
  3856  007D6F                     STR_26:
  3857  007D6F  2B                 	db	43
  3858  007D70  4F                 	db	79	;'O'
  3859  007D71  4B                 	db	75	;'K'
  3860  007D72  20                 	db	32
  3861  007D73  2D                 	db	45
  3862  007D74  20                 	db	32
  3863  007D75  43                 	db	67	;'C'
  3864  007D76  6C                 	db	108	;'l'
  3865  007D77  6F                 	db	111	;'o'
  3866  007D78  73                 	db	115	;'s'
  3867  007D79  65                 	db	101	;'e'
  3868  007D7A  64                 	db	100	;'d'
  3869  007D7B  20                 	db	32
  3870  007D7C  6D                 	db	109	;'m'
  3871  007D7D  6F                 	db	111	;'o'
  3872  007D7E  64                 	db	100	;'d'
  3873  007D7F  65                 	db	101	;'e'
  3874  007D80  0D                 	db	13
  3875  007D81  0A                 	db	10
  3876  007D82  00                 	db	0
  3877  007D83                     STR_21:
  3878  007D83  2B                 	db	43
  3879  007D84  4F                 	db	79	;'O'
  3880  007D85  4B                 	db	75	;'K'
  3881  007D86  20                 	db	32
  3882  007D87  2D                 	db	45
  3883  007D88  20                 	db	32
  3884  007D89  4E                 	db	78	;'N'
  3885  007D8A  6F                 	db	111	;'o'
  3886  007D8B  72                 	db	114	;'r'
  3887  007D8C  6D                 	db	109	;'m'
  3888  007D8D  61                 	db	97	;'a'
  3889  007D8E  6C                 	db	108	;'l'
  3890  007D8F  20                 	db	32
  3891  007D90  6D                 	db	109	;'m'
  3892  007D91  6F                 	db	111	;'o'
  3893  007D92  64                 	db	100	;'d'
  3894  007D93  65                 	db	101	;'e'
  3895  007D94  0D                 	db	13
  3896  007D95  0A                 	db	10
  3897  007D96  00                 	db	0
  3898  007D97                     STR_22:
  3899  007D97  2B                 	db	43
  3900  007D98  4F                 	db	79	;'O'
  3901  007D99  4B                 	db	75	;'K'
  3902  007D9A  20                 	db	32
  3903  007D9B  2D                 	db	45
  3904  007D9C  20                 	db	32
  3905  007D9D  53                 	db	83	;'S'
  3906  007D9E  69                 	db	105	;'i'
  3907  007D9F  6C                 	db	108	;'l'
  3908  007DA0  65                 	db	101	;'e'
  3909  007DA1  6E                 	db	110	;'n'
  3910  007DA2  74                 	db	116	;'t'
  3911  007DA3  20                 	db	32
  3912  007DA4  6D                 	db	109	;'m'
  3913  007DA5  6F                 	db	111	;'o'
  3914  007DA6  64                 	db	100	;'d'
  3915  007DA7  65                 	db	101	;'e'
  3916  007DA8  0D                 	db	13
  3917  007DA9  0A                 	db	10
  3918  007DAA  00                 	db	0
  3919  007DAB                     STR_82:
  3920  007DAB  49                 	db	73	;'I'
  3921  007DAC  6E                 	db	110	;'n'
  3922  007DAD  66                 	db	102	;'f'
  3923  007DAE  6F                 	db	111	;'o'
  3924  007DAF  20                 	db	32
  3925  007DB0  66                 	db	102	;'f'
  3926  007DB1  6F                 	db	111	;'o'
  3927  007DB2  72                 	db	114	;'r'
  3928  007DB3  20                 	db	32
  3929  007DB4  6E                 	db	110	;'n'
  3930  007DB5  6F                 	db	111	;'o'
  3931  007DB6  64                 	db	100	;'d'
  3932  007DB7  65                 	db	101	;'e'
  3933  007DB8  20                 	db	32
  3934  007DB9  69                 	db	105	;'i'
  3935  007DBA  64                 	db	100	;'d'
  3936  007DBB  20                 	db	32
  3937  007DBC  3D                 	db	61	;'='
  3938  007DBD  20                 	db	32
  3939  007DBE  00                 	db	0
  3940  007DBF                     STR_250:
  3941  007DBF  46                 	db	70	;'F'
  3942  007DC0  69                 	db	105	;'i'
  3943  007DC1  72                 	db	114	;'r'
  3944  007DC2  6D                 	db	109	;'m'
  3945  007DC3  77                 	db	119	;'w'
  3946  007DC4  61                 	db	97	;'a'
  3947  007DC5  72                 	db	114	;'r'
  3948  007DC6  65                 	db	101	;'e'
  3949  007DC7  20                 	db	32
  3950  007DC8  76                 	db	118	;'v'
  3951  007DC9  65                 	db	101	;'e'
  3952  007DCA  72                 	db	114	;'r'
  3953  007DCB  73                 	db	115	;'s'
  3954  007DCC  69                 	db	105	;'i'
  3955  007DCD  6F                 	db	111	;'o'
  3956  007DCE  6E                 	db	110	;'n'
  3957  007DCF  20                 	db	32
  3958  007DD0  3D                 	db	61	;'='
  3959  007DD1  20                 	db	32
  3960  007DD2  00                 	db	0
  3961  007DD3                     STR_23:
  3962  007DD3  2B                 	db	43
  3963  007DD4  4F                 	db	79	;'O'
  3964  007DD5  4B                 	db	75	;'K'
  3965  007DD6  20                 	db	32
  3966  007DD7  2D                 	db	45
  3967  007DD8  20                 	db	32
  3968  007DD9  53                 	db	83	;'S'
  3969  007DDA  6C                 	db	108	;'l'
  3970  007DDB  65                 	db	101	;'e'
  3971  007DDC  65                 	db	101	;'e'
  3972  007DDD  70                 	db	112	;'p'
  3973  007DDE  20                 	db	32
  3974  007DDF  6D                 	db	109	;'m'
  3975  007DE0  6F                 	db	111	;'o'
  3976  007DE1  64                 	db	100	;'d'
  3977  007DE2  65                 	db	101	;'e'
  3978  007DE3  0D                 	db	13
  3979  007DE4  0A                 	db	10
  3980  007DE5  00                 	db	0
  3981  007DE6                     STR_27:
  3982  007DE6  2B                 	db	43
  3983  007DE7  4F                 	db	79	;'O'
  3984  007DE8  4B                 	db	75	;'K'
  3985  007DE9  20                 	db	32
  3986  007DEA  2D                 	db	45
  3987  007DEB  20                 	db	32
  3988  007DEC  42                 	db	66	;'B'
  3989  007DED  69                 	db	105	;'i'
  3990  007DEE  74                 	db	116	;'t'
  3991  007DEF  73                 	db	115	;'s'
  3992  007DF0  20                 	db	32
  3993  007DF1  6D                 	db	109	;'m'
  3994  007DF2  6F                 	db	111	;'o'
  3995  007DF3  64                 	db	100	;'d'
  3996  007DF4  65                 	db	101	;'e'
  3997  007DF5  0D                 	db	13
  3998  007DF6  0A                 	db	10
  3999  007DF7  00                 	db	0
  4000  007DF8                     STR_40:
  4001  007DF8  2B                 	db	43
  4002  007DF9  4F                 	db	79	;'O'
  4003  007DFA  4B                 	db	75	;'K'
  4004  007DFB  20                 	db	32
  4005  007DFC  2D                 	db	45
  4006  007DFD  20                 	db	32
  4007  007DFE  6E                 	db	110	;'n'
  4008  007DFF  6F                 	db	111	;'o'
  4009  007E00  20                 	db	32
  4010  007E01  65                 	db	101	;'e'
  4011  007E02  76                 	db	118	;'v'
  4012  007E03  65                 	db	101	;'e'
  4013  007E04  6E                 	db	110	;'n'
  4014  007E05  74                 	db	116	;'t'
  4015  007E06  73                 	db	115	;'s'
  4016  007E07  0D                 	db	13
  4017  007E08  0A                 	db	10
  4018  007E09  00                 	db	0
  4019  007E0A                     STR_160:
  4020  007E0A  53                 	db	83	;'S'
  4021  007E0B  65                 	db	101	;'e'
  4022  007E0C  6E                 	db	110	;'n'
  4023  007E0D  74                 	db	116	;'t'
  4024  007E0E  20                 	db	32
  4025  007E0F  43                 	db	67	;'C'
  4026  007E10  41                 	db	65	;'A'
  4027  007E11  4E                 	db	78	;'N'
  4028  007E12  20                 	db	32
  4029  007E13  66                 	db	102	;'f'
  4030  007E14  72                 	db	114	;'r'
  4031  007E15  61                 	db	97	;'a'
  4032  007E16  6D                 	db	109	;'m'
  4033  007E17  65                 	db	101	;'e'
  4034  007E18  73                 	db	115	;'s'
  4035  007E19  3A                 	db	58	;':'
  4036  007E1A  20                 	db	32
  4037  007E1B  00                 	db	0
  4038  007E1C                     STR_263:
  4039  007E1C  30                 	db	48	;'0'
  4040  007E1D  31                 	db	49	;'1'
  4041  007E1E  32                 	db	50	;'2'
  4042  007E1F  33                 	db	51	;'3'
  4043  007E20  34                 	db	52	;'4'
  4044  007E21  35                 	db	53	;'5'
  4045  007E22  36                 	db	54	;'6'
  4046  007E23  37                 	db	55	;'7'
  4047  007E24  38                 	db	56	;'8'
  4048  007E25  39                 	db	57	;'9'
  4049  007E26  41                 	db	65	;'A'
  4050  007E27  42                 	db	66	;'B'
  4051  007E28  43                 	db	67	;'C'
  4052  007E29  44                 	db	68	;'D'
  4053  007E2A  45                 	db	69	;'E'
  4054  007E2B  46                 	db	70	;'F'
  4055  007E2C  00                 	db	0
  4056  007E2D                     STR_264:
  4057  007E2D  30                 	db	48	;'0'
  4058  007E2E  31                 	db	49	;'1'
  4059  007E2F  32                 	db	50	;'2'
  4060  007E30  33                 	db	51	;'3'
  4061  007E31  34                 	db	52	;'4'
  4062  007E32  35                 	db	53	;'5'
  4063  007E33  36                 	db	54	;'6'
  4064  007E34  37                 	db	55	;'7'
  4065  007E35  38                 	db	56	;'8'
  4066  007E36  39                 	db	57	;'9'
  4067  007E37  61                 	db	97	;'a'
  4068  007E38  62                 	db	98	;'b'
  4069  007E39  63                 	db	99	;'c'
  4070  007E3A  64                 	db	100	;'d'
  4071  007E3B  65                 	db	101	;'e'
  4072  007E3C  66                 	db	102	;'f'
  4073  007E3D  00                 	db	0
  4074  007E3E                     STR_164:
  4075  007E3E  53                 	db	83	;'S'
  4076  007E3F  65                 	db	101	;'e'
  4077  007E40  6E                 	db	110	;'n'
  4078  007E41  74                 	db	116	;'t'
  4079  007E42  20                 	db	32
  4080  007E43  43                 	db	67	;'C'
  4081  007E44  41                 	db	65	;'A'
  4082  007E45  4E                 	db	78	;'N'
  4083  007E46  20                 	db	32
  4084  007E47  62                 	db	98	;'b'
  4085  007E48  79                 	db	121	;'y'
  4086  007E49  74                 	db	116	;'t'
  4087  007E4A  65                 	db	101	;'e'
  4088  007E4B  73                 	db	115	;'s'
  4089  007E4C  3A                 	db	58	;':'
  4090  007E4D  20                 	db	32
  4091  007E4E  00                 	db	0
  4092  007E4F                     STR_242:
  4093  007E4F  20                 	db	32
  4094  007E50  6E                 	db	110	;'n'
  4095  007E51  6F                 	db	111	;'o'
  4096  007E52  64                 	db	100	;'d'
  4097  007E53  65                 	db	101	;'e'
  4098  007E54  73                 	db	115	;'s'
  4099  007E55  20                 	db	32
  4100  007E56  66                 	db	102	;'f'
  4101  007E57  6F                 	db	111	;'o'
  4102  007E58  75                 	db	117	;'u'
  4103  007E59  6E                 	db	110	;'n'
  4104  007E5A  64                 	db	100	;'d'
  4105  007E5B  0D                 	db	13
  4106  007E5C  0A                 	db	10
  4107  007E5D  00                 	db	0
  4108  007E5E                     STR_55:
  4109  007E5E  56                 	db	86	;'V'
  4110  007E5F  61                 	db	97	;'a'
  4111  007E60  6C                 	db	108	;'l'
  4112  007E61  75                 	db	117	;'u'
  4113  007E62  65                 	db	101	;'e'
  4114  007E63  20                 	db	32
  4115  007E64  66                 	db	102	;'f'
  4116  007E65  6F                 	db	111	;'o'
  4117  007E66  72                 	db	114	;'r'
  4118  007E67  20                 	db	32
  4119  007E68  72                 	db	114	;'r'
  4120  007E69  65                 	db	101	;'e'
  4121  007E6A  67                 	db	103	;'g'
  4122  007E6B  20                 	db	32
  4123  007E6C  00                 	db	0
  4124  007E6D                     STR_248:
  4125  007E6D  4D                 	db	77	;'M'
  4126  007E6E  44                 	db	68	;'D'
  4127  007E6F  46                 	db	70	;'F'
  4128  007E70  20                 	db	32
  4129  007E71  3D                 	db	61	;'='
  4130  007E72  20                 	db	32
  4131  007E73  68                 	db	104	;'h'
  4132  007E74  74                 	db	116	;'t'
  4133  007E75  74                 	db	116	;'t'
  4134  007E76  70                 	db	112	;'p'
  4135  007E77  3A                 	db	58	;':'
  4136  007E78  2F                 	db	47
  4137  007E79  2F                 	db	47
  4138  007E7A  00                 	db	0
  4139  007E7B                     STR_258:
  4140  007E7B  56                 	db	86	;'V'
  4141  007E7C  53                 	db	83	;'S'
  4142  007E7D  43                 	db	67	;'C'
  4143  007E7E  50                 	db	80	;'P'
  4144  007E7F  20                 	db	32
  4145  007E80  44                 	db	68	;'D'
  4146  007E81  72                 	db	114	;'r'
  4147  007E82  69                 	db	105	;'i'
  4148  007E83  76                 	db	118	;'v'
  4149  007E84  65                 	db	101	;'e'
  4150  007E85  72                 	db	114	;'r'
  4151  007E86  00                 	db	0
  4152  007E87                     STR_118:
  4153  007E87  52                 	db	82	;'R'
  4154  007E88  57                 	db	87	;'W'
  4155  007E89  54                 	db	84	;'T'
  4156  007E8A  49                 	db	73	;'I'
  4157  007E8B  4D                 	db	77	;'M'
  4158  007E8C  45                 	db	69	;'E'
  4159  007E8D  4F                 	db	79	;'O'
  4160  007E8E  55                 	db	85	;'U'
  4161  007E8F  54                 	db	84	;'T'
  4162  007E90  20                 	db	32
  4163  007E91  00                 	db	0
  4164  007E92                     STR_158:
  4165  007E92  2C                 	db	44
  4166  007E93  44                 	db	68	;'D'
  4167  007E94  61                 	db	97	;'a'
  4168  007E95  74                 	db	116	;'t'
  4169  007E96  61                 	db	97	;'a'
  4170  007E97  3D                 	db	61	;'='
  4171  007E98  6E                 	db	110	;'n'
  4172  007E99  6F                 	db	111	;'o'
  4173  007E9A  6E                 	db	110	;'n'
  4174  007E9B  65                 	db	101	;'e'
  4175  007E9C  00                 	db	0
  4176  007E9D                     STR_254:
  4177  007E9D  56                 	db	86	;'V'
  4178  007E9E  65                 	db	101	;'e'
  4179  007E9F  72                 	db	114	;'r'
  4180  007EA0  73                 	db	115	;'s'
  4181  007EA1  69                 	db	105	;'i'
  4182  007EA2  6F                 	db	111	;'o'
  4183  007EA3  6E                 	db	110	;'n'
  4184  007EA4  3A                 	db	58	;':'
  4185  007EA5  20                 	db	32
  4186  007EA6  00                 	db	0
  4187  007EA7                     STR_260:
  4188  007EA7  56                 	db	86	;'V'
  4189  007EA8  53                 	db	83	;'S'
  4190  007EA9  43                 	db	67	;'C'
  4191  007EAA  50                 	db	80	;'P'
  4192  007EAB  20                 	db	32
  4193  007EAC  4E                 	db	78	;'N'
  4194  007EAD  6F                 	db	111	;'o'
  4195  007EAE  64                 	db	100	;'d'
  4196  007EAF  65                 	db	101	;'e'
  4197  007EB0  00                 	db	0
  4198  007EB1                     STR_259:
  4199  007EB1  53                 	db	83	;'S'
  4200  007EB2  4C                 	db	76	;'L'
  4201  007EB3  20                 	db	32
  4202  007EB4  44                 	db	68	;'D'
  4203  007EB5  72                 	db	114	;'r'
  4204  007EB6  69                 	db	105	;'i'
  4205  007EB7  76                 	db	118	;'v'
  4206  007EB8  65                 	db	101	;'e'
  4207  007EB9  72                 	db	114	;'r'
  4208  007EBA  00                 	db	0
  4209  007EBB                     STR_120:
  4210  007EBB  53                 	db	83	;'S'
  4211  007EBC  54                 	db	84	;'T'
  4212  007EBD  41                 	db	65	;'A'
  4213  007EBE  52                 	db	82	;'R'
  4214  007EBF  54                 	db	84	;'T'
  4215  007EC0  49                 	db	73	;'I'
  4216  007EC1  46                 	db	70	;'F'
  4217  007EC2  20                 	db	32
  4218  007EC3  00                 	db	0
  4219  007EC4                     STR_148:
  4220  007EC4  2C                 	db	44
  4221  007EC5  6E                 	db	110	;'n'
  4222  007EC6  6F                 	db	111	;'o'
  4223  007EC7  64                 	db	100	;'d'
  4224  007EC8  65                 	db	101	;'e'
  4225  007EC9  69                 	db	105	;'i'
  4226  007ECA  64                 	db	100	;'d'
  4227  007ECB  3D                 	db	61	;'='
  4228  007ECC  00                 	db	0
  4229  007ECD                     STR_14:
  4230  007ECD  4C                 	db	76	;'L'
  4231  007ECE  4F                 	db	79	;'O'
  4232  007ECF  4F                 	db	79	;'O'
  4233  007ED0  50                 	db	80	;'P'
  4234  007ED1  42                 	db	66	;'B'
  4235  007ED2  41                 	db	65	;'A'
  4236  007ED3  43                 	db	67	;'C'
  4237  007ED4  4B                 	db	75	;'K'
  4238  007ED5  00                 	db	0
  4239  007ED6                     STR_134:
  4240  007ED6  56                 	db	86	;'V'
  4241  007ED7  31                 	db	49	;'1'
  4242  007ED8  30                 	db	48	;'0'
  4243  007ED9  31                 	db	49	;'1'
  4244  007EDA  31                 	db	49	;'1'
  4245  007EDB  0D                 	db	13
  4246  007EDC  0A                 	db	10
  4247  007EDD  00                 	db	0
  4248  007EDE                     STR_135:
  4249  007EDE  4E                 	db	78	;'N'
  4250  007EDF  31                 	db	49	;'1'
  4251  007EE0  39                 	db	57	;'9'
  4252  007EE1  37                 	db	55	;'7'
  4253  007EE2  37                 	db	55	;'7'
  4254  007EE3  0D                 	db	13
  4255  007EE4  0A                 	db	10
  4256  007EE5  00                 	db	0
  4257  007EE6                     STR_243:
  4258  007EE6  47                 	db	71	;'G'
  4259  007EE7  55                 	db	85	;'U'
  4260  007EE8  49                 	db	73	;'I'
  4261  007EE9  44                 	db	68	;'D'
  4262  007EEA  20                 	db	32
  4263  007EEB  3D                 	db	61	;'='
  4264  007EEC  20                 	db	32
  4265  007EED  00                 	db	0
  4266  007EEE                     STR_128:
  4267  007EEE  46                 	db	70	;'F'
  4268  007EEF  49                 	db	73	;'I'
  4269  007EF0  4C                 	db	76	;'L'
  4270  007EF1  54                 	db	84	;'T'
  4271  007EF2  45                 	db	69	;'E'
  4272  007EF3  52                 	db	82	;'R'
  4273  007EF4  20                 	db	32
  4274  007EF5  00                 	db	0
  4275  007EF6                     STR_142:
  4276  007EF6  2C                 	db	44
  4277  007EF7  63                 	db	99	;'c'
  4278  007EF8  6C                 	db	108	;'l'
  4279  007EF9  61                 	db	97	;'a'
  4280  007EFA  73                 	db	115	;'s'
  4281  007EFB  73                 	db	115	;'s'
  4282  007EFC  3D                 	db	61	;'='
  4283  007EFD  00                 	db	0
  4284  007EFE                     STR_122:
  4285  007EFE  56                 	db	86	;'V'
  4286  007EFF  45                 	db	69	;'E'
  4287  007F00  52                 	db	82	;'R'
  4288  007F01  42                 	db	66	;'B'
  4289  007F02  4F                 	db	79	;'O'
  4290  007F03  53                 	db	83	;'S'
  4291  007F04  45                 	db	69	;'E'
  4292  007F05  00                 	db	0
  4293  007F06                     STR_116:
  4294  007F06  44                 	db	68	;'D'
  4295  007F07  45                 	db	69	;'E'
  4296  007F08  43                 	db	67	;'C'
  4297  007F09  49                 	db	73	;'I'
  4298  007F0A  4D                 	db	77	;'M'
  4299  007F0B  41                 	db	65	;'A'
  4300  007F0C  4C                 	db	76	;'L'
  4301  007F0D  00                 	db	0
  4302  007F0E                     STR_18:
  4303  007F0E  56                 	db	86	;'V'
  4304  007F0F  45                 	db	69	;'E'
  4305  007F10  52                 	db	82	;'R'
  4306  007F11  53                 	db	83	;'S'
  4307  007F12  49                 	db	73	;'I'
  4308  007F13  4F                 	db	79	;'O'
  4309  007F14  4E                 	db	78	;'N'
  4310  007F15  00                 	db	0
  4311  007F16                     STR_177:
  4312  007F16  30                 	db	48	;'0'
  4313  007F17  78                 	db	120	;'x'
  4314  007F18  25                 	db	37
  4315  007F19  30                 	db	48	;'0'
  4316  007F1A  38                 	db	56	;'8'
  4317  007F1B  6C                 	db	108	;'l'
  4318  007F1C  58                 	db	88	;'X'
  4319  007F1D  00                 	db	0
  4320  007F1E                     STR_257:
  4321  007F1E  56                 	db	86	;'V'
  4322  007F1F  65                 	db	101	;'e'
  4323  007F20  72                 	db	114	;'r'
  4324  007F21  62                 	db	98	;'b'
  4325  007F22  6F                 	db	111	;'o'
  4326  007F23  73                 	db	115	;'s'
  4327  007F24  65                 	db	101	;'e'
  4328  007F25  00                 	db	0
  4329  007F26                     STR_256:
  4330  007F26  4D                 	db	77	;'M'
  4331  007F27  6F                 	db	111	;'o'
  4332  007F28  64                 	db	100	;'d'
  4333  007F29  65                 	db	101	;'e'
  4334  007F2A  3A                 	db	58	;':'
  4335  007F2B  20                 	db	32
  4336  007F2C  00                 	db	0
  4337  007F2D                     STR_154:
  4338  007F2D  2C                 	db	44
  4339  007F2E  44                 	db	68	;'D'
  4340  007F2F  61                 	db	97	;'a'
  4341  007F30  74                 	db	116	;'t'
  4342  007F31  61                 	db	97	;'a'
  4343  007F32  3D                 	db	61	;'='
  4344  007F33  00                 	db	0
  4345  007F34                     STR_145:
  4346  007F34  2C                 	db	44
  4347  007F35  74                 	db	116	;'t'
  4348  007F36  79                 	db	121	;'y'
  4349  007F37  70                 	db	112	;'p'
  4350  007F38  65                 	db	101	;'e'
  4351  007F39  3D                 	db	61	;'='
  4352  007F3A  00                 	db	0
  4353  007F3B                     STR_151:
  4354  007F3B  2C                 	db	44
  4355  007F3C  73                 	db	115	;'s'
  4356  007F3D  69                 	db	105	;'i'
  4357  007F3E  7A                 	db	122	;'z'
  4358  007F3F  65                 	db	101	;'e'
  4359  007F40  3D                 	db	61	;'='
  4360  007F41  00                 	db	0
  4361  007F42                     STR_139:
  4362  007F42  3C                 	db	60	;'<'
  4363  007F43  50                 	db	80	;'P'
  4364  007F44  72                 	db	114	;'r'
  4365  007F45  69                 	db	105	;'i'
  4366  007F46  6F                 	db	111	;'o'
  4367  007F47  3D                 	db	61	;'='
  4368  007F48  00                 	db	0
  4369  007F49                     STR_20:
  4370  007F49  49                 	db	73	;'I'
  4371  007F4A  46                 	db	70	;'F'
  4372  007F4B  4D                 	db	77	;'M'
  4373  007F4C  4F                 	db	79	;'O'
  4374  007F4D  44                 	db	68	;'D'
  4375  007F4E  45                 	db	69	;'E'
  4376  007F4F  00                 	db	0
  4377  007F50                     STR_16:
  4378  007F50  4C                 	db	76	;'L'
  4379  007F51  49                 	db	73	;'I'
  4380  007F52  53                 	db	83	;'S'
  4381  007F53  54                 	db	84	;'T'
  4382  007F54  45                 	db	69	;'E'
  4383  007F55  4E                 	db	78	;'N'
  4384  007F56  00                 	db	0
  4385  007F57                     STR_87:
  4386  007F57  46                 	db	70	;'F'
  4387  007F58  49                 	db	73	;'I'
  4388  007F59  4C                 	db	76	;'L'
  4389  007F5A  54                 	db	84	;'T'
  4390  007F5B  45                 	db	69	;'E'
  4391  007F5C  52                 	db	82	;'R'
  4392  007F5D  00                 	db	0
  4393  007F5E                     STR_10:
  4394  007F5E  53                 	db	83	;'S'
  4395  007F5F  49                 	db	73	;'I'
  4396  007F60  4C                 	db	76	;'L'
  4397  007F61  45                 	db	69	;'E'
  4398  007F62  4E                 	db	78	;'N'
  4399  007F63  54                 	db	84	;'T'
  4400  007F64  00                 	db	0
  4401  007F65                     STR_56:
  4402  007F65  30                 	db	48	;'0'
  4403  007F66  78                 	db	120	;'x'
  4404  007F67  25                 	db	37
  4405  007F68  30                 	db	48	;'0'
  4406  007F69  32                 	db	50	;'2'
  4407  007F6A  58                 	db	88	;'X'
  4408  007F6B  00                 	db	0
  4409  007F6C                     STR_143:
  4410  007F6C  30                 	db	48	;'0'
  4411  007F6D  78                 	db	120	;'x'
  4412  007F6E  25                 	db	37
  4413  007F6F  30                 	db	48	;'0'
  4414  007F70  34                 	db	52	;'4'
  4415  007F71  58                 	db	88	;'X'
  4416  007F72  00                 	db	0
  4417  007F73                     STR_161:
  4418  007F73  30                 	db	48	;'0'
  4419  007F74  78                 	db	120	;'x'
  4420  007F75  25                 	db	37
  4421  007F76  30                 	db	48	;'0'
  4422  007F77  38                 	db	56	;'8'
  4423  007F78  58                 	db	88	;'X'
  4424  007F79  00                 	db	0
  4425  007F7A                     STR_136:
  4426  007F7A  46                 	db	70	;'F'
  4427  007F7B  30                 	db	48	;'0'
  4428  007F7C  30                 	db	48	;'0'
  4429  007F7D  0D                 	db	13
  4430  007F7E  0A                 	db	10
  4431  007F7F  00                 	db	0
  4432  007F80                     STR_9:
  4433  007F80  2B                 	db	43
  4434  007F81  4F                 	db	79	;'O'
  4435  007F82  4B                 	db	75	;'K'
  4436  007F83  0D                 	db	13
  4437  007F84  0A                 	db	10
  4438  007F85  00                 	db	0
  4439  007F86                     STR_121:
  4440  007F86  4D                 	db	77	;'M'
  4441  007F87  4F                 	db	79	;'O'
  4442  007F88  44                 	db	68	;'D'
  4443  007F89  45                 	db	69	;'E'
  4444  007F8A  20                 	db	32
  4445  007F8B  00                 	db	0
  4446  007F8C                     STR_129:
  4447  007F8C  4D                 	db	77	;'M'
  4448  007F8D  41                 	db	65	;'A'
  4449  007F8E  53                 	db	83	;'S'
  4450  007F8F  4B                 	db	75	;'K'
  4451  007F90  20                 	db	32
  4452  007F91  00                 	db	0
  4453  007F92                     STR_12:
  4454  007F92  43                 	db	67	;'C'
  4455  007F93  4C                 	db	76	;'L'
  4456  007F94  4F                 	db	79	;'O'
  4457  007F95  53                 	db	83	;'S'
  4458  007F96  45                 	db	69	;'E'
  4459  007F97  00                 	db	0
  4460  007F98                     STR_126:
  4461  007F98  53                 	db	83	;'S'
  4462  007F99  4C                 	db	76	;'L'
  4463  007F9A  43                 	db	67	;'C'
  4464  007F9B  41                 	db	65	;'A'
  4465  007F9C  4E                 	db	78	;'N'
  4466  007F9D  00                 	db	0
  4467  007F9E                     STR_113:
  4468  007F9E  53                 	db	83	;'S'
  4469  007F9F  45                 	db	69	;'E'
  4470  007FA0  54                 	db	84	;'T'
  4471  007FA1  20                 	db	32
  4472  007FA2  00                 	db	0
  4473  007FA3                     STR_47:
  4474  007FA3  46                 	db	70	;'F'
  4475  007FA4  49                 	db	73	;'I'
  4476  007FA5  4E                 	db	78	;'N'
  4477  007FA6  44                 	db	68	;'D'
  4478  007FA7  00                 	db	0
  4479  007FA8                     STR_49:
  4480  007FA8  52                 	db	82	;'R'
  4481  007FA9  52                 	db	82	;'R'
  4482  007FAA  45                 	db	69	;'E'
  4483  007FAB  47                 	db	71	;'G'
  4484  007FAC  00                 	db	0
  4485  007FAD                     STR_72:
  4486  007FAD  57                 	db	87	;'W'
  4487  007FAE  52                 	db	82	;'R'
  4488  007FAF  45                 	db	69	;'E'
  4489  007FB0  47                 	db	71	;'G'
  4490  007FB1  00                 	db	0
  4491  007FB2                     STR_100:
  4492  007FB2  4D                 	db	77	;'M'
  4493  007FB3  41                 	db	65	;'A'
  4494  007FB4  53                 	db	83	;'S'
  4495  007FB5  4B                 	db	75	;'K'
  4496  007FB6  00                 	db	0
  4497  007FB7                     STR_8:
  4498  007FB7  4F                 	db	79	;'O'
  4499  007FB8  50                 	db	80	;'P'
  4500  007FB9  45                 	db	69	;'E'
  4501  007FBA  4E                 	db	78	;'N'
  4502  007FBB  00                 	db	0
  4503  007FBC                     STR_81:
  4504  007FBC  49                 	db	73	;'I'
  4505  007FBD  4E                 	db	78	;'N'
  4506  007FBE  46                 	db	70	;'F'
  4507  007FBF  4F                 	db	79	;'O'
  4508  007FC0  00                 	db	0
  4509  007FC1                     STR_124:
  4510  007FC1  56                 	db	86	;'V'
  4511  007FC2  53                 	db	83	;'S'
  4512  007FC3  43                 	db	67	;'C'
  4513  007FC4  50                 	db	80	;'P'
  4514  007FC5  00                 	db	0
  4515  007FC6                     STR_45:
  4516  007FC6  48                 	db	72	;'H'
  4517  007FC7  45                 	db	69	;'E'
  4518  007FC8  4C                 	db	76	;'L'
  4519  007FC9  50                 	db	80	;'P'
  4520  007FCA  00                 	db	0
  4521  007FCB                     STR_41:
  4522  007FCB  53                 	db	83	;'S'
  4523  007FCC  54                 	db	84	;'T'
  4524  007FCD  41                 	db	65	;'A'
  4525  007FCE  54                 	db	84	;'T'
  4526  007FCF  00                 	db	0
  4527  007FD0                     STR_6:
  4528  007FD0  42                 	db	66	;'B'
  4529  007FD1  4F                 	db	79	;'O'
  4530  007FD2  4F                 	db	79	;'O'
  4531  007FD3  54                 	db	84	;'T'
  4532  007FD4  00                 	db	0
  4533  007FD5                     STR_159:
  4534  007FD5  3E                 	db	62	;'>'
  4535  007FD6  0D                 	db	13
  4536  007FD7  0A                 	db	10
  4537  007FD8  00                 	db	0
  4538  007FD9                     STR_43:
  4539  007FD9  45                 	db	69	;'E'
  4540  007FDA  52                 	db	82	;'R'
  4541  007FDB  52                 	db	82	;'R'
  4542  007FDC  00                 	db	0
  4543  007FDD                     STR_114:
  4544  007FDD  48                 	db	72	;'H'
  4545  007FDE  45                 	db	69	;'E'
  4546  007FDF  58                 	db	88	;'X'
  4547  007FE0  00                 	db	0
  4548  007FE1                     STR_162:
  4549  007FE1  25                 	db	37
  4550  007FE2  6C                 	db	108	;'l'
  4551  007FE3  75                 	db	117	;'u'
  4552  007FE4  00                 	db	0
  4553  007FE5                     STR_245:
  4554  007FE5  2D                 	db	45
  4555  007FE6  2D                 	db	45
  4556  007FE7  00                 	db	0
  4557  007FE8                     STR_38:
  4558  007FE8  52                 	db	82	;'R'
  4559  007FE9  58                 	db	88	;'X'
  4560  007FEA  00                 	db	0
  4561  007FEB                     STR_29:
  4562  007FEB  54                 	db	84	;'T'
  4563  007FEC  58                 	db	88	;'X'
  4564  007FED  00                 	db	0
  4565  007FEE                     STR_57:
  4566  007FEE  25                 	db	37
  4567  007FEF  64                 	db	100	;'d'
  4568  007FF0  00                 	db	0
  4569  007FF1                     STR_138:
  4570  007FF1  07                 	db	7
  4571  007FF2  00                 	db	0
  4572  007FF3                     STR_137:
  4573  007FF3  0D                 	db	13
  4574  007FF4  00                 	db	0
  4575  007FF5                     STR_30:
  4576  007FF5  2C                 	db	44
  4577  007FF6  00                 	db	0
  4578  007FF7                     STR_252:
  4579  007FF7  2E                 	db	46
  4580  007FF8  00                 	db	0
  4581  007FF9                     STR_244:
  4582  007FF9  30                 	db	48	;'0'
  4583  007FFA  00                 	db	0
  4584  007FFB                     STR_246:
  4585  007FFB  3A                 	db	58	;':'
  4586  007FFC  00                 	db	0
  4587  007FFD                     STR_251:
  4588  007FFD  3F                 	db	63	;'?'
  4589  007FFE  00                 	db	0
  4590  007FFF                     __end_of__stringdata:
  4591                           	opt stack 0
  4592                           
  4593                           ; #config settings
  4594  007FFF  00                 	db	0	; dummy byte at the end
  4595  0000                     tblptru	equ	0xFF8
  4596                           tblptrh	equ	0xFF7
  4597                           tblptrl	equ	0xFF6
  4598                           tablat	equ	0xFF5
  4599                           prodh	equ	0xFF4
  4600                           prodl	equ	0xFF3
  4601                           intcon	equ	0xFF2
  4602                           indf0	equ	0xFEF
  4603                           fsr0h	equ	0xFEA
  4604                           fsr0l	equ	0xFE9
  4605                           wreg	equ	0xFE8
  4606                           indf1	equ	0xFE7
  4607                           postinc1	equ	0xFE6
  4608                           postdec1	equ	0xFE5
  4609                           fsr1h	equ	0xFE2
  4610                           fsr1l	equ	0xFE1
  4611                           indf2	equ	0xFDF
  4612                           postinc2	equ	0xFDE
  4613                           postdec2	equ	0xFDD
  4614                           plusw2	equ	0xFDB
  4615                           fsr2h	equ	0xFDA
  4616                           fsr2l	equ	0xFD9
  4617                           status	equ	0xFD8
  4618                           
  4619                           	psect	nvBANK1
  4620  0001E4                     __pnvBANK1:
  4621                           	opt stack 0
  4622  0001E4                     _caps:
  4623                           	opt stack 0
  4624  0001E4                     	ds	2
  4625                           tblptru	equ	0xFF8
  4626                           tblptrh	equ	0xFF7
  4627                           tblptrl	equ	0xFF6
  4628                           tablat	equ	0xFF5
  4629                           prodh	equ	0xFF4
  4630                           prodl	equ	0xFF3
  4631                           intcon	equ	0xFF2
  4632                           indf0	equ	0xFEF
  4633                           fsr0h	equ	0xFEA
  4634                           fsr0l	equ	0xFE9
  4635                           wreg	equ	0xFE8
  4636                           indf1	equ	0xFE7
  4637                           postinc1	equ	0xFE6
  4638                           postdec1	equ	0xFE5
  4639                           fsr1h	equ	0xFE2
  4640                           fsr1l	equ	0xFE1
  4641                           indf2	equ	0xFDF
  4642                           postinc2	equ	0xFDE
  4643                           postdec2	equ	0xFDD
  4644                           plusw2	equ	0xFDB
  4645                           fsr2h	equ	0xFDA
  4646                           fsr2l	equ	0xFD9
  4647                           status	equ	0xFD8
  4648                           
  4649                           	psect	cinit
  4650  005018                     __pcinit:
  4651                           	opt stack 0
  4652  005018                     start_initialization:
  4653                           	opt stack 0
  4654  005018                     __initialization:
  4655                           	opt stack 0
  4656                           
  4657                           ; Clear objects allocated to BIGRAM (494 bytes)
  4658  005018  EE04  F000         	lfsr	0,__pbssBIGRAM
  4659  00501C  EE11 F0EE          	lfsr	1,494
  4660  005020                     clear_0:
  4661  005020  6AEE               	clrf	postinc0,c
  4662  005022  50E5               	movf	postdec1,w,c
  4663  005024  50E1               	movf	fsr1l,w,c
  4664  005026  E1FC               	bnz	clear_0
  4665  005028  50E2               	movf	fsr1h,w,c
  4666  00502A  E1FA               	bnz	clear_0
  4667                           
  4668                           ; Clear objects allocated to BANK3 (256 bytes)
  4669  00502C  EE03  F000         	lfsr	0,__pbssBANK3
  4670  005030  EE11 F000          	lfsr	1,256
  4671  005034                     clear_1:
  4672  005034  6AEE               	clrf	postinc0,c
  4673  005036  50E5               	movf	postdec1,w,c
  4674  005038  50E1               	movf	fsr1l,w,c
  4675  00503A  E1FC               	bnz	clear_1
  4676  00503C  50E2               	movf	fsr1h,w,c
  4677  00503E  E1FA               	bnz	clear_1
  4678                           
  4679                           ; Clear objects allocated to BANK2 (128 bytes)
  4680  005040  EE02  F000         	lfsr	0,__pbssBANK2
  4681  005044  0E80               	movlw	128
  4682  005046                     clear_2:
  4683  005046  6AEE               	clrf	postinc0,c
  4684  005048  06E8               	decf	wreg,f,c
  4685  00504A  E1FD               	bnz	clear_2
  4686                           
  4687                           ; Clear objects allocated to BANK1 (228 bytes)
  4688  00504C  EE01  F000         	lfsr	0,__pbssBANK1
  4689  005050  0EE4               	movlw	228
  4690  005052                     clear_3:
  4691  005052  6AEE               	clrf	postinc0,c
  4692  005054  06E8               	decf	wreg,f,c
  4693  005056  E1FD               	bnz	clear_3
  4694                           
  4695                           ; Clear objects allocated to BANK0 (10 bytes)
  4696  005058  EE00  F0DC         	lfsr	0,__pbssBANK0
  4697  00505C  0E0A               	movlw	10
  4698  00505E                     clear_4:
  4699  00505E  6AEE               	clrf	postinc0,c
  4700  005060  06E8               	decf	wreg,f,c
  4701  005062  E1FD               	bnz	clear_4
  4702                           
  4703                           ; Clear objects allocated to COMRAM (28 bytes)
  4704  005064  EE00  F027         	lfsr	0,__pbssCOMRAM
  4705  005068  0E1C               	movlw	28
  4706  00506A                     clear_5:
  4707  00506A  6AEE               	clrf	postinc0,c
  4708  00506C  06E8               	decf	wreg,f,c
  4709  00506E  E1FD               	bnz	clear_5
  4710  005070                     end_of_initialization:
  4711                           	opt stack 0
  4712  005070                     __end_of__initialization:
  4713                           	opt stack 0
  4714  005070  0E00               	movlw	low (__Lmediumconst shr (0+16))
  4715  005072  6EF8               	movwf	tblptru,c
  4716  005074  0100               	movlb	0
  4717  005076  EF62  F019         	goto	_main	;jump to C main() function
  4718                           tblptru	equ	0xFF8
  4719                           tblptrh	equ	0xFF7
  4720                           tblptrl	equ	0xFF6
  4721                           tablat	equ	0xFF5
  4722                           prodh	equ	0xFF4
  4723                           prodl	equ	0xFF3
  4724                           intcon	equ	0xFF2
  4725                           indf0	equ	0xFEF
  4726                           postinc0	equ	0xFEE
  4727                           fsr0h	equ	0xFEA
  4728                           fsr0l	equ	0xFE9
  4729                           wreg	equ	0xFE8
  4730                           indf1	equ	0xFE7
  4731                           postinc1	equ	0xFE6
  4732                           postdec1	equ	0xFE5
  4733                           fsr1h	equ	0xFE2
  4734                           fsr1l	equ	0xFE1
  4735                           indf2	equ	0xFDF
  4736                           postinc2	equ	0xFDE
  4737                           postdec2	equ	0xFDD
  4738                           plusw2	equ	0xFDB
  4739                           fsr2h	equ	0xFDA
  4740                           fsr2l	equ	0xFD9
  4741                           status	equ	0xFD8
  4742                           
  4743                           	psect	bssCOMRAM
  4744  000027                     __pbssCOMRAM:
  4745                           	opt stack 0
  4746  000027                     _timekeeper:
  4747                           	opt stack 0
  4748  000027                     	ds	4
  4749  00002B                     _made_table:
  4750                           	opt stack 0
  4751  00002B                     	ds	2
  4752  00002D                     _status_led_cnt:
  4753                           	opt stack 0
  4754  00002D                     	ds	2
  4755  00002F                     strtok@sp:
  4756                           	opt stack 0
  4757  00002F                     	ds	2
  4758  000031                     _USART_Status:
  4759                           	opt stack 0
  4760  000031                     	ds	1
  4761  000032                     __ECANRxFilterHitInfo:
  4762                           	opt stack 0
  4763  000032                     	ds	1
  4764  000033                     _bDLE:
  4765                           	opt stack 0
  4766  000033                     	ds	1
  4767  000034                     _bInitiated:
  4768                           	opt stack 0
  4769  000034                     	ds	1
  4770  000035                     _fifo_canrxcount:
  4771                           	opt stack 0
  4772  000035                     	ds	1
  4773  000036                     _ledFunctionality:
  4774                           	opt stack 0
  4775  000036                     	ds	1
  4776  000037                     _nTimeStamp:
  4777                           	opt stack 0
  4778  000037                     	ds	1
  4779  000038                     _sequencyno:
  4780                           	opt stack 0
  4781  000038                     	ds	1
  4782  000039                     _stateVscpDriver:
  4783                           	opt stack 0
  4784  000039                     	ds	1
  4785  00003A                     _id:
  4786                           	opt stack 0
  4787  00003A                     	ds	4
  4788  00003E                     _vscpClass:
  4789                           	opt stack 0
  4790  00003E                     	ds	2
  4791  000040                     _c:
  4792                           	opt stack 0
  4793  000040                     	ds	1
  4794  000041                     _dlc:
  4795                           	opt stack 0
  4796  000041                     	ds	1
  4797  000042                     _flags:
  4798                           	opt stack 0
  4799  000042                     	ds	1
  4800                           tblptru	equ	0xFF8
  4801                           tblptrh	equ	0xFF7
  4802                           tblptrl	equ	0xFF6
  4803                           tablat	equ	0xFF5
  4804                           prodh	equ	0xFF4
  4805                           prodl	equ	0xFF3
  4806                           intcon	equ	0xFF2
  4807                           indf0	equ	0xFEF
  4808                           postinc0	equ	0xFEE
  4809                           fsr0h	equ	0xFEA
  4810                           fsr0l	equ	0xFE9
  4811                           wreg	equ	0xFE8
  4812                           indf1	equ	0xFE7
  4813                           postinc1	equ	0xFE6
  4814                           postdec1	equ	0xFE5
  4815                           fsr1h	equ	0xFE2
  4816                           fsr1l	equ	0xFE1
  4817                           indf2	equ	0xFDF
  4818                           postinc2	equ	0xFDE
  4819                           postdec2	equ	0xFDD
  4820                           plusw2	equ	0xFDB
  4821                           fsr2h	equ	0xFDA
  4822                           fsr2l	equ	0xFD9
  4823                           status	equ	0xFD8
  4824                           
  4825                           	psect	bssBANK0
  4826  0000DC                     __pbssBANK0:
  4827                           	opt stack 0
  4828  0000DC                     _bHex:
  4829                           	opt stack 0
  4830  0000DC                     	ds	1
  4831  0000DD                     _bOpen:
  4832                           	opt stack 0
  4833  0000DD                     	ds	1
  4834  0000DE                     _bSilent:
  4835                           	opt stack 0
  4836  0000DE                     	ds	1
  4837  0000DF                     _mode:
  4838                           	opt stack 0
  4839  0000DF                     	ds	1
  4840  0000E0                     _pos:
  4841                           	opt stack 0
  4842  0000E0                     	ds	1
  4843  0000E1                     _rwtimeout:
  4844                           	opt stack 0
  4845  0000E1                     	ds	1
  4846  0000E2                     _vscpNodeId:
  4847                           	opt stack 0
  4848  0000E2                     	ds	1
  4849  0000E3                     _vscpPriority:
  4850                           	opt stack 0
  4851  0000E3                     	ds	1
  4852  0000E4                     _vscpSize:
  4853                           	opt stack 0
  4854  0000E4                     	ds	1
  4855  0000E5                     _vscpType:
  4856                           	opt stack 0
  4857  0000E5                     	ds	1
  4858                           tblptru	equ	0xFF8
  4859                           tblptrh	equ	0xFF7
  4860                           tblptrl	equ	0xFF6
  4861                           tablat	equ	0xFF5
  4862                           prodh	equ	0xFF4
  4863                           prodl	equ	0xFF3
  4864                           intcon	equ	0xFF2
  4865                           indf0	equ	0xFEF
  4866                           postinc0	equ	0xFEE
  4867                           fsr0h	equ	0xFEA
  4868                           fsr0l	equ	0xFE9
  4869                           wreg	equ	0xFE8
  4870                           indf1	equ	0xFE7
  4871                           postinc1	equ	0xFE6
  4872                           postdec1	equ	0xFE5
  4873                           fsr1h	equ	0xFE2
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           postinc2	equ	0xFDE
  4877                           postdec2	equ	0xFDD
  4878                           plusw2	equ	0xFDB
  4879                           fsr2h	equ	0xFDA
  4880                           fsr2l	equ	0xFD9
  4881                           status	equ	0xFD8
  4882                           
  4883                           	psect	bssBANK1
  4884  000100                     __pbssBANK1:
  4885                           	opt stack 0
  4886  000100                     _can_receiveOverruns:
  4887                           	opt stack 0
  4888  000100                     	ds	4
  4889  000104                     _can_transmitOverruns:
  4890                           	opt stack 0
  4891  000104                     	ds	4
  4892  000108                     _cntRxBytes:
  4893                           	opt stack 0
  4894  000108                     	ds	4
  4895  00010C                     _cntRxFrames:
  4896                           	opt stack 0
  4897  00010C                     	ds	4
  4898  000110                     _cntTxBytes:
  4899                           	opt stack 0
  4900  000110                     	ds	4
  4901  000114                     _cntTxFrames:
  4902                           	opt stack 0
  4903  000114                     	ds	4
  4904  000118                     _timer:
  4905                           	opt stack 0
  4906  000118                     	ds	4
  4907  00011C                     _uart_receiveOverruns:
  4908                           	opt stack 0
  4909  00011C                     	ds	4
  4910  000120                     _uart_transmitOverruns:
  4911                           	opt stack 0
  4912  000120                     	ds	4
  4913  000124                     _cmdbuf:
  4914                           	opt stack 0
  4915  000124                     	ds	80
  4916  000174                     _wrkbuf:
  4917                           	opt stack 0
  4918  000174                     	ds	80
  4919  0001C4                     _canInputFifo:
  4920                           	opt stack 0
  4921  0001C4                     	ds	8
  4922  0001CC                     _data:
  4923                           	opt stack 0
  4924  0001CC                     	ds	8
  4925  0001D4                     _serialInputFifo:
  4926                           	opt stack 0
  4927  0001D4                     	ds	8
  4928  0001DC                     _vscpData:
  4929                           	opt stack 0
  4930  0001DC                     	ds	8
  4931                           tblptru	equ	0xFF8
  4932                           tblptrh	equ	0xFF7
  4933                           tblptrl	equ	0xFF6
  4934                           tablat	equ	0xFF5
  4935                           prodh	equ	0xFF4
  4936                           prodl	equ	0xFF3
  4937                           intcon	equ	0xFF2
  4938                           indf0	equ	0xFEF
  4939                           postinc0	equ	0xFEE
  4940                           fsr0h	equ	0xFEA
  4941                           fsr0l	equ	0xFE9
  4942                           wreg	equ	0xFE8
  4943                           indf1	equ	0xFE7
  4944                           postinc1	equ	0xFE6
  4945                           postdec1	equ	0xFE5
  4946                           fsr1h	equ	0xFE2
  4947                           fsr1l	equ	0xFE1
  4948                           indf2	equ	0xFDF
  4949                           postinc2	equ	0xFDE
  4950                           postdec2	equ	0xFDD
  4951                           plusw2	equ	0xFDB
  4952                           fsr2h	equ	0xFDA
  4953                           fsr2l	equ	0xFD9
  4954                           status	equ	0xFD8
  4955                           
  4956                           	psect	bssBANK2
  4957  000200                     __pbssBANK2:
  4958                           	opt stack 0
  4959  000200                     _serial_inputBuffer:
  4960                           	opt stack 0
  4961  000200                     	ds	128
  4962                           tblptru	equ	0xFF8
  4963                           tblptrh	equ	0xFF7
  4964                           tblptrl	equ	0xFF6
  4965                           tablat	equ	0xFF5
  4966                           prodh	equ	0xFF4
  4967                           prodl	equ	0xFF3
  4968                           intcon	equ	0xFF2
  4969                           indf0	equ	0xFEF
  4970                           postinc0	equ	0xFEE
  4971                           fsr0h	equ	0xFEA
  4972                           fsr0l	equ	0xFE9
  4973                           wreg	equ	0xFE8
  4974                           indf1	equ	0xFE7
  4975                           postinc1	equ	0xFE6
  4976                           postdec1	equ	0xFE5
  4977                           fsr1h	equ	0xFE2
  4978                           fsr1l	equ	0xFE1
  4979                           indf2	equ	0xFDF
  4980                           postinc2	equ	0xFDE
  4981                           postdec2	equ	0xFDD
  4982                           plusw2	equ	0xFDB
  4983                           fsr2h	equ	0xFDA
  4984                           fsr2l	equ	0xFD9
  4985                           status	equ	0xFD8
  4986                           
  4987                           	psect	bssBANK3
  4988  000300                     __pbssBANK3:
  4989                           	opt stack 0
  4990  000300                     _crc8_table:
  4991                           	opt stack 0
  4992  000300                     	ds	256
  4993                           tblptru	equ	0xFF8
  4994                           tblptrh	equ	0xFF7
  4995                           tblptrl	equ	0xFF6
  4996                           tablat	equ	0xFF5
  4997                           prodh	equ	0xFF4
  4998                           prodl	equ	0xFF3
  4999                           intcon	equ	0xFF2
  5000                           indf0	equ	0xFEF
  5001                           postinc0	equ	0xFEE
  5002                           fsr0h	equ	0xFEA
  5003                           fsr0l	equ	0xFE9
  5004                           wreg	equ	0xFE8
  5005                           indf1	equ	0xFE7
  5006                           postinc1	equ	0xFE6
  5007                           postdec1	equ	0xFE5
  5008                           fsr1h	equ	0xFE2
  5009                           fsr1l	equ	0xFE1
  5010                           indf2	equ	0xFDF
  5011                           postinc2	equ	0xFDE
  5012                           postdec2	equ	0xFDD
  5013                           plusw2	equ	0xFDB
  5014                           fsr2h	equ	0xFDA
  5015                           fsr2l	equ	0xFD9
  5016                           status	equ	0xFD8
  5017                           
  5018                           	psect	bssBIGRAM
  5019  000400                     __pbssBIGRAM:
  5020                           	opt stack 0
  5021  000400                     _can_inputBuffer:
  5022                           	opt stack 0
  5023  000400                     	ds	494
  5024                           tblptru	equ	0xFF8
  5025                           tblptrh	equ	0xFF7
  5026                           tblptrl	equ	0xFF6
  5027                           tablat	equ	0xFF5
  5028                           prodh	equ	0xFF4
  5029                           prodl	equ	0xFF3
  5030                           intcon	equ	0xFF2
  5031                           indf0	equ	0xFEF
  5032                           postinc0	equ	0xFEE
  5033                           fsr0h	equ	0xFEA
  5034                           fsr0l	equ	0xFE9
  5035                           wreg	equ	0xFE8
  5036                           indf1	equ	0xFE7
  5037                           postinc1	equ	0xFE6
  5038                           postdec1	equ	0xFE5
  5039                           fsr1h	equ	0xFE2
  5040                           fsr1l	equ	0xFE1
  5041                           indf2	equ	0xFDF
  5042                           postinc2	equ	0xFDE
  5043                           postdec2	equ	0xFDD
  5044                           plusw2	equ	0xFDB
  5045                           fsr2h	equ	0xFDA
  5046                           fsr2l	equ	0xFD9
  5047                           status	equ	0xFD8
  5048                           
  5049                           	psect	cstackBANK2
  5050  000280                     __pcstackBANK2:
  5051                           	opt stack 0
  5052  000280                     doModeVerbose@id:
  5053                           	opt stack 0
  5054                           
  5055                           ; 4 bytes @ 0x0
  5056  000280                     	ds	4
  5057  000284                     doModeVerbose@preg:
  5058                           	opt stack 0
  5059                           
  5060                           ; 2 bytes @ 0x4
  5061  000284                     	ds	2
  5062  000286                     doModeVerbose@preg_1169:
  5063                           	opt stack 0
  5064                           
  5065                           ; 2 bytes @ 0x6
  5066  000286                     	ds	2
  5067  000288                     doModeVerbose@filter_class:
  5068                           	opt stack 0
  5069                           
  5070                           ; 2 bytes @ 0x8
  5071  000288                     	ds	2
  5072  00028A                     doModeVerbose@mask_class:
  5073                           	opt stack 0
  5074                           
  5075                           ; 2 bytes @ 0xA
  5076  00028A                     	ds	2
  5077  00028C                     doModeVerbose@nodeid:
  5078                           	opt stack 0
  5079                           
  5080                           ; 1 bytes @ 0xC
  5081  00028C                     	ds	1
  5082  00028D                     doModeVerbose@nodeid_1161:
  5083                           	opt stack 0
  5084                           
  5085                           ; 1 bytes @ 0xD
  5086  00028D                     	ds	1
  5087  00028E                     doModeVerbose@filter_priority:
  5088                           	opt stack 0
  5089                           
  5090                           ; 1 bytes @ 0xE
  5091  00028E                     	ds	1
  5092  00028F                     doModeVerbose@filter_type:
  5093                           	opt stack 0
  5094                           
  5095                           ; 1 bytes @ 0xF
  5096  00028F                     	ds	1
  5097  000290                     doModeVerbose@filter_nodeid:
  5098                           	opt stack 0
  5099                           
  5100                           ; 1 bytes @ 0x10
  5101  000290                     	ds	1
  5102  000291                     doModeVerbose@mask_priority:
  5103                           	opt stack 0
  5104                           
  5105                           ; 1 bytes @ 0x11
  5106  000291                     	ds	1
  5107  000292                     doModeVerbose@mask_type:
  5108                           	opt stack 0
  5109                           
  5110                           ; 1 bytes @ 0x12
  5111  000292                     	ds	1
  5112  000293                     doModeVerbose@mask_nodeid:
  5113                           	opt stack 0
  5114                           
  5115                           ; 1 bytes @ 0x13
  5116  000293                     	ds	1
  5117  000294                     _doModeVerbose$1129:
  5118                           	opt stack 0
  5119                           
  5120                           ; 2 bytes @ 0x14
  5121  000294                     	ds	2
  5122  000296                     _doModeVerbose$1141:
  5123                           	opt stack 0
  5124                           
  5125                           ; 2 bytes @ 0x16
  5126  000296                     	ds	2
  5127  000298                     _doModeVerbose$1146:
  5128                           	opt stack 0
  5129                           
  5130                           ; 2 bytes @ 0x18
  5131  000298                     	ds	2
  5132  00029A                     _doModeVerbose$1152:
  5133                           	opt stack 0
  5134                           
  5135                           ; 2 bytes @ 0x1A
  5136  00029A                     	ds	2
  5137  00029C                     _doModeVerbose$1156:
  5138                           	opt stack 0
  5139                           
  5140                           ; 2 bytes @ 0x1C
  5141  00029C                     	ds	2
  5142  00029E                     _doModeVerbose$1181:
  5143                           	opt stack 0
  5144                           
  5145                           ; 2 bytes @ 0x1E
  5146  00029E                     	ds	2
  5147  0002A0                     doModeVerbose@rv:
  5148                           	opt stack 0
  5149                           
  5150                           ; 1 bytes @ 0x20
  5151  0002A0                     	ds	1
  5152  0002A1                     doModeVerbose@page_1162:
  5153                           	opt stack 0
  5154                           
  5155                           ; 1 bytes @ 0x21
  5156  0002A1                     	ds	1
  5157  0002A2                     doModeVerbose@reg_1163:
  5158                           	opt stack 0
  5159                           
  5160                           ; 1 bytes @ 0x22
  5161  0002A2                     	ds	1
  5162  0002A3                     doModeVerbose@id_1222:
  5163                           	opt stack 0
  5164                           
  5165                           ; 4 bytes @ 0x23
  5166  0002A3                     	ds	4
  5167  0002A7                     doModeVerbose@filterno:
  5168                           	opt stack 0
  5169                           
  5170                           ; 1 bytes @ 0x27
  5171  0002A7                     	ds	1
  5172  0002A8                     doModeVerbose@maskno:
  5173                           	opt stack 0
  5174                           
  5175                           ; 1 bytes @ 0x28
  5176  0002A8                     	ds	1
  5177  0002A9                     doModeVerbose@i:
  5178                           	opt stack 0
  5179                           
  5180                           ; 1 bytes @ 0x29
  5181  0002A9                     	ds	1
  5182  0002AA                     doModeVerbose@value_1164:
  5183                           	opt stack 0
  5184                           
  5185                           ; 1 bytes @ 0x2A
  5186  0002AA                     	ds	1
  5187  0002AB                     doModeVerbose@count:
  5188                           	opt stack 0
  5189                           
  5190                           ; 1 bytes @ 0x2B
  5191  0002AB                     	ds	1
  5192  0002AC                     doModeVerbose@c:
  5193                           	opt stack 0
  5194                           
  5195                           ; 1 bytes @ 0x2C
  5196  0002AC                     	ds	1
  5197  0002AD                     doModeVerbose@page:
  5198                           	opt stack 0
  5199                           
  5200                           ; 1 bytes @ 0x2D
  5201  0002AD                     	ds	1
  5202  0002AE                     doModeVerbose@reg:
  5203                           	opt stack 0
  5204                           
  5205                           ; 1 bytes @ 0x2E
  5206  0002AE                     	ds	1
  5207  0002AF                     doModeVerbose@nodeid_1176:
  5208                           	opt stack 0
  5209                           
  5210                           ; 1 bytes @ 0x2F
  5211  0002AF                     	ds	1
  5212  0002B0                     doModeVerbose@i_1111:
  5213                           	opt stack 0
  5214                           
  5215                           ; 1 bytes @ 0x30
  5216  0002B0                     	ds	1
  5217  0002B1                     doModeVerbose@value:
  5218                           	opt stack 0
  5219                           
  5220                           ; 1 bytes @ 0x31
  5221  0002B1                     	ds	1
  5222  0002B2                     doModeVerbose@p_1117:
  5223                           	opt stack 0
  5224                           
  5225                           ; 2 bytes @ 0x32
  5226  0002B2                     	ds	2
  5227  0002B4                     doModeVerbose@p_1165:
  5228                           	opt stack 0
  5229                           
  5230                           ; 2 bytes @ 0x34
  5231  0002B4                     	ds	2
  5232  0002B6                     doModeVerbose@ifmode:
  5233                           	opt stack 0
  5234                           
  5235                           ; 1 bytes @ 0x36
  5236  0002B6                     	ds	1
  5237  0002B7                     doModeVerbose@p:
  5238                           	opt stack 0
  5239                           
  5240                           ; 2 bytes @ 0x37
  5241  0002B7                     	ds	2
  5242  0002B9                     doModeVerbose@p_1190:
  5243                           	opt stack 0
  5244                           
  5245                           ; 2 bytes @ 0x39
  5246  0002B9                     	ds	2
  5247  0002BB                     doModeVerbose@p_1210:
  5248                           	opt stack 0
  5249                           
  5250                           ; 2 bytes @ 0x3B
  5251  0002BB                     	ds	2
  5252                           tblptru	equ	0xFF8
  5253                           tblptrh	equ	0xFF7
  5254                           tblptrl	equ	0xFF6
  5255                           tablat	equ	0xFF5
  5256                           prodh	equ	0xFF4
  5257                           prodl	equ	0xFF3
  5258                           intcon	equ	0xFF2
  5259                           indf0	equ	0xFEF
  5260                           postinc0	equ	0xFEE
  5261                           fsr0h	equ	0xFEA
  5262                           fsr0l	equ	0xFE9
  5263                           wreg	equ	0xFE8
  5264                           indf1	equ	0xFE7
  5265                           postinc1	equ	0xFE6
  5266                           postdec1	equ	0xFE5
  5267                           fsr1h	equ	0xFE2
  5268                           fsr1l	equ	0xFE1
  5269                           indf2	equ	0xFDF
  5270                           postinc2	equ	0xFDE
  5271                           postdec2	equ	0xFDD
  5272                           plusw2	equ	0xFDB
  5273                           fsr2h	equ	0xFDA
  5274                           fsr2l	equ	0xFD9
  5275                           status	equ	0xFD8
  5276                           
  5277                           	psect	cstackBANK0
  5278  000060                     __pcstackBANK0:
  5279                           	opt stack 0
  5280  000060                     ??_fifo_read:
  5281  000060                     ??_atoi:
  5282  000060                     ??_setFilter:
  5283  000060                     ??_hexStringToBytes:
  5284  000060                     ?_crc8:
  5285                           	opt stack 0
  5286  000060                     ?_utoa:
  5287                           	opt stack 0
  5288  000060                     ?_strnicmp:
  5289                           	opt stack 0
  5290  000060                     ?_strspn:
  5291                           	opt stack 0
  5292  000060                     ?_strcspn:
  5293                           	opt stack 0
  5294  000060                     __CANIDToRegs@Value:
  5295                           	opt stack 0
  5296  000060                     crc8@crc:
  5297                           	opt stack 0
  5298  000060                     utoa@buf:
  5299                           	opt stack 0
  5300  000060                     memcpy@d:
  5301                           	opt stack 0
  5302  000060                     strnicmp@s1:
  5303                           	opt stack 0
  5304  000060                     strcspn@s1:
  5305                           	opt stack 0
  5306  000060                     strspn@s1:
  5307                           	opt stack 0
  5308  000060                     ___lldiv@quotient:
  5309                           	opt stack 0
  5310                           
  5311                           ; 4 bytes @ 0x0
  5312  000060                     	ds	1
  5313  000061                     ?_ECANSendMessage:
  5314                           	opt stack 0
  5315  000061                     ECANSendMessage@id:
  5316                           	opt stack 0
  5317                           
  5318                           ; 4 bytes @ 0x1
  5319  000061                     	ds	1
  5320  000062                     crc8@m:
  5321                           	opt stack 0
  5322  000062                     atoi@sign:
  5323                           	opt stack 0
  5324  000062                     utoa@val:
  5325                           	opt stack 0
  5326  000062                     memcpy@s:
  5327                           	opt stack 0
  5328  000062                     strnicmp@s2:
  5329                           	opt stack 0
  5330  000062                     strcspn@s2:
  5331                           	opt stack 0
  5332  000062                     strspn@s2:
  5333                           	opt stack 0
  5334                           
  5335                           ; 2 bytes @ 0x2
  5336  000062                     	ds	1
  5337  000063                     ?_sendEscapedUartData:
  5338                           	opt stack 0
  5339  000063                     ?_calcCRC:
  5340                           	opt stack 0
  5341  000063                     sendEscapedUartData@pcrc:
  5342                           	opt stack 0
  5343  000063                     calcCRC@p:
  5344                           	opt stack 0
  5345  000063                     hexStringToBytes@len:
  5346                           	opt stack 0
  5347  000063                     atoi@a:
  5348                           	opt stack 0
  5349                           
  5350                           ; 2 bytes @ 0x3
  5351  000063                     	ds	1
  5352  000064                     ?_strtok:
  5353                           	opt stack 0
  5354  000064                     ___lldiv@counter:
  5355                           	opt stack 0
  5356  000064                     fifo_read@p:
  5357                           	opt stack 0
  5358  000064                     utoa@base:
  5359                           	opt stack 0
  5360  000064                     strnicmp@len:
  5361                           	opt stack 0
  5362  000064                     strtok@s1:
  5363                           	opt stack 0
  5364                           
  5365                           ; 2 bytes @ 0x4
  5366  000064                     	ds	1
  5367  000065                     ?___llmod:
  5368                           	opt stack 0
  5369  000065                     sendEscapedUartData@c:
  5370                           	opt stack 0
  5371  000065                     calcCRC@len:
  5372                           	opt stack 0
  5373  000065                     ECANSendMessage@data:
  5374                           	opt stack 0
  5375  000065                     hexStringToBytes@p:
  5376                           	opt stack 0
  5377  000065                     ___llmod@dividend:
  5378                           	opt stack 0
  5379                           
  5380                           ; 4 bytes @ 0x5
  5381  000065                     	ds	1
  5382  000066                     ?_sendVSCPDriverCommandReply:
  5383                           	opt stack 0
  5384  000066                     ?_stristr:
  5385                           	opt stack 0
  5386  000066                     sendVSCPDriverErrorFrame@errorcode:
  5387                           	opt stack 0
  5388  000066                     sendVSCPDriverAck@crc:
  5389                           	opt stack 0
  5390  000066                     sendVSCPDriverNack@crc:
  5391                           	opt stack 0
  5392  000066                     sendVSCPDriverCommandReply@cmdCode:
  5393                           	opt stack 0
  5394  000066                     sendVSCPModeCapabilities@crc:
  5395                           	opt stack 0
  5396  000066                     calcCRC@j:
  5397                           	opt stack 0
  5398  000066                     fifo_read@i:
  5399                           	opt stack 0
  5400  000066                     utoa@v:
  5401                           	opt stack 0
  5402  000066                     stristr@s1:
  5403                           	opt stack 0
  5404  000066                     strtok@s2:
  5405                           	opt stack 0
  5406                           
  5407                           ; 2 bytes @ 0x6
  5408  000066                     	ds	1
  5409  000067                     sendVSCPDriverErrorFrame@crc:
  5410                           	opt stack 0
  5411  000067                     sendVSCPDriverCommandReply@cmdReplyCode:
  5412                           	opt stack 0
  5413  000067                     calcCRC@crc:
  5414                           	opt stack 0
  5415  000067                     ECANSendMessage@dataLen:
  5416                           	opt stack 0
  5417  000067                     hexStringToBytes@i:
  5418                           	opt stack 0
  5419                           
  5420                           ; 2 bytes @ 0x7
  5421  000067                     	ds	1
  5422  000068                     ?_getCANFrame:
  5423                           	opt stack 0
  5424  000068                     sendVSCPDriverCommandReply@crc:
  5425                           	opt stack 0
  5426  000068                     getCANFrame@pdlc:
  5427                           	opt stack 0
  5428  000068                     ECANSendMessage@msgFlags:
  5429                           	opt stack 0
  5430  000068                     utoa@c:
  5431                           	opt stack 0
  5432  000068                     stristr@s2:
  5433                           	opt stack 0
  5434                           
  5435                           ; 2 bytes @ 0x8
  5436  000068                     	ds	1
  5437  000069                     ??_ECANSendMessage:
  5438  000069                     ?_itoa:
  5439                           	opt stack 0
  5440  000069                     getCANFrame@pdata:
  5441                           	opt stack 0
  5442  000069                     itoa@buf:
  5443                           	opt stack 0
  5444  000069                     ___llmod@divisor:
  5445                           	opt stack 0
  5446                           
  5447                           ; 4 bytes @ 0x9
  5448  000069                     	ds	1
  5449  00006A                     ECANSendMessage@pb:
  5450                           	opt stack 0
  5451                           
  5452                           ; 18 bytes @ 0xA
  5453  00006A                     	ds	1
  5454  00006B                     ?_getVSCPFrame:
  5455                           	opt stack 0
  5456  00006B                     getVSCPFrame@pvscptype:
  5457                           	opt stack 0
  5458  00006B                     itoa@val:
  5459                           	opt stack 0
  5460  00006B                     receiveSendEventCANAL@data:
  5461                           	opt stack 0
  5462  00006B                     receiveSendMultiEventCANAL@data:
  5463                           	opt stack 0
  5464                           
  5465                           ; 8 bytes @ 0xB
  5466  00006B                     	ds	1
  5467  00006C                     getVSCPFrame@pNodeId:
  5468                           	opt stack 0
  5469                           
  5470                           ; 1 bytes @ 0xC
  5471  00006C                     	ds	1
  5472  00006D                     ?_sprintf:
  5473                           	opt stack 0
  5474  00006D                     ?_ultoa:
  5475                           	opt stack 0
  5476  00006D                     getVSCPFrame@pPriority:
  5477                           	opt stack 0
  5478  00006D                     sprintf@sp:
  5479                           	opt stack 0
  5480  00006D                     itoa@base:
  5481                           	opt stack 0
  5482  00006D                     ultoa@buf:
  5483                           	opt stack 0
  5484                           
  5485                           ; 2 bytes @ 0xD
  5486  00006D                     	ds	1
  5487  00006E                     getVSCPFrame@pSize:
  5488                           	opt stack 0
  5489                           
  5490                           ; 1 bytes @ 0xE
  5491  00006E                     	ds	1
  5492  00006F                     getVSCPFrame@pData:
  5493                           	opt stack 0
  5494  00006F                     sprintf@f:
  5495                           	opt stack 0
  5496  00006F                     ultoa@val:
  5497                           	opt stack 0
  5498  00006F                     printFirmwareVersion@wrkbuf:
  5499                           	opt stack 0
  5500                           
  5501                           ; 20 bytes @ 0xF
  5502  00006F                     	ds	2
  5503  000071                     ??_getVSCPFrame:
  5504                           
  5505                           ; 0 bytes @ 0x11
  5506  000071                     	ds	2
  5507  000073                     receiveSendEventCANAL@i:
  5508                           	opt stack 0
  5509  000073                     receiveSendMultiEventCANAL@msgcount:
  5510                           	opt stack 0
  5511  000073                     ultoa@base:
  5512                           	opt stack 0
  5513                           
  5514                           ; 2 bytes @ 0x13
  5515  000073                     	ds	1
  5516  000074                     receiveSendMultiEventCANAL@i:
  5517                           	opt stack 0
  5518  000074                     receiveSendEventCANAL@id:
  5519                           	opt stack 0
  5520                           
  5521                           ; 4 bytes @ 0x14
  5522  000074                     	ds	1
  5523  000075                     ??_sprintf:
  5524  000075                     getVSCPFrame@pvscpclass:
  5525                           	opt stack 0
  5526  000075                     receiveSendMultiEventCANAL@id:
  5527                           	opt stack 0
  5528  000075                     ultoa@v:
  5529                           	opt stack 0
  5530                           
  5531                           ; 4 bytes @ 0x15
  5532  000075                     	ds	1
  5533  000076                     getVSCPFrame@id:
  5534                           	opt stack 0
  5535                           
  5536                           ; 4 bytes @ 0x16
  5537  000076                     	ds	2
  5538  000078                     receiveSendEventCANAL@dlc:
  5539                           	opt stack 0
  5540  000078                     sprintf@idx:
  5541                           	opt stack 0
  5542                           
  5543                           ; 1 bytes @ 0x18
  5544  000078                     	ds	1
  5545  000079                     receiveSendEventCANAL@crc:
  5546                           	opt stack 0
  5547  000079                     receiveSendMultiEventCANAL@dlc:
  5548                           	opt stack 0
  5549  000079                     ultoa@c:
  5550                           	opt stack 0
  5551  000079                     _sprintf$2024:
  5552                           	opt stack 0
  5553                           
  5554                           ; 2 bytes @ 0x19
  5555  000079                     	ds	1
  5556  00007A                     ??_receiveSendEventSLCAN:
  5557  00007A                     receiveSendMultiEventCANAL@crc:
  5558                           	opt stack 0
  5559                           
  5560                           ; 1 bytes @ 0x1A
  5561  00007A                     	ds	1
  5562  00007B                     receiveSendMultiEventCANAL@pos:
  5563                           	opt stack 0
  5564  00007B                     _sprintf$2025:
  5565                           	opt stack 0
  5566                           
  5567                           ; 2 bytes @ 0x1B
  5568  00007B                     	ds	1
  5569  00007C                     ECANSendMessage@mode:
  5570                           	opt stack 0
  5571                           
  5572                           ; 1 bytes @ 0x1C
  5573  00007C                     	ds	1
  5574  00007D                     ECANSendMessage@buffers:
  5575                           	opt stack 0
  5576  00007D                     _sprintf$2031:
  5577                           	opt stack 0
  5578  00007D                     receiveSendEventSLCAN@id:
  5579                           	opt stack 0
  5580                           
  5581                           ; 4 bytes @ 0x1D
  5582  00007D                     	ds	1
  5583  00007E                     ECANSendMessage@j:
  5584                           	opt stack 0
  5585                           
  5586                           ; 1 bytes @ 0x1E
  5587  00007E                     	ds	1
  5588  00007F                     ECANSendMessage@tempBSEL0:
  5589                           	opt stack 0
  5590  00007F                     sprintf@ap:
  5591                           	opt stack 0
  5592                           
  5593                           ; 1 bytes @ 0x1F
  5594  00007F                     	ds	1
  5595  000080                     ECANSendMessage@tempPtr:
  5596                           	opt stack 0
  5597  000080                     sprintf@prec:
  5598                           	opt stack 0
  5599                           
  5600                           ; 2 bytes @ 0x20
  5601  000080                     	ds	1
  5602  000081                     receiveSendEventSLCAN@dlc:
  5603                           	opt stack 0
  5604                           
  5605                           ; 1 bytes @ 0x21
  5606  000081                     	ds	1
  5607  000082                     ECANSendMessage@temp:
  5608                           	opt stack 0
  5609  000082                     receiveSendEventSLCAN@i:
  5610                           	opt stack 0
  5611  000082                     sprintf@width:
  5612                           	opt stack 0
  5613                           
  5614                           ; 2 bytes @ 0x22
  5615  000082                     	ds	1
  5616  000083                     ECANSendMessage@i:
  5617                           	opt stack 0
  5618                           
  5619                           ; 1 bytes @ 0x23
  5620  000083                     	ds	1
  5621  000084                     ECANSendMessage@ptr:
  5622                           	opt stack 0
  5623  000084                     sprintf@_val:
  5624                           	opt stack 0
  5625                           
  5626                           ; 4 bytes @ 0x24
  5627  000084                     	ds	2
  5628  000086                     ?_sendCANFrame:
  5629                           	opt stack 0
  5630  000086                     sendCANFrame@id:
  5631                           	opt stack 0
  5632                           
  5633                           ; 4 bytes @ 0x26
  5634  000086                     	ds	2
  5635  000088                     sprintf@c:
  5636                           	opt stack 0
  5637                           
  5638                           ; 1 bytes @ 0x28
  5639  000088                     	ds	1
  5640  000089                     sprintf@flag:
  5641                           	opt stack 0
  5642                           
  5643                           ; 2 bytes @ 0x29
  5644  000089                     	ds	1
  5645  00008A                     sendCANFrame@dlc:
  5646                           	opt stack 0
  5647                           
  5648                           ; 1 bytes @ 0x2A
  5649  00008A                     	ds	1
  5650  00008B                     ??_receivePrintEventVerbose:
  5651  00008B                     _printStatistics$1371:
  5652                           	opt stack 0
  5653  00008B                     _printErrors$1396:
  5654                           	opt stack 0
  5655  00008B                     sendCANFrame@pdata:
  5656                           	opt stack 0
  5657                           
  5658                           ; 2 bytes @ 0x2B
  5659  00008B                     	ds	2
  5660  00008D                     ??_doModeSLCAN:
  5661  00008D                     ??_receiveVSCPModeCanalMsg:
  5662  00008D                     ?_sendVSCPFrame:
  5663                           	opt stack 0
  5664  00008D                     _printStatistics$1377:
  5665                           	opt stack 0
  5666  00008D                     _printErrors$1402:
  5667                           	opt stack 0
  5668  00008D                     sendVSCPFrame@vscpclass:
  5669                           	opt stack 0
  5670                           
  5671                           ; 2 bytes @ 0x2D
  5672  00008D                     	ds	2
  5673  00008F                     sendVSCPFrame@vscptype:
  5674                           	opt stack 0
  5675  00008F                     _printStatistics$1383:
  5676                           	opt stack 0
  5677  00008F                     _printErrors$1408:
  5678                           	opt stack 0
  5679                           
  5680                           ; 2 bytes @ 0x2F
  5681  00008F                     	ds	1
  5682  000090                     sendVSCPFrame@nodeid:
  5683                           	opt stack 0
  5684  000090                     _receivePrintEventVerbose$1278:
  5685                           	opt stack 0
  5686                           
  5687                           ; 2 bytes @ 0x30
  5688  000090                     	ds	1
  5689  000091                     sendVSCPFrame@priority:
  5690                           	opt stack 0
  5691  000091                     _printStatistics$1389:
  5692                           	opt stack 0
  5693  000091                     _printErrors$1414:
  5694                           	opt stack 0
  5695                           
  5696                           ; 2 bytes @ 0x31
  5697  000091                     	ds	1
  5698  000092                     sendVSCPFrame@size:
  5699                           	opt stack 0
  5700  000092                     _receivePrintEventVerbose$1283:
  5701                           	opt stack 0
  5702                           
  5703                           ; 2 bytes @ 0x32
  5704  000092                     	ds	1
  5705  000093                     _printErrors$1420:
  5706                           	opt stack 0
  5707  000093                     sendVSCPFrame@pData:
  5708                           	opt stack 0
  5709                           
  5710                           ; 2 bytes @ 0x33
  5711  000093                     	ds	1
  5712  000094                     _receivePrintEventVerbose$1288:
  5713                           	opt stack 0
  5714  000094                     doModeSLCAN@id:
  5715                           	opt stack 0
  5716                           
  5717                           ; 4 bytes @ 0x34
  5718  000094                     	ds	1
  5719  000095                     ??_sendVSCPFrame:
  5720  000095                     _printErrors$1429:
  5721                           	opt stack 0
  5722                           
  5723                           ; 2 bytes @ 0x35
  5724  000095                     	ds	1
  5725  000096                     _receivePrintEventVerbose$1293:
  5726                           	opt stack 0
  5727                           
  5728                           ; 2 bytes @ 0x36
  5729  000096                     	ds	2
  5730  000098                     doModeSLCAN@dlc:
  5731                           	opt stack 0
  5732  000098                     _receivePrintEventVerbose$1298:
  5733                           	opt stack 0
  5734                           
  5735                           ; 2 bytes @ 0x38
  5736  000098                     	ds	1
  5737  000099                     doModeSLCAN@c:
  5738                           	opt stack 0
  5739                           
  5740                           ; 1 bytes @ 0x39
  5741  000099                     	ds	1
  5742  00009A                     doModeSLCAN@rv:
  5743                           	opt stack 0
  5744  00009A                     _receivePrintEventVerbose$1303:
  5745                           	opt stack 0
  5746                           
  5747                           ; 2 bytes @ 0x3A
  5748  00009A                     	ds	2
  5749  00009C                     receivePrintEventVerbose@i:
  5750                           	opt stack 0
  5751                           
  5752                           ; 1 bytes @ 0x3C
  5753  00009C                     	ds	5
  5754  0000A1                     receiveVSCPModeCanalMsg@data:
  5755                           	opt stack 0
  5756                           
  5757                           ; 8 bytes @ 0x41
  5758  0000A1                     	ds	8
  5759  0000A9                     receiveVSCPModeCanalMsg@id:
  5760                           	opt stack 0
  5761  0000A9                     sendVSCPFrame@id:
  5762                           	opt stack 0
  5763                           
  5764                           ; 4 bytes @ 0x49
  5765  0000A9                     	ds	4
  5766  0000AD                     ?_readRegisterExtended:
  5767                           	opt stack 0
  5768  0000AD                     ?_writeRegisterExtended:
  5769                           	opt stack 0
  5770  0000AD                     ?_readRegister:
  5771                           	opt stack 0
  5772  0000AD                     receiveVSCPModeCanalMsg@dlc:
  5773                           	opt stack 0
  5774  0000AD                     readRegister@reg:
  5775                           	opt stack 0
  5776  0000AD                     readRegisterExtended@page:
  5777                           	opt stack 0
  5778  0000AD                     writeRegisterExtended@page:
  5779                           	opt stack 0
  5780                           
  5781                           ; 2 bytes @ 0x4D
  5782  0000AD                     	ds	1
  5783  0000AE                     doModeVscp@c:
  5784                           	opt stack 0
  5785  0000AE                     readRegister@timeout:
  5786                           	opt stack 0
  5787                           
  5788                           ; 2 bytes @ 0x4E
  5789  0000AE                     	ds	1
  5790  0000AF                     readRegisterExtended@reg:
  5791                           	opt stack 0
  5792  0000AF                     writeRegisterExtended@reg:
  5793                           	opt stack 0
  5794                           
  5795                           ; 1 bytes @ 0x4F
  5796  0000AF                     	ds	1
  5797  0000B0                     readRegister@value:
  5798                           	opt stack 0
  5799  0000B0                     readRegisterExtended@timeout:
  5800                           	opt stack 0
  5801  0000B0                     writeRegisterExtended@timeout:
  5802                           	opt stack 0
  5803                           
  5804                           ; 2 bytes @ 0x50
  5805  0000B0                     	ds	1
  5806  0000B1                     ??_readRegister:
  5807                           
  5808                           ; 0 bytes @ 0x51
  5809  0000B1                     	ds	1
  5810  0000B2                     readRegisterExtended@value:
  5811                           	opt stack 0
  5812  0000B2                     writeRegisterExtended@value:
  5813                           	opt stack 0
  5814                           
  5815                           ; 2 bytes @ 0x52
  5816  0000B2                     	ds	2
  5817  0000B4                     ??_readRegisterExtended:
  5818  0000B4                     ??_writeRegisterExtended:
  5819                           
  5820                           ; 0 bytes @ 0x54
  5821  0000B4                     	ds	1
  5822  0000B5                     readRegister@nodeid:
  5823                           	opt stack 0
  5824                           
  5825                           ; 1 bytes @ 0x55
  5826  0000B5                     	ds	1
  5827  0000B6                     printGUID@nodeid:
  5828                           	opt stack 0
  5829  0000B6                     printMDF@nodeid:
  5830                           	opt stack 0
  5831  0000B6                     printNodeFirmwareVersion@nodeid:
  5832                           	opt stack 0
  5833                           
  5834                           ; 1 bytes @ 0x56
  5835  0000B6                     	ds	1
  5836  0000B7                     printMDF@value:
  5837                           	opt stack 0
  5838  0000B7                     printGUID@buf:
  5839                           	opt stack 0
  5840  0000B7                     printNodeFirmwareVersion@buf:
  5841                           	opt stack 0
  5842                           
  5843                           ; 3 bytes @ 0x57
  5844  0000B7                     	ds	1
  5845  0000B8                     readRegisterExtended@nodeid:
  5846                           	opt stack 0
  5847  0000B8                     writeRegisterExtended@nodeid:
  5848                           	opt stack 0
  5849  0000B8                     printMDF@p:
  5850                           	opt stack 0
  5851                           
  5852                           ; 2 bytes @ 0x58
  5853  0000B8                     	ds	2
  5854  0000BA                     printGUID@value:
  5855                           	opt stack 0
  5856  0000BA                     printMDF@i:
  5857                           	opt stack 0
  5858  0000BA                     printNodeFirmwareVersion@value:
  5859                           	opt stack 0
  5860                           
  5861                           ; 1 bytes @ 0x5A
  5862  0000BA                     	ds	1
  5863  0000BB                     printGUID@i:
  5864                           	opt stack 0
  5865  0000BB                     printNodeFirmwareVersion@i:
  5866                           	opt stack 0
  5867                           
  5868                           ; 1 bytes @ 0x5B
  5869  0000BB                     	ds	1
  5870  0000BC                     _findNodes$1473:
  5871                           	opt stack 0
  5872                           
  5873                           ; 2 bytes @ 0x5C
  5874  0000BC                     	ds	2
  5875  0000BE                     findNodes@nFound:
  5876                           	opt stack 0
  5877                           
  5878                           ; 1 bytes @ 0x5E
  5879  0000BE                     	ds	1
  5880  0000BF                     findNodes@value:
  5881                           	opt stack 0
  5882                           
  5883                           ; 1 bytes @ 0x5F
  5884  0000BF                     	ds	1
  5885  0000C0                     findNodes@i:
  5886                           	opt stack 0
  5887                           
  5888                           ; 1 bytes @ 0x60
  5889  0000C0                     	ds	1
  5890  0000C1                     ??_doModeVerbose:
  5891                           
  5892                           ; 0 bytes @ 0x61
  5893  0000C1                     	ds	20
  5894  0000D5                     
  5895                           ; 2 bytes @ 0x75
  5896  0000D5                     	ds	2
  5897  0000D7                     
  5898                           ; 3 bytes @ 0x77
  5899  0000D7                     	ds	3
  5900  0000DA                     ??_main:
  5901                           
  5902                           ; 0 bytes @ 0x7A
  5903  0000DA                     	ds	1
  5904  0000DB                     main@c:
  5905                           	opt stack 0
  5906                           
  5907                           ; 1 bytes @ 0x7B
  5908  0000DB                     	ds	1
  5909                           tblptru	equ	0xFF8
  5910                           tblptrh	equ	0xFF7
  5911                           tblptrl	equ	0xFF6
  5912                           tablat	equ	0xFF5
  5913                           prodh	equ	0xFF4
  5914                           prodl	equ	0xFF3
  5915                           intcon	equ	0xFF2
  5916                           indf0	equ	0xFEF
  5917                           postinc0	equ	0xFEE
  5918                           fsr0h	equ	0xFEA
  5919                           fsr0l	equ	0xFE9
  5920                           wreg	equ	0xFE8
  5921                           indf1	equ	0xFE7
  5922                           postinc1	equ	0xFE6
  5923                           postdec1	equ	0xFE5
  5924                           fsr1h	equ	0xFE2
  5925                           fsr1l	equ	0xFE1
  5926                           indf2	equ	0xFDF
  5927                           postinc2	equ	0xFDE
  5928                           postdec2	equ	0xFDD
  5929                           plusw2	equ	0xFDB
  5930                           fsr2h	equ	0xFDA
  5931                           fsr2l	equ	0xFD9
  5932                           status	equ	0xFD8
  5933                           
  5934                           	psect	cstackCOMRAM
  5935  000001                     __pcstackCOMRAM:
  5936                           	opt stack 0
  5937  000001                     ?__RegsToCANID:
  5938                           	opt stack 0
  5939  000001                     ?i1_WriteTimer0:
  5940                           	opt stack 0
  5941  000001                     ?_fifo_write:
  5942                           	opt stack 0
  5943  000001                     ?_fifo_getFree:
  5944                           	opt stack 0
  5945  000001                     ?__ECANPointBuffer:
  5946                           	opt stack 0
  5947  000001                     ReadUSART@data:
  5948                           	opt stack 0
  5949  000001                     __RegsToCANID@ptr:
  5950                           	opt stack 0
  5951  000001                     fifo_write@f:
  5952                           	opt stack 0
  5953  000001                     fifo_getFree@f:
  5954                           	opt stack 0
  5955  000001                     i1WriteTimer0@timer0:
  5956                           	opt stack 0
  5957                           
  5958                           ; 2 bytes @ 0x0
  5959  000001                     	ds	2
  5960  000003                     ??_fifo_getFree:
  5961  000003                     __RegsToCANID@val:
  5962                           	opt stack 0
  5963  000003                     fifo_write@buf:
  5964                           	opt stack 0
  5965  000003                     i1WriteTimer0@timer:
  5966                           	opt stack 0
  5967                           
  5968                           ; 2 bytes @ 0x2
  5969  000003                     	ds	1
  5970  000004                     __RegsToCANID@type:
  5971                           	opt stack 0
  5972  000004                     __ECANPointBuffer@b:
  5973                           	opt stack 0
  5974                           
  5975                           ; 1 bytes @ 0x3
  5976  000004                     	ds	1
  5977  000005                     ??__RegsToCANID:
  5978  000005                     __ECANPointBuffer@pt:
  5979                           	opt stack 0
  5980  000005                     fifo_write@nbytes:
  5981                           	opt stack 0
  5982                           
  5983                           ; 4 bytes @ 0x4
  5984  000005                     	ds	2
  5985  000007                     __RegsToCANID@Value:
  5986                           	opt stack 0
  5987                           
  5988                           ; 1 bytes @ 0x6
  5989  000007                     	ds	1
  5990  000008                     ?_ECANReceiveMessage:
  5991                           	opt stack 0
  5992  000008                     ECANReceiveMessage@data:
  5993                           	opt stack 0
  5994                           
  5995                           ; 2 bytes @ 0x7
  5996  000008                     	ds	1
  5997  000009                     ??_fifo_write:
  5998                           
  5999                           ; 0 bytes @ 0x8
  6000  000009                     	ds	1
  6001  00000A                     ECANReceiveMessage@dataLen:
  6002                           	opt stack 0
  6003                           
  6004                           ; 1 bytes @ 0x9
  6005  00000A                     	ds	1
  6006  00000B                     ECANReceiveMessage@msgFlags:
  6007                           	opt stack 0
  6008                           
  6009                           ; 1 bytes @ 0xA
  6010  00000B                     	ds	1
  6011  00000C                     ECANReceiveMessage@savedPtr:
  6012                           	opt stack 0
  6013                           
  6014                           ; 2 bytes @ 0xB
  6015  00000C                     	ds	1
  6016  00000D                     fifo_write@p:
  6017                           	opt stack 0
  6018                           
  6019                           ; 2 bytes @ 0xC
  6020  00000D                     	ds	1
  6021  00000E                     ECANReceiveMessage@id:
  6022                           	opt stack 0
  6023                           
  6024                           ; 1 bytes @ 0xD
  6025  00000E                     	ds	1
  6026  00000F                     ECANReceiveMessage@i:
  6027                           	opt stack 0
  6028  00000F                     fifo_write@i:
  6029                           	opt stack 0
  6030                           
  6031                           ; 4 bytes @ 0xE
  6032  00000F                     	ds	1
  6033  000010                     ECANReceiveMessage@mode:
  6034                           	opt stack 0
  6035                           
  6036                           ; 1 bytes @ 0xF
  6037  000010                     	ds	1
  6038  000011                     ECANReceiveMessage@temp:
  6039                           	opt stack 0
  6040                           
  6041                           ; 1 bytes @ 0x10
  6042  000011                     	ds	1
  6043  000012                     ECANReceiveMessage@ptr:
  6044                           	opt stack 0
  6045                           
  6046                           ; 2 bytes @ 0x11
  6047  000012                     	ds	2
  6048  000014                     ??_Interrupt:
  6049                           
  6050                           ; 0 bytes @ 0x13
  6051  000014                     	ds	9
  6052  00001D                     Interrupt@fail:
  6053                           	opt stack 0
  6054                           
  6055                           ; 1 bytes @ 0x1C
  6056  00001D                     	ds	1
  6057  00001E                     ?_WriteTimer0:
  6058                           	opt stack 0
  6059  00001E                     ?_fifo_init:
  6060                           	opt stack 0
  6061  00001E                     ?_OpenUSART:
  6062                           	opt stack 0
  6063  00001E                     ?_Write_b_eep:
  6064                           	opt stack 0
  6065  00001E                     ?_setFilter:
  6066                           	opt stack 0
  6067  00001E                     ?__CANIDToRegs:
  6068                           	opt stack 0
  6069  00001E                     ??_isdigit:
  6070  00001E                     ?_Read_b_eep:
  6071                           	opt stack 0
  6072  00001E                     ?_fifo_read:
  6073                           	opt stack 0
  6074  00001E                     ?_memset:
  6075                           	opt stack 0
  6076  00001E                     ?_strcpy:
  6077                           	opt stack 0
  6078  00001E                     ?_strchr:
  6079                           	opt stack 0
  6080  00001E                     ?_strlen:
  6081                           	opt stack 0
  6082  00001E                     ?_memcpy:
  6083                           	opt stack 0
  6084  00001E                     ?_strcat:
  6085                           	opt stack 0
  6086  00001E                     ?___lwdiv:
  6087                           	opt stack 0
  6088  00001E                     ?___lwmod:
  6089                           	opt stack 0
  6090  00001E                     ?___wmul:
  6091                           	opt stack 0
  6092  00001E                     ?___lldiv:
  6093                           	opt stack 0
  6094  00001E                     ECANSetOperationMode@mode:
  6095                           	opt stack 0
  6096  00001E                     nibbleFromChar@c:
  6097                           	opt stack 0
  6098  00001E                     OpenTimer0@config:
  6099                           	opt stack 0
  6100  00001E                     WriteUSART@data:
  6101                           	opt stack 0
  6102  00001E                     toupper@c:
  6103                           	opt stack 0
  6104  00001E                     __CANIDToRegs@ptr:
  6105                           	opt stack 0
  6106  00001E                     fifo_init@f:
  6107                           	opt stack 0
  6108  00001E                     fifo_read@f:
  6109                           	opt stack 0
  6110  00001E                     _init_crc8$1962:
  6111                           	opt stack 0
  6112  00001E                     Read_b_eep@badd:
  6113                           	opt stack 0
  6114  00001E                     Write_b_eep@badd:
  6115                           	opt stack 0
  6116  00001E                     WriteTimer0@timer0:
  6117                           	opt stack 0
  6118  00001E                     OpenUSART@spbrg:
  6119                           	opt stack 0
  6120  00001E                     ___lwdiv@dividend:
  6121                           	opt stack 0
  6122  00001E                     ___lwmod@dividend:
  6123                           	opt stack 0
  6124  00001E                     memcpy@d1:
  6125                           	opt stack 0
  6126  00001E                     memset@p1:
  6127                           	opt stack 0
  6128  00001E                     strcat@to:
  6129                           	opt stack 0
  6130  00001E                     strchr@ptr:
  6131                           	opt stack 0
  6132  00001E                     strcpy@to:
  6133                           	opt stack 0
  6134  00001E                     strlen@s:
  6135                           	opt stack 0
  6136  00001E                     ___wmul@multiplier:
  6137                           	opt stack 0
  6138  00001E                     setFilter@val:
  6139                           	opt stack 0
  6140  00001E                     ___lldiv@dividend:
  6141                           	opt stack 0
  6142                           
  6143                           ; 4 bytes @ 0x1D
  6144  00001E                     	ds	1
  6145  00001F                     ?_putsUSART:
  6146                           	opt stack 0
  6147  00001F                     ??_printBinary:
  6148  00001F                     ?_strichr:
  6149                           	opt stack 0
  6150  00001F                     _isdigit$2902:
  6151                           	opt stack 0
  6152  00001F                     putsUSART@data:
  6153                           	opt stack 0
  6154  00001F                     strichr@ptr:
  6155                           	opt stack 0
  6156                           
  6157                           ; 2 bytes @ 0x1E
  6158  00001F                     	ds	1
  6159  000020                     Write_b_eep@bdat:
  6160                           	opt stack 0
  6161  000020                     OpenUSART@config:
  6162                           	opt stack 0
  6163  000020                     isdigit@c:
  6164                           	opt stack 0
  6165  000020                     fifo_init@buf:
  6166                           	opt stack 0
  6167  000020                     fifo_read@buf:
  6168                           	opt stack 0
  6169  000020                     init_crc8@j:
  6170                           	opt stack 0
  6171  000020                     WriteTimer0@timer:
  6172                           	opt stack 0
  6173  000020                     ___lwdiv@divisor:
  6174                           	opt stack 0
  6175  000020                     ___lwmod@divisor:
  6176                           	opt stack 0
  6177  000020                     memcpy@s1:
  6178                           	opt stack 0
  6179  000020                     memset@c:
  6180                           	opt stack 0
  6181  000020                     strcat@from:
  6182                           	opt stack 0
  6183  000020                     strchr@chr:
  6184                           	opt stack 0
  6185  000020                     strcpy@from:
  6186                           	opt stack 0
  6187  000020                     strlen@cp:
  6188                           	opt stack 0
  6189  000020                     ___wmul@multiplicand:
  6190                           	opt stack 0
  6191  000020                     __CANIDToRegs@val:
  6192                           	opt stack 0
  6193                           
  6194                           ; 4 bytes @ 0x1F
  6195  000020                     	ds	1
  6196  000021                     ??_putsUSART:
  6197  000021                     printBinary@value:
  6198                           	opt stack 0
  6199  000021                     Write_b_eep@GIE_BIT_VAL:
  6200                           	opt stack 0
  6201  000021                     strichr@chr:
  6202                           	opt stack 0
  6203                           
  6204                           ; 2 bytes @ 0x20
  6205  000021                     	ds	1
  6206  000022                     ??_strchr:
  6207  000022                     ??_strnicmp:
  6208  000022                     ?_hexStringToBytes:
  6209                           	opt stack 0
  6210  000022                     init_app_eeprom@i:
  6211                           	opt stack 0
  6212  000022                     setFilter@filter:
  6213                           	opt stack 0
  6214  000022                     init_crc8@crc:
  6215                           	opt stack 0
  6216  000022                     ___lwdiv@counter:
  6217                           	opt stack 0
  6218  000022                     ___lwmod@counter:
  6219                           	opt stack 0
  6220  000022                     printBinary@i:
  6221                           	opt stack 0
  6222  000022                     fifo_init@size:
  6223                           	opt stack 0
  6224  000022                     fifo_read@nbytes:
  6225                           	opt stack 0
  6226  000022                     hexStringToBytes@buf:
  6227                           	opt stack 0
  6228  000022                     memcpy@n:
  6229                           	opt stack 0
  6230  000022                     memset@n:
  6231                           	opt stack 0
  6232  000022                     strcat@cp:
  6233                           	opt stack 0
  6234  000022                     strcpy@cp:
  6235                           	opt stack 0
  6236  000022                     ___wmul@product:
  6237                           	opt stack 0
  6238  000022                     ___lldiv@divisor:
  6239                           	opt stack 0
  6240                           
  6241                           ; 4 bytes @ 0x21
  6242  000022                     	ds	1
  6243  000023                     setFilter@sidh:
  6244                           	opt stack 0
  6245  000023                     init_crc8@i:
  6246                           	opt stack 0
  6247  000023                     ___lwdiv@quotient:
  6248                           	opt stack 0
  6249                           
  6250                           ; 2 bytes @ 0x22
  6251  000023                     	ds	1
  6252  000024                     ?_atoi:
  6253                           	opt stack 0
  6254  000024                     setFilter@sidl:
  6255                           	opt stack 0
  6256  000024                     getCANFrame@pid:
  6257                           	opt stack 0
  6258  000024                     __CANIDToRegs@type:
  6259                           	opt stack 0
  6260  000024                     hexStringToBytes@size:
  6261                           	opt stack 0
  6262  000024                     strnicmp@r:
  6263                           	opt stack 0
  6264  000024                     atoi@s:
  6265                           	opt stack 0
  6266  000024                     memset@p:
  6267                           	opt stack 0
  6268  000024                     strcspn@i:
  6269                           	opt stack 0
  6270  000024                     strspn@i:
  6271                           	opt stack 0
  6272                           
  6273                           ; 2 bytes @ 0x23
  6274  000024                     	ds	1
  6275  000025                     ??__CANIDToRegs:
  6276  000025                     ??_crc8:
  6277  000025                     setFilter@eidh:
  6278                           	opt stack 0
  6279  000025                     hexStringToBytes@inhex:
  6280                           	opt stack 0
  6281                           
  6282                           ; 2 bytes @ 0x24
  6283  000025                     	ds	1
  6284  000026                     setFilter@eidl:
  6285                           	opt stack 0
  6286  000026                     ___llmod@counter:
  6287                           	opt stack 0
  6288                           
  6289                           ; 1 bytes @ 0x25
  6290  000026                     	ds	1
  6291  000027                     tblptru	equ	0xFF8
  6292                           tblptrh	equ	0xFF7
  6293                           tblptrl	equ	0xFF6
  6294                           tablat	equ	0xFF5
  6295                           prodh	equ	0xFF4
  6296                           prodl	equ	0xFF3
  6297                           intcon	equ	0xFF2
  6298                           indf0	equ	0xFEF
  6299                           postinc0	equ	0xFEE
  6300                           fsr0h	equ	0xFEA
  6301                           fsr0l	equ	0xFE9
  6302                           wreg	equ	0xFE8
  6303                           indf1	equ	0xFE7
  6304                           postinc1	equ	0xFE6
  6305                           postdec1	equ	0xFE5
  6306                           fsr1h	equ	0xFE2
  6307                           fsr1l	equ	0xFE1
  6308                           indf2	equ	0xFDF
  6309                           postinc2	equ	0xFDE
  6310                           postdec2	equ	0xFDD
  6311                           plusw2	equ	0xFDB
  6312                           fsr2h	equ	0xFDA
  6313                           fsr2l	equ	0xFD9
  6314                           status	equ	0xFD8
  6315                           
  6316                           ; 0 bytes @ 0x26
  6317 ;;
  6318 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6319 ;;
  6320 ;; *************** function _main *****************
  6321 ;; Defined at:
  6322 ;;		line 275 in file "main.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;  argc            2  117[BANK0 ] int 
  6325 ;;  argv            3  119[BANK0 ] PTR PTR unsigned char 
  6326 ;; Auto vars:     Size  Location     Type
  6327 ;;  c               1  123[BANK0 ] unsigned char 
  6328 ;; Return value:  Size  Location     Type
  6329 ;;                  2  117[BANK0 ] int 
  6330 ;; Registers used:
  6331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6332 ;; Tracked objects:
  6333 ;;		On entry : 0/0
  6334 ;;		On exit  : F/0
  6335 ;;		Unchanged: 0/0
  6336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6337 ;;      Params:         0       5       0       0       0       0       0
  6338 ;;      Locals:         0       1       0       0       0       0       0
  6339 ;;      Temps:          0       1       0       0       0       0       0
  6340 ;;      Totals:         0       7       0       0       0       0       0
  6341 ;;Total ram usage:        7 bytes
  6342 ;; Hardware stack levels required when called:   11
  6343 ;; This function calls:
  6344 ;;		_fifo_init
  6345 ;;		_init_crc8
  6346 ;;		_Read_b_eep
  6347 ;;		_vscp_restoreDefaults
  6348 ;;		_init
  6349 ;;		_putsUSART
  6350 ;;		_printFirmwareVersion
  6351 ;;		_printMode
  6352 ;;		_fifo_read
  6353 ;;		_doModeVerbose
  6354 ;;		_doModeVscp
  6355 ;;		_doModeSLCAN
  6356 ;;		_doModeVscpNode
  6357 ;; This function is called by:
  6358 ;;		Startup code after reset
  6359 ;; This function uses a non-reentrant model
  6360 ;;
  6361                           
  6362                           	psect	text0
  6363  0032C4                     __ptext0:
  6364                           	opt stack 0
  6365  0032C4                     _main:
  6366                           	opt stack 20
  6367                           
  6368                           ;main.c: 277: caps.maxVscpFrames = 1;
  6369                           
  6370                           ;incstack = 0
  6371                           ;incstack = 0
  6372  0032C4  0E01               	movlw	1
  6373  0032C6  0101               	movlb	1	; () banked
  6374  0032C8  6FE4               	movwf	_caps& (0+255),b
  6375                           
  6376                           ;main.c: 278: caps.maxCanalFrames = 1;
  6377  0032CA  6FE5               	movwf	(_caps+1)& (0+255),b
  6378                           
  6379                           ; BSR set to: 1
  6380                           ;main.c: 283: fifo_init( &serialInputFifo, serial_inputBuffer, sizeof ( serial_inputBuff
      +                          er));
  6381  0032CC  0E01               	movlw	high _serialInputFifo
  6382  0032CE  6E1F               	movwf	?_fifo_init+1,c
  6383  0032D0  0ED4               	movlw	low _serialInputFifo
  6384  0032D2  6E1E               	movwf	?_fifo_init,c
  6385  0032D4  0102               	movlb	2	; () banked
  6386  0032D6  0E02               	movlw	high _serial_inputBuffer
  6387  0032D8  6E21               	movwf	?_fifo_init+3,c
  6388  0032DA  0E00               	movlw	low _serial_inputBuffer
  6389  0032DC  6E20               	movwf	?_fifo_init+2,c
  6390  0032DE  6A23               	clrf	?_fifo_init+5,c
  6391  0032E0  0E80               	movlw	128
  6392  0032E2  6E22               	movwf	?_fifo_init+4,c
  6393  0032E4  EC49  F02A         	call	_fifo_init	;wreg free
  6394                           
  6395                           ;main.c: 284: fifo_init( &canInputFifo, can_inputBuffer, sizeof ( can_inputBuffer ) );
  6396  0032E8  0101               	movlb	1	; () banked
  6397  0032EA  0E01               	movlw	high _canInputFifo
  6398  0032EC  6E1F               	movwf	?_fifo_init+1,c
  6399  0032EE  0EC4               	movlw	low _canInputFifo
  6400  0032F0  6E1E               	movwf	?_fifo_init,c
  6401  0032F2  0E04               	movlw	high _can_inputBuffer
  6402  0032F4  6E21               	movwf	?_fifo_init+3,c
  6403  0032F6  0E00               	movlw	low _can_inputBuffer
  6404  0032F8  6E20               	movwf	?_fifo_init+2,c
  6405  0032FA  0E01               	movlw	1
  6406  0032FC  6E23               	movwf	?_fifo_init+5,c
  6407  0032FE  0EEE               	movlw	238
  6408  003300  6E22               	movwf	?_fifo_init+4,c
  6409  003302  EC49  F02A         	call	_fifo_init	;wreg free
  6410                           
  6411                           ;main.c: 287: init_crc8();
  6412  003306  ECA3  F027         	call	_init_crc8	;wreg free
  6413                           
  6414                           ;main.c: 291: if ( ( 0x55 != Read_b_eep(0x01) ) ||
  6415                           ;main.c: 292: ( 0xaa != Read_b_eep(0x02) ) ) {
  6416  00330A  6A1F               	clrf	?_Read_b_eep+1,c
  6417  00330C  0E01               	movlw	1
  6418  00330E  6E1E               	movwf	?_Read_b_eep,c
  6419  003310  EC08  F02C         	call	_Read_b_eep	;wreg free
  6420  003314  0A55               	xorlw	85
  6421  003316  E107               	bnz	l13171
  6422  003318  6A1F               	clrf	?_Read_b_eep+1,c
  6423  00331A  0E02               	movlw	2
  6424  00331C  6E1E               	movwf	?_Read_b_eep,c
  6425  00331E  EC08  F02C         	call	_Read_b_eep	;wreg free
  6426  003322  0AAA               	xorlw	170
  6427  003324  A4D8               	btfss	status,2,c
  6428  003326                     l13171:
  6429                           
  6430                           ;main.c: 293: vscp_restoreDefaults();
  6431  003326  EC1A  F02C         	call	_vscp_restoreDefaults	;wreg free
  6432                           
  6433                           ;main.c: 294: }
  6434                           ;main.c: 297: init();
  6435  00332A  EC9B  F029         	call	_init	;wreg free
  6436                           
  6437                           ;main.c: 301: _delay((unsigned long)((10)*(40000000/4000.0)));
  6438  00332E  0E82               	movlw	130
  6439  003330  0100               	movlb	0	; () banked
  6440  003332  6FDA               	movwf	??_main& (0+255),b
  6441  003334  0EDD               	movlw	221
  6442  003336                     u21157:
  6443  003336  2EE8               	decfsz	wreg,f,c
  6444  003338  D7FE               	goto	u21157
  6445  00333A  2FDA               	decfsz	??_main& (0+255),f,b
  6446  00333C  D7FC               	goto	u21157
  6447  00333E  D000               	nop2	
  6448                           
  6449                           ;main.c: 305: putsUSART((char*) "\r\nFrankfurt RS-232 CAN4VSCP module\r\n");
  6450  003340  0E79               	movlw	high STR_1
  6451  003342  6E20               	movwf	?_putsUSART+1,c
  6452  003344  0E30               	movlw	low STR_1
  6453  003346  6E1F               	movwf	?_putsUSART,c
  6454  003348  EC25  F029         	call	_putsUSART	;wreg free
  6455                           
  6456                           ;main.c: 306: putsUSART((char*) "Copyright (C) 2014-2015 Paradise of the Frog AB, Sweden
      +                          \r\n");
  6457  00334C  0E72               	movlw	high STR_2
  6458  00334E  6E20               	movwf	?_putsUSART+1,c
  6459  003350  0ED2               	movlw	low STR_2
  6460  003352  6E1F               	movwf	?_putsUSART,c
  6461  003354  EC25  F029         	call	_putsUSART	;wreg free
  6462                           
  6463                           ;main.c: 307: putsUSART((char*) "http://www.paradiseofthefrog.com\r\n");
  6464  003358  0E79               	movlw	high STR_3
  6465  00335A  6E20               	movwf	?_putsUSART+1,c
  6466  00335C  0E9E               	movlw	low STR_3
  6467  00335E  6E1F               	movwf	?_putsUSART,c
  6468  003360  EC25  F029         	call	_putsUSART	;wreg free
  6469                           
  6470                           ;main.c: 308: printFirmwareVersion();
  6471  003364  ECF3  F025         	call	_printFirmwareVersion	;wreg free
  6472                           
  6473                           ;main.c: 309: printMode();
  6474  003368  EC6A  F027         	call	_printMode	;wreg free
  6475                           
  6476                           ;main.c: 313: if ( 0 != mode ) {
  6477  00336C  0100               	movlb	0	; () banked
  6478  00336E  51DF               	movf	_mode& (0+255),w,b
  6479  003370  E036               	bz	l13205
  6480                           
  6481                           ; BSR set to: 0
  6482                           ;main.c: 315: uint8_t c;
  6483                           ;main.c: 317: putsUSART((char *) "Press 'v' within three seconds to enter verbose mode\r
      +                          \n");
  6484  003372  0E73               	movlw	high STR_4
  6485  003374  6E20               	movwf	?_putsUSART+1,c
  6486  003376  0EEB               	movlw	low STR_4
  6487  003378  6E1F               	movwf	?_putsUSART,c
  6488  00337A  EC25  F029         	call	_putsUSART	;wreg free
  6489                           
  6490                           ;main.c: 319: timekeeper = 0;
  6491  00337E  6A27               	clrf	_timekeeper,c	;volatile
  6492  003380  6A28               	clrf	_timekeeper+1,c	;volatile
  6493  003382  6A29               	clrf	_timekeeper+2,c	;volatile
  6494  003384  6A2A               	clrf	_timekeeper+3,c	;volatile
  6495                           
  6496                           ;main.c: 320: ledFunctionality = 6;
  6497  003386  0E06               	movlw	6
  6498  003388  6E36               	movwf	_ledFunctionality,c
  6499                           
  6500                           ;main.c: 321: while (timekeeper < 3000) {
  6501  00338A  D020               	goto	l13203
  6502  00338C                     l437:
  6503  00338C  0004               	clrwdt		;# 
  6504                           
  6505                           ;main.c: 323: (INTCONbits.GIE = 0);
  6506  00338E  9EF2               	bcf	intcon,7,c	;volatile
  6507                           
  6508                           ;main.c: 324: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
  6509  003390  0E01               	movlw	high _serialInputFifo
  6510  003392  6E1F               	movwf	?_fifo_read+1,c
  6511  003394  0ED4               	movlw	low _serialInputFifo
  6512  003396  6E1E               	movwf	?_fifo_read,c
  6513  003398  0100               	movlb	0	; () banked
  6514  00339A  0E00               	movlw	high main@c
  6515  00339C  6E21               	movwf	?_fifo_read+3,c
  6516  00339E  0EDB               	movlw	low main@c
  6517  0033A0  6E20               	movwf	?_fifo_read+2,c
  6518  0033A2  6A23               	clrf	?_fifo_read+5,c
  6519  0033A4  0E01               	movlw	1
  6520  0033A6  6E22               	movwf	?_fifo_read+4,c
  6521  0033A8  ECDE  F020         	call	_fifo_read	;wreg free
  6522  0033AC  041E               	decf	?_fifo_read,w,c
  6523  0033AE  101F               	iorwf	?_fifo_read+1,w,c
  6524  0033B0  E10C               	bnz	l438
  6525                           
  6526                           ; BSR set to: 0
  6527                           ;main.c: 325: (INTCONbits.GIE = 1);
  6528  0033B2  8EF2               	bsf	intcon,7,c	;volatile
  6529                           
  6530                           ; BSR set to: 0
  6531                           ;main.c: 326: if ('v' == c) {
  6532  0033B4  51DB               	movf	main@c& (0+255),w,b
  6533  0033B6  0A76               	xorlw	118
  6534  0033B8  E108               	bnz	l438
  6535                           
  6536                           ; BSR set to: 0
  6537                           ;main.c: 327: mode = 0;
  6538  0033BA  6BDF               	clrf	_mode& (0+255),b
  6539                           
  6540                           ; BSR set to: 0
  6541                           ;main.c: 328: putsUSART((char *) "Temporary verbose mode set\r\n");
  6542  0033BC  0E7B               	movlw	high STR_5
  6543  0033BE  6E20               	movwf	?_putsUSART+1,c
  6544  0033C0  0E2B               	movlw	low STR_5
  6545  0033C2  6E1F               	movwf	?_putsUSART,c
  6546  0033C4  EC25  F029         	call	_putsUSART	;wreg free
  6547                           
  6548                           ;main.c: 329: break;
  6549  0033C8  D00A               	goto	l13205
  6550  0033CA                     l438:
  6551                           
  6552                           ; BSR set to: 0
  6553                           ;main.c: 330: }
  6554                           ;main.c: 331: }
  6555                           ;main.c: 332: (INTCONbits.GIE = 1);
  6556  0033CA  8EF2               	bsf	intcon,7,c	;volatile
  6557  0033CC                     l13203:
  6558  0033CC  0EB8               	movlw	184
  6559  0033CE  5C27               	subwf	_timekeeper,w,c	;volatile
  6560  0033D0  0E0B               	movlw	11
  6561  0033D2  5828               	subwfb	_timekeeper+1,w,c	;volatile
  6562  0033D4  0E00               	movlw	0
  6563  0033D6  5829               	subwfb	_timekeeper+2,w,c	;volatile
  6564  0033D8  0E00               	movlw	0
  6565  0033DA  582A               	subwfb	_timekeeper+3,w,c	;volatile
  6566  0033DC  E3D7               	bnc	l437
  6567  0033DE                     l13205:
  6568                           
  6569                           ;main.c: 333: }
  6570                           ;main.c: 334: }
  6571                           ;main.c: 336: ledFunctionality = 1;
  6572  0033DE  0E01               	movlw	1
  6573  0033E0  6E36               	movwf	_ledFunctionality,c
  6574  0033E2                     l441:
  6575  0033E2  0004               	clrwdt		;# 
  6576                           
  6577                           ;main.c: 347: if (COMSTATbits.TXBO) {
  6578  0033E4  AA74               	btfss	3956,5,c	;volatile
  6579  0033E6  D002               	goto	l442
  6580                           
  6581                           ;main.c: 349: ledFunctionality = 6;
  6582  0033E8  0E06               	movlw	6
  6583  0033EA  D009               	goto	L1
  6584  0033EC                     l442:
  6585                           
  6586                           ;main.c: 351: else if (COMSTATbits.TXBP || COMSTATbits.RXBP) {
  6587  0033EC  B874               	btfsc	3956,4,c	;volatile
  6588  0033EE  D002               	goto	l13213
  6589  0033F0  A674               	btfss	3956,3,c	;volatile
  6590  0033F2  D002               	goto	l444
  6591  0033F4                     l13213:
  6592                           
  6593                           ;main.c: 353: ledFunctionality = 5;
  6594  0033F4  0E05               	movlw	5
  6595  0033F6  D003               	goto	L1
  6596  0033F8                     l444:
  6597                           
  6598                           ;main.c: 357: ledFunctionality = 4;
  6599  0033F8  0E04               	movlw	4
  6600                           
  6601                           ;main.c: 355: else if (COMSTATbits.EWARN) {
  6602  0033FA  A074               	btfss	3956,0,c	;volatile
  6603                           
  6604                           ;main.c: 359: else {
  6605                           ;main.c: 361: ledFunctionality = 1;
  6606                           
  6607                           ;main.c: 358: }
  6608  0033FC  0E01               	movlw	1
  6609  0033FE                     L1:
  6610  0033FE  6E36               	movwf	_ledFunctionality,c
  6611                           
  6612                           ;main.c: 362: }
  6613                           ;main.c: 365: if (COMSTATbits.RXBnOVFL) {
  6614  003400  AC74               	btfss	3956,6,c	;volatile
  6615  003402  D007               	goto	l13225
  6616                           
  6617                           ;main.c: 366: can_receiveOverruns++;
  6618  003404  0101               	movlb	1	; () banked
  6619  003406  2B00               	incf	_can_receiveOverruns& (0+255),f,b
  6620  003408  0E00               	movlw	0
  6621  00340A  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
  6622  00340C  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
  6623  00340E  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
  6624                           
  6625                           ; BSR set to: 1
  6626                           ;main.c: 367: COMSTATbits.RXBnOVFL = 0;
  6627  003410  9C74               	bcf	3956,6,c	;volatile
  6628  003412                     l13225:
  6629                           
  6630                           ;main.c: 368: }
  6631                           ;main.c: 370: if (0 == mode) {
  6632  003412  0100               	movlb	0	; () banked
  6633  003414  67DF               	tstfsz	_mode& (0+255),b
  6634  003416  D003               	goto	l13229
  6635                           
  6636                           ; BSR set to: 0
  6637                           ;main.c: 371: doModeVerbose();
  6638  003418  EC81  F001         	call	_doModeVerbose	;wreg free
  6639                           
  6640                           ;main.c: 372: }
  6641  00341C  D7E2               	goto	l441
  6642  00341E                     l13229:
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;main.c: 373: else if (1 == mode) {
  6646  00341E  05DF               	decf	_mode& (0+255),w,b
  6647  003420  E103               	bnz	l13233
  6648  003422                     l13231:
  6649                           
  6650                           ; BSR set to: 0
  6651                           ;main.c: 374: doModeVscp();
  6652  003422  EC69  F015         	call	_doModeVscp	;wreg free
  6653                           
  6654                           ;main.c: 375: }
  6655  003426  D7DD               	goto	l441
  6656  003428                     l13233:
  6657                           
  6658                           ; BSR set to: 0
  6659                           ;main.c: 376: else if (2 == mode) {
  6660  003428  51DF               	movf	_mode& (0+255),w,b
  6661  00342A  0A02               	xorlw	2
  6662  00342C  E103               	bnz	l13237
  6663                           
  6664                           ; BSR set to: 0
  6665                           ;main.c: 377: doModeSLCAN();
  6666  00342E  ECFB  F00E         	call	_doModeSLCAN	;wreg free
  6667                           
  6668                           ;main.c: 378: }
  6669  003432  D7D7               	goto	l441
  6670  003434                     l13237:
  6671                           
  6672                           ; BSR set to: 0
  6673                           ;main.c: 379: else if (3 == mode) {
  6674  003434  51DF               	movf	_mode& (0+255),w,b
  6675  003436  0A03               	xorlw	3
  6676  003438  E1F4               	bnz	l13231
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;main.c: 380: doModeVscpNode();
  6680  00343A  EC21  F02C         	call	_doModeVscpNode	;wreg free
  6681                           
  6682                           ;main.c: 381: }
  6683  00343E  D7D1               	goto	l441
  6684  003440                     __end_of_main:
  6685                           	opt stack 0
  6686                           tblptru	equ	0xFF8
  6687                           tblptrh	equ	0xFF7
  6688                           tblptrl	equ	0xFF6
  6689                           tablat	equ	0xFF5
  6690                           prodh	equ	0xFF4
  6691                           prodl	equ	0xFF3
  6692                           intcon	equ	0xFF2
  6693                           indf0	equ	0xFEF
  6694                           postinc0	equ	0xFEE
  6695                           fsr0h	equ	0xFEA
  6696                           fsr0l	equ	0xFE9
  6697                           wreg	equ	0xFE8
  6698                           indf1	equ	0xFE7
  6699                           postinc1	equ	0xFE6
  6700                           postdec1	equ	0xFE5
  6701                           fsr1h	equ	0xFE2
  6702                           fsr1l	equ	0xFE1
  6703                           indf2	equ	0xFDF
  6704                           postinc2	equ	0xFDE
  6705                           postdec2	equ	0xFDD
  6706                           plusw2	equ	0xFDB
  6707                           fsr2h	equ	0xFDA
  6708                           fsr2l	equ	0xFD9
  6709                           status	equ	0xFD8
  6710                           
  6711 ;; *************** function _doModeVscpNode *****************
  6712 ;; Defined at:
  6713 ;;		line 1564 in file "main.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;		None
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;		None
  6718 ;; Return value:  Size  Location     Type
  6719 ;;		None               void
  6720 ;; Registers used:
  6721 ;;		None
  6722 ;; Tracked objects:
  6723 ;;		On entry : F/0
  6724 ;;		On exit  : F/0
  6725 ;;		Unchanged: F/0
  6726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6727 ;;      Params:         0       0       0       0       0       0       0
  6728 ;;      Locals:         0       0       0       0       0       0       0
  6729 ;;      Temps:          0       0       0       0       0       0       0
  6730 ;;      Totals:         0       0       0       0       0       0       0
  6731 ;;Total ram usage:        0 bytes
  6732 ;; Hardware stack levels used:    1
  6733 ;; Hardware stack levels required when called:    3
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_main
  6738 ;; This function uses a non-reentrant model
  6739 ;;
  6740                           
  6741                           	psect	text1
  6742  005842                     __ptext1:
  6743                           	opt stack 0
  6744  005842                     _doModeVscpNode:
  6745                           	opt stack 27
  6746                           
  6747                           ; BSR set to: 0
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;incstack = 0
  6751                           ;incstack = 0
  6752  005842  0012               	return	
  6753  005844                     __end_of_doModeVscpNode:
  6754                           	opt stack 0
  6755                           tblptru	equ	0xFF8
  6756                           tblptrh	equ	0xFF7
  6757                           tblptrl	equ	0xFF6
  6758                           tablat	equ	0xFF5
  6759                           prodh	equ	0xFF4
  6760                           prodl	equ	0xFF3
  6761                           intcon	equ	0xFF2
  6762                           indf0	equ	0xFEF
  6763                           postinc0	equ	0xFEE
  6764                           fsr0h	equ	0xFEA
  6765                           fsr0l	equ	0xFE9
  6766                           wreg	equ	0xFE8
  6767                           indf1	equ	0xFE7
  6768                           postinc1	equ	0xFE6
  6769                           postdec1	equ	0xFE5
  6770                           fsr1h	equ	0xFE2
  6771                           fsr1l	equ	0xFE1
  6772                           indf2	equ	0xFDF
  6773                           postinc2	equ	0xFDE
  6774                           postdec2	equ	0xFDD
  6775                           plusw2	equ	0xFDB
  6776                           fsr2h	equ	0xFDA
  6777                           fsr2l	equ	0xFD9
  6778                           status	equ	0xFD8
  6779                           
  6780 ;; *************** function _doModeSLCAN *****************
  6781 ;; Defined at:
  6782 ;;		line 1346 in file "main.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;		None
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  id              4   52[BANK0 ] unsigned long 
  6787 ;;  dlc             1   56[BANK0 ] unsigned char 
  6788 ;;  rv              1   58[BANK0 ] enum E15660
  6789 ;;  c               1   57[BANK0 ] unsigned char 
  6790 ;; Return value:  Size  Location     Type
  6791 ;;		None               void
  6792 ;; Registers used:
  6793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  6794 ;; Tracked objects:
  6795 ;;		On entry : F/0
  6796 ;;		On exit  : F/0
  6797 ;;		Unchanged: 0/0
  6798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6799 ;;      Params:         0       0       0       0       0       0       0
  6800 ;;      Locals:         0       7       0       0       0       0       0
  6801 ;;      Temps:          0       7       0       0       0       0       0
  6802 ;;      Totals:         0      14       0       0       0       0       0
  6803 ;;Total ram usage:       14 bytes
  6804 ;; Hardware stack levels used:    1
  6805 ;; Hardware stack levels required when called:    7
  6806 ;; This function calls:
  6807 ;;		_putsUSART
  6808 ;;		_fifo_read
  6809 ;;		_Busy_eep
  6810 ;;		_Write_b_eep
  6811 ;;		_ECANSetOperationMode
  6812 ;;		_memset
  6813 ;;		_receiveSendEventSLCAN
  6814 ;;		_strlen
  6815 ;;		_hexStringToBytes
  6816 ;;		_memcpy
  6817 ;;		_sendCANFrame
  6818 ;; This function is called by:
  6819 ;;		_main
  6820 ;; This function uses a non-reentrant model
  6821 ;;
  6822                           
  6823                           	psect	text2
  6824  001DF6                     __ptext2:
  6825                           	opt stack 0
  6826  001DF6                     _doModeSLCAN:
  6827                           	opt stack 23
  6828                           
  6829                           ; BSR set to: 0
  6830                           ;main.c: 1347: uint8_t c;
  6831                           ;main.c: 1348: BOOL rv = 0;
  6832                           
  6833                           ; BSR set to: 0
  6834                           ;incstack = 0
  6835                           ;incstack = 0
  6836  001DF6  6B9A               	clrf	doModeSLCAN@rv& (0+255),b
  6837                           
  6838                           ; BSR set to: 0
  6839                           ;main.c: 1351: receiveSendEventSLCAN();
  6840  001DF8  EC51  F016         	call	_receiveSendEventSLCAN	;wreg free
  6841                           
  6842                           ;main.c: 1354: (INTCONbits.GIE = 0);
  6843  001DFC  9EF2               	bcf	intcon,7,c	;volatile
  6844                           
  6845                           ;main.c: 1356: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  6846  001DFE  0E01               	movlw	high _serialInputFifo
  6847  001E00  6E1F               	movwf	?_fifo_read+1,c
  6848  001E02  0ED4               	movlw	low _serialInputFifo
  6849  001E04  6E1E               	movwf	?_fifo_read,c
  6850  001E06  0100               	movlb	0	; () banked
  6851  001E08  0E00               	movlw	high doModeSLCAN@c
  6852  001E0A  6E21               	movwf	?_fifo_read+3,c
  6853  001E0C  0E99               	movlw	low doModeSLCAN@c
  6854  001E0E  6E20               	movwf	?_fifo_read+2,c
  6855  001E10  6A23               	clrf	?_fifo_read+5,c
  6856  001E12  0E01               	movlw	1
  6857  001E14  6E22               	movwf	?_fifo_read+4,c
  6858  001E16  ECDE  F020         	call	_fifo_read	;wreg free
  6859  001E1A  041E               	decf	?_fifo_read,w,c
  6860  001E1C  101F               	iorwf	?_fifo_read+1,w,c
  6861  001E1E  E001 D1CE          	bnz	l14223
  6862                           
  6863                           ; BSR set to: 0
  6864                           ;main.c: 1359: (INTCONbits.GIE = 1);
  6865  001E22  8EF2               	bsf	intcon,7,c	;volatile
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;main.c: 1361: if (0x0d != c) {
  6869  001E24  5199               	movf	doModeSLCAN@c& (0+255),w,b
  6870  001E26  0A0D               	xorlw	13
  6871  001E28  E101 D17C          	bz	l14211
  6872                           
  6873                           ; BSR set to: 0
  6874                           ;main.c: 1362: cmdbuf[ pos ] = c;
  6875  001E2C  EC49  F016         	call	PL22	;call to abstracted procedure
  6876  001E30  C099  FFDF         	movff	doModeSLCAN@c,indf2
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;main.c: 1363: pos++;
  6880  001E34  2BE0               	incf	_pos& (0+255),f,b
  6881  001E36  D1C4               	goto	l725
  6882  001E38                     l14083:
  6883                           
  6884                           ; BSR set to: 0
  6885                           ;main.c: 1371: if (1 == strlen(cmdbuf)) {
  6886  001E38  0101               	movlb	1	; () banked
  6887  001E3A  0E01               	movlw	high _cmdbuf
  6888  001E3C  6E1F               	movwf	?_strlen+1,c
  6889  001E3E  0E24               	movlw	low _cmdbuf
  6890  001E40  6E1E               	movwf	?_strlen,c
  6891  001E42  ECC6  F02A         	call	_strlen	;wreg free
  6892  001E46  041E               	decf	?_strlen,w,c
  6893  001E48  101F               	iorwf	?_strlen+1,w,c
  6894  001E4A  E001 D19A          	bnz	l14213
  6895                           
  6896                           ;main.c: 1372: putsUSART((char *) "JFrankfurt RS-232\r\n");
  6897  001E4E  0E7D               	movlw	high STR_133
  6898  001E50  6E20               	movwf	?_putsUSART+1,c
  6899  001E52  0E5B               	movlw	low STR_133
  6900  001E54  6E1F               	movwf	?_putsUSART,c
  6901  001E56  EC25  F029         	call	_putsUSART	;wreg free
  6902  001E5A                     l14087:
  6903                           
  6904                           ;main.c: 1373: rv = 1;
  6905  001E5A  0E01               	movlw	1
  6906  001E5C  D118               	goto	L4
  6907  001E5E                     l14089:
  6908                           
  6909                           ; BSR set to: 0
  6910                           ;main.c: 1379: if (1 == strlen(cmdbuf)) {
  6911  001E5E  0101               	movlb	1	; () banked
  6912  001E60  0E01               	movlw	high _cmdbuf
  6913  001E62  6E1F               	movwf	?_strlen+1,c
  6914  001E64  0E24               	movlw	low _cmdbuf
  6915  001E66  6E1E               	movwf	?_strlen,c
  6916  001E68  ECC6  F02A         	call	_strlen	;wreg free
  6917  001E6C  041E               	decf	?_strlen,w,c
  6918  001E6E  101F               	iorwf	?_strlen+1,w,c
  6919  001E70  E001 D187          	bnz	l14213
  6920                           
  6921                           ;main.c: 1380: putsUSART((char *) "V1011\r\n");
  6922  001E74  0E7E               	movlw	high STR_134
  6923  001E76  6E20               	movwf	?_putsUSART+1,c
  6924  001E78  0ED6               	movlw	low STR_134
  6925  001E7A  6E1F               	movwf	?_putsUSART,c
  6926  001E7C  EC25  F029         	call	_putsUSART	;wreg free
  6927  001E80  D7EC               	goto	l14087
  6928  001E82                     l14095:
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;main.c: 1387: if (1 == strlen(cmdbuf)) {
  6932  001E82  0101               	movlb	1	; () banked
  6933  001E84  0E01               	movlw	high _cmdbuf
  6934  001E86  6E1F               	movwf	?_strlen+1,c
  6935  001E88  0E24               	movlw	low _cmdbuf
  6936  001E8A  6E1E               	movwf	?_strlen,c
  6937  001E8C  ECC6  F02A         	call	_strlen	;wreg free
  6938  001E90  041E               	decf	?_strlen,w,c
  6939  001E92  101F               	iorwf	?_strlen+1,w,c
  6940  001E94  E001 D175          	bnz	l14213
  6941                           
  6942                           ;main.c: 1388: putsUSART((char *) "N1977\r\n");
  6943  001E98  0E7E               	movlw	high STR_135
  6944  001E9A  6E20               	movwf	?_putsUSART+1,c
  6945  001E9C  0EDE               	movlw	low STR_135
  6946  001E9E  6E1F               	movwf	?_putsUSART,c
  6947  001EA0  EC25  F029         	call	_putsUSART	;wreg free
  6948  001EA4  D7DA               	goto	l14087
  6949  001EA6                     l14101:
  6950                           
  6951                           ; BSR set to: 0
  6952                           ;main.c: 1397: bInitiated = 1;
  6953  001EA6  0E01               	movlw	1
  6954  001EA8  6E34               	movwf	_bInitiated,c
  6955                           
  6956                           ;main.c: 1398: rv = 1;
  6957  001EAA  D0BC               	goto	L3
  6958  001EAC                     l735:
  6959                           
  6960                           ; BSR set to: 0
  6961                           ;main.c: 1403: if (!bOpen) {
  6962  001EAC  67DD               	tstfsz	_bOpen& (0+255),b
  6963  001EAE  D003               	goto	l14105
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;main.c: 1404: bInitiated = 1;
  6967  001EB0  0E01               	movlw	1
  6968  001EB2  6E34               	movwf	_bInitiated,c
  6969                           
  6970                           ;main.c: 1405: rv = 1;
  6971  001EB4  6F9A               	movwf	doModeSLCAN@rv& (0+255),b
  6972  001EB6                     l14105:
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;main.c: 1410: if (1 == strlen(cmdbuf)) {
  6976  001EB6  0101               	movlb	1	; () banked
  6977  001EB8  0E01               	movlw	high _cmdbuf
  6978  001EBA  6E1F               	movwf	?_strlen+1,c
  6979  001EBC  0E24               	movlw	low _cmdbuf
  6980  001EBE  6E1E               	movwf	?_strlen,c
  6981  001EC0  ECC6  F02A         	call	_strlen	;wreg free
  6982  001EC4  041E               	decf	?_strlen,w,c
  6983  001EC6  101F               	iorwf	?_strlen+1,w,c
  6984  001EC8  E001 D15B          	bnz	l14213
  6985                           
  6986                           ;main.c: 1411: if (!bOpen && bInitiated) {
  6987  001ECC  0100               	movlb	0	; () banked
  6988  001ECE  67DD               	tstfsz	_bOpen& (0+255),b
  6989  001ED0  D158               	goto	l14213
  6990                           
  6991                           ; BSR set to: 0
  6992  001ED2  5034               	movf	_bInitiated,w,c
  6993  001ED4  E101 D155          	bz	l14213
  6994                           
  6995                           ; BSR set to: 0
  6996                           ;main.c: 1412: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  6997  001ED8  0E00               	movlw	0
  6998  001EDA  ECDE  F02B         	call	_ECANSetOperationMode
  6999                           
  7000                           ;main.c: 1413: bOpen = 1;
  7001  001EDE  0E01               	movlw	1
  7002  001EE0  0100               	movlb	0	; () banked
  7003  001EE2  6FDD               	movwf	_bOpen& (0+255),b
  7004  001EE4  D7BA               	goto	l14087
  7005  001EE6                     l14117:
  7006                           
  7007                           ; BSR set to: 0
  7008                           ;main.c: 1421: if (1 == strlen(cmdbuf)) {
  7009  001EE6  0101               	movlb	1	; () banked
  7010  001EE8  0E01               	movlw	high _cmdbuf
  7011  001EEA  6E1F               	movwf	?_strlen+1,c
  7012  001EEC  0E24               	movlw	low _cmdbuf
  7013  001EEE  6E1E               	movwf	?_strlen,c
  7014  001EF0  ECC6  F02A         	call	_strlen	;wreg free
  7015  001EF4  041E               	decf	?_strlen,w,c
  7016  001EF6  101F               	iorwf	?_strlen+1,w,c
  7017  001EF8  E001 D143          	bnz	l14213
  7018                           
  7019                           ;main.c: 1422: if (bOpen) {
  7020  001EFC  0100               	movlb	0	; () banked
  7021  001EFE  51DD               	movf	_bOpen& (0+255),w,b
  7022  001F00  E0AC               	bz	l14087
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;main.c: 1423: ECANSetOperationMode(0x20);
  7026  001F02  0E20               	movlw	32
  7027  001F04  ECDE  F02B         	call	_ECANSetOperationMode
  7028                           
  7029                           ;main.c: 1424: bOpen = 0;
  7030  001F08  0100               	movlb	0	; () banked
  7031  001F0A  6BDD               	clrf	_bOpen& (0+255),b
  7032  001F0C  D7A6               	goto	l14087
  7033  001F0E                     l14127:
  7034                           
  7035                           ; BSR set to: 0
  7036                           ;main.c: 1437: if (bOpen && (strlen(cmdbuf) >= 10)) {
  7037  001F0E  51DD               	movf	_bOpen& (0+255),w,b
  7038  001F10  E101 D137          	bz	l14213
  7039                           
  7040                           ; BSR set to: 0
  7041  001F14  0101               	movlb	1	; () banked
  7042  001F16  0E01               	movlw	high _cmdbuf
  7043  001F18  6E1F               	movwf	?_strlen+1,c
  7044  001F1A  0E24               	movlw	low _cmdbuf
  7045  001F1C  6E1E               	movwf	?_strlen,c
  7046  001F1E  ECC6  F02A         	call	_strlen	;wreg free
  7047  001F22  0E0A               	movlw	10
  7048  001F24  5C1E               	subwf	?_strlen,w,c
  7049  001F26  0E00               	movlw	0
  7050  001F28  581F               	subwfb	?_strlen+1,w,c
  7051  001F2A  E201 D12A          	bnc	l14213
  7052                           
  7053                           ;main.c: 1439: uint32_t id;
  7054                           ;main.c: 1440: uint8_t dlc;
  7055                           ;main.c: 1442: if (hexStringToBytes(wrkbuf, sizeof ( wrkbuf), cmdbuf) < 5) {
  7056  001F2E  0101               	movlb	1	; () banked
  7057  001F30  0E01               	movlw	high _wrkbuf
  7058  001F32  6E23               	movwf	?_hexStringToBytes+1,c
  7059  001F34  0E74               	movlw	low _wrkbuf
  7060  001F36  6E22               	movwf	?_hexStringToBytes,c
  7061  001F38  0E50               	movlw	80
  7062  001F3A  6E24               	movwf	?_hexStringToBytes+2,c
  7063  001F3C  0E01               	movlw	high _cmdbuf
  7064  001F3E  6E26               	movwf	?_hexStringToBytes+4,c
  7065  001F40  0E24               	movlw	low _cmdbuf
  7066  001F42  6E25               	movwf	?_hexStringToBytes+3,c
  7067  001F44  EC10  F025         	call	_hexStringToBytes	;wreg free
  7068  001F48  6F8D               	movwf	??_doModeSLCAN& (0+255),b
  7069  001F4A  0E05               	movlw	5
  7070  001F4C  5D8D               	subwf	??_doModeSLCAN& (0+255),w,b
  7071  001F4E  E201 D118          	bnc	l14213
  7072                           
  7073                           ; BSR set to: 0
  7074                           ;main.c: 1444: }
  7075                           ;main.c: 1446: id = (uint32_t) wrkbuf[0] << 24 + (uint32_t) wrkbuf[1] << 16 + (uint32_t)
      +                           wrkbuf[2] << 8 + wrkbuf[3];
  7076  001F52  C177  F08D         	movff	_wrkbuf+3,??_doModeSLCAN
  7077  001F56  0E08               	movlw	8
  7078  001F58  278D               	addwf	??_doModeSLCAN& (0+255),f,b
  7079  001F5A  C176  F08E         	movff	_wrkbuf+2,??_doModeSLCAN+1
  7080  001F5E  0E10               	movlw	16
  7081  001F60  278E               	addwf	(??_doModeSLCAN+1)& (0+255),f,b
  7082  001F62  C175  F08F         	movff	_wrkbuf+1,??_doModeSLCAN+2
  7083  001F66  0E18               	movlw	24
  7084  001F68  278F               	addwf	(??_doModeSLCAN+2)& (0+255),f,b
  7085  001F6A  C174  F090         	movff	_wrkbuf,??_doModeSLCAN+3
  7086  001F6E  0100               	movlb	0	; () banked
  7087  001F70  6B91               	clrf	(??_doModeSLCAN+4)& (0+255),b
  7088  001F72  6B92               	clrf	(??_doModeSLCAN+5)& (0+255),b
  7089  001F74  6B93               	clrf	(??_doModeSLCAN+6)& (0+255),b
  7090  001F76  2B8F               	incf	(??_doModeSLCAN+2)& (0+255),f,b
  7091  001F78  D001               	goto	u18910
  7092  001F7A                     u18915:
  7093  001F7A  D923               	call	PL80	;call to abstracted procedure
  7094  001F7C                     u18910:
  7095  001F7C  2F8F               	decfsz	(??_doModeSLCAN+2)& (0+255),f,b
  7096  001F7E  D7FD               	goto	u18915
  7097  001F80  2B8E               	incf	(??_doModeSLCAN+1)& (0+255),f,b
  7098  001F82  D001               	goto	u18920
  7099  001F84                     u18925:
  7100  001F84  D91E               	call	PL80	;call to abstracted procedure
  7101  001F86                     u18920:
  7102  001F86  2F8E               	decfsz	(??_doModeSLCAN+1)& (0+255),f,b
  7103  001F88  D7FD               	goto	u18925
  7104  001F8A  2B8D               	incf	??_doModeSLCAN& (0+255),f,b
  7105  001F8C  D001               	goto	u18930
  7106  001F8E                     u18935:
  7107  001F8E  D919               	call	PL80	;call to abstracted procedure
  7108  001F90                     u18930:
  7109  001F90  2F8D               	decfsz	??_doModeSLCAN& (0+255),f,b
  7110  001F92  D7FD               	goto	u18935
  7111  001F94  C093  F097         	movff	??_doModeSLCAN+6,doModeSLCAN@id+3
  7112  001F98  C092  F096         	movff	??_doModeSLCAN+5,doModeSLCAN@id+2
  7113  001F9C  C091  F095         	movff	??_doModeSLCAN+4,doModeSLCAN@id+1
  7114  001FA0  C090  F094         	movff	??_doModeSLCAN+3,doModeSLCAN@id
  7115                           
  7116                           ; BSR set to: 0
  7117                           ;main.c: 1447: dlc = vscpData[4];
  7118  001FA4  C1E0  F098         	movff	_vscpData+4,doModeSLCAN@dlc
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;main.c: 1450: if (dlc > 8) break;
  7122  001FA8  0E08               	movlw	8
  7123  001FAA  6598               	cpfsgt	doModeSLCAN@dlc& (0+255),b
  7124  001FAC  D001               	goto	l14143
  7125  001FAE  D0E9               	goto	l14213
  7126  001FB0                     l14143:
  7127                           
  7128                           ; BSR set to: 0
  7129                           ;main.c: 1451: if (strlen(cmdbuf) < (10 + 2 * dlc)) break;
  7130  001FB0  90D8               	bcf	status,0,c
  7131  001FB2  3598               	rlcf	doModeSLCAN@dlc& (0+255),w,b
  7132  001FB4  6F8D               	movwf	??_doModeSLCAN& (0+255),b
  7133  001FB6  6B8E               	clrf	(??_doModeSLCAN+1)& (0+255),b
  7134  001FB8  378E               	rlcf	(??_doModeSLCAN+1)& (0+255),f,b
  7135  001FBA  0E0A               	movlw	10
  7136  001FBC  278D               	addwf	??_doModeSLCAN& (0+255),f,b
  7137  001FBE  0E00               	movlw	0
  7138  001FC0  238E               	addwfc	(??_doModeSLCAN+1)& (0+255),f,b
  7139  001FC2  0101               	movlb	1	; () banked
  7140  001FC4  0E01               	movlw	high _cmdbuf
  7141  001FC6  6E1F               	movwf	?_strlen+1,c
  7142  001FC8  0E24               	movlw	low _cmdbuf
  7143  001FCA  6E1E               	movwf	?_strlen,c
  7144  001FCC  ECC6  F02A         	call	_strlen	;wreg free
  7145  001FD0  0100               	movlb	0	; () banked
  7146  001FD2  518D               	movf	??_doModeSLCAN& (0+255),w,b
  7147  001FD4  5C1E               	subwf	?_strlen,w,c
  7148  001FD6  518E               	movf	(??_doModeSLCAN+1)& (0+255),w,b
  7149  001FD8  581F               	subwfb	?_strlen+1,w,c
  7150  001FDA  E201 D0D2          	bnc	l14213
  7151                           
  7152                           ; BSR set to: 0
  7153                           ;main.c: 1453: memcpy(vscpData, vscpData + 5, dlc);
  7154  001FDE  0E01               	movlw	high _vscpData
  7155  001FE0  6E1F               	movwf	?_memcpy+1,c
  7156  001FE2  0EDC               	movlw	low _vscpData
  7157  001FE4  6E1E               	movwf	?_memcpy,c
  7158  001FE6  0EE1               	movlw	low (_vscpData+5)
  7159  001FE8  6F8D               	movwf	??_doModeSLCAN& (0+255),b
  7160  001FEA  0E01               	movlw	high (_vscpData+5)
  7161  001FEC  6F8E               	movwf	(??_doModeSLCAN+1)& (0+255),b
  7162  001FEE  C08D  F020         	movff	??_doModeSLCAN,?_memcpy+2
  7163  001FF2  C08E  F021         	movff	??_doModeSLCAN+1,?_memcpy+3
  7164  001FF6  C098  F022         	movff	doModeSLCAN@dlc,?_memcpy+4
  7165  001FFA  6A23               	clrf	?_memcpy+5,c
  7166  001FFC  EC28  F02A         	call	_memcpy	;wreg free
  7167                           
  7168                           ;main.c: 1455: rv = sendCANFrame(id, dlc, vscpData);
  7169  002000  C094  F086         	movff	doModeSLCAN@id,?_sendCANFrame
  7170  002004  C095  F087         	movff	doModeSLCAN@id+1,?_sendCANFrame+1
  7171  002008  C096  F088         	movff	doModeSLCAN@id+2,?_sendCANFrame+2
  7172  00200C  C097  F089         	movff	doModeSLCAN@id+3,?_sendCANFrame+3
  7173  002010  C098  F08A         	movff	doModeSLCAN@dlc,?_sendCANFrame+4
  7174  002014  0E01               	movlw	high _vscpData
  7175  002016  0100               	movlb	0	; () banked
  7176  002018  6F8C               	movwf	(?_sendCANFrame+6)& (0+255),b
  7177  00201A  0EDC               	movlw	low _vscpData
  7178  00201C  6F8B               	movwf	(?_sendCANFrame+5)& (0+255),b
  7179  00201E  ECE4  F02A         	call	_sendCANFrame	;wreg free
  7180  002022  D035               	goto	L4
  7181  002024                     L3:
  7182  002024  6F9A               	movwf	doModeSLCAN@rv& (0+255),b
  7183  002026  D0AD               	goto	l14213
  7184  002028                     l14151:
  7185                           
  7186                           ; BSR set to: 0
  7187                           ;main.c: 1470: if (bOpen && (strlen(cmdbuf) == 1)) {
  7188  002028  51DD               	movf	_bOpen& (0+255),w,b
  7189  00202A  E101 D0AA          	bz	l14213
  7190                           
  7191                           ; BSR set to: 0
  7192  00202E  0101               	movlb	1	; () banked
  7193  002030  0E01               	movlw	high _cmdbuf
  7194  002032  6E1F               	movwf	?_strlen+1,c
  7195  002034  0E24               	movlw	low _cmdbuf
  7196  002036  6E1E               	movwf	?_strlen,c
  7197  002038  ECC6  F02A         	call	_strlen	;wreg free
  7198  00203C  041E               	decf	?_strlen,w,c
  7199  00203E  101F               	iorwf	?_strlen+1,w,c
  7200  002040  E001 D09F          	bnz	l14213
  7201                           
  7202                           ;main.c: 1471: putsUSART((char *) "F00\r\n");
  7203  002044  0E7F               	movlw	high STR_136
  7204  002046  6E20               	movwf	?_putsUSART+1,c
  7205  002048  0E7A               	movlw	low STR_136
  7206  00204A  6E1F               	movwf	?_putsUSART,c
  7207  00204C  EC25  F029         	call	_putsUSART	;wreg free
  7208  002050  D098               	goto	l14213
  7209  002052                     l14161:
  7210                           
  7211                           ; BSR set to: 0
  7212                           ;main.c: 1487: if (2 == strlen(cmdbuf)) {
  7213  002052  0101               	movlb	1	; () banked
  7214  002054  0E01               	movlw	high _cmdbuf
  7215  002056  6E1F               	movwf	?_strlen+1,c
  7216  002058  0E24               	movlw	low _cmdbuf
  7217  00205A  6E1E               	movwf	?_strlen,c
  7218  00205C  ECC6  F02A         	call	_strlen	;wreg free
  7219  002060  501E               	movf	?_strlen,w,c
  7220  002062  0A02               	xorlw	2
  7221  002064  101F               	iorwf	?_strlen+1,w,c
  7222  002066  E001 D08C          	bnz	l14213
  7223                           
  7224                           ;main.c: 1488: if (!bOpen) {
  7225  00206A  0100               	movlb	0	; () banked
  7226  00206C  67DD               	tstfsz	_bOpen& (0+255),b
  7227  00206E  D089               	goto	l14213
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;main.c: 1489: if ('0' == cmdbuf[1]) {
  7231  002070  0101               	movlb	1	; () banked
  7232  002072  5125               	movf	(_cmdbuf+1)& (0+255),w,b
  7233  002074  0A30               	xorlw	48
  7234  002076  E10D               	bnz	l14173
  7235                           
  7236                           ; BSR set to: 1
  7237                           ;main.c: 1490: nTimeStamp = 0;
  7238  002078  6A37               	clrf	_nTimeStamp,c
  7239                           
  7240                           ; BSR set to: 1
  7241                           ;main.c: 1492: (Busy_eep(), Write_b_eep(0x05,0));
  7242  00207A  EC1E  F02C         	call	_Busy_eep	;wreg free
  7243  00207E  6A1F               	clrf	?_Write_b_eep+1,c
  7244  002080  0E05               	movlw	5
  7245  002082  6E1E               	movwf	?_Write_b_eep,c
  7246  002084  0E00               	movlw	0
  7247  002086  6A20               	clrf	?_Write_b_eep+2,c
  7248  002088  EC39  F02B         	call	_Write_b_eep	;wreg free
  7249  00208C  D6E6               	goto	l14087
  7250  00208E                     L4:
  7251  00208E  0100               	movlb	0	; () banked
  7252  002090  D7C9               	goto	L3
  7253  002092                     l14173:
  7254                           
  7255                           ; BSR set to: 1
  7256  002092  5125               	movf	(_cmdbuf+1)& (0+255),w,b
  7257  002094  0A31               	xorlw	49
  7258  002096  E10C               	bnz	l760
  7259                           
  7260                           ; BSR set to: 1
  7261                           ;main.c: 1495: nTimeStamp = 1;
  7262  002098  0E01               	movlw	1
  7263  00209A  6E37               	movwf	_nTimeStamp,c
  7264                           
  7265                           ; BSR set to: 1
  7266                           ;main.c: 1497: (Busy_eep(), Write_b_eep(0x05,1));
  7267  00209C  EC1E  F02C         	call	_Busy_eep	;wreg free
  7268  0020A0  6A1F               	clrf	?_Write_b_eep+1,c
  7269  0020A2  0E05               	movlw	5
  7270  0020A4  6E1E               	movwf	?_Write_b_eep,c
  7271  0020A6  0E01               	movlw	1
  7272  0020A8  6E20               	movwf	?_Write_b_eep+2,c
  7273  0020AA  EC39  F02B         	call	_Write_b_eep	;wreg free
  7274  0020AE  D6D5               	goto	l14087
  7275  0020B0                     l760:
  7276                           
  7277                           ; BSR set to: 1
  7278                           ;main.c: 1501: rv = 0;
  7279  0020B0  0100               	movlb	0	; () banked
  7280  0020B2  6B9A               	clrf	doModeSLCAN@rv& (0+255),b
  7281  0020B4  D066               	goto	l14213
  7282  0020B6                     l14181:
  7283                           
  7284                           ; BSR set to: 0
  7285                           ;main.c: 1509: (Busy_eep(), Write_b_eep(0x01,0xFF));
  7286  0020B6  EC1E  F02C         	call	_Busy_eep	;wreg free
  7287  0020BA  6A1F               	clrf	?_Write_b_eep+1,c
  7288  0020BC  0E01               	movlw	1
  7289  0020BE  6E1E               	movwf	?_Write_b_eep,c
  7290  0020C0  0EFF               	movlw	255
  7291  0020C2  6820               	setf	?_Write_b_eep+2,c
  7292  0020C4  EC39  F02B         	call	_Write_b_eep	;wreg free
  7293  0020C8  00FF               	reset		;# 
  7294                           
  7295                           ;main.c: 1511: break;
  7296  0020CA  D05B               	goto	l14213
  7297  0020CC                     l14185:
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;main.c: 1515: if ( 'v' == cmdbuf[1] &&
  7301                           ;main.c: 1516: 's' == cmdbuf[2] &&
  7302                           ;main.c: 1517: 'c' == cmdbuf[3] &&
  7303                           ;main.c: 1518: 'p' == cmdbuf[4] ) {
  7304  0020CC  0101               	movlb	1	; () banked
  7305  0020CE  5125               	movf	(_cmdbuf+1)& (0+255),w,b
  7306  0020D0  0A76               	xorlw	118
  7307  0020D2  E10D               	bnz	l14195
  7308                           
  7309                           ; BSR set to: 1
  7310  0020D4  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  7311  0020D6  0A73               	xorlw	115
  7312  0020D8  E10A               	bnz	l14195
  7313                           
  7314                           ; BSR set to: 1
  7315  0020DA  5127               	movf	(_cmdbuf+3)& (0+255),w,b
  7316  0020DC  0A63               	xorlw	99
  7317  0020DE  E107               	bnz	l14195
  7318                           
  7319                           ; BSR set to: 1
  7320  0020E0  5128               	movf	(_cmdbuf+4)& (0+255),w,b
  7321  0020E2  0A70               	xorlw	112
  7322  0020E4  E104               	bnz	l14195
  7323                           
  7324                           ; BSR set to: 1
  7325                           ;main.c: 1519: mode = 1;
  7326  0020E6  0E01               	movlw	1
  7327  0020E8  0100               	movlb	0	; () banked
  7328  0020EA  6FDF               	movwf	_mode& (0+255),b
  7329                           
  7330                           ;main.c: 1520: }
  7331  0020EC  D04A               	goto	l14213
  7332  0020EE                     l14195:
  7333                           
  7334                           ; BSR set to: 1
  7335                           ;main.c: 1521: else if ( 'v' == cmdbuf[1] &&
  7336                           ;main.c: 1522: 'e' == cmdbuf[2] &&
  7337                           ;main.c: 1523: 'r' == cmdbuf[3] &&
  7338                           ;main.c: 1524: 'b' == cmdbuf[4] ) {
  7339  0020EE  5125               	movf	(_cmdbuf+1)& (0+255),w,b
  7340  0020F0  0A76               	xorlw	118
  7341  0020F2  E147               	bnz	l14213
  7342                           
  7343                           ; BSR set to: 1
  7344  0020F4  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  7345  0020F6  0A65               	xorlw	101
  7346  0020F8  E144               	bnz	l14213
  7347                           
  7348                           ; BSR set to: 1
  7349  0020FA  5127               	movf	(_cmdbuf+3)& (0+255),w,b
  7350  0020FC  0A72               	xorlw	114
  7351  0020FE  E141               	bnz	l14213
  7352                           
  7353                           ; BSR set to: 1
  7354  002100  5128               	movf	(_cmdbuf+4)& (0+255),w,b
  7355  002102  0A62               	xorlw	98
  7356  002104  E13E               	bnz	l14213
  7357                           
  7358                           ; BSR set to: 1
  7359                           ;main.c: 1525: mode = 0;
  7360  002106  0100               	movlb	0	; () banked
  7361  002108  6BDF               	clrf	_mode& (0+255),b
  7362  00210A  D03B               	goto	l14213
  7363  00210C                     l14205:
  7364                           
  7365                           ; BSR set to: 0
  7366                           ;main.c: 1530: {
  7367                           ;main.c: 1532: if (0 == strlen(cmdbuf)) {
  7368  00210C  0101               	movlb	1	; () banked
  7369  00210E  0E01               	movlw	high _cmdbuf
  7370  002110  6E1F               	movwf	?_strlen+1,c
  7371  002112  0E24               	movlw	low _cmdbuf
  7372  002114  6E1E               	movwf	?_strlen,c
  7373  002116  ECC6  F02A         	call	_strlen	;wreg free
  7374  00211A  501F               	movf	?_strlen+1,w,c
  7375  00211C  101E               	iorwf	?_strlen,w,c
  7376  00211E  E101 D69C          	bz	l14087
  7377  002122  D02F               	goto	l14213
  7378  002124                     l14211:
  7379                           
  7380                           ; BSR set to: 0
  7381  002124  5199               	movf	doModeSLCAN@c& (0+255),w,b
  7382                           
  7383                           ; Switch size 1, requested type "space"
  7384                           ; Number of cases is 17, Range of values is 64 to 116
  7385                           ; switch strategies available:
  7386                           ; Name         Instructions Cycles
  7387                           ; simple_byte           52    27 (average)
  7388                           ;	Chosen strategy is simple_byte
  7389  002126  0A40               	xorlw	64	; case 64
  7390  002128  E0D1               	bz	l14185
  7391  00212A  0A02               	xorlw	2	; case 66
  7392  00212C  E0C4               	bz	l14181
  7393  00212E  0A01               	xorlw	1	; case 67
  7394  002130  E101 D6D9          	bz	l14117
  7395  002134  0A05               	xorlw	5	; case 70
  7396  002136  E101 D777          	bz	l14151
  7397  00213A  0A0C               	xorlw	12	; case 74
  7398  00213C  E101 D67C          	bz	l14083
  7399  002140  0A07               	xorlw	7	; case 77
  7400  002142  E101 D68A          	bz	l14087
  7401  002146  0A03               	xorlw	3	; case 78
  7402  002148  E101 D69B          	bz	l14095
  7403  00214C  0A01               	xorlw	1	; case 79
  7404  00214E  E101 D6B2          	bz	l14105
  7405  002152  0A1D               	xorlw	29	; case 82
  7406  002154  E016               	bz	l14213
  7407  002156  0A01               	xorlw	1	; case 83
  7408  002158  E101 D6A5          	bz	l14101
  7409  00215C  0A07               	xorlw	7	; case 84
  7410  00215E  E101 D6D6          	bz	l14127
  7411  002162  0A02               	xorlw	2	; case 86
  7412  002164  E101 D67B          	bz	l14089
  7413  002168  0A0C               	xorlw	12	; case 90
  7414  00216A  E101 D772          	bz	l14161
  7415  00216E  0A37               	xorlw	55	; case 109
  7416  002170  E101 D673          	bz	l14087
  7417  002174  0A1F               	xorlw	31	; case 114
  7418  002176  E005               	bz	l14213
  7419  002178  0A01               	xorlw	1	; case 115
  7420  00217A  E101 D697          	bz	l735
  7421  00217E  0A07               	xorlw	7	; case 116
  7422  002180  E1C5               	bnz	l14205
  7423  002182                     l14213:
  7424                           
  7425                           ;main.c: 1540: if (rv) {
  7426  002182  0100               	movlb	0	; () banked
  7427  002184  519A               	movf	doModeSLCAN@rv& (0+255),w,b
  7428  002186  E007               	bz	l14217
  7429                           
  7430                           ; BSR set to: 0
  7431                           ;main.c: 1542: putsUSART((char *) "\r");
  7432  002188  0E7F               	movlw	high STR_137
  7433  00218A  6E20               	movwf	?_putsUSART+1,c
  7434  00218C  0EF3               	movlw	low STR_137
  7435  00218E  6E1F               	movwf	?_putsUSART,c
  7436  002190  EC25  F029         	call	_putsUSART	;wreg free
  7437                           
  7438                           ;main.c: 1543: }
  7439  002194  D006               	goto	l14219
  7440  002196                     l14217:
  7441                           
  7442                           ; BSR set to: 0
  7443                           ;main.c: 1544: else {
  7444                           ;main.c: 1546: putsUSART((char *) "\a");
  7445  002196  0E7F               	movlw	high STR_138
  7446  002198  6E20               	movwf	?_putsUSART+1,c
  7447  00219A  0EF1               	movlw	low STR_138
  7448  00219C  6E1F               	movwf	?_putsUSART,c
  7449  00219E  EC25  F029         	call	_putsUSART	;wreg free
  7450  0021A2                     l14219:
  7451                           
  7452                           ;main.c: 1547: }
  7453                           ;main.c: 1550: memset( cmdbuf, 0, sizeof( cmdbuf ) );
  7454  0021A2  0101               	movlb	1	; () banked
  7455  0021A4  0E01               	movlw	high _cmdbuf
  7456  0021A6  6E1F               	movwf	?_memset+1,c
  7457  0021A8  0E24               	movlw	low _cmdbuf
  7458  0021AA  6E1E               	movwf	?_memset,c
  7459  0021AC  6A21               	clrf	?_memset+3,c
  7460  0021AE  6A20               	clrf	?_memset+2,c
  7461  0021B0  6A23               	clrf	?_memset+5,c
  7462  0021B2  0E50               	movlw	80
  7463  0021B4  6E22               	movwf	?_memset+4,c
  7464  0021B6  EC9B  F02B         	call	_memset	;wreg free
  7465                           
  7466                           ;main.c: 1551: pos = 0;
  7467  0021BA  0100               	movlb	0	; () banked
  7468  0021BC  6BE0               	clrf	_pos& (0+255),b
  7469  0021BE                     l14223:
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;main.c: 1553: }
  7473                           ;main.c: 1556: (INTCONbits.GIE = 1);
  7474  0021BE  8EF2               	bsf	intcon,7,c	;volatile
  7475  0021C0                     l725:
  7476                           
  7477                           ; BSR set to: 0
  7478  0021C0  0012               	return	
  7479  0021C2                     __end_of_doModeSLCAN:
  7480                           	opt stack 0
  7481  0021C2                     PL80:
  7482                           	opt stack 23
  7483  0021C2  90D8               	bcf	status,0,c
  7484  0021C4  3790               	rlcf	(??_doModeSLCAN+3)& (0+255),f,b
  7485  0021C6  3791               	rlcf	(??_doModeSLCAN+4)& (0+255),f,b
  7486  0021C8  3792               	rlcf	(??_doModeSLCAN+5)& (0+255),f,b
  7487  0021CA  3793               	rlcf	(??_doModeSLCAN+6)& (0+255),f,b
  7488  0021CC  0012               	return	
  7489  0021CE                     __end_ofPL80:
  7490                           	opt stack 0
  7491                           tblptru	equ	0xFF8
  7492                           tblptrh	equ	0xFF7
  7493                           tblptrl	equ	0xFF6
  7494                           tablat	equ	0xFF5
  7495                           prodh	equ	0xFF4
  7496                           prodl	equ	0xFF3
  7497                           intcon	equ	0xFF2
  7498                           indf0	equ	0xFEF
  7499                           postinc0	equ	0xFEE
  7500                           fsr0h	equ	0xFEA
  7501                           fsr0l	equ	0xFE9
  7502                           wreg	equ	0xFE8
  7503                           indf1	equ	0xFE7
  7504                           postinc1	equ	0xFE6
  7505                           postdec1	equ	0xFE5
  7506                           fsr1h	equ	0xFE2
  7507                           fsr1l	equ	0xFE1
  7508                           indf2	equ	0xFDF
  7509                           postinc2	equ	0xFDE
  7510                           postdec2	equ	0xFDD
  7511                           plusw2	equ	0xFDB
  7512                           fsr2h	equ	0xFDA
  7513                           fsr2l	equ	0xFD9
  7514                           status	equ	0xFD8
  7515                           
  7516 ;; *************** function _hexStringToBytes *****************
  7517 ;; Defined at:
  7518 ;;		line 35 in file "hexutils.c"
  7519 ;; Parameters:    Size  Location     Type
  7520 ;;  buf             2   33[COMRAM] PTR unsigned char 
  7521 ;;		 -> wrkbuf(80), 
  7522 ;;  size            1   35[COMRAM] unsigned char 
  7523 ;;  inhex           2   36[COMRAM] PTR unsigned char 
  7524 ;;		 -> cmdbuf(80), 
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;  i               2    7[BANK0 ] int 
  7527 ;;  p               2    5[BANK0 ] PTR unsigned char 
  7528 ;;		 -> cmdbuf(80), 
  7529 ;;  len             2    3[BANK0 ] int 
  7530 ;; Return value:  Size  Location     Type
  7531 ;;                  1    wreg      unsigned char 
  7532 ;; Registers used:
  7533 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7534 ;; Tracked objects:
  7535 ;;		On entry : F/1
  7536 ;;		On exit  : F/0
  7537 ;;		Unchanged: 0/0
  7538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7539 ;;      Params:         5       0       0       0       0       0       0
  7540 ;;      Locals:         0       6       0       0       0       0       0
  7541 ;;      Temps:          0       3       0       0       0       0       0
  7542 ;;      Totals:         5       9       0       0       0       0       0
  7543 ;;Total ram usage:       14 bytes
  7544 ;; Hardware stack levels used:    1
  7545 ;; Hardware stack levels required when called:    4
  7546 ;; This function calls:
  7547 ;;		_strlen
  7548 ;;		_nibbleFromChar
  7549 ;; This function is called by:
  7550 ;;		_doModeSLCAN
  7551 ;; This function uses a non-reentrant model
  7552 ;;
  7553                           
  7554                           	psect	text3
  7555  004A20                     __ptext3:
  7556                           	opt stack 0
  7557  004A20                     _hexStringToBytes:
  7558                           	opt stack 25
  7559                           
  7560                           ; BSR set to: 1
  7561                           ;hexutils.c: 36: uint8_t *p;
  7562                           ;hexutils.c: 37: int len, i;
  7563                           ;hexutils.c: 39: len = strlen(inhex) / 2;
  7564                           
  7565                           ; BSR set to: 0
  7566                           ;incstack = 0
  7567                           ;incstack = 0
  7568  004A20  C025  F01E         	movff	hexStringToBytes@inhex,?_strlen
  7569  004A24  C026  F01F         	movff	hexStringToBytes@inhex+1,?_strlen+1
  7570  004A28  ECC6  F02A         	call	_strlen	;wreg free
  7571  004A2C  90D8               	bcf	status,0,c
  7572  004A2E  301F               	rrcf	?_strlen+1,w,c
  7573  004A30  0100               	movlb	0	; () banked
  7574  004A32  6F64               	movwf	(hexStringToBytes@len+1)& (0+255),b
  7575  004A34  301E               	rrcf	?_strlen,w,c
  7576  004A36  6F63               	movwf	hexStringToBytes@len& (0+255),b
  7577                           
  7578                           ; BSR set to: 0
  7579                           ;hexutils.c: 40: if (len > size) return 0;
  7580  004A38  5024               	movf	hexStringToBytes@size,w,c
  7581  004A3A  6F60               	movwf	??_hexStringToBytes& (0+255),b
  7582  004A3C  6B61               	clrf	(??_hexStringToBytes+1)& (0+255),b
  7583  004A3E  5161               	movf	(??_hexStringToBytes+1)& (0+255),w,b
  7584  004A40  0A80               	xorlw	128
  7585  004A42  6F62               	movwf	(??_hexStringToBytes+2)& (0+255),b
  7586  004A44  5163               	movf	hexStringToBytes@len& (0+255),w,b
  7587  004A46  5D60               	subwf	??_hexStringToBytes& (0+255),w,b
  7588  004A48  5164               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7589  004A4A  0A80               	xorlw	128
  7590  004A4C  5962               	subwfb	(??_hexStringToBytes+2)& (0+255),w,b
  7591  004A4E  E202               	bc	l1593
  7592                           
  7593                           ; BSR set to: 0
  7594  004A50  0E00               	movlw	0
  7595  004A52  D033               	goto	l1594
  7596  004A54                     l1593:
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;hexutils.c: 41: for (i = 0, p = (uint8_t *) inhex; i < len; i++) {
  7600  004A54  6B67               	clrf	hexStringToBytes@i& (0+255),b
  7601  004A56  6B68               	clrf	(hexStringToBytes@i+1)& (0+255),b
  7602  004A58  C025  F065         	movff	hexStringToBytes@inhex,hexStringToBytes@p
  7603  004A5C  C026  F066         	movff	hexStringToBytes@inhex+1,hexStringToBytes@p+1
  7604  004A60  D022               	goto	l12683
  7605  004A62                     l12677:
  7606                           
  7607                           ; BSR set to: 0
  7608                           ;hexutils.c: 42: buf[ i ] = (nibbleFromChar(*p) << 4) | nibbleFromChar(*(p + 1));
  7609  004A62  5167               	movf	hexStringToBytes@i& (0+255),w,b
  7610  004A64  2422               	addwf	hexStringToBytes@buf,w,c
  7611  004A66  6ED9               	movwf	fsr2l,c
  7612  004A68  5168               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7613  004A6A  2023               	addwfc	hexStringToBytes@buf+1,w,c
  7614  004A6C  6EDA               	movwf	fsr2h,c
  7615  004A6E  EE10 F001          	lfsr	1,1
  7616  004A72  5165               	movf	hexStringToBytes@p& (0+255),w,b
  7617  004A74  26E1               	addwf	fsr1l,f,c
  7618  004A76  5166               	movf	(hexStringToBytes@p+1)& (0+255),w,b
  7619  004A78  22E2               	addwfc	fsr1h,f,c
  7620  004A7A  50E7               	movf	indf1,w,c
  7621  004A7C  EC69  F02A         	call	_nibbleFromChar
  7622  004A80  6F60               	movwf	??_hexStringToBytes& (0+255),b
  7623  004A82  C065  FFE1         	movff	hexStringToBytes@p,fsr1l
  7624  004A86  C066  FFE2         	movff	hexStringToBytes@p+1,fsr1h
  7625  004A8A  50E7               	movf	indf1,w,c
  7626  004A8C  EC69  F02A         	call	_nibbleFromChar
  7627  004A90  6F61               	movwf	(??_hexStringToBytes+1)& (0+255),b
  7628  004A92  3961               	swapf	(??_hexStringToBytes+1)& (0+255),w,b
  7629  004A94  0BF0               	andlw	240
  7630  004A96  1160               	iorwf	??_hexStringToBytes& (0+255),w,b
  7631  004A98  6EDF               	movwf	indf2,c
  7632                           
  7633                           ; BSR set to: 0
  7634                           ;hexutils.c: 43: p += 2;
  7635  004A9A  0E02               	movlw	2
  7636  004A9C  2765               	addwf	hexStringToBytes@p& (0+255),f,b
  7637  004A9E  0E00               	movlw	0
  7638  004AA0  2366               	addwfc	(hexStringToBytes@p+1)& (0+255),f,b
  7639                           
  7640                           ; BSR set to: 0
  7641  004AA2  4B67               	infsnz	hexStringToBytes@i& (0+255),f,b
  7642  004AA4  2B68               	incf	(hexStringToBytes@i+1)& (0+255),f,b
  7643  004AA6                     l12683:
  7644                           
  7645                           ; BSR set to: 0
  7646  004AA6  5168               	movf	(hexStringToBytes@i+1)& (0+255),w,b
  7647  004AA8  0A80               	xorlw	128
  7648  004AAA  6F60               	movwf	??_hexStringToBytes& (0+255),b
  7649  004AAC  5163               	movf	hexStringToBytes@len& (0+255),w,b
  7650  004AAE  5D67               	subwf	hexStringToBytes@i& (0+255),w,b
  7651  004AB0  5164               	movf	(hexStringToBytes@len+1)& (0+255),w,b
  7652  004AB2  0A80               	xorlw	128
  7653  004AB4  5960               	subwfb	??_hexStringToBytes& (0+255),w,b
  7654  004AB6  E3D5               	bnc	l12677
  7655                           
  7656                           ; BSR set to: 0
  7657                           ;hexutils.c: 44: }
  7658                           ;hexutils.c: 46: return i;
  7659  004AB8  5167               	movf	hexStringToBytes@i& (0+255),w,b
  7660  004ABA                     l1594:
  7661                           
  7662                           ; BSR set to: 0
  7663  004ABA  0012               	return	
  7664  004ABC                     __end_of_hexStringToBytes:
  7665                           	opt stack 0
  7666                           tblptru	equ	0xFF8
  7667                           tblptrh	equ	0xFF7
  7668                           tblptrl	equ	0xFF6
  7669                           tablat	equ	0xFF5
  7670                           prodh	equ	0xFF4
  7671                           prodl	equ	0xFF3
  7672                           intcon	equ	0xFF2
  7673                           indf0	equ	0xFEF
  7674                           postinc0	equ	0xFEE
  7675                           fsr0h	equ	0xFEA
  7676                           fsr0l	equ	0xFE9
  7677                           wreg	equ	0xFE8
  7678                           indf1	equ	0xFE7
  7679                           postinc1	equ	0xFE6
  7680                           postdec1	equ	0xFE5
  7681                           fsr1h	equ	0xFE2
  7682                           fsr1l	equ	0xFE1
  7683                           indf2	equ	0xFDF
  7684                           postinc2	equ	0xFDE
  7685                           postdec2	equ	0xFDD
  7686                           plusw2	equ	0xFDB
  7687                           fsr2h	equ	0xFDA
  7688                           fsr2l	equ	0xFD9
  7689                           status	equ	0xFD8
  7690                           
  7691 ;; *************** function _nibbleFromChar *****************
  7692 ;; Defined at:
  7693 ;;		line 20 in file "hexutils.c"
  7694 ;; Parameters:    Size  Location     Type
  7695 ;;  c               1    wreg     unsigned char 
  7696 ;; Auto vars:     Size  Location     Type
  7697 ;;  c               1   29[COMRAM] unsigned char 
  7698 ;; Return value:  Size  Location     Type
  7699 ;;                  1    wreg      unsigned char 
  7700 ;; Registers used:
  7701 ;;		wreg, status,2, status,0
  7702 ;; Tracked objects:
  7703 ;;		On entry : F/0
  7704 ;;		On exit  : F/0
  7705 ;;		Unchanged: F/0
  7706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7707 ;;      Params:         0       0       0       0       0       0       0
  7708 ;;      Locals:         1       0       0       0       0       0       0
  7709 ;;      Temps:          0       0       0       0       0       0       0
  7710 ;;      Totals:         1       0       0       0       0       0       0
  7711 ;;Total ram usage:        1 bytes
  7712 ;; Hardware stack levels used:    1
  7713 ;; Hardware stack levels required when called:    3
  7714 ;; This function calls:
  7715 ;;		Nothing
  7716 ;; This function is called by:
  7717 ;;		_hexStringToBytes
  7718 ;; This function uses a non-reentrant model
  7719 ;;
  7720                           
  7721                           	psect	text4
  7722  0054D2                     __ptext4:
  7723                           	opt stack 0
  7724  0054D2                     _nibbleFromChar:
  7725                           	opt stack 25
  7726                           
  7727                           ; BSR set to: 0
  7728                           ;incstack = 0
  7729                           ;incstack = 0
  7730                           ;nibbleFromChar@c stored from wreg
  7731  0054D2  CFE8 F01E          	movff	wreg,nibbleFromChar@c
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;hexutils.c: 21: if (c >= '0' && c <= '9') return c - '0';
  7735  0054D6  0E2F               	movlw	47
  7736  0054D8  641E               	cpfsgt	nibbleFromChar@c,c
  7737  0054DA  D006               	goto	l12957
  7738                           
  7739                           ; BSR set to: 0
  7740  0054DC  0E3A               	movlw	58
  7741  0054DE  601E               	cpfslt	nibbleFromChar@c,c
  7742  0054E0  D003               	goto	l12957
  7743                           
  7744                           ; BSR set to: 0
  7745  0054E2  501E               	movf	nibbleFromChar@c,w,c
  7746  0054E4  0FD0               	addlw	208
  7747  0054E6  D013               	goto	l1588
  7748  0054E8                     l12957:
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;hexutils.c: 22: if (c >= 'a' && c <= 'f') return c - 'a' + 10;
  7752  0054E8  0E60               	movlw	96
  7753  0054EA  641E               	cpfsgt	nibbleFromChar@c,c
  7754  0054EC  D006               	goto	l12965
  7755                           
  7756                           ; BSR set to: 0
  7757  0054EE  0E67               	movlw	103
  7758  0054F0  601E               	cpfslt	nibbleFromChar@c,c
  7759  0054F2  D003               	goto	l12965
  7760                           
  7761                           ; BSR set to: 0
  7762  0054F4  501E               	movf	nibbleFromChar@c,w,c
  7763  0054F6  0FA9               	addlw	169
  7764  0054F8  D00A               	goto	l1588
  7765  0054FA                     l12965:
  7766                           
  7767                           ; BSR set to: 0
  7768                           ;hexutils.c: 23: if (c >= 'A' && c <= 'F') return c - 'A' + 10;
  7769  0054FA  0E40               	movlw	64
  7770  0054FC  641E               	cpfsgt	nibbleFromChar@c,c
  7771  0054FE  D006               	goto	l12973
  7772                           
  7773                           ; BSR set to: 0
  7774  005500  0E47               	movlw	71
  7775  005502  601E               	cpfslt	nibbleFromChar@c,c
  7776  005504  D003               	goto	l12973
  7777                           
  7778                           ; BSR set to: 0
  7779  005506  501E               	movf	nibbleFromChar@c,w,c
  7780  005508  0FC9               	addlw	201
  7781  00550A  D001               	goto	l1588
  7782  00550C                     l12973:
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;hexutils.c: 24: return 255;
  7786  00550C  0EFF               	movlw	255
  7787  00550E                     l1588:
  7788                           
  7789                           ; BSR set to: 0
  7790  00550E  0012               	return	
  7791  005510                     __end_of_nibbleFromChar:
  7792                           	opt stack 0
  7793                           tblptru	equ	0xFF8
  7794                           tblptrh	equ	0xFF7
  7795                           tblptrl	equ	0xFF6
  7796                           tablat	equ	0xFF5
  7797                           prodh	equ	0xFF4
  7798                           prodl	equ	0xFF3
  7799                           intcon	equ	0xFF2
  7800                           indf0	equ	0xFEF
  7801                           postinc0	equ	0xFEE
  7802                           fsr0h	equ	0xFEA
  7803                           fsr0l	equ	0xFE9
  7804                           wreg	equ	0xFE8
  7805                           indf1	equ	0xFE7
  7806                           postinc1	equ	0xFE6
  7807                           postdec1	equ	0xFE5
  7808                           fsr1h	equ	0xFE2
  7809                           fsr1l	equ	0xFE1
  7810                           indf2	equ	0xFDF
  7811                           postinc2	equ	0xFDE
  7812                           postdec2	equ	0xFDD
  7813                           plusw2	equ	0xFDB
  7814                           fsr2h	equ	0xFDA
  7815                           fsr2l	equ	0xFD9
  7816                           status	equ	0xFD8
  7817                           
  7818 ;; *************** function _receiveSendEventSLCAN *****************
  7819 ;; Defined at:
  7820 ;;		line 2153 in file "main.c"
  7821 ;; Parameters:    Size  Location     Type
  7822 ;;		None
  7823 ;; Auto vars:     Size  Location     Type
  7824 ;;  id              4   29[BANK0 ] unsigned long 
  7825 ;;  i               2   34[BANK0 ] int 
  7826 ;;  dlc             1   33[BANK0 ] unsigned char 
  7827 ;; Return value:  Size  Location     Type
  7828 ;;                  1    wreg      enum E15660
  7829 ;; Registers used:
  7830 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  7831 ;; Tracked objects:
  7832 ;;		On entry : F/0
  7833 ;;		On exit  : 0/0
  7834 ;;		Unchanged: 0/0
  7835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  7836 ;;      Params:         0       0       0       0       0       0       0
  7837 ;;      Locals:         0       7       0       0       0       0       0
  7838 ;;      Temps:          0       3       0       0       0       0       0
  7839 ;;      Totals:         0      10       0       0       0       0       0
  7840 ;;Total ram usage:       10 bytes
  7841 ;; Hardware stack levels used:    1
  7842 ;; Hardware stack levels required when called:    6
  7843 ;; This function calls:
  7844 ;;		_putsUSART
  7845 ;;		_WriteUSART
  7846 ;;		_strlen
  7847 ;;		_getCANFrame
  7848 ;;		_ultoa
  7849 ;;		_itoa
  7850 ;; This function is called by:
  7851 ;;		_doModeSLCAN
  7852 ;; This function uses a non-reentrant model
  7853 ;;
  7854                           
  7855                           	psect	text5
  7856  002CA2                     __ptext5:
  7857                           	opt stack 0
  7858  002CA2                     _receiveSendEventSLCAN:
  7859                           	opt stack 23
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;main.c: 2154: int i;
  7863                           ;main.c: 2155: uint8_t dlc;
  7864                           ;main.c: 2156: uint32_t id;
  7865                           ;main.c: 2158: if (getCANFrame(&id, &dlc, vscpData)) {
  7866                           
  7867                           ; BSR set to: 0
  7868                           ;incstack = 0
  7869                           ;incstack = 0
  7870  002CA2  0E81               	movlw	low receiveSendEventSLCAN@dlc
  7871  002CA4  6F68               	movwf	?_getCANFrame& (0+255),b
  7872  002CA6  0E01               	movlw	high _vscpData
  7873  002CA8  0100               	movlb	0	; () banked
  7874  002CAA  6F6A               	movwf	(?_getCANFrame+2)& (0+255),b
  7875  002CAC  0EDC               	movlw	low _vscpData
  7876  002CAE  6F69               	movwf	(?_getCANFrame+1)& (0+255),b
  7877  002CB0  0E7D               	movlw	receiveSendEventSLCAN@id& (0+255)
  7878  002CB2  ECC1  F024         	call	_getCANFrame
  7879  002CB6  0900               	iorlw	0
  7880  002CB8  E101 D0B2          	bz	l1071
  7881                           
  7882                           ; BSR set to: 0
  7883                           ;main.c: 2161: cntRxFrames++;
  7884  002CBC  0101               	movlb	1	; () banked
  7885  002CBE  2B0C               	incf	_cntRxFrames& (0+255),f,b
  7886  002CC0  0E00               	movlw	0
  7887  002CC2  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
  7888  002CC4  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
  7889  002CC6  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
  7890                           
  7891                           ;main.c: 2162: cntRxBytes += dlc;
  7892  002CC8  0100               	movlb	0	; () banked
  7893  002CCA  5181               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  7894  002CCC  0101               	movlb	1	; () banked
  7895  002CCE  2708               	addwf	_cntRxBytes& (0+255),f,b
  7896  002CD0  0E00               	movlw	0
  7897  002CD2  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
  7898  002CD4  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
  7899  002CD6  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
  7900  002CD8                     l1044:
  7901  002CD8  A2AC               	btfss	4012,1,c	;volatile
  7902  002CDA  D7FE               	goto	l1044
  7903                           
  7904                           ;main.c: 2165: WriteUSART('T');
  7905  002CDC  0E54               	movlw	84
  7906  002CDE  ECF5  F02B         	call	_WriteUSART
  7907                           
  7908                           ;main.c: 2167: ultoa(wrkbuf, id, 16);
  7909  002CE2  0E01               	movlw	high _wrkbuf
  7910  002CE4  0100               	movlb	0	; () banked
  7911  002CE6  6F6E               	movwf	(?_ultoa+1)& (0+255),b
  7912  002CE8  0E74               	movlw	low _wrkbuf
  7913  002CEA  6F6D               	movwf	?_ultoa& (0+255),b
  7914  002CEC  C07D  F06F         	movff	receiveSendEventSLCAN@id,?_ultoa+2
  7915  002CF0  C07E  F070         	movff	receiveSendEventSLCAN@id+1,?_ultoa+3
  7916  002CF4  C07F  F071         	movff	receiveSendEventSLCAN@id+2,?_ultoa+4
  7917  002CF8  C080  F072         	movff	receiveSendEventSLCAN@id+3,?_ultoa+5
  7918  002CFC  6B74               	clrf	(?_ultoa+7)& (0+255),b
  7919  002CFE  0E10               	movlw	16
  7920  002D00  6F73               	movwf	(?_ultoa+6)& (0+255),b
  7921  002D02  EC1A  F01F         	call	_ultoa	;wreg free
  7922                           
  7923                           ; BSR set to: 0
  7924                           ;main.c: 2169: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  7925  002D06  6B82               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7926  002D08  6B83               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7927  002D0A                     l1049:
  7928                           
  7929                           ; BSR set to: 0
  7930  002D0A  A2AC               	btfss	4012,1,c	;volatile
  7931  002D0C  D7FE               	goto	l1049
  7932                           
  7933                           ; BSR set to: 0
  7934                           ;main.c: 2171: WriteUSART('0');
  7935  002D0E  0E30               	movlw	48
  7936  002D10  ECF5  F02B         	call	_WriteUSART
  7937                           
  7938                           ; BSR set to: 0
  7939  002D14  D886               	call	PL82	;call to abstracted procedure
  7940  002D16  B4D8               	btfsc	status,2,c
  7941  002D18  5D82               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  7942  002D1A  E3F7               	bnc	l1049
  7943                           
  7944                           ; BSR set to: 0
  7945                           ;main.c: 2172: }
  7946                           ;main.c: 2173: putsUSART(wrkbuf);
  7947  002D1C  0101               	movlb	1	; () banked
  7948  002D1E  0E01               	movlw	high _wrkbuf
  7949  002D20  6E20               	movwf	?_putsUSART+1,c
  7950  002D22  0E74               	movlw	low _wrkbuf
  7951  002D24  6E1F               	movwf	?_putsUSART,c
  7952  002D26  EC25  F029         	call	_putsUSART	;wreg free
  7953                           
  7954                           ;main.c: 2176: itoa(wrkbuf, dlc, 16);
  7955  002D2A  0E01               	movlw	high _wrkbuf
  7956  002D2C  0100               	movlb	0	; () banked
  7957  002D2E  6F6A               	movwf	(?_itoa+1)& (0+255),b
  7958  002D30  0E74               	movlw	low _wrkbuf
  7959  002D32  6F69               	movwf	?_itoa& (0+255),b
  7960  002D34  C081  F06B         	movff	receiveSendEventSLCAN@dlc,?_itoa+2
  7961  002D38  6B6C               	clrf	(?_itoa+3)& (0+255),b
  7962  002D3A  6B6E               	clrf	(?_itoa+5)& (0+255),b
  7963  002D3C  0E10               	movlw	16
  7964  002D3E  6F6D               	movwf	(?_itoa+4)& (0+255),b
  7965  002D40  EC1D  F02B         	call	_itoa	;wreg free
  7966  002D44                     l1052:
  7967                           
  7968                           ; BSR set to: 0
  7969  002D44  A2AC               	btfss	4012,1,c	;volatile
  7970  002D46  D7FE               	goto	l1052
  7971                           
  7972                           ; BSR set to: 0
  7973                           ;main.c: 2178: WriteUSART(wrkbuf[0]);
  7974  002D48  0101               	movlb	1	; () banked
  7975  002D4A  5174               	movf	_wrkbuf& (0+255),w,b
  7976  002D4C  ECF5  F02B         	call	_WriteUSART
  7977                           
  7978                           ;main.c: 2181: for (i = 0; i < dlc; i++) {
  7979  002D50  0100               	movlb	0	; () banked
  7980  002D52  6B82               	clrf	receiveSendEventSLCAN@i& (0+255),b
  7981  002D54  6B83               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  7982  002D56  D02D               	goto	l15011
  7983  002D58                     l14999:
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;main.c: 2182: itoa(wrkbuf, vscpData[i], 16);
  7987  002D58  0E01               	movlw	high _wrkbuf
  7988  002D5A  0100               	movlb	0	; () banked
  7989  002D5C  6F6A               	movwf	(?_itoa+1)& (0+255),b
  7990  002D5E  0E74               	movlw	low _wrkbuf
  7991  002D60  6F69               	movwf	?_itoa& (0+255),b
  7992  002D62  0EDC               	movlw	low _vscpData
  7993  002D64  2582               	addwf	receiveSendEventSLCAN@i& (0+255),w,b
  7994  002D66  6ED9               	movwf	fsr2l,c
  7995  002D68  0E01               	movlw	high _vscpData
  7996  002D6A  2183               	addwfc	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  7997  002D6C  6EDA               	movwf	fsr2h,c
  7998  002D6E  50DF               	movf	indf2,w,c
  7999  002D70  6F6B               	movwf	(?_itoa+2)& (0+255),b
  8000  002D72  6B6C               	clrf	(?_itoa+3)& (0+255),b
  8001  002D74  6B6E               	clrf	(?_itoa+5)& (0+255),b
  8002  002D76  0E10               	movlw	16
  8003  002D78  6F6D               	movwf	(?_itoa+4)& (0+255),b
  8004  002D7A  EC1D  F02B         	call	_itoa	;wreg free
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;main.c: 2184: if (2 != strlen(wrkbuf)) {
  8008  002D7E  0101               	movlb	1	; () banked
  8009  002D80  0E01               	movlw	high _wrkbuf
  8010  002D82  6E1F               	movwf	?_strlen+1,c
  8011  002D84  0E74               	movlw	low _wrkbuf
  8012  002D86  6E1E               	movwf	?_strlen,c
  8013  002D88  ECC6  F02A         	call	_strlen	;wreg free
  8014  002D8C  501E               	movf	?_strlen,w,c
  8015  002D8E  0A02               	xorlw	2
  8016  002D90  101F               	iorwf	?_strlen+1,w,c
  8017  002D92  E005               	bz	l15007
  8018  002D94                     l1058:
  8019  002D94  A2AC               	btfss	4012,1,c	;volatile
  8020  002D96  D7FE               	goto	l1058
  8021                           
  8022                           ;main.c: 2186: WriteUSART('0');
  8023  002D98  0E30               	movlw	48
  8024  002D9A  ECF5  F02B         	call	_WriteUSART
  8025  002D9E                     l15007:
  8026                           
  8027                           ;main.c: 2187: }
  8028                           ;main.c: 2189: putsUSART(wrkbuf);
  8029  002D9E  0101               	movlb	1	; () banked
  8030  002DA0  0E01               	movlw	high _wrkbuf
  8031  002DA2  6E20               	movwf	?_putsUSART+1,c
  8032  002DA4  0E74               	movlw	low _wrkbuf
  8033  002DA6  6E1F               	movwf	?_putsUSART,c
  8034  002DA8  EC25  F029         	call	_putsUSART	;wreg free
  8035  002DAC  0100               	movlb	0	; () banked
  8036  002DAE  4B82               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8037  002DB0  2B83               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8038  002DB2                     l15011:
  8039                           
  8040                           ; BSR set to: 0
  8041  002DB2  5181               	movf	receiveSendEventSLCAN@dlc& (0+255),w,b
  8042  002DB4  6F7A               	movwf	??_receiveSendEventSLCAN& (0+255),b
  8043  002DB6  6B7B               	clrf	(??_receiveSendEventSLCAN+1)& (0+255),b
  8044  002DB8  5183               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8045  002DBA  0A80               	xorlw	128
  8046  002DBC  6F7C               	movwf	(??_receiveSendEventSLCAN+2)& (0+255),b
  8047  002DBE  517A               	movf	??_receiveSendEventSLCAN& (0+255),w,b
  8048  002DC0  5D82               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8049  002DC2  517B               	movf	(??_receiveSendEventSLCAN+1)& (0+255),w,b
  8050  002DC4  0A80               	xorlw	128
  8051  002DC6  597C               	subwfb	(??_receiveSendEventSLCAN+2)& (0+255),w,b
  8052  002DC8  E3C7               	bnc	l14999
  8053                           
  8054                           ; BSR set to: 0
  8055                           ;main.c: 2190: }
  8056                           ;main.c: 2193: if (nTimeStamp) {
  8057  002DCA  5037               	movf	_nTimeStamp,w,c
  8058  002DCC  E024               	bz	l1068
  8059                           
  8060                           ; BSR set to: 0
  8061                           ;main.c: 2194: ultoa(wrkbuf, timer, 16);
  8062  002DCE  0E01               	movlw	high _wrkbuf
  8063  002DD0  0100               	movlb	0	; () banked
  8064  002DD2  6F6E               	movwf	(?_ultoa+1)& (0+255),b
  8065  002DD4  0E74               	movlw	low _wrkbuf
  8066  002DD6  6F6D               	movwf	?_ultoa& (0+255),b
  8067  002DD8  C118  F06F         	movff	_timer,?_ultoa+2	;volatile
  8068  002DDC  C119  F070         	movff	_timer+1,?_ultoa+3	;volatile
  8069  002DE0  C11A  F071         	movff	_timer+2,?_ultoa+4	;volatile
  8070  002DE4  C11B  F072         	movff	_timer+3,?_ultoa+5	;volatile
  8071  002DE8  6B74               	clrf	(?_ultoa+7)& (0+255),b
  8072  002DEA  0E10               	movlw	16
  8073  002DEC  6F73               	movwf	(?_ultoa+6)& (0+255),b
  8074  002DEE  EC1A  F01F         	call	_ultoa	;wreg free
  8075                           
  8076                           ; BSR set to: 0
  8077                           ;main.c: 2196: for (i = 0; i < ((uint8_t) (8 - sizeof (wrkbuf))); i++) {
  8078  002DF2  6B82               	clrf	receiveSendEventSLCAN@i& (0+255),b
  8079  002DF4  6B83               	clrf	(receiveSendEventSLCAN@i+1)& (0+255),b
  8080  002DF6                     l1065:
  8081                           
  8082                           ; BSR set to: 0
  8083  002DF6  A2AC               	btfss	4012,1,c	;volatile
  8084  002DF8  D7FE               	goto	l1065
  8085                           
  8086                           ; BSR set to: 0
  8087                           ;main.c: 2198: WriteUSART('0');
  8088  002DFA  0E30               	movlw	48
  8089  002DFC  ECF5  F02B         	call	_WriteUSART
  8090                           
  8091                           ; BSR set to: 0
  8092  002E00  D810               	call	PL82	;call to abstracted procedure
  8093  002E02  B4D8               	btfsc	status,2,c
  8094  002E04  5D82               	subwf	receiveSendEventSLCAN@i& (0+255),w,b
  8095  002E06  E3F7               	bnc	l1065
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;main.c: 2199: }
  8099                           ;main.c: 2200: putsUSART(wrkbuf);
  8100  002E08  0101               	movlb	1	; () banked
  8101  002E0A  0E01               	movlw	high _wrkbuf
  8102  002E0C  6E20               	movwf	?_putsUSART+1,c
  8103  002E0E  0E74               	movlw	low _wrkbuf
  8104  002E10  6E1F               	movwf	?_putsUSART,c
  8105  002E12  EC25  F029         	call	_putsUSART	;wreg free
  8106  002E16                     l1068:
  8107  002E16  A2AC               	btfss	4012,1,c	;volatile
  8108  002E18  D7FE               	goto	l1068
  8109                           
  8110                           ;main.c: 2204: WriteUSART(0x0d);
  8111  002E1A  0E0D               	movlw	13
  8112  002E1C  ECF5  F02B         	call	_WriteUSART
  8113  002E20                     l1071:
  8114  002E20  0012               	return	
  8115  002E22                     __end_of_receiveSendEventSLCAN:
  8116                           	opt stack 0
  8117  002E22                     PL82:
  8118                           	opt stack 23
  8119  002E22  0100               	movlb	0	; () banked
  8120  002E24  4B82               	infsnz	receiveSendEventSLCAN@i& (0+255),f,b
  8121  002E26  2B83               	incf	(receiveSendEventSLCAN@i+1)& (0+255),f,b
  8122  002E28  5183               	movf	(receiveSendEventSLCAN@i+1)& (0+255),w,b
  8123  002E2A  0A80               	xorlw	128
  8124  002E2C  0F80               	addlw	-128
  8125  002E2E  0CB8               	retlw	184
  8126  002E30                     __end_ofPL82:
  8127                           	opt stack 0
  8128                           tblptru	equ	0xFF8
  8129                           tblptrh	equ	0xFF7
  8130                           tblptrl	equ	0xFF6
  8131                           tablat	equ	0xFF5
  8132                           prodh	equ	0xFF4
  8133                           prodl	equ	0xFF3
  8134                           intcon	equ	0xFF2
  8135                           indf0	equ	0xFEF
  8136                           postinc0	equ	0xFEE
  8137                           fsr0h	equ	0xFEA
  8138                           fsr0l	equ	0xFE9
  8139                           wreg	equ	0xFE8
  8140                           indf1	equ	0xFE7
  8141                           postinc1	equ	0xFE6
  8142                           postdec1	equ	0xFE5
  8143                           fsr1h	equ	0xFE2
  8144                           fsr1l	equ	0xFE1
  8145                           indf2	equ	0xFDF
  8146                           postinc2	equ	0xFDE
  8147                           postdec2	equ	0xFDD
  8148                           plusw2	equ	0xFDB
  8149                           fsr2h	equ	0xFDA
  8150                           fsr2l	equ	0xFD9
  8151                           status	equ	0xFD8
  8152                           
  8153 ;; *************** function _ultoa *****************
  8154 ;; Defined at:
  8155 ;;		line 34 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\ltoa.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;  buf             2   13[BANK0 ] PTR unsigned char 
  8158 ;;		 -> wrkbuf(80), 
  8159 ;;  val             4   15[BANK0 ] unsigned long 
  8160 ;;  base            2   19[BANK0 ] int 
  8161 ;; Auto vars:     Size  Location     Type
  8162 ;;  v               4   21[BANK0 ] unsigned long 
  8163 ;;  c               1   25[BANK0 ] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  2   13[BANK0 ] PTR unsigned char 
  8166 ;; Registers used:
  8167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8168 ;; Tracked objects:
  8169 ;;		On entry : F/0
  8170 ;;		On exit  : F/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8173 ;;      Params:         0       8       0       0       0       0       0
  8174 ;;      Locals:         0       5       0       0       0       0       0
  8175 ;;      Temps:          0       0       0       0       0       0       0
  8176 ;;      Totals:         0      13       0       0       0       0       0
  8177 ;;Total ram usage:       13 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    4
  8180 ;; This function calls:
  8181 ;;		___lldiv
  8182 ;;		___llmod
  8183 ;; This function is called by:
  8184 ;;		_receiveSendEventSLCAN
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           	psect	text6
  8189  003E34                     __ptext6:
  8190                           	opt stack 0
  8191  003E34                     _ultoa:
  8192                           	opt stack 24
  8193                           
  8194                           ; BSR set to: 0
  8195                           
  8196                           ;incstack = 0
  8197                           ;incstack = 0
  8198  003E34  C06F  F075         	movff	ultoa@val,ultoa@v
  8199  003E38  C070  F076         	movff	ultoa@val+1,ultoa@v+1
  8200  003E3C  C071  F077         	movff	ultoa@val+2,ultoa@v+2
  8201  003E40  C072  F078         	movff	ultoa@val+3,ultoa@v+3
  8202  003E44                     l12797:
  8203                           
  8204                           ; BSR set to: 0
  8205  003E44  C075  F01E         	movff	ultoa@v,?___lldiv
  8206  003E48  C076  F01F         	movff	ultoa@v+1,?___lldiv+1
  8207  003E4C  C077  F020         	movff	ultoa@v+2,?___lldiv+2
  8208  003E50  C078  F021         	movff	ultoa@v+3,?___lldiv+3
  8209  003E54  D858               	call	PL58	;call to abstracted procedure
  8210  003E56  ECF4  F026         	call	___lldiv	;wreg free
  8211  003E5A  C021  F078         	movff	?___lldiv+3,ultoa@v+3
  8212  003E5E  C020  F077         	movff	?___lldiv+2,ultoa@v+2
  8213  003E62  C01F  F076         	movff	?___lldiv+1,ultoa@v+1
  8214  003E66  C01E  F075         	movff	?___lldiv,ultoa@v
  8215                           
  8216                           ; BSR set to: 0
  8217  003E6A  4B6D               	infsnz	ultoa@buf& (0+255),f,b
  8218  003E6C  2B6E               	incf	(ultoa@buf+1)& (0+255),f,b
  8219                           
  8220                           ; BSR set to: 0
  8221  003E6E  5178               	movf	(ultoa@v+3)& (0+255),w,b
  8222  003E70  1175               	iorwf	ultoa@v& (0+255),w,b
  8223  003E72  1176               	iorwf	(ultoa@v+1)& (0+255),w,b
  8224  003E74  1177               	iorwf	(ultoa@v+2)& (0+255),w,b
  8225  003E76  E1E6               	bnz	l12797
  8226                           
  8227                           ; BSR set to: 0
  8228  003E78  C06D  FFD9         	movff	ultoa@buf,fsr2l
  8229  003E7C  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
  8230  003E80  6ADF               	clrf	indf2,c
  8231                           
  8232                           ; BSR set to: 0
  8233  003E82  076D               	decf	ultoa@buf& (0+255),f,b
  8234  003E84  A0D8               	btfss	status,0,c
  8235  003E86  076E               	decf	(ultoa@buf+1)& (0+255),f,b
  8236  003E88                     l12807:
  8237                           
  8238                           ; BSR set to: 0
  8239  003E88  C06F  F065         	movff	ultoa@val,?___llmod
  8240  003E8C  C070  F066         	movff	ultoa@val+1,?___llmod+1
  8241  003E90  C071  F067         	movff	ultoa@val+2,?___llmod+2
  8242  003E94  C072  F068         	movff	ultoa@val+3,?___llmod+3
  8243  003E98  C073  F069         	movff	ultoa@base,?___llmod+4
  8244  003E9C  C074  F06A         	movff	ultoa@base+1,?___llmod+5
  8245  003EA0  0E00               	movlw	0
  8246  003EA2  BF6A               	btfsc	(?___llmod+5)& (0+255),7,b
  8247  003EA4  0EFF               	movlw	-1
  8248  003EA6  6F6B               	movwf	(?___llmod+6)& (0+255),b
  8249  003EA8  6F6C               	movwf	(?___llmod+7)& (0+255),b
  8250  003EAA  EC3D  F028         	call	___llmod	;wreg free
  8251  003EAE  5165               	movf	?___llmod& (0+255),w,b
  8252  003EB0  6F79               	movwf	ultoa@c& (0+255),b
  8253                           
  8254                           ; BSR set to: 0
  8255  003EB2  C06F  F01E         	movff	ultoa@val,?___lldiv
  8256  003EB6  C070  F01F         	movff	ultoa@val+1,?___lldiv+1
  8257  003EBA  C071  F020         	movff	ultoa@val+2,?___lldiv+2
  8258  003EBE  C072  F021         	movff	ultoa@val+3,?___lldiv+3
  8259  003EC2  D821               	call	PL58	;call to abstracted procedure
  8260  003EC4  ECF4  F026         	call	___lldiv	;wreg free
  8261  003EC8  C021  F072         	movff	?___lldiv+3,ultoa@val+3
  8262  003ECC  C020  F071         	movff	?___lldiv+2,ultoa@val+2
  8263  003ED0  C01F  F070         	movff	?___lldiv+1,ultoa@val+1
  8264  003ED4  C01E  F06F         	movff	?___lldiv,ultoa@val
  8265                           
  8266                           ; BSR set to: 0
  8267  003ED8  0E09               	movlw	9
  8268  003EDA  6579               	cpfsgt	ultoa@c& (0+255),b
  8269  003EDC  D002               	goto	l2422
  8270                           
  8271                           ; BSR set to: 0
  8272  003EDE  0E07               	movlw	7
  8273  003EE0  2779               	addwf	ultoa@c& (0+255),f,b
  8274  003EE2                     l2422:
  8275                           
  8276                           ; BSR set to: 0
  8277  003EE2  0E30               	movlw	48
  8278  003EE4  2779               	addwf	ultoa@c& (0+255),f,b
  8279                           
  8280                           ; BSR set to: 0
  8281  003EE6  C06D  FFD9         	movff	ultoa@buf,fsr2l
  8282  003EEA  C06E  FFDA         	movff	ultoa@buf+1,fsr2h
  8283  003EEE  C079  FFDF         	movff	ultoa@c,indf2
  8284                           
  8285                           ; BSR set to: 0
  8286  003EF2  076D               	decf	ultoa@buf& (0+255),f,b
  8287  003EF4  A0D8               	btfss	status,0,c
  8288  003EF6  076E               	decf	(ultoa@buf+1)& (0+255),f,b
  8289                           
  8290                           ; BSR set to: 0
  8291  003EF8  5172               	movf	(ultoa@val+3)& (0+255),w,b
  8292  003EFA  116F               	iorwf	ultoa@val& (0+255),w,b
  8293  003EFC  1170               	iorwf	(ultoa@val+1)& (0+255),w,b
  8294  003EFE  1171               	iorwf	(ultoa@val+2)& (0+255),w,b
  8295  003F00  B4D8               	btfsc	status,2,c
  8296                           
  8297                           ; BSR set to: 0
  8298  003F02  0012               	return	
  8299  003F04  D7C1               	goto	l12807
  8300  003F06                     __end_of_ultoa:
  8301                           	opt stack 0
  8302  003F06                     PL58:
  8303                           	opt stack 24
  8304  003F06  C073  F022         	movff	ultoa@base,?___lldiv+4
  8305  003F0A  C074  F023         	movff	ultoa@base+1,?___lldiv+5
  8306  003F0E  0E00               	movlw	0
  8307  003F10  BE23               	btfsc	?___lldiv+5,7,c
  8308  003F12  0EFF               	movlw	-1
  8309  003F14  6E24               	movwf	?___lldiv+6,c
  8310  003F16  6E25               	movwf	?___lldiv+7,c
  8311  003F18  0012               	return	
  8312  003F1A                     __end_ofPL58:
  8313                           	opt stack 0
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           intcon	equ	0xFF2
  8321                           indf0	equ	0xFEF
  8322                           postinc0	equ	0xFEE
  8323                           fsr0h	equ	0xFEA
  8324                           fsr0l	equ	0xFE9
  8325                           wreg	equ	0xFE8
  8326                           indf1	equ	0xFE7
  8327                           postinc1	equ	0xFE6
  8328                           postdec1	equ	0xFE5
  8329                           fsr1h	equ	0xFE2
  8330                           fsr1l	equ	0xFE1
  8331                           indf2	equ	0xFDF
  8332                           postinc2	equ	0xFDE
  8333                           postdec2	equ	0xFDD
  8334                           plusw2	equ	0xFDB
  8335                           fsr2h	equ	0xFDA
  8336                           fsr2l	equ	0xFD9
  8337                           status	equ	0xFD8
  8338                           
  8339 ;; *************** function _doModeVscp *****************
  8340 ;; Defined at:
  8341 ;;		line 1117 in file "main.c"
  8342 ;; Parameters:    Size  Location     Type
  8343 ;;		None
  8344 ;; Auto vars:     Size  Location     Type
  8345 ;;  c               1   78[BANK0 ] unsigned char 
  8346 ;; Return value:  Size  Location     Type
  8347 ;;		None               void
  8348 ;; Registers used:
  8349 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8350 ;; Tracked objects:
  8351 ;;		On entry : 0/0
  8352 ;;		On exit  : F/0
  8353 ;;		Unchanged: 0/0
  8354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8355 ;;      Params:         0       0       0       0       0       0       0
  8356 ;;      Locals:         0       1       0       0       0       0       0
  8357 ;;      Temps:          0       0       0       0       0       0       0
  8358 ;;      Totals:         0       1       0       0       0       0       0
  8359 ;;Total ram usage:        1 bytes
  8360 ;; Hardware stack levels used:    1
  8361 ;; Hardware stack levels required when called:    7
  8362 ;; This function calls:
  8363 ;;		_fifo_read
  8364 ;;		_ECANSetOperationMode
  8365 ;;		_receiveSendMultiEventCANAL
  8366 ;;		_receiveSendEventCANAL
  8367 ;;		_calcCRC
  8368 ;;		_sendVSCPDriverNack
  8369 ;;		_sendVSCPDriverErrorFrame
  8370 ;;		_sendVSCPDriverAck
  8371 ;;		_receiveVSCPModeCanalMsg
  8372 ;;		_receiveVSCPModeMultiCanalMsg
  8373 ;;		_sendVSCPModeCapabilities
  8374 ;;		_sendVSCPDriverCommandReply
  8375 ;; This function is called by:
  8376 ;;		_main
  8377 ;; This function uses a non-reentrant model
  8378 ;;
  8379                           
  8380                           	psect	text7
  8381  002AD2                     __ptext7:
  8382                           	opt stack 0
  8383  002AD2                     _doModeVscp:
  8384                           	opt stack 23
  8385                           
  8386                           ;main.c: 1118: uint8_t c;
  8387                           ;main.c: 1121: if ( caps.maxCanalFrames > 1 ) {
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;incstack = 0
  8391                           ;incstack = 0
  8392  002AD2  0101               	movlb	1	; () banked
  8393  002AD4  EE21  F0E5         	lfsr	2,_caps+1
  8394  002AD8  0E01               	movlw	1
  8395  002ADA  64DF               	cpfsgt	indf2,c
  8396  002ADC  D003               	goto	l13913
  8397                           
  8398                           ; BSR set to: 1
  8399                           ;main.c: 1124: receiveSendMultiEventCANAL();
  8400  002ADE  EC18  F017         	call	_receiveSendMultiEventCANAL	;wreg free
  8401                           
  8402                           ;main.c: 1125: }
  8403  002AE2  D002               	goto	l13915
  8404  002AE4                     l13913:
  8405                           
  8406                           ; BSR set to: 1
  8407                           ;main.c: 1126: else {
  8408                           ;main.c: 1129: receiveSendEventCANAL();
  8409  002AE4  ECD7  F01A         	call	_receiveSendEventCANAL	;wreg free
  8410  002AE8                     l13915:
  8411                           
  8412                           ;main.c: 1130: }
  8413                           ;main.c: 1133: (INTCONbits.GIE = 0);
  8414  002AE8  9EF2               	bcf	intcon,7,c	;volatile
  8415                           
  8416                           ;main.c: 1135: if ( 1 == fifo_read( &serialInputFifo, &c, 1 ) ) {
  8417  002AEA  0E01               	movlw	high _serialInputFifo
  8418  002AEC  6E1F               	movwf	?_fifo_read+1,c
  8419  002AEE  0ED4               	movlw	low _serialInputFifo
  8420  002AF0  6E1E               	movwf	?_fifo_read,c
  8421  002AF2  0100               	movlb	0	; () banked
  8422  002AF4  0E00               	movlw	high doModeVscp@c
  8423  002AF6  6E21               	movwf	?_fifo_read+3,c
  8424  002AF8  0EAE               	movlw	low doModeVscp@c
  8425  002AFA  6E20               	movwf	?_fifo_read+2,c
  8426  002AFC  6A23               	clrf	?_fifo_read+5,c
  8427  002AFE  0E01               	movlw	1
  8428  002B00  6E22               	movwf	?_fifo_read+4,c
  8429  002B02  ECDE  F020         	call	_fifo_read	;wreg free
  8430  002B06  041E               	decf	?_fifo_read,w,c
  8431  002B08  101F               	iorwf	?_fifo_read+1,w,c
  8432  002B0A  E001 D0C0          	bnz	l14063
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;main.c: 1138: (INTCONbits.GIE = 1);
  8436  002B0E  8EF2               	bsf	intcon,7,c	;volatile
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;main.c: 1141: if ( pos >= sizeof( cmdbuf ) ) {
  8440  002B10  0E4F               	movlw	79
  8441  002B12  65E0               	cpfsgt	_pos& (0+255),b
  8442  002B14  D003               	goto	l669
  8443                           
  8444                           ; BSR set to: 0
  8445                           ;main.c: 1143: pos = 0;
  8446  002B16  6BE0               	clrf	_pos& (0+255),b
  8447                           
  8448                           ;main.c: 1144: bDLE = 0;
  8449  002B18  6A33               	clrf	_bDLE,c
  8450                           
  8451                           ;main.c: 1145: stateVscpDriver = 0;
  8452  002B1A  6A39               	clrf	_stateVscpDriver,c
  8453  002B1C                     l669:
  8454                           
  8455                           ; BSR set to: 0
  8456                           ;main.c: 1146: }
  8457                           ;main.c: 1148: if ( 0 == stateVscpDriver ) {
  8458  002B1C  6639               	tstfsz	_stateVscpDriver,c
  8459  002B1E  D00D               	goto	l13937
  8460                           
  8461                           ; BSR set to: 0
  8462                           ;main.c: 1149: if ( bDLE ) {
  8463  002B20  5033               	movf	_bDLE,w,c
  8464  002B22  E008               	bz	l13933
  8465                           
  8466                           ; BSR set to: 0
  8467                           ;main.c: 1150: bDLE = 0;
  8468  002B24  6A33               	clrf	_bDLE,c
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;main.c: 1153: if ( 0x02 == c ) {
  8472  002B26  51AE               	movf	doModeVscp@c& (0+255),w,b
  8473  002B28  0A02               	xorlw	2
  8474  002B2A  E124               	bnz	l13973
  8475                           
  8476                           ; BSR set to: 0
  8477                           ;main.c: 1154: stateVscpDriver = 1;
  8478  002B2C  0E01               	movlw	1
  8479  002B2E  6E39               	movwf	_stateVscpDriver,c
  8480                           
  8481                           ; BSR set to: 0
  8482                           ;main.c: 1155: pos = 0;
  8483  002B30  6BE0               	clrf	_pos& (0+255),b
  8484  002B32  D020               	goto	l13973
  8485  002B34                     l13933:
  8486                           
  8487                           ; BSR set to: 0
  8488                           ;main.c: 1158: else {
  8489                           ;main.c: 1159: bDLE = 1;
  8490  002B34  0E01               	movlw	1
  8491  002B36  6E33               	movwf	_bDLE,c
  8492  002B38  D0AB               	goto	l674
  8493  002B3A                     l13937:
  8494                           
  8495                           ; BSR set to: 0
  8496                           ;main.c: 1163: else if ( 1 == stateVscpDriver ) {
  8497  002B3A  0439               	decf	_stateVscpDriver,w,c
  8498  002B3C  E11B               	bnz	l13973
  8499                           
  8500                           ; BSR set to: 0
  8501                           ;main.c: 1166: if (bDLE) {
  8502  002B3E  5033               	movf	_bDLE,w,c
  8503  002B40  E015               	bz	l13957
  8504                           
  8505                           ; BSR set to: 0
  8506                           ;main.c: 1169: bDLE = 0;
  8507  002B42  6A33               	clrf	_bDLE,c
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;main.c: 1172: if (0x03 == c) {
  8511  002B44  51AE               	movf	doModeVscp@c& (0+255),w,b
  8512  002B46  0A03               	xorlw	3
  8513  002B48  E103               	bnz	l13947
  8514                           
  8515                           ; BSR set to: 0
  8516                           ;main.c: 1173: stateVscpDriver = 2;
  8517  002B4A  0E02               	movlw	2
  8518  002B4C  6E39               	movwf	_stateVscpDriver,c
  8519                           
  8520                           ;main.c: 1174: }
  8521  002B4E  D012               	goto	l13973
  8522  002B50                     l13947:
  8523                           
  8524                           ; BSR set to: 0
  8525                           ;main.c: 1176: else if (0x10 == c) {
  8526  002B50  51AE               	movf	doModeVscp@c& (0+255),w,b
  8527  002B52  0A10               	xorlw	16
  8528  002B54  E10F               	bnz	l13973
  8529  002B56                     u18540:
  8530                           
  8531                           ; BSR set to: 0
  8532                           ;main.c: 1178: cmdbuf[ pos++ ] = c;
  8533  002B56  D89D               	call	PL22	;call to abstracted procedure
  8534  002B58  C0AE  FFDF         	movff	doModeVscp@c,indf2
  8535                           
  8536                           ; BSR set to: 0
  8537  002B5C  2BE0               	incf	_pos& (0+255),f,b
  8538                           
  8539                           ; BSR set to: 0
  8540                           ;main.c: 1179: if ( pos >= sizeof( cmdbuf ) ) {
  8541  002B5E  0E4F               	movlw	79
  8542  002B60  65E0               	cpfsgt	_pos& (0+255),b
  8543  002B62  D096               	goto	l674
  8544                           
  8545                           ; BSR set to: 0
  8546                           ;main.c: 1182: bDLE = 0;
  8547  002B64  6A33               	clrf	_bDLE,c
  8548                           
  8549                           ;main.c: 1183: pos = 0;
  8550  002B66  6BE0               	clrf	_pos& (0+255),b
  8551                           
  8552                           ;main.c: 1184: stateVscpDriver = 0;
  8553  002B68  6A39               	clrf	_stateVscpDriver,c
  8554  002B6A  D092               	goto	l674
  8555  002B6C                     l13957:
  8556                           
  8557                           ; BSR set to: 0
  8558                           ;main.c: 1190: else {
  8559                           ;main.c: 1191: if (0x10 == c) {
  8560  002B6C  51AE               	movf	doModeVscp@c& (0+255),w,b
  8561  002B6E  0A10               	xorlw	16
  8562  002B70  E0E1               	bz	l13933
  8563  002B72  D7F1               	goto	u18540
  8564  002B74                     l13973:
  8565                           
  8566                           ; BSR set to: 0
  8567                           ;main.c: 1207: }
  8568                           ;main.c: 1208: }
  8569                           ;main.c: 1209: }
  8570                           ;main.c: 1211: if (2 == stateVscpDriver) {
  8571  002B74  5039               	movf	_stateVscpDriver,w,c
  8572  002B76  0A02               	xorlw	2
  8573  002B78  E001 D089          	bnz	l14063
  8574                           
  8575                           ; BSR set to: 0
  8576                           ;main.c: 1214: stateVscpDriver = 0;
  8577  002B7C  6A39               	clrf	_stateVscpDriver,c
  8578                           
  8579                           ; BSR set to: 0
  8580                           ;main.c: 1227: if (calcCRC(cmdbuf, pos)) {
  8581  002B7E  0E01               	movlw	high _cmdbuf
  8582  002B80  0100               	movlb	0	; () banked
  8583  002B82  6F64               	movwf	(?_calcCRC+1)& (0+255),b
  8584  002B84  0E24               	movlw	low _cmdbuf
  8585  002B86  6F63               	movwf	?_calcCRC& (0+255),b
  8586  002B88  C0E0  F065         	movff	_pos,?_calcCRC+2
  8587  002B8C  EC6C  F02B         	call	_calcCRC	;wreg free
  8588  002B90  0900               	iorlw	0
  8589  002B92  E005               	bz	l13981
  8590                           
  8591                           ; BSR set to: 0
  8592                           ;main.c: 1228: sendVSCPDriverNack();
  8593  002B94  EC1F  F024         	call	_sendVSCPDriverNack	;wreg free
  8594                           
  8595                           ;main.c: 1229: sendVSCPDriverErrorFrame(1);
  8596  002B98  0E01               	movlw	1
  8597  002B9A  ECB0  F021         	call	_sendVSCPDriverErrorFrame
  8598  002B9E                     l13981:
  8599                           
  8600                           ;main.c: 1230: }
  8601                           ;main.c: 1233: if (0 ==
  8602                           ;main.c: 1234: cmdbuf[ 0 ]) {
  8603  002B9E  0101               	movlb	1	; () banked
  8604  002BA0  6724               	tstfsz	_cmdbuf& (0+255),b
  8605  002BA2  D003               	goto	l13985
  8606  002BA4                     l13983:
  8607                           
  8608                           ;main.c: 1235: sendVSCPDriverAck();
  8609  002BA4  ECCD  F023         	call	_sendVSCPDriverAck	;wreg free
  8610                           
  8611                           ;main.c: 1236: }
  8612  002BA8  D06F               	goto	l14059
  8613  002BAA                     l13985:
  8614                           
  8615                           ; BSR set to: 1
  8616                           ;main.c: 1238: else if (1 ==
  8617                           ;main.c: 1239: cmdbuf[ 0 ]) {
  8618  002BAA  0524               	decf	_cmdbuf& (0+255),w,b
  8619  002BAC  E103               	bnz	l13989
  8620  002BAE                     l13987:
  8621                           
  8622                           ;main.c: 1240: sendVSCPDriverNack();
  8623  002BAE  EC1F  F024         	call	_sendVSCPDriverNack	;wreg free
  8624                           
  8625                           ;main.c: 1241: }
  8626  002BB2  D06A               	goto	l14059
  8627  002BB4                     l13989:
  8628                           
  8629                           ; BSR set to: 1
  8630                           ;main.c: 1243: else if (2 ==
  8631                           ;main.c: 1244: cmdbuf[ 0 ]) {
  8632  002BB4  5124               	movf	_cmdbuf& (0+255),w,b
  8633  002BB6  0A02               	xorlw	2
  8634  002BB8  E105               	bnz	l13997
  8635                           
  8636                           ; BSR set to: 1
  8637                           ;main.c: 1245: if ( receiveVSCPModeCanalMsg() ) {
  8638  002BBA  ECA5  F01E         	call	_receiveVSCPModeCanalMsg	;wreg free
  8639  002BBE  0900               	iorlw	0
  8640  002BC0  E1F1               	bnz	l13983
  8641  002BC2  D7F5               	goto	l13987
  8642  002BC4                     l13997:
  8643                           
  8644                           ; BSR set to: 1
  8645                           ;main.c: 1253: else if (6 ==
  8646                           ;main.c: 1254: cmdbuf[ 0 ]) {
  8647  002BC4  5124               	movf	_cmdbuf& (0+255),w,b
  8648  002BC6  0A06               	xorlw	6
  8649  002BC8  E103               	bnz	l14005
  8650                           
  8651                           ; BSR set to: 1
  8652                           ;main.c: 1255: if (receiveVSCPModeMultiCanalMsg()) {
  8653  002BCA  EC22  F02C         	call	_receiveVSCPModeMultiCanalMsg	;wreg free
  8654  002BCE  D7F7               	goto	L5
  8655  002BD0                     l14005:
  8656                           
  8657                           ; BSR set to: 1
  8658                           ;main.c: 1263: else if (6 ==
  8659                           ;main.c: 1264: cmdbuf[ 0 ]) {
  8660  002BD0  5124               	movf	_cmdbuf& (0+255),w,b
  8661  002BD2  0A06               	xorlw	6
  8662  002BD4  E0EC               	bz	l13987
  8663                           
  8664                           ; BSR set to: 1
  8665                           ;main.c: 1268: else if (3 ==
  8666                           ;main.c: 1269: cmdbuf[ 0 ]) {
  8667  002BD6  5124               	movf	_cmdbuf& (0+255),w,b
  8668  002BD8  0A03               	xorlw	3
  8669  002BDA  E0E9               	bz	l13987
  8670                           
  8671                           ; BSR set to: 1
  8672                           ;main.c: 1273: else if (4 ==
  8673                           ;main.c: 1274: cmdbuf[ 0 ]) {
  8674  002BDC  5124               	movf	_cmdbuf& (0+255),w,b
  8675  002BDE  0A04               	xorlw	4
  8676  002BE0  E0E6               	bz	l13987
  8677                           
  8678                           ; BSR set to: 1
  8679                           ;main.c: 1278: else if (8 ==
  8680                           ;main.c: 1279: cmdbuf[ 0 ]) {
  8681  002BE2  5124               	movf	_cmdbuf& (0+255),w,b
  8682  002BE4  0A08               	xorlw	8
  8683  002BE6  E107               	bnz	l14023
  8684                           
  8685                           ; BSR set to: 1
  8686                           ;main.c: 1280: caps.maxVscpFrames = cmdbuf[ 5 ];
  8687  002BE8  C129  F1E4         	movff	_cmdbuf+5,_caps
  8688                           
  8689                           ;main.c: 1281: caps.maxCanalFrames = cmdbuf[ 5 + 1 ];
  8690  002BEC  C12A  F1E5         	movff	_cmdbuf+6,_caps+1
  8691                           
  8692                           ; BSR set to: 1
  8693                           ;main.c: 1282: sendVSCPModeCapabilities();
  8694  002BF0  EC12  F022         	call	_sendVSCPModeCapabilities	;wreg free
  8695                           
  8696                           ;main.c: 1283: }
  8697  002BF4  D049               	goto	l14059
  8698  002BF6                     l14023:
  8699                           
  8700                           ; BSR set to: 1
  8701                           ;main.c: 1285: else if (255 ==
  8702                           ;main.c: 1286: cmdbuf[ 0 ]) {
  8703  002BF6  2924               	incf	_cmdbuf& (0+255),w,b
  8704  002BF8  E144               	bnz	l14057
  8705                           
  8706                           ; BSR set to: 1
  8707                           ;main.c: 1288: if (cmdbuf[ 5 ] ==
  8708                           ;main.c: 1289: 0) {
  8709  002BFA  6729               	tstfsz	(_cmdbuf+5)& (0+255),b
  8710  002BFC  D006               	goto	l14029
  8711                           
  8712                           ; BSR set to: 1
  8713                           ;main.c: 1290: sendVSCPDriverCommandReply(0, 0);
  8714  002BFE  0E00               	movlw	0
  8715  002C00  0100               	movlb	0	; () banked
  8716  002C02  6B66               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8717  002C04  EC71  F020         	call	_sendVSCPDriverCommandReply
  8718                           
  8719                           ;main.c: 1291: }
  8720  002C08  D03F               	goto	l14059
  8721  002C0A                     l14029:
  8722                           
  8723                           ; BSR set to: 1
  8724                           ;main.c: 1293: else if (cmdbuf[ 5 ] ==
  8725                           ;main.c: 1294: 1) {
  8726  002C0A  0529               	decf	(_cmdbuf+5)& (0+255),w,b
  8727  002C0C  E10A               	bnz	l14035
  8728                           
  8729                           ; BSR set to: 1
  8730                           ;main.c: 1295: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
  8731  002C0E  0E00               	movlw	0
  8732  002C10  ECDE  F02B         	call	_ECANSetOperationMode
  8733                           
  8734                           ;main.c: 1296: sendVSCPDriverCommandReply(0, 1);
  8735  002C14  0E01               	movlw	1
  8736  002C16  0100               	movlb	0	; () banked
  8737  002C18  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8738  002C1A  0E00               	movlw	0
  8739  002C1C  EC71  F020         	call	_sendVSCPDriverCommandReply
  8740                           
  8741                           ;main.c: 1297: }
  8742  002C20  D033               	goto	l14059
  8743  002C22                     l14035:
  8744                           
  8745                           ; BSR set to: 1
  8746                           ;main.c: 1299: else if (cmdbuf[ 5 ] ==
  8747                           ;main.c: 1300: 2) {
  8748  002C22  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8749  002C24  0A02               	xorlw	2
  8750  002C26  E10A               	bnz	l14041
  8751                           
  8752                           ; BSR set to: 1
  8753                           ;main.c: 1301: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
  8754  002C28  0E40               	movlw	64
  8755  002C2A  ECDE  F02B         	call	_ECANSetOperationMode
  8756                           
  8757                           ;main.c: 1302: sendVSCPDriverCommandReply(0, 2);
  8758  002C2E  0E02               	movlw	2
  8759  002C30  0100               	movlb	0	; () banked
  8760  002C32  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8761  002C34  0E00               	movlw	0
  8762  002C36  EC71  F020         	call	_sendVSCPDriverCommandReply
  8763                           
  8764                           ;main.c: 1303: }
  8765  002C3A  D026               	goto	l14059
  8766  002C3C                     l14041:
  8767                           
  8768                           ; BSR set to: 1
  8769                           ;main.c: 1305: else if (cmdbuf[ 5 ] ==
  8770                           ;main.c: 1306: 3) {
  8771  002C3C  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8772  002C3E  0A03               	xorlw	3
  8773  002C40  E10A               	bnz	l14047
  8774                           
  8775                           ; BSR set to: 1
  8776                           ;main.c: 1307: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
  8777  002C42  0E60               	movlw	96
  8778  002C44  ECDE  F02B         	call	_ECANSetOperationMode
  8779                           
  8780                           ;main.c: 1308: sendVSCPDriverCommandReply(0, 3);
  8781  002C48  0E03               	movlw	3
  8782  002C4A  0100               	movlb	0	; () banked
  8783  002C4C  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8784  002C4E  0E00               	movlw	0
  8785  002C50  EC71  F020         	call	_sendVSCPDriverCommandReply
  8786                           
  8787                           ;main.c: 1309: }
  8788  002C54  D019               	goto	l14059
  8789  002C56                     l14047:
  8790                           
  8791                           ; BSR set to: 1
  8792                           ;main.c: 1311: else if (cmdbuf[ 5 ] ==
  8793                           ;main.c: 1312: 4) {
  8794  002C56  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8795  002C58  0A04               	xorlw	4
  8796  002C5A  E10A               	bnz	l14053
  8797                           
  8798                           ; BSR set to: 1
  8799                           ;main.c: 1313: ECANSetOperationMode(0x20);
  8800  002C5C  0E20               	movlw	32
  8801  002C5E  ECDE  F02B         	call	_ECANSetOperationMode
  8802                           
  8803                           ;main.c: 1314: sendVSCPDriverCommandReply(0, 4);
  8804  002C62  0E04               	movlw	4
  8805  002C64  0100               	movlb	0	; () banked
  8806  002C66  6F66               	movwf	?_sendVSCPDriverCommandReply& (0+255),b
  8807  002C68  0E00               	movlw	0
  8808  002C6A  EC71  F020         	call	_sendVSCPDriverCommandReply
  8809                           
  8810                           ;main.c: 1315: }
  8811  002C6E  D00C               	goto	l14059
  8812  002C70                     l14053:
  8813                           
  8814                           ; BSR set to: 1
  8815                           ;main.c: 1317: else if (cmdbuf[ 5 ] ==
  8816                           ;main.c: 1318: 5) {
  8817  002C70  5129               	movf	(_cmdbuf+5)& (0+255),w,b
  8818  002C72  0A05               	xorlw	5
  8819  002C74  E109               	bnz	l14059
  8820                           
  8821                           ; BSR set to: 1
  8822                           ;main.c: 1319: sendVSCPDriverCommandReply(0, 0);
  8823  002C76  0E00               	movlw	0
  8824  002C78  0100               	movlb	0	; () banked
  8825  002C7A  6B66               	clrf	?_sendVSCPDriverCommandReply& (0+255),b
  8826  002C7C  EC71  F020         	call	_sendVSCPDriverCommandReply
  8827  002C80  D003               	goto	l14059
  8828  002C82                     l14057:
  8829                           
  8830                           ; BSR set to: 1
  8831                           ;main.c: 1324: else {
  8832                           ;main.c: 1326: sendVSCPDriverErrorFrame(2);
  8833  002C82  0E02               	movlw	2
  8834  002C84  ECB0  F021         	call	_sendVSCPDriverErrorFrame
  8835  002C88                     l14059:
  8836                           
  8837                           ;main.c: 1327: }
  8838                           ;main.c: 1330: pos = 0;
  8839  002C88  0100               	movlb	0	; () banked
  8840  002C8A  6BE0               	clrf	_pos& (0+255),b
  8841                           
  8842                           ; BSR set to: 0
  8843                           ;main.c: 1331: stateVscpDriver = 0;
  8844  002C8C  6A39               	clrf	_stateVscpDriver,c
  8845  002C8E                     l14063:
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;main.c: 1333: }
  8849                           ;main.c: 1335: }
  8850                           ;main.c: 1338: (INTCONbits.GIE = 1);
  8851  002C8E  8EF2               	bsf	intcon,7,c	;volatile
  8852  002C90                     l674:
  8853                           
  8854                           ; BSR set to: 0
  8855  002C90  0012               	return	
  8856  002C92                     __end_of_doModeVscp:
  8857                           	opt stack 0
  8858  002C92                     PL22:
  8859                           	opt stack 20
  8860  002C92  0E24               	movlw	low _cmdbuf
  8861  002C94  0100               	movlb	0	; () banked
  8862  002C96  25E0               	addwf	_pos& (0+255),w,b
  8863  002C98  6ED9               	movwf	fsr2l,c
  8864  002C9A  6ADA               	clrf	fsr2h,c
  8865  002C9C  0E01               	movlw	high _cmdbuf
  8866  002C9E  22DA               	addwfc	fsr2h,f,c
  8867  002CA0  0012               	return	
  8868  002CA2                     __end_ofPL22:
  8869                           	opt stack 0
  8870                           tblptru	equ	0xFF8
  8871                           tblptrh	equ	0xFF7
  8872                           tblptrl	equ	0xFF6
  8873                           tablat	equ	0xFF5
  8874                           prodh	equ	0xFF4
  8875                           prodl	equ	0xFF3
  8876                           intcon	equ	0xFF2
  8877                           indf0	equ	0xFEF
  8878                           postinc0	equ	0xFEE
  8879                           fsr0h	equ	0xFEA
  8880                           fsr0l	equ	0xFE9
  8881                           wreg	equ	0xFE8
  8882                           indf1	equ	0xFE7
  8883                           postinc1	equ	0xFE6
  8884                           postdec1	equ	0xFE5
  8885                           fsr1h	equ	0xFE2
  8886                           fsr1l	equ	0xFE1
  8887                           indf2	equ	0xFDF
  8888                           postinc2	equ	0xFDE
  8889                           postdec2	equ	0xFDD
  8890                           plusw2	equ	0xFDB
  8891                           fsr2h	equ	0xFDA
  8892                           fsr2l	equ	0xFD9
  8893                           status	equ	0xFD8
  8894                           
  8895 ;; *************** function _sendVSCPDriverCommandReply *****************
  8896 ;; Defined at:
  8897 ;;		line 1736 in file "main.c"
  8898 ;; Parameters:    Size  Location     Type
  8899 ;;  cmdReplyCode    1    wreg     unsigned char 
  8900 ;;  cmdCode         1    6[BANK0 ] unsigned char 
  8901 ;; Auto vars:     Size  Location     Type
  8902 ;;  cmdReplyCode    1    7[BANK0 ] unsigned char 
  8903 ;;  crc             1    8[BANK0 ] unsigned char 
  8904 ;; Return value:  Size  Location     Type
  8905 ;;		None               void
  8906 ;; Registers used:
  8907 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  8908 ;; Tracked objects:
  8909 ;;		On entry : F/0
  8910 ;;		On exit  : 0/0
  8911 ;;		Unchanged: 0/0
  8912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  8913 ;;      Params:         0       1       0       0       0       0       0
  8914 ;;      Locals:         0       2       0       0       0       0       0
  8915 ;;      Temps:          0       0       0       0       0       0       0
  8916 ;;      Totals:         0       3       0       0       0       0       0
  8917 ;;Total ram usage:        3 bytes
  8918 ;; Hardware stack levels used:    1
  8919 ;; Hardware stack levels required when called:    6
  8920 ;; This function calls:
  8921 ;;		_WriteUSART
  8922 ;;		_sendEscapedUartData
  8923 ;;		_crc8
  8924 ;; This function is called by:
  8925 ;;		_doModeVscp
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           	psect	text8
  8930  0040E2                     __ptext8:
  8931                           	opt stack 0
  8932  0040E2                     _sendVSCPDriverCommandReply:
  8933                           	opt stack 23
  8934                           
  8935                           ; BSR set to: 0
  8936                           ;incstack = 0
  8937                           ;incstack = 0
  8938                           ;sendVSCPDriverCommandReply@cmdReplyCode stored from wreg
  8939  0040E2  CFE8 F067          	movff	wreg,sendVSCPDriverCommandReply@cmdReplyCode
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;main.c: 1737: uint8_t crc = 0;
  8943  0040E6  6B68               	clrf	sendVSCPDriverCommandReply@crc& (0+255),b
  8944  0040E8                     l873:
  8945                           
  8946                           ; BSR set to: 0
  8947  0040E8  A2AC               	btfss	4012,1,c	;volatile
  8948  0040EA  D7FE               	goto	l873
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;main.c: 1741: WriteUSART(0x10);
  8952  0040EC  0E10               	movlw	16
  8953  0040EE  ECF5  F02B         	call	_WriteUSART
  8954  0040F2                     l876:
  8955  0040F2  A2AC               	btfss	4012,1,c	;volatile
  8956  0040F4  D7FE               	goto	l876
  8957                           
  8958                           ;main.c: 1743: WriteUSART(0x02);
  8959  0040F6  0E02               	movlw	2
  8960  0040F8  ECF5  F02B         	call	_WriteUSART
  8961  0040FC                     l879:
  8962  0040FC  A2AC               	btfss	4012,1,c	;volatile
  8963  0040FE  D7FE               	goto	l879
  8964                           
  8965                           ;main.c: 1747: WriteUSART(254);
  8966  004100  0EFE               	movlw	254
  8967  004102  ECF5  F02B         	call	_WriteUSART
  8968                           
  8969                           ;main.c: 1748: crc8(&crc, 254);
  8970  004106  0100               	movlb	0	; () banked
  8971  004108  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8972  00410A  6F61               	movwf	(?_crc8+1)& (0+255),b
  8973  00410C  0E68               	movlw	low sendVSCPDriverCommandReply@crc
  8974  00410E  6F60               	movwf	?_crc8& (0+255),b
  8975  004110  0EFE               	movlw	254
  8976  004112  6F62               	movwf	(?_crc8+2)& (0+255),b
  8977  004114  EC01  F02B         	call	_crc8	;wreg free
  8978  004118                     l882:
  8979  004118  A2AC               	btfss	4012,1,c	;volatile
  8980  00411A  D7FE               	goto	l882
  8981                           
  8982                           ;main.c: 1752: WriteUSART(0);
  8983  00411C  0E00               	movlw	0
  8984  00411E  ECF5  F02B         	call	_WriteUSART
  8985                           
  8986                           ;main.c: 1753: crc8(&crc, 0);
  8987  004122  D845               	call	PL86	;call to abstracted procedure
  8988  004124  EC01  F02B         	call	_crc8	;wreg free
  8989                           
  8990                           ; BSR set to: 3
  8991                           ;main.c: 1756: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  8992  004128  0100               	movlb	0	; () banked
  8993  00412A  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  8994  00412C  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  8995  00412E  0E68               	movlw	low sendVSCPDriverCommandReply@crc
  8996  004130  6F63               	movwf	?_sendEscapedUartData& (0+255),b
  8997  004132  0101               	movlb	1	; () banked
  8998  004134  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  8999  004136  EC6E  F028         	call	_sendEscapedUartData
  9000  00413A                     l885:
  9001  00413A  A2AC               	btfss	4012,1,c	;volatile
  9002  00413C  D7FE               	goto	l885
  9003                           
  9004                           ;main.c: 1760: WriteUSART(0);
  9005  00413E  0E00               	movlw	0
  9006  004140  ECF5  F02B         	call	_WriteUSART
  9007                           
  9008                           ;main.c: 1761: crc8(&crc, 0);
  9009  004144  D834               	call	PL86	;call to abstracted procedure
  9010  004146  EC01  F02B         	call	_crc8	;wreg free
  9011  00414A                     l888:
  9012  00414A  A2AC               	btfss	4012,1,c	;volatile
  9013  00414C  D7FE               	goto	l888
  9014                           
  9015                           ;main.c: 1763: WriteUSART(2);
  9016  00414E  0E02               	movlw	2
  9017  004150  ECF5  F02B         	call	_WriteUSART
  9018                           
  9019                           ;main.c: 1764: crc8(&crc, 2);
  9020  004154  0100               	movlb	0	; () banked
  9021  004156  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9022  004158  6F61               	movwf	(?_crc8+1)& (0+255),b
  9023  00415A  0E68               	movlw	low sendVSCPDriverCommandReply@crc
  9024  00415C  6F60               	movwf	?_crc8& (0+255),b
  9025  00415E  0E02               	movlw	2
  9026  004160  6F62               	movwf	(?_crc8+2)& (0+255),b
  9027  004162  EC01  F02B         	call	_crc8	;wreg free
  9028  004166                     l891:
  9029  004166  A2AC               	btfss	4012,1,c	;volatile
  9030  004168  D7FE               	goto	l891
  9031                           
  9032                           ;main.c: 1768: sendEscapedUartData(cmdReplyCode, &crc);
  9033  00416A  0100               	movlb	0	; () banked
  9034  00416C  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9035  00416E  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9036  004170  0E68               	movlw	low sendVSCPDriverCommandReply@crc
  9037  004172  6F63               	movwf	?_sendEscapedUartData& (0+255),b
  9038  004174  5167               	movf	sendVSCPDriverCommandReply@cmdReplyCode& (0+255),w,b
  9039  004176  EC6E  F028         	call	_sendEscapedUartData
  9040  00417A                     l894:
  9041  00417A  A2AC               	btfss	4012,1,c	;volatile
  9042  00417C  D7FE               	goto	l894
  9043                           
  9044                           ;main.c: 1772: sendEscapedUartData(cmdCode, &crc);
  9045  00417E  0100               	movlb	0	; () banked
  9046  004180  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9047  004182  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9048  004184  0E68               	movlw	low sendVSCPDriverCommandReply@crc
  9049  004186  6F63               	movwf	?_sendEscapedUartData& (0+255),b
  9050  004188  5166               	movf	sendVSCPDriverCommandReply@cmdCode& (0+255),w,b
  9051  00418A  EC6E  F028         	call	_sendEscapedUartData
  9052                           
  9053                           ;main.c: 1775: sendEscapedUartData(crc, (0));
  9054  00418E  0100               	movlb	0	; () banked
  9055  004190  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9056  004192  6B63               	clrf	?_sendEscapedUartData& (0+255),b
  9057  004194  5168               	movf	sendVSCPDriverCommandReply@crc& (0+255),w,b
  9058  004196  EC6E  F028         	call	_sendEscapedUartData
  9059  00419A                     l897:
  9060  00419A  A2AC               	btfss	4012,1,c	;volatile
  9061  00419C  D7FE               	goto	l897
  9062                           
  9063                           ;main.c: 1779: WriteUSART(0x10);
  9064  00419E  0E10               	movlw	16
  9065  0041A0  ECF5  F02B         	call	_WriteUSART
  9066  0041A4                     l900:
  9067  0041A4  A2AC               	btfss	4012,1,c	;volatile
  9068  0041A6  D7FE               	goto	l900
  9069                           
  9070                           ;main.c: 1781: WriteUSART(0x03);
  9071  0041A8  0E03               	movlw	3
  9072  0041AA  EFF5  F02B         	goto	_WriteUSART
  9073  0041AE                     __end_of_sendVSCPDriverCommandReply:
  9074                           	opt stack 0
  9075  0041AE                     PL86:
  9076                           	opt stack 23
  9077  0041AE  0100               	movlb	0	; () banked
  9078  0041B0  0E00               	movlw	high sendVSCPDriverCommandReply@crc
  9079  0041B2  6F61               	movwf	(?_crc8+1)& (0+255),b
  9080  0041B4  0E68               	movlw	low sendVSCPDriverCommandReply@crc
  9081  0041B6  6F60               	movwf	?_crc8& (0+255),b
  9082  0041B8  6B62               	clrf	(?_crc8+2)& (0+255),b
  9083  0041BA  0C00               	retlw	0
  9084  0041BC                     __end_ofPL86:
  9085                           	opt stack 0
  9086                           tblptru	equ	0xFF8
  9087                           tblptrh	equ	0xFF7
  9088                           tblptrl	equ	0xFF6
  9089                           tablat	equ	0xFF5
  9090                           prodh	equ	0xFF4
  9091                           prodl	equ	0xFF3
  9092                           intcon	equ	0xFF2
  9093                           indf0	equ	0xFEF
  9094                           postinc0	equ	0xFEE
  9095                           fsr0h	equ	0xFEA
  9096                           fsr0l	equ	0xFE9
  9097                           wreg	equ	0xFE8
  9098                           indf1	equ	0xFE7
  9099                           postinc1	equ	0xFE6
  9100                           postdec1	equ	0xFE5
  9101                           fsr1h	equ	0xFE2
  9102                           fsr1l	equ	0xFE1
  9103                           indf2	equ	0xFDF
  9104                           postinc2	equ	0xFDE
  9105                           postdec2	equ	0xFDD
  9106                           plusw2	equ	0xFDB
  9107                           fsr2h	equ	0xFDA
  9108                           fsr2l	equ	0xFD9
  9109                           status	equ	0xFD8
  9110                           
  9111 ;; *************** function _sendVSCPModeCapabilities *****************
  9112 ;; Defined at:
  9113 ;;		line 2105 in file "main.c"
  9114 ;; Parameters:    Size  Location     Type
  9115 ;;		None
  9116 ;; Auto vars:     Size  Location     Type
  9117 ;;  crc             1    6[BANK0 ] unsigned char 
  9118 ;; Return value:  Size  Location     Type
  9119 ;;                  1    wreg      enum E15660
  9120 ;; Registers used:
  9121 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9122 ;; Tracked objects:
  9123 ;;		On entry : F/1
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9127 ;;      Params:         0       0       0       0       0       0       0
  9128 ;;      Locals:         0       1       0       0       0       0       0
  9129 ;;      Temps:          0       0       0       0       0       0       0
  9130 ;;      Totals:         0       1       0       0       0       0       0
  9131 ;;Total ram usage:        1 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    6
  9134 ;; This function calls:
  9135 ;;		_WriteUSART
  9136 ;;		_sendEscapedUartData
  9137 ;;		_crc8
  9138 ;; This function is called by:
  9139 ;;		_doModeVscp
  9140 ;; This function uses a non-reentrant model
  9141 ;;
  9142                           
  9143                           	psect	text9
  9144  004424                     __ptext9:
  9145                           	opt stack 0
  9146  004424                     _sendVSCPModeCapabilities:
  9147                           	opt stack 23
  9148                           
  9149                           ; BSR set to: 1
  9150                           ;main.c: 2106: uint8_t crc = 0;
  9151                           
  9152                           ;incstack = 0
  9153                           ;incstack = 0
  9154  004424  0100               	movlb	0	; () banked
  9155  004426  6B66               	clrf	sendVSCPModeCapabilities@crc& (0+255),b
  9156  004428                     l1022:
  9157  004428  A2AC               	btfss	4012,1,c	;volatile
  9158  00442A  D7FE               	goto	l1022
  9159                           
  9160                           ;main.c: 2110: WriteUSART(0x10);
  9161  00442C  0E10               	movlw	16
  9162  00442E  ECF5  F02B         	call	_WriteUSART
  9163  004432                     l1025:
  9164  004432  A2AC               	btfss	4012,1,c	;volatile
  9165  004434  D7FE               	goto	l1025
  9166                           
  9167                           ;main.c: 2112: WriteUSART(0x02);
  9168  004436  0E02               	movlw	2
  9169  004438  ECF5  F02B         	call	_WriteUSART
  9170  00443C                     l1028:
  9171  00443C  A2AC               	btfss	4012,1,c	;volatile
  9172  00443E  D7FE               	goto	l1028
  9173                           
  9174                           ;main.c: 2116: WriteUSART(9);
  9175  004440  0E09               	movlw	9
  9176  004442  ECF5  F02B         	call	_WriteUSART
  9177                           
  9178                           ;main.c: 2117: crc8(&crc, 9);
  9179  004446  0100               	movlb	0	; () banked
  9180  004448  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9181  00444A  6F61               	movwf	(?_crc8+1)& (0+255),b
  9182  00444C  0E66               	movlw	low sendVSCPModeCapabilities@crc
  9183  00444E  6F60               	movwf	?_crc8& (0+255),b
  9184  004450  0E09               	movlw	9
  9185  004452  6F62               	movwf	(?_crc8+2)& (0+255),b
  9186  004454  EC01  F02B         	call	_crc8	;wreg free
  9187  004458                     l1031:
  9188  004458  A2AC               	btfss	4012,1,c	;volatile
  9189  00445A  D7FE               	goto	l1031
  9190                           
  9191                           ;main.c: 2121: WriteUSART(0);
  9192  00445C  0E00               	movlw	0
  9193  00445E  ECF5  F02B         	call	_WriteUSART
  9194                           
  9195                           ;main.c: 2122: crc8(&crc, 0);
  9196  004462  0100               	movlb	0	; () banked
  9197  004464  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9198  004466  6F61               	movwf	(?_crc8+1)& (0+255),b
  9199  004468  0E66               	movlw	low sendVSCPModeCapabilities@crc
  9200  00446A  6F60               	movwf	?_crc8& (0+255),b
  9201  00446C  0E00               	movlw	0
  9202  00446E  6B62               	clrf	(?_crc8+2)& (0+255),b
  9203  004470  EC01  F02B         	call	_crc8	;wreg free
  9204                           
  9205                           ; BSR set to: 3
  9206                           ;main.c: 2125: sendEscapedUartData(sequencyno, &crc );
  9207  004474  0100               	movlb	0	; () banked
  9208  004476  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9209  004478  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9210  00447A  0E66               	movlw	low sendVSCPModeCapabilities@crc
  9211  00447C  6F63               	movwf	?_sendEscapedUartData& (0+255),b
  9212  00447E  5038               	movf	_sequencyno,w,c
  9213  004480  EC6E  F028         	call	_sendEscapedUartData
  9214                           
  9215                           ;main.c: 2126: sequencyno++;
  9216  004484  2A38               	incf	_sequencyno,f,c
  9217                           
  9218                           ;main.c: 2129: sendEscapedUartData( 0, &crc );
  9219  004486  D825               	call	PL100	;call to abstracted procedure
  9220  004488  EC6E  F028         	call	_sendEscapedUartData
  9221                           
  9222                           ;main.c: 2130: sendEscapedUartData( 2, &crc );
  9223  00448C  0100               	movlb	0	; () banked
  9224  00448E  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9225  004490  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9226  004492  0E66               	movlw	low sendVSCPModeCapabilities@crc
  9227  004494  6F63               	movwf	?_sendEscapedUartData& (0+255),b
  9228  004496  0E02               	movlw	2
  9229  004498  EC6E  F028         	call	_sendEscapedUartData
  9230                           
  9231                           ;main.c: 2133: sendEscapedUartData( 1, &crc );
  9232  00449C  0100               	movlb	0	; () banked
  9233  00449E  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9234  0044A0  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9235  0044A2  0E66               	movlw	low sendVSCPModeCapabilities@crc
  9236  0044A4  6F63               	movwf	?_sendEscapedUartData& (0+255),b
  9237  0044A6  0E01               	movlw	1
  9238  0044A8  EC6E  F028         	call	_sendEscapedUartData
  9239                           
  9240                           ;main.c: 2134: sendEscapedUartData( 0, &crc );
  9241  0044AC  D812               	call	PL100	;call to abstracted procedure
  9242  0044AE  EC6E  F028         	call	_sendEscapedUartData
  9243                           
  9244                           ;main.c: 2137: sendEscapedUartData(crc, (0));
  9245  0044B2  0100               	movlb	0	; () banked
  9246  0044B4  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9247  0044B6  6B63               	clrf	?_sendEscapedUartData& (0+255),b
  9248  0044B8  5166               	movf	sendVSCPModeCapabilities@crc& (0+255),w,b
  9249  0044BA  EC6E  F028         	call	_sendEscapedUartData
  9250  0044BE                     l1034:
  9251  0044BE  A2AC               	btfss	4012,1,c	;volatile
  9252  0044C0  D7FE               	goto	l1034
  9253                           
  9254                           ;main.c: 2141: WriteUSART(0x10);
  9255  0044C2  0E10               	movlw	16
  9256  0044C4  ECF5  F02B         	call	_WriteUSART
  9257  0044C8                     l1037:
  9258  0044C8  A2AC               	btfss	4012,1,c	;volatile
  9259  0044CA  D7FE               	goto	l1037
  9260                           
  9261                           ;main.c: 2143: WriteUSART(0x03);
  9262  0044CC  0E03               	movlw	3
  9263  0044CE  EFF5  F02B         	goto	_WriteUSART
  9264  0044D2                     __end_of_sendVSCPModeCapabilities:
  9265                           	opt stack 0
  9266  0044D2                     PL100:
  9267                           	opt stack 23
  9268  0044D2  0100               	movlb	0	; () banked
  9269  0044D4  0E00               	movlw	high sendVSCPModeCapabilities@crc
  9270  0044D6  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9271  0044D8  0E66               	movlw	low sendVSCPModeCapabilities@crc
  9272  0044DA  6F63               	movwf	?_sendEscapedUartData& (0+255),b
  9273  0044DC  0C00               	retlw	0
  9274  0044DE                     __end_ofPL100:
  9275                           	opt stack 0
  9276                           tblptru	equ	0xFF8
  9277                           tblptrh	equ	0xFF7
  9278                           tblptrl	equ	0xFF6
  9279                           tablat	equ	0xFF5
  9280                           prodh	equ	0xFF4
  9281                           prodl	equ	0xFF3
  9282                           intcon	equ	0xFF2
  9283                           indf0	equ	0xFEF
  9284                           postinc0	equ	0xFEE
  9285                           fsr0h	equ	0xFEA
  9286                           fsr0l	equ	0xFE9
  9287                           wreg	equ	0xFE8
  9288                           indf1	equ	0xFE7
  9289                           postinc1	equ	0xFE6
  9290                           postdec1	equ	0xFE5
  9291                           fsr1h	equ	0xFE2
  9292                           fsr1l	equ	0xFE1
  9293                           indf2	equ	0xFDF
  9294                           postinc2	equ	0xFDE
  9295                           postdec2	equ	0xFDD
  9296                           plusw2	equ	0xFDB
  9297                           fsr2h	equ	0xFDA
  9298                           fsr2l	equ	0xFD9
  9299                           status	equ	0xFD8
  9300                           
  9301 ;; *************** function _receiveVSCPModeMultiCanalMsg *****************
  9302 ;; Defined at:
  9303 ;;		line 2237 in file "main.c"
  9304 ;; Parameters:    Size  Location     Type
  9305 ;;		None
  9306 ;; Auto vars:     Size  Location     Type
  9307 ;;		None
  9308 ;; Return value:  Size  Location     Type
  9309 ;;                  1    wreg      enum E15660
  9310 ;; Registers used:
  9311 ;;		wreg
  9312 ;; Tracked objects:
  9313 ;;		On entry : F/1
  9314 ;;		On exit  : F/1
  9315 ;;		Unchanged: F/0
  9316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9317 ;;      Params:         0       0       0       0       0       0       0
  9318 ;;      Locals:         0       0       0       0       0       0       0
  9319 ;;      Temps:          0       0       0       0       0       0       0
  9320 ;;      Totals:         0       0       0       0       0       0       0
  9321 ;;Total ram usage:        0 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    3
  9324 ;; This function calls:
  9325 ;;		Nothing
  9326 ;; This function is called by:
  9327 ;;		_doModeVscp
  9328 ;; This function uses a non-reentrant model
  9329 ;;
  9330                           
  9331                           	psect	text10
  9332  005844                     __ptext10:
  9333                           	opt stack 0
  9334  005844                     _receiveVSCPModeMultiCanalMsg:
  9335                           	opt stack 26
  9336                           
  9337                           ; BSR set to: 1
  9338                           
  9339                           ; BSR set to: 1
  9340                           ;main.c: 2239: return 0;
  9341                           
  9342                           ;incstack = 0
  9343                           ;incstack = 0
  9344  005844  0C00               	retlw	0
  9345  005846                     __end_of_receiveVSCPModeMultiCanalMsg:
  9346                           	opt stack 0
  9347                           tblptru	equ	0xFF8
  9348                           tblptrh	equ	0xFF7
  9349                           tblptrl	equ	0xFF6
  9350                           tablat	equ	0xFF5
  9351                           prodh	equ	0xFF4
  9352                           prodl	equ	0xFF3
  9353                           intcon	equ	0xFF2
  9354                           indf0	equ	0xFEF
  9355                           postinc0	equ	0xFEE
  9356                           fsr0h	equ	0xFEA
  9357                           fsr0l	equ	0xFE9
  9358                           wreg	equ	0xFE8
  9359                           indf1	equ	0xFE7
  9360                           postinc1	equ	0xFE6
  9361                           postdec1	equ	0xFE5
  9362                           fsr1h	equ	0xFE2
  9363                           fsr1l	equ	0xFE1
  9364                           indf2	equ	0xFDF
  9365                           postinc2	equ	0xFDE
  9366                           postdec2	equ	0xFDD
  9367                           plusw2	equ	0xFDB
  9368                           fsr2h	equ	0xFDA
  9369                           fsr2l	equ	0xFD9
  9370                           status	equ	0xFD8
  9371                           
  9372 ;; *************** function _receiveVSCPModeCanalMsg *****************
  9373 ;; Defined at:
  9374 ;;		line 2215 in file "main.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;		None
  9377 ;; Auto vars:     Size  Location     Type
  9378 ;;  data            8   65[BANK0 ] unsigned char [8]
  9379 ;;  id              4   73[BANK0 ] unsigned long 
  9380 ;;  dlc             1   77[BANK0 ] unsigned char 
  9381 ;; Return value:  Size  Location     Type
  9382 ;;                  1    wreg      enum E15660
  9383 ;; Registers used:
  9384 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9385 ;; Tracked objects:
  9386 ;;		On entry : F/1
  9387 ;;		On exit  : E/0
  9388 ;;		Unchanged: 0/0
  9389 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9390 ;;      Params:         0       0       0       0       0       0       0
  9391 ;;      Locals:         0      13       0       0       0       0       0
  9392 ;;      Temps:          0      20       0       0       0       0       0
  9393 ;;      Totals:         0      33       0       0       0       0       0
  9394 ;;Total ram usage:       33 bytes
  9395 ;; Hardware stack levels used:    1
  9396 ;; Hardware stack levels required when called:    6
  9397 ;; This function calls:
  9398 ;;		_memcpy
  9399 ;;		_sendCANFrame
  9400 ;; This function is called by:
  9401 ;;		_doModeVscp
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           	psect	text11
  9406  003D4A                     __ptext11:
  9407                           	opt stack 0
  9408  003D4A                     _receiveVSCPModeCanalMsg:
  9409                           	opt stack 23
  9410                           
  9411                           ; BSR set to: 1
  9412                           ;main.c: 2216: uint32_t id;
  9413                           ;main.c: 2217: uint8_t dlc;
  9414                           ;main.c: 2218: uint8_t data[8];
  9415                           ;main.c: 2220: id = ((uint32_t) cmdbuf[5] << 26) |
  9416                           ;main.c: 2221: ((uint32_t) cmdbuf[5 + 1] << 16) |
  9417                           ;main.c: 2222: ((uint32_t) cmdbuf[5 + 2] << 8) |
  9418                           ;main.c: 2223: cmdbuf[5 + 3];
  9419                           
  9420                           ; BSR set to: 1
  9421                           ;incstack = 0
  9422                           ;incstack = 0
  9423  003D4A  C12B  F08D         	movff	_cmdbuf+7,??_receiveVSCPModeCanalMsg
  9424  003D4E  0100               	movlb	0	; () banked
  9425  003D50  6B8E               	clrf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9426  003D52  6B8F               	clrf	(??_receiveVSCPModeCanalMsg+2)& (0+255),b
  9427  003D54  6B90               	clrf	(??_receiveVSCPModeCanalMsg+3)& (0+255),b
  9428  003D56  C08F  F090         	movff	??_receiveVSCPModeCanalMsg+2,??_receiveVSCPModeCanalMsg+3
  9429  003D5A  C08E  F08F         	movff	??_receiveVSCPModeCanalMsg+1,??_receiveVSCPModeCanalMsg+2
  9430  003D5E  C08D  F08E         	movff	??_receiveVSCPModeCanalMsg,??_receiveVSCPModeCanalMsg+1
  9431  003D62  6B8D               	clrf	??_receiveVSCPModeCanalMsg& (0+255),b
  9432  003D64  C12A  F091         	movff	_cmdbuf+6,??_receiveVSCPModeCanalMsg+4
  9433  003D68  6B92               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9434  003D6A  6B93               	clrf	(??_receiveVSCPModeCanalMsg+6)& (0+255),b
  9435  003D6C  6B94               	clrf	(??_receiveVSCPModeCanalMsg+7)& (0+255),b
  9436  003D6E  C092  F094         	movff	??_receiveVSCPModeCanalMsg+5,??_receiveVSCPModeCanalMsg+7
  9437  003D72  C091  F093         	movff	??_receiveVSCPModeCanalMsg+4,??_receiveVSCPModeCanalMsg+6
  9438  003D76  6B92               	clrf	(??_receiveVSCPModeCanalMsg+5)& (0+255),b
  9439  003D78  6B91               	clrf	(??_receiveVSCPModeCanalMsg+4)& (0+255),b
  9440  003D7A  C129  F095         	movff	_cmdbuf+5,??_receiveVSCPModeCanalMsg+8
  9441  003D7E  6B96               	clrf	(??_receiveVSCPModeCanalMsg+9)& (0+255),b
  9442  003D80  6B97               	clrf	(??_receiveVSCPModeCanalMsg+10)& (0+255),b
  9443  003D82  6B98               	clrf	(??_receiveVSCPModeCanalMsg+11)& (0+255),b
  9444  003D84  0E1A               	movlw	26
  9445  003D86                     u20315:
  9446  003D86  90D8               	bcf	status,0,c
  9447  003D88  3795               	rlcf	(??_receiveVSCPModeCanalMsg+8)& (0+255),f,b
  9448  003D8A  3796               	rlcf	(??_receiveVSCPModeCanalMsg+9)& (0+255),f,b
  9449  003D8C  3797               	rlcf	(??_receiveVSCPModeCanalMsg+10)& (0+255),f,b
  9450  003D8E  3798               	rlcf	(??_receiveVSCPModeCanalMsg+11)& (0+255),f,b
  9451  003D90  2EE8               	decfsz	wreg,f,c
  9452  003D92  D7F9               	goto	u20315
  9453  003D94  5191               	movf	(??_receiveVSCPModeCanalMsg+4)& (0+255),w,b
  9454  003D96  1195               	iorwf	(??_receiveVSCPModeCanalMsg+8)& (0+255),w,b
  9455  003D98  6F99               	movwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),b
  9456  003D9A  5192               	movf	(??_receiveVSCPModeCanalMsg+5)& (0+255),w,b
  9457  003D9C  1196               	iorwf	(??_receiveVSCPModeCanalMsg+9)& (0+255),w,b
  9458  003D9E  6F9A               	movwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),b
  9459  003DA0  5193               	movf	(??_receiveVSCPModeCanalMsg+6)& (0+255),w,b
  9460  003DA2  1197               	iorwf	(??_receiveVSCPModeCanalMsg+10)& (0+255),w,b
  9461  003DA4  6F9B               	movwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),b
  9462  003DA6  5194               	movf	(??_receiveVSCPModeCanalMsg+7)& (0+255),w,b
  9463  003DA8  1198               	iorwf	(??_receiveVSCPModeCanalMsg+11)& (0+255),w,b
  9464  003DAA  6F9C               	movwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),b
  9465  003DAC  518D               	movf	??_receiveVSCPModeCanalMsg& (0+255),w,b
  9466  003DAE  1199               	iorwf	(??_receiveVSCPModeCanalMsg+12)& (0+255),w,b
  9467  003DB0  6F9D               	movwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),b
  9468  003DB2  518E               	movf	(??_receiveVSCPModeCanalMsg+1)& (0+255),w,b
  9469  003DB4  119A               	iorwf	(??_receiveVSCPModeCanalMsg+13)& (0+255),w,b
  9470  003DB6  6F9E               	movwf	(??_receiveVSCPModeCanalMsg+17)& (0+255),b
  9471  003DB8  518F               	movf	(??_receiveVSCPModeCanalMsg+2)& (0+255),w,b
  9472  003DBA  119B               	iorwf	(??_receiveVSCPModeCanalMsg+14)& (0+255),w,b
  9473  003DBC  6F9F               	movwf	(??_receiveVSCPModeCanalMsg+18)& (0+255),b
  9474  003DBE  5190               	movf	(??_receiveVSCPModeCanalMsg+3)& (0+255),w,b
  9475  003DC0  119C               	iorwf	(??_receiveVSCPModeCanalMsg+15)& (0+255),w,b
  9476  003DC2  6FA0               	movwf	(??_receiveVSCPModeCanalMsg+19)& (0+255),b
  9477  003DC4  0101               	movlb	1	; () banked
  9478  003DC6  512C               	movf	(_cmdbuf+8)& (0+255),w,b
  9479  003DC8  0100               	movlb	0	; () banked
  9480  003DCA  119D               	iorwf	(??_receiveVSCPModeCanalMsg+16)& (0+255),w,b
  9481  003DCC  6FA9               	movwf	receiveVSCPModeCanalMsg@id& (0+255),b
  9482  003DCE  519E               	movf	(??_receiveVSCPModeCanalMsg+17)& (0+255),w,b
  9483  003DD0  6FAA               	movwf	(receiveVSCPModeCanalMsg@id+1)& (0+255),b
  9484  003DD2  519F               	movf	(??_receiveVSCPModeCanalMsg+18)& (0+255),w,b
  9485  003DD4  6FAB               	movwf	(receiveVSCPModeCanalMsg@id+2)& (0+255),b
  9486  003DD6  51A0               	movf	(??_receiveVSCPModeCanalMsg+19)& (0+255),w,b
  9487  003DD8  6FAC               	movwf	(receiveVSCPModeCanalMsg@id+3)& (0+255),b
  9488                           
  9489                           ;main.c: 2224: dlc = cmdbuf[4] - 4;
  9490  003DDA  0101               	movlb	1	; () banked
  9491  003DDC  5128               	movf	(_cmdbuf+4)& (0+255),w,b
  9492  003DDE  0FFC               	addlw	252
  9493  003DE0  0100               	movlb	0	; () banked
  9494  003DE2  6FAD               	movwf	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9495                           
  9496                           ; BSR set to: 0
  9497                           ;main.c: 2225: if ( dlc > 8 ) return 0;
  9498  003DE4  0E08               	movlw	8
  9499  003DE6  65AD               	cpfsgt	receiveVSCPModeCanalMsg@dlc& (0+255),b
  9500  003DE8  D002               	goto	l14899
  9501                           
  9502                           ; BSR set to: 0
  9503  003DEA  0E00               	movlw	0
  9504  003DEC  D022               	goto	l1075
  9505  003DEE                     l14899:
  9506                           
  9507                           ; BSR set to: 0
  9508                           ;main.c: 2226: memcpy(data, cmdbuf + 5 + 4, dlc);
  9509  003DEE  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9510  003DF0  6E1F               	movwf	?_memcpy+1,c
  9511  003DF2  0EA1               	movlw	low receiveVSCPModeCanalMsg@data
  9512  003DF4  6E1E               	movwf	?_memcpy,c
  9513  003DF6  0E2D               	movlw	low (_cmdbuf+9)
  9514  003DF8  6F8D               	movwf	??_receiveVSCPModeCanalMsg& (0+255),b
  9515  003DFA  0E01               	movlw	high (_cmdbuf+9)
  9516  003DFC  6F8E               	movwf	(??_receiveVSCPModeCanalMsg+1)& (0+255),b
  9517  003DFE  C08D  F020         	movff	??_receiveVSCPModeCanalMsg,?_memcpy+2
  9518  003E02  C08E  F021         	movff	??_receiveVSCPModeCanalMsg+1,?_memcpy+3
  9519  003E06  C0AD  F022         	movff	receiveVSCPModeCanalMsg@dlc,?_memcpy+4
  9520  003E0A  6A23               	clrf	?_memcpy+5,c
  9521  003E0C  EC28  F02A         	call	_memcpy	;wreg free
  9522                           
  9523                           ;main.c: 2228: return sendCANFrame(id, dlc, data);
  9524  003E10  C0A9  F086         	movff	receiveVSCPModeCanalMsg@id,?_sendCANFrame
  9525  003E14  C0AA  F087         	movff	receiveVSCPModeCanalMsg@id+1,?_sendCANFrame+1
  9526  003E18  C0AB  F088         	movff	receiveVSCPModeCanalMsg@id+2,?_sendCANFrame+2
  9527  003E1C  C0AC  F089         	movff	receiveVSCPModeCanalMsg@id+3,?_sendCANFrame+3
  9528  003E20  C0AD  F08A         	movff	receiveVSCPModeCanalMsg@dlc,?_sendCANFrame+4
  9529  003E24  0100               	movlb	0	; () banked
  9530  003E26  0E00               	movlw	high receiveVSCPModeCanalMsg@data
  9531  003E28  6F8C               	movwf	(?_sendCANFrame+6)& (0+255),b
  9532  003E2A  0EA1               	movlw	low receiveVSCPModeCanalMsg@data
  9533  003E2C  6F8B               	movwf	(?_sendCANFrame+5)& (0+255),b
  9534  003E2E  ECE4  F02A         	call	_sendCANFrame	;wreg free
  9535  003E32                     l1075:
  9536  003E32  0012               	return	
  9537  003E34                     __end_of_receiveVSCPModeCanalMsg:
  9538                           	opt stack 0
  9539                           tblptru	equ	0xFF8
  9540                           tblptrh	equ	0xFF7
  9541                           tblptrl	equ	0xFF6
  9542                           tablat	equ	0xFF5
  9543                           prodh	equ	0xFF4
  9544                           prodl	equ	0xFF3
  9545                           intcon	equ	0xFF2
  9546                           indf0	equ	0xFEF
  9547                           postinc0	equ	0xFEE
  9548                           fsr0h	equ	0xFEA
  9549                           fsr0l	equ	0xFE9
  9550                           wreg	equ	0xFE8
  9551                           indf1	equ	0xFE7
  9552                           postinc1	equ	0xFE6
  9553                           postdec1	equ	0xFE5
  9554                           fsr1h	equ	0xFE2
  9555                           fsr1l	equ	0xFE1
  9556                           indf2	equ	0xFDF
  9557                           postinc2	equ	0xFDE
  9558                           postdec2	equ	0xFDD
  9559                           plusw2	equ	0xFDB
  9560                           fsr2h	equ	0xFDA
  9561                           fsr2l	equ	0xFD9
  9562                           status	equ	0xFD8
  9563                           
  9564 ;; *************** function _memcpy *****************
  9565 ;; Defined at:
  9566 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memcpy.c"
  9567 ;; Parameters:    Size  Location     Type
  9568 ;;  d1              2   29[COMRAM] PTR void 
  9569 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9570 ;;  s1              2   31[COMRAM] PTR const void 
  9571 ;;		 -> vscpData(8), cmdbuf(80), 
  9572 ;;  n               2   33[COMRAM] unsigned int 
  9573 ;; Auto vars:     Size  Location     Type
  9574 ;;  s               2    2[BANK0 ] PTR const unsigned char 
  9575 ;;		 -> vscpData(8), cmdbuf(80), 
  9576 ;;  d               2    0[BANK0 ] PTR unsigned char 
  9577 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
  9578 ;; Return value:  Size  Location     Type
  9579 ;;                  2   29[COMRAM] PTR void 
  9580 ;; Registers used:
  9581 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9582 ;; Tracked objects:
  9583 ;;		On entry : F/0
  9584 ;;		On exit  : 0/0
  9585 ;;		Unchanged: 0/0
  9586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9587 ;;      Params:         6       0       0       0       0       0       0
  9588 ;;      Locals:         0       4       0       0       0       0       0
  9589 ;;      Temps:          0       0       0       0       0       0       0
  9590 ;;      Totals:         6       4       0       0       0       0       0
  9591 ;;Total ram usage:       10 bytes
  9592 ;; Hardware stack levels used:    1
  9593 ;; Hardware stack levels required when called:    3
  9594 ;; This function calls:
  9595 ;;		Nothing
  9596 ;; This function is called by:
  9597 ;;		_doModeSLCAN
  9598 ;;		_receiveVSCPModeCanalMsg
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           	psect	text12
  9603  005450                     __ptext12:
  9604                           	opt stack 0
  9605  005450                     _memcpy:
  9606                           	opt stack 26
  9607                           
  9608                           ; BSR set to: 0
  9609                           
  9610                           ;incstack = 0
  9611                           ;incstack = 0
  9612  005450  C020  F062         	movff	memcpy@s1,memcpy@s
  9613  005454  C021  F063         	movff	memcpy@s1+1,memcpy@s+1
  9614  005458  C01E  F060         	movff	memcpy@d1,memcpy@d
  9615  00545C  C01F  F061         	movff	memcpy@d1+1,memcpy@d+1
  9616  005460  D00F               	goto	l15043
  9617  005462                     l15037:
  9618  005462  C062  FFD9         	movff	memcpy@s,fsr2l
  9619  005466  C063  FFDA         	movff	memcpy@s+1,fsr2h
  9620  00546A  C060  FFE1         	movff	memcpy@d,fsr1l
  9621  00546E  C061  FFE2         	movff	memcpy@d+1,fsr1h
  9622  005472  CFDF FFE7          	movff	indf2,indf1
  9623  005476  0100               	movlb	0	; () banked
  9624  005478  4B62               	infsnz	memcpy@s& (0+255),f,b
  9625  00547A  2B63               	incf	(memcpy@s+1)& (0+255),f,b
  9626                           
  9627                           ; BSR set to: 0
  9628  00547C  4B60               	infsnz	memcpy@d& (0+255),f,b
  9629  00547E  2B61               	incf	(memcpy@d+1)& (0+255),f,b
  9630  005480                     l15043:
  9631                           
  9632                           ; BSR set to: 0
  9633  005480  0622               	decf	memcpy@n,f,c
  9634  005482  A0D8               	btfss	status,0,c
  9635  005484  0623               	decf	memcpy@n+1,f,c
  9636  005486  2822               	incf	memcpy@n& (0+255),w,c
  9637  005488  B4D8               	btfsc	status,2,c
  9638  00548A  2823               	incf	(memcpy@n+1)& (0+255),w,c
  9639  00548C  B4D8               	btfsc	status,2,c
  9640  00548E  0012               	return	
  9641  005490  D7E8               	goto	l15037
  9642  005492                     __end_of_memcpy:
  9643                           	opt stack 0
  9644                           tblptru	equ	0xFF8
  9645                           tblptrh	equ	0xFF7
  9646                           tblptrl	equ	0xFF6
  9647                           tablat	equ	0xFF5
  9648                           prodh	equ	0xFF4
  9649                           prodl	equ	0xFF3
  9650                           intcon	equ	0xFF2
  9651                           indf0	equ	0xFEF
  9652                           postinc0	equ	0xFEE
  9653                           fsr0h	equ	0xFEA
  9654                           fsr0l	equ	0xFE9
  9655                           wreg	equ	0xFE8
  9656                           indf1	equ	0xFE7
  9657                           postinc1	equ	0xFE6
  9658                           postdec1	equ	0xFE5
  9659                           fsr1h	equ	0xFE2
  9660                           fsr1l	equ	0xFE1
  9661                           indf2	equ	0xFDF
  9662                           postinc2	equ	0xFDE
  9663                           postdec2	equ	0xFDD
  9664                           plusw2	equ	0xFDB
  9665                           fsr2h	equ	0xFDA
  9666                           fsr2l	equ	0xFD9
  9667                           status	equ	0xFD8
  9668                           
  9669 ;; *************** function _sendVSCPDriverAck *****************
  9670 ;; Defined at:
  9671 ;;		line 1647 in file "main.c"
  9672 ;; Parameters:    Size  Location     Type
  9673 ;;		None
  9674 ;; Auto vars:     Size  Location     Type
  9675 ;;  crc             1    6[BANK0 ] unsigned char 
  9676 ;; Return value:  Size  Location     Type
  9677 ;;		None               void
  9678 ;; Registers used:
  9679 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9680 ;; Tracked objects:
  9681 ;;		On entry : E/1
  9682 ;;		On exit  : 0/0
  9683 ;;		Unchanged: 0/0
  9684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9685 ;;      Params:         0       0       0       0       0       0       0
  9686 ;;      Locals:         0       1       0       0       0       0       0
  9687 ;;      Temps:          0       0       0       0       0       0       0
  9688 ;;      Totals:         0       1       0       0       0       0       0
  9689 ;;Total ram usage:        1 bytes
  9690 ;; Hardware stack levels used:    1
  9691 ;; Hardware stack levels required when called:    6
  9692 ;; This function calls:
  9693 ;;		_WriteUSART
  9694 ;;		_sendEscapedUartData
  9695 ;;		_crc8
  9696 ;; This function is called by:
  9697 ;;		_doModeVscp
  9698 ;; This function uses a non-reentrant model
  9699 ;;
  9700                           
  9701                           	psect	text13
  9702  00479A                     __ptext13:
  9703                           	opt stack 0
  9704  00479A                     _sendVSCPDriverAck:
  9705                           	opt stack 23
  9706                           
  9707                           ;main.c: 1648: uint8_t crc = 0;
  9708                           
  9709                           ;incstack = 0
  9710                           ;incstack = 0
  9711  00479A  0100               	movlb	0	; () banked
  9712  00479C  6B66               	clrf	sendVSCPDriverAck@crc& (0+255),b
  9713  00479E                     l819:
  9714  00479E  A2AC               	btfss	4012,1,c	;volatile
  9715  0047A0  D7FE               	goto	l819
  9716                           
  9717                           ;main.c: 1652: WriteUSART(0x10);
  9718  0047A2  0E10               	movlw	16
  9719  0047A4  ECF5  F02B         	call	_WriteUSART
  9720  0047A8                     l822:
  9721  0047A8  A2AC               	btfss	4012,1,c	;volatile
  9722  0047AA  D7FE               	goto	l822
  9723                           
  9724                           ;main.c: 1654: WriteUSART(0x02);
  9725  0047AC  0E02               	movlw	2
  9726  0047AE  ECF5  F02B         	call	_WriteUSART
  9727  0047B2                     l825:
  9728  0047B2  A2AC               	btfss	4012,1,c	;volatile
  9729  0047B4  D7FE               	goto	l825
  9730                           
  9731                           ;main.c: 1658: WriteUSART(251);
  9732  0047B6  0EFB               	movlw	251
  9733  0047B8  ECF5  F02B         	call	_WriteUSART
  9734                           
  9735                           ;main.c: 1659: crc8(&crc, 251);
  9736  0047BC  0100               	movlb	0	; () banked
  9737  0047BE  0E00               	movlw	high sendVSCPDriverAck@crc
  9738  0047C0  6F61               	movwf	(?_crc8+1)& (0+255),b
  9739  0047C2  0E66               	movlw	low sendVSCPDriverAck@crc
  9740  0047C4  6F60               	movwf	?_crc8& (0+255),b
  9741  0047C6  0EFB               	movlw	251
  9742  0047C8  6F62               	movwf	(?_crc8+2)& (0+255),b
  9743  0047CA  EC01  F02B         	call	_crc8	;wreg free
  9744  0047CE                     l828:
  9745  0047CE  A2AC               	btfss	4012,1,c	;volatile
  9746  0047D0  D7FE               	goto	l828
  9747                           
  9748                           ;main.c: 1663: WriteUSART(0);
  9749  0047D2  0E00               	movlw	0
  9750  0047D4  ECF5  F02B         	call	_WriteUSART
  9751                           
  9752                           ;main.c: 1664: crc8(&crc, 0);
  9753  0047D8  D82B               	call	PL42	;call to abstracted procedure
  9754  0047DA  EC01  F02B         	call	_crc8	;wreg free
  9755                           
  9756                           ; BSR set to: 3
  9757                           ;main.c: 1667: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9758  0047DE  0100               	movlb	0	; () banked
  9759  0047E0  0E00               	movlw	high sendVSCPDriverAck@crc
  9760  0047E2  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9761  0047E4  0E66               	movlw	low sendVSCPDriverAck@crc
  9762  0047E6  6F63               	movwf	?_sendEscapedUartData& (0+255),b
  9763  0047E8  0101               	movlb	1	; () banked
  9764  0047EA  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  9765  0047EC  EC6E  F028         	call	_sendEscapedUartData
  9766  0047F0                     l831:
  9767  0047F0  A2AC               	btfss	4012,1,c	;volatile
  9768  0047F2  D7FE               	goto	l831
  9769                           
  9770                           ;main.c: 1671: WriteUSART(0);
  9771  0047F4  0E00               	movlw	0
  9772  0047F6  ECF5  F02B         	call	_WriteUSART
  9773                           
  9774                           ;main.c: 1672: crc8(&crc, 0);
  9775  0047FA  D81A               	call	PL42	;call to abstracted procedure
  9776  0047FC  EC01  F02B         	call	_crc8	;wreg free
  9777  004800                     l834:
  9778  004800  A2AC               	btfss	4012,1,c	;volatile
  9779  004802  D7FE               	goto	l834
  9780                           
  9781                           ;main.c: 1674: WriteUSART(0);
  9782  004804  0E00               	movlw	0
  9783  004806  ECF5  F02B         	call	_WriteUSART
  9784                           
  9785                           ;main.c: 1675: crc8(&crc, 0);
  9786  00480A  D812               	call	PL42	;call to abstracted procedure
  9787  00480C  EC01  F02B         	call	_crc8	;wreg free
  9788                           
  9789                           ; BSR set to: 3
  9790                           ;main.c: 1678: sendEscapedUartData(crc, (0));
  9791  004810  0100               	movlb	0	; () banked
  9792  004812  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9793  004814  6B63               	clrf	?_sendEscapedUartData& (0+255),b
  9794  004816  5166               	movf	sendVSCPDriverAck@crc& (0+255),w,b
  9795  004818  EC6E  F028         	call	_sendEscapedUartData
  9796  00481C                     l837:
  9797  00481C  A2AC               	btfss	4012,1,c	;volatile
  9798  00481E  D7FE               	goto	l837
  9799                           
  9800                           ;main.c: 1682: WriteUSART(0x10);
  9801  004820  0E10               	movlw	16
  9802  004822  ECF5  F02B         	call	_WriteUSART
  9803  004826                     l840:
  9804  004826  A2AC               	btfss	4012,1,c	;volatile
  9805  004828  D7FE               	goto	l840
  9806                           
  9807                           ;main.c: 1684: WriteUSART(0x03);
  9808  00482A  0E03               	movlw	3
  9809  00482C  EFF5  F02B         	goto	_WriteUSART
  9810  004830                     __end_of_sendVSCPDriverAck:
  9811                           	opt stack 0
  9812  004830                     PL42:
  9813                           	opt stack 23
  9814  004830  0100               	movlb	0	; () banked
  9815  004832  0E00               	movlw	high sendVSCPDriverAck@crc
  9816  004834  6F61               	movwf	(?_crc8+1)& (0+255),b
  9817  004836  0E66               	movlw	low sendVSCPDriverAck@crc
  9818  004838  6F60               	movwf	?_crc8& (0+255),b
  9819  00483A  6B62               	clrf	(?_crc8+2)& (0+255),b
  9820  00483C  0C00               	retlw	0
  9821  00483E                     __end_ofPL42:
  9822                           	opt stack 0
  9823                           tblptru	equ	0xFF8
  9824                           tblptrh	equ	0xFF7
  9825                           tblptrl	equ	0xFF6
  9826                           tablat	equ	0xFF5
  9827                           prodh	equ	0xFF4
  9828                           prodl	equ	0xFF3
  9829                           intcon	equ	0xFF2
  9830                           indf0	equ	0xFEF
  9831                           postinc0	equ	0xFEE
  9832                           fsr0h	equ	0xFEA
  9833                           fsr0l	equ	0xFE9
  9834                           wreg	equ	0xFE8
  9835                           indf1	equ	0xFE7
  9836                           postinc1	equ	0xFE6
  9837                           postdec1	equ	0xFE5
  9838                           fsr1h	equ	0xFE2
  9839                           fsr1l	equ	0xFE1
  9840                           indf2	equ	0xFDF
  9841                           postinc2	equ	0xFDE
  9842                           postdec2	equ	0xFDD
  9843                           plusw2	equ	0xFDB
  9844                           fsr2h	equ	0xFDA
  9845                           fsr2l	equ	0xFD9
  9846                           status	equ	0xFD8
  9847                           
  9848 ;; *************** function _sendVSCPDriverErrorFrame *****************
  9849 ;; Defined at:
  9850 ;;		line 1599 in file "main.c"
  9851 ;; Parameters:    Size  Location     Type
  9852 ;;  errorcode       1    wreg     unsigned char 
  9853 ;; Auto vars:     Size  Location     Type
  9854 ;;  errorcode       1    6[BANK0 ] unsigned char 
  9855 ;;  crc             1    7[BANK0 ] unsigned char 
  9856 ;; Return value:  Size  Location     Type
  9857 ;;		None               void
  9858 ;; Registers used:
  9859 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9860 ;; Tracked objects:
  9861 ;;		On entry : 0/0
  9862 ;;		On exit  : 0/0
  9863 ;;		Unchanged: 0/0
  9864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  9865 ;;      Params:         0       0       0       0       0       0       0
  9866 ;;      Locals:         0       2       0       0       0       0       0
  9867 ;;      Temps:          0       0       0       0       0       0       0
  9868 ;;      Totals:         0       2       0       0       0       0       0
  9869 ;;Total ram usage:        2 bytes
  9870 ;; Hardware stack levels used:    1
  9871 ;; Hardware stack levels required when called:    6
  9872 ;; This function calls:
  9873 ;;		_WriteUSART
  9874 ;;		_sendEscapedUartData
  9875 ;;		_crc8
  9876 ;; This function is called by:
  9877 ;;		_doModeVscp
  9878 ;; This function uses a non-reentrant model
  9879 ;;
  9880                           
  9881                           	psect	text14
  9882  004360                     __ptext14:
  9883                           	opt stack 0
  9884  004360                     _sendVSCPDriverErrorFrame:
  9885                           	opt stack 23
  9886                           
  9887                           ;incstack = 0
  9888                           ;incstack = 0
  9889                           ;sendVSCPDriverErrorFrame@errorcode stored from wreg
  9890  004360  CFE8 F066          	movff	wreg,sendVSCPDriverErrorFrame@errorcode
  9891                           
  9892                           ;main.c: 1600: uint8_t crc = 0;
  9893  004364  0100               	movlb	0	; () banked
  9894  004366  6B67               	clrf	sendVSCPDriverErrorFrame@crc& (0+255),b
  9895  004368                     l792:
  9896  004368  A2AC               	btfss	4012,1,c	;volatile
  9897  00436A  D7FE               	goto	l792
  9898                           
  9899                           ;main.c: 1604: WriteUSART(0x10);
  9900  00436C  0E10               	movlw	16
  9901  00436E  ECF5  F02B         	call	_WriteUSART
  9902  004372                     l795:
  9903  004372  A2AC               	btfss	4012,1,c	;volatile
  9904  004374  D7FE               	goto	l795
  9905                           
  9906                           ;main.c: 1606: WriteUSART(0x02);
  9907  004376  0E02               	movlw	2
  9908  004378  ECF5  F02B         	call	_WriteUSART
  9909  00437C                     l798:
  9910  00437C  A2AC               	btfss	4012,1,c	;volatile
  9911  00437E  D7FE               	goto	l798
  9912                           
  9913                           ;main.c: 1610: WriteUSART(253);
  9914  004380  0EFD               	movlw	253
  9915  004382  ECF5  F02B         	call	_WriteUSART
  9916                           
  9917                           ;main.c: 1611: crc8(&crc, 253);
  9918  004386  0100               	movlb	0	; () banked
  9919  004388  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9920  00438A  6F61               	movwf	(?_crc8+1)& (0+255),b
  9921  00438C  0E67               	movlw	low sendVSCPDriverErrorFrame@crc
  9922  00438E  6F60               	movwf	?_crc8& (0+255),b
  9923  004390  0EFD               	movlw	253
  9924  004392  6F62               	movwf	(?_crc8+2)& (0+255),b
  9925  004394  EC01  F02B         	call	_crc8	;wreg free
  9926  004398                     l801:
  9927  004398  A2AC               	btfss	4012,1,c	;volatile
  9928  00439A  D7FE               	goto	l801
  9929                           
  9930                           ;main.c: 1615: WriteUSART(0);
  9931  00439C  0E00               	movlw	0
  9932  00439E  ECF5  F02B         	call	_WriteUSART
  9933                           
  9934                           ;main.c: 1616: crc8(&crc, 0);
  9935  0043A2  D839               	call	PL84	;call to abstracted procedure
  9936  0043A4  EC01  F02B         	call	_crc8	;wreg free
  9937                           
  9938                           ; BSR set to: 3
  9939                           ;main.c: 1619: sendEscapedUartData(cmdbuf[ 2 ], &crc);
  9940  0043A8  0100               	movlb	0	; () banked
  9941  0043AA  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9942  0043AC  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9943  0043AE  0E67               	movlw	low sendVSCPDriverErrorFrame@crc
  9944  0043B0  6F63               	movwf	?_sendEscapedUartData& (0+255),b
  9945  0043B2  0101               	movlb	1	; () banked
  9946  0043B4  5126               	movf	(_cmdbuf+2)& (0+255),w,b
  9947  0043B6  EC6E  F028         	call	_sendEscapedUartData
  9948  0043BA                     l804:
  9949  0043BA  A2AC               	btfss	4012,1,c	;volatile
  9950  0043BC  D7FE               	goto	l804
  9951                           
  9952                           ;main.c: 1623: WriteUSART(0);
  9953  0043BE  0E00               	movlw	0
  9954  0043C0  ECF5  F02B         	call	_WriteUSART
  9955                           
  9956                           ;main.c: 1624: crc8(&crc, 0);
  9957  0043C4  D828               	call	PL84	;call to abstracted procedure
  9958  0043C6  EC01  F02B         	call	_crc8	;wreg free
  9959  0043CA                     l807:
  9960  0043CA  A2AC               	btfss	4012,1,c	;volatile
  9961  0043CC  D7FE               	goto	l807
  9962                           
  9963                           ;main.c: 1626: WriteUSART(1);
  9964  0043CE  0E01               	movlw	1
  9965  0043D0  ECF5  F02B         	call	_WriteUSART
  9966                           
  9967                           ;main.c: 1627: crc8(&crc, 1);
  9968  0043D4  0100               	movlb	0	; () banked
  9969  0043D6  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9970  0043D8  6F61               	movwf	(?_crc8+1)& (0+255),b
  9971  0043DA  0E67               	movlw	low sendVSCPDriverErrorFrame@crc
  9972  0043DC  6F60               	movwf	?_crc8& (0+255),b
  9973  0043DE  0E01               	movlw	1
  9974  0043E0  6F62               	movwf	(?_crc8+2)& (0+255),b
  9975  0043E2  EC01  F02B         	call	_crc8	;wreg free
  9976                           
  9977                           ; BSR set to: 3
  9978                           ;main.c: 1630: sendEscapedUartData(errorcode, &crc);
  9979  0043E6  0100               	movlb	0	; () banked
  9980  0043E8  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
  9981  0043EA  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
  9982  0043EC  0E67               	movlw	low sendVSCPDriverErrorFrame@crc
  9983  0043EE  6F63               	movwf	?_sendEscapedUartData& (0+255),b
  9984  0043F0  5166               	movf	sendVSCPDriverErrorFrame@errorcode& (0+255),w,b
  9985  0043F2  EC6E  F028         	call	_sendEscapedUartData
  9986                           
  9987                           ;main.c: 1633: sendEscapedUartData(crc, (0));
  9988  0043F6  0100               	movlb	0	; () banked
  9989  0043F8  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
  9990  0043FA  6B63               	clrf	?_sendEscapedUartData& (0+255),b
  9991  0043FC  5167               	movf	sendVSCPDriverErrorFrame@crc& (0+255),w,b
  9992  0043FE  EC6E  F028         	call	_sendEscapedUartData
  9993  004402                     l810:
  9994  004402  A2AC               	btfss	4012,1,c	;volatile
  9995  004404  D7FE               	goto	l810
  9996                           
  9997                           ;main.c: 1637: WriteUSART(0x10);
  9998  004406  0E10               	movlw	16
  9999  004408  ECF5  F02B         	call	_WriteUSART
 10000  00440C                     l813:
 10001  00440C  A2AC               	btfss	4012,1,c	;volatile
 10002  00440E  D7FE               	goto	l813
 10003                           
 10004                           ;main.c: 1639: WriteUSART(0x03);
 10005  004410  0E03               	movlw	3
 10006  004412  EFF5  F02B         	goto	_WriteUSART
 10007  004416                     __end_of_sendVSCPDriverErrorFrame:
 10008                           	opt stack 0
 10009  004416                     PL84:
 10010                           	opt stack 23
 10011  004416  0100               	movlb	0	; () banked
 10012  004418  0E00               	movlw	high sendVSCPDriverErrorFrame@crc
 10013  00441A  6F61               	movwf	(?_crc8+1)& (0+255),b
 10014  00441C  0E67               	movlw	low sendVSCPDriverErrorFrame@crc
 10015  00441E  6F60               	movwf	?_crc8& (0+255),b
 10016  004420  6B62               	clrf	(?_crc8+2)& (0+255),b
 10017  004422  0C00               	retlw	0
 10018  004424                     __end_ofPL84:
 10019                           	opt stack 0
 10020                           tblptru	equ	0xFF8
 10021                           tblptrh	equ	0xFF7
 10022                           tblptrl	equ	0xFF6
 10023                           tablat	equ	0xFF5
 10024                           prodh	equ	0xFF4
 10025                           prodl	equ	0xFF3
 10026                           intcon	equ	0xFF2
 10027                           indf0	equ	0xFEF
 10028                           postinc0	equ	0xFEE
 10029                           fsr0h	equ	0xFEA
 10030                           fsr0l	equ	0xFE9
 10031                           wreg	equ	0xFE8
 10032                           indf1	equ	0xFE7
 10033                           postinc1	equ	0xFE6
 10034                           postdec1	equ	0xFE5
 10035                           fsr1h	equ	0xFE2
 10036                           fsr1l	equ	0xFE1
 10037                           indf2	equ	0xFDF
 10038                           postinc2	equ	0xFDE
 10039                           postdec2	equ	0xFDD
 10040                           plusw2	equ	0xFDB
 10041                           fsr2h	equ	0xFDA
 10042                           fsr2l	equ	0xFD9
 10043                           status	equ	0xFD8
 10044                           
 10045 ;; *************** function _sendVSCPDriverNack *****************
 10046 ;; Defined at:
 10047 ;;		line 1691 in file "main.c"
 10048 ;; Parameters:    Size  Location     Type
 10049 ;;		None
 10050 ;; Auto vars:     Size  Location     Type
 10051 ;;  crc             1    6[BANK0 ] unsigned char 
 10052 ;; Return value:  Size  Location     Type
 10053 ;;		None               void
 10054 ;; Registers used:
 10055 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10056 ;; Tracked objects:
 10057 ;;		On entry : E/0
 10058 ;;		On exit  : 0/0
 10059 ;;		Unchanged: 0/0
 10060 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10061 ;;      Params:         0       0       0       0       0       0       0
 10062 ;;      Locals:         0       1       0       0       0       0       0
 10063 ;;      Temps:          0       0       0       0       0       0       0
 10064 ;;      Totals:         0       1       0       0       0       0       0
 10065 ;;Total ram usage:        1 bytes
 10066 ;; Hardware stack levels used:    1
 10067 ;; Hardware stack levels required when called:    6
 10068 ;; This function calls:
 10069 ;;		_WriteUSART
 10070 ;;		_sendEscapedUartData
 10071 ;;		_crc8
 10072 ;; This function is called by:
 10073 ;;		_doModeVscp
 10074 ;; This function uses a non-reentrant model
 10075 ;;
 10076                           
 10077                           	psect	text15
 10078  00483E                     __ptext15:
 10079                           	opt stack 0
 10080  00483E                     _sendVSCPDriverNack:
 10081                           	opt stack 23
 10082                           
 10083                           ;main.c: 1692: uint8_t crc = 0;
 10084                           
 10085                           ;incstack = 0
 10086                           ;incstack = 0
 10087  00483E  0100               	movlb	0	; () banked
 10088  004840  6B66               	clrf	sendVSCPDriverNack@crc& (0+255),b
 10089  004842                     l846:
 10090  004842  A2AC               	btfss	4012,1,c	;volatile
 10091  004844  D7FE               	goto	l846
 10092                           
 10093                           ;main.c: 1696: WriteUSART(0x10);
 10094  004846  0E10               	movlw	16
 10095  004848  ECF5  F02B         	call	_WriteUSART
 10096  00484C                     l849:
 10097  00484C  A2AC               	btfss	4012,1,c	;volatile
 10098  00484E  D7FE               	goto	l849
 10099                           
 10100                           ;main.c: 1698: WriteUSART(0x02);
 10101  004850  0E02               	movlw	2
 10102  004852  ECF5  F02B         	call	_WriteUSART
 10103  004856                     l852:
 10104  004856  A2AC               	btfss	4012,1,c	;volatile
 10105  004858  D7FE               	goto	l852
 10106                           
 10107                           ;main.c: 1702: WriteUSART(252);
 10108  00485A  0EFC               	movlw	252
 10109  00485C  ECF5  F02B         	call	_WriteUSART
 10110                           
 10111                           ;main.c: 1703: crc8(&crc, 252);
 10112  004860  0100               	movlb	0	; () banked
 10113  004862  0E00               	movlw	high sendVSCPDriverNack@crc
 10114  004864  6F61               	movwf	(?_crc8+1)& (0+255),b
 10115  004866  0E66               	movlw	low sendVSCPDriverNack@crc
 10116  004868  6F60               	movwf	?_crc8& (0+255),b
 10117  00486A  0EFC               	movlw	252
 10118  00486C  6F62               	movwf	(?_crc8+2)& (0+255),b
 10119  00486E  EC01  F02B         	call	_crc8	;wreg free
 10120  004872                     l855:
 10121  004872  A2AC               	btfss	4012,1,c	;volatile
 10122  004874  D7FE               	goto	l855
 10123                           
 10124                           ;main.c: 1707: WriteUSART(0);
 10125  004876  0E00               	movlw	0
 10126  004878  ECF5  F02B         	call	_WriteUSART
 10127                           
 10128                           ;main.c: 1708: crc8(&crc, 0);
 10129  00487C  D82B               	call	PL44	;call to abstracted procedure
 10130  00487E  EC01  F02B         	call	_crc8	;wreg free
 10131                           
 10132                           ; BSR set to: 3
 10133                           ;main.c: 1711: sendEscapedUartData(cmdbuf[ 2 ], &crc);
 10134  004882  0100               	movlb	0	; () banked
 10135  004884  0E00               	movlw	high sendVSCPDriverNack@crc
 10136  004886  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10137  004888  0E66               	movlw	low sendVSCPDriverNack@crc
 10138  00488A  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10139  00488C  0101               	movlb	1	; () banked
 10140  00488E  5126               	movf	(_cmdbuf+2)& (0+255),w,b
 10141  004890  EC6E  F028         	call	_sendEscapedUartData
 10142  004894                     l858:
 10143  004894  A2AC               	btfss	4012,1,c	;volatile
 10144  004896  D7FE               	goto	l858
 10145                           
 10146                           ;main.c: 1715: WriteUSART(0);
 10147  004898  0E00               	movlw	0
 10148  00489A  ECF5  F02B         	call	_WriteUSART
 10149                           
 10150                           ;main.c: 1716: crc8(&crc, 0);
 10151  00489E  D81A               	call	PL44	;call to abstracted procedure
 10152  0048A0  EC01  F02B         	call	_crc8	;wreg free
 10153  0048A4                     l861:
 10154  0048A4  A2AC               	btfss	4012,1,c	;volatile
 10155  0048A6  D7FE               	goto	l861
 10156                           
 10157                           ;main.c: 1718: WriteUSART(0);
 10158  0048A8  0E00               	movlw	0
 10159  0048AA  ECF5  F02B         	call	_WriteUSART
 10160                           
 10161                           ;main.c: 1719: crc8(&crc, 0);
 10162  0048AE  D812               	call	PL44	;call to abstracted procedure
 10163  0048B0  EC01  F02B         	call	_crc8	;wreg free
 10164                           
 10165                           ; BSR set to: 3
 10166                           ;main.c: 1722: sendEscapedUartData(crc, (0));
 10167  0048B4  0100               	movlb	0	; () banked
 10168  0048B6  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10169  0048B8  6B63               	clrf	?_sendEscapedUartData& (0+255),b
 10170  0048BA  5166               	movf	sendVSCPDriverNack@crc& (0+255),w,b
 10171  0048BC  EC6E  F028         	call	_sendEscapedUartData
 10172  0048C0                     l864:
 10173  0048C0  A2AC               	btfss	4012,1,c	;volatile
 10174  0048C2  D7FE               	goto	l864
 10175                           
 10176                           ;main.c: 1726: WriteUSART(0x10);
 10177  0048C4  0E10               	movlw	16
 10178  0048C6  ECF5  F02B         	call	_WriteUSART
 10179  0048CA                     l867:
 10180  0048CA  A2AC               	btfss	4012,1,c	;volatile
 10181  0048CC  D7FE               	goto	l867
 10182                           
 10183                           ;main.c: 1728: WriteUSART(0x03);
 10184  0048CE  0E03               	movlw	3
 10185  0048D0  EFF5  F02B         	goto	_WriteUSART
 10186  0048D4                     __end_of_sendVSCPDriverNack:
 10187                           	opt stack 0
 10188  0048D4                     PL44:
 10189                           	opt stack 23
 10190  0048D4  0100               	movlb	0	; () banked
 10191  0048D6  0E00               	movlw	high sendVSCPDriverNack@crc
 10192  0048D8  6F61               	movwf	(?_crc8+1)& (0+255),b
 10193  0048DA  0E66               	movlw	low sendVSCPDriverNack@crc
 10194  0048DC  6F60               	movwf	?_crc8& (0+255),b
 10195  0048DE  6B62               	clrf	(?_crc8+2)& (0+255),b
 10196  0048E0  0C00               	retlw	0
 10197  0048E2                     __end_ofPL44:
 10198                           	opt stack 0
 10199                           tblptru	equ	0xFF8
 10200                           tblptrh	equ	0xFF7
 10201                           tblptrl	equ	0xFF6
 10202                           tablat	equ	0xFF5
 10203                           prodh	equ	0xFF4
 10204                           prodl	equ	0xFF3
 10205                           intcon	equ	0xFF2
 10206                           indf0	equ	0xFEF
 10207                           postinc0	equ	0xFEE
 10208                           fsr0h	equ	0xFEA
 10209                           fsr0l	equ	0xFE9
 10210                           wreg	equ	0xFE8
 10211                           indf1	equ	0xFE7
 10212                           postinc1	equ	0xFE6
 10213                           postdec1	equ	0xFE5
 10214                           fsr1h	equ	0xFE2
 10215                           fsr1l	equ	0xFE1
 10216                           indf2	equ	0xFDF
 10217                           postinc2	equ	0xFDE
 10218                           postdec2	equ	0xFDD
 10219                           plusw2	equ	0xFDB
 10220                           fsr2h	equ	0xFDA
 10221                           fsr2l	equ	0xFD9
 10222                           status	equ	0xFD8
 10223                           
 10224 ;; *************** function _calcCRC *****************
 10225 ;; Defined at:
 10226 ;;		line 2449 in file "main.c"
 10227 ;; Parameters:    Size  Location     Type
 10228 ;;  p               2    3[BANK0 ] PTR unsigned char 
 10229 ;;		 -> cmdbuf(80), 
 10230 ;;  len             1    5[BANK0 ] unsigned char 
 10231 ;; Auto vars:     Size  Location     Type
 10232 ;;  crc             1    7[BANK0 ] unsigned char 
 10233 ;;  j               1    6[BANK0 ] unsigned char 
 10234 ;; Return value:  Size  Location     Type
 10235 ;;                  1    wreg      unsigned char 
 10236 ;; Registers used:
 10237 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10238 ;; Tracked objects:
 10239 ;;		On entry : F/0
 10240 ;;		On exit  : F/0
 10241 ;;		Unchanged: 0/0
 10242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10243 ;;      Params:         0       3       0       0       0       0       0
 10244 ;;      Locals:         0       2       0       0       0       0       0
 10245 ;;      Temps:          0       0       0       0       0       0       0
 10246 ;;      Totals:         0       5       0       0       0       0       0
 10247 ;;Total ram usage:        5 bytes
 10248 ;; Hardware stack levels used:    1
 10249 ;; Hardware stack levels required when called:    5
 10250 ;; This function calls:
 10251 ;;		_crc8
 10252 ;; This function is called by:
 10253 ;;		_doModeVscp
 10254 ;; This function uses a non-reentrant model
 10255 ;;
 10256                           
 10257                           	psect	text16
 10258  0056D8                     __ptext16:
 10259                           	opt stack 0
 10260  0056D8                     _calcCRC:
 10261                           	opt stack 24
 10262                           
 10263                           ; BSR set to: 0
 10264                           ;main.c: 2450: uint8_t j;
 10265                           ;main.c: 2451: uint8_t crc = 0;
 10266                           
 10267                           ;incstack = 0
 10268                           ;incstack = 0
 10269  0056D8  6B67               	clrf	calcCRC@crc& (0+255),b
 10270                           
 10271                           ;main.c: 2453: for (j = 0; j < len; j++) {
 10272  0056DA  6B66               	clrf	calcCRC@j& (0+255),b
 10273  0056DC  D010               	goto	l14793
 10274  0056DE                     l14789:
 10275                           
 10276                           ; BSR set to: 0
 10277                           ;main.c: 2454: crc8(&crc, p[j]);
 10278  0056DE  0E00               	movlw	high calcCRC@crc
 10279  0056E0  6F61               	movwf	(?_crc8+1)& (0+255),b
 10280  0056E2  0E67               	movlw	low calcCRC@crc
 10281  0056E4  6F60               	movwf	?_crc8& (0+255),b
 10282  0056E6  5166               	movf	calcCRC@j& (0+255),w,b
 10283  0056E8  2563               	addwf	calcCRC@p& (0+255),w,b
 10284  0056EA  6ED9               	movwf	fsr2l,c
 10285  0056EC  0E00               	movlw	0
 10286  0056EE  2164               	addwfc	(calcCRC@p+1)& (0+255),w,b
 10287  0056F0  6EDA               	movwf	fsr2h,c
 10288  0056F2  50DF               	movf	indf2,w,c
 10289  0056F4  6F62               	movwf	(?_crc8+2)& (0+255),b
 10290  0056F6  EC01  F02B         	call	_crc8	;wreg free
 10291                           
 10292                           ; BSR set to: 3
 10293  0056FA  0100               	movlb	0	; () banked
 10294  0056FC  2B66               	incf	calcCRC@j& (0+255),f,b
 10295  0056FE                     l14793:
 10296                           
 10297                           ; BSR set to: 0
 10298  0056FE  5165               	movf	calcCRC@len& (0+255),w,b
 10299  005700  5D66               	subwf	calcCRC@j& (0+255),w,b
 10300  005702  E3ED               	bnc	l14789
 10301                           
 10302                           ; BSR set to: 0
 10303                           ;main.c: 2455: }
 10304                           ;main.c: 2457: return crc;
 10305  005704  5167               	movf	calcCRC@crc& (0+255),w,b
 10306                           
 10307                           ; BSR set to: 0
 10308  005706  0012               	return	
 10309  005708                     __end_of_calcCRC:
 10310                           	opt stack 0
 10311                           tblptru	equ	0xFF8
 10312                           tblptrh	equ	0xFF7
 10313                           tblptrl	equ	0xFF6
 10314                           tablat	equ	0xFF5
 10315                           prodh	equ	0xFF4
 10316                           prodl	equ	0xFF3
 10317                           intcon	equ	0xFF2
 10318                           indf0	equ	0xFEF
 10319                           postinc0	equ	0xFEE
 10320                           fsr0h	equ	0xFEA
 10321                           fsr0l	equ	0xFE9
 10322                           wreg	equ	0xFE8
 10323                           indf1	equ	0xFE7
 10324                           postinc1	equ	0xFE6
 10325                           postdec1	equ	0xFE5
 10326                           fsr1h	equ	0xFE2
 10327                           fsr1l	equ	0xFE1
 10328                           indf2	equ	0xFDF
 10329                           postinc2	equ	0xFDE
 10330                           postdec2	equ	0xFDD
 10331                           plusw2	equ	0xFDB
 10332                           fsr2h	equ	0xFDA
 10333                           fsr2l	equ	0xFD9
 10334                           status	equ	0xFD8
 10335                           
 10336 ;; *************** function _receiveSendEventCANAL *****************
 10337 ;; Defined at:
 10338 ;;		line 1843 in file "main.c"
 10339 ;; Parameters:    Size  Location     Type
 10340 ;;		None
 10341 ;; Auto vars:     Size  Location     Type
 10342 ;;  crc             1   25[BANK0 ] unsigned char 
 10343 ;;  data            8   11[BANK0 ] unsigned char [8]
 10344 ;;  id              4   20[BANK0 ] unsigned long 
 10345 ;;  dlc             1   24[BANK0 ] unsigned char 
 10346 ;;  i               1   19[BANK0 ] unsigned char 
 10347 ;; Return value:  Size  Location     Type
 10348 ;;                  1    wreg      enum E15660
 10349 ;; Registers used:
 10350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10351 ;; Tracked objects:
 10352 ;;		On entry : F/1
 10353 ;;		On exit  : 0/0
 10354 ;;		Unchanged: 0/0
 10355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10356 ;;      Params:         0       0       0       0       0       0       0
 10357 ;;      Locals:         0      15       0       0       0       0       0
 10358 ;;      Temps:          0       0       0       0       0       0       0
 10359 ;;      Totals:         0      15       0       0       0       0       0
 10360 ;;Total ram usage:       15 bytes
 10361 ;; Hardware stack levels used:    1
 10362 ;; Hardware stack levels required when called:    6
 10363 ;; This function calls:
 10364 ;;		_WriteUSART
 10365 ;;		_sendEscapedUartData
 10366 ;;		_crc8
 10367 ;;		_getCANFrame
 10368 ;; This function is called by:
 10369 ;;		_doModeVscp
 10370 ;; This function uses a non-reentrant model
 10371 ;;
 10372                           
 10373                           	psect	text17
 10374  0035AE                     __ptext17:
 10375                           	opt stack 0
 10376  0035AE                     _receiveSendEventCANAL:
 10377                           	opt stack 23
 10378                           
 10379                           ; BSR set to: 1
 10380                           ;main.c: 1844: uint8_t i;
 10381                           ;main.c: 1845: uint32_t id;
 10382                           ;main.c: 1846: uint8_t dlc;
 10383                           ;main.c: 1847: uint8_t data[8];
 10384                           ;main.c: 1849: if ( getCANFrame( &id, &dlc, &data ) ) {
 10385                           
 10386                           ; BSR set to: 0
 10387                           ;incstack = 0
 10388                           ;incstack = 0
 10389  0035AE  0100               	movlb	0	; () banked
 10390  0035B0  0E78               	movlw	low receiveSendEventCANAL@dlc
 10391  0035B2  6F68               	movwf	?_getCANFrame& (0+255),b
 10392  0035B4  0E00               	movlw	high receiveSendEventCANAL@data
 10393  0035B6  6F6A               	movwf	(?_getCANFrame+2)& (0+255),b
 10394  0035B8  0E6B               	movlw	low receiveSendEventCANAL@data
 10395  0035BA  6F69               	movwf	(?_getCANFrame+1)& (0+255),b
 10396  0035BC  0E74               	movlw	receiveSendEventCANAL@id& (0+255)
 10397  0035BE  ECC1  F024         	call	_getCANFrame
 10398  0035C2  0900               	iorlw	0
 10399  0035C4  E101 D08F          	bz	l962
 10400                           
 10401                           ; BSR set to: 0
 10402                           ;main.c: 1851: uint8_t crc = 0;
 10403  0035C8  6B79               	clrf	receiveSendEventCANAL@crc& (0+255),b
 10404                           
 10405                           ; BSR set to: 0
 10406                           ;main.c: 1854: cntRxFrames++;
 10407  0035CA  0101               	movlb	1	; () banked
 10408  0035CC  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10409  0035CE  0E00               	movlw	0
 10410  0035D0  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10411  0035D2  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10412  0035D4  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10413                           
 10414                           ;main.c: 1855: cntRxBytes += dlc;
 10415  0035D6  0100               	movlb	0	; () banked
 10416  0035D8  5178               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10417  0035DA  0101               	movlb	1	; () banked
 10418  0035DC  2708               	addwf	_cntRxBytes& (0+255),f,b
 10419  0035DE  0E00               	movlw	0
 10420  0035E0  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10421  0035E2  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10422  0035E4  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10423  0035E6                     l941:
 10424                           
 10425                           ; BSR set to: 1
 10426  0035E6  A2AC               	btfss	4012,1,c	;volatile
 10427  0035E8  D7FE               	goto	l941
 10428                           
 10429                           ; BSR set to: 1
 10430                           ;main.c: 1859: WriteUSART(0x10);
 10431  0035EA  0E10               	movlw	16
 10432  0035EC  ECF5  F02B         	call	_WriteUSART
 10433  0035F0                     l944:
 10434  0035F0  A2AC               	btfss	4012,1,c	;volatile
 10435  0035F2  D7FE               	goto	l944
 10436                           
 10437                           ;main.c: 1861: WriteUSART(0x02);
 10438  0035F4  0E02               	movlw	2
 10439  0035F6  ECF5  F02B         	call	_WriteUSART
 10440  0035FA                     l947:
 10441  0035FA  A2AC               	btfss	4012,1,c	;volatile
 10442  0035FC  D7FE               	goto	l947
 10443                           
 10444                           ;main.c: 1865: WriteUSART(2);
 10445  0035FE  0E02               	movlw	2
 10446  003600  ECF5  F02B         	call	_WriteUSART
 10447                           
 10448                           ;main.c: 1866: crc8(&crc, 2);
 10449  003604  0100               	movlb	0	; () banked
 10450  003606  0E00               	movlw	high receiveSendEventCANAL@crc
 10451  003608  6F61               	movwf	(?_crc8+1)& (0+255),b
 10452  00360A  0E79               	movlw	low receiveSendEventCANAL@crc
 10453  00360C  6F60               	movwf	?_crc8& (0+255),b
 10454  00360E  0E02               	movlw	2
 10455  003610  6F62               	movwf	(?_crc8+2)& (0+255),b
 10456  003612  EC01  F02B         	call	_crc8	;wreg free
 10457  003616                     l950:
 10458  003616  A2AC               	btfss	4012,1,c	;volatile
 10459  003618  D7FE               	goto	l950
 10460                           
 10461                           ;main.c: 1870: WriteUSART(0);
 10462  00361A  0E00               	movlw	0
 10463  00361C  ECF5  F02B         	call	_WriteUSART
 10464                           
 10465                           ;main.c: 1871: crc8(&crc, 0);
 10466  003620  0100               	movlb	0	; () banked
 10467  003622  0E00               	movlw	high receiveSendEventCANAL@crc
 10468  003624  6F61               	movwf	(?_crc8+1)& (0+255),b
 10469  003626  0E79               	movlw	low receiveSendEventCANAL@crc
 10470  003628  6F60               	movwf	?_crc8& (0+255),b
 10471  00362A  0E00               	movlw	0
 10472  00362C  6B62               	clrf	(?_crc8+2)& (0+255),b
 10473  00362E  EC01  F02B         	call	_crc8	;wreg free
 10474                           
 10475                           ; BSR set to: 3
 10476                           ;main.c: 1874: sendEscapedUartData(sequencyno, &crc);
 10477  003632  0100               	movlb	0	; () banked
 10478  003634  0E00               	movlw	high receiveSendEventCANAL@crc
 10479  003636  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10480  003638  0E79               	movlw	low receiveSendEventCANAL@crc
 10481  00363A  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10482  00363C  5038               	movf	_sequencyno,w,c
 10483  00363E  EC6E  F028         	call	_sendEscapedUartData
 10484                           
 10485                           ;main.c: 1875: sequencyno++;
 10486  003642  2A38               	incf	_sequencyno,f,c
 10487                           
 10488                           ;main.c: 1878: sendEscapedUartData(0, &crc);
 10489  003644  0100               	movlb	0	; () banked
 10490  003646  0E00               	movlw	high receiveSendEventCANAL@crc
 10491  003648  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10492  00364A  0E79               	movlw	low receiveSendEventCANAL@crc
 10493  00364C  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10494  00364E  0E00               	movlw	0
 10495  003650  EC6E  F028         	call	_sendEscapedUartData
 10496                           
 10497                           ;main.c: 1879: sendEscapedUartData(5 + dlc, &crc);
 10498  003654  D849               	call	PL94	;call to abstracted procedure
 10499  003656  0F05               	addlw	5
 10500  003658  EC6E  F028         	call	_sendEscapedUartData
 10501                           
 10502                           ;main.c: 1885: sendEscapedUartData( ((id >> 24) & 0xff), &crc);
 10503  00365C  0100               	movlb	0	; () banked
 10504  00365E  0E00               	movlw	high receiveSendEventCANAL@crc
 10505  003660  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10506  003662  0E79               	movlw	low receiveSendEventCANAL@crc
 10507  003664  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10508  003666  5177               	movf	(receiveSendEventCANAL@id+3)& (0+255),w,b
 10509  003668  EC6E  F028         	call	_sendEscapedUartData
 10510                           
 10511                           ;main.c: 1886: sendEscapedUartData(((id >> 16) & 0xff), &crc);
 10512  00366C  0100               	movlb	0	; () banked
 10513  00366E  0E00               	movlw	high receiveSendEventCANAL@crc
 10514  003670  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10515  003672  0E79               	movlw	low receiveSendEventCANAL@crc
 10516  003674  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10517  003676  5176               	movf	(receiveSendEventCANAL@id+2)& (0+255),w,b
 10518  003678  EC6E  F028         	call	_sendEscapedUartData
 10519                           
 10520                           ;main.c: 1887: sendEscapedUartData(((id >> 8) & 0xff), &crc);
 10521  00367C  0100               	movlb	0	; () banked
 10522  00367E  0E00               	movlw	high receiveSendEventCANAL@crc
 10523  003680  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10524  003682  0E79               	movlw	low receiveSendEventCANAL@crc
 10525  003684  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10526  003686  5175               	movf	(receiveSendEventCANAL@id+1)& (0+255),w,b
 10527  003688  EC6E  F028         	call	_sendEscapedUartData
 10528                           
 10529                           ;main.c: 1888: sendEscapedUartData((id & 0xff), &crc);
 10530  00368C  0100               	movlb	0	; () banked
 10531  00368E  0E00               	movlw	high receiveSendEventCANAL@crc
 10532  003690  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10533  003692  0E79               	movlw	low receiveSendEventCANAL@crc
 10534  003694  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10535  003696  5174               	movf	receiveSendEventCANAL@id& (0+255),w,b
 10536  003698  EC6E  F028         	call	_sendEscapedUartData
 10537                           
 10538                           ;main.c: 1891: sendEscapedUartData(dlc, &crc);
 10539  00369C  D825               	call	PL94	;call to abstracted procedure
 10540  00369E  EC6E  F028         	call	_sendEscapedUartData
 10541                           
 10542                           ;main.c: 1894: for (i = 0; i < dlc; i++) {
 10543  0036A2  0100               	movlb	0	; () banked
 10544  0036A4  6B73               	clrf	receiveSendEventCANAL@i& (0+255),b
 10545  0036A6  D00D               	goto	l14777
 10546  0036A8                     l14773:
 10547                           
 10548                           ; BSR set to: 0
 10549                           ;main.c: 1895: sendEscapedUartData( data[ i ], &crc );
 10550  0036A8  0E00               	movlw	high receiveSendEventCANAL@crc
 10551  0036AA  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10552  0036AC  0E79               	movlw	low receiveSendEventCANAL@crc
 10553  0036AE  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10554  0036B0  5173               	movf	receiveSendEventCANAL@i& (0+255),w,b
 10555  0036B2  0F6B               	addlw	low receiveSendEventCANAL@data
 10556  0036B4  6ED9               	movwf	fsr2l,c
 10557  0036B6  6ADA               	clrf	fsr2h,c
 10558  0036B8  50DF               	movf	indf2,w,c
 10559  0036BA  EC6E  F028         	call	_sendEscapedUartData
 10560  0036BE  0100               	movlb	0	; () banked
 10561  0036C0  2B73               	incf	receiveSendEventCANAL@i& (0+255),f,b
 10562  0036C2                     l14777:
 10563                           
 10564                           ; BSR set to: 0
 10565  0036C2  5178               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10566  0036C4  5D73               	subwf	receiveSendEventCANAL@i& (0+255),w,b
 10567  0036C6  E3F0               	bnc	l14773
 10568                           
 10569                           ; BSR set to: 0
 10570                           ;main.c: 1896: }
 10571                           ;main.c: 1901: sendEscapedUartData(crc, (0));
 10572  0036C8  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10573  0036CA  6B63               	clrf	?_sendEscapedUartData& (0+255),b
 10574  0036CC  5179               	movf	receiveSendEventCANAL@crc& (0+255),w,b
 10575  0036CE  EC6E  F028         	call	_sendEscapedUartData
 10576  0036D2                     l956:
 10577  0036D2  A2AC               	btfss	4012,1,c	;volatile
 10578  0036D4  D7FE               	goto	l956
 10579                           
 10580                           ;main.c: 1905: WriteUSART(0x10);
 10581  0036D6  0E10               	movlw	16
 10582  0036D8  ECF5  F02B         	call	_WriteUSART
 10583  0036DC                     l959:
 10584  0036DC  A2AC               	btfss	4012,1,c	;volatile
 10585  0036DE  D7FE               	goto	l959
 10586                           
 10587                           ;main.c: 1907: WriteUSART(0x03);
 10588  0036E0  0E03               	movlw	3
 10589  0036E2  ECF5  F02B         	call	_WriteUSART
 10590  0036E6                     l962:
 10591  0036E6  0012               	return	
 10592  0036E8                     __end_of_receiveSendEventCANAL:
 10593                           	opt stack 0
 10594  0036E8                     PL94:
 10595                           	opt stack 23
 10596  0036E8  0100               	movlb	0	; () banked
 10597  0036EA  0E00               	movlw	high receiveSendEventCANAL@crc
 10598  0036EC  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10599  0036EE  0E79               	movlw	low receiveSendEventCANAL@crc
 10600  0036F0  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10601  0036F2  5178               	movf	receiveSendEventCANAL@dlc& (0+255),w,b
 10602  0036F4  0012               	return	
 10603  0036F6                     __end_ofPL94:
 10604                           	opt stack 0
 10605                           tblptru	equ	0xFF8
 10606                           tblptrh	equ	0xFF7
 10607                           tblptrl	equ	0xFF6
 10608                           tablat	equ	0xFF5
 10609                           prodh	equ	0xFF4
 10610                           prodl	equ	0xFF3
 10611                           intcon	equ	0xFF2
 10612                           indf0	equ	0xFEF
 10613                           postinc0	equ	0xFEE
 10614                           fsr0h	equ	0xFEA
 10615                           fsr0l	equ	0xFE9
 10616                           wreg	equ	0xFE8
 10617                           indf1	equ	0xFE7
 10618                           postinc1	equ	0xFE6
 10619                           postdec1	equ	0xFE5
 10620                           fsr1h	equ	0xFE2
 10621                           fsr1l	equ	0xFE1
 10622                           indf2	equ	0xFDF
 10623                           postinc2	equ	0xFDE
 10624                           postdec2	equ	0xFDD
 10625                           plusw2	equ	0xFDB
 10626                           fsr2h	equ	0xFDA
 10627                           fsr2l	equ	0xFD9
 10628                           status	equ	0xFD8
 10629                           
 10630 ;; *************** function _receiveSendMultiEventCANAL *****************
 10631 ;; Defined at:
 10632 ;;		line 1920 in file "main.c"
 10633 ;; Parameters:    Size  Location     Type
 10634 ;;		None
 10635 ;; Auto vars:     Size  Location     Type
 10636 ;;  crc             1   26[BANK0 ] unsigned char 
 10637 ;;  data            8   11[BANK0 ] unsigned char [8]
 10638 ;;  id              4   21[BANK0 ] unsigned long 
 10639 ;;  pos             1   27[BANK0 ] unsigned char 
 10640 ;;  dlc             1   25[BANK0 ] unsigned char 
 10641 ;;  i               1   20[BANK0 ] unsigned char 
 10642 ;;  msgcount        1   19[BANK0 ] unsigned char 
 10643 ;; Return value:  Size  Location     Type
 10644 ;;                  1    wreg      enum E15660
 10645 ;; Registers used:
 10646 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 10647 ;; Tracked objects:
 10648 ;;		On entry : F/1
 10649 ;;		On exit  : 0/0
 10650 ;;		Unchanged: 0/0
 10651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 10652 ;;      Params:         0       0       0       0       0       0       0
 10653 ;;      Locals:         0      17       0       0       0       0       0
 10654 ;;      Temps:          0       0       0       0       0       0       0
 10655 ;;      Totals:         0      17       0       0       0       0       0
 10656 ;;Total ram usage:       17 bytes
 10657 ;; Hardware stack levels used:    1
 10658 ;; Hardware stack levels required when called:    6
 10659 ;; This function calls:
 10660 ;;		_WriteUSART
 10661 ;;		_sendEscapedUartData
 10662 ;;		_crc8
 10663 ;;		_getCANFrame
 10664 ;; This function is called by:
 10665 ;;		_doModeVscp
 10666 ;; This function uses a non-reentrant model
 10667 ;;
 10668                           
 10669                           	psect	text18
 10670  002E30                     __ptext18:
 10671                           	opt stack 0
 10672  002E30                     _receiveSendMultiEventCANAL:
 10673                           	opt stack 23
 10674                           
 10675                           ; BSR set to: 1
 10676                           ;main.c: 1921: uint8_t i;
 10677                           ;main.c: 1922: uint8_t pos=0;
 10678                           
 10679                           ;incstack = 0
 10680                           ;incstack = 0
 10681  002E30  0100               	movlb	0	; () banked
 10682  002E32  6B7B               	clrf	receiveSendMultiEventCANAL@pos& (0+255),b
 10683                           
 10684                           ;main.c: 1923: uint8_t msgcount=0;
 10685  002E34  6B73               	clrf	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;main.c: 1924: uint32_t id;
 10689                           ;main.c: 1925: uint8_t dlc;
 10690                           ;main.c: 1926: uint8_t data[8];
 10691                           ;main.c: 1928: if ( getCANFrame( &id, &dlc, &data ) ) {
 10692  002E36  0E79               	movlw	low receiveSendMultiEventCANAL@dlc
 10693  002E38  D8BA               	call	PL96	;call to abstracted procedure
 10694  002E3A  ECC1  F024         	call	_getCANFrame
 10695  002E3E  0900               	iorlw	0
 10696  002E40  E101 D0AC          	bz	l994
 10697                           
 10698                           ; BSR set to: 0
 10699                           ;main.c: 1930: uint8_t crc = 0;
 10700  002E44  6B7A               	clrf	receiveSendMultiEventCANAL@crc& (0+255),b
 10701                           
 10702                           ; BSR set to: 0
 10703                           ;main.c: 1933: cntRxFrames++;
 10704  002E46  0101               	movlb	1	; () banked
 10705  002E48  2B0C               	incf	_cntRxFrames& (0+255),f,b
 10706  002E4A  0E00               	movlw	0
 10707  002E4C  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 10708  002E4E  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 10709  002E50  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 10710                           
 10711                           ;main.c: 1934: cntRxBytes += dlc;
 10712  002E52  0100               	movlb	0	; () banked
 10713  002E54  5179               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10714  002E56  0101               	movlb	1	; () banked
 10715  002E58  2708               	addwf	_cntRxBytes& (0+255),f,b
 10716  002E5A  0E00               	movlw	0
 10717  002E5C  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 10718  002E5E  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 10719  002E60  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 10720  002E62                     l966:
 10721                           
 10722                           ; BSR set to: 1
 10723  002E62  A2AC               	btfss	4012,1,c	;volatile
 10724  002E64  D7FE               	goto	l966
 10725                           
 10726                           ; BSR set to: 1
 10727                           ;main.c: 1938: WriteUSART(0x10);
 10728  002E66  0E10               	movlw	16
 10729  002E68  ECF5  F02B         	call	_WriteUSART
 10730  002E6C                     l969:
 10731  002E6C  A2AC               	btfss	4012,1,c	;volatile
 10732  002E6E  D7FE               	goto	l969
 10733                           
 10734                           ;main.c: 1940: WriteUSART(0x02);
 10735  002E70  0E02               	movlw	2
 10736  002E72  ECF5  F02B         	call	_WriteUSART
 10737  002E76                     l972:
 10738  002E76  A2AC               	btfss	4012,1,c	;volatile
 10739  002E78  D7FE               	goto	l972
 10740                           
 10741                           ;main.c: 1944: WriteUSART(6);
 10742  002E7A  0E06               	movlw	6
 10743  002E7C  ECF5  F02B         	call	_WriteUSART
 10744                           
 10745                           ;main.c: 1945: crc8(&crc, 6);
 10746  002E80  0100               	movlb	0	; () banked
 10747  002E82  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10748  002E84  6F61               	movwf	(?_crc8+1)& (0+255),b
 10749  002E86  0E7A               	movlw	low receiveSendMultiEventCANAL@crc
 10750  002E88  6F60               	movwf	?_crc8& (0+255),b
 10751  002E8A  0E06               	movlw	6
 10752  002E8C  6F62               	movwf	(?_crc8+2)& (0+255),b
 10753  002E8E  EC01  F02B         	call	_crc8	;wreg free
 10754  002E92                     l975:
 10755  002E92  A2AC               	btfss	4012,1,c	;volatile
 10756  002E94  D7FE               	goto	l975
 10757                           
 10758                           ;main.c: 1949: WriteUSART(0);
 10759  002E96  0E00               	movlw	0
 10760  002E98  ECF5  F02B         	call	_WriteUSART
 10761                           
 10762                           ;main.c: 1950: crc8(&crc, 0);
 10763  002E9C  0100               	movlb	0	; () banked
 10764  002E9E  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10765  002EA0  6F61               	movwf	(?_crc8+1)& (0+255),b
 10766  002EA2  0E7A               	movlw	low receiveSendMultiEventCANAL@crc
 10767  002EA4  6F60               	movwf	?_crc8& (0+255),b
 10768  002EA6  0E00               	movlw	0
 10769  002EA8  6B62               	clrf	(?_crc8+2)& (0+255),b
 10770  002EAA  EC01  F02B         	call	_crc8	;wreg free
 10771                           
 10772                           ; BSR set to: 3
 10773                           ;main.c: 1953: sendEscapedUartData(sequencyno, &crc);
 10774  002EAE  0100               	movlb	0	; () banked
 10775  002EB0  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10776  002EB2  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10777  002EB4  0E7A               	movlw	low receiveSendMultiEventCANAL@crc
 10778  002EB6  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10779  002EB8  5038               	movf	_sequencyno,w,c
 10780  002EBA  EC6E  F028         	call	_sendEscapedUartData
 10781                           
 10782                           ;main.c: 1954: sequencyno++;
 10783  002EBE  2A38               	incf	_sequencyno,f,c
 10784  002EC0                     l14679:
 10785                           
 10786                           ;main.c: 1964: wrkbuf[ pos ] = (id >> 24) & 0xff;
 10787  002EC0  0E74               	movlw	low _wrkbuf
 10788  002EC2  0100               	movlb	0	; () banked
 10789  002EC4  257B               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10790  002EC6  6ED9               	movwf	fsr2l,c
 10791  002EC8  6ADA               	clrf	fsr2h,c
 10792  002ECA  0E01               	movlw	high _wrkbuf
 10793  002ECC  22DA               	addwfc	fsr2h,f,c
 10794  002ECE  C078  FFDF         	movff	receiveSendMultiEventCANAL@id+3,indf2
 10795                           
 10796                           ; BSR set to: 0
 10797                           ;main.c: 1965: pos++;
 10798                           
 10799                           ; BSR set to: 0
 10800                           ;main.c: 1966: wrkbuf[ pos ] = (id >> 16) & 0xff;
 10801  002ED2  D865               	call	PL20	;call to abstracted procedure
 10802  002ED4  C077  FFDF         	movff	receiveSendMultiEventCANAL@id+2,indf2
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;main.c: 1967: pos++;
 10806                           
 10807                           ; BSR set to: 0
 10808                           ;main.c: 1968: wrkbuf[ pos ] = (id >> 8) & 0xff;
 10809  002ED8  D862               	call	PL20	;call to abstracted procedure
 10810  002EDA  C076  FFDF         	movff	receiveSendMultiEventCANAL@id+1,indf2
 10811                           
 10812                           ; BSR set to: 0
 10813                           ;main.c: 1969: pos++;
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;main.c: 1970: wrkbuf[ pos ] = id & 0xff;
 10817  002EDE  D85F               	call	PL20	;call to abstracted procedure
 10818  002EE0  C075  FFDF         	movff	receiveSendMultiEventCANAL@id,indf2
 10819                           
 10820                           ; BSR set to: 0
 10821                           ;main.c: 1971: pos++;
 10822                           
 10823                           ; BSR set to: 0
 10824                           ;main.c: 1974: wrkbuf[ pos ] = dlc;
 10825  002EE4  D85C               	call	PL20	;call to abstracted procedure
 10826  002EE6  C079  FFDF         	movff	receiveSendMultiEventCANAL@dlc,indf2
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;main.c: 1975: pos++;
 10830  002EEA  2B7B               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10831                           
 10832                           ; BSR set to: 0
 10833                           ;main.c: 1978: for (i = 0; i < dlc; i++) {
 10834  002EEC  6B74               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10835  002EEE  D00F               	goto	l14707
 10836  002EF0                     l14701:
 10837                           
 10838                           ; BSR set to: 0
 10839                           ;main.c: 1979: wrkbuf[ pos ] = data[ i ];
 10840  002EF0  5174               	movf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10841  002EF2  0F6B               	addlw	low receiveSendMultiEventCANAL@data
 10842  002EF4  6ED9               	movwf	fsr2l,c
 10843  002EF6  6ADA               	clrf	fsr2h,c
 10844  002EF8  0E74               	movlw	low _wrkbuf
 10845  002EFA  0100               	movlb	0	; () banked
 10846  002EFC  257B               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10847  002EFE  6EE1               	movwf	fsr1l,c
 10848  002F00  6AE2               	clrf	fsr1h,c
 10849  002F02  0E01               	movlw	high _wrkbuf
 10850  002F04  22E2               	addwfc	fsr1h,f,c
 10851  002F06  CFDF FFE7          	movff	indf2,indf1
 10852                           
 10853                           ; BSR set to: 1
 10854                           ;main.c: 1980: pos++;
 10855  002F0A  2B7B               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10856                           
 10857                           ; BSR set to: 0
 10858  002F0C  2B74               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10859  002F0E                     l14707:
 10860                           
 10861                           ; BSR set to: 0
 10862  002F0E  5179               	movf	receiveSendMultiEventCANAL@dlc& (0+255),w,b
 10863  002F10  5D74               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10864  002F12  E3EE               	bnc	l14701
 10865                           
 10866                           ; BSR set to: 0
 10867                           ;main.c: 1981: }
 10868                           ;main.c: 1983: msgcount++;
 10869  002F14  2B73               	incf	receiveSendMultiEventCANAL@msgcount& (0+255),f,b
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;main.c: 1985: } while ( ( msgcount < caps.maxCanalFrames ) &&
 10873                           ;main.c: 1986: ( msgcount < 5 ) &&
 10874                           ;main.c: 1987: getCANFrame( &id, &dlc, &data ) );
 10875  002F16  0101               	movlb	1	; () banked
 10876  002F18  51E5               	movf	(_caps+1)& (0+255),w,b
 10877  002F1A  0100               	movlb	0	; () banked
 10878  002F1C  6173               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10879  002F1E  D009               	goto	l14717
 10880                           
 10881                           ; BSR set to: 0
 10882  002F20  0E05               	movlw	5
 10883  002F22  6173               	cpfslt	receiveSendMultiEventCANAL@msgcount& (0+255),b
 10884  002F24  D006               	goto	l14717
 10885                           
 10886                           ; BSR set to: 0
 10887  002F26  0E79               	movlw	low receiveSendMultiEventCANAL@dlc
 10888  002F28  D842               	call	PL96	;call to abstracted procedure
 10889  002F2A  ECC1  F024         	call	_getCANFrame
 10890  002F2E  0900               	iorlw	0
 10891  002F30  E1C7               	bnz	l14679
 10892  002F32                     l14717:
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;main.c: 1992: sendEscapedUartData(0, &crc);
 10896  002F32  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10897  002F34  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10898  002F36  0E7A               	movlw	low receiveSendMultiEventCANAL@crc
 10899  002F38  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10900  002F3A  0E00               	movlw	0
 10901  002F3C  EC6E  F028         	call	_sendEscapedUartData
 10902                           
 10903                           ;main.c: 1993: sendEscapedUartData(pos, &crc);
 10904  002F40  0100               	movlb	0	; () banked
 10905  002F42  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10906  002F44  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10907  002F46  0E7A               	movlw	low receiveSendMultiEventCANAL@crc
 10908  002F48  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10909  002F4A  517B               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10910  002F4C  EC6E  F028         	call	_sendEscapedUartData
 10911                           
 10912                           ;main.c: 1996: for (i = 0; i < pos; i++) {
 10913  002F50  0100               	movlb	0	; () banked
 10914  002F52  6B74               	clrf	receiveSendMultiEventCANAL@i& (0+255),b
 10915  002F54  D011               	goto	l14725
 10916  002F56                     l14721:
 10917                           
 10918                           ; BSR set to: 0
 10919                           ;main.c: 1997: sendEscapedUartData( wrkbuf[ i ], &crc);
 10920  002F56  0E00               	movlw	high receiveSendMultiEventCANAL@crc
 10921  002F58  6F64               	movwf	(?_sendEscapedUartData+1)& (0+255),b
 10922  002F5A  0E7A               	movlw	low receiveSendMultiEventCANAL@crc
 10923  002F5C  6F63               	movwf	?_sendEscapedUartData& (0+255),b
 10924  002F5E  0E74               	movlw	low _wrkbuf
 10925  002F60  0100               	movlb	0	; () banked
 10926  002F62  2574               	addwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10927  002F64  6ED9               	movwf	fsr2l,c
 10928  002F66  6ADA               	clrf	fsr2h,c
 10929  002F68  0101               	movlb	1	; () banked
 10930  002F6A  0E01               	movlw	high _wrkbuf
 10931  002F6C  22DA               	addwfc	fsr2h,f,c
 10932  002F6E  50DF               	movf	indf2,w,c
 10933  002F70  EC6E  F028         	call	_sendEscapedUartData
 10934  002F74  0100               	movlb	0	; () banked
 10935  002F76  2B74               	incf	receiveSendMultiEventCANAL@i& (0+255),f,b
 10936  002F78                     l14725:
 10937                           
 10938                           ; BSR set to: 0
 10939  002F78  517B               	movf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10940  002F7A  5D74               	subwf	receiveSendMultiEventCANAL@i& (0+255),w,b
 10941  002F7C  E3EC               	bnc	l14721
 10942                           
 10943                           ; BSR set to: 0
 10944                           ;main.c: 1998: }
 10945                           ;main.c: 2001: sendEscapedUartData(crc, (0));
 10946  002F7E  6B64               	clrf	(?_sendEscapedUartData+1)& (0+255),b
 10947  002F80  6B63               	clrf	?_sendEscapedUartData& (0+255),b
 10948  002F82  517A               	movf	receiveSendMultiEventCANAL@crc& (0+255),w,b
 10949  002F84  EC6E  F028         	call	_sendEscapedUartData
 10950  002F88                     l988:
 10951  002F88  A2AC               	btfss	4012,1,c	;volatile
 10952  002F8A  D7FE               	goto	l988
 10953                           
 10954                           ;main.c: 2005: WriteUSART(0x10);
 10955  002F8C  0E10               	movlw	16
 10956  002F8E  ECF5  F02B         	call	_WriteUSART
 10957  002F92                     l991:
 10958  002F92  A2AC               	btfss	4012,1,c	;volatile
 10959  002F94  D7FE               	goto	l991
 10960                           
 10961                           ;main.c: 2007: WriteUSART(0x03);
 10962  002F96  0E03               	movlw	3
 10963  002F98  ECF5  F02B         	call	_WriteUSART
 10964  002F9C                     l994:
 10965  002F9C  0012               	return	
 10966  002F9E                     __end_of_receiveSendMultiEventCANAL:
 10967                           	opt stack 0
 10968  002F9E                     PL20:
 10969                           	opt stack 23
 10970  002F9E  2B7B               	incf	receiveSendMultiEventCANAL@pos& (0+255),f,b
 10971  002FA0  0E74               	movlw	low _wrkbuf
 10972  002FA2  257B               	addwf	receiveSendMultiEventCANAL@pos& (0+255),w,b
 10973  002FA4  6ED9               	movwf	fsr2l,c
 10974  002FA6  6ADA               	clrf	fsr2h,c
 10975  002FA8  0E01               	movlw	high _wrkbuf
 10976  002FAA  22DA               	addwfc	fsr2h,f,c
 10977  002FAC  0012               	return	
 10978  002FAE                     __end_ofPL20:
 10979                           	opt stack 0
 10980  002FAE                     PL96:
 10981                           	opt stack 23
 10982  002FAE  6F68               	movwf	?_getCANFrame& (0+255),b
 10983  002FB0  0E00               	movlw	high receiveSendMultiEventCANAL@data
 10984  002FB2  6F6A               	movwf	(?_getCANFrame+2)& (0+255),b
 10985  002FB4  0E6B               	movlw	low receiveSendMultiEventCANAL@data
 10986  002FB6  6F69               	movwf	(?_getCANFrame+1)& (0+255),b
 10987  002FB8  0E75               	movlw	receiveSendMultiEventCANAL@id& (0+255)
 10988  002FBA  0012               	return	
 10989  002FBC                     __end_ofPL96:
 10990                           	opt stack 0
 10991                           tblptru	equ	0xFF8
 10992                           tblptrh	equ	0xFF7
 10993                           tblptrl	equ	0xFF6
 10994                           tablat	equ	0xFF5
 10995                           prodh	equ	0xFF4
 10996                           prodl	equ	0xFF3
 10997                           intcon	equ	0xFF2
 10998                           indf0	equ	0xFEF
 10999                           postinc0	equ	0xFEE
 11000                           fsr0h	equ	0xFEA
 11001                           fsr0l	equ	0xFE9
 11002                           wreg	equ	0xFE8
 11003                           indf1	equ	0xFE7
 11004                           postinc1	equ	0xFE6
 11005                           postdec1	equ	0xFE5
 11006                           fsr1h	equ	0xFE2
 11007                           fsr1l	equ	0xFE1
 11008                           indf2	equ	0xFDF
 11009                           postinc2	equ	0xFDE
 11010                           postdec2	equ	0xFDD
 11011                           plusw2	equ	0xFDB
 11012                           fsr2h	equ	0xFDA
 11013                           fsr2l	equ	0xFD9
 11014                           status	equ	0xFD8
 11015                           
 11016 ;; *************** function _sendEscapedUartData *****************
 11017 ;; Defined at:
 11018 ;;		line 1573 in file "main.c"
 11019 ;; Parameters:    Size  Location     Type
 11020 ;;  c               1    wreg     unsigned char 
 11021 ;;  pcrc            2    3[BANK0 ] PTR unsigned char 
 11022 ;;		 -> sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), receiveSendEven
      +tCANAL@crc(1), 
 11023 ;;		 -> sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@crc(1), sendVSCPDriverErrorFrame
      +@crc(1), 
 11024 ;;		 -> NULL(0), 
 11025 ;; Auto vars:     Size  Location     Type
 11026 ;;  c               1    5[BANK0 ] unsigned char 
 11027 ;; Return value:  Size  Location     Type
 11028 ;;		None               void
 11029 ;; Registers used:
 11030 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11031 ;; Tracked objects:
 11032 ;;		On entry : E/1
 11033 ;;		On exit  : C/0
 11034 ;;		Unchanged: 0/0
 11035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11036 ;;      Params:         0       2       0       0       0       0       0
 11037 ;;      Locals:         0       1       0       0       0       0       0
 11038 ;;      Temps:          0       0       0       0       0       0       0
 11039 ;;      Totals:         0       3       0       0       0       0       0
 11040 ;;Total ram usage:        3 bytes
 11041 ;; Hardware stack levels used:    1
 11042 ;; Hardware stack levels required when called:    5
 11043 ;; This function calls:
 11044 ;;		_WriteUSART
 11045 ;;		_crc8
 11046 ;; This function is called by:
 11047 ;;		_sendVSCPDriverErrorFrame
 11048 ;;		_sendVSCPDriverAck
 11049 ;;		_sendVSCPDriverNack
 11050 ;;		_sendVSCPDriverCommandReply
 11051 ;;		_receiveSendEventCANAL
 11052 ;;		_receiveSendMultiEventCANAL
 11053 ;;		_sendVSCPModeCapabilities
 11054 ;; This function uses a non-reentrant model
 11055 ;;
 11056                           
 11057                           	psect	text19
 11058  0050DC                     __ptext19:
 11059                           	opt stack 0
 11060  0050DC                     _sendEscapedUartData:
 11061                           	opt stack 23
 11062                           
 11063                           ;incstack = 0
 11064                           ;incstack = 0
 11065                           ;sendEscapedUartData@c stored from wreg
 11066  0050DC  CFE8 F065          	movff	wreg,sendEscapedUartData@c
 11067                           
 11068                           ;main.c: 1574: if (0x10 == c) {
 11069  0050E0  0100               	movlb	0	; () banked
 11070  0050E2  5165               	movf	sendEscapedUartData@c& (0+255),w,b
 11071  0050E4  0A10               	xorlw	16
 11072  0050E6  E117               	bnz	l785
 11073  0050E8                     l777:
 11074  0050E8  A2AC               	btfss	4012,1,c	;volatile
 11075  0050EA  D7FE               	goto	l777
 11076                           
 11077                           ;main.c: 1577: WriteUSART(0x10);
 11078  0050EC  0E10               	movlw	16
 11079  0050EE  ECF5  F02B         	call	_WriteUSART
 11080  0050F2                     l780:
 11081  0050F2  A2AC               	btfss	4012,1,c	;volatile
 11082  0050F4  D7FE               	goto	l780
 11083                           
 11084                           ;main.c: 1581: WriteUSART(0x10);
 11085  0050F6  0E10               	movlw	16
 11086  0050F8  ECF5  F02B         	call	_WriteUSART
 11087                           
 11088                           ;main.c: 1582: if ((0) != pcrc) crc8(pcrc, 0x10);
 11089  0050FC  0100               	movlb	0	; () banked
 11090  0050FE  5164               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11091  005100  1163               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11092  005102  E01B               	bz	l789
 11093                           
 11094                           ; BSR set to: 0
 11095  005104  C063  F060         	movff	sendEscapedUartData@pcrc,?_crc8
 11096  005108  C064  F061         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11097  00510C  0E10               	movlw	16
 11098  00510E  6F62               	movwf	(?_crc8+2)& (0+255),b
 11099  005110  EC01  F02B         	call	_crc8	;wreg free
 11100  005114  D012               	goto	l789
 11101  005116                     l785:
 11102  005116  A2AC               	btfss	4012,1,c	;volatile
 11103  005118  D7FE               	goto	l785
 11104                           
 11105                           ;main.c: 1588: WriteUSART(c);
 11106  00511A  0100               	movlb	0	; () banked
 11107  00511C  5165               	movf	sendEscapedUartData@c& (0+255),w,b
 11108  00511E  ECF5  F02B         	call	_WriteUSART
 11109                           
 11110                           ;main.c: 1589: if ((0) != pcrc) crc8(pcrc, c);
 11111  005122  0100               	movlb	0	; () banked
 11112  005124  5164               	movf	(sendEscapedUartData@pcrc+1)& (0+255),w,b
 11113  005126  1163               	iorwf	sendEscapedUartData@pcrc& (0+255),w,b
 11114  005128  E008               	bz	l789
 11115                           
 11116                           ; BSR set to: 0
 11117  00512A  C063  F060         	movff	sendEscapedUartData@pcrc,?_crc8
 11118  00512E  C064  F061         	movff	sendEscapedUartData@pcrc+1,?_crc8+1
 11119  005132  C065  F062         	movff	sendEscapedUartData@c,?_crc8+2
 11120  005136  EC01  F02B         	call	_crc8	;wreg free
 11121  00513A                     l789:
 11122  00513A  0012               	return	
 11123  00513C                     __end_of_sendEscapedUartData:
 11124                           	opt stack 0
 11125                           tblptru	equ	0xFF8
 11126                           tblptrh	equ	0xFF7
 11127                           tblptrl	equ	0xFF6
 11128                           tablat	equ	0xFF5
 11129                           prodh	equ	0xFF4
 11130                           prodl	equ	0xFF3
 11131                           intcon	equ	0xFF2
 11132                           indf0	equ	0xFEF
 11133                           postinc0	equ	0xFEE
 11134                           fsr0h	equ	0xFEA
 11135                           fsr0l	equ	0xFE9
 11136                           wreg	equ	0xFE8
 11137                           indf1	equ	0xFE7
 11138                           postinc1	equ	0xFE6
 11139                           postdec1	equ	0xFE5
 11140                           fsr1h	equ	0xFE2
 11141                           fsr1l	equ	0xFE1
 11142                           indf2	equ	0xFDF
 11143                           postinc2	equ	0xFDE
 11144                           postdec2	equ	0xFDD
 11145                           plusw2	equ	0xFDB
 11146                           fsr2h	equ	0xFDA
 11147                           fsr2l	equ	0xFD9
 11148                           status	equ	0xFD8
 11149                           
 11150 ;; *************** function _crc8 *****************
 11151 ;; Defined at:
 11152 ;;		line 47 in file "crc8.c"
 11153 ;; Parameters:    Size  Location     Type
 11154 ;;  crc             2    0[BANK0 ] PTR unsigned char 
 11155 ;;		 -> calcCRC@crc(1), sendVSCPModeCapabilities@crc(1), receiveSendEventVSCP@crc(1), receiveSendMultiEventCANAL@crc(1), 
 11156 ;;		 -> receiveSendEventCANAL@crc(1), sendVSCPDriverCommandReply@crc(1), sendVSCPDriverNack@crc(1), sendVSCPDriverAck@cr
      +c(1), 
 11157 ;;		 -> sendVSCPDriverErrorFrame@crc(1), NULL(0), 
 11158 ;;  m               1    2[BANK0 ] unsigned char 
 11159 ;; Auto vars:     Size  Location     Type
 11160 ;;		None
 11161 ;; Return value:  Size  Location     Type
 11162 ;;		None               void
 11163 ;; Registers used:
 11164 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 11165 ;; Tracked objects:
 11166 ;;		On entry : F/0
 11167 ;;		On exit  : F/3
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11170 ;;      Params:         0       3       0       0       0       0       0
 11171 ;;      Locals:         0       0       0       0       0       0       0
 11172 ;;      Temps:          2       0       0       0       0       0       0
 11173 ;;      Totals:         2       3       0       0       0       0       0
 11174 ;;Total ram usage:        5 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    4
 11177 ;; This function calls:
 11178 ;;		_init_crc8
 11179 ;; This function is called by:
 11180 ;;		_sendEscapedUartData
 11181 ;;		_sendVSCPDriverErrorFrame
 11182 ;;		_sendVSCPDriverAck
 11183 ;;		_sendVSCPDriverNack
 11184 ;;		_sendVSCPDriverCommandReply
 11185 ;;		_receiveSendEventCANAL
 11186 ;;		_receiveSendMultiEventCANAL
 11187 ;;		_sendVSCPModeCapabilities
 11188 ;;		_calcCRC
 11189 ;; This function uses a non-reentrant model
 11190 ;;
 11191                           
 11192                           	psect	text20
 11193  005602                     __ptext20:
 11194                           	opt stack 0
 11195  005602                     _crc8:
 11196                           	opt stack 24
 11197                           
 11198                           ; BSR set to: 0
 11199                           ;crc8.c: 48: if ( !made_table ) {
 11200                           
 11201                           ;incstack = 0
 11202                           ;incstack = 0
 11203  005602  502C               	movf	_made_table+1,w,c
 11204  005604  102B               	iorwf	_made_table,w,c
 11205  005606  B4D8               	btfsc	status,2,c
 11206                           
 11207                           ; BSR set to: 0
 11208                           ;crc8.c: 49: init_crc8();
 11209  005608  ECA3  F027         	call	_init_crc8	;wreg free
 11210                           
 11211                           ;crc8.c: 50: }
 11212                           ;crc8.c: 52: *crc = crc8_table[(*crc) ^ m];
 11213  00560C  C060  FFD9         	movff	crc8@crc,fsr2l
 11214  005610  C061  FFDA         	movff	crc8@crc+1,fsr2h
 11215  005614  50DF               	movf	indf2,w,c
 11216  005616  0100               	movlb	0	; () banked
 11217  005618  1962               	xorwf	crc8@m& (0+255),w,b
 11218  00561A  6E25               	movwf	??_crc8& (0+255),c
 11219  00561C  6A26               	clrf	(??_crc8+1)& (0+255),c
 11220  00561E  0103               	movlb	3	; () banked
 11221  005620  0E00               	movlw	low _crc8_table
 11222  005622  2425               	addwf	??_crc8,w,c
 11223  005624  6ED9               	movwf	fsr2l,c
 11224  005626  0E03               	movlw	high _crc8_table
 11225  005628  2026               	addwfc	??_crc8+1,w,c
 11226  00562A  6EDA               	movwf	fsr2h,c
 11227  00562C  C060  FFE1         	movff	crc8@crc,fsr1l
 11228  005630  C061  FFE2         	movff	crc8@crc+1,fsr1h
 11229  005634  CFDF FFE7          	movff	indf2,indf1
 11230                           
 11231                           ; BSR set to: 3
 11232  005638  0012               	return	
 11233  00563A                     __end_of_crc8:
 11234                           	opt stack 0
 11235                           tblptru	equ	0xFF8
 11236                           tblptrh	equ	0xFF7
 11237                           tblptrl	equ	0xFF6
 11238                           tablat	equ	0xFF5
 11239                           prodh	equ	0xFF4
 11240                           prodl	equ	0xFF3
 11241                           intcon	equ	0xFF2
 11242                           indf0	equ	0xFEF
 11243                           postinc0	equ	0xFEE
 11244                           fsr0h	equ	0xFEA
 11245                           fsr0l	equ	0xFE9
 11246                           wreg	equ	0xFE8
 11247                           indf1	equ	0xFE7
 11248                           postinc1	equ	0xFE6
 11249                           postdec1	equ	0xFE5
 11250                           fsr1h	equ	0xFE2
 11251                           fsr1l	equ	0xFE1
 11252                           indf2	equ	0xFDF
 11253                           postinc2	equ	0xFDE
 11254                           postdec2	equ	0xFDD
 11255                           plusw2	equ	0xFDB
 11256                           fsr2h	equ	0xFDA
 11257                           fsr2l	equ	0xFD9
 11258                           status	equ	0xFD8
 11259                           
 11260 ;; *************** function _init_crc8 *****************
 11261 ;; Defined at:
 11262 ;;		line 25 in file "crc8.c"
 11263 ;; Parameters:    Size  Location     Type
 11264 ;;		None
 11265 ;; Auto vars:     Size  Location     Type
 11266 ;;  i               2   34[COMRAM] int 
 11267 ;;  j               2   31[COMRAM] int 
 11268 ;;  crc             1   33[COMRAM] unsigned char 
 11269 ;; Return value:  Size  Location     Type
 11270 ;;		None               void
 11271 ;; Registers used:
 11272 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11273 ;; Tracked objects:
 11274 ;;		On entry : C/1
 11275 ;;		On exit  : C/0
 11276 ;;		Unchanged: 0/0
 11277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11278 ;;      Params:         0       0       0       0       0       0       0
 11279 ;;      Locals:         7       0       0       0       0       0       0
 11280 ;;      Temps:          0       0       0       0       0       0       0
 11281 ;;      Totals:         7       0       0       0       0       0       0
 11282 ;;Total ram usage:        7 bytes
 11283 ;; Hardware stack levels used:    1
 11284 ;; Hardware stack levels required when called:    3
 11285 ;; This function calls:
 11286 ;;		Nothing
 11287 ;; This function is called by:
 11288 ;;		_main
 11289 ;;		_crc8
 11290 ;; This function uses a non-reentrant model
 11291 ;;
 11292                           
 11293                           	psect	text21
 11294  004F46                     __ptext21:
 11295                           	opt stack 0
 11296  004F46                     _init_crc8:
 11297                           	opt stack 24
 11298                           
 11299                           ;crc8.c: 26: int i,j;
 11300                           ;crc8.c: 27: unsigned char crc;
 11301                           ;crc8.c: 29: if (!made_table) {
 11302                           
 11303                           ; BSR set to: 3
 11304                           ;incstack = 0
 11305                           ;incstack = 0
 11306  004F46  502C               	movf	_made_table+1,w,c
 11307  004F48  102B               	iorwf	_made_table,w,c
 11308  004F4A  E131               	bnz	l1574
 11309                           
 11310                           ;crc8.c: 30: for ( i=0; i<256; i++ ) {
 11311  004F4C  6A23               	clrf	init_crc8@i,c
 11312  004F4E  6A24               	clrf	init_crc8@i+1,c
 11313  004F50                     l1566:
 11314                           
 11315                           ;crc8.c: 31: crc = i;
 11316  004F50  C023  F022         	movff	init_crc8@i,init_crc8@crc
 11317                           
 11318                           ;crc8.c: 32: for (j=0; j<8; j++) {
 11319  004F54  6A20               	clrf	init_crc8@j,c
 11320  004F56  6A21               	clrf	init_crc8@j+1,c
 11321  004F58                     l1568:
 11322                           
 11323                           ;crc8.c: 33: crc = (crc << 1) ^ ((crc & 0x80) ? 0x07 : 0);
 11324  004F58  BE22               	btfsc	init_crc8@crc,7,c
 11325  004F5A  D003               	goto	l10085
 11326  004F5C  6A1E               	clrf	_init_crc8$1962,c
 11327  004F5E  6A1F               	clrf	_init_crc8$1962+1,c
 11328  004F60  D003               	goto	l10087
 11329  004F62                     l10085:
 11330  004F62  6A1F               	clrf	_init_crc8$1962+1,c
 11331  004F64  0E07               	movlw	7
 11332  004F66  6E1E               	movwf	_init_crc8$1962,c
 11333  004F68                     l10087:
 11334  004F68  5022               	movf	init_crc8@crc,w,c
 11335  004F6A  2422               	addwf	init_crc8@crc,w,c
 11336  004F6C  181E               	xorwf	_init_crc8$1962,w,c
 11337  004F6E  6E22               	movwf	init_crc8@crc,c
 11338  004F70  4A20               	infsnz	init_crc8@j,f,c
 11339  004F72  2A21               	incf	init_crc8@j+1,f,c
 11340  004F74  5021               	movf	init_crc8@j+1,w,c
 11341  004F76  0A80               	xorlw	128
 11342  004F78  0F80               	addlw	-128
 11343  004F7A  0E08               	movlw	8
 11344  004F7C  B4D8               	btfsc	status,2,c
 11345  004F7E  5C20               	subwf	init_crc8@j,w,c
 11346  004F80  E3EB               	bnc	l1568
 11347                           
 11348                           ;crc8.c: 34: }
 11349                           ;crc8.c: 35: crc8_table[i] = crc & 0xFF;
 11350  004F82  0103               	movlb	3	; () banked
 11351  004F84  0E00               	movlw	low _crc8_table
 11352  004F86  2423               	addwf	init_crc8@i,w,c
 11353  004F88  6ED9               	movwf	fsr2l,c
 11354  004F8A  0E03               	movlw	high _crc8_table
 11355  004F8C  2024               	addwfc	init_crc8@i+1,w,c
 11356  004F8E  6EDA               	movwf	fsr2h,c
 11357  004F90  C022  FFDF         	movff	init_crc8@crc,indf2
 11358                           
 11359                           ; BSR set to: 3
 11360  004F94  4A23               	infsnz	init_crc8@i,f,c
 11361  004F96  2A24               	incf	init_crc8@i+1,f,c
 11362                           
 11363                           ; BSR set to: 3
 11364  004F98  5024               	movf	init_crc8@i+1,w,c
 11365  004F9A  0A80               	xorlw	128
 11366  004F9C  0F7F               	addlw	-129
 11367  004F9E  0E00               	movlw	0
 11368  004FA0  B4D8               	btfsc	status,2,c
 11369  004FA2  5C23               	subwf	init_crc8@i,w,c
 11370  004FA4  E3D5               	bnc	l1566
 11371                           
 11372                           ; BSR set to: 3
 11373                           ;crc8.c: 37: }
 11374                           ;crc8.c: 38: made_table=1;
 11375  004FA6  0E00               	movlw	0
 11376  004FA8  6E2C               	movwf	_made_table+1,c
 11377  004FAA  0E01               	movlw	1
 11378  004FAC  6E2B               	movwf	_made_table,c
 11379  004FAE                     l1574:
 11380  004FAE  0012               	return	
 11381  004FB0                     __end_of_init_crc8:
 11382                           	opt stack 0
 11383                           tblptru	equ	0xFF8
 11384                           tblptrh	equ	0xFF7
 11385                           tblptrl	equ	0xFF6
 11386                           tablat	equ	0xFF5
 11387                           prodh	equ	0xFF4
 11388                           prodl	equ	0xFF3
 11389                           intcon	equ	0xFF2
 11390                           indf0	equ	0xFEF
 11391                           postinc0	equ	0xFEE
 11392                           fsr0h	equ	0xFEA
 11393                           fsr0l	equ	0xFE9
 11394                           wreg	equ	0xFE8
 11395                           indf1	equ	0xFE7
 11396                           postinc1	equ	0xFE6
 11397                           postdec1	equ	0xFE5
 11398                           fsr1h	equ	0xFE2
 11399                           fsr1l	equ	0xFE1
 11400                           indf2	equ	0xFDF
 11401                           postinc2	equ	0xFDE
 11402                           postdec2	equ	0xFDD
 11403                           plusw2	equ	0xFDB
 11404                           fsr2h	equ	0xFDA
 11405                           fsr2l	equ	0xFD9
 11406                           status	equ	0xFD8
 11407                           
 11408 ;; *************** function _doModeVerbose *****************
 11409 ;; Defined at:
 11410 ;;		line 515 in file "main.c"
 11411 ;; Parameters:    Size  Location     Type
 11412 ;;		None
 11413 ;; Auto vars:     Size  Location     Type
 11414 ;;  preg            2    6[BANK2 ] PTR unsigned char 
 11415 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11416 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11417 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11418 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11419 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11420 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11421 ;;  preg            2    4[BANK2 ] PTR unsigned char 
 11422 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 11423 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 11424 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 11425 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 11426 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 11427 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 11428 ;;  id              4   35[BANK2 ] unsigned long 
 11429 ;;  p               2   59[BANK2 ] PTR unsigned char 
 11430 ;;		 -> NULL(0), cmdbuf(80), 
 11431 ;;  mask_class      2   10[BANK2 ] unsigned short 
 11432 ;;  maskno          1   40[BANK2 ] unsigned char 
 11433 ;;  mask_nodeid     1   19[BANK2 ] unsigned char 
 11434 ;;  mask_type       1   18[BANK2 ] unsigned char 
 11435 ;;  mask_priorit    1   17[BANK2 ] unsigned char 
 11436 ;;  id              4    0[BANK2 ] unsigned long 
 11437 ;;  p               2   57[BANK2 ] PTR unsigned char 
 11438 ;;		 -> NULL(0), cmdbuf(80), 
 11439 ;;  filter_class    2    8[BANK2 ] unsigned short 
 11440 ;;  filterno        1   39[BANK2 ] unsigned char 
 11441 ;;  filter_nodei    1   16[BANK2 ] unsigned char 
 11442 ;;  filter_type     1   15[BANK2 ] unsigned char 
 11443 ;;  filter_prior    1   14[BANK2 ] unsigned char 
 11444 ;;  nodeid          1   47[BANK2 ] unsigned char 
 11445 ;;  p               2   52[BANK2 ] PTR unsigned char 
 11446 ;;		 -> NULL(0), cmdbuf(80), 
 11447 ;;  value           1   42[BANK2 ] unsigned char 
 11448 ;;  reg             1   34[BANK2 ] unsigned char 
 11449 ;;  page            1   33[BANK2 ] unsigned char 
 11450 ;;  nodeid          1   13[BANK2 ] unsigned char 
 11451 ;;  p               2   50[BANK2 ] PTR unsigned char 
 11452 ;;		 -> NULL(0), cmdbuf(80), 
 11453 ;;  value           1   49[BANK2 ] unsigned char 
 11454 ;;  i               1   48[BANK2 ] unsigned char 
 11455 ;;  reg             1   46[BANK2 ] unsigned char 
 11456 ;;  page            1   45[BANK2 ] unsigned char 
 11457 ;;  count           1   43[BANK2 ] unsigned char 
 11458 ;;  rv              1   32[BANK2 ] enum E15660
 11459 ;;  nodeid          1   12[BANK2 ] unsigned char 
 11460 ;;  p               2   55[BANK2 ] PTR unsigned char 
 11461 ;;		 -> NULL(0), cmdbuf(80), 
 11462 ;;  ifmode          1   54[BANK2 ] enum E16362
 11463 ;;  c               1   44[BANK2 ] unsigned char 
 11464 ;;  i               1   41[BANK2 ] unsigned char 
 11465 ;; Return value:  Size  Location     Type
 11466 ;;		None               void
 11467 ;; Registers used:
 11468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 11469 ;; Tracked objects:
 11470 ;;		On entry : F/0
 11471 ;;		On exit  : 0/0
 11472 ;;		Unchanged: 0/0
 11473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 11474 ;;      Params:         0       0       0       0       0       0       0
 11475 ;;      Locals:         0       0       0      61       0       0       0
 11476 ;;      Temps:          0      20       0       0       0       0       0
 11477 ;;      Totals:         0      20       0      61       0       0       0
 11478 ;;Total ram usage:       81 bytes
 11479 ;; Hardware stack levels used:    1
 11480 ;; Hardware stack levels required when called:   10
 11481 ;; This function calls:
 11482 ;;		_putsUSART
 11483 ;;		_printFirmwareVersion
 11484 ;;		_fifo_read
 11485 ;;		_Busy_eep
 11486 ;;		_Write_b_eep
 11487 ;;		_receivePrintEventVerbose
 11488 ;;		_stristr
 11489 ;;		_ECANSetOperationMode
 11490 ;;		_strtok
 11491 ;;		_atoi
 11492 ;;		_memset
 11493 ;;		_sendVSCPFrame
 11494 ;;		_printStatistics
 11495 ;;		_printErrors
 11496 ;;		_printHelp
 11497 ;;		_findNodes
 11498 ;;		_strcpy
 11499 ;;		_strchr
 11500 ;;		_readRegisterExtended
 11501 ;;		_sprintf
 11502 ;;		_WriteUSART
 11503 ;;		_printBinary
 11504 ;;		_writeRegisterExtended
 11505 ;;		_printNodeFirmwareVersion
 11506 ;;		_printGUID
 11507 ;;		_printMDF
 11508 ;;		_setFilter
 11509 ;;		__CANIDToRegs
 11510 ;; This function is called by:
 11511 ;;		_main
 11512 ;; This function uses a non-reentrant model
 11513 ;;
 11514                           
 11515                           	psect	text22
 11516  000302                     __ptext22:
 11517                           	opt stack 0
 11518  000302                     _doModeVerbose:
 11519                           	opt stack 20
 11520                           
 11521                           ; BSR set to: 0
 11522                           ;main.c: 516: uint8_t c;
 11523                           ;main.c: 517: uint8_t i;
 11524                           ;main.c: 520: if (!bSilent) {
 11525                           
 11526                           ;incstack = 0
 11527                           ;incstack = 0
 11528  000302  67DE               	tstfsz	_bSilent& (0+255),b
 11529  000304  D002               	goto	l13285
 11530                           
 11531                           ; BSR set to: 0
 11532                           ;main.c: 521: receivePrintEventVerbose();
 11533  000306  EC34  F012         	call	_receivePrintEventVerbose	;wreg free
 11534  00030A                     l13285:
 11535                           
 11536                           ;main.c: 522: }
 11537                           ;main.c: 525: (INTCONbits.GIE = 0);
 11538  00030A  9EF2               	bcf	intcon,7,c	;volatile
 11539                           
 11540                           ;main.c: 527: if (1 == fifo_read(&serialInputFifo, &c, 1)) {
 11541  00030C  0E01               	movlw	high _serialInputFifo
 11542  00030E  6E1F               	movwf	?_fifo_read+1,c
 11543  000310  0ED4               	movlw	low _serialInputFifo
 11544  000312  6E1E               	movwf	?_fifo_read,c
 11545  000314  0102               	movlb	2	; () banked
 11546  000316  0E02               	movlw	high doModeVerbose@c
 11547  000318  6E21               	movwf	?_fifo_read+3,c
 11548  00031A  0EAC               	movlw	low doModeVerbose@c
 11549  00031C  6E20               	movwf	?_fifo_read+2,c
 11550  00031E  6A23               	clrf	?_fifo_read+5,c
 11551  000320  0E01               	movlw	1
 11552  000322  6E22               	movwf	?_fifo_read+4,c
 11553  000324  ECDE  F020         	call	_fifo_read	;wreg free
 11554  000328  041E               	decf	?_fifo_read,w,c
 11555  00032A  101F               	iorwf	?_fifo_read+1,w,c
 11556  00032C  E002 EFC0  F00A    	bnz	l13907
 11557                           
 11558                           ; BSR set to: 0
 11559                           ;main.c: 530: (INTCONbits.GIE = 1);
 11560  000332  8EF2               	bsf	intcon,7,c	;volatile
 11561                           
 11562                           ; BSR set to: 0
 11563                           ;main.c: 533: cmdbuf[ pos++ ] = c;
 11564  000334  EC49  F016         	call	PL22	;call to abstracted procedure
 11565  000338  C2AC  FFDF         	movff	doModeVerbose@c,indf2
 11566                           
 11567                           ; BSR set to: 2
 11568  00033C  2BE0               	incf	_pos& (0+255),f,b
 11569                           
 11570                           ; BSR set to: 0
 11571                           ;main.c: 534: if (pos >= sizeof( cmdbuf ) ) {
 11572  00033E  0E4F               	movlw	79
 11573  000340  65E0               	cpfsgt	_pos& (0+255),b
 11574  000342  D001               	goto	l13299
 11575                           
 11576                           ; BSR set to: 0
 11577                           ;main.c: 537: pos = 0;
 11578  000344  6BE0               	clrf	_pos& (0+255),b
 11579  000346                     l13299:
 11580                           
 11581                           ; BSR set to: 0
 11582                           ;main.c: 538: }
 11583                           ;main.c: 541: if (0x0d == c) {
 11584  000346  0102               	movlb	2	; () banked
 11585  000348  51AC               	movf	doModeVerbose@c& (0+255),w,b
 11586  00034A  0A0D               	xorlw	13
 11587  00034C  E002 EFC0  F00A    	bnz	l13907
 11588                           
 11589                           ; BSR set to: 2
 11590                           ;main.c: 543: cmdbuf[ pos ] = 0;
 11591  000352  EC49  F016         	call	PL22	;call to abstracted procedure
 11592  000356  6ADF               	clrf	indf2,c
 11593                           
 11594                           ; BSR set to: 1
 11595                           ;main.c: 546: if (cmdbuf == stristr(cmdbuf, "BOOT")) {
 11596  000358  6F67               	movwf	(?_stristr+1)& (0+255),b
 11597  00035A  0E24               	movlw	low _cmdbuf
 11598  00035C  6F66               	movwf	?_stristr& (0+255),b
 11599  00035E  0E7F               	movlw	high STR_6
 11600  000360  6F69               	movwf	(?_stristr+3)& (0+255),b
 11601  000362  0ED0               	movlw	low STR_6
 11602  000364  6F68               	movwf	(?_stristr+2)& (0+255),b
 11603  000366  ECB7  F026         	call	_stristr	;wreg free
 11604  00036A  0E24               	movlw	low _cmdbuf
 11605  00036C  6FC1               	movwf	??_doModeVerbose& (0+255),b
 11606  00036E  0E01               	movlw	high _cmdbuf
 11607  000370  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 11608  000372  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 11609  000374  E102               	bnz	u17545
 11610  000376  5166               	movf	?_stristr& (0+255),w,b
 11611  000378  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 11612  00037A                     u17545:
 11613  00037A  E111               	bnz	l13311
 11614                           
 11615                           ; BSR set to: 0
 11616                           ;main.c: 547: putsUSART((char *) "Will enter bootloader now...\r\n");
 11617  00037C  0E7A               	movlw	high STR_7
 11618  00037E  6E20               	movwf	?_putsUSART+1,c
 11619  000380  0EED               	movlw	low STR_7
 11620  000382  6E1F               	movwf	?_putsUSART,c
 11621  000384  EC25  F029         	call	_putsUSART	;wreg free
 11622                           
 11623                           ;main.c: 548: (Busy_eep(), Write_b_eep(0x00,0xFF));
 11624  000388  EC1E  F02C         	call	_Busy_eep	;wreg free
 11625  00038C  6A1F               	clrf	?_Write_b_eep+1,c
 11626  00038E  6A1E               	clrf	?_Write_b_eep,c
 11627  000390  0EFF               	movlw	255
 11628  000392  6820               	setf	?_Write_b_eep+2,c
 11629  000394  EC39  F02B         	call	_Write_b_eep	;wreg free
 11630  000398  00FF               	reset		;# 
 11631                           
 11632                           ;main.c: 550: }
 11633  00039A  EFB2  F00A         	goto	l13903
 11634  00039E                     l13311:
 11635                           
 11636                           ; BSR set to: 0
 11637                           ;main.c: 552: else if (cmdbuf == stristr(cmdbuf, "OPEN")) {
 11638  00039E  0E01               	movlw	high _cmdbuf
 11639  0003A0  0100               	movlb	0	; () banked
 11640  0003A2  6F67               	movwf	(?_stristr+1)& (0+255),b
 11641  0003A4  0E24               	movlw	low _cmdbuf
 11642  0003A6  6F66               	movwf	?_stristr& (0+255),b
 11643  0003A8  0E7F               	movlw	high STR_8
 11644  0003AA  6F69               	movwf	(?_stristr+3)& (0+255),b
 11645  0003AC  0EB7               	movlw	low STR_8
 11646  0003AE  6F68               	movwf	(?_stristr+2)& (0+255),b
 11647  0003B0  ECB7  F026         	call	_stristr	;wreg free
 11648  0003B4  0E24               	movlw	low _cmdbuf
 11649  0003B6  6FC1               	movwf	??_doModeVerbose& (0+255),b
 11650  0003B8  0E01               	movlw	high _cmdbuf
 11651  0003BA  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 11652  0003BC  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 11653  0003BE  E102               	bnz	u17555
 11654  0003C0  5166               	movf	?_stristr& (0+255),w,b
 11655  0003C2  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 11656  0003C4                     u17555:
 11657  0003C4  E10C               	bnz	l13319
 11658                           
 11659                           ; BSR set to: 0
 11660                           ;main.c: 553: bSilent = 0;
 11661  0003C6  6BDE               	clrf	_bSilent& (0+255),b
 11662                           
 11663                           ; BSR set to: 0
 11664                           ;main.c: 554: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11665  0003C8  0E00               	movlw	0
 11666  0003CA  ECDE  F02B         	call	_ECANSetOperationMode
 11667                           
 11668                           ;main.c: 555: putsUSART((char *) "+OK\r\n");
 11669  0003CE  0E7F               	movlw	high STR_9
 11670  0003D0  6E20               	movwf	?_putsUSART+1,c
 11671  0003D2  0E80               	movlw	low STR_9
 11672  0003D4  6E1F               	movwf	?_putsUSART,c
 11673  0003D6  EC25  F029         	call	_putsUSART	;wreg free
 11674                           
 11675                           ;main.c: 556: }
 11676  0003DA  EFB2  F00A         	goto	l13903
 11677  0003DE                     l13319:
 11678                           
 11679                           ; BSR set to: 0
 11680                           ;main.c: 558: else if (cmdbuf == stristr(cmdbuf, "SILENT")) {
 11681  0003DE  0E01               	movlw	high _cmdbuf
 11682  0003E0  0100               	movlb	0	; () banked
 11683  0003E2  6F67               	movwf	(?_stristr+1)& (0+255),b
 11684  0003E4  0E24               	movlw	low _cmdbuf
 11685  0003E6  6F66               	movwf	?_stristr& (0+255),b
 11686  0003E8  0E7F               	movlw	high STR_10
 11687  0003EA  6F69               	movwf	(?_stristr+3)& (0+255),b
 11688  0003EC  0E5E               	movlw	low STR_10
 11689  0003EE  6F68               	movwf	(?_stristr+2)& (0+255),b
 11690  0003F0  ECB7  F026         	call	_stristr	;wreg free
 11691  0003F4  0E24               	movlw	low _cmdbuf
 11692  0003F6  6FC1               	movwf	??_doModeVerbose& (0+255),b
 11693  0003F8  0E01               	movlw	high _cmdbuf
 11694  0003FA  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 11695  0003FC  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 11696  0003FE  E102               	bnz	u17565
 11697  000400  5166               	movf	?_stristr& (0+255),w,b
 11698  000402  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 11699  000404                     u17565:
 11700  000404  E10D               	bnz	l13327
 11701                           
 11702                           ; BSR set to: 0
 11703                           ;main.c: 559: bSilent = 1;
 11704  000406  0E01               	movlw	1
 11705  000408  6FDE               	movwf	_bSilent& (0+255),b
 11706                           
 11707                           ; BSR set to: 0
 11708                           ;main.c: 560: ECANSetOperationMode(ECAN_OP_MODE_NORMAL);
 11709  00040A  0E00               	movlw	0
 11710  00040C  ECDE  F02B         	call	_ECANSetOperationMode
 11711                           
 11712                           ;main.c: 561: putsUSART((char *) "+OK\r\n");
 11713  000410  0E7F               	movlw	high STR_9
 11714  000412  6E20               	movwf	?_putsUSART+1,c
 11715  000414  0E80               	movlw	low STR_9
 11716  000416  6E1F               	movwf	?_putsUSART,c
 11717  000418  EC25  F029         	call	_putsUSART	;wreg free
 11718                           
 11719                           ;main.c: 562: }
 11720  00041C  EFB2  F00A         	goto	l13903
 11721  000420                     l13327:
 11722                           
 11723                           ; BSR set to: 0
 11724                           ;main.c: 564: else if (cmdbuf == stristr(cmdbuf, "CLOSE")) {
 11725  000420  0E01               	movlw	high _cmdbuf
 11726  000422  0100               	movlb	0	; () banked
 11727  000424  6F67               	movwf	(?_stristr+1)& (0+255),b
 11728  000426  0E24               	movlw	low _cmdbuf
 11729  000428  6F66               	movwf	?_stristr& (0+255),b
 11730  00042A  0E7F               	movlw	high STR_12
 11731  00042C  6F69               	movwf	(?_stristr+3)& (0+255),b
 11732  00042E  0E92               	movlw	low STR_12
 11733  000430  6F68               	movwf	(?_stristr+2)& (0+255),b
 11734  000432  ECB7  F026         	call	_stristr	;wreg free
 11735  000436  0E24               	movlw	low _cmdbuf
 11736  000438  6FC1               	movwf	??_doModeVerbose& (0+255),b
 11737  00043A  0E01               	movlw	high _cmdbuf
 11738  00043C  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 11739  00043E  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 11740  000440  E102               	bnz	u17575
 11741  000442  5166               	movf	?_stristr& (0+255),w,b
 11742  000444  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 11743  000446                     u17575:
 11744  000446  E10D               	bnz	l13335
 11745                           
 11746                           ; BSR set to: 0
 11747                           ;main.c: 565: bSilent = 1;
 11748  000448  0E01               	movlw	1
 11749  00044A  6FDE               	movwf	_bSilent& (0+255),b
 11750                           
 11751                           ; BSR set to: 0
 11752                           ;main.c: 566: ECANSetOperationMode(0x20);
 11753  00044C  0E20               	movlw	32
 11754  00044E  ECDE  F02B         	call	_ECANSetOperationMode
 11755                           
 11756                           ;main.c: 567: putsUSART((char *) "+OK\r\n");
 11757  000452  0E7F               	movlw	high STR_9
 11758  000454  6E20               	movwf	?_putsUSART+1,c
 11759  000456  0E80               	movlw	low STR_9
 11760  000458  6E1F               	movwf	?_putsUSART,c
 11761  00045A  EC25  F029         	call	_putsUSART	;wreg free
 11762                           
 11763                           ;main.c: 568: }
 11764  00045E  EFB2  F00A         	goto	l13903
 11765  000462                     l13335:
 11766                           
 11767                           ; BSR set to: 0
 11768                           ;main.c: 570: else if (cmdbuf == stristr(cmdbuf, "LOOPBACK")) {
 11769  000462  0E01               	movlw	high _cmdbuf
 11770  000464  0100               	movlb	0	; () banked
 11771  000466  6F67               	movwf	(?_stristr+1)& (0+255),b
 11772  000468  0E24               	movlw	low _cmdbuf
 11773  00046A  6F66               	movwf	?_stristr& (0+255),b
 11774  00046C  0E7E               	movlw	high STR_14
 11775  00046E  6F69               	movwf	(?_stristr+3)& (0+255),b
 11776  000470  0ECD               	movlw	low STR_14
 11777  000472  6F68               	movwf	(?_stristr+2)& (0+255),b
 11778  000474  ECB7  F026         	call	_stristr	;wreg free
 11779  000478  0E24               	movlw	low _cmdbuf
 11780  00047A  6FC1               	movwf	??_doModeVerbose& (0+255),b
 11781  00047C  0E01               	movlw	high _cmdbuf
 11782  00047E  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 11783  000480  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 11784  000482  E102               	bnz	u17585
 11785  000484  5166               	movf	?_stristr& (0+255),w,b
 11786  000486  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 11787  000488                     u17585:
 11788  000488  E10C               	bnz	l13343
 11789                           
 11790                           ; BSR set to: 0
 11791                           ;main.c: 571: bSilent = 0;
 11792  00048A  6BDE               	clrf	_bSilent& (0+255),b
 11793                           
 11794                           ; BSR set to: 0
 11795                           ;main.c: 572: ECANSetOperationMode(ECAN_OP_MODE_LOOP);
 11796  00048C  0E40               	movlw	64
 11797  00048E  ECDE  F02B         	call	_ECANSetOperationMode
 11798                           
 11799                           ;main.c: 573: putsUSART((char *) "+OK\r\n");
 11800  000492  0E7F               	movlw	high STR_9
 11801  000494  6E20               	movwf	?_putsUSART+1,c
 11802  000496  0E80               	movlw	low STR_9
 11803  000498  6E1F               	movwf	?_putsUSART,c
 11804  00049A  EC25  F029         	call	_putsUSART	;wreg free
 11805                           
 11806                           ;main.c: 574: }
 11807  00049E  EFB2  F00A         	goto	l13903
 11808  0004A2                     l13343:
 11809                           
 11810                           ; BSR set to: 0
 11811                           ;main.c: 576: else if (cmdbuf == stristr(cmdbuf, "LISTEN")) {
 11812  0004A2  0E01               	movlw	high _cmdbuf
 11813  0004A4  0100               	movlb	0	; () banked
 11814  0004A6  6F67               	movwf	(?_stristr+1)& (0+255),b
 11815  0004A8  0E24               	movlw	low _cmdbuf
 11816  0004AA  6F66               	movwf	?_stristr& (0+255),b
 11817  0004AC  0E7F               	movlw	high STR_16
 11818  0004AE  6F69               	movwf	(?_stristr+3)& (0+255),b
 11819  0004B0  0E50               	movlw	low STR_16
 11820  0004B2  6F68               	movwf	(?_stristr+2)& (0+255),b
 11821  0004B4  ECB7  F026         	call	_stristr	;wreg free
 11822  0004B8  0E24               	movlw	low _cmdbuf
 11823  0004BA  6FC1               	movwf	??_doModeVerbose& (0+255),b
 11824  0004BC  0E01               	movlw	high _cmdbuf
 11825  0004BE  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 11826  0004C0  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 11827  0004C2  E102               	bnz	u17595
 11828  0004C4  5166               	movf	?_stristr& (0+255),w,b
 11829  0004C6  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 11830  0004C8                     u17595:
 11831  0004C8  E10C               	bnz	l13351
 11832                           
 11833                           ; BSR set to: 0
 11834                           ;main.c: 577: bSilent = 0;
 11835  0004CA  6BDE               	clrf	_bSilent& (0+255),b
 11836                           
 11837                           ; BSR set to: 0
 11838                           ;main.c: 578: ECANSetOperationMode(ECAN_OP_MODE_LISTEN);
 11839  0004CC  0E60               	movlw	96
 11840  0004CE  ECDE  F02B         	call	_ECANSetOperationMode
 11841                           
 11842                           ;main.c: 579: putsUSART((char *) "+OK\r\n");
 11843  0004D2  0E7F               	movlw	high STR_9
 11844  0004D4  6E20               	movwf	?_putsUSART+1,c
 11845  0004D6  0E80               	movlw	low STR_9
 11846  0004D8  6E1F               	movwf	?_putsUSART,c
 11847  0004DA  EC25  F029         	call	_putsUSART	;wreg free
 11848                           
 11849                           ;main.c: 580: }
 11850  0004DE  EFB2  F00A         	goto	l13903
 11851  0004E2                     l13351:
 11852                           
 11853                           ; BSR set to: 0
 11854                           ;main.c: 582: else if (cmdbuf == stristr(cmdbuf, "VERSION")) {
 11855  0004E2  0E01               	movlw	high _cmdbuf
 11856  0004E4  0100               	movlb	0	; () banked
 11857  0004E6  6F67               	movwf	(?_stristr+1)& (0+255),b
 11858  0004E8  0E24               	movlw	low _cmdbuf
 11859  0004EA  6F66               	movwf	?_stristr& (0+255),b
 11860  0004EC  0E7F               	movlw	high STR_18
 11861  0004EE  6F69               	movwf	(?_stristr+3)& (0+255),b
 11862  0004F0  0E0E               	movlw	low STR_18
 11863  0004F2  6F68               	movwf	(?_stristr+2)& (0+255),b
 11864  0004F4  ECB7  F026         	call	_stristr	;wreg free
 11865  0004F8  0E24               	movlw	low _cmdbuf
 11866  0004FA  6FC1               	movwf	??_doModeVerbose& (0+255),b
 11867  0004FC  0E01               	movlw	high _cmdbuf
 11868  0004FE  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 11869  000500  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 11870  000502  E102               	bnz	u17605
 11871  000504  5166               	movf	?_stristr& (0+255),w,b
 11872  000506  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 11873  000508                     u17605:
 11874  000508  E10A               	bnz	l13357
 11875                           
 11876                           ; BSR set to: 0
 11877                           ;main.c: 583: printFirmwareVersion();
 11878  00050A  ECF3  F025         	call	_printFirmwareVersion	;wreg free
 11879                           
 11880                           ;main.c: 584: putsUSART((char *) "+OK\r\n");
 11881  00050E  0E7F               	movlw	high STR_9
 11882  000510  6E20               	movwf	?_putsUSART+1,c
 11883  000512  0E80               	movlw	low STR_9
 11884  000514  6E1F               	movwf	?_putsUSART,c
 11885  000516  EC25  F029         	call	_putsUSART	;wreg free
 11886                           
 11887                           ;main.c: 585: }
 11888  00051A  EFB2  F00A         	goto	l13903
 11889  00051E                     l13357:
 11890                           
 11891                           ; BSR set to: 0
 11892                           ;main.c: 587: else if (cmdbuf == stristr(cmdbuf, "IFMODE")) {
 11893  00051E  0E01               	movlw	high _cmdbuf
 11894  000520  0100               	movlb	0	; () banked
 11895  000522  6F67               	movwf	(?_stristr+1)& (0+255),b
 11896  000524  0E24               	movlw	low _cmdbuf
 11897  000526  6F66               	movwf	?_stristr& (0+255),b
 11898  000528  0E7F               	movlw	high STR_20
 11899  00052A  6F69               	movwf	(?_stristr+3)& (0+255),b
 11900  00052C  0E49               	movlw	low STR_20
 11901  00052E  6F68               	movwf	(?_stristr+2)& (0+255),b
 11902  000530  ECB7  F026         	call	_stristr	;wreg free
 11903  000534  0E24               	movlw	low _cmdbuf
 11904  000536  6FC1               	movwf	??_doModeVerbose& (0+255),b
 11905  000538  0E01               	movlw	high _cmdbuf
 11906  00053A  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 11907  00053C  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 11908  00053E  E102               	bnz	u17615
 11909  000540  5166               	movf	?_stristr& (0+255),w,b
 11910  000542  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 11911  000544                     u17615:
 11912  000544  E161               	bnz	l13393
 11913                           
 11914                           ; BSR set to: 0
 11915                           ;main.c: 588: ECAN_OP_MODE ifmode = (CANCON & ECAN_OP_MODE_BITS);
 11916  000546  506F               	movf	3951,w,c	;volatile
 11917  000548  0BE0               	andlw	224
 11918  00054A  0102               	movlb	2	; () banked
 11919  00054C  6FB6               	movwf	doModeVerbose@ifmode& (0+255),b
 11920                           
 11921                           ; BSR set to: 2
 11922                           ;main.c: 589: if ((ECAN_OP_MODE_NORMAL == ifmode) & !bSilent) {
 11923  00054E  67B6               	tstfsz	doModeVerbose@ifmode& (0+255),b
 11924  000550  D00B               	goto	l13367
 11925                           
 11926                           ; BSR set to: 2
 11927  000552  0100               	movlb	0	; () banked
 11928  000554  67DE               	tstfsz	_bSilent& (0+255),b
 11929  000556  D008               	goto	l13367
 11930                           
 11931                           ; BSR set to: 0
 11932                           ;main.c: 590: putsUSART((char *) "+OK - Normal mode\r\n");
 11933  000558  0E7D               	movlw	high STR_21
 11934  00055A  6E20               	movwf	?_putsUSART+1,c
 11935  00055C  0E83               	movlw	low STR_21
 11936  00055E  6E1F               	movwf	?_putsUSART,c
 11937  000560  EC25  F029         	call	_putsUSART	;wreg free
 11938                           
 11939                           ;main.c: 591: }
 11940  000564  EFB2  F00A         	goto	l13903
 11941  000568                     l13367:
 11942                           
 11943                           ;main.c: 592: else if ((ECAN_OP_MODE_NORMAL == ifmode) & bSilent) {
 11944  000568  0102               	movlb	2	; () banked
 11945  00056A  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11946  00056C  0E01               	movlw	1
 11947  00056E  A4D8               	btfss	status,2,c
 11948  000570  0E00               	movlw	0
 11949  000572  0100               	movlb	0	; () banked
 11950  000574  15DE               	andwf	_bSilent& (0+255),w,b
 11951  000576  E008               	bz	l13371
 11952                           
 11953                           ; BSR set to: 0
 11954                           ;main.c: 593: putsUSART((char *) "+OK - Silent mode\r\n");
 11955  000578  0E7D               	movlw	high STR_22
 11956  00057A  6E20               	movwf	?_putsUSART+1,c
 11957  00057C  0E97               	movlw	low STR_22
 11958  00057E  6E1F               	movwf	?_putsUSART,c
 11959  000580  EC25  F029         	call	_putsUSART	;wreg free
 11960                           
 11961                           ;main.c: 594: }
 11962  000584  EFB2  F00A         	goto	l13903
 11963  000588                     l13371:
 11964                           
 11965                           ; BSR set to: 0
 11966                           ;main.c: 595: else if (ECAN_OP_MODE_SLEEP == ifmode) {
 11967  000588  0102               	movlb	2	; () banked
 11968  00058A  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11969  00058C  0A20               	xorlw	32
 11970  00058E  E108               	bnz	l13375
 11971                           
 11972                           ; BSR set to: 2
 11973                           ;main.c: 596: putsUSART((char *) "+OK - Sleep mode\r\n");
 11974  000590  0E7D               	movlw	high STR_23
 11975  000592  6E20               	movwf	?_putsUSART+1,c
 11976  000594  0ED3               	movlw	low STR_23
 11977  000596  6E1F               	movwf	?_putsUSART,c
 11978  000598  EC25  F029         	call	_putsUSART	;wreg free
 11979                           
 11980                           ;main.c: 597: }
 11981  00059C  EFB2  F00A         	goto	l13903
 11982  0005A0                     l13375:
 11983                           
 11984                           ; BSR set to: 2
 11985                           ;main.c: 598: else if (ECAN_OP_MODE_LOOP == ifmode) {
 11986  0005A0  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 11987  0005A2  0A40               	xorlw	64
 11988  0005A4  E108               	bnz	l13379
 11989                           
 11990                           ; BSR set to: 2
 11991                           ;main.c: 599: putsUSART((char *) "+OK - Loopback mode\r\n");
 11992  0005A6  0E7D               	movlw	high STR_24
 11993  0005A8  6E20               	movwf	?_putsUSART+1,c
 11994  0005AA  0E06               	movlw	low STR_24
 11995  0005AC  6E1F               	movwf	?_putsUSART,c
 11996  0005AE  EC25  F029         	call	_putsUSART	;wreg free
 11997                           
 11998                           ;main.c: 600: }
 11999  0005B2  EFB2  F00A         	goto	l13903
 12000  0005B6                     l13379:
 12001                           
 12002                           ; BSR set to: 2
 12003                           ;main.c: 601: else if (ECAN_OP_MODE_LISTEN == ifmode) {
 12004  0005B6  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12005  0005B8  0A60               	xorlw	96
 12006  0005BA  E108               	bnz	l13383
 12007                           
 12008                           ; BSR set to: 2
 12009                           ;main.c: 602: putsUSART((char *) "+OK - Listen only mode\r\n");
 12010  0005BC  0E7B               	movlw	high STR_25
 12011  0005BE  6E20               	movwf	?_putsUSART+1,c
 12012  0005C0  0ECF               	movlw	low STR_25
 12013  0005C2  6E1F               	movwf	?_putsUSART,c
 12014  0005C4  EC25  F029         	call	_putsUSART	;wreg free
 12015                           
 12016                           ;main.c: 603: }
 12017  0005C8  EFB2  F00A         	goto	l13903
 12018  0005CC                     l13383:
 12019                           
 12020                           ; BSR set to: 2
 12021                           ;main.c: 604: else if (ECAN_OP_MODE_CONFIG == ifmode) {
 12022  0005CC  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12023  0005CE  0A80               	xorlw	128
 12024  0005D0  E108               	bnz	l13387
 12025                           
 12026                           ; BSR set to: 2
 12027                           ;main.c: 605: putsUSART((char *) "+OK - Closed mode\r\n");
 12028  0005D2  0E7D               	movlw	high STR_26
 12029  0005D4  6E20               	movwf	?_putsUSART+1,c
 12030  0005D6  0E6F               	movlw	low STR_26
 12031  0005D8  6E1F               	movwf	?_putsUSART,c
 12032  0005DA  EC25  F029         	call	_putsUSART	;wreg free
 12033                           
 12034                           ;main.c: 606: }
 12035  0005DE  EFB2  F00A         	goto	l13903
 12036  0005E2                     l13387:
 12037                           
 12038                           ; BSR set to: 2
 12039                           ;main.c: 607: else if (ECAN_OP_MODE_BITS == ifmode) {
 12040  0005E2  51B6               	movf	doModeVerbose@ifmode& (0+255),w,b
 12041  0005E4  0AE0               	xorlw	224
 12042  0005E6  E108               	bnz	l13391
 12043                           
 12044                           ; BSR set to: 2
 12045                           ;main.c: 608: putsUSART((char *) "+OK - Bits mode\r\n");
 12046  0005E8  0E7D               	movlw	high STR_27
 12047  0005EA  6E20               	movwf	?_putsUSART+1,c
 12048  0005EC  0EE6               	movlw	low STR_27
 12049  0005EE  6E1F               	movwf	?_putsUSART,c
 12050  0005F0  EC25  F029         	call	_putsUSART	;wreg free
 12051                           
 12052                           ;main.c: 609: }
 12053  0005F4  EFB2  F00A         	goto	l13903
 12054  0005F8                     l13391:
 12055                           
 12056                           ; BSR set to: 2
 12057                           ;main.c: 610: else {
 12058                           ;main.c: 611: putsUSART((char *) "-ERROR - Unknown mode\r\n");
 12059  0005F8  0E7C               	movlw	high STR_28
 12060  0005FA  6E20               	movwf	?_putsUSART+1,c
 12061  0005FC  0E49               	movlw	low STR_28
 12062  0005FE  6E1F               	movwf	?_putsUSART,c
 12063  000600  EC25  F029         	call	_putsUSART	;wreg free
 12064  000604  EFB2  F00A         	goto	l13903
 12065  000608                     l13393:
 12066                           
 12067                           ; BSR set to: 0
 12068                           ;main.c: 616: else if (cmdbuf == stristr(cmdbuf, "TX")) {
 12069  000608  0E01               	movlw	high _cmdbuf
 12070  00060A  0100               	movlb	0	; () banked
 12071  00060C  6F67               	movwf	(?_stristr+1)& (0+255),b
 12072  00060E  0E24               	movlw	low _cmdbuf
 12073  000610  6F66               	movwf	?_stristr& (0+255),b
 12074  000612  0E7F               	movlw	high STR_29
 12075  000614  6F69               	movwf	(?_stristr+3)& (0+255),b
 12076  000616  0EEB               	movlw	low STR_29
 12077  000618  6F68               	movwf	(?_stristr+2)& (0+255),b
 12078  00061A  ECB7  F026         	call	_stristr	;wreg free
 12079  00061E  0E24               	movlw	low _cmdbuf
 12080  000620  6FC1               	movwf	??_doModeVerbose& (0+255),b
 12081  000622  0E01               	movlw	high _cmdbuf
 12082  000624  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12083  000626  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 12084  000628  E102               	bnz	u17715
 12085  00062A  5166               	movf	?_stristr& (0+255),w,b
 12086  00062C  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 12087  00062E                     u17715:
 12088  00062E  E001 D0D6          	bnz	l13447
 12089                           
 12090                           ; BSR set to: 0
 12091                           ;main.c: 618: char *p = strtok(cmdbuf, ",");
 12092  000632  EC11  F00B         	call	PL26	;call to abstracted procedure
 12093  000636  EC5E  F025         	call	_strtok	;wreg free
 12094  00063A  C064  F2B7         	movff	?_strtok,doModeVerbose@p
 12095  00063E  C065  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12096                           
 12097                           ; BSR set to: 0
 12098                           ;main.c: 621: vscpPriority = 3;
 12099  000642  0E03               	movlw	3
 12100  000644  6FE3               	movwf	_vscpPriority& (0+255),b
 12101                           
 12102                           ; BSR set to: 0
 12103                           ;main.c: 622: if ((0) != p) {
 12104  000646  0102               	movlb	2	; () banked
 12105  000648  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12106  00064A  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12107  00064C  E008               	bz	l13403
 12108                           
 12109                           ; BSR set to: 2
 12110                           ;main.c: 623: vscpPriority = atoi(p);
 12111  00064E  C2B7  F024         	movff	doModeVerbose@p,?_atoi
 12112  000652  C2B8  F025         	movff	doModeVerbose@p+1,?_atoi+1
 12113  000656  EC2A  F01D         	call	_atoi	;wreg free
 12114  00065A  5024               	movf	?_atoi,w,c
 12115  00065C  6FE3               	movwf	_vscpPriority& (0+255),b
 12116  00065E                     l13403:
 12117                           
 12118                           ;main.c: 624: }
 12119                           ;main.c: 627: vscpClass = 0;
 12120  00065E  6A3E               	clrf	_vscpClass,c
 12121  000660  6A3F               	clrf	_vscpClass+1,c
 12122                           
 12123                           ;main.c: 628: if ((0) != (p = strtok((0), ","))) {
 12124  000662  0100               	movlb	0	; () banked
 12125  000664  ECD0  F00A         	call	PL4	;call to abstracted procedure
 12126  000668  EC5E  F025         	call	_strtok	;wreg free
 12127  00066C  C064  F2B7         	movff	?_strtok,doModeVerbose@p
 12128  000670  C065  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12129  000674  0102               	movlb	2	; () banked
 12130  000676  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12131  000678  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12132  00067A  E00A               	bz	l13409
 12133                           
 12134                           ; BSR set to: 2
 12135                           ;main.c: 629: vscpClass = atoi(p);
 12136  00067C  C2B7  F024         	movff	doModeVerbose@p,?_atoi
 12137  000680  C2B8  F025         	movff	doModeVerbose@p+1,?_atoi+1
 12138  000684  EC2A  F01D         	call	_atoi	;wreg free
 12139  000688  C024  F03E         	movff	?_atoi,_vscpClass
 12140  00068C  C025  F03F         	movff	?_atoi+1,_vscpClass+1
 12141  000690                     l13409:
 12142                           
 12143                           ;main.c: 630: }
 12144                           ;main.c: 633: vscpType = 0;
 12145  000690  0100               	movlb	0	; () banked
 12146  000692  6BE5               	clrf	_vscpType& (0+255),b
 12147                           
 12148                           ; BSR set to: 0
 12149                           ;main.c: 634: if ((0) != (p = strtok((0), ","))) {
 12150  000694  ECD0  F00A         	call	PL4	;call to abstracted procedure
 12151  000698  EC5E  F025         	call	_strtok	;wreg free
 12152  00069C  C064  F2B7         	movff	?_strtok,doModeVerbose@p
 12153  0006A0  C065  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12154  0006A4  0102               	movlb	2	; () banked
 12155  0006A6  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12156  0006A8  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12157  0006AA  E008               	bz	l13415
 12158                           
 12159                           ; BSR set to: 2
 12160                           ;main.c: 635: vscpType = atoi(p);
 12161  0006AC  C2B7  F024         	movff	doModeVerbose@p,?_atoi
 12162  0006B0  C2B8  F025         	movff	doModeVerbose@p+1,?_atoi+1
 12163  0006B4  EC2A  F01D         	call	_atoi	;wreg free
 12164  0006B8  5024               	movf	?_atoi,w,c
 12165  0006BA  6FE5               	movwf	_vscpType& (0+255),b
 12166  0006BC                     l13415:
 12167                           
 12168                           ;main.c: 636: }
 12169                           ;main.c: 639: vscpNodeId = 0;
 12170  0006BC  0100               	movlb	0	; () banked
 12171  0006BE  6BE2               	clrf	_vscpNodeId& (0+255),b
 12172                           
 12173                           ; BSR set to: 0
 12174                           ;main.c: 640: if ((0) != (p = strtok((0), ","))) {
 12175  0006C0  ECD0  F00A         	call	PL4	;call to abstracted procedure
 12176  0006C4  EC5E  F025         	call	_strtok	;wreg free
 12177  0006C8  C064  F2B7         	movff	?_strtok,doModeVerbose@p
 12178  0006CC  C065  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12179  0006D0  0102               	movlb	2	; () banked
 12180  0006D2  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12181  0006D4  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12182  0006D6  E008               	bz	l13421
 12183                           
 12184                           ; BSR set to: 2
 12185                           ;main.c: 641: vscpNodeId = atoi(p);
 12186  0006D8  C2B7  F024         	movff	doModeVerbose@p,?_atoi
 12187  0006DC  C2B8  F025         	movff	doModeVerbose@p+1,?_atoi+1
 12188  0006E0  EC2A  F01D         	call	_atoi	;wreg free
 12189  0006E4  5024               	movf	?_atoi,w,c
 12190  0006E6  6FE2               	movwf	_vscpNodeId& (0+255),b
 12191  0006E8                     l13421:
 12192                           
 12193                           ;main.c: 642: }
 12194                           ;main.c: 645: vscpSize = 0;
 12195  0006E8  0100               	movlb	0	; () banked
 12196  0006EA  6BE4               	clrf	_vscpSize& (0+255),b
 12197                           
 12198                           ; BSR set to: 0
 12199                           ;main.c: 646: if ((0) != (p = strtok((0), ","))) {
 12200  0006EC  ECD0  F00A         	call	PL4	;call to abstracted procedure
 12201  0006F0  EC5E  F025         	call	_strtok	;wreg free
 12202  0006F4  C064  F2B7         	movff	?_strtok,doModeVerbose@p
 12203  0006F8  C065  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12204  0006FC  0102               	movlb	2	; () banked
 12205  0006FE  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12206  000700  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12207  000702  E008               	bz	l13427
 12208                           
 12209                           ; BSR set to: 2
 12210                           ;main.c: 647: vscpSize = atoi(p);
 12211  000704  C2B7  F024         	movff	doModeVerbose@p,?_atoi
 12212  000708  C2B8  F025         	movff	doModeVerbose@p+1,?_atoi+1
 12213  00070C  EC2A  F01D         	call	_atoi	;wreg free
 12214  000710  5024               	movf	?_atoi,w,c
 12215  000712  6FE4               	movwf	_vscpSize& (0+255),b
 12216  000714                     l13427:
 12217                           
 12218                           ;main.c: 648: }
 12219                           ;main.c: 650: memset( vscpData, 0, 8 );
 12220  000714  0101               	movlb	1	; () banked
 12221  000716  0E01               	movlw	high _vscpData
 12222  000718  6E1F               	movwf	?_memset+1,c
 12223  00071A  0EDC               	movlw	low _vscpData
 12224  00071C  6E1E               	movwf	?_memset,c
 12225  00071E  6A21               	clrf	?_memset+3,c
 12226  000720  6A20               	clrf	?_memset+2,c
 12227  000722  6A23               	clrf	?_memset+5,c
 12228  000724  0E08               	movlw	8
 12229  000726  6E22               	movwf	?_memset+4,c
 12230  000728  EC9B  F02B         	call	_memset	;wreg free
 12231                           
 12232                           ;main.c: 651: for (i = 0; i < vscpSize; i++) {
 12233  00072C  0102               	movlb	2	; () banked
 12234  00072E  6BA9               	clrf	doModeVerbose@i& (0+255),b
 12235  000730  D01E               	goto	l13437
 12236  000732                     l13431:
 12237                           
 12238                           ; BSR set to: 2
 12239                           ;main.c: 652: if ((0) != (p = strtok((0), ","))) {
 12240  000732  0100               	movlb	0	; () banked
 12241  000734  ECD0  F00A         	call	PL4	;call to abstracted procedure
 12242  000738  EC5E  F025         	call	_strtok	;wreg free
 12243  00073C  C064  F2B7         	movff	?_strtok,doModeVerbose@p
 12244  000740  C065  F2B8         	movff	?_strtok+1,doModeVerbose@p+1
 12245  000744  0102               	movlb	2	; () banked
 12246  000746  51B8               	movf	(doModeVerbose@p+1)& (0+255),w,b
 12247  000748  11B7               	iorwf	doModeVerbose@p& (0+255),w,b
 12248  00074A  E016               	bz	l13439
 12249                           
 12250                           ; BSR set to: 2
 12251                           ;main.c: 653: vscpData[ i ] = atoi(p);
 12252  00074C  0EDC               	movlw	low _vscpData
 12253  00074E  25A9               	addwf	doModeVerbose@i& (0+255),w,b
 12254  000750  6ED9               	movwf	fsr2l,c
 12255  000752  6ADA               	clrf	fsr2h,c
 12256  000754  0101               	movlb	1	; () banked
 12257  000756  0E01               	movlw	high _vscpData
 12258  000758  22DA               	addwfc	fsr2h,f,c
 12259  00075A  C2B7  F024         	movff	doModeVerbose@p,?_atoi
 12260  00075E  C2B8  F025         	movff	doModeVerbose@p+1,?_atoi+1
 12261  000762  EC2A  F01D         	call	_atoi	;wreg free
 12262  000766  5024               	movf	?_atoi,w,c
 12263  000768  6EDF               	movwf	indf2,c
 12264                           
 12265                           ; BSR set to: 0
 12266                           
 12267                           ;main.c: 654: }
 12268  00076A  0102               	movlb	2	; () banked
 12269  00076C  2BA9               	incf	doModeVerbose@i& (0+255),f,b
 12270  00076E                     l13437:
 12271                           
 12272                           ; BSR set to: 2
 12273  00076E  0100               	movlb	0	; () banked
 12274  000770  51E4               	movf	_vscpSize& (0+255),w,b
 12275  000772  0102               	movlb	2	; () banked
 12276  000774  5DA9               	subwf	doModeVerbose@i& (0+255),w,b
 12277  000776  E3DD               	bnc	l13431
 12278  000778                     l13439:
 12279                           
 12280                           ; BSR set to: 2
 12281                           ;main.c: 657: }
 12282                           ;main.c: 658: }
 12283                           ;main.c: 660: if ( sendVSCPFrame(vscpClass,
 12284                           ;main.c: 661: vscpType,
 12285                           ;main.c: 662: vscpNodeId,
 12286                           ;main.c: 663: vscpPriority,
 12287                           ;main.c: 664: vscpSize,
 12288                           ;main.c: 665: vscpData ) ) {
 12289  000778  C03E  F08D         	movff	_vscpClass,?_sendVSCPFrame
 12290  00077C  C03F  F08E         	movff	_vscpClass+1,?_sendVSCPFrame+1
 12291  000780  C0E5  F08F         	movff	_vscpType,?_sendVSCPFrame+2
 12292  000784  C0E2  F090         	movff	_vscpNodeId,?_sendVSCPFrame+3
 12293  000788  C0E3  F091         	movff	_vscpPriority,?_sendVSCPFrame+4
 12294  00078C  C0E4  F092         	movff	_vscpSize,?_sendVSCPFrame+5
 12295  000790  0E01               	movlw	high _vscpData
 12296  000792  0100               	movlb	0	; () banked
 12297  000794  6F94               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 12298  000796  0EDC               	movlw	low _vscpData
 12299  000798  6F93               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 12300  00079A  EC6F  F022         	call	_sendVSCPFrame	;wreg free
 12301  00079E  0900               	iorlw	0
 12302  0007A0  E016               	bz	l13445
 12303                           
 12304                           ;main.c: 667: cntTxFrames++;
 12305  0007A2  0101               	movlb	1	; () banked
 12306  0007A4  2B14               	incf	_cntTxFrames& (0+255),f,b
 12307  0007A6  0E00               	movlw	0
 12308  0007A8  2315               	addwfc	(_cntTxFrames+1)& (0+255),f,b
 12309  0007AA  2316               	addwfc	(_cntTxFrames+2)& (0+255),f,b
 12310  0007AC  2317               	addwfc	(_cntTxFrames+3)& (0+255),f,b
 12311                           
 12312                           ;main.c: 668: cntTxBytes += vscpSize;
 12313  0007AE  0100               	movlb	0	; () banked
 12314  0007B0  51E4               	movf	_vscpSize& (0+255),w,b
 12315  0007B2  0101               	movlb	1	; () banked
 12316  0007B4  2710               	addwf	_cntTxBytes& (0+255),f,b
 12317  0007B6  0E00               	movlw	0
 12318  0007B8  2311               	addwfc	(_cntTxBytes+1)& (0+255),f,b
 12319  0007BA  2312               	addwfc	(_cntTxBytes+2)& (0+255),f,b
 12320  0007BC  2313               	addwfc	(_cntTxBytes+3)& (0+255),f,b
 12321                           
 12322                           ; BSR set to: 1
 12323                           ;main.c: 669: putsUSART((char *) "+OK\r\n");
 12324  0007BE  0E7F               	movlw	high STR_9
 12325  0007C0  6E20               	movwf	?_putsUSART+1,c
 12326  0007C2  0E80               	movlw	low STR_9
 12327  0007C4  6E1F               	movwf	?_putsUSART,c
 12328  0007C6  EC25  F029         	call	_putsUSART	;wreg free
 12329                           
 12330                           ;main.c: 670: }
 12331  0007CA  EFB2  F00A         	goto	l13903
 12332  0007CE                     l13445:
 12333                           
 12334                           ;main.c: 671: else {
 12335                           ;main.c: 672: putsUSART((char *) "-ERROR - Failed to send event.\r\n");
 12336  0007CE  0E7A               	movlw	high STR_37
 12337  0007D0  6E20               	movwf	?_putsUSART+1,c
 12338  0007D2  0E49               	movlw	low STR_37
 12339  0007D4  6E1F               	movwf	?_putsUSART,c
 12340  0007D6  EC25  F029         	call	_putsUSART	;wreg free
 12341  0007DA  EFB2  F00A         	goto	l13903
 12342  0007DE                     l13447:
 12343                           
 12344                           ; BSR set to: 0
 12345                           ;main.c: 676: else if (cmdbuf == stristr(cmdbuf, "RX")) {
 12346  0007DE  0E01               	movlw	high _cmdbuf
 12347  0007E0  0100               	movlb	0	; () banked
 12348  0007E2  6F67               	movwf	(?_stristr+1)& (0+255),b
 12349  0007E4  0E24               	movlw	low _cmdbuf
 12350  0007E6  6F66               	movwf	?_stristr& (0+255),b
 12351  0007E8  0E7F               	movlw	high STR_38
 12352  0007EA  6F69               	movwf	(?_stristr+3)& (0+255),b
 12353  0007EC  0EE8               	movlw	low STR_38
 12354  0007EE  6F68               	movwf	(?_stristr+2)& (0+255),b
 12355  0007F0  ECB7  F026         	call	_stristr	;wreg free
 12356  0007F4  0E24               	movlw	low _cmdbuf
 12357  0007F6  6FC1               	movwf	??_doModeVerbose& (0+255),b
 12358  0007F8  0E01               	movlw	high _cmdbuf
 12359  0007FA  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12360  0007FC  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 12361  0007FE  E102               	bnz	u17805
 12362  000800  5166               	movf	?_stristr& (0+255),w,b
 12363  000802  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 12364  000804                     u17805:
 12365  000804  E114               	bnz	l13455
 12366                           
 12367                           ; BSR set to: 0
 12368                           ;main.c: 677: if (receivePrintEventVerbose()) {
 12369  000806  EC34  F012         	call	_receivePrintEventVerbose	;wreg free
 12370  00080A  0900               	iorlw	0
 12371  00080C  E008               	bz	l13453
 12372                           
 12373                           ;main.c: 678: putsUSART((char *) "+OK\r\n");
 12374  00080E  0E7F               	movlw	high STR_9
 12375  000810  6E20               	movwf	?_putsUSART+1,c
 12376  000812  0E80               	movlw	low STR_9
 12377  000814  6E1F               	movwf	?_putsUSART,c
 12378  000816  EC25  F029         	call	_putsUSART	;wreg free
 12379                           
 12380                           ;main.c: 679: }
 12381  00081A  EFB2  F00A         	goto	l13903
 12382  00081E                     l13453:
 12383                           
 12384                           ;main.c: 680: else {
 12385                           ;main.c: 681: putsUSART((char *) "+OK - no events\r\n");
 12386  00081E  0E7D               	movlw	high STR_40
 12387  000820  6E20               	movwf	?_putsUSART+1,c
 12388  000822  0EF8               	movlw	low STR_40
 12389  000824  6E1F               	movwf	?_putsUSART,c
 12390  000826  EC25  F029         	call	_putsUSART	;wreg free
 12391  00082A  EFB2  F00A         	goto	l13903
 12392  00082E                     l13455:
 12393                           
 12394                           ; BSR set to: 0
 12395                           ;main.c: 685: else if (cmdbuf == stristr(cmdbuf, "STAT")) {
 12396  00082E  0E01               	movlw	high _cmdbuf
 12397  000830  0100               	movlb	0	; () banked
 12398  000832  6F67               	movwf	(?_stristr+1)& (0+255),b
 12399  000834  0E24               	movlw	low _cmdbuf
 12400  000836  6F66               	movwf	?_stristr& (0+255),b
 12401  000838  0E7F               	movlw	high STR_41
 12402  00083A  6F69               	movwf	(?_stristr+3)& (0+255),b
 12403  00083C  0ECB               	movlw	low STR_41
 12404  00083E  6F68               	movwf	(?_stristr+2)& (0+255),b
 12405  000840  ECB7  F026         	call	_stristr	;wreg free
 12406  000844  0E24               	movlw	low _cmdbuf
 12407  000846  6FC1               	movwf	??_doModeVerbose& (0+255),b
 12408  000848  0E01               	movlw	high _cmdbuf
 12409  00084A  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12410  00084C  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 12411  00084E  E102               	bnz	u17825
 12412  000850  5166               	movf	?_stristr& (0+255),w,b
 12413  000852  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 12414  000854                     u17825:
 12415  000854  E10A               	bnz	l13461
 12416                           
 12417                           ; BSR set to: 0
 12418                           ;main.c: 686: printStatistics();
 12419  000856  ECDE  F017         	call	_printStatistics	;wreg free
 12420                           
 12421                           ;main.c: 687: putsUSART((char *) "+OK\r\n");
 12422  00085A  0E7F               	movlw	high STR_9
 12423  00085C  6E20               	movwf	?_putsUSART+1,c
 12424  00085E  0E80               	movlw	low STR_9
 12425  000860  6E1F               	movwf	?_putsUSART,c
 12426  000862  EC25  F029         	call	_putsUSART	;wreg free
 12427                           
 12428                           ;main.c: 688: }
 12429  000866  EFB2  F00A         	goto	l13903
 12430  00086A                     l13461:
 12431                           
 12432                           ; BSR set to: 0
 12433                           ;main.c: 690: else if (cmdbuf == stristr(cmdbuf, "ERR")) {
 12434  00086A  0E01               	movlw	high _cmdbuf
 12435  00086C  0100               	movlb	0	; () banked
 12436  00086E  6F67               	movwf	(?_stristr+1)& (0+255),b
 12437  000870  0E24               	movlw	low _cmdbuf
 12438  000872  6F66               	movwf	?_stristr& (0+255),b
 12439  000874  0E7F               	movlw	high STR_43
 12440  000876  6F69               	movwf	(?_stristr+3)& (0+255),b
 12441  000878  0ED9               	movlw	low STR_43
 12442  00087A  6F68               	movwf	(?_stristr+2)& (0+255),b
 12443  00087C  ECB7  F026         	call	_stristr	;wreg free
 12444  000880  0E24               	movlw	low _cmdbuf
 12445  000882  6FC1               	movwf	??_doModeVerbose& (0+255),b
 12446  000884  0E01               	movlw	high _cmdbuf
 12447  000886  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12448  000888  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 12449  00088A  E102               	bnz	u17835
 12450  00088C  5166               	movf	?_stristr& (0+255),w,b
 12451  00088E  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 12452  000890                     u17835:
 12453  000890  E10A               	bnz	l13467
 12454                           
 12455                           ; BSR set to: 0
 12456                           ;main.c: 691: printErrors();
 12457  000892  ECE7  F010         	call	_printErrors	;wreg free
 12458                           
 12459                           ;main.c: 692: putsUSART((char *) "+OK\r\n");
 12460  000896  0E7F               	movlw	high STR_9
 12461  000898  6E20               	movwf	?_putsUSART+1,c
 12462  00089A  0E80               	movlw	low STR_9
 12463  00089C  6E1F               	movwf	?_putsUSART,c
 12464  00089E  EC25  F029         	call	_putsUSART	;wreg free
 12465                           
 12466                           ;main.c: 693: }
 12467  0008A2  EFB2  F00A         	goto	l13903
 12468  0008A6                     l13467:
 12469                           
 12470                           ; BSR set to: 0
 12471                           ;main.c: 695: else if (cmdbuf == stristr(cmdbuf, "HELP")) {
 12472  0008A6  0E01               	movlw	high _cmdbuf
 12473  0008A8  0100               	movlb	0	; () banked
 12474  0008AA  6F67               	movwf	(?_stristr+1)& (0+255),b
 12475  0008AC  0E24               	movlw	low _cmdbuf
 12476  0008AE  6F66               	movwf	?_stristr& (0+255),b
 12477  0008B0  0E7F               	movlw	high STR_45
 12478  0008B2  6F69               	movwf	(?_stristr+3)& (0+255),b
 12479  0008B4  0EC6               	movlw	low STR_45
 12480  0008B6  6F68               	movwf	(?_stristr+2)& (0+255),b
 12481  0008B8  ECB7  F026         	call	_stristr	;wreg free
 12482  0008BC  0E24               	movlw	low _cmdbuf
 12483  0008BE  6FC1               	movwf	??_doModeVerbose& (0+255),b
 12484  0008C0  0E01               	movlw	high _cmdbuf
 12485  0008C2  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12486  0008C4  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 12487  0008C6  E102               	bnz	u17845
 12488  0008C8  5166               	movf	?_stristr& (0+255),w,b
 12489  0008CA  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 12490  0008CC                     u17845:
 12491  0008CC  E10A               	bnz	l13471
 12492                           
 12493                           ; BSR set to: 0
 12494                           ;main.c: 696: printHelp();
 12495  0008CE  ECA2  F018         	call	_printHelp	;wreg free
 12496                           
 12497                           ;main.c: 697: putsUSART((char *) "+OK\r\n");
 12498  0008D2  0E7F               	movlw	high STR_9
 12499  0008D4  6E20               	movwf	?_putsUSART+1,c
 12500  0008D6  0E80               	movlw	low STR_9
 12501  0008D8  6E1F               	movwf	?_putsUSART,c
 12502  0008DA  EC25  F029         	call	_putsUSART	;wreg free
 12503                           
 12504                           ;main.c: 698: }
 12505  0008DE  EFB2  F00A         	goto	l13903
 12506  0008E2                     l13471:
 12507                           
 12508                           ; BSR set to: 0
 12509                           ;main.c: 700: else if (cmdbuf == stristr(cmdbuf, "FIND")) {
 12510  0008E2  0E01               	movlw	high _cmdbuf
 12511  0008E4  0100               	movlb	0	; () banked
 12512  0008E6  6F67               	movwf	(?_stristr+1)& (0+255),b
 12513  0008E8  0E24               	movlw	low _cmdbuf
 12514  0008EA  6F66               	movwf	?_stristr& (0+255),b
 12515  0008EC  0E7F               	movlw	high STR_47
 12516  0008EE  6F69               	movwf	(?_stristr+3)& (0+255),b
 12517  0008F0  0EA3               	movlw	low STR_47
 12518  0008F2  6F68               	movwf	(?_stristr+2)& (0+255),b
 12519  0008F4  ECB7  F026         	call	_stristr	;wreg free
 12520  0008F8  0E24               	movlw	low _cmdbuf
 12521  0008FA  6FC1               	movwf	??_doModeVerbose& (0+255),b
 12522  0008FC  0E01               	movlw	high _cmdbuf
 12523  0008FE  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12524  000900  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 12525  000902  E102               	bnz	u17855
 12526  000904  5166               	movf	?_stristr& (0+255),w,b
 12527  000906  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 12528  000908                     u17855:
 12529  000908  E10A               	bnz	l13477
 12530                           
 12531                           ; BSR set to: 0
 12532                           ;main.c: 701: findNodes();
 12533  00090A  EC8D  F01F         	call	_findNodes	;wreg free
 12534                           
 12535                           ;main.c: 702: putsUSART((char *) "+OK\r\n");
 12536  00090E  0E7F               	movlw	high STR_9
 12537  000910  6E20               	movwf	?_putsUSART+1,c
 12538  000912  0E80               	movlw	low STR_9
 12539  000914  6E1F               	movwf	?_putsUSART,c
 12540  000916  EC25  F029         	call	_putsUSART	;wreg free
 12541                           
 12542                           ;main.c: 703: }
 12543  00091A  EFB2  F00A         	goto	l13903
 12544  00091E                     l13477:
 12545                           
 12546                           ; BSR set to: 0
 12547                           ;main.c: 706: else if (cmdbuf == stristr(cmdbuf, "RREG")) {
 12548  00091E  0E01               	movlw	high _cmdbuf
 12549  000920  0100               	movlb	0	; () banked
 12550  000922  6F67               	movwf	(?_stristr+1)& (0+255),b
 12551  000924  0E24               	movlw	low _cmdbuf
 12552  000926  6F66               	movwf	?_stristr& (0+255),b
 12553  000928  0E7F               	movlw	high STR_49
 12554  00092A  6F69               	movwf	(?_stristr+3)& (0+255),b
 12555  00092C  0EA8               	movlw	low STR_49
 12556  00092E  6F68               	movwf	(?_stristr+2)& (0+255),b
 12557  000930  ECB7  F026         	call	_stristr	;wreg free
 12558  000934  0E24               	movlw	low _cmdbuf
 12559  000936  6FC1               	movwf	??_doModeVerbose& (0+255),b
 12560  000938  0E01               	movlw	high _cmdbuf
 12561  00093A  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12562  00093C  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 12563  00093E  E102               	bnz	u17865
 12564  000940  5166               	movf	?_stristr& (0+255),w,b
 12565  000942  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 12566  000944                     u17865:
 12567  000944  E001 D1AB          	bnz	l13607
 12568                           
 12569                           ; BSR set to: 0
 12570                           ;main.c: 708: uint8_t i;
 12571                           ;main.c: 709: uint8_t nodeid;
 12572                           ;main.c: 710: uint8_t page = 0;
 12573  000948  0102               	movlb	2	; () banked
 12574  00094A  6BAD               	clrf	doModeVerbose@page& (0+255),b
 12575                           
 12576                           ; BSR set to: 2
 12577                           ;main.c: 711: uint8_t reg;
 12578                           ;main.c: 712: uint8_t value;
 12579                           ;main.c: 713: uint8_t count = 1;
 12580  00094C  0E01               	movlw	1
 12581  00094E  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12582                           
 12583                           ; BSR set to: 2
 12584                           ;main.c: 715: strcpy(cmdbuf, cmdbuf + 5);
 12585  000950  ECC2  F00A         	call	PL2	;call to abstracted procedure
 12586  000954  EC84  F02B         	call	_strcpy	;wreg free
 12587                           
 12588                           ; BSR set to: 0
 12589                           ;main.c: 716: char *p = strtok(cmdbuf, " ");
 12590  000958  0E01               	movlw	high _cmdbuf
 12591  00095A  EC1B  F00B         	call	PL30	;call to abstracted procedure
 12592  00095E  EC5E  F025         	call	_strtok	;wreg free
 12593  000962  C064  F2B2         	movff	?_strtok,doModeVerbose@p_1117
 12594  000966  C065  F2B3         	movff	?_strtok+1,doModeVerbose@p_1117+1
 12595                           
 12596                           ; BSR set to: 0
 12597                           ;main.c: 717: if ((0) != p) {
 12598  00096A  0102               	movlb	2	; () banked
 12599  00096C  51B3               	movf	(doModeVerbose@p_1117+1)& (0+255),w,b
 12600  00096E  11B2               	iorwf	doModeVerbose@p_1117& (0+255),w,b
 12601  000970  E00A               	bz	l13491
 12602                           
 12603                           ; BSR set to: 2
 12604                           ;main.c: 718: nodeid = atoi(p);
 12605  000972  C2B2  F024         	movff	doModeVerbose@p_1117,?_atoi
 12606  000976  C2B3  F025         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12607  00097A  EC2A  F01D         	call	_atoi	;wreg free
 12608  00097E  5024               	movf	?_atoi,w,c
 12609  000980  0102               	movlb	2	; () banked
 12610  000982  6F8C               	movwf	doModeVerbose@nodeid& (0+255),b
 12611                           
 12612                           ;main.c: 719: }
 12613  000984  D008               	goto	l13495
 12614  000986                     l13491:
 12615                           
 12616                           ; BSR set to: 2
 12617                           ;main.c: 720: else {
 12618                           ;main.c: 721: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 12619  000986  0E7C               	movlw	high STR_51
 12620  000988  6E20               	movwf	?_putsUSART+1,c
 12621  00098A  0E31               	movlw	low STR_51
 12622  00098C  6E1F               	movwf	?_putsUSART,c
 12623  00098E  EC25  F029         	call	_putsUSART	;wreg free
 12624  000992  EFC1  F00A         	goto	l540
 12625  000996                     l13495:
 12626                           
 12627                           ; BSR set to: 2
 12628                           ;main.c: 723: }
 12629                           ;main.c: 725: if ((0) != (p = strtok((0), " "))) {
 12630  000996  EC09  F00B         	call	PL24	;call to abstracted procedure
 12631  00099A  EC5E  F025         	call	_strtok	;wreg free
 12632  00099E  C064  F2B2         	movff	?_strtok,doModeVerbose@p_1117
 12633  0009A2  C065  F2B3         	movff	?_strtok+1,doModeVerbose@p_1117+1
 12634  0009A6  0102               	movlb	2	; () banked
 12635  0009A8  51B3               	movf	(doModeVerbose@p_1117+1)& (0+255),w,b
 12636  0009AA  11B2               	iorwf	doModeVerbose@p_1117& (0+255),w,b
 12637  0009AC  E033               	bz	l13503
 12638                           
 12639                           ; BSR set to: 2
 12640                           ;main.c: 727: char *preg;
 12641                           ;main.c: 728: if (preg = strchr(p, ':')) {
 12642  0009AE  C2B2  F01E         	movff	doModeVerbose@p_1117,?_strchr
 12643  0009B2  C2B3  F01F         	movff	doModeVerbose@p_1117+1,?_strchr+1
 12644  0009B6  6A21               	clrf	?_strchr+3,c
 12645  0009B8  0E3A               	movlw	58
 12646  0009BA  6E20               	movwf	?_strchr+2,c
 12647  0009BC  EC9E  F028         	call	_strchr	;wreg free
 12648  0009C0  C01E  F284         	movff	?_strchr,doModeVerbose@preg
 12649  0009C4  C01F  F285         	movff	?_strchr+1,doModeVerbose@preg+1
 12650  0009C8  0102               	movlb	2	; () banked
 12651  0009CA  5185               	movf	(doModeVerbose@preg+1)& (0+255),w,b
 12652  0009CC  1184               	iorwf	doModeVerbose@preg& (0+255),w,b
 12653  0009CE  E018               	bz	l13501
 12654                           
 12655                           ; BSR set to: 2
 12656                           ;main.c: 729: page = atoi(p);
 12657  0009D0  C2B2  F024         	movff	doModeVerbose@p_1117,?_atoi
 12658  0009D4  C2B3  F025         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12659  0009D8  EC2A  F01D         	call	_atoi	;wreg free
 12660  0009DC  5024               	movf	?_atoi,w,c
 12661  0009DE  0102               	movlb	2	; () banked
 12662  0009E0  6FAD               	movwf	doModeVerbose@page& (0+255),b
 12663                           
 12664                           ;main.c: 730: reg = atoi(preg + 1);
 12665  0009E2  2984               	incf	doModeVerbose@preg& (0+255),w,b
 12666  0009E4  0100               	movlb	0	; () banked
 12667  0009E6  6FC1               	movwf	??_doModeVerbose& (0+255),b
 12668  0009E8  0E00               	movlw	0
 12669  0009EA  0102               	movlb	2	; () banked
 12670  0009EC  2185               	addwfc	(doModeVerbose@preg+1)& (0+255),w,b
 12671  0009EE  0100               	movlb	0	; () banked
 12672  0009F0  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 12673  0009F2  C0C1  F024         	movff	??_doModeVerbose,?_atoi
 12674  0009F6  C0C2  F025         	movff	??_doModeVerbose+1,?_atoi+1
 12675  0009FA  EC2A  F01D         	call	_atoi	;wreg free
 12676  0009FE  D006               	goto	L6
 12677  000A00                     l13501:
 12678                           
 12679                           ; BSR set to: 2
 12680                           ;main.c: 732: else {
 12681                           ;main.c: 733: reg = atoi(p);
 12682  000A00  C2B2  F024         	movff	doModeVerbose@p_1117,?_atoi
 12683  000A04  C2B3  F025         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12684  000A08  EC2A  F01D         	call	_atoi	;wreg free
 12685  000A0C                     L6:
 12686  000A0C  5024               	movf	?_atoi,w,c
 12687  000A0E  0102               	movlb	2	; () banked
 12688  000A10  6FAE               	movwf	doModeVerbose@reg& (0+255),b
 12689  000A12  D008               	goto	l13507
 12690  000A14                     l13503:
 12691                           
 12692                           ; BSR set to: 2
 12693                           ;main.c: 738: else {
 12694                           ;main.c: 739: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 12695  000A14  0E7A               	movlw	high STR_53
 12696  000A16  6E20               	movwf	?_putsUSART+1,c
 12697  000A18  0EAC               	movlw	low STR_53
 12698  000A1A  6E1F               	movwf	?_putsUSART,c
 12699  000A1C  EC25  F029         	call	_putsUSART	;wreg free
 12700  000A20  EFC1  F00A         	goto	l540
 12701  000A24                     l13507:
 12702                           
 12703                           ; BSR set to: 2
 12704                           ;main.c: 741: }
 12705                           ;main.c: 744: if ((0) != (p = strtok((0), " "))) {
 12706  000A24  EC09  F00B         	call	PL24	;call to abstracted procedure
 12707  000A28  EC5E  F025         	call	_strtok	;wreg free
 12708  000A2C  C064  F2B2         	movff	?_strtok,doModeVerbose@p_1117
 12709  000A30  C065  F2B3         	movff	?_strtok+1,doModeVerbose@p_1117+1
 12710  000A34  0102               	movlb	2	; () banked
 12711  000A36  51B3               	movf	(doModeVerbose@p_1117+1)& (0+255),w,b
 12712  000A38  11B2               	iorwf	doModeVerbose@p_1117& (0+255),w,b
 12713  000A3A  E00D               	bz	l545
 12714                           
 12715                           ; BSR set to: 2
 12716                           ;main.c: 745: count = atoi(p);
 12717  000A3C  C2B2  F024         	movff	doModeVerbose@p_1117,?_atoi
 12718  000A40  C2B3  F025         	movff	doModeVerbose@p_1117+1,?_atoi+1
 12719  000A44  EC2A  F01D         	call	_atoi	;wreg free
 12720  000A48  5024               	movf	?_atoi,w,c
 12721  000A4A  0102               	movlb	2	; () banked
 12722  000A4C  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12723                           
 12724                           ; BSR set to: 2
 12725                           ;main.c: 746: if (0 == count) count = 1;
 12726  000A4E  67AB               	tstfsz	doModeVerbose@count& (0+255),b
 12727  000A50  D002               	goto	l545
 12728                           
 12729                           ; BSR set to: 2
 12730  000A52  0E01               	movlw	1
 12731  000A54  6FAB               	movwf	doModeVerbose@count& (0+255),b
 12732  000A56                     l545:
 12733                           
 12734                           ; BSR set to: 2
 12735                           ;main.c: 747: }
 12736                           ;main.c: 749: BOOL rv = 1;
 12737  000A56  0E01               	movlw	1
 12738  000A58  6FA0               	movwf	doModeVerbose@rv& (0+255),b
 12739                           
 12740                           ; BSR set to: 2
 12741                           ;main.c: 750: for (i = 0; i < count; i++) {
 12742  000A5A  6BB0               	clrf	doModeVerbose@i_1111& (0+255),b
 12743  000A5C  D10A               	goto	l13599
 12744  000A5E                     l13517:
 12745                           
 12746                           ; BSR set to: 2
 12747                           ;main.c: 752: if (readRegisterExtended(nodeid,
 12748                           ;main.c: 753: page,
 12749                           ;main.c: 754: (reg + i) & 0xff,
 12750                           ;main.c: 755: rwtimeout,
 12751                           ;main.c: 756: &value)) {
 12752  000A5E  0100               	movlb	0	; () banked
 12753  000A60  C2AD  F0AD         	movff	doModeVerbose@page,?_readRegisterExtended
 12754  000A64  6BAE               	clrf	(?_readRegisterExtended+1)& (0+255),b
 12755  000A66  0102               	movlb	2	; () banked
 12756  000A68  51AE               	movf	doModeVerbose@reg& (0+255),w,b
 12757  000A6A  25B0               	addwf	doModeVerbose@i_1111& (0+255),w,b
 12758  000A6C  0100               	movlb	0	; () banked
 12759  000A6E  6FAF               	movwf	(?_readRegisterExtended+2)& (0+255),b
 12760  000A70  C0E1  F0B0         	movff	_rwtimeout,?_readRegisterExtended+3
 12761  000A74  6BB1               	clrf	(?_readRegisterExtended+4)& (0+255),b
 12762  000A76  0E02               	movlw	high doModeVerbose@value
 12763  000A78  6FB3               	movwf	(?_readRegisterExtended+6)& (0+255),b
 12764  000A7A  0EB1               	movlw	low doModeVerbose@value
 12765  000A7C  6FB2               	movwf	(?_readRegisterExtended+5)& (0+255),b
 12766  000A7E  0102               	movlb	2	; () banked
 12767  000A80  518C               	movf	doModeVerbose@nodeid& (0+255),w,b
 12768  000A82  EC00  F020         	call	_readRegisterExtended
 12769  000A86  0900               	iorlw	0
 12770  000A88  E101 D09B          	bz	l549
 12771                           
 12772                           ;main.c: 757: putsUSART((char *) "Value for reg ");
 12773  000A8C  0E7E               	movlw	high STR_55
 12774  000A8E  6E20               	movwf	?_putsUSART+1,c
 12775  000A90  0E5E               	movlw	low STR_55
 12776  000A92  6E1F               	movwf	?_putsUSART,c
 12777  000A94  EC25  F029         	call	_putsUSART	;wreg free
 12778                           
 12779                           ;main.c: 758: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12780  000A98  0100               	movlb	0	; () banked
 12781  000A9A  67DC               	tstfsz	_bHex& (0+255),b
 12782  000A9C  D005               	goto	l13525
 12783                           
 12784                           ; BSR set to: 0
 12785  000A9E  0E7F               	movlw	high STR_57
 12786  000AA0  0102               	movlb	2	; () banked
 12787  000AA2  6F95               	movwf	(_doModeVerbose$1129+1)& (0+255),b
 12788  000AA4  0EEE               	movlw	low STR_57
 12789  000AA6  D004               	goto	L7
 12790  000AA8                     l13525:
 12791                           
 12792                           ; BSR set to: 0
 12793  000AA8  0E7F               	movlw	high STR_56
 12794  000AAA  0102               	movlb	2	; () banked
 12795  000AAC  6F95               	movwf	(_doModeVerbose$1129+1)& (0+255),b
 12796  000AAE  0E65               	movlw	low STR_56
 12797  000AB0                     L7:
 12798  000AB0  6F94               	movwf	_doModeVerbose$1129& (0+255),b
 12799                           
 12800                           ; BSR set to: 2
 12801  000AB2  0E01               	movlw	high _wrkbuf
 12802  000AB4  0100               	movlb	0	; () banked
 12803  000AB6  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 12804  000AB8  0E74               	movlw	low _wrkbuf
 12805  000ABA  6F6D               	movwf	?_sprintf& (0+255),b
 12806  000ABC  C294  F06F         	movff	_doModeVerbose$1129,?_sprintf+2
 12807  000AC0  C295  F070         	movff	_doModeVerbose$1129+1,?_sprintf+3
 12808  000AC4  C2AD  F071         	movff	doModeVerbose@page,?_sprintf+4
 12809  000AC8  6B72               	clrf	(?_sprintf+5)& (0+255),b
 12810  000ACA  EC55  F00B         	call	_sprintf	;wreg free
 12811                           
 12812                           ; BSR set to: 0
 12813                           ;main.c: 759: putsUSART(wrkbuf);
 12814  000ACE  0101               	movlb	1	; () banked
 12815  000AD0  0E01               	movlw	high _wrkbuf
 12816  000AD2  6E20               	movwf	?_putsUSART+1,c
 12817  000AD4  0E74               	movlw	low _wrkbuf
 12818  000AD6  6E1F               	movwf	?_putsUSART,c
 12819  000AD8  EC25  F029         	call	_putsUSART	;wreg free
 12820  000ADC                     l554:
 12821  000ADC  A2AC               	btfss	4012,1,c	;volatile
 12822  000ADE  D7FE               	goto	l554
 12823                           
 12824                           ;main.c: 761: WriteUSART(':');
 12825  000AE0  0E3A               	movlw	58
 12826  000AE2  ECF5  F02B         	call	_WriteUSART
 12827                           
 12828                           ;main.c: 762: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 12829  000AE6  0100               	movlb	0	; () banked
 12830  000AE8  67DC               	tstfsz	_bHex& (0+255),b
 12831  000AEA  D005               	goto	l13537
 12832                           
 12833                           ; BSR set to: 0
 12834  000AEC  0E7F               	movlw	high STR_57
 12835  000AEE  0102               	movlb	2	; () banked
 12836  000AF0  6F97               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12837  000AF2  0EEE               	movlw	low STR_57
 12838  000AF4  D004               	goto	L8
 12839  000AF6                     l13537:
 12840                           
 12841                           ; BSR set to: 0
 12842  000AF6  0E7F               	movlw	high STR_56
 12843  000AF8  0102               	movlb	2	; () banked
 12844  000AFA  6F97               	movwf	(_doModeVerbose$1141+1)& (0+255),b
 12845  000AFC  0E65               	movlw	low STR_56
 12846  000AFE                     L8:
 12847  000AFE  6F96               	movwf	_doModeVerbose$1141& (0+255),b
 12848                           
 12849                           ; BSR set to: 2
 12850  000B00  0E01               	movlw	high _wrkbuf
 12851  000B02  0100               	movlb	0	; () banked
 12852  000B04  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 12853  000B06  0E74               	movlw	low _wrkbuf
 12854  000B08  6F6D               	movwf	?_sprintf& (0+255),b
 12855  000B0A  C296  F06F         	movff	_doModeVerbose$1141,?_sprintf+2
 12856  000B0E  C297  F070         	movff	_doModeVerbose$1141+1,?_sprintf+3
 12857  000B12  EC24  F00B         	call	PL38	;call to abstracted procedure
 12858  000B16  EC55  F00B         	call	_sprintf	;wreg free
 12859                           
 12860                           ; BSR set to: 0
 12861                           ;main.c: 763: putsUSART(wrkbuf);
 12862  000B1A  0101               	movlb	1	; () banked
 12863  000B1C  0E01               	movlw	high _wrkbuf
 12864  000B1E  6E20               	movwf	?_putsUSART+1,c
 12865  000B20  0E74               	movlw	low _wrkbuf
 12866  000B22  6E1F               	movwf	?_putsUSART,c
 12867  000B24  EC25  F029         	call	_putsUSART	;wreg free
 12868                           
 12869                           ;main.c: 764: putsUSART((char *) " = ");
 12870  000B28  0E7E               	movlw	high (STR_243+4)
 12871  000B2A  6E20               	movwf	?_putsUSART+1,c
 12872  000B2C  0EEA               	movlw	low (STR_243+4)
 12873  000B2E  6E1F               	movwf	?_putsUSART,c
 12874  000B30  EC25  F029         	call	_putsUSART	;wreg free
 12875                           
 12876                           ;main.c: 765: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", value);
 12877  000B34  0100               	movlb	0	; () banked
 12878  000B36  67DC               	tstfsz	_bHex& (0+255),b
 12879  000B38  D005               	goto	l13549
 12880                           
 12881                           ; BSR set to: 0
 12882  000B3A  0E7F               	movlw	high STR_57
 12883  000B3C  0102               	movlb	2	; () banked
 12884  000B3E  6F99               	movwf	(_doModeVerbose$1146+1)& (0+255),b
 12885  000B40  0EEE               	movlw	low STR_57
 12886  000B42  D004               	goto	L9
 12887  000B44                     l13549:
 12888                           
 12889                           ; BSR set to: 0
 12890  000B44  0E7F               	movlw	high STR_56
 12891  000B46  0102               	movlb	2	; () banked
 12892  000B48  6F99               	movwf	(_doModeVerbose$1146+1)& (0+255),b
 12893  000B4A  0E65               	movlw	low STR_56
 12894  000B4C                     L9:
 12895  000B4C  6F98               	movwf	_doModeVerbose$1146& (0+255),b
 12896                           
 12897                           ; BSR set to: 2
 12898  000B4E  0E01               	movlw	high _wrkbuf
 12899  000B50  0100               	movlb	0	; () banked
 12900  000B52  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 12901  000B54  0E74               	movlw	low _wrkbuf
 12902  000B56  6F6D               	movwf	?_sprintf& (0+255),b
 12903  000B58  C298  F06F         	movff	_doModeVerbose$1146,?_sprintf+2
 12904  000B5C  C299  F070         	movff	_doModeVerbose$1146+1,?_sprintf+3
 12905  000B60  C2B1  F071         	movff	doModeVerbose@value,?_sprintf+4
 12906  000B64  6B72               	clrf	(?_sprintf+5)& (0+255),b
 12907  000B66  EC55  F00B         	call	_sprintf	;wreg free
 12908                           
 12909                           ; BSR set to: 0
 12910                           ;main.c: 766: putsUSART(wrkbuf);
 12911  000B6A  0101               	movlb	1	; () banked
 12912  000B6C  0E01               	movlw	high _wrkbuf
 12913  000B6E  6E20               	movwf	?_putsUSART+1,c
 12914  000B70  0E74               	movlw	low _wrkbuf
 12915  000B72  6E1F               	movwf	?_putsUSART,c
 12916  000B74  EC25  F029         	call	_putsUSART	;wreg free
 12917  000B78                     l565:
 12918  000B78  A2AC               	btfss	4012,1,c	;volatile
 12919  000B7A  D7FE               	goto	l565
 12920                           
 12921                           ;main.c: 768: WriteUSART(' ');
 12922  000B7C  0E20               	movlw	32
 12923  000B7E  ECF5  F02B         	call	_WriteUSART
 12924  000B82                     l568:
 12925  000B82  A2AC               	btfss	4012,1,c	;volatile
 12926  000B84  D7FE               	goto	l568
 12927                           
 12928                           ;main.c: 770: if ((value > 32) && (value < 127)) {
 12929  000B86  0E20               	movlw	32
 12930  000B88  0102               	movlb	2	; () banked
 12931  000B8A  65B1               	cpfsgt	doModeVerbose@value& (0+255),b
 12932  000B8C  D007               	goto	l13563
 12933                           
 12934                           ; BSR set to: 2
 12935  000B8E  0E7F               	movlw	127
 12936  000B90  61B1               	cpfslt	doModeVerbose@value& (0+255),b
 12937  000B92  D004               	goto	l13563
 12938                           
 12939                           ; BSR set to: 2
 12940                           ;main.c: 771: WriteUSART(value);
 12941  000B94  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12942  000B96  ECF5  F02B         	call	_WriteUSART
 12943                           
 12944                           ;main.c: 772: }
 12945  000B9A  D003               	goto	l573
 12946  000B9C                     l13563:
 12947                           
 12948                           ; BSR set to: 2
 12949                           ;main.c: 773: else {
 12950                           ;main.c: 774: WriteUSART('.');
 12951  000B9C  0E2E               	movlw	46
 12952  000B9E  ECF5  F02B         	call	_WriteUSART
 12953  000BA2                     l573:
 12954  000BA2  A2AC               	btfss	4012,1,c	;volatile
 12955  000BA4  D7FE               	goto	l573
 12956                           
 12957                           ;main.c: 777: WriteUSART(' ');
 12958  000BA6  0E20               	movlw	32
 12959  000BA8  ECF5  F02B         	call	_WriteUSART
 12960                           
 12961                           ;main.c: 778: printBinary(value);
 12962  000BAC  0102               	movlb	2	; () banked
 12963  000BAE  51B1               	movf	doModeVerbose@value& (0+255),w,b
 12964  000BB0  ECBF  F029         	call	_printBinary
 12965                           
 12966                           ;main.c: 779: putsUSART((char *) "\r\n");
 12967  000BB4  0E74               	movlw	high (STR_197+50)
 12968  000BB6  6E20               	movwf	?_putsUSART+1,c
 12969  000BB8  0EC0               	movlw	low (STR_197+50)
 12970  000BBA  6E1F               	movwf	?_putsUSART,c
 12971  000BBC  EC25  F029         	call	_putsUSART	;wreg free
 12972                           
 12973                           ;main.c: 780: }
 12974  000BC0  D056               	goto	l13597
 12975  000BC2                     l549:
 12976                           
 12977                           ;main.c: 781: else {
 12978                           ;main.c: 782: rv = 0;
 12979  000BC2  0102               	movlb	2	; () banked
 12980  000BC4  6BA0               	clrf	doModeVerbose@rv& (0+255),b
 12981                           
 12982                           ; BSR set to: 2
 12983                           ;main.c: 783: putsUSART((char *) "-ERROR - Unable to read register ");
 12984  000BC6  0E7A               	movlw	high STR_64
 12985  000BC8  6E20               	movwf	?_putsUSART+1,c
 12986  000BCA  0E06               	movlw	low STR_64
 12987  000BCC  6E1F               	movwf	?_putsUSART,c
 12988  000BCE  EC25  F029         	call	_putsUSART	;wreg free
 12989                           
 12990                           ;main.c: 784: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", page);
 12991  000BD2  0100               	movlb	0	; () banked
 12992  000BD4  67DC               	tstfsz	_bHex& (0+255),b
 12993  000BD6  D005               	goto	l13577
 12994                           
 12995                           ; BSR set to: 0
 12996  000BD8  0E7F               	movlw	high STR_57
 12997  000BDA  0102               	movlb	2	; () banked
 12998  000BDC  6F9B               	movwf	(_doModeVerbose$1152+1)& (0+255),b
 12999  000BDE  0EEE               	movlw	low STR_57
 13000  000BE0  D004               	goto	L10
 13001  000BE2                     l13577:
 13002                           
 13003                           ; BSR set to: 0
 13004  000BE2  0E7F               	movlw	high STR_56
 13005  000BE4  0102               	movlb	2	; () banked
 13006  000BE6  6F9B               	movwf	(_doModeVerbose$1152+1)& (0+255),b
 13007  000BE8  0E65               	movlw	low STR_56
 13008  000BEA                     L10:
 13009  000BEA  6F9A               	movwf	_doModeVerbose$1152& (0+255),b
 13010                           
 13011                           ; BSR set to: 2
 13012  000BEC  0E01               	movlw	high _wrkbuf
 13013  000BEE  0100               	movlb	0	; () banked
 13014  000BF0  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 13015  000BF2  0E74               	movlw	low _wrkbuf
 13016  000BF4  6F6D               	movwf	?_sprintf& (0+255),b
 13017  000BF6  C29A  F06F         	movff	_doModeVerbose$1152,?_sprintf+2
 13018  000BFA  C29B  F070         	movff	_doModeVerbose$1152+1,?_sprintf+3
 13019  000BFE  C2AD  F071         	movff	doModeVerbose@page,?_sprintf+4
 13020  000C02  6B72               	clrf	(?_sprintf+5)& (0+255),b
 13021  000C04  EC55  F00B         	call	_sprintf	;wreg free
 13022                           
 13023                           ; BSR set to: 0
 13024                           ;main.c: 785: putsUSART(wrkbuf);
 13025  000C08  0101               	movlb	1	; () banked
 13026  000C0A  0E01               	movlw	high _wrkbuf
 13027  000C0C  6E20               	movwf	?_putsUSART+1,c
 13028  000C0E  0E74               	movlw	low _wrkbuf
 13029  000C10  6E1F               	movwf	?_putsUSART,c
 13030  000C12  EC25  F029         	call	_putsUSART	;wreg free
 13031  000C16                     l581:
 13032  000C16  A2AC               	btfss	4012,1,c	;volatile
 13033  000C18  D7FE               	goto	l581
 13034                           
 13035                           ;main.c: 787: WriteUSART(':');
 13036  000C1A  0E3A               	movlw	58
 13037  000C1C  ECF5  F02B         	call	_WriteUSART
 13038                           
 13039                           ;main.c: 788: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", (reg + i) & 0xff);
 13040  000C20  0100               	movlb	0	; () banked
 13041  000C22  67DC               	tstfsz	_bHex& (0+255),b
 13042  000C24  D005               	goto	l13589
 13043                           
 13044                           ; BSR set to: 0
 13045  000C26  0E7F               	movlw	high STR_57
 13046  000C28  0102               	movlb	2	; () banked
 13047  000C2A  6F9D               	movwf	(_doModeVerbose$1156+1)& (0+255),b
 13048  000C2C  0EEE               	movlw	low STR_57
 13049  000C2E  D004               	goto	L11
 13050  000C30                     l13589:
 13051                           
 13052                           ; BSR set to: 0
 13053  000C30  0E7F               	movlw	high STR_56
 13054  000C32  0102               	movlb	2	; () banked
 13055  000C34  6F9D               	movwf	(_doModeVerbose$1156+1)& (0+255),b
 13056  000C36  0E65               	movlw	low STR_56
 13057  000C38                     L11:
 13058  000C38  6F9C               	movwf	_doModeVerbose$1156& (0+255),b
 13059                           
 13060                           ; BSR set to: 2
 13061  000C3A  0E01               	movlw	high _wrkbuf
 13062  000C3C  0100               	movlb	0	; () banked
 13063  000C3E  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 13064  000C40  0E74               	movlw	low _wrkbuf
 13065  000C42  6F6D               	movwf	?_sprintf& (0+255),b
 13066  000C44  C29C  F06F         	movff	_doModeVerbose$1156,?_sprintf+2
 13067  000C48  C29D  F070         	movff	_doModeVerbose$1156+1,?_sprintf+3
 13068  000C4C  EC24  F00B         	call	PL38	;call to abstracted procedure
 13069  000C50  EC55  F00B         	call	_sprintf	;wreg free
 13070                           
 13071                           ; BSR set to: 0
 13072                           ;main.c: 789: putsUSART(wrkbuf);
 13073  000C54  0101               	movlb	1	; () banked
 13074  000C56  0E01               	movlw	high _wrkbuf
 13075  000C58  6E20               	movwf	?_putsUSART+1,c
 13076  000C5A  0E74               	movlw	low _wrkbuf
 13077  000C5C  6E1F               	movwf	?_putsUSART,c
 13078  000C5E  EC25  F029         	call	_putsUSART	;wreg free
 13079                           
 13080                           ;main.c: 790: putsUSART((char *) "\r\n");
 13081  000C62  0E74               	movlw	high (STR_197+50)
 13082  000C64  6E20               	movwf	?_putsUSART+1,c
 13083  000C66  0EC0               	movlw	low (STR_197+50)
 13084  000C68  6E1F               	movwf	?_putsUSART,c
 13085  000C6A  EC25  F029         	call	_putsUSART	;wreg free
 13086  000C6E                     l13597:
 13087  000C6E  0102               	movlb	2	; () banked
 13088  000C70  2BB0               	incf	doModeVerbose@i_1111& (0+255),f,b
 13089  000C72                     l13599:
 13090                           
 13091                           ; BSR set to: 2
 13092  000C72  51AB               	movf	doModeVerbose@count& (0+255),w,b
 13093  000C74  5DB0               	subwf	doModeVerbose@i_1111& (0+255),w,b
 13094  000C76  E201 D6F2          	bnc	l13517
 13095                           
 13096                           ; BSR set to: 2
 13097                           ;main.c: 791: }
 13098                           ;main.c: 792: }
 13099                           ;main.c: 794: if (rv) {
 13100  000C7A  51A0               	movf	doModeVerbose@rv& (0+255),w,b
 13101  000C7C  E008               	bz	l13605
 13102                           
 13103                           ; BSR set to: 2
 13104                           ;main.c: 795: putsUSART((char *) "+OK\r\n");
 13105  000C7E  0E7F               	movlw	high STR_9
 13106  000C80  6E20               	movwf	?_putsUSART+1,c
 13107  000C82  0E80               	movlw	low STR_9
 13108  000C84  6E1F               	movwf	?_putsUSART,c
 13109  000C86  EC25  F029         	call	_putsUSART	;wreg free
 13110                           
 13111                           ;main.c: 796: }
 13112  000C8A  EFB2  F00A         	goto	l13903
 13113  000C8E                     l13605:
 13114                           
 13115                           ; BSR set to: 2
 13116                           ;main.c: 797: else {
 13117                           ;main.c: 798: putsUSART((char *) "-ERROR - One or more register(s) could not be read.\r\
      +                          n");
 13118  000C8E  0E74               	movlw	high STR_71
 13119  000C90  6E20               	movwf	?_putsUSART+1,c
 13120  000C92  0E58               	movlw	low STR_71
 13121  000C94  6E1F               	movwf	?_putsUSART,c
 13122  000C96  EC25  F029         	call	_putsUSART	;wreg free
 13123  000C9A  EFB2  F00A         	goto	l13903
 13124  000C9E                     l13607:
 13125                           
 13126                           ; BSR set to: 0
 13127                           ;main.c: 804: else if (cmdbuf == stristr(cmdbuf, "WREG")) {
 13128  000C9E  0E01               	movlw	high _cmdbuf
 13129  000CA0  0100               	movlb	0	; () banked
 13130  000CA2  6F67               	movwf	(?_stristr+1)& (0+255),b
 13131  000CA4  0E24               	movlw	low _cmdbuf
 13132  000CA6  6F66               	movwf	?_stristr& (0+255),b
 13133  000CA8  0E7F               	movlw	high STR_72
 13134  000CAA  6F69               	movwf	(?_stristr+3)& (0+255),b
 13135  000CAC  0EAD               	movlw	low STR_72
 13136  000CAE  6F68               	movwf	(?_stristr+2)& (0+255),b
 13137  000CB0  ECB7  F026         	call	_stristr	;wreg free
 13138  000CB4  0E24               	movlw	low _cmdbuf
 13139  000CB6  6FC1               	movwf	??_doModeVerbose& (0+255),b
 13140  000CB8  0E01               	movlw	high _cmdbuf
 13141  000CBA  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13142  000CBC  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 13143  000CBE  E102               	bnz	u18075
 13144  000CC0  5166               	movf	?_stristr& (0+255),w,b
 13145  000CC2  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 13146  000CC4                     u18075:
 13147  000CC4  E001 D0A9          	bnz	l13649
 13148                           
 13149                           ; BSR set to: 0
 13150                           ;main.c: 806: uint8_t nodeid;
 13151                           ;main.c: 807: uint8_t page = 0;
 13152  000CC8  0102               	movlb	2	; () banked
 13153  000CCA  6BA1               	clrf	doModeVerbose@page_1162& (0+255),b
 13154                           
 13155                           ; BSR set to: 2
 13156                           ;main.c: 808: uint8_t reg;
 13157                           ;main.c: 809: uint8_t value;
 13158                           ;main.c: 811: strcpy(cmdbuf, cmdbuf + 5);
 13159  000CCC  ECC2  F00A         	call	PL2	;call to abstracted procedure
 13160  000CD0  EC84  F02B         	call	_strcpy	;wreg free
 13161                           
 13162                           ; BSR set to: 0
 13163                           ;main.c: 812: char *p = strtok(cmdbuf, " ");
 13164  000CD4  0E01               	movlw	high _cmdbuf
 13165  000CD6  EC1B  F00B         	call	PL30	;call to abstracted procedure
 13166  000CDA  EC5E  F025         	call	_strtok	;wreg free
 13167  000CDE  C064  F2B4         	movff	?_strtok,doModeVerbose@p_1165
 13168  000CE2  C065  F2B5         	movff	?_strtok+1,doModeVerbose@p_1165+1
 13169                           
 13170                           ; BSR set to: 0
 13171                           ;main.c: 813: if ((0) != p) {
 13172  000CE6  0102               	movlb	2	; () banked
 13173  000CE8  51B5               	movf	(doModeVerbose@p_1165+1)& (0+255),w,b
 13174  000CEA  11B4               	iorwf	doModeVerbose@p_1165& (0+255),w,b
 13175  000CEC  E00A               	bz	l13619
 13176                           
 13177                           ; BSR set to: 2
 13178                           ;main.c: 814: nodeid = atoi(p);
 13179  000CEE  C2B4  F024         	movff	doModeVerbose@p_1165,?_atoi
 13180  000CF2  C2B5  F025         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13181  000CF6  EC2A  F01D         	call	_atoi	;wreg free
 13182  000CFA  5024               	movf	?_atoi,w,c
 13183  000CFC  0102               	movlb	2	; () banked
 13184  000CFE  6F8D               	movwf	doModeVerbose@nodeid_1161& (0+255),b
 13185                           
 13186                           ;main.c: 815: }
 13187  000D00  D008               	goto	l13623
 13188  000D02                     l13619:
 13189                           
 13190                           ; BSR set to: 2
 13191                           ;main.c: 816: else {
 13192                           ;main.c: 817: putsUSART((char *) "-ERROR - Needs nodeid\r\n");
 13193  000D02  0E7C               	movlw	high STR_51
 13194  000D04  6E20               	movwf	?_putsUSART+1,c
 13195  000D06  0E31               	movlw	low STR_51
 13196  000D08  6E1F               	movwf	?_putsUSART,c
 13197  000D0A  EC25  F029         	call	_putsUSART	;wreg free
 13198  000D0E  EFC1  F00A         	goto	l540
 13199  000D12                     l13623:
 13200                           
 13201                           ; BSR set to: 2
 13202                           ;main.c: 819: }
 13203                           ;main.c: 821: if ( (0) != ( p = strtok((0), " ") ) ) {
 13204  000D12  EC09  F00B         	call	PL24	;call to abstracted procedure
 13205  000D16  EC5E  F025         	call	_strtok	;wreg free
 13206  000D1A  C064  F2B4         	movff	?_strtok,doModeVerbose@p_1165
 13207  000D1E  C065  F2B5         	movff	?_strtok+1,doModeVerbose@p_1165+1
 13208  000D22  0102               	movlb	2	; () banked
 13209  000D24  51B5               	movf	(doModeVerbose@p_1165+1)& (0+255),w,b
 13210  000D26  11B4               	iorwf	doModeVerbose@p_1165& (0+255),w,b
 13211  000D28  E033               	bz	l13631
 13212                           
 13213                           ; BSR set to: 2
 13214                           ;main.c: 823: char *preg;
 13215                           ;main.c: 824: if (preg = strchr(p, ':')) {
 13216  000D2A  C2B4  F01E         	movff	doModeVerbose@p_1165,?_strchr
 13217  000D2E  C2B5  F01F         	movff	doModeVerbose@p_1165+1,?_strchr+1
 13218  000D32  6A21               	clrf	?_strchr+3,c
 13219  000D34  0E3A               	movlw	58
 13220  000D36  6E20               	movwf	?_strchr+2,c
 13221  000D38  EC9E  F028         	call	_strchr	;wreg free
 13222  000D3C  C01E  F286         	movff	?_strchr,doModeVerbose@preg_1169
 13223  000D40  C01F  F287         	movff	?_strchr+1,doModeVerbose@preg_1169+1
 13224  000D44  0102               	movlb	2	; () banked
 13225  000D46  5187               	movf	(doModeVerbose@preg_1169+1)& (0+255),w,b
 13226  000D48  1186               	iorwf	doModeVerbose@preg_1169& (0+255),w,b
 13227  000D4A  E018               	bz	l13629
 13228                           
 13229                           ; BSR set to: 2
 13230                           ;main.c: 825: page = atoi(p);
 13231  000D4C  C2B4  F024         	movff	doModeVerbose@p_1165,?_atoi
 13232  000D50  C2B5  F025         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13233  000D54  EC2A  F01D         	call	_atoi	;wreg free
 13234  000D58  5024               	movf	?_atoi,w,c
 13235  000D5A  0102               	movlb	2	; () banked
 13236  000D5C  6FA1               	movwf	doModeVerbose@page_1162& (0+255),b
 13237                           
 13238                           ;main.c: 826: reg = atoi(preg + 1);
 13239  000D5E  2986               	incf	doModeVerbose@preg_1169& (0+255),w,b
 13240  000D60  0100               	movlb	0	; () banked
 13241  000D62  6FC1               	movwf	??_doModeVerbose& (0+255),b
 13242  000D64  0E00               	movlw	0
 13243  000D66  0102               	movlb	2	; () banked
 13244  000D68  2187               	addwfc	(doModeVerbose@preg_1169+1)& (0+255),w,b
 13245  000D6A  0100               	movlb	0	; () banked
 13246  000D6C  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13247  000D6E  C0C1  F024         	movff	??_doModeVerbose,?_atoi
 13248  000D72  C0C2  F025         	movff	??_doModeVerbose+1,?_atoi+1
 13249  000D76  EC2A  F01D         	call	_atoi	;wreg free
 13250  000D7A  D006               	goto	L12
 13251  000D7C                     l13629:
 13252                           
 13253                           ; BSR set to: 2
 13254                           ;main.c: 828: else {
 13255                           ;main.c: 829: reg = atoi(p);
 13256  000D7C  C2B4  F024         	movff	doModeVerbose@p_1165,?_atoi
 13257  000D80  C2B5  F025         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13258  000D84  EC2A  F01D         	call	_atoi	;wreg free
 13259  000D88                     L12:
 13260  000D88  5024               	movf	?_atoi,w,c
 13261  000D8A  0102               	movlb	2	; () banked
 13262  000D8C  6FA2               	movwf	doModeVerbose@reg_1163& (0+255),b
 13263  000D8E  D007               	goto	l13635
 13264  000D90                     l13631:
 13265                           
 13266                           ; BSR set to: 2
 13267                           ;main.c: 833: else {
 13268                           ;main.c: 834: putsUSART((char *) "-ERROR - Needs [page:]register\r\n");
 13269  000D90  0E7A               	movlw	high STR_53
 13270  000D92  6E20               	movwf	?_putsUSART+1,c
 13271  000D94  0EAC               	movlw	low STR_53
 13272  000D96  6E1F               	movwf	?_putsUSART,c
 13273  000D98  EC25  F029         	call	_putsUSART	;wreg free
 13274  000D9C  D3F2               	goto	l540
 13275  000D9E                     l13635:
 13276                           
 13277                           ; BSR set to: 2
 13278                           ;main.c: 836: }
 13279                           ;main.c: 839: if ((0) != (p = strtok((0), " "))) {
 13280  000D9E  EC09  F00B         	call	PL24	;call to abstracted procedure
 13281  000DA2  EC5E  F025         	call	_strtok	;wreg free
 13282  000DA6  C064  F2B4         	movff	?_strtok,doModeVerbose@p_1165
 13283  000DAA  C065  F2B5         	movff	?_strtok+1,doModeVerbose@p_1165+1
 13284  000DAE  0102               	movlb	2	; () banked
 13285  000DB0  51B5               	movf	(doModeVerbose@p_1165+1)& (0+255),w,b
 13286  000DB2  11B4               	iorwf	doModeVerbose@p_1165& (0+255),w,b
 13287  000DB4  E00A               	bz	l13639
 13288                           
 13289                           ; BSR set to: 2
 13290                           ;main.c: 840: value = atoi(p);
 13291  000DB6  C2B4  F024         	movff	doModeVerbose@p_1165,?_atoi
 13292  000DBA  C2B5  F025         	movff	doModeVerbose@p_1165+1,?_atoi+1
 13293  000DBE  EC2A  F01D         	call	_atoi	;wreg free
 13294  000DC2  5024               	movf	?_atoi,w,c
 13295  000DC4  0102               	movlb	2	; () banked
 13296  000DC6  6FAA               	movwf	doModeVerbose@value_1164& (0+255),b
 13297                           
 13298                           ;main.c: 841: }
 13299  000DC8  D007               	goto	l13643
 13300  000DCA                     l13639:
 13301                           
 13302                           ; BSR set to: 2
 13303                           ;main.c: 842: else {
 13304                           ;main.c: 843: putsUSART((char *) "-ERROR - Need a value\r\n");
 13305  000DCA  0E7C               	movlw	high STR_78
 13306  000DCC  6E20               	movwf	?_putsUSART+1,c
 13307  000DCE  0E61               	movlw	low STR_78
 13308  000DD0  6E1F               	movwf	?_putsUSART,c
 13309  000DD2  EC25  F029         	call	_putsUSART	;wreg free
 13310  000DD6  D3D5               	goto	l540
 13311  000DD8                     l13643:
 13312                           
 13313                           ; BSR set to: 2
 13314                           ;main.c: 845: }
 13315                           ;main.c: 847: if (writeRegisterExtended(nodeid,
 13316                           ;main.c: 848: page,
 13317                           ;main.c: 849: reg,
 13318                           ;main.c: 850: rwtimeout,
 13319                           ;main.c: 851: &value)) {
 13320  000DD8  0100               	movlb	0	; () banked
 13321  000DDA  C2A1  F0AD         	movff	doModeVerbose@page_1162,?_writeRegisterExtended
 13322  000DDE  6BAE               	clrf	(?_writeRegisterExtended+1)& (0+255),b
 13323  000DE0  C2A2  F0AF         	movff	doModeVerbose@reg_1163,?_writeRegisterExtended+2
 13324  000DE4  C0E1  F0B0         	movff	_rwtimeout,?_writeRegisterExtended+3
 13325  000DE8  6BB1               	clrf	(?_writeRegisterExtended+4)& (0+255),b
 13326  000DEA  0E02               	movlw	high doModeVerbose@value_1164
 13327  000DEC  6FB3               	movwf	(?_writeRegisterExtended+6)& (0+255),b
 13328  000DEE  0EAA               	movlw	low doModeVerbose@value_1164
 13329  000DF0  6FB2               	movwf	(?_writeRegisterExtended+5)& (0+255),b
 13330  000DF2  0102               	movlb	2	; () banked
 13331  000DF4  518D               	movf	doModeVerbose@nodeid_1161& (0+255),w,b
 13332  000DF6  EC2F  F01E         	call	_writeRegisterExtended
 13333  000DFA  0900               	iorlw	0
 13334  000DFC  E007               	bz	l13647
 13335                           
 13336                           ;main.c: 852: putsUSART((char *) "+OK - Value written successfully\r\n");
 13337  000DFE  0E79               	movlw	high STR_79
 13338  000E00  6E20               	movwf	?_putsUSART+1,c
 13339  000E02  0EC1               	movlw	low STR_79
 13340  000E04  6E1F               	movwf	?_putsUSART,c
 13341  000E06  EC25  F029         	call	_putsUSART	;wreg free
 13342                           
 13343                           ;main.c: 853: }
 13344  000E0A  D3AC               	goto	l13903
 13345  000E0C                     l13647:
 13346                           
 13347                           ;main.c: 854: else {
 13348                           ;main.c: 855: putsUSART((char *) "-ERROR - Failed to write value\r\n");
 13349  000E0C  0E7A               	movlw	high STR_80
 13350  000E0E  6E20               	movwf	?_putsUSART+1,c
 13351  000E10  0E8B               	movlw	low STR_80
 13352  000E12  6E1F               	movwf	?_putsUSART,c
 13353  000E14  EC25  F029         	call	_putsUSART	;wreg free
 13354  000E18  D3A5               	goto	l13903
 13355  000E1A                     l13649:
 13356                           
 13357                           ; BSR set to: 0
 13358                           ;main.c: 861: else if (cmdbuf == stristr(cmdbuf, "INFO")) {
 13359  000E1A  0E01               	movlw	high _cmdbuf
 13360  000E1C  0100               	movlb	0	; () banked
 13361  000E1E  6F67               	movwf	(?_stristr+1)& (0+255),b
 13362  000E20  0E24               	movlw	low _cmdbuf
 13363  000E22  6F66               	movwf	?_stristr& (0+255),b
 13364  000E24  0E7F               	movlw	high STR_81
 13365  000E26  6F69               	movwf	(?_stristr+3)& (0+255),b
 13366  000E28  0EBC               	movlw	low STR_81
 13367  000E2A  6F68               	movwf	(?_stristr+2)& (0+255),b
 13368  000E2C  ECB7  F026         	call	_stristr	;wreg free
 13369  000E30  0E24               	movlw	low _cmdbuf
 13370  000E32  6FC1               	movwf	??_doModeVerbose& (0+255),b
 13371  000E34  0E01               	movlw	high _cmdbuf
 13372  000E36  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13373  000E38  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 13374  000E3A  E102               	bnz	u18135
 13375  000E3C  5166               	movf	?_stristr& (0+255),w,b
 13376  000E3E  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 13377  000E40                     u18135:
 13378  000E40  E14E               	bnz	l13677
 13379                           
 13380                           ; BSR set to: 0
 13381                           ;main.c: 862: uint8_t nodeid;
 13382                           ;main.c: 864: strcpy(cmdbuf, cmdbuf + 5);
 13383  000E42  DBA0               	call	PL2	;call to abstracted procedure
 13384  000E44  EC84  F02B         	call	_strcpy	;wreg free
 13385                           
 13386                           ; BSR set to: 0
 13387                           ;main.c: 865: nodeid = atoi(cmdbuf);
 13388  000E48  0101               	movlb	1	; () banked
 13389  000E4A  0E01               	movlw	high _cmdbuf
 13390  000E4C  6E25               	movwf	?_atoi+1,c
 13391  000E4E  0E24               	movlw	low _cmdbuf
 13392  000E50  6E24               	movwf	?_atoi,c
 13393  000E52  EC2A  F01D         	call	_atoi	;wreg free
 13394  000E56  5024               	movf	?_atoi,w,c
 13395  000E58  0102               	movlb	2	; () banked
 13396  000E5A  6FAF               	movwf	doModeVerbose@nodeid_1176& (0+255),b
 13397                           
 13398                           ; BSR set to: 2
 13399                           ;main.c: 867: putsUSART((char *) "Info for node id = ");
 13400  000E5C  0E7D               	movlw	high STR_82
 13401  000E5E  6E20               	movwf	?_putsUSART+1,c
 13402  000E60  0EAB               	movlw	low STR_82
 13403  000E62  6E1F               	movwf	?_putsUSART,c
 13404  000E64  EC25  F029         	call	_putsUSART	;wreg free
 13405                           
 13406                           ;main.c: 868: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", nodeid);
 13407  000E68  0100               	movlb	0	; () banked
 13408  000E6A  67DC               	tstfsz	_bHex& (0+255),b
 13409  000E6C  D005               	goto	l13661
 13410                           
 13411                           ; BSR set to: 0
 13412  000E6E  0E7F               	movlw	high STR_57
 13413  000E70  0102               	movlb	2	; () banked
 13414  000E72  6F9F               	movwf	(_doModeVerbose$1181+1)& (0+255),b
 13415  000E74  0EEE               	movlw	low STR_57
 13416  000E76  D004               	goto	L13
 13417  000E78                     l13661:
 13418                           
 13419                           ; BSR set to: 0
 13420  000E78  0E7F               	movlw	high STR_56
 13421  000E7A  0102               	movlb	2	; () banked
 13422  000E7C  6F9F               	movwf	(_doModeVerbose$1181+1)& (0+255),b
 13423  000E7E  0E65               	movlw	low STR_56
 13424  000E80                     L13:
 13425  000E80  6F9E               	movwf	_doModeVerbose$1181& (0+255),b
 13426                           
 13427                           ; BSR set to: 2
 13428  000E82  0E01               	movlw	high _wrkbuf
 13429  000E84  0100               	movlb	0	; () banked
 13430  000E86  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 13431  000E88  0E74               	movlw	low _wrkbuf
 13432  000E8A  6F6D               	movwf	?_sprintf& (0+255),b
 13433  000E8C  C29E  F06F         	movff	_doModeVerbose$1181,?_sprintf+2
 13434  000E90  C29F  F070         	movff	_doModeVerbose$1181+1,?_sprintf+3
 13435  000E94  C2AF  F071         	movff	doModeVerbose@nodeid_1176,?_sprintf+4
 13436  000E98  6B72               	clrf	(?_sprintf+5)& (0+255),b
 13437  000E9A  EC55  F00B         	call	_sprintf	;wreg free
 13438                           
 13439                           ; BSR set to: 0
 13440                           ;main.c: 869: putsUSART(wrkbuf);
 13441  000E9E  0101               	movlb	1	; () banked
 13442  000EA0  0E01               	movlw	high _wrkbuf
 13443  000EA2  6E20               	movwf	?_putsUSART+1,c
 13444  000EA4  0E74               	movlw	low _wrkbuf
 13445  000EA6  6E1F               	movwf	?_putsUSART,c
 13446  000EA8  EC25  F029         	call	_putsUSART	;wreg free
 13447                           
 13448                           ;main.c: 870: putsUSART((char *) "\r\n");
 13449  000EAC  0E74               	movlw	high (STR_197+50)
 13450  000EAE  6E20               	movwf	?_putsUSART+1,c
 13451  000EB0  0EC0               	movlw	low (STR_197+50)
 13452  000EB2  6E1F               	movwf	?_putsUSART,c
 13453  000EB4  EC25  F029         	call	_putsUSART	;wreg free
 13454                           
 13455                           ;main.c: 871: printNodeFirmwareVersion(nodeid);
 13456  000EB8  0102               	movlb	2	; () banked
 13457  000EBA  51AF               	movf	doModeVerbose@nodeid_1176& (0+255),w,b
 13458  000EBC  EC48  F021         	call	_printNodeFirmwareVersion
 13459                           
 13460                           ;main.c: 872: printGUID(nodeid);
 13461  000EC0  0102               	movlb	2	; () banked
 13462  000EC2  51AF               	movf	doModeVerbose@nodeid_1176& (0+255),w,b
 13463  000EC4  ECAD  F01D         	call	_printGUID
 13464                           
 13465                           ;main.c: 873: printMDF(nodeid);
 13466  000EC8  0102               	movlb	2	; () banked
 13467  000ECA  51AF               	movf	doModeVerbose@nodeid_1176& (0+255),w,b
 13468  000ECC  ECA9  F025         	call	_printMDF
 13469                           
 13470                           ;main.c: 874: putsUSART((char *) "+OK\r\n");
 13471  000ED0  0E7F               	movlw	high STR_9
 13472  000ED2  6E20               	movwf	?_putsUSART+1,c
 13473  000ED4  0E80               	movlw	low STR_9
 13474  000ED6  6E1F               	movwf	?_putsUSART,c
 13475  000ED8  EC25  F029         	call	_putsUSART	;wreg free
 13476                           
 13477                           ;main.c: 875: }
 13478  000EDC  D343               	goto	l13903
 13479  000EDE                     l13677:
 13480                           
 13481                           ; BSR set to: 0
 13482                           ;main.c: 879: else if (cmdbuf == stristr(cmdbuf, "FILTER")) {
 13483  000EDE  0E01               	movlw	high _cmdbuf
 13484  000EE0  0100               	movlb	0	; () banked
 13485  000EE2  6F67               	movwf	(?_stristr+1)& (0+255),b
 13486  000EE4  0E24               	movlw	low _cmdbuf
 13487  000EE6  6F66               	movwf	?_stristr& (0+255),b
 13488  000EE8  0E7F               	movlw	high STR_87
 13489  000EEA  6F69               	movwf	(?_stristr+3)& (0+255),b
 13490  000EEC  0E57               	movlw	low STR_87
 13491  000EEE  6F68               	movwf	(?_stristr+2)& (0+255),b
 13492  000EF0  ECB7  F026         	call	_stristr	;wreg free
 13493  000EF4  0E24               	movlw	low _cmdbuf
 13494  000EF6  6FC1               	movwf	??_doModeVerbose& (0+255),b
 13495  000EF8  0E01               	movlw	high _cmdbuf
 13496  000EFA  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13497  000EFC  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 13498  000EFE  E102               	bnz	u18155
 13499  000F00  5166               	movf	?_stristr& (0+255),w,b
 13500  000F02  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 13501  000F04                     u18155:
 13502  000F04  E001 D0CF          	bnz	l13745
 13503                           
 13504                           ; BSR set to: 0
 13505                           ;main.c: 881: uint8_t filterno;
 13506                           ;main.c: 882: uint8_t filter_priority;
 13507                           ;main.c: 883: uint16_t filter_class;
 13508                           ;main.c: 884: uint8_t filter_type;
 13509                           ;main.c: 885: uint8_t filter_nodeid;
 13510                           ;main.c: 887: strcpy(cmdbuf, cmdbuf + 8);
 13511  000F08  0E01               	movlw	high _cmdbuf
 13512  000F0A  DB76               	call	PL12	;call to abstracted procedure
 13513  000F0C  EC84  F02B         	call	_strcpy	;wreg free
 13514                           
 13515                           ; BSR set to: 0
 13516                           ;main.c: 888: char *p = strtok(cmdbuf, ",");
 13517  000F10  DB88               	call	PL26	;call to abstracted procedure
 13518  000F12  EC5E  F025         	call	_strtok	;wreg free
 13519  000F16  C064  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13520  000F1A  C065  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13521                           
 13522                           ; BSR set to: 0
 13523                           ;main.c: 889: if ((0) != p) {
 13524  000F1E  0102               	movlb	2	; () banked
 13525  000F20  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13526  000F22  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13527  000F24  E013               	bz	l13693
 13528                           
 13529                           ; BSR set to: 2
 13530                           ;main.c: 890: filterno = atoi(p);
 13531  000F26  C2B9  F024         	movff	doModeVerbose@p_1190,?_atoi
 13532  000F2A  C2BA  F025         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13533  000F2E  EC2A  F01D         	call	_atoi	;wreg free
 13534  000F32  5024               	movf	?_atoi,w,c
 13535  000F34  0102               	movlb	2	; () banked
 13536  000F36  6FA7               	movwf	doModeVerbose@filterno& (0+255),b
 13537                           
 13538                           ; BSR set to: 2
 13539                           ;main.c: 891: if (filterno > 15) {
 13540  000F38  0E0F               	movlw	15
 13541  000F3A  65A7               	cpfsgt	doModeVerbose@filterno& (0+255),b
 13542  000F3C  D00E               	goto	l13697
 13543                           
 13544                           ; BSR set to: 2
 13545                           ;main.c: 892: putsUSART((char *) "-ERROR - Filter number can only be set to a value betw
      +                          een 0-15.\r\n");
 13546  000F3E  0E72               	movlw	high STR_89
 13547  000F40  6E20               	movwf	?_putsUSART+1,c
 13548  000F42  0E18               	movlw	low STR_89
 13549  000F44  6E1F               	movwf	?_putsUSART,c
 13550  000F46  EC25  F029         	call	_putsUSART	;wreg free
 13551  000F4A  D31B               	goto	l540
 13552  000F4C                     l13693:
 13553                           
 13554                           ; BSR set to: 2
 13555                           ;main.c: 896: else {
 13556                           ;main.c: 897: putsUSART((char *) "-ERROR - No filter number specified.\r\n");
 13557  000F4C  0E77               	movlw	high STR_90
 13558  000F4E  6E20               	movwf	?_putsUSART+1,c
 13559  000F50  0EFB               	movlw	low STR_90
 13560  000F52  6E1F               	movwf	?_putsUSART,c
 13561  000F54  EC25  F029         	call	_putsUSART	;wreg free
 13562  000F58  D314               	goto	l540
 13563  000F5A                     l13697:
 13564                           
 13565                           ; BSR set to: 2
 13566                           ;main.c: 899: }
 13567                           ;main.c: 902: p = strtok((0), ",");
 13568  000F5A  0100               	movlb	0	; () banked
 13569  000F5C  DB21               	call	PL4	;call to abstracted procedure
 13570  000F5E  EC5E  F025         	call	_strtok	;wreg free
 13571  000F62  C064  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13572  000F66  C065  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13573                           
 13574                           ; BSR set to: 0
 13575                           ;main.c: 903: if ((0) != p) {
 13576  000F6A  0102               	movlb	2	; () banked
 13577  000F6C  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13578  000F6E  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13579  000F70  E00A               	bz	l13703
 13580                           
 13581                           ; BSR set to: 2
 13582                           ;main.c: 904: filter_priority = atoi(p);
 13583  000F72  C2B9  F024         	movff	doModeVerbose@p_1190,?_atoi
 13584  000F76  C2BA  F025         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13585  000F7A  EC2A  F01D         	call	_atoi	;wreg free
 13586  000F7E  5024               	movf	?_atoi,w,c
 13587  000F80  0102               	movlb	2	; () banked
 13588  000F82  6F8E               	movwf	doModeVerbose@filter_priority& (0+255),b
 13589                           
 13590                           ;main.c: 905: }
 13591  000F84  D007               	goto	l13707
 13592  000F86                     l13703:
 13593                           
 13594                           ; BSR set to: 2
 13595                           ;main.c: 906: else {
 13596                           ;main.c: 907: putsUSART((char *) "-ERROR - filter for priority is missing\r\n");
 13597  000F86  0E77               	movlw	high STR_92
 13598  000F88  6E20               	movwf	?_putsUSART+1,c
 13599  000F8A  0E30               	movlw	low STR_92
 13600  000F8C  6E1F               	movwf	?_putsUSART,c
 13601  000F8E  EC25  F029         	call	_putsUSART	;wreg free
 13602  000F92  D2F7               	goto	l540
 13603  000F94                     l13707:
 13604                           
 13605                           ; BSR set to: 2
 13606                           ;main.c: 909: }
 13607                           ;main.c: 912: p = strtok((0), ",");
 13608  000F94  0100               	movlb	0	; () banked
 13609  000F96  DB04               	call	PL4	;call to abstracted procedure
 13610  000F98  EC5E  F025         	call	_strtok	;wreg free
 13611  000F9C  C064  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13612  000FA0  C065  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13613                           
 13614                           ; BSR set to: 0
 13615                           ;main.c: 913: if ((0) != p) {
 13616  000FA4  0102               	movlb	2	; () banked
 13617  000FA6  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13618  000FA8  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13619  000FAA  E00B               	bz	l13713
 13620                           
 13621                           ; BSR set to: 2
 13622                           ;main.c: 914: filter_class = atoi(p);
 13623  000FAC  C2B9  F024         	movff	doModeVerbose@p_1190,?_atoi
 13624  000FB0  C2BA  F025         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13625  000FB4  EC2A  F01D         	call	_atoi	;wreg free
 13626  000FB8  C024  F288         	movff	?_atoi,doModeVerbose@filter_class
 13627  000FBC  C025  F289         	movff	?_atoi+1,doModeVerbose@filter_class+1
 13628                           
 13629                           ;main.c: 915: }
 13630  000FC0  D007               	goto	l13717
 13631  000FC2                     l13713:
 13632                           
 13633                           ; BSR set to: 2
 13634                           ;main.c: 916: else {
 13635                           ;main.c: 917: putsUSART((char *) "-ERROR - filter for class is missing\r\n");
 13636  000FC2  0E78               	movlw	high STR_94
 13637  000FC4  6E20               	movwf	?_putsUSART+1,c
 13638  000FC6  0E97               	movlw	low STR_94
 13639  000FC8  6E1F               	movwf	?_putsUSART,c
 13640  000FCA  EC25  F029         	call	_putsUSART	;wreg free
 13641  000FCE  D2D9               	goto	l540
 13642  000FD0                     l13717:
 13643                           
 13644                           ; BSR set to: 0
 13645                           ;main.c: 919: }
 13646                           ;main.c: 922: p = strtok((0), ",");
 13647  000FD0  DAE7               	call	PL4	;call to abstracted procedure
 13648  000FD2  EC5E  F025         	call	_strtok	;wreg free
 13649  000FD6  C064  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13650  000FDA  C065  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13651                           
 13652                           ; BSR set to: 0
 13653                           ;main.c: 923: if ((0) != p) {
 13654  000FDE  0102               	movlb	2	; () banked
 13655  000FE0  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13656  000FE2  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13657  000FE4  E00A               	bz	l13723
 13658                           
 13659                           ; BSR set to: 2
 13660                           ;main.c: 924: filter_type = atoi(p);
 13661  000FE6  C2B9  F024         	movff	doModeVerbose@p_1190,?_atoi
 13662  000FEA  C2BA  F025         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13663  000FEE  EC2A  F01D         	call	_atoi	;wreg free
 13664  000FF2  5024               	movf	?_atoi,w,c
 13665  000FF4  0102               	movlb	2	; () banked
 13666  000FF6  6F8F               	movwf	doModeVerbose@filter_type& (0+255),b
 13667                           
 13668                           ;main.c: 925: }
 13669  000FF8  D007               	goto	l13727
 13670  000FFA                     l13723:
 13671                           
 13672                           ; BSR set to: 2
 13673                           ;main.c: 926: else {
 13674                           ;main.c: 927: putsUSART((char *) "-ERROR - filter for type is missing\r\n");
 13675  000FFA  0E78               	movlw	high STR_96
 13676  000FFC  6E20               	movwf	?_putsUSART+1,c
 13677  000FFE  0EE5               	movlw	low STR_96
 13678  001000  6E1F               	movwf	?_putsUSART,c
 13679  001002  EC25  F029         	call	_putsUSART	;wreg free
 13680  001006  D2BD               	goto	l540
 13681  001008                     l13727:
 13682                           
 13683                           ; BSR set to: 2
 13684                           ;main.c: 929: }
 13685                           ;main.c: 932: p = strtok((0), ",");
 13686  001008  0100               	movlb	0	; () banked
 13687  00100A  DACA               	call	PL4	;call to abstracted procedure
 13688  00100C  EC5E  F025         	call	_strtok	;wreg free
 13689  001010  C064  F2B9         	movff	?_strtok,doModeVerbose@p_1190
 13690  001014  C065  F2BA         	movff	?_strtok+1,doModeVerbose@p_1190+1
 13691                           
 13692                           ; BSR set to: 0
 13693                           ;main.c: 933: if ((0) != p) {
 13694  001018  0102               	movlb	2	; () banked
 13695  00101A  51BA               	movf	(doModeVerbose@p_1190+1)& (0+255),w,b
 13696  00101C  11B9               	iorwf	doModeVerbose@p_1190& (0+255),w,b
 13697  00101E  E00A               	bz	l13733
 13698                           
 13699                           ; BSR set to: 2
 13700                           ;main.c: 934: filter_nodeid = atoi(p);
 13701  001020  C2B9  F024         	movff	doModeVerbose@p_1190,?_atoi
 13702  001024  C2BA  F025         	movff	doModeVerbose@p_1190+1,?_atoi+1
 13703  001028  EC2A  F01D         	call	_atoi	;wreg free
 13704  00102C  5024               	movf	?_atoi,w,c
 13705  00102E  0102               	movlb	2	; () banked
 13706  001030  6F90               	movwf	doModeVerbose@filter_nodeid& (0+255),b
 13707                           
 13708                           ;main.c: 935: }
 13709  001032  D007               	goto	l13737
 13710  001034                     l13733:
 13711                           
 13712                           ; BSR set to: 2
 13713                           ;main.c: 936: else {
 13714                           ;main.c: 937: putsUSART((char *) "-ERROR - filter for nide id is missing\r\n");
 13715  001034  0E77               	movlw	high STR_98
 13716  001036  6E20               	movwf	?_putsUSART+1,c
 13717  001038  0E5A               	movlw	low STR_98
 13718  00103A  6E1F               	movwf	?_putsUSART,c
 13719  00103C  EC25  F029         	call	_putsUSART	;wreg free
 13720  001040  D2A0               	goto	l540
 13721  001042                     l13737:
 13722                           
 13723                           ; BSR set to: 2
 13724                           ;main.c: 939: }
 13725                           ;main.c: 942: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 13726  001042  0E80               	movlw	128
 13727  001044  ECDE  F02B         	call	_ECANSetOperationMode
 13728                           
 13729                           ;main.c: 944: uint32_t id = ((uint32_t) filter_priority << 26) |
 13730                           ;main.c: 945: ((uint32_t) filter_class << 16) |
 13731                           ;main.c: 946: ((uint32_t) filter_type << 8) |
 13732                           ;main.c: 947: filter_nodeid;
 13733  001048  C28F  F0C1         	movff	doModeVerbose@filter_type,??_doModeVerbose
 13734  00104C  DB0A               	call	PL40	;call to abstracted procedure
 13735  00104E  5188               	movf	doModeVerbose@filter_class& (0+255),w,b
 13736  001050  0100               	movlb	0	; () banked
 13737  001052  6FC5               	movwf	(??_doModeVerbose+4)& (0+255),b
 13738  001054  0102               	movlb	2	; () banked
 13739  001056  5189               	movf	(doModeVerbose@filter_class+1)& (0+255),w,b
 13740  001058  DB1D               	call	PL52	;call to abstracted procedure
 13741  00105A  C28E  F0C9         	movff	doModeVerbose@filter_priority,??_doModeVerbose+8
 13742  00105E  DAA7               	call	PL6	;call to abstracted procedure
 13743  001060  5190               	movf	doModeVerbose@filter_nodeid& (0+255),w,b
 13744  001062  0100               	movlb	0	; () banked
 13745  001064  11D1               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 13746  001066  0102               	movlb	2	; () banked
 13747  001068  6F80               	movwf	doModeVerbose@id& (0+255),b
 13748  00106A  0100               	movlb	0	; () banked
 13749  00106C  51D2               	movf	(??_doModeVerbose+17)& (0+255),w,b
 13750  00106E  0102               	movlb	2	; () banked
 13751  001070  6F81               	movwf	(doModeVerbose@id+1)& (0+255),b
 13752  001072  0100               	movlb	0	; () banked
 13753  001074  51D3               	movf	(??_doModeVerbose+18)& (0+255),w,b
 13754  001076  0102               	movlb	2	; () banked
 13755  001078  6F82               	movwf	(doModeVerbose@id+2)& (0+255),b
 13756  00107A  0100               	movlb	0	; () banked
 13757  00107C  51D4               	movf	(??_doModeVerbose+19)& (0+255),w,b
 13758  00107E  0102               	movlb	2	; () banked
 13759  001080  6F83               	movwf	(doModeVerbose@id+3)& (0+255),b
 13760                           
 13761                           ; BSR set to: 2
 13762                           ;main.c: 948: setFilter(filterno, id);
 13763  001082  C280  F01E         	movff	doModeVerbose@id,?_setFilter
 13764  001086  C281  F01F         	movff	doModeVerbose@id+1,?_setFilter+1
 13765  00108A  C282  F020         	movff	doModeVerbose@id+2,?_setFilter+2
 13766  00108E  C283  F021         	movff	doModeVerbose@id+3,?_setFilter+3
 13767  001092  51A7               	movf	doModeVerbose@filterno& (0+255),w,b
 13768  001094  EC7A  F014         	call	_setFilter
 13769                           
 13770                           ; BSR set to: 0
 13771                           ;main.c: 949: putsUSART((char *) "+OK\r\n");
 13772  001098  0E7F               	movlw	high STR_9
 13773  00109A  6E20               	movwf	?_putsUSART+1,c
 13774  00109C  0E80               	movlw	low STR_9
 13775  00109E  6E1F               	movwf	?_putsUSART,c
 13776  0010A0  EC25  F029         	call	_putsUSART	;wreg free
 13777                           
 13778                           ;main.c: 950: }
 13779  0010A4  D25F               	goto	l13903
 13780  0010A6                     l13745:
 13781                           
 13782                           ; BSR set to: 0
 13783                           ;main.c: 954: else if (cmdbuf == stristr(cmdbuf, "MASK")) {
 13784  0010A6  0E01               	movlw	high _cmdbuf
 13785  0010A8  0100               	movlb	0	; () banked
 13786  0010AA  6F67               	movwf	(?_stristr+1)& (0+255),b
 13787  0010AC  0E24               	movlw	low _cmdbuf
 13788  0010AE  6F66               	movwf	?_stristr& (0+255),b
 13789  0010B0  0E7F               	movlw	high STR_100
 13790  0010B2  6F69               	movwf	(?_stristr+3)& (0+255),b
 13791  0010B4  0EB2               	movlw	low STR_100
 13792  0010B6  6F68               	movwf	(?_stristr+2)& (0+255),b
 13793  0010B8  ECB7  F026         	call	_stristr	;wreg free
 13794  0010BC  0E24               	movlw	low _cmdbuf
 13795  0010BE  6FC1               	movwf	??_doModeVerbose& (0+255),b
 13796  0010C0  0E01               	movlw	high _cmdbuf
 13797  0010C2  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 13798  0010C4  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 13799  0010C6  E102               	bnz	u18235
 13800  0010C8  5166               	movf	?_stristr& (0+255),w,b
 13801  0010CA  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 13802  0010CC                     u18235:
 13803  0010CC  E001 D0D6          	bnz	l13817
 13804                           
 13805                           ; BSR set to: 0
 13806                           ;main.c: 956: uint8_t maskno;
 13807                           ;main.c: 957: uint8_t mask_priority;
 13808                           ;main.c: 958: uint16_t mask_class;
 13809                           ;main.c: 959: uint8_t mask_type;
 13810                           ;main.c: 960: uint8_t mask_nodeid;
 13811                           ;main.c: 962: strcpy(cmdbuf, cmdbuf + 8);
 13812  0010D0  0E01               	movlw	high _cmdbuf
 13813  0010D2  DA92               	call	PL12	;call to abstracted procedure
 13814  0010D4  EC84  F02B         	call	_strcpy	;wreg free
 13815                           
 13816                           ; BSR set to: 0
 13817                           ;main.c: 963: char *p = strtok(cmdbuf, ",");
 13818  0010D8  DAA4               	call	PL26	;call to abstracted procedure
 13819  0010DA  EC5E  F025         	call	_strtok	;wreg free
 13820  0010DE  C064  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 13821  0010E2  C065  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 13822                           
 13823                           ; BSR set to: 0
 13824                           ;main.c: 964: if ((0) != p) {
 13825  0010E6  0102               	movlb	2	; () banked
 13826  0010E8  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 13827  0010EA  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 13828  0010EC  E013               	bz	l13761
 13829                           
 13830                           ; BSR set to: 2
 13831                           ;main.c: 965: maskno = atoi(p);
 13832  0010EE  C2BB  F024         	movff	doModeVerbose@p_1210,?_atoi
 13833  0010F2  C2BC  F025         	movff	doModeVerbose@p_1210+1,?_atoi+1
 13834  0010F6  EC2A  F01D         	call	_atoi	;wreg free
 13835  0010FA  5024               	movf	?_atoi,w,c
 13836  0010FC  0102               	movlb	2	; () banked
 13837  0010FE  6FA8               	movwf	doModeVerbose@maskno& (0+255),b
 13838                           
 13839                           ; BSR set to: 2
 13840                           ;main.c: 966: if (maskno > 1) {
 13841  001100  0E01               	movlw	1
 13842  001102  65A8               	cpfsgt	doModeVerbose@maskno& (0+255),b
 13843  001104  D00E               	goto	l13765
 13844                           
 13845                           ; BSR set to: 2
 13846                           ;main.c: 967: putsUSART((char *) "-ERROR - Mask number can only be set as 0 or 1.\r\n");
 13847  001106  0E75               	movlw	high STR_102
 13848  001108  6E20               	movwf	?_putsUSART+1,c
 13849  00110A  0E2A               	movlw	low STR_102
 13850  00110C  6E1F               	movwf	?_putsUSART,c
 13851  00110E  EC25  F029         	call	_putsUSART	;wreg free
 13852  001112  D237               	goto	l540
 13853  001114                     l13761:
 13854                           
 13855                           ; BSR set to: 2
 13856                           ;main.c: 971: else {
 13857                           ;main.c: 972: putsUSART((char *) "-ERROR - No mask number specified.\r\n");
 13858  001114  0E79               	movlw	high STR_103
 13859  001116  6E20               	movwf	?_putsUSART+1,c
 13860  001118  0E0B               	movlw	low STR_103
 13861  00111A  6E1F               	movwf	?_putsUSART,c
 13862  00111C  EC25  F029         	call	_putsUSART	;wreg free
 13863  001120  D230               	goto	l540
 13864  001122                     l13765:
 13865                           
 13866                           ; BSR set to: 2
 13867                           ;main.c: 974: }
 13868                           ;main.c: 977: p = strtok((0), ",");
 13869  001122  0100               	movlb	0	; () banked
 13870  001124  DA3D               	call	PL4	;call to abstracted procedure
 13871  001126  EC5E  F025         	call	_strtok	;wreg free
 13872  00112A  C064  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 13873  00112E  C065  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 13874                           
 13875                           ; BSR set to: 0
 13876                           ;main.c: 978: if ((0) != p) {
 13877  001132  0102               	movlb	2	; () banked
 13878  001134  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 13879  001136  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 13880  001138  E00A               	bz	l13771
 13881                           
 13882                           ; BSR set to: 2
 13883                           ;main.c: 979: mask_priority = atoi(p);
 13884  00113A  C2BB  F024         	movff	doModeVerbose@p_1210,?_atoi
 13885  00113E  C2BC  F025         	movff	doModeVerbose@p_1210+1,?_atoi+1
 13886  001142  EC2A  F01D         	call	_atoi	;wreg free
 13887  001146  5024               	movf	?_atoi,w,c
 13888  001148  0102               	movlb	2	; () banked
 13889  00114A  6F91               	movwf	doModeVerbose@mask_priority& (0+255),b
 13890                           
 13891                           ;main.c: 980: }
 13892  00114C  D007               	goto	l13775
 13893  00114E                     l13771:
 13894                           
 13895                           ; BSR set to: 2
 13896                           ;main.c: 981: else {
 13897                           ;main.c: 982: putsUSART((char *) "-ERROR - mask for priority is missing\r\n");
 13898  00114E  0E77               	movlw	high STR_105
 13899  001150  6E20               	movwf	?_putsUSART+1,c
 13900  001152  0EAB               	movlw	low STR_105
 13901  001154  6E1F               	movwf	?_putsUSART,c
 13902  001156  EC25  F029         	call	_putsUSART	;wreg free
 13903  00115A  D213               	goto	l540
 13904  00115C                     l13775:
 13905                           
 13906                           ; BSR set to: 2
 13907                           ;main.c: 984: }
 13908                           ;main.c: 987: p = strtok((0), ",");
 13909  00115C  0100               	movlb	0	; () banked
 13910  00115E  DA20               	call	PL4	;call to abstracted procedure
 13911  001160  EC5E  F025         	call	_strtok	;wreg free
 13912  001164  C064  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 13913  001168  C065  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 13914                           
 13915                           ; BSR set to: 0
 13916                           ;main.c: 988: if ((0) != p) {
 13917  00116C  0102               	movlb	2	; () banked
 13918  00116E  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 13919  001170  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 13920  001172  E00B               	bz	l13781
 13921                           
 13922                           ; BSR set to: 2
 13923                           ;main.c: 989: mask_class = atoi(p);
 13924  001174  C2BB  F024         	movff	doModeVerbose@p_1210,?_atoi
 13925  001178  C2BC  F025         	movff	doModeVerbose@p_1210+1,?_atoi+1
 13926  00117C  EC2A  F01D         	call	_atoi	;wreg free
 13927  001180  C024  F28A         	movff	?_atoi,doModeVerbose@mask_class
 13928  001184  C025  F28B         	movff	?_atoi+1,doModeVerbose@mask_class+1
 13929                           
 13930                           ;main.c: 990: }
 13931  001188  D007               	goto	l13785
 13932  00118A                     l13781:
 13933                           
 13934                           ; BSR set to: 2
 13935                           ;main.c: 991: else {
 13936                           ;main.c: 992: putsUSART((char *) "-ERROR - mask for class is missing\r\n");
 13937  00118A  0E79               	movlw	high STR_107
 13938  00118C  6E20               	movwf	?_putsUSART+1,c
 13939  00118E  0E55               	movlw	low STR_107
 13940  001190  6E1F               	movwf	?_putsUSART,c
 13941  001192  EC25  F029         	call	_putsUSART	;wreg free
 13942  001196  D1F5               	goto	l540
 13943  001198                     l13785:
 13944                           
 13945                           ; BSR set to: 0
 13946                           ;main.c: 994: }
 13947                           ;main.c: 997: p = strtok((0), ",");
 13948  001198  DA03               	call	PL4	;call to abstracted procedure
 13949  00119A  EC5E  F025         	call	_strtok	;wreg free
 13950  00119E  C064  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 13951  0011A2  C065  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 13952                           
 13953                           ; BSR set to: 0
 13954                           ;main.c: 998: if ((0) != p) {
 13955  0011A6  0102               	movlb	2	; () banked
 13956  0011A8  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 13957  0011AA  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 13958  0011AC  E00A               	bz	l13791
 13959                           
 13960                           ; BSR set to: 2
 13961                           ;main.c: 999: mask_type = atoi(p);
 13962  0011AE  C2BB  F024         	movff	doModeVerbose@p_1210,?_atoi
 13963  0011B2  C2BC  F025         	movff	doModeVerbose@p_1210+1,?_atoi+1
 13964  0011B6  EC2A  F01D         	call	_atoi	;wreg free
 13965  0011BA  5024               	movf	?_atoi,w,c
 13966  0011BC  0102               	movlb	2	; () banked
 13967  0011BE  6F92               	movwf	doModeVerbose@mask_type& (0+255),b
 13968                           
 13969                           ;main.c: 1000: }
 13970  0011C0  D007               	goto	l13795
 13971  0011C2                     l13791:
 13972                           
 13973                           ; BSR set to: 2
 13974                           ;main.c: 1001: else {
 13975                           ;main.c: 1002: putsUSART((char *) "-ERROR - mask for type is missing\r\n");
 13976  0011C2  0E79               	movlw	high STR_109
 13977  0011C4  6E20               	movwf	?_putsUSART+1,c
 13978  0011C6  0E7A               	movlw	low STR_109
 13979  0011C8  6E1F               	movwf	?_putsUSART,c
 13980  0011CA  EC25  F029         	call	_putsUSART	;wreg free
 13981  0011CE  D1D9               	goto	l540
 13982  0011D0                     l13795:
 13983                           
 13984                           ; BSR set to: 2
 13985                           ;main.c: 1004: }
 13986                           ;main.c: 1007: p = strtok((0), ",");
 13987  0011D0  0100               	movlb	0	; () banked
 13988  0011D2  D9E6               	call	PL4	;call to abstracted procedure
 13989  0011D4  EC5E  F025         	call	_strtok	;wreg free
 13990  0011D8  C064  F2BB         	movff	?_strtok,doModeVerbose@p_1210
 13991  0011DC  C065  F2BC         	movff	?_strtok+1,doModeVerbose@p_1210+1
 13992                           
 13993                           ; BSR set to: 0
 13994                           ;main.c: 1008: if ((0) != p) {
 13995  0011E0  0102               	movlb	2	; () banked
 13996  0011E2  51BC               	movf	(doModeVerbose@p_1210+1)& (0+255),w,b
 13997  0011E4  11BB               	iorwf	doModeVerbose@p_1210& (0+255),w,b
 13998  0011E6  E00A               	bz	l13801
 13999                           
 14000                           ; BSR set to: 2
 14001                           ;main.c: 1009: mask_nodeid = atoi(p);
 14002  0011E8  C2BB  F024         	movff	doModeVerbose@p_1210,?_atoi
 14003  0011EC  C2BC  F025         	movff	doModeVerbose@p_1210+1,?_atoi+1
 14004  0011F0  EC2A  F01D         	call	_atoi	;wreg free
 14005  0011F4  5024               	movf	?_atoi,w,c
 14006  0011F6  0102               	movlb	2	; () banked
 14007  0011F8  6F93               	movwf	doModeVerbose@mask_nodeid& (0+255),b
 14008                           
 14009                           ;main.c: 1010: }
 14010  0011FA  D007               	goto	l13805
 14011  0011FC                     l13801:
 14012                           
 14013                           ; BSR set to: 2
 14014                           ;main.c: 1011: else {
 14015                           ;main.c: 1012: putsUSART((char *) "-ERROR - mask for nide id is missing\r\n");
 14016  0011FC  0E78               	movlw	high STR_111
 14017  0011FE  6E20               	movwf	?_putsUSART+1,c
 14018  001200  0E70               	movlw	low STR_111
 14019  001202  6E1F               	movwf	?_putsUSART,c
 14020  001204  EC25  F029         	call	_putsUSART	;wreg free
 14021  001208  D1BC               	goto	l540
 14022  00120A                     l13805:
 14023                           
 14024                           ; BSR set to: 2
 14025                           ;main.c: 1014: }
 14026                           ;main.c: 1016: uint32_t id = ((uint32_t) mask_priority << 26) |
 14027                           ;main.c: 1017: ((uint32_t) mask_class << 16) |
 14028                           ;main.c: 1018: ((uint32_t) mask_type << 8) |
 14029                           ;main.c: 1019: mask_nodeid;
 14030  00120A  C292  F0C1         	movff	doModeVerbose@mask_type,??_doModeVerbose
 14031  00120E  DA29               	call	PL40	;call to abstracted procedure
 14032  001210  518A               	movf	doModeVerbose@mask_class& (0+255),w,b
 14033  001212  0100               	movlb	0	; () banked
 14034  001214  6FC5               	movwf	(??_doModeVerbose+4)& (0+255),b
 14035  001216  0102               	movlb	2	; () banked
 14036  001218  518B               	movf	(doModeVerbose@mask_class+1)& (0+255),w,b
 14037  00121A  DA3C               	call	PL52	;call to abstracted procedure
 14038  00121C  C291  F0C9         	movff	doModeVerbose@mask_priority,??_doModeVerbose+8
 14039  001220  D9C6               	call	PL6	;call to abstracted procedure
 14040  001222  5193               	movf	doModeVerbose@mask_nodeid& (0+255),w,b
 14041  001224  0100               	movlb	0	; () banked
 14042  001226  11D1               	iorwf	(??_doModeVerbose+16)& (0+255),w,b
 14043  001228  0102               	movlb	2	; () banked
 14044  00122A  6FA3               	movwf	doModeVerbose@id_1222& (0+255),b
 14045  00122C  0100               	movlb	0	; () banked
 14046  00122E  51D2               	movf	(??_doModeVerbose+17)& (0+255),w,b
 14047  001230  0102               	movlb	2	; () banked
 14048  001232  6FA4               	movwf	(doModeVerbose@id_1222+1)& (0+255),b
 14049  001234  0100               	movlb	0	; () banked
 14050  001236  51D3               	movf	(??_doModeVerbose+18)& (0+255),w,b
 14051  001238  0102               	movlb	2	; () banked
 14052  00123A  6FA5               	movwf	(doModeVerbose@id_1222+2)& (0+255),b
 14053  00123C  0100               	movlb	0	; () banked
 14054  00123E  51D4               	movf	(??_doModeVerbose+19)& (0+255),w,b
 14055  001240  0102               	movlb	2	; () banked
 14056  001242  6FA6               	movwf	(doModeVerbose@id_1222+3)& (0+255),b
 14057                           
 14058                           ; BSR set to: 2
 14059                           ;main.c: 1022: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 14060  001244  0E80               	movlw	128
 14061  001246  ECDE  F02B         	call	_ECANSetOperationMode
 14062                           
 14063                           ;main.c: 1024: maskno ? _CANIDToRegs((BYTE*)&RXM0SIDH, id, 1) :
 14064                           ;main.c: 1025: _CANIDToRegs((BYTE*)&RXM1SIDH, id, 1);
 14065  00124A  0102               	movlb	2	; () banked
 14066  00124C  51A8               	movf	doModeVerbose@maskno& (0+255),w,b
 14067  00124E  E008               	bz	l13813
 14068                           
 14069                           ; BSR set to: 2
 14070  001250  010F               	movlb	15	; () banked
 14071  001252  0E0F               	movlw	15	;volatile
 14072  001254  6E1F               	movwf	?__CANIDToRegs+1,c
 14073  001256  0E18               	movlw	24	;volatile
 14074  001258  DA11               	call	PL48	;call to abstracted procedure
 14075  00125A  ECA0  F01C         	call	__CANIDToRegs	;wreg free
 14076  00125E  D007               	goto	l13815
 14077  001260                     l13813:
 14078                           
 14079                           ; BSR set to: 2
 14080  001260  010F               	movlb	15	; () banked
 14081  001262  0E0F               	movlw	15	;volatile
 14082  001264  6E1F               	movwf	?__CANIDToRegs+1,c
 14083  001266  0E1C               	movlw	28	;volatile
 14084  001268  DA09               	call	PL48	;call to abstracted procedure
 14085  00126A  ECA0  F01C         	call	__CANIDToRegs	;wreg free
 14086  00126E                     l13815:
 14087                           
 14088                           ; BSR set to: 0
 14089                           ;main.c: 1026: putsUSART((char *) "+OK\r\n");
 14090  00126E  0E7F               	movlw	high STR_9
 14091  001270  6E20               	movwf	?_putsUSART+1,c
 14092  001272  0E80               	movlw	low STR_9
 14093  001274  6E1F               	movwf	?_putsUSART,c
 14094  001276  EC25  F029         	call	_putsUSART	;wreg free
 14095                           
 14096                           ;main.c: 1027: }
 14097  00127A  D174               	goto	l13903
 14098  00127C                     l13817:
 14099                           
 14100                           ; BSR set to: 0
 14101                           ;main.c: 1034: else if (cmdbuf == stristr(cmdbuf, "SET ")) {
 14102  00127C  0E01               	movlw	high _cmdbuf
 14103  00127E  0100               	movlb	0	; () banked
 14104  001280  6F67               	movwf	(?_stristr+1)& (0+255),b
 14105  001282  0E24               	movlw	low _cmdbuf
 14106  001284  6F66               	movwf	?_stristr& (0+255),b
 14107  001286  0E7F               	movlw	high STR_113
 14108  001288  6F69               	movwf	(?_stristr+3)& (0+255),b
 14109  00128A  0E9E               	movlw	low STR_113
 14110  00128C  6F68               	movwf	(?_stristr+2)& (0+255),b
 14111  00128E  ECB7  F026         	call	_stristr	;wreg free
 14112  001292  0E24               	movlw	low _cmdbuf
 14113  001294  6FC1               	movwf	??_doModeVerbose& (0+255),b
 14114  001296  0E01               	movlw	high _cmdbuf
 14115  001298  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 14116  00129A  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 14117  00129C  E102               	bnz	u18325
 14118  00129E  5166               	movf	?_stristr& (0+255),w,b
 14119  0012A0  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 14120  0012A2                     u18325:
 14121  0012A2  E001 D14E          	bnz	l13897
 14122                           
 14123                           ; BSR set to: 0
 14124                           ;main.c: 1037: strcpy(cmdbuf, cmdbuf + 4);
 14125  0012A6  0E01               	movlw	high _cmdbuf
 14126  0012A8  6E1F               	movwf	?_strcpy+1,c
 14127  0012AA  0E24               	movlw	low _cmdbuf
 14128  0012AC  6E1E               	movwf	?_strcpy,c
 14129  0012AE  0E28               	movlw	low (_cmdbuf+4)
 14130  0012B0  0100               	movlb	0	; () banked
 14131  0012B2  6FC1               	movwf	??_doModeVerbose& (0+255),b
 14132  0012B4  0E01               	movlw	high (_cmdbuf+4)
 14133  0012B6  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 14134  0012B8  C0C1  F020         	movff	??_doModeVerbose,?_strcpy+2
 14135  0012BC  C0C2  F021         	movff	??_doModeVerbose+1,?_strcpy+3
 14136  0012C0  EC84  F02B         	call	_strcpy	;wreg free
 14137                           
 14138                           ; BSR set to: 0
 14139                           ;main.c: 1040: if (cmdbuf == stristr(cmdbuf, "HEX")) {
 14140  0012C4  0E01               	movlw	high _cmdbuf
 14141  0012C6  0100               	movlb	0	; () banked
 14142  0012C8  6F67               	movwf	(?_stristr+1)& (0+255),b
 14143  0012CA  0E24               	movlw	low _cmdbuf
 14144  0012CC  6F66               	movwf	?_stristr& (0+255),b
 14145  0012CE  0E7F               	movlw	high STR_114
 14146  0012D0  6F69               	movwf	(?_stristr+3)& (0+255),b
 14147  0012D2  0EDD               	movlw	low STR_114
 14148  0012D4  6F68               	movwf	(?_stristr+2)& (0+255),b
 14149  0012D6  ECB7  F026         	call	_stristr	;wreg free
 14150  0012DA  0E24               	movlw	low _cmdbuf
 14151  0012DC  6FC1               	movwf	??_doModeVerbose& (0+255),b
 14152  0012DE  0E01               	movlw	high _cmdbuf
 14153  0012E0  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 14154  0012E2  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 14155  0012E4  E102               	bnz	u18335
 14156  0012E6  5166               	movf	?_stristr& (0+255),w,b
 14157  0012E8  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 14158  0012EA                     u18335:
 14159  0012EA  E112               	bnz	l13829
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;main.c: 1041: bHex = 1;
 14163  0012EC  0E01               	movlw	1
 14164  0012EE  6FDC               	movwf	_bHex& (0+255),b
 14165                           
 14166                           ; BSR set to: 0
 14167                           ;main.c: 1042: (Busy_eep(), Write_b_eep(0x06,1));
 14168  0012F0  EC1E  F02C         	call	_Busy_eep	;wreg free
 14169  0012F4  6A1F               	clrf	?_Write_b_eep+1,c
 14170  0012F6  0E06               	movlw	6
 14171  0012F8  6E1E               	movwf	?_Write_b_eep,c
 14172  0012FA  0E01               	movlw	1
 14173  0012FC  6E20               	movwf	?_Write_b_eep+2,c
 14174  0012FE  EC39  F02B         	call	_Write_b_eep	;wreg free
 14175                           
 14176                           ;main.c: 1043: putsUSART((char *) "+OK - Numerical output now in hexadecimal\r\n");
 14177  001302  0E77               	movlw	high STR_115
 14178  001304  6E20               	movwf	?_putsUSART+1,c
 14179  001306  0E04               	movlw	low STR_115
 14180  001308  6E1F               	movwf	?_putsUSART,c
 14181  00130A  EC25  F029         	call	_putsUSART	;wreg free
 14182                           
 14183                           ;main.c: 1044: }
 14184  00130E  D12A               	goto	l13903
 14185  001310                     l13829:
 14186                           
 14187                           ; BSR set to: 0
 14188                           ;main.c: 1046: else if (cmdbuf == stristr(cmdbuf, "DECIMAL")) {
 14189  001310  0E01               	movlw	high _cmdbuf
 14190  001312  0100               	movlb	0	; () banked
 14191  001314  6F67               	movwf	(?_stristr+1)& (0+255),b
 14192  001316  0E24               	movlw	low _cmdbuf
 14193  001318  6F66               	movwf	?_stristr& (0+255),b
 14194  00131A  0E7F               	movlw	high STR_116
 14195  00131C  6F69               	movwf	(?_stristr+3)& (0+255),b
 14196  00131E  0E06               	movlw	low STR_116
 14197  001320  6F68               	movwf	(?_stristr+2)& (0+255),b
 14198  001322  ECB7  F026         	call	_stristr	;wreg free
 14199  001326  0E24               	movlw	low _cmdbuf
 14200  001328  6FC1               	movwf	??_doModeVerbose& (0+255),b
 14201  00132A  0E01               	movlw	high _cmdbuf
 14202  00132C  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 14203  00132E  1967               	xorwf	(?_stristr+1)& (0+255),w,b
 14204  001330  E102               	bnz	u18345
 14205  001332  5166               	movf	?_stristr& (0+255),w,b
 14206  001334  19C1               	xorwf	??_doModeVerbose& (0+255),w,b
 14207  001336                     u18345:
 14208  001336  E111               	bnz	l13839
 14209                           
 14210                           ; BSR set to: 0
 14211                           ;main.c: 1047: bHex = 0;
 14212  001338  6BDC               	clrf	_bHex& (0+255),b
 14213                           
 14214                           ; BSR set to: 0
 14215                           ;main.c: 1048: (Busy_eep(), Write_b_eep(0x06,0));
 14216  00133A  EC1E  F02C         	call	_Busy_eep	;wreg free
 14217  00133E  6A1F               	clrf	?_Write_b_eep+1,c
 14218  001340  0E06               	movlw	6
 14219  001342  6E1E               	movwf	?_Write_b_eep,c
 14220  001344  0E00               	movlw	0
 14221  001346  6A20               	clrf	?_Write_b_eep+2,c
 14222  001348  EC39  F02B         	call	_Write_b_eep	;wreg free
 14223                           
 14224                           ;main.c: 1049: putsUSART((char *) "+OK - Numerical output now in decimal\r\n");
 14225  00134C  0E77               	movlw	high STR_117
 14226  00134E  6E20               	movwf	?_putsUSART+1,c
 14227  001350  0ED3               	movlw	low STR_117
 14228  001352  6E1F               	movwf	?_putsUSART,c
 14229  001354  EC25  F029         	call	_putsUSART	;wreg free
 14230                           
 14231                           ;main.c: 1050: }
 14232  001358  D105               	goto	l13903
 14233  00135A                     l13839:
 14234                           
 14235                           ; BSR set to: 0
 14236                           ;main.c: 1051: else if (0 != stristr(cmdbuf, "RWTIMEOUT ")) {
 14237  00135A  0E01               	movlw	high _cmdbuf
 14238  00135C  0100               	movlb	0	; () banked
 14239  00135E  6F67               	movwf	(?_stristr+1)& (0+255),b
 14240  001360  0E24               	movlw	low _cmdbuf
 14241  001362  6F66               	movwf	?_stristr& (0+255),b
 14242  001364  0E7E               	movlw	high STR_118
 14243  001366  6F69               	movwf	(?_stristr+3)& (0+255),b
 14244  001368  0E87               	movlw	low STR_118
 14245  00136A  6F68               	movwf	(?_stristr+2)& (0+255),b
 14246  00136C  ECB7  F026         	call	_stristr	;wreg free
 14247  001370  5167               	movf	(?_stristr+1)& (0+255),w,b
 14248  001372  1166               	iorwf	?_stristr& (0+255),w,b
 14249  001374  E02C               	bz	l13853
 14250                           
 14251                           ; BSR set to: 0
 14252                           ;main.c: 1052: strcpy(cmdbuf, cmdbuf + 10);
 14253  001376  0E01               	movlw	high _cmdbuf
 14254  001378  6E1F               	movwf	?_strcpy+1,c
 14255  00137A  0E24               	movlw	low _cmdbuf
 14256  00137C  6E1E               	movwf	?_strcpy,c
 14257  00137E  0E2E               	movlw	low (_cmdbuf+10)
 14258  001380  0100               	movlb	0	; () banked
 14259  001382  6FC1               	movwf	??_doModeVerbose& (0+255),b
 14260  001384  0E01               	movlw	high (_cmdbuf+10)
 14261  001386  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 14262  001388  C0C1  F020         	movff	??_doModeVerbose,?_strcpy+2
 14263  00138C  C0C2  F021         	movff	??_doModeVerbose+1,?_strcpy+3
 14264  001390  EC84  F02B         	call	_strcpy	;wreg free
 14265                           
 14266                           ; BSR set to: 0
 14267                           ;main.c: 1053: rwtimeout = atoi(cmdbuf);
 14268  001394  0101               	movlb	1	; () banked
 14269  001396  0E01               	movlw	high _cmdbuf
 14270  001398  6E25               	movwf	?_atoi+1,c
 14271  00139A  0E24               	movlw	low _cmdbuf
 14272  00139C  6E24               	movwf	?_atoi,c
 14273  00139E  EC2A  F01D         	call	_atoi	;wreg free
 14274  0013A2  5024               	movf	?_atoi,w,c
 14275  0013A4  6FE1               	movwf	_rwtimeout& (0+255),b
 14276                           
 14277                           ; BSR set to: 0
 14278                           ;main.c: 1054: if (rwtimeout < 10u) {
 14279  0013A6  0E0A               	movlw	10
 14280  0013A8  61E1               	cpfslt	_rwtimeout& (0+255),b
 14281  0013AA  D001               	goto	l13849
 14282                           
 14283                           ; BSR set to: 0
 14284                           ;main.c: 1055: rwtimeout = 10u;
 14285  0013AC  6FE1               	movwf	_rwtimeout& (0+255),b
 14286  0013AE                     l13849:
 14287                           
 14288                           ; BSR set to: 0
 14289                           ;main.c: 1056: }
 14290                           ;main.c: 1057: (Busy_eep(), Write_b_eep(0x09,rwtimeout));
 14291  0013AE  EC1E  F02C         	call	_Busy_eep	;wreg free
 14292  0013B2  6A1F               	clrf	?_Write_b_eep+1,c
 14293  0013B4  0E09               	movlw	9
 14294  0013B6  6E1E               	movwf	?_Write_b_eep,c
 14295  0013B8  C0E1  F020         	movff	_rwtimeout,?_Write_b_eep+2
 14296  0013BC  EC39  F02B         	call	_Write_b_eep	;wreg free
 14297                           
 14298                           ;main.c: 1058: putsUSART((char *) "+OK\r\n");
 14299  0013C0  0E7F               	movlw	high STR_9
 14300  0013C2  6E20               	movwf	?_putsUSART+1,c
 14301  0013C4  0E80               	movlw	low STR_9
 14302  0013C6  6E1F               	movwf	?_putsUSART,c
 14303  0013C8  EC25  F029         	call	_putsUSART	;wreg free
 14304                           
 14305                           ;main.c: 1059: }
 14306  0013CC  D0CB               	goto	l13903
 14307  0013CE                     l13853:
 14308                           
 14309                           ; BSR set to: 0
 14310                           ;main.c: 1060: else if (0 != stristr(cmdbuf, "STARTIF ")) {
 14311  0013CE  0E01               	movlw	high _cmdbuf
 14312  0013D0  0100               	movlb	0	; () banked
 14313  0013D2  6F67               	movwf	(?_stristr+1)& (0+255),b
 14314  0013D4  0E24               	movlw	low _cmdbuf
 14315  0013D6  6F66               	movwf	?_stristr& (0+255),b
 14316  0013D8  0E7E               	movlw	high STR_120
 14317  0013DA  6F69               	movwf	(?_stristr+3)& (0+255),b
 14318  0013DC  0EBB               	movlw	low STR_120
 14319  0013DE  6F68               	movwf	(?_stristr+2)& (0+255),b
 14320  0013E0  ECB7  F026         	call	_stristr	;wreg free
 14321  0013E4  5167               	movf	(?_stristr+1)& (0+255),w,b
 14322  0013E6  1166               	iorwf	?_stristr& (0+255),w,b
 14323  0013E8  E005               	bz	l13857
 14324                           
 14325                           ; BSR set to: 0
 14326                           ;main.c: 1061: strcpy(cmdbuf, cmdbuf + 8);
 14327  0013EA  0E01               	movlw	high _cmdbuf
 14328  0013EC  D905               	call	PL12	;call to abstracted procedure
 14329  0013EE  EC84  F02B         	call	_strcpy	;wreg free
 14330                           
 14331                           ;main.c: 1062: }
 14332  0013F2  D0B8               	goto	l13903
 14333  0013F4                     l13857:
 14334                           
 14335                           ; BSR set to: 0
 14336                           ;main.c: 1063: else if (0 != stristr(cmdbuf, "MODE ")) {
 14337  0013F4  0E01               	movlw	high _cmdbuf
 14338  0013F6  0100               	movlb	0	; () banked
 14339  0013F8  6F67               	movwf	(?_stristr+1)& (0+255),b
 14340  0013FA  0E24               	movlw	low _cmdbuf
 14341  0013FC  6F66               	movwf	?_stristr& (0+255),b
 14342  0013FE  0E7F               	movlw	high STR_121
 14343  001400  6F69               	movwf	(?_stristr+3)& (0+255),b
 14344  001402  0E86               	movlw	low STR_121
 14345  001404  6F68               	movwf	(?_stristr+2)& (0+255),b
 14346  001406  ECB7  F026         	call	_stristr	;wreg free
 14347  00140A  5167               	movf	(?_stristr+1)& (0+255),w,b
 14348  00140C  1166               	iorwf	?_stristr& (0+255),w,b
 14349  00140E  E062               	bz	l13887
 14350                           
 14351                           ; BSR set to: 0
 14352                           ;main.c: 1064: strcpy(cmdbuf, cmdbuf + 5);
 14353  001410  D8B9               	call	PL2	;call to abstracted procedure
 14354  001412  EC84  F02B         	call	_strcpy	;wreg free
 14355                           
 14356                           ; BSR set to: 0
 14357                           ;main.c: 1065: if (0 != stristr(cmdbuf, "VERBOSE")) {
 14358  001416  0E01               	movlw	high _cmdbuf
 14359  001418  0100               	movlb	0	; () banked
 14360  00141A  6F67               	movwf	(?_stristr+1)& (0+255),b
 14361  00141C  0E24               	movlw	low _cmdbuf
 14362  00141E  6F66               	movwf	?_stristr& (0+255),b
 14363  001420  0E7E               	movlw	high STR_122
 14364  001422  6F69               	movwf	(?_stristr+3)& (0+255),b
 14365  001424  0EFE               	movlw	low STR_122
 14366  001426  6F68               	movwf	(?_stristr+2)& (0+255),b
 14367  001428  ECB7  F026         	call	_stristr	;wreg free
 14368  00142C  5167               	movf	(?_stristr+1)& (0+255),w,b
 14369  00142E  1166               	iorwf	?_stristr& (0+255),w,b
 14370  001430  E011               	bz	l13871
 14371                           
 14372                           ; BSR set to: 0
 14373                           ;main.c: 1066: mode = 0;
 14374  001432  6BDF               	clrf	_mode& (0+255),b
 14375                           
 14376                           ; BSR set to: 0
 14377                           ;main.c: 1067: (Busy_eep(), Write_b_eep(0x03,0));
 14378  001434  EC1E  F02C         	call	_Busy_eep	;wreg free
 14379  001438  6A1F               	clrf	?_Write_b_eep+1,c
 14380  00143A  0E03               	movlw	3
 14381  00143C  6E1E               	movwf	?_Write_b_eep,c
 14382  00143E  0E00               	movlw	0
 14383  001440  6A20               	clrf	?_Write_b_eep+2,c
 14384  001442  EC39  F02B         	call	_Write_b_eep	;wreg free
 14385                           
 14386                           ;main.c: 1068: putsUSART((char *) "+OK - Mode is now verbose\r\n");
 14387  001446  0E7B               	movlw	high STR_123
 14388  001448  6E20               	movwf	?_putsUSART+1,c
 14389  00144A  0E48               	movlw	low STR_123
 14390  00144C  6E1F               	movwf	?_putsUSART,c
 14391  00144E  EC25  F029         	call	_putsUSART	;wreg free
 14392                           
 14393                           ;main.c: 1069: }
 14394  001452  D088               	goto	l13903
 14395  001454                     l13871:
 14396                           
 14397                           ; BSR set to: 0
 14398                           ;main.c: 1070: else if (0 != stristr(cmdbuf, "VSCP")) {
 14399  001454  0E01               	movlw	high _cmdbuf
 14400  001456  0100               	movlb	0	; () banked
 14401  001458  6F67               	movwf	(?_stristr+1)& (0+255),b
 14402  00145A  0E24               	movlw	low _cmdbuf
 14403  00145C  6F66               	movwf	?_stristr& (0+255),b
 14404  00145E  0E7F               	movlw	high STR_124
 14405  001460  6F69               	movwf	(?_stristr+3)& (0+255),b
 14406  001462  0EC1               	movlw	low STR_124
 14407  001464  6F68               	movwf	(?_stristr+2)& (0+255),b
 14408  001466  ECB7  F026         	call	_stristr	;wreg free
 14409  00146A  5167               	movf	(?_stristr+1)& (0+255),w,b
 14410  00146C  1166               	iorwf	?_stristr& (0+255),w,b
 14411  00146E  E012               	bz	l13879
 14412                           
 14413                           ; BSR set to: 0
 14414                           ;main.c: 1071: mode = 1;
 14415  001470  0E01               	movlw	1
 14416  001472  6FDF               	movwf	_mode& (0+255),b
 14417                           
 14418                           ; BSR set to: 0
 14419                           ;main.c: 1072: (Busy_eep(), Write_b_eep(0x03,1));
 14420  001474  EC1E  F02C         	call	_Busy_eep	;wreg free
 14421  001478  6A1F               	clrf	?_Write_b_eep+1,c
 14422  00147A  0E03               	movlw	3
 14423  00147C  6E1E               	movwf	?_Write_b_eep,c
 14424  00147E  0E01               	movlw	1
 14425  001480  6E20               	movwf	?_Write_b_eep+2,c
 14426  001482  EC39  F02B         	call	_Write_b_eep	;wreg free
 14427                           
 14428                           ;main.c: 1073: putsUSART((char *) "+OK - Mode is now VSCP Driver\r\n");
 14429  001486  0E7A               	movlw	high STR_125
 14430  001488  6E20               	movwf	?_putsUSART+1,c
 14431  00148A  0ECD               	movlw	low STR_125
 14432  00148C  6E1F               	movwf	?_putsUSART,c
 14433  00148E  EC25  F029         	call	_putsUSART	;wreg free
 14434                           
 14435                           ;main.c: 1074: }
 14436  001492  D068               	goto	l13903
 14437  001494                     l13879:
 14438                           
 14439                           ; BSR set to: 0
 14440                           ;main.c: 1075: else if (0 != stristr(cmdbuf, "SLCAN")) {
 14441  001494  0E01               	movlw	high _cmdbuf
 14442  001496  0100               	movlb	0	; () banked
 14443  001498  6F67               	movwf	(?_stristr+1)& (0+255),b
 14444  00149A  0E24               	movlw	low _cmdbuf
 14445  00149C  6F66               	movwf	?_stristr& (0+255),b
 14446  00149E  0E7F               	movlw	high STR_126
 14447  0014A0  6F69               	movwf	(?_stristr+3)& (0+255),b
 14448  0014A2  0E98               	movlw	low STR_126
 14449  0014A4  6F68               	movwf	(?_stristr+2)& (0+255),b
 14450  0014A6  ECB7  F026         	call	_stristr	;wreg free
 14451  0014AA  5167               	movf	(?_stristr+1)& (0+255),w,b
 14452  0014AC  1166               	iorwf	?_stristr& (0+255),w,b
 14453  0014AE  E05A               	bz	l13903
 14454                           
 14455                           ; BSR set to: 0
 14456                           ;main.c: 1076: mode = 2;
 14457  0014B0  0E02               	movlw	2
 14458  0014B2  6FDF               	movwf	_mode& (0+255),b
 14459                           
 14460                           ; BSR set to: 0
 14461                           ;main.c: 1077: (Busy_eep(), Write_b_eep(0x03,2));
 14462  0014B4  EC1E  F02C         	call	_Busy_eep	;wreg free
 14463  0014B8  6A1F               	clrf	?_Write_b_eep+1,c
 14464  0014BA  0E03               	movlw	3
 14465  0014BC  6E1E               	movwf	?_Write_b_eep,c
 14466  0014BE  0E02               	movlw	2
 14467  0014C0  6E20               	movwf	?_Write_b_eep+2,c
 14468  0014C2  EC39  F02B         	call	_Write_b_eep	;wreg free
 14469                           
 14470                           ;main.c: 1078: putsUSART((char *) "+OK - Mode is now SLCAN\r\n");
 14471  0014C6  0E7B               	movlw	high STR_127
 14472  0014C8  6E20               	movwf	?_putsUSART+1,c
 14473  0014CA  0EB5               	movlw	low STR_127
 14474  0014CC  6E1F               	movwf	?_putsUSART,c
 14475  0014CE  EC25  F029         	call	_putsUSART	;wreg free
 14476  0014D2  D048               	goto	l13903
 14477  0014D4                     l13887:
 14478                           
 14479                           ; BSR set to: 0
 14480                           ;main.c: 1082: else if (0 != stristr(cmdbuf, "FILTER ")) {
 14481  0014D4  0E01               	movlw	high _cmdbuf
 14482  0014D6  0100               	movlb	0	; () banked
 14483  0014D8  6F67               	movwf	(?_stristr+1)& (0+255),b
 14484  0014DA  0E24               	movlw	low _cmdbuf
 14485  0014DC  6F66               	movwf	?_stristr& (0+255),b
 14486  0014DE  0E7E               	movlw	high STR_128
 14487  0014E0  6F69               	movwf	(?_stristr+3)& (0+255),b
 14488  0014E2  0EEE               	movlw	low STR_128
 14489  0014E4  6F68               	movwf	(?_stristr+2)& (0+255),b
 14490  0014E6  ECB7  F026         	call	_stristr	;wreg free
 14491  0014EA  5167               	movf	(?_stristr+1)& (0+255),w,b
 14492  0014EC  1166               	iorwf	?_stristr& (0+255),w,b
 14493  0014EE  E010               	bz	l13891
 14494                           
 14495                           ; BSR set to: 0
 14496                           ;main.c: 1083: strcpy(cmdbuf, cmdbuf + 7);
 14497  0014F0  0E01               	movlw	high _cmdbuf
 14498  0014F2  6E1F               	movwf	?_strcpy+1,c
 14499  0014F4  0E24               	movlw	low _cmdbuf
 14500  0014F6  6E1E               	movwf	?_strcpy,c
 14501  0014F8  0E2B               	movlw	low (_cmdbuf+7)
 14502  0014FA  0100               	movlb	0	; () banked
 14503  0014FC  6FC1               	movwf	??_doModeVerbose& (0+255),b
 14504  0014FE  0E01               	movlw	high (_cmdbuf+7)
 14505  001500  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 14506  001502  C0C1  F020         	movff	??_doModeVerbose,?_strcpy+2
 14507  001506  C0C2  F021         	movff	??_doModeVerbose+1,?_strcpy+3
 14508  00150A  EC84  F02B         	call	_strcpy	;wreg free
 14509                           
 14510                           ;main.c: 1084: }
 14511  00150E  D02A               	goto	l13903
 14512  001510                     l13891:
 14513                           
 14514                           ; BSR set to: 0
 14515                           ;main.c: 1086: else if (0 != stristr(cmdbuf, "MASK ")) {
 14516  001510  0E01               	movlw	high _cmdbuf
 14517  001512  0100               	movlb	0	; () banked
 14518  001514  6F67               	movwf	(?_stristr+1)& (0+255),b
 14519  001516  0E24               	movlw	low _cmdbuf
 14520  001518  6F66               	movwf	?_stristr& (0+255),b
 14521  00151A  0E7F               	movlw	high STR_129
 14522  00151C  6F69               	movwf	(?_stristr+3)& (0+255),b
 14523  00151E  0E8C               	movlw	low STR_129
 14524  001520  6F68               	movwf	(?_stristr+2)& (0+255),b
 14525  001522  ECB7  F026         	call	_stristr	;wreg free
 14526  001526  5167               	movf	(?_stristr+1)& (0+255),w,b
 14527  001528  1166               	iorwf	?_stristr& (0+255),w,b
 14528  00152A  E004               	bz	l13895
 14529                           
 14530                           ; BSR set to: 0
 14531                           ;main.c: 1087: strcpy(cmdbuf, cmdbuf + 5);
 14532  00152C  D82B               	call	PL2	;call to abstracted procedure
 14533  00152E  EC84  F02B         	call	_strcpy	;wreg free
 14534                           
 14535                           ;main.c: 1088: }
 14536  001532  D018               	goto	l13903
 14537  001534                     l13895:
 14538                           
 14539                           ; BSR set to: 0
 14540                           ;main.c: 1089: else {
 14541                           ;main.c: 1090: putsUSART((char *) "-ERROR - Unknown 'SET' command\r\n");
 14542  001534  0E7A               	movlw	high STR_130
 14543  001536  6E20               	movwf	?_putsUSART+1,c
 14544  001538  0E6A               	movlw	low STR_130
 14545  00153A  6E1F               	movwf	?_putsUSART,c
 14546  00153C  EC25  F029         	call	_putsUSART	;wreg free
 14547  001540  D011               	goto	l13903
 14548  001542                     l13897:
 14549                           
 14550                           ; BSR set to: 0
 14551                           ;main.c: 1094: else {
 14552                           ;main.c: 1095: if ( 0x0d == cmdbuf[ 0 ] ) {
 14553  001542  0101               	movlb	1	; () banked
 14554  001544  5124               	movf	_cmdbuf& (0+255),w,b
 14555  001546  0A0D               	xorlw	13
 14556  001548  E107               	bnz	l13901
 14557                           
 14558                           ; BSR set to: 1
 14559                           ;main.c: 1096: putsUSART((char *) "+OK\r\n");
 14560  00154A  0E7F               	movlw	high STR_9
 14561  00154C  6E20               	movwf	?_putsUSART+1,c
 14562  00154E  0E80               	movlw	low STR_9
 14563  001550  6E1F               	movwf	?_putsUSART,c
 14564  001552  EC25  F029         	call	_putsUSART	;wreg free
 14565                           
 14566                           ;main.c: 1097: }
 14567  001556  D006               	goto	l13903
 14568  001558                     l13901:
 14569                           
 14570                           ; BSR set to: 1
 14571                           ;main.c: 1098: else {
 14572                           ;main.c: 1099: putsUSART((char *) "-ERROR - Unknown command\r\n");
 14573  001558  0E7B               	movlw	high STR_132
 14574  00155A  6E20               	movwf	?_putsUSART+1,c
 14575  00155C  0E7F               	movlw	low STR_132
 14576  00155E  6E1F               	movwf	?_putsUSART,c
 14577  001560  EC25  F029         	call	_putsUSART	;wreg free
 14578  001564                     l13903:
 14579                           
 14580                           ;main.c: 1100: }
 14581                           ;main.c: 1101: }
 14582                           ;main.c: 1103: memset( cmdbuf, 0, sizeof( cmdbuf ) );
 14583  001564  0101               	movlb	1	; () banked
 14584  001566  0E01               	movlw	high _cmdbuf
 14585  001568  6E1F               	movwf	?_memset+1,c
 14586  00156A  0E24               	movlw	low _cmdbuf
 14587  00156C  6E1E               	movwf	?_memset,c
 14588  00156E  6A21               	clrf	?_memset+3,c
 14589  001570  6A20               	clrf	?_memset+2,c
 14590  001572  6A23               	clrf	?_memset+5,c
 14591  001574  0E50               	movlw	80
 14592  001576  6E22               	movwf	?_memset+4,c
 14593  001578  EC9B  F02B         	call	_memset	;wreg free
 14594                           
 14595                           ;main.c: 1104: pos = 0;
 14596  00157C  0100               	movlb	0	; () banked
 14597  00157E  6BE0               	clrf	_pos& (0+255),b
 14598  001580                     l13907:
 14599                           
 14600                           ;main.c: 1105: }
 14601                           ;main.c: 1106: }
 14602                           ;main.c: 1109: (INTCONbits.GIE = 1);
 14603  001580  8EF2               	bsf	intcon,7,c	;volatile
 14604  001582                     l540:
 14605  001582  0012               	return	
 14606  001584                     __end_of_doModeVerbose:
 14607                           	opt stack 0
 14608  001584                     PL2:
 14609                           	opt stack 20
 14610  001584  0E01               	movlw	high _cmdbuf
 14611  001586  6E1F               	movwf	?_strcpy+1,c
 14612  001588  0E24               	movlw	low _cmdbuf
 14613  00158A  6E1E               	movwf	?_strcpy,c
 14614  00158C  0E29               	movlw	low (_cmdbuf+5)
 14615  00158E  0100               	movlb	0	; () banked
 14616  001590  6FC1               	movwf	??_doModeVerbose& (0+255),b
 14617  001592  0E01               	movlw	high (_cmdbuf+5)
 14618  001594  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 14619  001596  C0C1  F020         	movff	??_doModeVerbose,?_strcpy+2
 14620  00159A  C0C2  F021         	movff	??_doModeVerbose+1,?_strcpy+3
 14621  00159E  0012               	return	
 14622  0015A0                     __end_ofPL2:
 14623                           	opt stack 0
 14624  0015A0                     PL4:
 14625                           	opt stack 20
 14626  0015A0  6B65               	clrf	(?_strtok+1)& (0+255),b
 14627  0015A2  6B64               	clrf	?_strtok& (0+255),b
 14628  0015A4  0E7F               	movlw	high STR_30
 14629  0015A6  6F67               	movwf	(?_strtok+3)& (0+255),b
 14630  0015A8  0EF5               	movlw	low STR_30
 14631  0015AA  6F66               	movwf	(?_strtok+2)& (0+255),b
 14632  0015AC  0012               	return	
 14633  0015AE                     __end_ofPL4:
 14634                           	opt stack 0
 14635  0015AE                     PL6:
 14636                           	opt stack 20
 14637  0015AE  6BCA               	clrf	(??_doModeVerbose+9)& (0+255),b
 14638  0015B0  6BCB               	clrf	(??_doModeVerbose+10)& (0+255),b
 14639  0015B2  6BCC               	clrf	(??_doModeVerbose+11)& (0+255),b
 14640  0015B4  0E1A               	movlw	26
 14641  0015B6                     u18225:
 14642  0015B6  90D8               	bcf	status,0,c
 14643  0015B8  37C9               	rlcf	(??_doModeVerbose+8)& (0+255),f,b
 14644  0015BA  37CA               	rlcf	(??_doModeVerbose+9)& (0+255),f,b
 14645  0015BC  37CB               	rlcf	(??_doModeVerbose+10)& (0+255),f,b
 14646  0015BE  37CC               	rlcf	(??_doModeVerbose+11)& (0+255),f,b
 14647  0015C0  2EE8               	decfsz	wreg,f,c
 14648  0015C2  D7F9               	goto	u18225
 14649  0015C4  51C5               	movf	(??_doModeVerbose+4)& (0+255),w,b
 14650  0015C6  11C9               	iorwf	(??_doModeVerbose+8)& (0+255),w,b
 14651  0015C8  6FCD               	movwf	(??_doModeVerbose+12)& (0+255),b
 14652  0015CA  51C6               	movf	(??_doModeVerbose+5)& (0+255),w,b
 14653  0015CC  11CA               	iorwf	(??_doModeVerbose+9)& (0+255),w,b
 14654  0015CE  6FCE               	movwf	(??_doModeVerbose+13)& (0+255),b
 14655  0015D0  51C7               	movf	(??_doModeVerbose+6)& (0+255),w,b
 14656  0015D2  11CB               	iorwf	(??_doModeVerbose+10)& (0+255),w,b
 14657  0015D4  6FCF               	movwf	(??_doModeVerbose+14)& (0+255),b
 14658  0015D6  51C8               	movf	(??_doModeVerbose+7)& (0+255),w,b
 14659  0015D8  11CC               	iorwf	(??_doModeVerbose+11)& (0+255),w,b
 14660  0015DA  6FD0               	movwf	(??_doModeVerbose+15)& (0+255),b
 14661  0015DC  51C1               	movf	??_doModeVerbose& (0+255),w,b
 14662  0015DE  11CD               	iorwf	(??_doModeVerbose+12)& (0+255),w,b
 14663  0015E0  6FD1               	movwf	(??_doModeVerbose+16)& (0+255),b
 14664  0015E2  51C2               	movf	(??_doModeVerbose+1)& (0+255),w,b
 14665  0015E4  11CE               	iorwf	(??_doModeVerbose+13)& (0+255),w,b
 14666  0015E6  6FD2               	movwf	(??_doModeVerbose+17)& (0+255),b
 14667  0015E8  51C3               	movf	(??_doModeVerbose+2)& (0+255),w,b
 14668  0015EA  11CF               	iorwf	(??_doModeVerbose+14)& (0+255),w,b
 14669  0015EC  6FD3               	movwf	(??_doModeVerbose+18)& (0+255),b
 14670  0015EE  51C4               	movf	(??_doModeVerbose+3)& (0+255),w,b
 14671  0015F0  11D0               	iorwf	(??_doModeVerbose+15)& (0+255),w,b
 14672  0015F2  6FD4               	movwf	(??_doModeVerbose+19)& (0+255),b
 14673  0015F4  0102               	movlb	2	; () banked
 14674  0015F6  0012               	return	
 14675  0015F8                     __end_ofPL6:
 14676                           	opt stack 0
 14677  0015F8                     PL12:
 14678                           	opt stack 20
 14679  0015F8  6E1F               	movwf	?_strcpy+1,c
 14680  0015FA  0E24               	movlw	low _cmdbuf
 14681  0015FC  6E1E               	movwf	?_strcpy,c
 14682  0015FE  0E2C               	movlw	low (_cmdbuf+8)
 14683  001600  0100               	movlb	0	; () banked
 14684  001602  6FC1               	movwf	??_doModeVerbose& (0+255),b
 14685  001604  0E01               	movlw	high (_cmdbuf+8)
 14686  001606  6FC2               	movwf	(??_doModeVerbose+1)& (0+255),b
 14687  001608  C0C1  F020         	movff	??_doModeVerbose,?_strcpy+2
 14688  00160C  C0C2  F021         	movff	??_doModeVerbose+1,?_strcpy+3
 14689  001610  0012               	return	
 14690  001612                     __end_ofPL12:
 14691                           	opt stack 0
 14692  001612                     PL24:
 14693                           	opt stack 20
 14694  001612  0100               	movlb	0	; () banked
 14695  001614  6B65               	clrf	(?_strtok+1)& (0+255),b
 14696  001616  6B64               	clrf	?_strtok& (0+255),b
 14697  001618  0E7F               	movlw	high (STR_256+5)
 14698  00161A  6F67               	movwf	(?_strtok+3)& (0+255),b
 14699  00161C  0E2B               	movlw	low (STR_256+5)
 14700  00161E  6F66               	movwf	(?_strtok+2)& (0+255),b
 14701  001620  0012               	return	
 14702  001622                     __end_ofPL24:
 14703                           	opt stack 0
 14704  001622                     PL26:
 14705                           	opt stack 20
 14706  001622  0E01               	movlw	high _cmdbuf
 14707  001624  0100               	movlb	0	; () banked
 14708  001626  6F65               	movwf	(?_strtok+1)& (0+255),b
 14709  001628  0E24               	movlw	low _cmdbuf
 14710  00162A  6F64               	movwf	?_strtok& (0+255),b
 14711  00162C  0E7F               	movlw	high STR_30
 14712  00162E  6F67               	movwf	(?_strtok+3)& (0+255),b
 14713  001630  0EF5               	movlw	low STR_30
 14714  001632  6F66               	movwf	(?_strtok+2)& (0+255),b
 14715  001634  0012               	return	
 14716  001636                     __end_ofPL26:
 14717                           	opt stack 0
 14718  001636                     PL30:
 14719                           	opt stack 20
 14720  001636  0100               	movlb	0	; () banked
 14721  001638  6F65               	movwf	(?_strtok+1)& (0+255),b
 14722  00163A  0E24               	movlw	low _cmdbuf
 14723  00163C  6F64               	movwf	?_strtok& (0+255),b
 14724  00163E  0E7F               	movlw	high (STR_256+5)
 14725  001640  6F67               	movwf	(?_strtok+3)& (0+255),b
 14726  001642  0E2B               	movlw	low (STR_256+5)
 14727  001644  6F66               	movwf	(?_strtok+2)& (0+255),b
 14728  001646  0012               	return	
 14729  001648                     __end_ofPL30:
 14730                           	opt stack 0
 14731  001648                     PL38:
 14732                           	opt stack 20
 14733  001648  0102               	movlb	2	; () banked
 14734  00164A  51B0               	movf	doModeVerbose@i_1111& (0+255),w,b
 14735  00164C  C2AE  F0C1         	movff	doModeVerbose@reg,??_doModeVerbose
 14736  001650  0100               	movlb	0	; () banked
 14737  001652  6BC2               	clrf	(??_doModeVerbose+1)& (0+255),b
 14738  001654  27C1               	addwf	??_doModeVerbose& (0+255),f,b
 14739  001656  0E00               	movlw	0
 14740  001658  23C2               	addwfc	(??_doModeVerbose+1)& (0+255),f,b
 14741  00165A  51C1               	movf	??_doModeVerbose& (0+255),w,b
 14742  00165C  6F71               	movwf	(?_sprintf+4)& (0+255),b
 14743  00165E  6B72               	clrf	(?_sprintf+5)& (0+255),b
 14744  001660  0012               	return	
 14745  001662                     __end_ofPL38:
 14746                           	opt stack 0
 14747  001662                     PL40:
 14748                           	opt stack 20
 14749  001662  0100               	movlb	0	; () banked
 14750  001664  6BC2               	clrf	(??_doModeVerbose+1)& (0+255),b
 14751  001666  6BC3               	clrf	(??_doModeVerbose+2)& (0+255),b
 14752  001668  6BC4               	clrf	(??_doModeVerbose+3)& (0+255),b
 14753  00166A  C0C3  F0C4         	movff	??_doModeVerbose+2,??_doModeVerbose+3
 14754  00166E  C0C2  F0C3         	movff	??_doModeVerbose+1,??_doModeVerbose+2
 14755  001672  C0C1  F0C2         	movff	??_doModeVerbose,??_doModeVerbose+1
 14756  001676  6BC1               	clrf	??_doModeVerbose& (0+255),b
 14757  001678  0102               	movlb	2	; () banked
 14758  00167A  0012               	return	
 14759  00167C                     __end_ofPL40:
 14760                           	opt stack 0
 14761  00167C                     PL48:
 14762                           	opt stack 20
 14763  00167C  6E1E               	movwf	?__CANIDToRegs,c
 14764  00167E  C2A3  F020         	movff	doModeVerbose@id_1222,?__CANIDToRegs+2
 14765  001682  C2A4  F021         	movff	doModeVerbose@id_1222+1,?__CANIDToRegs+3
 14766  001686  C2A5  F022         	movff	doModeVerbose@id_1222+2,?__CANIDToRegs+4
 14767  00168A  C2A6  F023         	movff	doModeVerbose@id_1222+3,?__CANIDToRegs+5
 14768  00168E  0E01               	movlw	1
 14769  001690  6E24               	movwf	?__CANIDToRegs+6,c
 14770  001692  0C01               	retlw	1
 14771  001694                     __end_ofPL48:
 14772                           	opt stack 0
 14773  001694                     PL52:
 14774                           	opt stack 20
 14775  001694  0100               	movlb	0	; () banked
 14776  001696  6FC6               	movwf	(??_doModeVerbose+5)& (0+255),b
 14777  001698  6BC7               	clrf	(??_doModeVerbose+6)& (0+255),b
 14778  00169A  6BC8               	clrf	(??_doModeVerbose+7)& (0+255),b
 14779  00169C  C0C6  F0C8         	movff	??_doModeVerbose+5,??_doModeVerbose+7
 14780  0016A0  C0C5  F0C7         	movff	??_doModeVerbose+4,??_doModeVerbose+6
 14781  0016A4  6BC6               	clrf	(??_doModeVerbose+5)& (0+255),b
 14782  0016A6  6BC5               	clrf	(??_doModeVerbose+4)& (0+255),b
 14783  0016A8  0012               	return	
 14784  0016AA                     __end_ofPL52:
 14785                           	opt stack 0
 14786                           tblptru	equ	0xFF8
 14787                           tblptrh	equ	0xFF7
 14788                           tblptrl	equ	0xFF6
 14789                           tablat	equ	0xFF5
 14790                           prodh	equ	0xFF4
 14791                           prodl	equ	0xFF3
 14792                           intcon	equ	0xFF2
 14793                           indf0	equ	0xFEF
 14794                           postinc0	equ	0xFEE
 14795                           fsr0h	equ	0xFEA
 14796                           fsr0l	equ	0xFE9
 14797                           wreg	equ	0xFE8
 14798                           indf1	equ	0xFE7
 14799                           postinc1	equ	0xFE6
 14800                           postdec1	equ	0xFE5
 14801                           fsr1h	equ	0xFE2
 14802                           fsr1l	equ	0xFE1
 14803                           indf2	equ	0xFDF
 14804                           postinc2	equ	0xFDE
 14805                           postdec2	equ	0xFDD
 14806                           plusw2	equ	0xFDB
 14807                           fsr2h	equ	0xFDA
 14808                           fsr2l	equ	0xFD9
 14809                           status	equ	0xFD8
 14810                           
 14811 ;; *************** function _setFilter *****************
 14812 ;; Defined at:
 14813 ;;		line 2835 in file "main.c"
 14814 ;; Parameters:    Size  Location     Type
 14815 ;;  filter          1    wreg     unsigned char 
 14816 ;;  val             4   29[COMRAM] unsigned long 
 14817 ;; Auto vars:     Size  Location     Type
 14818 ;;  filter          1   33[COMRAM] unsigned char 
 14819 ;;  eidl            1   37[COMRAM] unsigned char 
 14820 ;;  eidh            1   36[COMRAM] unsigned char 
 14821 ;;  sidl            1   35[COMRAM] unsigned char 
 14822 ;;  sidh            1   34[COMRAM] unsigned char 
 14823 ;; Return value:  Size  Location     Type
 14824 ;;		None               void
 14825 ;; Registers used:
 14826 ;;		wreg, status,2, status,0
 14827 ;; Tracked objects:
 14828 ;;		On entry : F/2
 14829 ;;		On exit  : F/0
 14830 ;;		Unchanged: 0/0
 14831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 14832 ;;      Params:         4       0       0       0       0       0       0
 14833 ;;      Locals:         5       0       0       0       0       0       0
 14834 ;;      Temps:          0       6       0       0       0       0       0
 14835 ;;      Totals:         9       6       0       0       0       0       0
 14836 ;;Total ram usage:       15 bytes
 14837 ;; Hardware stack levels used:    1
 14838 ;; Hardware stack levels required when called:    3
 14839 ;; This function calls:
 14840 ;;		Nothing
 14841 ;; This function is called by:
 14842 ;;		_doModeVerbose
 14843 ;; This function uses a non-reentrant model
 14844 ;;
 14845                           
 14846                           	psect	text23
 14847  0028F4                     __ptext23:
 14848                           	opt stack 0
 14849  0028F4                     _setFilter:
 14850                           	opt stack 26
 14851                           
 14852                           ;incstack = 0
 14853                           ;incstack = 0
 14854                           ;setFilter@filter stored from wreg
 14855  0028F4  CFE8 F022          	movff	wreg,setFilter@filter
 14856                           
 14857                           ; BSR set to: 2
 14858                           ;main.c: 2836: uint8_t sidh = (long) val >> 21L;
 14859  0028F8  0E15               	movlw	21
 14860  0028FA  0100               	movlb	0	; () banked
 14861  0028FC  6F60               	movwf	??_setFilter& (0+255),b
 14862  0028FE  C01E  F061         	movff	setFilter@val,??_setFilter+1
 14863  002902  C01F  F062         	movff	setFilter@val+1,??_setFilter+2
 14864  002906  C020  F063         	movff	setFilter@val+2,??_setFilter+3
 14865  00290A  C021  F064         	movff	setFilter@val+3,??_setFilter+4
 14866  00290E                     u19805:
 14867  00290E  6760               	tstfsz	??_setFilter& (0+255),b
 14868  002910  D001               	goto	u19806
 14869  002912  D007               	goto	u19807
 14870  002914                     u19806:
 14871  002914  3564               	rlcf	(??_setFilter+4)& (0+255),w,b
 14872  002916  3364               	rrcf	(??_setFilter+4)& (0+255),f,b
 14873  002918  3363               	rrcf	(??_setFilter+3)& (0+255),f,b
 14874  00291A  3362               	rrcf	(??_setFilter+2)& (0+255),f,b
 14875  00291C  3361               	rrcf	(??_setFilter+1)& (0+255),f,b
 14876  00291E  2F60               	decfsz	??_setFilter& (0+255),f,b
 14877  002920  D7F6               	goto	u19805
 14878  002922                     u19807:
 14879  002922  5161               	movf	(??_setFilter+1)& (0+255),w,b
 14880  002924  6E23               	movwf	setFilter@sidh,c
 14881                           
 14882                           ;main.c: 2837: uint8_t sidl = (((long) val >> 13L) & 0xe0) |
 14883                           ;main.c: 2838: ((long) (val) & 0x03L) |
 14884                           ;main.c: 2839: 0x08;
 14885  002926  C01E  F060         	movff	setFilter@val,??_setFilter
 14886  00292A  0E03               	movlw	3
 14887  00292C  1760               	andwf	??_setFilter& (0+255),f,b
 14888  00292E  0E0D               	movlw	13
 14889  002930  6F61               	movwf	(??_setFilter+1)& (0+255),b
 14890  002932  C01E  F062         	movff	setFilter@val,??_setFilter+2
 14891  002936  C01F  F063         	movff	setFilter@val+1,??_setFilter+3
 14892  00293A  C020  F064         	movff	setFilter@val+2,??_setFilter+4
 14893  00293E  C021  F065         	movff	setFilter@val+3,??_setFilter+5
 14894  002942                     u19815:
 14895  002942  6761               	tstfsz	(??_setFilter+1)& (0+255),b
 14896  002944  D001               	goto	u19816
 14897  002946  D007               	goto	u19817
 14898  002948                     u19816:
 14899  002948  3565               	rlcf	(??_setFilter+5)& (0+255),w,b
 14900  00294A  3365               	rrcf	(??_setFilter+5)& (0+255),f,b
 14901  00294C  3364               	rrcf	(??_setFilter+4)& (0+255),f,b
 14902  00294E  3363               	rrcf	(??_setFilter+3)& (0+255),f,b
 14903  002950  3362               	rrcf	(??_setFilter+2)& (0+255),f,b
 14904  002952  2F61               	decfsz	(??_setFilter+1)& (0+255),f,b
 14905  002954  D7F6               	goto	u19815
 14906  002956                     u19817:
 14907  002956  5162               	movf	(??_setFilter+2)& (0+255),w,b
 14908  002958  0BE0               	andlw	224
 14909  00295A  1160               	iorwf	??_setFilter& (0+255),w,b
 14910  00295C  0908               	iorlw	8
 14911  00295E  6E24               	movwf	setFilter@sidl,c
 14912                           
 14913                           ; BSR set to: 0
 14914                           ;main.c: 2840: uint8_t eidh = (long) val >> 8L;
 14915  002960  C01F  F025         	movff	setFilter@val+1,setFilter@eidh
 14916                           
 14917                           ; BSR set to: 0
 14918                           ;main.c: 2841: uint8_t eidl = val;
 14919  002964  C01E  F026         	movff	setFilter@val,setFilter@eidl
 14920                           
 14921                           ;main.c: 2843: switch (filter) {
 14922  002968  D090               	goto	l14627
 14923  00296A                     l1253:
 14924                           
 14925                           ; BSR set to: 0
 14926                           ;main.c: 2846: RXF0SIDH = sidh;
 14927  00296A  C023  FF00         	movff	setFilter@sidh,3840	;volatile
 14928                           
 14929                           ;main.c: 2847: RXF0SIDL = sidl;
 14930  00296E  C024  FF01         	movff	setFilter@sidl,3841	;volatile
 14931                           
 14932                           ;main.c: 2848: RXF0EIDH = eidh;
 14933  002972  C025  FF02         	movff	setFilter@eidh,3842	;volatile
 14934                           
 14935                           ;main.c: 2849: RXF0EIDL = eidl;
 14936  002976  C026  FF03         	movff	setFilter@eidl,3843	;volatile
 14937                           
 14938                           ;main.c: 2850: break;
 14939  00297A  D0AA               	goto	l1270
 14940  00297C                     l1255:
 14941                           
 14942                           ; BSR set to: 0
 14943                           ;main.c: 2853: RXF1SIDH = sidh;
 14944  00297C  C023  FF04         	movff	setFilter@sidh,3844	;volatile
 14945                           
 14946                           ;main.c: 2854: RXF1SIDL = sidl;
 14947  002980  C024  FF05         	movff	setFilter@sidl,3845	;volatile
 14948                           
 14949                           ;main.c: 2855: RXF1EIDH = eidh;
 14950  002984  C025  FF06         	movff	setFilter@eidh,3846	;volatile
 14951                           
 14952                           ;main.c: 2856: RXF1EIDL = eidl;
 14953  002988  C026  FF07         	movff	setFilter@eidl,3847	;volatile
 14954                           
 14955                           ;main.c: 2857: break;
 14956  00298C  D0A1               	goto	l1270
 14957  00298E                     l1256:
 14958                           
 14959                           ; BSR set to: 0
 14960                           ;main.c: 2860: RXF2SIDH = sidh;
 14961  00298E  C023  FF08         	movff	setFilter@sidh,3848	;volatile
 14962                           
 14963                           ;main.c: 2861: RXF2SIDL = sidl;
 14964  002992  C024  FF09         	movff	setFilter@sidl,3849	;volatile
 14965                           
 14966                           ;main.c: 2862: RXF2EIDH = eidh;
 14967  002996  C025  FF0A         	movff	setFilter@eidh,3850	;volatile
 14968                           
 14969                           ;main.c: 2863: RXF2EIDL = eidl;
 14970  00299A  C026  FF0B         	movff	setFilter@eidl,3851	;volatile
 14971                           
 14972                           ;main.c: 2864: break;
 14973  00299E  D098               	goto	l1270
 14974  0029A0                     l1257:
 14975                           
 14976                           ; BSR set to: 0
 14977                           ;main.c: 2867: RXF3SIDH = sidh;
 14978  0029A0  C023  FF0C         	movff	setFilter@sidh,3852	;volatile
 14979                           
 14980                           ;main.c: 2868: RXF3SIDL = sidl;
 14981  0029A4  C024  FF0D         	movff	setFilter@sidl,3853	;volatile
 14982                           
 14983                           ;main.c: 2869: RXF3EIDH = eidh;
 14984  0029A8  C025  FF0E         	movff	setFilter@eidh,3854	;volatile
 14985                           
 14986                           ;main.c: 2870: RXF3EIDL = eidl;
 14987  0029AC  C026  FF0F         	movff	setFilter@eidl,3855	;volatile
 14988                           
 14989                           ;main.c: 2871: break;
 14990  0029B0  D08F               	goto	l1270
 14991  0029B2                     l1258:
 14992                           
 14993                           ; BSR set to: 0
 14994                           ;main.c: 2874: RXF4SIDH = sidh;
 14995  0029B2  C023  FF10         	movff	setFilter@sidh,3856	;volatile
 14996                           
 14997                           ;main.c: 2875: RXF4SIDL = sidl;
 14998  0029B6  C024  FF11         	movff	setFilter@sidl,3857	;volatile
 14999                           
 15000                           ;main.c: 2876: RXF4EIDH = eidh;
 15001  0029BA  C025  FF12         	movff	setFilter@eidh,3858	;volatile
 15002                           
 15003                           ;main.c: 2877: RXF4EIDL = eidl;
 15004  0029BE  C026  FF13         	movff	setFilter@eidl,3859	;volatile
 15005                           
 15006                           ;main.c: 2878: break;
 15007  0029C2  D086               	goto	l1270
 15008  0029C4                     l1259:
 15009                           
 15010                           ; BSR set to: 0
 15011                           ;main.c: 2881: RXF5SIDH = sidh;
 15012  0029C4  C023  FF14         	movff	setFilter@sidh,3860	;volatile
 15013                           
 15014                           ;main.c: 2882: RXF5SIDL = sidl;
 15015  0029C8  C024  FF15         	movff	setFilter@sidl,3861	;volatile
 15016                           
 15017                           ;main.c: 2883: RXF5EIDH = eidh;
 15018  0029CC  C025  FF16         	movff	setFilter@eidh,3862	;volatile
 15019                           
 15020                           ;main.c: 2884: RXF5EIDL = eidl;
 15021  0029D0  C026  FF17         	movff	setFilter@eidl,3863	;volatile
 15022                           
 15023                           ;main.c: 2885: break;
 15024  0029D4  D07D               	goto	l1270
 15025  0029D6                     l1260:
 15026                           
 15027                           ; BSR set to: 0
 15028                           ;main.c: 2888: RXF6SIDH = sidh;
 15029  0029D6  C023  FD60         	movff	setFilter@sidh,3424	;volatile
 15030                           
 15031                           ;main.c: 2889: RXF6SIDL = sidl;
 15032  0029DA  C024  FD61         	movff	setFilter@sidl,3425	;volatile
 15033                           
 15034                           ;main.c: 2890: RXF6EIDH = eidh;
 15035  0029DE  C025  FD62         	movff	setFilter@eidh,3426	;volatile
 15036                           
 15037                           ;main.c: 2891: RXF6EIDL = eidl;
 15038  0029E2  C026  FD63         	movff	setFilter@eidl,3427	;volatile
 15039                           
 15040                           ;main.c: 2892: break;
 15041  0029E6  D074               	goto	l1270
 15042  0029E8                     l1261:
 15043                           
 15044                           ; BSR set to: 0
 15045                           ;main.c: 2895: RXF7SIDH = sidh;
 15046  0029E8  C023  FD64         	movff	setFilter@sidh,3428	;volatile
 15047                           
 15048                           ;main.c: 2896: RXF7SIDL = sidl;
 15049  0029EC  C024  FD65         	movff	setFilter@sidl,3429	;volatile
 15050                           
 15051                           ;main.c: 2897: RXF7EIDH = eidh;
 15052  0029F0  C025  FD66         	movff	setFilter@eidh,3430	;volatile
 15053                           
 15054                           ;main.c: 2898: RXF7EIDL = eidl;
 15055  0029F4  C026  FD67         	movff	setFilter@eidl,3431	;volatile
 15056                           
 15057                           ;main.c: 2899: break;
 15058  0029F8  D06B               	goto	l1270
 15059  0029FA                     l1262:
 15060                           
 15061                           ; BSR set to: 0
 15062                           ;main.c: 2902: RXF8SIDH = sidh;
 15063  0029FA  C023  FD68         	movff	setFilter@sidh,3432	;volatile
 15064                           
 15065                           ;main.c: 2903: RXF8SIDL = sidl;
 15066  0029FE  C024  FD69         	movff	setFilter@sidl,3433	;volatile
 15067                           
 15068                           ;main.c: 2904: RXF8EIDH = eidh;
 15069  002A02  C025  FD6A         	movff	setFilter@eidh,3434	;volatile
 15070                           
 15071                           ;main.c: 2905: RXF8EIDL = eidl;
 15072  002A06  C026  FD6B         	movff	setFilter@eidl,3435	;volatile
 15073                           
 15074                           ;main.c: 2906: break;
 15075  002A0A  D062               	goto	l1270
 15076  002A0C                     l1263:
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;main.c: 2909: RXF9SIDH = sidh;
 15080  002A0C  C023  FD70         	movff	setFilter@sidh,3440	;volatile
 15081                           
 15082                           ;main.c: 2910: RXF9SIDL = sidl;
 15083  002A10  C024  FD71         	movff	setFilter@sidl,3441	;volatile
 15084                           
 15085                           ;main.c: 2911: RXF9EIDH = eidh;
 15086  002A14  C025  FD72         	movff	setFilter@eidh,3442	;volatile
 15087                           
 15088                           ;main.c: 2912: RXF9EIDL = eidl;
 15089  002A18  C026  FD73         	movff	setFilter@eidl,3443	;volatile
 15090                           
 15091                           ;main.c: 2913: break;
 15092  002A1C  D059               	goto	l1270
 15093  002A1E                     l1264:
 15094                           
 15095                           ; BSR set to: 0
 15096                           ;main.c: 2916: RXF10SIDH = sidh;
 15097  002A1E  C023  FD74         	movff	setFilter@sidh,3444	;volatile
 15098                           
 15099                           ;main.c: 2917: RXF10SIDL = sidl;
 15100  002A22  C024  FD75         	movff	setFilter@sidl,3445	;volatile
 15101                           
 15102                           ;main.c: 2918: RXF10EIDH = eidh;
 15103  002A26  C025  FD76         	movff	setFilter@eidh,3446	;volatile
 15104                           
 15105                           ;main.c: 2919: RXF10EIDL = eidl;
 15106  002A2A  C026  FD77         	movff	setFilter@eidl,3447	;volatile
 15107                           
 15108                           ;main.c: 2920: break;
 15109  002A2E  D050               	goto	l1270
 15110  002A30                     l1265:
 15111                           
 15112                           ; BSR set to: 0
 15113                           ;main.c: 2923: RXF11SIDH = sidh;
 15114  002A30  C023  FD78         	movff	setFilter@sidh,3448	;volatile
 15115                           
 15116                           ;main.c: 2924: RXF11SIDL = sidl;
 15117  002A34  C024  FD79         	movff	setFilter@sidl,3449	;volatile
 15118                           
 15119                           ;main.c: 2925: RXF11EIDH = eidh;
 15120  002A38  C025  FD7A         	movff	setFilter@eidh,3450	;volatile
 15121                           
 15122                           ;main.c: 2926: RXF11EIDL = eidl;
 15123  002A3C  C026  FD7B         	movff	setFilter@eidl,3451	;volatile
 15124                           
 15125                           ;main.c: 2927: break;
 15126  002A40  D047               	goto	l1270
 15127  002A42                     l1266:
 15128                           
 15129                           ; BSR set to: 0
 15130                           ;main.c: 2930: RXF12SIDH = sidh;
 15131  002A42  C023  FD80         	movff	setFilter@sidh,3456	;volatile
 15132                           
 15133                           ;main.c: 2931: RXF12SIDL = sidl;
 15134  002A46  C024  FD81         	movff	setFilter@sidl,3457	;volatile
 15135                           
 15136                           ;main.c: 2932: RXF12EIDH = eidh;
 15137  002A4A  C025  FD82         	movff	setFilter@eidh,3458	;volatile
 15138                           
 15139                           ;main.c: 2933: RXF12EIDL = eidl;
 15140  002A4E  C026  FD83         	movff	setFilter@eidl,3459	;volatile
 15141                           
 15142                           ;main.c: 2934: break;
 15143  002A52  D03E               	goto	l1270
 15144  002A54                     l1267:
 15145                           
 15146                           ; BSR set to: 0
 15147                           ;main.c: 2937: RXF13SIDH = sidh;
 15148  002A54  C023  FD84         	movff	setFilter@sidh,3460	;volatile
 15149                           
 15150                           ;main.c: 2938: RXF13SIDL = sidl;
 15151  002A58  C024  FD85         	movff	setFilter@sidl,3461	;volatile
 15152                           
 15153                           ;main.c: 2939: RXF13EIDH = eidh;
 15154  002A5C  C025  FD86         	movff	setFilter@eidh,3462	;volatile
 15155                           
 15156                           ;main.c: 2940: RXF13EIDL = eidl;
 15157  002A60  C026  FD87         	movff	setFilter@eidl,3463	;volatile
 15158                           
 15159                           ;main.c: 2941: break;
 15160  002A64  D035               	goto	l1270
 15161  002A66                     l1268:
 15162                           
 15163                           ; BSR set to: 0
 15164                           ;main.c: 2944: RXF14SIDH = sidh;
 15165  002A66  C023  FD88         	movff	setFilter@sidh,3464	;volatile
 15166                           
 15167                           ;main.c: 2945: RXF14SIDL = sidl;
 15168  002A6A  C024  FD89         	movff	setFilter@sidl,3465	;volatile
 15169                           
 15170                           ;main.c: 2946: RXF14EIDH = eidh;
 15171  002A6E  C025  FD8A         	movff	setFilter@eidh,3466	;volatile
 15172                           
 15173                           ;main.c: 2947: RXF14EIDL = eidl;
 15174  002A72  C026  FD8B         	movff	setFilter@eidl,3467	;volatile
 15175                           
 15176                           ;main.c: 2948: break;
 15177  002A76  D02C               	goto	l1270
 15178  002A78                     l1269:
 15179                           
 15180                           ; BSR set to: 0
 15181                           ;main.c: 2951: RXF15SIDH = sidh;
 15182  002A78  C023  FD90         	movff	setFilter@sidh,3472	;volatile
 15183                           
 15184                           ;main.c: 2952: RXF15SIDL = sidl;
 15185  002A7C  C024  FD91         	movff	setFilter@sidl,3473	;volatile
 15186                           
 15187                           ;main.c: 2953: RXF15EIDH = eidh;
 15188  002A80  C025  FD92         	movff	setFilter@eidh,3474	;volatile
 15189                           
 15190                           ;main.c: 2954: RXF15EIDL = eidl;
 15191  002A84  C026  FD93         	movff	setFilter@eidl,3475	;volatile
 15192                           
 15193                           ;main.c: 2955: break;
 15194  002A88  D023               	goto	l1270
 15195  002A8A                     l14627:
 15196                           
 15197                           ; BSR set to: 0
 15198  002A8A  5022               	movf	setFilter@filter,w,c
 15199                           
 15200                           ; Switch size 1, requested type "space"
 15201                           ; Number of cases is 16, Range of values is 0 to 15
 15202                           ; switch strategies available:
 15203                           ; Name         Instructions Cycles
 15204                           ; simple_byte           49    25 (average)
 15205                           ;	Chosen strategy is simple_byte
 15206  002A8C  E101 D76D          	bz	l1253
 15207  002A90  0A01               	xorlw	1	; case 1
 15208  002A92  E101 D773          	bz	l1255
 15209  002A96  0A03               	xorlw	3	; case 2
 15210  002A98  E101 D779          	bz	l1256
 15211  002A9C  0A01               	xorlw	1	; case 3
 15212  002A9E  E080               	bz	l1257
 15213  002AA0  0A07               	xorlw	7	; case 4
 15214  002AA2  E087               	bz	l1258
 15215  002AA4  0A01               	xorlw	1	; case 5
 15216  002AA6  E08E               	bz	l1259
 15217  002AA8  0A03               	xorlw	3	; case 6
 15218  002AAA  E095               	bz	l1260
 15219  002AAC  0A01               	xorlw	1	; case 7
 15220  002AAE  E09C               	bz	l1261
 15221  002AB0  0A0F               	xorlw	15	; case 8
 15222  002AB2  E0A3               	bz	l1262
 15223  002AB4  0A01               	xorlw	1	; case 9
 15224  002AB6  E0AA               	bz	l1263
 15225  002AB8  0A03               	xorlw	3	; case 10
 15226  002ABA  E0B1               	bz	l1264
 15227  002ABC  0A01               	xorlw	1	; case 11
 15228  002ABE  E0B8               	bz	l1265
 15229  002AC0  0A07               	xorlw	7	; case 12
 15230  002AC2  E0BF               	bz	l1266
 15231  002AC4  0A01               	xorlw	1	; case 13
 15232  002AC6  E0C6               	bz	l1267
 15233  002AC8  0A03               	xorlw	3	; case 14
 15234  002ACA  E0CD               	bz	l1268
 15235  002ACC  0A01               	xorlw	1	; case 15
 15236  002ACE  E0D4               	bz	l1269
 15237  002AD0                     l1270:
 15238                           
 15239                           ; BSR set to: 0
 15240  002AD0  0012               	return	
 15241  002AD2                     __end_of_setFilter:
 15242                           	opt stack 0
 15243                           tblptru	equ	0xFF8
 15244                           tblptrh	equ	0xFF7
 15245                           tblptrl	equ	0xFF6
 15246                           tablat	equ	0xFF5
 15247                           prodh	equ	0xFF4
 15248                           prodl	equ	0xFF3
 15249                           intcon	equ	0xFF2
 15250                           indf0	equ	0xFEF
 15251                           postinc0	equ	0xFEE
 15252                           fsr0h	equ	0xFEA
 15253                           fsr0l	equ	0xFE9
 15254                           wreg	equ	0xFE8
 15255                           indf1	equ	0xFE7
 15256                           postinc1	equ	0xFE6
 15257                           postdec1	equ	0xFE5
 15258                           fsr1h	equ	0xFE2
 15259                           fsr1l	equ	0xFE1
 15260                           indf2	equ	0xFDF
 15261                           postinc2	equ	0xFDE
 15262                           postdec2	equ	0xFDD
 15263                           plusw2	equ	0xFDB
 15264                           fsr2h	equ	0xFDA
 15265                           fsr2l	equ	0xFD9
 15266                           status	equ	0xFD8
 15267                           
 15268 ;; *************** function _writeRegisterExtended *****************
 15269 ;; Defined at:
 15270 ;;		line 2398 in file "main.c"
 15271 ;; Parameters:    Size  Location     Type
 15272 ;;  nodeid          1    wreg     unsigned char 
 15273 ;;  page            2   77[BANK0 ] unsigned short 
 15274 ;;  reg             1   79[BANK0 ] unsigned char 
 15275 ;;  timeout         2   80[BANK0 ] unsigned short 
 15276 ;;  value           2   82[BANK0 ] PTR unsigned char 
 15277 ;;		 -> doModeVerbose@value_1164(1), 
 15278 ;; Auto vars:     Size  Location     Type
 15279 ;;  nodeid          1   88[BANK0 ] unsigned char 
 15280 ;; Return value:  Size  Location     Type
 15281 ;;                  1    wreg      enum E15660
 15282 ;; Registers used:
 15283 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15284 ;; Tracked objects:
 15285 ;;		On entry : F/2
 15286 ;;		On exit  : E/0
 15287 ;;		Unchanged: 0/0
 15288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15289 ;;      Params:         0       7       0       0       0       0       0
 15290 ;;      Locals:         0       1       0       0       0       0       0
 15291 ;;      Temps:          0       4       0       0       0       0       0
 15292 ;;      Totals:         0      12       0       0       0       0       0
 15293 ;;Total ram usage:       12 bytes
 15294 ;; Hardware stack levels used:    1
 15295 ;; Hardware stack levels required when called:    7
 15296 ;; This function calls:
 15297 ;;		_sendVSCPFrame
 15298 ;;		_getVSCPFrame
 15299 ;; This function is called by:
 15300 ;;		_doModeVerbose
 15301 ;; This function uses a non-reentrant model
 15302 ;;
 15303                           
 15304                           	psect	text24
 15305  003C5E                     __ptext24:
 15306                           	opt stack 0
 15307  003C5E                     _writeRegisterExtended:
 15308                           	opt stack 22
 15309                           
 15310                           ; BSR set to: 0
 15311                           ;incstack = 0
 15312                           ;incstack = 0
 15313                           ;writeRegisterExtended@nodeid stored from wreg
 15314  003C5E  CFE8 F0B8          	movff	wreg,writeRegisterExtended@nodeid
 15315                           
 15316                           ; BSR set to: 2
 15317                           ;main.c: 2399: vscpData[ 0 ] = nodeid;
 15318  003C62  C0B8  F1DC         	movff	writeRegisterExtended@nodeid,_vscpData
 15319                           
 15320                           ; BSR set to: 2
 15321                           ;main.c: 2400: vscpData[ 1 ] = page >> 8;
 15322  003C66  0100               	movlb	0	; () banked
 15323  003C68  51AE               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15324  003C6A  0101               	movlb	1	; () banked
 15325  003C6C  6FDD               	movwf	(_vscpData+1)& (0+255),b
 15326                           
 15327                           ; BSR set to: 1
 15328                           ;main.c: 2401: vscpData[ 2 ] = page & 0xff;
 15329  003C6E  C0AD  F1DE         	movff	writeRegisterExtended@page,_vscpData+2
 15330                           
 15331                           ; BSR set to: 1
 15332                           ;main.c: 2402: vscpData[ 3 ] = reg;
 15333  003C72  C0AF  F1DF         	movff	writeRegisterExtended@reg,_vscpData+3
 15334                           
 15335                           ; BSR set to: 1
 15336                           ;main.c: 2403: vscpData[ 4 ] = *value;
 15337  003C76  C0B2  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15338  003C7A  C0B3  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15339  003C7E  50DF               	movf	indf2,w,c
 15340  003C80  6FE0               	movwf	(_vscpData+4)& (0+255),b
 15341                           
 15342                           ; BSR set to: 1
 15343                           ;main.c: 2405: if (sendVSCPFrame(0,
 15344                           ;main.c: 2406: 38,
 15345                           ;main.c: 2407: 0,
 15346                           ;main.c: 2408: 0,
 15347                           ;main.c: 2409: 5,
 15348                           ;main.c: 2410: vscpData)) {
 15349  003C82  0100               	movlb	0	; () banked
 15350  003C84  6B8E               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15351  003C86  6B8D               	clrf	?_sendVSCPFrame& (0+255),b
 15352  003C88  0E26               	movlw	38
 15353  003C8A  6F8F               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15354  003C8C  6B90               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15355  003C8E  6B91               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15356  003C90  0E05               	movlw	5
 15357  003C92  6F92               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15358  003C94  0E01               	movlw	high _vscpData
 15359  003C96  6F94               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15360  003C98  0EDC               	movlw	low _vscpData
 15361  003C9A  6F93               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15362  003C9C  EC6F  F022         	call	_sendVSCPFrame	;wreg free
 15363  003CA0  0900               	iorlw	0
 15364  003CA2  E051               	bz	l14527
 15365                           
 15366                           ;main.c: 2412: timekeeper = 0;
 15367  003CA4  6A27               	clrf	_timekeeper,c	;volatile
 15368  003CA6  6A28               	clrf	_timekeeper+1,c	;volatile
 15369  003CA8  6A29               	clrf	_timekeeper+2,c	;volatile
 15370  003CAA  6A2A               	clrf	_timekeeper+3,c	;volatile
 15371                           
 15372                           ;main.c: 2413: while (timekeeper < timeout) {
 15373  003CAC  D03C               	goto	l14525
 15374  003CAE                     l1110:
 15375                           
 15376                           ; BSR set to: 0
 15377  003CAE  0004               	clrwdt		;# 
 15378                           
 15379                           ;main.c: 2417: if (getVSCPFrame(&vscpClass,
 15380                           ;main.c: 2418: &vscpType,
 15381                           ;main.c: 2419: &vscpNodeId,
 15382                           ;main.c: 2420: &vscpPriority,
 15383                           ;main.c: 2421: &vscpSize,
 15384                           ;main.c: 2422: vscpData)) {
 15385  003CB0  0100               	movlb	0	; () banked
 15386  003CB2  0EE5               	movlw	low _vscpType
 15387  003CB4  6F6B               	movwf	?_getVSCPFrame& (0+255),b
 15388  003CB6  0EE2               	movlw	low _vscpNodeId
 15389  003CB8  6F6C               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15390  003CBA  0EE3               	movlw	low _vscpPriority
 15391  003CBC  6F6D               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15392  003CBE  0EE4               	movlw	low _vscpSize
 15393  003CC0  6F6E               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15394  003CC2  0E01               	movlw	high _vscpData
 15395  003CC4  6F70               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15396  003CC6  0EDC               	movlw	low _vscpData
 15397  003CC8  6F6F               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15398  003CCA  0E3E               	movlw	_vscpClass& (0+255)
 15399  003CCC  EC78  F026         	call	_getVSCPFrame
 15400  003CD0  0900               	iorlw	0
 15401  003CD2  E029               	bz	l14525
 15402                           
 15403                           ; BSR set to: 0
 15404                           ;main.c: 2424: if ((nodeid == vscpNodeId) &&
 15405                           ;main.c: 2425: (5 == vscpSize) &&
 15406                           ;main.c: 2426: (0 == vscpData[ 0 ]) &&
 15407                           ;main.c: 2427: ((page >> 8) == vscpData[ 1 ]) &&
 15408                           ;main.c: 2428: ((page & 0xff) == vscpData[ 2 ]) &&
 15409                           ;main.c: 2429: (reg == vscpData[ 3 ]) &&
 15410                           ;main.c: 2430: (*value == vscpData[ 4 ])) {
 15411  003CD4  51E2               	movf	_vscpNodeId& (0+255),w,b
 15412  003CD6  63B8               	cpfseq	writeRegisterExtended@nodeid& (0+255),b
 15413  003CD8  D026               	goto	l14525
 15414                           
 15415                           ; BSR set to: 0
 15416  003CDA  51E4               	movf	_vscpSize& (0+255),w,b
 15417  003CDC  0A05               	xorlw	5
 15418  003CDE  E123               	bnz	l14525
 15419                           
 15420                           ; BSR set to: 0
 15421  003CE0  0101               	movlb	1	; () banked
 15422  003CE2  67DC               	tstfsz	_vscpData& (0+255),b
 15423  003CE4  D020               	goto	l14525
 15424                           
 15425                           ; BSR set to: 1
 15426  003CE6  0100               	movlb	0	; () banked
 15427  003CE8  51AE               	movf	(writeRegisterExtended@page+1)& (0+255),w,b
 15428  003CEA  0101               	movlb	1	; () banked
 15429  003CEC  19DD               	xorwf	(_vscpData+1)& (0+255),w,b
 15430  003CEE  E11B               	bnz	l14525
 15431                           
 15432                           ; BSR set to: 1
 15433  003CF0  0100               	movlb	0	; () banked
 15434  003CF2  51AD               	movf	writeRegisterExtended@page& (0+255),w,b
 15435  003CF4  EE21  F0DE         	lfsr	2,_vscpData+2
 15436  003CF8  62DF               	cpfseq	indf2,c
 15437  003CFA  D015               	goto	l14525
 15438                           
 15439                           ; BSR set to: 1
 15440  003CFC  51AF               	movf	writeRegisterExtended@reg& (0+255),w,b
 15441  003CFE  0101               	movlb	1	; () banked
 15442  003D00  EE21  F0DF         	lfsr	2,_vscpData+3
 15443  003D04  62DF               	cpfseq	indf2,c
 15444  003D06  D00F               	goto	l14525
 15445                           
 15446                           ; BSR set to: 1
 15447  003D08  51E0               	movf	(_vscpData+4)& (0+255),w,b
 15448  003D0A  C0B2  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15449  003D0E  C0B3  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15450  003D12  62DF               	cpfseq	indf2,c
 15451  003D14  D008               	goto	l14525
 15452                           
 15453                           ; BSR set to: 1
 15454                           ;main.c: 2431: *value = vscpData[ 1 ];
 15455  003D16  C0B2  FFD9         	movff	writeRegisterExtended@value,fsr2l
 15456  003D1A  C0B3  FFDA         	movff	writeRegisterExtended@value+1,fsr2h
 15457  003D1E  C1DD  FFDF         	movff	_vscpData+1,indf2
 15458                           
 15459                           ; BSR set to: 1
 15460                           ;main.c: 2432: return 1;
 15461  003D22  0E01               	movlw	1
 15462  003D24  D011               	goto	l1113
 15463  003D26                     l14525:
 15464  003D26  0100               	movlb	0	; () banked
 15465  003D28  51B0               	movf	writeRegisterExtended@timeout& (0+255),w,b
 15466  003D2A  6FB4               	movwf	??_writeRegisterExtended& (0+255),b
 15467  003D2C  51B1               	movf	(writeRegisterExtended@timeout+1)& (0+255),w,b
 15468  003D2E  6FB5               	movwf	(??_writeRegisterExtended+1)& (0+255),b
 15469  003D30  6BB6               	clrf	(??_writeRegisterExtended+2)& (0+255),b
 15470  003D32  6BB7               	clrf	(??_writeRegisterExtended+3)& (0+255),b
 15471  003D34  51B4               	movf	??_writeRegisterExtended& (0+255),w,b
 15472  003D36  5C27               	subwf	_timekeeper,w,c	;volatile
 15473  003D38  51B5               	movf	(??_writeRegisterExtended+1)& (0+255),w,b
 15474  003D3A  5828               	subwfb	_timekeeper+1,w,c	;volatile
 15475  003D3C  51B6               	movf	(??_writeRegisterExtended+2)& (0+255),w,b
 15476  003D3E  5829               	subwfb	_timekeeper+2,w,c	;volatile
 15477  003D40  51B7               	movf	(??_writeRegisterExtended+3)& (0+255),w,b
 15478  003D42  582A               	subwfb	_timekeeper+3,w,c	;volatile
 15479  003D44  E3B4               	bnc	l1110
 15480  003D46                     l14527:
 15481                           
 15482                           ;main.c: 2433: }
 15483                           ;main.c: 2435: }
 15484                           ;main.c: 2437: }
 15485                           ;main.c: 2439: }
 15486                           ;main.c: 2441: return 0;
 15487  003D46  0E00               	movlw	0
 15488  003D48                     l1113:
 15489  003D48  0012               	return	
 15490  003D4A                     __end_of_writeRegisterExtended:
 15491                           	opt stack 0
 15492                           tblptru	equ	0xFF8
 15493                           tblptrh	equ	0xFF7
 15494                           tblptrl	equ	0xFF6
 15495                           tablat	equ	0xFF5
 15496                           prodh	equ	0xFF4
 15497                           prodl	equ	0xFF3
 15498                           intcon	equ	0xFF2
 15499                           indf0	equ	0xFEF
 15500                           postinc0	equ	0xFEE
 15501                           fsr0h	equ	0xFEA
 15502                           fsr0l	equ	0xFE9
 15503                           wreg	equ	0xFE8
 15504                           indf1	equ	0xFE7
 15505                           postinc1	equ	0xFE6
 15506                           postdec1	equ	0xFE5
 15507                           fsr1h	equ	0xFE2
 15508                           fsr1l	equ	0xFE1
 15509                           indf2	equ	0xFDF
 15510                           postinc2	equ	0xFDE
 15511                           postdec2	equ	0xFDD
 15512                           plusw2	equ	0xFDB
 15513                           fsr2h	equ	0xFDA
 15514                           fsr2l	equ	0xFD9
 15515                           status	equ	0xFD8
 15516                           
 15517 ;; *************** function _printBinary *****************
 15518 ;; Defined at:
 15519 ;;		line 2485 in file "main.c"
 15520 ;; Parameters:    Size  Location     Type
 15521 ;;  value           1    wreg     unsigned char 
 15522 ;; Auto vars:     Size  Location     Type
 15523 ;;  value           1   32[COMRAM] unsigned char 
 15524 ;;  i               2   33[COMRAM] int 
 15525 ;; Return value:  Size  Location     Type
 15526 ;;		None               void
 15527 ;; Registers used:
 15528 ;;		wreg, status,2, status,0, cstack
 15529 ;; Tracked objects:
 15530 ;;		On entry : F/2
 15531 ;;		On exit  : 0/0
 15532 ;;		Unchanged: 0/0
 15533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15534 ;;      Params:         0       0       0       0       0       0       0
 15535 ;;      Locals:         3       0       0       0       0       0       0
 15536 ;;      Temps:          2       0       0       0       0       0       0
 15537 ;;      Totals:         5       0       0       0       0       0       0
 15538 ;;Total ram usage:        5 bytes
 15539 ;; Hardware stack levels used:    1
 15540 ;; Hardware stack levels required when called:    4
 15541 ;; This function calls:
 15542 ;;		_WriteUSART
 15543 ;; This function is called by:
 15544 ;;		_doModeVerbose
 15545 ;; This function uses a non-reentrant model
 15546 ;;
 15547                           
 15548                           	psect	text25
 15549  00537E                     __ptext25:
 15550                           	opt stack 0
 15551  00537E                     _printBinary:
 15552                           	opt stack 25
 15553                           
 15554                           ;incstack = 0
 15555                           ;incstack = 0
 15556                           ;printBinary@value stored from wreg
 15557  00537E  CFE8 F021          	movff	wreg,printBinary@value
 15558                           
 15559                           ; BSR set to: 2
 15560                           ;main.c: 2486: int i;
 15561                           ;main.c: 2488: for (i = 7; i >= 0; i--) {
 15562  005382  6A23               	clrf	printBinary@i+1,c
 15563  005384  0E07               	movlw	7
 15564  005386  6E22               	movwf	printBinary@i,c
 15565  005388                     l12101:
 15566                           
 15567                           ;main.c: 2489: if (value & (1 << i)) {
 15568  005388  C022  F01F         	movff	printBinary@i,??_printBinary
 15569  00538C  0E01               	movlw	1
 15570  00538E  6E20               	movwf	(??_printBinary+1)& (0+255),c
 15571  005390  2A1F               	incf	??_printBinary,f,c
 15572  005392  D002               	goto	u15474
 15573  005394                     u15475:
 15574  005394  90D8               	bcf	status,0,c
 15575  005396  3620               	rlcf	??_printBinary+1,f,c
 15576  005398                     u15474:
 15577  005398  2E1F               	decfsz	??_printBinary,f,c
 15578  00539A  D7FC               	goto	u15475
 15579  00539C  5020               	movf	??_printBinary+1,w,c
 15580  00539E  1421               	andwf	printBinary@value,w,c
 15581  0053A0  E006               	bz	l1133
 15582  0053A2                     l1129:
 15583  0053A2  A2AC               	btfss	4012,1,c	;volatile
 15584  0053A4  D7FE               	goto	l1129
 15585                           
 15586                           ;main.c: 2491: WriteUSART('1');
 15587  0053A6  0E31               	movlw	49
 15588  0053A8  ECF5  F02B         	call	_WriteUSART
 15589                           
 15590                           ;main.c: 2492: } else {
 15591  0053AC  D005               	goto	l12109
 15592  0053AE                     l1133:
 15593  0053AE  A2AC               	btfss	4012,1,c	;volatile
 15594  0053B0  D7FE               	goto	l1133
 15595                           
 15596                           ;main.c: 2494: WriteUSART('0');
 15597  0053B2  0E30               	movlw	48
 15598  0053B4  ECF5  F02B         	call	_WriteUSART
 15599  0053B8                     l12109:
 15600  0053B8  0622               	decf	printBinary@i,f,c
 15601  0053BA  A0D8               	btfss	status,0,c
 15602  0053BC  0623               	decf	printBinary@i+1,f,c
 15603  0053BE  BE23               	btfsc	printBinary@i+1,7,c
 15604  0053C0  0012               	return	
 15605  0053C2  D7E2               	goto	l12101
 15606  0053C4                     __end_of_printBinary:
 15607                           	opt stack 0
 15608                           tblptru	equ	0xFF8
 15609                           tblptrh	equ	0xFF7
 15610                           tblptrl	equ	0xFF6
 15611                           tablat	equ	0xFF5
 15612                           prodh	equ	0xFF4
 15613                           prodl	equ	0xFF3
 15614                           intcon	equ	0xFF2
 15615                           indf0	equ	0xFEF
 15616                           postinc0	equ	0xFEE
 15617                           fsr0h	equ	0xFEA
 15618                           fsr0l	equ	0xFE9
 15619                           wreg	equ	0xFE8
 15620                           indf1	equ	0xFE7
 15621                           postinc1	equ	0xFE6
 15622                           postdec1	equ	0xFE5
 15623                           fsr1h	equ	0xFE2
 15624                           fsr1l	equ	0xFE1
 15625                           indf2	equ	0xFDF
 15626                           postinc2	equ	0xFDE
 15627                           postdec2	equ	0xFDD
 15628                           plusw2	equ	0xFDB
 15629                           fsr2h	equ	0xFDA
 15630                           fsr2l	equ	0xFD9
 15631                           status	equ	0xFD8
 15632                           
 15633 ;; *************** function _readRegisterExtended *****************
 15634 ;; Defined at:
 15635 ;;		line 2297 in file "main.c"
 15636 ;; Parameters:    Size  Location     Type
 15637 ;;  nodeid          1    wreg     unsigned char 
 15638 ;;  page            2   77[BANK0 ] unsigned short 
 15639 ;;  reg             1   79[BANK0 ] unsigned char 
 15640 ;;  timeout         2   80[BANK0 ] unsigned short 
 15641 ;;  value           2   82[BANK0 ] PTR unsigned char 
 15642 ;;		 -> doModeVerbose@value(1), 
 15643 ;; Auto vars:     Size  Location     Type
 15644 ;;  nodeid          1   88[BANK0 ] unsigned char 
 15645 ;; Return value:  Size  Location     Type
 15646 ;;                  1    wreg      enum E15660
 15647 ;; Registers used:
 15648 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 15649 ;; Tracked objects:
 15650 ;;		On entry : F/2
 15651 ;;		On exit  : E/0
 15652 ;;		Unchanged: 0/0
 15653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15654 ;;      Params:         0       7       0       0       0       0       0
 15655 ;;      Locals:         0       1       0       0       0       0       0
 15656 ;;      Temps:          0       4       0       0       0       0       0
 15657 ;;      Totals:         0      12       0       0       0       0       0
 15658 ;;Total ram usage:       12 bytes
 15659 ;; Hardware stack levels used:    1
 15660 ;; Hardware stack levels required when called:    7
 15661 ;; This function calls:
 15662 ;;		_sendVSCPFrame
 15663 ;;		_getVSCPFrame
 15664 ;; This function is called by:
 15665 ;;		_doModeVerbose
 15666 ;; This function uses a non-reentrant model
 15667 ;;
 15668                           
 15669                           	psect	text26
 15670  004000                     __ptext26:
 15671                           	opt stack 0
 15672  004000                     _readRegisterExtended:
 15673                           	opt stack 22
 15674                           
 15675                           ;incstack = 0
 15676                           ;incstack = 0
 15677                           ;readRegisterExtended@nodeid stored from wreg
 15678  004000  CFE8 F0B8          	movff	wreg,readRegisterExtended@nodeid
 15679                           
 15680                           ; BSR set to: 2
 15681                           ;main.c: 2298: vscpData[ 0 ] = nodeid;
 15682  004004  C0B8  F1DC         	movff	readRegisterExtended@nodeid,_vscpData
 15683                           
 15684                           ; BSR set to: 2
 15685                           ;main.c: 2299: vscpData[ 1 ] = page >> 8;
 15686  004008  0100               	movlb	0	; () banked
 15687  00400A  51AE               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15688  00400C  0101               	movlb	1	; () banked
 15689  00400E  6FDD               	movwf	(_vscpData+1)& (0+255),b
 15690                           
 15691                           ; BSR set to: 1
 15692                           ;main.c: 2300: vscpData[ 2 ] = page & 0xff;
 15693  004010  C0AD  F1DE         	movff	readRegisterExtended@page,_vscpData+2
 15694                           
 15695                           ; BSR set to: 1
 15696                           ;main.c: 2301: vscpData[ 3 ] = reg;
 15697  004014  C0AF  F1DF         	movff	readRegisterExtended@reg,_vscpData+3
 15698                           
 15699                           ; BSR set to: 1
 15700                           ;main.c: 2302: vscpData[ 4 ] = 1;
 15701  004018  0E01               	movlw	1
 15702  00401A  6FE0               	movwf	(_vscpData+4)& (0+255),b
 15703                           
 15704                           ; BSR set to: 1
 15705                           ;main.c: 2304: if (sendVSCPFrame(0,
 15706                           ;main.c: 2305: 37,
 15707                           ;main.c: 2306: 0,
 15708                           ;main.c: 2307: 0,
 15709                           ;main.c: 2308: 5,
 15710                           ;main.c: 2309: vscpData)) {
 15711  00401C  0100               	movlb	0	; () banked
 15712  00401E  6B8E               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 15713  004020  6B8D               	clrf	?_sendVSCPFrame& (0+255),b
 15714  004022  0E25               	movlw	37
 15715  004024  6F8F               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 15716  004026  6B90               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 15717  004028  6B91               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 15718  00402A  0E05               	movlw	5
 15719  00402C  6F92               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 15720  00402E  0E01               	movlw	high _vscpData
 15721  004030  6F94               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 15722  004032  0EDC               	movlw	low _vscpData
 15723  004034  6F93               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 15724  004036  EC6F  F022         	call	_sendVSCPFrame	;wreg free
 15725  00403A  0900               	iorlw	0
 15726  00403C  E050               	bz	l14485
 15727                           
 15728                           ;main.c: 2311: timekeeper = 0;
 15729  00403E  6A27               	clrf	_timekeeper,c	;volatile
 15730  004040  6A28               	clrf	_timekeeper+1,c	;volatile
 15731  004042  6A29               	clrf	_timekeeper+2,c	;volatile
 15732  004044  6A2A               	clrf	_timekeeper+3,c	;volatile
 15733                           
 15734                           ;main.c: 2312: while (timekeeper < timeout) {
 15735  004046  D03B               	goto	l14483
 15736  004048                     l1092:
 15737                           
 15738                           ; BSR set to: 0
 15739  004048  0004               	clrwdt		;# 
 15740                           
 15741                           ;main.c: 2316: if (getVSCPFrame(&vscpClass,
 15742                           ;main.c: 2317: &vscpType,
 15743                           ;main.c: 2318: &vscpNodeId,
 15744                           ;main.c: 2319: &vscpPriority,
 15745                           ;main.c: 2320: &vscpSize,
 15746                           ;main.c: 2321: vscpData)) {
 15747  00404A  0100               	movlb	0	; () banked
 15748  00404C  0EE5               	movlw	low _vscpType
 15749  00404E  6F6B               	movwf	?_getVSCPFrame& (0+255),b
 15750  004050  0EE2               	movlw	low _vscpNodeId
 15751  004052  6F6C               	movwf	(?_getVSCPFrame+1)& (0+255),b
 15752  004054  0EE3               	movlw	low _vscpPriority
 15753  004056  6F6D               	movwf	(?_getVSCPFrame+2)& (0+255),b
 15754  004058  0EE4               	movlw	low _vscpSize
 15755  00405A  6F6E               	movwf	(?_getVSCPFrame+3)& (0+255),b
 15756  00405C  0E01               	movlw	high _vscpData
 15757  00405E  6F70               	movwf	(?_getVSCPFrame+5)& (0+255),b
 15758  004060  0EDC               	movlw	low _vscpData
 15759  004062  6F6F               	movwf	(?_getVSCPFrame+4)& (0+255),b
 15760  004064  0E3E               	movlw	_vscpClass& (0+255)
 15761  004066  EC78  F026         	call	_getVSCPFrame
 15762  00406A  0900               	iorlw	0
 15763  00406C  E028               	bz	l14483
 15764                           
 15765                           ; BSR set to: 0
 15766                           ;main.c: 2322: if ((nodeid == vscpNodeId) &&
 15767                           ;main.c: 2323: (0 == vscpClass) &&
 15768                           ;main.c: 2324: (39 == vscpType) &&
 15769                           ;main.c: 2325: (5 == vscpSize) &&
 15770                           ;main.c: 2326: (0 == vscpData[ 0 ]) &&
 15771                           ;main.c: 2327: ((page >> 8) == vscpData[ 1 ]) &&
 15772                           ;main.c: 2328: ((page & 0xff) == vscpData[ 2 ]) &&
 15773                           ;main.c: 2329: (reg == vscpData[ 3 ])) {
 15774  00406E  51E2               	movf	_vscpNodeId& (0+255),w,b
 15775  004070  63B8               	cpfseq	readRegisterExtended@nodeid& (0+255),b
 15776  004072  D025               	goto	l14483
 15777                           
 15778                           ; BSR set to: 0
 15779  004074  503F               	movf	_vscpClass+1,w,c
 15780  004076  103E               	iorwf	_vscpClass,w,c
 15781  004078  E122               	bnz	l14483
 15782                           
 15783                           ; BSR set to: 0
 15784  00407A  51E5               	movf	_vscpType& (0+255),w,b
 15785  00407C  0A27               	xorlw	39
 15786  00407E  E11F               	bnz	l14483
 15787                           
 15788                           ; BSR set to: 0
 15789  004080  51E4               	movf	_vscpSize& (0+255),w,b
 15790  004082  0A05               	xorlw	5
 15791  004084  E11C               	bnz	l14483
 15792                           
 15793                           ; BSR set to: 0
 15794  004086  0101               	movlb	1	; () banked
 15795  004088  67DC               	tstfsz	_vscpData& (0+255),b
 15796  00408A  D019               	goto	l14483
 15797                           
 15798                           ; BSR set to: 1
 15799  00408C  0100               	movlb	0	; () banked
 15800  00408E  51AE               	movf	(readRegisterExtended@page+1)& (0+255),w,b
 15801  004090  0101               	movlb	1	; () banked
 15802  004092  19DD               	xorwf	(_vscpData+1)& (0+255),w,b
 15803  004094  E114               	bnz	l14483
 15804                           
 15805                           ; BSR set to: 1
 15806  004096  0100               	movlb	0	; () banked
 15807  004098  51AD               	movf	readRegisterExtended@page& (0+255),w,b
 15808  00409A  EE21  F0DE         	lfsr	2,_vscpData+2
 15809  00409E  62DF               	cpfseq	indf2,c
 15810  0040A0  D00E               	goto	l14483
 15811                           
 15812                           ; BSR set to: 1
 15813  0040A2  51AF               	movf	readRegisterExtended@reg& (0+255),w,b
 15814  0040A4  0101               	movlb	1	; () banked
 15815  0040A6  EE21  F0DF         	lfsr	2,_vscpData+3
 15816  0040AA  62DF               	cpfseq	indf2,c
 15817  0040AC  D008               	goto	l14483
 15818                           
 15819                           ; BSR set to: 1
 15820                           ;main.c: 2330: *value = vscpData[ 4 ];
 15821  0040AE  C0B2  FFD9         	movff	readRegisterExtended@value,fsr2l
 15822  0040B2  C0B3  FFDA         	movff	readRegisterExtended@value+1,fsr2h
 15823  0040B6  C1E0  FFDF         	movff	_vscpData+4,indf2
 15824                           
 15825                           ; BSR set to: 1
 15826                           ;main.c: 2331: return 1;
 15827  0040BA  0E01               	movlw	1
 15828  0040BC  D011               	goto	l1095
 15829  0040BE                     l14483:
 15830  0040BE  0100               	movlb	0	; () banked
 15831  0040C0  51B0               	movf	readRegisterExtended@timeout& (0+255),w,b
 15832  0040C2  6FB4               	movwf	??_readRegisterExtended& (0+255),b
 15833  0040C4  51B1               	movf	(readRegisterExtended@timeout+1)& (0+255),w,b
 15834  0040C6  6FB5               	movwf	(??_readRegisterExtended+1)& (0+255),b
 15835  0040C8  6BB6               	clrf	(??_readRegisterExtended+2)& (0+255),b
 15836  0040CA  6BB7               	clrf	(??_readRegisterExtended+3)& (0+255),b
 15837  0040CC  51B4               	movf	??_readRegisterExtended& (0+255),w,b
 15838  0040CE  5C27               	subwf	_timekeeper,w,c	;volatile
 15839  0040D0  51B5               	movf	(??_readRegisterExtended+1)& (0+255),w,b
 15840  0040D2  5828               	subwfb	_timekeeper+1,w,c	;volatile
 15841  0040D4  51B6               	movf	(??_readRegisterExtended+2)& (0+255),w,b
 15842  0040D6  5829               	subwfb	_timekeeper+2,w,c	;volatile
 15843  0040D8  51B7               	movf	(??_readRegisterExtended+3)& (0+255),w,b
 15844  0040DA  582A               	subwfb	_timekeeper+3,w,c	;volatile
 15845  0040DC  E3B5               	bnc	l1092
 15846  0040DE                     l14485:
 15847                           
 15848                           ;main.c: 2332: }
 15849                           ;main.c: 2333: }
 15850                           ;main.c: 2334: }
 15851                           ;main.c: 2335: }
 15852                           ;main.c: 2337: return 0;
 15853  0040DE  0E00               	movlw	0
 15854  0040E0                     l1095:
 15855  0040E0  0012               	return	
 15856  0040E2                     __end_of_readRegisterExtended:
 15857                           	opt stack 0
 15858                           tblptru	equ	0xFF8
 15859                           tblptrh	equ	0xFF7
 15860                           tblptrl	equ	0xFF6
 15861                           tablat	equ	0xFF5
 15862                           prodh	equ	0xFF4
 15863                           prodl	equ	0xFF3
 15864                           intcon	equ	0xFF2
 15865                           indf0	equ	0xFEF
 15866                           postinc0	equ	0xFEE
 15867                           fsr0h	equ	0xFEA
 15868                           fsr0l	equ	0xFE9
 15869                           wreg	equ	0xFE8
 15870                           indf1	equ	0xFE7
 15871                           postinc1	equ	0xFE6
 15872                           postdec1	equ	0xFE5
 15873                           fsr1h	equ	0xFE2
 15874                           fsr1l	equ	0xFE1
 15875                           indf2	equ	0xFDF
 15876                           postinc2	equ	0xFDE
 15877                           postdec2	equ	0xFDD
 15878                           plusw2	equ	0xFDB
 15879                           fsr2h	equ	0xFDA
 15880                           fsr2l	equ	0xFD9
 15881                           status	equ	0xFD8
 15882                           
 15883 ;; *************** function _strcpy *****************
 15884 ;; Defined at:
 15885 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcpy.c"
 15886 ;; Parameters:    Size  Location     Type
 15887 ;;  to              2   29[COMRAM] PTR unsigned char 
 15888 ;;		 -> cmdbuf(80), 
 15889 ;;  from            2   31[COMRAM] PTR const unsigned char 
 15890 ;;		 -> cmdbuf(80), 
 15891 ;; Auto vars:     Size  Location     Type
 15892 ;;  cp              2   33[COMRAM] PTR unsigned char 
 15893 ;;		 -> cmdbuf(80), 
 15894 ;; Return value:  Size  Location     Type
 15895 ;;                  2   29[COMRAM] PTR unsigned char 
 15896 ;; Registers used:
 15897 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 15898 ;; Tracked objects:
 15899 ;;		On entry : F/0
 15900 ;;		On exit  : F/0
 15901 ;;		Unchanged: F/0
 15902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15903 ;;      Params:         4       0       0       0       0       0       0
 15904 ;;      Locals:         2       0       0       0       0       0       0
 15905 ;;      Temps:          0       0       0       0       0       0       0
 15906 ;;      Totals:         6       0       0       0       0       0       0
 15907 ;;Total ram usage:        6 bytes
 15908 ;; Hardware stack levels used:    1
 15909 ;; Hardware stack levels required when called:    3
 15910 ;; This function calls:
 15911 ;;		Nothing
 15912 ;; This function is called by:
 15913 ;;		_doModeVerbose
 15914 ;; This function uses a non-reentrant model
 15915 ;;
 15916                           
 15917                           	psect	text27
 15918  005708                     __ptext27:
 15919                           	opt stack 0
 15920  005708                     _strcpy:
 15921                           	opt stack 26
 15922                           
 15923                           ; BSR set to: 0
 15924                           
 15925                           ;incstack = 0
 15926                           ;incstack = 0
 15927  005708  C01E  F022         	movff	strcpy@to,strcpy@cp
 15928  00570C  C01F  F023         	movff	strcpy@to+1,strcpy@cp+1
 15929  005710  D004               	goto	l11693
 15930  005712                     l11691:
 15931                           
 15932                           ; BSR set to: 0
 15933  005712  4A22               	infsnz	strcpy@cp,f,c
 15934  005714  2A23               	incf	strcpy@cp+1,f,c
 15935  005716  4A20               	infsnz	strcpy@from,f,c
 15936  005718  2A21               	incf	strcpy@from+1,f,c
 15937  00571A                     l11693:
 15938                           
 15939                           ; BSR set to: 0
 15940  00571A  C020  FFD9         	movff	strcpy@from,fsr2l
 15941  00571E  C021  FFDA         	movff	strcpy@from+1,fsr2h
 15942  005722  C022  FFE1         	movff	strcpy@cp,fsr1l
 15943  005726  C023  FFE2         	movff	strcpy@cp+1,fsr1h
 15944  00572A  CFDF FFE7          	movff	indf2,indf1
 15945  00572E  50E7               	movf	indf1,w,c
 15946  005730  B4D8               	btfsc	status,2,c
 15947                           
 15948                           ; BSR set to: 0
 15949  005732  0012               	return	
 15950  005734  D7EE               	goto	l11691
 15951  005736                     __end_of_strcpy:
 15952                           	opt stack 0
 15953                           tblptru	equ	0xFF8
 15954                           tblptrh	equ	0xFF7
 15955                           tblptrl	equ	0xFF6
 15956                           tablat	equ	0xFF5
 15957                           prodh	equ	0xFF4
 15958                           prodl	equ	0xFF3
 15959                           intcon	equ	0xFF2
 15960                           indf0	equ	0xFEF
 15961                           postinc0	equ	0xFEE
 15962                           fsr0h	equ	0xFEA
 15963                           fsr0l	equ	0xFE9
 15964                           wreg	equ	0xFE8
 15965                           indf1	equ	0xFE7
 15966                           postinc1	equ	0xFE6
 15967                           postdec1	equ	0xFE5
 15968                           fsr1h	equ	0xFE2
 15969                           fsr1l	equ	0xFE1
 15970                           indf2	equ	0xFDF
 15971                           postinc2	equ	0xFDE
 15972                           postdec2	equ	0xFDD
 15973                           plusw2	equ	0xFDB
 15974                           fsr2h	equ	0xFDA
 15975                           fsr2l	equ	0xFD9
 15976                           status	equ	0xFD8
 15977                           
 15978 ;; *************** function _findNodes *****************
 15979 ;; Defined at:
 15980 ;;		line 2636 in file "main.c"
 15981 ;; Parameters:    Size  Location     Type
 15982 ;;		None
 15983 ;; Auto vars:     Size  Location     Type
 15984 ;;  i               1   96[BANK0 ] unsigned char 
 15985 ;;  value           1   95[BANK0 ] unsigned char 
 15986 ;;  nFound          1   94[BANK0 ] unsigned char 
 15987 ;; Return value:  Size  Location     Type
 15988 ;;		None               void
 15989 ;; Registers used:
 15990 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclat, btemp, btemp+1, btemp+2, bt
      +emp+3, btemp+4, btemp+5, btemp+6, btemp+7, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
 15991 ;; Tracked objects:
 15992 ;;		On entry : F/0
 15993 ;;		On exit  : 0/0
 15994 ;;		Unchanged: 0/0
 15995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 15996 ;;      Params:         0       0       0       0       0       0       0
 15997 ;;      Locals:         0       5       0       0       0       0       0
 15998 ;;      Temps:          0       0       0       0       0       0       0
 15999 ;;      Totals:         0       5       0       0       0       0       0
 16000 ;;Total ram usage:        5 bytes
 16001 ;; Hardware stack levels used:    1
 16002 ;; Hardware stack levels required when called:    9
 16003 ;; This function calls:
 16004 ;;		_putsUSART
 16005 ;;		_printNodeFirmwareVersion
 16006 ;;		_printGUID
 16007 ;;		_printMDF
 16008 ;;		_itoa
 16009 ;;		_readRegister
 16010 ;; This function is called by:
 16011 ;;		_doModeVerbose
 16012 ;; This function uses a non-reentrant model
 16013 ;;
 16014                           
 16015                           	psect	text28
 16016  003F1A                     __ptext28:
 16017                           	opt stack 0
 16018  003F1A                     _findNodes:
 16019                           	opt stack 20
 16020                           
 16021                           ; BSR set to: 0
 16022                           ;main.c: 2637: uint8_t nFound = 0;
 16023                           
 16024                           ; BSR set to: 0
 16025                           ;incstack = 0
 16026                           ;incstack = 0
 16027  003F1A  6BBE               	clrf	findNodes@nFound& (0+255),b
 16028                           
 16029                           ; BSR set to: 0
 16030                           ;main.c: 2638: uint8_t i;
 16031                           ;main.c: 2639: uint8_t value;
 16032                           ;main.c: 2641: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16033  003F1C  0E71               	movlw	high STR_238
 16034  003F1E  6E20               	movwf	?_putsUSART+1,c
 16035  003F20  0E4F               	movlw	low STR_238
 16036  003F22  6E1F               	movwf	?_putsUSART,c
 16037  003F24  EC25  F029         	call	_putsUSART	;wreg free
 16038                           
 16039                           ;main.c: 2643: for (i = 1; i != 0; i++) {
 16040  003F28  0E01               	movlw	1
 16041  003F2A  0100               	movlb	0	; () banked
 16042  003F2C  6FC0               	movwf	findNodes@i& (0+255),b
 16043  003F2E                     l1194:
 16044                           
 16045                           ; BSR set to: 0
 16046  003F2E  0004               	clrwdt		;# 
 16047                           
 16048                           ;main.c: 2647: if (readRegister(i,
 16049                           ;main.c: 2648: 0xE0,
 16050                           ;main.c: 2649: rwtimeout,
 16051                           ;main.c: 2650: &value)) {
 16052  003F30  0EE0               	movlw	224
 16053  003F32  0100               	movlb	0	; () banked
 16054  003F34  6FAD               	movwf	?_readRegister& (0+255),b
 16055  003F36  C0E1  F0AE         	movff	_rwtimeout,?_readRegister+1
 16056  003F3A  6BAF               	clrf	(?_readRegister+2)& (0+255),b
 16057  003F3C  0EBF               	movlw	low findNodes@value
 16058  003F3E  6FB0               	movwf	(?_readRegister+3)& (0+255),b
 16059  003F40  51C0               	movf	findNodes@i& (0+255),w,b
 16060  003F42  ECCA  F022         	call	_readRegister
 16061  003F46  0900               	iorlw	0
 16062  003F48  E03E               	bz	l14429
 16063                           
 16064                           ;main.c: 2651: putsUSART((char *) "Node found with node id = ");
 16065  003F4A  0E7B               	movlw	high STR_239
 16066  003F4C  6E20               	movwf	?_putsUSART+1,c
 16067  003F4E  0E9A               	movlw	low STR_239
 16068  003F50  6E1F               	movwf	?_putsUSART,c
 16069  003F52  EC25  F029         	call	_putsUSART	;wreg free
 16070                           
 16071                           ;main.c: 2652: itoa(wrkbuf, vscpNodeId, bHex ? 16 : 10);
 16072  003F56  0100               	movlb	0	; () banked
 16073  003F58  67DC               	tstfsz	_bHex& (0+255),b
 16074  003F5A  D003               	goto	l14411
 16075                           
 16076                           ; BSR set to: 0
 16077  003F5C  6BBD               	clrf	(_findNodes$1473+1)& (0+255),b
 16078  003F5E  0E0A               	movlw	10
 16079  003F60  D002               	goto	L14
 16080  003F62                     l14411:
 16081                           
 16082                           ; BSR set to: 0
 16083  003F62  6BBD               	clrf	(_findNodes$1473+1)& (0+255),b
 16084  003F64  0E10               	movlw	16
 16085  003F66                     L14:
 16086  003F66  6FBC               	movwf	_findNodes$1473& (0+255),b
 16087                           
 16088                           ; BSR set to: 0
 16089  003F68  0E01               	movlw	high _wrkbuf
 16090  003F6A  0100               	movlb	0	; () banked
 16091  003F6C  6F6A               	movwf	(?_itoa+1)& (0+255),b
 16092  003F6E  0E74               	movlw	low _wrkbuf
 16093  003F70  6F69               	movwf	?_itoa& (0+255),b
 16094  003F72  C0E2  F06B         	movff	_vscpNodeId,?_itoa+2
 16095  003F76  6B6C               	clrf	(?_itoa+3)& (0+255),b
 16096  003F78  C0BC  F06D         	movff	_findNodes$1473,?_itoa+4
 16097  003F7C  C0BD  F06E         	movff	_findNodes$1473+1,?_itoa+5
 16098  003F80  EC1D  F02B         	call	_itoa	;wreg free
 16099                           
 16100                           ; BSR set to: 0
 16101                           ;main.c: 2653: putsUSART(wrkbuf);
 16102  003F84  0101               	movlb	1	; () banked
 16103  003F86  0E01               	movlw	high _wrkbuf
 16104  003F88  6E20               	movwf	?_putsUSART+1,c
 16105  003F8A  0E74               	movlw	low _wrkbuf
 16106  003F8C  6E1F               	movwf	?_putsUSART,c
 16107  003F8E  EC25  F029         	call	_putsUSART	;wreg free
 16108                           
 16109                           ;main.c: 2654: putsUSART((char *) "\r\n");
 16110  003F92  0E74               	movlw	high (STR_197+50)
 16111  003F94  6E20               	movwf	?_putsUSART+1,c
 16112  003F96  0EC0               	movlw	low (STR_197+50)
 16113  003F98  6E1F               	movwf	?_putsUSART,c
 16114  003F9A  EC25  F029         	call	_putsUSART	;wreg free
 16115                           
 16116                           ;main.c: 2655: printNodeFirmwareVersion(i);
 16117  003F9E  0100               	movlb	0	; () banked
 16118  003FA0  51C0               	movf	findNodes@i& (0+255),w,b
 16119  003FA2  EC48  F021         	call	_printNodeFirmwareVersion
 16120                           
 16121                           ;main.c: 2656: printGUID(i);
 16122  003FA6  0100               	movlb	0	; () banked
 16123  003FA8  51C0               	movf	findNodes@i& (0+255),w,b
 16124  003FAA  ECAD  F01D         	call	_printGUID
 16125                           
 16126                           ;main.c: 2657: printMDF(i);
 16127  003FAE  0100               	movlb	0	; () banked
 16128  003FB0  51C0               	movf	findNodes@i& (0+255),w,b
 16129  003FB2  ECA9  F025         	call	_printMDF
 16130                           
 16131                           ;main.c: 2658: putsUSART((char *) "-----------------------------------------------------
      +                          -----------\r\n");
 16132  003FB6  0E71               	movlw	high STR_238
 16133  003FB8  6E20               	movwf	?_putsUSART+1,c
 16134  003FBA  0E4F               	movlw	low STR_238
 16135  003FBC  6E1F               	movwf	?_putsUSART,c
 16136  003FBE  EC25  F029         	call	_putsUSART	;wreg free
 16137                           
 16138                           ;main.c: 2659: nFound++;
 16139  003FC2  0100               	movlb	0	; () banked
 16140  003FC4  2BBE               	incf	findNodes@nFound& (0+255),f,b
 16141  003FC6                     l14429:
 16142  003FC6  0100               	movlb	0	; () banked
 16143  003FC8  2BC0               	incf	findNodes@i& (0+255),f,b
 16144                           
 16145                           ; BSR set to: 0
 16146  003FCA  67C0               	tstfsz	findNodes@i& (0+255),b
 16147  003FCC  D7B0               	goto	l1194
 16148                           
 16149                           ; BSR set to: 0
 16150                           ;main.c: 2660: }
 16151                           ;main.c: 2662: }
 16152                           ;main.c: 2664: itoa(wrkbuf, nFound, 10);
 16153  003FCE  0E01               	movlw	high _wrkbuf
 16154  003FD0  6F6A               	movwf	(?_itoa+1)& (0+255),b
 16155  003FD2  0E74               	movlw	low _wrkbuf
 16156  003FD4  6F69               	movwf	?_itoa& (0+255),b
 16157  003FD6  C0BE  F06B         	movff	findNodes@nFound,?_itoa+2
 16158  003FDA  6B6C               	clrf	(?_itoa+3)& (0+255),b
 16159  003FDC  6B6E               	clrf	(?_itoa+5)& (0+255),b
 16160  003FDE  0E0A               	movlw	10
 16161  003FE0  6F6D               	movwf	(?_itoa+4)& (0+255),b
 16162  003FE2  EC1D  F02B         	call	_itoa	;wreg free
 16163                           
 16164                           ; BSR set to: 0
 16165                           ;main.c: 2665: putsUSART(wrkbuf);
 16166  003FE6  0101               	movlb	1	; () banked
 16167  003FE8  0E01               	movlw	high _wrkbuf
 16168  003FEA  6E20               	movwf	?_putsUSART+1,c
 16169  003FEC  0E74               	movlw	low _wrkbuf
 16170  003FEE  6E1F               	movwf	?_putsUSART,c
 16171  003FF0  EC25  F029         	call	_putsUSART	;wreg free
 16172                           
 16173                           ;main.c: 2666: putsUSART((char *) " nodes found\r\n");
 16174  003FF4  0E7E               	movlw	high STR_242
 16175  003FF6  6E20               	movwf	?_putsUSART+1,c
 16176  003FF8  0E4F               	movlw	low STR_242
 16177  003FFA  6E1F               	movwf	?_putsUSART,c
 16178  003FFC  EF25  F029         	goto	_putsUSART	;wreg free
 16179  004000                     __end_of_findNodes:
 16180                           	opt stack 0
 16181                           tblptru	equ	0xFF8
 16182                           tblptrh	equ	0xFF7
 16183                           tblptrl	equ	0xFF6
 16184                           tablat	equ	0xFF5
 16185                           prodh	equ	0xFF4
 16186                           prodl	equ	0xFF3
 16187                           intcon	equ	0xFF2
 16188                           indf0	equ	0xFEF
 16189                           postinc0	equ	0xFEE
 16190                           fsr0h	equ	0xFEA
 16191                           fsr0l	equ	0xFE9
 16192                           wreg	equ	0xFE8
 16193                           indf1	equ	0xFE7
 16194                           postinc1	equ	0xFE6
 16195                           postdec1	equ	0xFE5
 16196                           fsr1h	equ	0xFE2
 16197                           fsr1l	equ	0xFE1
 16198                           indf2	equ	0xFDF
 16199                           postinc2	equ	0xFDE
 16200                           postdec2	equ	0xFDD
 16201                           plusw2	equ	0xFDB
 16202                           fsr2h	equ	0xFDA
 16203                           fsr2l	equ	0xFD9
 16204                           status	equ	0xFD8
 16205                           
 16206 ;; *************** function _printMDF *****************
 16207 ;; Defined at:
 16208 ;;		line 2717 in file "main.c"
 16209 ;; Parameters:    Size  Location     Type
 16210 ;;  nodeid          1    wreg     unsigned char 
 16211 ;; Auto vars:     Size  Location     Type
 16212 ;;  nodeid          1   86[BANK0 ] unsigned char 
 16213 ;;  p               2   88[BANK0 ] PTR unsigned char 
 16214 ;;		 -> wrkbuf(80), 
 16215 ;;  i               1   90[BANK0 ] unsigned char 
 16216 ;;  value           1   87[BANK0 ] unsigned char 
 16217 ;; Return value:  Size  Location     Type
 16218 ;;		None               void
 16219 ;; Registers used:
 16220 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16221 ;; Tracked objects:
 16222 ;;		On entry : D/2
 16223 ;;		On exit  : 0/0
 16224 ;;		Unchanged: 0/0
 16225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16226 ;;      Params:         0       0       0       0       0       0       0
 16227 ;;      Locals:         0       5       0       0       0       0       0
 16228 ;;      Temps:          0       0       0       0       0       0       0
 16229 ;;      Totals:         0       5       0       0       0       0       0
 16230 ;;Total ram usage:        5 bytes
 16231 ;; Hardware stack levels used:    1
 16232 ;; Hardware stack levels required when called:    8
 16233 ;; This function calls:
 16234 ;;		_putsUSART
 16235 ;;		_memset
 16236 ;;		_readRegister
 16237 ;; This function is called by:
 16238 ;;		_doModeVerbose
 16239 ;;		_findNodes
 16240 ;; This function uses a non-reentrant model
 16241 ;;
 16242                           
 16243                           	psect	text29
 16244  004B52                     __ptext29:
 16245                           	opt stack 0
 16246  004B52                     _printMDF:
 16247                           	opt stack 21
 16248                           
 16249                           ;incstack = 0
 16250                           ;incstack = 0
 16251                           ;printMDF@nodeid stored from wreg
 16252  004B52  CFE8 F0B6          	movff	wreg,printMDF@nodeid
 16253                           
 16254                           ;main.c: 2718: uint8_t i;
 16255                           ;main.c: 2719: uint8_t value;
 16256                           ;main.c: 2720: char *p = wrkbuf;
 16257  004B56  0E01               	movlw	high _wrkbuf
 16258  004B58  0100               	movlb	0	; () banked
 16259  004B5A  6FB9               	movwf	(printMDF@p+1)& (0+255),b
 16260  004B5C  0E74               	movlw	low _wrkbuf
 16261  004B5E  6FB8               	movwf	printMDF@p& (0+255),b
 16262                           
 16263                           ; BSR set to: 0
 16264                           ;main.c: 2721: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16265  004B60  0101               	movlb	1	; () banked
 16266  004B62  0E01               	movlw	high _wrkbuf
 16267  004B64  6E1F               	movwf	?_memset+1,c
 16268  004B66  0E74               	movlw	low _wrkbuf
 16269  004B68  6E1E               	movwf	?_memset,c
 16270  004B6A  6A21               	clrf	?_memset+3,c
 16271  004B6C  6A20               	clrf	?_memset+2,c
 16272  004B6E  6A23               	clrf	?_memset+5,c
 16273  004B70  0E50               	movlw	80
 16274  004B72  6E22               	movwf	?_memset+4,c
 16275  004B74  EC9B  F02B         	call	_memset	;wreg free
 16276                           
 16277                           ;main.c: 2722: putsUSART((char *) "MDF = http://");
 16278  004B78  0E7E               	movlw	high STR_248
 16279  004B7A  6E20               	movwf	?_putsUSART+1,c
 16280  004B7C  0E6D               	movlw	low STR_248
 16281  004B7E  6E1F               	movwf	?_putsUSART,c
 16282  004B80  EC25  F029         	call	_putsUSART	;wreg free
 16283                           
 16284                           ;main.c: 2724: for (i = 0; i < 32; i++) {
 16285  004B84  0100               	movlb	0	; () banked
 16286  004B86  6BBA               	clrf	printMDF@i& (0+255),b
 16287  004B88                     l14603:
 16288                           
 16289                           ; BSR set to: 0
 16290                           ;main.c: 2725: if (readRegister(nodeid,
 16291                           ;main.c: 2726: 0xE0 + i,
 16292                           ;main.c: 2727: rwtimeout,
 16293                           ;main.c: 2728: &value)) {
 16294  004B88  51BA               	movf	printMDF@i& (0+255),w,b
 16295  004B8A  0FE0               	addlw	224
 16296  004B8C  6FAD               	movwf	?_readRegister& (0+255),b
 16297  004B8E  C0E1  F0AE         	movff	_rwtimeout,?_readRegister+1
 16298  004B92  6BAF               	clrf	(?_readRegister+2)& (0+255),b
 16299  004B94  0EB7               	movlw	low printMDF@value
 16300  004B96  6FB0               	movwf	(?_readRegister+3)& (0+255),b
 16301  004B98  51B6               	movf	printMDF@nodeid& (0+255),w,b
 16302  004B9A  ECCA  F022         	call	_readRegister
 16303  004B9E  0900               	iorlw	0
 16304  004BA0  E00A               	bz	l14609
 16305                           
 16306                           ;main.c: 2729: *p = value;
 16307  004BA2  C0B8  FFD9         	movff	printMDF@p,fsr2l
 16308  004BA6  C0B9  FFDA         	movff	printMDF@p+1,fsr2h
 16309  004BAA  C0B7  FFDF         	movff	printMDF@value,indf2
 16310  004BAE                     l14607:
 16311                           
 16312                           ;main.c: 2730: p++;
 16313  004BAE  0100               	movlb	0	; () banked
 16314  004BB0  4BB8               	infsnz	printMDF@p& (0+255),f,b
 16315  004BB2  2BB9               	incf	(printMDF@p+1)& (0+255),f,b
 16316                           
 16317                           ;main.c: 2732: }
 16318  004BB4  D007               	goto	l14613
 16319  004BB6                     l14609:
 16320                           
 16321                           ;main.c: 2733: else {
 16322                           ;main.c: 2734: *p = '?';
 16323  004BB6  C0B8  FFD9         	movff	printMDF@p,fsr2l
 16324  004BBA  C0B9  FFDA         	movff	printMDF@p+1,fsr2h
 16325  004BBE  0E3F               	movlw	63
 16326  004BC0  6EDF               	movwf	indf2,c
 16327  004BC2  D7F5               	goto	l14607
 16328  004BC4                     l14613:
 16329                           
 16330                           ; BSR set to: 0
 16331  004BC4  2BBA               	incf	printMDF@i& (0+255),f,b
 16332                           
 16333                           ; BSR set to: 0
 16334  004BC6  0E1F               	movlw	31
 16335  004BC8  65BA               	cpfsgt	printMDF@i& (0+255),b
 16336  004BCA  D7DE               	goto	l14603
 16337                           
 16338                           ; BSR set to: 0
 16339                           ;main.c: 2736: }
 16340                           ;main.c: 2737: }
 16341                           ;main.c: 2739: putsUSART(wrkbuf);
 16342  004BCC  0101               	movlb	1	; () banked
 16343  004BCE  0E01               	movlw	high _wrkbuf
 16344  004BD0  6E20               	movwf	?_putsUSART+1,c
 16345  004BD2  0E74               	movlw	low _wrkbuf
 16346  004BD4  6E1F               	movwf	?_putsUSART,c
 16347  004BD6  EC25  F029         	call	_putsUSART	;wreg free
 16348                           
 16349                           ;main.c: 2740: putsUSART((char *) "\r\n");
 16350  004BDA  0E74               	movlw	high (STR_197+50)
 16351  004BDC  6E20               	movwf	?_putsUSART+1,c
 16352  004BDE  0EC0               	movlw	low (STR_197+50)
 16353  004BE0  6E1F               	movwf	?_putsUSART,c
 16354  004BE2  EF25  F029         	goto	_putsUSART	;wreg free
 16355  004BE6                     __end_of_printMDF:
 16356                           	opt stack 0
 16357                           tblptru	equ	0xFF8
 16358                           tblptrh	equ	0xFF7
 16359                           tblptrl	equ	0xFF6
 16360                           tablat	equ	0xFF5
 16361                           prodh	equ	0xFF4
 16362                           prodl	equ	0xFF3
 16363                           intcon	equ	0xFF2
 16364                           indf0	equ	0xFEF
 16365                           postinc0	equ	0xFEE
 16366                           fsr0h	equ	0xFEA
 16367                           fsr0l	equ	0xFE9
 16368                           wreg	equ	0xFE8
 16369                           indf1	equ	0xFE7
 16370                           postinc1	equ	0xFE6
 16371                           postdec1	equ	0xFE5
 16372                           fsr1h	equ	0xFE2
 16373                           fsr1l	equ	0xFE1
 16374                           indf2	equ	0xFDF
 16375                           postinc2	equ	0xFDE
 16376                           postdec2	equ	0xFDD
 16377                           plusw2	equ	0xFDB
 16378                           fsr2h	equ	0xFDA
 16379                           fsr2l	equ	0xFD9
 16380                           status	equ	0xFD8
 16381                           
 16382 ;; *************** function _printGUID *****************
 16383 ;; Defined at:
 16384 ;;		line 2676 in file "main.c"
 16385 ;; Parameters:    Size  Location     Type
 16386 ;;  nodeid          1    wreg     unsigned char 
 16387 ;; Auto vars:     Size  Location     Type
 16388 ;;  nodeid          1   86[BANK0 ] unsigned char 
 16389 ;;  buf             3   87[BANK0 ] unsigned char [3]
 16390 ;;  i               1   91[BANK0 ] unsigned char 
 16391 ;;  value           1   90[BANK0 ] unsigned char 
 16392 ;; Return value:  Size  Location     Type
 16393 ;;		None               void
 16394 ;; Registers used:
 16395 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16396 ;; Tracked objects:
 16397 ;;		On entry : D/2
 16398 ;;		On exit  : 0/0
 16399 ;;		Unchanged: 0/0
 16400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16401 ;;      Params:         0       0       0       0       0       0       0
 16402 ;;      Locals:         0       6       0       0       0       0       0
 16403 ;;      Temps:          0       0       0       0       0       0       0
 16404 ;;      Totals:         0       6       0       0       0       0       0
 16405 ;;Total ram usage:        6 bytes
 16406 ;; Hardware stack levels used:    1
 16407 ;; Hardware stack levels required when called:    8
 16408 ;; This function calls:
 16409 ;;		_putsUSART
 16410 ;;		_memset
 16411 ;;		_strlen
 16412 ;;		_itoa
 16413 ;;		_readRegister
 16414 ;;		_strcat
 16415 ;; This function is called by:
 16416 ;;		_doModeVerbose
 16417 ;;		_findNodes
 16418 ;; This function uses a non-reentrant model
 16419 ;;
 16420                           
 16421                           	psect	text30
 16422  003B5A                     __ptext30:
 16423                           	opt stack 0
 16424  003B5A                     _printGUID:
 16425                           	opt stack 21
 16426                           
 16427                           ;incstack = 0
 16428                           ;incstack = 0
 16429                           ;printGUID@nodeid stored from wreg
 16430  003B5A  CFE8 F0B6          	movff	wreg,printGUID@nodeid
 16431                           
 16432                           ;main.c: 2677: uint8_t i;
 16433                           ;main.c: 2678: uint8_t value;
 16434                           ;main.c: 2679: char buf[3];
 16435                           ;main.c: 2681: memset( wrkbuf, 0, sizeof( wrkbuf ) );
 16436  003B5E  0101               	movlb	1	; () banked
 16437  003B60  0E01               	movlw	high _wrkbuf
 16438  003B62  6E1F               	movwf	?_memset+1,c
 16439  003B64  0E74               	movlw	low _wrkbuf
 16440  003B66  6E1E               	movwf	?_memset,c
 16441  003B68  6A21               	clrf	?_memset+3,c
 16442  003B6A  6A20               	clrf	?_memset+2,c
 16443  003B6C  6A23               	clrf	?_memset+5,c
 16444  003B6E  0E50               	movlw	80
 16445  003B70  6E22               	movwf	?_memset+4,c
 16446  003B72  EC9B  F02B         	call	_memset	;wreg free
 16447                           
 16448                           ;main.c: 2682: putsUSART((char *) "GUID = ");
 16449  003B76  0E7E               	movlw	high STR_243
 16450  003B78  6E20               	movwf	?_putsUSART+1,c
 16451  003B7A  0EE6               	movlw	low STR_243
 16452  003B7C  6E1F               	movwf	?_putsUSART,c
 16453  003B7E  EC25  F029         	call	_putsUSART	;wreg free
 16454                           
 16455                           ;main.c: 2684: for (i = 0; i < 16; i++) {
 16456  003B82  0100               	movlb	0	; () banked
 16457  003B84  6BBB               	clrf	printGUID@i& (0+255),b
 16458  003B86                     l14569:
 16459                           
 16460                           ; BSR set to: 0
 16461                           ;main.c: 2685: if (readRegister(nodeid,
 16462                           ;main.c: 2686: 0xD0 + i,
 16463                           ;main.c: 2687: rwtimeout,
 16464                           ;main.c: 2688: &value)) {
 16465  003B86  51BB               	movf	printGUID@i& (0+255),w,b
 16466  003B88  0FD0               	addlw	208
 16467  003B8A  6FAD               	movwf	?_readRegister& (0+255),b
 16468  003B8C  C0E1  F0AE         	movff	_rwtimeout,?_readRegister+1
 16469  003B90  6BAF               	clrf	(?_readRegister+2)& (0+255),b
 16470  003B92  0EBA               	movlw	low printGUID@value
 16471  003B94  6FB0               	movwf	(?_readRegister+3)& (0+255),b
 16472  003B96  51B6               	movf	printGUID@nodeid& (0+255),w,b
 16473  003B98  ECCA  F022         	call	_readRegister
 16474  003B9C  0900               	iorlw	0
 16475  003B9E  E029               	bz	l14579
 16476                           
 16477                           ;main.c: 2689: itoa(buf, value, 16);
 16478  003BA0  0100               	movlb	0	; () banked
 16479  003BA2  0E00               	movlw	high printGUID@buf
 16480  003BA4  6F6A               	movwf	(?_itoa+1)& (0+255),b
 16481  003BA6  0EB7               	movlw	low printGUID@buf
 16482  003BA8  6F69               	movwf	?_itoa& (0+255),b
 16483  003BAA  C0BA  F06B         	movff	printGUID@value,?_itoa+2
 16484  003BAE  6B6C               	clrf	(?_itoa+3)& (0+255),b
 16485  003BB0  6B6E               	clrf	(?_itoa+5)& (0+255),b
 16486  003BB2  0E10               	movlw	16
 16487  003BB4  6F6D               	movwf	(?_itoa+4)& (0+255),b
 16488  003BB6  EC1D  F02B         	call	_itoa	;wreg free
 16489                           
 16490                           ; BSR set to: 0
 16491                           ;main.c: 2690: if (1 == strlen(buf)) {
 16492  003BBA  0E00               	movlw	high printGUID@buf
 16493  003BBC  6E1F               	movwf	?_strlen+1,c
 16494  003BBE  0EB7               	movlw	low printGUID@buf
 16495  003BC0  6E1E               	movwf	?_strlen,c
 16496  003BC2  ECC6  F02A         	call	_strlen	;wreg free
 16497  003BC6  041E               	decf	?_strlen,w,c
 16498  003BC8  101F               	iorwf	?_strlen+1,w,c
 16499  003BCA  E10F               	bnz	l14577
 16500                           
 16501                           ;main.c: 2691: strcat(wrkbuf, "0");
 16502  003BCC  0101               	movlb	1	; () banked
 16503  003BCE  0E01               	movlw	high _wrkbuf
 16504  003BD0  6E1F               	movwf	?_strcat+1,c
 16505  003BD2  0E74               	movlw	low _wrkbuf
 16506  003BD4  6E1E               	movwf	?_strcat,c
 16507  003BD6  0E7F               	movlw	high STR_244
 16508  003BD8  6E21               	movwf	?_strcat+3,c
 16509  003BDA  0EF9               	movlw	low STR_244
 16510  003BDC  6E20               	movwf	?_strcat+2,c
 16511  003BDE  ECFA  F028         	call	_strcat	;wreg free
 16512                           
 16513                           ;main.c: 2692: strcat(wrkbuf, buf);
 16514  003BE2  D833               	call	PL62	;call to abstracted procedure
 16515  003BE4  ECFA  F028         	call	_strcat	;wreg free
 16516                           
 16517                           ;main.c: 2693: } else {
 16518  003BE8  D00F               	goto	l14581
 16519  003BEA                     l14577:
 16520                           
 16521                           ;main.c: 2694: strcat(wrkbuf, buf);
 16522  003BEA  D82F               	call	PL62	;call to abstracted procedure
 16523  003BEC  ECFA  F028         	call	_strcat	;wreg free
 16524  003BF0  D00B               	goto	l14581
 16525  003BF2                     l14579:
 16526                           
 16527                           ;main.c: 2698: strcat(wrkbuf, "--");
 16528  003BF2  0101               	movlb	1	; () banked
 16529  003BF4  0E01               	movlw	high _wrkbuf
 16530  003BF6  6E1F               	movwf	?_strcat+1,c
 16531  003BF8  0E74               	movlw	low _wrkbuf
 16532  003BFA  6E1E               	movwf	?_strcat,c
 16533  003BFC  0E7F               	movlw	high STR_245
 16534  003BFE  6E21               	movwf	?_strcat+3,c
 16535  003C00  0EE5               	movlw	low STR_245
 16536  003C02  6E20               	movwf	?_strcat+2,c
 16537  003C04  ECFA  F028         	call	_strcat	;wreg free
 16538  003C08                     l14581:
 16539                           
 16540                           ;main.c: 2699: }
 16541                           ;main.c: 2701: if (i < 15) {
 16542  003C08  0E0F               	movlw	15
 16543  003C0A  0100               	movlb	0	; () banked
 16544  003C0C  61BB               	cpfslt	printGUID@i& (0+255),b
 16545  003C0E  D00B               	goto	l14585
 16546                           
 16547                           ; BSR set to: 0
 16548                           ;main.c: 2702: strcat(wrkbuf, ":");
 16549  003C10  0101               	movlb	1	; () banked
 16550  003C12  0E01               	movlw	high _wrkbuf
 16551  003C14  6E1F               	movwf	?_strcat+1,c
 16552  003C16  0E74               	movlw	low _wrkbuf
 16553  003C18  6E1E               	movwf	?_strcat,c
 16554  003C1A  0E7F               	movlw	high STR_246
 16555  003C1C  6E21               	movwf	?_strcat+3,c
 16556  003C1E  0EFB               	movlw	low STR_246
 16557  003C20  6E20               	movwf	?_strcat+2,c
 16558  003C22  ECFA  F028         	call	_strcat	;wreg free
 16559  003C26                     l14585:
 16560  003C26  0100               	movlb	0	; () banked
 16561  003C28  2BBB               	incf	printGUID@i& (0+255),f,b
 16562                           
 16563                           ; BSR set to: 0
 16564  003C2A  0E0F               	movlw	15
 16565  003C2C  65BB               	cpfsgt	printGUID@i& (0+255),b
 16566  003C2E  D7AB               	goto	l14569
 16567                           
 16568                           ; BSR set to: 0
 16569                           ;main.c: 2703: }
 16570                           ;main.c: 2705: }
 16571                           ;main.c: 2707: putsUSART(wrkbuf);
 16572  003C30  0101               	movlb	1	; () banked
 16573  003C32  0E01               	movlw	high _wrkbuf
 16574  003C34  6E20               	movwf	?_putsUSART+1,c
 16575  003C36  0E74               	movlw	low _wrkbuf
 16576  003C38  6E1F               	movwf	?_putsUSART,c
 16577  003C3A  EC25  F029         	call	_putsUSART	;wreg free
 16578                           
 16579                           ;main.c: 2708: putsUSART((char *) "\r\n");
 16580  003C3E  0E74               	movlw	high (STR_197+50)
 16581  003C40  6E20               	movwf	?_putsUSART+1,c
 16582  003C42  0EC0               	movlw	low (STR_197+50)
 16583  003C44  6E1F               	movwf	?_putsUSART,c
 16584  003C46  EF25  F029         	goto	_putsUSART	;wreg free
 16585  003C4A                     __end_of_printGUID:
 16586                           	opt stack 0
 16587  003C4A                     PL62:
 16588                           	opt stack 21
 16589  003C4A  0E01               	movlw	high _wrkbuf
 16590  003C4C  6E1F               	movwf	?_strcat+1,c
 16591  003C4E  0E74               	movlw	low _wrkbuf
 16592  003C50  6E1E               	movwf	?_strcat,c
 16593  003C52  0100               	movlb	0	; () banked
 16594  003C54  0E00               	movlw	high printGUID@buf
 16595  003C56  6E21               	movwf	?_strcat+3,c
 16596  003C58  0EB7               	movlw	low printGUID@buf
 16597  003C5A  6E20               	movwf	?_strcat+2,c
 16598  003C5C  0012               	return	
 16599  003C5E                     __end_ofPL62:
 16600                           	opt stack 0
 16601                           tblptru	equ	0xFF8
 16602                           tblptrh	equ	0xFF7
 16603                           tblptrl	equ	0xFF6
 16604                           tablat	equ	0xFF5
 16605                           prodh	equ	0xFF4
 16606                           prodl	equ	0xFF3
 16607                           intcon	equ	0xFF2
 16608                           indf0	equ	0xFEF
 16609                           postinc0	equ	0xFEE
 16610                           fsr0h	equ	0xFEA
 16611                           fsr0l	equ	0xFE9
 16612                           wreg	equ	0xFE8
 16613                           indf1	equ	0xFE7
 16614                           postinc1	equ	0xFE6
 16615                           postdec1	equ	0xFE5
 16616                           fsr1h	equ	0xFE2
 16617                           fsr1l	equ	0xFE1
 16618                           indf2	equ	0xFDF
 16619                           postinc2	equ	0xFDE
 16620                           postdec2	equ	0xFDD
 16621                           plusw2	equ	0xFDB
 16622                           fsr2h	equ	0xFDA
 16623                           fsr2l	equ	0xFD9
 16624                           status	equ	0xFD8
 16625                           
 16626 ;; *************** function _printNodeFirmwareVersion *****************
 16627 ;; Defined at:
 16628 ;;		line 2748 in file "main.c"
 16629 ;; Parameters:    Size  Location     Type
 16630 ;;  nodeid          1    wreg     unsigned char 
 16631 ;; Auto vars:     Size  Location     Type
 16632 ;;  nodeid          1   86[BANK0 ] unsigned char 
 16633 ;;  buf             3   87[BANK0 ] unsigned char [3]
 16634 ;;  i               1   91[BANK0 ] unsigned char 
 16635 ;;  value           1   90[BANK0 ] unsigned char 
 16636 ;; Return value:  Size  Location     Type
 16637 ;;		None               void
 16638 ;; Registers used:
 16639 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16640 ;; Tracked objects:
 16641 ;;		On entry : D/2
 16642 ;;		On exit  : 0/0
 16643 ;;		Unchanged: 0/0
 16644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16645 ;;      Params:         0       0       0       0       0       0       0
 16646 ;;      Locals:         0       6       0       0       0       0       0
 16647 ;;      Temps:          0       0       0       0       0       0       0
 16648 ;;      Totals:         0       6       0       0       0       0       0
 16649 ;;Total ram usage:        6 bytes
 16650 ;; Hardware stack levels used:    1
 16651 ;; Hardware stack levels required when called:    8
 16652 ;; This function calls:
 16653 ;;		_putsUSART
 16654 ;;		_memset
 16655 ;;		_itoa
 16656 ;;		_readRegister
 16657 ;;		_strcat
 16658 ;; This function is called by:
 16659 ;;		_doModeVerbose
 16660 ;;		_findNodes
 16661 ;; This function uses a non-reentrant model
 16662 ;;
 16663                           
 16664                           	psect	text31
 16665  004290                     __ptext31:
 16666                           	opt stack 0
 16667  004290                     _printNodeFirmwareVersion:
 16668                           	opt stack 21
 16669                           
 16670                           ;incstack = 0
 16671                           ;incstack = 0
 16672                           ;printNodeFirmwareVersion@nodeid stored from wreg
 16673  004290  CFE8 F0B6          	movff	wreg,printNodeFirmwareVersion@nodeid
 16674                           
 16675                           ;main.c: 2749: uint8_t i;
 16676                           ;main.c: 2750: uint8_t value;
 16677                           ;main.c: 2751: char buf[3];
 16678                           ;main.c: 2753: memset( wrkbuf, 0, sizeof(wrkbuf) );
 16679  004294  0101               	movlb	1	; () banked
 16680  004296  0E01               	movlw	high _wrkbuf
 16681  004298  6E1F               	movwf	?_memset+1,c
 16682  00429A  0E74               	movlw	low _wrkbuf
 16683  00429C  6E1E               	movwf	?_memset,c
 16684  00429E  6A21               	clrf	?_memset+3,c
 16685  0042A0  6A20               	clrf	?_memset+2,c
 16686  0042A2  6A23               	clrf	?_memset+5,c
 16687  0042A4  0E50               	movlw	80
 16688  0042A6  6E22               	movwf	?_memset+4,c
 16689  0042A8  EC9B  F02B         	call	_memset	;wreg free
 16690                           
 16691                           ;main.c: 2754: putsUSART((char *) "Firmware version = ");
 16692  0042AC  0E7D               	movlw	high STR_250
 16693  0042AE  6E20               	movwf	?_putsUSART+1,c
 16694  0042B0  0EBF               	movlw	low STR_250
 16695  0042B2  6E1F               	movwf	?_putsUSART,c
 16696  0042B4  EC25  F029         	call	_putsUSART	;wreg free
 16697                           
 16698                           ;main.c: 2756: for (i = 0; i < 3; i++) {
 16699  0042B8  0100               	movlb	0	; () banked
 16700  0042BA  6BBB               	clrf	printNodeFirmwareVersion@i& (0+255),b
 16701  0042BC                     l14541:
 16702                           
 16703                           ; BSR set to: 0
 16704                           ;main.c: 2757: if (readRegister(nodeid,
 16705                           ;main.c: 2758: 0x94 + i,
 16706                           ;main.c: 2759: rwtimeout,
 16707                           ;main.c: 2760: &value)) {
 16708  0042BC  51BB               	movf	printNodeFirmwareVersion@i& (0+255),w,b
 16709  0042BE  0F94               	addlw	148
 16710  0042C0  6FAD               	movwf	?_readRegister& (0+255),b
 16711  0042C2  C0E1  F0AE         	movff	_rwtimeout,?_readRegister+1
 16712  0042C6  6BAF               	clrf	(?_readRegister+2)& (0+255),b
 16713  0042C8  0EBA               	movlw	low printNodeFirmwareVersion@value
 16714  0042CA  6FB0               	movwf	(?_readRegister+3)& (0+255),b
 16715  0042CC  51B6               	movf	printNodeFirmwareVersion@nodeid& (0+255),w,b
 16716  0042CE  ECCA  F022         	call	_readRegister
 16717  0042D2  0900               	iorlw	0
 16718  0042D4  E019               	bz	l14547
 16719                           
 16720                           ;main.c: 2761: itoa(buf, value, 16);
 16721  0042D6  0100               	movlb	0	; () banked
 16722  0042D8  0E00               	movlw	high printNodeFirmwareVersion@buf
 16723  0042DA  6F6A               	movwf	(?_itoa+1)& (0+255),b
 16724  0042DC  0EB7               	movlw	low printNodeFirmwareVersion@buf
 16725  0042DE  6F69               	movwf	?_itoa& (0+255),b
 16726  0042E0  C0BA  F06B         	movff	printNodeFirmwareVersion@value,?_itoa+2
 16727  0042E4  6B6C               	clrf	(?_itoa+3)& (0+255),b
 16728  0042E6  6B6E               	clrf	(?_itoa+5)& (0+255),b
 16729  0042E8  0E10               	movlw	16
 16730  0042EA  6F6D               	movwf	(?_itoa+4)& (0+255),b
 16731  0042EC  EC1D  F02B         	call	_itoa	;wreg free
 16732                           
 16733                           ; BSR set to: 0
 16734                           ;main.c: 2762: strcat(wrkbuf, buf);
 16735  0042F0  0E01               	movlw	high _wrkbuf
 16736  0042F2  6E1F               	movwf	?_strcat+1,c
 16737  0042F4  0E74               	movlw	low _wrkbuf
 16738  0042F6  6E1E               	movwf	?_strcat,c
 16739  0042F8  0100               	movlb	0	; () banked
 16740  0042FA  0E00               	movlw	high printNodeFirmwareVersion@buf
 16741  0042FC  6E21               	movwf	?_strcat+3,c
 16742  0042FE  0EB7               	movlw	low printNodeFirmwareVersion@buf
 16743  004300  6E20               	movwf	?_strcat+2,c
 16744  004302  ECFA  F028         	call	_strcat	;wreg free
 16745                           
 16746                           ;main.c: 2763: }
 16747  004306  D00B               	goto	l14549
 16748  004308                     l14547:
 16749                           
 16750                           ;main.c: 2764: else {
 16751                           ;main.c: 2765: strcat(wrkbuf, "?");
 16752  004308  0101               	movlb	1	; () banked
 16753  00430A  0E01               	movlw	high _wrkbuf
 16754  00430C  6E1F               	movwf	?_strcat+1,c
 16755  00430E  0E74               	movlw	low _wrkbuf
 16756  004310  6E1E               	movwf	?_strcat,c
 16757  004312  0E7F               	movlw	high STR_251
 16758  004314  6E21               	movwf	?_strcat+3,c
 16759  004316  0EFD               	movlw	low STR_251
 16760  004318  6E20               	movwf	?_strcat+2,c
 16761  00431A  ECFA  F028         	call	_strcat	;wreg free
 16762  00431E                     l14549:
 16763                           
 16764                           ;main.c: 2766: }
 16765                           ;main.c: 2768: if (i < 2) {
 16766  00431E  0E02               	movlw	2
 16767  004320  0100               	movlb	0	; () banked
 16768  004322  61BB               	cpfslt	printNodeFirmwareVersion@i& (0+255),b
 16769  004324  D00B               	goto	l14553
 16770                           
 16771                           ; BSR set to: 0
 16772                           ;main.c: 2769: strcat(wrkbuf, ".");
 16773  004326  0101               	movlb	1	; () banked
 16774  004328  0E01               	movlw	high _wrkbuf
 16775  00432A  6E1F               	movwf	?_strcat+1,c
 16776  00432C  0E74               	movlw	low _wrkbuf
 16777  00432E  6E1E               	movwf	?_strcat,c
 16778  004330  0E7F               	movlw	high STR_252
 16779  004332  6E21               	movwf	?_strcat+3,c
 16780  004334  0EF7               	movlw	low STR_252
 16781  004336  6E20               	movwf	?_strcat+2,c
 16782  004338  ECFA  F028         	call	_strcat	;wreg free
 16783  00433C                     l14553:
 16784  00433C  0100               	movlb	0	; () banked
 16785  00433E  2BBB               	incf	printNodeFirmwareVersion@i& (0+255),f,b
 16786                           
 16787                           ; BSR set to: 0
 16788  004340  0E02               	movlw	2
 16789  004342  65BB               	cpfsgt	printNodeFirmwareVersion@i& (0+255),b
 16790  004344  D7BB               	goto	l14541
 16791                           
 16792                           ; BSR set to: 0
 16793                           ;main.c: 2770: }
 16794                           ;main.c: 2772: }
 16795                           ;main.c: 2774: putsUSART(wrkbuf);
 16796  004346  0101               	movlb	1	; () banked
 16797  004348  0E01               	movlw	high _wrkbuf
 16798  00434A  6E20               	movwf	?_putsUSART+1,c
 16799  00434C  0E74               	movlw	low _wrkbuf
 16800  00434E  6E1F               	movwf	?_putsUSART,c
 16801  004350  EC25  F029         	call	_putsUSART	;wreg free
 16802                           
 16803                           ;main.c: 2775: putsUSART((char *) "\r\n");
 16804  004354  0E74               	movlw	high (STR_197+50)
 16805  004356  6E20               	movwf	?_putsUSART+1,c
 16806  004358  0EC0               	movlw	low (STR_197+50)
 16807  00435A  6E1F               	movwf	?_putsUSART,c
 16808  00435C  EF25  F029         	goto	_putsUSART	;wreg free
 16809  004360                     __end_of_printNodeFirmwareVersion:
 16810                           	opt stack 0
 16811                           tblptru	equ	0xFF8
 16812                           tblptrh	equ	0xFF7
 16813                           tblptrl	equ	0xFF6
 16814                           tablat	equ	0xFF5
 16815                           prodh	equ	0xFF4
 16816                           prodl	equ	0xFF3
 16817                           intcon	equ	0xFF2
 16818                           indf0	equ	0xFEF
 16819                           postinc0	equ	0xFEE
 16820                           fsr0h	equ	0xFEA
 16821                           fsr0l	equ	0xFE9
 16822                           wreg	equ	0xFE8
 16823                           indf1	equ	0xFE7
 16824                           postinc1	equ	0xFE6
 16825                           postdec1	equ	0xFE5
 16826                           fsr1h	equ	0xFE2
 16827                           fsr1l	equ	0xFE1
 16828                           indf2	equ	0xFDF
 16829                           postinc2	equ	0xFDE
 16830                           postdec2	equ	0xFDD
 16831                           plusw2	equ	0xFDB
 16832                           fsr2h	equ	0xFDA
 16833                           fsr2l	equ	0xFD9
 16834                           status	equ	0xFD8
 16835                           
 16836 ;; *************** function _strcat *****************
 16837 ;; Defined at:
 16838 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcat.c"
 16839 ;; Parameters:    Size  Location     Type
 16840 ;;  to              2   29[COMRAM] PTR unsigned char 
 16841 ;;		 -> wrkbuf(80), 
 16842 ;;  from            2   31[COMRAM] PTR const unsigned char 
 16843 ;;		 -> STR_252(2), STR_251(2), printNodeFirmwareVersion@buf(3), STR_246(2), 
 16844 ;;		 -> STR_245(3), STR_244(2), printGUID@buf(3), 
 16845 ;; Auto vars:     Size  Location     Type
 16846 ;;  cp              2   33[COMRAM] PTR unsigned char 
 16847 ;;		 -> wrkbuf(80), 
 16848 ;; Return value:  Size  Location     Type
 16849 ;;                  2   29[COMRAM] PTR unsigned char 
 16850 ;; Registers used:
 16851 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
 16852 ;; Tracked objects:
 16853 ;;		On entry : E/1
 16854 ;;		On exit  : 0/0
 16855 ;;		Unchanged: 0/0
 16856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16857 ;;      Params:         4       0       0       0       0       0       0
 16858 ;;      Locals:         2       0       0       0       0       0       0
 16859 ;;      Temps:          0       0       0       0       0       0       0
 16860 ;;      Totals:         6       0       0       0       0       0       0
 16861 ;;Total ram usage:        6 bytes
 16862 ;; Hardware stack levels used:    1
 16863 ;; Hardware stack levels required when called:    3
 16864 ;; This function calls:
 16865 ;;		Nothing
 16866 ;; This function is called by:
 16867 ;;		_printGUID
 16868 ;;		_printNodeFirmwareVersion
 16869 ;; This function uses a non-reentrant model
 16870 ;;
 16871                           
 16872                           	psect	text32
 16873  0051F4                     __ptext32:
 16874                           	opt stack 0
 16875  0051F4                     _strcat:
 16876                           	opt stack 25
 16877                           
 16878                           ;incstack = 0
 16879                           ;incstack = 0
 16880  0051F4  C01E  F022         	movff	strcat@to,strcat@cp
 16881  0051F8  C01F  F023         	movff	strcat@to+1,strcat@cp+1
 16882  0051FC  D002               	goto	l12869
 16883  0051FE                     l12867:
 16884  0051FE  4A22               	infsnz	strcat@cp,f,c
 16885  005200  2A23               	incf	strcat@cp+1,f,c
 16886  005202                     l12869:
 16887  005202  C022  FFD9         	movff	strcat@cp,fsr2l
 16888  005206  C023  FFDA         	movff	strcat@cp+1,fsr2h
 16889  00520A  50DF               	movf	indf2,w,c
 16890  00520C  E005               	bz	l12873
 16891  00520E  D7F7               	goto	l12867
 16892  005210                     l12871:
 16893  005210  4A22               	infsnz	strcat@cp,f,c
 16894  005212  2A23               	incf	strcat@cp+1,f,c
 16895  005214  4A20               	infsnz	strcat@from,f,c
 16896  005216  2A21               	incf	strcat@from+1,f,c
 16897  005218                     l12873:
 16898  005218  C020  FFF6         	movff	strcat@from,tblptrl
 16899  00521C  C021  FFF7         	movff	strcat@from+1,tblptrh
 16900  005220  6AF8               	clrf	tblptru,c
 16901  005222  C022  FFD9         	movff	strcat@cp,fsr2l
 16902  005226  C023  FFDA         	movff	strcat@cp+1,fsr2h
 16903  00522A  0E05               	movlw	(high __ramtop+-1)
 16904  00522C  64F7               	cpfsgt	tblptrh,c
 16905  00522E  D003               	bra	u16857
 16906  005230  0008               	tblrd		*
 16907  005232  50F5               	movf	tablat,w,c
 16908  005234  D005               	bra	u16850
 16909  005236                     u16857:
 16910  005236  CFF6 FFE9          	movff	tblptrl,fsr0l
 16911  00523A  CFF7 FFEA          	movff	tblptrh,fsr0h
 16912  00523E  50EF               	movf	indf0,w,c
 16913  005240                     u16850:
 16914  005240  6EDF               	movwf	indf2,c
 16915  005242  50DF               	movf	indf2,w,c
 16916  005244  B4D8               	btfsc	status,2,c
 16917  005246  0012               	return	
 16918  005248  D7E3               	goto	l12871
 16919  00524A                     __end_of_strcat:
 16920                           	opt stack 0
 16921                           tblptru	equ	0xFF8
 16922                           tblptrh	equ	0xFF7
 16923                           tblptrl	equ	0xFF6
 16924                           tablat	equ	0xFF5
 16925                           prodh	equ	0xFF4
 16926                           prodl	equ	0xFF3
 16927                           intcon	equ	0xFF2
 16928                           indf0	equ	0xFEF
 16929                           postinc0	equ	0xFEE
 16930                           fsr0h	equ	0xFEA
 16931                           fsr0l	equ	0xFE9
 16932                           wreg	equ	0xFE8
 16933                           indf1	equ	0xFE7
 16934                           postinc1	equ	0xFE6
 16935                           postdec1	equ	0xFE5
 16936                           fsr1h	equ	0xFE2
 16937                           fsr1l	equ	0xFE1
 16938                           indf2	equ	0xFDF
 16939                           postinc2	equ	0xFDE
 16940                           postdec2	equ	0xFDD
 16941                           plusw2	equ	0xFDB
 16942                           fsr2h	equ	0xFDA
 16943                           fsr2l	equ	0xFD9
 16944                           status	equ	0xFD8
 16945                           
 16946 ;; *************** function _readRegister *****************
 16947 ;; Defined at:
 16948 ;;		line 2251 in file "main.c"
 16949 ;; Parameters:    Size  Location     Type
 16950 ;;  nodeid          1    wreg     unsigned char 
 16951 ;;  reg             1   77[BANK0 ] unsigned char 
 16952 ;;  timeout         2   78[BANK0 ] unsigned short 
 16953 ;;  value           1   80[BANK0 ] PTR unsigned char 
 16954 ;;		 -> printNodeFirmwareVersion@value(1), printMDF@value(1), printGUID@value(1), findNodes@value(1), 
 16955 ;; Auto vars:     Size  Location     Type
 16956 ;;  nodeid          1   85[BANK0 ] unsigned char 
 16957 ;; Return value:  Size  Location     Type
 16958 ;;                  1    wreg      enum E15660
 16959 ;; Registers used:
 16960 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 16961 ;; Tracked objects:
 16962 ;;		On entry : F/0
 16963 ;;		On exit  : E/0
 16964 ;;		Unchanged: 0/0
 16965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 16966 ;;      Params:         0       4       0       0       0       0       0
 16967 ;;      Locals:         0       1       0       0       0       0       0
 16968 ;;      Temps:          0       4       0       0       0       0       0
 16969 ;;      Totals:         0       9       0       0       0       0       0
 16970 ;;Total ram usage:        9 bytes
 16971 ;; Hardware stack levels used:    1
 16972 ;; Hardware stack levels required when called:    7
 16973 ;; This function calls:
 16974 ;;		_sendVSCPFrame
 16975 ;;		_getVSCPFrame
 16976 ;; This function is called by:
 16977 ;;		_findNodes
 16978 ;;		_printGUID
 16979 ;;		_printMDF
 16980 ;;		_printNodeFirmwareVersion
 16981 ;; This function uses a non-reentrant model
 16982 ;;
 16983                           
 16984                           	psect	text33
 16985  004594                     __ptext33:
 16986                           	opt stack 0
 16987  004594                     _readRegister:
 16988                           	opt stack 21
 16989                           
 16990                           ;incstack = 0
 16991                           ;incstack = 0
 16992                           ;readRegister@nodeid stored from wreg
 16993  004594  CFE8 F0B5          	movff	wreg,readRegister@nodeid
 16994                           
 16995                           ; BSR set to: 0
 16996                           ;main.c: 2252: vscpData[ 0 ] = nodeid;
 16997  004598  C0B5  F1DC         	movff	readRegister@nodeid,_vscpData
 16998                           
 16999                           ; BSR set to: 0
 17000                           ;main.c: 2253: vscpData[ 1 ] = reg;
 17001  00459C  C0AD  F1DD         	movff	readRegister@reg,_vscpData+1
 17002                           
 17003                           ; BSR set to: 0
 17004                           ;main.c: 2255: if (sendVSCPFrame(0,
 17005                           ;main.c: 2256: 9,
 17006                           ;main.c: 2257: 0,
 17007                           ;main.c: 2258: 0,
 17008                           ;main.c: 2259: 2,
 17009                           ;main.c: 2260: vscpData)) {
 17010  0045A0  6B8E               	clrf	(?_sendVSCPFrame+1)& (0+255),b
 17011  0045A2  6B8D               	clrf	?_sendVSCPFrame& (0+255),b
 17012  0045A4  0E09               	movlw	9
 17013  0045A6  6F8F               	movwf	(?_sendVSCPFrame+2)& (0+255),b
 17014  0045A8  6B90               	clrf	(?_sendVSCPFrame+3)& (0+255),b
 17015  0045AA  6B91               	clrf	(?_sendVSCPFrame+4)& (0+255),b
 17016  0045AC  0E02               	movlw	2
 17017  0045AE  6F92               	movwf	(?_sendVSCPFrame+5)& (0+255),b
 17018  0045B0  0E01               	movlw	high _vscpData
 17019  0045B2  0100               	movlb	0	; () banked
 17020  0045B4  6F94               	movwf	(?_sendVSCPFrame+7)& (0+255),b
 17021  0045B6  0EDC               	movlw	low _vscpData
 17022  0045B8  6F93               	movwf	(?_sendVSCPFrame+6)& (0+255),b
 17023  0045BA  EC6F  F022         	call	_sendVSCPFrame	;wreg free
 17024  0045BE  0900               	iorlw	0
 17025  0045C0  E041               	bz	l15181
 17026                           
 17027                           ;main.c: 2262: timekeeper = 0;
 17028  0045C2  6A27               	clrf	_timekeeper,c	;volatile
 17029  0045C4  6A28               	clrf	_timekeeper+1,c	;volatile
 17030  0045C6  6A29               	clrf	_timekeeper+2,c	;volatile
 17031  0045C8  6A2A               	clrf	_timekeeper+3,c	;volatile
 17032                           
 17033                           ;main.c: 2263: while (timekeeper < timeout) {
 17034  0045CA  D02C               	goto	l15179
 17035  0045CC                     l1083:
 17036                           
 17037                           ; BSR set to: 0
 17038  0045CC  0004               	clrwdt		;# 
 17039                           
 17040                           ;main.c: 2267: if (getVSCPFrame(&vscpClass,
 17041                           ;main.c: 2268: &vscpType,
 17042                           ;main.c: 2269: &vscpNodeId,
 17043                           ;main.c: 2270: &vscpPriority,
 17044                           ;main.c: 2271: &vscpSize,
 17045                           ;main.c: 2272: vscpData)) {
 17046  0045CE  0100               	movlb	0	; () banked
 17047  0045D0  0EE5               	movlw	low _vscpType
 17048  0045D2  6F6B               	movwf	?_getVSCPFrame& (0+255),b
 17049  0045D4  0EE2               	movlw	low _vscpNodeId
 17050  0045D6  6F6C               	movwf	(?_getVSCPFrame+1)& (0+255),b
 17051  0045D8  0EE3               	movlw	low _vscpPriority
 17052  0045DA  6F6D               	movwf	(?_getVSCPFrame+2)& (0+255),b
 17053  0045DC  0EE4               	movlw	low _vscpSize
 17054  0045DE  6F6E               	movwf	(?_getVSCPFrame+3)& (0+255),b
 17055  0045E0  0E01               	movlw	high _vscpData
 17056  0045E2  6F70               	movwf	(?_getVSCPFrame+5)& (0+255),b
 17057  0045E4  0EDC               	movlw	low _vscpData
 17058  0045E6  6F6F               	movwf	(?_getVSCPFrame+4)& (0+255),b
 17059  0045E8  0E3E               	movlw	_vscpClass& (0+255)
 17060  0045EA  EC78  F026         	call	_getVSCPFrame
 17061  0045EE  0900               	iorlw	0
 17062  0045F0  E019               	bz	l15179
 17063                           
 17064                           ; BSR set to: 0
 17065                           ;main.c: 2273: if ((nodeid == vscpNodeId) &&
 17066                           ;main.c: 2274: (0 == vscpClass) &&
 17067                           ;main.c: 2275: (10 == vscpType) &&
 17068                           ;main.c: 2276: (2 == vscpSize) &&
 17069                           ;main.c: 2277: (reg == vscpData[ 0 ])) {
 17070  0045F2  51E2               	movf	_vscpNodeId& (0+255),w,b
 17071  0045F4  63B5               	cpfseq	readRegister@nodeid& (0+255),b
 17072  0045F6  D016               	goto	l15179
 17073                           
 17074                           ; BSR set to: 0
 17075  0045F8  503F               	movf	_vscpClass+1,w,c
 17076  0045FA  103E               	iorwf	_vscpClass,w,c
 17077  0045FC  E113               	bnz	l15179
 17078                           
 17079                           ; BSR set to: 0
 17080  0045FE  51E5               	movf	_vscpType& (0+255),w,b
 17081  004600  0A0A               	xorlw	10
 17082  004602  E110               	bnz	l15179
 17083                           
 17084                           ; BSR set to: 0
 17085  004604  51E4               	movf	_vscpSize& (0+255),w,b
 17086  004606  0A02               	xorlw	2
 17087  004608  E10D               	bnz	l15179
 17088                           
 17089                           ; BSR set to: 0
 17090  00460A  0101               	movlb	1	; () banked
 17091  00460C  51DC               	movf	_vscpData& (0+255),w,b
 17092  00460E  0100               	movlb	0	; () banked
 17093  004610  63AD               	cpfseq	readRegister@reg& (0+255),b
 17094  004612  D008               	goto	l15179
 17095                           
 17096                           ; BSR set to: 0
 17097                           ;main.c: 2278: *value = vscpData[ 1 ];
 17098  004614  51B0               	movf	readRegister@value& (0+255),w,b
 17099  004616  6ED9               	movwf	fsr2l,c
 17100  004618  6ADA               	clrf	fsr2h,c
 17101  00461A  0101               	movlb	1	; () banked
 17102  00461C  C1DD  FFDF         	movff	_vscpData+1,indf2
 17103                           
 17104                           ; BSR set to: 1
 17105                           ;main.c: 2279: return 1;
 17106  004620  0E01               	movlw	1
 17107  004622  D011               	goto	l1086
 17108  004624                     l15179:
 17109  004624  0100               	movlb	0	; () banked
 17110  004626  51AE               	movf	readRegister@timeout& (0+255),w,b
 17111  004628  6FB1               	movwf	??_readRegister& (0+255),b
 17112  00462A  51AF               	movf	(readRegister@timeout+1)& (0+255),w,b
 17113  00462C  6FB2               	movwf	(??_readRegister+1)& (0+255),b
 17114  00462E  6BB3               	clrf	(??_readRegister+2)& (0+255),b
 17115  004630  6BB4               	clrf	(??_readRegister+3)& (0+255),b
 17116  004632  51B1               	movf	??_readRegister& (0+255),w,b
 17117  004634  5C27               	subwf	_timekeeper,w,c	;volatile
 17118  004636  51B2               	movf	(??_readRegister+1)& (0+255),w,b
 17119  004638  5828               	subwfb	_timekeeper+1,w,c	;volatile
 17120  00463A  51B3               	movf	(??_readRegister+2)& (0+255),w,b
 17121  00463C  5829               	subwfb	_timekeeper+2,w,c	;volatile
 17122  00463E  51B4               	movf	(??_readRegister+3)& (0+255),w,b
 17123  004640  582A               	subwfb	_timekeeper+3,w,c	;volatile
 17124  004642  E3C4               	bnc	l1083
 17125  004644                     l15181:
 17126                           
 17127                           ;main.c: 2280: }
 17128                           ;main.c: 2281: }
 17129                           ;main.c: 2282: }
 17130                           ;main.c: 2283: }
 17131                           ;main.c: 2285: return 0;
 17132  004644  0E00               	movlw	0
 17133  004646                     l1086:
 17134  004646  0012               	return	
 17135  004648                     __end_of_readRegister:
 17136                           	opt stack 0
 17137                           tblptru	equ	0xFF8
 17138                           tblptrh	equ	0xFF7
 17139                           tblptrl	equ	0xFF6
 17140                           tablat	equ	0xFF5
 17141                           prodh	equ	0xFF4
 17142                           prodl	equ	0xFF3
 17143                           intcon	equ	0xFF2
 17144                           indf0	equ	0xFEF
 17145                           postinc0	equ	0xFEE
 17146                           fsr0h	equ	0xFEA
 17147                           fsr0l	equ	0xFE9
 17148                           wreg	equ	0xFE8
 17149                           indf1	equ	0xFE7
 17150                           postinc1	equ	0xFE6
 17151                           postdec1	equ	0xFE5
 17152                           fsr1h	equ	0xFE2
 17153                           fsr1l	equ	0xFE1
 17154                           indf2	equ	0xFDF
 17155                           postinc2	equ	0xFDE
 17156                           postdec2	equ	0xFDD
 17157                           plusw2	equ	0xFDB
 17158                           fsr2h	equ	0xFDA
 17159                           fsr2l	equ	0xFD9
 17160                           status	equ	0xFD8
 17161                           
 17162 ;; *************** function _sendVSCPFrame *****************
 17163 ;; Defined at:
 17164 ;;		line 2972 in file "main.c"
 17165 ;; Parameters:    Size  Location     Type
 17166 ;;  vscpclass       2   45[BANK0 ] unsigned short 
 17167 ;;  vscptype        1   47[BANK0 ] unsigned char 
 17168 ;;  nodeid          1   48[BANK0 ] unsigned char 
 17169 ;;  priority        1   49[BANK0 ] unsigned char 
 17170 ;;  size            1   50[BANK0 ] unsigned char 
 17171 ;;  pData           2   51[BANK0 ] PTR unsigned char 
 17172 ;;		 -> vscpData(8), 
 17173 ;; Auto vars:     Size  Location     Type
 17174 ;;  id              4   73[BANK0 ] unsigned long 
 17175 ;; Return value:  Size  Location     Type
 17176 ;;                  1    wreg      unsigned char 
 17177 ;; Registers used:
 17178 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17179 ;; Tracked objects:
 17180 ;;		On entry : F/0
 17181 ;;		On exit  : E/0
 17182 ;;		Unchanged: 0/0
 17183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17184 ;;      Params:         0       8       0       0       0       0       0
 17185 ;;      Locals:         0       4       0       0       0       0       0
 17186 ;;      Temps:          0      20       0       0       0       0       0
 17187 ;;      Totals:         0      32       0       0       0       0       0
 17188 ;;Total ram usage:       32 bytes
 17189 ;; Hardware stack levels used:    1
 17190 ;; Hardware stack levels required when called:    6
 17191 ;; This function calls:
 17192 ;;		_sendCANFrame
 17193 ;; This function is called by:
 17194 ;;		_doModeVerbose
 17195 ;;		_readRegister
 17196 ;;		_readRegisterExtended
 17197 ;;		_writeRegisterExtended
 17198 ;; This function uses a non-reentrant model
 17199 ;;
 17200                           
 17201                           	psect	text34
 17202  0044DE                     __ptext34:
 17203                           	opt stack 0
 17204  0044DE                     _sendVSCPFrame:
 17205                           	opt stack 21
 17206                           
 17207                           ; BSR set to: 0
 17208                           ;main.c: 2973: uint32_t id = ((uint32_t) priority << 26) |
 17209                           ;main.c: 2974: ((uint32_t) vscpclass << 16) |
 17210                           ;main.c: 2975: ((uint32_t) vscptype << 8) |
 17211                           ;main.c: 2976: nodeid;
 17212                           
 17213                           ;incstack = 0
 17214                           ;incstack = 0
 17215  0044DE  C08F  F095         	movff	sendVSCPFrame@vscptype,??_sendVSCPFrame
 17216  0044E2  6B96               	clrf	(??_sendVSCPFrame+1)& (0+255),b
 17217  0044E4  6B97               	clrf	(??_sendVSCPFrame+2)& (0+255),b
 17218  0044E6  6B98               	clrf	(??_sendVSCPFrame+3)& (0+255),b
 17219  0044E8  C097  F098         	movff	??_sendVSCPFrame+2,??_sendVSCPFrame+3
 17220  0044EC  C096  F097         	movff	??_sendVSCPFrame+1,??_sendVSCPFrame+2
 17221  0044F0  C095  F096         	movff	??_sendVSCPFrame,??_sendVSCPFrame+1
 17222  0044F4  6B95               	clrf	??_sendVSCPFrame& (0+255),b
 17223  0044F6  518D               	movf	sendVSCPFrame@vscpclass& (0+255),w,b
 17224  0044F8  6F99               	movwf	(??_sendVSCPFrame+4)& (0+255),b
 17225  0044FA  518E               	movf	(sendVSCPFrame@vscpclass+1)& (0+255),w,b
 17226  0044FC  6F9A               	movwf	(??_sendVSCPFrame+5)& (0+255),b
 17227  0044FE  6B9B               	clrf	(??_sendVSCPFrame+6)& (0+255),b
 17228  004500  6B9C               	clrf	(??_sendVSCPFrame+7)& (0+255),b
 17229  004502  C09A  F09C         	movff	??_sendVSCPFrame+5,??_sendVSCPFrame+7
 17230  004506  C099  F09B         	movff	??_sendVSCPFrame+4,??_sendVSCPFrame+6
 17231  00450A  6B9A               	clrf	(??_sendVSCPFrame+5)& (0+255),b
 17232  00450C  6B99               	clrf	(??_sendVSCPFrame+4)& (0+255),b
 17233  00450E  C091  F09D         	movff	sendVSCPFrame@priority,??_sendVSCPFrame+8
 17234  004512  6B9E               	clrf	(??_sendVSCPFrame+9)& (0+255),b
 17235  004514  6B9F               	clrf	(??_sendVSCPFrame+10)& (0+255),b
 17236  004516  6BA0               	clrf	(??_sendVSCPFrame+11)& (0+255),b
 17237  004518  0E1A               	movlw	26
 17238  00451A                     u19415:
 17239  00451A  90D8               	bcf	status,0,c
 17240  00451C  379D               	rlcf	(??_sendVSCPFrame+8)& (0+255),f,b
 17241  00451E  379E               	rlcf	(??_sendVSCPFrame+9)& (0+255),f,b
 17242  004520  379F               	rlcf	(??_sendVSCPFrame+10)& (0+255),f,b
 17243  004522  37A0               	rlcf	(??_sendVSCPFrame+11)& (0+255),f,b
 17244  004524  2EE8               	decfsz	wreg,f,c
 17245  004526  D7F9               	goto	u19415
 17246  004528  5199               	movf	(??_sendVSCPFrame+4)& (0+255),w,b
 17247  00452A  119D               	iorwf	(??_sendVSCPFrame+8)& (0+255),w,b
 17248  00452C  6FA1               	movwf	(??_sendVSCPFrame+12)& (0+255),b
 17249  00452E  519A               	movf	(??_sendVSCPFrame+5)& (0+255),w,b
 17250  004530  119E               	iorwf	(??_sendVSCPFrame+9)& (0+255),w,b
 17251  004532  6FA2               	movwf	(??_sendVSCPFrame+13)& (0+255),b
 17252  004534  519B               	movf	(??_sendVSCPFrame+6)& (0+255),w,b
 17253  004536  119F               	iorwf	(??_sendVSCPFrame+10)& (0+255),w,b
 17254  004538  6FA3               	movwf	(??_sendVSCPFrame+14)& (0+255),b
 17255  00453A  519C               	movf	(??_sendVSCPFrame+7)& (0+255),w,b
 17256  00453C  11A0               	iorwf	(??_sendVSCPFrame+11)& (0+255),w,b
 17257  00453E  6FA4               	movwf	(??_sendVSCPFrame+15)& (0+255),b
 17258  004540  5195               	movf	??_sendVSCPFrame& (0+255),w,b
 17259  004542  11A1               	iorwf	(??_sendVSCPFrame+12)& (0+255),w,b
 17260  004544  6FA5               	movwf	(??_sendVSCPFrame+16)& (0+255),b
 17261  004546  5196               	movf	(??_sendVSCPFrame+1)& (0+255),w,b
 17262  004548  11A2               	iorwf	(??_sendVSCPFrame+13)& (0+255),w,b
 17263  00454A  6FA6               	movwf	(??_sendVSCPFrame+17)& (0+255),b
 17264  00454C  5197               	movf	(??_sendVSCPFrame+2)& (0+255),w,b
 17265  00454E  11A3               	iorwf	(??_sendVSCPFrame+14)& (0+255),w,b
 17266  004550  6FA7               	movwf	(??_sendVSCPFrame+18)& (0+255),b
 17267  004552  5198               	movf	(??_sendVSCPFrame+3)& (0+255),w,b
 17268  004554  11A4               	iorwf	(??_sendVSCPFrame+15)& (0+255),w,b
 17269  004556  6FA8               	movwf	(??_sendVSCPFrame+19)& (0+255),b
 17270  004558  5190               	movf	sendVSCPFrame@nodeid& (0+255),w,b
 17271  00455A  11A5               	iorwf	(??_sendVSCPFrame+16)& (0+255),w,b
 17272  00455C  6FA9               	movwf	sendVSCPFrame@id& (0+255),b
 17273  00455E  51A6               	movf	(??_sendVSCPFrame+17)& (0+255),w,b
 17274  004560  6FAA               	movwf	(sendVSCPFrame@id+1)& (0+255),b
 17275  004562  51A7               	movf	(??_sendVSCPFrame+18)& (0+255),w,b
 17276  004564  6FAB               	movwf	(sendVSCPFrame@id+2)& (0+255),b
 17277  004566  51A8               	movf	(??_sendVSCPFrame+19)& (0+255),w,b
 17278  004568  6FAC               	movwf	(sendVSCPFrame@id+3)& (0+255),b
 17279                           
 17280                           ; BSR set to: 0
 17281                           ;main.c: 2978: if (!sendCANFrame(id, size, pData)) {
 17282  00456A  C0A9  F086         	movff	sendVSCPFrame@id,?_sendCANFrame
 17283  00456E  C0AA  F087         	movff	sendVSCPFrame@id+1,?_sendCANFrame+1
 17284  004572  C0AB  F088         	movff	sendVSCPFrame@id+2,?_sendCANFrame+2
 17285  004576  C0AC  F089         	movff	sendVSCPFrame@id+3,?_sendCANFrame+3
 17286  00457A  C092  F08A         	movff	sendVSCPFrame@size,?_sendCANFrame+4
 17287  00457E  C093  F08B         	movff	sendVSCPFrame@pData,?_sendCANFrame+5
 17288  004582  C094  F08C         	movff	sendVSCPFrame@pData+1,?_sendCANFrame+6
 17289  004586  ECE4  F02A         	call	_sendCANFrame	;wreg free
 17290  00458A  0900               	iorlw	0
 17291                           
 17292                           ;main.c: 2980: return 0;
 17293  00458C  0E00               	movlw	0
 17294  00458E  A4D8               	btfss	status,2,c
 17295                           
 17296                           ;main.c: 2981: }
 17297                           ;main.c: 2983: return 1;
 17298  004590  0E01               	movlw	1
 17299  004592  0012               	return	
 17300  004594                     __end_of_sendVSCPFrame:
 17301                           	opt stack 0
 17302                           tblptru	equ	0xFF8
 17303                           tblptrh	equ	0xFF7
 17304                           tblptrl	equ	0xFF6
 17305                           tablat	equ	0xFF5
 17306                           prodh	equ	0xFF4
 17307                           prodl	equ	0xFF3
 17308                           intcon	equ	0xFF2
 17309                           indf0	equ	0xFEF
 17310                           postinc0	equ	0xFEE
 17311                           fsr0h	equ	0xFEA
 17312                           fsr0l	equ	0xFE9
 17313                           wreg	equ	0xFE8
 17314                           indf1	equ	0xFE7
 17315                           postinc1	equ	0xFE6
 17316                           postdec1	equ	0xFE5
 17317                           fsr1h	equ	0xFE2
 17318                           fsr1l	equ	0xFE1
 17319                           indf2	equ	0xFDF
 17320                           postinc2	equ	0xFDE
 17321                           postdec2	equ	0xFDD
 17322                           plusw2	equ	0xFDB
 17323                           fsr2h	equ	0xFDA
 17324                           fsr2l	equ	0xFD9
 17325                           status	equ	0xFD8
 17326                           
 17327 ;; *************** function _sendCANFrame *****************
 17328 ;; Defined at:
 17329 ;;		line 3018 in file "main.c"
 17330 ;; Parameters:    Size  Location     Type
 17331 ;;  id              4   38[BANK0 ] unsigned long 
 17332 ;;  dlc             1   42[BANK0 ] unsigned char 
 17333 ;;  pdata           2   43[BANK0 ] PTR unsigned char 
 17334 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17335 ;; Auto vars:     Size  Location     Type
 17336 ;;		None
 17337 ;; Return value:  Size  Location     Type
 17338 ;;                  1    wreg      unsigned char 
 17339 ;; Registers used:
 17340 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17341 ;; Tracked objects:
 17342 ;;		On entry : F/0
 17343 ;;		On exit  : E/0
 17344 ;;		Unchanged: 0/0
 17345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17346 ;;      Params:         0       7       0       0       0       0       0
 17347 ;;      Locals:         0       0       0       0       0       0       0
 17348 ;;      Temps:          0       0       0       0       0       0       0
 17349 ;;      Totals:         0       7       0       0       0       0       0
 17350 ;;Total ram usage:        7 bytes
 17351 ;; Hardware stack levels used:    1
 17352 ;; Hardware stack levels required when called:    5
 17353 ;; This function calls:
 17354 ;;		_ECANSendMessage
 17355 ;; This function is called by:
 17356 ;;		_doModeSLCAN
 17357 ;;		_receiveVSCPModeCanalMsg
 17358 ;;		_sendVSCPFrame
 17359 ;; This function uses a non-reentrant model
 17360 ;;
 17361                           
 17362                           	psect	text35
 17363  0055C8                     __ptext35:
 17364                           	opt stack 0
 17365  0055C8                     _sendCANFrame:
 17366                           	opt stack 24
 17367                           
 17368                           ; BSR set to: 0
 17369                           ;main.c: 3019: if (!ECANSendMessage(id, pdata, dlc, ECAN_TX_XTD_FRAME)) {
 17370                           
 17371                           ;incstack = 0
 17372                           ;incstack = 0
 17373  0055C8  C086  F061         	movff	sendCANFrame@id,?_ECANSendMessage
 17374  0055CC  C087  F062         	movff	sendCANFrame@id+1,?_ECANSendMessage+1
 17375  0055D0  C088  F063         	movff	sendCANFrame@id+2,?_ECANSendMessage+2
 17376  0055D4  C089  F064         	movff	sendCANFrame@id+3,?_ECANSendMessage+3
 17377  0055D8  C08B  F065         	movff	sendCANFrame@pdata,?_ECANSendMessage+4
 17378  0055DC  C08C  F066         	movff	sendCANFrame@pdata+1,?_ECANSendMessage+5
 17379  0055E0  C08A  F067         	movff	sendCANFrame@dlc,?_ECANSendMessage+6
 17380  0055E4  0E20               	movlw	32
 17381  0055E6  6F68               	movwf	(?_ECANSendMessage+7)& (0+255),b
 17382  0055E8  EC20  F01A         	call	_ECANSendMessage	;wreg free
 17383  0055EC  0900               	iorlw	0
 17384  0055EE  E107               	bnz	l15053
 17385                           
 17386                           ; BSR set to: 0
 17387                           ;main.c: 3021: can_transmitOverruns++;
 17388  0055F0  0101               	movlb	1	; () banked
 17389  0055F2  2B04               	incf	_can_transmitOverruns& (0+255),f,b
 17390  0055F4  0E00               	movlw	0
 17391  0055F6  2305               	addwfc	(_can_transmitOverruns+1)& (0+255),f,b
 17392  0055F8  2306               	addwfc	(_can_transmitOverruns+2)& (0+255),f,b
 17393  0055FA  2307               	addwfc	(_can_transmitOverruns+3)& (0+255),f,b
 17394                           
 17395                           ; BSR set to: 1
 17396                           ;main.c: 3022: return 0;
 17397  0055FC  D001               	goto	l1282
 17398  0055FE                     l15053:
 17399                           
 17400                           ; BSR set to: 0
 17401                           ;main.c: 3023: }
 17402                           ;main.c: 3025: return 1;
 17403  0055FE  0E01               	movlw	1
 17404  005600                     l1282:
 17405  005600  0012               	return	
 17406  005602                     __end_of_sendCANFrame:
 17407                           	opt stack 0
 17408                           tblptru	equ	0xFF8
 17409                           tblptrh	equ	0xFF7
 17410                           tblptrl	equ	0xFF6
 17411                           tablat	equ	0xFF5
 17412                           prodh	equ	0xFF4
 17413                           prodl	equ	0xFF3
 17414                           intcon	equ	0xFF2
 17415                           indf0	equ	0xFEF
 17416                           postinc0	equ	0xFEE
 17417                           fsr0h	equ	0xFEA
 17418                           fsr0l	equ	0xFE9
 17419                           wreg	equ	0xFE8
 17420                           indf1	equ	0xFE7
 17421                           postinc1	equ	0xFE6
 17422                           postdec1	equ	0xFE5
 17423                           fsr1h	equ	0xFE2
 17424                           fsr1l	equ	0xFE1
 17425                           indf2	equ	0xFDF
 17426                           postinc2	equ	0xFDE
 17427                           postdec2	equ	0xFDD
 17428                           plusw2	equ	0xFDB
 17429                           fsr2h	equ	0xFDA
 17430                           fsr2l	equ	0xFD9
 17431                           status	equ	0xFD8
 17432                           
 17433 ;; *************** function _ECANSendMessage *****************
 17434 ;; Defined at:
 17435 ;;		line 617 in file "ECAN.c"
 17436 ;; Parameters:    Size  Location     Type
 17437 ;;  id              4    1[BANK0 ] unsigned long 
 17438 ;;  data            2    5[BANK0 ] PTR unsigned char 
 17439 ;;		 -> receiveVSCPModeCanalMsg@data(8), vscpData(8), 
 17440 ;;  dataLen         1    7[BANK0 ] unsigned char 
 17441 ;;  msgFlags        1    8[BANK0 ] enum E16306
 17442 ;; Auto vars:     Size  Location     Type
 17443 ;;  pb             18   10[BANK0 ] PTR unsigned char [9]
 17444 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17445 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17446 ;;		 -> B0CON(1), 
 17447 ;;  ptr             2   36[BANK0 ] PTR unsigned char 
 17448 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17449 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17450 ;;		 -> B0CON(1), 
 17451 ;;  tempPtr         2   32[BANK0 ] PTR unsigned char 
 17452 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17453 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17454 ;;		 -> B0CON(1), 
 17455 ;;  i               1   35[BANK0 ] unsigned char 
 17456 ;;  temp            1   34[BANK0 ] unsigned char 
 17457 ;;  tempBSEL0       1   31[BANK0 ] struct .
 17458 ;;  j               1   30[BANK0 ] unsigned char 
 17459 ;;  buffers         1   29[BANK0 ] unsigned char 
 17460 ;;  mode            1   28[BANK0 ] unsigned char 
 17461 ;; Return value:  Size  Location     Type
 17462 ;;                  1    wreg      enum E15660
 17463 ;; Registers used:
 17464 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17465 ;; Tracked objects:
 17466 ;;		On entry : F/0
 17467 ;;		On exit  : F/0
 17468 ;;		Unchanged: 0/0
 17469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17470 ;;      Params:         0       8       0       0       0       0       0
 17471 ;;      Locals:         0      28       0       0       0       0       0
 17472 ;;      Temps:          0       1       0       0       0       0       0
 17473 ;;      Totals:         0      37       0       0       0       0       0
 17474 ;;Total ram usage:       37 bytes
 17475 ;; Hardware stack levels used:    1
 17476 ;; Hardware stack levels required when called:    4
 17477 ;; This function calls:
 17478 ;;		__CANIDToRegs
 17479 ;; This function is called by:
 17480 ;;		_sendCANFrame
 17481 ;; This function uses a non-reentrant model
 17482 ;;
 17483                           
 17484                           	psect	text36
 17485  003440                     __ptext36:
 17486                           	opt stack 0
 17487  003440                     _ECANSendMessage:
 17488                           	opt stack 24
 17489                           
 17490                           ; BSR set to: 0
 17491                           ;ECAN.c: 619: BYTE mode;
 17492                           ;ECAN.c: 620: BYTE buffers;
 17493                           ;ECAN.c: 628: BYTE i,j;
 17494                           ;ECAN.c: 629: BYTE *ptr, *tempPtr;
 17495                           ;ECAN.c: 630: BYTE* pb[9];
 17496                           ;ECAN.c: 631: BYTE temp;
 17497                           ;ECAN.c: 634: BYTE_VAL tempBSEL0;
 17498                           ;ECAN.c: 641: pb[0]=(BYTE*)&TXB0CON;
 17499                           
 17500                           ;incstack = 0
 17501                           ;incstack = 0
 17502  003440  0E0F               	movlw	15	;volatile
 17503  003442  0100               	movlb	0	; () banked
 17504  003444  6F6B               	movwf	(ECANSendMessage@pb+1)& (0+255),b
 17505  003446  0E40               	movlw	64	;volatile
 17506  003448  6F6A               	movwf	ECANSendMessage@pb& (0+255),b
 17507                           
 17508                           ;ECAN.c: 642: pb[1]=(BYTE*)&TXB1CON;
 17509  00344A  0E0F               	movlw	15	;volatile
 17510  00344C  6F6D               	movwf	(ECANSendMessage@pb+3)& (0+255),b
 17511  00344E  0E30               	movlw	48	;volatile
 17512  003450  6F6C               	movwf	(ECANSendMessage@pb+2)& (0+255),b
 17513                           
 17514                           ;ECAN.c: 643: pb[2]=(BYTE*)&TXB2CON;
 17515  003452  0E0F               	movlw	15	;volatile
 17516  003454  6F6F               	movwf	(ECANSendMessage@pb+5)& (0+255),b
 17517  003456  0E20               	movlw	32	;volatile
 17518  003458  6F6E               	movwf	(ECANSendMessage@pb+4)& (0+255),b
 17519                           
 17520                           ;ECAN.c: 650: pb[3]=(BYTE*)&B0CON;
 17521  00345A  0E0E               	movlw	14	;volatile
 17522  00345C  6F71               	movwf	(ECANSendMessage@pb+7)& (0+255),b
 17523  00345E  0E20               	movlw	32	;volatile
 17524  003460  6F70               	movwf	(ECANSendMessage@pb+6)& (0+255),b
 17525                           
 17526                           ;ECAN.c: 651: pb[4]=(BYTE*)&B1CON;
 17527  003462  0E0E               	movlw	14	;volatile
 17528  003464  6F73               	movwf	(ECANSendMessage@pb+9)& (0+255),b
 17529  003466  0E30               	movlw	48	;volatile
 17530  003468  6F72               	movwf	(ECANSendMessage@pb+8)& (0+255),b
 17531                           
 17532                           ;ECAN.c: 652: pb[5]=(BYTE*)&B2CON;
 17533  00346A  0E0E               	movlw	14	;volatile
 17534  00346C  6F75               	movwf	(ECANSendMessage@pb+11)& (0+255),b
 17535  00346E  0E40               	movlw	64	;volatile
 17536  003470  6F74               	movwf	(ECANSendMessage@pb+10)& (0+255),b
 17537                           
 17538                           ;ECAN.c: 653: pb[6]=(BYTE*)&B3CON;
 17539  003472  0E0E               	movlw	14	;volatile
 17540  003474  6F77               	movwf	(ECANSendMessage@pb+13)& (0+255),b
 17541  003476  0E50               	movlw	80	;volatile
 17542  003478  6F76               	movwf	(ECANSendMessage@pb+12)& (0+255),b
 17543                           
 17544                           ;ECAN.c: 654: pb[7]=(BYTE*)&B4CON;
 17545  00347A  0E0E               	movlw	14	;volatile
 17546  00347C  6F79               	movwf	(ECANSendMessage@pb+15)& (0+255),b
 17547  00347E  0E60               	movlw	96	;volatile
 17548  003480  6F78               	movwf	(ECANSendMessage@pb+14)& (0+255),b
 17549                           
 17550                           ;ECAN.c: 655: pb[8]=(BYTE*)&B5CON;
 17551  003482  0E0E               	movlw	14	;volatile
 17552  003484  6F7B               	movwf	(ECANSendMessage@pb+17)& (0+255),b
 17553  003486  0E70               	movlw	112	;volatile
 17554  003488  6F7A               	movwf	(ECANSendMessage@pb+16)& (0+255),b
 17555                           
 17556                           ; BSR set to: 0
 17557                           ;ECAN.c: 659: mode = ECANCON&0xC0;
 17558  00348A  5077               	movf	3959,w,c	;volatile
 17559  00348C  0BC0               	andlw	192
 17560  00348E  6F7C               	movwf	ECANSendMessage@mode& (0+255),b
 17561                           
 17562                           ; BSR set to: 0
 17563                           ;ECAN.c: 660: if ( mode == 0x00 )
 17564  003490  677C               	tstfsz	ECANSendMessage@mode& (0+255),b
 17565  003492  D002               	goto	l15193
 17566                           
 17567                           ; BSR set to: 0
 17568                           ;ECAN.c: 661: buffers = 2;
 17569  003494  0E02               	movlw	2
 17570  003496  D001               	goto	L15
 17571  003498                     l15193:
 17572                           
 17573                           ; BSR set to: 0
 17574                           ;ECAN.c: 662: else
 17575                           ;ECAN.c: 663: buffers = 8;
 17576  003498  0E08               	movlw	8
 17577  00349A                     L15:
 17578  00349A  6F7D               	movwf	ECANSendMessage@buffers& (0+255),b
 17579                           
 17580                           ; BSR set to: 0
 17581                           ;ECAN.c: 684: tempBSEL0.Val = BSEL0 >> 1;
 17582  00349C  010D               	movlb	13	; () banked
 17583  00349E  90D8               	bcf	status,0,c
 17584  0034A0  31F8               	rrcf	248,w,b	;volatile
 17585  0034A2  0100               	movlb	0	; () banked
 17586  0034A4  6F7F               	movwf	ECANSendMessage@tempBSEL0& (0+255),b
 17587                           
 17588                           ; BSR set to: 0
 17589                           ;ECAN.c: 686: for ( i = 0; i < buffers; i++ )
 17590  0034A6  6B83               	clrf	ECANSendMessage@i& (0+255),b
 17591  0034A8  D07D               	goto	l15253
 17592  0034AA                     l15199:
 17593                           
 17594                           ; BSR set to: 0
 17595                           ;ECAN.c: 688: {
 17596                           ;ECAN.c: 693: ptr = pb[i];
 17597  0034AA  5183               	movf	ECANSendMessage@i& (0+255),w,b
 17598  0034AC  0D02               	mullw	2
 17599  0034AE  50F3               	movf	prodl,w,c
 17600  0034B0  0F6A               	addlw	low ECANSendMessage@pb
 17601  0034B2  6ED9               	movwf	fsr2l,c
 17602  0034B4  6ADA               	clrf	fsr2h,c
 17603  0034B6  CFDE F084          	movff	postinc2,ECANSendMessage@ptr
 17604  0034BA  CFDD F085          	movff	postdec2,ECANSendMessage@ptr+1
 17605                           
 17606                           ; BSR set to: 0
 17607                           ;ECAN.c: 694: tempPtr = ptr;
 17608  0034BE  C084  F080         	movff	ECANSendMessage@ptr,ECANSendMessage@tempPtr
 17609  0034C2  C085  F081         	movff	ECANSendMessage@ptr+1,ECANSendMessage@tempPtr+1
 17610                           
 17611                           ; BSR set to: 0
 17612                           ;ECAN.c: 702: if ( i > 2 )
 17613  0034C6  0E02               	movlw	2
 17614  0034C8  6583               	cpfsgt	ECANSendMessage@i& (0+255),b
 17615  0034CA  D004               	goto	l15211
 17616                           
 17617                           ; BSR set to: 0
 17618                           ;ECAN.c: 703: {
 17619                           ;ECAN.c: 707: tempBSEL0.Val >>= 1;
 17620  0034CC  90D8               	bcf	status,0,c
 17621  0034CE  337F               	rrcf	ECANSendMessage@tempBSEL0& (0+255),f,b
 17622                           
 17623                           ; BSR set to: 0
 17624                           ;ECAN.c: 712: if ( !tempBSEL0.bits.b0 )
 17625  0034D0  A17F               	btfss	ECANSendMessage@tempBSEL0& (0+255),0,b
 17626  0034D2  D067               	goto	l15251
 17627  0034D4                     l15211:
 17628                           
 17629                           ; BSR set to: 0
 17630                           ;ECAN.c: 714: }
 17631                           ;ECAN.c: 720: if ( !(*ptr & 0x08) )
 17632  0034D4  C084  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17633  0034D8  C085  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17634  0034DC  50DF               	movf	indf2,w,c
 17635  0034DE  6F69               	movwf	??_ECANSendMessage& (0+255),b
 17636  0034E0  B769               	btfsc	??_ECANSendMessage& (0+255),3,b
 17637  0034E2  D05F               	goto	l15251
 17638                           
 17639                           ; BSR set to: 0
 17640                           ;ECAN.c: 721: {
 17641                           ;ECAN.c: 723: *ptr &= ~ECAN_TX_PRIORITY_BITS;
 17642  0034E4  C084  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17643  0034E8  C085  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17644  0034EC  0EFC               	movlw	252
 17645  0034EE  16DF               	andwf	indf2,f,c
 17646                           
 17647                           ; BSR set to: 0
 17648                           ;ECAN.c: 724: *ptr |= msgFlags & ECAN_TX_PRIORITY_BITS;
 17649  0034F0  C068  F069         	movff	ECANSendMessage@msgFlags,??_ECANSendMessage
 17650  0034F4  0E03               	movlw	3
 17651  0034F6  1769               	andwf	??_ECANSendMessage& (0+255),f,b
 17652  0034F8  C084  FFD9         	movff	ECANSendMessage@ptr,fsr2l
 17653  0034FC  C085  FFDA         	movff	ECANSendMessage@ptr+1,fsr2h
 17654  003500  5169               	movf	??_ECANSendMessage& (0+255),w,b
 17655  003502  12DF               	iorwf	indf2,f,c
 17656                           
 17657                           ; BSR set to: 0
 17658                           ;ECAN.c: 727: if ( msgFlags & ECAN_TX_RTR_BIT )
 17659  003504  AD68               	btfss	ECANSendMessage@msgFlags& (0+255),6,b
 17660  003506  D004               	goto	l1450
 17661                           
 17662                           ; BSR set to: 0
 17663                           ;ECAN.c: 728: temp = 0x40 | dataLen;
 17664  003508  5167               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17665  00350A  0940               	iorlw	64
 17666  00350C  6F82               	movwf	ECANSendMessage@temp& (0+255),b
 17667  00350E  D002               	goto	l15221
 17668  003510                     l1450:
 17669                           
 17670                           ; BSR set to: 0
 17671                           ;ECAN.c: 729: else
 17672                           ;ECAN.c: 730: temp = dataLen;
 17673  003510  C067  F082         	movff	ECANSendMessage@dataLen,ECANSendMessage@temp
 17674  003514                     l15221:
 17675                           
 17676                           ; BSR set to: 0
 17677                           ;ECAN.c: 732: *(ptr+5) = temp;
 17678  003514  EE20 F005          	lfsr	2,5
 17679  003518  5184               	movf	ECANSendMessage@ptr& (0+255),w,b
 17680  00351A  26D9               	addwf	fsr2l,f,c
 17681  00351C  5185               	movf	(ECANSendMessage@ptr+1)& (0+255),w,b
 17682  00351E  22DA               	addwfc	fsr2h,f,c
 17683  003520  C082  FFDF         	movff	ECANSendMessage@temp,indf2
 17684                           
 17685                           ; BSR set to: 0
 17686                           ;ECAN.c: 735: if ( msgFlags & ECAN_TX_FRAME_BIT )
 17687  003524  AB68               	btfss	ECANSendMessage@msgFlags& (0+255),5,b
 17688  003526  D003               	goto	l1452
 17689                           
 17690                           ; BSR set to: 0
 17691                           ;ECAN.c: 736: temp = 1;
 17692  003528  0E01               	movlw	1
 17693  00352A  6F82               	movwf	ECANSendMessage@temp& (0+255),b
 17694  00352C  D001               	goto	l15227
 17695  00352E                     l1452:
 17696                           
 17697                           ; BSR set to: 0
 17698                           ;ECAN.c: 738: else
 17699                           ;ECAN.c: 739: temp = 0;
 17700  00352E  6B82               	clrf	ECANSendMessage@temp& (0+255),b
 17701  003530                     l15227:
 17702                           
 17703                           ; BSR set to: 0
 17704                           ;ECAN.c: 742: _CANIDToRegs((BYTE*)(ptr+1), id, temp);
 17705  003530  2984               	incf	ECANSendMessage@ptr& (0+255),w,b
 17706  003532  6E1E               	movwf	?__CANIDToRegs,c
 17707  003534  0E00               	movlw	0
 17708  003536  2185               	addwfc	(ECANSendMessage@ptr+1)& (0+255),w,b
 17709  003538  6E1F               	movwf	?__CANIDToRegs+1,c
 17710  00353A  C061  F020         	movff	ECANSendMessage@id,?__CANIDToRegs+2
 17711  00353E  C062  F021         	movff	ECANSendMessage@id+1,?__CANIDToRegs+3
 17712  003542  C063  F022         	movff	ECANSendMessage@id+2,?__CANIDToRegs+4
 17713  003546  C064  F023         	movff	ECANSendMessage@id+3,?__CANIDToRegs+5
 17714  00354A  C082  F024         	movff	ECANSendMessage@temp,?__CANIDToRegs+6
 17715  00354E  ECA0  F01C         	call	__CANIDToRegs	;wreg free
 17716                           
 17717                           ; BSR set to: 0
 17718                           ;ECAN.c: 745: ptr += 6;
 17719  003552  0E06               	movlw	6
 17720  003554  2784               	addwf	ECANSendMessage@ptr& (0+255),f,b
 17721  003556  0E00               	movlw	0
 17722  003558  2385               	addwfc	(ECANSendMessage@ptr+1)& (0+255),f,b
 17723                           
 17724                           ; BSR set to: 0
 17725                           ;ECAN.c: 747: for ( j = 0 ; j < dataLen; j++ )
 17726  00355A  6B7E               	clrf	ECANSendMessage@j& (0+255),b
 17727  00355C  D00F               	goto	l15241
 17728  00355E                     l15233:
 17729                           
 17730                           ; BSR set to: 0
 17731                           ;ECAN.c: 748: *ptr++ = *data++;
 17732  00355E  C065  FFD9         	movff	ECANSendMessage@data,fsr2l
 17733  003562  C066  FFDA         	movff	ECANSendMessage@data+1,fsr2h
 17734  003566  C084  FFE1         	movff	ECANSendMessage@ptr,fsr1l
 17735  00356A  C085  FFE2         	movff	ECANSendMessage@ptr+1,fsr1h
 17736  00356E  CFDF FFE7          	movff	indf2,indf1
 17737                           
 17738                           ; BSR set to: 0
 17739  003572  4B65               	infsnz	ECANSendMessage@data& (0+255),f,b
 17740  003574  2B66               	incf	(ECANSendMessage@data+1)& (0+255),f,b
 17741                           
 17742                           ; BSR set to: 0
 17743  003576  4B84               	infsnz	ECANSendMessage@ptr& (0+255),f,b
 17744  003578  2B85               	incf	(ECANSendMessage@ptr+1)& (0+255),f,b
 17745                           
 17746                           ; BSR set to: 0
 17747  00357A  2B7E               	incf	ECANSendMessage@j& (0+255),f,b
 17748  00357C                     l15241:
 17749                           
 17750                           ; BSR set to: 0
 17751  00357C  5167               	movf	ECANSendMessage@dataLen& (0+255),w,b
 17752  00357E  5D7E               	subwf	ECANSendMessage@j& (0+255),w,b
 17753  003580  E3EE               	bnc	l15233
 17754                           
 17755                           ; BSR set to: 0
 17756                           ;ECAN.c: 752: if ( !(*tempPtr & 0x04) )
 17757  003582  C080  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17758  003586  C081  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17759  00358A  50DF               	movf	indf2,w,c
 17760  00358C  6F69               	movwf	??_ECANSendMessage& (0+255),b
 17761  00358E  B569               	btfsc	??_ECANSendMessage& (0+255),2,b
 17762  003590  D006               	goto	l15247
 17763                           
 17764                           ; BSR set to: 0
 17765                           ;ECAN.c: 753: *tempPtr |= 0x08;
 17766  003592  C080  FFD9         	movff	ECANSendMessage@tempPtr,fsr2l
 17767  003596  C081  FFDA         	movff	ECANSendMessage@tempPtr+1,fsr2h
 17768  00359A  0E00               	movlw	0
 17769  00359C  86DB               	bsf	plusw2,3,c
 17770  00359E                     l15247:
 17771                           
 17772                           ; BSR set to: 0
 17773                           ;ECAN.c: 755: return TRUE;
 17774  00359E  0E01               	movlw	1
 17775  0035A0  D005               	goto	l1458
 17776  0035A2                     l15251:
 17777                           
 17778                           ; BSR set to: 0
 17779  0035A2  2B83               	incf	ECANSendMessage@i& (0+255),f,b
 17780  0035A4                     l15253:
 17781                           
 17782                           ; BSR set to: 0
 17783  0035A4  517D               	movf	ECANSendMessage@buffers& (0+255),w,b
 17784  0035A6  5D83               	subwf	ECANSendMessage@i& (0+255),w,b
 17785  0035A8  E380               	bnc	l15199
 17786                           
 17787                           ; BSR set to: 0
 17788                           ;ECAN.c: 756: }
 17789                           ;ECAN.c: 757: }
 17790                           ;ECAN.c: 760: return FALSE;
 17791  0035AA  0E00               	movlw	0
 17792  0035AC                     l1458:
 17793                           
 17794                           ; BSR set to: 0
 17795  0035AC  0012               	return	
 17796  0035AE                     __end_of_ECANSendMessage:
 17797                           	opt stack 0
 17798                           tblptru	equ	0xFF8
 17799                           tblptrh	equ	0xFF7
 17800                           tblptrl	equ	0xFF6
 17801                           tablat	equ	0xFF5
 17802                           prodh	equ	0xFF4
 17803                           prodl	equ	0xFF3
 17804                           intcon	equ	0xFF2
 17805                           indf0	equ	0xFEF
 17806                           postinc0	equ	0xFEE
 17807                           fsr0h	equ	0xFEA
 17808                           fsr0l	equ	0xFE9
 17809                           wreg	equ	0xFE8
 17810                           indf1	equ	0xFE7
 17811                           postinc1	equ	0xFE6
 17812                           postdec1	equ	0xFE5
 17813                           fsr1h	equ	0xFE2
 17814                           fsr1l	equ	0xFE1
 17815                           indf2	equ	0xFDF
 17816                           postinc2	equ	0xFDE
 17817                           postdec2	equ	0xFDD
 17818                           plusw2	equ	0xFDB
 17819                           fsr2h	equ	0xFDA
 17820                           fsr2l	equ	0xFD9
 17821                           status	equ	0xFD8
 17822                           
 17823 ;; *************** function __CANIDToRegs *****************
 17824 ;; Defined at:
 17825 ;;		line 1101 in file "ECAN.c"
 17826 ;; Parameters:    Size  Location     Type
 17827 ;;  ptr             2   29[COMRAM] PTR unsigned char 
 17828 ;;		 -> TXB2CON(1), TXB1CON(1), TXB0CON(1), B5CON(1), 
 17829 ;;		 -> B4CON(1), B3CON(1), B2CON(1), B1CON(1), 
 17830 ;;		 -> B0CON(1), RXM1SIDH(1), RXM0SIDH(1), 
 17831 ;;  val             4   31[COMRAM] unsigned long 
 17832 ;;  type            1   35[COMRAM] unsigned char 
 17833 ;; Auto vars:     Size  Location     Type
 17834 ;;  Value           1    0[BANK0 ] PTR struct _CAN_MESSAGE_
 17835 ;;		 -> _CANIDToRegs@val(4), 
 17836 ;; Return value:  Size  Location     Type
 17837 ;;		None               void
 17838 ;; Registers used:
 17839 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 17840 ;; Tracked objects:
 17841 ;;		On entry : 0/F
 17842 ;;		On exit  : F/0
 17843 ;;		Unchanged: 0/0
 17844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 17845 ;;      Params:         7       0       0       0       0       0       0
 17846 ;;      Locals:         0       1       0       0       0       0       0
 17847 ;;      Temps:          2       0       0       0       0       0       0
 17848 ;;      Totals:         9       1       0       0       0       0       0
 17849 ;;Total ram usage:       10 bytes
 17850 ;; Hardware stack levels used:    1
 17851 ;; Hardware stack levels required when called:    3
 17852 ;; This function calls:
 17853 ;;		Nothing
 17854 ;; This function is called by:
 17855 ;;		_doModeVerbose
 17856 ;;		_ECANSendMessage
 17857 ;; This function uses a non-reentrant model
 17858 ;;
 17859                           
 17860                           	psect	text37
 17861  003940                     __ptext37:
 17862                           	opt stack 0
 17863  003940                     __CANIDToRegs:
 17864                           	opt stack 24
 17865                           
 17866                           ;ECAN.c: 1102: CAN_MESSAGE_ID *Value;
 17867                           ;ECAN.c: 1104: Value = (CAN_MESSAGE_ID*)&val;
 17868                           
 17869                           ; BSR set to: 0
 17870                           ;incstack = 0
 17871                           ;incstack = 0
 17872  003940  0E20               	movlw	low __CANIDToRegs@val
 17873  003942  0100               	movlb	0	; () banked
 17874  003944  6F60               	movwf	__CANIDToRegs@Value& (0+255),b
 17875                           
 17876                           ; BSR set to: 0
 17877                           ;ECAN.c: 1106: if ( type == 0 )
 17878  003946  6624               	tstfsz	__CANIDToRegs@type,c
 17879  003948  D022               	goto	l14639
 17880                           
 17881                           ; BSR set to: 0
 17882                           ;ECAN.c: 1107: {
 17883                           ;ECAN.c: 1109: *ptr = Value->BYTES.BYTE_1 >> 3;
 17884  00394A  5160               	movf	__CANIDToRegs@Value& (0+255),w,b
 17885  00394C  6ED9               	movwf	fsr2l,c
 17886  00394E  6ADA               	clrf	fsr2h,c
 17887  003950  50DF               	movf	indf2,w,c
 17888  003952  6E25               	movwf	??__CANIDToRegs& (0+255),c
 17889  003954  90D8               	bcf	status,0,c
 17890  003956  3225               	rrcf	??__CANIDToRegs,f,c
 17891  003958  90D8               	bcf	status,0,c
 17892  00395A  3225               	rrcf	??__CANIDToRegs,f,c
 17893  00395C  90D8               	bcf	status,0,c
 17894  00395E  3025               	rrcf	??__CANIDToRegs,w,c
 17895                           
 17896                           ;ECAN.c: 1110: *ptr |= (Value->BYTES.BYTE_2 << 5);
 17897  003960  D858               	call	PL46	;call to abstracted procedure
 17898  003962  2AD9               	incf	fsr2l,f,c
 17899  003964  6ADA               	clrf	fsr2h,c
 17900  003966  D871               	call	PL102	;call to abstracted procedure
 17901  003968                     u19835:
 17902  003968  90D8               	bcf	status,0,c
 17903  00396A  3625               	rlcf	??__CANIDToRegs,f,c
 17904  00396C  2E26               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 17905  00396E  D7FC               	goto	u19835
 17906  003970  C01E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17907                           
 17908                           ; BSR set to: 0
 17909                           ;ECAN.c: 1111: ptr++;
 17910                           
 17911                           ; BSR set to: 0
 17912                           ;ECAN.c: 1112: *ptr = Value->BYTES.BYTE_1 << 5;
 17913  003974  D844               	call	PL28	;call to abstracted procedure
 17914  003976  D869               	call	PL102	;call to abstracted procedure
 17915  003978                     u19845:
 17916  003978  90D8               	bcf	status,0,c
 17917  00397A  3625               	rlcf	??__CANIDToRegs,f,c
 17918  00397C  2E26               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 17919  00397E  D7FC               	goto	u19845
 17920  003980  5025               	movf	??__CANIDToRegs,w,c
 17921  003982  C01E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17922  003986  C01F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17923  00398A  6EDF               	movwf	indf2,c
 17924                           
 17925                           ;ECAN.c: 1113: }
 17926  00398C  D037               	goto	l1512
 17927  00398E                     l14639:
 17928                           
 17929                           ; BSR set to: 0
 17930                           ;ECAN.c: 1114: else
 17931                           ;ECAN.c: 1115: {
 17932                           ;ECAN.c: 1117: *ptr = Value->BYTES.BYTE_3 >> 5;
 17933  00398E  D854               	call	PL74	;call to abstracted procedure
 17934  003990  0E05               	movlw	5
 17935  003992  6E26               	movwf	(??__CANIDToRegs+1)& (0+255),c
 17936  003994                     u19855:
 17937  003994  90D8               	bcf	status,0,c
 17938  003996  3225               	rrcf	??__CANIDToRegs,f,c
 17939  003998  2E26               	decfsz	(??__CANIDToRegs+1)& (0+255),f,c
 17940  00399A  D7FC               	goto	u19855
 17941  00399C  5025               	movf	??__CANIDToRegs,w,c
 17942                           
 17943                           ;ECAN.c: 1118: *ptr |= Value->BYTES.BYTE_4 << 3;
 17944  00399E  D839               	call	PL46	;call to abstracted procedure
 17945  0039A0  0E03               	movlw	3
 17946  0039A2  D840               	call	PL60	;call to abstracted procedure
 17947  0039A4  3625               	rlcf	??__CANIDToRegs,f,c
 17948  0039A6  C01E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17949                           
 17950                           ; BSR set to: 0
 17951                           ;ECAN.c: 1119: ptr++;
 17952                           
 17953                           ; BSR set to: 0
 17954                           ;ECAN.c: 1120: *ptr = (Value->BYTES.BYTE_3 << 3) & 0xE0;
 17955  0039AA  D829               	call	PL28	;call to abstracted procedure
 17956  0039AC  0E02               	movlw	2
 17957  0039AE  D83A               	call	PL60	;call to abstracted procedure
 17958  0039B0  3425               	rlcf	??__CANIDToRegs,w,c
 17959  0039B2  0BE0               	andlw	224
 17960  0039B4  C01E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17961  0039B8  C01F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17962  0039BC  6EDF               	movwf	indf2,c
 17963                           
 17964                           ; BSR set to: 0
 17965                           ;ECAN.c: 1122: *ptr |= 0b00001000;
 17966  0039BE  C01E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17967  0039C2  C01F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 17968  0039C6  0E00               	movlw	0
 17969  0039C8  86DB               	bsf	plusw2,3,c
 17970                           
 17971                           ; BSR set to: 0
 17972                           ;ECAN.c: 1123: *ptr |= Value->BYTES.BYTE_3 & 0x03;
 17973  0039CA  D836               	call	PL74	;call to abstracted procedure
 17974  0039CC  0E03               	movlw	3
 17975  0039CE  1625               	andwf	??__CANIDToRegs,f,c
 17976  0039D0  C01E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 17977                           
 17978                           ;ECAN.c: 1124: ptr++;
 17979                           
 17980                           ; BSR set to: 0
 17981                           ;ECAN.c: 1125: *ptr = Value->BYTES.BYTE_2;
 17982  0039D4  D814               	call	PL28	;call to abstracted procedure
 17983  0039D6  2AD9               	incf	fsr2l,f,c
 17984  0039D8  6ADA               	clrf	fsr2h,c
 17985  0039DA  C01E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 17986  0039DE  C01F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 17987  0039E2  CFDF FFE7          	movff	indf2,indf1
 17988                           
 17989                           ; BSR set to: 0
 17990                           ;ECAN.c: 1126: ptr++;
 17991  0039E6  4A1E               	infsnz	__CANIDToRegs@ptr,f,c
 17992  0039E8  2A1F               	incf	__CANIDToRegs@ptr+1,f,c
 17993                           
 17994                           ; BSR set to: 0
 17995                           ;ECAN.c: 1127: *ptr = Value->BYTES.BYTE_1;
 17996  0039EA  5160               	movf	__CANIDToRegs@Value& (0+255),w,b
 17997  0039EC  6ED9               	movwf	fsr2l,c
 17998  0039EE  6ADA               	clrf	fsr2h,c
 17999  0039F0  C01E  FFE1         	movff	__CANIDToRegs@ptr,fsr1l
 18000  0039F4  C01F  FFE2         	movff	__CANIDToRegs@ptr+1,fsr1h
 18001  0039F8  CFDF FFE7          	movff	indf2,indf1
 18002  0039FC                     l1512:
 18003                           
 18004                           ; BSR set to: 0
 18005  0039FC  0012               	return	
 18006  0039FE                     __end_of__CANIDToRegs:
 18007                           	opt stack 0
 18008  0039FE                     PL28:
 18009                           	opt stack 24
 18010  0039FE  C01F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18011  003A02  5025               	movf	??__CANIDToRegs,w,c
 18012  003A04  12DF               	iorwf	indf2,f,c
 18013  003A06  4A1E               	infsnz	__CANIDToRegs@ptr,f,c
 18014  003A08  2A1F               	incf	__CANIDToRegs@ptr+1,f,c
 18015  003A0A  5160               	movf	__CANIDToRegs@Value& (0+255),w,b
 18016  003A0C  6ED9               	movwf	fsr2l,c
 18017  003A0E  6ADA               	clrf	fsr2h,c
 18018  003A10  0012               	return	
 18019  003A12                     __end_ofPL28:
 18020                           	opt stack 0
 18021  003A12                     PL46:
 18022                           	opt stack 24
 18023  003A12  C01E  FFD9         	movff	__CANIDToRegs@ptr,fsr2l
 18024  003A16  C01F  FFDA         	movff	__CANIDToRegs@ptr+1,fsr2h
 18025  003A1A  6EDF               	movwf	indf2,c
 18026  003A1C  5160               	movf	__CANIDToRegs@Value& (0+255),w,b
 18027  003A1E  6ED9               	movwf	fsr2l,c
 18028  003A20  6ADA               	clrf	fsr2h,c
 18029  003A22  0012               	return	
 18030  003A24                     __end_ofPL46:
 18031                           	opt stack 0
 18032  003A24                     PL60:
 18033                           	opt stack 24
 18034  003A24  26D9               	addwf	fsr2l,f,c
 18035  003A26  6ADA               	clrf	fsr2h,c
 18036  003A28  50DF               	movf	indf2,w,c
 18037  003A2A  6E25               	movwf	??__CANIDToRegs& (0+255),c
 18038  003A2C  90D8               	bcf	status,0,c
 18039  003A2E  3625               	rlcf	??__CANIDToRegs,f,c
 18040  003A30  90D8               	bcf	status,0,c
 18041  003A32  3625               	rlcf	??__CANIDToRegs,f,c
 18042  003A34  90D8               	bcf	status,0,c
 18043  003A36  0012               	return	
 18044  003A38                     __end_ofPL60:
 18045                           	opt stack 0
 18046  003A38                     PL74:
 18047                           	opt stack 24
 18048  003A38  5160               	movf	__CANIDToRegs@Value& (0+255),w,b
 18049  003A3A  6ED9               	movwf	fsr2l,c
 18050  003A3C  6ADA               	clrf	fsr2h,c
 18051  003A3E  0E02               	movlw	2
 18052  003A40  26D9               	addwf	fsr2l,f,c
 18053  003A42  6ADA               	clrf	fsr2h,c
 18054  003A44  50DF               	movf	indf2,w,c
 18055  003A46  6E25               	movwf	??__CANIDToRegs& (0+255),c
 18056  003A48  0012               	return	
 18057  003A4A                     __end_ofPL74:
 18058                           	opt stack 0
 18059  003A4A                     PL102:
 18060                           	opt stack 24
 18061  003A4A  50DF               	movf	indf2,w,c
 18062  003A4C  6E25               	movwf	??__CANIDToRegs& (0+255),c
 18063  003A4E  0E05               	movlw	5
 18064  003A50  6E26               	movwf	(??__CANIDToRegs+1)& (0+255),c
 18065  003A52  0C05               	retlw	5
 18066  003A54                     __end_ofPL102:
 18067                           	opt stack 0
 18068                           tblptru	equ	0xFF8
 18069                           tblptrh	equ	0xFF7
 18070                           tblptrl	equ	0xFF6
 18071                           tablat	equ	0xFF5
 18072                           prodh	equ	0xFF4
 18073                           prodl	equ	0xFF3
 18074                           intcon	equ	0xFF2
 18075                           indf0	equ	0xFEF
 18076                           postinc0	equ	0xFEE
 18077                           fsr0h	equ	0xFEA
 18078                           fsr0l	equ	0xFE9
 18079                           wreg	equ	0xFE8
 18080                           indf1	equ	0xFE7
 18081                           postinc1	equ	0xFE6
 18082                           postdec1	equ	0xFE5
 18083                           fsr1h	equ	0xFE2
 18084                           fsr1l	equ	0xFE1
 18085                           indf2	equ	0xFDF
 18086                           postinc2	equ	0xFDE
 18087                           postdec2	equ	0xFDD
 18088                           plusw2	equ	0xFDB
 18089                           fsr2h	equ	0xFDA
 18090                           fsr2l	equ	0xFD9
 18091                           status	equ	0xFD8
 18092                           
 18093 ;; *************** function _memset *****************
 18094 ;; Defined at:
 18095 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\memset.c"
 18096 ;; Parameters:    Size  Location     Type
 18097 ;;  p1              2   29[COMRAM] PTR void 
 18098 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18099 ;;  c               2   31[COMRAM] int 
 18100 ;;  n               2   33[COMRAM] unsigned int 
 18101 ;; Auto vars:     Size  Location     Type
 18102 ;;  p               2   35[COMRAM] PTR unsigned char 
 18103 ;;		 -> wrkbuf(80), vscpData(8), cmdbuf(80), 
 18104 ;; Return value:  Size  Location     Type
 18105 ;;                  2   29[COMRAM] PTR void 
 18106 ;; Registers used:
 18107 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18108 ;; Tracked objects:
 18109 ;;		On entry : F/1
 18110 ;;		On exit  : 0/0
 18111 ;;		Unchanged: 0/0
 18112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18113 ;;      Params:         6       0       0       0       0       0       0
 18114 ;;      Locals:         2       0       0       0       0       0       0
 18115 ;;      Temps:          0       0       0       0       0       0       0
 18116 ;;      Totals:         8       0       0       0       0       0       0
 18117 ;;Total ram usage:        8 bytes
 18118 ;; Hardware stack levels used:    1
 18119 ;; Hardware stack levels required when called:    3
 18120 ;; This function calls:
 18121 ;;		Nothing
 18122 ;; This function is called by:
 18123 ;;		_doModeVerbose
 18124 ;;		_doModeSLCAN
 18125 ;;		_printGUID
 18126 ;;		_printMDF
 18127 ;;		_printNodeFirmwareVersion
 18128 ;; This function uses a non-reentrant model
 18129 ;;
 18130                           
 18131                           	psect	text38
 18132  005736                     __ptext38:
 18133                           	opt stack 0
 18134  005736                     _memset:
 18135                           	opt stack 26
 18136                           
 18137                           ; BSR set to: 1
 18138                           
 18139                           ; BSR set to: 0
 18140                           ;incstack = 0
 18141                           ;incstack = 0
 18142  005736  C01E  F024         	movff	memset@p1,memset@p
 18143  00573A  C01F  F025         	movff	memset@p1+1,memset@p+1
 18144  00573E  D008               	goto	l11465
 18145  005740                     l11461:
 18146  005740  C024  FFD9         	movff	memset@p,fsr2l
 18147  005744  C025  FFDA         	movff	memset@p+1,fsr2h
 18148  005748  C020  FFDF         	movff	memset@c,indf2
 18149  00574C  4A24               	infsnz	memset@p,f,c
 18150  00574E  2A25               	incf	memset@p+1,f,c
 18151  005750                     l11465:
 18152  005750  0622               	decf	memset@n,f,c
 18153  005752  A0D8               	btfss	status,0,c
 18154  005754  0623               	decf	memset@n+1,f,c
 18155  005756  2822               	incf	memset@n& (0+255),w,c
 18156  005758  B4D8               	btfsc	status,2,c
 18157  00575A  2823               	incf	(memset@n+1)& (0+255),w,c
 18158  00575C  B4D8               	btfsc	status,2,c
 18159  00575E  0012               	return	
 18160  005760  D7EF               	goto	l11461
 18161  005762                     __end_of_memset:
 18162                           	opt stack 0
 18163                           tblptru	equ	0xFF8
 18164                           tblptrh	equ	0xFF7
 18165                           tblptrl	equ	0xFF6
 18166                           tablat	equ	0xFF5
 18167                           prodh	equ	0xFF4
 18168                           prodl	equ	0xFF3
 18169                           intcon	equ	0xFF2
 18170                           indf0	equ	0xFEF
 18171                           postinc0	equ	0xFEE
 18172                           fsr0h	equ	0xFEA
 18173                           fsr0l	equ	0xFE9
 18174                           wreg	equ	0xFE8
 18175                           indf1	equ	0xFE7
 18176                           postinc1	equ	0xFE6
 18177                           postdec1	equ	0xFE5
 18178                           fsr1h	equ	0xFE2
 18179                           fsr1l	equ	0xFE1
 18180                           indf2	equ	0xFDF
 18181                           postinc2	equ	0xFDE
 18182                           postdec2	equ	0xFDD
 18183                           plusw2	equ	0xFDB
 18184                           fsr2h	equ	0xFDA
 18185                           fsr2l	equ	0xFD9
 18186                           status	equ	0xFD8
 18187                           
 18188 ;; *************** function _printHelp *****************
 18189 ;; Defined at:
 18190 ;;		line 2595 in file "main.c"
 18191 ;; Parameters:    Size  Location     Type
 18192 ;;		None
 18193 ;; Auto vars:     Size  Location     Type
 18194 ;;		None
 18195 ;; Return value:  Size  Location     Type
 18196 ;;		None               void
 18197 ;; Registers used:
 18198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18199 ;; Tracked objects:
 18200 ;;		On entry : F/0
 18201 ;;		On exit  : 0/0
 18202 ;;		Unchanged: 0/0
 18203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18204 ;;      Params:         0       0       0       0       0       0       0
 18205 ;;      Locals:         0       0       0       0       0       0       0
 18206 ;;      Temps:          0       0       0       0       0       0       0
 18207 ;;      Totals:         0       0       0       0       0       0       0
 18208 ;;Total ram usage:        0 bytes
 18209 ;; Hardware stack levels used:    1
 18210 ;; Hardware stack levels required when called:    5
 18211 ;; This function calls:
 18212 ;;		_putsUSART
 18213 ;; This function is called by:
 18214 ;;		_doModeVerbose
 18215 ;; This function uses a non-reentrant model
 18216 ;;
 18217                           
 18218                           	psect	text39
 18219  003144                     __ptext39:
 18220                           	opt stack 0
 18221  003144                     _printHelp:
 18222                           	opt stack 24
 18223                           
 18224                           ; BSR set to: 0
 18225                           ;main.c: 2596: putsUSART((char *) "Help for the Frankfurt RS-232 module\r\n");
 18226                           
 18227                           ;incstack = 0
 18228                           ;incstack = 0
 18229  003144  0E78               	movlw	high STR_206
 18230  003146  6E20               	movwf	?_putsUSART+1,c
 18231  003148  0E49               	movlw	low STR_206
 18232  00314A  6E1F               	movwf	?_putsUSART,c
 18233  00314C  EC25  F029         	call	_putsUSART	;wreg free
 18234                           
 18235                           ;main.c: 2597: putsUSART((char *) "------------------------------------\r\n");
 18236  003150  0E71               	movlw	high (STR_238+28)
 18237  003152  6E20               	movwf	?_putsUSART+1,c
 18238  003154  0E6B               	movlw	low (STR_238+28)
 18239  003156  6E1F               	movwf	?_putsUSART,c
 18240  003158  EC25  F029         	call	_putsUSART	;wreg free
 18241                           
 18242                           ;main.c: 2598: putsUSART((char *) "BOOT - Enter bootloader.\r\n");
 18243  00315C  0E7B               	movlw	high STR_208
 18244  00315E  6E20               	movwf	?_putsUSART+1,c
 18245  003160  0E64               	movlw	low STR_208
 18246  003162  6E1F               	movwf	?_putsUSART,c
 18247  003164  EC25  F029         	call	_putsUSART	;wreg free
 18248                           
 18249                           ;main.c: 2599: putsUSART((char *) "OPEN - Open CAN interface in normal mode.\r\n");
 18250  003168  0E76               	movlw	high STR_209
 18251  00316A  6E20               	movwf	?_putsUSART+1,c
 18252  00316C  0ED8               	movlw	low STR_209
 18253  00316E  6E1F               	movwf	?_putsUSART,c
 18254  003170  EC25  F029         	call	_putsUSART	;wreg free
 18255                           
 18256                           ;main.c: 2600: putsUSART((char *) "SILENT - Open CAN interface in silent mode.\r\n");
 18257  003174  0E76               	movlw	high STR_210
 18258  003176  6E20               	movwf	?_putsUSART+1,c
 18259  003178  0E7E               	movlw	low STR_210
 18260  00317A  6E1F               	movwf	?_putsUSART,c
 18261  00317C  EC25  F029         	call	_putsUSART	;wreg free
 18262                           
 18263                           ;main.c: 2601: putsUSART((char *) "LISTEN - Open CAN interface in listen only mode.\r\n"
      +                          );
 18264  003180  0E74               	movlw	high STR_211
 18265  003182  6E20               	movwf	?_putsUSART+1,c
 18266  003184  0EF7               	movlw	low STR_211
 18267  003186  6E1F               	movwf	?_putsUSART,c
 18268  003188  EC25  F029         	call	_putsUSART	;wreg free
 18269                           
 18270                           ;main.c: 2602: putsUSART((char *) "LOOPBACK - Open CAN interface in loopback mode.\r\n");
 18271  00318C  0E75               	movlw	high STR_212
 18272  00318E  6E20               	movwf	?_putsUSART+1,c
 18273  003190  0E5C               	movlw	low STR_212
 18274  003192  6E1F               	movwf	?_putsUSART,c
 18275  003194  EC25  F029         	call	_putsUSART	;wreg free
 18276                           
 18277                           ;main.c: 2603: putsUSART((char *) "CLOSE - Close CAN interface.\r\n");
 18278  003198  0E7B               	movlw	high STR_213
 18279  00319A  6E20               	movwf	?_putsUSART+1,c
 18280  00319C  0E0C               	movlw	low STR_213
 18281  00319E  6E1F               	movwf	?_putsUSART,c
 18282  0031A0  EC25  F029         	call	_putsUSART	;wreg free
 18283                           
 18284                           ;main.c: 2604: putsUSART((char *) "VERSION - Display firmware version information.\r\n");
 18285  0031A4  0E75               	movlw	high STR_214
 18286  0031A6  6E20               	movwf	?_putsUSART+1,c
 18287  0031A8  0E8E               	movlw	low STR_214
 18288  0031AA  6E1F               	movwf	?_putsUSART,c
 18289  0031AC  EC25  F029         	call	_putsUSART	;wreg free
 18290                           
 18291                           ;main.c: 2605: putsUSART((char *) "IFMODE - Display selected interface mode.\r\n");
 18292  0031B0  0E76               	movlw	high STR_215
 18293  0031B2  6E20               	movwf	?_putsUSART+1,c
 18294  0031B4  0EAC               	movlw	low STR_215
 18295  0031B6  6E1F               	movwf	?_putsUSART,c
 18296  0031B8  EC25  F029         	call	_putsUSART	;wreg free
 18297                           
 18298                           ;main.c: 2606: putsUSART((char *) "TX - Send CAN frame .\r\n");
 18299  0031BC  0E7C               	movlw	high STR_216
 18300  0031BE  6E20               	movwf	?_putsUSART+1,c
 18301  0031C0  0E01               	movlw	low STR_216
 18302  0031C2  6E1F               	movwf	?_putsUSART,c
 18303  0031C4  EC25  F029         	call	_putsUSART	;wreg free
 18304                           
 18305                           ;main.c: 2607: putsUSART((char *) "     Format: priority,class,type,nodeid,count,data,,,
      +                          \r\n");
 18306  0031C8  0E73               	movlw	high STR_217
 18307  0031CA  6E20               	movwf	?_putsUSART+1,c
 18308  0031CC  0E45               	movlw	low STR_217
 18309  0031CE  6E1F               	movwf	?_putsUSART,c
 18310  0031D0  EC25  F029         	call	_putsUSART	;wreg free
 18311                           
 18312                           ;main.c: 2608: putsUSART((char *) "RX - Read CAN frame.\r\n");
 18313  0031D4  0E7C               	movlw	high STR_218
 18314  0031D6  6E20               	movwf	?_putsUSART+1,c
 18315  0031D8  0EC1               	movlw	low STR_218
 18316  0031DA  6E1F               	movwf	?_putsUSART,c
 18317  0031DC  EC25  F029         	call	_putsUSART	;wreg free
 18318                           
 18319                           ;main.c: 2609: putsUSART((char *) "STAT - Display CAN statistics.\r\n");
 18320  0031E0  0E7A               	movlw	high STR_219
 18321  0031E2  6E20               	movwf	?_putsUSART+1,c
 18322  0031E4  0E28               	movlw	low STR_219
 18323  0031E6  6E1F               	movwf	?_putsUSART,c
 18324  0031E8  EC25  F029         	call	_putsUSART	;wreg free
 18325                           
 18326                           ;main.c: 2610: putsUSART((char *) "ERR - Display CAN error information.\r\n");
 18327  0031EC  0E78               	movlw	high STR_220
 18328  0031EE  6E20               	movwf	?_putsUSART+1,c
 18329  0031F0  0E22               	movlw	low STR_220
 18330  0031F2  6E1F               	movwf	?_putsUSART,c
 18331  0031F4  EC25  F029         	call	_putsUSART	;wreg free
 18332                           
 18333                           ;main.c: 2611: putsUSART((char *) "HELP - Display this help information.\r\n");
 18334  0031F8  0E77               	movlw	high STR_221
 18335  0031FA  6E20               	movwf	?_putsUSART+1,c
 18336  0031FC  0E83               	movlw	low STR_221
 18337  0031FE  6E1F               	movwf	?_putsUSART,c
 18338  003200  EC25  F029         	call	_putsUSART	;wreg free
 18339                           
 18340                           ;main.c: 2612: putsUSART((char *) "FIND - Find available CAN4VSCP nodes on bus.\r\n");
 18341  003204  0E76               	movlw	high STR_222
 18342  003206  6E20               	movwf	?_putsUSART+1,c
 18343  003208  0E4F               	movlw	low STR_222
 18344  00320A  6E1F               	movwf	?_putsUSART,c
 18345  00320C  EC25  F029         	call	_putsUSART	;wreg free
 18346                           
 18347                           ;main.c: 2613: putsUSART((char *) "RREG - Read register(s) of node (Format: rreg [page:]
      +                          reg [count]).\r\n");
 18348  003210  0E71               	movlw	high STR_223
 18349  003212  6E20               	movwf	?_putsUSART+1,c
 18350  003214  0E0A               	movlw	low STR_223
 18351  003216  6E1F               	movwf	?_putsUSART,c
 18352  003218  EC25  F029         	call	_putsUSART	;wreg free
 18353                           
 18354                           ;main.c: 2614: putsUSART((char *) "WREG - Write register of node (Format: wreg [page:]re
      +                          g content).\r\n");
 18355  00321C  0E71               	movlw	high STR_224
 18356  00321E  6E20               	movwf	?_putsUSART+1,c
 18357  003220  0ED5               	movlw	low STR_224
 18358  003222  6E1F               	movwf	?_putsUSART,c
 18359  003224  EC25  F029         	call	_putsUSART	;wreg free
 18360                           
 18361                           ;main.c: 2615: putsUSART((char *) "INFO - Get info about an existent node on the bus (Fo
      +                          rmat: info nickname).\r\n");
 18362  003228  0E70               	movlw	high STR_225
 18363  00322A  6E20               	movwf	?_putsUSART+1,c
 18364  00322C  0E76               	movlw	low STR_225
 18365  00322E  6E1F               	movwf	?_putsUSART,c
 18366  003230  EC25  F029         	call	_putsUSART	;wreg free
 18367                           
 18368                           ;main.c: 2616: putsUSART((char *) "FILTER - Set filter .\r\n");
 18369  003234  0E7C               	movlw	high STR_226
 18370  003236  6E20               	movwf	?_putsUSART+1,c
 18371  003238  0E19               	movlw	low STR_226
 18372  00323A  6E1F               	movwf	?_putsUSART,c
 18373  00323C  EC25  F029         	call	_putsUSART	;wreg free
 18374                           
 18375                           ;main.c: 2617: putsUSART((char *) "         Format: filter filterno,prio,class,type,node
      +                          id  (filterno = 0-15).\r\n");
 18376  003240  0E70               	movlw	high STR_227
 18377  003242  6E20               	movwf	?_putsUSART+1,c
 18378  003244  0E28               	movlw	low STR_227
 18379  003246  6E1F               	movwf	?_putsUSART,c
 18380  003248  EC25  F029         	call	_putsUSART	;wreg free
 18381                           
 18382                           ;main.c: 2618: putsUSART((char *) "MASK - Set mask .\r\n");
 18383  00324C  0E7D               	movlw	high STR_228
 18384  00324E  6E20               	movwf	?_putsUSART+1,c
 18385  003250  0E47               	movlw	low STR_228
 18386  003252  6E1F               	movwf	?_putsUSART,c
 18387  003254  EC25  F029         	call	_putsUSART	;wreg free
 18388                           
 18389                           ;main.c: 2619: putsUSART((char *) "       Format: mask maskno,prio,class,type,nodeid (ma
      +                          skno = 0 or 1).\r\n");
 18390  003258  0E70               	movlw	high STR_229
 18391  00325A  6E20               	movwf	?_putsUSART+1,c
 18392  00325C  0EC3               	movlw	low STR_229
 18393  00325E  6E1F               	movwf	?_putsUSART,c
 18394  003260  EC25  F029         	call	_putsUSART	;wreg free
 18395                           
 18396                           ;main.c: 2620: putsUSART((char *) "SET - Persistent functionality.\r\n");
 18397  003264  0E79               	movlw	high STR_230
 18398  003266  6E20               	movwf	?_putsUSART+1,c
 18399  003268  0EE4               	movlw	low STR_230
 18400  00326A  6E1F               	movwf	?_putsUSART,c
 18401  00326C  EC25  F029         	call	_putsUSART	;wreg free
 18402                           
 18403                           ;main.c: 2621: putsUSART((char *) "    HEX - Display numericals in hexadecimal.\r\n");
 18404  003270  0E76               	movlw	high STR_231
 18405  003272  6E20               	movwf	?_putsUSART+1,c
 18406  003274  0E20               	movlw	low STR_231
 18407  003276  6E1F               	movwf	?_putsUSART,c
 18408  003278  EC25  F029         	call	_putsUSART	;wreg free
 18409                           
 18410                           ;main.c: 2622: putsUSART((char *) "    DECIMAL - Display numericals in decimal.\r\n");
 18411  00327C  0E75               	movlw	high STR_232
 18412  00327E  6E20               	movwf	?_putsUSART+1,c
 18413  003280  0EF1               	movlw	low STR_232
 18414  003282  6E1F               	movwf	?_putsUSART,c
 18415  003284  EC25  F029         	call	_putsUSART	;wreg free
 18416                           
 18417                           ;main.c: 2623: putsUSART((char *) "    RWTIMEOUT - Set register read/write timeout. Defa
      +                          ult=10 ms .\r\n");
 18418  003288  0E71               	movlw	high STR_233
 18419  00328A  6E20               	movwf	?_putsUSART+1,c
 18420  00328C  0E92               	movlw	low STR_233
 18421  00328E  6E1F               	movwf	?_putsUSART,c
 18422  003290  EC25  F029         	call	_putsUSART	;wreg free
 18423                           
 18424                           ;main.c: 2624: putsUSART((char *) "                Format: set rwtimeout timeout.\r\n");
 18425  003294  0E75               	movlw	high STR_234
 18426  003296  6E20               	movwf	?_putsUSART+1,c
 18427  003298  0EC0               	movlw	low STR_234
 18428  00329A  6E1F               	movwf	?_putsUSART,c
 18429  00329C  EC25  F029         	call	_putsUSART	;wreg free
 18430                           
 18431                           ;main.c: 2625: putsUSART((char *) "    STARTIF - Set interface state to use on startup.\
      +                          r\n");
 18432  0032A0  0E73               	movlw	high STR_235
 18433  0032A2  6E20               	movwf	?_putsUSART+1,c
 18434  0032A4  0EB4               	movlw	low STR_235
 18435  0032A6  6E1F               	movwf	?_putsUSART,c
 18436  0032A8  EC25  F029         	call	_putsUSART	;wreg free
 18437                           
 18438                           ;main.c: 2626: putsUSART((char *) "    MODE - Set adapter mode that should be used on st
      +                          artup.\r\n");
 18439  0032AC  0E72               	movlw	high STR_236
 18440  0032AE  6E20               	movwf	?_putsUSART+1,c
 18441  0032B0  0E5A               	movlw	low STR_236
 18442  0032B2  6E1F               	movwf	?_putsUSART,c
 18443  0032B4  EC25  F029         	call	_putsUSART	;wreg free
 18444                           
 18445                           ;main.c: 2627: putsUSART((char *) "           Modes: verbose|vscp|slcan\r\n");
 18446  0032B8  0E78               	movlw	high STR_237
 18447  0032BA  6E20               	movwf	?_putsUSART+1,c
 18448  0032BC  0EBE               	movlw	low STR_237
 18449  0032BE  6E1F               	movwf	?_putsUSART,c
 18450  0032C0  EF25  F029         	goto	_putsUSART	;wreg free
 18451  0032C4                     __end_of_printHelp:
 18452                           	opt stack 0
 18453                           tblptru	equ	0xFF8
 18454                           tblptrh	equ	0xFF7
 18455                           tblptrl	equ	0xFF6
 18456                           tablat	equ	0xFF5
 18457                           prodh	equ	0xFF4
 18458                           prodl	equ	0xFF3
 18459                           intcon	equ	0xFF2
 18460                           indf0	equ	0xFEF
 18461                           postinc0	equ	0xFEE
 18462                           fsr0h	equ	0xFEA
 18463                           fsr0l	equ	0xFE9
 18464                           wreg	equ	0xFE8
 18465                           indf1	equ	0xFE7
 18466                           postinc1	equ	0xFE6
 18467                           postdec1	equ	0xFE5
 18468                           fsr1h	equ	0xFE2
 18469                           fsr1l	equ	0xFE1
 18470                           indf2	equ	0xFDF
 18471                           postinc2	equ	0xFDE
 18472                           postdec2	equ	0xFDD
 18473                           plusw2	equ	0xFDB
 18474                           fsr2h	equ	0xFDA
 18475                           fsr2l	equ	0xFD9
 18476                           status	equ	0xFD8
 18477                           
 18478 ;; *************** function _printErrors *****************
 18479 ;; Defined at:
 18480 ;;		line 2531 in file "main.c"
 18481 ;; Parameters:    Size  Location     Type
 18482 ;;		None
 18483 ;; Auto vars:     Size  Location     Type
 18484 ;;		None
 18485 ;; Return value:  Size  Location     Type
 18486 ;;		None               void
 18487 ;; Registers used:
 18488 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18489 ;; Tracked objects:
 18490 ;;		On entry : F/0
 18491 ;;		On exit  : 0/0
 18492 ;;		Unchanged: 0/0
 18493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18494 ;;      Params:         0       0       0       0       0       0       0
 18495 ;;      Locals:         0      12       0       0       0       0       0
 18496 ;;      Temps:          0       0       0       0       0       0       0
 18497 ;;      Totals:         0      12       0       0       0       0       0
 18498 ;;Total ram usage:       12 bytes
 18499 ;; Hardware stack levels used:    1
 18500 ;; Hardware stack levels required when called:    5
 18501 ;; This function calls:
 18502 ;;		_putsUSART
 18503 ;;		_sprintf
 18504 ;; This function is called by:
 18505 ;;		_doModeVerbose
 18506 ;; This function uses a non-reentrant model
 18507 ;;
 18508                           
 18509                           	psect	text40
 18510  0021CE                     __ptext40:
 18511                           	opt stack 0
 18512  0021CE                     _printErrors:
 18513                           	opt stack 24
 18514                           
 18515                           ; BSR set to: 0
 18516                           ;main.c: 2532: putsUSART((char *) "CAN Receive overruns: ");
 18517                           
 18518                           ;incstack = 0
 18519                           ;incstack = 0
 18520  0021CE  0E7C               	movlw	high STR_176
 18521  0021D0  6E20               	movwf	?_putsUSART+1,c
 18522  0021D2  0ED8               	movlw	low STR_176
 18523  0021D4  6E1F               	movwf	?_putsUSART,c
 18524  0021D6  EC25  F029         	call	_putsUSART	;wreg free
 18525                           
 18526                           ;main.c: 2533: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_receiveOverruns);
 18527  0021DA  0100               	movlb	0	; () banked
 18528  0021DC  67DC               	tstfsz	_bHex& (0+255),b
 18529  0021DE  D004               	goto	l11541
 18530                           
 18531                           ; BSR set to: 0
 18532  0021E0  0E7F               	movlw	high STR_162
 18533  0021E2  6F8C               	movwf	(_printErrors$1396+1)& (0+255),b
 18534  0021E4  0EE1               	movlw	low STR_162
 18535  0021E6  D003               	goto	L16
 18536  0021E8                     l11541:
 18537                           
 18538                           ; BSR set to: 0
 18539  0021E8  0E7F               	movlw	high STR_177
 18540  0021EA  6F8C               	movwf	(_printErrors$1396+1)& (0+255),b
 18541  0021EC  0E16               	movlw	low STR_177
 18542  0021EE                     L16:
 18543  0021EE  6F8B               	movwf	_printErrors$1396& (0+255),b
 18544                           
 18545                           ; BSR set to: 0
 18546  0021F0  0E01               	movlw	high _wrkbuf
 18547  0021F2  0100               	movlb	0	; () banked
 18548  0021F4  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 18549  0021F6  0E74               	movlw	low _wrkbuf
 18550  0021F8  6F6D               	movwf	?_sprintf& (0+255),b
 18551  0021FA  C08B  F06F         	movff	_printErrors$1396,?_sprintf+2
 18552  0021FE  C08C  F070         	movff	_printErrors$1396+1,?_sprintf+3
 18553  002202  C100  F071         	movff	_can_receiveOverruns,?_sprintf+4
 18554  002206  C101  F072         	movff	_can_receiveOverruns+1,?_sprintf+5
 18555  00220A  C102  F073         	movff	_can_receiveOverruns+2,?_sprintf+6
 18556  00220E  C103  F074         	movff	_can_receiveOverruns+3,?_sprintf+7
 18557  002212  EC55  F00B         	call	_sprintf	;wreg free
 18558                           
 18559                           ; BSR set to: 0
 18560                           ;main.c: 2534: putsUSART(wrkbuf);
 18561  002216  0101               	movlb	1	; () banked
 18562  002218  0E01               	movlw	high _wrkbuf
 18563  00221A  6E20               	movwf	?_putsUSART+1,c
 18564  00221C  0E74               	movlw	low _wrkbuf
 18565  00221E  6E1F               	movwf	?_putsUSART,c
 18566  002220  EC25  F029         	call	_putsUSART	;wreg free
 18567                           
 18568                           ;main.c: 2535: putsUSART((char *) "\r\n");
 18569  002224  0E74               	movlw	high (STR_197+50)
 18570  002226  6E20               	movwf	?_putsUSART+1,c
 18571  002228  0EC0               	movlw	low (STR_197+50)
 18572  00222A  6E1F               	movwf	?_putsUSART,c
 18573  00222C  EC25  F029         	call	_putsUSART	;wreg free
 18574                           
 18575                           ;main.c: 2537: putsUSART((char *) "CAN Transmit overruns: ");
 18576  002230  0E7C               	movlw	high STR_180
 18577  002232  6E20               	movwf	?_putsUSART+1,c
 18578  002234  0EA9               	movlw	low STR_180
 18579  002236  6E1F               	movwf	?_putsUSART,c
 18580  002238  EC25  F029         	call	_putsUSART	;wreg free
 18581                           
 18582                           ;main.c: 2538: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", can_transmitOverruns);
 18583  00223C  0100               	movlb	0	; () banked
 18584  00223E  67DC               	tstfsz	_bHex& (0+255),b
 18585  002240  D004               	goto	l11555
 18586                           
 18587                           ; BSR set to: 0
 18588  002242  0E7F               	movlw	high STR_162
 18589  002244  6F8E               	movwf	(_printErrors$1402+1)& (0+255),b
 18590  002246  0EE1               	movlw	low STR_162
 18591  002248  D003               	goto	L17
 18592  00224A                     l11555:
 18593                           
 18594                           ; BSR set to: 0
 18595  00224A  0E7F               	movlw	high STR_177
 18596  00224C  6F8E               	movwf	(_printErrors$1402+1)& (0+255),b
 18597  00224E  0E16               	movlw	low STR_177
 18598  002250                     L17:
 18599  002250  6F8D               	movwf	_printErrors$1402& (0+255),b
 18600                           
 18601                           ; BSR set to: 0
 18602  002252  0E01               	movlw	high _wrkbuf
 18603  002254  0100               	movlb	0	; () banked
 18604  002256  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 18605  002258  0E74               	movlw	low _wrkbuf
 18606  00225A  6F6D               	movwf	?_sprintf& (0+255),b
 18607  00225C  C08D  F06F         	movff	_printErrors$1402,?_sprintf+2
 18608  002260  C08E  F070         	movff	_printErrors$1402+1,?_sprintf+3
 18609  002264  C104  F071         	movff	_can_transmitOverruns,?_sprintf+4
 18610  002268  C105  F072         	movff	_can_transmitOverruns+1,?_sprintf+5
 18611  00226C  C106  F073         	movff	_can_transmitOverruns+2,?_sprintf+6
 18612  002270  C107  F074         	movff	_can_transmitOverruns+3,?_sprintf+7
 18613  002274  EC55  F00B         	call	_sprintf	;wreg free
 18614                           
 18615                           ; BSR set to: 0
 18616                           ;main.c: 2539: putsUSART(wrkbuf);
 18617  002278  0101               	movlb	1	; () banked
 18618  00227A  0E01               	movlw	high _wrkbuf
 18619  00227C  6E20               	movwf	?_putsUSART+1,c
 18620  00227E  0E74               	movlw	low _wrkbuf
 18621  002280  6E1F               	movwf	?_putsUSART,c
 18622  002282  EC25  F029         	call	_putsUSART	;wreg free
 18623                           
 18624                           ;main.c: 2540: putsUSART((char *) "\r\n");
 18625  002286  0E74               	movlw	high (STR_197+50)
 18626  002288  6E20               	movwf	?_putsUSART+1,c
 18627  00228A  0EC0               	movlw	low (STR_197+50)
 18628  00228C  6E1F               	movwf	?_putsUSART,c
 18629  00228E  EC25  F029         	call	_putsUSART	;wreg free
 18630                           
 18631                           ;main.c: 2542: putsUSART((char *) "UART Receive overruns: ");
 18632  002292  0E7C               	movlw	high STR_184
 18633  002294  6E20               	movwf	?_putsUSART+1,c
 18634  002296  0E91               	movlw	low STR_184
 18635  002298  6E1F               	movwf	?_putsUSART,c
 18636  00229A  EC25  F029         	call	_putsUSART	;wreg free
 18637                           
 18638                           ;main.c: 2543: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_receiveOverruns);
 18639  00229E  0100               	movlb	0	; () banked
 18640  0022A0  67DC               	tstfsz	_bHex& (0+255),b
 18641  0022A2  D004               	goto	l11569
 18642                           
 18643                           ; BSR set to: 0
 18644  0022A4  0E7F               	movlw	high STR_162
 18645  0022A6  6F90               	movwf	(_printErrors$1408+1)& (0+255),b
 18646  0022A8  0EE1               	movlw	low STR_162
 18647  0022AA  D003               	goto	L18
 18648  0022AC                     l11569:
 18649                           
 18650                           ; BSR set to: 0
 18651  0022AC  0E7F               	movlw	high STR_177
 18652  0022AE  6F90               	movwf	(_printErrors$1408+1)& (0+255),b
 18653  0022B0  0E16               	movlw	low STR_177
 18654  0022B2                     L18:
 18655  0022B2  6F8F               	movwf	_printErrors$1408& (0+255),b
 18656                           
 18657                           ; BSR set to: 0
 18658  0022B4  0E01               	movlw	high _wrkbuf
 18659  0022B6  0100               	movlb	0	; () banked
 18660  0022B8  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 18661  0022BA  0E74               	movlw	low _wrkbuf
 18662  0022BC  6F6D               	movwf	?_sprintf& (0+255),b
 18663  0022BE  C08F  F06F         	movff	_printErrors$1408,?_sprintf+2
 18664  0022C2  C090  F070         	movff	_printErrors$1408+1,?_sprintf+3
 18665  0022C6  C11C  F071         	movff	_uart_receiveOverruns,?_sprintf+4
 18666  0022CA  C11D  F072         	movff	_uart_receiveOverruns+1,?_sprintf+5
 18667  0022CE  C11E  F073         	movff	_uart_receiveOverruns+2,?_sprintf+6
 18668  0022D2  C11F  F074         	movff	_uart_receiveOverruns+3,?_sprintf+7
 18669  0022D6  EC55  F00B         	call	_sprintf	;wreg free
 18670                           
 18671                           ; BSR set to: 0
 18672                           ;main.c: 2544: putsUSART(wrkbuf);
 18673  0022DA  0101               	movlb	1	; () banked
 18674  0022DC  0E01               	movlw	high _wrkbuf
 18675  0022DE  6E20               	movwf	?_putsUSART+1,c
 18676  0022E0  0E74               	movlw	low _wrkbuf
 18677  0022E2  6E1F               	movwf	?_putsUSART,c
 18678  0022E4  EC25  F029         	call	_putsUSART	;wreg free
 18679                           
 18680                           ;main.c: 2545: putsUSART((char *) "\r\n");
 18681  0022E8  0E74               	movlw	high (STR_197+50)
 18682  0022EA  6E20               	movwf	?_putsUSART+1,c
 18683  0022EC  0EC0               	movlw	low (STR_197+50)
 18684  0022EE  6E1F               	movwf	?_putsUSART,c
 18685  0022F0  EC25  F029         	call	_putsUSART	;wreg free
 18686                           
 18687                           ;main.c: 2547: putsUSART((char *) "UART Receive overruns: ");
 18688  0022F4  0E7C               	movlw	high STR_184
 18689  0022F6  6E20               	movwf	?_putsUSART+1,c
 18690  0022F8  0E91               	movlw	low STR_184
 18691  0022FA  6E1F               	movwf	?_putsUSART,c
 18692  0022FC  EC25  F029         	call	_putsUSART	;wreg free
 18693                           
 18694                           ;main.c: 2548: sprintf(wrkbuf, bHex ? "0x%08lX" : "%lu", uart_transmitOverruns);
 18695  002300  0100               	movlb	0	; () banked
 18696  002302  67DC               	tstfsz	_bHex& (0+255),b
 18697  002304  D004               	goto	l11583
 18698                           
 18699                           ; BSR set to: 0
 18700  002306  0E7F               	movlw	high STR_162
 18701  002308  6F92               	movwf	(_printErrors$1414+1)& (0+255),b
 18702  00230A  0EE1               	movlw	low STR_162
 18703  00230C  D003               	goto	L19
 18704  00230E                     l11583:
 18705                           
 18706                           ; BSR set to: 0
 18707  00230E  0E7F               	movlw	high STR_177
 18708  002310  6F92               	movwf	(_printErrors$1414+1)& (0+255),b
 18709  002312  0E16               	movlw	low STR_177
 18710  002314                     L19:
 18711  002314  6F91               	movwf	_printErrors$1414& (0+255),b
 18712                           
 18713                           ; BSR set to: 0
 18714  002316  0E01               	movlw	high _wrkbuf
 18715  002318  0100               	movlb	0	; () banked
 18716  00231A  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 18717  00231C  0E74               	movlw	low _wrkbuf
 18718  00231E  6F6D               	movwf	?_sprintf& (0+255),b
 18719  002320  C091  F06F         	movff	_printErrors$1414,?_sprintf+2
 18720  002324  C092  F070         	movff	_printErrors$1414+1,?_sprintf+3
 18721  002328  C120  F071         	movff	_uart_transmitOverruns,?_sprintf+4
 18722  00232C  C121  F072         	movff	_uart_transmitOverruns+1,?_sprintf+5
 18723  002330  C122  F073         	movff	_uart_transmitOverruns+2,?_sprintf+6
 18724  002334  C123  F074         	movff	_uart_transmitOverruns+3,?_sprintf+7
 18725  002338  EC55  F00B         	call	_sprintf	;wreg free
 18726                           
 18727                           ; BSR set to: 0
 18728                           ;main.c: 2549: putsUSART(wrkbuf);
 18729  00233C  0101               	movlb	1	; () banked
 18730  00233E  0E01               	movlw	high _wrkbuf
 18731  002340  6E20               	movwf	?_putsUSART+1,c
 18732  002342  0E74               	movlw	low _wrkbuf
 18733  002344  6E1F               	movwf	?_putsUSART,c
 18734  002346  EC25  F029         	call	_putsUSART	;wreg free
 18735                           
 18736                           ;main.c: 2550: putsUSART((char *) "\r\n");
 18737  00234A  0E74               	movlw	high (STR_197+50)
 18738  00234C  6E20               	movwf	?_putsUSART+1,c
 18739  00234E  0EC0               	movlw	low (STR_197+50)
 18740  002350  6E1F               	movwf	?_putsUSART,c
 18741  002352  EC25  F029         	call	_putsUSART	;wreg free
 18742                           
 18743                           ;main.c: 2552: putsUSART((char *) "Transmit Error Counter: ");
 18744  002356  0E7B               	movlw	high STR_192
 18745  002358  6E20               	movwf	?_putsUSART+1,c
 18746  00235A  0EE8               	movlw	low STR_192
 18747  00235C  6E1F               	movwf	?_putsUSART,c
 18748  00235E  EC25  F029         	call	_putsUSART	;wreg free
 18749                           
 18750                           ;main.c: 2553: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", TXERRCNT);
 18751  002362  0100               	movlb	0	; () banked
 18752  002364  67DC               	tstfsz	_bHex& (0+255),b
 18753  002366  D004               	goto	l11597
 18754                           
 18755                           ; BSR set to: 0
 18756  002368  0E7F               	movlw	high STR_57
 18757  00236A  6F94               	movwf	(_printErrors$1420+1)& (0+255),b
 18758  00236C  0EEE               	movlw	low STR_57
 18759  00236E  D003               	goto	L20
 18760  002370                     l11597:
 18761                           
 18762                           ; BSR set to: 0
 18763  002370  0E7F               	movlw	high STR_56
 18764  002372  6F94               	movwf	(_printErrors$1420+1)& (0+255),b
 18765  002374  0E65               	movlw	low STR_56
 18766  002376                     L20:
 18767  002376  6F93               	movwf	_printErrors$1420& (0+255),b
 18768                           
 18769                           ; BSR set to: 0
 18770  002378  0E01               	movlw	high _wrkbuf
 18771  00237A  0100               	movlb	0	; () banked
 18772  00237C  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 18773  00237E  0E74               	movlw	low _wrkbuf
 18774  002380  6F6D               	movwf	?_sprintf& (0+255),b
 18775  002382  C093  F06F         	movff	_printErrors$1420,?_sprintf+2
 18776  002386  C094  F070         	movff	_printErrors$1420+1,?_sprintf+3
 18777  00238A  CF76 F071          	movff	3958,?_sprintf+4	;volatile
 18778  00238E  6B72               	clrf	(?_sprintf+5)& (0+255),b
 18779  002390  EC55  F00B         	call	_sprintf	;wreg free
 18780                           
 18781                           ; BSR set to: 0
 18782                           ;main.c: 2554: putsUSART(wrkbuf);
 18783  002394  0101               	movlb	1	; () banked
 18784  002396  0E01               	movlw	high _wrkbuf
 18785  002398  6E20               	movwf	?_putsUSART+1,c
 18786  00239A  0E74               	movlw	low _wrkbuf
 18787  00239C  6E1F               	movwf	?_putsUSART,c
 18788  00239E  EC25  F029         	call	_putsUSART	;wreg free
 18789                           
 18790                           ;main.c: 2555: putsUSART((char *) "\r\n");
 18791  0023A2  0E74               	movlw	high (STR_197+50)
 18792  0023A4  6E20               	movwf	?_putsUSART+1,c
 18793  0023A6  0EC0               	movlw	low (STR_197+50)
 18794  0023A8  6E1F               	movwf	?_putsUSART,c
 18795  0023AA  EC25  F029         	call	_putsUSART	;wreg free
 18796                           
 18797                           ;main.c: 2557: if (COMSTATbits.TXWARN) {
 18798  0023AE  A474               	btfss	3956,2,c	;volatile
 18799  0023B0  D006               	goto	l11609
 18800                           
 18801                           ;main.c: 2558: putsUSART((char *) "Transmitter in Error State Warning (128 > TERRCNT ? 9
      +                          6)\r\n");
 18802  0023B2  0E72               	movlw	high STR_196
 18803  0023B4  6E20               	movwf	?_putsUSART+1,c
 18804  0023B6  0E98               	movlw	low STR_196
 18805  0023B8  6E1F               	movwf	?_putsUSART,c
 18806  0023BA  EC25  F029         	call	_putsUSART	;wreg free
 18807  0023BE                     l11609:
 18808                           
 18809                           ;main.c: 2559: }
 18810                           ;main.c: 2561: if (COMSTATbits.TXBO) {
 18811  0023BE  AA74               	btfss	3956,5,c	;volatile
 18812  0023C0  D006               	goto	l11613
 18813                           
 18814                           ;main.c: 2562: putsUSART((char *) "Transmitter in Error State Bus OFF (TERRCNT ? 256)\r\
      +                          n");
 18815  0023C2  0E74               	movlw	high STR_197
 18816  0023C4  6E20               	movwf	?_putsUSART+1,c
 18817  0023C6  0E8E               	movlw	low STR_197
 18818  0023C8  6E1F               	movwf	?_putsUSART,c
 18819  0023CA  EC25  F029         	call	_putsUSART	;wreg free
 18820  0023CE                     l11613:
 18821                           
 18822                           ;main.c: 2563: }
 18823                           ;main.c: 2565: if (COMSTATbits.TXBP) {
 18824  0023CE  A874               	btfss	3956,4,c	;volatile
 18825  0023D0  D006               	goto	l1180
 18826                           
 18827                           ;main.c: 2566: putsUSART((char *) "Transmitter in Error State Bus Passive (TERRCNT ? 128
      +                          )\r\n");
 18828  0023D2  0E73               	movlw	high STR_198
 18829  0023D4  6E20               	movwf	?_putsUSART+1,c
 18830  0023D6  0E0C               	movlw	low STR_198
 18831  0023D8  6E1F               	movwf	?_putsUSART,c
 18832  0023DA  EC25  F029         	call	_putsUSART	;wreg free
 18833  0023DE                     l1180:
 18834                           
 18835                           ;main.c: 2567: }
 18836                           ;main.c: 2570: putsUSART((char *) "Receive Error Counter: ");
 18837  0023DE  0E7C               	movlw	high STR_199
 18838  0023E0  6E20               	movwf	?_putsUSART+1,c
 18839  0023E2  0E79               	movlw	low STR_199
 18840  0023E4  6E1F               	movwf	?_putsUSART,c
 18841  0023E6  EC25  F029         	call	_putsUSART	;wreg free
 18842                           
 18843                           ;main.c: 2571: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", RXERRCNT);
 18844  0023EA  0100               	movlb	0	; () banked
 18845  0023EC  67DC               	tstfsz	_bHex& (0+255),b
 18846  0023EE  D004               	goto	l11621
 18847                           
 18848                           ; BSR set to: 0
 18849  0023F0  0E7F               	movlw	high STR_57
 18850  0023F2  6F96               	movwf	(_printErrors$1429+1)& (0+255),b
 18851  0023F4  0EEE               	movlw	low STR_57
 18852  0023F6  D003               	goto	L21
 18853  0023F8                     l11621:
 18854                           
 18855                           ; BSR set to: 0
 18856  0023F8  0E7F               	movlw	high STR_56
 18857  0023FA  6F96               	movwf	(_printErrors$1429+1)& (0+255),b
 18858  0023FC  0E65               	movlw	low STR_56
 18859  0023FE                     L21:
 18860  0023FE  6F95               	movwf	_printErrors$1429& (0+255),b
 18861                           
 18862                           ; BSR set to: 0
 18863  002400  0E01               	movlw	high _wrkbuf
 18864  002402  0100               	movlb	0	; () banked
 18865  002404  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 18866  002406  0E74               	movlw	low _wrkbuf
 18867  002408  6F6D               	movwf	?_sprintf& (0+255),b
 18868  00240A  C095  F06F         	movff	_printErrors$1429,?_sprintf+2
 18869  00240E  C096  F070         	movff	_printErrors$1429+1,?_sprintf+3
 18870  002412  CF75 F071          	movff	3957,?_sprintf+4	;volatile
 18871  002416  6B72               	clrf	(?_sprintf+5)& (0+255),b
 18872  002418  EC55  F00B         	call	_sprintf	;wreg free
 18873                           
 18874                           ; BSR set to: 0
 18875                           ;main.c: 2572: putsUSART(wrkbuf);
 18876  00241C  0101               	movlb	1	; () banked
 18877  00241E  0E01               	movlw	high _wrkbuf
 18878  002420  6E20               	movwf	?_putsUSART+1,c
 18879  002422  0E74               	movlw	low _wrkbuf
 18880  002424  6E1F               	movwf	?_putsUSART,c
 18881  002426  EC25  F029         	call	_putsUSART	;wreg free
 18882                           
 18883                           ;main.c: 2573: putsUSART((char *) "\r\n");
 18884  00242A  0E74               	movlw	high (STR_197+50)
 18885  00242C  6E20               	movwf	?_putsUSART+1,c
 18886  00242E  0EC0               	movlw	low (STR_197+50)
 18887  002430  6E1F               	movwf	?_putsUSART,c
 18888  002432  EC25  F029         	call	_putsUSART	;wreg free
 18889                           
 18890                           ;main.c: 2575: if (COMSTATbits.RXWARN) {
 18891  002436  A274               	btfss	3956,1,c	;volatile
 18892  002438  D006               	goto	l11633
 18893                           
 18894                           ;main.c: 2576: putsUSART((char *) "Receiver in Error State Warning (128 > RERRCNT ? 96)\
      +                          r\n");
 18895  00243A  0E73               	movlw	high STR_203
 18896  00243C  6E20               	movwf	?_putsUSART+1,c
 18897  00243E  0E7D               	movlw	low STR_203
 18898  002440  6E1F               	movwf	?_putsUSART,c
 18899  002442  EC25  F029         	call	_putsUSART	;wreg free
 18900  002446                     l11633:
 18901                           
 18902                           ;main.c: 2577: }
 18903                           ;main.c: 2579: if (COMSTATbits.RXBP) {
 18904  002446  A674               	btfss	3956,3,c	;volatile
 18905  002448  D006               	goto	l11637
 18906                           
 18907                           ;main.c: 2580: putsUSART((char *) "Receiver in Error State Bus Passive (RERRCNT ? 128)\r
      +                          \n");
 18908  00244A  0E74               	movlw	high STR_204
 18909  00244C  6E20               	movwf	?_putsUSART+1,c
 18910  00244E  0E22               	movlw	low STR_204
 18911  002450  6E1F               	movwf	?_putsUSART,c
 18912  002452  EC25  F029         	call	_putsUSART	;wreg free
 18913  002456                     l11637:
 18914                           
 18915                           ;main.c: 2581: }
 18916                           ;main.c: 2583: if (COMSTATbits.EWARN) {
 18917  002456  A074               	btfss	3956,0,c	;volatile
 18918  002458  D006               	goto	l1188
 18919                           
 18920                           ;main.c: 2584: putsUSART((char *) "Transmitter or Receiver is in Error State Warning\r\n
      +                          ");
 18921  00245A  0E74               	movlw	high STR_205
 18922  00245C  6E20               	movwf	?_putsUSART+1,c
 18923  00245E  0EC3               	movlw	low STR_205
 18924  002460  6E1F               	movwf	?_putsUSART,c
 18925  002462  EC25  F029         	call	_putsUSART	;wreg free
 18926  002466                     l1188:
 18927  002466  0012               	return	
 18928  002468                     __end_of_printErrors:
 18929                           	opt stack 0
 18930                           tblptru	equ	0xFF8
 18931                           tblptrh	equ	0xFF7
 18932                           tblptrl	equ	0xFF6
 18933                           tablat	equ	0xFF5
 18934                           prodh	equ	0xFF4
 18935                           prodl	equ	0xFF3
 18936                           intcon	equ	0xFF2
 18937                           indf0	equ	0xFEF
 18938                           postinc0	equ	0xFEE
 18939                           fsr0h	equ	0xFEA
 18940                           fsr0l	equ	0xFE9
 18941                           wreg	equ	0xFE8
 18942                           indf1	equ	0xFE7
 18943                           postinc1	equ	0xFE6
 18944                           postdec1	equ	0xFE5
 18945                           fsr1h	equ	0xFE2
 18946                           fsr1l	equ	0xFE1
 18947                           indf2	equ	0xFDF
 18948                           postinc2	equ	0xFDE
 18949                           postdec2	equ	0xFDD
 18950                           plusw2	equ	0xFDB
 18951                           fsr2h	equ	0xFDA
 18952                           fsr2l	equ	0xFD9
 18953                           status	equ	0xFD8
 18954                           
 18955 ;; *************** function _printStatistics *****************
 18956 ;; Defined at:
 18957 ;;		line 2504 in file "main.c"
 18958 ;; Parameters:    Size  Location     Type
 18959 ;;		None
 18960 ;; Auto vars:     Size  Location     Type
 18961 ;;		None
 18962 ;; Return value:  Size  Location     Type
 18963 ;;		None               void
 18964 ;; Registers used:
 18965 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18966 ;; Tracked objects:
 18967 ;;		On entry : F/0
 18968 ;;		On exit  : 0/0
 18969 ;;		Unchanged: 0/0
 18970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 18971 ;;      Params:         0       0       0       0       0       0       0
 18972 ;;      Locals:         0       8       0       0       0       0       0
 18973 ;;      Temps:          0       0       0       0       0       0       0
 18974 ;;      Totals:         0       8       0       0       0       0       0
 18975 ;;Total ram usage:        8 bytes
 18976 ;; Hardware stack levels used:    1
 18977 ;; Hardware stack levels required when called:    5
 18978 ;; This function calls:
 18979 ;;		_putsUSART
 18980 ;;		_sprintf
 18981 ;; This function is called by:
 18982 ;;		_doModeVerbose
 18983 ;; This function uses a non-reentrant model
 18984 ;;
 18985                           
 18986                           	psect	text41
 18987  002FBC                     __ptext41:
 18988                           	opt stack 0
 18989  002FBC                     _printStatistics:
 18990                           	opt stack 24
 18991                           
 18992                           ; BSR set to: 0
 18993                           ;main.c: 2505: putsUSART((char *) "Sent CAN frames: ");
 18994                           
 18995                           ;incstack = 0
 18996                           ;incstack = 0
 18997  002FBC  0E7E               	movlw	high STR_160
 18998  002FBE  6E20               	movwf	?_putsUSART+1,c
 18999  002FC0  0E0A               	movlw	low STR_160
 19000  002FC2  6E1F               	movwf	?_putsUSART,c
 19001  002FC4  EC25  F029         	call	_putsUSART	;wreg free
 19002                           
 19003                           ;main.c: 2506: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxFrames);
 19004  002FC8  0100               	movlb	0	; () banked
 19005  002FCA  67DC               	tstfsz	_bHex& (0+255),b
 19006  002FCC  D004               	goto	l11485
 19007                           
 19008                           ; BSR set to: 0
 19009  002FCE  0E7F               	movlw	high STR_162
 19010  002FD0  6F8C               	movwf	(_printStatistics$1371+1)& (0+255),b
 19011  002FD2  0EE1               	movlw	low STR_162
 19012  002FD4  D003               	goto	L22
 19013  002FD6                     l11485:
 19014                           
 19015                           ; BSR set to: 0
 19016  002FD6  0E7F               	movlw	high STR_161
 19017  002FD8  6F8C               	movwf	(_printStatistics$1371+1)& (0+255),b
 19018  002FDA  0E73               	movlw	low STR_161
 19019  002FDC                     L22:
 19020  002FDC  6F8B               	movwf	_printStatistics$1371& (0+255),b
 19021                           
 19022                           ; BSR set to: 0
 19023  002FDE  0E01               	movlw	high _wrkbuf
 19024  002FE0  0100               	movlb	0	; () banked
 19025  002FE2  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 19026  002FE4  0E74               	movlw	low _wrkbuf
 19027  002FE6  6F6D               	movwf	?_sprintf& (0+255),b
 19028  002FE8  C08B  F06F         	movff	_printStatistics$1371,?_sprintf+2
 19029  002FEC  C08C  F070         	movff	_printStatistics$1371+1,?_sprintf+3
 19030  002FF0  C114  F071         	movff	_cntTxFrames,?_sprintf+4
 19031  002FF4  C115  F072         	movff	_cntTxFrames+1,?_sprintf+5
 19032  002FF8  C116  F073         	movff	_cntTxFrames+2,?_sprintf+6
 19033  002FFC  C117  F074         	movff	_cntTxFrames+3,?_sprintf+7
 19034  003000  EC55  F00B         	call	_sprintf	;wreg free
 19035                           
 19036                           ; BSR set to: 0
 19037                           ;main.c: 2507: putsUSART(wrkbuf);
 19038  003004  0101               	movlb	1	; () banked
 19039  003006  0E01               	movlw	high _wrkbuf
 19040  003008  6E20               	movwf	?_putsUSART+1,c
 19041  00300A  0E74               	movlw	low _wrkbuf
 19042  00300C  6E1F               	movwf	?_putsUSART,c
 19043  00300E  EC25  F029         	call	_putsUSART	;wreg free
 19044                           
 19045                           ;main.c: 2508: putsUSART((char *) "\r\n");
 19046  003012  0E74               	movlw	high (STR_197+50)
 19047  003014  6E20               	movwf	?_putsUSART+1,c
 19048  003016  0EC0               	movlw	low (STR_197+50)
 19049  003018  6E1F               	movwf	?_putsUSART,c
 19050  00301A  EC25  F029         	call	_putsUSART	;wreg free
 19051                           
 19052                           ;main.c: 2510: putsUSART((char *) "Sent CAN bytes: ");
 19053  00301E  0E7E               	movlw	high STR_164
 19054  003020  6E20               	movwf	?_putsUSART+1,c
 19055  003022  0E3E               	movlw	low STR_164
 19056  003024  6E1F               	movwf	?_putsUSART,c
 19057  003026  EC25  F029         	call	_putsUSART	;wreg free
 19058                           
 19059                           ;main.c: 2511: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntTxBytes);
 19060  00302A  0100               	movlb	0	; () banked
 19061  00302C  67DC               	tstfsz	_bHex& (0+255),b
 19062  00302E  D004               	goto	l11499
 19063                           
 19064                           ; BSR set to: 0
 19065  003030  0E7F               	movlw	high STR_162
 19066  003032  6F8E               	movwf	(_printStatistics$1377+1)& (0+255),b
 19067  003034  0EE1               	movlw	low STR_162
 19068  003036  D003               	goto	L23
 19069  003038                     l11499:
 19070                           
 19071                           ; BSR set to: 0
 19072  003038  0E7F               	movlw	high STR_161
 19073  00303A  6F8E               	movwf	(_printStatistics$1377+1)& (0+255),b
 19074  00303C  0E73               	movlw	low STR_161
 19075  00303E                     L23:
 19076  00303E  6F8D               	movwf	_printStatistics$1377& (0+255),b
 19077                           
 19078                           ; BSR set to: 0
 19079  003040  0E01               	movlw	high _wrkbuf
 19080  003042  0100               	movlb	0	; () banked
 19081  003044  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 19082  003046  0E74               	movlw	low _wrkbuf
 19083  003048  6F6D               	movwf	?_sprintf& (0+255),b
 19084  00304A  C08D  F06F         	movff	_printStatistics$1377,?_sprintf+2
 19085  00304E  C08E  F070         	movff	_printStatistics$1377+1,?_sprintf+3
 19086  003052  C110  F071         	movff	_cntTxBytes,?_sprintf+4
 19087  003056  C111  F072         	movff	_cntTxBytes+1,?_sprintf+5
 19088  00305A  C112  F073         	movff	_cntTxBytes+2,?_sprintf+6
 19089  00305E  C113  F074         	movff	_cntTxBytes+3,?_sprintf+7
 19090  003062  EC55  F00B         	call	_sprintf	;wreg free
 19091                           
 19092                           ; BSR set to: 0
 19093                           ;main.c: 2512: putsUSART(wrkbuf);
 19094  003066  0101               	movlb	1	; () banked
 19095  003068  0E01               	movlw	high _wrkbuf
 19096  00306A  6E20               	movwf	?_putsUSART+1,c
 19097  00306C  0E74               	movlw	low _wrkbuf
 19098  00306E  6E1F               	movwf	?_putsUSART,c
 19099  003070  EC25  F029         	call	_putsUSART	;wreg free
 19100                           
 19101                           ;main.c: 2513: putsUSART((char *) "\r\n");
 19102  003074  0E74               	movlw	high (STR_197+50)
 19103  003076  6E20               	movwf	?_putsUSART+1,c
 19104  003078  0EC0               	movlw	low (STR_197+50)
 19105  00307A  6E1F               	movwf	?_putsUSART,c
 19106  00307C  EC25  F029         	call	_putsUSART	;wreg free
 19107                           
 19108                           ;main.c: 2515: putsUSART((char *) "Received CAN frames: ");
 19109  003080  0E7D               	movlw	high STR_168
 19110  003082  6E20               	movwf	?_putsUSART+1,c
 19111  003084  0E1C               	movlw	low STR_168
 19112  003086  6E1F               	movwf	?_putsUSART,c
 19113  003088  EC25  F029         	call	_putsUSART	;wreg free
 19114                           
 19115                           ;main.c: 2516: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxFrames);
 19116  00308C  0100               	movlb	0	; () banked
 19117  00308E  67DC               	tstfsz	_bHex& (0+255),b
 19118  003090  D004               	goto	l11513
 19119                           
 19120                           ; BSR set to: 0
 19121  003092  0E7F               	movlw	high STR_162
 19122  003094  6F90               	movwf	(_printStatistics$1383+1)& (0+255),b
 19123  003096  0EE1               	movlw	low STR_162
 19124  003098  D003               	goto	L24
 19125  00309A                     l11513:
 19126                           
 19127                           ; BSR set to: 0
 19128  00309A  0E7F               	movlw	high STR_161
 19129  00309C  6F90               	movwf	(_printStatistics$1383+1)& (0+255),b
 19130  00309E  0E73               	movlw	low STR_161
 19131  0030A0                     L24:
 19132  0030A0  6F8F               	movwf	_printStatistics$1383& (0+255),b
 19133                           
 19134                           ; BSR set to: 0
 19135  0030A2  0E01               	movlw	high _wrkbuf
 19136  0030A4  0100               	movlb	0	; () banked
 19137  0030A6  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 19138  0030A8  0E74               	movlw	low _wrkbuf
 19139  0030AA  6F6D               	movwf	?_sprintf& (0+255),b
 19140  0030AC  C08F  F06F         	movff	_printStatistics$1383,?_sprintf+2
 19141  0030B0  C090  F070         	movff	_printStatistics$1383+1,?_sprintf+3
 19142  0030B4  C10C  F071         	movff	_cntRxFrames,?_sprintf+4
 19143  0030B8  C10D  F072         	movff	_cntRxFrames+1,?_sprintf+5
 19144  0030BC  C10E  F073         	movff	_cntRxFrames+2,?_sprintf+6
 19145  0030C0  C10F  F074         	movff	_cntRxFrames+3,?_sprintf+7
 19146  0030C4  EC55  F00B         	call	_sprintf	;wreg free
 19147                           
 19148                           ; BSR set to: 0
 19149                           ;main.c: 2517: putsUSART(wrkbuf);
 19150  0030C8  0101               	movlb	1	; () banked
 19151  0030CA  0E01               	movlw	high _wrkbuf
 19152  0030CC  6E20               	movwf	?_putsUSART+1,c
 19153  0030CE  0E74               	movlw	low _wrkbuf
 19154  0030D0  6E1F               	movwf	?_putsUSART,c
 19155  0030D2  EC25  F029         	call	_putsUSART	;wreg free
 19156                           
 19157                           ;main.c: 2518: putsUSART((char *) "\r\n");
 19158  0030D6  0E74               	movlw	high (STR_197+50)
 19159  0030D8  6E20               	movwf	?_putsUSART+1,c
 19160  0030DA  0EC0               	movlw	low (STR_197+50)
 19161  0030DC  6E1F               	movwf	?_putsUSART,c
 19162  0030DE  EC25  F029         	call	_putsUSART	;wreg free
 19163                           
 19164                           ;main.c: 2520: putsUSART((char *) "Received CAN bytes: ");
 19165  0030E2  0E7D               	movlw	high STR_172
 19166  0030E4  6E20               	movwf	?_putsUSART+1,c
 19167  0030E6  0E32               	movlw	low STR_172
 19168  0030E8  6E1F               	movwf	?_putsUSART,c
 19169  0030EA  EC25  F029         	call	_putsUSART	;wreg free
 19170                           
 19171                           ;main.c: 2521: sprintf(wrkbuf, bHex ? "0x%08X" : "%lu", cntRxBytes);
 19172  0030EE  0100               	movlb	0	; () banked
 19173  0030F0  67DC               	tstfsz	_bHex& (0+255),b
 19174  0030F2  D004               	goto	l11527
 19175                           
 19176                           ; BSR set to: 0
 19177  0030F4  0E7F               	movlw	high STR_162
 19178  0030F6  6F92               	movwf	(_printStatistics$1389+1)& (0+255),b
 19179  0030F8  0EE1               	movlw	low STR_162
 19180  0030FA  D003               	goto	L25
 19181  0030FC                     l11527:
 19182                           
 19183                           ; BSR set to: 0
 19184  0030FC  0E7F               	movlw	high STR_161
 19185  0030FE  6F92               	movwf	(_printStatistics$1389+1)& (0+255),b
 19186  003100  0E73               	movlw	low STR_161
 19187  003102                     L25:
 19188  003102  6F91               	movwf	_printStatistics$1389& (0+255),b
 19189                           
 19190                           ; BSR set to: 0
 19191  003104  0E01               	movlw	high _wrkbuf
 19192  003106  0100               	movlb	0	; () banked
 19193  003108  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 19194  00310A  0E74               	movlw	low _wrkbuf
 19195  00310C  6F6D               	movwf	?_sprintf& (0+255),b
 19196  00310E  C091  F06F         	movff	_printStatistics$1389,?_sprintf+2
 19197  003112  C092  F070         	movff	_printStatistics$1389+1,?_sprintf+3
 19198  003116  C108  F071         	movff	_cntRxBytes,?_sprintf+4
 19199  00311A  C109  F072         	movff	_cntRxBytes+1,?_sprintf+5
 19200  00311E  C10A  F073         	movff	_cntRxBytes+2,?_sprintf+6
 19201  003122  C10B  F074         	movff	_cntRxBytes+3,?_sprintf+7
 19202  003126  EC55  F00B         	call	_sprintf	;wreg free
 19203                           
 19204                           ; BSR set to: 0
 19205                           ;main.c: 2522: putsUSART(wrkbuf);
 19206  00312A  0101               	movlb	1	; () banked
 19207  00312C  0E01               	movlw	high _wrkbuf
 19208  00312E  6E20               	movwf	?_putsUSART+1,c
 19209  003130  0E74               	movlw	low _wrkbuf
 19210  003132  6E1F               	movwf	?_putsUSART,c
 19211  003134  EC25  F029         	call	_putsUSART	;wreg free
 19212                           
 19213                           ;main.c: 2523: putsUSART((char *) "\r\n");
 19214  003138  0E74               	movlw	high (STR_197+50)
 19215  00313A  6E20               	movwf	?_putsUSART+1,c
 19216  00313C  0EC0               	movlw	low (STR_197+50)
 19217  00313E  6E1F               	movwf	?_putsUSART,c
 19218  003140  EF25  F029         	goto	_putsUSART	;wreg free
 19219  003144                     __end_of_printStatistics:
 19220                           	opt stack 0
 19221                           tblptru	equ	0xFF8
 19222                           tblptrh	equ	0xFF7
 19223                           tblptrl	equ	0xFF6
 19224                           tablat	equ	0xFF5
 19225                           prodh	equ	0xFF4
 19226                           prodl	equ	0xFF3
 19227                           intcon	equ	0xFF2
 19228                           indf0	equ	0xFEF
 19229                           postinc0	equ	0xFEE
 19230                           fsr0h	equ	0xFEA
 19231                           fsr0l	equ	0xFE9
 19232                           wreg	equ	0xFE8
 19233                           indf1	equ	0xFE7
 19234                           postinc1	equ	0xFE6
 19235                           postdec1	equ	0xFE5
 19236                           fsr1h	equ	0xFE2
 19237                           fsr1l	equ	0xFE1
 19238                           indf2	equ	0xFDF
 19239                           postinc2	equ	0xFDE
 19240                           postdec2	equ	0xFDD
 19241                           plusw2	equ	0xFDB
 19242                           fsr2h	equ	0xFDA
 19243                           fsr2l	equ	0xFD9
 19244                           status	equ	0xFD8
 19245                           
 19246 ;; *************** function _atoi *****************
 19247 ;; Defined at:
 19248 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\atoi.c"
 19249 ;; Parameters:    Size  Location     Type
 19250 ;;  s               2   35[COMRAM] PTR const unsigned char 
 19251 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19252 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19253 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19254 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19255 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19256 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19257 ;; Auto vars:     Size  Location     Type
 19258 ;;  a               2    3[BANK0 ] int 
 19259 ;;  sign            1    2[BANK0 ] unsigned char 
 19260 ;; Return value:  Size  Location     Type
 19261 ;;                  2   35[COMRAM] int 
 19262 ;; Registers used:
 19263 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19264 ;; Tracked objects:
 19265 ;;		On entry : C/2
 19266 ;;		On exit  : F/0
 19267 ;;		Unchanged: 0/0
 19268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19269 ;;      Params:         2       0       0       0       0       0       0
 19270 ;;      Locals:         0       3       0       0       0       0       0
 19271 ;;      Temps:          0       2       0       0       0       0       0
 19272 ;;      Totals:         2       5       0       0       0       0       0
 19273 ;;Total ram usage:        7 bytes
 19274 ;; Hardware stack levels used:    1
 19275 ;; Hardware stack levels required when called:    4
 19276 ;; This function calls:
 19277 ;;		_isdigit
 19278 ;;		___wmul
 19279 ;; This function is called by:
 19280 ;;		_doModeVerbose
 19281 ;; This function uses a non-reentrant model
 19282 ;;
 19283                           
 19284                           	psect	text42
 19285  003A54                     __ptext42:
 19286                           	opt stack 0
 19287  003A54                     _atoi:
 19288                           	opt stack 25
 19289                           
 19290                           ;incstack = 0
 19291                           ;incstack = 0
 19292  003A54  D002               	goto	l14359
 19293  003A56                     l14357:
 19294  003A56  4A24               	infsnz	atoi@s,f,c
 19295  003A58  2A25               	incf	atoi@s+1,f,c
 19296  003A5A                     l14359:
 19297  003A5A  5024               	movf	atoi@s,w,c
 19298  003A5C  6EF6               	movwf	tblptrl,c
 19299  003A5E  6EE9               	movwf	fsr0l,c
 19300  003A60  0E05               	movlw	(high __ramtop+-1)
 19301  003A62  6EEA               	movwf	fsr0h,c
 19302  003A64  5025               	movf	atoi@s+1,w,c
 19303  003A66  64EA               	cpfsgt	fsr0h,c
 19304  003A68  D003               	bra	u19297
 19305  003A6A  6EEA               	movwf	fsr0h,c
 19306  003A6C  50EF               	movf	indf0,w,c
 19307  003A6E  D003               	bra	u19290
 19308  003A70                     u19297:
 19309  003A70  6EF7               	movwf	tblptrh,c
 19310  003A72  0008               	tblrd		*
 19311  003A74  50F5               	movf	tablat,w,c
 19312  003A76                     u19290:
 19313  003A76  0A20               	xorlw	32
 19314  003A78  E0EE               	bz	l14357
 19315  003A7A  D868               	call	PL18	;call to abstracted procedure
 19316  003A7C  64EA               	cpfsgt	fsr0h,c
 19317  003A7E  D003               	bra	u19317
 19318  003A80  6EEA               	movwf	fsr0h,c
 19319  003A82  50EF               	movf	indf0,w,c
 19320  003A84  D003               	bra	u19310
 19321  003A86                     u19317:
 19322  003A86  6EF7               	movwf	tblptrh,c
 19323  003A88  0008               	tblrd		*
 19324  003A8A  50F5               	movf	tablat,w,c
 19325  003A8C                     u19310:
 19326  003A8C  0A09               	xorlw	9
 19327  003A8E  E0E3               	bz	l14357
 19328  003A90  0100               	movlb	0	; () banked
 19329  003A92  6B63               	clrf	atoi@a& (0+255),b
 19330  003A94  6B64               	clrf	(atoi@a+1)& (0+255),b
 19331  003A96  6B62               	clrf	atoi@sign& (0+255),b
 19332                           
 19333                           ; BSR set to: 0
 19334  003A98  D859               	call	PL18	;call to abstracted procedure
 19335  003A9A  64EA               	cpfsgt	fsr0h,c
 19336  003A9C  D003               	bra	u19337
 19337  003A9E  6EEA               	movwf	fsr0h,c
 19338  003AA0  50EF               	movf	indf0,w,c
 19339  003AA2  D003               	bra	u19330
 19340  003AA4                     u19337:
 19341  003AA4  6EF7               	movwf	tblptrh,c
 19342  003AA6  0008               	tblrd		*
 19343  003AA8  50F5               	movf	tablat,w,c
 19344  003AAA                     u19330:
 19345  003AAA  0A2D               	xorlw	45
 19346  003AAC  E103               	bnz	l14367
 19347  003AAE  0100               	movlb	0	; () banked
 19348  003AB0  2B62               	incf	atoi@sign& (0+255),f,b
 19349  003AB2  D00B               	goto	l14369
 19350  003AB4                     l14367:
 19351  003AB4  D84B               	call	PL18	;call to abstracted procedure
 19352  003AB6  64EA               	cpfsgt	fsr0h,c
 19353  003AB8  D003               	bra	u19357
 19354  003ABA  6EEA               	movwf	fsr0h,c
 19355  003ABC  50EF               	movf	indf0,w,c
 19356  003ABE  D003               	bra	u19350
 19357  003AC0                     u19357:
 19358  003AC0  6EF7               	movwf	tblptrh,c
 19359  003AC2  0008               	tblrd		*
 19360  003AC4  50F5               	movf	tablat,w,c
 19361  003AC6                     u19350:
 19362  003AC6  0A2B               	xorlw	43
 19363  003AC8  E120               	bnz	l14375
 19364  003ACA                     l14369:
 19365  003ACA  4A24               	infsnz	atoi@s,f,c
 19366  003ACC  2A25               	incf	atoi@s+1,f,c
 19367  003ACE  D01D               	goto	l14375
 19368  003AD0                     l14371:
 19369  003AD0  C063  F01E         	movff	atoi@a,?___wmul
 19370  003AD4  C064  F01F         	movff	atoi@a+1,?___wmul+1
 19371  003AD8  6A21               	clrf	?___wmul+3,c
 19372  003ADA  0E0A               	movlw	10
 19373  003ADC  6E20               	movwf	?___wmul+2,c
 19374  003ADE  EC53  F02B         	call	___wmul	;wreg free
 19375  003AE2  D834               	call	PL18	;call to abstracted procedure
 19376  003AE4  64EA               	cpfsgt	fsr0h,c
 19377  003AE6  D003               	bra	u19377
 19378  003AE8  6EEA               	movwf	fsr0h,c
 19379  003AEA  50EF               	movf	indf0,w,c
 19380  003AEC  D003               	bra	u19370
 19381  003AEE                     u19377:
 19382  003AEE  6EF7               	movwf	tblptrh,c
 19383  003AF0  0008               	tblrd		*
 19384  003AF2  50F5               	movf	tablat,w,c
 19385  003AF4                     u19370:
 19386  003AF4  261E               	addwf	?___wmul,f,c
 19387  003AF6  0E00               	movlw	0
 19388  003AF8  221F               	addwfc	?___wmul+1,f,c
 19389  003AFA  0ED0               	movlw	208
 19390  003AFC  241E               	addwf	?___wmul,w,c
 19391  003AFE  0100               	movlb	0	; () banked
 19392  003B00  6F63               	movwf	atoi@a& (0+255),b
 19393  003B02  0EFF               	movlw	255
 19394  003B04  201F               	addwfc	?___wmul+1,w,c
 19395  003B06  6F64               	movwf	(atoi@a+1)& (0+255),b
 19396  003B08  D7E0               	goto	l14369
 19397  003B0A                     l14375:
 19398  003B0A  D820               	call	PL18	;call to abstracted procedure
 19399  003B0C  64EA               	cpfsgt	fsr0h,c
 19400  003B0E  D003               	bra	u19387
 19401  003B10  6EEA               	movwf	fsr0h,c
 19402  003B12  50EF               	movf	indf0,w,c
 19403  003B14  D003               	bra	u19380
 19404  003B16                     u19387:
 19405  003B16  6EF7               	movwf	tblptrh,c
 19406  003B18  0008               	tblrd		*
 19407  003B1A  50F5               	movf	tablat,w,c
 19408  003B1C                     u19380:
 19409  003B1C  ECB1  F02B         	call	_isdigit
 19410  003B20  E2D7               	bc	l14371
 19411  003B22  0100               	movlb	0	; () banked
 19412  003B24  5162               	movf	atoi@sign& (0+255),w,b
 19413  003B26  E00D               	bz	l2047
 19414                           
 19415                           ; BSR set to: 0
 19416  003B28  C063  F060         	movff	atoi@a,??_atoi
 19417  003B2C  C064  F061         	movff	atoi@a+1,??_atoi+1
 19418  003B30  1F60               	comf	??_atoi& (0+255),f,b
 19419  003B32  1F61               	comf	(??_atoi+1)& (0+255),f,b
 19420  003B34  4B60               	infsnz	??_atoi& (0+255),f,b
 19421  003B36  2B61               	incf	(??_atoi+1)& (0+255),f,b
 19422  003B38  C060  F024         	movff	??_atoi,?_atoi
 19423  003B3C  C061  F025         	movff	??_atoi+1,?_atoi+1
 19424  003B40  D004               	goto	l2048
 19425  003B42                     l2047:
 19426                           
 19427                           ; BSR set to: 0
 19428  003B42  C063  F024         	movff	atoi@a,?_atoi
 19429  003B46  C064  F025         	movff	atoi@a+1,?_atoi+1
 19430  003B4A                     l2048:
 19431                           
 19432                           ; BSR set to: 0
 19433  003B4A  0012               	return	
 19434  003B4C                     __end_of_atoi:
 19435                           	opt stack 0
 19436  003B4C                     PL18:
 19437                           	opt stack 25
 19438  003B4C  5024               	movf	atoi@s,w,c
 19439  003B4E  6EF6               	movwf	tblptrl,c
 19440  003B50  6EE9               	movwf	fsr0l,c
 19441  003B52  0E05               	movlw	(high __ramtop+-1)
 19442  003B54  6EEA               	movwf	fsr0h,c
 19443  003B56  5025               	movf	atoi@s+1,w,c
 19444  003B58  0012               	return	
 19445  003B5A                     __end_ofPL18:
 19446                           	opt stack 0
 19447                           tblptru	equ	0xFF8
 19448                           tblptrh	equ	0xFF7
 19449                           tblptrl	equ	0xFF6
 19450                           tablat	equ	0xFF5
 19451                           prodh	equ	0xFF4
 19452                           prodl	equ	0xFF3
 19453                           intcon	equ	0xFF2
 19454                           indf0	equ	0xFEF
 19455                           postinc0	equ	0xFEE
 19456                           fsr0h	equ	0xFEA
 19457                           fsr0l	equ	0xFE9
 19458                           wreg	equ	0xFE8
 19459                           indf1	equ	0xFE7
 19460                           postinc1	equ	0xFE6
 19461                           postdec1	equ	0xFE5
 19462                           fsr1h	equ	0xFE2
 19463                           fsr1l	equ	0xFE1
 19464                           indf2	equ	0xFDF
 19465                           postinc2	equ	0xFDE
 19466                           postdec2	equ	0xFDD
 19467                           plusw2	equ	0xFDB
 19468                           fsr2h	equ	0xFDA
 19469                           fsr2l	equ	0xFD9
 19470                           status	equ	0xFD8
 19471                           
 19472 ;; *************** function _strtok *****************
 19473 ;; Defined at:
 19474 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strtok.c"
 19475 ;; Parameters:    Size  Location     Type
 19476 ;;  s1              2    4[BANK0 ] PTR unsigned char 
 19477 ;;		 -> NULL(0), cmdbuf(80), 
 19478 ;;  s2              2    6[BANK0 ] PTR const unsigned char 
 19479 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19480 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19481 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19482 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19483 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19484 ;;		 -> STR_31(2), STR_30(2), 
 19485 ;; Auto vars:     Size  Location     Type
 19486 ;;		None
 19487 ;; Return value:  Size  Location     Type
 19488 ;;                  2    4[BANK0 ] PTR unsigned char 
 19489 ;; Registers used:
 19490 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19491 ;; Tracked objects:
 19492 ;;		On entry : F/0
 19493 ;;		On exit  : F/0
 19494 ;;		Unchanged: 0/0
 19495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19496 ;;      Params:         0       4       0       0       0       0       0
 19497 ;;      Locals:         0       0       0       0       0       0       0
 19498 ;;      Temps:          0       0       0       0       0       0       0
 19499 ;;      Totals:         0       4       0       0       0       0       0
 19500 ;;Total ram usage:        4 bytes
 19501 ;; Hardware stack levels used:    1
 19502 ;; Hardware stack levels required when called:    5
 19503 ;; This function calls:
 19504 ;;		_strspn
 19505 ;;		_strcspn
 19506 ;; This function is called by:
 19507 ;;		_doModeVerbose
 19508 ;; This function uses a non-reentrant model
 19509 ;;
 19510                           
 19511                           	psect	text43
 19512  004ABC                     __ptext43:
 19513                           	opt stack 0
 19514  004ABC                     _strtok:
 19515                           	opt stack 24
 19516                           
 19517                           ; BSR set to: 0
 19518                           
 19519                           ; BSR set to: 0
 19520                           ;incstack = 0
 19521                           ;incstack = 0
 19522  004ABC  5165               	movf	(strtok@s1+1)& (0+255),w,b
 19523  004ABE  1164               	iorwf	strtok@s1& (0+255),w,b
 19524  004AC0  E104               	bnz	l14337
 19525                           
 19526                           ; BSR set to: 0
 19527  004AC2  C02F  F064         	movff	strtok@sp,strtok@s1
 19528  004AC6  C030  F065         	movff	strtok@sp+1,strtok@s1+1
 19529  004ACA                     l14337:
 19530                           
 19531                           ; BSR set to: 0
 19532  004ACA  5165               	movf	(strtok@s1+1)& (0+255),w,b
 19533  004ACC  1164               	iorwf	strtok@s1& (0+255),w,b
 19534  004ACE  E017               	bz	L26
 19535                           
 19536                           ; BSR set to: 0
 19537                           
 19538                           ; BSR set to: 0
 19539  004AD0  C064  F060         	movff	strtok@s1,?_strspn
 19540  004AD4  C065  F061         	movff	strtok@s1+1,?_strspn+1
 19541  004AD8  C066  F062         	movff	strtok@s2,?_strspn+2
 19542  004ADC  C067  F063         	movff	strtok@s2+1,?_strspn+3
 19543  004AE0  EC05  F02A         	call	_strspn	;wreg free
 19544  004AE4  0100               	movlb	0	; () banked
 19545  004AE6  5160               	movf	?_strspn& (0+255),w,b
 19546  004AE8  2764               	addwf	strtok@s1& (0+255),f,b
 19547  004AEA  5161               	movf	(?_strspn+1)& (0+255),w,b
 19548  004AEC  2365               	addwfc	(strtok@s1+1)& (0+255),f,b
 19549                           
 19550                           ; BSR set to: 0
 19551  004AEE  C064  FFD9         	movff	strtok@s1,fsr2l
 19552  004AF2  C065  FFDA         	movff	strtok@s1+1,fsr2h
 19553  004AF6  50DF               	movf	indf2,w,c
 19554  004AF8  E105               	bnz	l14347
 19555                           
 19556                           ; BSR set to: 0
 19557  004AFA  6A2F               	clrf	strtok@sp,c
 19558  004AFC  6A30               	clrf	strtok@sp+1,c
 19559  004AFE                     L26:
 19560  004AFE  6B64               	clrf	?_strtok& (0+255),b
 19561  004B00  6B65               	clrf	(?_strtok+1)& (0+255),b
 19562  004B02  D026               	goto	l2540
 19563  004B04                     l14347:
 19564                           
 19565                           ; BSR set to: 0
 19566  004B04  C064  F060         	movff	strtok@s1,?_strcspn
 19567  004B08  C065  F061         	movff	strtok@s1+1,?_strcspn+1
 19568  004B0C  C066  F062         	movff	strtok@s2,?_strcspn+2
 19569  004B10  C067  F063         	movff	strtok@s2+1,?_strcspn+3
 19570  004B14  ECE2  F029         	call	_strcspn	;wreg free
 19571  004B18  0100               	movlb	0	; () banked
 19572  004B1A  5160               	movf	?_strcspn& (0+255),w,b
 19573  004B1C  2564               	addwf	strtok@s1& (0+255),w,b
 19574  004B1E  6E2F               	movwf	strtok@sp,c
 19575  004B20  5161               	movf	(?_strcspn+1)& (0+255),w,b
 19576  004B22  2165               	addwfc	(strtok@s1+1)& (0+255),w,b
 19577  004B24  6E30               	movwf	strtok@sp+1,c
 19578                           
 19579                           ; BSR set to: 0
 19580  004B26  C02F  FFD9         	movff	strtok@sp,fsr2l
 19581  004B2A  C030  FFDA         	movff	strtok@sp+1,fsr2h
 19582  004B2E  50DF               	movf	indf2,w,c
 19583  004B30  E009               	bz	l2542
 19584                           
 19585                           ; BSR set to: 0
 19586  004B32  C02F  FFD9         	movff	strtok@sp,fsr2l
 19587  004B36  C030  FFDA         	movff	strtok@sp+1,fsr2h
 19588  004B3A  0E00               	movlw	0
 19589  004B3C  6EDF               	movwf	indf2,c
 19590                           
 19591                           ; BSR set to: 0
 19592  004B3E  4A2F               	infsnz	strtok@sp,f,c
 19593  004B40  2A30               	incf	strtok@sp+1,f,c
 19594  004B42  D002               	goto	l2543
 19595  004B44                     l2542:
 19596                           
 19597                           ; BSR set to: 0
 19598  004B44  6A2F               	clrf	strtok@sp,c
 19599  004B46  6A30               	clrf	strtok@sp+1,c
 19600  004B48                     l2543:
 19601                           
 19602                           ; BSR set to: 0
 19603  004B48  C064  F064         	movff	strtok@s1,?_strtok
 19604  004B4C  C065  F065         	movff	strtok@s1+1,?_strtok+1
 19605  004B50                     l2540:
 19606                           
 19607                           ; BSR set to: 0
 19608  004B50  0012               	return	
 19609  004B52                     __end_of_strtok:
 19610                           	opt stack 0
 19611                           tblptru	equ	0xFF8
 19612                           tblptrh	equ	0xFF7
 19613                           tblptrl	equ	0xFF6
 19614                           tablat	equ	0xFF5
 19615                           prodh	equ	0xFF4
 19616                           prodl	equ	0xFF3
 19617                           intcon	equ	0xFF2
 19618                           indf0	equ	0xFEF
 19619                           postinc0	equ	0xFEE
 19620                           fsr0h	equ	0xFEA
 19621                           fsr0l	equ	0xFE9
 19622                           wreg	equ	0xFE8
 19623                           indf1	equ	0xFE7
 19624                           postinc1	equ	0xFE6
 19625                           postdec1	equ	0xFE5
 19626                           fsr1h	equ	0xFE2
 19627                           fsr1l	equ	0xFE1
 19628                           indf2	equ	0xFDF
 19629                           postinc2	equ	0xFDE
 19630                           postdec2	equ	0xFDD
 19631                           plusw2	equ	0xFDB
 19632                           fsr2h	equ	0xFDA
 19633                           fsr2l	equ	0xFD9
 19634                           status	equ	0xFD8
 19635                           
 19636 ;; *************** function _strcspn *****************
 19637 ;; Defined at:
 19638 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strcspn.c"
 19639 ;; Parameters:    Size  Location     Type
 19640 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
 19641 ;;		 -> NULL(0), cmdbuf(80), 
 19642 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
 19643 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19644 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19645 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19646 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19647 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19648 ;;		 -> STR_31(2), STR_30(2), 
 19649 ;; Auto vars:     Size  Location     Type
 19650 ;;  i               2   35[COMRAM] unsigned int 
 19651 ;; Return value:  Size  Location     Type
 19652 ;;                  2    0[BANK0 ] unsigned int 
 19653 ;; Registers used:
 19654 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19655 ;; Tracked objects:
 19656 ;;		On entry : F/0
 19657 ;;		On exit  : 0/0
 19658 ;;		Unchanged: 0/0
 19659 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19660 ;;      Params:         0       4       0       0       0       0       0
 19661 ;;      Locals:         2       0       0       0       0       0       0
 19662 ;;      Temps:          0       0       0       0       0       0       0
 19663 ;;      Totals:         2       4       0       0       0       0       0
 19664 ;;Total ram usage:        6 bytes
 19665 ;; Hardware stack levels used:    1
 19666 ;; Hardware stack levels required when called:    4
 19667 ;; This function calls:
 19668 ;;		_strchr
 19669 ;; This function is called by:
 19670 ;;		_strtok
 19671 ;; This function uses a non-reentrant model
 19672 ;;
 19673                           
 19674                           	psect	text44
 19675  0053C4                     __ptext44:
 19676                           	opt stack 0
 19677  0053C4                     _strcspn:
 19678                           	opt stack 24
 19679                           
 19680                           ; BSR set to: 0
 19681                           
 19682                           ; BSR set to: 0
 19683                           ;incstack = 0
 19684                           ;incstack = 0
 19685  0053C4  6A24               	clrf	strcspn@i,c
 19686  0053C6  6A25               	clrf	strcspn@i+1,c
 19687  0053C8  D005               	goto	l15373
 19688  0053CA                     l15371:
 19689  0053CA  0100               	movlb	0	; () banked
 19690  0053CC  4B60               	infsnz	strcspn@s1& (0+255),f,b
 19691  0053CE  2B61               	incf	(strcspn@s1+1)& (0+255),f,b
 19692  0053D0  4A24               	infsnz	strcspn@i,f,c
 19693  0053D2  2A25               	incf	strcspn@i+1,f,c
 19694  0053D4                     l15373:
 19695                           
 19696                           ; BSR set to: 0
 19697  0053D4  C060  FFD9         	movff	strcspn@s1,fsr2l
 19698  0053D8  C061  FFDA         	movff	strcspn@s1+1,fsr2h
 19699  0053DC  50DF               	movf	indf2,w,c
 19700  0053DE  E010               	bz	l2567
 19701                           
 19702                           ; BSR set to: 0
 19703  0053E0  C062  F01E         	movff	strcspn@s2,?_strchr
 19704  0053E4  C063  F01F         	movff	strcspn@s2+1,?_strchr+1
 19705  0053E8  C060  FFD9         	movff	strcspn@s1,fsr2l
 19706  0053EC  C061  FFDA         	movff	strcspn@s1+1,fsr2h
 19707  0053F0  50DF               	movf	indf2,w,c
 19708  0053F2  6E20               	movwf	?_strchr+2,c
 19709  0053F4  6A21               	clrf	?_strchr+3,c
 19710  0053F6  EC9E  F028         	call	_strchr	;wreg free
 19711  0053FA  501F               	movf	?_strchr+1,w,c
 19712  0053FC  101E               	iorwf	?_strchr,w,c
 19713  0053FE  E0E5               	bz	l15371
 19714  005400                     l2567:
 19715  005400  C024  F060         	movff	strcspn@i,?_strcspn
 19716  005404  C025  F061         	movff	strcspn@i+1,?_strcspn+1
 19717  005408  0012               	return	
 19718  00540A                     __end_of_strcspn:
 19719                           	opt stack 0
 19720                           tblptru	equ	0xFF8
 19721                           tblptrh	equ	0xFF7
 19722                           tblptrl	equ	0xFF6
 19723                           tablat	equ	0xFF5
 19724                           prodh	equ	0xFF4
 19725                           prodl	equ	0xFF3
 19726                           intcon	equ	0xFF2
 19727                           indf0	equ	0xFEF
 19728                           postinc0	equ	0xFEE
 19729                           fsr0h	equ	0xFEA
 19730                           fsr0l	equ	0xFE9
 19731                           wreg	equ	0xFE8
 19732                           indf1	equ	0xFE7
 19733                           postinc1	equ	0xFE6
 19734                           postdec1	equ	0xFE5
 19735                           fsr1h	equ	0xFE2
 19736                           fsr1l	equ	0xFE1
 19737                           indf2	equ	0xFDF
 19738                           postinc2	equ	0xFDE
 19739                           postdec2	equ	0xFDD
 19740                           plusw2	equ	0xFDB
 19741                           fsr2h	equ	0xFDA
 19742                           fsr2l	equ	0xFD9
 19743                           status	equ	0xFD8
 19744                           
 19745 ;; *************** function _strspn *****************
 19746 ;; Defined at:
 19747 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strspn.c"
 19748 ;; Parameters:    Size  Location     Type
 19749 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
 19750 ;;		 -> NULL(0), cmdbuf(80), 
 19751 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
 19752 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19753 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19754 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19755 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19756 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19757 ;;		 -> STR_31(2), STR_30(2), 
 19758 ;; Auto vars:     Size  Location     Type
 19759 ;;  i               2   35[COMRAM] unsigned int 
 19760 ;; Return value:  Size  Location     Type
 19761 ;;                  2    0[BANK0 ] unsigned int 
 19762 ;; Registers used:
 19763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19764 ;; Tracked objects:
 19765 ;;		On entry : F/0
 19766 ;;		On exit  : 0/0
 19767 ;;		Unchanged: 0/0
 19768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19769 ;;      Params:         0       4       0       0       0       0       0
 19770 ;;      Locals:         2       0       0       0       0       0       0
 19771 ;;      Temps:          0       0       0       0       0       0       0
 19772 ;;      Totals:         2       4       0       0       0       0       0
 19773 ;;Total ram usage:        6 bytes
 19774 ;; Hardware stack levels used:    1
 19775 ;; Hardware stack levels required when called:    4
 19776 ;; This function calls:
 19777 ;;		_strchr
 19778 ;; This function is called by:
 19779 ;;		_strtok
 19780 ;; This function uses a non-reentrant model
 19781 ;;
 19782                           
 19783                           	psect	text45
 19784  00540A                     __ptext45:
 19785                           	opt stack 0
 19786  00540A                     _strspn:
 19787                           	opt stack 24
 19788                           
 19789                           ; BSR set to: 0
 19790                           
 19791                           ;incstack = 0
 19792                           ;incstack = 0
 19793  00540A  6A24               	clrf	strspn@i,c
 19794  00540C  6A25               	clrf	strspn@i+1,c
 19795  00540E  D005               	goto	l15365
 19796  005410                     l15363:
 19797  005410  0100               	movlb	0	; () banked
 19798  005412  4B60               	infsnz	strspn@s1& (0+255),f,b
 19799  005414  2B61               	incf	(strspn@s1+1)& (0+255),f,b
 19800  005416  4A24               	infsnz	strspn@i,f,c
 19801  005418  2A25               	incf	strspn@i+1,f,c
 19802  00541A                     l15365:
 19803                           
 19804                           ; BSR set to: 0
 19805  00541A  C060  FFD9         	movff	strspn@s1,fsr2l
 19806  00541E  C061  FFDA         	movff	strspn@s1+1,fsr2h
 19807  005422  50DF               	movf	indf2,w,c
 19808  005424  E010               	bz	l2586
 19809                           
 19810                           ; BSR set to: 0
 19811  005426  C062  F01E         	movff	strspn@s2,?_strchr
 19812  00542A  C063  F01F         	movff	strspn@s2+1,?_strchr+1
 19813  00542E  C060  FFD9         	movff	strspn@s1,fsr2l
 19814  005432  C061  FFDA         	movff	strspn@s1+1,fsr2h
 19815  005436  50DF               	movf	indf2,w,c
 19816  005438  6E20               	movwf	?_strchr+2,c
 19817  00543A  6A21               	clrf	?_strchr+3,c
 19818  00543C  EC9E  F028         	call	_strchr	;wreg free
 19819  005440  501F               	movf	?_strchr+1,w,c
 19820  005442  101E               	iorwf	?_strchr,w,c
 19821  005444  E1E5               	bnz	l15363
 19822  005446                     l2586:
 19823  005446  C024  F060         	movff	strspn@i,?_strspn
 19824  00544A  C025  F061         	movff	strspn@i+1,?_strspn+1
 19825  00544E  0012               	return	
 19826  005450                     __end_of_strspn:
 19827                           	opt stack 0
 19828                           tblptru	equ	0xFF8
 19829                           tblptrh	equ	0xFF7
 19830                           tblptrl	equ	0xFF6
 19831                           tablat	equ	0xFF5
 19832                           prodh	equ	0xFF4
 19833                           prodl	equ	0xFF3
 19834                           intcon	equ	0xFF2
 19835                           indf0	equ	0xFEF
 19836                           postinc0	equ	0xFEE
 19837                           fsr0h	equ	0xFEA
 19838                           fsr0l	equ	0xFE9
 19839                           wreg	equ	0xFE8
 19840                           indf1	equ	0xFE7
 19841                           postinc1	equ	0xFE6
 19842                           postdec1	equ	0xFE5
 19843                           fsr1h	equ	0xFE2
 19844                           fsr1l	equ	0xFE1
 19845                           indf2	equ	0xFDF
 19846                           postinc2	equ	0xFDE
 19847                           postdec2	equ	0xFDD
 19848                           plusw2	equ	0xFDB
 19849                           fsr2h	equ	0xFDA
 19850                           fsr2l	equ	0xFD9
 19851                           status	equ	0xFD8
 19852                           
 19853 ;; *************** function _strchr *****************
 19854 ;; Defined at:
 19855 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strchr.c"
 19856 ;; Parameters:    Size  Location     Type
 19857 ;;  ptr             2   29[COMRAM] PTR const unsigned char 
 19858 ;;		 -> STR_110(2), STR_108(2), STR_106(2), STR_104(2), 
 19859 ;;		 -> STR_101(2), STR_97(2), STR_95(2), STR_93(2), 
 19860 ;;		 -> STR_91(2), STR_88(2), STR_77(2), STR_75(2), 
 19861 ;;		 -> STR_73(2), STR_54(2), STR_52(2), STR_50(2), 
 19862 ;;		 -> STR_35(2), STR_34(2), STR_33(2), STR_32(2), 
 19863 ;;		 -> STR_31(2), NULL(0), STR_30(2), cmdbuf(80), 
 19864 ;;  chr             2   31[COMRAM] int 
 19865 ;; Auto vars:     Size  Location     Type
 19866 ;;		None
 19867 ;; Return value:  Size  Location     Type
 19868 ;;                  2   29[COMRAM] PTR unsigned char 
 19869 ;; Registers used:
 19870 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 19871 ;; Tracked objects:
 19872 ;;		On entry : D/2
 19873 ;;		On exit  : 0/0
 19874 ;;		Unchanged: 0/0
 19875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 19876 ;;      Params:         4       0       0       0       0       0       0
 19877 ;;      Locals:         0       0       0       0       0       0       0
 19878 ;;      Temps:          2       0       0       0       0       0       0
 19879 ;;      Totals:         6       0       0       0       0       0       0
 19880 ;;Total ram usage:        6 bytes
 19881 ;; Hardware stack levels used:    1
 19882 ;; Hardware stack levels required when called:    3
 19883 ;; This function calls:
 19884 ;;		Nothing
 19885 ;; This function is called by:
 19886 ;;		_doModeVerbose
 19887 ;;		_strcspn
 19888 ;;		_strspn
 19889 ;; This function uses a non-reentrant model
 19890 ;;
 19891                           
 19892                           	psect	text46
 19893  00513C                     __ptext46:
 19894                           	opt stack 0
 19895  00513C                     _strchr:
 19896                           	opt stack 26
 19897  00513C                     l2488:
 19898  00513C  501E               	movf	strchr@ptr,w,c
 19899  00513E  6EF6               	movwf	tblptrl,c
 19900  005140  6EE9               	movwf	fsr0l,c
 19901  005142  0E05               	movlw	(high __ramtop+-1)
 19902  005144  6EEA               	movwf	fsr0h,c
 19903  005146  501F               	movf	strchr@ptr+1,w,c
 19904  005148  64EA               	cpfsgt	fsr0h,c
 19905  00514A  D003               	bra	u19467
 19906  00514C  6EEA               	movwf	fsr0h,c
 19907  00514E  50EF               	movf	indf0,w,c
 19908  005150  D003               	bra	u19460
 19909  005152                     u19467:
 19910  005152  6EF7               	movwf	tblptrh,c
 19911  005154  0008               	tblrd		*
 19912  005156  50F5               	movf	tablat,w,c
 19913  005158                     u19460:
 19914  005158  1820               	xorwf	strchr@chr,w,c
 19915  00515A  E105               	bnz	l14443
 19916  00515C  C01E  F01E         	movff	strchr@ptr,?_strchr
 19917  005160  C01F  F01F         	movff	strchr@ptr+1,?_strchr+1
 19918  005164  D018               	goto	l2490
 19919  005166                     l14443:
 19920  005166  501E               	movf	strchr@ptr,w,c
 19921  005168  6E22               	movwf	??_strchr& (0+255),c
 19922  00516A  501F               	movf	strchr@ptr+1,w,c
 19923  00516C  6E23               	movwf	(??_strchr+1)& (0+255),c
 19924  00516E  4A1E               	infsnz	strchr@ptr,f,c
 19925  005170  2A1F               	incf	strchr@ptr+1,f,c
 19926  005172  5022               	movf	??_strchr,w,c
 19927  005174  6EF6               	movwf	tblptrl,c
 19928  005176  6EE9               	movwf	fsr0l,c
 19929  005178  0E05               	movlw	(high __ramtop+-1)
 19930  00517A  6EEA               	movwf	fsr0h,c
 19931  00517C  5023               	movf	??_strchr+1,w,c
 19932  00517E  64EA               	cpfsgt	fsr0h,c
 19933  005180  D003               	bra	u19487
 19934  005182  6EEA               	movwf	fsr0h,c
 19935  005184  50EF               	movf	indf0,w,c
 19936  005186  D003               	bra	u19480
 19937  005188                     u19487:
 19938  005188  6EF7               	movwf	tblptrh,c
 19939  00518A  0008               	tblrd		*
 19940  00518C  50F5               	movf	tablat,w,c
 19941  00518E                     u19480:
 19942  00518E  0900               	iorlw	0
 19943  005190  E1D5               	bnz	l2488
 19944  005192  6A1E               	clrf	?_strchr,c
 19945  005194  6A1F               	clrf	?_strchr+1,c
 19946  005196                     l2490:
 19947  005196  0012               	return	
 19948  005198                     __end_of_strchr:
 19949                           	opt stack 0
 19950                           tblptru	equ	0xFF8
 19951                           tblptrh	equ	0xFF7
 19952                           tblptrl	equ	0xFF6
 19953                           tablat	equ	0xFF5
 19954                           prodh	equ	0xFF4
 19955                           prodl	equ	0xFF3
 19956                           intcon	equ	0xFF2
 19957                           indf0	equ	0xFEF
 19958                           postinc0	equ	0xFEE
 19959                           fsr0h	equ	0xFEA
 19960                           fsr0l	equ	0xFE9
 19961                           wreg	equ	0xFE8
 19962                           indf1	equ	0xFE7
 19963                           postinc1	equ	0xFE6
 19964                           postdec1	equ	0xFE5
 19965                           fsr1h	equ	0xFE2
 19966                           fsr1l	equ	0xFE1
 19967                           indf2	equ	0xFDF
 19968                           postinc2	equ	0xFDE
 19969                           postdec2	equ	0xFDD
 19970                           plusw2	equ	0xFDB
 19971                           fsr2h	equ	0xFDA
 19972                           fsr2l	equ	0xFD9
 19973                           status	equ	0xFD8
 19974                           
 19975 ;; *************** function _stristr *****************
 19976 ;; Defined at:
 19977 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\stristr.c"
 19978 ;; Parameters:    Size  Location     Type
 19979 ;;  s1              2    6[BANK0 ] PTR const unsigned char 
 19980 ;;		 -> NULL(0), cmdbuf(80), 
 19981 ;;  s2              2    8[BANK0 ] PTR const unsigned char 
 19982 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 19983 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 19984 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 19985 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 19986 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 19987 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 19988 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 19989 ;;		 -> STR_8(5), STR_6(5), 
 19990 ;; Auto vars:     Size  Location     Type
 19991 ;;		None
 19992 ;; Return value:  Size  Location     Type
 19993 ;;                  2    6[BANK0 ] PTR unsigned char 
 19994 ;; Registers used:
 19995 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 19996 ;; Tracked objects:
 19997 ;;		On entry : F/0
 19998 ;;		On exit  : F/0
 19999 ;;		Unchanged: 0/0
 20000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20001 ;;      Params:         0       4       0       0       0       0       0
 20002 ;;      Locals:         0       0       0       0       0       0       0
 20003 ;;      Temps:          0       0       0       0       0       0       0
 20004 ;;      Totals:         0       4       0       0       0       0       0
 20005 ;;Total ram usage:        4 bytes
 20006 ;; Hardware stack levels used:    1
 20007 ;; Hardware stack levels required when called:    5
 20008 ;; This function calls:
 20009 ;;		_strlen
 20010 ;;		_strnicmp
 20011 ;;		_strichr
 20012 ;; This function is called by:
 20013 ;;		_doModeVerbose
 20014 ;; This function uses a non-reentrant model
 20015 ;;
 20016                           
 20017                           	psect	text47
 20018  004D6E                     __ptext47:
 20019                           	opt stack 0
 20020  004D6E                     _stristr:
 20021                           	opt stack 24
 20022                           
 20023                           ; BSR set to: 0
 20024                           
 20025                           ;incstack = 0
 20026                           ;incstack = 0
 20027  004D6E  D02F               	goto	l14329
 20028  004D70                     l14323:
 20029                           
 20030                           ; BSR set to: 0
 20031  004D70  C066  F060         	movff	stristr@s1,?_strnicmp
 20032  004D74  C067  F061         	movff	stristr@s1+1,?_strnicmp+1
 20033  004D78  C068  F062         	movff	stristr@s2,?_strnicmp+2
 20034  004D7C  C069  F063         	movff	stristr@s2+1,?_strnicmp+3
 20035  004D80  C068  F01E         	movff	stristr@s2,?_strlen
 20036  004D84  C069  F01F         	movff	stristr@s2+1,?_strlen+1
 20037  004D88  ECC6  F02A         	call	_strlen	;wreg free
 20038  004D8C  C01E  F064         	movff	?_strlen,?_strnicmp+4
 20039  004D90  C01F  F065         	movff	?_strlen+1,?_strnicmp+5
 20040  004D94  ECD8  F027         	call	_strnicmp	;wreg free
 20041  004D98  5161               	movf	(?_strnicmp+1)& (0+255),w,b
 20042  004D9A  1160               	iorwf	?_strnicmp& (0+255),w,b
 20043  004D9C  E105               	bnz	l14327
 20044                           
 20045                           ; BSR set to: 0
 20046  004D9E  C066  F066         	movff	stristr@s1,?_stristr
 20047  004DA2  C067  F067         	movff	stristr@s1+1,?_stristr+1
 20048  004DA6  D01F               	goto	l2509
 20049  004DA8                     l14327:
 20050                           
 20051                           ; BSR set to: 0
 20052  004DA8  2966               	incf	stristr@s1& (0+255),w,b
 20053  004DAA  6E1F               	movwf	?_strichr,c
 20054  004DAC  0E00               	movlw	0
 20055  004DAE  2167               	addwfc	(stristr@s1+1)& (0+255),w,b
 20056  004DB0  6E20               	movwf	?_strichr+1,c
 20057  004DB2  C068  FFF6         	movff	stristr@s2,tblptrl
 20058  004DB6  C069  FFF7         	movff	stristr@s2+1,tblptrh
 20059  004DBA  0008               	tblrd		*
 20060  004DBC  50F5               	movf	tablat,w,c
 20061  004DBE  6E21               	movwf	?_strichr+2,c
 20062  004DC0  6A22               	clrf	?_strichr+3,c
 20063  004DC2  EC88  F02A         	call	_strichr	;wreg free
 20064  004DC6  C01F  F066         	movff	?_strichr,stristr@s1
 20065  004DCA  C020  F067         	movff	?_strichr+1,stristr@s1+1
 20066  004DCE                     l14329:
 20067  004DCE  0100               	movlb	0	; () banked
 20068  004DD0  5167               	movf	(stristr@s1+1)& (0+255),w,b
 20069  004DD2  1166               	iorwf	stristr@s1& (0+255),w,b
 20070  004DD4  E006               	bz	l2512
 20071                           
 20072                           ; BSR set to: 0
 20073  004DD6  C066  FFD9         	movff	stristr@s1,fsr2l
 20074  004DDA  C067  FFDA         	movff	stristr@s1+1,fsr2h
 20075  004DDE  50DF               	movf	indf2,w,c
 20076  004DE0  E1C7               	bnz	l14323
 20077  004DE2                     l2512:
 20078                           
 20079                           ; BSR set to: 0
 20080  004DE2  6B66               	clrf	?_stristr& (0+255),b
 20081  004DE4  6B67               	clrf	(?_stristr+1)& (0+255),b
 20082  004DE6                     l2509:
 20083                           
 20084                           ; BSR set to: 0
 20085  004DE6  0012               	return	
 20086  004DE8                     __end_of_stristr:
 20087                           	opt stack 0
 20088                           tblptru	equ	0xFF8
 20089                           tblptrh	equ	0xFF7
 20090                           tblptrl	equ	0xFF6
 20091                           tablat	equ	0xFF5
 20092                           prodh	equ	0xFF4
 20093                           prodl	equ	0xFF3
 20094                           intcon	equ	0xFF2
 20095                           indf0	equ	0xFEF
 20096                           postinc0	equ	0xFEE
 20097                           fsr0h	equ	0xFEA
 20098                           fsr0l	equ	0xFE9
 20099                           wreg	equ	0xFE8
 20100                           indf1	equ	0xFE7
 20101                           postinc1	equ	0xFE6
 20102                           postdec1	equ	0xFE5
 20103                           fsr1h	equ	0xFE2
 20104                           fsr1l	equ	0xFE1
 20105                           indf2	equ	0xFDF
 20106                           postinc2	equ	0xFDE
 20107                           postdec2	equ	0xFDD
 20108                           plusw2	equ	0xFDB
 20109                           fsr2h	equ	0xFDA
 20110                           fsr2l	equ	0xFD9
 20111                           status	equ	0xFD8
 20112                           
 20113 ;; *************** function _strichr *****************
 20114 ;; Defined at:
 20115 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strichr.c"
 20116 ;; Parameters:    Size  Location     Type
 20117 ;;  ptr             2   30[COMRAM] PTR const unsigned char 
 20118 ;;		 -> NULL(0), cmdbuf(80), 
 20119 ;;  chr             2   32[COMRAM] int 
 20120 ;; Auto vars:     Size  Location     Type
 20121 ;;		None
 20122 ;; Return value:  Size  Location     Type
 20123 ;;                  2   30[COMRAM] PTR unsigned char 
 20124 ;; Registers used:
 20125 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20126 ;; Tracked objects:
 20127 ;;		On entry : F/0
 20128 ;;		On exit  : 0/0
 20129 ;;		Unchanged: 0/0
 20130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20131 ;;      Params:         4       0       0       0       0       0       0
 20132 ;;      Locals:         0       0       0       0       0       0       0
 20133 ;;      Temps:          0       0       0       0       0       0       0
 20134 ;;      Totals:         4       0       0       0       0       0       0
 20135 ;;Total ram usage:        4 bytes
 20136 ;; Hardware stack levels used:    1
 20137 ;; Hardware stack levels required when called:    4
 20138 ;; This function calls:
 20139 ;;		_toupper
 20140 ;; This function is called by:
 20141 ;;		_stristr
 20142 ;; This function uses a non-reentrant model
 20143 ;;
 20144                           
 20145                           	psect	text48
 20146  005510                     __ptext48:
 20147                           	opt stack 0
 20148  005510                     _strichr:
 20149                           	opt stack 24
 20150                           
 20151                           ; BSR set to: 0
 20152                           
 20153                           ; BSR set to: 0
 20154                           ;incstack = 0
 20155                           ;incstack = 0
 20156  005510  5021               	movf	strichr@chr,w,c
 20157  005512  ECEA  F02B         	call	_toupper
 20158  005516  6E21               	movwf	strichr@chr,c
 20159  005518  6A22               	clrf	strichr@chr+1,c
 20160  00551A  D010               	goto	l15349
 20161  00551C                     l15343:
 20162  00551C  C01F  FFD9         	movff	strichr@ptr,fsr2l
 20163  005520  C020  FFDA         	movff	strichr@ptr+1,fsr2h
 20164  005524  50DF               	movf	indf2,w,c
 20165  005526  ECEA  F02B         	call	_toupper
 20166  00552A  1821               	xorwf	strichr@chr,w,c
 20167  00552C  E105               	bnz	l15347
 20168  00552E  C01F  F01F         	movff	strichr@ptr,?_strichr
 20169  005532  C020  F020         	movff	strichr@ptr+1,?_strichr+1
 20170  005536  D00A               	goto	l2576
 20171  005538                     l15347:
 20172  005538  4A1F               	infsnz	strichr@ptr,f,c
 20173  00553A  2A20               	incf	strichr@ptr+1,f,c
 20174  00553C                     l15349:
 20175  00553C  C01F  FFD9         	movff	strichr@ptr,fsr2l
 20176  005540  C020  FFDA         	movff	strichr@ptr+1,fsr2h
 20177  005544  50DF               	movf	indf2,w,c
 20178  005546  E1EA               	bnz	l15343
 20179  005548  6A1F               	clrf	?_strichr,c
 20180  00554A  6A20               	clrf	?_strichr+1,c
 20181  00554C                     l2576:
 20182  00554C  0012               	return	
 20183  00554E                     __end_of_strichr:
 20184                           	opt stack 0
 20185                           tblptru	equ	0xFF8
 20186                           tblptrh	equ	0xFF7
 20187                           tblptrl	equ	0xFF6
 20188                           tablat	equ	0xFF5
 20189                           prodh	equ	0xFF4
 20190                           prodl	equ	0xFF3
 20191                           intcon	equ	0xFF2
 20192                           indf0	equ	0xFEF
 20193                           postinc0	equ	0xFEE
 20194                           fsr0h	equ	0xFEA
 20195                           fsr0l	equ	0xFE9
 20196                           wreg	equ	0xFE8
 20197                           indf1	equ	0xFE7
 20198                           postinc1	equ	0xFE6
 20199                           postdec1	equ	0xFE5
 20200                           fsr1h	equ	0xFE2
 20201                           fsr1l	equ	0xFE1
 20202                           indf2	equ	0xFDF
 20203                           postinc2	equ	0xFDE
 20204                           postdec2	equ	0xFDD
 20205                           plusw2	equ	0xFDB
 20206                           fsr2h	equ	0xFDA
 20207                           fsr2l	equ	0xFD9
 20208                           status	equ	0xFD8
 20209                           
 20210 ;; *************** function _strnicmp *****************
 20211 ;; Defined at:
 20212 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strnicmp.c"
 20213 ;; Parameters:    Size  Location     Type
 20214 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
 20215 ;;		 -> NULL(0), cmdbuf(80), 
 20216 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
 20217 ;;		 -> STR_129(6), STR_128(8), STR_126(6), STR_124(5), 
 20218 ;;		 -> STR_122(8), STR_121(6), STR_120(9), STR_118(11), 
 20219 ;;		 -> STR_116(8), STR_114(4), STR_113(5), STR_100(5), 
 20220 ;;		 -> STR_87(7), STR_81(5), STR_72(5), STR_49(5), 
 20221 ;;		 -> STR_47(5), STR_45(5), STR_43(4), STR_41(5), 
 20222 ;;		 -> STR_38(3), STR_29(3), STR_20(7), STR_18(8), 
 20223 ;;		 -> STR_16(7), STR_14(9), STR_12(6), STR_10(7), 
 20224 ;;		 -> STR_8(5), STR_6(5), 
 20225 ;;  len             2    4[BANK0 ] unsigned int 
 20226 ;; Auto vars:     Size  Location     Type
 20227 ;;  r               1   35[COMRAM] char 
 20228 ;; Return value:  Size  Location     Type
 20229 ;;                  2    0[BANK0 ] int 
 20230 ;; Registers used:
 20231 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 20232 ;; Tracked objects:
 20233 ;;		On entry : 0/0
 20234 ;;		On exit  : F/0
 20235 ;;		Unchanged: 0/0
 20236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20237 ;;      Params:         0       6       0       0       0       0       0
 20238 ;;      Locals:         1       0       0       0       0       0       0
 20239 ;;      Temps:          2       0       0       0       0       0       0
 20240 ;;      Totals:         3       6       0       0       0       0       0
 20241 ;;Total ram usage:        9 bytes
 20242 ;; Hardware stack levels used:    1
 20243 ;; Hardware stack levels required when called:    4
 20244 ;; This function calls:
 20245 ;;		_toupper
 20246 ;; This function is called by:
 20247 ;;		_stristr
 20248 ;; This function uses a non-reentrant model
 20249 ;;
 20250                           
 20251                           	psect	text49
 20252  004FB0                     __ptext49:
 20253                           	opt stack 0
 20254  004FB0                     _strnicmp:
 20255                           	opt stack 24
 20256                           
 20257                           ;incstack = 0
 20258                           ;incstack = 0
 20259  004FB0  D028               	goto	l15339
 20260  004FB2                     l15329:
 20261                           
 20262                           ; BSR set to: 0
 20263  004FB2  C062  FFF6         	movff	strnicmp@s2,tblptrl
 20264  004FB6  C063  FFF7         	movff	strnicmp@s2+1,tblptrh
 20265  004FBA  0008               	tblrd		*
 20266  004FBC  50F5               	movf	tablat,w,c
 20267  004FBE  ECEA  F02B         	call	_toupper
 20268  004FC2  6E22               	movwf	??_strnicmp& (0+255),c
 20269  004FC4  C060  FFD9         	movff	strnicmp@s1,fsr2l
 20270  004FC8  C061  FFDA         	movff	strnicmp@s1+1,fsr2h
 20271  004FCC  50DF               	movf	indf2,w,c
 20272  004FCE  ECEA  F02B         	call	_toupper
 20273  004FD2  6E23               	movwf	(??_strnicmp+1)& (0+255),c
 20274  004FD4  5022               	movf	??_strnicmp,w,c
 20275  004FD6  5C23               	subwf	??_strnicmp+1,w,c
 20276  004FD8  6E24               	movwf	strnicmp@r,c
 20277  004FDA  6624               	tstfsz	strnicmp@r& (0+255),c
 20278  004FDC  D006               	goto	l15333
 20279  004FDE  C060  FFD9         	movff	strnicmp@s1,fsr2l
 20280  004FE2  C061  FFDA         	movff	strnicmp@s1+1,fsr2h
 20281  004FE6  50DF               	movf	indf2,w,c
 20282  004FE8  E107               	bnz	l15337
 20283  004FEA                     l15333:
 20284  004FEA  5024               	movf	strnicmp@r,w,c
 20285  004FEC  0100               	movlb	0	; () banked
 20286  004FEE  6F60               	movwf	?_strnicmp& (0+255),b
 20287  004FF0  6B61               	clrf	(?_strnicmp+1)& (0+255),b
 20288  004FF2  BF60               	btfsc	?_strnicmp& (0+255),7,b
 20289  004FF4  0761               	decf	(?_strnicmp+1)& (0+255),f,b
 20290  004FF6  D00F               	goto	l2528
 20291  004FF8                     l15337:
 20292  004FF8  0100               	movlb	0	; () banked
 20293  004FFA  4B60               	infsnz	strnicmp@s1& (0+255),f,b
 20294  004FFC  2B61               	incf	(strnicmp@s1+1)& (0+255),f,b
 20295  004FFE  4B62               	infsnz	strnicmp@s2& (0+255),f,b
 20296  005000  2B63               	incf	(strnicmp@s2+1)& (0+255),f,b
 20297  005002                     l15339:
 20298  005002  0100               	movlb	0	; () banked
 20299  005004  0764               	decf	strnicmp@len& (0+255),f,b
 20300  005006  A0D8               	btfss	status,0,c
 20301  005008  0765               	decf	(strnicmp@len+1)& (0+255),f,b
 20302  00500A  2964               	incf	strnicmp@len& (0+255),w,b
 20303  00500C  B4D8               	btfsc	status,2,c
 20304  00500E  2965               	incf	(strnicmp@len+1)& (0+255),w,b
 20305  005010  E1D0               	bnz	l15329
 20306                           
 20307                           ; BSR set to: 0
 20308  005012  6B60               	clrf	?_strnicmp& (0+255),b
 20309  005014  6B61               	clrf	(?_strnicmp+1)& (0+255),b
 20310  005016                     l2528:
 20311                           
 20312                           ; BSR set to: 0
 20313  005016  0012               	return	
 20314  005018                     __end_of_strnicmp:
 20315                           	opt stack 0
 20316                           tblptru	equ	0xFF8
 20317                           tblptrh	equ	0xFF7
 20318                           tblptrl	equ	0xFF6
 20319                           tablat	equ	0xFF5
 20320                           prodh	equ	0xFF4
 20321                           prodl	equ	0xFF3
 20322                           intcon	equ	0xFF2
 20323                           indf0	equ	0xFEF
 20324                           postinc0	equ	0xFEE
 20325                           fsr0h	equ	0xFEA
 20326                           fsr0l	equ	0xFE9
 20327                           wreg	equ	0xFE8
 20328                           indf1	equ	0xFE7
 20329                           postinc1	equ	0xFE6
 20330                           postdec1	equ	0xFE5
 20331                           fsr1h	equ	0xFE2
 20332                           fsr1l	equ	0xFE1
 20333                           indf2	equ	0xFDF
 20334                           postinc2	equ	0xFDE
 20335                           postdec2	equ	0xFDD
 20336                           plusw2	equ	0xFDB
 20337                           fsr2h	equ	0xFDA
 20338                           fsr2l	equ	0xFD9
 20339                           status	equ	0xFD8
 20340                           
 20341 ;; *************** function _toupper *****************
 20342 ;; Defined at:
 20343 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\toupper.c"
 20344 ;; Parameters:    Size  Location     Type
 20345 ;;  c               1    wreg     unsigned char 
 20346 ;; Auto vars:     Size  Location     Type
 20347 ;;  c               1   29[COMRAM] unsigned char 
 20348 ;; Return value:  Size  Location     Type
 20349 ;;                  1    wreg      unsigned char 
 20350 ;; Registers used:
 20351 ;;		wreg, status,2, status,0
 20352 ;; Tracked objects:
 20353 ;;		On entry : 0/0
 20354 ;;		On exit  : 0/0
 20355 ;;		Unchanged: 0/0
 20356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20357 ;;      Params:         0       0       0       0       0       0       0
 20358 ;;      Locals:         1       0       0       0       0       0       0
 20359 ;;      Temps:          0       0       0       0       0       0       0
 20360 ;;      Totals:         1       0       0       0       0       0       0
 20361 ;;Total ram usage:        1 bytes
 20362 ;; Hardware stack levels used:    1
 20363 ;; Hardware stack levels required when called:    3
 20364 ;; This function calls:
 20365 ;;		Nothing
 20366 ;; This function is called by:
 20367 ;;		_strnicmp
 20368 ;;		_strichr
 20369 ;; This function uses a non-reentrant model
 20370 ;;
 20371                           
 20372                           	psect	text50
 20373  0057D4                     __ptext50:
 20374                           	opt stack 0
 20375  0057D4                     _toupper:
 20376                           	opt stack 24
 20377                           
 20378                           ; BSR set to: 0
 20379                           ;incstack = 0
 20380                           ;incstack = 0
 20381                           ;toupper@c stored from wreg
 20382  0057D4  CFE8 F01E          	movff	wreg,toupper@c
 20383  0057D8  0E7B               	movlw	123
 20384  0057DA  601E               	cpfslt	toupper@c,c
 20385  0057DC  D004               	goto	l15357
 20386  0057DE  0E60               	movlw	96
 20387  0057E0  641E               	cpfsgt	toupper@c,c
 20388  0057E2  D001               	goto	l15357
 20389  0057E4  9A1E               	bcf	toupper@c,5,c
 20390  0057E6                     l15357:
 20391  0057E6  501E               	movf	toupper@c,w,c
 20392  0057E8  0012               	return	
 20393  0057EA                     __end_of_toupper:
 20394                           	opt stack 0
 20395                           tblptru	equ	0xFF8
 20396                           tblptrh	equ	0xFF7
 20397                           tblptrl	equ	0xFF6
 20398                           tablat	equ	0xFF5
 20399                           prodh	equ	0xFF4
 20400                           prodl	equ	0xFF3
 20401                           intcon	equ	0xFF2
 20402                           indf0	equ	0xFEF
 20403                           postinc0	equ	0xFEE
 20404                           fsr0h	equ	0xFEA
 20405                           fsr0l	equ	0xFE9
 20406                           wreg	equ	0xFE8
 20407                           indf1	equ	0xFE7
 20408                           postinc1	equ	0xFE6
 20409                           postdec1	equ	0xFE5
 20410                           fsr1h	equ	0xFE2
 20411                           fsr1l	equ	0xFE1
 20412                           indf2	equ	0xFDF
 20413                           postinc2	equ	0xFDE
 20414                           postdec2	equ	0xFDD
 20415                           plusw2	equ	0xFDB
 20416                           fsr2h	equ	0xFDA
 20417                           fsr2l	equ	0xFD9
 20418                           status	equ	0xFD8
 20419                           
 20420 ;; *************** function _strlen *****************
 20421 ;; Defined at:
 20422 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\strlen.c"
 20423 ;; Parameters:    Size  Location     Type
 20424 ;;  s               2   29[COMRAM] PTR const unsigned char 
 20425 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20426 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20427 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20428 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20429 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20430 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20431 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20432 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20433 ;;		 -> cmdbuf(80), 
 20434 ;; Auto vars:     Size  Location     Type
 20435 ;;  cp              2   31[COMRAM] PTR const unsigned char 
 20436 ;;		 -> printGUID@buf(3), STR_129(6), STR_128(8), STR_126(6), 
 20437 ;;		 -> STR_124(5), STR_122(8), STR_121(6), STR_120(9), 
 20438 ;;		 -> STR_118(11), STR_116(8), STR_114(4), STR_113(5), 
 20439 ;;		 -> STR_100(5), STR_87(7), STR_81(5), STR_72(5), 
 20440 ;;		 -> wrkbuf(80), STR_49(5), STR_47(5), STR_45(5), 
 20441 ;;		 -> STR_43(4), STR_41(5), STR_38(3), STR_29(3), 
 20442 ;;		 -> STR_20(7), STR_18(8), STR_16(7), STR_14(9), 
 20443 ;;		 -> STR_12(6), STR_10(7), STR_8(5), STR_6(5), 
 20444 ;;		 -> cmdbuf(80), 
 20445 ;; Return value:  Size  Location     Type
 20446 ;;                  2   29[COMRAM] unsigned int 
 20447 ;; Registers used:
 20448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru
 20449 ;; Tracked objects:
 20450 ;;		On entry : E/1
 20451 ;;		On exit  : 0/0
 20452 ;;		Unchanged: 0/0
 20453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20454 ;;      Params:         2       0       0       0       0       0       0
 20455 ;;      Locals:         2       0       0       0       0       0       0
 20456 ;;      Temps:          0       0       0       0       0       0       0
 20457 ;;      Totals:         4       0       0       0       0       0       0
 20458 ;;Total ram usage:        4 bytes
 20459 ;; Hardware stack levels used:    1
 20460 ;; Hardware stack levels required when called:    3
 20461 ;; This function calls:
 20462 ;;		Nothing
 20463 ;; This function is called by:
 20464 ;;		_doModeSLCAN
 20465 ;;		_receiveSendEventSLCAN
 20466 ;;		_printGUID
 20467 ;;		_hexStringToBytes
 20468 ;;		_stristr
 20469 ;; This function uses a non-reentrant model
 20470 ;;
 20471                           
 20472                           	psect	text51
 20473  00558C                     __ptext51:
 20474                           	opt stack 0
 20475  00558C                     _strlen:
 20476                           	opt stack 25
 20477                           
 20478                           ;incstack = 0
 20479                           ;incstack = 0
 20480  00558C  C01E  F020         	movff	strlen@s,strlen@cp
 20481  005590  C01F  F021         	movff	strlen@s+1,strlen@cp+1
 20482  005594  D002               	goto	l12663
 20483  005596                     l12661:
 20484  005596  4A20               	infsnz	strlen@cp,f,c
 20485  005598  2A21               	incf	strlen@cp+1,f,c
 20486  00559A                     l12663:
 20487  00559A  5020               	movf	strlen@cp,w,c
 20488  00559C  6EF6               	movwf	tblptrl,c
 20489  00559E  6EE9               	movwf	fsr0l,c
 20490  0055A0  0E05               	movlw	(high __ramtop+-1)
 20491  0055A2  6EEA               	movwf	fsr0h,c
 20492  0055A4  5021               	movf	strlen@cp+1,w,c
 20493  0055A6  64EA               	cpfsgt	fsr0h,c
 20494  0055A8  D003               	bra	u16527
 20495  0055AA  6EEA               	movwf	fsr0h,c
 20496  0055AC  50EF               	movf	indf0,w,c
 20497  0055AE  D003               	bra	u16520
 20498  0055B0                     u16527:
 20499  0055B0  6EF7               	movwf	tblptrh,c
 20500  0055B2  0008               	tblrd		*
 20501  0055B4  50F5               	movf	tablat,w,c
 20502  0055B6                     u16520:
 20503  0055B6  0900               	iorlw	0
 20504  0055B8  E1EE               	bnz	l12661
 20505  0055BA  501E               	movf	strlen@s,w,c
 20506  0055BC  5C20               	subwf	strlen@cp,w,c
 20507  0055BE  6E1E               	movwf	?_strlen,c
 20508  0055C0  501F               	movf	strlen@s+1,w,c
 20509  0055C2  5821               	subwfb	strlen@cp+1,w,c
 20510  0055C4  6E1F               	movwf	?_strlen+1,c
 20511  0055C6  0012               	return	
 20512  0055C8                     __end_of_strlen:
 20513                           	opt stack 0
 20514                           tblptru	equ	0xFF8
 20515                           tblptrh	equ	0xFF7
 20516                           tblptrl	equ	0xFF6
 20517                           tablat	equ	0xFF5
 20518                           prodh	equ	0xFF4
 20519                           prodl	equ	0xFF3
 20520                           intcon	equ	0xFF2
 20521                           indf0	equ	0xFEF
 20522                           postinc0	equ	0xFEE
 20523                           fsr0h	equ	0xFEA
 20524                           fsr0l	equ	0xFE9
 20525                           wreg	equ	0xFE8
 20526                           indf1	equ	0xFE7
 20527                           postinc1	equ	0xFE6
 20528                           postdec1	equ	0xFE5
 20529                           fsr1h	equ	0xFE2
 20530                           fsr1l	equ	0xFE1
 20531                           indf2	equ	0xFDF
 20532                           postinc2	equ	0xFDE
 20533                           postdec2	equ	0xFDD
 20534                           plusw2	equ	0xFDB
 20535                           fsr2h	equ	0xFDA
 20536                           fsr2l	equ	0xFD9
 20537                           status	equ	0xFD8
 20538                           
 20539 ;; *************** function _receivePrintEventVerbose *****************
 20540 ;; Defined at:
 20541 ;;		line 1789 in file "main.c"
 20542 ;; Parameters:    Size  Location     Type
 20543 ;;		None
 20544 ;; Auto vars:     Size  Location     Type
 20545 ;;  i               1   60[BANK0 ] unsigned char 
 20546 ;; Return value:  Size  Location     Type
 20547 ;;                  1    wreg      enum E15660
 20548 ;; Registers used:
 20549 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20550 ;; Tracked objects:
 20551 ;;		On entry : F/0
 20552 ;;		On exit  : 0/0
 20553 ;;		Unchanged: 0/0
 20554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 20555 ;;      Params:         0       0       0       0       0       0       0
 20556 ;;      Locals:         0      13       0       0       0       0       0
 20557 ;;      Temps:          0       5       0       0       0       0       0
 20558 ;;      Totals:         0      18       0       0       0       0       0
 20559 ;;Total ram usage:       18 bytes
 20560 ;; Hardware stack levels used:    1
 20561 ;; Hardware stack levels required when called:    6
 20562 ;; This function calls:
 20563 ;;		_putsUSART
 20564 ;;		_sprintf
 20565 ;;		_getVSCPFrame
 20566 ;; This function is called by:
 20567 ;;		_doModeVerbose
 20568 ;; This function uses a non-reentrant model
 20569 ;;
 20570                           
 20571                           	psect	text52
 20572  002468                     __ptext52:
 20573                           	opt stack 0
 20574  002468                     _receivePrintEventVerbose:
 20575                           	opt stack 23
 20576                           
 20577                           ; BSR set to: 0
 20578                           ;main.c: 1790: uint8_t i;
 20579                           ;main.c: 1792: if (getVSCPFrame(&vscpClass,
 20580                           ;main.c: 1793: &vscpType,
 20581                           ;main.c: 1794: &vscpNodeId,
 20582                           ;main.c: 1795: &vscpPriority,
 20583                           ;main.c: 1796: &vscpSize,
 20584                           ;main.c: 1797: vscpData)) {
 20585                           
 20586                           ;incstack = 0
 20587                           ;incstack = 0
 20588  002468  0EE5               	movlw	low _vscpType
 20589  00246A  6F6B               	movwf	?_getVSCPFrame& (0+255),b
 20590  00246C  0EE2               	movlw	low _vscpNodeId
 20591  00246E  6F6C               	movwf	(?_getVSCPFrame+1)& (0+255),b
 20592  002470  0EE3               	movlw	low _vscpPriority
 20593  002472  6F6D               	movwf	(?_getVSCPFrame+2)& (0+255),b
 20594  002474  0EE4               	movlw	low _vscpSize
 20595  002476  6F6E               	movwf	(?_getVSCPFrame+3)& (0+255),b
 20596  002478  0E01               	movlw	high _vscpData
 20597  00247A  0100               	movlb	0	; () banked
 20598  00247C  6F70               	movwf	(?_getVSCPFrame+5)& (0+255),b
 20599  00247E  0EDC               	movlw	low _vscpData
 20600  002480  6F6F               	movwf	(?_getVSCPFrame+4)& (0+255),b
 20601  002482  0E3E               	movlw	_vscpClass& (0+255)
 20602  002484  EC78  F026         	call	_getVSCPFrame
 20603  002488  0900               	iorlw	0
 20604  00248A  E101 D12B          	bz	l14317
 20605                           
 20606                           ; BSR set to: 0
 20607                           ;main.c: 1800: cntRxFrames++;
 20608  00248E  0101               	movlb	1	; () banked
 20609  002490  2B0C               	incf	_cntRxFrames& (0+255),f,b
 20610  002492  0E00               	movlw	0
 20611  002494  230D               	addwfc	(_cntRxFrames+1)& (0+255),f,b
 20612  002496  230E               	addwfc	(_cntRxFrames+2)& (0+255),f,b
 20613  002498  230F               	addwfc	(_cntRxFrames+3)& (0+255),f,b
 20614                           
 20615                           ;main.c: 1801: cntRxBytes += vscpSize;
 20616  00249A  0100               	movlb	0	; () banked
 20617  00249C  51E4               	movf	_vscpSize& (0+255),w,b
 20618  00249E  0101               	movlb	1	; () banked
 20619  0024A0  2708               	addwf	_cntRxBytes& (0+255),f,b
 20620  0024A2  0E00               	movlw	0
 20621  0024A4  2309               	addwfc	(_cntRxBytes+1)& (0+255),f,b
 20622  0024A6  230A               	addwfc	(_cntRxBytes+2)& (0+255),f,b
 20623  0024A8  230B               	addwfc	(_cntRxBytes+3)& (0+255),f,b
 20624                           
 20625                           ; BSR set to: 1
 20626                           ;main.c: 1803: putsUSART((char *) "<Prio=");
 20627  0024AA  0E7F               	movlw	high STR_139
 20628  0024AC  6E20               	movwf	?_putsUSART+1,c
 20629  0024AE  0E42               	movlw	low STR_139
 20630  0024B0  6E1F               	movwf	?_putsUSART,c
 20631  0024B2  EC25  F029         	call	_putsUSART	;wreg free
 20632                           
 20633                           ;main.c: 1804: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpPriority);
 20634  0024B6  0100               	movlb	0	; () banked
 20635  0024B8  67DC               	tstfsz	_bHex& (0+255),b
 20636  0024BA  D004               	goto	l14235
 20637                           
 20638                           ; BSR set to: 0
 20639  0024BC  0E7F               	movlw	high STR_57
 20640  0024BE  6F91               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 20641  0024C0  0EEE               	movlw	low STR_57
 20642  0024C2  D003               	goto	L27
 20643  0024C4                     l14235:
 20644                           
 20645                           ; BSR set to: 0
 20646  0024C4  0E7F               	movlw	high STR_56
 20647  0024C6  6F91               	movwf	(_receivePrintEventVerbose$1278+1)& (0+255),b
 20648  0024C8  0E65               	movlw	low STR_56
 20649  0024CA                     L27:
 20650  0024CA  6F90               	movwf	_receivePrintEventVerbose$1278& (0+255),b
 20651                           
 20652                           ; BSR set to: 0
 20653  0024CC  0E01               	movlw	high _wrkbuf
 20654  0024CE  0100               	movlb	0	; () banked
 20655  0024D0  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20656  0024D2  0E74               	movlw	low _wrkbuf
 20657  0024D4  6F6D               	movwf	?_sprintf& (0+255),b
 20658  0024D6  C090  F06F         	movff	_receivePrintEventVerbose$1278,?_sprintf+2
 20659  0024DA  C091  F070         	movff	_receivePrintEventVerbose$1278+1,?_sprintf+3
 20660  0024DE  C0E3  F071         	movff	_vscpPriority,?_sprintf+4
 20661  0024E2  6B72               	clrf	(?_sprintf+5)& (0+255),b
 20662  0024E4  EC55  F00B         	call	_sprintf	;wreg free
 20663                           
 20664                           ; BSR set to: 0
 20665                           ;main.c: 1805: putsUSART(wrkbuf);
 20666  0024E8  0101               	movlb	1	; () banked
 20667  0024EA  0E01               	movlw	high _wrkbuf
 20668  0024EC  6E20               	movwf	?_putsUSART+1,c
 20669  0024EE  0E74               	movlw	low _wrkbuf
 20670  0024F0  6E1F               	movwf	?_putsUSART,c
 20671  0024F2  EC25  F029         	call	_putsUSART	;wreg free
 20672                           
 20673                           ;main.c: 1806: putsUSART((char *) ",class=");
 20674  0024F6  0E7E               	movlw	high STR_142
 20675  0024F8  6E20               	movwf	?_putsUSART+1,c
 20676  0024FA  0EF6               	movlw	low STR_142
 20677  0024FC  6E1F               	movwf	?_putsUSART,c
 20678  0024FE  EC25  F029         	call	_putsUSART	;wreg free
 20679                           
 20680                           ;main.c: 1807: sprintf(wrkbuf, bHex ? "0x%04X" : "%d", vscpClass);
 20681  002502  0100               	movlb	0	; () banked
 20682  002504  67DC               	tstfsz	_bHex& (0+255),b
 20683  002506  D004               	goto	l14247
 20684                           
 20685                           ; BSR set to: 0
 20686  002508  0E7F               	movlw	high STR_57
 20687  00250A  6F93               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 20688  00250C  0EEE               	movlw	low STR_57
 20689  00250E  D003               	goto	L28
 20690  002510                     l14247:
 20691                           
 20692                           ; BSR set to: 0
 20693  002510  0E7F               	movlw	high STR_143
 20694  002512  6F93               	movwf	(_receivePrintEventVerbose$1283+1)& (0+255),b
 20695  002514  0E6C               	movlw	low STR_143
 20696  002516                     L28:
 20697  002516  6F92               	movwf	_receivePrintEventVerbose$1283& (0+255),b
 20698                           
 20699                           ; BSR set to: 0
 20700  002518  0E01               	movlw	high _wrkbuf
 20701  00251A  0100               	movlb	0	; () banked
 20702  00251C  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20703  00251E  0E74               	movlw	low _wrkbuf
 20704  002520  6F6D               	movwf	?_sprintf& (0+255),b
 20705  002522  C092  F06F         	movff	_receivePrintEventVerbose$1283,?_sprintf+2
 20706  002526  C093  F070         	movff	_receivePrintEventVerbose$1283+1,?_sprintf+3
 20707  00252A  C03E  F071         	movff	_vscpClass,?_sprintf+4
 20708  00252E  C03F  F072         	movff	_vscpClass+1,?_sprintf+5
 20709  002532  EC55  F00B         	call	_sprintf	;wreg free
 20710                           
 20711                           ; BSR set to: 0
 20712                           ;main.c: 1808: putsUSART(wrkbuf);
 20713  002536  0101               	movlb	1	; () banked
 20714  002538  0E01               	movlw	high _wrkbuf
 20715  00253A  6E20               	movwf	?_putsUSART+1,c
 20716  00253C  0E74               	movlw	low _wrkbuf
 20717  00253E  6E1F               	movwf	?_putsUSART,c
 20718  002540  EC25  F029         	call	_putsUSART	;wreg free
 20719                           
 20720                           ;main.c: 1809: putsUSART((char *) ",type=");
 20721  002544  0E7F               	movlw	high STR_145
 20722  002546  6E20               	movwf	?_putsUSART+1,c
 20723  002548  0E34               	movlw	low STR_145
 20724  00254A  6E1F               	movwf	?_putsUSART,c
 20725  00254C  EC25  F029         	call	_putsUSART	;wreg free
 20726                           
 20727                           ;main.c: 1810: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpType);
 20728  002550  0100               	movlb	0	; () banked
 20729  002552  67DC               	tstfsz	_bHex& (0+255),b
 20730  002554  D004               	goto	l14259
 20731                           
 20732                           ; BSR set to: 0
 20733  002556  0E7F               	movlw	high STR_57
 20734  002558  6F95               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 20735  00255A  0EEE               	movlw	low STR_57
 20736  00255C  D003               	goto	L29
 20737  00255E                     l14259:
 20738                           
 20739                           ; BSR set to: 0
 20740  00255E  0E7F               	movlw	high STR_56
 20741  002560  6F95               	movwf	(_receivePrintEventVerbose$1288+1)& (0+255),b
 20742  002562  0E65               	movlw	low STR_56
 20743  002564                     L29:
 20744  002564  6F94               	movwf	_receivePrintEventVerbose$1288& (0+255),b
 20745                           
 20746                           ; BSR set to: 0
 20747  002566  0E01               	movlw	high _wrkbuf
 20748  002568  0100               	movlb	0	; () banked
 20749  00256A  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20750  00256C  0E74               	movlw	low _wrkbuf
 20751  00256E  6F6D               	movwf	?_sprintf& (0+255),b
 20752  002570  C094  F06F         	movff	_receivePrintEventVerbose$1288,?_sprintf+2
 20753  002574  C095  F070         	movff	_receivePrintEventVerbose$1288+1,?_sprintf+3
 20754  002578  C0E5  F071         	movff	_vscpType,?_sprintf+4
 20755  00257C  6B72               	clrf	(?_sprintf+5)& (0+255),b
 20756  00257E  EC55  F00B         	call	_sprintf	;wreg free
 20757                           
 20758                           ; BSR set to: 0
 20759                           ;main.c: 1811: putsUSART(wrkbuf);
 20760  002582  0101               	movlb	1	; () banked
 20761  002584  0E01               	movlw	high _wrkbuf
 20762  002586  6E20               	movwf	?_putsUSART+1,c
 20763  002588  0E74               	movlw	low _wrkbuf
 20764  00258A  6E1F               	movwf	?_putsUSART,c
 20765  00258C  EC25  F029         	call	_putsUSART	;wreg free
 20766                           
 20767                           ;main.c: 1812: putsUSART((char *) ",nodeid=");
 20768  002590  0E7E               	movlw	high STR_148
 20769  002592  6E20               	movwf	?_putsUSART+1,c
 20770  002594  0EC4               	movlw	low STR_148
 20771  002596  6E1F               	movwf	?_putsUSART,c
 20772  002598  EC25  F029         	call	_putsUSART	;wreg free
 20773                           
 20774                           ;main.c: 1813: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpNodeId);
 20775  00259C  0100               	movlb	0	; () banked
 20776  00259E  67DC               	tstfsz	_bHex& (0+255),b
 20777  0025A0  D004               	goto	l14271
 20778                           
 20779                           ; BSR set to: 0
 20780  0025A2  0E7F               	movlw	high STR_57
 20781  0025A4  6F97               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 20782  0025A6  0EEE               	movlw	low STR_57
 20783  0025A8  D003               	goto	L30
 20784  0025AA                     l14271:
 20785                           
 20786                           ; BSR set to: 0
 20787  0025AA  0E7F               	movlw	high STR_56
 20788  0025AC  6F97               	movwf	(_receivePrintEventVerbose$1293+1)& (0+255),b
 20789  0025AE  0E65               	movlw	low STR_56
 20790  0025B0                     L30:
 20791  0025B0  6F96               	movwf	_receivePrintEventVerbose$1293& (0+255),b
 20792                           
 20793                           ; BSR set to: 0
 20794  0025B2  0E01               	movlw	high _wrkbuf
 20795  0025B4  0100               	movlb	0	; () banked
 20796  0025B6  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20797  0025B8  0E74               	movlw	low _wrkbuf
 20798  0025BA  6F6D               	movwf	?_sprintf& (0+255),b
 20799  0025BC  C096  F06F         	movff	_receivePrintEventVerbose$1293,?_sprintf+2
 20800  0025C0  C097  F070         	movff	_receivePrintEventVerbose$1293+1,?_sprintf+3
 20801  0025C4  C0E2  F071         	movff	_vscpNodeId,?_sprintf+4
 20802  0025C8  6B72               	clrf	(?_sprintf+5)& (0+255),b
 20803  0025CA  EC55  F00B         	call	_sprintf	;wreg free
 20804                           
 20805                           ; BSR set to: 0
 20806                           ;main.c: 1814: putsUSART(wrkbuf);
 20807  0025CE  0101               	movlb	1	; () banked
 20808  0025D0  0E01               	movlw	high _wrkbuf
 20809  0025D2  6E20               	movwf	?_putsUSART+1,c
 20810  0025D4  0E74               	movlw	low _wrkbuf
 20811  0025D6  6E1F               	movwf	?_putsUSART,c
 20812  0025D8  EC25  F029         	call	_putsUSART	;wreg free
 20813                           
 20814                           ;main.c: 1815: putsUSART((char *) ",size=");
 20815  0025DC  0E7F               	movlw	high STR_151
 20816  0025DE  6E20               	movwf	?_putsUSART+1,c
 20817  0025E0  0E3B               	movlw	low STR_151
 20818  0025E2  6E1F               	movwf	?_putsUSART,c
 20819  0025E4  EC25  F029         	call	_putsUSART	;wreg free
 20820                           
 20821                           ;main.c: 1816: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpSize);
 20822  0025E8  0100               	movlb	0	; () banked
 20823  0025EA  67DC               	tstfsz	_bHex& (0+255),b
 20824  0025EC  D004               	goto	l14283
 20825                           
 20826                           ; BSR set to: 0
 20827  0025EE  0E7F               	movlw	high STR_57
 20828  0025F0  6F99               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 20829  0025F2  0EEE               	movlw	low STR_57
 20830  0025F4  D003               	goto	L31
 20831  0025F6                     l14283:
 20832                           
 20833                           ; BSR set to: 0
 20834  0025F6  0E7F               	movlw	high STR_56
 20835  0025F8  6F99               	movwf	(_receivePrintEventVerbose$1298+1)& (0+255),b
 20836  0025FA  0E65               	movlw	low STR_56
 20837  0025FC                     L31:
 20838  0025FC  6F98               	movwf	_receivePrintEventVerbose$1298& (0+255),b
 20839                           
 20840                           ; BSR set to: 0
 20841  0025FE  0E01               	movlw	high _wrkbuf
 20842  002600  0100               	movlb	0	; () banked
 20843  002602  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20844  002604  0E74               	movlw	low _wrkbuf
 20845  002606  6F6D               	movwf	?_sprintf& (0+255),b
 20846  002608  C098  F06F         	movff	_receivePrintEventVerbose$1298,?_sprintf+2
 20847  00260C  C099  F070         	movff	_receivePrintEventVerbose$1298+1,?_sprintf+3
 20848  002610  C0E4  F071         	movff	_vscpSize,?_sprintf+4
 20849  002614  6B72               	clrf	(?_sprintf+5)& (0+255),b
 20850  002616  EC55  F00B         	call	_sprintf	;wreg free
 20851                           
 20852                           ; BSR set to: 0
 20853                           ;main.c: 1817: putsUSART(wrkbuf);
 20854  00261A  0101               	movlb	1	; () banked
 20855  00261C  0E01               	movlw	high _wrkbuf
 20856  00261E  6E20               	movwf	?_putsUSART+1,c
 20857  002620  0E74               	movlw	low _wrkbuf
 20858  002622  6E1F               	movwf	?_putsUSART,c
 20859  002624  EC25  F029         	call	_putsUSART	;wreg free
 20860                           
 20861                           ;main.c: 1818: if (vscpSize > 0) {
 20862  002628  0100               	movlb	0	; () banked
 20863  00262A  51E4               	movf	_vscpSize& (0+255),w,b
 20864  00262C  E04D               	bz	l14311
 20865                           
 20866                           ; BSR set to: 0
 20867                           ;main.c: 1819: putsUSART((char *) ",Data=");
 20868  00262E  0E7F               	movlw	high STR_154
 20869  002630  6E20               	movwf	?_putsUSART+1,c
 20870  002632  0E2D               	movlw	low STR_154
 20871  002634  6E1F               	movwf	?_putsUSART,c
 20872  002636  EC25  F029         	call	_putsUSART	;wreg free
 20873                           
 20874                           ;main.c: 1820: for (i = 0; i < vscpSize; i++) {
 20875  00263A  0100               	movlb	0	; () banked
 20876  00263C  6B9C               	clrf	receivePrintEventVerbose@i& (0+255),b
 20877  00263E  D040               	goto	l14309
 20878  002640                     l929:
 20879                           
 20880                           ; BSR set to: 0
 20881                           ;main.c: 1822: sprintf(wrkbuf, bHex ? "0x%02X" : "%d", vscpData[i]);
 20882  002640  67DC               	tstfsz	_bHex& (0+255),b
 20883  002642  D004               	goto	l14297
 20884                           
 20885                           ; BSR set to: 0
 20886  002644  0E7F               	movlw	high STR_57
 20887  002646  6F9B               	movwf	(_receivePrintEventVerbose$1303+1)& (0+255),b
 20888  002648  0EEE               	movlw	low STR_57
 20889  00264A  D003               	goto	L32
 20890  00264C                     l14297:
 20891                           
 20892                           ; BSR set to: 0
 20893  00264C  0E7F               	movlw	high STR_56
 20894  00264E  6F9B               	movwf	(_receivePrintEventVerbose$1303+1)& (0+255),b
 20895  002650  0E65               	movlw	low STR_56
 20896  002652                     L32:
 20897  002652  6F9A               	movwf	_receivePrintEventVerbose$1303& (0+255),b
 20898                           
 20899                           ; BSR set to: 0
 20900  002654  0E01               	movlw	high _wrkbuf
 20901  002656  0100               	movlb	0	; () banked
 20902  002658  6F6E               	movwf	(?_sprintf+1)& (0+255),b
 20903  00265A  0E74               	movlw	low _wrkbuf
 20904  00265C  6F6D               	movwf	?_sprintf& (0+255),b
 20905  00265E  C09A  F06F         	movff	_receivePrintEventVerbose$1303,?_sprintf+2
 20906  002662  C09B  F070         	movff	_receivePrintEventVerbose$1303+1,?_sprintf+3
 20907  002666  0EDC               	movlw	low _vscpData
 20908  002668  259C               	addwf	receivePrintEventVerbose@i& (0+255),w,b
 20909  00266A  6ED9               	movwf	fsr2l,c
 20910  00266C  6ADA               	clrf	fsr2h,c
 20911  00266E  0E01               	movlw	high _vscpData
 20912  002670  22DA               	addwfc	fsr2h,f,c
 20913  002672  50DF               	movf	indf2,w,c
 20914  002674  6F71               	movwf	(?_sprintf+4)& (0+255),b
 20915  002676  6B72               	clrf	(?_sprintf+5)& (0+255),b
 20916  002678  EC55  F00B         	call	_sprintf	;wreg free
 20917                           
 20918                           ; BSR set to: 0
 20919                           ;main.c: 1823: putsUSART(wrkbuf);
 20920  00267C  0101               	movlb	1	; () banked
 20921  00267E  0E01               	movlw	high _wrkbuf
 20922  002680  6E20               	movwf	?_putsUSART+1,c
 20923  002682  0E74               	movlw	low _wrkbuf
 20924  002684  6E1F               	movwf	?_putsUSART,c
 20925  002686  EC25  F029         	call	_putsUSART	;wreg free
 20926                           
 20927                           ;main.c: 1824: if (i < (vscpSize - 1)) {
 20928  00268A  0EFF               	movlw	255
 20929  00268C  0100               	movlb	0	; () banked
 20930  00268E  25E4               	addwf	_vscpSize& (0+255),w,b
 20931  002690  6F8B               	movwf	??_receivePrintEventVerbose& (0+255),b
 20932  002692  6B8C               	clrf	(??_receivePrintEventVerbose+1)& (0+255),b
 20933  002694  0EFF               	movlw	255
 20934  002696  238C               	addwfc	(??_receivePrintEventVerbose+1)& (0+255),f,b
 20935  002698  519C               	movf	receivePrintEventVerbose@i& (0+255),w,b
 20936  00269A  6F8D               	movwf	(??_receivePrintEventVerbose+2)& (0+255),b
 20937  00269C  6B8E               	clrf	(??_receivePrintEventVerbose+3)& (0+255),b
 20938  00269E  518E               	movf	(??_receivePrintEventVerbose+3)& (0+255),w,b
 20939  0026A0  0A80               	xorlw	128
 20940  0026A2  6F8F               	movwf	(??_receivePrintEventVerbose+4)& (0+255),b
 20941  0026A4  518B               	movf	??_receivePrintEventVerbose& (0+255),w,b
 20942  0026A6  5D8D               	subwf	(??_receivePrintEventVerbose+2)& (0+255),w,b
 20943  0026A8  518C               	movf	(??_receivePrintEventVerbose+1)& (0+255),w,b
 20944  0026AA  0A80               	xorlw	128
 20945  0026AC  598F               	subwfb	(??_receivePrintEventVerbose+4)& (0+255),w,b
 20946  0026AE  E206               	bc	l14307
 20947                           
 20948                           ; BSR set to: 0
 20949                           ;main.c: 1825: putsUSART((char *) ",");
 20950  0026B0  0E7F               	movlw	high STR_30
 20951  0026B2  6E20               	movwf	?_putsUSART+1,c
 20952  0026B4  0EF5               	movlw	low STR_30
 20953  0026B6  6E1F               	movwf	?_putsUSART,c
 20954  0026B8  EC25  F029         	call	_putsUSART	;wreg free
 20955  0026BC                     l14307:
 20956  0026BC  0100               	movlb	0	; () banked
 20957  0026BE  2B9C               	incf	receivePrintEventVerbose@i& (0+255),f,b
 20958  0026C0                     l14309:
 20959                           
 20960                           ; BSR set to: 0
 20961  0026C0  51E4               	movf	_vscpSize& (0+255),w,b
 20962  0026C2  5D9C               	subwf	receivePrintEventVerbose@i& (0+255),w,b
 20963  0026C4  E207               	bc	l936
 20964  0026C6  D7BC               	goto	l929
 20965  0026C8                     l14311:
 20966                           
 20967                           ; BSR set to: 0
 20968                           ;main.c: 1829: putsUSART((char *) ",Data=none");
 20969  0026C8  0E7E               	movlw	high STR_158
 20970  0026CA  6E20               	movwf	?_putsUSART+1,c
 20971  0026CC  0E92               	movlw	low STR_158
 20972  0026CE  6E1F               	movwf	?_putsUSART,c
 20973  0026D0  EC25  F029         	call	_putsUSART	;wreg free
 20974  0026D4                     l936:
 20975                           
 20976                           ;main.c: 1830: }
 20977                           ;main.c: 1831: putsUSART((char *) ">\r\n");
 20978  0026D4  0E7F               	movlw	high STR_159
 20979  0026D6  6E20               	movwf	?_putsUSART+1,c
 20980  0026D8  0ED5               	movlw	low STR_159
 20981  0026DA  6E1F               	movwf	?_putsUSART,c
 20982  0026DC  EC25  F029         	call	_putsUSART	;wreg free
 20983                           
 20984                           ;main.c: 1832: return 1;
 20985  0026E0  0E01               	movlw	1
 20986  0026E2  D001               	goto	l937
 20987  0026E4                     l14317:
 20988                           
 20989                           ; BSR set to: 0
 20990                           ;main.c: 1833: }
 20991                           ;main.c: 1835: return 0;
 20992  0026E4  0E00               	movlw	0
 20993  0026E6                     l937:
 20994  0026E6  0012               	return	
 20995  0026E8                     __end_of_receivePrintEventVerbose:
 20996                           	opt stack 0
 20997                           tblptru	equ	0xFF8
 20998                           tblptrh	equ	0xFF7
 20999                           tblptrl	equ	0xFF6
 21000                           tablat	equ	0xFF5
 21001                           prodh	equ	0xFF4
 21002                           prodl	equ	0xFF3
 21003                           intcon	equ	0xFF2
 21004                           indf0	equ	0xFEF
 21005                           postinc0	equ	0xFEE
 21006                           fsr0h	equ	0xFEA
 21007                           fsr0l	equ	0xFE9
 21008                           wreg	equ	0xFE8
 21009                           indf1	equ	0xFE7
 21010                           postinc1	equ	0xFE6
 21011                           postdec1	equ	0xFE5
 21012                           fsr1h	equ	0xFE2
 21013                           fsr1l	equ	0xFE1
 21014                           indf2	equ	0xFDF
 21015                           postinc2	equ	0xFDE
 21016                           postdec2	equ	0xFDD
 21017                           plusw2	equ	0xFDB
 21018                           fsr2h	equ	0xFDA
 21019                           fsr2l	equ	0xFD9
 21020                           status	equ	0xFD8
 21021                           
 21022 ;; *************** function _getVSCPFrame *****************
 21023 ;; Defined at:
 21024 ;;		line 2997 in file "main.c"
 21025 ;; Parameters:    Size  Location     Type
 21026 ;;  pvscpclass      1    wreg     PTR unsigned short 
 21027 ;;		 -> vscpClass(2), 
 21028 ;;  pvscptype       1   11[BANK0 ] PTR unsigned char 
 21029 ;;		 -> vscpType(1), 
 21030 ;;  pNodeId         1   12[BANK0 ] PTR unsigned char 
 21031 ;;		 -> vscpNodeId(1), 
 21032 ;;  pPriority       1   13[BANK0 ] PTR unsigned char 
 21033 ;;		 -> vscpPriority(1), 
 21034 ;;  pSize           1   14[BANK0 ] PTR unsigned char 
 21035 ;;		 -> vscpSize(1), 
 21036 ;;  pData           2   15[BANK0 ] PTR unsigned char 
 21037 ;;		 -> vscpData(8), 
 21038 ;; Auto vars:     Size  Location     Type
 21039 ;;  pvscpclass      1   21[BANK0 ] PTR unsigned short 
 21040 ;;		 -> vscpClass(2), 
 21041 ;;  id              4   22[BANK0 ] unsigned long 
 21042 ;; Return value:  Size  Location     Type
 21043 ;;                  1    wreg      unsigned char 
 21044 ;; Registers used:
 21045 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21046 ;; Tracked objects:
 21047 ;;		On entry : F/0
 21048 ;;		On exit  : F/0
 21049 ;;		Unchanged: 0/0
 21050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21051 ;;      Params:         0       6       0       0       0       0       0
 21052 ;;      Locals:         0       5       0       0       0       0       0
 21053 ;;      Temps:          0       4       0       0       0       0       0
 21054 ;;      Totals:         0      15       0       0       0       0       0
 21055 ;;Total ram usage:       15 bytes
 21056 ;; Hardware stack levels used:    1
 21057 ;; Hardware stack levels required when called:    5
 21058 ;; This function calls:
 21059 ;;		_getCANFrame
 21060 ;; This function is called by:
 21061 ;;		_receivePrintEventVerbose
 21062 ;;		_readRegister
 21063 ;;		_readRegisterExtended
 21064 ;;		_writeRegisterExtended
 21065 ;; This function uses a non-reentrant model
 21066 ;;
 21067                           
 21068                           	psect	text53
 21069  004CF0                     __ptext53:
 21070                           	opt stack 0
 21071  004CF0                     _getVSCPFrame:
 21072                           	opt stack 22
 21073                           
 21074                           ;incstack = 0
 21075                           ;incstack = 0
 21076                           ;getVSCPFrame@pvscpclass stored from wreg
 21077  004CF0  CFE8 F075          	movff	wreg,getVSCPFrame@pvscpclass
 21078                           
 21079                           ; BSR set to: 0
 21080                           ;main.c: 2998: uint32_t id;
 21081                           ;main.c: 3000: if (!getCANFrame(&id, pSize, pData)) {
 21082  004CF4  C06E  F068         	movff	getVSCPFrame@pSize,?_getCANFrame
 21083  004CF8  C06F  F069         	movff	getVSCPFrame@pData,?_getCANFrame+1
 21084  004CFC  C070  F06A         	movff	getVSCPFrame@pData+1,?_getCANFrame+2
 21085  004D00  0E76               	movlw	getVSCPFrame@id& (0+255)
 21086  004D02  ECC1  F024         	call	_getCANFrame
 21087  004D06  0900               	iorlw	0
 21088  004D08  E102               	bnz	l15087
 21089                           
 21090                           ; BSR set to: 0
 21091                           ;main.c: 3001: return 0;
 21092  004D0A  0E00               	movlw	0
 21093  004D0C  D02F               	goto	l1278
 21094  004D0E                     l15087:
 21095                           
 21096                           ; BSR set to: 0
 21097                           ;main.c: 3002: }
 21098                           ;main.c: 3004: *pNodeId = id & 0x0ff;
 21099  004D0E  516C               	movf	getVSCPFrame@pNodeId& (0+255),w,b
 21100  004D10  6ED9               	movwf	fsr2l,c
 21101  004D12  6ADA               	clrf	fsr2h,c
 21102  004D14  C076  FFDF         	movff	getVSCPFrame@id,indf2
 21103                           
 21104                           ;main.c: 3005: *pvscptype = (id >> 8) & 0xff;
 21105  004D18  516B               	movf	getVSCPFrame@pvscptype& (0+255),w,b
 21106  004D1A  6ED9               	movwf	fsr2l,c
 21107  004D1C  6ADA               	clrf	fsr2h,c
 21108  004D1E  C077  FFDF         	movff	getVSCPFrame@id+1,indf2
 21109                           
 21110                           ; BSR set to: 0
 21111                           ;main.c: 3006: *pvscpclass = (id >> 16) & 0x1ff;
 21112  004D22  0100               	movlb	0	; () banked
 21113  004D24  5178               	movf	(getVSCPFrame@id+2)& (0+255),w,b
 21114  004D26  6F71               	movwf	??_getVSCPFrame& (0+255),b
 21115  004D28  0E01               	movlw	1
 21116  004D2A  1579               	andwf	(getVSCPFrame@id+3)& (0+255),w,b
 21117  004D2C  6F72               	movwf	(??_getVSCPFrame+1)& (0+255),b
 21118  004D2E  5175               	movf	getVSCPFrame@pvscpclass& (0+255),w,b
 21119  004D30  6ED9               	movwf	fsr2l,c
 21120  004D32  6ADA               	clrf	fsr2h,c
 21121  004D34  C071  FFDE         	movff	??_getVSCPFrame,postinc2
 21122  004D38  C072  FFDD         	movff	??_getVSCPFrame+1,postdec2
 21123                           
 21124                           ; BSR set to: 0
 21125                           ;main.c: 3007: *pPriority = (uint16_t) (0x07 & (id >> 26));
 21126  004D3C  516D               	movf	getVSCPFrame@pPriority& (0+255),w,b
 21127  004D3E  6ED9               	movwf	fsr2l,c
 21128  004D40  6ADA               	clrf	fsr2h,c
 21129  004D42  C076  F071         	movff	getVSCPFrame@id,??_getVSCPFrame
 21130  004D46  C077  F072         	movff	getVSCPFrame@id+1,??_getVSCPFrame+1
 21131  004D4A  C078  F073         	movff	getVSCPFrame@id+2,??_getVSCPFrame+2
 21132  004D4E  C079  F074         	movff	getVSCPFrame@id+3,??_getVSCPFrame+3
 21133  004D52  0E1B               	movlw	27
 21134  004D54  D005               	goto	u20710
 21135  004D56                     u20715:
 21136  004D56  90D8               	bcf	status,0,c
 21137  004D58  3374               	rrcf	(??_getVSCPFrame+3)& (0+255),f,b
 21138  004D5A  3373               	rrcf	(??_getVSCPFrame+2)& (0+255),f,b
 21139  004D5C  3372               	rrcf	(??_getVSCPFrame+1)& (0+255),f,b
 21140  004D5E  3371               	rrcf	??_getVSCPFrame& (0+255),f,b
 21141  004D60                     u20710:
 21142  004D60  2EE8               	decfsz	wreg,f,c
 21143  004D62  D7F9               	goto	u20715
 21144  004D64  5171               	movf	??_getVSCPFrame& (0+255),w,b
 21145  004D66  0B07               	andlw	7
 21146  004D68  6EDF               	movwf	indf2,c
 21147                           
 21148                           ; BSR set to: 0
 21149                           ;main.c: 3009: return 1;
 21150  004D6A  0E01               	movlw	1
 21151  004D6C                     l1278:
 21152                           
 21153                           ; BSR set to: 0
 21154  004D6C  0012               	return	
 21155  004D6E                     __end_of_getVSCPFrame:
 21156                           	opt stack 0
 21157                           tblptru	equ	0xFF8
 21158                           tblptrh	equ	0xFF7
 21159                           tblptrl	equ	0xFF6
 21160                           tablat	equ	0xFF5
 21161                           prodh	equ	0xFF4
 21162                           prodl	equ	0xFF3
 21163                           intcon	equ	0xFF2
 21164                           indf0	equ	0xFEF
 21165                           postinc0	equ	0xFEE
 21166                           fsr0h	equ	0xFEA
 21167                           fsr0l	equ	0xFE9
 21168                           wreg	equ	0xFE8
 21169                           indf1	equ	0xFE7
 21170                           postinc1	equ	0xFE6
 21171                           postdec1	equ	0xFE5
 21172                           fsr1h	equ	0xFE2
 21173                           fsr1l	equ	0xFE1
 21174                           indf2	equ	0xFDF
 21175                           postinc2	equ	0xFDE
 21176                           postdec2	equ	0xFDD
 21177                           plusw2	equ	0xFDB
 21178                           fsr2h	equ	0xFDA
 21179                           fsr2l	equ	0xFD9
 21180                           status	equ	0xFD8
 21181                           
 21182 ;; *************** function _getCANFrame *****************
 21183 ;; Defined at:
 21184 ;;		line 3033 in file "main.c"
 21185 ;; Parameters:    Size  Location     Type
 21186 ;;  pid             1    wreg     PTR unsigned long 
 21187 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21188 ;;  pdlc            1    8[BANK0 ] PTR unsigned char 
 21189 ;;		 -> receiveSendEventSLCAN@dlc(1), receiveSendMultiEventCANAL@dlc(1), receiveSendEventCANAL@dlc(1), vscpSize(1), 
 21190 ;;  pdata           2    9[BANK0 ] PTR unsigned char 
 21191 ;;		 -> receiveSendMultiEventCANAL@data(8), receiveSendEventCANAL@data(8), vscpData(8), 
 21192 ;; Auto vars:     Size  Location     Type
 21193 ;;  pid             1   35[COMRAM] PTR unsigned long 
 21194 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@id(4), 
 21195 ;; Return value:  Size  Location     Type
 21196 ;;                  1    wreg      unsigned char 
 21197 ;; Registers used:
 21198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 21199 ;; Tracked objects:
 21200 ;;		On entry : F/0
 21201 ;;		On exit  : F/0
 21202 ;;		Unchanged: 0/0
 21203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21204 ;;      Params:         0       3       0       0       0       0       0
 21205 ;;      Locals:         1       0       0       0       0       0       0
 21206 ;;      Temps:          0       0       0       0       0       0       0
 21207 ;;      Totals:         1       3       0       0       0       0       0
 21208 ;;Total ram usage:        4 bytes
 21209 ;; Hardware stack levels used:    1
 21210 ;; Hardware stack levels required when called:    4
 21211 ;; This function calls:
 21212 ;;		_fifo_read
 21213 ;; This function is called by:
 21214 ;;		_receiveSendEventCANAL
 21215 ;;		_receiveSendMultiEventCANAL
 21216 ;;		_receiveSendEventSLCAN
 21217 ;;		_getVSCPFrame
 21218 ;; This function uses a non-reentrant model
 21219 ;;
 21220                           
 21221                           	psect	text54
 21222  004982                     __ptext54:
 21223                           	opt stack 0
 21224  004982                     _getCANFrame:
 21225                           	opt stack 24
 21226                           
 21227                           ; BSR set to: 0
 21228                           ;incstack = 0
 21229                           ;incstack = 0
 21230                           ;getCANFrame@pid stored from wreg
 21231  004982  CFE8 F024          	movff	wreg,getCANFrame@pid
 21232                           
 21233                           ; BSR set to: 0
 21234                           ;main.c: 3054: if ( fifo_canrxcount ) {
 21235  004986  5035               	movf	_fifo_canrxcount,w,c	;volatile
 21236  004988  E013               	bz	l15105
 21237                           
 21238                           ; BSR set to: 0
 21239                           ;main.c: 3057: (INTCONbits.GIE = 0);
 21240  00498A  9EF2               	bcf	intcon,7,c	;volatile
 21241                           
 21242                           ; BSR set to: 0
 21243                           ;main.c: 3058: if ( 4 != fifo_read( &canInputFifo, (uint8_t *)pid, 4 ) ) {
 21244  00498C  0101               	movlb	1	; () banked
 21245  00498E  0E01               	movlw	high _canInputFifo
 21246  004990  6E1F               	movwf	?_fifo_read+1,c
 21247  004992  0EC4               	movlw	low _canInputFifo
 21248  004994  6E1E               	movwf	?_fifo_read,c
 21249  004996  C024  F020         	movff	getCANFrame@pid,?_fifo_read+2
 21250  00499A  6A21               	clrf	?_fifo_read+3,c
 21251  00499C  6A23               	clrf	?_fifo_read+5,c
 21252  00499E  0E04               	movlw	4
 21253  0049A0  6E22               	movwf	?_fifo_read+4,c
 21254  0049A2  ECDE  F020         	call	_fifo_read	;wreg free
 21255  0049A6  501E               	movf	?_fifo_read,w,c
 21256  0049A8  0A04               	xorlw	4
 21257  0049AA  101F               	iorwf	?_fifo_read+1,w,c
 21258  0049AC  E003               	bz	l15109
 21259  0049AE                     l15103:
 21260                           
 21261                           ; BSR set to: 0
 21262                           ;main.c: 3059: (INTCONbits.GIE = 1);
 21263  0049AE  8EF2               	bsf	intcon,7,c	;volatile
 21264  0049B0                     l15105:
 21265                           
 21266                           ; BSR set to: 0
 21267                           ;main.c: 3060: return 0;
 21268  0049B0  0E00               	movlw	0
 21269  0049B2  D035               	goto	l1287
 21270  0049B4                     l15109:
 21271                           
 21272                           ; BSR set to: 0
 21273                           ;main.c: 3061: }
 21274                           ;main.c: 3064: if ( 1 != fifo_read( &canInputFifo, pdlc, 1 ) ) {
 21275  0049B4  0E01               	movlw	high _canInputFifo
 21276  0049B6  6E1F               	movwf	?_fifo_read+1,c
 21277  0049B8  0EC4               	movlw	low _canInputFifo
 21278  0049BA  6E1E               	movwf	?_fifo_read,c
 21279  0049BC  0100               	movlb	0	; () banked
 21280  0049BE  C068  F020         	movff	getCANFrame@pdlc,?_fifo_read+2
 21281  0049C2  6A21               	clrf	?_fifo_read+3,c
 21282  0049C4  6A23               	clrf	?_fifo_read+5,c
 21283  0049C6  0E01               	movlw	1
 21284  0049C8  6E22               	movwf	?_fifo_read+4,c
 21285  0049CA  ECDE  F020         	call	_fifo_read	;wreg free
 21286  0049CE  041E               	decf	?_fifo_read,w,c
 21287  0049D0  101F               	iorwf	?_fifo_read+1,w,c
 21288  0049D2  E1ED               	bnz	l15103
 21289                           
 21290                           ; BSR set to: 0
 21291                           ;main.c: 3067: }
 21292                           ;main.c: 3070: if ( *pdlc > 8 ) {
 21293  0049D4  5168               	movf	getCANFrame@pdlc& (0+255),w,b
 21294  0049D6  6ED9               	movwf	fsr2l,c
 21295  0049D8  6ADA               	clrf	fsr2h,c
 21296  0049DA  0E08               	movlw	8
 21297  0049DC  64DF               	cpfsgt	indf2,c
 21298  0049DE  D004               	goto	l15121
 21299                           
 21300                           ; BSR set to: 0
 21301                           ;main.c: 3071: *pdlc = 0;
 21302  0049E0  5168               	movf	getCANFrame@pdlc& (0+255),w,b
 21303  0049E2  6ED9               	movwf	fsr2l,c
 21304  0049E4  6ADA               	clrf	fsr2h,c
 21305  0049E6  6ADF               	clrf	indf2,c
 21306  0049E8                     l15121:
 21307                           
 21308                           ; BSR set to: 0
 21309                           ;main.c: 3072: }
 21310                           ;main.c: 3075: if ( *pdlc != fifo_read( &canInputFifo, pdata, *pdlc ) ) {
 21311  0049E8  0E01               	movlw	high _canInputFifo
 21312  0049EA  6E1F               	movwf	?_fifo_read+1,c
 21313  0049EC  0EC4               	movlw	low _canInputFifo
 21314  0049EE  6E1E               	movwf	?_fifo_read,c
 21315  0049F0  C069  F020         	movff	getCANFrame@pdata,?_fifo_read+2
 21316  0049F4  C06A  F021         	movff	getCANFrame@pdata+1,?_fifo_read+3
 21317  0049F8  0100               	movlb	0	; () banked
 21318  0049FA  5168               	movf	getCANFrame@pdlc& (0+255),w,b
 21319  0049FC  6ED9               	movwf	fsr2l,c
 21320  0049FE  6ADA               	clrf	fsr2h,c
 21321  004A00  50DF               	movf	indf2,w,c
 21322  004A02  6E22               	movwf	?_fifo_read+4,c
 21323  004A04  6A23               	clrf	?_fifo_read+5,c
 21324  004A06  ECDE  F020         	call	_fifo_read	;wreg free
 21325  004A0A  5168               	movf	getCANFrame@pdlc& (0+255),w,b
 21326  004A0C  6ED9               	movwf	fsr2l,c
 21327  004A0E  6ADA               	clrf	fsr2h,c
 21328  004A10  50DF               	movf	indf2,w,c
 21329  004A12  181E               	xorwf	?_fifo_read,w,c
 21330  004A14  101F               	iorwf	?_fifo_read+1,w,c
 21331  004A16  E1CB               	bnz	l15103
 21332                           
 21333                           ; BSR set to: 0
 21334                           ;main.c: 3078: }
 21335                           ;main.c: 3080: fifo_canrxcount--;
 21336  004A18  0635               	decf	_fifo_canrxcount,f,c	;volatile
 21337                           
 21338                           ; BSR set to: 0
 21339                           ;main.c: 3082: (INTCONbits.GIE = 1);
 21340  004A1A  8EF2               	bsf	intcon,7,c	;volatile
 21341                           
 21342                           ; BSR set to: 0
 21343                           ;main.c: 3084: return 1;
 21344  004A1C  0E01               	movlw	1
 21345  004A1E                     l1287:
 21346                           
 21347                           ; BSR set to: 0
 21348  004A1E  0012               	return	
 21349  004A20                     __end_of_getCANFrame:
 21350                           	opt stack 0
 21351                           tblptru	equ	0xFF8
 21352                           tblptrh	equ	0xFF7
 21353                           tblptrl	equ	0xFF6
 21354                           tablat	equ	0xFF5
 21355                           prodh	equ	0xFF4
 21356                           prodl	equ	0xFF3
 21357                           intcon	equ	0xFF2
 21358                           indf0	equ	0xFEF
 21359                           postinc0	equ	0xFEE
 21360                           fsr0h	equ	0xFEA
 21361                           fsr0l	equ	0xFE9
 21362                           wreg	equ	0xFE8
 21363                           indf1	equ	0xFE7
 21364                           postinc1	equ	0xFE6
 21365                           postdec1	equ	0xFE5
 21366                           fsr1h	equ	0xFE2
 21367                           fsr1l	equ	0xFE1
 21368                           indf2	equ	0xFDF
 21369                           postinc2	equ	0xFDE
 21370                           postdec2	equ	0xFDD
 21371                           plusw2	equ	0xFDB
 21372                           fsr2h	equ	0xFDA
 21373                           fsr2l	equ	0xFD9
 21374                           status	equ	0xFD8
 21375                           
 21376 ;; *************** function _fifo_read *****************
 21377 ;; Defined at:
 21378 ;;		line 29 in file "fifo.c"
 21379 ;; Parameters:    Size  Location     Type
 21380 ;;  f               2   29[COMRAM] PTR struct .
 21381 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 21382 ;;  buf             2   31[COMRAM] PTR const void 
 21383 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21384 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21385 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21386 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21387 ;;  nbytes          2   33[COMRAM] unsigned short 
 21388 ;; Auto vars:     Size  Location     Type
 21389 ;;  i               2    6[BANK0 ] unsigned short 
 21390 ;;  p               2    4[BANK0 ] PTR unsigned char 
 21391 ;;		 -> getVSCPFrame@id(4), receiveSendEventSLCAN@dlc(1), receiveSendEventSLCAN@id(4), receiveSendMultiEventCANAL@data(8
      +), 
 21392 ;;		 -> receiveSendMultiEventCANAL@dlc(1), receiveSendMultiEventCANAL@id(4), receiveSendEventCANAL@data(8), receiveSendE
      +ventCANAL@dlc(1), 
 21393 ;;		 -> receiveSendEventCANAL@id(4), doModeSLCAN@c(1), doModeVscp@c(1), vscpData(8), 
 21394 ;;		 -> vscpSize(1), doModeVerbose@c(1), main@c(1), 
 21395 ;; Return value:  Size  Location     Type
 21396 ;;                  2   29[COMRAM] unsigned short 
 21397 ;; Registers used:
 21398 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 21399 ;; Tracked objects:
 21400 ;;		On entry : C/0
 21401 ;;		On exit  : F/0
 21402 ;;		Unchanged: 0/0
 21403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21404 ;;      Params:         6       0       0       0       0       0       0
 21405 ;;      Locals:         0       4       0       0       0       0       0
 21406 ;;      Temps:          0       4       0       0       0       0       0
 21407 ;;      Totals:         6       8       0       0       0       0       0
 21408 ;;Total ram usage:       14 bytes
 21409 ;; Hardware stack levels used:    1
 21410 ;; Hardware stack levels required when called:    3
 21411 ;; This function calls:
 21412 ;;		Nothing
 21413 ;; This function is called by:
 21414 ;;		_main
 21415 ;;		_doModeVerbose
 21416 ;;		_doModeVscp
 21417 ;;		_doModeSLCAN
 21418 ;;		_getCANFrame
 21419 ;; This function uses a non-reentrant model
 21420 ;;
 21421                           
 21422                           	psect	text55
 21423  0041BC                     __ptext55:
 21424                           	opt stack 0
 21425  0041BC                     _fifo_read:
 21426                           	opt stack 24
 21427                           
 21428                           ;fifo.c: 30: uint16_t i;
 21429                           ;fifo.c: 31: uint8_t *p;
 21430                           ;fifo.c: 32: p = buf;
 21431                           
 21432                           ; BSR set to: 0
 21433                           ;incstack = 0
 21434                           ;incstack = 0
 21435  0041BC  C020  F064         	movff	fifo_read@buf,fifo_read@p
 21436  0041C0  C021  F065         	movff	fifo_read@buf+1,fifo_read@p+1
 21437                           
 21438                           ;fifo.c: 34: for (i = 0; i < nbytes; i++) {
 21439  0041C4  0100               	movlb	0	; () banked
 21440  0041C6  6B66               	clrf	fifo_read@i& (0+255),b
 21441  0041C8  6B67               	clrf	(fifo_read@i+1)& (0+255),b
 21442  0041CA  D04A               	goto	l13279
 21443  0041CC                     l13265:
 21444                           
 21445                           ; BSR set to: 0
 21446                           ;fifo.c: 36: if ( f->tail != f->head ) {
 21447  0041CC  EE20 F002          	lfsr	2,2
 21448  0041D0  D851               	call	PL34	;call to abstracted procedure
 21449  0041D2  18E5               	xorwf	postdec1,w,c
 21450  0041D4  CFDF FFE8          	movff	indf2,wreg
 21451  0041D8  B4D8               	btfsc	status,2,c
 21452  0041DA  18E7               	xorwf	indf1,w,c
 21453  0041DC  E03A               	bz	l1538
 21454                           
 21455                           ; BSR set to: 0
 21456                           ;fifo.c: 37: *p++ = f->buf[ f->tail ];
 21457  0041DE  EE20 F004          	lfsr	2,4
 21458  0041E2  501E               	movf	fifo_read@f,w,c
 21459  0041E4  26D9               	addwf	fsr2l,f,c
 21460  0041E6  501F               	movf	fifo_read@f+1,w,c
 21461  0041E8  22DA               	addwfc	fsr2h,f,c
 21462  0041EA  CFDE F060          	movff	postinc2,??_fifo_read
 21463  0041EE  CFDD F061          	movff	postdec2,??_fifo_read+1
 21464  0041F2  C01E  FFD9         	movff	fifo_read@f,fsr2l
 21465  0041F6  C01F  FFDA         	movff	fifo_read@f+1,fsr2h
 21466  0041FA  CFDE F062          	movff	postinc2,??_fifo_read+2
 21467  0041FE  CFDD F063          	movff	postdec2,??_fifo_read+3
 21468  004202  5160               	movf	??_fifo_read& (0+255),w,b
 21469  004204  2562               	addwf	(??_fifo_read+2)& (0+255),w,b
 21470  004206  6ED9               	movwf	fsr2l,c
 21471  004208  5161               	movf	(??_fifo_read+1)& (0+255),w,b
 21472  00420A  2163               	addwfc	(??_fifo_read+3)& (0+255),w,b
 21473  00420C  6EDA               	movwf	fsr2h,c
 21474  00420E  C064  FFE1         	movff	fifo_read@p,fsr1l
 21475  004212  C065  FFE2         	movff	fifo_read@p+1,fsr1h
 21476  004216  CFDF FFE7          	movff	indf2,indf1
 21477                           
 21478                           ; BSR set to: 0
 21479  00421A  4B64               	infsnz	fifo_read@p& (0+255),f,b
 21480  00421C  2B65               	incf	(fifo_read@p+1)& (0+255),f,b
 21481                           
 21482                           ; BSR set to: 0
 21483                           ;fifo.c: 38: f->tail++;
 21484  00421E  EE20 F004          	lfsr	2,4
 21485  004222  501E               	movf	fifo_read@f,w,c
 21486  004224  26D9               	addwf	fsr2l,f,c
 21487  004226  501F               	movf	fifo_read@f+1,w,c
 21488  004228  22DA               	addwfc	fsr2h,f,c
 21489  00422A  2ADE               	incf	postinc2,f,c
 21490  00422C  0E00               	movlw	0
 21491  00422E  22DD               	addwfc	postdec2,f,c
 21492                           
 21493                           ; BSR set to: 0
 21494                           ;fifo.c: 39: if (f->tail >= f->size) {
 21495  004230  EE20 F006          	lfsr	2,6
 21496  004234  D81F               	call	PL34	;call to abstracted procedure
 21497  004236  5CE5               	subwf	postdec1,w,c
 21498  004238  E102               	bnz	u17485
 21499  00423A  50DF               	movf	indf2,w,c
 21500  00423C  5CE7               	subwf	indf1,w,c
 21501  00423E                     u17485:
 21502  00423E  E30E               	bnc	l13277
 21503                           
 21504                           ; BSR set to: 0
 21505                           ;fifo.c: 40: f->tail = 0;
 21506  004240  EE20 F004          	lfsr	2,4
 21507  004244  501E               	movf	fifo_read@f,w,c
 21508  004246  26D9               	addwf	fsr2l,f,c
 21509  004248  501F               	movf	fifo_read@f+1,w,c
 21510  00424A  22DA               	addwfc	fsr2h,f,c
 21511  00424C  6ADE               	clrf	postinc2,c
 21512  00424E  6ADD               	clrf	postdec2,c
 21513  004250  D005               	goto	l13277
 21514  004252                     l1538:
 21515                           
 21516                           ; BSR set to: 0
 21517                           ;fifo.c: 43: else {
 21518                           ;fifo.c: 44: return i;
 21519  004252  C066  F01E         	movff	fifo_read@i,?_fifo_read
 21520  004256  C067  F01F         	movff	fifo_read@i+1,?_fifo_read+1
 21521  00425A  D00B               	goto	l1541
 21522  00425C                     l13277:
 21523                           
 21524                           ; BSR set to: 0
 21525  00425C  4B66               	infsnz	fifo_read@i& (0+255),f,b
 21526  00425E  2B67               	incf	(fifo_read@i+1)& (0+255),f,b
 21527  004260                     l13279:
 21528                           
 21529                           ; BSR set to: 0
 21530  004260  5022               	movf	fifo_read@nbytes,w,c
 21531  004262  5D66               	subwf	fifo_read@i& (0+255),w,b
 21532  004264  5023               	movf	fifo_read@nbytes+1,w,c
 21533  004266  5967               	subwfb	(fifo_read@i+1)& (0+255),w,b
 21534  004268  E3B1               	bnc	l13265
 21535                           
 21536                           ; BSR set to: 0
 21537                           ;fifo.c: 45: }
 21538                           ;fifo.c: 47: }
 21539                           ;fifo.c: 49: return nbytes;
 21540  00426A  C022  F01E         	movff	fifo_read@nbytes,?_fifo_read
 21541  00426E  C023  F01F         	movff	fifo_read@nbytes+1,?_fifo_read+1
 21542  004272                     l1541:
 21543                           
 21544                           ; BSR set to: 0
 21545  004272  0012               	return	
 21546  004274                     __end_of_fifo_read:
 21547                           	opt stack 0
 21548  004274                     PL34:
 21549                           	opt stack 24
 21550  004274  501E               	movf	fifo_read@f,w,c
 21551  004276  26D9               	addwf	fsr2l,f,c
 21552  004278  501F               	movf	fifo_read@f+1,w,c
 21553  00427A  22DA               	addwfc	fsr2h,f,c
 21554  00427C  EE10 F004          	lfsr	1,4
 21555  004280  501E               	movf	fifo_read@f,w,c
 21556  004282  26E1               	addwf	fsr1l,f,c
 21557  004284  501F               	movf	fifo_read@f+1,w,c
 21558  004286  22E2               	addwfc	fsr1h,f,c
 21559  004288  52E6               	movf	postinc1,f,c
 21560  00428A  52DE               	movf	postinc2,f,c
 21561  00428C  50DD               	movf	postdec2,w,c
 21562  00428E  0012               	return	
 21563  004290                     __end_ofPL34:
 21564                           	opt stack 0
 21565                           tblptru	equ	0xFF8
 21566                           tblptrh	equ	0xFF7
 21567                           tblptrl	equ	0xFF6
 21568                           tablat	equ	0xFF5
 21569                           prodh	equ	0xFF4
 21570                           prodl	equ	0xFF3
 21571                           intcon	equ	0xFF2
 21572                           indf0	equ	0xFEF
 21573                           postinc0	equ	0xFEE
 21574                           fsr0h	equ	0xFEA
 21575                           fsr0l	equ	0xFE9
 21576                           wreg	equ	0xFE8
 21577                           indf1	equ	0xFE7
 21578                           postinc1	equ	0xFE6
 21579                           postdec1	equ	0xFE5
 21580                           fsr1h	equ	0xFE2
 21581                           fsr1l	equ	0xFE1
 21582                           indf2	equ	0xFDF
 21583                           postinc2	equ	0xFDE
 21584                           postdec2	equ	0xFDD
 21585                           plusw2	equ	0xFDB
 21586                           fsr2h	equ	0xFDA
 21587                           fsr2l	equ	0xFD9
 21588                           status	equ	0xFD8
 21589                           
 21590 ;; *************** function _sprintf *****************
 21591 ;; Defined at:
 21592 ;;		line 493 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\doprnt.c"
 21593 ;; Parameters:    Size  Location     Type
 21594 ;;  sp              2   13[BANK0 ] PTR unsigned char 
 21595 ;;		 -> wrkbuf(80), 
 21596 ;;  f               2   15[BANK0 ] PTR const unsigned char 
 21597 ;;		 -> STR_201(3), STR_200(7), STR_194(3), STR_193(7), 
 21598 ;;		 -> STR_190(4), STR_189(8), STR_186(4), STR_185(8), 
 21599 ;;		 -> STR_182(4), STR_181(8), STR_178(4), STR_177(8), 
 21600 ;;		 -> STR_174(4), STR_173(7), STR_170(4), STR_169(7), 
 21601 ;;		 -> STR_166(4), STR_165(7), STR_162(4), STR_161(7), 
 21602 ;;		 -> STR_156(3), STR_155(7), STR_153(3), STR_152(7), 
 21603 ;;		 -> STR_150(3), STR_149(7), STR_147(3), STR_146(7), 
 21604 ;;		 -> STR_144(3), STR_143(7), STR_141(3), STR_140(7), 
 21605 ;;		 -> STR_84(3), STR_83(7), STR_68(3), STR_67(7), 
 21606 ;;		 -> STR_66(3), STR_65(7), STR_62(3), STR_61(7), 
 21607 ;;		 -> STR_59(3), STR_58(7), STR_57(3), STR_56(7), 
 21608 ;; Auto vars:     Size  Location     Type
 21609 ;;  idx             1   24[BANK0 ] unsigned char 
 21610 ;;  _val            4   36[BANK0 ] struct .
 21611 ;;  flag            2   41[BANK0 ] unsigned short 
 21612 ;;  width           2   34[BANK0 ] int 
 21613 ;;  prec            2   32[BANK0 ] int 
 21614 ;;  c               1   40[BANK0 ] char 
 21615 ;;  ap              1   31[BANK0 ] PTR void [1]
 21616 ;;		 -> ?_sprintf(2), 
 21617 ;; Return value:  Size  Location     Type
 21618 ;;                  2   13[BANK0 ] int 
 21619 ;; Registers used:
 21620 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21621 ;; Tracked objects:
 21622 ;;		On entry : F/0
 21623 ;;		On exit  : F/0
 21624 ;;		Unchanged: 0/0
 21625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 21626 ;;      Params:         0       8       0       0       0       0       0
 21627 ;;      Locals:         0      19       0       0       0       0       0
 21628 ;;      Temps:          0       3       0       0       0       0       0
 21629 ;;      Totals:         0      30       0       0       0       0       0
 21630 ;;Total ram usage:       30 bytes
 21631 ;; Hardware stack levels used:    1
 21632 ;; Hardware stack levels required when called:    4
 21633 ;; This function calls:
 21634 ;;		_isdigit
 21635 ;;		___lldiv
 21636 ;;		___llmod
 21637 ;;		___wmul
 21638 ;; This function is called by:
 21639 ;;		_doModeVerbose
 21640 ;;		_receivePrintEventVerbose
 21641 ;;		_printStatistics
 21642 ;;		_printErrors
 21643 ;; This function uses a non-reentrant model
 21644 ;;
 21645                           
 21646                           	psect	text56
 21647  0016AA                     __ptext56:
 21648                           	opt stack 0
 21649  0016AA                     _sprintf:
 21650                           	opt stack 25
 21651                           
 21652                           ; BSR set to: 0
 21653                           ;doprnt.c: 494: va_list ap;
 21654                           ;doprnt.c: 499: signed char c;
 21655                           ;doprnt.c: 501: int width;
 21656                           ;doprnt.c: 504: int prec;
 21657                           ;doprnt.c: 508: unsigned short flag;
 21658                           ;doprnt.c: 527: union {
 21659                           ;doprnt.c: 528: unsigned long _val;
 21660                           ;doprnt.c: 529: struct {
 21661                           ;doprnt.c: 530: const char * _cp;
 21662                           ;doprnt.c: 531: unsigned _len;
 21663                           ;doprnt.c: 532: } _str;
 21664                           ;doprnt.c: 533: } _val;
 21665                           ;doprnt.c: 542: *ap = __va_start();
 21666                           
 21667                           ; BSR set to: 0
 21668                           ;incstack = 0
 21669                           ;incstack = 0
 21670  0016AA  0E71               	movlw	low (?_sprintf+4)
 21671  0016AC  6F7F               	movwf	sprintf@ap& (0+255),b
 21672                           
 21673                           ;doprnt.c: 545: while(c = *f++) {
 21674  0016AE  D332               	goto	l12081
 21675  0016B0                     l11747:
 21676                           
 21677                           ; BSR set to: 0
 21678                           ;doprnt.c: 547: if(c != '%')
 21679  0016B0  5188               	movf	sprintf@c& (0+255),w,b
 21680  0016B2  0A25               	xorlw	37
 21681  0016B4  E009               	bz	l1625
 21682                           
 21683                           ; BSR set to: 0
 21684                           ;doprnt.c: 549: {
 21685                           ;doprnt.c: 550: ((*sp++ = (c)));
 21686  0016B6  C06D  FFD9         	movff	sprintf@sp,fsr2l
 21687  0016BA  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 21688  0016BE  C088  FFDF         	movff	sprintf@c,indf2
 21689                           
 21690                           ; BSR set to: 0
 21691  0016C2  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 21692  0016C4  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 21693                           
 21694                           ;doprnt.c: 551: continue;
 21695  0016C6  D326               	goto	l12081
 21696  0016C8                     l1625:
 21697                           
 21698                           ; BSR set to: 0
 21699                           ;doprnt.c: 552: }
 21700                           ;doprnt.c: 555: width = 0;
 21701  0016C8  6B82               	clrf	sprintf@width& (0+255),b
 21702  0016CA  6B83               	clrf	(sprintf@width+1)& (0+255),b
 21703                           
 21704                           ;doprnt.c: 557: flag = 0;
 21705  0016CC  6B89               	clrf	sprintf@flag& (0+255),b
 21706  0016CE  6B8A               	clrf	(sprintf@flag+1)& (0+255),b
 21707  0016D0  D009               	goto	l11763
 21708  0016D2                     l11753:
 21709                           
 21710                           ; BSR set to: 0
 21711                           ;doprnt.c: 563: flag |= 0x08;
 21712  0016D2  8789               	bsf	sprintf@flag& (0+255),3,b
 21713  0016D4  D005               	goto	L33
 21714  0016D6                     l11755:
 21715                           
 21716                           ; BSR set to: 0
 21717                           ;doprnt.c: 570: flag |= 0x01;
 21718  0016D6  8189               	bsf	sprintf@flag& (0+255),0,b
 21719  0016D8  D003               	goto	L33
 21720  0016DA                     l11757:
 21721                           
 21722                           ; BSR set to: 0
 21723                           ;doprnt.c: 583: flag |= 0x800;
 21724  0016DA  878A               	bsf	(sprintf@flag+1)& (0+255),3,b
 21725  0016DC  D001               	goto	L33
 21726  0016DE                     l11759:
 21727                           
 21728                           ; BSR set to: 0
 21729                           ;doprnt.c: 589: flag |= 0x04;
 21730  0016DE  8589               	bsf	sprintf@flag& (0+255),2,b
 21731  0016E0                     L33:
 21732                           
 21733                           ;doprnt.c: 590: f++;
 21734  0016E0  4B6F               	infsnz	sprintf@f& (0+255),f,b
 21735  0016E2  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 21736  0016E4                     l11763:
 21737                           
 21738                           ; BSR set to: 0
 21739  0016E4  C06F  FFF6         	movff	sprintf@f,tblptrl
 21740  0016E8  C070  FFF7         	movff	sprintf@f+1,tblptrh
 21741  0016EC  0008               	tblrd		*
 21742  0016EE  50F5               	movf	tablat,w,c
 21743                           
 21744                           ; Switch size 1, requested type "space"
 21745                           ; Number of cases is 4, Range of values is 32 to 48
 21746                           ; switch strategies available:
 21747                           ; Name         Instructions Cycles
 21748                           ; simple_byte           13     7 (average)
 21749                           ;	Chosen strategy is simple_byte
 21750  0016F0  0A20               	xorlw	32	; case 32
 21751  0016F2  E0F1               	bz	l11755
 21752  0016F4  0A03               	xorlw	3	; case 35
 21753  0016F6  E0F1               	bz	l11757
 21754  0016F8  0A0E               	xorlw	14	; case 45
 21755  0016FA  E0EB               	bz	l11753
 21756  0016FC  0A1D               	xorlw	29	; case 48
 21757  0016FE  E0EF               	bz	l11759
 21758                           
 21759                           ; BSR set to: 0
 21760                           ;doprnt.c: 602: if(flag & 0x08)
 21761  001700  B789               	btfsc	sprintf@flag& (0+255),3,b
 21762                           
 21763                           ; BSR set to: 0
 21764                           ;doprnt.c: 603: flag &= ~0x04;
 21765  001702  9589               	bcf	sprintf@flag& (0+255),2,b
 21766                           
 21767                           ; BSR set to: 0
 21768                           ;doprnt.c: 606: if(isdigit((unsigned)*f)) {
 21769  001704  C06F  FFF6         	movff	sprintf@f,tblptrl
 21770  001708  C070  FFF7         	movff	sprintf@f+1,tblptrh
 21771  00170C  0008               	tblrd		*
 21772  00170E  50F5               	movf	tablat,w,c
 21773  001710  ECB1  F02B         	call	_isdigit
 21774  001714  E327               	bnc	l11779
 21775                           
 21776                           ;doprnt.c: 607: width = 0;
 21777  001716  0100               	movlb	0	; () banked
 21778  001718  6B82               	clrf	sprintf@width& (0+255),b
 21779  00171A  6B83               	clrf	(sprintf@width+1)& (0+255),b
 21780  00171C                     l11771:
 21781                           
 21782                           ;doprnt.c: 609: width *= 10;
 21783  00171C  C082  F01E         	movff	sprintf@width,?___wmul
 21784  001720  C083  F01F         	movff	sprintf@width+1,?___wmul+1
 21785  001724  6A21               	clrf	?___wmul+3,c
 21786  001726  0E0A               	movlw	10
 21787  001728  6E20               	movwf	?___wmul+2,c
 21788  00172A  EC53  F02B         	call	___wmul	;wreg free
 21789  00172E  C01E  F082         	movff	?___wmul,sprintf@width
 21790  001732  C01F  F083         	movff	?___wmul+1,sprintf@width+1
 21791                           
 21792                           ;doprnt.c: 610: width += *f++ - '0';
 21793  001736  0100               	movlb	0	; () banked
 21794  001738  C06F  FFF6         	movff	sprintf@f,tblptrl
 21795  00173C  C070  FFF7         	movff	sprintf@f+1,tblptrh
 21796  001740  0008               	tblrd		*
 21797  001742  CFF5 F075          	movff	tablat,??_sprintf
 21798  001746  0ED0               	movlw	208
 21799  001748  2575               	addwf	??_sprintf& (0+255),w,b
 21800  00174A  6F76               	movwf	(??_sprintf+1)& (0+255),b
 21801  00174C  6B77               	clrf	(??_sprintf+2)& (0+255),b
 21802  00174E  0EFF               	movlw	255
 21803  001750  2377               	addwfc	(??_sprintf+2)& (0+255),f,b
 21804  001752  5176               	movf	(??_sprintf+1)& (0+255),w,b
 21805  001754  2782               	addwf	sprintf@width& (0+255),f,b
 21806  001756  5177               	movf	(??_sprintf+2)& (0+255),w,b
 21807  001758  2383               	addwfc	(sprintf@width+1)& (0+255),f,b
 21808                           
 21809                           ; BSR set to: 0
 21810                           
 21811                           ; BSR set to: 0
 21812                           ;doprnt.c: 611: } while(isdigit((unsigned)*f));
 21813  00175A  DB3A               	call	PL76	;call to abstracted procedure
 21814  00175C  ECB1  F02B         	call	_isdigit
 21815  001760  E315               	bnc	l11787
 21816  001762  D7DC               	goto	l11771
 21817  001764                     l11779:
 21818  001764  0100               	movlb	0	; () banked
 21819  001766  C06F  FFF6         	movff	sprintf@f,tblptrl
 21820  00176A  C070  FFF7         	movff	sprintf@f+1,tblptrh
 21821  00176E  0008               	tblrd		*
 21822  001770  50F5               	movf	tablat,w,c
 21823  001772  0A2A               	xorlw	42
 21824  001774  E10B               	bnz	l11787
 21825                           
 21826                           ; BSR set to: 0
 21827                           ;doprnt.c: 614: width = (*(int *)__va_arg((*(int **)ap), (int)0));
 21828  001776  517F               	movf	sprintf@ap& (0+255),w,b
 21829  001778  6ED9               	movwf	fsr2l,c
 21830  00177A  6ADA               	clrf	fsr2h,c
 21831  00177C  CFDE F082          	movff	postinc2,sprintf@width
 21832  001780  CFDD F083          	movff	postdec2,sprintf@width+1
 21833                           
 21834                           ; BSR set to: 0
 21835  001784  0E02               	movlw	2
 21836  001786  277F               	addwf	sprintf@ap& (0+255),f,b
 21837                           
 21838                           ; BSR set to: 0
 21839                           ;doprnt.c: 615: f++;
 21840  001788  4B6F               	infsnz	sprintf@f& (0+255),f,b
 21841  00178A  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 21842  00178C                     l11787:
 21843                           
 21844                           ;doprnt.c: 617: }
 21845                           ;doprnt.c: 620: if(*f == '.') {
 21846  00178C  0100               	movlb	0	; () banked
 21847  00178E  C06F  FFF6         	movff	sprintf@f,tblptrl
 21848  001792  C070  FFF7         	movff	sprintf@f+1,tblptrh
 21849  001796  0008               	tblrd		*
 21850  001798  50F5               	movf	tablat,w,c
 21851  00179A  0A2E               	xorlw	46
 21852  00179C  E138               	bnz	l1641
 21853                           
 21854                           ; BSR set to: 0
 21855                           ;doprnt.c: 621: flag |= 0x4000;
 21856  00179E  8D8A               	bsf	(sprintf@flag+1)& (0+255),6,b
 21857                           
 21858                           ;doprnt.c: 622: f++;
 21859                           
 21860                           ; BSR set to: 0
 21861                           ;doprnt.c: 624: if(*f == '*') {
 21862  0017A0  DB17               	call	PL76	;call to abstracted procedure
 21863  0017A2  0A2A               	xorlw	42
 21864  0017A4  E10C               	bnz	l1642
 21865                           
 21866                           ; BSR set to: 0
 21867                           ;doprnt.c: 625: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
 21868  0017A6  517F               	movf	sprintf@ap& (0+255),w,b
 21869  0017A8  6ED9               	movwf	fsr2l,c
 21870  0017AA  6ADA               	clrf	fsr2h,c
 21871  0017AC  CFDE F080          	movff	postinc2,sprintf@prec
 21872  0017B0  CFDD F081          	movff	postdec2,sprintf@prec+1
 21873                           
 21874                           ; BSR set to: 0
 21875  0017B4  0E02               	movlw	2
 21876  0017B6  277F               	addwf	sprintf@ap& (0+255),f,b
 21877                           
 21878                           ; BSR set to: 0
 21879                           ;doprnt.c: 626: f++;
 21880  0017B8  4B6F               	infsnz	sprintf@f& (0+255),f,b
 21881  0017BA  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 21882                           
 21883                           ;doprnt.c: 627: } else
 21884  0017BC  D089               	goto	l11857
 21885  0017BE                     l1642:
 21886                           
 21887                           ; BSR set to: 0
 21888                           ;doprnt.c: 629: {
 21889                           ;doprnt.c: 630: prec = 0;
 21890  0017BE  6B80               	clrf	sprintf@prec& (0+255),b
 21891  0017C0  6B81               	clrf	(sprintf@prec+1)& (0+255),b
 21892                           
 21893                           ;doprnt.c: 631: while(isdigit((unsigned)*f))
 21894  0017C2  D01B               	goto	l11803
 21895  0017C4                     l11799:
 21896                           
 21897                           ;doprnt.c: 632: prec = prec*10 + *f++ - '0';
 21898  0017C4  C080  F01E         	movff	sprintf@prec,?___wmul
 21899  0017C8  C081  F01F         	movff	sprintf@prec+1,?___wmul+1
 21900  0017CC  6A21               	clrf	?___wmul+3,c
 21901  0017CE  0E0A               	movlw	10
 21902  0017D0  6E20               	movwf	?___wmul+2,c
 21903  0017D2  EC53  F02B         	call	___wmul	;wreg free
 21904  0017D6  0100               	movlb	0	; () banked
 21905  0017D8  C06F  FFF6         	movff	sprintf@f,tblptrl
 21906  0017DC  C070  FFF7         	movff	sprintf@f+1,tblptrh
 21907  0017E0  0008               	tblrd		*
 21908  0017E2  50F5               	movf	tablat,w,c
 21909  0017E4  261E               	addwf	?___wmul,f,c
 21910  0017E6  0E00               	movlw	0
 21911  0017E8  221F               	addwfc	?___wmul+1,f,c
 21912  0017EA  0ED0               	movlw	208
 21913  0017EC  241E               	addwf	?___wmul,w,c
 21914  0017EE  6F80               	movwf	sprintf@prec& (0+255),b
 21915  0017F0  0EFF               	movlw	255
 21916  0017F2  201F               	addwfc	?___wmul+1,w,c
 21917  0017F4  6F81               	movwf	(sprintf@prec+1)& (0+255),b
 21918                           
 21919                           ; BSR set to: 0
 21920  0017F6  4B6F               	infsnz	sprintf@f& (0+255),f,b
 21921  0017F8  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 21922  0017FA                     l11803:
 21923                           
 21924                           ; BSR set to: 0
 21925  0017FA  C06F  FFF6         	movff	sprintf@f,tblptrl
 21926  0017FE  C070  FFF7         	movff	sprintf@f+1,tblptrh
 21927  001802  0008               	tblrd		*
 21928  001804  50F5               	movf	tablat,w,c
 21929  001806  ECB1  F02B         	call	_isdigit
 21930  00180A  E362               	bnc	l11857
 21931  00180C  D7DB               	goto	l11799
 21932  00180E                     l1641:
 21933                           
 21934                           ; BSR set to: 0
 21935                           ;doprnt.c: 635: prec = 0;
 21936  00180E  6B80               	clrf	sprintf@prec& (0+255),b
 21937  001810  6B81               	clrf	(sprintf@prec+1)& (0+255),b
 21938  001812  D05E               	goto	l11857
 21939  001814                     l11805:
 21940                           
 21941                           ; BSR set to: 0
 21942                           ;doprnt.c: 652: flag |= 0x10;
 21943  001814  8989               	bsf	sprintf@flag& (0+255),4,b
 21944                           
 21945                           ;doprnt.c: 653: goto loop;
 21946  001816  D05C               	goto	l11857
 21947  001818                     l11807:
 21948                           
 21949                           ; BSR set to: 0
 21950                           ;doprnt.c: 700: flag |= 0x40;
 21951  001818  8D89               	bsf	sprintf@flag& (0+255),6,b
 21952                           
 21953                           ;doprnt.c: 702: break;
 21954  00181A  D070               	goto	l11859
 21955  00181C                     l11809:
 21956                           
 21957                           ; BSR set to: 0
 21958                           ;doprnt.c: 723: flag |= 0x20;
 21959  00181C  8B89               	bsf	sprintf@flag& (0+255),5,b
 21960  00181E                     l1658:
 21961                           
 21962                           ; BSR set to: 0
 21963                           ;doprnt.c: 730: flag |= 0x80;
 21964  00181E  8F89               	bsf	sprintf@flag& (0+255),7,b
 21965                           
 21966                           ;doprnt.c: 732: break;
 21967  001820  D06D               	goto	l11859
 21968  001822                     l11811:
 21969                           
 21970                           ; BSR set to: 0
 21971                           ;doprnt.c: 762: if(prec && prec < _val._str._len)
 21972  001822  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 21973  001824  1180               	iorwf	sprintf@prec& (0+255),w,b
 21974  001826  E009               	bz	l11817
 21975                           
 21976                           ; BSR set to: 0
 21977  001828  5185               	movf	(sprintf@_val+1)& (0+255),w,b
 21978  00182A  5D80               	subwf	sprintf@prec& (0+255),w,b
 21979  00182C  5186               	movf	(sprintf@_val+2)& (0+255),w,b
 21980  00182E  5981               	subwfb	(sprintf@prec+1)& (0+255),w,b
 21981  001830  E204               	bc	l11817
 21982                           
 21983                           ; BSR set to: 0
 21984                           ;doprnt.c: 763: _val._str._len = prec;
 21985  001832  C080  F085         	movff	sprintf@prec,sprintf@_val+1
 21986  001836  C081  F086         	movff	sprintf@prec+1,sprintf@_val+2
 21987  00183A                     l11817:
 21988                           
 21989                           ; BSR set to: 0
 21990                           ;doprnt.c: 766: if(width > _val._str._len)
 21991  00183A  5182               	movf	sprintf@width& (0+255),w,b
 21992  00183C  5D85               	subwf	(sprintf@_val+1)& (0+255),w,b
 21993  00183E  5183               	movf	(sprintf@width+1)& (0+255),w,b
 21994  001840  5986               	subwfb	(sprintf@_val+2)& (0+255),w,b
 21995  001842  E207               	bc	l1661
 21996                           
 21997                           ; BSR set to: 0
 21998                           ;doprnt.c: 767: width -= _val._str._len;
 21999  001844  EE20  F085         	lfsr	2,sprintf@_val+1
 22000  001848  50DE               	movf	postinc2,w,c
 22001  00184A  5F82               	subwf	sprintf@width& (0+255),f,b
 22002  00184C  50DD               	movf	postdec2,w,c
 22003  00184E  5B83               	subwfb	(sprintf@width+1)& (0+255),f,b
 22004  001850  D002               	goto	l1662
 22005  001852                     l1661:
 22006                           
 22007                           ; BSR set to: 0
 22008                           ;doprnt.c: 768: else
 22009                           ;doprnt.c: 769: width = 0;
 22010  001852  6B82               	clrf	sprintf@width& (0+255),b
 22011  001854  6B83               	clrf	(sprintf@width+1)& (0+255),b
 22012  001856                     l1662:
 22013                           
 22014                           ; BSR set to: 0
 22015                           ;doprnt.c: 771: if(!(flag & 0x08))
 22016  001856  A789               	btfss	sprintf@flag& (0+255),3,b
 22017  001858  D004               	goto	l11827
 22018  00185A  D015               	goto	l11835
 22019  00185C                     l11823:
 22020                           
 22021                           ; BSR set to: 0
 22022                           ;doprnt.c: 774: ((*sp++ = (' ')));
 22023  00185C  DAA8               	call	PL54	;call to abstracted procedure
 22024                           
 22025                           ; BSR set to: 0
 22026  00185E  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 22027  001860  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 22028  001862                     l11827:
 22029                           
 22030                           ; BSR set to: 0
 22031  001862  0782               	decf	sprintf@width& (0+255),f,b
 22032  001864  DAC3               	call	PL104	;call to abstracted procedure
 22033  001866  B4D8               	btfsc	status,2,c
 22034  001868  2983               	incf	(sprintf@width+1)& (0+255),w,b
 22035  00186A  E00D               	bz	l11835
 22036  00186C  D7F7               	goto	l11823
 22037  00186E                     l11829:
 22038                           
 22039                           ; BSR set to: 0
 22040                           ;doprnt.c: 777: ((*sp++ = (*_val._str._cp++)));
 22041  00186E  5184               	movf	sprintf@_val& (0+255),w,b
 22042  001870  6ED9               	movwf	fsr2l,c
 22043  001872  6ADA               	clrf	fsr2h,c
 22044  001874  C06D  FFE1         	movff	sprintf@sp,fsr1l
 22045  001878  C06E  FFE2         	movff	sprintf@sp+1,fsr1h
 22046  00187C  CFDF FFE7          	movff	indf2,indf1
 22047                           
 22048                           ; BSR set to: 0
 22049  001880  2B84               	incf	sprintf@_val& (0+255),f,b
 22050                           
 22051                           ; BSR set to: 0
 22052  001882  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 22053  001884  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 22054  001886                     l11835:
 22055                           
 22056                           ; BSR set to: 0
 22057  001886  0785               	decf	(sprintf@_val+1)& (0+255),f,b
 22058  001888  A0D8               	btfss	status,0,c
 22059  00188A  0786               	decf	(sprintf@_val+2)& (0+255),f,b
 22060  00188C  0100               	movlb	0	; () banked
 22061  00188E  2985               	incf	(sprintf@_val+1)& (0+255),w,b
 22062  001890  B4D8               	btfsc	status,2,c
 22063  001892  2986               	incf	(sprintf@_val+2)& (0+255),w,b
 22064  001894  E1EC               	bnz	l11829
 22065                           
 22066                           ; BSR set to: 0
 22067                           ;doprnt.c: 779: if(flag & 0x08)
 22068  001896  B789               	btfsc	sprintf@flag& (0+255),3,b
 22069  001898  D004               	goto	l11843
 22070  00189A  D23C               	goto	l12081
 22071  00189C                     l11839:
 22072                           
 22073                           ; BSR set to: 0
 22074                           ;doprnt.c: 781: ((*sp++ = (' ')));
 22075  00189C  DA88               	call	PL54	;call to abstracted procedure
 22076                           
 22077                           ; BSR set to: 0
 22078  00189E  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 22079  0018A0  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 22080  0018A2                     l11843:
 22081                           
 22082                           ; BSR set to: 0
 22083  0018A2  0782               	decf	sprintf@width& (0+255),f,b
 22084  0018A4  DAA3               	call	PL104	;call to abstracted procedure
 22085  0018A6  B4D8               	btfsc	status,2,c
 22086  0018A8  2983               	incf	(sprintf@width+1)& (0+255),w,b
 22087  0018AA  E101 D233          	bz	l12081
 22088  0018AE  D7F6               	goto	l11839
 22089  0018B0                     l11845:
 22090                           
 22091                           ; BSR set to: 0
 22092                           ;doprnt.c: 808: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 22093  0018B0  517F               	movf	sprintf@ap& (0+255),w,b
 22094  0018B2  6ED9               	movwf	fsr2l,c
 22095  0018B4  6ADA               	clrf	fsr2h,c
 22096  0018B6  50DF               	movf	indf2,w,c
 22097  0018B8  6F88               	movwf	sprintf@c& (0+255),b
 22098                           
 22099                           ; BSR set to: 0
 22100  0018BA  0E02               	movlw	2
 22101  0018BC  277F               	addwf	sprintf@ap& (0+255),f,b
 22102  0018BE                     l11849:
 22103                           
 22104                           ; BSR set to: 0
 22105                           ;doprnt.c: 814: _val._str._cp = (char *)&c;
 22106  0018BE  0E88               	movlw	low sprintf@c
 22107  0018C0  6F84               	movwf	sprintf@_val& (0+255),b
 22108                           
 22109                           ; BSR set to: 0
 22110                           ;doprnt.c: 815: _val._str._len = 1;
 22111  0018C2  6B86               	clrf	(sprintf@_val+2)& (0+255),b
 22112  0018C4  0E01               	movlw	1
 22113  0018C6  6F85               	movwf	(sprintf@_val+1)& (0+255),b
 22114                           
 22115                           ;doprnt.c: 816: goto dostring;
 22116  0018C8  D7AC               	goto	l11811
 22117  0018CA                     l11853:
 22118                           
 22119                           ; BSR set to: 0
 22120                           ;doprnt.c: 827: flag |= 0xC0;
 22121  0018CA  0EC0               	movlw	192
 22122  0018CC  1389               	iorwf	sprintf@flag& (0+255),f,b
 22123                           
 22124                           ;doprnt.c: 828: break;
 22125  0018CE  D016               	goto	l11859
 22126  0018D0                     l11857:
 22127  0018D0  0100               	movlb	0	; () banked
 22128  0018D2  DA74               	call	PL66	;call to abstracted procedure
 22129  0018D4  5188               	movf	sprintf@c& (0+255),w,b
 22130                           
 22131                           ; Switch size 1, requested type "space"
 22132                           ; Number of cases is 9, Range of values is 0 to 120
 22133                           ; switch strategies available:
 22134                           ; Name         Instructions Cycles
 22135                           ; simple_byte           28    15 (average)
 22136                           ;	Chosen strategy is simple_byte
 22137  0018D6  E101 D221          	bz	l12083
 22138  0018DA  0A58               	xorlw	88	; case 88
 22139  0018DC  E09F               	bz	l11809
 22140  0018DE  0A3B               	xorlw	59	; case 99
 22141  0018E0  E0E7               	bz	l11845
 22142  0018E2  0A07               	xorlw	7	; case 100
 22143  0018E4  E00B               	bz	l11859
 22144  0018E6  0A0D               	xorlw	13	; case 105
 22145  0018E8  E009               	bz	l11859
 22146  0018EA  0A05               	xorlw	5	; case 108
 22147  0018EC  E093               	bz	l11805
 22148  0018EE  0A03               	xorlw	3	; case 111
 22149  0018F0  E093               	bz	l11807
 22150  0018F2  0A1A               	xorlw	26	; case 117
 22151  0018F4  E0EA               	bz	l11853
 22152  0018F6  0A0D               	xorlw	13	; case 120
 22153  0018F8  E092               	bz	l1658
 22154  0018FA  D7E1               	goto	l11849
 22155  0018FC                     l11859:
 22156                           
 22157                           ; BSR set to: 0
 22158                           ;doprnt.c: 1258: if((flag & (0xC0)) == 0x00)
 22159  0018FC  5189               	movf	sprintf@flag& (0+255),w,b
 22160  0018FE  0BC0               	andlw	192
 22161  001900  E120               	bnz	l1677
 22162                           
 22163                           ; BSR set to: 0
 22164                           ;doprnt.c: 1260: {
 22165                           ;doprnt.c: 1262: if(flag & 0x10)
 22166  001902  A989               	btfss	sprintf@flag& (0+255),4,b
 22167  001904  D003               	goto	l11867
 22168                           
 22169                           ; BSR set to: 0
 22170                           ;doprnt.c: 1263: _val._val = (*(long *)__va_arg((*(long **)ap), (long)0));
 22171  001906  517F               	movf	sprintf@ap& (0+255),w,b
 22172                           
 22173                           ; BSR set to: 0
 22174  001908  DA47               	call	PL50	;call to abstracted procedure
 22175  00190A  D00D               	goto	L34
 22176  00190C                     l11867:
 22177                           
 22178                           ; BSR set to: 0
 22179                           ;doprnt.c: 1264: else
 22180                           ;doprnt.c: 1266: _val._val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
 22181  00190C  517F               	movf	sprintf@ap& (0+255),w,b
 22182  00190E  6ED9               	movwf	fsr2l,c
 22183  001910  6ADA               	clrf	fsr2h,c
 22184  001912  CFDE F084          	movff	postinc2,sprintf@_val
 22185  001916  CFDD F085          	movff	postdec2,sprintf@_val+1
 22186  00191A  0E00               	movlw	0
 22187  00191C  BF85               	btfsc	(sprintf@_val+1)& (0+255),7,b
 22188  00191E  0EFF               	movlw	-1
 22189  001920  6F86               	movwf	(sprintf@_val+2)& (0+255),b
 22190  001922  6F87               	movwf	(sprintf@_val+3)& (0+255),b
 22191                           
 22192                           ; BSR set to: 0
 22193  001924  0E02               	movlw	2
 22194  001926                     L34:
 22195  001926  277F               	addwf	sprintf@ap& (0+255),f,b
 22196                           
 22197                           ; BSR set to: 0
 22198                           ;doprnt.c: 1268: if((long)_val._val < 0) {
 22199  001928  AF87               	btfss	(sprintf@_val+3)& (0+255),7,b
 22200  00192A  D01F               	goto	l11885
 22201                           
 22202                           ; BSR set to: 0
 22203                           ;doprnt.c: 1269: flag |= 0x03;
 22204  00192C  0E03               	movlw	3
 22205  00192E  1389               	iorwf	sprintf@flag& (0+255),f,b
 22206                           
 22207                           ; BSR set to: 0
 22208                           ;doprnt.c: 1270: _val._val = -_val._val;
 22209  001930  1F87               	comf	(sprintf@_val+3)& (0+255),f,b
 22210  001932  1F86               	comf	(sprintf@_val+2)& (0+255),f,b
 22211  001934  1F85               	comf	(sprintf@_val+1)& (0+255),f,b
 22212  001936  6D84               	negf	sprintf@_val& (0+255),b
 22213  001938  0E00               	movlw	0
 22214  00193A  2385               	addwfc	(sprintf@_val+1)& (0+255),f,b
 22215  00193C  2386               	addwfc	(sprintf@_val+2)& (0+255),f,b
 22216  00193E  2387               	addwfc	(sprintf@_val+3)& (0+255),f,b
 22217  001940  D014               	goto	l11885
 22218  001942                     l1677:
 22219                           
 22220                           ; BSR set to: 0
 22221                           ;doprnt.c: 1275: else
 22222                           ;doprnt.c: 1280: {
 22223                           ;doprnt.c: 1288: if(flag & 0x10)
 22224  001942  A989               	btfss	sprintf@flag& (0+255),4,b
 22225  001944  D003               	goto	l11881
 22226                           
 22227                           ; BSR set to: 0
 22228                           ;doprnt.c: 1289: _val._val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsig
      +                          ned long)0));
 22229  001946  517F               	movf	sprintf@ap& (0+255),w,b
 22230                           
 22231                           ; BSR set to: 0
 22232  001948  DA27               	call	PL50	;call to abstracted procedure
 22233  00194A  D00E               	goto	L35
 22234  00194C                     l11881:
 22235                           
 22236                           ; BSR set to: 0
 22237                           ;doprnt.c: 1290: else
 22238                           ;doprnt.c: 1293: _val._val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 22239  00194C  517F               	movf	sprintf@ap& (0+255),w,b
 22240  00194E  6ED9               	movwf	fsr2l,c
 22241  001950  6ADA               	clrf	fsr2h,c
 22242  001952  CFDE F075          	movff	postinc2,??_sprintf
 22243  001956  CFDD F076          	movff	postdec2,??_sprintf+1
 22244  00195A  C075  F084         	movff	??_sprintf,sprintf@_val
 22245  00195E  C076  F085         	movff	??_sprintf+1,sprintf@_val+1
 22246  001962  6B86               	clrf	(sprintf@_val+2)& (0+255),b
 22247  001964  6B87               	clrf	(sprintf@_val+3)& (0+255),b
 22248                           
 22249                           ; BSR set to: 0
 22250  001966  0E02               	movlw	2
 22251  001968                     L35:
 22252  001968  277F               	addwf	sprintf@ap& (0+255),f,b
 22253  00196A                     l11885:
 22254                           
 22255                           ; BSR set to: 0
 22256                           ;doprnt.c: 1294: }
 22257                           ;doprnt.c: 1297: if(prec == 0 && _val._val == 0)
 22258  00196A  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 22259  00196C  1180               	iorwf	sprintf@prec& (0+255),w,b
 22260  00196E  E15C               	bnz	l11935
 22261                           
 22262                           ; BSR set to: 0
 22263  001970  5187               	movf	(sprintf@_val+3)& (0+255),w,b
 22264  001972  1184               	iorwf	sprintf@_val& (0+255),w,b
 22265  001974  1185               	iorwf	(sprintf@_val+1)& (0+255),w,b
 22266  001976  1186               	iorwf	(sprintf@_val+2)& (0+255),w,b
 22267  001978  E157               	bnz	l11935
 22268                           
 22269                           ; BSR set to: 0
 22270                           ;doprnt.c: 1298: prec++;
 22271  00197A  4B80               	infsnz	sprintf@prec& (0+255),f,b
 22272  00197C  2B81               	incf	(sprintf@prec+1)& (0+255),f,b
 22273  00197E  D054               	goto	l11935
 22274  001980                     l11891:
 22275                           
 22276                           ; BSR set to: 0
 22277                           ;doprnt.c: 1309: case 0xC0:
 22278                           ;doprnt.c: 1312: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 22279  001980  0E01               	movlw	1
 22280  001982  6F88               	movwf	sprintf@c& (0+255),b
 22281  001984                     l11893:
 22282                           
 22283                           ; BSR set to: 0
 22284  001984  5188               	movf	sprintf@c& (0+255),w,b
 22285  001986  0A0A               	xorlw	10
 22286  001988  E058               	bz	l11937
 22287                           
 22288                           ; BSR set to: 0
 22289                           ;doprnt.c: 1313: if(_val._val < dpowers[c])
 22290  00198A  5188               	movf	sprintf@c& (0+255),w,b
 22291  00198C  0D04               	mullw	4
 22292  00198E  0EE0               	movlw	low _dpowers
 22293  001990  24F3               	addwf	prodl,w,c
 22294  001992  6EF6               	movwf	tblptrl,c
 22295  001994  0E6F               	movlw	high _dpowers
 22296  001996  20F4               	addwfc	prodh,w,c
 22297  001998  6EF7               	movwf	tblptrh,c
 22298  00199A  0009               	tblrd		*+
 22299  00199C  50F5               	movf	tablat,w,c
 22300  00199E  5D84               	subwf	sprintf@_val& (0+255),w,b
 22301  0019A0  0009               	tblrd		*+
 22302  0019A2  50F5               	movf	tablat,w,c
 22303  0019A4  5985               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22304  0019A6  0009               	tblrd		*+
 22305  0019A8  50F5               	movf	tablat,w,c
 22306  0019AA  5986               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22307  0019AC  0009               	tblrd		*+
 22308  0019AE  50F5               	movf	tablat,w,c
 22309  0019B0  5987               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22310  0019B2  E343               	bnc	l11937
 22311                           
 22312                           ; BSR set to: 0
 22313  0019B4  2B88               	incf	sprintf@c& (0+255),f,b
 22314  0019B6  D7E6               	goto	l11893
 22315  0019B8                     l11905:
 22316                           
 22317                           ; BSR set to: 0
 22318                           ;doprnt.c: 1323: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 22319  0019B8  0E01               	movlw	1
 22320  0019BA  6F88               	movwf	sprintf@c& (0+255),b
 22321  0019BC                     l11907:
 22322                           
 22323                           ; BSR set to: 0
 22324  0019BC  5188               	movf	sprintf@c& (0+255),w,b
 22325  0019BE  0A08               	xorlw	8
 22326  0019C0  E03C               	bz	l11937
 22327                           
 22328                           ; BSR set to: 0
 22329                           ;doprnt.c: 1324: if(_val._val < hexpowers[c])
 22330  0019C2  5188               	movf	sprintf@c& (0+255),w,b
 22331  0019C4  0D04               	mullw	4
 22332  0019C6  0E08               	movlw	low _hexpowers
 22333  0019C8  24F3               	addwf	prodl,w,c
 22334  0019CA  6EF6               	movwf	tblptrl,c
 22335  0019CC  0E70               	movlw	high _hexpowers
 22336  0019CE  20F4               	addwfc	prodh,w,c
 22337  0019D0  6EF7               	movwf	tblptrh,c
 22338  0019D2  0009               	tblrd		*+
 22339  0019D4  50F5               	movf	tablat,w,c
 22340  0019D6  5D84               	subwf	sprintf@_val& (0+255),w,b
 22341  0019D8  0009               	tblrd		*+
 22342  0019DA  50F5               	movf	tablat,w,c
 22343  0019DC  5985               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22344  0019DE  0009               	tblrd		*+
 22345  0019E0  50F5               	movf	tablat,w,c
 22346  0019E2  5986               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22347  0019E4  0009               	tblrd		*+
 22348  0019E6  50F5               	movf	tablat,w,c
 22349  0019E8  5987               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22350  0019EA  E327               	bnc	l11937
 22351                           
 22352                           ; BSR set to: 0
 22353  0019EC  2B88               	incf	sprintf@c& (0+255),f,b
 22354  0019EE  D7E6               	goto	l11907
 22355  0019F0                     l11919:
 22356                           
 22357                           ; BSR set to: 0
 22358                           ;doprnt.c: 1335: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
 22359  0019F0  0E01               	movlw	1
 22360  0019F2  6F88               	movwf	sprintf@c& (0+255),b
 22361  0019F4                     l11921:
 22362                           
 22363                           ; BSR set to: 0
 22364  0019F4  5188               	movf	sprintf@c& (0+255),w,b
 22365  0019F6  0A0C               	xorlw	12
 22366  0019F8  E020               	bz	l11937
 22367                           
 22368                           ; BSR set to: 0
 22369                           ;doprnt.c: 1336: if(_val._val < octpowers[c])
 22370  0019FA  5188               	movf	sprintf@c& (0+255),w,b
 22371  0019FC  0D04               	mullw	4
 22372  0019FE  0EB0               	movlw	low _octpowers
 22373  001A00  24F3               	addwf	prodl,w,c
 22374  001A02  6EF6               	movwf	tblptrl,c
 22375  001A04  0E6F               	movlw	high _octpowers
 22376  001A06  20F4               	addwfc	prodh,w,c
 22377  001A08  6EF7               	movwf	tblptrh,c
 22378  001A0A  0009               	tblrd		*+
 22379  001A0C  50F5               	movf	tablat,w,c
 22380  001A0E  5D84               	subwf	sprintf@_val& (0+255),w,b
 22381  001A10  0009               	tblrd		*+
 22382  001A12  50F5               	movf	tablat,w,c
 22383  001A14  5985               	subwfb	(sprintf@_val+1)& (0+255),w,b
 22384  001A16  0009               	tblrd		*+
 22385  001A18  50F5               	movf	tablat,w,c
 22386  001A1A  5986               	subwfb	(sprintf@_val+2)& (0+255),w,b
 22387  001A1C  0009               	tblrd		*+
 22388  001A1E  50F5               	movf	tablat,w,c
 22389  001A20  5987               	subwfb	(sprintf@_val+3)& (0+255),w,b
 22390  001A22  E30B               	bnc	l11937
 22391                           
 22392                           ; BSR set to: 0
 22393  001A24  2B88               	incf	sprintf@c& (0+255),f,b
 22394  001A26  D7E6               	goto	l11921
 22395  001A28                     l11935:
 22396                           
 22397                           ; BSR set to: 0
 22398  001A28  5189               	movf	sprintf@flag& (0+255),w,b
 22399  001A2A  0BC0               	andlw	192
 22400                           
 22401                           ; Switch size 1, requested type "space"
 22402                           ; Number of cases is 4, Range of values is 0 to 192
 22403                           ; switch strategies available:
 22404                           ; Name         Instructions Cycles
 22405                           ; simple_byte           13     7 (average)
 22406                           ;	Chosen strategy is simple_byte
 22407  001A2C  E0A9               	bz	l11891
 22408  001A2E  0A40               	xorlw	64	; case 64
 22409  001A30  E0DF               	bz	l11919
 22410  001A32  0AC0               	xorlw	192	; case 128
 22411  001A34  E0C1               	bz	l11905
 22412  001A36  0A40               	xorlw	64	; case 192
 22413  001A38  E0A3               	bz	l11891
 22414  001A3A                     l11937:
 22415                           
 22416                           ; BSR set to: 0
 22417                           ;doprnt.c: 1346: if(c < prec)
 22418  001A3A  0E80               	movlw	128
 22419  001A3C  BF88               	btfsc	sprintf@c& (0+255),7,b
 22420  001A3E  0E7F               	movlw	127
 22421  001A40  6F75               	movwf	??_sprintf& (0+255),b
 22422  001A42  5180               	movf	sprintf@prec& (0+255),w,b
 22423  001A44  5D88               	subwf	sprintf@c& (0+255),w,b
 22424  001A46  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 22425  001A48  0A80               	xorlw	128
 22426  001A4A  5975               	subwfb	??_sprintf& (0+255),w,b
 22427  001A4C  E203               	bc	l11941
 22428                           
 22429                           ; BSR set to: 0
 22430                           ;doprnt.c: 1347: c = prec;
 22431  001A4E  C080  F088         	movff	sprintf@prec,sprintf@c
 22432  001A52  D00F               	goto	l11945
 22433  001A54                     l11941:
 22434                           
 22435                           ; BSR set to: 0
 22436                           ;doprnt.c: 1348: else if(prec < c)
 22437  001A54  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 22438  001A56  0A80               	xorlw	128
 22439  001A58  6F75               	movwf	??_sprintf& (0+255),b
 22440  001A5A  5188               	movf	sprintf@c& (0+255),w,b
 22441  001A5C  5D80               	subwf	sprintf@prec& (0+255),w,b
 22442  001A5E  0E80               	movlw	128
 22443  001A60  BF88               	btfsc	sprintf@c& (0+255),7,b
 22444  001A62  0E7F               	movlw	127
 22445  001A64  5975               	subwfb	??_sprintf& (0+255),w,b
 22446  001A66  E205               	bc	l11945
 22447                           
 22448                           ; BSR set to: 0
 22449                           ;doprnt.c: 1349: prec = c;
 22450  001A68  5188               	movf	sprintf@c& (0+255),w,b
 22451  001A6A  6F80               	movwf	sprintf@prec& (0+255),b
 22452  001A6C  6B81               	clrf	(sprintf@prec+1)& (0+255),b
 22453  001A6E  BF80               	btfsc	sprintf@prec& (0+255),7,b
 22454  001A70  0781               	decf	(sprintf@prec+1)& (0+255),f,b
 22455  001A72                     l11945:
 22456                           
 22457                           ; BSR set to: 0
 22458                           ;doprnt.c: 1352: if(width && flag & 0x03)
 22459  001A72  5183               	movf	(sprintf@width+1)& (0+255),w,b
 22460  001A74  1182               	iorwf	sprintf@width& (0+255),w,b
 22461  001A76  E006               	bz	l11951
 22462                           
 22463                           ; BSR set to: 0
 22464  001A78  5189               	movf	sprintf@flag& (0+255),w,b
 22465  001A7A  0B03               	andlw	3
 22466  001A7C  E003               	bz	l11951
 22467                           
 22468                           ; BSR set to: 0
 22469                           ;doprnt.c: 1353: width--;
 22470  001A7E  0782               	decf	sprintf@width& (0+255),f,b
 22471  001A80  A0D8               	btfss	status,0,c
 22472  001A82  0783               	decf	(sprintf@width+1)& (0+255),f,b
 22473  001A84                     l11951:
 22474                           
 22475                           ; BSR set to: 0
 22476                           ;doprnt.c: 1355: if(flag & 0x4000) {
 22477  001A84  AD8A               	btfss	(sprintf@flag+1)& (0+255),6,b
 22478  001A86  D010               	goto	l11957
 22479                           
 22480                           ; BSR set to: 0
 22481                           ;doprnt.c: 1356: if(width > prec)
 22482  001A88  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 22483  001A8A  0A80               	xorlw	128
 22484  001A8C  6F75               	movwf	??_sprintf& (0+255),b
 22485  001A8E  5182               	movf	sprintf@width& (0+255),w,b
 22486  001A90  5D80               	subwf	sprintf@prec& (0+255),w,b
 22487  001A92  5183               	movf	(sprintf@width+1)& (0+255),w,b
 22488  001A94  0A80               	xorlw	128
 22489  001A96  5975               	subwfb	??_sprintf& (0+255),w,b
 22490  001A98  E205               	bc	l1705
 22491                           
 22492                           ; BSR set to: 0
 22493                           ;doprnt.c: 1357: width -= prec;
 22494  001A9A  5180               	movf	sprintf@prec& (0+255),w,b
 22495  001A9C  5F82               	subwf	sprintf@width& (0+255),f,b
 22496  001A9E  5181               	movf	(sprintf@prec+1)& (0+255),w,b
 22497  001AA0  5B83               	subwfb	(sprintf@width+1)& (0+255),f,b
 22498  001AA2  D002               	goto	l11957
 22499  001AA4                     l1705:
 22500                           
 22501                           ; BSR set to: 0
 22502                           ;doprnt.c: 1358: else
 22503                           ;doprnt.c: 1359: width = 0;
 22504  001AA4  6B82               	clrf	sprintf@width& (0+255),b
 22505  001AA6  6B83               	clrf	(sprintf@width+1)& (0+255),b
 22506  001AA8                     l11957:
 22507                           
 22508                           ; BSR set to: 0
 22509                           ;doprnt.c: 1360: }
 22510                           ;doprnt.c: 1364: if((flag & (
 22511                           ;doprnt.c: 1366: 0x04|
 22512                           ;doprnt.c: 1368: (0xC0)|0x800)) == (0x40|0x800)) {
 22513  001AA8  0EC4               	movlw	196
 22514  001AAA  D94E               	call	PL14	;call to abstracted procedure
 22515  001AAC  0E40               	movlw	64
 22516  001AAE  B4D8               	btfsc	status,2,c
 22517  001AB0  1975               	xorwf	??_sprintf& (0+255),w,b
 22518  001AB2  E107               	bnz	l11963
 22519                           
 22520                           ; BSR set to: 0
 22521                           ;doprnt.c: 1369: if(width)
 22522  001AB4  5183               	movf	(sprintf@width+1)& (0+255),w,b
 22523  001AB6  1182               	iorwf	sprintf@width& (0+255),w,b
 22524  001AB8  E018               	bz	l11969
 22525                           
 22526                           ; BSR set to: 0
 22527                           ;doprnt.c: 1370: width--;
 22528  001ABA  0782               	decf	sprintf@width& (0+255),f,b
 22529  001ABC  A0D8               	btfss	status,0,c
 22530  001ABE  0783               	decf	(sprintf@width+1)& (0+255),f,b
 22531  001AC0  D014               	goto	l11969
 22532  001AC2                     l11963:
 22533                           
 22534                           ; BSR set to: 0
 22535                           ;doprnt.c: 1375: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22536  001AC2  0EC0               	movlw	192
 22537  001AC4  D941               	call	PL14	;call to abstracted procedure
 22538  001AC6  0E80               	movlw	128
 22539  001AC8  B4D8               	btfsc	status,2,c
 22540  001ACA  1975               	xorwf	??_sprintf& (0+255),w,b
 22541  001ACC  E10E               	bnz	l11969
 22542                           
 22543                           ; BSR set to: 0
 22544                           ;doprnt.c: 1379: if(width > 2)
 22545  001ACE  5183               	movf	(sprintf@width+1)& (0+255),w,b
 22546  001AD0  0A80               	xorlw	128
 22547  001AD2  0F80               	addlw	-128
 22548  001AD4  0E03               	movlw	3
 22549  001AD6  B4D8               	btfsc	status,2,c
 22550  001AD8  5D82               	subwf	sprintf@width& (0+255),w,b
 22551  001ADA  E305               	bnc	l1711
 22552                           
 22553                           ; BSR set to: 0
 22554                           ;doprnt.c: 1380: width -= 2;
 22555  001ADC  0EFE               	movlw	254
 22556  001ADE  2782               	addwf	sprintf@width& (0+255),f,b
 22557  001AE0  0EFF               	movlw	255
 22558  001AE2  2383               	addwfc	(sprintf@width+1)& (0+255),f,b
 22559  001AE4  D002               	goto	l11969
 22560  001AE6                     l1711:
 22561                           
 22562                           ; BSR set to: 0
 22563                           ;doprnt.c: 1381: else
 22564                           ;doprnt.c: 1382: width = 0;
 22565  001AE6  6B82               	clrf	sprintf@width& (0+255),b
 22566  001AE8  6B83               	clrf	(sprintf@width+1)& (0+255),b
 22567  001AEA                     l11969:
 22568                           
 22569                           ; BSR set to: 0
 22570                           ;doprnt.c: 1383: }
 22571                           ;doprnt.c: 1388: if(width > c)
 22572  001AEA  0E80               	movlw	128
 22573  001AEC  BF88               	btfsc	sprintf@c& (0+255),7,b
 22574  001AEE  0E7F               	movlw	127
 22575  001AF0  6F75               	movwf	??_sprintf& (0+255),b
 22576  001AF2  5182               	movf	sprintf@width& (0+255),w,b
 22577  001AF4  5D88               	subwf	sprintf@c& (0+255),w,b
 22578  001AF6  5183               	movf	(sprintf@width+1)& (0+255),w,b
 22579  001AF8  0A80               	xorlw	128
 22580  001AFA  5975               	subwfb	??_sprintf& (0+255),w,b
 22581  001AFC  E207               	bc	l1713
 22582                           
 22583                           ; BSR set to: 0
 22584                           ;doprnt.c: 1389: width -= c;
 22585  001AFE  5188               	movf	sprintf@c& (0+255),w,b
 22586  001B00  5F82               	subwf	sprintf@width& (0+255),f,b
 22587  001B02  0E00               	movlw	0
 22588  001B04  BF88               	btfsc	sprintf@c& (0+255),7,b
 22589  001B06  0EFF               	movlw	255
 22590  001B08  5B83               	subwfb	(sprintf@width+1)& (0+255),f,b
 22591  001B0A  D002               	goto	l1714
 22592  001B0C                     l1713:
 22593                           
 22594                           ; BSR set to: 0
 22595                           ;doprnt.c: 1390: else
 22596                           ;doprnt.c: 1391: width = 0;
 22597  001B0C  6B82               	clrf	sprintf@width& (0+255),b
 22598  001B0E  6B83               	clrf	(sprintf@width+1)& (0+255),b
 22599  001B10                     l1714:
 22600                           
 22601                           ; BSR set to: 0
 22602                           ;doprnt.c: 1394: if(flag & 0x04) {
 22603  001B10  A589               	btfss	sprintf@flag& (0+255),2,b
 22604  001B12  D03C               	goto	l12007
 22605                           
 22606                           ; BSR set to: 0
 22607                           ;doprnt.c: 1399: if(flag & 0x03)
 22608  001B14  5189               	movf	sprintf@flag& (0+255),w,b
 22609  001B16  0B03               	andlw	3
 22610  001B18  E009               	bz	l1716
 22611                           
 22612                           ; BSR set to: 0
 22613                           ;doprnt.c: 1400: ((*sp++ = ('-')));
 22614  001B1A  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22615  001B1E  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 22616  001B22  0E2D               	movlw	45
 22617  001B24  6EDF               	movwf	indf2,c
 22618  001B26                     l11977:
 22619                           
 22620                           ; BSR set to: 0
 22621  001B26  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 22622  001B28  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 22623  001B2A  D022               	goto	l11999
 22624  001B2C                     l1716:
 22625                           
 22626                           ; BSR set to: 0
 22627                           ;doprnt.c: 1403: else
 22628                           ;doprnt.c: 1406: if(flag & 0x01)
 22629  001B2C  A189               	btfss	sprintf@flag& (0+255),0,b
 22630  001B2E  D006               	goto	l11983
 22631                           
 22632                           ; BSR set to: 0
 22633                           ;doprnt.c: 1407: ((*sp++ = (' ')));
 22634  001B30  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22635  001B34  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 22636  001B38  0E20               	movlw	32
 22637  001B3A  D7F4               	goto	L36
 22638  001B3C                     l11983:
 22639                           
 22640                           ; BSR set to: 0
 22641                           ;doprnt.c: 1410: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22642  001B3C  0EC0               	movlw	192
 22643  001B3E  D904               	call	PL14	;call to abstracted procedure
 22644  001B40  0E80               	movlw	128
 22645  001B42  B4D8               	btfsc	status,2,c
 22646  001B44  1975               	xorwf	??_sprintf& (0+255),w,b
 22647  001B46  E114               	bnz	l11999
 22648                           
 22649                           ; BSR set to: 0
 22650                           ;doprnt.c: 1411: ((*sp++ = ('0')));
 22651  001B48  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22652  001B4C  D94A               	call	PL88	;call to abstracted procedure
 22653                           
 22654                           ; BSR set to: 0
 22655  001B4E  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 22656  001B50  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 22657                           
 22658                           ; BSR set to: 0
 22659                           ;doprnt.c: 1413: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22660  001B52  BB89               	btfsc	sprintf@flag& (0+255),5,b
 22661  001B54  D003               	goto	l11993
 22662                           
 22663                           ; BSR set to: 0
 22664  001B56  6B7A               	clrf	(_sprintf$2024+1)& (0+255),b
 22665  001B58  0E78               	movlw	120
 22666  001B5A  D002               	goto	L37
 22667  001B5C                     l11993:
 22668                           
 22669                           ; BSR set to: 0
 22670  001B5C  6B7A               	clrf	(_sprintf$2024+1)& (0+255),b
 22671  001B5E  0E58               	movlw	88
 22672  001B60                     L37:
 22673  001B60  6F79               	movwf	_sprintf$2024& (0+255),b
 22674                           
 22675                           ; BSR set to: 0
 22676  001B62  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22677  001B66  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 22678  001B6A  C079  FFDF         	movff	_sprintf$2024,indf2
 22679  001B6E  D7DB               	goto	l11977
 22680  001B70                     l11999:
 22681                           
 22682                           ; BSR set to: 0
 22683                           ;doprnt.c: 1419: }
 22684                           ;doprnt.c: 1422: if(width)
 22685  001B70  5183               	movf	(sprintf@width+1)& (0+255),w,b
 22686  001B72  1182               	iorwf	sprintf@width& (0+255),w,b
 22687  001B74  E101 D0B9          	bz	l12071
 22688                           
 22689                           ; BSR set to: 0
 22690                           ;doprnt.c: 1424: ((*sp++ = ('0')));
 22691  001B78  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22692  001B7C  D932               	call	PL88	;call to abstracted procedure
 22693                           
 22694                           ; BSR set to: 0
 22695  001B7E  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 22696  001B80  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 22697                           
 22698                           ; BSR set to: 0
 22699                           ;doprnt.c: 1425: while(--width);
 22700  001B82  0782               	decf	sprintf@width& (0+255),f,b
 22701  001B84  A0D8               	btfss	status,0,c
 22702  001B86  0783               	decf	(sprintf@width+1)& (0+255),f,b
 22703  001B88  0100               	movlb	0	; () banked
 22704  001B8A  D7F2               	goto	l11999
 22705  001B8C                     l12007:
 22706                           
 22707                           ; BSR set to: 0
 22708                           ;doprnt.c: 1429: {
 22709                           ;doprnt.c: 1431: if(width
 22710                           ;doprnt.c: 1433: && !(flag & 0x08)
 22711                           ;doprnt.c: 1435: )
 22712  001B8C  5183               	movf	(sprintf@width+1)& (0+255),w,b
 22713  001B8E  1182               	iorwf	sprintf@width& (0+255),w,b
 22714  001B90  A4D8               	btfss	status,2,c
 22715                           
 22716                           ; BSR set to: 0
 22717  001B92  B789               	btfsc	sprintf@flag& (0+255),3,b
 22718  001B94  D004               	goto	l12017
 22719  001B96                     l12011:
 22720                           
 22721                           ; BSR set to: 0
 22722                           ;doprnt.c: 1437: ((*sp++ = (' ')));
 22723  001B96  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22724                           
 22725                           ; BSR set to: 0
 22726                           
 22727                           ; BSR set to: 0
 22728                           ;doprnt.c: 1438: while(--width);
 22729  001B9A  D8F1               	call	PL36	;call to abstracted procedure
 22730  001B9C  E1FC               	bnz	l12011
 22731  001B9E                     l12017:
 22732                           
 22733                           ; BSR set to: 0
 22734                           ;doprnt.c: 1445: if(flag & 0x03)
 22735  001B9E  5189               	movf	sprintf@flag& (0+255),w,b
 22736  001BA0  0B03               	andlw	3
 22737  001BA2  E009               	bz	l1732
 22738                           
 22739                           ; BSR set to: 0
 22740                           ;doprnt.c: 1446: ((*sp++ = ('-')));
 22741  001BA4  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22742  001BA8  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 22743  001BAC  0E2D               	movlw	45
 22744  001BAE  6EDF               	movwf	indf2,c
 22745                           
 22746                           ; BSR set to: 0
 22747  001BB0  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 22748  001BB2  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 22749  001BB4  D008               	goto	l12027
 22750  001BB6                     l1732:
 22751                           
 22752                           ; BSR set to: 0
 22753                           ;doprnt.c: 1450: else if(flag & 0x01)
 22754  001BB6  A189               	btfss	sprintf@flag& (0+255),0,b
 22755  001BB8  D006               	goto	l12027
 22756                           
 22757                           ; BSR set to: 0
 22758                           ;doprnt.c: 1451: ((*sp++ = (' ')));
 22759  001BBA  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22760  001BBE  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 22761  001BC2  0E20               	movlw	32
 22762  001BC4  D7F4               	goto	L38
 22763  001BC6                     l12027:
 22764                           
 22765                           ; BSR set to: 0
 22766                           ;doprnt.c: 1455: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
 22767  001BC6  0EC0               	movlw	192
 22768  001BC8  D8BF               	call	PL14	;call to abstracted procedure
 22769  001BCA  0E40               	movlw	64
 22770  001BCC  B4D8               	btfsc	status,2,c
 22771  001BCE  1975               	xorwf	??_sprintf& (0+255),w,b
 22772  001BD0  E106               	bnz	l12033
 22773                           
 22774                           ; BSR set to: 0
 22775                           ;doprnt.c: 1456: ((*sp++ = ('0')));
 22776  001BD2  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22777  001BD6  D905               	call	PL88	;call to abstracted procedure
 22778  001BD8                     l12031:
 22779                           
 22780                           ; BSR set to: 0
 22781  001BD8  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 22782  001BDA  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 22783  001BDC  D086               	goto	l12071
 22784  001BDE                     l12033:
 22785                           
 22786                           ; BSR set to: 0
 22787                           ;doprnt.c: 1457: else
 22788                           ;doprnt.c: 1461: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
 22789  001BDE  0EC0               	movlw	192
 22790  001BE0  D8B3               	call	PL14	;call to abstracted procedure
 22791  001BE2  0E80               	movlw	128
 22792  001BE4  B4D8               	btfsc	status,2,c
 22793  001BE6  1975               	xorwf	??_sprintf& (0+255),w,b
 22794  001BE8  E001 D07F          	bnz	l12071
 22795                           
 22796                           ; BSR set to: 0
 22797                           ;doprnt.c: 1465: ((*sp++ = ('0')));
 22798  001BEC  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22799  001BF0  D8F8               	call	PL88	;call to abstracted procedure
 22800                           
 22801                           ; BSR set to: 0
 22802  001BF2  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 22803  001BF4  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 22804                           
 22805                           ; BSR set to: 0
 22806                           ;doprnt.c: 1467: ((*sp++ = (flag & 0x20 ? 'X' : 'x')));
 22807  001BF6  BB89               	btfsc	sprintf@flag& (0+255),5,b
 22808  001BF8  D003               	goto	l12043
 22809                           
 22810                           ; BSR set to: 0
 22811  001BFA  6B7C               	clrf	(_sprintf$2025+1)& (0+255),b
 22812  001BFC  0E78               	movlw	120
 22813  001BFE  D002               	goto	L39
 22814  001C00                     l12043:
 22815                           
 22816                           ; BSR set to: 0
 22817  001C00  6B7C               	clrf	(_sprintf$2025+1)& (0+255),b
 22818  001C02  0E58               	movlw	88
 22819  001C04                     L39:
 22820  001C04  6F7B               	movwf	_sprintf$2025& (0+255),b
 22821                           
 22822                           ; BSR set to: 0
 22823  001C06  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22824  001C0A  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 22825  001C0E  C07B  FFDF         	movff	_sprintf$2025,indf2
 22826  001C12  D7E2               	goto	l12031
 22827  001C14                     l12049:
 22828                           
 22829                           ; BSR set to: 0
 22830                           ;doprnt.c: 1493: case 0xC0:
 22831                           ;doprnt.c: 1496: c = (_val._val / dpowers[prec]) % 10 + '0';
 22832  001C14  C080  F075         	movff	sprintf@prec,??_sprintf
 22833  001C18  C081  F076         	movff	sprintf@prec+1,??_sprintf+1
 22834  001C1C  90D8               	bcf	status,0,c
 22835  001C1E  3775               	rlcf	??_sprintf& (0+255),f,b
 22836  001C20  3776               	rlcf	(??_sprintf+1)& (0+255),f,b
 22837  001C22  90D8               	bcf	status,0,c
 22838  001C24  3775               	rlcf	??_sprintf& (0+255),f,b
 22839  001C26  3776               	rlcf	(??_sprintf+1)& (0+255),f,b
 22840  001C28  0EE0               	movlw	low _dpowers
 22841  001C2A  2575               	addwf	??_sprintf& (0+255),w,b
 22842  001C2C  6EF6               	movwf	tblptrl,c
 22843  001C2E  0E6F               	movlw	high _dpowers
 22844  001C30  D87C               	call	PL8	;call to abstracted procedure
 22845  001C32  C084  F01E         	movff	sprintf@_val,?___lldiv
 22846  001C36  C085  F01F         	movff	sprintf@_val+1,?___lldiv+1
 22847  001C3A  C086  F020         	movff	sprintf@_val+2,?___lldiv+2
 22848  001C3E  C087  F021         	movff	sprintf@_val+3,?___lldiv+3
 22849  001C42  ECF4  F026         	call	___lldiv	;wreg free
 22850  001C46  C021  F068         	movff	?___lldiv+3,?___llmod+3
 22851  001C4A  C020  F067         	movff	?___lldiv+2,?___llmod+2
 22852  001C4E  C01F  F066         	movff	?___lldiv+1,?___llmod+1
 22853  001C52  C01E  F065         	movff	?___lldiv,?___llmod
 22854  001C56  0E0A               	movlw	10
 22855  001C58  6F69               	movwf	(?___llmod+4)& (0+255),b
 22856  001C5A  0E00               	movlw	0
 22857  001C5C  6B6A               	clrf	(?___llmod+5)& (0+255),b
 22858  001C5E  6B6B               	clrf	(?___llmod+6)& (0+255),b
 22859  001C60  6B6C               	clrf	(?___llmod+7)& (0+255),b
 22860  001C62  EC3D  F028         	call	___llmod	;wreg free
 22861  001C66  5165               	movf	?___llmod& (0+255),w,b
 22862  001C68  D02D               	goto	L40
 22863  001C6A                     l12051:
 22864                           
 22865                           ; BSR set to: 0
 22866                           ;doprnt.c: 1506: {
 22867                           ;doprnt.c: 1507: unsigned char idx = (_val._val / hexpowers[prec]) & 0xF;
 22868  001C6A  D876               	call	PL16	;call to abstracted procedure
 22869  001C6C  0E08               	movlw	low _hexpowers
 22870  001C6E  2575               	addwf	??_sprintf& (0+255),w,b
 22871  001C70  6EF6               	movwf	tblptrl,c
 22872  001C72  0E70               	movlw	high _hexpowers
 22873  001C74  D85A               	call	PL8	;call to abstracted procedure
 22874  001C76  ECF4  F026         	call	___lldiv	;wreg free
 22875  001C7A  501E               	movf	?___lldiv,w,c
 22876  001C7C  0B0F               	andlw	15
 22877  001C7E  6F78               	movwf	sprintf@idx& (0+255),b
 22878                           
 22879                           ; BSR set to: 0
 22880                           ;doprnt.c: 1509: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
 22881  001C80  BB89               	btfsc	sprintf@flag& (0+255),5,b
 22882  001C82  D004               	goto	l12057
 22883                           
 22884                           ; BSR set to: 0
 22885  001C84  0E7E               	movlw	high STR_264
 22886  001C86  6F7E               	movwf	(_sprintf$2031+1)& (0+255),b
 22887  001C88  0E2D               	movlw	low STR_264
 22888  001C8A  D003               	goto	L41
 22889  001C8C                     l12057:
 22890                           
 22891                           ; BSR set to: 0
 22892  001C8C  0E7E               	movlw	high STR_263
 22893  001C8E  6F7E               	movwf	(_sprintf$2031+1)& (0+255),b
 22894  001C90  0E1C               	movlw	low STR_263
 22895  001C92                     L41:
 22896  001C92  6F7D               	movwf	_sprintf$2031& (0+255),b
 22897                           
 22898                           ; BSR set to: 0
 22899  001C94  5178               	movf	sprintf@idx& (0+255),w,b
 22900  001C96  257D               	addwf	_sprintf$2031& (0+255),w,b
 22901  001C98  6F75               	movwf	??_sprintf& (0+255),b
 22902  001C9A  0E00               	movlw	0
 22903  001C9C  217E               	addwfc	(_sprintf$2031+1)& (0+255),w,b
 22904  001C9E  6F76               	movwf	(??_sprintf+1)& (0+255),b
 22905  001CA0  C075  FFF6         	movff	??_sprintf,tblptrl
 22906  001CA4  C076  FFF7         	movff	??_sprintf+1,tblptrh
 22907  001CA8  0008               	tblrd		*
 22908  001CAA  CFF5 F088          	movff	tablat,sprintf@c
 22909                           
 22910                           ;doprnt.c: 1515: }
 22911                           ;doprnt.c: 1517: break;
 22912  001CAE  D016               	goto	l12067
 22913  001CB0                     l12061:
 22914                           
 22915                           ; BSR set to: 0
 22916                           ;doprnt.c: 1525: c = ((_val._val / octpowers[prec]) & 07) + '0';
 22917  001CB0  D853               	call	PL16	;call to abstracted procedure
 22918  001CB2  0EB0               	movlw	low _octpowers
 22919  001CB4  2575               	addwf	??_sprintf& (0+255),w,b
 22920  001CB6  6EF6               	movwf	tblptrl,c
 22921  001CB8  0E6F               	movlw	high _octpowers
 22922  001CBA  D837               	call	PL8	;call to abstracted procedure
 22923  001CBC  ECF4  F026         	call	___lldiv	;wreg free
 22924  001CC0  501E               	movf	?___lldiv,w,c
 22925  001CC2  0B07               	andlw	7
 22926  001CC4                     L40:
 22927  001CC4  0F30               	addlw	48
 22928  001CC6  6F88               	movwf	sprintf@c& (0+255),b
 22929                           
 22930                           ;doprnt.c: 1527: break;
 22931  001CC8  D009               	goto	l12067
 22932  001CCA                     l12065:
 22933                           
 22934                           ; BSR set to: 0
 22935  001CCA  5189               	movf	sprintf@flag& (0+255),w,b
 22936  001CCC  0BC0               	andlw	192
 22937                           
 22938                           ; Switch size 1, requested type "space"
 22939                           ; Number of cases is 4, Range of values is 0 to 192
 22940                           ; switch strategies available:
 22941                           ; Name         Instructions Cycles
 22942                           ; simple_byte           13     7 (average)
 22943                           ;	Chosen strategy is simple_byte
 22944  001CCE  E0A2               	bz	l12049
 22945  001CD0  0A40               	xorlw	64	; case 64
 22946  001CD2  E0EE               	bz	l12061
 22947  001CD4  0AC0               	xorlw	192	; case 128
 22948  001CD6  E0C9               	bz	l12051
 22949  001CD8  0A40               	xorlw	64	; case 192
 22950  001CDA  E09C               	bz	l12049
 22951  001CDC                     l12067:
 22952                           
 22953                           ; BSR set to: 0
 22954                           ;doprnt.c: 1531: ((*sp++ = (c)));
 22955  001CDC  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22956  001CE0  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 22957  001CE4  C088  FFDF         	movff	sprintf@c,indf2
 22958  001CE8  D777               	goto	l12031
 22959  001CEA                     l12071:
 22960                           
 22961                           ; BSR set to: 0
 22962  001CEA  0780               	decf	sprintf@prec& (0+255),f,b
 22963  001CEC  A0D8               	btfss	status,0,c
 22964  001CEE  0781               	decf	(sprintf@prec+1)& (0+255),f,b
 22965  001CF0  0100               	movlb	0	; () banked
 22966  001CF2  2980               	incf	sprintf@prec& (0+255),w,b
 22967  001CF4  B4D8               	btfsc	status,2,c
 22968  001CF6  2981               	incf	(sprintf@prec+1)& (0+255),w,b
 22969  001CF8  E1E8               	bnz	l12065
 22970                           
 22971                           ; BSR set to: 0
 22972                           ;doprnt.c: 1532: }
 22973                           ;doprnt.c: 1535: if((flag & 0x08) && width > 0)
 22974  001CFA  A789               	btfss	sprintf@flag& (0+255),3,b
 22975  001CFC  D00B               	goto	l12081
 22976                           
 22977                           ; BSR set to: 0
 22978  001CFE  5183               	movf	(sprintf@width+1)& (0+255),w,b
 22979  001D00  0A80               	xorlw	128
 22980  001D02  0F80               	addlw	-128
 22981  001D04  0E01               	movlw	1
 22982  001D06  B4D8               	btfsc	status,2,c
 22983  001D08  5D82               	subwf	sprintf@width& (0+255),w,b
 22984  001D0A  E304               	bnc	l12081
 22985  001D0C                     l12075:
 22986                           
 22987                           ; BSR set to: 0
 22988                           ;doprnt.c: 1537: ((*sp++ = (' ')));
 22989  001D0C  C06D  FFD9         	movff	sprintf@sp,fsr2l
 22990                           
 22991                           ; BSR set to: 0
 22992                           
 22993                           ; BSR set to: 0
 22994                           ;doprnt.c: 1538: while(--width);
 22995  001D10  D836               	call	PL36	;call to abstracted procedure
 22996  001D12  E1FC               	bnz	l12075
 22997  001D14                     l12081:
 22998                           
 22999                           ; BSR set to: 0
 23000  001D14  D853               	call	PL66	;call to abstracted procedure
 23001  001D16  0100               	movlb	0	; () banked
 23002  001D18  6788               	tstfsz	sprintf@c& (0+255),b
 23003  001D1A  D4CA               	goto	l11747
 23004  001D1C                     l12083:
 23005                           
 23006                           ; BSR set to: 0
 23007                           ;doprnt.c: 1545: *sp = 0;
 23008  001D1C  C06D  FFD9         	movff	sprintf@sp,fsr2l
 23009  001D20  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 23010  001D24  0E00               	movlw	0
 23011  001D26  6EDF               	movwf	indf2,c
 23012                           
 23013                           ; BSR set to: 0
 23014  001D28  0C00               	retlw	0
 23015  001D2A                     __end_of_sprintf:
 23016                           	opt stack 0
 23017  001D2A                     PL8:
 23018                           	opt stack 25
 23019  001D2A  2176               	addwfc	(??_sprintf+1)& (0+255),w,b
 23020  001D2C  6EF7               	movwf	tblptrh,c
 23021  001D2E  0009               	tblrd		*+
 23022  001D30  CFF5 F022          	movff	tablat,?___lldiv+4
 23023  001D34  0009               	tblrd		*+
 23024  001D36  CFF5 F023          	movff	tablat,?___lldiv+5
 23025  001D3A  0009               	tblrd		*+
 23026  001D3C  CFF5 F024          	movff	tablat,?___lldiv+6
 23027  001D40  000A               	tblrd		*-
 23028  001D42  CFF5 F025          	movff	tablat,?___lldiv+7
 23029  001D46  0012               	return	
 23030  001D48                     __end_ofPL8:
 23031                           	opt stack 0
 23032  001D48                     PL14:
 23033                           	opt stack 25
 23034  001D48  1589               	andwf	sprintf@flag& (0+255),w,b
 23035  001D4A  6F75               	movwf	??_sprintf& (0+255),b
 23036  001D4C  0E08               	movlw	8
 23037  001D4E  158A               	andwf	(sprintf@flag+1)& (0+255),w,b
 23038  001D50  6F76               	movwf	(??_sprintf+1)& (0+255),b
 23039  001D52  5176               	movf	(??_sprintf+1)& (0+255),w,b
 23040  001D54  0A08               	xorlw	8
 23041  001D56  0012               	return	
 23042  001D58                     __end_ofPL14:
 23043                           	opt stack 0
 23044  001D58                     PL16:
 23045                           	opt stack 25
 23046  001D58  C084  F01E         	movff	sprintf@_val,?___lldiv
 23047  001D5C  C085  F01F         	movff	sprintf@_val+1,?___lldiv+1
 23048  001D60  C086  F020         	movff	sprintf@_val+2,?___lldiv+2
 23049  001D64  C087  F021         	movff	sprintf@_val+3,?___lldiv+3
 23050  001D68  C080  F075         	movff	sprintf@prec,??_sprintf
 23051  001D6C  C081  F076         	movff	sprintf@prec+1,??_sprintf+1
 23052  001D70  90D8               	bcf	status,0,c
 23053  001D72  3775               	rlcf	??_sprintf& (0+255),f,b
 23054  001D74  3776               	rlcf	(??_sprintf+1)& (0+255),f,b
 23055  001D76  90D8               	bcf	status,0,c
 23056  001D78  3775               	rlcf	??_sprintf& (0+255),f,b
 23057  001D7A  3776               	rlcf	(??_sprintf+1)& (0+255),f,b
 23058  001D7C  0012               	return	
 23059  001D7E                     __end_ofPL16:
 23060                           	opt stack 0
 23061  001D7E                     PL36:
 23062                           	opt stack 25
 23063  001D7E  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 23064  001D82  0E20               	movlw	32
 23065  001D84  6EDF               	movwf	indf2,c
 23066  001D86  4B6D               	infsnz	sprintf@sp& (0+255),f,b
 23067  001D88  2B6E               	incf	(sprintf@sp+1)& (0+255),f,b
 23068  001D8A  0782               	decf	sprintf@width& (0+255),f,b
 23069  001D8C  A0D8               	btfss	status,0,c
 23070  001D8E  0783               	decf	(sprintf@width+1)& (0+255),f,b
 23071  001D90  0100               	movlb	0	; () banked
 23072  001D92  5183               	movf	(sprintf@width+1)& (0+255),w,b
 23073  001D94  1182               	iorwf	sprintf@width& (0+255),w,b
 23074  001D96  0012               	return	
 23075  001D98                     __end_ofPL36:
 23076                           	opt stack 0
 23077  001D98                     PL50:
 23078                           	opt stack 25
 23079  001D98  6ED9               	movwf	fsr2l,c
 23080  001D9A  6ADA               	clrf	fsr2h,c
 23081  001D9C  CFDE F084          	movff	postinc2,sprintf@_val
 23082  001DA0  CFDE F085          	movff	postinc2,sprintf@_val+1
 23083  001DA4  CFDE F086          	movff	postinc2,sprintf@_val+2
 23084  001DA8  CFDE F087          	movff	postinc2,sprintf@_val+3
 23085  001DAC  0C04               	retlw	4
 23086  001DAE                     __end_ofPL50:
 23087                           	opt stack 0
 23088  001DAE                     PL54:
 23089                           	opt stack 25
 23090  001DAE  C06D  FFD9         	movff	sprintf@sp,fsr2l
 23091  001DB2  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 23092  001DB6  0E20               	movlw	32
 23093  001DB8  6EDF               	movwf	indf2,c
 23094  001DBA  0C20               	retlw	32
 23095  001DBC                     __end_ofPL54:
 23096                           	opt stack 0
 23097  001DBC                     PL66:
 23098                           	opt stack 25
 23099  001DBC  C06F  FFF6         	movff	sprintf@f,tblptrl
 23100  001DC0  C070  FFF7         	movff	sprintf@f+1,tblptrh
 23101  001DC4  4B6F               	infsnz	sprintf@f& (0+255),f,b
 23102  001DC6  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 23103  001DC8  0008               	tblrd		*
 23104  001DCA  CFF5 F088          	movff	tablat,sprintf@c
 23105  001DCE  0012               	return	
 23106  001DD0                     __end_ofPL66:
 23107                           	opt stack 0
 23108  001DD0                     PL76:
 23109                           	opt stack 25
 23110  001DD0  4B6F               	infsnz	sprintf@f& (0+255),f,b
 23111  001DD2  2B70               	incf	(sprintf@f+1)& (0+255),f,b
 23112  001DD4  C06F  FFF6         	movff	sprintf@f,tblptrl
 23113  001DD8  C070  FFF7         	movff	sprintf@f+1,tblptrh
 23114  001DDC  0008               	tblrd		*
 23115  001DDE  50F5               	movf	tablat,w,c
 23116  001DE0  0012               	return	
 23117  001DE2                     __end_ofPL76:
 23118                           	opt stack 0
 23119  001DE2                     PL88:
 23120                           	opt stack 25
 23121  001DE2  C06E  FFDA         	movff	sprintf@sp+1,fsr2h
 23122  001DE6  0E30               	movlw	48
 23123  001DE8  6EDF               	movwf	indf2,c
 23124  001DEA  0C30               	retlw	48
 23125  001DEC                     __end_ofPL88:
 23126                           	opt stack 0
 23127  001DEC                     PL104:
 23128                           	opt stack 25
 23129  001DEC  A0D8               	btfss	status,0,c
 23130  001DEE  0783               	decf	(sprintf@width+1)& (0+255),f,b
 23131  001DF0  0100               	movlb	0	; () banked
 23132  001DF2  2982               	incf	sprintf@width& (0+255),w,b
 23133  001DF4  0012               	return	
 23134  001DF6                     __end_ofPL104:
 23135                           	opt stack 0
 23136                           tblptru	equ	0xFF8
 23137                           tblptrh	equ	0xFF7
 23138                           tblptrl	equ	0xFF6
 23139                           tablat	equ	0xFF5
 23140                           prodh	equ	0xFF4
 23141                           prodl	equ	0xFF3
 23142                           intcon	equ	0xFF2
 23143                           indf0	equ	0xFEF
 23144                           postinc0	equ	0xFEE
 23145                           fsr0h	equ	0xFEA
 23146                           fsr0l	equ	0xFE9
 23147                           wreg	equ	0xFE8
 23148                           indf1	equ	0xFE7
 23149                           postinc1	equ	0xFE6
 23150                           postdec1	equ	0xFE5
 23151                           fsr1h	equ	0xFE2
 23152                           fsr1l	equ	0xFE1
 23153                           indf2	equ	0xFDF
 23154                           postinc2	equ	0xFDE
 23155                           postdec2	equ	0xFDD
 23156                           plusw2	equ	0xFDB
 23157                           fsr2h	equ	0xFDA
 23158                           fsr2l	equ	0xFD9
 23159                           status	equ	0xFD8
 23160                           
 23161 ;; *************** function ___wmul *****************
 23162 ;; Defined at:
 23163 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\wmul.c"
 23164 ;; Parameters:    Size  Location     Type
 23165 ;;  multiplier      2   29[COMRAM] unsigned int 
 23166 ;;  multiplicand    2   31[COMRAM] unsigned int 
 23167 ;; Auto vars:     Size  Location     Type
 23168 ;;  product         2   33[COMRAM] unsigned int 
 23169 ;; Return value:  Size  Location     Type
 23170 ;;                  2   29[COMRAM] unsigned int 
 23171 ;; Registers used:
 23172 ;;		wreg, status,2, status,0, prodl, prodh
 23173 ;; Tracked objects:
 23174 ;;		On entry : 0/0
 23175 ;;		On exit  : 0/0
 23176 ;;		Unchanged: 0/0
 23177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23178 ;;      Params:         4       0       0       0       0       0       0
 23179 ;;      Locals:         2       0       0       0       0       0       0
 23180 ;;      Temps:          0       0       0       0       0       0       0
 23181 ;;      Totals:         6       0       0       0       0       0       0
 23182 ;;Total ram usage:        6 bytes
 23183 ;; Hardware stack levels used:    1
 23184 ;; Hardware stack levels required when called:    3
 23185 ;; This function calls:
 23186 ;;		Nothing
 23187 ;; This function is called by:
 23188 ;;		_sprintf
 23189 ;;		_atoi
 23190 ;; This function uses a non-reentrant model
 23191 ;;
 23192                           
 23193                           	psect	text57
 23194  0056A6                     __ptext57:
 23195                           	opt stack 0
 23196  0056A6                     ___wmul:
 23197                           	opt stack 25
 23198                           
 23199                           ; BSR set to: 0
 23200                           ;incstack = 0
 23201                           ;incstack = 0
 23202  0056A6  501E               	movf	___wmul@multiplier,w,c
 23203  0056A8  0220               	mulwf	___wmul@multiplicand,c
 23204  0056AA  CFF3 F022          	movff	prodl,___wmul@product
 23205  0056AE  CFF4 F023          	movff	prodh,___wmul@product+1
 23206  0056B2  501E               	movf	___wmul@multiplier,w,c
 23207  0056B4  0221               	mulwf	___wmul@multiplicand+1,c
 23208  0056B6  D808               	call	PL90	;call to abstracted procedure
 23209  0056B8  501F               	movf	___wmul@multiplier+1,w,c
 23210  0056BA  0220               	mulwf	___wmul@multiplicand,c
 23211  0056BC  D805               	call	PL90	;call to abstracted procedure
 23212  0056BE  C022  F01E         	movff	___wmul@product,?___wmul
 23213  0056C2  C023  F01F         	movff	___wmul@product+1,?___wmul+1
 23214  0056C6  0012               	return	
 23215  0056C8                     __end_of___wmul:
 23216                           	opt stack 0
 23217  0056C8                     PL90:
 23218                           	opt stack 25
 23219  0056C8  CFF3 FFF4          	movff	prodl,prodh
 23220  0056CC  6AF3               	clrf	prodl,c
 23221  0056CE  50F3               	movf	prodl,w,c
 23222  0056D0  2622               	addwf	___wmul@product,f,c
 23223  0056D2  50F4               	movf	prodh,w,c
 23224  0056D4  2223               	addwfc	___wmul@product+1,f,c
 23225  0056D6  0012               	return	
 23226  0056D8                     __end_ofPL90:
 23227                           	opt stack 0
 23228                           tblptru	equ	0xFF8
 23229                           tblptrh	equ	0xFF7
 23230                           tblptrl	equ	0xFF6
 23231                           tablat	equ	0xFF5
 23232                           prodh	equ	0xFF4
 23233                           prodl	equ	0xFF3
 23234                           intcon	equ	0xFF2
 23235                           indf0	equ	0xFEF
 23236                           postinc0	equ	0xFEE
 23237                           fsr0h	equ	0xFEA
 23238                           fsr0l	equ	0xFE9
 23239                           wreg	equ	0xFE8
 23240                           indf1	equ	0xFE7
 23241                           postinc1	equ	0xFE6
 23242                           postdec1	equ	0xFE5
 23243                           fsr1h	equ	0xFE2
 23244                           fsr1l	equ	0xFE1
 23245                           indf2	equ	0xFDF
 23246                           postinc2	equ	0xFDE
 23247                           postdec2	equ	0xFDD
 23248                           plusw2	equ	0xFDB
 23249                           fsr2h	equ	0xFDA
 23250                           fsr2l	equ	0xFD9
 23251                           status	equ	0xFD8
 23252                           
 23253 ;; *************** function ___llmod *****************
 23254 ;; Defined at:
 23255 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\llmod.c"
 23256 ;; Parameters:    Size  Location     Type
 23257 ;;  dividend        4    5[BANK0 ] unsigned long 
 23258 ;;  divisor         4    9[BANK0 ] unsigned long 
 23259 ;; Auto vars:     Size  Location     Type
 23260 ;;  counter         1   37[COMRAM] unsigned char 
 23261 ;; Return value:  Size  Location     Type
 23262 ;;                  4    5[BANK0 ] unsigned long 
 23263 ;; Registers used:
 23264 ;;		wreg, status,2, status,0
 23265 ;; Tracked objects:
 23266 ;;		On entry : F/0
 23267 ;;		On exit  : F/0
 23268 ;;		Unchanged: 0/0
 23269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23270 ;;      Params:         0       8       0       0       0       0       0
 23271 ;;      Locals:         1       0       0       0       0       0       0
 23272 ;;      Temps:          0       0       0       0       0       0       0
 23273 ;;      Totals:         1       8       0       0       0       0       0
 23274 ;;Total ram usage:        9 bytes
 23275 ;; Hardware stack levels used:    1
 23276 ;; Hardware stack levels required when called:    3
 23277 ;; This function calls:
 23278 ;;		Nothing
 23279 ;; This function is called by:
 23280 ;;		_sprintf
 23281 ;;		_ultoa
 23282 ;; This function uses a non-reentrant model
 23283 ;;
 23284                           
 23285                           	psect	text58
 23286  00507A                     __ptext58:
 23287                           	opt stack 0
 23288  00507A                     ___llmod:
 23289                           	opt stack 24
 23290                           
 23291                           ; BSR set to: 0
 23292                           
 23293                           ;incstack = 0
 23294                           ;incstack = 0
 23295  00507A  516C               	movf	(___llmod@divisor+3)& (0+255),w,b
 23296  00507C  1169               	iorwf	___llmod@divisor& (0+255),w,b
 23297  00507E  116A               	iorwf	(___llmod@divisor+1)& (0+255),w,b
 23298  005080  116B               	iorwf	(___llmod@divisor+2)& (0+255),w,b
 23299  005082  E023               	bz	l2364
 23300                           
 23301                           ; BSR set to: 0
 23302  005084  0E01               	movlw	1
 23303  005086  6E26               	movwf	___llmod@counter,c
 23304  005088  D006               	goto	l13047
 23305  00508A                     l13045:
 23306                           
 23307                           ; BSR set to: 0
 23308  00508A  90D8               	bcf	status,0,c
 23309  00508C  3769               	rlcf	___llmod@divisor& (0+255),f,b
 23310  00508E  376A               	rlcf	(___llmod@divisor+1)& (0+255),f,b
 23311  005090  376B               	rlcf	(___llmod@divisor+2)& (0+255),f,b
 23312  005092  376C               	rlcf	(___llmod@divisor+3)& (0+255),f,b
 23313  005094  2A26               	incf	___llmod@counter,f,c
 23314  005096                     l13047:
 23315                           
 23316                           ; BSR set to: 0
 23317  005096  AF6C               	btfss	(___llmod@divisor+3)& (0+255),7,b
 23318  005098  D7F8               	goto	l13045
 23319  00509A                     l13049:
 23320                           
 23321                           ; BSR set to: 0
 23322  00509A  5169               	movf	___llmod@divisor& (0+255),w,b
 23323  00509C  5D65               	subwf	___llmod@dividend& (0+255),w,b
 23324  00509E  516A               	movf	(___llmod@divisor+1)& (0+255),w,b
 23325  0050A0  5966               	subwfb	(___llmod@dividend+1)& (0+255),w,b
 23326  0050A2  516B               	movf	(___llmod@divisor+2)& (0+255),w,b
 23327  0050A4  5967               	subwfb	(___llmod@dividend+2)& (0+255),w,b
 23328  0050A6  516C               	movf	(___llmod@divisor+3)& (0+255),w,b
 23329  0050A8  5968               	subwfb	(___llmod@dividend+3)& (0+255),w,b
 23330  0050AA  E308               	bnc	l13053
 23331                           
 23332                           ; BSR set to: 0
 23333  0050AC  5169               	movf	___llmod@divisor& (0+255),w,b
 23334  0050AE  5F65               	subwf	___llmod@dividend& (0+255),f,b
 23335  0050B0  516A               	movf	(___llmod@divisor+1)& (0+255),w,b
 23336  0050B2  5B66               	subwfb	(___llmod@dividend+1)& (0+255),f,b
 23337  0050B4  516B               	movf	(___llmod@divisor+2)& (0+255),w,b
 23338  0050B6  5B67               	subwfb	(___llmod@dividend+2)& (0+255),f,b
 23339  0050B8  516C               	movf	(___llmod@divisor+3)& (0+255),w,b
 23340  0050BA  5B68               	subwfb	(___llmod@dividend+3)& (0+255),f,b
 23341  0050BC                     l13053:
 23342                           
 23343                           ; BSR set to: 0
 23344  0050BC  90D8               	bcf	status,0,c
 23345  0050BE  336C               	rrcf	(___llmod@divisor+3)& (0+255),f,b
 23346  0050C0  336B               	rrcf	(___llmod@divisor+2)& (0+255),f,b
 23347  0050C2  336A               	rrcf	(___llmod@divisor+1)& (0+255),f,b
 23348  0050C4  3369               	rrcf	___llmod@divisor& (0+255),f,b
 23349                           
 23350                           ; BSR set to: 0
 23351  0050C6  2E26               	decfsz	___llmod@counter,f,c
 23352  0050C8  D7E8               	goto	l13049
 23353  0050CA                     l2364:
 23354                           
 23355                           ; BSR set to: 0
 23356  0050CA  C065  F065         	movff	___llmod@dividend,?___llmod
 23357  0050CE  C066  F066         	movff	___llmod@dividend+1,?___llmod+1
 23358  0050D2  C067  F067         	movff	___llmod@dividend+2,?___llmod+2
 23359  0050D6  C068  F068         	movff	___llmod@dividend+3,?___llmod+3
 23360                           
 23361                           ; BSR set to: 0
 23362  0050DA  0012               	return	
 23363  0050DC                     __end_of___llmod:
 23364                           	opt stack 0
 23365                           tblptru	equ	0xFF8
 23366                           tblptrh	equ	0xFF7
 23367                           tblptrl	equ	0xFF6
 23368                           tablat	equ	0xFF5
 23369                           prodh	equ	0xFF4
 23370                           prodl	equ	0xFF3
 23371                           intcon	equ	0xFF2
 23372                           indf0	equ	0xFEF
 23373                           postinc0	equ	0xFEE
 23374                           fsr0h	equ	0xFEA
 23375                           fsr0l	equ	0xFE9
 23376                           wreg	equ	0xFE8
 23377                           indf1	equ	0xFE7
 23378                           postinc1	equ	0xFE6
 23379                           postdec1	equ	0xFE5
 23380                           fsr1h	equ	0xFE2
 23381                           fsr1l	equ	0xFE1
 23382                           indf2	equ	0xFDF
 23383                           postinc2	equ	0xFDE
 23384                           postdec2	equ	0xFDD
 23385                           plusw2	equ	0xFDB
 23386                           fsr2h	equ	0xFDA
 23387                           fsr2l	equ	0xFD9
 23388                           status	equ	0xFD8
 23389                           
 23390 ;; *************** function ___lldiv *****************
 23391 ;; Defined at:
 23392 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lldiv.c"
 23393 ;; Parameters:    Size  Location     Type
 23394 ;;  dividend        4   29[COMRAM] unsigned long 
 23395 ;;  divisor         4   33[COMRAM] unsigned long 
 23396 ;; Auto vars:     Size  Location     Type
 23397 ;;  quotient        4    0[BANK0 ] unsigned long 
 23398 ;;  counter         1    4[BANK0 ] unsigned char 
 23399 ;; Return value:  Size  Location     Type
 23400 ;;                  4   29[COMRAM] unsigned long 
 23401 ;; Registers used:
 23402 ;;		wreg, status,2, status,0
 23403 ;; Tracked objects:
 23404 ;;		On entry : F/0
 23405 ;;		On exit  : F/0
 23406 ;;		Unchanged: 0/0
 23407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23408 ;;      Params:         8       0       0       0       0       0       0
 23409 ;;      Locals:         0       5       0       0       0       0       0
 23410 ;;      Temps:          0       0       0       0       0       0       0
 23411 ;;      Totals:         8       5       0       0       0       0       0
 23412 ;;Total ram usage:       13 bytes
 23413 ;; Hardware stack levels used:    1
 23414 ;; Hardware stack levels required when called:    3
 23415 ;; This function calls:
 23416 ;;		Nothing
 23417 ;; This function is called by:
 23418 ;;		_sprintf
 23419 ;;		_ultoa
 23420 ;; This function uses a non-reentrant model
 23421 ;;
 23422                           
 23423                           	psect	text59
 23424  004DE8                     __ptext59:
 23425                           	opt stack 0
 23426  004DE8                     ___lldiv:
 23427                           	opt stack 24
 23428                           
 23429                           ; BSR set to: 0
 23430                           
 23431                           ; BSR set to: 0
 23432                           ;incstack = 0
 23433                           ;incstack = 0
 23434  004DE8  6B60               	clrf	___lldiv@quotient& (0+255),b
 23435  004DEA  6B61               	clrf	(___lldiv@quotient+1)& (0+255),b
 23436  004DEC  6B62               	clrf	(___lldiv@quotient+2)& (0+255),b
 23437  004DEE  6B63               	clrf	(___lldiv@quotient+3)& (0+255),b
 23438                           
 23439                           ; BSR set to: 0
 23440  004DF0  5025               	movf	___lldiv@divisor+3,w,c
 23441  004DF2  1022               	iorwf	___lldiv@divisor,w,c
 23442  004DF4  1023               	iorwf	___lldiv@divisor+1,w,c
 23443  004DF6  1024               	iorwf	___lldiv@divisor+2,w,c
 23444  004DF8  E029               	bz	l2354
 23445                           
 23446                           ; BSR set to: 0
 23447  004DFA  0E01               	movlw	1
 23448  004DFC  6F64               	movwf	___lldiv@counter& (0+255),b
 23449  004DFE  D006               	goto	l13027
 23450  004E00                     l13025:
 23451                           
 23452                           ; BSR set to: 0
 23453  004E00  90D8               	bcf	status,0,c
 23454  004E02  3622               	rlcf	___lldiv@divisor,f,c
 23455  004E04  3623               	rlcf	___lldiv@divisor+1,f,c
 23456  004E06  3624               	rlcf	___lldiv@divisor+2,f,c
 23457  004E08  3625               	rlcf	___lldiv@divisor+3,f,c
 23458  004E0A  2B64               	incf	___lldiv@counter& (0+255),f,b
 23459  004E0C                     l13027:
 23460                           
 23461                           ; BSR set to: 0
 23462  004E0C  AE25               	btfss	___lldiv@divisor+3,7,c
 23463  004E0E  D7F8               	goto	l13025
 23464  004E10                     l13029:
 23465                           
 23466                           ; BSR set to: 0
 23467  004E10  90D8               	bcf	status,0,c
 23468  004E12  3760               	rlcf	___lldiv@quotient& (0+255),f,b
 23469  004E14  3761               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23470  004E16  3762               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23471  004E18  3763               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23472                           
 23473                           ; BSR set to: 0
 23474  004E1A  5022               	movf	___lldiv@divisor,w,c
 23475  004E1C  5C1E               	subwf	___lldiv@dividend,w,c
 23476  004E1E  5023               	movf	___lldiv@divisor+1,w,c
 23477  004E20  581F               	subwfb	___lldiv@dividend+1,w,c
 23478  004E22  5024               	movf	___lldiv@divisor+2,w,c
 23479  004E24  5820               	subwfb	___lldiv@dividend+2,w,c
 23480  004E26  5025               	movf	___lldiv@divisor+3,w,c
 23481  004E28  5821               	subwfb	___lldiv@dividend+3,w,c
 23482  004E2A  E309               	bnc	l13037
 23483                           
 23484                           ; BSR set to: 0
 23485  004E2C  5022               	movf	___lldiv@divisor,w,c
 23486  004E2E  5E1E               	subwf	___lldiv@dividend,f,c
 23487  004E30  5023               	movf	___lldiv@divisor+1,w,c
 23488  004E32  5A1F               	subwfb	___lldiv@dividend+1,f,c
 23489  004E34  5024               	movf	___lldiv@divisor+2,w,c
 23490  004E36  5A20               	subwfb	___lldiv@dividend+2,f,c
 23491  004E38  5025               	movf	___lldiv@divisor+3,w,c
 23492  004E3A  5A21               	subwfb	___lldiv@dividend+3,f,c
 23493                           
 23494                           ; BSR set to: 0
 23495  004E3C  8160               	bsf	___lldiv@quotient& (0+255),0,b
 23496  004E3E                     l13037:
 23497                           
 23498                           ; BSR set to: 0
 23499  004E3E  90D8               	bcf	status,0,c
 23500  004E40  3225               	rrcf	___lldiv@divisor+3,f,c
 23501  004E42  3224               	rrcf	___lldiv@divisor+2,f,c
 23502  004E44  3223               	rrcf	___lldiv@divisor+1,f,c
 23503  004E46  3222               	rrcf	___lldiv@divisor,f,c
 23504                           
 23505                           ; BSR set to: 0
 23506  004E48  2F64               	decfsz	___lldiv@counter& (0+255),f,b
 23507  004E4A  D7E2               	goto	l13029
 23508  004E4C                     l2354:
 23509                           
 23510                           ; BSR set to: 0
 23511  004E4C  C060  F01E         	movff	___lldiv@quotient,?___lldiv
 23512  004E50  C061  F01F         	movff	___lldiv@quotient+1,?___lldiv+1
 23513  004E54  C062  F020         	movff	___lldiv@quotient+2,?___lldiv+2
 23514  004E58  C063  F021         	movff	___lldiv@quotient+3,?___lldiv+3
 23515                           
 23516                           ; BSR set to: 0
 23517  004E5C  0012               	return	
 23518  004E5E                     __end_of___lldiv:
 23519                           	opt stack 0
 23520                           tblptru	equ	0xFF8
 23521                           tblptrh	equ	0xFF7
 23522                           tblptrl	equ	0xFF6
 23523                           tablat	equ	0xFF5
 23524                           prodh	equ	0xFF4
 23525                           prodl	equ	0xFF3
 23526                           intcon	equ	0xFF2
 23527                           indf0	equ	0xFEF
 23528                           postinc0	equ	0xFEE
 23529                           fsr0h	equ	0xFEA
 23530                           fsr0l	equ	0xFE9
 23531                           wreg	equ	0xFE8
 23532                           indf1	equ	0xFE7
 23533                           postinc1	equ	0xFE6
 23534                           postdec1	equ	0xFE5
 23535                           fsr1h	equ	0xFE2
 23536                           fsr1l	equ	0xFE1
 23537                           indf2	equ	0xFDF
 23538                           postinc2	equ	0xFDE
 23539                           postdec2	equ	0xFDD
 23540                           plusw2	equ	0xFDB
 23541                           fsr2h	equ	0xFDA
 23542                           fsr2l	equ	0xFD9
 23543                           status	equ	0xFD8
 23544                           
 23545 ;; *************** function _isdigit *****************
 23546 ;; Defined at:
 23547 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\isdigit.c"
 23548 ;; Parameters:    Size  Location     Type
 23549 ;;  c               1    wreg     unsigned char 
 23550 ;; Auto vars:     Size  Location     Type
 23551 ;;  c               1   31[COMRAM] unsigned char 
 23552 ;; Return value:  Size  Location     Type
 23553 ;;		None               void
 23554 ;; Registers used:
 23555 ;;		wreg, status,2, status,0
 23556 ;; Tracked objects:
 23557 ;;		On entry : 0/0
 23558 ;;		On exit  : 0/0
 23559 ;;		Unchanged: 0/0
 23560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23561 ;;      Params:         0       0       0       0       0       0       0
 23562 ;;      Locals:         2       0       0       0       0       0       0
 23563 ;;      Temps:          1       0       0       0       0       0       0
 23564 ;;      Totals:         3       0       0       0       0       0       0
 23565 ;;Total ram usage:        3 bytes
 23566 ;; Hardware stack levels used:    1
 23567 ;; Hardware stack levels required when called:    3
 23568 ;; This function calls:
 23569 ;;		Nothing
 23570 ;; This function is called by:
 23571 ;;		_sprintf
 23572 ;;		_atoi
 23573 ;; This function uses a non-reentrant model
 23574 ;;
 23575                           
 23576                           	psect	text60
 23577  005762                     __ptext60:
 23578                           	opt stack 0
 23579  005762                     _isdigit:
 23580                           	opt stack 25
 23581                           
 23582                           ; BSR set to: 0
 23583                           ;incstack = 0
 23584                           ;incstack = 0
 23585                           ;isdigit@c stored from wreg
 23586  005762  CFE8 F020          	movff	wreg,isdigit@c
 23587  005766  6A1F               	clrf	_isdigit$2902,c
 23588  005768  0E3A               	movlw	58
 23589  00576A  6020               	cpfslt	isdigit@c,c
 23590  00576C  D005               	goto	l12985
 23591  00576E  0E2F               	movlw	47
 23592  005770  6420               	cpfsgt	isdigit@c,c
 23593  005772  D002               	goto	l12985
 23594  005774  0E01               	movlw	1
 23595  005776  6E1F               	movwf	_isdigit$2902,c
 23596  005778                     l12985:
 23597  005778  C01F  F01E         	movff	_isdigit$2902,??_isdigit
 23598  00577C  301E               	rrcf	??_isdigit,w,c
 23599  00577E  0012               	return	
 23600  005780                     __end_of_isdigit:
 23601                           	opt stack 0
 23602                           tblptru	equ	0xFF8
 23603                           tblptrh	equ	0xFF7
 23604                           tblptrl	equ	0xFF6
 23605                           tablat	equ	0xFF5
 23606                           prodh	equ	0xFF4
 23607                           prodl	equ	0xFF3
 23608                           intcon	equ	0xFF2
 23609                           indf0	equ	0xFEF
 23610                           postinc0	equ	0xFEE
 23611                           fsr0h	equ	0xFEA
 23612                           fsr0l	equ	0xFE9
 23613                           wreg	equ	0xFE8
 23614                           indf1	equ	0xFE7
 23615                           postinc1	equ	0xFE6
 23616                           postdec1	equ	0xFE5
 23617                           fsr1h	equ	0xFE2
 23618                           fsr1l	equ	0xFE1
 23619                           indf2	equ	0xFDF
 23620                           postinc2	equ	0xFDE
 23621                           postdec2	equ	0xFDD
 23622                           plusw2	equ	0xFDB
 23623                           fsr2h	equ	0xFDA
 23624                           fsr2l	equ	0xFD9
 23625                           status	equ	0xFD8
 23626                           
 23627 ;; *************** function _printFirmwareVersion *****************
 23628 ;; Defined at:
 23629 ;;		line 2793 in file "main.c"
 23630 ;; Parameters:    Size  Location     Type
 23631 ;;		None
 23632 ;; Auto vars:     Size  Location     Type
 23633 ;;  wrkbuf         20   15[BANK0 ] unsigned char [20]
 23634 ;; Return value:  Size  Location     Type
 23635 ;;		None               void
 23636 ;; Registers used:
 23637 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 23638 ;; Tracked objects:
 23639 ;;		On entry : 0/1
 23640 ;;		On exit  : 0/0
 23641 ;;		Unchanged: 0/0
 23642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23643 ;;      Params:         0       0       0       0       0       0       0
 23644 ;;      Locals:         0      20       0       0       0       0       0
 23645 ;;      Temps:          0       0       0       0       0       0       0
 23646 ;;      Totals:         0      20       0       0       0       0       0
 23647 ;;Total ram usage:       20 bytes
 23648 ;; Hardware stack levels used:    1
 23649 ;; Hardware stack levels required when called:    6
 23650 ;; This function calls:
 23651 ;;		_putsUSART
 23652 ;;		_WriteUSART
 23653 ;;		_itoa
 23654 ;; This function is called by:
 23655 ;;		_main
 23656 ;;		_doModeVerbose
 23657 ;; This function uses a non-reentrant model
 23658 ;;
 23659                           
 23660                           	psect	text61
 23661  004BE6                     __ptext61:
 23662                           	opt stack 0
 23663  004BE6                     _printFirmwareVersion:
 23664                           	opt stack 23
 23665                           
 23666                           ;main.c: 2794: char wrkbuf[20];
 23667                           ;main.c: 2795: putsUSART((char *) "Version: ");
 23668                           
 23669                           ;incstack = 0
 23670                           ;incstack = 0
 23671  004BE6  0E7E               	movlw	high STR_254
 23672  004BE8  6E20               	movwf	?_putsUSART+1,c
 23673  004BEA  0E9D               	movlw	low STR_254
 23674  004BEC  6E1F               	movwf	?_putsUSART,c
 23675  004BEE  EC25  F029         	call	_putsUSART	;wreg free
 23676                           
 23677                           ;main.c: 2796: itoa(wrkbuf, 1, 10);
 23678  004BF2  D837               	call	PL56	;call to abstracted procedure
 23679  004BF4  0E01               	movlw	1
 23680  004BF6  6F6B               	movwf	(?_itoa+2)& (0+255),b
 23681  004BF8  6B6E               	clrf	(?_itoa+5)& (0+255),b
 23682  004BFA  0E0A               	movlw	10
 23683  004BFC  6F6D               	movwf	(?_itoa+4)& (0+255),b
 23684  004BFE  EC1D  F02B         	call	_itoa	;wreg free
 23685                           
 23686                           ; BSR set to: 0
 23687                           ;main.c: 2797: putsUSART(wrkbuf);
 23688  004C02  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23689  004C04  6E20               	movwf	?_putsUSART+1,c
 23690  004C06  0E6F               	movlw	low printFirmwareVersion@wrkbuf
 23691  004C08  6E1F               	movwf	?_putsUSART,c
 23692  004C0A  EC25  F029         	call	_putsUSART	;wreg free
 23693  004C0E                     l1232:
 23694  004C0E  A2AC               	btfss	4012,1,c	;volatile
 23695  004C10  D7FE               	goto	l1232
 23696                           
 23697                           ;main.c: 2799: WriteUSART('.');
 23698  004C12  0E2E               	movlw	46
 23699  004C14  ECF5  F02B         	call	_WriteUSART
 23700                           
 23701                           ;main.c: 2800: itoa(wrkbuf, 0, 10);
 23702  004C18  D824               	call	PL56	;call to abstracted procedure
 23703  004C1A  6B6B               	clrf	(?_itoa+2)& (0+255),b
 23704  004C1C  6B6E               	clrf	(?_itoa+5)& (0+255),b
 23705  004C1E  0E0A               	movlw	10
 23706  004C20  6F6D               	movwf	(?_itoa+4)& (0+255),b
 23707  004C22  EC1D  F02B         	call	_itoa	;wreg free
 23708                           
 23709                           ; BSR set to: 0
 23710                           ;main.c: 2801: putsUSART(wrkbuf);
 23711  004C26  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23712  004C28  6E20               	movwf	?_putsUSART+1,c
 23713  004C2A  0E6F               	movlw	low printFirmwareVersion@wrkbuf
 23714  004C2C  6E1F               	movwf	?_putsUSART,c
 23715  004C2E  EC25  F029         	call	_putsUSART	;wreg free
 23716  004C32                     l1235:
 23717  004C32  A2AC               	btfss	4012,1,c	;volatile
 23718  004C34  D7FE               	goto	l1235
 23719                           
 23720                           ;main.c: 2803: WriteUSART('.');
 23721  004C36  0E2E               	movlw	46
 23722  004C38  ECF5  F02B         	call	_WriteUSART
 23723                           
 23724                           ;main.c: 2804: itoa(wrkbuf, 0, 10);
 23725  004C3C  D812               	call	PL56	;call to abstracted procedure
 23726  004C3E  6B6B               	clrf	(?_itoa+2)& (0+255),b
 23727  004C40  6B6E               	clrf	(?_itoa+5)& (0+255),b
 23728  004C42  0E0A               	movlw	10
 23729  004C44  6F6D               	movwf	(?_itoa+4)& (0+255),b
 23730  004C46  EC1D  F02B         	call	_itoa	;wreg free
 23731                           
 23732                           ; BSR set to: 0
 23733                           ;main.c: 2805: putsUSART(wrkbuf);
 23734  004C4A  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23735  004C4C  6E20               	movwf	?_putsUSART+1,c
 23736  004C4E  0E6F               	movlw	low printFirmwareVersion@wrkbuf
 23737  004C50  6E1F               	movwf	?_putsUSART,c
 23738  004C52  EC25  F029         	call	_putsUSART	;wreg free
 23739                           
 23740                           ;main.c: 2806: putsUSART((char *) "\r\n");
 23741  004C56  0E74               	movlw	high (STR_197+50)
 23742  004C58  6E20               	movwf	?_putsUSART+1,c
 23743  004C5A  0EC0               	movlw	low (STR_197+50)
 23744  004C5C  6E1F               	movwf	?_putsUSART,c
 23745  004C5E  EF25  F029         	goto	_putsUSART	;wreg free
 23746  004C62                     __end_of_printFirmwareVersion:
 23747                           	opt stack 0
 23748  004C62                     PL56:
 23749                           	opt stack 23
 23750  004C62  0100               	movlb	0	; () banked
 23751  004C64  0E00               	movlw	high printFirmwareVersion@wrkbuf
 23752  004C66  6F6A               	movwf	(?_itoa+1)& (0+255),b
 23753  004C68  0E6F               	movlw	low printFirmwareVersion@wrkbuf
 23754  004C6A  6F69               	movwf	?_itoa& (0+255),b
 23755  004C6C  6B6C               	clrf	(?_itoa+3)& (0+255),b
 23756  004C6E  0012               	return	
 23757  004C70                     __end_ofPL56:
 23758                           	opt stack 0
 23759                           tblptru	equ	0xFF8
 23760                           tblptrh	equ	0xFF7
 23761                           tblptrl	equ	0xFF6
 23762                           tablat	equ	0xFF5
 23763                           prodh	equ	0xFF4
 23764                           prodl	equ	0xFF3
 23765                           intcon	equ	0xFF2
 23766                           indf0	equ	0xFEF
 23767                           postinc0	equ	0xFEE
 23768                           fsr0h	equ	0xFEA
 23769                           fsr0l	equ	0xFE9
 23770                           wreg	equ	0xFE8
 23771                           indf1	equ	0xFE7
 23772                           postinc1	equ	0xFE6
 23773                           postdec1	equ	0xFE5
 23774                           fsr1h	equ	0xFE2
 23775                           fsr1l	equ	0xFE1
 23776                           indf2	equ	0xFDF
 23777                           postinc2	equ	0xFDE
 23778                           postdec2	equ	0xFDD
 23779                           plusw2	equ	0xFDB
 23780                           fsr2h	equ	0xFDA
 23781                           fsr2l	equ	0xFD9
 23782                           status	equ	0xFD8
 23783                           
 23784 ;; *************** function _itoa *****************
 23785 ;; Defined at:
 23786 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23787 ;; Parameters:    Size  Location     Type
 23788 ;;  buf             2    9[BANK0 ] PTR unsigned char 
 23789 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23790 ;;  val             2   11[BANK0 ] int 
 23791 ;;  base            2   13[BANK0 ] int 
 23792 ;; Auto vars:     Size  Location     Type
 23793 ;;  cp              2    0        PTR unsigned char 
 23794 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23795 ;; Return value:  Size  Location     Type
 23796 ;;                  2    9[BANK0 ] PTR unsigned char 
 23797 ;; Registers used:
 23798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23799 ;; Tracked objects:
 23800 ;;		On entry : F/0
 23801 ;;		On exit  : F/0
 23802 ;;		Unchanged: 0/0
 23803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23804 ;;      Params:         0       6       0       0       0       0       0
 23805 ;;      Locals:         2       0       0       0       0       0       0
 23806 ;;      Temps:          0       0       0       0       0       0       0
 23807 ;;      Totals:         2       6       0       0       0       0       0
 23808 ;;Total ram usage:        8 bytes
 23809 ;; Hardware stack levels used:    1
 23810 ;; Hardware stack levels required when called:    5
 23811 ;; This function calls:
 23812 ;;		_utoa
 23813 ;; This function is called by:
 23814 ;;		_receiveSendEventSLCAN
 23815 ;;		_findNodes
 23816 ;;		_printGUID
 23817 ;;		_printNodeFirmwareVersion
 23818 ;;		_printFirmwareVersion
 23819 ;; This function uses a non-reentrant model
 23820 ;;
 23821                           
 23822                           	psect	text62
 23823  00563A                     __ptext62:
 23824                           	opt stack 0
 23825  00563A                     _itoa:
 23826                           	opt stack 23
 23827                           
 23828                           ; BSR set to: 0
 23829                           
 23830                           ;incstack = 0
 23831                           ;incstack = 0
 23832  00563A  AF6C               	btfss	(itoa@val+1)& (0+255),7,b
 23833  00563C  D00C               	goto	l15149
 23834                           
 23835                           ; BSR set to: 0
 23836  00563E  C069  FFD9         	movff	itoa@buf,fsr2l
 23837  005642  C06A  FFDA         	movff	itoa@buf+1,fsr2h
 23838  005646  0E2D               	movlw	45
 23839  005648  6EDF               	movwf	indf2,c
 23840                           
 23841                           ; BSR set to: 0
 23842  00564A  4B69               	infsnz	itoa@buf& (0+255),f,b
 23843  00564C  2B6A               	incf	(itoa@buf+1)& (0+255),f,b
 23844                           
 23845                           ; BSR set to: 0
 23846  00564E  6D6B               	negf	itoa@val& (0+255),b
 23847  005650  1F6C               	comf	(itoa@val+1)& (0+255),f,b
 23848  005652  B0D8               	btfsc	status,0,c
 23849  005654  2B6C               	incf	(itoa@val+1)& (0+255),f,b
 23850  005656                     l15149:
 23851                           
 23852                           ; BSR set to: 0
 23853  005656  C069  F060         	movff	itoa@buf,?_utoa
 23854  00565A  C06A  F061         	movff	itoa@buf+1,?_utoa+1
 23855  00565E  C06B  F062         	movff	itoa@val,?_utoa+2
 23856  005662  C06C  F063         	movff	itoa@val+1,?_utoa+3
 23857  005666  C06D  F064         	movff	itoa@base,?_utoa+4
 23858  00566A  C06E  F065         	movff	itoa@base+1,?_utoa+5
 23859  00566E  EF71  F024         	goto	_utoa	;wreg free
 23860  005672                     __end_of_itoa:
 23861                           	opt stack 0
 23862                           tblptru	equ	0xFF8
 23863                           tblptrh	equ	0xFF7
 23864                           tblptrl	equ	0xFF6
 23865                           tablat	equ	0xFF5
 23866                           prodh	equ	0xFF4
 23867                           prodl	equ	0xFF3
 23868                           intcon	equ	0xFF2
 23869                           indf0	equ	0xFEF
 23870                           postinc0	equ	0xFEE
 23871                           fsr0h	equ	0xFEA
 23872                           fsr0l	equ	0xFE9
 23873                           wreg	equ	0xFE8
 23874                           indf1	equ	0xFE7
 23875                           postinc1	equ	0xFE6
 23876                           postdec1	equ	0xFE5
 23877                           fsr1h	equ	0xFE2
 23878                           fsr1l	equ	0xFE1
 23879                           indf2	equ	0xFDF
 23880                           postinc2	equ	0xFDE
 23881                           postdec2	equ	0xFDD
 23882                           plusw2	equ	0xFDB
 23883                           fsr2h	equ	0xFDA
 23884                           fsr2l	equ	0xFD9
 23885                           status	equ	0xFD8
 23886                           
 23887 ;; *************** function _utoa *****************
 23888 ;; Defined at:
 23889 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\itoa.c"
 23890 ;; Parameters:    Size  Location     Type
 23891 ;;  buf             2    0[BANK0 ] PTR unsigned char 
 23892 ;;		 -> printFirmwareVersion@wrkbuf(20), printNodeFirmwareVersion@buf(3), printGUID@buf(3), wrkbuf(80), 
 23893 ;;  val             2    2[BANK0 ] unsigned int 
 23894 ;;  base            2    4[BANK0 ] int 
 23895 ;; Auto vars:     Size  Location     Type
 23896 ;;  v               2    6[BANK0 ] unsigned int 
 23897 ;;  c               1    8[BANK0 ] unsigned char 
 23898 ;; Return value:  Size  Location     Type
 23899 ;;                  2    0[BANK0 ] PTR unsigned char 
 23900 ;; Registers used:
 23901 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23902 ;; Tracked objects:
 23903 ;;		On entry : F/0
 23904 ;;		On exit  : F/0
 23905 ;;		Unchanged: 0/0
 23906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 23907 ;;      Params:         0       6       0       0       0       0       0
 23908 ;;      Locals:         0       3       0       0       0       0       0
 23909 ;;      Temps:          0       0       0       0       0       0       0
 23910 ;;      Totals:         0       9       0       0       0       0       0
 23911 ;;Total ram usage:        9 bytes
 23912 ;; Hardware stack levels used:    1
 23913 ;; Hardware stack levels required when called:    4
 23914 ;; This function calls:
 23915 ;;		___lwdiv
 23916 ;;		___lwmod
 23917 ;; This function is called by:
 23918 ;;		_itoa
 23919 ;; This function uses a non-reentrant model
 23920 ;;
 23921                           
 23922                           	psect	text63
 23923  0048E2                     __ptext63:
 23924                           	opt stack 0
 23925  0048E2                     _utoa:
 23926                           	opt stack 23
 23927                           
 23928                           ; BSR set to: 0
 23929                           
 23930                           ; BSR set to: 0
 23931                           ;incstack = 0
 23932                           ;incstack = 0
 23933  0048E2  C062  F066         	movff	utoa@val,utoa@v
 23934  0048E6  C063  F067         	movff	utoa@val+1,utoa@v+1
 23935  0048EA                     l15261:
 23936                           
 23937                           ; BSR set to: 0
 23938  0048EA  C066  F01E         	movff	utoa@v,?___lwdiv
 23939  0048EE  C067  F01F         	movff	utoa@v+1,?___lwdiv+1
 23940  0048F2  C064  F020         	movff	utoa@base,?___lwdiv+2
 23941  0048F6  C065  F021         	movff	utoa@base+1,?___lwdiv+3
 23942  0048FA  EC76  F029         	call	___lwdiv	;wreg free
 23943  0048FE  C01E  F066         	movff	?___lwdiv,utoa@v
 23944  004902  C01F  F067         	movff	?___lwdiv+1,utoa@v+1
 23945                           
 23946                           ; BSR set to: 0
 23947  004906  4B60               	infsnz	utoa@buf& (0+255),f,b
 23948  004908  2B61               	incf	(utoa@buf+1)& (0+255),f,b
 23949                           
 23950                           ; BSR set to: 0
 23951  00490A  5167               	movf	(utoa@v+1)& (0+255),w,b
 23952  00490C  1166               	iorwf	utoa@v& (0+255),w,b
 23953  00490E  E1ED               	bnz	l15261
 23954                           
 23955                           ; BSR set to: 0
 23956  004910  C060  FFD9         	movff	utoa@buf,fsr2l
 23957  004914  C061  FFDA         	movff	utoa@buf+1,fsr2h
 23958  004918  0E00               	movlw	0
 23959  00491A  6ADF               	clrf	indf2,c
 23960                           
 23961                           ; BSR set to: 0
 23962  00491C  0760               	decf	utoa@buf& (0+255),f,b
 23963  00491E  A0D8               	btfss	status,0,c
 23964  004920  0761               	decf	(utoa@buf+1)& (0+255),f,b
 23965  004922                     l15271:
 23966                           
 23967                           ; BSR set to: 0
 23968  004922  C062  F01E         	movff	utoa@val,?___lwmod
 23969  004926  C063  F01F         	movff	utoa@val+1,?___lwmod+1
 23970  00492A  C064  F020         	movff	utoa@base,?___lwmod+2
 23971  00492E  C065  F021         	movff	utoa@base+1,?___lwmod+3
 23972  004932  ECA7  F02A         	call	___lwmod	;wreg free
 23973  004936  501E               	movf	?___lwmod,w,c
 23974  004938  6F68               	movwf	utoa@c& (0+255),b
 23975                           
 23976                           ; BSR set to: 0
 23977  00493A  C062  F01E         	movff	utoa@val,?___lwdiv
 23978  00493E  C063  F01F         	movff	utoa@val+1,?___lwdiv+1
 23979  004942  C064  F020         	movff	utoa@base,?___lwdiv+2
 23980  004946  C065  F021         	movff	utoa@base+1,?___lwdiv+3
 23981  00494A  EC76  F029         	call	___lwdiv	;wreg free
 23982  00494E  C01E  F062         	movff	?___lwdiv,utoa@val
 23983  004952  C01F  F063         	movff	?___lwdiv+1,utoa@val+1
 23984                           
 23985                           ; BSR set to: 0
 23986  004956  0E09               	movlw	9
 23987  004958  6568               	cpfsgt	utoa@c& (0+255),b
 23988  00495A  D002               	goto	l2323
 23989                           
 23990                           ; BSR set to: 0
 23991  00495C  0E07               	movlw	7
 23992  00495E  2768               	addwf	utoa@c& (0+255),f,b
 23993  004960                     l2323:
 23994                           
 23995                           ; BSR set to: 0
 23996  004960  0E30               	movlw	48
 23997  004962  2768               	addwf	utoa@c& (0+255),f,b
 23998                           
 23999                           ; BSR set to: 0
 24000  004964  C060  FFD9         	movff	utoa@buf,fsr2l
 24001  004968  C061  FFDA         	movff	utoa@buf+1,fsr2h
 24002  00496C  C068  FFDF         	movff	utoa@c,indf2
 24003                           
 24004                           ; BSR set to: 0
 24005  004970  0760               	decf	utoa@buf& (0+255),f,b
 24006  004972  A0D8               	btfss	status,0,c
 24007  004974  0761               	decf	(utoa@buf+1)& (0+255),f,b
 24008                           
 24009                           ; BSR set to: 0
 24010  004976  5163               	movf	(utoa@val+1)& (0+255),w,b
 24011  004978  1162               	iorwf	utoa@val& (0+255),w,b
 24012  00497A  E1D3               	bnz	l15271
 24013                           
 24014                           ; BSR set to: 0
 24015                           ;	Return value of _utoa is never used
 24016  00497C  4B60               	infsnz	utoa@buf& (0+255),f,b
 24017  00497E  2B61               	incf	(utoa@buf+1)& (0+255),f,b
 24018                           
 24019                           ; BSR set to: 0
 24020  004980  0012               	return	
 24021  004982                     __end_of_utoa:
 24022                           	opt stack 0
 24023                           tblptru	equ	0xFF8
 24024                           tblptrh	equ	0xFF7
 24025                           tblptrl	equ	0xFF6
 24026                           tablat	equ	0xFF5
 24027                           prodh	equ	0xFF4
 24028                           prodl	equ	0xFF3
 24029                           intcon	equ	0xFF2
 24030                           indf0	equ	0xFEF
 24031                           postinc0	equ	0xFEE
 24032                           fsr0h	equ	0xFEA
 24033                           fsr0l	equ	0xFE9
 24034                           wreg	equ	0xFE8
 24035                           indf1	equ	0xFE7
 24036                           postinc1	equ	0xFE6
 24037                           postdec1	equ	0xFE5
 24038                           fsr1h	equ	0xFE2
 24039                           fsr1l	equ	0xFE1
 24040                           indf2	equ	0xFDF
 24041                           postinc2	equ	0xFDE
 24042                           postdec2	equ	0xFDD
 24043                           plusw2	equ	0xFDB
 24044                           fsr2h	equ	0xFDA
 24045                           fsr2l	equ	0xFD9
 24046                           status	equ	0xFD8
 24047                           
 24048 ;; *************** function ___lwmod *****************
 24049 ;; Defined at:
 24050 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwmod.c"
 24051 ;; Parameters:    Size  Location     Type
 24052 ;;  dividend        2   29[COMRAM] unsigned int 
 24053 ;;  divisor         2   31[COMRAM] unsigned int 
 24054 ;; Auto vars:     Size  Location     Type
 24055 ;;  counter         1   33[COMRAM] unsigned char 
 24056 ;; Return value:  Size  Location     Type
 24057 ;;                  2   29[COMRAM] unsigned int 
 24058 ;; Registers used:
 24059 ;;		wreg, status,2, status,0
 24060 ;; Tracked objects:
 24061 ;;		On entry : F/0
 24062 ;;		On exit  : F/0
 24063 ;;		Unchanged: F/0
 24064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24065 ;;      Params:         4       0       0       0       0       0       0
 24066 ;;      Locals:         1       0       0       0       0       0       0
 24067 ;;      Temps:          0       0       0       0       0       0       0
 24068 ;;      Totals:         5       0       0       0       0       0       0
 24069 ;;Total ram usage:        5 bytes
 24070 ;; Hardware stack levels used:    1
 24071 ;; Hardware stack levels required when called:    3
 24072 ;; This function calls:
 24073 ;;		Nothing
 24074 ;; This function is called by:
 24075 ;;		_utoa
 24076 ;; This function uses a non-reentrant model
 24077 ;;
 24078                           
 24079                           	psect	text64
 24080  00554E                     __ptext64:
 24081                           	opt stack 0
 24082  00554E                     ___lwmod:
 24083                           	opt stack 23
 24084                           
 24085                           ; BSR set to: 0
 24086                           
 24087                           ; BSR set to: 0
 24088                           ;incstack = 0
 24089                           ;incstack = 0
 24090  00554E  5021               	movf	___lwmod@divisor+1,w,c
 24091  005550  1020               	iorwf	___lwmod@divisor,w,c
 24092  005552  E017               	bz	l2447
 24093                           
 24094                           ; BSR set to: 0
 24095  005554  0E01               	movlw	1
 24096  005556  6E22               	movwf	___lwmod@counter,c
 24097  005558  D004               	goto	l15317
 24098  00555A                     l15315:
 24099                           
 24100                           ; BSR set to: 0
 24101  00555A  90D8               	bcf	status,0,c
 24102  00555C  3620               	rlcf	___lwmod@divisor,f,c
 24103  00555E  3621               	rlcf	___lwmod@divisor+1,f,c
 24104  005560  2A22               	incf	___lwmod@counter,f,c
 24105  005562                     l15317:
 24106                           
 24107                           ; BSR set to: 0
 24108  005562  AE21               	btfss	___lwmod@divisor+1,7,c
 24109  005564  D7FA               	goto	l15315
 24110  005566                     l15319:
 24111                           
 24112                           ; BSR set to: 0
 24113  005566  5020               	movf	___lwmod@divisor,w,c
 24114  005568  5C1E               	subwf	___lwmod@dividend,w,c
 24115  00556A  5021               	movf	___lwmod@divisor+1,w,c
 24116  00556C  581F               	subwfb	___lwmod@dividend+1,w,c
 24117  00556E  E304               	bnc	l15323
 24118                           
 24119                           ; BSR set to: 0
 24120  005570  5020               	movf	___lwmod@divisor,w,c
 24121  005572  5E1E               	subwf	___lwmod@dividend,f,c
 24122  005574  5021               	movf	___lwmod@divisor+1,w,c
 24123  005576  5A1F               	subwfb	___lwmod@dividend+1,f,c
 24124  005578                     l15323:
 24125                           
 24126                           ; BSR set to: 0
 24127  005578  90D8               	bcf	status,0,c
 24128  00557A  3221               	rrcf	___lwmod@divisor+1,f,c
 24129  00557C  3220               	rrcf	___lwmod@divisor,f,c
 24130                           
 24131                           ; BSR set to: 0
 24132  00557E  2E22               	decfsz	___lwmod@counter,f,c
 24133  005580  D7F2               	goto	l15319
 24134  005582                     l2447:
 24135                           
 24136                           ; BSR set to: 0
 24137  005582  C01E  F01E         	movff	___lwmod@dividend,?___lwmod
 24138  005586  C01F  F01F         	movff	___lwmod@dividend+1,?___lwmod+1
 24139                           
 24140                           ; BSR set to: 0
 24141  00558A  0012               	return	
 24142  00558C                     __end_of___lwmod:
 24143                           	opt stack 0
 24144                           tblptru	equ	0xFF8
 24145                           tblptrh	equ	0xFF7
 24146                           tblptrl	equ	0xFF6
 24147                           tablat	equ	0xFF5
 24148                           prodh	equ	0xFF4
 24149                           prodl	equ	0xFF3
 24150                           intcon	equ	0xFF2
 24151                           indf0	equ	0xFEF
 24152                           postinc0	equ	0xFEE
 24153                           fsr0h	equ	0xFEA
 24154                           fsr0l	equ	0xFE9
 24155                           wreg	equ	0xFE8
 24156                           indf1	equ	0xFE7
 24157                           postinc1	equ	0xFE6
 24158                           postdec1	equ	0xFE5
 24159                           fsr1h	equ	0xFE2
 24160                           fsr1l	equ	0xFE1
 24161                           indf2	equ	0xFDF
 24162                           postinc2	equ	0xFDE
 24163                           postdec2	equ	0xFDD
 24164                           plusw2	equ	0xFDB
 24165                           fsr2h	equ	0xFDA
 24166                           fsr2l	equ	0xFD9
 24167                           status	equ	0xFD8
 24168                           
 24169 ;; *************** function ___lwdiv *****************
 24170 ;; Defined at:
 24171 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\common\lwdiv.c"
 24172 ;; Parameters:    Size  Location     Type
 24173 ;;  dividend        2   29[COMRAM] unsigned int 
 24174 ;;  divisor         2   31[COMRAM] unsigned int 
 24175 ;; Auto vars:     Size  Location     Type
 24176 ;;  quotient        2   34[COMRAM] unsigned int 
 24177 ;;  counter         1   33[COMRAM] unsigned char 
 24178 ;; Return value:  Size  Location     Type
 24179 ;;                  2   29[COMRAM] unsigned int 
 24180 ;; Registers used:
 24181 ;;		wreg, status,2, status,0
 24182 ;; Tracked objects:
 24183 ;;		On entry : F/0
 24184 ;;		On exit  : F/0
 24185 ;;		Unchanged: F/0
 24186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24187 ;;      Params:         4       0       0       0       0       0       0
 24188 ;;      Locals:         3       0       0       0       0       0       0
 24189 ;;      Temps:          0       0       0       0       0       0       0
 24190 ;;      Totals:         7       0       0       0       0       0       0
 24191 ;;Total ram usage:        7 bytes
 24192 ;; Hardware stack levels used:    1
 24193 ;; Hardware stack levels required when called:    3
 24194 ;; This function calls:
 24195 ;;		Nothing
 24196 ;; This function is called by:
 24197 ;;		_utoa
 24198 ;; This function uses a non-reentrant model
 24199 ;;
 24200                           
 24201                           	psect	text65
 24202  0052EC                     __ptext65:
 24203                           	opt stack 0
 24204  0052EC                     ___lwdiv:
 24205                           	opt stack 23
 24206                           
 24207                           ; BSR set to: 0
 24208                           
 24209                           ; BSR set to: 0
 24210                           ;incstack = 0
 24211                           ;incstack = 0
 24212  0052EC  6A23               	clrf	___lwdiv@quotient,c
 24213  0052EE  6A24               	clrf	___lwdiv@quotient+1,c
 24214                           
 24215                           ; BSR set to: 0
 24216  0052F0  5021               	movf	___lwdiv@divisor+1,w,c
 24217  0052F2  1020               	iorwf	___lwdiv@divisor,w,c
 24218  0052F4  E01B               	bz	l2437
 24219                           
 24220                           ; BSR set to: 0
 24221  0052F6  0E01               	movlw	1
 24222  0052F8  6E22               	movwf	___lwdiv@counter,c
 24223  0052FA  D004               	goto	l15297
 24224  0052FC                     l15295:
 24225                           
 24226                           ; BSR set to: 0
 24227  0052FC  90D8               	bcf	status,0,c
 24228  0052FE  3620               	rlcf	___lwdiv@divisor,f,c
 24229  005300  3621               	rlcf	___lwdiv@divisor+1,f,c
 24230  005302  2A22               	incf	___lwdiv@counter,f,c
 24231  005304                     l15297:
 24232                           
 24233                           ; BSR set to: 0
 24234  005304  AE21               	btfss	___lwdiv@divisor+1,7,c
 24235  005306  D7FA               	goto	l15295
 24236  005308                     l15299:
 24237                           
 24238                           ; BSR set to: 0
 24239  005308  90D8               	bcf	status,0,c
 24240  00530A  3623               	rlcf	___lwdiv@quotient,f,c
 24241  00530C  3624               	rlcf	___lwdiv@quotient+1,f,c
 24242                           
 24243                           ; BSR set to: 0
 24244  00530E  5020               	movf	___lwdiv@divisor,w,c
 24245  005310  5C1E               	subwf	___lwdiv@dividend,w,c
 24246  005312  5021               	movf	___lwdiv@divisor+1,w,c
 24247  005314  581F               	subwfb	___lwdiv@dividend+1,w,c
 24248  005316  E305               	bnc	l15307
 24249                           
 24250                           ; BSR set to: 0
 24251  005318  5020               	movf	___lwdiv@divisor,w,c
 24252  00531A  5E1E               	subwf	___lwdiv@dividend,f,c
 24253  00531C  5021               	movf	___lwdiv@divisor+1,w,c
 24254  00531E  5A1F               	subwfb	___lwdiv@dividend+1,f,c
 24255                           
 24256                           ; BSR set to: 0
 24257  005320  8023               	bsf	___lwdiv@quotient,0,c
 24258  005322                     l15307:
 24259                           
 24260                           ; BSR set to: 0
 24261  005322  90D8               	bcf	status,0,c
 24262  005324  3221               	rrcf	___lwdiv@divisor+1,f,c
 24263  005326  3220               	rrcf	___lwdiv@divisor,f,c
 24264                           
 24265                           ; BSR set to: 0
 24266  005328  2E22               	decfsz	___lwdiv@counter,f,c
 24267  00532A  D7EE               	goto	l15299
 24268  00532C                     l2437:
 24269                           
 24270                           ; BSR set to: 0
 24271  00532C  C023  F01E         	movff	___lwdiv@quotient,?___lwdiv
 24272  005330  C024  F01F         	movff	___lwdiv@quotient+1,?___lwdiv+1
 24273                           
 24274                           ; BSR set to: 0
 24275  005334  0012               	return	
 24276  005336                     __end_of___lwdiv:
 24277                           	opt stack 0
 24278                           tblptru	equ	0xFF8
 24279                           tblptrh	equ	0xFF7
 24280                           tblptrl	equ	0xFF6
 24281                           tablat	equ	0xFF5
 24282                           prodh	equ	0xFF4
 24283                           prodl	equ	0xFF3
 24284                           intcon	equ	0xFF2
 24285                           indf0	equ	0xFEF
 24286                           postinc0	equ	0xFEE
 24287                           fsr0h	equ	0xFEA
 24288                           fsr0l	equ	0xFE9
 24289                           wreg	equ	0xFE8
 24290                           indf1	equ	0xFE7
 24291                           postinc1	equ	0xFE6
 24292                           postdec1	equ	0xFE5
 24293                           fsr1h	equ	0xFE2
 24294                           fsr1l	equ	0xFE1
 24295                           indf2	equ	0xFDF
 24296                           postinc2	equ	0xFDE
 24297                           postdec2	equ	0xFDD
 24298                           plusw2	equ	0xFDB
 24299                           fsr2h	equ	0xFDA
 24300                           fsr2l	equ	0xFD9
 24301                           status	equ	0xFD8
 24302                           
 24303 ;; *************** function _printMode *****************
 24304 ;; Defined at:
 24305 ;;		line 2814 in file "main.c"
 24306 ;; Parameters:    Size  Location     Type
 24307 ;;		None
 24308 ;; Auto vars:     Size  Location     Type
 24309 ;;		None
 24310 ;; Return value:  Size  Location     Type
 24311 ;;		None               void
 24312 ;; Registers used:
 24313 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24314 ;; Tracked objects:
 24315 ;;		On entry : 0/1
 24316 ;;		On exit  : 0/0
 24317 ;;		Unchanged: 0/0
 24318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24319 ;;      Params:         0       0       0       0       0       0       0
 24320 ;;      Locals:         0       0       0       0       0       0       0
 24321 ;;      Temps:          0       0       0       0       0       0       0
 24322 ;;      Totals:         0       0       0       0       0       0       0
 24323 ;;Total ram usage:        0 bytes
 24324 ;; Hardware stack levels used:    1
 24325 ;; Hardware stack levels required when called:    5
 24326 ;; This function calls:
 24327 ;;		_putsUSART
 24328 ;; This function is called by:
 24329 ;;		_main
 24330 ;; This function uses a non-reentrant model
 24331 ;;
 24332                           
 24333                           	psect	text66
 24334  004ED4                     __ptext66:
 24335                           	opt stack 0
 24336  004ED4                     _printMode:
 24337                           	opt stack 25
 24338                           
 24339                           ;main.c: 2815: putsUSART((char *) "Mode: ");
 24340                           
 24341                           ; BSR set to: 0
 24342                           ;incstack = 0
 24343                           ;incstack = 0
 24344  004ED4  0E7F               	movlw	high STR_256
 24345  004ED6  6E20               	movwf	?_putsUSART+1,c
 24346  004ED8  0E26               	movlw	low STR_256
 24347  004EDA  6E1F               	movwf	?_putsUSART,c
 24348  004EDC  EC25  F029         	call	_putsUSART	;wreg free
 24349                           
 24350                           ;main.c: 2816: if (0 == mode) {
 24351  004EE0  0100               	movlb	0	; () banked
 24352  004EE2  67DF               	tstfsz	_mode& (0+255),b
 24353  004EE4  D007               	goto	l10173
 24354                           
 24355                           ; BSR set to: 0
 24356                           ;main.c: 2817: putsUSART((char *) "Verbose");
 24357  004EE6  0E7F               	movlw	high STR_257
 24358  004EE8  6E20               	movwf	?_putsUSART+1,c
 24359  004EEA  0E1E               	movlw	low STR_257
 24360  004EEC  6E1F               	movwf	?_putsUSART,c
 24361  004EEE  EC25  F029         	call	_putsUSART	;wreg free
 24362                           
 24363                           ;main.c: 2818: } else if (1 == mode) {
 24364  004EF2  D023               	goto	l1242
 24365  004EF4                     l10173:
 24366                           
 24367                           ; BSR set to: 0
 24368  004EF4  05DF               	decf	_mode& (0+255),w,b
 24369  004EF6  E107               	bnz	l10177
 24370                           
 24371                           ; BSR set to: 0
 24372                           ;main.c: 2819: putsUSART((char *) "VSCP Driver");
 24373  004EF8  0E7E               	movlw	high STR_258
 24374  004EFA  6E20               	movwf	?_putsUSART+1,c
 24375  004EFC  0E7B               	movlw	low STR_258
 24376  004EFE  6E1F               	movwf	?_putsUSART,c
 24377  004F00  EC25  F029         	call	_putsUSART	;wreg free
 24378                           
 24379                           ;main.c: 2820: } else if (2 == mode) {
 24380  004F04  D01A               	goto	l1242
 24381  004F06                     l10177:
 24382                           
 24383                           ; BSR set to: 0
 24384  004F06  51DF               	movf	_mode& (0+255),w,b
 24385  004F08  0A02               	xorlw	2
 24386  004F0A  E107               	bnz	l10181
 24387                           
 24388                           ; BSR set to: 0
 24389                           ;main.c: 2821: putsUSART((char *) "SL Driver");
 24390  004F0C  0E7E               	movlw	high STR_259
 24391  004F0E  6E20               	movwf	?_putsUSART+1,c
 24392  004F10  0EB1               	movlw	low STR_259
 24393  004F12  6E1F               	movwf	?_putsUSART,c
 24394  004F14  EC25  F029         	call	_putsUSART	;wreg free
 24395                           
 24396                           ;main.c: 2822: } else if (3 == mode) {
 24397  004F18  D010               	goto	l1242
 24398  004F1A                     l10181:
 24399                           
 24400                           ; BSR set to: 0
 24401  004F1A  51DF               	movf	_mode& (0+255),w,b
 24402  004F1C  0A03               	xorlw	3
 24403  004F1E  E107               	bnz	l10185
 24404                           
 24405                           ; BSR set to: 0
 24406                           ;main.c: 2823: putsUSART((char *) "VSCP Node");
 24407  004F20  0E7E               	movlw	high STR_260
 24408  004F22  6E20               	movwf	?_putsUSART+1,c
 24409  004F24  0EA7               	movlw	low STR_260
 24410  004F26  6E1F               	movwf	?_putsUSART,c
 24411  004F28  EC25  F029         	call	_putsUSART	;wreg free
 24412                           
 24413                           ;main.c: 2824: } else {
 24414  004F2C  D006               	goto	l1242
 24415  004F2E                     l10185:
 24416                           
 24417                           ; BSR set to: 0
 24418                           ;main.c: 2825: putsUSART((char *) "Unknown (Verbose used)");
 24419  004F2E  0E7C               	movlw	high STR_261
 24420  004F30  6E20               	movwf	?_putsUSART+1,c
 24421  004F32  0EEF               	movlw	low STR_261
 24422  004F34  6E1F               	movwf	?_putsUSART,c
 24423  004F36  EC25  F029         	call	_putsUSART	;wreg free
 24424  004F3A                     l1242:
 24425                           
 24426                           ;main.c: 2826: }
 24427                           ;main.c: 2827: putsUSART((char *) "\r\n");
 24428  004F3A  0E74               	movlw	high (STR_197+50)
 24429  004F3C  6E20               	movwf	?_putsUSART+1,c
 24430  004F3E  0EC0               	movlw	low (STR_197+50)
 24431  004F40  6E1F               	movwf	?_putsUSART,c
 24432  004F42  EF25  F029         	goto	_putsUSART	;wreg free
 24433  004F46                     __end_of_printMode:
 24434                           	opt stack 0
 24435                           tblptru	equ	0xFF8
 24436                           tblptrh	equ	0xFF7
 24437                           tblptrl	equ	0xFF6
 24438                           tablat	equ	0xFF5
 24439                           prodh	equ	0xFF4
 24440                           prodl	equ	0xFF3
 24441                           intcon	equ	0xFF2
 24442                           indf0	equ	0xFEF
 24443                           postinc0	equ	0xFEE
 24444                           fsr0h	equ	0xFEA
 24445                           fsr0l	equ	0xFE9
 24446                           wreg	equ	0xFE8
 24447                           indf1	equ	0xFE7
 24448                           postinc1	equ	0xFE6
 24449                           postdec1	equ	0xFE5
 24450                           fsr1h	equ	0xFE2
 24451                           fsr1l	equ	0xFE1
 24452                           indf2	equ	0xFDF
 24453                           postinc2	equ	0xFDE
 24454                           postdec2	equ	0xFDD
 24455                           plusw2	equ	0xFDB
 24456                           fsr2h	equ	0xFDA
 24457                           fsr2l	equ	0xFD9
 24458                           status	equ	0xFD8
 24459                           
 24460 ;; *************** function _putsUSART *****************
 24461 ;; Defined at:
 24462 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uputs.c"
 24463 ;; Parameters:    Size  Location     Type
 24464 ;;  data            2   30[COMRAM] PTR unsigned char 
 24465 ;;		 -> STR_262(3), STR_261(23), STR_260(10), STR_259(10), 
 24466 ;;		 -> STR_258(12), STR_257(8), STR_256(7), STR_255(3), 
 24467 ;;		 -> printFirmwareVersion@wrkbuf(20), STR_254(10), STR_253(3), STR_250(20), 
 24468 ;;		 -> STR_249(3), STR_248(14), STR_247(3), STR_243(8), 
 24469 ;;		 -> STR_242(15), STR_241(67), STR_240(3), STR_239(27), 
 24470 ;;		 -> STR_238(67), STR_237(39), STR_236(62), STR_235(55), 
 24471 ;;		 -> STR_234(49), STR_233(67), STR_232(47), STR_231(47), 
 24472 ;;		 -> STR_230(34), STR_229(71), STR_228(20), STR_227(78), 
 24473 ;;		 -> STR_226(24), STR_225(77), STR_224(67), STR_223(69), 
 24474 ;;		 -> STR_222(47), STR_221(40), STR_220(39), STR_219(33), 
 24475 ;;		 -> STR_218(23), STR_217(56), STR_216(24), STR_215(44), 
 24476 ;;		 -> STR_214(50), STR_213(31), STR_212(50), STR_211(51), 
 24477 ;;		 -> STR_210(46), STR_209(44), STR_208(27), STR_207(39), 
 24478 ;;		 -> STR_206(39), STR_205(52), STR_204(54), STR_203(55), 
 24479 ;;		 -> STR_202(3), STR_199(24), STR_198(57), STR_197(53), 
 24480 ;;		 -> STR_196(58), STR_195(3), STR_192(25), STR_191(3), 
 24481 ;;		 -> STR_188(24), STR_187(3), STR_184(24), STR_183(3), 
 24482 ;;		 -> STR_180(24), STR_179(3), STR_176(23), STR_175(3), 
 24483 ;;		 -> STR_172(21), STR_171(3), STR_168(22), STR_167(3), 
 24484 ;;		 -> STR_164(17), STR_163(3), STR_160(18), STR_159(4), 
 24485 ;;		 -> STR_158(11), STR_157(2), STR_154(7), STR_151(7), 
 24486 ;;		 -> STR_148(9), STR_145(7), STR_142(8), STR_139(7), 
 24487 ;;		 -> STR_138(2), STR_137(2), STR_136(6), STR_135(8), 
 24488 ;;		 -> STR_134(8), STR_133(20), STR_132(27), STR_131(6), 
 24489 ;;		 -> STR_130(33), STR_127(26), STR_125(32), STR_123(28), 
 24490 ;;		 -> STR_119(6), STR_117(40), STR_115(44), STR_112(6), 
 24491 ;;		 -> STR_111(39), STR_109(36), STR_107(37), STR_105(40), 
 24492 ;;		 -> STR_103(37), STR_102(50), STR_99(6), STR_98(41), 
 24493 ;;		 -> STR_96(38), STR_94(39), STR_92(42), STR_90(39), 
 24494 ;;		 -> STR_89(66), STR_86(6), STR_85(3), STR_82(20), 
 24495 ;;		 -> STR_80(33), STR_79(35), STR_78(24), STR_76(33), 
 24496 ;;		 -> STR_74(24), STR_71(54), STR_70(6), STR_69(3), 
 24497 ;;		 -> STR_64(34), STR_63(3), STR_60(4), wrkbuf(80), 
 24498 ;;		 -> STR_55(15), STR_53(33), STR_51(24), STR_48(6), 
 24499 ;;		 -> STR_46(6), STR_44(6), STR_42(6), STR_40(18), 
 24500 ;;		 -> STR_39(6), STR_37(33), STR_36(6), STR_28(24), 
 24501 ;;		 -> STR_27(18), STR_26(20), STR_25(25), STR_24(22), 
 24502 ;;		 -> STR_23(19), STR_22(20), STR_21(20), STR_19(6), 
 24503 ;;		 -> STR_17(6), STR_15(6), STR_13(6), STR_11(6), 
 24504 ;;		 -> STR_9(6), STR_7(31), STR_5(29), STR_4(55), 
 24505 ;;		 -> STR_3(35), STR_2(58), STR_1(37), 
 24506 ;; Auto vars:     Size  Location     Type
 24507 ;;		None
 24508 ;; Return value:  Size  Location     Type
 24509 ;;		None               void
 24510 ;; Registers used:
 24511 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 24512 ;; Tracked objects:
 24513 ;;		On entry : 0/1
 24514 ;;		On exit  : 0/0
 24515 ;;		Unchanged: 0/0
 24516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24517 ;;      Params:         2       0       0       0       0       0       0
 24518 ;;      Locals:         0       0       0       0       0       0       0
 24519 ;;      Temps:          2       0       0       0       0       0       0
 24520 ;;      Totals:         4       0       0       0       0       0       0
 24521 ;;Total ram usage:        4 bytes
 24522 ;; Hardware stack levels used:    1
 24523 ;; Hardware stack levels required when called:    4
 24524 ;; This function calls:
 24525 ;;		_WriteUSART
 24526 ;; This function is called by:
 24527 ;;		_main
 24528 ;;		_doModeVerbose
 24529 ;;		_doModeSLCAN
 24530 ;;		_receivePrintEventVerbose
 24531 ;;		_receiveSendEventSLCAN
 24532 ;;		_printStatistics
 24533 ;;		_printErrors
 24534 ;;		_printHelp
 24535 ;;		_findNodes
 24536 ;;		_printGUID
 24537 ;;		_printMDF
 24538 ;;		_printNodeFirmwareVersion
 24539 ;;		_printFirmwareVersion
 24540 ;;		_printMode
 24541 ;; This function uses a non-reentrant model
 24542 ;;
 24543                           
 24544                           	psect	text67
 24545  00524A                     __ptext67:
 24546                           	opt stack 0
 24547  00524A                     _putsUSART:
 24548                           	opt stack 24
 24549  00524A                     l1855:
 24550  00524A  A2AC               	btfss	4012,1,c	;volatile
 24551  00524C  D7FE               	goto	l1855
 24552  00524E  501F               	movf	putsUSART@data,w,c
 24553  005250  6EF6               	movwf	tblptrl,c
 24554  005252  6EE9               	movwf	fsr0l,c
 24555  005254  0E05               	movlw	(high __ramtop+-1)
 24556  005256  6EEA               	movwf	fsr0h,c
 24557  005258  5020               	movf	putsUSART@data+1,w,c
 24558  00525A  64EA               	cpfsgt	fsr0h,c
 24559  00525C  D003               	bra	u12387
 24560  00525E  6EEA               	movwf	fsr0h,c
 24561  005260  50EF               	movf	indf0,w,c
 24562  005262  D003               	bra	u12380
 24563  005264                     u12387:
 24564  005264  6EF7               	movwf	tblptrh,c
 24565  005266  0008               	tblrd		*
 24566  005268  50F5               	movf	tablat,w,c
 24567  00526A                     u12380:
 24568  00526A  ECF5  F02B         	call	_WriteUSART
 24569  00526E  501F               	movf	putsUSART@data,w,c
 24570  005270  6E21               	movwf	??_putsUSART& (0+255),c
 24571  005272  5020               	movf	putsUSART@data+1,w,c
 24572  005274  6E22               	movwf	(??_putsUSART+1)& (0+255),c
 24573  005276  4A1F               	infsnz	putsUSART@data,f,c
 24574  005278  2A20               	incf	putsUSART@data+1,f,c
 24575  00527A  5021               	movf	??_putsUSART,w,c
 24576  00527C  6EF6               	movwf	tblptrl,c
 24577  00527E  6EE9               	movwf	fsr0l,c
 24578  005280  0E05               	movlw	(high __ramtop+-1)
 24579  005282  6EEA               	movwf	fsr0h,c
 24580  005284  5022               	movf	??_putsUSART+1,w,c
 24581  005286  64EA               	cpfsgt	fsr0h,c
 24582  005288  D003               	bra	u12397
 24583  00528A  6EEA               	movwf	fsr0h,c
 24584  00528C  50EF               	movf	indf0,w,c
 24585  00528E  D003               	bra	u12390
 24586  005290                     u12397:
 24587  005290  6EF7               	movwf	tblptrh,c
 24588  005292  0008               	tblrd		*
 24589  005294  50F5               	movf	tablat,w,c
 24590  005296                     u12390:
 24591  005296  0900               	iorlw	0
 24592  005298  B4D8               	btfsc	status,2,c
 24593  00529A  0012               	return	
 24594  00529C  D7D6               	goto	l1855
 24595  00529E                     __end_of_putsUSART:
 24596                           	opt stack 0
 24597                           tblptru	equ	0xFF8
 24598                           tblptrh	equ	0xFF7
 24599                           tblptrl	equ	0xFF6
 24600                           tablat	equ	0xFF5
 24601                           prodh	equ	0xFF4
 24602                           prodl	equ	0xFF3
 24603                           intcon	equ	0xFF2
 24604                           indf0	equ	0xFEF
 24605                           postinc0	equ	0xFEE
 24606                           fsr0h	equ	0xFEA
 24607                           fsr0l	equ	0xFE9
 24608                           wreg	equ	0xFE8
 24609                           indf1	equ	0xFE7
 24610                           postinc1	equ	0xFE6
 24611                           postdec1	equ	0xFE5
 24612                           fsr1h	equ	0xFE2
 24613                           fsr1l	equ	0xFE1
 24614                           indf2	equ	0xFDF
 24615                           postinc2	equ	0xFDE
 24616                           postdec2	equ	0xFDD
 24617                           plusw2	equ	0xFDB
 24618                           fsr2h	equ	0xFDA
 24619                           fsr2l	equ	0xFD9
 24620                           status	equ	0xFD8
 24621                           
 24622 ;; *************** function _WriteUSART *****************
 24623 ;; Defined at:
 24624 ;;		line 14 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uwrite.c"
 24625 ;; Parameters:    Size  Location     Type
 24626 ;;  data            1    wreg     unsigned char 
 24627 ;; Auto vars:     Size  Location     Type
 24628 ;;  data            1   29[COMRAM] unsigned char 
 24629 ;; Return value:  Size  Location     Type
 24630 ;;		None               void
 24631 ;; Registers used:
 24632 ;;		wreg
 24633 ;; Tracked objects:
 24634 ;;		On entry : 0/1
 24635 ;;		On exit  : 0/0
 24636 ;;		Unchanged: 0/0
 24637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24638 ;;      Params:         0       0       0       0       0       0       0
 24639 ;;      Locals:         1       0       0       0       0       0       0
 24640 ;;      Temps:          0       0       0       0       0       0       0
 24641 ;;      Totals:         1       0       0       0       0       0       0
 24642 ;;Total ram usage:        1 bytes
 24643 ;; Hardware stack levels used:    1
 24644 ;; Hardware stack levels required when called:    3
 24645 ;; This function calls:
 24646 ;;		Nothing
 24647 ;; This function is called by:
 24648 ;;		_doModeVerbose
 24649 ;;		_sendEscapedUartData
 24650 ;;		_sendVSCPDriverErrorFrame
 24651 ;;		_sendVSCPDriverAck
 24652 ;;		_sendVSCPDriverNack
 24653 ;;		_sendVSCPDriverCommandReply
 24654 ;;		_receiveSendEventCANAL
 24655 ;;		_receiveSendMultiEventCANAL
 24656 ;;		_sendVSCPModeCapabilities
 24657 ;;		_receiveSendEventSLCAN
 24658 ;;		_printBinary
 24659 ;;		_printFirmwareVersion
 24660 ;;		_putsUSART
 24661 ;; This function uses a non-reentrant model
 24662 ;;
 24663                           
 24664                           	psect	text68
 24665  0057EA                     __ptext68:
 24666                           	opt stack 0
 24667  0057EA                     _WriteUSART:
 24668                           	opt stack 25
 24669                           
 24670                           ;incstack = 0
 24671                           ;incstack = 0
 24672                           ;WriteUSART@data stored from wreg
 24673  0057EA  CFE8 F01E          	movff	wreg,WriteUSART@data
 24674  0057EE  ACAC               	btfss	4012,6,c	;volatile
 24675  0057F0  D003               	goto	l12093
 24676  0057F2  90AC               	bcf	4012,0,c	;volatile
 24677  0057F4  B231               	btfsc	_USART_Status,1,c
 24678  0057F6  80AC               	bsf	4012,0,c	;volatile
 24679  0057F8                     l12093:
 24680  0057F8  C01E  FFAD         	movff	WriteUSART@data,4013	;volatile
 24681  0057FC  0012               	return	
 24682  0057FE                     __end_of_WriteUSART:
 24683                           	opt stack 0
 24684                           tblptru	equ	0xFF8
 24685                           tblptrh	equ	0xFF7
 24686                           tblptrl	equ	0xFF6
 24687                           tablat	equ	0xFF5
 24688                           prodh	equ	0xFF4
 24689                           prodl	equ	0xFF3
 24690                           intcon	equ	0xFF2
 24691                           indf0	equ	0xFEF
 24692                           postinc0	equ	0xFEE
 24693                           fsr0h	equ	0xFEA
 24694                           fsr0l	equ	0xFE9
 24695                           wreg	equ	0xFE8
 24696                           indf1	equ	0xFE7
 24697                           postinc1	equ	0xFE6
 24698                           postdec1	equ	0xFE5
 24699                           fsr1h	equ	0xFE2
 24700                           fsr1l	equ	0xFE1
 24701                           indf2	equ	0xFDF
 24702                           postinc2	equ	0xFDE
 24703                           postdec2	equ	0xFDD
 24704                           plusw2	equ	0xFDB
 24705                           fsr2h	equ	0xFDA
 24706                           fsr2l	equ	0xFD9
 24707                           status	equ	0xFD8
 24708                           
 24709 ;; *************** function _init *****************
 24710 ;; Defined at:
 24711 ;;		line 398 in file "main.c"
 24712 ;; Parameters:    Size  Location     Type
 24713 ;;		None
 24714 ;; Auto vars:     Size  Location     Type
 24715 ;;		None
 24716 ;; Return value:  Size  Location     Type
 24717 ;;		None               void
 24718 ;; Registers used:
 24719 ;;		wreg, status,2, status,0, cstack
 24720 ;; Tracked objects:
 24721 ;;		On entry : 0/1
 24722 ;;		On exit  : 0/0
 24723 ;;		Unchanged: 0/0
 24724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24725 ;;      Params:         0       0       0       0       0       0       0
 24726 ;;      Locals:         0       0       0       0       0       0       0
 24727 ;;      Temps:          0       0       0       0       0       0       0
 24728 ;;      Totals:         0       0       0       0       0       0       0
 24729 ;;Total ram usage:        0 bytes
 24730 ;; Hardware stack levels used:    1
 24731 ;; Hardware stack levels required when called:    5
 24732 ;; This function calls:
 24733 ;;		_WriteTimer0
 24734 ;;		_init_app_ram
 24735 ;;		_OpenUSART
 24736 ;;		_OpenTimer0
 24737 ;;		_ECANInitialize
 24738 ;; This function is called by:
 24739 ;;		_main
 24740 ;; This function uses a non-reentrant model
 24741 ;;
 24742                           
 24743                           	psect	text69
 24744  005336                     __ptext69:
 24745                           	opt stack 0
 24746  005336                     _init:
 24747                           	opt stack 25
 24748                           
 24749                           ;main.c: 400: init_app_ram();
 24750                           
 24751                           ;incstack = 0
 24752                           ;incstack = 0
 24753  005336  EC4F  F029         	call	_init_app_ram	;wreg free
 24754                           
 24755                           ; BSR set to: 0
 24756                           ;main.c: 403: OSCCONbits.IRCF0 = 1;
 24757  00533A  88D3               	bsf	4051,4,c	;volatile
 24758                           
 24759                           ; BSR set to: 0
 24760                           ;main.c: 404: OSCCONbits.IRCF1 = 1;
 24761  00533C  8AD3               	bsf	4051,5,c	;volatile
 24762                           
 24763                           ; BSR set to: 0
 24764                           ;main.c: 405: OSCCONbits.IRCF2 = 1;
 24765  00533E  8CD3               	bsf	4051,6,c	;volatile
 24766                           
 24767                           ; BSR set to: 0
 24768                           ;main.c: 406: OSCTUNEbits.PLLEN = 1;
 24769  005340  8C9B               	bsf	3995,6,c	;volatile
 24770                           
 24771                           ; BSR set to: 0
 24772                           ;main.c: 408: TRISBbits.RB2 = 0;
 24773  005342  9493               	bcf	3987,2,c	;volatile
 24774                           
 24775                           ; BSR set to: 0
 24776                           ;main.c: 409: TRISBbits.RB3 = 1;
 24777  005344  8693               	bsf	3987,3,c	;volatile
 24778                           
 24779                           ; BSR set to: 0
 24780                           ;main.c: 411: TRISCbits.RC1 = 0;
 24781  005346  9294               	bcf	3988,1,c	;volatile
 24782                           
 24783                           ; BSR set to: 0
 24784                           ;main.c: 412: TRISCbits.RC6 = 0;
 24785  005348  9C94               	bcf	3988,6,c	;volatile
 24786                           
 24787                           ; BSR set to: 0
 24788                           ;main.c: 413: TRISCbits.RC7 = 1;
 24789  00534A  8E94               	bsf	3988,7,c	;volatile
 24790                           
 24791                           ;main.c: 417: OpenUSART( 0b01111111 &
 24792                           ;main.c: 418: 0b11111111 &
 24793                           ;main.c: 419: 0b11111110 &
 24794                           ;main.c: 420: 0b11111101 &
 24795                           ;main.c: 421: 0b11111111,
 24796                           ;main.c: 422: 21 );
 24797  00534C  6A1F               	clrf	?_OpenUSART+1,c
 24798  00534E  0E15               	movlw	21
 24799  005350  6E1E               	movwf	?_OpenUSART,c
 24800  005352  0E7C               	movlw	124
 24801  005354  ECCC  F028         	call	_OpenUSART
 24802                           
 24803                           ; BSR set to: 0
 24804                           ;main.c: 424: RCIF = 0;
 24805  005358  9A9E               	bcf	3998,5,c	;volatile
 24806                           
 24807                           ; BSR set to: 0
 24808                           ;main.c: 425: RCIP = 0;
 24809  00535A  9A9F               	bcf	3999,5,c	;volatile
 24810                           
 24811                           ; BSR set to: 0
 24812                           ;main.c: 426: RCIE = 1;
 24813  00535C  8A9D               	bsf	3997,5,c	;volatile
 24814                           
 24815                           ; BSR set to: 0
 24816                           ;main.c: 427: PEIE = 1;
 24817  00535E  8CF2               	bsf	intcon,6,c	;volatile
 24818                           
 24819                           ; BSR set to: 0
 24820                           ;main.c: 430: OpenTimer0(0b11111111 & 0b10111111 & 0b11011111 & 0b11110010);
 24821  005360  0E92               	movlw	146
 24822  005362  ECC0  F02B         	call	_OpenTimer0
 24823                           
 24824                           ; BSR set to: 0
 24825                           ;main.c: 431: WriteTimer0(0xfb1d);
 24826  005366  0EFB               	movlw	251
 24827  005368  6E1F               	movwf	?_WriteTimer0+1,c
 24828  00536A  0E1D               	movlw	29
 24829  00536C  6E1E               	movwf	?_WriteTimer0,c
 24830  00536E  ECFF  F02B         	call	_WriteTimer0	;wreg free
 24831                           
 24832                           ;main.c: 434: ECANInitialize();
 24833  005372  EC38  F026         	call	_ECANInitialize	;wreg free
 24834                           
 24835                           ;main.c: 458: RXBnIE = 1;
 24836  005376  82A3               	bsf	4003,1,c	;volatile
 24837                           
 24838                           ;main.c: 459: ERRIE = 1;
 24839  005378  8AA3               	bsf	4003,5,c	;volatile
 24840                           
 24841                           ;main.c: 461: (INTCONbits.GIE = 1);
 24842  00537A  8EF2               	bsf	intcon,7,c	;volatile
 24843  00537C  0012               	return	
 24844  00537E                     __end_of_init:
 24845                           	opt stack 0
 24846                           tblptru	equ	0xFF8
 24847                           tblptrh	equ	0xFF7
 24848                           tblptrl	equ	0xFF6
 24849                           tablat	equ	0xFF5
 24850                           prodh	equ	0xFF4
 24851                           prodl	equ	0xFF3
 24852                           intcon	equ	0xFF2
 24853                           indf0	equ	0xFEF
 24854                           postinc0	equ	0xFEE
 24855                           fsr0h	equ	0xFEA
 24856                           fsr0l	equ	0xFE9
 24857                           wreg	equ	0xFE8
 24858                           indf1	equ	0xFE7
 24859                           postinc1	equ	0xFE6
 24860                           postdec1	equ	0xFE5
 24861                           fsr1h	equ	0xFE2
 24862                           fsr1l	equ	0xFE1
 24863                           indf2	equ	0xFDF
 24864                           postinc2	equ	0xFDE
 24865                           postdec2	equ	0xFDD
 24866                           plusw2	equ	0xFDB
 24867                           fsr2h	equ	0xFDA
 24868                           fsr2l	equ	0xFD9
 24869                           status	equ	0xFD8
 24870                           
 24871 ;; *************** function _ECANInitialize *****************
 24872 ;; Defined at:
 24873 ;;		line 168 in file "ECAN.c"
 24874 ;; Parameters:    Size  Location     Type
 24875 ;;		None
 24876 ;; Auto vars:     Size  Location     Type
 24877 ;;		None
 24878 ;; Return value:  Size  Location     Type
 24879 ;;		None               void
 24880 ;; Registers used:
 24881 ;;		wreg, status,2, status,0, cstack
 24882 ;; Tracked objects:
 24883 ;;		On entry : F/0
 24884 ;;		On exit  : 0/0
 24885 ;;		Unchanged: 0/0
 24886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 24887 ;;      Params:         0       0       0       0       0       0       0
 24888 ;;      Locals:         0       0       0       0       0       0       0
 24889 ;;      Temps:          0       0       0       0       0       0       0
 24890 ;;      Totals:         0       0       0       0       0       0       0
 24891 ;;Total ram usage:        0 bytes
 24892 ;; Hardware stack levels used:    1
 24893 ;; Hardware stack levels required when called:    4
 24894 ;; This function calls:
 24895 ;;		_ECANSetOperationMode
 24896 ;; This function is called by:
 24897 ;;		_init
 24898 ;; This function uses a non-reentrant model
 24899 ;;
 24900                           
 24901                           	psect	text70
 24902  004C70                     __ptext70:
 24903                           	opt stack 0
 24904  004C70                     _ECANInitialize:
 24905                           	opt stack 25
 24906                           
 24907                           ; BSR set to: 0
 24908                           ;ECAN.c: 171: ECANSetOperationMode(ECAN_OP_MODE_CONFIG);
 24909                           
 24910                           ;incstack = 0
 24911                           ;incstack = 0
 24912  004C70  0E80               	movlw	128
 24913  004C72  ECDE  F02B         	call	_ECANSetOperationMode
 24914                           
 24915                           ;ECAN.c: 175: BRGCON1 = ((1-1) << 6) | (10-1);
 24916  004C76  0E09               	movlw	9
 24917  004C78  6E70               	movwf	3952,c	;volatile
 24918                           
 24919                           ;ECAN.c: 176: BRGCON2 = (1 << 7) | (1 << 6) | ((8-1) << 3) | (5-1);
 24920  004C7A  0EFC               	movlw	252
 24921  004C7C  6E71               	movwf	3953,c	;volatile
 24922                           
 24923                           ;ECAN.c: 180: BRGCON3 = (0 << 7) |
 24924                           ;ECAN.c: 181: (0 << 6) |
 24925                           ;ECAN.c: 182: (2-1);
 24926  004C7E  0E01               	movlw	1
 24927  004C80  6E72               	movwf	3954,c	;volatile
 24928                           
 24929                           ;ECAN.c: 185: CIOCON = 0 << 7 | 0 << 6 | 1 << 5 | 0;
 24930  004C82  0E20               	movlw	32
 24931  004C84  6E73               	movwf	3955,c	;volatile
 24932                           
 24933                           ;ECAN.c: 192: MDSEL1 = 0x80 >> 7;
 24934  004C86  8E77               	bsf	3959,7,c	;volatile
 24935                           
 24936                           ;ECAN.c: 193: MDSEL0 = 0x80 >> 6;
 24937  004C88  9C77               	bcf	3959,6,c	;volatile
 24938                           
 24939                           ;ECAN.c: 205: RXB0CON = 0;
 24940  004C8A  6A60               	clrf	3936,c	;volatile
 24941                           
 24942                           ;ECAN.c: 211: RXB1CON = 0;
 24943  004C8C  010F               	movlb	15	; () banked
 24944  004C8E  6B50               	clrf	80,b	;volatile
 24945                           
 24946                           ; BSR set to: 15
 24947                           ;ECAN.c: 221: B0CON = 0;
 24948  004C90  010E               	movlb	14	; () banked
 24949  004C92  6B20               	clrf	32,b	;volatile
 24950                           
 24951                           ; BSR set to: 14
 24952                           ;ECAN.c: 231: B1CON = 0;
 24953  004C94  6B30               	clrf	48,b	;volatile
 24954                           
 24955                           ; BSR set to: 14
 24956                           ;ECAN.c: 241: B2CON = 0;
 24957  004C96  6B40               	clrf	64,b	;volatile
 24958                           
 24959                           ; BSR set to: 14
 24960                           ;ECAN.c: 251: B3CON = 0;
 24961  004C98  6B50               	clrf	80,b	;volatile
 24962                           
 24963                           ; BSR set to: 14
 24964                           ;ECAN.c: 261: B4CON = 0;
 24965  004C9A  6B60               	clrf	96,b	;volatile
 24966                           
 24967                           ; BSR set to: 14
 24968                           ;ECAN.c: 271: B5CON = 0;
 24969  004C9C  6B70               	clrf	112,b	;volatile
 24970                           
 24971                           ; BSR set to: 14
 24972                           ;ECAN.c: 278: BSEL0 = 0 << 7 | 0 << 6 | 0 << 5 | 0 << 4 | 0 << 3 | 0 << 2;
 24973  004C9E  010D               	movlb	13	; () banked
 24974  004CA0  6BF8               	clrf	248,b	;volatile
 24975                           
 24976                           ; BSR set to: 13
 24977                           ;ECAN.c: 295: RXF0SIDH = (long)0x00000000L >> 21L;RXF0SIDL = (((long)0x00000000L >> 13L)
      +                           & 0xe0) | ((long)(0x00000000L) & 0x03L) | 0x08;RXF0EIDH = (long)0x00000000L >> 8L;RXF0E
      +                          IDL = 0x00000000L;;
 24978  004CA2  010F               	movlb	15	; () banked
 24979  004CA4  6B00               	clrf	0,b	;volatile
 24980                           
 24981                           ; BSR set to: 15
 24982  004CA6  0E08               	movlw	8
 24983  004CA8  6F01               	movwf	1,b	;volatile
 24984                           
 24985                           ; BSR set to: 15
 24986  004CAA  6B02               	clrf	2,b	;volatile
 24987                           
 24988                           ; BSR set to: 15
 24989  004CAC  6B03               	clrf	3,b	;volatile
 24990                           
 24991                           ; BSR set to: 15
 24992                           ;ECAN.c: 428: RXFCON0 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (1);
 24993  004CAE  0E01               	movlw	1
 24994  004CB0  010D               	movlb	13	; () banked
 24995  004CB2  6FD4               	movwf	212,b	;volatile
 24996                           
 24997                           ; BSR set to: 13
 24998                           ;ECAN.c: 436: RXFCON1 = (0 << 7) | (0 << 6) | (0 << 5) | (0 << 4) | (0 << 3) | (0 << 2) 
      +                          | (0 << 1) | (0);
 24999  004CB4  6BD5               	clrf	213,b	;volatile
 25000                           
 25001                           ; BSR set to: 13
 25002                           ;ECAN.c: 449: RXFBCON0 = (0 << 4) | 0;
 25003  004CB6  6BE0               	clrf	224,b	;volatile
 25004                           
 25005                           ; BSR set to: 13
 25006                           ;ECAN.c: 450: RXFBCON1 = (1 << 4) | 1;
 25007  004CB8  0E11               	movlw	17
 25008  004CBA  6FE1               	movwf	225,b	;volatile
 25009                           
 25010                           ; BSR set to: 13
 25011                           ;ECAN.c: 451: RXFBCON2 = (1 << 4) | 1;
 25012  004CBC  6FE2               	movwf	226,b	;volatile
 25013                           
 25014                           ; BSR set to: 13
 25015                           ;ECAN.c: 452: RXFBCON3 = (0 << 4) | 0;
 25016  004CBE  6BE3               	clrf	227,b	;volatile
 25017                           
 25018                           ; BSR set to: 13
 25019                           ;ECAN.c: 453: RXFBCON4 = (0 << 4) | 0;
 25020  004CC0  6BE4               	clrf	228,b	;volatile
 25021                           
 25022                           ; BSR set to: 13
 25023                           ;ECAN.c: 454: RXFBCON5 = (0 << 4) | 0;
 25024  004CC2  6BE5               	clrf	229,b	;volatile
 25025                           
 25026                           ; BSR set to: 13
 25027                           ;ECAN.c: 455: RXFBCON6 = (0 << 4) | 0;
 25028  004CC4  6BE6               	clrf	230,b	;volatile
 25029                           
 25030                           ; BSR set to: 13
 25031                           ;ECAN.c: 456: RXFBCON7 = (0 << 4) | 0;
 25032  004CC6  6BE7               	clrf	231,b	;volatile
 25033                           
 25034                           ; BSR set to: 13
 25035                           ;ECAN.c: 458: MSEL0 = 1 << 6 | 1 << 4 | 1 << 2 | 0;;
 25036  004CC8  0E54               	movlw	84
 25037  004CCA  6FF0               	movwf	240,b	;volatile
 25038                           
 25039                           ; BSR set to: 13
 25040                           ;ECAN.c: 462: MSEL1 = 0 << 6 | 0 << 4 | 1 << 2 | 1;;
 25041  004CCC  0E05               	movlw	5
 25042  004CCE  6FF1               	movwf	241,b	;volatile
 25043                           
 25044                           ; BSR set to: 13
 25045                           ;ECAN.c: 466: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25046  004CD0  6BF2               	clrf	242,b	;volatile
 25047                           
 25048                           ; BSR set to: 13
 25049                           ;ECAN.c: 470: MSEL2 = 0 << 6 | 0 << 4 | 0 << 2 | 0;;
 25050  004CD2  6BF2               	clrf	242,b	;volatile
 25051                           
 25052                           ; BSR set to: 13
 25053                           ;ECAN.c: 481: RXM0SIDH = (long)0x00000000L >> 21L; RXM0SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM0EIDH = (long)0x00000000L >> 8L; RXM0EIDL 
      +                          = 0x00000000L;;
 25054  004CD4  010F               	movlb	15	; () banked
 25055  004CD6  6B18               	clrf	24,b	;volatile
 25056                           
 25057                           ; BSR set to: 15
 25058  004CD8  6B19               	clrf	25,b	;volatile
 25059                           
 25060                           ; BSR set to: 15
 25061  004CDA  6B1A               	clrf	26,b	;volatile
 25062                           
 25063                           ; BSR set to: 15
 25064  004CDC  6B1B               	clrf	27,b	;volatile
 25065                           
 25066                           ; BSR set to: 15
 25067                           ;ECAN.c: 482: RXM0EXIDM = 1;
 25068  004CDE  8719               	bsf	25,3,b	;volatile
 25069                           
 25070                           ; BSR set to: 15
 25071                           ;ECAN.c: 489: RXM1SIDH = (long)0x00000000L >> 21L; RXM1SIDL = (((long)0x00000000L >> 13L
      +                          ) & 0xe0) | ((long)(0x00000000L) & 0x03L); RXM1EIDH = (long)0x00000000L >> 8L; RXM1EIDL 
      +                          = 0x00000000L;;
 25072  004CE0  6B1C               	clrf	28,b	;volatile
 25073                           
 25074                           ; BSR set to: 15
 25075  004CE2  6B1D               	clrf	29,b	;volatile
 25076                           
 25077                           ; BSR set to: 15
 25078  004CE4  6B1E               	clrf	30,b	;volatile
 25079                           
 25080                           ; BSR set to: 15
 25081  004CE6  6B1F               	clrf	31,b	;volatile
 25082                           
 25083                           ; BSR set to: 15
 25084                           ;ECAN.c: 490: RXM1EXIDEN = 1;
 25085  004CE8  871D               	bsf	29,3,b	;volatile
 25086                           
 25087                           ;ECAN.c: 498: ECANSetOperationMode(0x20);
 25088  004CEA  0E20               	movlw	32
 25089  004CEC  EFDE  F02B         	goto	_ECANSetOperationMode
 25090  004CF0                     __end_of_ECANInitialize:
 25091                           	opt stack 0
 25092                           tblptru	equ	0xFF8
 25093                           tblptrh	equ	0xFF7
 25094                           tblptrl	equ	0xFF6
 25095                           tablat	equ	0xFF5
 25096                           prodh	equ	0xFF4
 25097                           prodl	equ	0xFF3
 25098                           intcon	equ	0xFF2
 25099                           indf0	equ	0xFEF
 25100                           postinc0	equ	0xFEE
 25101                           fsr0h	equ	0xFEA
 25102                           fsr0l	equ	0xFE9
 25103                           wreg	equ	0xFE8
 25104                           indf1	equ	0xFE7
 25105                           postinc1	equ	0xFE6
 25106                           postdec1	equ	0xFE5
 25107                           fsr1h	equ	0xFE2
 25108                           fsr1l	equ	0xFE1
 25109                           indf2	equ	0xFDF
 25110                           postinc2	equ	0xFDE
 25111                           postdec2	equ	0xFDD
 25112                           plusw2	equ	0xFDB
 25113                           fsr2h	equ	0xFDA
 25114                           fsr2l	equ	0xFD9
 25115                           status	equ	0xFD8
 25116                           
 25117 ;; *************** function _ECANSetOperationMode *****************
 25118 ;; Defined at:
 25119 ;;		line 1014 in file "ECAN.c"
 25120 ;; Parameters:    Size  Location     Type
 25121 ;;  mode            1    wreg     enum E16337
 25122 ;; Auto vars:     Size  Location     Type
 25123 ;;  mode            1   29[COMRAM] enum E16337
 25124 ;; Return value:  Size  Location     Type
 25125 ;;		None               void
 25126 ;; Registers used:
 25127 ;;		wreg, status,2, status,0
 25128 ;; Tracked objects:
 25129 ;;		On entry : 0/0
 25130 ;;		On exit  : 0/0
 25131 ;;		Unchanged: 0/0
 25132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25133 ;;      Params:         0       0       0       0       0       0       0
 25134 ;;      Locals:         1       0       0       0       0       0       0
 25135 ;;      Temps:          0       0       0       0       0       0       0
 25136 ;;      Totals:         1       0       0       0       0       0       0
 25137 ;;Total ram usage:        1 bytes
 25138 ;; Hardware stack levels used:    1
 25139 ;; Hardware stack levels required when called:    3
 25140 ;; This function calls:
 25141 ;;		Nothing
 25142 ;; This function is called by:
 25143 ;;		_doModeVerbose
 25144 ;;		_doModeVscp
 25145 ;;		_doModeSLCAN
 25146 ;;		_ECANInitialize
 25147 ;; This function uses a non-reentrant model
 25148 ;;
 25149                           
 25150                           	psect	text71
 25151  0057BC                     __ptext71:
 25152                           	opt stack 0
 25153  0057BC                     _ECANSetOperationMode:
 25154                           	opt stack 26
 25155                           
 25156                           ;incstack = 0
 25157                           ;incstack = 0
 25158                           ;ECANSetOperationMode@mode stored from wreg
 25159  0057BC  CFE8 F01E          	movff	wreg,ECANSetOperationMode@mode
 25160                           
 25161                           ;ECAN.c: 1015: CANCON &= 0x1F;
 25162  0057C0  0E1F               	movlw	31
 25163  0057C2  166F               	andwf	3951,f,c	;volatile
 25164                           
 25165                           ;ECAN.c: 1016: CANCON |= mode;
 25166  0057C4  501E               	movf	ECANSetOperationMode@mode,w,c
 25167  0057C6  126F               	iorwf	3951,f,c	;volatile
 25168  0057C8                     l11409:
 25169  0057C8  506F               	movf	3951,w,c	;volatile
 25170  0057CA  0BE0               	andlw	224
 25171  0057CC  181E               	xorwf	ECANSetOperationMode@mode,w,c
 25172  0057CE  B4D8               	btfsc	status,2,c
 25173  0057D0  0012               	return	
 25174  0057D2  D7FA               	goto	l11409
 25175  0057D4                     __end_of_ECANSetOperationMode:
 25176                           	opt stack 0
 25177                           tblptru	equ	0xFF8
 25178                           tblptrh	equ	0xFF7
 25179                           tblptrl	equ	0xFF6
 25180                           tablat	equ	0xFF5
 25181                           prodh	equ	0xFF4
 25182                           prodl	equ	0xFF3
 25183                           intcon	equ	0xFF2
 25184                           indf0	equ	0xFEF
 25185                           postinc0	equ	0xFEE
 25186                           fsr0h	equ	0xFEA
 25187                           fsr0l	equ	0xFE9
 25188                           wreg	equ	0xFE8
 25189                           indf1	equ	0xFE7
 25190                           postinc1	equ	0xFE6
 25191                           postdec1	equ	0xFE5
 25192                           fsr1h	equ	0xFE2
 25193                           fsr1l	equ	0xFE1
 25194                           indf2	equ	0xFDF
 25195                           postinc2	equ	0xFDE
 25196                           postdec2	equ	0xFDD
 25197                           plusw2	equ	0xFDB
 25198                           fsr2h	equ	0xFDA
 25199                           fsr2l	equ	0xFD9
 25200                           status	equ	0xFD8
 25201                           
 25202 ;; *************** function _OpenTimer0 *****************
 25203 ;; Defined at:
 25204 ;;		line 19 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0open.c"
 25205 ;; Parameters:    Size  Location     Type
 25206 ;;  config          1    wreg     unsigned char 
 25207 ;; Auto vars:     Size  Location     Type
 25208 ;;  config          1   29[COMRAM] unsigned char 
 25209 ;; Return value:  Size  Location     Type
 25210 ;;		None               void
 25211 ;; Registers used:
 25212 ;;		wreg, status,2, status,0
 25213 ;; Tracked objects:
 25214 ;;		On entry : F/0
 25215 ;;		On exit  : F/0
 25216 ;;		Unchanged: F/0
 25217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25218 ;;      Params:         0       0       0       0       0       0       0
 25219 ;;      Locals:         1       0       0       0       0       0       0
 25220 ;;      Temps:          0       0       0       0       0       0       0
 25221 ;;      Totals:         1       0       0       0       0       0       0
 25222 ;;Total ram usage:        1 bytes
 25223 ;; Hardware stack levels used:    1
 25224 ;; Hardware stack levels required when called:    3
 25225 ;; This function calls:
 25226 ;;		Nothing
 25227 ;; This function is called by:
 25228 ;;		_init
 25229 ;; This function uses a non-reentrant model
 25230 ;;
 25231                           
 25232                           	psect	text72
 25233  005780                     __ptext72:
 25234                           	opt stack 0
 25235  005780                     _OpenTimer0:
 25236                           	opt stack 26
 25237                           
 25238                           ;incstack = 0
 25239                           ;incstack = 0
 25240                           ;OpenTimer0@config stored from wreg
 25241  005780  CFE8 F01E          	movff	wreg,OpenTimer0@config
 25242                           
 25243                           ; BSR set to: 0
 25244  005784  501E               	movf	OpenTimer0@config,w,c
 25245  005786  0B7F               	andlw	127
 25246  005788  6ED5               	movwf	4053,c	;volatile
 25247                           
 25248                           ; BSR set to: 0
 25249  00578A  6AD7               	clrf	4055,c	;volatile
 25250                           
 25251                           ; BSR set to: 0
 25252  00578C  6AD6               	clrf	4054,c	;volatile
 25253                           
 25254                           ; BSR set to: 0
 25255  00578E  94F2               	bcf	intcon,2,c	;volatile
 25256                           
 25257                           ; BSR set to: 0
 25258  005790  AE1E               	btfss	OpenTimer0@config,7,c
 25259  005792  D002               	goto	l1805
 25260                           
 25261                           ; BSR set to: 0
 25262  005794  8AF2               	bsf	intcon,5,c	;volatile
 25263  005796  D001               	goto	l1806
 25264  005798                     l1805:
 25265                           
 25266                           ; BSR set to: 0
 25267  005798  9AF2               	bcf	intcon,5,c	;volatile
 25268  00579A                     l1806:
 25269                           
 25270                           ; BSR set to: 0
 25271  00579A  8ED5               	bsf	4053,7,c	;volatile
 25272                           
 25273                           ; BSR set to: 0
 25274  00579C  0012               	return	
 25275  00579E                     __end_of_OpenTimer0:
 25276                           	opt stack 0
 25277                           tblptru	equ	0xFF8
 25278                           tblptrh	equ	0xFF7
 25279                           tblptrl	equ	0xFF6
 25280                           tablat	equ	0xFF5
 25281                           prodh	equ	0xFF4
 25282                           prodl	equ	0xFF3
 25283                           intcon	equ	0xFF2
 25284                           indf0	equ	0xFEF
 25285                           postinc0	equ	0xFEE
 25286                           fsr0h	equ	0xFEA
 25287                           fsr0l	equ	0xFE9
 25288                           wreg	equ	0xFE8
 25289                           indf1	equ	0xFE7
 25290                           postinc1	equ	0xFE6
 25291                           postdec1	equ	0xFE5
 25292                           fsr1h	equ	0xFE2
 25293                           fsr1l	equ	0xFE1
 25294                           indf2	equ	0xFDF
 25295                           postinc2	equ	0xFDE
 25296                           postdec2	equ	0xFDD
 25297                           plusw2	equ	0xFDB
 25298                           fsr2h	equ	0xFDA
 25299                           fsr2l	equ	0xFD9
 25300                           status	equ	0xFD8
 25301                           
 25302 ;; *************** function _OpenUSART *****************
 25303 ;; Defined at:
 25304 ;;		line 74 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uopen.c"
 25305 ;; Parameters:    Size  Location     Type
 25306 ;;  config          1    wreg     unsigned char 
 25307 ;;  spbrg           2   29[COMRAM] unsigned int 
 25308 ;; Auto vars:     Size  Location     Type
 25309 ;;  config          1   31[COMRAM] unsigned char 
 25310 ;; Return value:  Size  Location     Type
 25311 ;;		None               void
 25312 ;; Registers used:
 25313 ;;		wreg, status,2
 25314 ;; Tracked objects:
 25315 ;;		On entry : F/0
 25316 ;;		On exit  : F/0
 25317 ;;		Unchanged: F/0
 25318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25319 ;;      Params:         2       0       0       0       0       0       0
 25320 ;;      Locals:         1       0       0       0       0       0       0
 25321 ;;      Temps:          0       0       0       0       0       0       0
 25322 ;;      Totals:         3       0       0       0       0       0       0
 25323 ;;Total ram usage:        3 bytes
 25324 ;; Hardware stack levels used:    1
 25325 ;; Hardware stack levels required when called:    3
 25326 ;; This function calls:
 25327 ;;		Nothing
 25328 ;; This function is called by:
 25329 ;;		_init
 25330 ;; This function uses a non-reentrant model
 25331 ;;
 25332                           
 25333                           	psect	text73
 25334  005198                     __ptext73:
 25335                           	opt stack 0
 25336  005198                     _OpenUSART:
 25337                           	opt stack 26
 25338                           
 25339                           ; BSR set to: 0
 25340                           ;incstack = 0
 25341                           ;incstack = 0
 25342                           ;OpenUSART@config stored from wreg
 25343  005198  CFE8 F020          	movff	wreg,OpenUSART@config
 25344                           
 25345                           ; BSR set to: 0
 25346  00519C  6AAC               	clrf	4012,c	;volatile
 25347  00519E  6AAB               	clrf	4011,c	;volatile
 25348                           
 25349                           ; BSR set to: 0
 25350  0051A0  B020               	btfsc	OpenUSART@config,0,c
 25351                           
 25352                           ; BSR set to: 0
 25353  0051A2  88AC               	bsf	4012,4,c	;volatile
 25354                           
 25355                           ; BSR set to: 0
 25356  0051A4  A220               	btfss	OpenUSART@config,1,c
 25357  0051A6  D002               	goto	l7621
 25358                           
 25359                           ; BSR set to: 0
 25360  0051A8  8CAC               	bsf	4012,6,c	;volatile
 25361  0051AA  8CAB               	bsf	4011,6,c	;volatile
 25362  0051AC                     l7621:
 25363                           
 25364                           ; BSR set to: 0
 25365  0051AC  B420               	btfsc	OpenUSART@config,2,c
 25366                           
 25367                           ; BSR set to: 0
 25368  0051AE  8EAC               	bsf	4012,7,c	;volatile
 25369                           
 25370                           ; BSR set to: 0
 25371  0051B0  A620               	btfss	OpenUSART@config,3,c
 25372  0051B2  D002               	goto	l1838
 25373                           
 25374                           ; BSR set to: 0
 25375  0051B4  88AB               	bsf	4011,4,c	;volatile
 25376  0051B6  D001               	goto	l7629
 25377  0051B8                     l1838:
 25378                           
 25379                           ; BSR set to: 0
 25380  0051B8  8AAB               	bsf	4011,5,c	;volatile
 25381  0051BA                     l7629:
 25382                           
 25383                           ; BSR set to: 0
 25384  0051BA  B820               	btfsc	OpenUSART@config,4,c
 25385                           
 25386                           ; BSR set to: 0
 25387  0051BC  84AC               	bsf	4012,2,c	;volatile
 25388                           
 25389                           ; BSR set to: 0
 25390  0051BE  989E               	bcf	3998,4,c	;volatile
 25391                           
 25392                           ; BSR set to: 0
 25393  0051C0  BA20               	btfsc	OpenUSART@config,5,c
 25394                           
 25395                           ; BSR set to: 0
 25396  0051C2  86AB               	bsf	4011,3,c	;volatile
 25397                           
 25398                           ; BSR set to: 0
 25399  0051C4  AC20               	btfss	OpenUSART@config,6,c
 25400  0051C6  D002               	goto	l1842
 25401                           
 25402                           ; BSR set to: 0
 25403  0051C8  8A9D               	bsf	3997,5,c	;volatile
 25404  0051CA  D001               	goto	l1843
 25405  0051CC                     l1842:
 25406                           
 25407                           ; BSR set to: 0
 25408  0051CC  9A9D               	bcf	3997,5,c	;volatile
 25409  0051CE                     l1843:
 25410                           
 25411                           ; BSR set to: 0
 25412  0051CE  9A9E               	bcf	3998,5,c	;volatile
 25413                           
 25414                           ; BSR set to: 0
 25415  0051D0  AE20               	btfss	OpenUSART@config,7,c
 25416  0051D2  D002               	goto	l1844
 25417                           
 25418                           ; BSR set to: 0
 25419  0051D4  889D               	bsf	3997,4,c	;volatile
 25420  0051D6  D001               	goto	l1845
 25421  0051D8                     l1844:
 25422                           
 25423                           ; BSR set to: 0
 25424  0051D8  989D               	bcf	3997,4,c	;volatile
 25425  0051DA                     l1845:
 25426                           
 25427                           ; BSR set to: 0
 25428  0051DA  C01E  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
 25429                           
 25430                           ; BSR set to: 0
 25431  0051DE  501F               	movf	OpenUSART@spbrg+1,w,c
 25432  0051E0  6EB0               	movwf	4016,c	;volatile
 25433                           
 25434                           ; BSR set to: 0
 25435  0051E2  8AAC               	bsf	4012,5,c	;volatile
 25436                           
 25437                           ; BSR set to: 0
 25438  0051E4  8EAB               	bsf	4011,7,c	;volatile
 25439                           
 25440                           ; BSR set to: 0
 25441  0051E6  9C94               	bcf	3988,6,c	;volatile
 25442                           
 25443                           ; BSR set to: 0
 25444  0051E8  8E94               	bsf	3988,7,c	;volatile
 25445                           
 25446                           ; BSR set to: 0
 25447  0051EA  B8AC               	btfsc	4012,4,c	;volatile
 25448                           
 25449                           ; BSR set to: 0
 25450  0051EC  BEAC               	btfsc	4012,7,c	;volatile
 25451  0051EE  D001               	goto	l1847
 25452                           
 25453                           ; BSR set to: 0
 25454  0051F0  8C94               	bsf	3988,6,c	;volatile
 25455  0051F2                     l1847:
 25456                           
 25457                           ; BSR set to: 0
 25458  0051F2  0012               	return	
 25459  0051F4                     __end_of_OpenUSART:
 25460                           	opt stack 0
 25461                           tblptru	equ	0xFF8
 25462                           tblptrh	equ	0xFF7
 25463                           tblptrl	equ	0xFF6
 25464                           tablat	equ	0xFF5
 25465                           prodh	equ	0xFF4
 25466                           prodl	equ	0xFF3
 25467                           intcon	equ	0xFF2
 25468                           indf0	equ	0xFEF
 25469                           postinc0	equ	0xFEE
 25470                           fsr0h	equ	0xFEA
 25471                           fsr0l	equ	0xFE9
 25472                           wreg	equ	0xFE8
 25473                           indf1	equ	0xFE7
 25474                           postinc1	equ	0xFE6
 25475                           postdec1	equ	0xFE5
 25476                           fsr1h	equ	0xFE2
 25477                           fsr1l	equ	0xFE1
 25478                           indf2	equ	0xFDF
 25479                           postinc2	equ	0xFDE
 25480                           postdec2	equ	0xFDD
 25481                           plusw2	equ	0xFDB
 25482                           fsr2h	equ	0xFDA
 25483                           fsr2l	equ	0xFD9
 25484                           status	equ	0xFD8
 25485                           
 25486 ;; *************** function _WriteTimer0 *****************
 25487 ;; Defined at:
 25488 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 25489 ;; Parameters:    Size  Location     Type
 25490 ;;  timer0          2   29[COMRAM] unsigned int 
 25491 ;; Auto vars:     Size  Location     Type
 25492 ;;  timer           2   31[COMRAM] struct Timers
 25493 ;; Return value:  Size  Location     Type
 25494 ;;		None               void
 25495 ;; Registers used:
 25496 ;;		None
 25497 ;; Tracked objects:
 25498 ;;		On entry : F/0
 25499 ;;		On exit  : F/0
 25500 ;;		Unchanged: F/0
 25501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25502 ;;      Params:         2       0       0       0       0       0       0
 25503 ;;      Locals:         2       0       0       0       0       0       0
 25504 ;;      Temps:          0       0       0       0       0       0       0
 25505 ;;      Totals:         4       0       0       0       0       0       0
 25506 ;;Total ram usage:        4 bytes
 25507 ;; Hardware stack levels used:    1
 25508 ;; Hardware stack levels required when called:    3
 25509 ;; This function calls:
 25510 ;;		Nothing
 25511 ;; This function is called by:
 25512 ;;		_init
 25513 ;; This function uses a non-reentrant model
 25514 ;;
 25515                           
 25516                           	psect	text74
 25517  0057FE                     __ptext74:
 25518                           	opt stack 0
 25519  0057FE                     _WriteTimer0:
 25520                           	opt stack 26
 25521                           
 25522                           ; BSR set to: 0
 25523                           
 25524                           ; BSR set to: 0
 25525                           ;incstack = 0
 25526                           ;incstack = 0
 25527  0057FE  C01E  F020         	movff	WriteTimer0@timer0,WriteTimer0@timer
 25528  005802  C01F  F021         	movff	WriteTimer0@timer0+1,WriteTimer0@timer+1
 25529  005806  C021  FFD7         	movff	WriteTimer0@timer+1,4055	;volatile
 25530  00580A  C020  FFD6         	movff	WriteTimer0@timer,4054	;volatile
 25531                           
 25532                           ; BSR set to: 0
 25533  00580E  0012               	return	
 25534  005810                     __end_of_WriteTimer0:
 25535                           	opt stack 0
 25536                           tblptru	equ	0xFF8
 25537                           tblptrh	equ	0xFF7
 25538                           tblptrl	equ	0xFF6
 25539                           tablat	equ	0xFF5
 25540                           prodh	equ	0xFF4
 25541                           prodl	equ	0xFF3
 25542                           intcon	equ	0xFF2
 25543                           indf0	equ	0xFEF
 25544                           postinc0	equ	0xFEE
 25545                           fsr0h	equ	0xFEA
 25546                           fsr0l	equ	0xFE9
 25547                           wreg	equ	0xFE8
 25548                           indf1	equ	0xFE7
 25549                           postinc1	equ	0xFE6
 25550                           postdec1	equ	0xFE5
 25551                           fsr1h	equ	0xFE2
 25552                           fsr1l	equ	0xFE1
 25553                           indf2	equ	0xFDF
 25554                           postinc2	equ	0xFDE
 25555                           postdec2	equ	0xFDD
 25556                           plusw2	equ	0xFDB
 25557                           fsr2h	equ	0xFDA
 25558                           fsr2l	equ	0xFD9
 25559                           status	equ	0xFD8
 25560                           
 25561 ;; *************** function _vscp_restoreDefaults *****************
 25562 ;; Defined at:
 25563 ;;		line 2783 in file "main.c"
 25564 ;; Parameters:    Size  Location     Type
 25565 ;;		None
 25566 ;; Auto vars:     Size  Location     Type
 25567 ;;		None
 25568 ;; Return value:  Size  Location     Type
 25569 ;;		None               void
 25570 ;; Registers used:
 25571 ;;		wreg, status,2, status,0, cstack
 25572 ;; Tracked objects:
 25573 ;;		On entry : 0/1
 25574 ;;		On exit  : F/0
 25575 ;;		Unchanged: 0/0
 25576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25577 ;;      Params:         0       0       0       0       0       0       0
 25578 ;;      Locals:         0       0       0       0       0       0       0
 25579 ;;      Temps:          0       0       0       0       0       0       0
 25580 ;;      Totals:         0       0       0       0       0       0       0
 25581 ;;Total ram usage:        0 bytes
 25582 ;; Hardware stack levels used:    1
 25583 ;; Hardware stack levels required when called:    5
 25584 ;; This function calls:
 25585 ;;		_init_app_ram
 25586 ;;		_init_app_eeprom
 25587 ;; This function is called by:
 25588 ;;		_main
 25589 ;; This function uses a non-reentrant model
 25590 ;;
 25591                           
 25592                           	psect	text75
 25593  005834                     __ptext75:
 25594                           	opt stack 0
 25595  005834                     _vscp_restoreDefaults:
 25596                           	opt stack 25
 25597                           
 25598                           ;main.c: 2784: init_app_eeprom();
 25599                           
 25600                           ; BSR set to: 0
 25601                           ;incstack = 0
 25602                           ;incstack = 0
 25603  005834  EC24  F023         	call	_init_app_eeprom	;wreg free
 25604                           
 25605                           ;main.c: 2785: init_app_ram();
 25606  005838  EF4F  F029         	goto	_init_app_ram	;wreg free
 25607  00583C                     __end_of_vscp_restoreDefaults:
 25608                           	opt stack 0
 25609                           tblptru	equ	0xFF8
 25610                           tblptrh	equ	0xFF7
 25611                           tblptrl	equ	0xFF6
 25612                           tablat	equ	0xFF5
 25613                           prodh	equ	0xFF4
 25614                           prodl	equ	0xFF3
 25615                           intcon	equ	0xFF2
 25616                           indf0	equ	0xFEF
 25617                           postinc0	equ	0xFEE
 25618                           fsr0h	equ	0xFEA
 25619                           fsr0l	equ	0xFE9
 25620                           wreg	equ	0xFE8
 25621                           indf1	equ	0xFE7
 25622                           postinc1	equ	0xFE6
 25623                           postdec1	equ	0xFE5
 25624                           fsr1h	equ	0xFE2
 25625                           fsr1l	equ	0xFE1
 25626                           indf2	equ	0xFDF
 25627                           postinc2	equ	0xFDE
 25628                           postdec2	equ	0xFDD
 25629                           plusw2	equ	0xFDB
 25630                           fsr2h	equ	0xFDA
 25631                           fsr2l	equ	0xFD9
 25632                           status	equ	0xFD8
 25633                           
 25634 ;; *************** function _init_app_eeprom *****************
 25635 ;; Defined at:
 25636 ;;		line 488 in file "main.c"
 25637 ;; Parameters:    Size  Location     Type
 25638 ;;		None
 25639 ;; Auto vars:     Size  Location     Type
 25640 ;;  i               1   33[COMRAM] unsigned char 
 25641 ;; Return value:  Size  Location     Type
 25642 ;;		None               void
 25643 ;; Registers used:
 25644 ;;		wreg, status,2, status,0, cstack
 25645 ;; Tracked objects:
 25646 ;;		On entry : 0/1
 25647 ;;		On exit  : 0/0
 25648 ;;		Unchanged: 0/0
 25649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25650 ;;      Params:         0       0       0       0       0       0       0
 25651 ;;      Locals:         1       0       0       0       0       0       0
 25652 ;;      Temps:          0       0       0       0       0       0       0
 25653 ;;      Totals:         1       0       0       0       0       0       0
 25654 ;;Total ram usage:        1 bytes
 25655 ;; Hardware stack levels used:    1
 25656 ;; Hardware stack levels required when called:    4
 25657 ;; This function calls:
 25658 ;;		_Busy_eep
 25659 ;;		_Write_b_eep
 25660 ;; This function is called by:
 25661 ;;		_vscp_restoreDefaults
 25662 ;; This function uses a non-reentrant model
 25663 ;;
 25664                           
 25665                           	psect	text76
 25666  004648                     __ptext76:
 25667                           	opt stack 0
 25668  004648                     _init_app_eeprom:
 25669                           	opt stack 25
 25670                           
 25671                           ;main.c: 489: uint8_t i;
 25672                           ;main.c: 491: (Busy_eep(), Write_b_eep(0x01,0x55));
 25673                           
 25674                           ; BSR set to: 0
 25675                           ;incstack = 0
 25676                           ;incstack = 0
 25677  004648  EC1E  F02C         	call	_Busy_eep	;wreg free
 25678  00464C  6A1F               	clrf	?_Write_b_eep+1,c
 25679  00464E  0E01               	movlw	1
 25680  004650  6E1E               	movwf	?_Write_b_eep,c
 25681  004652  0E55               	movlw	85
 25682  004654  6E20               	movwf	?_Write_b_eep+2,c
 25683  004656  EC39  F02B         	call	_Write_b_eep	;wreg free
 25684                           
 25685                           ;main.c: 492: (Busy_eep(), Write_b_eep(0x02,0xAA));
 25686  00465A  EC1E  F02C         	call	_Busy_eep	;wreg free
 25687  00465E  6A1F               	clrf	?_Write_b_eep+1,c
 25688  004660  0E02               	movlw	2
 25689  004662  6E1E               	movwf	?_Write_b_eep,c
 25690  004664  0EAA               	movlw	170
 25691  004666  6E20               	movwf	?_Write_b_eep+2,c
 25692  004668  EC39  F02B         	call	_Write_b_eep	;wreg free
 25693                           
 25694                           ;main.c: 493: (Busy_eep(), Write_b_eep(0x03,0));
 25695  00466C  EC1E  F02C         	call	_Busy_eep	;wreg free
 25696  004670  6A1F               	clrf	?_Write_b_eep+1,c
 25697  004672  0E03               	movlw	3
 25698  004674  6E1E               	movwf	?_Write_b_eep,c
 25699  004676  0E00               	movlw	0
 25700  004678  6A20               	clrf	?_Write_b_eep+2,c
 25701  00467A  EC39  F02B         	call	_Write_b_eep	;wreg free
 25702                           
 25703                           ;main.c: 494: (Busy_eep(), Write_b_eep(0x05,0));
 25704  00467E  EC1E  F02C         	call	_Busy_eep	;wreg free
 25705  004682  6A1F               	clrf	?_Write_b_eep+1,c
 25706  004684  0E05               	movlw	5
 25707  004686  6E1E               	movwf	?_Write_b_eep,c
 25708  004688  0E00               	movlw	0
 25709  00468A  6A20               	clrf	?_Write_b_eep+2,c
 25710  00468C  EC39  F02B         	call	_Write_b_eep	;wreg free
 25711                           
 25712                           ;main.c: 495: (Busy_eep(), Write_b_eep(0x06,0));
 25713  004690  EC1E  F02C         	call	_Busy_eep	;wreg free
 25714  004694  6A1F               	clrf	?_Write_b_eep+1,c
 25715  004696  0E06               	movlw	6
 25716  004698  6E1E               	movwf	?_Write_b_eep,c
 25717  00469A  0E00               	movlw	0
 25718  00469C  6A20               	clrf	?_Write_b_eep+2,c
 25719  00469E  EC39  F02B         	call	_Write_b_eep	;wreg free
 25720                           
 25721                           ;main.c: 496: (Busy_eep(), Write_b_eep(0x09,10u));
 25722  0046A2  EC1E  F02C         	call	_Busy_eep	;wreg free
 25723  0046A6  6A1F               	clrf	?_Write_b_eep+1,c
 25724  0046A8  0E09               	movlw	9
 25725  0046AA  6E1E               	movwf	?_Write_b_eep,c
 25726  0046AC  0E0A               	movlw	10
 25727  0046AE  6E20               	movwf	?_Write_b_eep+2,c
 25728  0046B0  EC39  F02B         	call	_Write_b_eep	;wreg free
 25729                           
 25730                           ;main.c: 499: for (i = 0x20; i < (0x5C + 4); i++) {
 25731  0046B4  0E20               	movlw	32
 25732  0046B6  6E22               	movwf	init_app_eeprom@i,c
 25733  0046B8                     l11263:
 25734                           
 25735                           ;main.c: 500: (Busy_eep(), Write_b_eep(0x01,0xFF));
 25736  0046B8  EC1E  F02C         	call	_Busy_eep	;wreg free
 25737  0046BC  6A1F               	clrf	?_Write_b_eep+1,c
 25738  0046BE  0E01               	movlw	1
 25739  0046C0  6E1E               	movwf	?_Write_b_eep,c
 25740  0046C2  0EFF               	movlw	255
 25741  0046C4  6820               	setf	?_Write_b_eep+2,c
 25742  0046C6  EC39  F02B         	call	_Write_b_eep	;wreg free
 25743  0046CA  2A22               	incf	init_app_eeprom@i,f,c
 25744  0046CC  0E5F               	movlw	95
 25745  0046CE  6422               	cpfsgt	init_app_eeprom@i,c
 25746  0046D0  D7F3               	goto	l11263
 25747                           
 25748                           ;main.c: 501: }
 25749                           ;main.c: 504: for (i = 0x60; i < (0x64 + 4); i++) {
 25750  0046D2  0E60               	movlw	96
 25751  0046D4  6E22               	movwf	init_app_eeprom@i,c
 25752  0046D6                     l11277:
 25753                           
 25754                           ;main.c: 505: (Busy_eep(), Write_b_eep(0x01,0xFF));
 25755  0046D6  EC1E  F02C         	call	_Busy_eep	;wreg free
 25756  0046DA  6A1F               	clrf	?_Write_b_eep+1,c
 25757  0046DC  0E01               	movlw	1
 25758  0046DE  6E1E               	movwf	?_Write_b_eep,c
 25759  0046E0  0EFF               	movlw	255
 25760  0046E2  6820               	setf	?_Write_b_eep+2,c
 25761  0046E4  EC39  F02B         	call	_Write_b_eep	;wreg free
 25762  0046E8  2A22               	incf	init_app_eeprom@i,f,c
 25763  0046EA  0E67               	movlw	103
 25764  0046EC  6422               	cpfsgt	init_app_eeprom@i,c
 25765  0046EE  D7F3               	goto	l11277
 25766  0046F0  0C67               	retlw	103
 25767  0046F2                     __end_of_init_app_eeprom:
 25768                           	opt stack 0
 25769                           tblptru	equ	0xFF8
 25770                           tblptrh	equ	0xFF7
 25771                           tblptrl	equ	0xFF6
 25772                           tablat	equ	0xFF5
 25773                           prodh	equ	0xFF4
 25774                           prodl	equ	0xFF3
 25775                           intcon	equ	0xFF2
 25776                           indf0	equ	0xFEF
 25777                           postinc0	equ	0xFEE
 25778                           fsr0h	equ	0xFEA
 25779                           fsr0l	equ	0xFE9
 25780                           wreg	equ	0xFE8
 25781                           indf1	equ	0xFE7
 25782                           postinc1	equ	0xFE6
 25783                           postdec1	equ	0xFE5
 25784                           fsr1h	equ	0xFE2
 25785                           fsr1l	equ	0xFE1
 25786                           indf2	equ	0xFDF
 25787                           postinc2	equ	0xFDE
 25788                           postdec2	equ	0xFDD
 25789                           plusw2	equ	0xFDB
 25790                           fsr2h	equ	0xFDA
 25791                           fsr2l	equ	0xFD9
 25792                           status	equ	0xFD8
 25793                           
 25794 ;; *************** function _Write_b_eep *****************
 25795 ;; Defined at:
 25796 ;;		line 31 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\write_B.c"
 25797 ;; Parameters:    Size  Location     Type
 25798 ;;  badd            2   29[COMRAM] unsigned int 
 25799 ;;  bdat            1   31[COMRAM] unsigned char 
 25800 ;; Auto vars:     Size  Location     Type
 25801 ;;  GIE_BIT_VAL     1   32[COMRAM] unsigned char 
 25802 ;; Return value:  Size  Location     Type
 25803 ;;		None               void
 25804 ;; Registers used:
 25805 ;;		wreg, status,2
 25806 ;; Tracked objects:
 25807 ;;		On entry : 0/1
 25808 ;;		On exit  : 0/0
 25809 ;;		Unchanged: 0/0
 25810 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25811 ;;      Params:         3       0       0       0       0       0       0
 25812 ;;      Locals:         1       0       0       0       0       0       0
 25813 ;;      Temps:          0       0       0       0       0       0       0
 25814 ;;      Totals:         4       0       0       0       0       0       0
 25815 ;;Total ram usage:        4 bytes
 25816 ;; Hardware stack levels used:    1
 25817 ;; Hardware stack levels required when called:    3
 25818 ;; This function calls:
 25819 ;;		Nothing
 25820 ;; This function is called by:
 25821 ;;		_init_app_eeprom
 25822 ;;		_doModeVerbose
 25823 ;;		_doModeSLCAN
 25824 ;; This function uses a non-reentrant model
 25825 ;;
 25826                           
 25827                           	psect	text77
 25828  005672                     __ptext77:
 25829                           	opt stack 0
 25830  005672                     _Write_b_eep:
 25831                           	opt stack 26
 25832                           
 25833                           ;incstack = 0
 25834                           ;incstack = 0
 25835  005672  C01E  FFA9         	movff	Write_b_eep@badd,4009	;volatile
 25836  005676  C020  FFA8         	movff	Write_b_eep@bdat,4008	;volatile
 25837  00567A  9EA6               	bcf	4006,7,c	;volatile
 25838  00567C  9CA6               	bcf	4006,6,c	;volatile
 25839  00567E  84A6               	bsf	4006,2,c	;volatile
 25840  005680  0E00               	movlw	0
 25841  005682  BEF2               	btfsc	intcon,7,c	;volatile
 25842  005684  0E01               	movlw	1
 25843  005686  6E21               	movwf	Write_b_eep@GIE_BIT_VAL,c
 25844  005688  9EF2               	bcf	intcon,7,c	;volatile
 25845  00568A  0E55               	movlw	85
 25846  00568C  6EA7               	movwf	4007,c	;volatile
 25847  00568E  0EAA               	movlw	170
 25848  005690  6EA7               	movwf	4007,c	;volatile
 25849  005692  82A6               	bsf	4006,1,c	;volatile
 25850  005694                     l1789:
 25851  005694  B2A6               	btfsc	4006,1,c	;volatile
 25852  005696  D7FE               	goto	l1789
 25853  005698  B021               	btfsc	Write_b_eep@GIE_BIT_VAL,0,c
 25854  00569A  D002               	bra	u14165
 25855  00569C  9EF2               	bcf	intcon,7,c	;volatile
 25856  00569E  D001               	bra	u14166
 25857  0056A0                     u14165:
 25858  0056A0  8EF2               	bsf	intcon,7,c	;volatile
 25859  0056A2                     u14166:
 25860  0056A2  94A6               	bcf	4006,2,c	;volatile
 25861  0056A4  0012               	return	
 25862  0056A6                     __end_of_Write_b_eep:
 25863                           	opt stack 0
 25864                           tblptru	equ	0xFF8
 25865                           tblptrh	equ	0xFF7
 25866                           tblptrl	equ	0xFF6
 25867                           tablat	equ	0xFF5
 25868                           prodh	equ	0xFF4
 25869                           prodl	equ	0xFF3
 25870                           intcon	equ	0xFF2
 25871                           indf0	equ	0xFEF
 25872                           postinc0	equ	0xFEE
 25873                           fsr0h	equ	0xFEA
 25874                           fsr0l	equ	0xFE9
 25875                           wreg	equ	0xFE8
 25876                           indf1	equ	0xFE7
 25877                           postinc1	equ	0xFE6
 25878                           postdec1	equ	0xFE5
 25879                           fsr1h	equ	0xFE2
 25880                           fsr1l	equ	0xFE1
 25881                           indf2	equ	0xFDF
 25882                           postinc2	equ	0xFDE
 25883                           postdec2	equ	0xFDD
 25884                           plusw2	equ	0xFDB
 25885                           fsr2h	equ	0xFDA
 25886                           fsr2l	equ	0xFD9
 25887                           status	equ	0xFD8
 25888                           
 25889 ;; *************** function _Busy_eep *****************
 25890 ;; Defined at:
 25891 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\busy_eep.c"
 25892 ;; Parameters:    Size  Location     Type
 25893 ;;		None
 25894 ;; Auto vars:     Size  Location     Type
 25895 ;;		None
 25896 ;; Return value:  Size  Location     Type
 25897 ;;		None               void
 25898 ;; Registers used:
 25899 ;;		None
 25900 ;; Tracked objects:
 25901 ;;		On entry : 0/1
 25902 ;;		On exit  : 0/0
 25903 ;;		Unchanged: 0/0
 25904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25905 ;;      Params:         0       0       0       0       0       0       0
 25906 ;;      Locals:         0       0       0       0       0       0       0
 25907 ;;      Temps:          0       0       0       0       0       0       0
 25908 ;;      Totals:         0       0       0       0       0       0       0
 25909 ;;Total ram usage:        0 bytes
 25910 ;; Hardware stack levels used:    1
 25911 ;; Hardware stack levels required when called:    3
 25912 ;; This function calls:
 25913 ;;		Nothing
 25914 ;; This function is called by:
 25915 ;;		_init_app_eeprom
 25916 ;;		_doModeVerbose
 25917 ;;		_doModeSLCAN
 25918 ;; This function uses a non-reentrant model
 25919 ;;
 25920                           
 25921                           	psect	text78
 25922  00583C                     __ptext78:
 25923                           	opt stack 0
 25924  00583C                     _Busy_eep:
 25925                           	opt stack 26
 25926  00583C                     l1764:
 25927  00583C  A2A6               	btfss	4006,1,c	;volatile
 25928  00583E  0012               	return	
 25929  005840  D7FD               	goto	l1764
 25930  005842                     __end_of_Busy_eep:
 25931                           	opt stack 0
 25932                           tblptru	equ	0xFF8
 25933                           tblptrh	equ	0xFF7
 25934                           tblptrl	equ	0xFF6
 25935                           tablat	equ	0xFF5
 25936                           prodh	equ	0xFF4
 25937                           prodl	equ	0xFF3
 25938                           intcon	equ	0xFF2
 25939                           indf0	equ	0xFEF
 25940                           postinc0	equ	0xFEE
 25941                           fsr0h	equ	0xFEA
 25942                           fsr0l	equ	0xFE9
 25943                           wreg	equ	0xFE8
 25944                           indf1	equ	0xFE7
 25945                           postinc1	equ	0xFE6
 25946                           postdec1	equ	0xFE5
 25947                           fsr1h	equ	0xFE2
 25948                           fsr1l	equ	0xFE1
 25949                           indf2	equ	0xFDF
 25950                           postinc2	equ	0xFDE
 25951                           postdec2	equ	0xFDD
 25952                           plusw2	equ	0xFDB
 25953                           fsr2h	equ	0xFDA
 25954                           fsr2l	equ	0xFD9
 25955                           status	equ	0xFD8
 25956                           
 25957 ;; *************** function _init_app_ram *****************
 25958 ;; Defined at:
 25959 ;;		line 470 in file "main.c"
 25960 ;; Parameters:    Size  Location     Type
 25961 ;;		None
 25962 ;; Auto vars:     Size  Location     Type
 25963 ;;		None
 25964 ;; Return value:  Size  Location     Type
 25965 ;;		None               void
 25966 ;; Registers used:
 25967 ;;		wreg, status,2, cstack
 25968 ;; Tracked objects:
 25969 ;;		On entry : 0/1
 25970 ;;		On exit  : F/0
 25971 ;;		Unchanged: 0/0
 25972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 25973 ;;      Params:         0       0       0       0       0       0       0
 25974 ;;      Locals:         0       0       0       0       0       0       0
 25975 ;;      Temps:          0       0       0       0       0       0       0
 25976 ;;      Totals:         0       0       0       0       0       0       0
 25977 ;;Total ram usage:        0 bytes
 25978 ;; Hardware stack levels used:    1
 25979 ;; Hardware stack levels required when called:    4
 25980 ;; This function calls:
 25981 ;;		_Read_b_eep
 25982 ;; This function is called by:
 25983 ;;		_init
 25984 ;;		_vscp_restoreDefaults
 25985 ;; This function uses a non-reentrant model
 25986 ;;
 25987                           
 25988                           	psect	text79
 25989  00529E                     __ptext79:
 25990                           	opt stack 0
 25991  00529E                     _init_app_ram:
 25992                           	opt stack 25
 25993                           
 25994                           ;main.c: 472: can_receiveOverruns = 0;
 25995                           
 25996                           ;incstack = 0
 25997                           ;incstack = 0
 25998  00529E  0101               	movlb	1	; () banked
 25999  0052A0  6B00               	clrf	_can_receiveOverruns& (0+255),b
 26000  0052A2  6B01               	clrf	(_can_receiveOverruns+1)& (0+255),b
 26001  0052A4  6B02               	clrf	(_can_receiveOverruns+2)& (0+255),b
 26002  0052A6  6B03               	clrf	(_can_receiveOverruns+3)& (0+255),b
 26003                           
 26004                           ;main.c: 473: can_transmitOverruns = 0;
 26005  0052A8  6B04               	clrf	_can_transmitOverruns& (0+255),b
 26006  0052AA  6B05               	clrf	(_can_transmitOverruns+1)& (0+255),b
 26007  0052AC  6B06               	clrf	(_can_transmitOverruns+2)& (0+255),b
 26008  0052AE  6B07               	clrf	(_can_transmitOverruns+3)& (0+255),b
 26009                           
 26010                           ;main.c: 474: uart_receiveOverruns = 0;
 26011  0052B0  6B1C               	clrf	_uart_receiveOverruns& (0+255),b
 26012  0052B2  6B1D               	clrf	(_uart_receiveOverruns+1)& (0+255),b
 26013  0052B4  6B1E               	clrf	(_uart_receiveOverruns+2)& (0+255),b
 26014  0052B6  6B1F               	clrf	(_uart_receiveOverruns+3)& (0+255),b
 26015                           
 26016                           ;main.c: 475: uart_transmitOverruns = 0;
 26017  0052B8  6B20               	clrf	_uart_transmitOverruns& (0+255),b
 26018  0052BA  6B21               	clrf	(_uart_transmitOverruns+1)& (0+255),b
 26019  0052BC  6B22               	clrf	(_uart_transmitOverruns+2)& (0+255),b
 26020  0052BE  6B23               	clrf	(_uart_transmitOverruns+3)& (0+255),b
 26021                           
 26022                           ; BSR set to: 1
 26023                           ;main.c: 477: bHex = Read_b_eep(0x06);
 26024  0052C0  6A1F               	clrf	?_Read_b_eep+1,c
 26025  0052C2  0E06               	movlw	6
 26026  0052C4  6E1E               	movwf	?_Read_b_eep,c
 26027  0052C6  EC08  F02C         	call	_Read_b_eep	;wreg free
 26028  0052CA  0100               	movlb	0	; () banked
 26029  0052CC  6FDC               	movwf	_bHex& (0+255),b
 26030                           
 26031                           ;main.c: 478: mode = Read_b_eep(0x03);
 26032  0052CE  6A1F               	clrf	?_Read_b_eep+1,c
 26033  0052D0  0E03               	movlw	3
 26034  0052D2  6E1E               	movwf	?_Read_b_eep,c
 26035  0052D4  EC08  F02C         	call	_Read_b_eep	;wreg free
 26036  0052D8  0100               	movlb	0	; () banked
 26037  0052DA  6FDF               	movwf	_mode& (0+255),b
 26038                           
 26039                           ;main.c: 480: rwtimeout = Read_b_eep(0x09);
 26040  0052DC  6A1F               	clrf	?_Read_b_eep+1,c
 26041  0052DE  0E09               	movlw	9
 26042  0052E0  6E1E               	movwf	?_Read_b_eep,c
 26043  0052E2  EC08  F02C         	call	_Read_b_eep	;wreg free
 26044  0052E6  0100               	movlb	0	; () banked
 26045  0052E8  6FE1               	movwf	_rwtimeout& (0+255),b
 26046                           
 26047                           ; BSR set to: 0
 26048  0052EA  0012               	return	
 26049  0052EC                     __end_of_init_app_ram:
 26050                           	opt stack 0
 26051                           tblptru	equ	0xFF8
 26052                           tblptrh	equ	0xFF7
 26053                           tblptrl	equ	0xFF6
 26054                           tablat	equ	0xFF5
 26055                           prodh	equ	0xFF4
 26056                           prodl	equ	0xFF3
 26057                           intcon	equ	0xFF2
 26058                           indf0	equ	0xFEF
 26059                           postinc0	equ	0xFEE
 26060                           fsr0h	equ	0xFEA
 26061                           fsr0l	equ	0xFE9
 26062                           wreg	equ	0xFE8
 26063                           indf1	equ	0xFE7
 26064                           postinc1	equ	0xFE6
 26065                           postdec1	equ	0xFE5
 26066                           fsr1h	equ	0xFE2
 26067                           fsr1l	equ	0xFE1
 26068                           indf2	equ	0xFDF
 26069                           postinc2	equ	0xFDE
 26070                           postdec2	equ	0xFDD
 26071                           plusw2	equ	0xFDB
 26072                           fsr2h	equ	0xFDA
 26073                           fsr2l	equ	0xFD9
 26074                           status	equ	0xFD8
 26075                           
 26076 ;; *************** function _Read_b_eep *****************
 26077 ;; Defined at:
 26078 ;;		line 24 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\EEP\read_B.c"
 26079 ;; Parameters:    Size  Location     Type
 26080 ;;  badd            2   29[COMRAM] unsigned int 
 26081 ;; Auto vars:     Size  Location     Type
 26082 ;;		None
 26083 ;; Return value:  Size  Location     Type
 26084 ;;                  1    wreg      unsigned char 
 26085 ;; Registers used:
 26086 ;;		wreg, status,2
 26087 ;; Tracked objects:
 26088 ;;		On entry : 0/1
 26089 ;;		On exit  : 0/0
 26090 ;;		Unchanged: 0/0
 26091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26092 ;;      Params:         2       0       0       0       0       0       0
 26093 ;;      Locals:         0       0       0       0       0       0       0
 26094 ;;      Temps:          0       0       0       0       0       0       0
 26095 ;;      Totals:         2       0       0       0       0       0       0
 26096 ;;Total ram usage:        2 bytes
 26097 ;; Hardware stack levels used:    1
 26098 ;; Hardware stack levels required when called:    3
 26099 ;; This function calls:
 26100 ;;		Nothing
 26101 ;; This function is called by:
 26102 ;;		_main
 26103 ;;		_init_app_ram
 26104 ;; This function uses a non-reentrant model
 26105 ;;
 26106                           
 26107                           	psect	text80
 26108  005810                     __ptext80:
 26109                           	opt stack 0
 26110  005810                     _Read_b_eep:
 26111                           	opt stack 25
 26112                           
 26113                           ; BSR set to: 0
 26114                           ;incstack = 0
 26115                           ;incstack = 0
 26116  005810  C01E  FFA9         	movff	Read_b_eep@badd,4009	;volatile
 26117  005814  9CA6               	bcf	4006,6,c	;volatile
 26118  005816  9EA6               	bcf	4006,7,c	;volatile
 26119  005818  80A6               	bsf	4006,0,c	;volatile
 26120  00581A  F000               	nop		;# 
 26121  00581C  F000               	nop		;# 
 26122  00581E  50A8               	movf	4008,w,c	;volatile
 26123  005820  0012               	return	
 26124  005822                     __end_of_Read_b_eep:
 26125                           	opt stack 0
 26126                           tblptru	equ	0xFF8
 26127                           tblptrh	equ	0xFF7
 26128                           tblptrl	equ	0xFF6
 26129                           tablat	equ	0xFF5
 26130                           prodh	equ	0xFF4
 26131                           prodl	equ	0xFF3
 26132                           intcon	equ	0xFF2
 26133                           indf0	equ	0xFEF
 26134                           postinc0	equ	0xFEE
 26135                           fsr0h	equ	0xFEA
 26136                           fsr0l	equ	0xFE9
 26137                           wreg	equ	0xFE8
 26138                           indf1	equ	0xFE7
 26139                           postinc1	equ	0xFE6
 26140                           postdec1	equ	0xFE5
 26141                           fsr1h	equ	0xFE2
 26142                           fsr1l	equ	0xFE1
 26143                           indf2	equ	0xFDF
 26144                           postinc2	equ	0xFDE
 26145                           postdec2	equ	0xFDD
 26146                           plusw2	equ	0xFDB
 26147                           fsr2h	equ	0xFDA
 26148                           fsr2l	equ	0xFD9
 26149                           status	equ	0xFD8
 26150                           
 26151 ;; *************** function _fifo_init *****************
 26152 ;; Defined at:
 26153 ;;		line 14 in file "fifo.c"
 26154 ;; Parameters:    Size  Location     Type
 26155 ;;  f               2   29[COMRAM] PTR struct .
 26156 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 26157 ;;  buf             2   31[COMRAM] PTR const void 
 26158 ;;		 -> can_inputBuffer(494), serial_inputBuffer(128), 
 26159 ;;  size            2   33[COMRAM] unsigned short 
 26160 ;; Auto vars:     Size  Location     Type
 26161 ;;		None
 26162 ;; Return value:  Size  Location     Type
 26163 ;;		None               void
 26164 ;; Registers used:
 26165 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 26166 ;; Tracked objects:
 26167 ;;		On entry : C/2
 26168 ;;		On exit  : C/0
 26169 ;;		Unchanged: C/0
 26170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26171 ;;      Params:         6       0       0       0       0       0       0
 26172 ;;      Locals:         0       0       0       0       0       0       0
 26173 ;;      Temps:          0       0       0       0       0       0       0
 26174 ;;      Totals:         6       0       0       0       0       0       0
 26175 ;;Total ram usage:        6 bytes
 26176 ;; Hardware stack levels used:    1
 26177 ;; Hardware stack levels required when called:    3
 26178 ;; This function calls:
 26179 ;;		Nothing
 26180 ;; This function is called by:
 26181 ;;		_main
 26182 ;; This function uses a non-reentrant model
 26183 ;;
 26184                           
 26185                           	psect	text81
 26186  005492                     __ptext81:
 26187                           	opt stack 0
 26188  005492                     _fifo_init:
 26189                           	opt stack 27
 26190                           
 26191                           ;fifo.c: 15: f->head = 0;
 26192                           
 26193                           ;incstack = 0
 26194                           ;incstack = 0
 26195  005492  EE20 F002          	lfsr	2,2
 26196  005496  D816               	call	PL92	;call to abstracted procedure
 26197                           
 26198                           ;fifo.c: 16: f->tail = 0;
 26199  005498  EE20 F004          	lfsr	2,4
 26200  00549C  D813               	call	PL92	;call to abstracted procedure
 26201                           
 26202                           ;fifo.c: 17: f->size = size;
 26203  00549E  EE20 F006          	lfsr	2,6
 26204  0054A2  501E               	movf	fifo_init@f,w,c
 26205  0054A4  26D9               	addwf	fsr2l,f,c
 26206  0054A6  501F               	movf	fifo_init@f+1,w,c
 26207  0054A8  22DA               	addwfc	fsr2h,f,c
 26208  0054AA  C022  FFDE         	movff	fifo_init@size,postinc2
 26209  0054AE  C023  FFDD         	movff	fifo_init@size+1,postdec2
 26210                           
 26211                           ;fifo.c: 18: f->buf = buf;
 26212  0054B2  C01E  FFD9         	movff	fifo_init@f,fsr2l
 26213  0054B6  C01F  FFDA         	movff	fifo_init@f+1,fsr2h
 26214  0054BA  C020  FFDE         	movff	fifo_init@buf,postinc2
 26215  0054BE  C021  FFDD         	movff	fifo_init@buf+1,postdec2
 26216  0054C2  0012               	return	
 26217  0054C4                     __end_of_fifo_init:
 26218                           	opt stack 0
 26219  0054C4                     PL92:
 26220                           	opt stack 27
 26221  0054C4  501E               	movf	fifo_init@f,w,c
 26222  0054C6  26D9               	addwf	fsr2l,f,c
 26223  0054C8  501F               	movf	fifo_init@f+1,w,c
 26224  0054CA  22DA               	addwfc	fsr2h,f,c
 26225  0054CC  6ADE               	clrf	postinc2,c
 26226  0054CE  6ADD               	clrf	postdec2,c
 26227  0054D0  0012               	return	
 26228  0054D2                     __end_ofPL92:
 26229                           	opt stack 0
 26230                           tblptru	equ	0xFF8
 26231                           tblptrh	equ	0xFF7
 26232                           tblptrl	equ	0xFF6
 26233                           tablat	equ	0xFF5
 26234                           prodh	equ	0xFF4
 26235                           prodl	equ	0xFF3
 26236                           intcon	equ	0xFF2
 26237                           indf0	equ	0xFEF
 26238                           postinc0	equ	0xFEE
 26239                           fsr0h	equ	0xFEA
 26240                           fsr0l	equ	0xFE9
 26241                           wreg	equ	0xFE8
 26242                           indf1	equ	0xFE7
 26243                           postinc1	equ	0xFE6
 26244                           postdec1	equ	0xFE5
 26245                           fsr1h	equ	0xFE2
 26246                           fsr1l	equ	0xFE1
 26247                           indf2	equ	0xFDF
 26248                           postinc2	equ	0xFDE
 26249                           postdec2	equ	0xFDD
 26250                           plusw2	equ	0xFDB
 26251                           fsr2h	equ	0xFDA
 26252                           fsr2l	equ	0xFD9
 26253                           status	equ	0xFD8
 26254                           
 26255 ;; *************** function _Interrupt *****************
 26256 ;; Defined at:
 26257 ;;		line 151 in file "main.c"
 26258 ;; Parameters:    Size  Location     Type
 26259 ;;		None
 26260 ;; Auto vars:     Size  Location     Type
 26261 ;;  fail            1   28[COMRAM] unsigned char 
 26262 ;; Return value:  Size  Location     Type
 26263 ;;		None               void
 26264 ;; Registers used:
 26265 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26266 ;; Tracked objects:
 26267 ;;		On entry : 0/0
 26268 ;;		On exit  : 0/0
 26269 ;;		Unchanged: 0/0
 26270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26271 ;;      Params:         0       0       0       0       0       0       0
 26272 ;;      Locals:         1       0       0       0       0       0       0
 26273 ;;      Temps:          9       0       0       0       0       0       0
 26274 ;;      Totals:        10       0       0       0       0       0       0
 26275 ;;Total ram usage:       10 bytes
 26276 ;; Hardware stack levels used:    1
 26277 ;; Hardware stack levels required when called:    2
 26278 ;; This function calls:
 26279 ;;		_ReadUSART
 26280 ;;		_fifo_write
 26281 ;;		_ECANReceiveMessage
 26282 ;;		_fifo_getFree
 26283 ;;		i1_WriteTimer0
 26284 ;; This function is called by:
 26285 ;;		Interrupt level 1
 26286 ;; This function uses a non-reentrant model
 26287 ;;
 26288                           
 26289                           	psect	intcodelo
 26290  000018                     __pintcodelo:
 26291                           	opt stack 0
 26292  000018                     _Interrupt:
 26293                           	opt stack 20
 26294                           
 26295                           ;incstack = 0
 26296  000018  CFD8 F016          	movff	status,??_Interrupt+2
 26297  00001C  CFE8 F017          	movff	wreg,??_Interrupt+3
 26298  000020  CFE0 F018          	movff	bsr,??_Interrupt+4
 26299  000024  CFE1 F019          	movff	fsr1l,??_Interrupt+5
 26300  000028  CFE2 F01A          	movff	fsr1h,??_Interrupt+6
 26301  00002C  CFD9 F01B          	movff	fsr2l,??_Interrupt+7
 26302  000030  CFDA F01C          	movff	fsr2h,??_Interrupt+8
 26303  000034                     
 26304                           ;main.c: 153: if ( 1 == PIR1bits.RCIF ) {
 26305  000034  AA9E               	btfss	3998,5,c	;volatile
 26306  000036  D001               	goto	i1u1191_21
 26307  000038  D001               	goto	i1u1191_20
 26308  00003A                     i1u1191_21:
 26309  00003A  D02B               	goto	i1l399
 26310  00003C                     i1u1191_20:
 26311  00003C                     
 26312                           ;main.c: 155: c = ReadUSART();
 26313  00003C  ECCF  F02B         	call	_ReadUSART	;wreg free
 26314  000040  6E40               	movwf	_c,c
 26315  000042                     
 26316                           ;main.c: 157: if ( 1 != fifo_write( &serialInputFifo, &c, 1 ) ) {
 26317  000042  0101               	movlb	1	; () banked
 26318  000044  0E01               	movlw	high _serialInputFifo
 26319  000046  6E02               	movwf	?_fifo_write+1,c
 26320  000048  0ED4               	movlw	low _serialInputFifo
 26321  00004A  6E01               	movwf	?_fifo_write,c
 26322  00004C  0E40               	movlw	low _c
 26323  00004E  6E03               	movwf	?_fifo_write+2,c
 26324  000050  0E00               	movlw	high _c
 26325  000052  6E04               	movwf	?_fifo_write+3,c
 26326  000054  0E0F               	movlw	15
 26327  000056  6E04               	movwf	?_fifo_write+3,c
 26328  000058  0E5F               	movlw	__accesstop+-1
 26329  00005A  6403               	cpfsgt	?_fifo_write+2,c
 26330  00005C  6A04               	clrf	?_fifo_write+3,c
 26331  00005E  0E01               	movlw	1
 26332  000060  6E05               	movwf	?_fifo_write+4,c
 26333  000062  0E00               	movlw	0
 26334  000064  6E06               	movwf	?_fifo_write+5,c
 26335  000066  0E00               	movlw	0
 26336  000068  6E07               	movwf	?_fifo_write+6,c
 26337  00006A  0E00               	movlw	0
 26338  00006C  6E08               	movwf	?_fifo_write+7,c
 26339  00006E  EC7B  F01B         	call	_fifo_write	;wreg free
 26340  000072  0401               	decf	?_fifo_write,w,c
 26341  000074  1002               	iorwf	?_fifo_write+1,w,c
 26342  000076  B4D8               	btfsc	status,2,c
 26343  000078  D001               	goto	i1u1192_21
 26344  00007A  D001               	goto	i1u1192_20
 26345  00007C                     i1u1192_21:
 26346  00007C  D008               	goto	i1l9877
 26347  00007E                     i1u1192_20:
 26348  00007E                     
 26349                           ; BSR set to: 1
 26350                           ;main.c: 159: uart_receiveOverruns++;
 26351  00007E  0E01               	movlw	1
 26352  000080  271C               	addwf	_uart_receiveOverruns& (0+255),f,b
 26353  000082  0E00               	movlw	0
 26354  000084  231D               	addwfc	(_uart_receiveOverruns+1)& (0+255),f,b
 26355  000086  0E00               	movlw	0
 26356  000088  231E               	addwfc	(_uart_receiveOverruns+2)& (0+255),f,b
 26357  00008A  0E00               	movlw	0
 26358  00008C  231F               	addwfc	(_uart_receiveOverruns+3)& (0+255),f,b
 26359  00008E                     i1l9877:
 26360                           
 26361                           ; BSR set to: 1
 26362                           ;main.c: 160: }
 26363                           ;main.c: 163: PIR1bits.RCIF = 0;
 26364  00008E  9A9E               	bcf	3998,5,c	;volatile
 26365                           
 26366                           ;main.c: 165: }
 26367  000090  D07D               	goto	i1l401
 26368  000092                     i1l399:
 26369                           
 26370                           ;main.c: 167: else if (1 == INTCONbits.TMR0IF) {
 26371  000092  A4F2               	btfss	intcon,2,c	;volatile
 26372  000094  D001               	goto	i1u1193_21
 26373  000096  D001               	goto	i1u1193_20
 26374  000098                     i1u1193_21:
 26375  000098  D079               	goto	i1l401
 26376  00009A                     i1u1193_20:
 26377  00009A                     
 26378                           ;main.c: 169: WriteTimer0(0xfb1d);
 26379  00009A  0EFB               	movlw	251
 26380  00009C  6E02               	movwf	?i1_WriteTimer0+1,c
 26381  00009E  0E1D               	movlw	29
 26382  0000A0  6E01               	movwf	?i1_WriteTimer0,c
 26383  0000A2  EC11  F02C         	call	i1_WriteTimer0	;wreg free
 26384  0000A6                     
 26385                           ;main.c: 171: timer++;
 26386  0000A6  0E01               	movlw	1
 26387  0000A8  0101               	movlb	1	; () banked
 26388  0000AA  2718               	addwf	_timer& (0+255),f,b	;volatile
 26389  0000AC  0E00               	movlw	0
 26390  0000AE  2319               	addwfc	(_timer+1)& (0+255),f,b	;volatile
 26391  0000B0  0E00               	movlw	0
 26392  0000B2  231A               	addwfc	(_timer+2)& (0+255),f,b	;volatile
 26393  0000B4  0E00               	movlw	0
 26394  0000B6  231B               	addwfc	(_timer+3)& (0+255),f,b	;volatile
 26395  0000B8                     
 26396                           ; BSR set to: 1
 26397                           ;main.c: 172: timekeeper++;
 26398  0000B8  0E01               	movlw	1
 26399  0000BA  2627               	addwf	_timekeeper,f,c	;volatile
 26400  0000BC  0E00               	movlw	0
 26401  0000BE  2228               	addwfc	_timekeeper+1,f,c	;volatile
 26402  0000C0  0E00               	movlw	0
 26403  0000C2  2229               	addwfc	_timekeeper+2,f,c	;volatile
 26404  0000C4  0E00               	movlw	0
 26405  0000C6  222A               	addwfc	_timekeeper+3,f,c	;volatile
 26406  0000C8                     
 26407                           ; BSR set to: 1
 26408                           ;main.c: 175: status_led_cnt++;
 26409  0000C8  4A2D               	infsnz	_status_led_cnt,f,c	;volatile
 26410  0000CA  2A2E               	incf	_status_led_cnt+1,f,c	;volatile
 26411  0000CC                     
 26412                           ; BSR set to: 1
 26413                           ;main.c: 176: if ((2 == ledFunctionality) &&
 26414                           ;main.c: 177: (status_led_cnt > 1000)) {
 26415  0000CC  5036               	movf	_ledFunctionality,w,c
 26416  0000CE  0A02               	xorlw	2
 26417  0000D0  A4D8               	btfss	status,2,c
 26418  0000D2  D001               	goto	i1u1194_21
 26419  0000D4  D001               	goto	i1u1194_20
 26420  0000D6                     i1u1194_21:
 26421  0000D6  D00C               	goto	i1l9893
 26422  0000D8                     i1u1194_20:
 26423  0000D8                     
 26424                           ; BSR set to: 1
 26425  0000D8  0EE9               	movlw	233
 26426  0000DA  5C2D               	subwf	_status_led_cnt,w,c	;volatile
 26427  0000DC  0E03               	movlw	3
 26428  0000DE  582E               	subwfb	_status_led_cnt+1,w,c	;volatile
 26429  0000E0  A0D8               	btfss	status,0,c
 26430  0000E2  D001               	goto	i1u1195_21
 26431  0000E4  D001               	goto	i1u1195_20
 26432  0000E6                     i1u1195_21:
 26433  0000E6  D004               	goto	i1l9893
 26434  0000E8                     i1u1195_20:
 26435  0000E8                     i1l9891:
 26436                           
 26437                           ; BSR set to: 1
 26438                           ;main.c: 178: LATC1 = ~LATC1;
 26439  0000E8  728B               	btg	3979,1,c	;volatile
 26440                           
 26441                           ;main.c: 179: status_led_cnt = 0;
 26442  0000EA  6A2D               	clrf	_status_led_cnt,c	;volatile
 26443  0000EC  6A2E               	clrf	_status_led_cnt+1,c	;volatile
 26444                           
 26445                           ;main.c: 180: }
 26446  0000EE  D04D               	goto	i1l404
 26447  0000F0                     i1l9893:
 26448                           
 26449                           ; BSR set to: 1
 26450                           ;main.c: 181: else if ((3 == ledFunctionality) &&
 26451                           ;main.c: 182: (status_led_cnt > 400)) {
 26452  0000F0  5036               	movf	_ledFunctionality,w,c
 26453  0000F2  0A03               	xorlw	3
 26454  0000F4  A4D8               	btfss	status,2,c
 26455  0000F6  D001               	goto	i1u1196_21
 26456  0000F8  D001               	goto	i1u1196_20
 26457  0000FA                     i1u1196_21:
 26458  0000FA  D009               	goto	i1l9899
 26459  0000FC                     i1u1196_20:
 26460  0000FC                     
 26461                           ; BSR set to: 1
 26462  0000FC  0E91               	movlw	145
 26463  0000FE  5C2D               	subwf	_status_led_cnt,w,c	;volatile
 26464  000100  0E01               	movlw	1
 26465  000102  582E               	subwfb	_status_led_cnt+1,w,c	;volatile
 26466  000104  A0D8               	btfss	status,0,c
 26467  000106  D001               	goto	i1u1197_21
 26468  000108  D001               	goto	i1u1197_20
 26469  00010A                     i1u1197_21:
 26470  00010A  D001               	goto	i1l9899
 26471  00010C                     i1u1197_20:
 26472  00010C  D7ED               	goto	i1l9891
 26473  00010E                     i1l9899:
 26474                           
 26475                           ; BSR set to: 1
 26476                           ;main.c: 186: else if ((4 == ledFunctionality) &&
 26477                           ;main.c: 187: (status_led_cnt > 100)) {
 26478  00010E  5036               	movf	_ledFunctionality,w,c
 26479  000110  0A04               	xorlw	4
 26480  000112  A4D8               	btfss	status,2,c
 26481  000114  D001               	goto	i1u1198_21
 26482  000116  D001               	goto	i1u1198_20
 26483  000118                     i1u1198_21:
 26484  000118  D009               	goto	i1l9905
 26485  00011A                     i1u1198_20:
 26486  00011A                     
 26487                           ; BSR set to: 1
 26488  00011A  0E65               	movlw	101
 26489  00011C  5C2D               	subwf	_status_led_cnt,w,c	;volatile
 26490  00011E  0E00               	movlw	0
 26491  000120  582E               	subwfb	_status_led_cnt+1,w,c	;volatile
 26492  000122  A0D8               	btfss	status,0,c
 26493  000124  D001               	goto	i1u1199_21
 26494  000126  D001               	goto	i1u1199_20
 26495  000128                     i1u1199_21:
 26496  000128  D001               	goto	i1l9905
 26497  00012A                     i1u1199_20:
 26498  00012A  D7DE               	goto	i1l9891
 26499  00012C                     i1l9905:
 26500                           
 26501                           ; BSR set to: 1
 26502                           ;main.c: 191: else if ((5 == ledFunctionality) &&
 26503                           ;main.c: 192: (status_led_cnt > 70)) {
 26504  00012C  5036               	movf	_ledFunctionality,w,c
 26505  00012E  0A05               	xorlw	5
 26506  000130  A4D8               	btfss	status,2,c
 26507  000132  D001               	goto	i1u1200_21
 26508  000134  D001               	goto	i1u1200_20
 26509  000136                     i1u1200_21:
 26510  000136  D009               	goto	i1l9911
 26511  000138                     i1u1200_20:
 26512  000138                     
 26513                           ; BSR set to: 1
 26514  000138  0E47               	movlw	71
 26515  00013A  5C2D               	subwf	_status_led_cnt,w,c	;volatile
 26516  00013C  0E00               	movlw	0
 26517  00013E  582E               	subwfb	_status_led_cnt+1,w,c	;volatile
 26518  000140  A0D8               	btfss	status,0,c
 26519  000142  D001               	goto	i1u1201_21
 26520  000144  D001               	goto	i1u1201_20
 26521  000146                     i1u1201_21:
 26522  000146  D001               	goto	i1l9911
 26523  000148                     i1u1201_20:
 26524  000148  D7CF               	goto	i1l9891
 26525  00014A                     i1l9911:
 26526                           
 26527                           ; BSR set to: 1
 26528                           ;main.c: 196: else if ((6 == ledFunctionality) &&
 26529                           ;main.c: 197: (status_led_cnt > 40)) {
 26530  00014A  5036               	movf	_ledFunctionality,w,c
 26531  00014C  0A06               	xorlw	6
 26532  00014E  A4D8               	btfss	status,2,c
 26533  000150  D001               	goto	i1u1202_21
 26534  000152  D001               	goto	i1u1202_20
 26535  000154                     i1u1202_21:
 26536  000154  D009               	goto	i1l9917
 26537  000156                     i1u1202_20:
 26538  000156                     
 26539                           ; BSR set to: 1
 26540  000156  0E29               	movlw	41
 26541  000158  5C2D               	subwf	_status_led_cnt,w,c	;volatile
 26542  00015A  0E00               	movlw	0
 26543  00015C  582E               	subwfb	_status_led_cnt+1,w,c	;volatile
 26544  00015E  A0D8               	btfss	status,0,c
 26545  000160  D001               	goto	i1u1203_21
 26546  000162  D001               	goto	i1u1203_20
 26547  000164                     i1u1203_21:
 26548  000164  D001               	goto	i1l9917
 26549  000166                     i1u1203_20:
 26550  000166  D7C0               	goto	i1l9891
 26551  000168                     i1l9917:
 26552                           
 26553                           ; BSR set to: 1
 26554                           ;main.c: 201: else if (1 == ledFunctionality) {
 26555  000168  0436               	decf	_ledFunctionality,w,c
 26556  00016A  A4D8               	btfss	status,2,c
 26557  00016C  D001               	goto	i1u1204_21
 26558  00016E  D001               	goto	i1u1204_20
 26559  000170                     i1u1204_21:
 26560  000170  D004               	goto	i1l413
 26561  000172                     i1u1204_20:
 26562  000172                     
 26563                           ; BSR set to: 1
 26564                           ;main.c: 202: LATC1 = 1;
 26565  000172  828B               	bsf	3979,1,c	;volatile
 26566                           
 26567                           ;main.c: 203: status_led_cnt = 0;
 26568  000174  6A2D               	clrf	_status_led_cnt,c	;volatile
 26569  000176  6A2E               	clrf	_status_led_cnt+1,c	;volatile
 26570                           
 26571                           ;main.c: 204: }
 26572  000178  D008               	goto	i1l404
 26573  00017A                     i1l413:
 26574                           
 26575                           ; BSR set to: 1
 26576                           ;main.c: 205: else if (0 == ledFunctionality) {
 26577  00017A  6636               	tstfsz	_ledFunctionality,c
 26578  00017C  D001               	goto	i1u1205_21
 26579  00017E  D001               	goto	i1u1205_20
 26580  000180                     i1u1205_21:
 26581  000180  D004               	goto	i1l410
 26582  000182                     i1u1205_20:
 26583  000182                     
 26584                           ; BSR set to: 1
 26585                           ;main.c: 206: LATC1 = 0;
 26586  000182  928B               	bcf	3979,1,c	;volatile
 26587                           
 26588                           ;main.c: 207: status_led_cnt = 0;
 26589  000184  6A2D               	clrf	_status_led_cnt,c	;volatile
 26590  000186  6A2E               	clrf	_status_led_cnt+1,c	;volatile
 26591  000188  D000               	goto	i1l404
 26592  00018A                     i1l410:
 26593  00018A                     i1l404:
 26594                           
 26595                           ; BSR set to: 1
 26596                           ;main.c: 208: }
 26597                           ;main.c: 210: INTCONbits.TMR0IF = 0;
 26598  00018A  94F2               	bcf	intcon,2,c	;volatile
 26599  00018C                     i1l401:
 26600                           
 26601                           ;main.c: 211: }
 26602                           ;main.c: 214: if ( 1 == IRXIF ) {
 26603  00018C  AEA4               	btfss	4004,7,c	;volatile
 26604  00018E  D001               	goto	i1u1206_21
 26605  000190  D001               	goto	i1u1206_20
 26606  000192                     i1u1206_21:
 26607  000192  D001               	goto	i1l416
 26608  000194                     i1u1206_20:
 26609  000194                     
 26610                           ;main.c: 216: IRXIF = 0;
 26611  000194  9EA4               	bcf	4004,7,c	;volatile
 26612  000196                     i1l416:
 26613                           
 26614                           ;main.c: 217: }
 26615                           ;main.c: 220: if ( RXBnIF ) {
 26616  000196  A2A4               	btfss	4004,1,c	;volatile
 26617  000198  D001               	goto	i1u1207_21
 26618  00019A  D001               	goto	i1u1207_20
 26619  00019C                     i1u1207_21:
 26620  00019C  D0A1               	goto	i1l429
 26621  00019E                     i1u1207_20:
 26622  00019E                     
 26623                           ;main.c: 222: if ( ECANReceiveMessage((unsigned long *)&id,
 26624                           ;main.c: 223: (BYTE*)&data,
 26625                           ;main.c: 224: (BYTE*)&dlc,
 26626                           ;main.c: 225: &flags) ) {
 26627  00019E  0101               	movlb	1	; () banked
 26628  0001A0  0E01               	movlw	high _data
 26629  0001A2  6E09               	movwf	?_ECANReceiveMessage+1,c
 26630  0001A4  0ECC               	movlw	low _data
 26631  0001A6  6E08               	movwf	?_ECANReceiveMessage,c
 26632  0001A8  0E41               	movlw	low _dlc
 26633  0001AA  6E0A               	movwf	?_ECANReceiveMessage+2,c
 26634  0001AC  0E42               	movlw	low _flags
 26635  0001AE  6E0B               	movwf	?_ECANReceiveMessage+3,c
 26636  0001B0  0E3A               	movlw	_id& (0+255)
 26637  0001B2  EC74  F013         	call	_ECANReceiveMessage
 26638  0001B6  0900               	iorlw	0
 26639  0001B8  B4D8               	btfsc	status,2,c
 26640  0001BA  D001               	goto	i1u1208_21
 26641  0001BC  D001               	goto	i1u1208_20
 26642  0001BE                     i1u1208_21:
 26643  0001BE  D08F               	goto	i1l9959
 26644  0001C0                     i1u1208_20:
 26645  0001C0                     
 26646                           ;main.c: 228: if ( flags & ECAN_RX_OVERFLOW ) {
 26647  0001C0  A642               	btfss	_flags,3,c
 26648  0001C2  D001               	goto	i1u1209_21
 26649  0001C4  D001               	goto	i1u1209_20
 26650  0001C6                     i1u1209_21:
 26651  0001C6  D00E               	goto	i1l419
 26652  0001C8                     i1u1209_20:
 26653  0001C8                     
 26654                           ;main.c: 229: if ( flags & ECAN_RX_XTD_FRAME ) can_receiveOverruns++;
 26655  0001C8  AA42               	btfss	_flags,5,c
 26656  0001CA  D001               	goto	i1u1210_21
 26657  0001CC  D001               	goto	i1u1210_20
 26658  0001CE                     i1u1210_21:
 26659  0001CE  D087               	goto	i1l9959
 26660  0001D0                     i1u1210_20:
 26661  0001D0                     i1l9931:
 26662  0001D0  0E01               	movlw	1
 26663  0001D2  0101               	movlb	1	; () banked
 26664  0001D4  2700               	addwf	_can_receiveOverruns& (0+255),f,b
 26665  0001D6  0E00               	movlw	0
 26666  0001D8  2301               	addwfc	(_can_receiveOverruns+1)& (0+255),f,b
 26667  0001DA  0E00               	movlw	0
 26668  0001DC  2302               	addwfc	(_can_receiveOverruns+2)& (0+255),f,b
 26669  0001DE  0E00               	movlw	0
 26670  0001E0  2303               	addwfc	(_can_receiveOverruns+3)& (0+255),f,b
 26671  0001E2  D07D               	goto	i1l9959
 26672  0001E4                     i1l419:
 26673                           
 26674                           ;main.c: 231: else if ( !( flags & ECAN_RX_RTR_FRAME ) &&
 26675                           ;main.c: 232: ( flags & ECAN_RX_XTD_FRAME ) ) {
 26676  0001E4  BC42               	btfsc	_flags,6,c
 26677  0001E6  D001               	goto	i1u1211_21
 26678  0001E8  D001               	goto	i1u1211_20
 26679  0001EA                     i1u1211_21:
 26680  0001EA  D079               	goto	i1l9959
 26681  0001EC                     i1u1211_20:
 26682  0001EC  AA42               	btfss	_flags,5,c
 26683  0001EE  D001               	goto	i1u1212_21
 26684  0001F0  D001               	goto	i1u1212_20
 26685  0001F2                     i1u1212_21:
 26686  0001F2  D075               	goto	i1l9959
 26687  0001F4                     i1u1212_20:
 26688  0001F4                     
 26689                           ;main.c: 234: if ( ( fifo_getFree( &canInputFifo ) >= (5+dlc) ) ) {
 26690  0001F4  5041               	movf	_dlc,w,c
 26691  0001F6  6E14               	movwf	??_Interrupt& (0+255),c
 26692  0001F8  6A15               	clrf	(??_Interrupt+1)& (0+255),c
 26693  0001FA  0E05               	movlw	5
 26694  0001FC  2614               	addwf	??_Interrupt,f,c
 26695  0001FE  0E00               	movlw	0
 26696  000200  2215               	addwfc	??_Interrupt+1,f,c
 26697  000202  0101               	movlb	1	; () banked
 26698  000204  0E01               	movlw	high _canInputFifo
 26699  000206  6E02               	movwf	?_fifo_getFree+1,c
 26700  000208  0EC4               	movlw	low _canInputFifo
 26701  00020A  6E01               	movwf	?_fifo_getFree,c
 26702  00020C  EC79  F023         	call	_fifo_getFree	;wreg free
 26703  000210  5014               	movf	??_Interrupt,w,c
 26704  000212  5C01               	subwf	?_fifo_getFree,w,c
 26705  000214  5015               	movf	??_Interrupt+1,w,c
 26706  000216  5802               	subwfb	?_fifo_getFree+1,w,c
 26707  000218  A0D8               	btfss	status,0,c
 26708  00021A  D001               	goto	i1u1213_21
 26709  00021C  D001               	goto	i1u1213_20
 26710  00021E                     i1u1213_21:
 26711  00021E  D7D8               	goto	i1l9931
 26712  000220                     i1u1213_20:
 26713  000220                     
 26714                           ; BSR set to: 1
 26715                           ;main.c: 235: uint8_t fail = 0;
 26716  000220  6A1D               	clrf	Interrupt@fail,c
 26717  000222                     
 26718                           ; BSR set to: 1
 26719                           ;main.c: 236: if ( 4 != fifo_write( &canInputFifo, (uint8_t *)&id, 4 ) ) {
 26720  000222  0E01               	movlw	high _canInputFifo
 26721  000224  6E02               	movwf	?_fifo_write+1,c
 26722  000226  0EC4               	movlw	low _canInputFifo
 26723  000228  6E01               	movwf	?_fifo_write,c
 26724  00022A  0E3A               	movlw	low _id
 26725  00022C  6E03               	movwf	?_fifo_write+2,c
 26726  00022E  0E00               	movlw	high _id
 26727  000230  6E04               	movwf	?_fifo_write+3,c
 26728  000232  0E0F               	movlw	15
 26729  000234  6E04               	movwf	?_fifo_write+3,c
 26730  000236  0E5F               	movlw	__accesstop+-1
 26731  000238  6403               	cpfsgt	?_fifo_write+2,c
 26732  00023A  6A04               	clrf	?_fifo_write+3,c
 26733  00023C  0E04               	movlw	4
 26734  00023E  6E05               	movwf	?_fifo_write+4,c
 26735  000240  0E00               	movlw	0
 26736  000242  6E06               	movwf	?_fifo_write+5,c
 26737  000244  0E00               	movlw	0
 26738  000246  6E07               	movwf	?_fifo_write+6,c
 26739  000248  0E00               	movlw	0
 26740  00024A  6E08               	movwf	?_fifo_write+7,c
 26741  00024C  EC7B  F01B         	call	_fifo_write	;wreg free
 26742  000250  5001               	movf	?_fifo_write,w,c
 26743  000252  0A04               	xorlw	4
 26744  000254  1002               	iorwf	?_fifo_write+1,w,c
 26745  000256  B4D8               	btfsc	status,2,c
 26746  000258  D001               	goto	i1u1214_21
 26747  00025A  D001               	goto	i1u1214_20
 26748  00025C                     i1u1214_21:
 26749  00025C  D002               	goto	i1l9943
 26750  00025E                     i1u1214_20:
 26751  00025E                     
 26752                           ; BSR set to: 1
 26753                           ;main.c: 237: fail = 1;
 26754  00025E  0E01               	movlw	1
 26755  000260  6E1D               	movwf	Interrupt@fail,c
 26756  000262                     i1l9943:
 26757                           
 26758                           ; BSR set to: 1
 26759                           ;main.c: 238: }
 26760                           ;main.c: 239: if ( 1 != fifo_write( &canInputFifo, &dlc, 1 ) ) {
 26761  000262  0E01               	movlw	high _canInputFifo
 26762  000264  6E02               	movwf	?_fifo_write+1,c
 26763  000266  0EC4               	movlw	low _canInputFifo
 26764  000268  6E01               	movwf	?_fifo_write,c
 26765  00026A  0E41               	movlw	low _dlc
 26766  00026C  6E03               	movwf	?_fifo_write+2,c
 26767  00026E  0E00               	movlw	high _dlc
 26768  000270  6E04               	movwf	?_fifo_write+3,c
 26769  000272  0E0F               	movlw	15
 26770  000274  6E04               	movwf	?_fifo_write+3,c
 26771  000276  0E5F               	movlw	__accesstop+-1
 26772  000278  6403               	cpfsgt	?_fifo_write+2,c
 26773  00027A  6A04               	clrf	?_fifo_write+3,c
 26774  00027C  0E01               	movlw	1
 26775  00027E  6E05               	movwf	?_fifo_write+4,c
 26776  000280  0E00               	movlw	0
 26777  000282  6E06               	movwf	?_fifo_write+5,c
 26778  000284  0E00               	movlw	0
 26779  000286  6E07               	movwf	?_fifo_write+6,c
 26780  000288  0E00               	movlw	0
 26781  00028A  6E08               	movwf	?_fifo_write+7,c
 26782  00028C  EC7B  F01B         	call	_fifo_write	;wreg free
 26783  000290  0401               	decf	?_fifo_write,w,c
 26784  000292  1002               	iorwf	?_fifo_write+1,w,c
 26785  000294  B4D8               	btfsc	status,2,c
 26786  000296  D001               	goto	i1u1215_21
 26787  000298  D001               	goto	i1u1215_20
 26788  00029A                     i1u1215_21:
 26789  00029A  D002               	goto	i1l9947
 26790  00029C                     i1u1215_20:
 26791  00029C                     
 26792                           ; BSR set to: 1
 26793                           ;main.c: 240: fail = 1;
 26794  00029C  0E01               	movlw	1
 26795  00029E  6E1D               	movwf	Interrupt@fail,c
 26796  0002A0                     i1l9947:
 26797                           
 26798                           ; BSR set to: 1
 26799                           ;main.c: 241: }
 26800                           ;main.c: 242: if ( dlc != fifo_write( &canInputFifo, (uint8_t *)&data, dlc ) ) {
 26801  0002A0  0E01               	movlw	high _canInputFifo
 26802  0002A2  6E02               	movwf	?_fifo_write+1,c
 26803  0002A4  0EC4               	movlw	low _canInputFifo
 26804  0002A6  6E01               	movwf	?_fifo_write,c
 26805  0002A8  0E01               	movlw	high _data
 26806  0002AA  6E04               	movwf	?_fifo_write+3,c
 26807  0002AC  0ECC               	movlw	low _data
 26808  0002AE  6E03               	movwf	?_fifo_write+2,c
 26809  0002B0  5041               	movf	_dlc,w,c
 26810  0002B2  6E05               	movwf	?_fifo_write+4,c
 26811  0002B4  6A06               	clrf	?_fifo_write+5,c
 26812  0002B6  6A07               	clrf	?_fifo_write+6,c
 26813  0002B8  6A08               	clrf	?_fifo_write+7,c
 26814  0002BA  EC7B  F01B         	call	_fifo_write	;wreg free
 26815  0002BE  5041               	movf	_dlc,w,c
 26816  0002C0  1801               	xorwf	?_fifo_write,w,c
 26817  0002C2  1002               	iorwf	?_fifo_write+1,w,c
 26818  0002C4  B4D8               	btfsc	status,2,c
 26819  0002C6  D001               	goto	i1u1216_21
 26820  0002C8  D001               	goto	i1u1216_20
 26821  0002CA                     i1u1216_21:
 26822  0002CA  D002               	goto	i1l9951
 26823  0002CC                     i1u1216_20:
 26824  0002CC                     
 26825                           ; BSR set to: 1
 26826                           ;main.c: 243: fail = 1;
 26827  0002CC  0E01               	movlw	1
 26828  0002CE  6E1D               	movwf	Interrupt@fail,c
 26829  0002D0                     i1l9951:
 26830                           
 26831                           ; BSR set to: 1
 26832                           ;main.c: 244: }
 26833                           ;main.c: 246: fifo_canrxcount++;
 26834  0002D0  2A35               	incf	_fifo_canrxcount,f,c	;volatile
 26835  0002D2                     
 26836                           ; BSR set to: 1
 26837                           ;main.c: 248: if ( fail ) {
 26838  0002D2  501D               	movf	Interrupt@fail,w,c
 26839  0002D4  B4D8               	btfsc	status,2,c
 26840  0002D6  D001               	goto	i1u1217_21
 26841  0002D8  D001               	goto	i1u1217_20
 26842  0002DA                     i1u1217_21:
 26843  0002DA  D001               	goto	i1l9959
 26844  0002DC                     i1u1217_20:
 26845  0002DC  D779               	goto	i1l9931
 26846  0002DE                     i1l9959:
 26847                           
 26848                           ;main.c: 255: }
 26849                           ;main.c: 257: }
 26850                           ;main.c: 259: }
 26851                           ;main.c: 262: RXBnIF = 0;
 26852  0002DE  92A4               	bcf	4004,1,c	;volatile
 26853  0002E0                     i1l429:
 26854  0002E0  C01C  FFDA         	movff	??_Interrupt+8,fsr2h
 26855  0002E4  C01B  FFD9         	movff	??_Interrupt+7,fsr2l
 26856  0002E8  C01A  FFE2         	movff	??_Interrupt+6,fsr1h
 26857  0002EC  C019  FFE1         	movff	??_Interrupt+5,fsr1l
 26858  0002F0  C018  FFE0         	movff	??_Interrupt+4,bsr
 26859  0002F4  C017  FFE8         	movff	??_Interrupt+3,wreg
 26860  0002F8  C016  FFD8         	movff	??_Interrupt+2,status
 26861  0002FC  0010               	retfie	
 26862  0002FE                     __end_of_Interrupt:
 26863                           	opt stack 0
 26864                           tblptru	equ	0xFF8
 26865                           tblptrh	equ	0xFF7
 26866                           tblptrl	equ	0xFF6
 26867                           tablat	equ	0xFF5
 26868                           prodh	equ	0xFF4
 26869                           prodl	equ	0xFF3
 26870                           intcon	equ	0xFF2
 26871                           indf0	equ	0xFEF
 26872                           postinc0	equ	0xFEE
 26873                           fsr0h	equ	0xFEA
 26874                           fsr0l	equ	0xFE9
 26875                           wreg	equ	0xFE8
 26876                           indf1	equ	0xFE7
 26877                           postinc1	equ	0xFE6
 26878                           postdec1	equ	0xFE5
 26879                           fsr1h	equ	0xFE2
 26880                           fsr1l	equ	0xFE1
 26881                           bsr	equ	0xFE0
 26882                           indf2	equ	0xFDF
 26883                           postinc2	equ	0xFDE
 26884                           postdec2	equ	0xFDD
 26885                           plusw2	equ	0xFDB
 26886                           fsr2h	equ	0xFDA
 26887                           fsr2l	equ	0xFD9
 26888                           status	equ	0xFD8
 26889                           
 26890 ;; *************** function i1_WriteTimer0 *****************
 26891 ;; Defined at:
 26892 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\Timers\t0write.c"
 26893 ;; Parameters:    Size  Location     Type
 26894 ;;  timer0          2    0[COMRAM] unsigned int 
 26895 ;; Auto vars:     Size  Location     Type
 26896 ;;  WriteTimer0     2    2[COMRAM] struct Timers
 26897 ;; Return value:  Size  Location     Type
 26898 ;;		None               void
 26899 ;; Registers used:
 26900 ;;		None
 26901 ;; Tracked objects:
 26902 ;;		On entry : 0/0
 26903 ;;		On exit  : 0/0
 26904 ;;		Unchanged: 0/0
 26905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26906 ;;      Params:         2       0       0       0       0       0       0
 26907 ;;      Locals:         2       0       0       0       0       0       0
 26908 ;;      Temps:          0       0       0       0       0       0       0
 26909 ;;      Totals:         4       0       0       0       0       0       0
 26910 ;;Total ram usage:        4 bytes
 26911 ;; Hardware stack levels used:    1
 26912 ;; This function calls:
 26913 ;;		Nothing
 26914 ;; This function is called by:
 26915 ;;		_Interrupt
 26916 ;; This function uses a non-reentrant model
 26917 ;;
 26918                           
 26919                           	psect	text83
 26920  005822                     __ptext83:
 26921                           	opt stack 0
 26922  005822                     i1_WriteTimer0:
 26923                           	opt stack 21
 26924                           
 26925                           ;incstack = 0
 26926                           ;incstack = 0
 26927  005822  C001  F003         	movff	i1WriteTimer0@timer0,i1WriteTimer0@timer
 26928  005826  C002  F004         	movff	i1WriteTimer0@timer0+1,i1WriteTimer0@timer+1
 26929  00582A  C004  FFD7         	movff	i1WriteTimer0@timer+1,4055	;volatile
 26930  00582E  C003  FFD6         	movff	i1WriteTimer0@timer,4054	;volatile
 26931  005832  0012               	return	
 26932  005834                     __end_ofi1_WriteTimer0:
 26933                           	opt stack 0
 26934                           tblptru	equ	0xFF8
 26935                           tblptrh	equ	0xFF7
 26936                           tblptrl	equ	0xFF6
 26937                           tablat	equ	0xFF5
 26938                           prodh	equ	0xFF4
 26939                           prodl	equ	0xFF3
 26940                           intcon	equ	0xFF2
 26941                           indf0	equ	0xFEF
 26942                           postinc0	equ	0xFEE
 26943                           fsr0h	equ	0xFEA
 26944                           fsr0l	equ	0xFE9
 26945                           wreg	equ	0xFE8
 26946                           indf1	equ	0xFE7
 26947                           postinc1	equ	0xFE6
 26948                           postdec1	equ	0xFE5
 26949                           fsr1h	equ	0xFE2
 26950                           fsr1l	equ	0xFE1
 26951                           bsr	equ	0xFE0
 26952                           indf2	equ	0xFDF
 26953                           postinc2	equ	0xFDE
 26954                           postdec2	equ	0xFDD
 26955                           plusw2	equ	0xFDB
 26956                           fsr2h	equ	0xFDA
 26957                           fsr2l	equ	0xFD9
 26958                           status	equ	0xFD8
 26959                           
 26960 ;; *************** function _fifo_getFree *****************
 26961 ;; Defined at:
 26962 ;;		line 97 in file "fifo.c"
 26963 ;; Parameters:    Size  Location     Type
 26964 ;;  f               2    0[COMRAM] PTR struct .
 26965 ;;		 -> canInputFifo(8), 
 26966 ;; Auto vars:     Size  Location     Type
 26967 ;;		None
 26968 ;; Return value:  Size  Location     Type
 26969 ;;                  2    0[COMRAM] unsigned short 
 26970 ;; Registers used:
 26971 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26972 ;; Tracked objects:
 26973 ;;		On entry : F/1
 26974 ;;		On exit  : F/1
 26975 ;;		Unchanged: F/0
 26976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 26977 ;;      Params:         2       0       0       0       0       0       0
 26978 ;;      Locals:         0       0       0       0       0       0       0
 26979 ;;      Temps:          8       0       0       0       0       0       0
 26980 ;;      Totals:        10       0       0       0       0       0       0
 26981 ;;Total ram usage:       10 bytes
 26982 ;; Hardware stack levels used:    1
 26983 ;; This function calls:
 26984 ;;		Nothing
 26985 ;; This function is called by:
 26986 ;;		_Interrupt
 26987 ;; This function uses a non-reentrant model
 26988 ;;
 26989                           
 26990                           	psect	text84
 26991  0046F2                     __ptext84:
 26992                           	opt stack 0
 26993  0046F2                     _fifo_getFree:
 26994                           	opt stack 21
 26995                           
 26996                           ; BSR set to: 1
 26997                           ;fifo.c: 98: if (f->head < f->tail) {
 26998                           
 26999                           ;incstack = 0
 27000                           ;incstack = 0
 27001  0046F2  EE20 F004          	lfsr	2,4
 27002  0046F6  5001               	movf	fifo_getFree@f,w,c
 27003  0046F8  26D9               	addwf	fsr2l,f,c
 27004  0046FA  5002               	movf	fifo_getFree@f+1,w,c
 27005  0046FC  22DA               	addwfc	fsr2h,f,c
 27006  0046FE  EE10 F002          	lfsr	1,2
 27007  004702  5001               	movf	fifo_getFree@f,w,c
 27008  004704  26E1               	addwf	fsr1l,f,c
 27009  004706  5002               	movf	fifo_getFree@f+1,w,c
 27010  004708  22E2               	addwfc	fsr1h,f,c
 27011  00470A  52E6               	movf	postinc1,f,c
 27012  00470C  52DE               	movf	postinc2,f,c
 27013  00470E  50DD               	movf	postdec2,w,c
 27014  004710  5CE5               	subwf	postdec1,w,c
 27015  004712  E102               	bnz	i1u634_25
 27016  004714  50DF               	movf	indf2,w,c
 27017  004716  5CE7               	subwf	indf1,w,c
 27018  004718                     i1u634_25:
 27019  004718  E213               	bc	i1l6433
 27020                           
 27021                           ; BSR set to: 1
 27022                           ;fifo.c: 99: return (f->tail - f->head);
 27023  00471A  EE20 F002          	lfsr	2,2
 27024  00471E  D834               	call	PL72	;call to abstracted procedure
 27025  004720  EE20 F004          	lfsr	2,4
 27026  004724  5001               	movf	fifo_getFree@f,w,c
 27027  004726  26D9               	addwf	fsr2l,f,c
 27028  004728  5002               	movf	fifo_getFree@f+1,w,c
 27029  00472A  22DA               	addwfc	fsr2h,f,c
 27030  00472C  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27031  004730  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27032  004734  5003               	movf	??_fifo_getFree,w,c
 27033  004736  5C05               	subwf	??_fifo_getFree+2,w,c
 27034  004738  6E01               	movwf	?_fifo_getFree,c
 27035  00473A  5004               	movf	??_fifo_getFree+1,w,c
 27036  00473C  5806               	subwfb	??_fifo_getFree+3,w,c
 27037  00473E  D022               	goto	L42
 27038  004740                     i1l6433:
 27039                           
 27040                           ; BSR set to: 1
 27041                           ;fifo.c: 101: else {
 27042                           ;fifo.c: 102: return (f->size + (f->tail - f->head));
 27043  004740  EE20 F004          	lfsr	2,4
 27044  004744  D821               	call	PL72	;call to abstracted procedure
 27045  004746  EE20 F002          	lfsr	2,2
 27046  00474A  5001               	movf	fifo_getFree@f,w,c
 27047  00474C  26D9               	addwf	fsr2l,f,c
 27048  00474E  5002               	movf	fifo_getFree@f+1,w,c
 27049  004750  22DA               	addwfc	fsr2h,f,c
 27050  004752  CFDE F005          	movff	postinc2,??_fifo_getFree+2
 27051  004756  CFDD F006          	movff	postdec2,??_fifo_getFree+3
 27052  00475A  EE20 F006          	lfsr	2,6
 27053  00475E  5001               	movf	fifo_getFree@f,w,c
 27054  004760  26D9               	addwf	fsr2l,f,c
 27055  004762  5002               	movf	fifo_getFree@f+1,w,c
 27056  004764  22DA               	addwfc	fsr2h,f,c
 27057  004766  CFDE F007          	movff	postinc2,??_fifo_getFree+4
 27058  00476A  CFDD F008          	movff	postdec2,??_fifo_getFree+5
 27059  00476E  5005               	movf	??_fifo_getFree+2,w,c
 27060  004770  5C07               	subwf	??_fifo_getFree+4,w,c
 27061  004772  6E09               	movwf	(??_fifo_getFree+6)& (0+255),c
 27062  004774  5006               	movf	??_fifo_getFree+3,w,c
 27063  004776  5808               	subwfb	??_fifo_getFree+5,w,c
 27064  004778  6E0A               	movwf	(??_fifo_getFree+7)& (0+255),c
 27065  00477A  5003               	movf	??_fifo_getFree,w,c
 27066  00477C  2409               	addwf	??_fifo_getFree+6,w,c
 27067  00477E  6E01               	movwf	?_fifo_getFree,c
 27068  004780  5004               	movf	??_fifo_getFree+1,w,c
 27069  004782  200A               	addwfc	??_fifo_getFree+7,w,c
 27070  004784                     L42:
 27071  004784  6E02               	movwf	?_fifo_getFree+1,c
 27072                           
 27073                           ; BSR set to: 1
 27074  004786  0012               	return	
 27075  004788                     __end_of_fifo_getFree:
 27076                           	opt stack 0
 27077  004788                     PL72:
 27078                           	opt stack 21
 27079  004788  5001               	movf	fifo_getFree@f,w,c
 27080  00478A  26D9               	addwf	fsr2l,f,c
 27081  00478C  5002               	movf	fifo_getFree@f+1,w,c
 27082  00478E  22DA               	addwfc	fsr2h,f,c
 27083  004790  CFDE F003          	movff	postinc2,??_fifo_getFree
 27084  004794  CFDD F004          	movff	postdec2,??_fifo_getFree+1
 27085  004798  0012               	return	
 27086  00479A                     __end_ofPL72:
 27087                           	opt stack 0
 27088                           tblptru	equ	0xFF8
 27089                           tblptrh	equ	0xFF7
 27090                           tblptrl	equ	0xFF6
 27091                           tablat	equ	0xFF5
 27092                           prodh	equ	0xFF4
 27093                           prodl	equ	0xFF3
 27094                           intcon	equ	0xFF2
 27095                           indf0	equ	0xFEF
 27096                           postinc0	equ	0xFEE
 27097                           fsr0h	equ	0xFEA
 27098                           fsr0l	equ	0xFE9
 27099                           wreg	equ	0xFE8
 27100                           indf1	equ	0xFE7
 27101                           postinc1	equ	0xFE6
 27102                           postdec1	equ	0xFE5
 27103                           fsr1h	equ	0xFE2
 27104                           fsr1l	equ	0xFE1
 27105                           bsr	equ	0xFE0
 27106                           indf2	equ	0xFDF
 27107                           postinc2	equ	0xFDE
 27108                           postdec2	equ	0xFDD
 27109                           plusw2	equ	0xFDB
 27110                           fsr2h	equ	0xFDA
 27111                           fsr2l	equ	0xFD9
 27112                           status	equ	0xFD8
 27113                           
 27114 ;; *************** function _ECANReceiveMessage *****************
 27115 ;; Defined at:
 27116 ;;		line 803 in file "ECAN.c"
 27117 ;; Parameters:    Size  Location     Type
 27118 ;;  id              1    wreg     PTR unsigned long 
 27119 ;;		 -> id(4), 
 27120 ;;  data            2    7[COMRAM] PTR unsigned char 
 27121 ;;		 -> data(8), 
 27122 ;;  dataLen         1    9[COMRAM] PTR unsigned char 
 27123 ;;		 -> dlc(1), 
 27124 ;;  msgFlags        1   10[COMRAM] PTR enum E16324
 27125 ;;		 -> flags(1), 
 27126 ;; Auto vars:     Size  Location     Type
 27127 ;;  id              1   13[COMRAM] PTR unsigned long 
 27128 ;;		 -> id(4), 
 27129 ;;  ptr             2   17[COMRAM] PTR unsigned char 
 27130 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27131 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27132 ;;  savedPtr        2   11[COMRAM] PTR unsigned char 
 27133 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27134 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27135 ;;  temp            1   16[COMRAM] struct .
 27136 ;;  mode            1   15[COMRAM] unsigned char 
 27137 ;;  i               1   14[COMRAM] unsigned char 
 27138 ;; Return value:  Size  Location     Type
 27139 ;;                  1    wreg      enum E15660
 27140 ;; Registers used:
 27141 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27142 ;; Tracked objects:
 27143 ;;		On entry : F/1
 27144 ;;		On exit  : 0/0
 27145 ;;		Unchanged: 0/0
 27146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27147 ;;      Params:         4       0       0       0       0       0       0
 27148 ;;      Locals:         8       0       0       0       0       0       0
 27149 ;;      Temps:          0       0       0       0       0       0       0
 27150 ;;      Totals:        12       0       0       0       0       0       0
 27151 ;;Total ram usage:       12 bytes
 27152 ;; Hardware stack levels used:    1
 27153 ;; Hardware stack levels required when called:    1
 27154 ;; This function calls:
 27155 ;;		__ECANPointBuffer
 27156 ;;		__RegsToCANID
 27157 ;; This function is called by:
 27158 ;;		_Interrupt
 27159 ;; This function uses a non-reentrant model
 27160 ;;
 27161                           
 27162                           	psect	text85
 27163  0026E8                     __ptext85:
 27164                           	opt stack 0
 27165  0026E8                     _ECANReceiveMessage:
 27166                           	opt stack 20
 27167                           
 27168                           ; BSR set to: 1
 27169                           ;incstack = 0
 27170                           ;incstack = 0
 27171                           ;ECANReceiveMessage@id stored from wreg
 27172  0026E8  CFE8 F00E          	movff	wreg,ECANReceiveMessage@id
 27173                           
 27174                           ; BSR set to: 1
 27175                           ;ECAN.c: 805: BYTE mode;
 27176                           ;ECAN.c: 808: BYTE *ptr, *savedPtr;
 27177                           ;ECAN.c: 809: char i;
 27178                           ;ECAN.c: 810: BYTE_VAL temp;
 27179                           ;ECAN.c: 812: _ECANRxFilterHitInfo.Val = 0;
 27180  0026EC  6A32               	clrf	__ECANRxFilterHitInfo,c
 27181                           
 27182                           ; BSR set to: 1
 27183                           ;ECAN.c: 815: mode = ECANCON&0xC0;
 27184  0026EE  5077               	movf	3959,w,c	;volatile
 27185  0026F0  0BC0               	andlw	192
 27186  0026F2  6E10               	movwf	ECANReceiveMessage@mode,c
 27187                           
 27188                           ; BSR set to: 1
 27189                           ;ECAN.c: 816: if ( mode == 0x00 )
 27190  0026F4  6610               	tstfsz	ECANReceiveMessage@mode,c
 27191  0026F6  D032               	goto	i1l9765
 27192                           
 27193                           ; BSR set to: 1
 27194                           ;ECAN.c: 822: {
 27195                           ;ECAN.c: 824: if ( RXB0FUL )
 27196  0026F8  AE60               	btfss	3936,7,c	;volatile
 27197  0026FA  D012               	goto	i1l1463
 27198                           
 27199                           ; BSR set to: 1
 27200                           ;ECAN.c: 825: {
 27201                           ;ECAN.c: 827: RXB0IF = 0;
 27202  0026FC  90A4               	bcf	4004,0,c	;volatile
 27203                           
 27204                           ;ECAN.c: 830: if ( RXB0OVFL )
 27205  0026FE  AE74               	btfss	3956,7,c	;volatile
 27206  002700  D006               	goto	i1l9741
 27207                           
 27208                           ; BSR set to: 1
 27209                           ;ECAN.c: 831: {
 27210                           ;ECAN.c: 832: *msgFlags |= ECAN_RX_OVERFLOW;
 27211  002702  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 27212  002704  6ED9               	movwf	fsr2l,c
 27213  002706  6ADA               	clrf	fsr2h,c
 27214  002708  0E00               	movlw	0
 27215  00270A  86DB               	bsf	plusw2,3,c
 27216                           
 27217                           ; BSR set to: 1
 27218                           ;ECAN.c: 833: RXB0OVFL = 0;
 27219  00270C  9E74               	bcf	3956,7,c	;volatile
 27220  00270E                     i1l9741:
 27221                           
 27222                           ; BSR set to: 1
 27223                           ;ECAN.c: 834: }
 27224                           ;ECAN.c: 836: _ECANRxFilterHitInfo.bits.b0 = RXB0FILHIT0;
 27225  00270E  A060               	btfss	3936,0,c	;volatile
 27226  002710  D002               	bra	i1u1165_25
 27227  002712  8032               	bsf	__ECANRxFilterHitInfo,0,c
 27228  002714  D001               	bra	i1u1165_27
 27229  002716                     i1u1165_25:
 27230  002716  9032               	bcf	__ECANRxFilterHitInfo,0,c
 27231  002718                     i1u1165_27:
 27232                           
 27233                           ;ECAN.c: 838: ptr = (BYTE*)&RXB0CON;
 27234  002718  0E0F               	movlw	15	;volatile
 27235  00271A  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 27236  00271C  0E60               	movlw	96	;volatile
 27237  00271E  D01A               	goto	L43
 27238  002720                     i1l1463:
 27239                           
 27240                           ; BSR set to: 1
 27241                           ;ECAN.c: 841: else if ( RXB1CONbits.RXFUL )
 27242  002720  010F               	movlb	15	; () banked
 27243  002722  AF50               	btfss	80,7,b	;volatile
 27244  002724  D019               	goto	i1l9759
 27245                           
 27246                           ; BSR set to: 15
 27247                           ;ECAN.c: 842: {
 27248                           ;ECAN.c: 844: RXB1IF = 0;
 27249  002726  92A4               	bcf	4004,1,c	;volatile
 27250                           
 27251                           ;ECAN.c: 847: if ( RXB1OVFL )
 27252  002728  AC74               	btfss	3956,6,c	;volatile
 27253  00272A  D006               	goto	i1l9751
 27254                           
 27255                           ; BSR set to: 15
 27256                           ;ECAN.c: 848: {
 27257                           ;ECAN.c: 849: *msgFlags |= ECAN_RX_OVERFLOW;
 27258  00272C  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 27259  00272E  6ED9               	movwf	fsr2l,c
 27260  002730  6ADA               	clrf	fsr2h,c
 27261  002732  0E00               	movlw	0
 27262  002734  86DB               	bsf	plusw2,3,c
 27263                           
 27264                           ; BSR set to: 15
 27265                           ;ECAN.c: 850: RXB1OVFL = 0;
 27266  002736  9C74               	bcf	3956,6,c	;volatile
 27267  002738                     i1l9751:
 27268                           
 27269                           ; BSR set to: 15
 27270                           ;ECAN.c: 851: }
 27271                           ;ECAN.c: 853: _ECANRxFilterHitInfo.Val = RXB1CON & 0x07;
 27272  002738  5150               	movf	80,w,b	;volatile
 27273  00273A  0B07               	andlw	7
 27274  00273C  6E32               	movwf	__ECANRxFilterHitInfo,c
 27275                           
 27276                           ; BSR set to: 15
 27277                           ;ECAN.c: 855: if ( _ECANRxFilterHitInfo.Val < 0x02 )
 27278  00273E  0E02               	movlw	2
 27279  002740  6032               	cpfslt	__ECANRxFilterHitInfo,c
 27280  002742  D005               	goto	i1l9757
 27281                           
 27282                           ; BSR set to: 15
 27283                           ;ECAN.c: 856: *msgFlags |= ECAN_RX_DBL_BUFFERED;
 27284  002744  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 27285  002746  6ED9               	movwf	fsr2l,c
 27286  002748  6ADA               	clrf	fsr2h,c
 27287  00274A  0E00               	movlw	0
 27288  00274C  8EDB               	bsf	plusw2,7,c
 27289  00274E                     i1l9757:
 27290                           
 27291                           ; BSR set to: 15
 27292                           ;ECAN.c: 859: ptr = (BYTE*)&RXB1CON;
 27293  00274E  0E0F               	movlw	15	;volatile
 27294  002750  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 27295  002752  0E50               	movlw	80	;volatile
 27296  002754                     L43:
 27297  002754  6E12               	movwf	ECANReceiveMessage@ptr,c
 27298                           
 27299                           ;ECAN.c: 860: }
 27300  002756  D065               	goto	i1l9819
 27301  002758                     i1l9759:
 27302                           
 27303                           ;ECAN.c: 861: else
 27304                           ;ECAN.c: 862: return FALSE;
 27305  002758  0E00               	movlw	0
 27306  00275A  D0C4               	goto	i1l1470
 27307  00275C                     i1l9765:
 27308                           
 27309                           ; BSR set to: 1
 27310                           ;ECAN.c: 869: else if ( mode == 0x40 )
 27311  00275C  5010               	movf	ECANReceiveMessage@mode,w,c
 27312  00275E  0A40               	xorlw	64
 27313  002760  E146               	bnz	i1l1473
 27314                           
 27315                           ; BSR set to: 1
 27316                           ;ECAN.c: 875: {
 27317                           ;ECAN.c: 876: if ( RXB0FUL )
 27318  002762  AE60               	btfss	3936,7,c	;volatile
 27319  002764  D004               	goto	i1l1474
 27320                           
 27321                           ; BSR set to: 1
 27322                           ;ECAN.c: 877: ptr = (BYTE*)&RXB0CON;
 27323  002766  0E0F               	movlw	15	;volatile
 27324  002768  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 27325  00276A  0E60               	movlw	96	;volatile
 27326  00276C  D03E               	goto	L50
 27327  00276E                     i1l1474:
 27328                           
 27329                           ; BSR set to: 1
 27330                           ;ECAN.c: 879: else if (RXB1CONbits.RXFUL)
 27331  00276E  010F               	movlb	15	; () banked
 27332  002770  AF50               	btfss	80,7,b	;volatile
 27333  002772  D004               	goto	i1l1476
 27334                           
 27335                           ; BSR set to: 15
 27336                           ;ECAN.c: 880: ptr = (BYTE*)&RXB1CON;
 27337  002774  0E0F               	movlw	15	;volatile
 27338  002776  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 27339  002778  0E50               	movlw	80	;volatile
 27340  00277A  D037               	goto	L50
 27341  00277C                     i1l1476:
 27342                           
 27343                           ; BSR set to: 15
 27344                           ;ECAN.c: 882: else if ( (B0TXEN==0) && B0RXFUL )
 27345  00277C  010D               	movlb	13
 27346  00277E  B5F8               	btfsc	248,2,b	;volatile
 27347  002780  D007               	goto	i1l1478
 27348  002782  010E               	movlb	14
 27349  002784  AF20               	btfss	32,7,b	;volatile
 27350  002786  D004               	goto	i1l1478
 27351                           
 27352                           ;ECAN.c: 883: ptr = (BYTE*)&B0CON;
 27353  002788  0E0E               	movlw	14	;volatile
 27354  00278A  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 27355  00278C  0E20               	movlw	32	;volatile
 27356  00278E  D02D               	goto	L50
 27357  002790                     i1l1478:
 27358                           
 27359                           ;ECAN.c: 885: else if ( (B1TXEN==0) && B1RXFUL )
 27360  002790  010D               	movlb	13
 27361  002792  B7F8               	btfsc	248,3,b	;volatile
 27362  002794  D007               	goto	i1l1480
 27363  002796  010E               	movlb	14
 27364  002798  AF30               	btfss	48,7,b	;volatile
 27365  00279A  D004               	goto	i1l1480
 27366                           
 27367                           ;ECAN.c: 886: ptr = (BYTE*)&B1CON;
 27368  00279C  0E0E               	movlw	14	;volatile
 27369  00279E  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 27370  0027A0  0E30               	movlw	48	;volatile
 27371  0027A2  D023               	goto	L50
 27372  0027A4                     i1l1480:
 27373                           
 27374                           ;ECAN.c: 888: else if ( (B2TXEN==0) && B2RXFUL )
 27375  0027A4  010D               	movlb	13
 27376  0027A6  B9F8               	btfsc	248,4,b	;volatile
 27377  0027A8  D007               	goto	i1l1482
 27378  0027AA  010E               	movlb	14
 27379  0027AC  AF40               	btfss	64,7,b	;volatile
 27380  0027AE  D004               	goto	i1l1482
 27381                           
 27382                           ;ECAN.c: 889: ptr = (BYTE*)&B2CON;
 27383  0027B0  0E0E               	movlw	14	;volatile
 27384  0027B2  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 27385  0027B4  0E40               	movlw	64	;volatile
 27386  0027B6  D019               	goto	L50
 27387  0027B8                     i1l1482:
 27388                           
 27389                           ;ECAN.c: 891: else if ( (B3TXEN==0) && B3RXFUL )
 27390  0027B8  010D               	movlb	13
 27391  0027BA  BBF8               	btfsc	248,5,b	;volatile
 27392  0027BC  D005               	goto	i1l1484
 27393  0027BE  010E               	movlb	14
 27394  0027C0  AF50               	btfss	80,7,b	;volatile
 27395  0027C2  D002               	goto	i1l1484
 27396                           
 27397                           ;ECAN.c: 892: ptr = (BYTE*)&B3CON;
 27398  0027C4  0E0E               	movlw	14	;volatile
 27399  0027C6  D7D7               	goto	L51
 27400  0027C8                     i1l1484:
 27401                           
 27402                           ;ECAN.c: 894: else if ( (B4TXEN==0) && B4RXFUL )
 27403  0027C8  010D               	movlb	13
 27404  0027CA  BDF8               	btfsc	248,6,b	;volatile
 27405  0027CC  D005               	goto	i1l1486
 27406  0027CE  010E               	movlb	14
 27407  0027D0  AF60               	btfss	96,7,b	;volatile
 27408  0027D2  D002               	goto	i1l1486
 27409                           
 27410                           ;ECAN.c: 895: ptr = (BYTE*)&B4CON;
 27411  0027D4  0E0E               	movlw	14	;volatile
 27412  0027D6  D7C8               	goto	L52
 27413  0027D8                     i1l1486:
 27414                           
 27415                           ;ECAN.c: 897: else if ( (B5TXEN==0) && B5RXFUL )
 27416  0027D8  010D               	movlb	13
 27417  0027DA  BFF8               	btfsc	248,7,b	;volatile
 27418  0027DC  D7BD               	goto	i1l9759
 27419  0027DE  010E               	movlb	14
 27420  0027E0  AF70               	btfss	112,7,b	;volatile
 27421  0027E2  D7BA               	goto	i1l9759
 27422                           
 27423                           ;ECAN.c: 898: ptr = (BYTE*)&B5CON;
 27424  0027E4  0E0E               	movlw	14	;volatile
 27425  0027E6  6E13               	movwf	ECANReceiveMessage@ptr+1,c
 27426  0027E8  0E70               	movlw	112	;volatile
 27427  0027EA                     L50:
 27428  0027EA  6E12               	movwf	ECANReceiveMessage@ptr,c
 27429  0027EC  D00A               	goto	i1l9809
 27430  0027EE                     i1l1473:
 27431                           
 27432                           ; BSR set to: 1
 27433                           ;ECAN.c: 910: else
 27434                           ;ECAN.c: 915: {
 27435                           ;ECAN.c: 916: if ( FIFOEMPTY == 1 )
 27436  0027EE  AE74               	btfss	3956,7,c	;volatile
 27437  0027F0  D7B3               	goto	i1l9759
 27438                           
 27439                           ; BSR set to: 1
 27440                           ;ECAN.c: 919: {
 27441                           ;ECAN.c: 920: ptr = (BYTE*)_ECANPointBuffer(CANCON&0x07);
 27442  0027F2  506F               	movf	3951,w,c	;volatile
 27443  0027F4  0B07               	andlw	7
 27444  0027F6  EC2F  F027         	call	__ECANPointBuffer
 27445  0027FA  C001  F012         	movff	?__ECANPointBuffer,ECANReceiveMessage@ptr
 27446  0027FE  C002  F013         	movff	?__ECANPointBuffer+1,ECANReceiveMessage@ptr+1
 27447  002802                     i1l9809:
 27448                           
 27449                           ;ECAN.c: 932: _ECANRxFilterHitInfo.Val = *ptr & 0x1f;
 27450  002802  C012  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27451  002806  C013  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27452  00280A  50DF               	movf	indf2,w,c
 27453  00280C  0B1F               	andlw	31
 27454  00280E  6E32               	movwf	__ECANRxFilterHitInfo,c
 27455                           
 27456                           ;ECAN.c: 934: RXB1IF = 0;
 27457  002810  92A4               	bcf	4004,1,c	;volatile
 27458                           
 27459                           ;ECAN.c: 936: if ( RXB1OVFL )
 27460  002812  AC74               	btfss	3956,6,c	;volatile
 27461  002814  D006               	goto	i1l9819
 27462                           
 27463                           ;ECAN.c: 937: {
 27464                           ;ECAN.c: 938: *msgFlags |= ECAN_RX_OVERFLOW;
 27465  002816  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 27466  002818  6ED9               	movwf	fsr2l,c
 27467  00281A  6ADA               	clrf	fsr2h,c
 27468  00281C  0E00               	movlw	0
 27469  00281E  86DB               	bsf	plusw2,3,c
 27470                           
 27471                           ;ECAN.c: 939: RXB1OVFL = 0;
 27472  002820  9C74               	bcf	3956,6,c	;volatile
 27473  002822                     i1l9819:
 27474                           
 27475                           ;ECAN.c: 944: savedPtr = ptr;
 27476  002822  C012  F00C         	movff	ECANReceiveMessage@ptr,ECANReceiveMessage@savedPtr
 27477  002826  C013  F00D         	movff	ECANReceiveMessage@ptr+1,ECANReceiveMessage@savedPtr+1
 27478                           
 27479                           ;ECAN.c: 945: *msgFlags = 0;
 27480  00282A  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 27481  00282C  6ED9               	movwf	fsr2l,c
 27482  00282E  6ADA               	clrf	fsr2h,c
 27483  002830  6ADF               	clrf	indf2,c
 27484                           
 27485                           ;ECAN.c: 948: temp.Val = *(ptr+5);
 27486  002832  EE20 F005          	lfsr	2,5
 27487  002836  D857               	call	PL98	;call to abstracted procedure
 27488                           
 27489                           ;ECAN.c: 949: *dataLen = temp.Val & 0b00001111;
 27490  002838  500A               	movf	ECANReceiveMessage@dataLen,w,c
 27491  00283A  6ED9               	movwf	fsr2l,c
 27492  00283C  6ADA               	clrf	fsr2h,c
 27493  00283E  5011               	movf	ECANReceiveMessage@temp,w,c
 27494  002840  0B0F               	andlw	15
 27495  002842  6EDF               	movwf	indf2,c
 27496                           
 27497                           ;ECAN.c: 952: if ( temp.bits.b6 )
 27498  002844  AC11               	btfss	ECANReceiveMessage@temp,6,c
 27499  002846  D005               	goto	i1l1494
 27500                           
 27501                           ;ECAN.c: 953: *msgFlags |= ECAN_RX_RTR_FRAME;
 27502  002848  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 27503  00284A  6ED9               	movwf	fsr2l,c
 27504  00284C  6ADA               	clrf	fsr2h,c
 27505  00284E  0E00               	movlw	0
 27506  002850  8CDB               	bsf	plusw2,6,c
 27507  002852                     i1l1494:
 27508                           
 27509                           ;ECAN.c: 956: temp.Val = *(ptr+2);
 27510  002852  EE20 F002          	lfsr	2,2
 27511  002856  D847               	call	PL98	;call to abstracted procedure
 27512                           
 27513                           ;ECAN.c: 957: if ( temp.bits.b3 )
 27514  002858  A611               	btfss	ECANReceiveMessage@temp,3,c
 27515  00285A  D008               	goto	i1l1495
 27516                           
 27517                           ;ECAN.c: 958: {
 27518                           ;ECAN.c: 959: *msgFlags |= ECAN_RX_XTD_FRAME;
 27519  00285C  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 27520  00285E  6ED9               	movwf	fsr2l,c
 27521  002860  6ADA               	clrf	fsr2h,c
 27522  002862  0E00               	movlw	0
 27523  002864  8ADB               	bsf	plusw2,5,c
 27524                           
 27525                           ;ECAN.c: 960: temp.Val = 1;
 27526  002866  0E01               	movlw	1
 27527  002868  6E11               	movwf	ECANReceiveMessage@temp,c
 27528                           
 27529                           ;ECAN.c: 961: }
 27530  00286A  D001               	goto	i1l9837
 27531  00286C                     i1l1495:
 27532                           
 27533                           ;ECAN.c: 962: else
 27534                           ;ECAN.c: 963: temp.Val = 0;
 27535  00286C  6A11               	clrf	ECANReceiveMessage@temp,c
 27536  00286E                     i1l9837:
 27537                           
 27538                           ;ECAN.c: 965: _RegsToCANID(ptr+1, id, temp.Val);
 27539  00286E  2812               	incf	ECANReceiveMessage@ptr,w,c
 27540  002870  6E01               	movwf	?__RegsToCANID,c
 27541  002872  0E00               	movlw	0
 27542  002874  2013               	addwfc	ECANReceiveMessage@ptr+1,w,c
 27543  002876  6E02               	movwf	?__RegsToCANID+1,c
 27544  002878  C00E  F003         	movff	ECANReceiveMessage@id,?__RegsToCANID+2
 27545  00287C  C011  F004         	movff	ECANReceiveMessage@temp,?__RegsToCANID+3
 27546  002880  EC11  F01C         	call	__RegsToCANID	;wreg free
 27547                           
 27548                           ;ECAN.c: 968: ptr += 6;
 27549  002884  0E06               	movlw	6
 27550  002886  2612               	addwf	ECANReceiveMessage@ptr,f,c
 27551  002888  0E00               	movlw	0
 27552  00288A  2213               	addwfc	ECANReceiveMessage@ptr+1,f,c
 27553                           
 27554                           ;ECAN.c: 969: temp.Val = *dataLen;
 27555  00288C  500A               	movf	ECANReceiveMessage@dataLen,w,c
 27556  00288E  6ED9               	movwf	fsr2l,c
 27557  002890  6ADA               	clrf	fsr2h,c
 27558  002892  50DF               	movf	indf2,w,c
 27559  002894  6E11               	movwf	ECANReceiveMessage@temp,c
 27560                           
 27561                           ;ECAN.c: 970: for ( i = 0; i < temp.Val; i++ )
 27562  002896  6A0F               	clrf	ECANReceiveMessage@i,c
 27563  002898  D00F               	goto	i1l9853
 27564  00289A                     i1l9845:
 27565                           
 27566                           ;ECAN.c: 971: *data++ = *ptr++;
 27567  00289A  C012  FFD9         	movff	ECANReceiveMessage@ptr,fsr2l
 27568  00289E  C013  FFDA         	movff	ECANReceiveMessage@ptr+1,fsr2h
 27569  0028A2  C008  FFE1         	movff	ECANReceiveMessage@data,fsr1l
 27570  0028A6  C009  FFE2         	movff	ECANReceiveMessage@data+1,fsr1h
 27571  0028AA  CFDF FFE7          	movff	indf2,indf1
 27572  0028AE  4A12               	infsnz	ECANReceiveMessage@ptr,f,c
 27573  0028B0  2A13               	incf	ECANReceiveMessage@ptr+1,f,c
 27574  0028B2  4A08               	infsnz	ECANReceiveMessage@data,f,c
 27575  0028B4  2A09               	incf	ECANReceiveMessage@data+1,f,c
 27576  0028B6  2A0F               	incf	ECANReceiveMessage@i,f,c
 27577  0028B8                     i1l9853:
 27578  0028B8  5011               	movf	ECANReceiveMessage@temp,w,c
 27579  0028BA  5C0F               	subwf	ECANReceiveMessage@i,w,c
 27580  0028BC  E3EE               	bnc	i1l9845
 27581                           
 27582                           ;ECAN.c: 974: if ( IRXIF )
 27583  0028BE  AEA4               	btfss	4004,7,c	;volatile
 27584  0028C0  D006               	goto	i1l9859
 27585                           
 27586                           ;ECAN.c: 975: {
 27587                           ;ECAN.c: 976: *msgFlags |= ECAN_RX_INVALID_MSG;
 27588  0028C2  500B               	movf	ECANReceiveMessage@msgFlags,w,c
 27589  0028C4  6ED9               	movwf	fsr2l,c
 27590  0028C6  6ADA               	clrf	fsr2h,c
 27591  0028C8  0E00               	movlw	0
 27592  0028CA  88DB               	bsf	plusw2,4,c
 27593                           
 27594                           ;ECAN.c: 977: IRXIF = 0;
 27595  0028CC  9EA4               	bcf	4004,7,c	;volatile
 27596  0028CE                     i1l9859:
 27597                           
 27598                           ;ECAN.c: 978: }
 27599                           ;ECAN.c: 981: *savedPtr &= 0x7f;
 27600  0028CE  C00C  FFD9         	movff	ECANReceiveMessage@savedPtr,fsr2l
 27601  0028D2  C00D  FFDA         	movff	ECANReceiveMessage@savedPtr+1,fsr2h
 27602  0028D6  0E7F               	movlw	127
 27603  0028D8  16DF               	andwf	indf2,f,c
 27604                           
 27605                           ;ECAN.c: 985: if ( mode == 0x80 )
 27606  0028DA  5010               	movf	ECANReceiveMessage@mode,w,c
 27607  0028DC  0A80               	xorlw	128
 27608  0028DE  B4D8               	btfsc	status,2,c
 27609                           
 27610                           ;ECAN.c: 986: FIFOEMPTY = 0;
 27611  0028E0  9E74               	bcf	3956,7,c	;volatile
 27612                           
 27613                           ;ECAN.c: 992: return TRUE;
 27614  0028E2  0E01               	movlw	1
 27615  0028E4                     i1l1470:
 27616  0028E4  0012               	return	
 27617  0028E6                     __end_of_ECANReceiveMessage:
 27618                           	opt stack 0
 27619  0028E6                     PL98:
 27620                           	opt stack 20
 27621  0028E6  5012               	movf	ECANReceiveMessage@ptr,w,c
 27622  0028E8  26D9               	addwf	fsr2l,f,c
 27623  0028EA  5013               	movf	ECANReceiveMessage@ptr+1,w,c
 27624  0028EC  22DA               	addwfc	fsr2h,f,c
 27625  0028EE  50DF               	movf	indf2,w,c
 27626  0028F0  6E11               	movwf	ECANReceiveMessage@temp,c
 27627  0028F2  0012               	return	
 27628  0028F4                     __end_ofPL98:
 27629                           	opt stack 0
 27630                           tblptru	equ	0xFF8
 27631                           tblptrh	equ	0xFF7
 27632                           tblptrl	equ	0xFF6
 27633                           tablat	equ	0xFF5
 27634                           prodh	equ	0xFF4
 27635                           prodl	equ	0xFF3
 27636                           intcon	equ	0xFF2
 27637                           indf0	equ	0xFEF
 27638                           postinc0	equ	0xFEE
 27639                           fsr0h	equ	0xFEA
 27640                           fsr0l	equ	0xFE9
 27641                           wreg	equ	0xFE8
 27642                           indf1	equ	0xFE7
 27643                           postinc1	equ	0xFE6
 27644                           postdec1	equ	0xFE5
 27645                           fsr1h	equ	0xFE2
 27646                           fsr1l	equ	0xFE1
 27647                           bsr	equ	0xFE0
 27648                           indf2	equ	0xFDF
 27649                           postinc2	equ	0xFDE
 27650                           postdec2	equ	0xFDD
 27651                           plusw2	equ	0xFDB
 27652                           fsr2h	equ	0xFDA
 27653                           fsr2l	equ	0xFD9
 27654                           status	equ	0xFD8
 27655                           
 27656 ;; *************** function __RegsToCANID *****************
 27657 ;; Defined at:
 27658 ;;		line 1158 in file "ECAN.c"
 27659 ;; Parameters:    Size  Location     Type
 27660 ;;  ptr             2    0[COMRAM] PTR unsigned char 
 27661 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27662 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27663 ;;  val             1    2[COMRAM] PTR unsigned long 
 27664 ;;		 -> id(4), 
 27665 ;;  type            1    3[COMRAM] unsigned char 
 27666 ;; Auto vars:     Size  Location     Type
 27667 ;;  Value           1    6[COMRAM] PTR struct _CAN_MESSAGE_
 27668 ;;		 -> id(4), 
 27669 ;; Return value:  Size  Location     Type
 27670 ;;		None               void
 27671 ;; Registers used:
 27672 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27673 ;; Tracked objects:
 27674 ;;		On entry : 0/1
 27675 ;;		On exit  : 0/0
 27676 ;;		Unchanged: 0/0
 27677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27678 ;;      Params:         4       0       0       0       0       0       0
 27679 ;;      Locals:         1       0       0       0       0       0       0
 27680 ;;      Temps:          2       0       0       0       0       0       0
 27681 ;;      Totals:         7       0       0       0       0       0       0
 27682 ;;Total ram usage:        7 bytes
 27683 ;; Hardware stack levels used:    1
 27684 ;; This function calls:
 27685 ;;		Nothing
 27686 ;; This function is called by:
 27687 ;;		_ECANReceiveMessage
 27688 ;; This function uses a non-reentrant model
 27689 ;;
 27690                           
 27691                           	psect	text86
 27692  003822                     __ptext86:
 27693                           	opt stack 0
 27694  003822                     __RegsToCANID:
 27695                           	opt stack 20
 27696                           
 27697                           ;ECAN.c: 1159: CAN_MESSAGE_ID *Value;
 27698                           ;ECAN.c: 1161: Value = (CAN_MESSAGE_ID*)val;
 27699                           
 27700                           ;incstack = 0
 27701                           ;incstack = 0
 27702  003822  C003  F007         	movff	__RegsToCANID@val,__RegsToCANID@Value
 27703                           
 27704                           ;ECAN.c: 1163: if ( type == 0 )
 27705  003826  6604               	tstfsz	__RegsToCANID@type,c
 27706  003828  D02B               	goto	i1l9509
 27707                           
 27708                           ;ECAN.c: 1164: {
 27709                           ;ECAN.c: 1166: Value->BYTES.BYTE_1 = (*ptr << 3);
 27710  00382A  5007               	movf	__RegsToCANID@Value,w,c
 27711  00382C  6ED9               	movwf	fsr2l,c
 27712  00382E  D86C               	call	PL68	;call to abstracted procedure
 27713  003830  3605               	rlcf	??__RegsToCANID,f,c
 27714  003832  90D8               	bcf	status,0,c
 27715  003834  3605               	rlcf	??__RegsToCANID,f,c
 27716  003836  90D8               	bcf	status,0,c
 27717  003838  3405               	rlcf	??__RegsToCANID,w,c
 27718  00383A  6EDF               	movwf	indf2,c
 27719                           
 27720                           ;ECAN.c: 1167: Value->BYTES.BYTE_2 = *ptr >> 5;
 27721  00383C  5007               	movf	__RegsToCANID@Value,w,c
 27722  00383E  6ED9               	movwf	fsr2l,c
 27723  003840  6ADA               	clrf	fsr2h,c
 27724  003842  2AD9               	incf	fsr2l,f,c
 27725  003844  6ADA               	clrf	fsr2h,c
 27726  003846  D873               	call	PL78	;call to abstracted procedure
 27727  003848                     i1u1125_25:
 27728  003848  90D8               	bcf	status,0,c
 27729  00384A  3205               	rrcf	??__RegsToCANID,f,c
 27730  00384C  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27731  00384E  D7FC               	goto	i1u1125_25
 27732  003850  5005               	movf	??__RegsToCANID,w,c
 27733                           
 27734                           ;ECAN.c: 1168: ptr++;
 27735                           
 27736                           ;ECAN.c: 1169: Value->BYTES.BYTE_1 |= (*ptr >> 5);
 27737  003852  D863               	call	PL70	;call to abstracted procedure
 27738  003854  0E05               	movlw	5
 27739  003856  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 27740  003858                     i1u1126_25:
 27741  003858  90D8               	bcf	status,0,c
 27742  00385A  3205               	rrcf	??__RegsToCANID,f,c
 27743  00385C  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27744  00385E  D7FC               	goto	i1u1126_25
 27745  003860  5007               	movf	__RegsToCANID@Value,w,c
 27746  003862  6ED9               	movwf	fsr2l,c
 27747  003864  6ADA               	clrf	fsr2h,c
 27748  003866  5005               	movf	??__RegsToCANID,w,c
 27749  003868  12DF               	iorwf	indf2,f,c
 27750                           
 27751                           ;ECAN.c: 1170: Value->BYTES.BYTE_3 = 0x00;
 27752  00386A  D83D               	call	PL32	;call to abstracted procedure
 27753  00386C  6ADF               	clrf	indf2,c
 27754                           
 27755                           ;ECAN.c: 1171: Value->BYTES.BYTE_4 = 0x00;
 27756  00386E  5007               	movf	__RegsToCANID@Value,w,c
 27757  003870  6ED9               	movwf	fsr2l,c
 27758  003872  6ADA               	clrf	fsr2h,c
 27759  003874  0E03               	movlw	3
 27760  003876  26D9               	addwf	fsr2l,f,c
 27761  003878  6ADA               	clrf	fsr2h,c
 27762  00387A  0E00               	movlw	0
 27763  00387C  6EDF               	movwf	indf2,c
 27764                           
 27765                           ;ECAN.c: 1172: }
 27766  00387E  D032               	goto	i1l1517
 27767  003880                     i1l9509:
 27768                           
 27769                           ;ECAN.c: 1173: else
 27770                           ;ECAN.c: 1174: {
 27771                           ;ECAN.c: 1176: Value->BYTES.BYTE_3 = (*ptr << 5);
 27772  003880  D832               	call	PL32	;call to abstracted procedure
 27773  003882  D855               	call	PL78	;call to abstracted procedure
 27774  003884                     i1u1127_25:
 27775  003884  90D8               	bcf	status,0,c
 27776  003886  3605               	rlcf	??__RegsToCANID,f,c
 27777  003888  2E06               	decfsz	(??__RegsToCANID+1)& (0+255),f,c
 27778  00388A  D7FC               	goto	i1u1127_25
 27779  00388C  5005               	movf	??__RegsToCANID,w,c
 27780  00388E  6EDF               	movwf	indf2,c
 27781                           
 27782                           ;ECAN.c: 1177: Value->BYTES.BYTE_4 = (*ptr >> 3);
 27783  003890  5007               	movf	__RegsToCANID@Value,w,c
 27784  003892  6ED9               	movwf	fsr2l,c
 27785  003894  6ADA               	clrf	fsr2h,c
 27786  003896  0E03               	movlw	3
 27787  003898  26D9               	addwf	fsr2l,f,c
 27788  00389A  D836               	call	PL68	;call to abstracted procedure
 27789  00389C  3205               	rrcf	??__RegsToCANID,f,c
 27790  00389E  90D8               	bcf	status,0,c
 27791  0038A0  3205               	rrcf	??__RegsToCANID,f,c
 27792  0038A2  90D8               	bcf	status,0,c
 27793  0038A4  3005               	rrcf	??__RegsToCANID,w,c
 27794                           
 27795                           ;ECAN.c: 1178: ptr++;
 27796                           
 27797                           ;ECAN.c: 1179: Value->BYTES.BYTE_3 |= (*ptr & 0x03);
 27798  0038A6  D839               	call	PL70	;call to abstracted procedure
 27799  0038A8  0E03               	movlw	3
 27800  0038AA  1605               	andwf	??__RegsToCANID,f,c
 27801  0038AC  D81C               	call	PL32	;call to abstracted procedure
 27802  0038AE  5005               	movf	??__RegsToCANID,w,c
 27803  0038B0  12DF               	iorwf	indf2,f,c
 27804                           
 27805                           ;ECAN.c: 1181: Value->BYTES.BYTE_3 |= ((*ptr & 0xe0) >> 3);
 27806  0038B2  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27807  0038B6  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27808  0038BA  50DF               	movf	indf2,w,c
 27809  0038BC  6E05               	movwf	??__RegsToCANID& (0+255),c
 27810  0038BE  90D8               	bcf	status,0,c
 27811  0038C0  3205               	rrcf	??__RegsToCANID,f,c
 27812  0038C2  90D8               	bcf	status,0,c
 27813  0038C4  3205               	rrcf	??__RegsToCANID,f,c
 27814  0038C6  90D8               	bcf	status,0,c
 27815  0038C8  3205               	rrcf	??__RegsToCANID,f,c
 27816  0038CA  0E1C               	movlw	28
 27817  0038CC  1605               	andwf	??__RegsToCANID,f,c
 27818  0038CE  D80B               	call	PL32	;call to abstracted procedure
 27819  0038D0  5005               	movf	??__RegsToCANID,w,c
 27820  0038D2  12DF               	iorwf	indf2,f,c
 27821                           
 27822                           ;ECAN.c: 1182: ptr++;
 27823                           
 27824                           ;ECAN.c: 1183: Value->BYTES.BYTE_2 = *ptr;
 27825  0038D4  D80F               	call	PL64	;call to abstracted procedure
 27826  0038D6  2AE1               	incf	fsr1l,f,c
 27827  0038D8  6AE2               	clrf	fsr1h,c
 27828  0038DA  CFDF FFE7          	movff	indf2,indf1
 27829                           
 27830                           ;ECAN.c: 1184: ptr++;
 27831                           
 27832                           ;ECAN.c: 1185: Value->BYTES.BYTE_1 = *ptr;
 27833  0038DE  D80A               	call	PL64	;call to abstracted procedure
 27834  0038E0  CFDF FFE7          	movff	indf2,indf1
 27835  0038E4                     i1l1517:
 27836  0038E4  0012               	return	
 27837  0038E6                     __end_of__RegsToCANID:
 27838                           	opt stack 0
 27839  0038E6                     PL32:
 27840                           	opt stack 20
 27841  0038E6  5007               	movf	__RegsToCANID@Value,w,c
 27842  0038E8  6ED9               	movwf	fsr2l,c
 27843  0038EA  6ADA               	clrf	fsr2h,c
 27844  0038EC  0E02               	movlw	2
 27845  0038EE  26D9               	addwf	fsr2l,f,c
 27846  0038F0  6ADA               	clrf	fsr2h,c
 27847  0038F2  0012               	return	
 27848  0038F4                     __end_ofPL32:
 27849                           	opt stack 0
 27850  0038F4                     PL64:
 27851                           	opt stack 20
 27852  0038F4  4A01               	infsnz	__RegsToCANID@ptr,f,c
 27853  0038F6  2A02               	incf	__RegsToCANID@ptr+1,f,c
 27854  0038F8  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27855  0038FC  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27856  003900  5007               	movf	__RegsToCANID@Value,w,c
 27857  003902  6EE1               	movwf	fsr1l,c
 27858  003904  6AE2               	clrf	fsr1h,c
 27859  003906  0012               	return	
 27860  003908                     __end_ofPL64:
 27861                           	opt stack 0
 27862  003908                     PL68:
 27863                           	opt stack 20
 27864  003908  6ADA               	clrf	fsr2h,c
 27865  00390A  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 27866  00390E  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 27867  003912  50E7               	movf	indf1,w,c
 27868  003914  6E05               	movwf	??__RegsToCANID& (0+255),c
 27869  003916  90D8               	bcf	status,0,c
 27870  003918  0012               	return	
 27871  00391A                     __end_ofPL68:
 27872                           	opt stack 0
 27873  00391A                     PL70:
 27874                           	opt stack 20
 27875  00391A  6EDF               	movwf	indf2,c
 27876  00391C  4A01               	infsnz	__RegsToCANID@ptr,f,c
 27877  00391E  2A02               	incf	__RegsToCANID@ptr+1,f,c
 27878  003920  C001  FFD9         	movff	__RegsToCANID@ptr,fsr2l
 27879  003924  C002  FFDA         	movff	__RegsToCANID@ptr+1,fsr2h
 27880  003928  50DF               	movf	indf2,w,c
 27881  00392A  6E05               	movwf	??__RegsToCANID& (0+255),c
 27882  00392C  0012               	return	
 27883  00392E                     __end_ofPL70:
 27884                           	opt stack 0
 27885  00392E                     PL78:
 27886                           	opt stack 20
 27887  00392E  C001  FFE1         	movff	__RegsToCANID@ptr,fsr1l
 27888  003932  C002  FFE2         	movff	__RegsToCANID@ptr+1,fsr1h
 27889  003936  50E7               	movf	indf1,w,c
 27890  003938  6E05               	movwf	??__RegsToCANID& (0+255),c
 27891  00393A  0E05               	movlw	5
 27892  00393C  6E06               	movwf	(??__RegsToCANID+1)& (0+255),c
 27893  00393E  0C05               	retlw	5
 27894  003940                     __end_ofPL78:
 27895                           	opt stack 0
 27896                           tblptru	equ	0xFF8
 27897                           tblptrh	equ	0xFF7
 27898                           tblptrl	equ	0xFF6
 27899                           tablat	equ	0xFF5
 27900                           prodh	equ	0xFF4
 27901                           prodl	equ	0xFF3
 27902                           intcon	equ	0xFF2
 27903                           indf0	equ	0xFEF
 27904                           postinc0	equ	0xFEE
 27905                           fsr0h	equ	0xFEA
 27906                           fsr0l	equ	0xFE9
 27907                           wreg	equ	0xFE8
 27908                           indf1	equ	0xFE7
 27909                           postinc1	equ	0xFE6
 27910                           postdec1	equ	0xFE5
 27911                           fsr1h	equ	0xFE2
 27912                           fsr1l	equ	0xFE1
 27913                           bsr	equ	0xFE0
 27914                           indf2	equ	0xFDF
 27915                           postinc2	equ	0xFDE
 27916                           postdec2	equ	0xFDD
 27917                           plusw2	equ	0xFDB
 27918                           fsr2h	equ	0xFDA
 27919                           fsr2l	equ	0xFD9
 27920                           status	equ	0xFD8
 27921                           
 27922 ;; *************** function __ECANPointBuffer *****************
 27923 ;; Defined at:
 27924 ;;		line 1209 in file "ECAN.c"
 27925 ;; Parameters:    Size  Location     Type
 27926 ;;  b               1    wreg     unsigned char 
 27927 ;; Auto vars:     Size  Location     Type
 27928 ;;  b               1    3[COMRAM] unsigned char 
 27929 ;;  pt              2    4[COMRAM] PTR unsigned char 
 27930 ;;		 -> B5CON(1), B4CON(1), B3CON(1), B2CON(1), 
 27931 ;;		 -> B1CON(1), B0CON(1), RXB1CON(1), RXB0CON(1), 
 27932 ;; Return value:  Size  Location     Type
 27933 ;;                  2    0[COMRAM] PTR unsigned char 
 27934 ;; Registers used:
 27935 ;;		wreg, status,2, status,0
 27936 ;; Tracked objects:
 27937 ;;		On entry : F/1
 27938 ;;		On exit  : 0/0
 27939 ;;		Unchanged: 0/0
 27940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 27941 ;;      Params:         3       0       0       0       0       0       0
 27942 ;;      Locals:         3       0       0       0       0       0       0
 27943 ;;      Temps:          0       0       0       0       0       0       0
 27944 ;;      Totals:         6       0       0       0       0       0       0
 27945 ;;Total ram usage:        6 bytes
 27946 ;; Hardware stack levels used:    1
 27947 ;; This function calls:
 27948 ;;		Nothing
 27949 ;; This function is called by:
 27950 ;;		_ECANReceiveMessage
 27951 ;; This function uses a non-reentrant model
 27952 ;;
 27953                           
 27954                           	psect	text87
 27955  004E5E                     __ptext87:
 27956                           	opt stack 0
 27957  004E5E                     __ECANPointBuffer:
 27958                           	opt stack 20
 27959                           
 27960                           ;incstack = 0
 27961                           ;incstack = 0
 27962                           ;__ECANPointBuffer@b stored from wreg
 27963  004E5E  CFE8 F004          	movff	wreg,__ECANPointBuffer@b
 27964                           
 27965                           ; BSR set to: 1
 27966                           ;ECAN.c: 1210: BYTE* pt;
 27967                           ;ECAN.c: 1212: switch(b)
 27968  004E62  D024               	goto	i1l9495
 27969  004E64                     i1l9477:
 27970                           
 27971                           ; BSR set to: 1
 27972                           ;ECAN.c: 1215: pt=(BYTE*)&RXB0CON;
 27973  004E64  0E0F               	movlw	15	;volatile
 27974  004E66  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27975  004E68  0E60               	movlw	96	;volatile
 27976  004E6A  D01E               	goto	L59
 27977  004E6C                     i1l9479:
 27978                           
 27979                           ; BSR set to: 1
 27980                           ;ECAN.c: 1218: pt=(BYTE*)&RXB1CON;
 27981  004E6C  010F               	movlb	15	; () banked
 27982  004E6E  0E0F               	movlw	15	;volatile
 27983  004E70  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27984  004E72  0E50               	movlw	80	;volatile
 27985  004E74  D019               	goto	L59
 27986  004E76                     i1l9481:
 27987                           
 27988                           ; BSR set to: 1
 27989                           ;ECAN.c: 1221: pt=(BYTE*)&B0CON;
 27990  004E76  010E               	movlb	14	; () banked
 27991  004E78  0E0E               	movlw	14	;volatile
 27992  004E7A  6E06               	movwf	__ECANPointBuffer@pt+1,c
 27993  004E7C  0E20               	movlw	32	;volatile
 27994  004E7E  D014               	goto	L59
 27995  004E80                     i1l9483:
 27996                           
 27997                           ; BSR set to: 1
 27998                           ;ECAN.c: 1224: pt=(BYTE*)&B1CON;
 27999  004E80  010E               	movlb	14	; () banked
 28000  004E82  0E0E               	movlw	14	;volatile
 28001  004E84  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28002  004E86  0E30               	movlw	48	;volatile
 28003  004E88  D00F               	goto	L59
 28004  004E8A                     i1l9485:
 28005                           
 28006                           ; BSR set to: 1
 28007                           ;ECAN.c: 1227: pt=(BYTE*)&B2CON;
 28008  004E8A  010E               	movlb	14	; () banked
 28009  004E8C  0E0E               	movlw	14	;volatile
 28010  004E8E  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28011  004E90  0E40               	movlw	64	;volatile
 28012  004E92  D00A               	goto	L59
 28013  004E94                     i1l9487:
 28014                           
 28015                           ; BSR set to: 1
 28016                           ;ECAN.c: 1230: pt=(BYTE*)&B3CON;
 28017  004E94  010E               	movlb	14	; () banked
 28018  004E96  0E0E               	movlw	14	;volatile
 28019  004E98  D7EB               	goto	L60
 28020  004E9A                     i1l9489:
 28021                           
 28022                           ; BSR set to: 1
 28023                           ;ECAN.c: 1233: pt=(BYTE*)&B4CON;
 28024  004E9A  010E               	movlb	14	; () banked
 28025  004E9C  0E0E               	movlw	14	;volatile
 28026  004E9E  D7E3               	goto	L61
 28027  004EA0                     i1l9491:
 28028                           
 28029                           ; BSR set to: 1
 28030                           ;ECAN.c: 1236: pt=(BYTE*)&B5CON;
 28031  004EA0  010E               	movlb	14	; () banked
 28032  004EA2  0E0E               	movlw	14	;volatile
 28033  004EA4  6E06               	movwf	__ECANPointBuffer@pt+1,c
 28034  004EA6  0E70               	movlw	112	;volatile
 28035  004EA8                     L59:
 28036  004EA8  6E05               	movwf	__ECANPointBuffer@pt,c
 28037                           
 28038                           ;ECAN.c: 1237: break;
 28039  004EAA  D00F               	goto	i1l1522
 28040  004EAC                     i1l9495:
 28041                           
 28042                           ; BSR set to: 1
 28043  004EAC  5004               	movf	__ECANPointBuffer@b,w,c
 28044                           
 28045                           ; Switch size 1, requested type "space"
 28046                           ; Number of cases is 7, Range of values is 0 to 6
 28047                           ; switch strategies available:
 28048                           ; Name         Instructions Cycles
 28049                           ; simple_byte           22    12 (average)
 28050                           ;	Chosen strategy is simple_byte
 28051  004EAE  E0DA               	bz	i1l9477
 28052  004EB0  0A01               	xorlw	1	; case 1
 28053  004EB2  E0DC               	bz	i1l9479
 28054  004EB4  0A03               	xorlw	3	; case 2
 28055  004EB6  E0DF               	bz	i1l9481
 28056  004EB8  0A01               	xorlw	1	; case 3
 28057  004EBA  E0E2               	bz	i1l9483
 28058  004EBC  0A07               	xorlw	7	; case 4
 28059  004EBE  E0E5               	bz	i1l9485
 28060  004EC0  0A01               	xorlw	1	; case 5
 28061  004EC2  E0E8               	bz	i1l9487
 28062  004EC4  0A03               	xorlw	3	; case 6
 28063  004EC6  E0E9               	bz	i1l9489
 28064  004EC8  D7EB               	goto	i1l9491
 28065  004ECA                     i1l1522:
 28066                           
 28067                           ;ECAN.c: 1239: return (pt);
 28068  004ECA  C005  F001         	movff	__ECANPointBuffer@pt,?__ECANPointBuffer
 28069  004ECE  C006  F002         	movff	__ECANPointBuffer@pt+1,?__ECANPointBuffer+1
 28070  004ED2  0012               	return	
 28071  004ED4                     __end_of__ECANPointBuffer:
 28072                           	opt stack 0
 28073                           tblptru	equ	0xFF8
 28074                           tblptrh	equ	0xFF7
 28075                           tblptrl	equ	0xFF6
 28076                           tablat	equ	0xFF5
 28077                           prodh	equ	0xFF4
 28078                           prodl	equ	0xFF3
 28079                           intcon	equ	0xFF2
 28080                           indf0	equ	0xFEF
 28081                           postinc0	equ	0xFEE
 28082                           fsr0h	equ	0xFEA
 28083                           fsr0l	equ	0xFE9
 28084                           wreg	equ	0xFE8
 28085                           indf1	equ	0xFE7
 28086                           postinc1	equ	0xFE6
 28087                           postdec1	equ	0xFE5
 28088                           fsr1h	equ	0xFE2
 28089                           fsr1l	equ	0xFE1
 28090                           bsr	equ	0xFE0
 28091                           indf2	equ	0xFDF
 28092                           postinc2	equ	0xFDE
 28093                           postdec2	equ	0xFDD
 28094                           plusw2	equ	0xFDB
 28095                           fsr2h	equ	0xFDA
 28096                           fsr2l	equ	0xFD9
 28097                           status	equ	0xFD8
 28098                           
 28099 ;; *************** function _fifo_write *****************
 28100 ;; Defined at:
 28101 ;;		line 61 in file "fifo.c"
 28102 ;; Parameters:    Size  Location     Type
 28103 ;;  f               2    0[COMRAM] PTR struct .
 28104 ;;		 -> canInputFifo(8), serialInputFifo(8), 
 28105 ;;  buf             2    2[COMRAM] PTR const void 
 28106 ;;		 -> dlc(1), data(8), id(4), c(1), 
 28107 ;;  nbytes          4    4[COMRAM] unsigned long 
 28108 ;; Auto vars:     Size  Location     Type
 28109 ;;  i               4   14[COMRAM] unsigned long 
 28110 ;;  p               2   12[COMRAM] PTR const unsigned char 
 28111 ;;		 -> dlc(1), data(8), id(4), c(1), 
 28112 ;; Return value:  Size  Location     Type
 28113 ;;                  2    0[COMRAM] unsigned short 
 28114 ;; Registers used:
 28115 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 28116 ;; Tracked objects:
 28117 ;;		On entry : F/1
 28118 ;;		On exit  : F/1
 28119 ;;		Unchanged: F/0
 28120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28121 ;;      Params:         8       0       0       0       0       0       0
 28122 ;;      Locals:         6       0       0       0       0       0       0
 28123 ;;      Temps:          4       0       0       0       0       0       0
 28124 ;;      Totals:        18       0       0       0       0       0       0
 28125 ;;Total ram usage:       18 bytes
 28126 ;; Hardware stack levels used:    1
 28127 ;; This function calls:
 28128 ;;		Nothing
 28129 ;; This function is called by:
 28130 ;;		_Interrupt
 28131 ;; This function uses a non-reentrant model
 28132 ;;
 28133                           
 28134                           	psect	text88
 28135  0036F6                     __ptext88:
 28136                           	opt stack 0
 28137  0036F6                     _fifo_write:
 28138                           	opt stack 21
 28139                           
 28140                           ; BSR set to: 1
 28141                           ;fifo.c: 62: uint32_t i;
 28142                           ;fifo.c: 63: const uint8_t *p;
 28143                           ;fifo.c: 64: p = buf;
 28144                           
 28145                           ;incstack = 0
 28146                           ;incstack = 0
 28147  0036F6  C003  F00D         	movff	fifo_write@buf,fifo_write@p
 28148  0036FA  C004  F00E         	movff	fifo_write@buf+1,fifo_write@p+1
 28149                           
 28150                           ;fifo.c: 66: for ( i = 0; i < nbytes; i++ ) {
 28151  0036FE  6A0F               	clrf	fifo_write@i,c
 28152  003700  6A10               	clrf	fifo_write@i+1,c
 28153  003702  6A11               	clrf	fifo_write@i+2,c
 28154  003704  6A12               	clrf	fifo_write@i+3,c
 28155  003706  D068               	goto	i1l6421
 28156  003708                     i1l6401:
 28157                           
 28158                           ; BSR set to: 1
 28159                           ;fifo.c: 69: if ( ( (f->head + 1) == f->tail) ||
 28160                           ;fifo.c: 70: (((f->head + 1) == f->size) && (f->tail == 0))) {
 28161  003708  EE20 F004          	lfsr	2,4
 28162  00370C  5001               	movf	fifo_write@f,w,c
 28163  00370E  D872               	call	PL10	;call to abstracted procedure
 28164  003710  E102               	bnz	i1u629_25
 28165  003712  5009               	movf	??_fifo_write,w,c
 28166  003714  180B               	xorwf	??_fifo_write+2,w,c
 28167  003716                     i1u629_25:
 28168  003716  E011               	bz	i1l1549
 28169                           
 28170                           ; BSR set to: 1
 28171  003718  EE20 F006          	lfsr	2,6
 28172  00371C  5001               	movf	fifo_write@f,w,c
 28173  00371E  D86A               	call	PL10	;call to abstracted procedure
 28174  003720  E102               	bnz	i1u630_25
 28175  003722  5009               	movf	??_fifo_write,w,c
 28176  003724  180B               	xorwf	??_fifo_write+2,w,c
 28177  003726                     i1u630_25:
 28178  003726  E10E               	bnz	i1l6409
 28179                           
 28180                           ; BSR set to: 1
 28181  003728  EE20 F004          	lfsr	2,4
 28182  00372C  5001               	movf	fifo_write@f,w,c
 28183  00372E  26D9               	addwf	fsr2l,f,c
 28184  003730  5002               	movf	fifo_write@f+1,w,c
 28185  003732  22DA               	addwfc	fsr2h,f,c
 28186  003734  50DE               	movf	postinc2,w,c
 28187  003736  10DD               	iorwf	postdec2,w,c
 28188  003738  E105               	bnz	i1l6409
 28189  00373A                     i1l1549:
 28190                           
 28191                           ; BSR set to: 1
 28192                           ;fifo.c: 71: return i;
 28193  00373A  C00F  F001         	movff	fifo_write@i,?_fifo_write
 28194  00373E  C010  F002         	movff	fifo_write@i+1,?_fifo_write+1
 28195  003742  D057               	goto	i1l1550
 28196  003744                     i1l6409:
 28197                           
 28198                           ; BSR set to: 1
 28199                           ;fifo.c: 73: else {
 28200                           ;fifo.c: 74: f->buf[ f->head ] = *p++;
 28201  003744  C00D  FFD9         	movff	fifo_write@p,fsr2l
 28202  003748  C00E  FFDA         	movff	fifo_write@p+1,fsr2h
 28203  00374C  EE10 F002          	lfsr	1,2
 28204  003750  5001               	movf	fifo_write@f,w,c
 28205  003752  26E1               	addwf	fsr1l,f,c
 28206  003754  5002               	movf	fifo_write@f+1,w,c
 28207  003756  22E2               	addwfc	fsr1h,f,c
 28208  003758  CFE6 F009          	movff	postinc1,??_fifo_write
 28209  00375C  CFE5 F00A          	movff	postdec1,??_fifo_write+1
 28210  003760  C001  FFE1         	movff	fifo_write@f,fsr1l
 28211  003764  C002  FFE2         	movff	fifo_write@f+1,fsr1h
 28212  003768  CFE6 F00B          	movff	postinc1,??_fifo_write+2
 28213  00376C  CFE5 F00C          	movff	postdec1,??_fifo_write+3
 28214  003770  5009               	movf	??_fifo_write,w,c
 28215  003772  240B               	addwf	??_fifo_write+2,w,c
 28216  003774  6EE1               	movwf	fsr1l,c
 28217  003776  500A               	movf	??_fifo_write+1,w,c
 28218  003778  200C               	addwfc	??_fifo_write+3,w,c
 28219  00377A  6EE2               	movwf	fsr1h,c
 28220  00377C  CFDF FFE7          	movff	indf2,indf1
 28221                           
 28222                           ; BSR set to: 1
 28223  003780  4A0D               	infsnz	fifo_write@p,f,c
 28224  003782  2A0E               	incf	fifo_write@p+1,f,c
 28225                           
 28226                           ; BSR set to: 1
 28227                           ;fifo.c: 75: f->head++;
 28228  003784  EE20 F002          	lfsr	2,2
 28229  003788  5001               	movf	fifo_write@f,w,c
 28230  00378A  26D9               	addwf	fsr2l,f,c
 28231  00378C  5002               	movf	fifo_write@f+1,w,c
 28232  00378E  22DA               	addwfc	fsr2h,f,c
 28233  003790  2ADE               	incf	postinc2,f,c
 28234  003792  0E00               	movlw	0
 28235  003794  22DD               	addwfc	postdec2,f,c
 28236                           
 28237                           ; BSR set to: 1
 28238                           ;fifo.c: 77: if (f->head >= f->size) {
 28239  003796  EE20 F006          	lfsr	2,6
 28240  00379A  5001               	movf	fifo_write@f,w,c
 28241  00379C  26D9               	addwf	fsr2l,f,c
 28242  00379E  5002               	movf	fifo_write@f+1,w,c
 28243  0037A0  22DA               	addwfc	fsr2h,f,c
 28244  0037A2  EE10 F002          	lfsr	1,2
 28245  0037A6  5001               	movf	fifo_write@f,w,c
 28246  0037A8  26E1               	addwf	fsr1l,f,c
 28247  0037AA  5002               	movf	fifo_write@f+1,w,c
 28248  0037AC  22E2               	addwfc	fsr1h,f,c
 28249  0037AE  52E6               	movf	postinc1,f,c
 28250  0037B0  52DE               	movf	postinc2,f,c
 28251  0037B2  50DD               	movf	postdec2,w,c
 28252  0037B4  5CE5               	subwf	postdec1,w,c
 28253  0037B6  E102               	bnz	i1u632_25
 28254  0037B8  50DF               	movf	indf2,w,c
 28255  0037BA  5CE7               	subwf	indf1,w,c
 28256  0037BC                     i1u632_25:
 28257  0037BC  E308               	bnc	i1l6419
 28258                           
 28259                           ; BSR set to: 1
 28260                           ;fifo.c: 78: f->head = 0;
 28261  0037BE  EE20 F002          	lfsr	2,2
 28262  0037C2  5001               	movf	fifo_write@f,w,c
 28263  0037C4  26D9               	addwf	fsr2l,f,c
 28264  0037C6  5002               	movf	fifo_write@f+1,w,c
 28265  0037C8  22DA               	addwfc	fsr2h,f,c
 28266  0037CA  6ADE               	clrf	postinc2,c
 28267  0037CC  6ADD               	clrf	postdec2,c
 28268  0037CE                     i1l6419:
 28269                           
 28270                           ; BSR set to: 1
 28271  0037CE  2A0F               	incf	fifo_write@i,f,c
 28272  0037D0  0E00               	movlw	0
 28273  0037D2  2210               	addwfc	fifo_write@i+1,f,c
 28274  0037D4  2211               	addwfc	fifo_write@i+2,f,c
 28275  0037D6  2212               	addwfc	fifo_write@i+3,f,c
 28276  0037D8                     i1l6421:
 28277                           
 28278                           ; BSR set to: 1
 28279  0037D8  5005               	movf	fifo_write@nbytes,w,c
 28280  0037DA  5C0F               	subwf	fifo_write@i,w,c
 28281  0037DC  5006               	movf	fifo_write@nbytes+1,w,c
 28282  0037DE  5810               	subwfb	fifo_write@i+1,w,c
 28283  0037E0  5007               	movf	fifo_write@nbytes+2,w,c
 28284  0037E2  5811               	subwfb	fifo_write@i+2,w,c
 28285  0037E4  5008               	movf	fifo_write@nbytes+3,w,c
 28286  0037E6  5812               	subwfb	fifo_write@i+3,w,c
 28287  0037E8  E38F               	bnc	i1l6401
 28288                           
 28289                           ; BSR set to: 1
 28290                           ;fifo.c: 79: }
 28291                           ;fifo.c: 80: }
 28292                           ;fifo.c: 82: }
 28293                           ;fifo.c: 84: return nbytes;
 28294  0037EA  C005  F001         	movff	fifo_write@nbytes,?_fifo_write
 28295  0037EE  C006  F002         	movff	fifo_write@nbytes+1,?_fifo_write+1
 28296  0037F2                     i1l1550:
 28297                           
 28298                           ; BSR set to: 1
 28299  0037F2  0012               	return	
 28300  0037F4                     __end_of_fifo_write:
 28301                           	opt stack 0
 28302  0037F4                     PL10:
 28303                           	opt stack 21
 28304  0037F4  26D9               	addwf	fsr2l,f,c
 28305  0037F6  5002               	movf	fifo_write@f+1,w,c
 28306  0037F8  22DA               	addwfc	fsr2h,f,c
 28307  0037FA  CFDE F009          	movff	postinc2,??_fifo_write
 28308  0037FE  CFDD F00A          	movff	postdec2,??_fifo_write+1
 28309  003802  EE20 F002          	lfsr	2,2
 28310  003806  5001               	movf	fifo_write@f,w,c
 28311  003808  26D9               	addwf	fsr2l,f,c
 28312  00380A  5002               	movf	fifo_write@f+1,w,c
 28313  00380C  22DA               	addwfc	fsr2h,f,c
 28314  00380E  CFDE F00B          	movff	postinc2,??_fifo_write+2
 28315  003812  CFDD F00C          	movff	postdec2,??_fifo_write+3
 28316  003816  2A0B               	incf	??_fifo_write+2,f,c
 28317  003818  0E00               	movlw	0
 28318  00381A  220C               	addwfc	??_fifo_write+3,f,c
 28319  00381C  500A               	movf	??_fifo_write+1,w,c
 28320  00381E  180C               	xorwf	??_fifo_write+3,w,c
 28321  003820  0012               	return	
 28322  003822                     __end_ofPL10:
 28323                           	opt stack 0
 28324                           tblptru	equ	0xFF8
 28325                           tblptrh	equ	0xFF7
 28326                           tblptrl	equ	0xFF6
 28327                           tablat	equ	0xFF5
 28328                           prodh	equ	0xFF4
 28329                           prodl	equ	0xFF3
 28330                           intcon	equ	0xFF2
 28331                           indf0	equ	0xFEF
 28332                           postinc0	equ	0xFEE
 28333                           fsr0h	equ	0xFEA
 28334                           fsr0l	equ	0xFE9
 28335                           wreg	equ	0xFE8
 28336                           indf1	equ	0xFE7
 28337                           postinc1	equ	0xFE6
 28338                           postdec1	equ	0xFE5
 28339                           fsr1h	equ	0xFE2
 28340                           fsr1l	equ	0xFE1
 28341                           bsr	equ	0xFE0
 28342                           indf2	equ	0xFDF
 28343                           postinc2	equ	0xFDE
 28344                           postdec2	equ	0xFDD
 28345                           plusw2	equ	0xFDB
 28346                           fsr2h	equ	0xFDA
 28347                           fsr2l	equ	0xFD9
 28348                           status	equ	0xFD8
 28349                           
 28350 ;; *************** function _ReadUSART *****************
 28351 ;; Defined at:
 28352 ;;		line 16 in file "C:\Program Files (x86)\Microchip\xc8\v1.21\sources\pic18\plib\USART\uread.c"
 28353 ;; Parameters:    Size  Location     Type
 28354 ;;		None
 28355 ;; Auto vars:     Size  Location     Type
 28356 ;;  data            1    0[COMRAM] unsigned char 
 28357 ;; Return value:  Size  Location     Type
 28358 ;;                  1    wreg      unsigned char 
 28359 ;; Registers used:
 28360 ;;		wreg, status,2, status,0
 28361 ;; Tracked objects:
 28362 ;;		On entry : 0/0
 28363 ;;		On exit  : 0/0
 28364 ;;		Unchanged: 0/0
 28365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
 28366 ;;      Params:         0       0       0       0       0       0       0
 28367 ;;      Locals:         1       0       0       0       0       0       0
 28368 ;;      Temps:          0       0       0       0       0       0       0
 28369 ;;      Totals:         1       0       0       0       0       0       0
 28370 ;;Total ram usage:        1 bytes
 28371 ;; Hardware stack levels used:    1
 28372 ;; This function calls:
 28373 ;;		Nothing
 28374 ;; This function is called by:
 28375 ;;		_Interrupt
 28376 ;; This function uses a non-reentrant model
 28377 ;;
 28378                           
 28379                           	psect	text89
 28380  00579E                     __ptext89:
 28381                           	opt stack 0
 28382  00579E                     _ReadUSART:
 28383                           	opt stack 21
 28384                           
 28385                           ; BSR set to: 1
 28386                           ;incstack = 0
 28387                           ;incstack = 0
 28388  00579E  0EF2               	movlw	242
 28389  0057A0  1631               	andwf	_USART_Status,f,c
 28390  0057A2  ACAB               	btfss	4011,6,c	;volatile
 28391  0057A4  D003               	goto	i1l1868
 28392  0057A6  9031               	bcf	_USART_Status,0,c
 28393  0057A8  B0AB               	btfsc	4011,0,c	;volatile
 28394  0057AA  8031               	bsf	_USART_Status,0,c
 28395  0057AC                     i1l1868:
 28396  0057AC  B4AB               	btfsc	4011,2,c	;volatile
 28397  0057AE  8431               	bsf	_USART_Status,2,c
 28398  0057B0  B2AB               	btfsc	4011,1,c	;volatile
 28399  0057B2  8631               	bsf	_USART_Status,3,c
 28400  0057B4  CFAE F001          	movff	4014,ReadUSART@data	;volatile
 28401  0057B8  5001               	movf	ReadUSART@data,w,c
 28402  0057BA  0012               	return	
 28403  0057BC                     __end_of_ReadUSART:
 28404                           	opt stack 0
 28405                           tblptru	equ	0xFF8
 28406                           tblptrh	equ	0xFF7
 28407                           tblptrl	equ	0xFF6
 28408                           tablat	equ	0xFF5
 28409                           prodh	equ	0xFF4
 28410                           prodl	equ	0xFF3
 28411                           intcon	equ	0xFF2
 28412                           indf0	equ	0xFEF
 28413                           postinc0	equ	0xFEE
 28414                           fsr0h	equ	0xFEA
 28415                           fsr0l	equ	0xFE9
 28416                           wreg	equ	0xFE8
 28417                           indf1	equ	0xFE7
 28418                           postinc1	equ	0xFE6
 28419                           postdec1	equ	0xFE5
 28420                           fsr1h	equ	0xFE2
 28421                           fsr1l	equ	0xFE1
 28422                           bsr	equ	0xFE0
 28423                           indf2	equ	0xFDF
 28424                           postinc2	equ	0xFDE
 28425                           postdec2	equ	0xFDD
 28426                           plusw2	equ	0xFDB
 28427                           fsr2h	equ	0xFDA
 28428                           fsr2l	equ	0xFD9
 28429                           status	equ	0xFD8
 28430                           tblptru	equ	0xFF8
 28431                           tblptrh	equ	0xFF7
 28432                           tblptrl	equ	0xFF6
 28433                           tablat	equ	0xFF5
 28434                           prodh	equ	0xFF4
 28435                           prodl	equ	0xFF3
 28436                           intcon	equ	0xFF2
 28437                           indf0	equ	0xFEF
 28438                           postinc0	equ	0xFEE
 28439                           fsr0h	equ	0xFEA
 28440                           fsr0l	equ	0xFE9
 28441                           wreg	equ	0xFE8
 28442                           indf1	equ	0xFE7
 28443                           postinc1	equ	0xFE6
 28444                           postdec1	equ	0xFE5
 28445                           fsr1h	equ	0xFE2
 28446                           fsr1l	equ	0xFE1
 28447                           bsr	equ	0xFE0
 28448                           indf2	equ	0xFDF
 28449                           postinc2	equ	0xFDE
 28450                           postdec2	equ	0xFDD
 28451                           plusw2	equ	0xFDB
 28452                           fsr2h	equ	0xFDA
 28453                           fsr2l	equ	0xFD9
 28454                           status	equ	0xFD8
 28455                           
 28456                           	psect	rparam
 28457  0000                     tblptru	equ	0xFF8
 28458                           tblptrh	equ	0xFF7
 28459                           tblptrl	equ	0xFF6
 28460                           tablat	equ	0xFF5
 28461                           prodh	equ	0xFF4
 28462                           prodl	equ	0xFF3
 28463                           intcon	equ	0xFF2
 28464                           indf0	equ	0xFEF
 28465                           postinc0	equ	0xFEE
 28466                           fsr0h	equ	0xFEA
 28467                           fsr0l	equ	0xFE9
 28468                           wreg	equ	0xFE8
 28469                           indf1	equ	0xFE7
 28470                           postinc1	equ	0xFE6
 28471                           postdec1	equ	0xFE5
 28472                           fsr1h	equ	0xFE2
 28473                           fsr1l	equ	0xFE1
 28474                           bsr	equ	0xFE0
 28475                           indf2	equ	0xFDF
 28476                           postinc2	equ	0xFDE
 28477                           postdec2	equ	0xFDD
 28478                           plusw2	equ	0xFDB
 28479                           fsr2h	equ	0xFDA
 28480                           fsr2l	equ	0xFD9
 28481                           status	equ	0xFD8
 28482                           tblptru	equ	0xFF8
 28483                           tblptrh	equ	0xFF7
 28484                           tblptrl	equ	0xFF6
 28485                           tablat	equ	0xFF5
 28486                           prodh	equ	0xFF4
 28487                           prodl	equ	0xFF3
 28488                           intcon	equ	0xFF2
 28489                           indf0	equ	0xFEF
 28490                           postinc0	equ	0xFEE
 28491                           fsr0h	equ	0xFEA
 28492                           fsr0l	equ	0xFE9
 28493                           wreg	equ	0xFE8
 28494                           indf1	equ	0xFE7
 28495                           postinc1	equ	0xFE6
 28496                           postdec1	equ	0xFE5
 28497                           fsr1h	equ	0xFE2
 28498                           fsr1l	equ	0xFE1
 28499                           bsr	equ	0xFE0
 28500                           indf2	equ	0xFDF
 28501                           postinc2	equ	0xFDE
 28502                           postdec2	equ	0xFDD
 28503                           plusw2	equ	0xFDB
 28504                           fsr2h	equ	0xFDA
 28505                           fsr2l	equ	0xFD9
 28506                           status	equ	0xFD8


Data Sizes:
    Strings     4055
    Constant    120
    Data        0
    BSS         1144
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     38      66
    BANK0           160    124     134
    BANK1           256      0     230
    BANK2           256     61     189
    BANK3           256      0     256
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    ?_strcspn	unsigned int  size(2) Largest target is 0

    ?_strspn	unsigned int  size(2) Largest target is 0

    ?_strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_strnicmp	int  size(2) Largest target is 0

    ?___lwmod	unsigned int  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lwdiv	unsigned int  size(2) Largest target is 0

    ?_utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?___llmod	unsigned long  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?___lldiv	unsigned long  size(2) Largest target is 0

    ?___wmul	unsigned int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    ?__ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ?_strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    ?_ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ?_strlen	unsigned int  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    ?_strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    ?_strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    ?_memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ?_atoi	int  size(2) Largest target is 0

    ?_strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    ?_fifo_read	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    ?_fifo_getFree	unsigned short  size(2) Largest target is 0

    ?_fifo_write	unsigned short  size(1) Largest target is 1
		 -> ECANSendMessage@dataLen(BANK0[1]), 

    strspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strichr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcspn@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strcspn@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s2	PTR const unsigned char  size(2) Largest target is 2
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), STR_30(CODE[2]), 

    strtok@sp	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strtok@s1	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strnicmp@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    strnicmp@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 80
		 -> printGUID@buf(BANK0[3]), STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), 
		 -> STR_124(CODE[5]), STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), 
		 -> STR_118(CODE[11]), STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), 
		 -> STR_100(CODE[5]), STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), 
		 -> wrkbuf(BANK1[80]), STR_49(CODE[5]), STR_47(CODE[5]), STR_45(CODE[5]), 
		 -> STR_43(CODE[4]), STR_41(CODE[5]), STR_38(CODE[3]), STR_29(CODE[3]), 
		 -> STR_20(CODE[7]), STR_18(CODE[8]), STR_16(CODE[7]), STR_14(CODE[9]), 
		 -> STR_12(CODE[6]), STR_10(CODE[7]), STR_8(CODE[5]), STR_6(CODE[5]), 
		 -> cmdbuf(BANK1[80]), 

    sp__strichr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    stristr@s2	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_129(CODE[6]), STR_128(CODE[8]), STR_126(CODE[6]), STR_124(CODE[5]), 
		 -> STR_122(CODE[8]), STR_121(CODE[6]), STR_120(CODE[9]), STR_118(CODE[11]), 
		 -> STR_116(CODE[8]), STR_114(CODE[4]), STR_113(CODE[5]), STR_100(CODE[5]), 
		 -> STR_87(CODE[7]), STR_81(CODE[5]), STR_72(CODE[5]), STR_49(CODE[5]), 
		 -> STR_47(CODE[5]), STR_45(CODE[5]), STR_43(CODE[4]), STR_41(CODE[5]), 
		 -> STR_38(CODE[3]), STR_29(CODE[3]), STR_20(CODE[7]), STR_18(CODE[8]), 
		 -> STR_16(CODE[7]), STR_14(CODE[9]), STR_12(CODE[6]), STR_10(CODE[7]), 
		 -> STR_8(CODE[5]), STR_6(CODE[5]), 

    stristr@s1	PTR const unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    strchr@ptr	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    strcat@from	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_252(CODE[2]), STR_251(CODE[2]), printNodeFirmwareVersion@buf(BANK0[3]), STR_246(CODE[2]), 
		 -> STR_245(CODE[3]), STR_244(CODE[2]), printGUID@buf(BANK0[3]), 

    strcat@to	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    strcat@cp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    memset@p1	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memset@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@d1	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    memcpy@s1	PTR const void  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    ultoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__ltoa	PTR unsigned char  size(2) Largest target is 0

    utoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__utoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@buf	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    itoa@cp	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    putsUSART@data	PTR unsigned char  size(2) Largest target is 80
		 -> STR_262(CODE[3]), STR_261(CODE[23]), STR_260(CODE[10]), STR_259(CODE[10]), 
		 -> STR_258(CODE[12]), STR_257(CODE[8]), STR_256(CODE[7]), STR_255(CODE[3]), 
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), STR_254(CODE[10]), STR_253(CODE[3]), STR_250(CODE[20]), 
		 -> STR_249(CODE[3]), STR_248(CODE[14]), STR_247(CODE[3]), STR_243(CODE[8]), 
		 -> STR_242(CODE[15]), STR_241(CODE[67]), STR_240(CODE[3]), STR_239(CODE[27]), 
		 -> STR_238(CODE[67]), STR_237(CODE[39]), STR_236(CODE[62]), STR_235(CODE[55]), 
		 -> STR_234(CODE[49]), STR_233(CODE[67]), STR_232(CODE[47]), STR_231(CODE[47]), 
		 -> STR_230(CODE[34]), STR_229(CODE[71]), STR_228(CODE[20]), STR_227(CODE[78]), 
		 -> STR_226(CODE[24]), STR_225(CODE[77]), STR_224(CODE[67]), STR_223(CODE[69]), 
		 -> STR_222(CODE[47]), STR_221(CODE[40]), STR_220(CODE[39]), STR_219(CODE[33]), 
		 -> STR_218(CODE[23]), STR_217(CODE[56]), STR_216(CODE[24]), STR_215(CODE[44]), 
		 -> STR_214(CODE[50]), STR_213(CODE[31]), STR_212(CODE[50]), STR_211(CODE[51]), 
		 -> STR_210(CODE[46]), STR_209(CODE[44]), STR_208(CODE[27]), STR_207(CODE[39]), 
		 -> STR_206(CODE[39]), STR_205(CODE[52]), STR_204(CODE[54]), STR_203(CODE[55]), 
		 -> STR_202(CODE[3]), STR_199(CODE[24]), STR_198(CODE[57]), STR_197(CODE[53]), 
		 -> STR_196(CODE[58]), STR_195(CODE[3]), STR_192(CODE[25]), STR_191(CODE[3]), 
		 -> STR_188(CODE[24]), STR_187(CODE[3]), STR_184(CODE[24]), STR_183(CODE[3]), 
		 -> STR_180(CODE[24]), STR_179(CODE[3]), STR_176(CODE[23]), STR_175(CODE[3]), 
		 -> STR_172(CODE[21]), STR_171(CODE[3]), STR_168(CODE[22]), STR_167(CODE[3]), 
		 -> STR_164(CODE[17]), STR_163(CODE[3]), STR_160(CODE[18]), STR_159(CODE[4]), 
		 -> STR_158(CODE[11]), STR_157(CODE[2]), STR_154(CODE[7]), STR_151(CODE[7]), 
		 -> STR_148(CODE[9]), STR_145(CODE[7]), STR_142(CODE[8]), STR_139(CODE[7]), 
		 -> STR_138(CODE[2]), STR_137(CODE[2]), STR_136(CODE[6]), STR_135(CODE[8]), 
		 -> STR_134(CODE[8]), STR_133(CODE[20]), STR_132(CODE[27]), STR_131(CODE[6]), 
		 -> STR_130(CODE[33]), STR_127(CODE[26]), STR_125(CODE[32]), STR_123(CODE[28]), 
		 -> STR_119(CODE[6]), STR_117(CODE[40]), STR_115(CODE[44]), STR_112(CODE[6]), 
		 -> STR_111(CODE[39]), STR_109(CODE[36]), STR_107(CODE[37]), STR_105(CODE[40]), 
		 -> STR_103(CODE[37]), STR_102(CODE[50]), STR_99(CODE[6]), STR_98(CODE[41]), 
		 -> STR_96(CODE[38]), STR_94(CODE[39]), STR_92(CODE[42]), STR_90(CODE[39]), 
		 -> STR_89(CODE[66]), STR_86(CODE[6]), STR_85(CODE[3]), STR_82(CODE[20]), 
		 -> STR_80(CODE[33]), STR_79(CODE[35]), STR_78(CODE[24]), STR_76(CODE[33]), 
		 -> STR_74(CODE[24]), STR_71(CODE[54]), STR_70(CODE[6]), STR_69(CODE[3]), 
		 -> STR_64(CODE[34]), STR_63(CODE[3]), STR_60(CODE[4]), wrkbuf(BANK1[80]), 
		 -> STR_55(CODE[15]), STR_53(CODE[33]), STR_51(CODE[24]), STR_48(CODE[6]), 
		 -> STR_46(CODE[6]), STR_44(CODE[6]), STR_42(CODE[6]), STR_40(CODE[18]), 
		 -> STR_39(CODE[6]), STR_37(CODE[33]), STR_36(CODE[6]), STR_28(CODE[24]), 
		 -> STR_27(CODE[18]), STR_26(CODE[20]), STR_25(CODE[25]), STR_24(CODE[22]), 
		 -> STR_23(CODE[19]), STR_22(CODE[20]), STR_21(CODE[20]), STR_19(CODE[6]), 
		 -> STR_17(CODE[6]), STR_15(CODE[6]), STR_13(CODE[6]), STR_11(CODE[6]), 
		 -> STR_9(CODE[6]), STR_7(CODE[31]), STR_5(CODE[29]), STR_4(CODE[55]), 
		 -> STR_3(CODE[35]), STR_2(CODE[58]), STR_1(CODE[37]), 

    sprintf$2031	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_264(CODE[17]), STR_263(CODE[17]), 

    sprintf@_val._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_201(CODE[3]), STR_200(CODE[7]), STR_194(CODE[3]), STR_193(CODE[7]), 
		 -> STR_190(CODE[4]), STR_189(CODE[8]), STR_186(CODE[4]), STR_185(CODE[8]), 
		 -> STR_182(CODE[4]), STR_181(CODE[8]), STR_178(CODE[4]), STR_177(CODE[8]), 
		 -> STR_174(CODE[4]), STR_173(CODE[7]), STR_170(CODE[4]), STR_169(CODE[7]), 
		 -> STR_166(CODE[4]), STR_165(CODE[7]), STR_162(CODE[4]), STR_161(CODE[7]), 
		 -> STR_156(CODE[3]), STR_155(CODE[7]), STR_153(CODE[3]), STR_152(CODE[7]), 
		 -> STR_150(CODE[3]), STR_149(CODE[7]), STR_147(CODE[3]), STR_146(CODE[7]), 
		 -> STR_144(CODE[3]), STR_143(CODE[7]), STR_141(CODE[3]), STR_140(CODE[7]), 
		 -> STR_84(CODE[3]), STR_83(CODE[7]), STR_68(CODE[3]), STR_67(CODE[7]), 
		 -> STR_66(CODE[3]), STR_65(CODE[7]), STR_62(CODE[3]), STR_61(CODE[7]), 
		 -> STR_59(CODE[3]), STR_58(CODE[7]), STR_57(CODE[3]), STR_56(CODE[7]), 

    sprintf@sp	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    ?_sprintf	int  size(1) Largest target is 4
		 -> ECANSendMessage@dataLen(BANK0[1]), getVSCPFrame@id(BANK0[4]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2011$_cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    _val._str._cp	PTR const unsigned char  size(1) Largest target is 1
		 -> sprintf@c(BANK0[1]), 

    hexStringToBytes@buf	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    hexStringToBytes@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    hexStringToBytes@inhex	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    crc8@crc	PTR unsigned char  size(2) Largest target is 1
		 -> calcCRC@crc(BANK0[1]), sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), 
		 -> receiveSendEventCANAL@crc(BANK0[1]), sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), 
		 -> sendVSCPDriverErrorFrame@crc(BANK0[1]), NULL(NULL[0]), 

    fifo_getFree@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_getFree@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), 

    fifo_write@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_write@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_write@buf	PTR const void  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(COMRAM[4]), c(COMRAM[1]), 

    fifo_write@p	PTR const unsigned char  size(2) Largest target is 8
		 -> dlc(COMRAM[1]), data(BANK1[8]), id(COMRAM[4]), c(COMRAM[1]), 

    fifo_read@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_read@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    fifo_read@buf	PTR const void  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK0[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_read@p	PTR unsigned char  size(2) Largest target is 8
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@data(BANK0[8]), 
		 -> receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@data(BANK0[8]), receiveSendEventCANAL@dlc(BANK0[1]), 
		 -> receiveSendEventCANAL@id(BANK0[4]), doModeSLCAN@c(BANK0[1]), doModeVscp@c(BANK0[1]), vscpData(BANK1[8]), 
		 -> vscpSize(BANK0[1]), doModeVerbose@c(BANK2[1]), main@c(BANK0[1]), 

    fifo_init@buf	PTR const void  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    fifo_init@f	PTR struct . size(2) Largest target is 9
		 -> canInputFifo(BANK1[8]), serialInputFifo(BANK1[8]), 

    _ECANPointBuffer@pt	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    _RegsToCANID@val	PTR unsigned long  size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    _RegsToCANID@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    _CANIDToRegs@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), RXM1SIDH(ABS[1]), RXM0SIDH(ABS[1]), 

    _CANIDToRegs@Value	PTR struct _CAN_MESSAGE_ID size(1) Largest target is 4
		 -> _CANIDToRegs@val(COMRAM[4]), 

    ECANReceiveMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> data(BANK1[8]), 

    ECANReceiveMessage@id	PTR unsigned long  size(1) Largest target is 4
		 -> id(COMRAM[4]), 

    ECANReceiveMessage@dataLen	PTR unsigned char  size(1) Largest target is 1
		 -> dlc(COMRAM[1]), 

    ECANReceiveMessage@savedPtr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    sp___ECANPointBuffer	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> B5CON(ABS[1]), B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), 
		 -> B1CON(ABS[1]), B0CON(ABS[1]), RXB1CON(ABS[1]), RXB0CON(ABS[1]), 

    ECANReceiveMessage@msgFlags	PTR enum E16324 size(1) Largest target is 1
		 -> flags(COMRAM[1]), 

    ECANSendMessage@data	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    ECANSendMessage@tempPtr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@ptr	PTR unsigned char  size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    ECANSendMessage@pb	PTR unsigned char [9] size(2) Largest target is 1
		 -> TXB2CON(ABS[1]), TXB1CON(ABS[1]), TXB0CON(ABS[1]), B5CON(ABS[1]), 
		 -> B4CON(ABS[1]), B3CON(ABS[1]), B2CON(ABS[1]), B1CON(ABS[1]), 
		 -> B0CON(ABS[1]), 

    getCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveSendMultiEventCANAL@data(BANK0[8]), receiveSendEventCANAL@data(BANK0[8]), vscpData(BANK1[8]), 

    getCANFrame@pdlc	PTR unsigned char  size(1) Largest target is 1
		 -> receiveSendEventSLCAN@dlc(BANK0[1]), receiveSendMultiEventCANAL@dlc(BANK0[1]), receiveSendEventCANAL@dlc(BANK0[1]), vscpSize(BANK0[1]), 

    getCANFrame@pid	PTR unsigned long  size(1) Largest target is 4
		 -> getVSCPFrame@id(BANK0[4]), receiveSendEventSLCAN@id(BANK0[4]), receiveSendMultiEventCANAL@id(BANK0[4]), receiveSendEventCANAL@id(BANK0[4]), 

    sendCANFrame@pdata	PTR unsigned char  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    getVSCPFrame@pPriority	PTR unsigned char  size(1) Largest target is 1
		 -> vscpPriority(BANK0[1]), 

    getVSCPFrame@pvscpclass	PTR unsigned short  size(1) Largest target is 2
		 -> vscpClass(COMRAM[2]), 

    getVSCPFrame@pvscptype	PTR unsigned char  size(1) Largest target is 1
		 -> vscpType(BANK0[1]), 

    getVSCPFrame@pNodeId	PTR unsigned char  size(1) Largest target is 1
		 -> vscpNodeId(BANK0[1]), 

    getVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    getVSCPFrame@pSize	PTR unsigned char  size(1) Largest target is 1
		 -> vscpSize(BANK0[1]), 

    sendVSCPFrame@pData	PTR unsigned char  size(2) Largest target is 8
		 -> vscpData(BANK1[8]), 

    printMDF@p	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    sp__strcat	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    printErrors$1429	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_201(CODE[3]), STR_200(CODE[7]), 

    printErrors$1420	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_194(CODE[3]), STR_193(CODE[7]), 

    printErrors$1414	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_190(CODE[4]), STR_189(CODE[8]), 

    printErrors$1408	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_186(CODE[4]), STR_185(CODE[8]), 

    printErrors$1402	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_182(CODE[4]), STR_181(CODE[8]), 

    printErrors$1396	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_178(CODE[4]), STR_177(CODE[8]), 

    printStatistics$1389	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_174(CODE[4]), STR_173(CODE[7]), 

    printStatistics$1383	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_170(CODE[4]), STR_169(CODE[7]), 

    printStatistics$1377	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_166(CODE[4]), STR_165(CODE[7]), 

    printStatistics$1371	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_162(CODE[4]), STR_161(CODE[7]), 

    calcCRC@p	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    writeRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value_1164(BANK2[1]), 

    readRegisterExtended@value	PTR unsigned char  size(2) Largest target is 1
		 -> doModeVerbose@value(BANK2[1]), 

    readRegister@value	PTR unsigned char  size(1) Largest target is 1
		 -> printNodeFirmwareVersion@value(BANK0[1]), printMDF@value(BANK0[1]), printGUID@value(BANK0[1]), findNodes@value(BANK0[1]), 

    sp__itoa	PTR unsigned char  size(2) Largest target is 80
		 -> printFirmwareVersion@wrkbuf(BANK0[20]), printNodeFirmwareVersion@buf(BANK0[3]), printGUID@buf(BANK0[3]), wrkbuf(BANK1[80]), 

    sp__ultoa	PTR unsigned char  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), 

    receivePrintEventVerbose$1303	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_156(CODE[3]), STR_155(CODE[7]), 

    receivePrintEventVerbose$1298	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_153(CODE[3]), STR_152(CODE[7]), 

    receivePrintEventVerbose$1293	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_150(CODE[3]), STR_149(CODE[7]), 

    receivePrintEventVerbose$1288	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_147(CODE[3]), STR_146(CODE[7]), 

    receivePrintEventVerbose$1283	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_144(CODE[3]), STR_143(CODE[7]), 

    receivePrintEventVerbose$1278	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_141(CODE[3]), STR_140(CODE[7]), 

    sendEscapedUartData@pcrc	PTR unsigned char  size(2) Largest target is 1
		 -> sendVSCPModeCapabilities@crc(BANK0[1]), receiveSendEventVSCP@crc(COMRAM[1]), receiveSendMultiEventCANAL@crc(BANK0[1]), receiveSendEventCANAL@crc(BANK0[1]), 
		 -> sendVSCPDriverCommandReply@crc(BANK0[1]), sendVSCPDriverNack@crc(BANK0[1]), sendVSCPDriverAck@crc(BANK0[1]), sendVSCPDriverErrorFrame@crc(BANK0[1]), 
		 -> NULL(NULL[0]), 

    sp__memcpy	PTR void  size(2) Largest target is 8
		 -> receiveVSCPModeCanalMsg@data(BANK0[8]), vscpData(BANK1[8]), 

    doModeVerbose@p_1210	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1190	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1181	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_84(CODE[3]), STR_83(CODE[7]), 

    doModeVerbose@preg_1169	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1165	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose$1156	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_68(CODE[3]), STR_67(CODE[7]), 

    doModeVerbose$1152	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_66(CODE[3]), STR_65(CODE[7]), 

    doModeVerbose$1146	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_62(CODE[3]), STR_61(CODE[7]), 

    doModeVerbose$1141	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_59(CODE[3]), STR_58(CODE[7]), 

    doModeVerbose$1129	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_57(CODE[3]), STR_56(CODE[7]), 

    sp__strchr	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@preg	PTR unsigned char  size(2) Largest target is 80
		 -> STR_110(CODE[2]), STR_108(CODE[2]), STR_106(CODE[2]), STR_104(CODE[2]), 
		 -> STR_101(CODE[2]), STR_97(CODE[2]), STR_95(CODE[2]), STR_93(CODE[2]), 
		 -> STR_91(CODE[2]), STR_88(CODE[2]), STR_77(CODE[2]), STR_75(CODE[2]), 
		 -> STR_73(CODE[2]), STR_54(CODE[2]), STR_52(CODE[2]), STR_50(CODE[2]), 
		 -> STR_35(CODE[2]), STR_34(CODE[2]), STR_33(CODE[2]), STR_32(CODE[2]), 
		 -> STR_31(CODE[2]), NULL(NULL[0]), STR_30(CODE[2]), cmdbuf(BANK1[80]), 

    doModeVerbose@p_1117	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> cmdbuf(BANK1[80]), 

    sp__memset	PTR void  size(2) Largest target is 80
		 -> wrkbuf(BANK1[80]), vscpData(BANK1[8]), cmdbuf(BANK1[80]), 

    sp__strtok	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    doModeVerbose@p	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    sp__stristr	PTR unsigned char  size(2) Largest target is 80
		 -> NULL(NULL[0]), cmdbuf(BANK1[80]), 

    canInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    S27$buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 

    serialInputFifo.buf	PTR unsigned char  size(2) Largest target is 494
		 -> can_inputBuffer(BIGRAM[494]), serial_inputBuffer(BANK2[128]), 


Critical Paths under _main in COMRAM

    _doModeSLCAN->_hexStringToBytes
    _hexStringToBytes->_strlen
    _receiveSendEventSLCAN->_itoa
    _ultoa->___llmod
    _sendVSCPDriverCommandReply->_crc8
    _sendVSCPModeCapabilities->_crc8
    _sendVSCPDriverAck->_crc8
    _sendVSCPDriverErrorFrame->_crc8
    _sendVSCPDriverNack->_crc8
    _calcCRC->_crc8
    _receiveSendEventCANAL->_crc8
    _receiveSendMultiEventCANAL->_crc8
    _sendEscapedUartData->_crc8
    _crc8->_init_crc8
    _doModeVerbose->_setFilter
    _doModeVerbose->__CANIDToRegs
    _printBinary->_WriteUSART
    _findNodes->_itoa
    _printGUID->_itoa
    _printNodeFirmwareVersion->_itoa
    _ECANSendMessage->__CANIDToRegs
    _printHelp->_putsUSART
    _atoi->___wmul
    _strtok->_strspn
    _strtok->_strcspn
    _strcspn->_strchr
    _strspn->_strchr
    _stristr->_strnicmp
    _strichr->_toupper
    _strnicmp->_strlen
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _utoa->___lwdiv
    _printMode->_putsUSART
    _putsUSART->_WriteUSART
    _init->_WriteTimer0
    _ECANInitialize->_ECANSetOperationMode
    _vscp_restoreDefaults->_init_app_eeprom
    _init_app_eeprom->_Write_b_eep
    _init_app_ram->_Read_b_eep

Critical Paths under _Interrupt in COMRAM

    _Interrupt->_ECANReceiveMessage
    _ECANReceiveMessage->__RegsToCANID

Critical Paths under _main in BANK0

    _main->_doModeVerbose
    _doModeSLCAN->_sendCANFrame
    _receiveSendEventSLCAN->_ultoa
    _ultoa->___llmod
    _doModeVscp->_receiveVSCPModeCanalMsg
    _sendVSCPDriverCommandReply->_sendEscapedUartData
    _sendVSCPModeCapabilities->_sendEscapedUartData
    _receiveVSCPModeCanalMsg->_sendCANFrame
    _sendVSCPDriverAck->_sendEscapedUartData
    _sendVSCPDriverErrorFrame->_sendEscapedUartData
    _sendVSCPDriverNack->_sendEscapedUartData
    _calcCRC->_crc8
    _receiveSendEventCANAL->_getCANFrame
    _receiveSendMultiEventCANAL->_getCANFrame
    _sendEscapedUartData->_crc8
    _doModeVerbose->_findNodes
    _writeRegisterExtended->_sendVSCPFrame
    _readRegisterExtended->_sendVSCPFrame
    _findNodes->_printNodeFirmwareVersion
    _findNodes->_printGUID
    _printMDF->_readRegister
    _printGUID->_readRegister
    _printNodeFirmwareVersion->_readRegister
    _readRegister->_sendVSCPFrame
    _sendVSCPFrame->_sendCANFrame
    _sendCANFrame->_ECANSendMessage
    _ECANSendMessage->__CANIDToRegs
    _printErrors->_sprintf
    _printStatistics->_sprintf
    _strtok->_strspn
    _strtok->_strcspn
    _stristr->_strnicmp
    _receivePrintEventVerbose->_sprintf
    _getVSCPFrame->_getCANFrame
    _getCANFrame->_fifo_read
    _sprintf->___llmod
    ___llmod->___lldiv
    _printFirmwareVersion->_itoa
    _itoa->_utoa

Critical Paths under _Interrupt in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Interrupt in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_doModeVerbose

Critical Paths under _Interrupt in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Interrupt in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Interrupt in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Interrupt in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     2      5  131655
                                            117 BANK0      7     2      5
                          _fifo_init
                          _init_crc8
                         _Read_b_eep
               _vscp_restoreDefaults
                               _init
                          _putsUSART
               _printFirmwareVersion
                          _printMode
                          _fifo_read
                      _doModeVerbose
                         _doModeVscp
                        _doModeSLCAN
                     _doModeVscpNode
 ---------------------------------------------------------------------------------
 (1) _doModeVscpNode                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _doModeSLCAN                                         14    14      0    9716
                                             45 BANK0     14    14      0
                          _putsUSART
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
               _ECANSetOperationMode
                             _memset
              _receiveSendEventSLCAN
                             _strlen
                   _hexStringToBytes
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _hexStringToBytes                                    14     9      5     765
                                             33 COMRAM     5     0      5
                                              0 BANK0      9     9      0
                             _strlen
                     _nibbleFromChar
 ---------------------------------------------------------------------------------
 (3) _nibbleFromChar                                       1     1      0     279
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventSLCAN                               10    10      0    4264
                                             26 BANK0     10    10      0
                          _putsUSART
                         _WriteUSART
                             _strlen
                        _getCANFrame
                              _ultoa
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _ultoa                                               13     5      8     910
                                             13 BANK0     13     5      8
                            ___lldiv
                            ___llmod
 ---------------------------------------------------------------------------------
 (1) _doModeVscp                                           1     1      0   20334
                                             78 BANK0      1     1      0
                          _fifo_read
               _ECANSetOperationMode
         _receiveSendMultiEventCANAL
              _receiveSendEventCANAL
                            _calcCRC
                 _sendVSCPDriverNack
           _sendVSCPDriverErrorFrame
                  _sendVSCPDriverAck
            _receiveVSCPModeCanalMsg
       _receiveVSCPModeMultiCanalMsg
           _sendVSCPModeCapabilities
         _sendVSCPDriverCommandReply
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverCommandReply                           3     2      1    1720
                                              6 BANK0      3     2      1
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPModeCapabilities                             1     1      0    1636
                                              6 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeMultiCanalMsg                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _receiveVSCPModeCanalMsg                             33    33      0    3302
                                             45 BANK0     33    33      0
                             _memcpy
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _memcpy                                              10     4      6     242
                                             29 COMRAM     6     0      6
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverAck                                    1     1      0    1552
                                              6 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverErrorFrame                             2     2      0    1636
                                              6 BANK0      2     2      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _sendVSCPDriverNack                                   1     1      0    1552
                                              6 BANK0      1     1      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _calcCRC                                              5     2      3     748
                                              3 BANK0      5     2      3
                               _crc8
 ---------------------------------------------------------------------------------
 (2) _receiveSendEventCANAL                               15    15      0    3382
                                             11 BANK0     15    15      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (2) _receiveSendMultiEventCANAL                          17    17      0    3826
                                             11 BANK0     17    17      0
                         _WriteUSART
                _sendEscapedUartData
                               _crc8
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _sendEscapedUartData                                  3     1      2     785
                                              3 BANK0      3     1      2
                         _WriteUSART
                               _crc8
 ---------------------------------------------------------------------------------
 (3) _crc8                                                 5     2      3     460
                                             36 COMRAM     2     2      0
                                              0 BANK0      3     0      3
                          _init_crc8
 ---------------------------------------------------------------------------------
 (4) _init_crc8                                            7     7      0     334
                                             29 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _doModeVerbose                                       81    81      0   97524
                                             97 BANK0     20    20      0
                                              0 BANK2     61    61      0
                          _putsUSART
               _printFirmwareVersion
                          _fifo_read
                           _Busy_eep
                        _Write_b_eep
           _receivePrintEventVerbose
                            _stristr
               _ECANSetOperationMode
                             _strtok
                               _atoi
                             _memset
                      _sendVSCPFrame
                    _printStatistics
                        _printErrors
                          _printHelp
                          _findNodes
                             _strcpy
                             _strchr
               _readRegisterExtended
                            _sprintf
                         _WriteUSART
                        _printBinary
              _writeRegisterExtended
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                          _setFilter
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (2) _setFilter                                           15    11      4    2964
                                             29 COMRAM     9     5      4
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _writeRegisterExtended                               12     5      7    4962
                                             77 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _printBinary                                          5     5      0     161
                                             30 COMRAM     5     5      0
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (2) _readRegisterExtended                                12     5      7    4878
                                             77 BANK0     12     5      7
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     109
                                             29 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _findNodes                                            5     5      0   26621
                                             92 BANK0      5     5      0
                          _putsUSART
           _printNodeFirmwareVersion
                          _printGUID
                           _printMDF
                               _itoa
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printMDF                                             5     5      0    5318
                                             86 BANK0      5     5      0
                          _putsUSART
                             _memset
                       _readRegister
 ---------------------------------------------------------------------------------
 (2) _printGUID                                            6     6      0    7347
                                             86 BANK0      6     6      0
                          _putsUSART
                             _memset
                             _strlen
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _printNodeFirmwareVersion                             6     6      0    7127
                                             86 BANK0      6     6      0
                          _putsUSART
                             _memset
                               _itoa
                       _readRegister
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               6     2      4     143
                                             29 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _readRegister                                         9     5      4    4710
                                             77 BANK0      9     5      4
                      _sendVSCPFrame
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _sendVSCPFrame                                       32    24      8    3078
                                             45 BANK0     32    24      8
                       _sendCANFrame
 ---------------------------------------------------------------------------------
 (2) _sendCANFrame                                         7     0      7    2778
                                             38 BANK0      7     0      7
                    _ECANSendMessage
 ---------------------------------------------------------------------------------
 (3) _ECANSendMessage                                     37    29      8    2652
                                              1 BANK0     37    29      8
                       __CANIDToRegs
 ---------------------------------------------------------------------------------
 (4) __CANIDToRegs                                        10     3      7     966
                                             29 COMRAM     9     2      7
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _memset                                               8     2      6     137
                                             29 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _printHelp                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (2) _printErrors                                         12    12      0    5402
                                             43 BANK0     12    12      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _printStatistics                                      8     8      0    5328
                                             43 BANK0      8     8      0
                          _putsUSART
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _atoi                                                 7     5      2     799
                                             35 COMRAM     2     0      2
                                              0 BANK0      5     5      0
                            _isdigit
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _strtok                                               4     0      4    1098
                                              4 BANK0      4     0      4
                             _strspn
                            _strcspn
 ---------------------------------------------------------------------------------
 (3) _strcspn                                              6     2      4     354
                                             35 COMRAM     2     2      0
                                              0 BANK0      4     0      4
                             _strchr
 ---------------------------------------------------------------------------------
 (3) _strspn                                               6     2      4     354
                                             35 COMRAM     2     2      0
                                              0 BANK0      4     0      4
                             _strchr
 ---------------------------------------------------------------------------------
 (2) _strchr                                               6     2      4     168
                                             29 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _stristr                                              4     0      4    1186
                                              6 BANK0      4     0      4
                             _strlen
                           _strnicmp
                            _strichr
 ---------------------------------------------------------------------------------
 (3) _strichr                                              4     0      4     354
                                             30 COMRAM     4     0      4
                            _toupper
 ---------------------------------------------------------------------------------
 (3) _strnicmp                                             9     3      6     360
                                             33 COMRAM     3     3      0
                                              0 BANK0      6     0      6
                             _strlen (ARG)
                            _toupper
 ---------------------------------------------------------------------------------
 (4) _toupper                                              1     1      0     132
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _strlen                                               4     2      2     130
                                             29 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _receivePrintEventVerbose                            18    18      0    7022
                                             43 BANK0     18    18      0
                          _putsUSART
                            _sprintf
                       _getVSCPFrame
 ---------------------------------------------------------------------------------
 (4) _getVSCPFrame                                        15     9      6    1380
                                             11 BANK0     15     9      6
                        _getCANFrame
 ---------------------------------------------------------------------------------
 (3) _getCANFrame                                          4     1      3     906
                                             35 COMRAM     1     1      0
                                              8 BANK0      3     0      3
                          _fifo_read
 ---------------------------------------------------------------------------------
 (4) _fifo_read                                           14     8      6     612
                                             29 COMRAM     6     0      6
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             30    22      8    5087
                                             13 BANK0     30    22      8
                            _isdigit
                            ___lldiv
                            ___llmod
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     232
                                             29 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___llmod                                              9     1      8     232
                                             37 COMRAM     1     1      0
                                              5 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8     241
                                             29 COMRAM     8     0      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      99
                                             29 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _printFirmwareVersion                                20    20      0    2024
                                             15 BANK0     20    20      0
                          _putsUSART
                         _WriteUSART
                               _itoa
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 8     2      6    1600
                                             36 COMRAM     2     2      0
                                              9 BANK0      6     0      6
                               _utoa
 ---------------------------------------------------------------------------------
 (4) _utoa                                                 9     3      6    1280
                                              0 BANK0      9     3      6
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (5) ___lwmod                                              5     1      4     324
                                             29 COMRAM     5     1      4
 ---------------------------------------------------------------------------------
 (5) ___lwdiv                                              7     3      4     342
                                             29 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _printMode                                            0     0      0      93
                          _putsUSART
 ---------------------------------------------------------------------------------
 (3) _putsUSART                                            4     2      2      93
                                             30 COMRAM     4     2      2
                         _WriteUSART
 ---------------------------------------------------------------------------------
 (3) _WriteUSART                                           1     1      0      31
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     418
                        _WriteTimer0
                       _init_app_ram
                          _OpenUSART
                         _OpenTimer0
                     _ECANInitialize
 ---------------------------------------------------------------------------------
 (2) _ECANInitialize                                       0     0      0      62
               _ECANSetOperationMode
 ---------------------------------------------------------------------------------
 (2) _ECANSetOperationMode                                 1     1      0      62
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenTimer0                                           1     1      0      44
                                             29 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     220
                                             29 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _WriteTimer0                                          4     2      2      70
                                             29 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _vscp_restoreDefaults                                 0     0      0     257
                       _init_app_ram
                    _init_app_eeprom
 ---------------------------------------------------------------------------------
 (2) _init_app_eeprom                                      1     1      0     235
                                             33 COMRAM     1     1      0
                           _Busy_eep
                        _Write_b_eep
 ---------------------------------------------------------------------------------
 (2) _Write_b_eep                                          4     1      3      99
                                             29 COMRAM     4     1      3
 ---------------------------------------------------------------------------------
 (2) _Busy_eep                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _init_app_ram                                         0     0      0      22
                         _Read_b_eep
 ---------------------------------------------------------------------------------
 (3) _Read_b_eep                                           2     0      2      22
                                             29 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _fifo_init                                            6     0      6     132
                                             29 COMRAM     6     0      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Interrupt                                           10    10      0    1982
                                             19 COMRAM    10    10      0
                          _ReadUSART
                         _fifo_write
                 _ECANReceiveMessage
                       _fifo_getFree
                      i1_WriteTimer0
 ---------------------------------------------------------------------------------
 (10) i1_WriteTimer0                                       4     2      2     221
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (10) _fifo_getFree                                       10     8      2     154
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (10) _ECANReceiveMessage                                 12     8      4    1180
                                              7 COMRAM    12     8      4
                   __ECANPointBuffer
                       __RegsToCANID
 ---------------------------------------------------------------------------------
 (11) __RegsToCANID                                        7     3      4     489
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (11) __ECANPointBuffer                                    6     3      3      52
                                              0 COMRAM     6     3      3
 ---------------------------------------------------------------------------------
 (10) _fifo_write                                         18    10      8     378
                                              0 COMRAM    18    10      8
 ---------------------------------------------------------------------------------
 (10) _ReadUSART                                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _fifo_init
   _init_crc8
   _Read_b_eep
   _vscp_restoreDefaults
     _init_app_ram
       _Read_b_eep
     _init_app_eeprom
       _Busy_eep
       _Write_b_eep
   _init
     _WriteTimer0
     _init_app_ram
       _Read_b_eep
     _OpenUSART
     _OpenTimer0
     _ECANInitialize
       _ECANSetOperationMode
   _putsUSART
     _WriteUSART
   _printFirmwareVersion
     _putsUSART
       _WriteUSART
     _WriteUSART
     _itoa
       _utoa
         ___lwdiv
         ___lwmod
   _printMode
     _putsUSART
       _WriteUSART
   _fifo_read
   _doModeVerbose
     _putsUSART
       _WriteUSART
     _printFirmwareVersion
       _putsUSART
         _WriteUSART
       _WriteUSART
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _receivePrintEventVerbose
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _stristr
       _strlen
       _strnicmp
         _strlen (ARG)
         _toupper (ARG)
       _strichr
         _toupper
     _ECANSetOperationMode
     _strtok
       _strspn
         _strchr
       _strcspn
         _strchr
     _atoi
       _isdigit
       ___wmul
     _memset
     _sendVSCPFrame
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _printStatistics
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printErrors
       _putsUSART
         _WriteUSART
       _sprintf
         _isdigit
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___wmul
     _printHelp
       _putsUSART
         _WriteUSART
     _findNodes
       _putsUSART
         _WriteUSART
       _printNodeFirmwareVersion
         _putsUSART
           _WriteUSART
         _memset
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printGUID
         _putsUSART
           _WriteUSART
         _memset
         _strlen
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
         _strcat
       _printMDF
         _putsUSART
           _WriteUSART
         _memset
         _readRegister
           _sendVSCPFrame
             _sendCANFrame
               _ECANSendMessage
                 __CANIDToRegs
           _getVSCPFrame
             _getCANFrame
               _fifo_read
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _strcpy
     _strchr
     _readRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _sprintf
       _isdigit
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___wmul
     _WriteUSART
     _printBinary
       _WriteUSART
     _writeRegisterExtended
       _sendVSCPFrame
         _sendCANFrame
           _ECANSendMessage
             __CANIDToRegs
       _getVSCPFrame
         _getCANFrame
           _fifo_read
     _printNodeFirmwareVersion
       _putsUSART
         _WriteUSART
       _memset
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printGUID
       _putsUSART
         _WriteUSART
       _memset
       _strlen
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
       _strcat
     _printMDF
       _putsUSART
         _WriteUSART
       _memset
       _readRegister
         _sendVSCPFrame
           _sendCANFrame
             _ECANSendMessage
               __CANIDToRegs
         _getVSCPFrame
           _getCANFrame
             _fifo_read
     _setFilter
     __CANIDToRegs
   _doModeVscp
     _fifo_read
     _ECANSetOperationMode
     _receiveSendMultiEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _receiveSendEventCANAL
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
       _getCANFrame
         _fifo_read
     _calcCRC
       _crc8
         _init_crc8
     _sendVSCPDriverNack
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverErrorFrame
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverAck
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _receiveVSCPModeCanalMsg
       _memcpy
       _sendCANFrame
         _ECANSendMessage
           __CANIDToRegs
     _receiveVSCPModeMultiCanalMsg
     _sendVSCPModeCapabilities
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
     _sendVSCPDriverCommandReply
       _WriteUSART
       _sendEscapedUartData
         _WriteUSART
         _crc8
           _init_crc8
       _crc8
         _init_crc8
   _doModeSLCAN
     _putsUSART
       _WriteUSART
     _fifo_read
     _Busy_eep
     _Write_b_eep
     _ECANSetOperationMode
     _memset
     _receiveSendEventSLCAN
       _putsUSART
         _WriteUSART
       _WriteUSART
       _strlen
       _getCANFrame
         _fifo_read
       _ultoa
         ___lldiv
         ___llmod
           ___lldiv (ARG)
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
     _strlen
     _hexStringToBytes
       _strlen
       _nibbleFromChar
     _memcpy
     _sendCANFrame
       _ECANSendMessage
         __CANIDToRegs
   _doModeVscpNode

 _Interrupt (ROOT)
   _ReadUSART
   _fifo_write
   _ECANReceiveMessage
     __ECANPointBuffer
     __RegsToCANID
   _fifo_getFree
   i1_WriteTimer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0     1EE      16       32.2%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     3D      BD       9       73.8%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      E6       7       89.8%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     7C      86       5       83.8%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     26      42       1       69.5%
BITSFR_3             0      0       0      40        0.0%
SFR_3                0      0       0      40        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       E       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     36B       3        0.0%
DATA                 0      0     567      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Oct 01 22:46:20 2015

        ??_receiveVSCPModeMultiCanalMsg 001E                   __end_of_doModeVerbose 1584  
                          printBinary@i 0022                             fifo_write@f 0001  
                           fifo_write@i 000F                             fifo_write@p 000D  
                                     _c 0040                          ??_fifo_getFree 0003  
                 __end_of_sendVSCPFrame 4594              doModeVerbose@filter_nodeid 0290  
                                    PL2 1584                                      PL4 15A0  
                                    PL6 15AE                                      PL8 1D2A  
                                    _id 003A                                      bsr 000FE0  
                   ___wmul@multiplicand 0020                             __CFG_BORV$3 000000  
                __end_of_doModeVscpNode 5844                                     PL10 37F4  
                                   PL20 2F9E                                     PL12 15F8  
                                   PL30 1636                                     PL22 2C92  
                                   PL14 1D48                                     PL40 1662  
                                   PL32 38E6                                     PL24 1612  
                                   PL16 1D58                                     PL50 1D98  
                                   PL42 4830                                     PL34 4274  
                                   PL26 1622                                     PL18 3B4C  
                                   PL60 3A24                                     PL52 1694  
                                   PL44 48D4                                     PL36 1D7E  
                                   PL28 39FE                                     PL70 391A  
                                   PL62 3C4A                                     PL54 1DAE  
                                   PL46 3A12                                     PL38 1648  
                                   PL80 21C2                                     PL72 4788  
                                   PL64 38F4                                     PL56 4C62  
                                   PL48 167C                                     PL90 56C8  
                                   PL82 2E22                                     PL74 3A38  
                                   PL66 1DBC                                     PL58 3F06  
                                   PL92 54C4                                     PL84 4416  
                                   PL76 1DD0                                     PL68 3908  
                                   PL94 36E8                                     PL86 41AE  
                                   PL78 392E                                     PL96 2FAE  
                                   PL88 1DE2                                     PL98 28E6  
               sendEscapedUartData@pcrc 0063                                     l441 33E2  
                                   l442 33EC                                     l540 1582  
                                   l444 33F8                                     l437 338C  
                                   l438 33CA                                     l545 0A56  
                                   l801 4398                                     l554 0ADC  
                                   l810 4402                                     l804 43BA  
                                   l900 41A4                                     l581 0C16  
                                   l573 0BA2                                     l565 0B78  
                                   l549 0BC2                                     l813 440C  
                                   l725 21C0                                     l822 47A8  
                                   l807 43CA                                     l831 47F0  
                                   l735 1EAC                                     l568 0B82  
                                   l840 4826                                     l760 20B0  
                                   l825 47B2                                     l834 4800  
                                   l674 2C90                                     l819 479E  
                                   l780 50F2                                     l852 4856  
                                   l828 47CE                                     l941 35E6  
                                   l861 48A4                                     l837 481C  
                                   l669 2B1C                                     l950 3616  
                                   l846 4842                                     l855 4872  
                                   l936 26D4                                     l944 35F0  
                                   l864 48C0                                     l792 4368  
                                   l937 26E6                                     l929 2640  
                                   l777 50E8                                     l785 5116  
                                   l849 484C                                     l873 40E8  
                                   l962 36E6                                     l858 4894  
                                   l882 4118                                     l947 35FA  
                                   l867 48CA                                     l795 4372  
                                   l891 4166                                     l972 2E76  
                                   l956 36D2                                     l876 40F2  
                                   l789 513A                                     l885 413A  
                                   l966 2E62                                     l798 437C  
                                   l894 417A                                     l991 2F92  
                                   l975 2E92                                     l959 36DC  
                                   l879 40FC                                     l888 414A  
                                   l969 2E6C                                     l897 419A  
                                   l994 2F9C                                     l988 2F88  
                          __CFG_CPB$OFF 000000                          getVSCPFrame@id 0076  
                         fifo_write@buf 0003                   ?_vscp_restoreDefaults 0001  
                  __size_of_WriteTimer0 0012                                     _dlc 0041  
                                   _pos 00E0                    __size_of_Write_b_eep 0034  
        __size_of_writeRegisterExtended 00EC                                     wreg 000FE8  
         __end_of_writeRegisterExtended 3D4A                                    PL100 44D2  
                                  PL102 3A4A                                    PL104 1DEC  
                          __CFG_LVP$OFF 000000                            __CFG_WDT$OFF 000000  
                                  l1110 3CAE                                    l1022 4428  
                                  l1031 4458                                    l1113 3D48  
                                  l1025 4432                                    l1034 44BE  
                                  l1028 443C                                    l1052 2D44  
                                  l1044 2CD8                                    l1133 53AE  
                                  l1037 44C8                                    l1071 2E20  
                                  l1232 4C0E                                    l1129 53A2  
                                  l1065 2DF6                                    l1049 2D0A  
                                  l1242 4F3A                                    l1058 2D94  
                                  l1235 4C32                                    l1083 45CC  
                                  l1075 3E32                                    l1180 23DE  
                                  l1092 4048                                    l1260 29D6  
                                  l1068 2E16                                    l1261 29E8  
                                  l1253 296A                                    l1086 4646  
                                  l1262 29FA                                    l1270 2AD0  
                                  l2047 3B42                                    l1095 40E0  
                                  l1263 2A0C                                    l1255 297C  
                                  l2048 3B4A                                    l1512 39FC  
                                  l1264 2A1E                                    l1256 298E  
                                  l1265 2A30                                    l1257 29A0  
                                  l1450 3510                                    l1282 5600  
                                  l1194 3F2E                                    l1266 2A42  
                                  l1258 29B2                                    l2323 4960  
                                  l1267 2A54                                    l1259 29C4  
                                  l1188 2466                                    l1452 352E  
                                  l1268 2A66                                    l1541 4272  
                                  l1269 2A78                                    l1278 4D6C  
                                  l2422 3EE2                                    l1711 1AE6  
                                  l1287 4A1E                                    l2512 4DE2  
                                  l1713 1B0C                                    l1705 1AA4  
                                  l1641 180E                                    l1625 16C8  
                                  l2354 4E4C                                    l1714 1B10  
                                  l1642 17BE                                    l1538 4252  
                                  l1458 35AC                                    l2364 50CA  
                                  l1732 1BB6                                    l1716 1B2C  
                                  l2540 4B50                                    l1805 5798  
                                  l2437 532C                                    l1661 1852  
                                  l2509 4DE6                                    l1806 579A  
                                  l1662 1856                                    l2542 4B44  
                                  l1566 4F50                                    l1574 4FAE  
                                  l2447 5582                                    l2543 4B48  
                                  l2528 5016                                    l1568 4F58  
                                  l1593 4A54                                    l1842 51CC  
                                  l1658 181E                                    l2490 5196  
                                  l1594 4ABA                                    l1843 51CE  
                                  l1764 583C                                    l1844 51D8  
                                  l1588 550E                                    l1845 51DA  
                                  l1677 1942                                    l1838 51B8  
                                  l1847 51F2                                    l1855 524A  
                                  l2567 5400                                    l2576 554C  
                                  l2488 513C                                    l2586 5446  
                                  l1789 5694                                    l7621 51AC  
                                  l7629 51BA                                    STR_1 7930  
                                  STR_2 72D2                                    STR_3 799E  
                                  STR_4 73EB                                    STR_5 7B2B  
                                  STR_6 7FD0                                    STR_7 7AED  
                                  STR_8 7FB7                                    STR_9 7F80  
                                  _PEIE 007F96                          sendCANFrame@id 0086  
                                  _RCIE 007CED                                    _RCIF 007CF5  
                                  _RCIP 007CFD                        ??_ECANInitialize 001F  
                                  _bDLE 0033                            __CFG_PWRT$ON 000000  
            __end_of_sendVSCPDriverNack 48D4                                    _bHex 00DC  
          doModeVerbose@filter_priority 028E                                    _crc8 5602  
                                  _data 01CC                                    _caps 01E4  
                                  _atoi 3A54                                    _main 32C4  
                                  _init 5336                                    _mode 00DF  
                                  _itoa 563A                                    fsr0h 000FEA  
                                  fsr1h 000FE2                                    indf0 000FEF  
                                  fsr0l 000FE9                                    fsr2h 000FDA  
                                  indf1 000FE7                                    fsr1l 000FE1  
                                  indf2 000FDF                                    fsr2l 000FD9  
                                  _utoa 48E2                     i1WriteTimer0@timer0 0001  
                                  prodh 000FF4                                    prodl 000FF3  
                                  start 02FE                            _sprintf$2031 007D  
                          _sprintf$2024 0079                            _sprintf$2025 007B  
          receiveSendMultiEventCANAL@id 0075               ECANReceiveMessage@dataLen 000A  
    __end_of_receiveSendMultiEventCANAL 2F9E              _receiveSendMultiEventCANAL 2E30  
                    doModeVerbose@count 02AB                   getVSCPFrame@pPriority 006D  
                    doModeVerbose@value 02B1                    __end_of_getVSCPFrame 4D6E  
                      __RegsToCANID@val 0003                        __RegsToCANID@ptr 0001  
                  __size_of_getCANFrame 009E                ?_receiveVSCPModeCanalMsg 0001  
                       ?_doModeVscpNode 0001                                   l12011 1B96  
                                 l10181 4F1A                                   l10173 4EF4  
                                 l12101 5388                                   l10085 4F62  
                                 l12031 1BD8                                   l12007 1B8C  
                                 l10087 4F68                                   _B0CON 000E20  
                                 l10185 4F2E                                   l10177 4F06  
                                 l12033 1BDE                                   l12017 1B9E  
                                 l12051 1C6A                                   l12043 1C00  
                                 l12027 1BC6                                   l12061 1CB0  
                                 l12109 53B8                                   l11263 46B8  
                                 l12071 1CEA                                   _B1CON 000E30  
                                 l11409 57C8                                   l13025 4E00  
                                 l12065 1CCA                                   l12057 1C8C  
                                 l12049 1C14                                   l12081 1D14  
                                 l11513 309A                                   l13027 4E0C  
                                 l12075 1D0C                                   l12067 1CDC  
                                 l12083 1D1C                                   l13203 33CC  
                                 l11277 46D6                                   l12093 57F8  
                                 l13037 4E3E                                   l13029 4E10  
                                 l13053 50BC                                   l13045 508A  
                                 l11621 23F8                                   l11613 23CE  
                                 l11541 21E8                                   l11461 5740  
                                 l14005 2BD0                                   l14101 1EA6  
                                 l13213 33F4                                   l13205 33DE  
                                 l13047 5096                                   l11527 30FC  
                                 l13311 039E                                   l14023 2BF6  
                                 l13231 3422                                   _B2CON 000E40  
                                 l13049 509A                                   l11633 2446  
                                 l11609 23BE                                   l11465 5750  
                                 l14041 2C3C                                   l14105 1EB6  
                                 l13233 3428                                   l13225 3412  
                                 l11811 1822                                   l11803 17FA  
                                 l11555 224A                                   l13403 065E  
                                 l14035 2C22                                   l15011 2DB2  
                                 l14211 2124                                   l13171 3326  
                                 l11805 1814                                   l11485 2FD6  
                                 l11637 2456                                   l13501 0A00  
                                 l13421 06E8                                   l14053 2C70  
                                 l14029 2C0A                                   l14205 210C  
                                 l14117 1EE6                                   l14213 2182  
                                 l13237 3434                                   l13229 341E  
                                 l11823 185C                                   l11807 1818  
                                 l15103 49AE                                   l14311 26C8  
                                 l11583 230E                                   l13503 0A14  
                                 l13431 0732                                   l13415 06BC  
                                 l13351 04E2                                   l13343 04A2  
                                 l13335 0462                                   l13327 0420  
                                 l13319 03DE                                   l14047 2C56  
                                 l14063 2C8E                                   l15007 2D9E  
                                 l14151 2028                                   l14143 1FB0  
                                 l14127 1F0E                                   l14223 21BE  
                                 _B3CON 000E50                                   l11921 19F4  
                                 l11905 19B8                                   l11817 183A  
                                 l11809 181C                                   l11753 16D2  
                                 l13265 41CC                                   l15121 49E8  
                                 l15105 49B0                                   l11569 22AC  
                                 l13409 0690                                   l14057 2C82  
                                 l14217 2196                                   l14161 2052  
                                 l11907 19BC                                   l11843 18A2  
                                 l11827 1862                                   l11835 1886  
                                 l11771 171C                                   l11755 16D6  
                                 l11763 16E4                                   l11747 16B0  
                                 l14307 26BC                                   l14235 24C4  
                                 l14323 4D70                                   l11499 3038  
                                 l15211 34D4                                   l14411 3F62  
                                 l11691 5712                                   l13507 0A24  
                                 l13427 0714                                   l13371 0588  
                                 l15043 5480                                   l14059 2C88  
                                 l14219 21A2                                   l14083 1E38  
                                 l11941 1A54                                   l11853 18CA  
                                 l11845 18B0                                   l11829 186E  
                                 l11757 16DA                                   l13277 425C  
                                 l15109 49B4                                   l14309 26C0  
                                 l14317 26E4                                   l12661 5596  
                                 l11597 2370                                   l15221 3514  
                                 l15053 55FE                                   l11693 571A  
                                 l13605 0C8E                                   l13525 0AA8  
                                 l13517 0A5E                                   l13461 086A  
                                 l13453 081E                                   l13445 07CE  
                                 l13437 076E                                   l13357 051E  
                                 l13285 030A                                   l15037 5462  
                                 l14181 20B6                                   l14173 2092  
                                 l11951 1A84                                   l11919 19F0  
                                 l11935 1A28                                   l11839 189C  
                                 l11759 16DE                                   l13279 4260  
                                 l14271 25AA                                   l14247 2510  
                                 l12663 559A                                   l14327 4DA8  
                                 l13703 0F86                                   l13631 0D90  
                                 l13623 0D12                                   l13607 0C9E  
                                 l13471 08E2                                   l13455 082E  
                                 l13439 0778                                   l13447 07DE  
                                 l13391 05F8                                   l13383 05CC  
                                 l13375 05A0                                   l13367 0568  
                                 l12807 3E88                                   l14095 1E82  
                                 l14087 1E5A                                   _B4CON 000E60  
                                 l11945 1A72                                   l11937 1A3A  
                                 l11881 194C                                   l11849 18BE  
                                 l11857 18D0                                   l14329 4DCE  
                                 l14337 4ACA                                   l15233 355E  
                                 l15241 357C                                   l13801 11FC  
                                 l13713 0FC2                                   l13537 0AF6  
                                 l13393 0608                                   l14185 20CC  
                                 l14089 1E5E                                   l15307 5322  
                                 l15323 5578                                   l15315 555A  
                                 l11963 1AC2                                   l11891 1980  
                                 l11867 190C                                   l11859 18FC  
                                 l11787 178C                                   l11779 1764  
                                 l14283 25F6                                   l14259 255E  
                                 l14443 5166                                   l14347 4B04  
                                 l14371 3AD0                                   l15227 3530  
                                 l15251 35A2                                   l14603 4B88  
                                 l13723 0FFA                                   l13707 0F94  
                                 l13643 0DD8                                   l13635 0D9E  
                                 l13619 0D02                                   l13563 0B9C  
                                 l13491 0986                                   l13467 08A6  
                                 l13387 05E2                                   l13379 05B6  
                                 l13299 0346                                   l12683 4AA6  
                                 l14195 20EE                                   l15317 5562  
                                 l15261 48EA                                   l15149 5656  
                                 l11957 1AA8                                   l11893 1984  
                                 l11885 196A                                   l15333 4FEA  
                                 l14357 3A56                                   l15253 35A4  
                                 l15181 4644                                   l14541 42BC  
                                 l14613 4BC4                                   l14429 3FC6  
                                 l14525 3D26                                   l13901 1558  
                                 l13813 1260                                   l13805 120A  
                                 l13733 1034                                   l13717 0FD0  
                                 l13661 0E78                                   l13629 0D7C  
                                 l13549 0B44                                   l13477 091E  
                                 l14701 2EF0                                   l12677 4A62  
                                 l15319 5566                                   l15271 4922  
                                 l11983 1B3C                                   l11799 17C4  
                                 l15087 4D0E                                   l15343 551C  
                                 l14375 3B0A                                   l14367 3AB4  
                                 l14359 3A5A                                   l15247 359E  
                                 l12871 5210                                   l14607 4BAE  
                                 l14527 3D46                                   l13815 126E  
                                 l13727 1008                                   l13647 0E0C  
                                 l13639 0DCA                                   l13495 0996  
                                 l13903 1564                                   _B5CON 000E70  
                                 l11993 1B5C                                   l11977 1B26  
                                 l11969 1AEA                                   l14297 264C  
                                 l15337 4FF8                                   l15329 4FB2  
                                 l14369 3ACA                                   l15193 3498  
                                 l12873 5218                                   l14553 433C  
                                 l14609 4BB6                                   l13761 1114  
                                 l13817 127C                                   l13737 1042  
                                 l13745 10A6                                   l13649 0E1A  
                                 l13577 0BE2                                   l14721 2F56  
                                 l13913 2AE4                                   l15339 5002  
                                 l15347 5538                                   l15363 5410  
                                 l15371 53CA                                   l15179 4624  
                                 l12867 51FE                                   l14547 4308  
                                 l14483 40BE                                   l14627 2A8A  
                                 l13771 114E                                   l13907 1580  
                                 l14707 2F0E                                   l13915 2AE8  
                                 l15357 57E6                                   l15349 553C  
                                 l15365 541A                                   l15373 53D4  
                                 l12869 5202                                   l14549 431E  
                                 l14581 3C08                                   l14485 40DE  
                                 l13853 13CE                                   l13829 1310  
                                 l13781 118A                                   l13765 1122  
                                 l13693 0F4C                                   l13677 0EDE  
                                 l13589 0C30                                   l13597 0C6E  
                                 l14725 2F78                                   l14717 2F32  
                                 l13933 2B34                                   l12797 3E44  
                                 l12973 550C                                   l12965 54FA  
                                 l12957 54E8                                   l15295 52FC  
                                 l11999 1B70                                   l14639 398E  
                                 l15199 34AA                                   l13871 1454  
                                 l13839 135A                                   l13791 11C2  
                                 l13775 115C                                   l13599 0C72  
                                 l15297 5304                                   l12985 5778  
                                 l14585 3C26                                   l14577 3BEA  
                                 l14569 3B86                                   l13857 13F4  
                                 l13849 13AE                                   l13785 1198  
                                 l13697 0F5A                                   l13937 2B3A  
                                 l15299 5308                                   l14579 3BF2  
                                 l13891 1510                                   l13795 11D0  
                                 l13947 2B50                                   l14773 36A8  
                                 l13981 2B9E                                   l13957 2B6C  
                                 l13973 2B74                                   ?_crc8 0060  
                                 l13895 1534                                   l13879 1494  
                                 l13887 14D4                                   l14679 2EC0  
                                 l13983 2BA4                                   l13897 1542  
                                 l14777 36C2                                   l14793 56FE  
                                 l13985 2BAA                                   l13987 2BAE  
                                 l14789 56DE                                   l13997 2BC4  
                                 l13989 2BB4                                   l14899 3DEE  
                                 l14999 2D58                    __size_of_doModeSLCAN 03CC  
                                 ?_atoi 0024                                   ?_main 00D5  
                                 ?_init 0001                                   ?_itoa 0069  
                         i1_WriteTimer0 5822                                   _EEADR 000FA9  
                                 STR_10 7F5E                                   STR_11 7F80  
                                 STR_12 7F92                                   STR_20 7F49  
                                 STR_13 7F80                                   STR_21 7D83  
                                 STR_30 7FF5                                   STR_14 7ECD  
                                 STR_22 7D97                                   STR_15 7F80  
                                 STR_31 7FF5                                   STR_23 7DD3  
                                 STR_32 7FF5                                   STR_16 7F50  
                                 STR_40 7DF8                                   STR_24 7D06  
                                 STR_17 7F80                                   STR_33 7FF5  
                                 STR_41 7FCB                                   STR_25 7BCF  
                                 STR_42 7F80                                   STR_50 7F2B  
                                 STR_34 7FF5                                   STR_18 7F0E  
                                 STR_26 7D6F                                   STR_19 7F80  
                                 STR_35 7FF5                                   STR_43 7FD9  
                                 STR_27 7DE6                                   STR_51 7C31  
                                 STR_44 7F80                                   STR_36 7F80  
                                 STR_52 7F2B                                   STR_60 7EEA  
                                 STR_28 7C49                                   STR_61 7F65  
                                 STR_29 7FEB                                   STR_45 7FC6  
                                 STR_53 7AAC                                   STR_37 7A49  
                                 STR_70 7F80                                   STR_46 7F80  
                                 STR_54 7F2B                                   STR_62 7FEE  
                                 STR_38 7FE8                                   STR_63 74C0  
                                 STR_39 7F80                                   STR_47 7FA3  
                                 STR_55 7E5E                                   STR_71 7458  
                                 STR_48 7F80                                   STR_72 7FAD  
                                 STR_56 7F65                                   STR_80 7A8B  
                                 STR_64 7A06                                   STR_73 7F2B  
                                 STR_65 7F65                                   STR_57 7FEE  
                                 STR_81 7FBC                                   STR_49 7FA8  
                                 STR_74 7C31                                   STR_58 7F65  
                                 STR_66 7FEE                                   STR_82 7DAB  
                                 STR_90 77FB                                   STR_75 7F2B  
                                 STR_91 7FF5                                   STR_83 7F65  
                                 STR_67 7F65                                   STR_59 7FEE  
                                 STR_76 7AAC                                   STR_84 7FEE  
                                 STR_68 7FEE                                   STR_92 7730  
                                 STR_85 74C0                                   STR_69 74C0  
                                 STR_77 7F2B                                   STR_93 7FF5  
                                 STR_86 7F80                                   STR_78 7C61  
                                 STR_94 7897                                   STR_95 7FF5  
                                 STR_87 7F57                                   STR_79 79C1  
                                 STR_88 7FF5                                   STR_96 78E5  
                                 STR_97 7FF5                                   STR_89 7218  
                                 STR_98 775A                                   STR_99 7F80  
          __end_of_printFirmwareVersion 4C62                                   _BSEL0 000DF8  
                       __end_of___lldiv 4E5E                                   ?_utoa 0060  
                       __end_of_calcCRC 5708                                   _T0CON 000FD5  
                       __end_of___llmod 50DC                                   u20315 3D86  
                                 u12380 526A                                   u21157 3336  
                                 u12390 5296                                   u20710 4D60  
                                 _LATC1 007C59                                   u12387 5264  
                                 u20715 4D56                                   u14165 56A0  
                                 u12397 5290                                   u14166 56A2  
                                 u16520 55B6                                   u15474 5398  
                                 u15475 5394                                   u16527 55B0  
                                 u18135 0E40                                   u18225 15B6  
                                 u18235 10CC                                   u18155 0F04  
                                 u18075 0CC4                                   u18325 12A2  
                                 u17605 0508                                   u19310 3A8C  
                                 u18335 12EA                                   u17615 0544  
                                 u18345 1336                                   u17545 037A  
                                 u19330 3AAA                                   u16850 5240  
                       __end_of___lwdiv 5336                                   u17715 062E  
                                 u17555 03C4                                   u18540 2B56  
                                 u17485 423E                                   u19317 3A86  
                                 u17805 0804                                   u17565 0404  
                                 u19350 3AC6                                   u19415 451A  
                                 u17575 0446                                   _ERRIE 007D1D  
                                 u19337 3AA4                                   u16857 5236  
                                 u17825 0854                                   u17585 0488  
                                 u19370 3AF4                                   u19290 3A76  
                                 u17835 0890                                   u17595 04C8  
                                 u19460 5158                                   u19380 3B1C  
                                 u19357 3AC0                                   u17845 08CC  
                                 u18910 1F7C                                   u17855 0908  
                                 u19480 518E                                   u18920 1F86  
                                 u19377 3AEE                                   u19297 3A70  
                                 u17865 0944                                   u18930 1F90  
                                 u19467 5152                                   u19387 3B16  
                                 u18915 1F7A                                   u19805 290E  
                                 u18925 1F84                                   u19806 2914  
                                 u19487 5188                                   u19815 2942  
                                 u19807 2922                                   u18935 1F8E  
                          _vscpPriority 00E3                                   u19816 2948  
                                 i1l401 018C                                   u19817 2956  
                                 i1l410 018A                                   u19835 3968  
                                 i1l404 018A                                   i1l413 017A  
                                 u19845 3978                                   u19855 3994  
                                 i1l416 0196                         __end_of___lwmod 558C  
                                 i1l419 01E4                                   i1l429 02E0  
                                 i1l399 0092                         sendCANFrame@dlc 008A  
                                 _MSEL0 000DF0                                   _MSEL1 000DF1  
                                 _MSEL2 000DF2                                   _RCREG 000FAE  
                                 _IRXIF 007D27                                   _RCSTA 000FAB  
                      printBinary@value 0021                                   _TMR0H 000FD7  
                                 _TMR0L 000FD6                                   _SPBRG 000FAF  
              writeRegisterExtended@reg 00AF                                   _TXREG 000FAD  
                                 _TXSTA 000FAC                          __CFG_EBTR0$OFF 000000  
                        __CFG_EBTR1$OFF 000000                          __CFG_EBTR2$OFF 000000  
                        __CFG_EBTR3$OFF 000000                                   _bOpen 00DD  
               readRegisterExtended@reg 00AF                           __CFG_WRTD$OFF 000000  
                        Read_b_eep@badd 001E                          __CFG_EBTRB$OFF 000000  
                      _hexStringToBytes 4A20                                   crc8@m 0062  
                                 _flags 0042                         __end_of_dpowers 7008  
                Write_b_eep@GIE_BIT_VAL 0021                         __end_of_isdigit 5780  
                                 _timer 0118                                   atoi@a 0063  
                                 atoi@s 0024                                   main@c 00DB  
                                 _ultoa 3E34              ??_printNodeFirmwareVersion 0027  
                      _printErrors$1402 008D                        _printErrors$1420 0093  
                      _printErrors$1414 0091                        _printErrors$1408 008F  
                      _printErrors$1429 0095                                   tablat 000FF5  
                      _printErrors$1396 008B                 ??_receiveSendEventCANAL 0027  
           __end_of_sendEscapedUartData 513C                                   plusw2 000FDB  
                                 utoa@c 0068                                   utoa@v 0066  
                                 status 000FD8                         __end_of_sprintf 1D2A  
               ??_receiveSendEventSLCAN 007A                         __end_of_strichr 554E  
                       __end_of_strcspn 540A                         __end_of_toupper 57EA  
                       __end_of_stristr 4DE8                            __end_ofPL100 44DE  
                          __end_ofPL102 3A54                            __end_ofPL104 1DF6  
     __size_of_receivePrintEventVerbose 0280                     doModeVerbose@i_1111 02B0  
             ?_receivePrintEventVerbose 0001                     doModeVerbose@p_1210 02BB  
                   doModeVerbose@p_1117 02B2                     doModeVerbose@p_1165 02B4  
                   doModeVerbose@p_1190 02B9                          WriteUSART@data 001E  
                  _ECANSetOperationMode 57BC                            _canInputFifo 01C4  
                       __initialization 5018                  doModeVerbose@page_1162 02A1  
         receiveSendMultiEventCANAL@dlc 0079                            __end_of_crc8 563A  
         receiveSendMultiEventCANAL@crc 007A                            __end_of_atoi 3B4C  
         receiveSendMultiEventCANAL@pos 007B                            __end_of_main 3440  
                          __end_of_init 537E                            __end_of_itoa 5672  
                          __end_of_utoa 4982                     doModeVerbose@ifmode 02B6  
                            _Read_b_eep 5810                     doModeVerbose@maskno 02A8  
                      __end_of_Busy_eep 5842                     doModeVerbose@nodeid 028C  
                         doModeSLCAN@id 0094                          __CFG_OSC$HSPLL 000000  
                         doModeSLCAN@rv 009A                       ??_ECANSendMessage 0069  
                        ?i1_WriteTimer0 0001              writeRegisterExtended@value 00B2  
                                ??_crc8 0025                   getVSCPFrame@pvscptype 006B  
                                ??_atoi 0060                  ??_vscp_restoreDefaults 0023  
                                ??_main 00DA                       readRegister@value 00B0  
                                ??_init 0022                                  ??_itoa 0025  
                                ??_utoa 0025                  doModeVerbose@mask_type 0292  
                         __activetblptr 000002                         _stateVscpDriver 0039  
                     __RegsToCANID@type 0004                    _can_transmitOverruns 0104  
            ECANReceiveMessage@msgFlags 000B                           ?_readRegister 00AD  
             __size_of__ECANPointBuffer 0076                                  _B0TXEN 006FC2  
                                _B1TXEN 006FC3                                  _B2TXEN 006FC4  
                doModeVerbose@preg_1169 0286                                  _B3TXEN 006FC5  
                                _B4TXEN 006FC6                                  _B5TXEN 006FC7  
           readRegisterExtended@timeout 00B0              ECANReceiveMessage@savedPtr 000C  
                                _CANCON 000F6F                        ___llmod@dividend 0065  
                                STR_100 7FB2                                  STR_101 7FF5  
                                STR_110 7FF5                                  STR_102 752A  
                                STR_103 790B                                  STR_111 7870  
                                STR_112 7F80                                  STR_104 7FF5  
                                STR_200 7F65                                  STR_120 7EBB  
                                STR_201 7FEE                                  STR_113 7F9E  
                                STR_121 7F86                                  STR_105 77AB  
                                STR_202 74C0                                  STR_106 7FF5  
                                STR_114 7FDD                                  STR_122 7EFE  
                                STR_130 7A6A                                  STR_210 767E  
                                STR_131 7F80                                  STR_123 7B48  
                                STR_107 7955                                  STR_115 7704  
                                STR_211 74F7                                  STR_203 737D  
                                STR_108 7FF5                                  STR_140 7F65  
                                STR_124 7FC1                                  STR_116 7F06  
                                STR_132 7B7F                                  STR_220 7822  
                                STR_212 755C                                  STR_204 7422  
                                STR_141 7FEE                                  STR_133 7D5B  
                                STR_213 7B0C                                  STR_125 7ACD  
                                STR_109 797A                                  STR_117 77D3  
                                STR_221 7783                                  STR_205 74C3  
                                STR_150 7FEE                                  STR_126 7F98  
                                STR_142 7EF6                                  STR_134 7ED6  
                                STR_118 7E87                                  STR_230 79E4  
                                STR_206 7849                                  STR_222 764F  
                                STR_214 758E                                  STR_207 716B  
                                STR_119 7F80                                  STR_143 7F6C  
                                STR_151 7F3B                                  STR_135 7EDE  
                                STR_127 7BB5                                  STR_215 76AC  
                                STR_231 7620                                  STR_223 710A  
                                STR_240 74C0                                  STR_152 7F65  
                                STR_144 7FEE                                  STR_136 7F7A  
                                STR_128 7EEE                                  STR_160 7E0A  
                                STR_216 7C01                                  STR_208 7B64  
                                STR_232 75F1                                  STR_224 71D5  
                                STR_241 714F                                  STR_153 7FEE  
                                STR_137 7FF3                                  STR_129 7F8C  
                                STR_161 7F73                                  STR_145 7F34  
                                STR_209 76D8                                  STR_217 7345  
                                STR_233 7192                                  STR_225 7076  
                                STR_146 7F65                                  STR_170 7FE1  
                                STR_138 7FF1                                  STR_162 7FE1  
                                STR_154 7F2D                                  STR_242 7E4F  
                                STR_250 7DBF                                  STR_218 7CC1  
                                STR_226 7C19                                  STR_234 75C0  
                                STR_171 74C0                                  STR_163 74C0  
                                STR_155 7F65                                  STR_147 7FEE  
                                STR_251 7FFD                                  STR_139 7F42  
                                STR_243 7EE6                                  STR_219 7A28  
                                STR_235 73B4                                  STR_227 7028  
                                STR_156 7FEE                                  STR_244 7FF9  
                                STR_252 7FF7                                  STR_148 7EC4  
                                STR_260 7EA7                                  STR_164 7E3E  
                                STR_228 7D47                                  STR_172 7D32  
                                STR_180 7CA9                                  STR_236 725A  
                                STR_253 74C0                                  STR_157 7FF5  
                                STR_149 7F65                                  STR_173 7F73  
                                STR_165 7F73                                  STR_181 7F16  
                                STR_245 7FE5                                  STR_261 7CEF  
                                STR_237 78BE                                  STR_229 70C3  
                                _EEDATA 000FA8                                  STR_262 74C0  
                                STR_190 7FE1                                  STR_182 7FE1  
                                STR_174 7FE1                                  STR_166 7FE1  
                                STR_246 7FFB                                  STR_254 7E9D  
                                STR_158 7E92                                  STR_238 714F  
                                STR_255 74C0                                  STR_247 74C0  
                                STR_191 74C0                                  STR_183 74C0  
                                STR_175 74C0                                  STR_167 74C0  
                                STR_159 7FD5                                  STR_263 7E1C  
                                STR_239 7B9A                                  STR_256 7F26  
                                STR_248 7E6D                                  STR_264 7E2D  
                                STR_168 7D1C                                  STR_176 7CD8  
                                STR_184 7C91                                  STR_192 7BE8  
                                STR_249 74C0                                  STR_193 7F65  
                                STR_169 7F73                                  STR_185 7F16  
                                STR_257 7F1E                                  STR_177 7F16  
                                STR_194 7FEE                                  STR_186 7FE1  
                                STR_178 7FE1                                  STR_258 7E7B  
                                STR_195 74C0                                  STR_187 74C0  
                                STR_179 74C0                                  STR_259 7EB1  
                                STR_188 7C91                                  STR_196 7298  
                                STR_189 7F16                                  STR_197 748E  
                                STR_198 730C                                  STR_199 7C79  
                                _EECON2 000FA7            __end_of_readRegisterExtended 40E2  
                                _CIOCON 000F73                                  ?_ultoa 006D  
          ??_sendVSCPDriverCommandReply 0027                    __end_of_fifo_getFree 4788  
                         ?_init_app_ram 0001                                  i1l1522 4ECA  
                                _MDSEL0 007BBE                                  i1l1517 38E4  
                                _MDSEL1 007BBF                                  i1l1550 37F2  
                                i1l1470 28E4                                  i1l1463 2720  
                                i1l1480 27A4                                  i1l1473 27EE  
                                i1l1482 27B8                                  i1l1474 276E  
                                i1l1484 27C8                                  i1l1476 277C  
                                i1l1549 373A                                  i1l1494 2852  
                                i1l1486 27D8                                  i1l1478 2790  
                                i1l1495 286C                                  i1l1868 57AC  
                                i1l6401 3708                                  i1l6421 37D8  
                                i1l6409 3744                                  i1l6433 4740  
                            _OpenTimer0 5780                                  i1l6419 37CE  
                                i1l9509 3880                                  i1l9481 4E76  
                                i1l9491 4EA0                                  i1l9483 4E80  
                                i1l9485 4E8A                                  i1l9477 4E64  
                                i1l9741 270E                                  i1l9901 011A  
                                i1l9487 4E94                                  i1l9479 4E6C  
                                i1l9495 4EAC                                  i1l9751 2738  
                                i1l9911 014A                                  i1l9489 4E9A  
                                i1l9809 2802                                  i1l9921 0182  
                                i1l9913 0156                                  i1l9905 012C  
                                i1l9819 2822                                  i1l9931 01D0  
                                i1l9923 0194                                  i1l9907 0138  
                                i1l9845 289A                                  i1l9853 28B8  
                                i1l9837 286E                                  i1l9757 274E  
                                i1l9765 275C                                  i1l9941 025E  
                                i1l9933 01EC                                  i1l9925 019E  
                                i1l9917 0168                                  i1l9759 2758  
                                i1l9951 02D0                                  i1l9943 0262  
                                i1l9935 01F4                                  i1l9927 01C0  
                                i1l9919 0172                                  i1l9871 003C  
                                i1l9953 02D2                                  i1l9945 029C  
                                i1l9937 0220                                  i1l9929 01C8  
                                i1l9881 00A6                                  i1l9873 0042  
                                i1l9859 28CE                                  i1l9947 02A0  
                                i1l9939 0222                                  i1l9891 00E8  
                                i1l9883 00B8                                  i1l9875 007E  
                                i1l9949 02CC                                  i1l9893 00F0  
                                i1l9885 00C8                                  i1l9877 008E  
                                i1l9869 0034                                  i1l9959 02DE  
                                i1l9895 00FC                                  i1l9887 00CC  
                                i1l9879 009A                                  i1l9889 00D8  
                                i1l9899 010E                         _init_app_eeprom 4648  
                    __size_of_ReadUSART 001E                                  _RXB0IF 007D20  
                                _RXB1IF 007D21                                  _SPBRGH 000FB0  
                ECANReceiveMessage@data 0008                  ECANReceiveMessage@mode 0010  
                ECANReceiveMessage@temp 0011                                  _RXBnIE 007D19  
                                _RXBnIF 007D21                       getVSCPFrame@pData 006F  
            ??_sendVSCPDriverErrorFrame 0027                       getVSCPFrame@pSize 006E  
                    _doModeVerbose$1141 0296                      _doModeVerbose$1152 029A  
                    _doModeVerbose$1129 0294                      _doModeVerbose$1146 0298  
                    _doModeVerbose$1156 029C                      _doModeVerbose$1181 029E  
                 ?_ECANSetOperationMode 0001                      __CANIDToRegs@Value 0060  
                    __size_of_Interrupt 02E6                readRegisterExtended@page 00AD  
                    __size_of_OpenUSART 005C                        fifo_write@nbytes 0005  
                        getCANFrame@pid 0024                                  ___wmul 56A6  
                            _bInitiated 0034                          __CFG_STVREN$ON 000000  
                             ??___lldiv 0026                               ??_calcCRC 0027  
                                _cmdbuf 0124                               ??___llmod 0026  
                      OpenTimer0@config 001E                  receiveSendEventCANAL@i 0073  
                             ??___lwdiv 0022                               ??___lwmod 0022  
         _receivePrintEventVerbose$1303 009A           _receivePrintEventVerbose$1283 0092  
         _receivePrintEventVerbose$1293 0096           _receivePrintEventVerbose$1278 0090  
         _receivePrintEventVerbose$1288 0094           _receivePrintEventVerbose$1298 0098  
                                _memcpy 5450                                  _memset 5736  
                                clear_0 5020                                  clear_1 5034  
                                clear_2 5046                                  clear_3 5052  
                                clear_4 505E                                  clear_5 506A  
                         ?_sendCANFrame 0086                                  _strcat 51F4  
                                _strchr 513C                                  _strcpy 5708  
                                _strlen 558C                                  _wrkbuf 0174  
                                _strtok 4ABC                                  _strspn 540A  
   __size_of_sendVSCPDriverCommandReply 00CC                               ??_isdigit 001E  
                receiveSendEventSLCAN@i 0082                        __end_of_printMDF 4BE6  
                          __mediumconst 6FB0                          ??_readRegister 00B1  
                                tblptrh 000FF7                                  tblptrl 000FF6  
                                tblptru 000FF8                            ?_printBinary 0001  
               __size_of_nibbleFromChar 003E                                  ultoa@c 0079  
                                ultoa@v 0075                            ?_printErrors 0001  
                             ??_sprintf 0075                               ??_strichr 0023  
                             ??_strcspn 0024                               ??_toupper 001E  
                        ??_init_app_ram 0020                               ??_stristr 0025  
            ??_sendVSCPModeCapabilities 0027              doModeVerbose@mask_priority 0291  
                      __end_of_strnicmp 5018                              __accesstop 0060  
               __end_of__initialization 5070                    _printFirmwareVersion 4BE6  
                 __size_of_getVSCPFrame 007E               receiveSendEventCANAL@data 006B  
                  doModeVerbose@id_1222 02A3                              _WriteUSART 57EA  
                        __pcstackCOMRAM 0001                __size_of_printStatistics 0188  
                  _printStatistics$1371 008B                    _printStatistics$1383 008F  
                  _printStatistics$1377 008D                    _printStatistics$1389 0091  
                 _uart_transmitOverruns 0120                             ?_Read_b_eep 001E  
                       ??i1_WriteTimer0 0003                           __end_of_ultoa 3F06  
                            __end_ofPL2 15A0                              __end_ofPL4 15AE  
                            __end_ofPL6 15F8                              __end_ofPL8 1D48  
                        ??_sendCANFrame 0027                       __end_of_ReadUSART 57BC  
                         ?__RegsToCANID 0001             __size_of_ECANReceiveMessage 01FE  
                    sendVSCPFrame@pData 0093                         readRegister@reg 00AD  
                  sendVSCPDriverAck@crc 0066                      __size_of_findNodes 00E6  
                        doModeSLCAN@dlc 0098                      __size_of_fifo_init 0032  
                    __size_of_fifo_read 00B8                  getVSCPFrame@pvscpclass 0075  
                       _fifo_canrxcount 0035                 __end_of_init_app_eeprom 46F2  
                     __end_of_Interrupt 02FE                           ReadUSART@data 0001  
                    readRegister@nodeid 00B5                          _status_led_cnt 002D  
                    __RegsToCANID@Value 0007                              _crc8_table 0300  
                     __end_of_OpenUSART 51F4                 doModeVerbose@mask_class 028A  
             printNodeFirmwareVersion@i 00BB                         setFilter@filter 0022  
                          sprintf@width 0082        __end_of_printNodeFirmwareVersion 4360  
                            _doModeVscp 2AD2                                 ??_ultoa 0027  
                          _getVSCPFrame 4CF0                              __pbssBANK0 00DC  
                            __pbssBANK1 0100                              __pbssBANK2 0200  
                            __pbssBANK3 0300                             ?_OpenTimer0 0001  
                            calcCRC@crc 0067                               ?_Busy_eep 0001  
                            calcCRC@len 0065                   ?_printFirmwareVersion 0001  
                ??_ECANSetOperationMode 001E                      __size_of_init_crc8 006A  
                         setFilter@eidh 0025                           setFilter@eidl 0026  
                         setFilter@sidh 0023                           setFilter@sidl 0024  
                      ??_doModeVscpNode 001E                              _nTimeStamp 0037  
           ?_receiveSendMultiEventCANAL 0001                __end_of_hexStringToBytes 4ABC  
              ECANSetOperationMode@mode 001E                                 ?___wmul 001E  
                    __size_of_setFilter 01DE                                 _B0RXFUL 007107  
                               _B1RXFUL 007187                    __ECANRxFilterHitInfo 0032  
                               _B2RXFUL 007207                                 _B3RXFUL 007287  
                               _B4RXFUL 007307                      _sendVSCPDriverNack 483E  
                               _B5RXFUL 007387                        WriteTimer0@timer 0020  
                         putsUSART@data 001F                    _readRegisterExtended 4000  
                               ?_memcpy 001E                                 _ECANCON 000F77  
                               ?_memset 001E                           ??_WriteTimer0 0020  
                        ??__RegsToCANID 0005                           ??_Write_b_eep 0021  
                 sendVSCPFrame@priority 0091                                 _BRGCON1 000F70  
                               _BRGCON2 000F71                                 _BRGCON3 000F72  
                               ?_strcat 001E                                 ?_strchr 001E  
                               ?_strcpy 001E                                 ?_strlen 001E  
                               ?_strtok 0064                                 ?_strspn 0060  
                            _cntRxBytes 0108                              _cntTxBytes 0110  
                    __size_of_printGUID 00F0                     ?_sendVSCPDriverNack 0001  
                            _fifo_write 36F6                      __size_of_printHelp 0180  
                    __size_of_printMode 0072                   sendVSCPFrame@vscptype 008F  
                 __size_of_fifo_getFree 0096                 doModeVerbose@value_1164 02AA  
                     sendCANFrame@pdata 008B                              _made_table 002B  
                               _RXB0CON 000F60                                 _RXB1CON 000F50  
                               _RXB0FUL 007B07                        __ECANPointBuffer 4E5E  
                               _TXB0CON 000F40                                 _TXB1CON 000F30  
                               _TXB2CON 000F20                      __size_of_putsUSART 0054  
    __end_of_sendVSCPDriverCommandReply 41AE              _sendVSCPDriverCommandReply 40E2  
                               _RXFCON0 000DD4                                 _RXFCON1 000DD5  
                 _writeRegisterExtended 3C5E        __size_of_receiveVSCPModeCanalMsg 00EA  
                __size_of_doModeVerbose 1282                    sendEscapedUartData@c 0065  
                __size_of_sendVSCPFrame 00B6                     __size_of_Read_b_eep 0012  
                            ??_Busy_eep 001E        __end_of_sendVSCPDriverErrorFrame 4416  
        __size_of_receiveSendEventCANAL 013A           __end_of_receiveSendEventCANAL 36E8  
                  ??_sendVSCPDriverNack 0027              printFirmwareVersion@wrkbuf 006F  
        __size_of_receiveSendEventSLCAN 0180                         _ECANSendMessage 3440  
         __end_of_receiveSendEventSLCAN 2E22                                 __Hparam 0000  
                     __end_of_findNodes 4000                                 __Lparam 0000  
                     __end_of_fifo_init 54C4                       __end_of_fifo_read 4274  
                         ??_getCANFrame 0024                             ?_WriteUSART 0001  
            receiveVSCPModeCanalMsg@dlc 00AD                    __end_of_readRegister 4648  
                             ?_printMDF 0001                                 _bSilent 00DE  
             receiveVSCPModeCanalMsg@id 00A9                           ??_doModeSLCAN 008D  
                               ___lldiv 4DE8                         __size_of___wmul 0022  
                               _calcCRC 56D8                         getCANFrame@pdlc 0068  
                               ___llmod 507A                                 ___lwdiv 52EC  
                             _FIFOEMPTY 007BA7                                 ___lwmod 554E  
                 ?_readRegisterExtended 00AD             printNodeFirmwareVersion@buf 00B7  
                  __end_of_init_app_ram 52EC                            _fifo_getFree 46F2  
                          init_crc8@crc 0022                                 __pcinit 5018  
                       __size_of_memcpy 0042                         __size_of_memset 002C  
                               __ramtop 0600                     __size_of_OpenTimer0 001E  
                             ?_strnicmp 0060                                 __ptext0 32C4  
                               __ptext1 5842                                 __ptext2 1DF6  
                               __ptext3 4A20                                 __ptext4 54D2  
               receiveSendEventCANAL@id 0074                                 __ptext5 2CA2  
                               __ptext6 3E34                                 __ptext7 2AD2  
                               __ptext8 40E2                                 __ptext9 4424  
                               crc8@crc 0060           printNodeFirmwareVersion@value 00BA  
                     ??_printStatistics 0027                               _T0CONbits 000FD5  
                       __size_of_strcat 0056                         __size_of_strchr 005C  
                       __size_of_strcpy 002E                         __size_of_strlen 003C  
                     __end_of_hexpowers 7028                         __size_of_strtok 0096  
                       __size_of_strspn 0046                                 _dpowers 6FE0  
                     __end_of_init_crc8 4FB0                                 _isdigit 5762  
        printNodeFirmwareVersion@nodeid 00B6                     __end_of_WriteTimer0 5810  
                        _nibbleFromChar 54D2                        ?_init_app_eeprom 0001  
                   __end_of_Write_b_eep 56A6                                 _sprintf 16AA  
      __end_of_sendVSCPModeCapabilities 44D2                       __end_of_setFilter 2AD2  
                               _strichr 5510                          doModeVerbose@c 02AC  
                        doModeVerbose@i 02A9                          doModeVerbose@p 02B7  
                               _strcspn 53C4                                 _toupper 57D4  
                           ?_doModeVscp 0001                                 _stristr 4D6E  
                  __size_of_printBinary 0046                    end_of_initialization 5070  
                     __end_of_octpowers 6FE0                    __size_of_printErrors 029A  
                               memcpy@d 0060                                 memcpy@n 0022  
                               memcpy@s 0062                  ??_printFirmwareVersion 0027  
                             i1u1200_20 0138                               i1u1200_21 0136  
                               itoa@buf 0069                               i1u1201_20 0148  
                             i1u1201_21 0146                               i1u1210_20 01D0  
                             i1u1202_20 0156                               i1u1210_21 01CE  
                             i1u1202_21 0154                               i1u1211_20 01EC  
                             i1u1203_20 0166                               i1u1211_21 01EA  
                             i1u1203_21 0164                               i1u1212_20 01F4  
                             i1u1204_20 0172                               i1u1212_21 01F2  
                             i1u1204_21 0170                               i1u1213_20 0220  
                             i1u1205_20 0182                                 memset@c 0020  
                             i1u1213_21 021E                               i1u1205_21 0180  
                             i1u1125_25 3848                               i1u1214_20 025E  
                             i1u1206_20 0194                               i1u1214_21 025C  
                             i1u1206_21 0192                                 memset@n 0022  
                               itoa@val 006B                               i1u1126_25 3858  
                               memset@p 0024                               i1u1215_20 029C  
                             i1u1207_20 019E                               i1u1215_21 029A  
                             i1u1207_21 019C                               i1u1127_25 3884  
                             i1u1216_20 02CC                               i1u1208_20 01C0  
                             i1u1216_21 02CA                               i1u1208_21 01BE  
                             i1u1217_20 02DC                               i1u1209_20 01C8  
                             i1u1217_21 02DA                               i1u1209_21 01C6  
                         __Lmediumconst 6FB0                    __end_of_sendCANFrame 5602  
                             i1u1165_25 2716                               i1u1165_27 2718  
                             i1u1191_20 003C                               i1u1191_21 003A  
                             i1u1192_20 007E                               i1u1192_21 007C  
                             i1u1193_20 009A                               i1u1193_21 0098  
                             i1u1194_20 00D8                               i1u1194_21 00D6  
                             i1u1195_20 00E8                               i1u1195_21 00E6  
                             i1u1196_20 00FC                               i1u1196_21 00FA  
                             i1u1197_20 010C                               i1u1197_21 010A  
                             i1u1198_20 011A                               i1u1198_21 0118  
                             i1u1199_20 012A                               i1u1199_21 0128  
                   _can_receiveOverruns 0100                 receiveSendEventSLCAN@id 007D  
                     __end_of_printGUID 3C4A                         ___lldiv@divisor 0022  
                     __end_of_printHelp 32C4                         ___lldiv@counter 0064  
                     __end_of_printMode 4F46                       ECANSendMessage@id 0061  
                     ECANSendMessage@pb 006A            __size_of_sendEscapedUartData 0060  
                             _RXF10EIDH 000D76                               _RXF10EIDL 000D77  
                             _RXF11EIDH 000D7A                               _RXF11EIDL 000D7B  
                            ??_printMDF 0027                               _RXF12EIDH 000D82  
                             _RCSTAbits 000FAB                               _RXF12EIDL 000D83  
                             _RXF13EIDH 000D86                               _RXF13EIDL 000D87  
                             _RXF14EIDH 000D8A                               _RXF14EIDL 000D8B  
                             _RXF15EIDH 000D92                               _RXF15EIDL 000D93  
                             _RXF10SIDH 000D74                               _RXF10SIDL 000D75  
                             _RXF11SIDH 000D78                               _RXF11SIDL 000D79  
                             _RXF12SIDH 000D80                               _RXF12SIDL 000D81  
                               postdec1 000FE5                                 postdec2 000FDD  
                             _RXF13SIDH 000D84                               _RXF13SIDL 000D85  
                             _RXF14SIDH 000D88                               _RXF14SIDL 000D89  
               __size_of_ECANInitialize 0080                               _RXF15SIDH 000D90  
                             _RXF15SIDL 000D91                                 postinc0 000FEE  
                               postinc1 000FE6                                 postinc2 000FDE  
                     __end_of_putsUSART 529E                      __ECANPointBuffer@b 0004  
                         _doModeVerbose 0302                                 utoa@buf 0060  
     __size_of_printNodeFirmwareVersion 00D0                                 utoa@val 0062  
             ?_printNodeFirmwareVersion 0001                           _sendVSCPFrame 44DE  
                               strlen@s 001E                              _sequencyno 0038  
                            _timekeeper 0027                               _RXM0EXIDM 0078CB  
                               strspn@i 0024                              ??_strnicmp 0022  
                   __end_of_getCANFrame 4A20                              findNodes@i 00C0  
                __end_of_nibbleFromChar 5510                     __end_of_doModeSLCAN 21C2  
                           ?_fifo_write 0001                              fifo_init@f 001E  
         __size_of_vscp_restoreDefaults 0008                              fifo_read@f 001E  
                            fifo_read@i 0066                              fifo_read@p 0064  
                             _TRISBbits 000F93                               _TRISCbits 000F94  
                ?_writeRegisterExtended 00AD       sendVSCPDriverCommandReply@cmdCode 0066  
                   __size_of_WriteUSART 0014             sendVSCPModeCapabilities@crc 0066  
               __end_of_ECANSendMessage 35AE                    _uart_receiveOverruns 011C  
              _receivePrintEventVerbose 2468                              _vscpNodeId 00E2  
                         ?__CANIDToRegs 001E                    __end_of__RegsToCANID 38E6  
                             _TXSTAbits 000FAC                      i1WriteTimer0@timer 0003  
                     doModeVerbose@page 02AD                       doModeVerbose@preg 0284  
                ??_readRegisterExtended 00B4                          _init_crc8$1962 001E  
                        ?_doModeVerbose 0001                            ??_Read_b_eep 0020  
                        ?_sendVSCPFrame 008D                          __end_of___wmul 56C8  
                   __size_of_doModeVscp 01C0                             _WriteTimer0 57FE  
                           _Write_b_eep 5672                          __end_of_memcpy 5492  
                        __end_of_memset 5762       __size_of_sendVSCPDriverErrorFrame 00B6  
             ?_sendVSCPDriverErrorFrame 0001                         ?_nibbleFromChar 0001  
                        __end_of_strcat 524A                          __end_of_strchr 5198  
                        __end_of_strcpy 5736                          __end_of_strlen 55C8  
              doModeVerbose@filter_type 028F                          __end_of_strtok 4B52  
                        __end_of_strspn 5450                             __end_ofPL10 3822  
                           __end_ofPL20 2FAE                             __end_ofPL12 1612  
                           __end_ofPL30 1648                             __end_ofPL22 2CA2  
                           __end_ofPL14 1D58                             __end_ofPL40 167C  
                           __end_ofPL32 38F4                             __end_ofPL24 1622  
                           __end_ofPL16 1D7E                             __end_ofPL50 1DAE  
                           __end_ofPL42 483E                             __end_ofPL34 4290  
                           __end_ofPL26 1636                             __end_ofPL18 3B5A  
                           __end_ofPL60 3A38                             __end_ofPL52 16AA  
                           __end_ofPL44 48E2                             __end_ofPL36 1D98  
                           __end_ofPL28 3A12                             __end_ofPL70 392E  
                           __end_ofPL62 3C5E                             __end_ofPL54 1DBC  
                           __end_ofPL46 3A24                             __end_ofPL38 1662  
                           __end_ofPL80 21CE                             __end_ofPL72 479A  
                           __end_ofPL64 3908                             __end_ofPL56 4C70  
                           __end_ofPL48 1694                             __end_ofPL90 56D8  
                           __end_ofPL82 2E30                             __end_ofPL74 3A4A  
                           __end_ofPL66 1DD0                             __end_ofPL58 3F1A  
                           __end_ofPL92 54D2                             __end_ofPL84 4424  
                           __end_ofPL76 1DE2                             __end_ofPL68 391A  
                           __end_ofPL94 36F6                             __end_ofPL86 41BC  
                           __end_ofPL78 3940                             __end_ofPL96 2FBC  
                           __end_ofPL88 1DEC                             __end_ofPL98 28F4  
                   start_initialization 5018                               _ReadUSART 579E  
                       findNodes@nFound 00BE                   doModeVerbose@reg_1163 02A2  
                 doModeVerbose@filterno 02A7                 _receiveVSCPModeCanalMsg 3D4A  
                   __CFG_BOREN$BOACTIVE 000000                            doModeSLCAN@c 0099  
                          ??_OpenTimer0 001E  sendVSCPDriverCommandReply@cmdReplyCode 0067  
                             _Interrupt 0018                          ??__CANIDToRegs 0025  
            readRegisterExtended@nodeid 00B8                               _OpenUSART 5198  
                    __end_of_Read_b_eep 5822                     sendVSCPFrame@nodeid 0090  
                       ___llmod@divisor 0069                   __size_of_readRegister 00B4  
                       ___llmod@counter 0026                       __size_of_Busy_eep 0006  
                 ECANReceiveMessage@ptr 0012                     __size_of_fifo_write 00FE  
                 __size_of_init_app_ram 004E                          _findNodes$1473 00BC  
              __end_of__ECANPointBuffer 4ED4                       __CANIDToRegs@type 0024  
                            init_crc8@i 0023                              init_crc8@j 0020  
                           _getCANFrame 4982                                ??___wmul 0022  
     __size_of_sendVSCPModeCapabilities 00AE                       ?_hexStringToBytes 0022  
                           _doModeSLCAN 1DF6               ?_sendVSCPModeCapabilities 0001  
            __end_of_ECANReceiveMessage 28E6                                ??_memcpy 0024  
                   readRegister@timeout 00AE                                ??_memset 0024  
                 sendVSCPDriverNack@crc 0066                doModeVerbose@mask_nodeid 0293  
                 __end_ofi1_WriteTimer0 5834                      ??_hexStringToBytes 0060  
                              ??_strcat 0022                                ??_strchr 0022  
                              ??_strcpy 0022                                ??_strlen 0020  
                    __end_of_OpenTimer0 579E                                ??_strtok 0026  
                              ??_strspn 0024                             __pbssBIGRAM 0400  
                           __pbssCOMRAM 0027                              ?_ReadUSART 0001  
                         __pcstackBANK0 0060                           __pcstackBANK2 0280  
                   __end_of__stringdata 7FFF                            _readRegister 4594  
                          _isdigit$2902 001F                   __size_of_sendCANFrame 003A  
           ?_sendVSCPDriverCommandReply 0066             sendVSCPDriverErrorFrame@crc 0067  
                      ?_ECANSendMessage 0061                       sendVSCPFrame@size 0092  
                          _init_app_ram 529E                              ?_Interrupt 0001  
                            ?_OpenUSART 001E                             sprintf@_val 0084  
                           sprintf@flag 0089                             sprintf@prec 0080  
                             __pnvBANK1 01E4                        _ledFunctionality 0036  
              doModeVerbose@nodeid_1161 028D                doModeVerbose@nodeid_1176 02AF  
                          setFilter@val 001E                        ___lwdiv@dividend 001E  
                       ??_doModeVerbose 00C1           __size_of_ECANSetOperationMode 0018  
                       _printStatistics 2FBC                            ??_WriteUSART 001E  
                       ??_sendVSCPFrame 0095                          _ECANInitialize 4C70  
                     _sendVSCPDriverAck 479A                           __pmediumconst 6FB0  
                              ?___lldiv 001E                                ?_calcCRC 0063  
                              ?___llmod 0065                               _findNodes 3F1A  
                              ?___lwdiv 001E                                ?___lwmod 001E  
                             _fifo_init 5492                               _fifo_read 41BC  
                    ?_sendVSCPDriverAck 0001                       __size_of_printMDF 0094  
                           __pintcodelo 0018                            _sendCANFrame 55C8  
                     WriteTimer0@timer0 001E                             _COMSTATbits 000F74  
                              ?_isdigit 0001               ??_receiveVSCPModeCanalMsg 008D  
                   ??_sendVSCPDriverAck 0027                       __size_of_strnicmp 0068  
                       printGUID@nodeid 00B6                     _sendEscapedUartData 50DC  
                             _hexpowers 7008                        ___lwdiv@quotient 0023  
                             _init_crc8 4F46                   __size_of__RegsToCANID 00C4  
             doModeVerbose@filter_class 0288                                ?_sprintf 006D  
                              ?_strichr 001F                             _cntRxFrames 010C  
                          ??_doModeVscp 0027                                ?_strcspn 0060  
                              ?_toupper 0001                                ?_stristr 0066  
                    __end_of_WriteUSART 57FE                          __size_of_ultoa 00D2  
                           _cntTxFrames 0114                         _can_inputBuffer 0400  
                        ___wmul@product 0022                  sendVSCPFrame@vscpclass 008D  
                             _setFilter 28F4                             strnicmp@len 0064  
                             _octpowers 6FB0                                _PIE1bits 000F9D  
           __size_of_sendVSCPDriverNack 0096                  __end_of_ECANInitialize 4CF0  
             __end_of_sendVSCPDriverAck 4830                                i1u630_25 3726  
                              i1u632_25 37BC                                i1u634_25 4718  
                              i1u629_25 3716                                _PIR1bits 000F9E  
                 _receiveSendEventCANAL 35AE                        ECANSendMessage@i 0083  
                      ECANSendMessage@j 007E                    ?_sendEscapedUartData 0063  
                 _receiveSendEventSLCAN 2CA2                                _RXF0EIDH 000F02  
                              _RXF0EIDL 000F03                                _RXB0OVFL 007BA7  
                              _RXF1EIDH 000F06                                _RXF1EIDL 000F07  
                              _RXB1OVFL 007BA6                                _RXF2EIDH 000F0A  
                              _RXF2EIDL 000F0B                                _RXF3EIDH 000F0E  
                              _RXF3EIDL 000F0F                                _RXF4EIDH 000F12  
                              _RXF4EIDL 000F13                                _RXF5EIDH 000F16  
                              _RXF5EIDL 000F17                                _RXF6EIDH 000D62  
           receiveSendMultiEventCANAL@i 0074                                _RXF6EIDL 000D63  
                     hexStringToBytes@i 0067                                _RXF7EIDH 000D66  
                              _RXF0SIDH 000F00                       hexStringToBytes@p 0065  
                              _RXF7EIDL 000D67                                _RXF0SIDL 000F01  
                             _printGUID 3B5A                                _RXF8EIDH 000D6A  
                              _RXF1SIDH 000F04                                _RXF8EIDL 000D6B  
                              _RXF1SIDL 000F05                                _RXF9EIDH 000D72  
                              _RXF2SIDH 000F08                                _RXF9EIDL 000D73  
                              _RXF2SIDL 000F09                                _RXF3SIDH 000F0C  
                              _RXF3SIDL 000F0D                              printGUID@i 00BB  
                              _RXF4SIDH 000F10                                _RXF4SIDL 000F11  
                              _RXF5SIDH 000F14                                _RXF5SIDL 000F15  
                              _RXF6SIDH 000D60                                _RXF6SIDL 000D61  
                              _RXM0EIDH 000F1A                                _RXF7SIDH 000D64  
                              _RXM0EIDL 000F1B                                _RXF7SIDL 000D65  
                              _RXM1EIDH 000F1E                                _RXF8SIDH 000D68  
                              _RXM1EIDL 000F1F                                _RXF8SIDL 000D69  
                              _RXF9SIDH 000D70                                _RXF9SIDL 000D71  
                              _RXFBCON0 000DE0                                _RXFBCON1 000DE1  
                              _RXFBCON2 000DE2                                _RXFBCON3 000DE3  
                              _RXFBCON4 000DE4                                _RXFBCON5 000DE5  
                              _RXFBCON6 000DE6                                _RXFBCON7 000DE7  
                            ?_findNodes 0001                               _printHelp 3144  
                              _RXM0SIDH 000F18                                _RXM0SIDL 000F19  
                              _RXM1SIDH 000F1C                                _RXM1SIDL 000F1D  
                             _printMode 4ED4                              ?_fifo_init 001E  
                            ?_fifo_read 001E                                _RXERRCNT 000F75  
                    __end_of_doModeVscp 2C92                                _TXERRCNT 000F76  
                  __end_of__CANIDToRegs 39FE                               _putsUSART 524A  
                           __stringdata 7028                       ___wmul@multiplier 001E  
                          __RegsToCANID 3822                               _vscpClass 003E  
               ??_writeRegisterExtended 00B4                         Write_b_eep@badd 001E  
                       Write_b_eep@bdat 0020                            ??_fifo_write 0009  
               __size_of_doModeVscpNode 0002              ??_receivePrintEventVerbose 008B  
                           ??_ReadUSART 0001                     getVSCPFrame@pNodeId 006C  
                         ??_printBinary 001F                        doModeVerbose@reg 02AE  
                         ??_printErrors 0027                              ?_init_crc8 0001  
                    _serial_inputBuffer 0200                               _rwtimeout 00E1  
             writeRegisterExtended@page 00AD    __end_of_receiveVSCPModeMultiCanalMsg 5846  
 __size_of_receiveVSCPModeMultiCanalMsg 0002            _receiveVSCPModeMultiCanalMsg 5844  
                           ??_Interrupt 0014                 __end_of_printStatistics 3144  
                           ??_OpenUSART 0020            writeRegisterExtended@timeout 00B0  
                              _Busy_eep 583C                __size_of_init_app_eeprom 00AA  
                            ?_setFilter 001E                         OpenUSART@config 0020  
                        findNodes@value 00BF            __end_of_vscp_restoreDefaults 583C  
                            _EECON1bits 000FA6           __size_of_printFirmwareVersion 007C  
       __end_of_receiveVSCPModeCanalMsg 3E34                         ?_ECANInitialize 0001  
                              __Hrparam 0000                    ECANReceiveMessage@id 000E  
                 ??_sendEscapedUartData 0027                                __Lrparam 0000  
                      __CANIDToRegs@val 0020                      __end_of_fifo_write 37F4  
                      __CANIDToRegs@ptr 001E             receiveVSCPModeCanalMsg@data 00A1  
                            ?_printGUID 0001                             doModeVscp@c 00AE  
                            ?_printHelp 0001                              ?_printMode 0001  
                       nibbleFromChar@c 001E                        ??_nibbleFromChar 001E  
                      __size_of___lldiv 0076                        __size_of_calcCRC 0030  
                      __size_of___llmod 0062                        __size_of___lwdiv 004A  
                      __size_of___lwmod 003E                            ?_WriteTimer0 001E  
                      getCANFrame@pdata 0069                            ?_Write_b_eep 001E  
                            ?_putsUSART 001F                         fifo_read@nbytes 0022  
                            sprintf@idx 0078                   hexStringToBytes@inhex 0025  
                              calcCRC@j 0066                              strcat@from 0020  
                              calcCRC@p 0063                        __size_of_isdigit 001E  
                       ___lwdiv@divisor 0020                         ___lwdiv@counter 0022  
                              __ptext10 5844                                __ptext11 3D4A  
                              __ptext20 5602                                __ptext12 5450  
                              __ptext21 4F46                                __ptext13 479A  
                              __ptext30 3B5A                                __ptext22 0302  
                              __ptext14 4360                                __ptext31 4290  
                              __ptext23 28F4                                __ptext15 483E  
                              __ptext40 21CE                                __ptext32 51F4  
                              __ptext24 3C5E                                __ptext16 56D8  
                              __ptext41 2FBC                                __ptext33 4594  
                              __ptext25 537E                                __ptext17 35AE  
                              __ptext50 57D4                                __ptext42 3A54  
                              __ptext34 44DE                                __ptext26 4000  
                              __ptext18 2E30                                __ptext51 558C  
                              __ptext43 4ABC                                __ptext35 55C8  
                              __ptext27 5708                                __ptext19 50DC  
                              __ptext60 5762                                __ptext52 2468  
                              __ptext44 53C4                                __ptext36 3440  
                              __ptext28 3F1A                                __ptext61 4BE6  
                              __ptext53 4CF0                                __ptext45 540A  
                              __ptext37 3940                                __ptext29 4B52  
                              __ptext70 4C70                                __ptext62 563A  
                              __ptext54 4982                                __ptext46 513C  
                              __ptext38 5736                                __ptext71 57BC  
                              __ptext63 48E2                                __ptext55 41BC  
                              __ptext47 4D6E                                __ptext39 3144  
                              __ptext80 5810                                __ptext72 5780  
                              __ptext64 554E                                __ptext56 16AA  
                              __ptext48 5510                                __ptext81 5492  
                              __ptext73 5198                                __ptext65 52EC  
                              __ptext57 56A6                                __ptext49 4FB0  
                              __ptext74 57FE                                __ptext66 4ED4  
                              __ptext58 507A                                __ptext83 5822  
                              __ptext75 5834                                __ptext67 524A  
                              __ptext59 4DE8                                __ptext84 46F2  
                              __ptext76 4648                                __ptext68 57EA  
                              __ptext85 26E8                                __ptext77 5672  
                              __ptext69 5336                                __ptext86 3822  
                              __ptext78 583C                                __ptext87 4E5E  
                              __ptext79 529E                                __ptext88 36F6  
                              __ptext89 579E                receiveSendEventCANAL@dlc 0078  
              receiveSendEventCANAL@crc 0079                          printMDF@nodeid 00B6  
                         ?_getVSCPFrame 006B                              strichr@chr 0021  
                      __size_of_sprintf 0680                              strichr@ptr 001F  
                      __size_of_strichr 003E                        __size_of_strcspn 0046  
                      __size_of_toupper 0016                        __size_of_stristr 007A  
                            strcpy@from 0020                          printGUID@value 00BA  
                   __end_of_printBinary 53C4                           __size_of_crc8 0038  
                         __size_of_atoi 00F8                           __size_of_main 017C  
                         __size_of_init 0048                           __size_of_itoa 0038  
         ?_receiveVSCPModeMultiCanalMsg 0001                     __end_of_printErrors 2468  
                         __size_of_utoa 00A0                  ?_receiveSendEventCANAL 0001  
                            strnicmp@s1 0060                              strnicmp@s2 0062  
            __size_of_sendVSCPDriverAck 0096          receiveSendMultiEventCANAL@data 006B  
                ?_receiveSendEventSLCAN 0001                _printNodeFirmwareVersion 4290  
                   ECANSendMessage@data 0065                ECANSendMessage@tempBSEL0 007F  
                              _printMDF 4B52                               printMDF@i 00BA  
                             printMDF@p 00B8                            ?_getCANFrame 0068  
                   ECANSendMessage@mode 007C                     ECANSendMessage@temp 0082  
                     ?__ECANPointBuffer 0001            ??_receiveSendMultiEventCANAL 0027  
                              atoi@sign 0062                             ??_findNodes 0027  
                          ?_doModeSLCAN 0001                             ??_fifo_init 0024  
                           ??_fifo_read 0060                                _vscpData 01DC  
         __size_of_readRegisterExtended 00E2                                main@argc 00D5  
                              main@argv 00D7                                _vscpSize 00E4  
                    ??__ECANPointBuffer 0004                                _vscpType 00E5  
                           _RXB0FILHIT0 007B00       sendVSCPDriverErrorFrame@errorcode 0066  
                       doModeVerbose@id 0280                         doModeVerbose@rv 02A0  
                              _strnicmp 4FB0                        init_app_eeprom@i 0022  
           writeRegisterExtended@nodeid 00B8                           Interrupt@fail 001D  
                       _serialInputFifo 01D4                             _RXB1CONbits 000F50  
                           _OSCTUNEbits 000F9B                              _INTCONbits 000FF2  
                        OpenUSART@spbrg 001E                     ECANReceiveMessage@i 000F  
                              memcpy@d1 001E                                memcpy@s1 0020  
             receivePrintEventVerbose@i 009C                                itoa@base 006D  
                              isdigit@c 0020                      _ECANReceiveMessage 26E8  
                              memset@p1 001E                             ??_init_crc8 001E  
                             ultoa@base 0073                          ??_getVSCPFrame 0071  
             __size_of_hexStringToBytes 009C                         sendVSCPFrame@id 00A9  
                              intlevel1 0000                               sprintf@ap 007F  
                             sprintf@sp 006D                    hexStringToBytes@size 0024  
                             strchr@chr 0020                        ?_printStatistics 0001  
              receiveSendEventSLCAN@dlc 0081                        ___lwmod@dividend 001E  
                             strchr@ptr 001E                     ?_ECANReceiveMessage 0008  
                      ___lldiv@dividend 001E                             ??_setFilter 0060  
                         printMDF@value 00B7     __size_of_receiveSendMultiEventCANAL 016E  
                         fifo_getFree@f 0001                               strcspn@s1 0060  
                             strcspn@s2 0062      receiveSendMultiEventCANAL@msgcount 0073  
               ECANSendMessage@msgFlags 0068                              _OSCCONbits 000FD3  
                             strnicmp@r 0024                               stristr@s1 0066  
                             stristr@s2 0068                      ECANSendMessage@ptr 0084  
                     ??_init_app_eeprom 0022                   __size_of__CANIDToRegs 00BE  
                           ??_printGUID 0027                             ??_printHelp 0023  
                           ??_printMode 0023                _sendVSCPDriverErrorFrame 4360  
                         ?_fifo_getFree 0001                  ECANSendMessage@dataLen 0067  
                   __ECANPointBuffer@pt 0005                    ??_ECANReceiveMessage 000C  
                           ??_putsUSART 0021                                utoa@base 0064  
                              ultoa@buf 006D                                ultoa@val 006F  
                         fifo_init@size 0022                                sprintf@c 0088  
                              sprintf@f 006F                     hexStringToBytes@buf 0022  
                              strcat@cp 0022                     hexStringToBytes@len 0063  
                        _doModeVscpNode 5842                                strcat@to 001E  
      __end_of_receivePrintEventVerbose 26E8                  ECANSendMessage@buffers 007D  
                      ___lldiv@quotient 0060                         ___lwmod@divisor 0020  
          __end_of_ECANSetOperationMode 57D4                    _vscp_restoreDefaults 5834  
                          printGUID@buf 00B7                                strcpy@cp 0022  
                              strlen@cp 0020                                strcpy@to 001E  
                       ___lwmod@counter 0022                                strcspn@i 0024  
                              toupper@c 001E                             _printBinary 537E  
                              strtok@s1 0064                                strtok@s2 0066  
                              strspn@s1 0060                                strspn@s2 0062  
                            _RXM1EXIDEN 0078EB                                strtok@sp 002F  
                ECANSendMessage@tempPtr 0080                             _printErrors 21CE  
                          fifo_init@buf 0020                            fifo_read@buf 0020  
         sendVSCPDriverCommandReply@crc 0068                            __CANIDToRegs 3940  
                __size_ofi1_WriteTimer0 0012                            _USART_Status 0031  
             readRegisterExtended@value 00B2                _sendVSCPModeCapabilities 4424  
              __size_of_ECANSendMessage 016E  
